    Finished release [optimized] target(s) in 0.08s
     Running `target/release/monoruby benchmark/app_fib.rb`
==> start whole compile: fib FuncId(82) self_class:Object start:[00000] bytecode:0x557dafc48240
<== finished compile. elapsed:25.4µs
offset:Pos(18896) code: 590 bytes  data: 4 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x3b780
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x3b78f
  00035: cmp    DWORD PTR [rdi+0x4],0x1
  00039: jne    0x3b78f
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 _%2 = %1 < 3: i16                    [Integer][Integer]
  0003f: mov    rdi,QWORD PTR [r14-0x38]
  00043: test   rdi,0x1
  0004a: je     0x3b79e
  00050: cmp    rdi,0x7
  00054: jge    0x68
:00002 condnotbr _%2 =>:00005
:00003 %2 = 1: i32
  0005a: mov    QWORD PTR [r14-0x40],0x3
:00004 ret %2
  00062: mov    rax,QWORD PTR [r14-0x40]
  00066: leave  
  00067: ret    
:00005 %2 = %1 - 1: i16                     [Integer][Integer]
  00068: mov    rdi,QWORD PTR [r14-0x38]
  0006c: test   rdi,0x1
  00073: je     0x3b7ad
  00079: sub    rdi,0x2
  0007d: jo     0x3b7ad
  00083: mov    QWORD PTR [r14-0x40],rdi
:00006 %2 = %0.call fib(%2; 1)              [Object]
  00087: mov    rdi,QWORD PTR [r14-0x30]
  0008b: cmp    DWORD PTR [rip+0xfffffffffffffd5f],0x1        # 0xfffffdf1
  00092: jne    0x3b7bc
  00098: cmp    DWORD PTR [rip+0xfffffffffffffd56],0x0        # 0xfffffdf5
  0009f: jne    0x3b7cb
  000a5: mov    QWORD PTR [rsp-0x28],0x0
  000ae: mov    rax,QWORD PTR [r14-0x30]
  000b2: mov    QWORD PTR [rsp-0x40],rax
  000b7: mov    rdi,0x1
  000be: mov    rax,QWORD PTR [r14-0x40]
  000c2: mov    QWORD PTR [rsp-0x48],rax
  000c7: mov    QWORD PTR [rsp-0x38],0x0
  000d0: movabs rax,0x1000400000052
  000da: mov    QWORD PTR [rsp-0x30],rax
  000df: movabs r13,0x557dafc48240
  000e9: mov    rsi,QWORD PTR [rbx]
  000ec: mov    QWORD PTR [rsp-0x18],rsi
  000f1: lea    rsi,[rsp-0x18]
  000f6: mov    QWORD PTR [rbx],rsi
  000f9: lea    r14,[rsp-0x10]
  000fe: mov    QWORD PTR [rsp-0x20],r14
  00103: call   0xffffffac
  00108: lea    r14,[rbp-0x8]
  0010c: mov    QWORD PTR [rbx],r14
  0010f: mov    r14,QWORD PTR [rbp-0x10]
  00113: test   rax,rax
  00116: je     0x3b7e2
  0011c: mov    QWORD PTR [r14-0x40],rax
:00007 
:00008 %3 = %1 - 2: i16                     [<INVALID>][<INVALID>]
  00120: cmp    DWORD PTR [rip+0x127],0x0        # 0x24e
  00127: jl     0x3b7f1
  0012d: je     0x3b800
  00133: sub    DWORD PTR [rip+0x114],0x1        # 0x24e
  0013a: xor    rdi,rdi
  0013d: jmp    0x3b7f1
  00142: mov    rdi,QWORD PTR [r14-0x38]
  00146: mov    rsi,0x5
  0014d: mov    rdx,rdi
  00150: mov    rcx,rsi
  00153: mov    rdi,rbx
  00156: mov    rsi,r12
  00159: movabs rax,0x557dadcb5750
  00163: call   rax
  00165: test   rax,rax
  00168: je     0x3b81c
  0016e: mov    QWORD PTR [r14-0x48],rax
:00009 %3 = %0.call fib(%3; 1)              [<INVALID>]
  00172: mov    r15d,0x1
  00178: movabs r13,0x557dafc482e0
  00182: cmp    QWORD PTR [r13+0x8],0x0
  00187: je     0x3b82b
  0018d: cmp    r15d,DWORD PTR [r13-0x8]
  00191: jne    0x3b82b
  00197: mov    eax,DWORD PTR [rip+0xfffffffffffffc54]        # 0xfffffdf1
  0019d: cmp    DWORD PTR [r13-0x4],eax
  001a1: jne    0x3b82b
  001a7: mov    QWORD PTR [rsp-0x28],0x0
  001b0: mov    rax,QWORD PTR [r14-0x30]
  001b4: mov    QWORD PTR [rsp-0x40],rax
  001b9: mov    rdi,0x1
  001c0: mov    rax,QWORD PTR [r14-0x48]
  001c4: mov    QWORD PTR [rsp-0x48],rax
  001c9: mov    QWORD PTR [rsp-0x38],0x0
  001d2: mov    r13,QWORD PTR [r13+0x8]
  001d6: mov    rax,QWORD PTR [r13+0x8]
  001da: mov    QWORD PTR [rsp-0x30],rax
  001df: mov    rax,QWORD PTR [r13+0x0]
  001e3: mov    r13,QWORD PTR [r13+0x10]
  001e7: mov    rsi,QWORD PTR [rbx]
  001ea: mov    QWORD PTR [rsp-0x18],rsi
  001ef: lea    rsi,[rsp-0x18]
  001f4: mov    QWORD PTR [rbx],rsi
  001f7: lea    r14,[rsp-0x10]
  001fc: mov    QWORD PTR [rsp-0x20],r14
  00201: call   rax
  00203: lea    r14,[rbp-0x8]
  00207: mov    QWORD PTR [rbx],r14
  0020a: mov    r14,QWORD PTR [rbp-0x10]
  0020e: test   rax,rax
  00211: je     0x3b86c
  00217: mov    QWORD PTR [r14-0x48],rax
:00010 
:00011 %2 = %2 + %3                         [<INVALID>][<INVALID>]
  0021b: mov    rdi,QWORD PTR [r14-0x40]
  0021f: mov    rsi,QWORD PTR [r14-0x48]
  00223: mov    rdx,rdi
  00226: mov    rcx,rsi
  00229: mov    rdi,rbx
  0022c: mov    rsi,r12
  0022f: movabs rax,0x557dadcb47b0
  00239: call   rax
  0023b: test   rax,rax
  0023e: je     0x3b87b
  00244: mov    QWORD PTR [r14-0x40],rax
:00012 ret %2
  00248: mov    rax,QWORD PTR [r14-0x40]
  0024c: leave  
  0024d: ret    
==> start whole compile: fib FuncId(82) self_class:Object start:[00000] bytecode:0x557dafc48240
<== finished compile. elapsed:16.1µs
offset:Pos(19490) code: 529 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x3b638
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x3b647
  00035: cmp    DWORD PTR [rdi+0x4],0x1
  00039: jne    0x3b647
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 _%2 = %1 < 3: i16                    [Integer][Integer]
  0003f: mov    rdi,QWORD PTR [r14-0x38]
  00043: test   rdi,0x1
  0004a: je     0x3b656
  00050: cmp    rdi,0x7
  00054: jge    0x68
:00002 condnotbr _%2 =>:00005
:00003 %2 = 1: i32
  0005a: mov    QWORD PTR [r14-0x40],0x3
:00004 ret %2
  00062: mov    rax,QWORD PTR [r14-0x40]
  00066: leave  
  00067: ret    
:00005 %2 = %1 - 1: i16                     [Integer][Integer]
  00068: mov    rdi,QWORD PTR [r14-0x38]
  0006c: test   rdi,0x1
  00073: je     0x3b665
  00079: sub    rdi,0x2
  0007d: jo     0x3b665
  00083: mov    QWORD PTR [r14-0x40],rdi
:00006 %2 = %0.call fib(%2; 1)              [Object]
  00087: mov    rdi,QWORD PTR [r14-0x30]
  0008b: cmp    DWORD PTR [rip+0xfffffffffffffb0d],0x1        # 0xfffffb9f
  00092: jne    0x3b674
  00098: cmp    DWORD PTR [rip+0xfffffffffffffb04],0x0        # 0xfffffba3
  0009f: jne    0x3b683
  000a5: mov    QWORD PTR [rsp-0x28],0x0
  000ae: mov    rax,QWORD PTR [r14-0x30]
  000b2: mov    QWORD PTR [rsp-0x40],rax
  000b7: mov    rdi,0x1
  000be: mov    rax,QWORD PTR [r14-0x40]
  000c2: mov    QWORD PTR [rsp-0x48],rax
  000c7: mov    QWORD PTR [rsp-0x38],0x0
  000d0: movabs rax,0x1000400000052
  000da: mov    QWORD PTR [rsp-0x30],rax
  000df: movabs r13,0x557dafc48240
  000e9: mov    rsi,QWORD PTR [rbx]
  000ec: mov    QWORD PTR [rsp-0x18],rsi
  000f1: lea    rsi,[rsp-0x18]
  000f6: mov    QWORD PTR [rbx],rsi
  000f9: lea    r14,[rsp-0x10]
  000fe: mov    QWORD PTR [rsp-0x20],r14
  00103: call   0xfffffd5a
  00108: lea    r14,[rbp-0x8]
  0010c: mov    QWORD PTR [rbx],r14
  0010f: mov    r14,QWORD PTR [rbp-0x10]
  00113: test   rax,rax
  00116: je     0x3b69a
  0011c: mov    QWORD PTR [r14-0x40],rax
:00007 
:00008 %3 = %1 - 2: i16                     [Integer][Integer]
  00120: mov    rdi,QWORD PTR [r14-0x38]
  00124: test   rdi,0x1
  0012b: je     0x3b6a9
  00131: sub    rdi,0x4
  00135: jo     0x3b6a9
  0013b: mov    QWORD PTR [r14-0x48],rdi
:00009 %3 = %0.call fib(%3; 1)              [Object]
  0013f: mov    rdi,QWORD PTR [r14-0x30]
  00143: cmp    DWORD PTR [rip+0xfffffffffffffa55],0x1        # 0xfffffb9f
  0014a: jne    0x3b6b8
  00150: cmp    DWORD PTR [rip+0xfffffffffffffa4c],0x0        # 0xfffffba3
  00157: jne    0x3b6c7
  0015d: mov    QWORD PTR [rsp-0x28],0x0
  00166: mov    rax,QWORD PTR [r14-0x30]
  0016a: mov    QWORD PTR [rsp-0x40],rax
  0016f: mov    rdi,0x1
  00176: mov    rax,QWORD PTR [r14-0x48]
  0017a: mov    QWORD PTR [rsp-0x48],rax
  0017f: mov    QWORD PTR [rsp-0x38],0x0
  00188: movabs rax,0x1000400000052
  00192: mov    QWORD PTR [rsp-0x30],rax
  00197: movabs r13,0x557dafc48240
  001a1: mov    rsi,QWORD PTR [rbx]
  001a4: mov    QWORD PTR [rsp-0x18],rsi
  001a9: lea    rsi,[rsp-0x18]
  001ae: mov    QWORD PTR [rbx],rsi
  001b1: lea    r14,[rsp-0x10]
  001b6: mov    QWORD PTR [rsp-0x20],r14
  001bb: call   0xfffffd5a
  001c0: lea    r14,[rbp-0x8]
  001c4: mov    QWORD PTR [rbx],r14
  001c7: mov    r14,QWORD PTR [rbp-0x10]
  001cb: test   rax,rax
  001ce: je     0x3b6de
  001d4: mov    QWORD PTR [r14-0x48],rax
:00010 
:00011 %2 = %2 + %3                         [Integer][Integer]
  001d8: mov    rdi,QWORD PTR [r14-0x40]
  001dc: mov    rsi,QWORD PTR [r14-0x48]
  001e0: test   rdi,0x1
  001e7: je     0x3b6ed
  001ed: test   rsi,0x1
  001f4: je     0x3b6ed
  001fa: sub    rdi,0x1
  001fe: add    rdi,rsi
  00201: jo     0x3b6ed
  00207: mov    QWORD PTR [r14-0x40],rdi
:00012 ret %2
  0020b: mov    rax,QWORD PTR [r14-0x40]
  0020f: leave  
  00210: ret    
