    Finished release [optimized] target(s) in 0.08s
     Running `target/release/monoruby benchmark/so_mandelbrot.rb`
==> start partial compile: /main FuncId(81) self_class:Object start:[00042] bytecode:0x564be397e420
<-- compile finished. end:[00067]
<== finished compile. elapsed:71.7µs
offset:Pos(18874) code: 653 bytes  data: 65 bytes
:00042 loop_start counter=5 jit-addr=0000000000000000
:00043 _%19 = %12 > %18                     [Integer][Integer]
  00000: mov    rdi,QWORD PTR [r14-0x90]
  00007: mov    rsi,QWORD PTR [r14-0xc0]
  0000e: test   rdi,0x1
  00015: je     0x3b7af
  0001b: test   rsi,0x1
  00022: je     0x3b7af
  00028: cmp    rdi,rsi
  0002b: jg     0x3b9e4
:00044 condbr _%19 =>:00067
:00045 %19 = %7 * %7                        [Float][Float]
  00031: mov    rdi,QWORD PTR [r14-0x68]
  00035: test   rdi,0x1
  0003c: jne    0x3b7be
  00042: test   rdi,0x2
  00049: je     0x85
  0004f: xorps  xmm2,xmm2
  00052: movabs rax,0x8000000000000002
  0005c: cmp    rdi,rax
  0005f: je     0x97
  00065: mov    rax,rdi
  00068: sar    rax,0x3f
  0006c: add    rax,0x2
  00070: and    rdi,0xfffffffffffffffc
  00074: or     rdi,rax
  00077: rol    rdi,0x3d
  0007b: movq   xmm2,rdi
  00080: jmp    0x97
  00085: call   0xffffb6c3
  0008a: test   rax,rax
  0008d: je     0x3b7be
  00093: movq   xmm2,xmm0
  00097: movq   xmm3,xmm2
  0009b: mulsd  xmm3,xmm2
:00046 %20 = %8 * %8                        [Float][Float]
  0009f: mov    rdi,QWORD PTR [r14-0x70]
  000a3: test   rdi,0x1
  000aa: jne    0x3b7cd
  000b0: test   rdi,0x2
  000b7: je     0xf3
  000bd: xorps  xmm4,xmm4
  000c0: movabs rax,0x8000000000000002
  000ca: cmp    rdi,rax
  000cd: je     0x105
  000d3: mov    rax,rdi
  000d6: sar    rax,0x3f
  000da: add    rax,0x2
  000de: and    rdi,0xfffffffffffffffc
  000e2: or     rdi,rax
  000e5: rol    rdi,0x3d
  000e9: movq   xmm4,rdi
  000ee: jmp    0x105
  000f3: call   0xffffb6c3
  000f8: test   rax,rax
  000fb: je     0x3b7cd
  00101: movq   xmm4,xmm0
  00105: movq   xmm5,xmm4
  00109: mulsd  xmm5,xmm4
:00047 %19 = %19 - %20                      [Float][Float]
  0010d: subsd  xmm3,xmm5
:00048 %13 = %19 + %9                       [Float][Float]
  00111: mov    rdi,QWORD PTR [r14-0x78]
  00115: test   rdi,0x1
  0011c: jne    0x3b7ec
  00122: test   rdi,0x2
  00129: je     0x165
  0012f: xorps  xmm6,xmm6
  00132: movabs rax,0x8000000000000002
  0013c: cmp    rdi,rax
  0013f: je     0x177
  00145: mov    rax,rdi
  00148: sar    rax,0x3f
  0014c: add    rax,0x2
  00150: and    rdi,0xfffffffffffffffc
  00154: or     rdi,rax
  00157: rol    rdi,0x3d
  0015b: movq   xmm6,rdi
  00160: jmp    0x177
  00165: call   0xffffb6c3
  0016a: test   rax,rax
  0016d: je     0x3b7ec
  00173: movq   xmm6,xmm0
  00177: movq   xmm7,xmm3
  0017b: addsd  xmm7,xmm6
:00049 %19 = 2: i16 * %7                    [Integer][Float]
  0017f: movq   xmm3,QWORD PTR [rip+0x10f]        # 0x296
  00187: mulsd  xmm3,xmm2
:00050 %19 = %19 * %8                       [Float][Float]
  0018b: mulsd  xmm3,xmm4
:00051 %14 = %19 + %10                      [Float][Float]
  0018f: mov    rdi,QWORD PTR [r14-0x80]
  00193: test   rdi,0x1
  0019a: jne    0x3b81b
  001a0: test   rdi,0x2
  001a7: je     0x1e4
  001ad: xorps  xmm8,xmm8
  001b1: movabs rax,0x8000000000000002
  001bb: cmp    rdi,rax
  001be: je     0x1f7
  001c4: mov    rax,rdi
  001c7: sar    rax,0x3f
  001cb: add    rax,0x2
  001cf: and    rdi,0xfffffffffffffffc
  001d3: or     rdi,rax
  001d6: rol    rdi,0x3d
  001da: movq   xmm8,rdi
  001df: jmp    0x1f7
  001e4: call   0xffffb6c3
  001e9: test   rax,rax
  001ec: je     0x3b81b
  001f2: movq   xmm8,xmm0
  001f7: movq   xmm9,xmm3
  001fc: addsd  xmm9,xmm8
:00052 %19 = %13
:00053 %20 = %14
:00054 %7 = %19
:00055 %8 = %20
:00056 %19 = %7 * %7                        [Float][Float]
  00201: movq   xmm2,xmm7
  00205: mulsd  xmm2,xmm7
:00057 %20 = %8 * %8                        [Float][Float]
  00209: movq   xmm3,xmm9
  0020e: mulsd  xmm3,xmm9
:00058 %19 = %19 + %20                      [Float][Float]
  00213: addsd  xmm2,xmm3
:00059 %20 = const[LIMIT_SQUARED]           [4.0]
  00217: mov    rax,QWORD PTR [rip+0xfffffffffffffbf8]        # 0xfffffe16
  0021e: cmp    rax,QWORD PTR [rip+0x91]        # 0x2b6
  00225: jne    0x3b8a2
  0022b: movq   xmm3,QWORD PTR [rip+0x93]        # 0x2c6
  00233: mov    rax,QWORD PTR [rip+0x6c]        # 0x2a6
  0023a: mov    QWORD PTR [r14-0xd0],rax
:00060 _%19 = %19 > %20                     [Float][Float]
  00241: ucomisd xmm2,xmm3
  00245: jbe    0x25e
:00061 condnotbr _%19 =>:00065
:00062 %11 = literal[true]
  0024b: mov    rax,0x1c
  00252: mov    QWORD PTR [r14-0x88],rax
:00063 br =>:00067
  00259: jmp    0x3b9fd
:00065 %12 = %12 + 1: i16                   [Integer][Integer]
  0025e: mov    rdi,QWORD PTR [r14-0x90]
  00265: test   rdi,0x1
  0026c: je     0x3b9ac
  00272: add    rdi,0x2
  00276: jo     0x3b9ac
  0027c: mov    QWORD PTR [r14-0x90],rdi
:00066 br =>:00042
  00283: jmp    0x3ba4e
:00067 loop_end
  00288: jmp    0x3ba3f
==> start partial compile: /main FuncId(81) self_class:Object start:[00024] bytecode:0x564be397e420
<-- compile finished. end:[00097]
<== finished compile. elapsed:117.9µs
offset:Pos(19592) code: 1997 bytes  data: 203 bytes
:00024 loop_start counter=5 jit-addr=0000000000000000
:00025 _%18 = %6 > %17                      [Integer][Integer]
  00000: mov    rdi,QWORD PTR [r14-0x60]
  00004: mov    rsi,QWORD PTR [r14-0xb8]
  0000b: test   rdi,0x1
  00012: je     0x3b7db
  00018: test   rsi,0x1
  0001f: je     0x3b7db
  00025: cmp    rdi,rsi
  00028: jg     0x7c8
:00026 condbr _%18 =>:00097
:00027 %7 = literal[0.0]
  0002e: movq   xmm2,QWORD PTR [rip+0x7a2]        # 0x7d8
  00036: movabs rax,0x8000000000000002
  00040: mov    QWORD PTR [r14-0x68],rax
:00028 %8 = literal[0.0]
  00044: movq   xmm3,QWORD PTR [rip+0x79c]        # 0x7e8
  0004c: movabs rax,0x8000000000000002
  00056: mov    QWORD PTR [r14-0x70],rax
:00029 %18 = literal[2.0]
  0005a: movq   xmm4,QWORD PTR [rip+0x796]        # 0x7f8
  00062: mov    rax,0x2
  00069: mov    QWORD PTR [r14-0xc0],rax
:00030 %18 = %18 * %6                       [Float][Integer]
  00070: mov    rdi,QWORD PTR [r14-0x60]
  00074: test   rdi,0x1
  0007b: je     0x3b7ea
  00081: sar    rdi,1
  00084: cvtsi2sd xmm5,rdi
  00089: mulsd  xmm4,xmm5
:00031 %18 = %18 / %1                       [Float][Integer]
  0008d: mov    rdi,QWORD PTR [r14-0x38]
  00091: test   rdi,0x1
  00098: je     0x3b7f9
  0009e: sar    rdi,1
  000a1: cvtsi2sd xmm6,rdi
  000a6: movq   rax,xmm6
  000ab: test   rax,rax
  000ae: je     0xffffb3c1
  000b4: divsd  xmm4,xmm6
:00032 %19 = literal[1.5]
  000b8: movq   xmm7,QWORD PTR [rip+0x748]        # 0x808
  000c0: movabs rax,0xffc0000000000002
  000ca: mov    QWORD PTR [r14-0xc8],rax
:00033 %9 = %18 - %19                       [Float][Float]
  000d1: movq   xmm8,xmm4
  000d6: subsd  xmm8,xmm7
:00034 %18 = literal[2.0]
  000db: movq   xmm4,QWORD PTR [rip+0x735]        # 0x818
  000e3: mov    rax,0x2
  000ea: mov    QWORD PTR [r14-0xc0],rax
:00035 %18 = %18 * %5                       [Float][Integer]
  000f1: mov    rdi,QWORD PTR [r14-0x58]
  000f5: test   rdi,0x1
  000fc: je     0x3b818
  00102: sar    rdi,1
  00105: cvtsi2sd xmm9,rdi
  0010a: mulsd  xmm4,xmm9
:00036 %18 = %18 / %1                       [Float][Integer]
  0010f: movq   rax,xmm6
  00114: test   rax,rax
  00117: je     0xffffb3c1
  0011d: divsd  xmm4,xmm6
:00037 %19 = literal[1.0]
  00121: movq   xmm7,QWORD PTR [rip+0x6ff]        # 0x828
  00129: movabs rax,0xff80000000000002
  00133: mov    QWORD PTR [r14-0xc8],rax
:00038 %10 = %18 - %19                      [Float][Float]
  0013a: movq   xmm10,xmm4
  0013f: subsd  xmm10,xmm7
:00039 %11 = literal[false]
  00144: mov    rax,0x14
  0014b: mov    QWORD PTR [r14-0x88],rax
:00040 %12 = 0: i32
  00152: mov    QWORD PTR [r14-0x90],0x1
:00041 %18 = const[ITER]                    [49]
  0015d: mov    rax,QWORD PTR [rip+0xfffffffffffff9e4]        # 0xfffffb48
  00164: cmp    rax,QWORD PTR [rip+0x6dd]        # 0x848
  0016b: jne    0x3b835
  00171: mov    rax,QWORD PTR [rip+0x6c0]        # 0x838
  00178: mov    QWORD PTR [r14-0xc0],rax
  0017f: jmp    0x3b8ec
:00042 loop_start counter=5 jit-addr=00007f6c087849ba
:00043 _%19 = %12 > %18                     [Integer][Integer]
  00184: mov    rdi,QWORD PTR [r14-0x90]
  0018b: mov    rsi,QWORD PTR [r14-0xc0]
  00192: test   rdi,0x1
  00199: je     0x3b929
  0019f: test   rsi,0x1
  001a6: je     0x3b929
  001ac: cmp    rdi,rsi
  001af: jg     0x3bb12
:00044 condbr _%19 =>:00067
:00045 %19 = %7 * %7                        [Float][Float]
  001b5: movq   xmm6,xmm2
  001b9: mulsd  xmm6,xmm2
:00046 %20 = %8 * %8                        [Float][Float]
  001bd: movq   xmm7,xmm3
  001c1: mulsd  xmm7,xmm3
:00047 %19 = %19 - %20                      [Float][Float]
  001c5: subsd  xmm6,xmm7
:00048 %13 = %19 + %9                       [Float][Float]
  001c9: movq   xmm8,xmm6
  001ce: addsd  xmm8,xmm4
:00049 %19 = 2: i16 * %7                    [Integer][Float]
  001d3: movq   xmm6,QWORD PTR [rip+0x67d]        # 0x858
  001db: mulsd  xmm6,xmm2
:00050 %19 = %19 * %8                       [Float][Float]
  001df: mulsd  xmm6,xmm3
:00051 %14 = %19 + %10                      [Float][Float]
  001e3: movq   xmm9,xmm6
  001e8: addsd  xmm9,xmm5
:00052 %19 = %13
:00053 %20 = %14
:00054 %7 = %19
:00055 %8 = %20
:00056 %19 = %7 * %7                        [Float][Float]
  001ed: movq   xmm2,xmm8
  001f2: mulsd  xmm2,xmm8
:00057 %20 = %8 * %8                        [Float][Float]
  001f7: movq   xmm3,xmm9
  001fc: mulsd  xmm3,xmm9
:00058 %19 = %19 + %20                      [Float][Float]
  00201: addsd  xmm2,xmm3
:00059 %20 = const[LIMIT_SQUARED]           [4.0]
  00205: mov    rax,QWORD PTR [rip+0xfffffffffffff93c]        # 0xfffffb48
  0020c: cmp    rax,QWORD PTR [rip+0x665]        # 0x878
  00213: jne    0x3b9b5
  00219: movq   xmm3,QWORD PTR [rip+0x667]        # 0x888
  00221: mov    rax,QWORD PTR [rip+0x640]        # 0x868
  00228: mov    QWORD PTR [r14-0xd0],rax
:00060 _%19 = %19 > %20                     [Float][Float]
  0022f: ucomisd xmm2,xmm3
  00233: jbe    0x24c
:00061 condnotbr _%19 =>:00065
:00062 %11 = literal[true]
  00239: mov    rax,0x1c
  00240: mov    QWORD PTR [r14-0x88],rax
:00063 br =>:00067
  00247: jmp    0x3bb45
:00065 %12 = %12 + 1: i16                   [Integer][Integer]
  0024c: mov    rdi,QWORD PTR [r14-0x90]
  00253: test   rdi,0x1
  0025a: je     0x3babf
  00260: add    rdi,0x2
  00264: jo     0x3babf
  0026a: mov    QWORD PTR [r14-0x90],rdi
:00066 br =>:00042
  00271: jmp    0x3bfa9
:00067 loop_end
:00068 %18 = %2 << 1: i16                   [Integer][Integer]
  00276: mov    rdi,QWORD PTR [r14-0x40]
  0027a: test   rdi,0x1
  00281: je     0x3bbac
  00287: mov    rsi,0x3
  0028e: mov    rcx,rsi
  00291: sar    rcx,1
  00294: js     0x3bbd5
  0029a: lzcnt  rax,rdi
  0029f: cmp    rcx,rax
  002a2: jg     0x3bbac
  002a8: sub    rdi,0x1
  002ac: shl    rdi,cl
  002af: or     rdi,0x1
  002b3: mov    QWORD PTR [r14-0xc0],rdi
:00069 condnotbr %11 =>:00072
  002ba: mov    rax,QWORD PTR [r14-0x88]
  002c1: or     rax,0x10
  002c5: cmp    rax,0x14
  002c9: je     0x2df
:00070 %19 = 0: i32
  002cf: mov    QWORD PTR [r14-0xc8],0x1
:00071 br =>:00073
  002da: jmp    0x3bc07
:00072 %19 = 1: i32
  002df: mov    QWORD PTR [r14-0xc8],0x3
  002ea: jmp    0x3bc3a
:00073 %2 = %18 | %19                       [Integer][Integer]
  002ef: mov    rdi,QWORD PTR [r14-0xc0]
  002f6: mov    rsi,QWORD PTR [r14-0xc8]
  002fd: test   rdi,0x1
  00304: je     0x3bc6d
  0030a: test   rsi,0x1
  00311: je     0x3bc6d
  00317: or     rdi,rsi
  0031a: mov    QWORD PTR [r14-0x40],rdi
:00074 %3 = %3 + 1: i16                     [Integer][Integer]
  0031e: mov    rdi,QWORD PTR [r14-0x48]
  00322: test   rdi,0x1
  00329: je     0x3bc96
  0032f: add    rdi,0x2
  00333: jo     0x3bc96
  00339: mov    QWORD PTR [r14-0x48],rdi
:00075 _%18 = %3 == 8: i16                  [Integer][Integer]
  0033d: mov    rdi,QWORD PTR [r14-0x48]
  00341: test   rdi,0x1
  00348: je     0x3bcbf
  0034e: cmp    rdi,0x11
  00352: jne    0x501
:00076 condnotbr _%18 =>:00084
:00077 %18 = %2.call chr()                  [<INVALID>]
  00358: cmp    DWORD PTR [rip+0x531],0x0        # 0x890
  0035f: jl     0x3bce8
  00365: je     0x3bd11
  0036b: sub    DWORD PTR [rip+0x51e],0x1        # 0x890
  00372: xor    rdi,rdi
  00375: jmp    0x3bce8
  0037a: movq   xmm0,xmm4
  0037e: call   0xffffb519
  00383: mov    QWORD PTR [r14-0x78],rax
  00387: movq   xmm0,xmm5
  0038b: call   0xffffb519
  00390: mov    QWORD PTR [r14-0x80],rax
  00394: mov    rdi,QWORD PTR [r14-0x40]
  00398: movabs rax,0x564be1ec7ec0
  003a2: call   rax
  003a4: mov    r15d,eax
  003a7: movabs r13,0x564be397e900
  003b1: cmp    QWORD PTR [r13+0x8],0x0
  003b6: je     0x3bd37
  003bc: cmp    r15d,DWORD PTR [r13-0x8]
  003c0: jne    0x3bd37
  003c6: mov    eax,DWORD PTR [rip+0xfffffffffffff76d]        # 0xfffffb39
  003cc: cmp    DWORD PTR [r13-0x4],eax
  003d0: jne    0x3bd37
  003d6: mov    QWORD PTR [rsp-0x28],0x0
  003df: mov    rax,QWORD PTR [r14-0x40]
  003e3: mov    QWORD PTR [rsp-0x40],rax
  003e8: mov    rdi,0x0
  003ef: mov    QWORD PTR [rsp-0x38],0x0
  003f8: mov    r13,QWORD PTR [r13+0x8]
  003fc: mov    rax,QWORD PTR [r13+0x8]
  00400: mov    QWORD PTR [rsp-0x30],rax
  00405: mov    rax,QWORD PTR [r13+0x0]
  00409: mov    r13,QWORD PTR [r13+0x10]
  0040d: mov    rsi,QWORD PTR [rbx]
  00410: mov    QWORD PTR [rsp-0x18],rsi
  00415: lea    rsi,[rsp-0x18]
  0041a: mov    QWORD PTR [rbx],rsi
  0041d: lea    r14,[rsp-0x10]
  00422: mov    QWORD PTR [rsp-0x20],r14
  00427: call   rax
  00429: lea    r14,[rbp-0x8]
  0042d: mov    QWORD PTR [rbx],r14
  00430: mov    r14,QWORD PTR [rbp-0x10]
  00434: test   rax,rax
  00437: je     0x3bd78
  0043d: mov    QWORD PTR [r14-0xc0],rax
:00078 
:00079 _ = %0.call print(%18; 1)            [<INVALID>]
  00444: mov    r15d,0x1
  0044a: movabs r13,0x564be397e920
  00454: cmp    QWORD PTR [r13+0x8],0x0
  00459: je     0x3bd87
  0045f: cmp    r15d,DWORD PTR [r13-0x8]
  00463: jne    0x3bd87
  00469: mov    eax,DWORD PTR [rip+0xfffffffffffff6ca]        # 0xfffffb39
  0046f: cmp    DWORD PTR [r13-0x4],eax
  00473: jne    0x3bd87
  00479: mov    QWORD PTR [rsp-0x28],0x0
  00482: mov    rax,QWORD PTR [r14-0x30]
  00486: mov    QWORD PTR [rsp-0x40],rax
  0048b: mov    rdi,0x1
  00492: mov    rax,QWORD PTR [r14-0xc0]
  00499: mov    QWORD PTR [rsp-0x48],rax
  0049e: mov    QWORD PTR [rsp-0x38],0x0
  004a7: mov    r13,QWORD PTR [r13+0x8]
  004ab: mov    rax,QWORD PTR [r13+0x8]
  004af: mov    QWORD PTR [rsp-0x30],rax
  004b4: mov    rax,QWORD PTR [r13+0x0]
  004b8: mov    r13,QWORD PTR [r13+0x10]
  004bc: mov    rsi,QWORD PTR [rbx]
  004bf: mov    QWORD PTR [rsp-0x18],rsi
  004c4: lea    rsi,[rsp-0x18]
  004c9: mov    QWORD PTR [rbx],rsi
  004cc: lea    r14,[rsp-0x10]
  004d1: mov    QWORD PTR [rsp-0x20],r14
  004d6: call   rax
  004d8: lea    r14,[rbp-0x8]
  004dc: mov    QWORD PTR [rbx],r14
  004df: mov    r14,QWORD PTR [rbp-0x10]
  004e3: test   rax,rax
  004e6: je     0x3bdc8
:00080 
:00081 %2 = 0: i32
  004ec: mov    QWORD PTR [r14-0x40],0x1
:00082 %3 = 0: i32
  004f4: mov    QWORD PTR [r14-0x48],0x1
:00083 br =>:00095
  004fc: jmp    0x3bf0d
:00084 _%18 = %6 == %4                      [Integer][Integer]
  00501: mov    rdi,QWORD PTR [r14-0x60]
  00505: mov    rsi,QWORD PTR [r14-0x50]
  00509: test   rdi,0x1
  00510: je     0x3bdd7
  00516: test   rsi,0x1
  0051d: je     0x3bdd7
  00523: cmp    rdi,rsi
  00526: jne    0x3bf26
:00085 condnotbr _%18 =>:00095
:00086 %18 = 8: i16 - %3                    [<INVALID>][<INVALID>]
  0052c: cmp    DWORD PTR [rip+0x361],0x0        # 0x894
  00533: jl     0x3be00
  00539: je     0x3be29
  0053f: sub    DWORD PTR [rip+0x34e],0x1        # 0x894
  00546: xor    rdi,rdi
  00549: jmp    0x3be00
  0054e: mov    rdi,0x11
  00555: mov    rsi,QWORD PTR [r14-0x48]
  00559: sub    rsp,0x20
  0055d: movq   QWORD PTR [rsp],xmm2
  00562: movq   QWORD PTR [rsp+0x8],xmm3
  00568: movq   QWORD PTR [rsp+0x10],xmm4
  0056e: movq   QWORD PTR [rsp+0x18],xmm5
  00574: mov    rdx,rdi
  00577: mov    rcx,rsi
  0057a: mov    rdi,rbx
  0057d: mov    rsi,r12
  00580: movabs rax,0x564be1edb750
  0058a: call   rax
  0058c: movq   xmm2,QWORD PTR [rsp]
  00591: movq   xmm3,QWORD PTR [rsp+0x8]
  00597: movq   xmm4,QWORD PTR [rsp+0x10]
  0059d: movq   xmm5,QWORD PTR [rsp+0x18]
  005a3: add    rsp,0x20
  005a7: test   rax,rax
  005aa: je     0x3be4f
  005b0: mov    QWORD PTR [r14-0xc0],rax
:00087 %2 = %2 << %18                       [<INVALID>][<INVALID>]
  005b7: mov    rdi,QWORD PTR [r14-0x40]
  005bb: mov    rsi,QWORD PTR [r14-0xc0]
  005c2: sub    rsp,0x20
  005c6: movq   QWORD PTR [rsp],xmm2
  005cb: movq   QWORD PTR [rsp+0x8],xmm3
  005d1: movq   QWORD PTR [rsp+0x10],xmm4
  005d7: movq   QWORD PTR [rsp+0x18],xmm5
  005dd: mov    rdx,rdi
  005e0: mov    rcx,rsi
  005e3: mov    rdi,rbx
  005e6: mov    rsi,r12
  005e9: movabs rax,0x564be1ed8bf0
  005f3: call   rax
  005f5: movq   xmm2,QWORD PTR [rsp]
  005fa: movq   xmm3,QWORD PTR [rsp+0x8]
  00600: movq   xmm4,QWORD PTR [rsp+0x10]
  00606: movq   xmm5,QWORD PTR [rsp+0x18]
  0060c: add    rsp,0x20
  00610: test   rax,rax
  00613: je     0x3be5e
  00619: mov    QWORD PTR [r14-0x40],rax
:00088 %18 = %2.call chr()                  [<INVALID>]
  0061d: movq   xmm0,xmm4
  00621: call   0xffffb519
  00626: mov    QWORD PTR [r14-0x78],rax
  0062a: movq   xmm0,xmm5
  0062e: call   0xffffb519
  00633: mov    QWORD PTR [r14-0x80],rax
  00637: mov    rdi,QWORD PTR [r14-0x40]
  0063b: movabs rax,0x564be1ec7ec0
  00645: call   rax
  00647: mov    r15d,eax
  0064a: movabs r13,0x564be397e9b0
  00654: cmp    QWORD PTR [r13+0x8],0x0
  00659: je     0x3be6d
  0065f: cmp    r15d,DWORD PTR [r13-0x8]
  00663: jne    0x3be6d
  00669: mov    eax,DWORD PTR [rip+0xfffffffffffff4ca]        # 0xfffffb39
  0066f: cmp    DWORD PTR [r13-0x4],eax
  00673: jne    0x3be6d
  00679: mov    QWORD PTR [rsp-0x28],0x0
  00682: mov    rax,QWORD PTR [r14-0x40]
  00686: mov    QWORD PTR [rsp-0x40],rax
  0068b: mov    rdi,0x0
  00692: mov    QWORD PTR [rsp-0x38],0x0
  0069b: mov    r13,QWORD PTR [r13+0x8]
  0069f: mov    rax,QWORD PTR [r13+0x8]
  006a3: mov    QWORD PTR [rsp-0x30],rax
  006a8: mov    rax,QWORD PTR [r13+0x0]
  006ac: mov    r13,QWORD PTR [r13+0x10]
  006b0: mov    rsi,QWORD PTR [rbx]
  006b3: mov    QWORD PTR [rsp-0x18],rsi
  006b8: lea    rsi,[rsp-0x18]
  006bd: mov    QWORD PTR [rbx],rsi
  006c0: lea    r14,[rsp-0x10]
  006c5: mov    QWORD PTR [rsp-0x20],r14
  006ca: call   rax
  006cc: lea    r14,[rbp-0x8]
  006d0: mov    QWORD PTR [rbx],r14
  006d3: mov    r14,QWORD PTR [rbp-0x10]
  006d7: test   rax,rax
  006da: je     0x3beae
  006e0: mov    QWORD PTR [r14-0xc0],rax
:00089 
:00090 _ = %0.call print(%18; 1)            [<INVALID>]
  006e7: mov    r15d,0x1
  006ed: movabs r13,0x564be397e9d0
  006f7: cmp    QWORD PTR [r13+0x8],0x0
  006fc: je     0x3bebd
  00702: cmp    r15d,DWORD PTR [r13-0x8]
  00706: jne    0x3bebd
  0070c: mov    eax,DWORD PTR [rip+0xfffffffffffff427]        # 0xfffffb39
  00712: cmp    DWORD PTR [r13-0x4],eax
  00716: jne    0x3bebd
  0071c: mov    QWORD PTR [rsp-0x28],0x0
  00725: mov    rax,QWORD PTR [r14-0x30]
  00729: mov    QWORD PTR [rsp-0x40],rax
  0072e: mov    rdi,0x1
  00735: mov    rax,QWORD PTR [r14-0xc0]
  0073c: mov    QWORD PTR [rsp-0x48],rax
  00741: mov    QWORD PTR [rsp-0x38],0x0
  0074a: mov    r13,QWORD PTR [r13+0x8]
  0074e: mov    rax,QWORD PTR [r13+0x8]
  00752: mov    QWORD PTR [rsp-0x30],rax
  00757: mov    rax,QWORD PTR [r13+0x0]
  0075b: mov    r13,QWORD PTR [r13+0x10]
  0075f: mov    rsi,QWORD PTR [rbx]
  00762: mov    QWORD PTR [rsp-0x18],rsi
  00767: lea    rsi,[rsp-0x18]
  0076c: mov    QWORD PTR [rbx],rsi
  0076f: lea    r14,[rsp-0x10]
  00774: mov    QWORD PTR [rsp-0x20],r14
  00779: call   rax
  0077b: lea    r14,[rbp-0x8]
  0077f: mov    QWORD PTR [rbx],r14
  00782: mov    r14,QWORD PTR [rbp-0x10]
  00786: test   rax,rax
  00789: je     0x3befe
:00091 
:00092 %2 = 0: i32
  0078f: mov    QWORD PTR [r14-0x40],0x1
:00093 %3 = 0: i32
  00797: mov    QWORD PTR [r14-0x48],0x1
:00094 br =>:00095
  0079f: jmp    0x3bf59
:00095 %6 = %6 + 1: i16                     [Integer][Integer]
  007a4: mov    rdi,QWORD PTR [r14-0x60]
  007a8: test   rdi,0x1
  007af: je     0x3bf72
  007b5: add    rdi,0x2
  007b9: jo     0x3bf72
  007bf: mov    QWORD PTR [r14-0x60],rdi
:00096 br =>:00024
  007c3: jmp    0x3bf90
:00097 loop_end
  007c8: jmp    0x3bf81
==> start partial compile: /main FuncId(81) self_class:Object start:[00024] bytecode:0x564be397e420
<-- compile finished. end:[00097]
<== finished compile. elapsed:116.4µs
offset:Pos(21916) code: 1851 bytes  data: 197 bytes
:00024 loop_start counter=5 jit-addr=00007f6c08784c88
:00025 _%18 = %6 > %17                      [Integer][Integer]
  00000: mov    rdi,QWORD PTR [r14-0x60]
  00004: mov    rsi,QWORD PTR [r14-0xb8]
  0000b: test   rdi,0x1
  00012: je     0x3b715
  00018: test   rsi,0x1
  0001f: je     0x3b715
  00025: cmp    rdi,rsi
  00028: jg     0x736
:00026 condbr _%18 =>:00097
:00027 %7 = literal[0.0]
  0002e: movq   xmm2,QWORD PTR [rip+0x70e]        # 0x744
  00036: movabs rax,0x8000000000000002
  00040: mov    QWORD PTR [r14-0x68],rax
:00028 %8 = literal[0.0]
  00044: movq   xmm3,QWORD PTR [rip+0x708]        # 0x754
  0004c: movabs rax,0x8000000000000002
  00056: mov    QWORD PTR [r14-0x70],rax
:00029 %18 = literal[2.0]
  0005a: movq   xmm4,QWORD PTR [rip+0x702]        # 0x764
  00062: mov    rax,0x2
  00069: mov    QWORD PTR [r14-0xc0],rax
:00030 %18 = %18 * %6                       [Float][Integer]
  00070: mov    rdi,QWORD PTR [r14-0x60]
  00074: test   rdi,0x1
  0007b: je     0x3b724
  00081: sar    rdi,1
  00084: cvtsi2sd xmm5,rdi
  00089: mulsd  xmm4,xmm5
:00031 %18 = %18 / %1                       [Float][Integer]
  0008d: mov    rdi,QWORD PTR [r14-0x38]
  00091: test   rdi,0x1
  00098: je     0x3b733
  0009e: sar    rdi,1
  000a1: cvtsi2sd xmm6,rdi
  000a6: movq   rax,xmm6
  000ab: test   rax,rax
  000ae: je     0xffffaaad
  000b4: divsd  xmm4,xmm6
:00032 %19 = literal[1.5]
  000b8: movq   xmm7,QWORD PTR [rip+0x6b4]        # 0x774
  000c0: movabs rax,0xffc0000000000002
  000ca: mov    QWORD PTR [r14-0xc8],rax
:00033 %9 = %18 - %19                       [Float][Float]
  000d1: movq   xmm8,xmm4
  000d6: subsd  xmm8,xmm7
:00034 %18 = literal[2.0]
  000db: movq   xmm4,QWORD PTR [rip+0x6a1]        # 0x784
  000e3: mov    rax,0x2
  000ea: mov    QWORD PTR [r14-0xc0],rax
:00035 %18 = %18 * %5                       [Float][Integer]
  000f1: mov    rdi,QWORD PTR [r14-0x58]
  000f5: test   rdi,0x1
  000fc: je     0x3b752
  00102: sar    rdi,1
  00105: cvtsi2sd xmm9,rdi
  0010a: mulsd  xmm4,xmm9
:00036 %18 = %18 / %1                       [Float][Integer]
  0010f: movq   rax,xmm6
  00114: test   rax,rax
  00117: je     0xffffaaad
  0011d: divsd  xmm4,xmm6
:00037 %19 = literal[1.0]
  00121: movq   xmm7,QWORD PTR [rip+0x66b]        # 0x794
  00129: movabs rax,0xff80000000000002
  00133: mov    QWORD PTR [r14-0xc8],rax
:00038 %10 = %18 - %19                      [Float][Float]
  0013a: movq   xmm10,xmm4
  0013f: subsd  xmm10,xmm7
:00039 %11 = literal[false]
  00144: mov    rax,0x14
  0014b: mov    QWORD PTR [r14-0x88],rax
:00040 %12 = 0: i32
  00152: mov    QWORD PTR [r14-0x90],0x1
:00041 %18 = const[ITER]                    [49]
  0015d: mov    rax,QWORD PTR [rip+0xfffffffffffff0d0]        # 0xfffff234
  00164: cmp    rax,QWORD PTR [rip+0x649]        # 0x7b4
  0016b: jne    0x3b76f
  00171: mov    rax,QWORD PTR [rip+0x62c]        # 0x7a4
  00178: mov    QWORD PTR [r14-0xc0],rax
  0017f: jmp    0x3b826
:00042 loop_start counter=5 jit-addr=00007f6c087849ba
:00043 _%19 = %12 > %18                     [Integer][Integer]
  00184: mov    rdi,QWORD PTR [r14-0x90]
  0018b: mov    rsi,QWORD PTR [r14-0xc0]
  00192: test   rdi,0x1
  00199: je     0x3b863
  0019f: test   rsi,0x1
  001a6: je     0x3b863
  001ac: cmp    rdi,rsi
  001af: jg     0x3ba4c
:00044 condbr _%19 =>:00067
:00045 %19 = %7 * %7                        [Float][Float]
  001b5: movq   xmm6,xmm2
  001b9: mulsd  xmm6,xmm2
:00046 %20 = %8 * %8                        [Float][Float]
  001bd: movq   xmm7,xmm3
  001c1: mulsd  xmm7,xmm3
:00047 %19 = %19 - %20                      [Float][Float]
  001c5: subsd  xmm6,xmm7
:00048 %13 = %19 + %9                       [Float][Float]
  001c9: movq   xmm8,xmm6
  001ce: addsd  xmm8,xmm4
:00049 %19 = 2: i16 * %7                    [Integer][Float]
  001d3: movq   xmm6,QWORD PTR [rip+0x5e9]        # 0x7c4
  001db: mulsd  xmm6,xmm2
:00050 %19 = %19 * %8                       [Float][Float]
  001df: mulsd  xmm6,xmm3
:00051 %14 = %19 + %10                      [Float][Float]
  001e3: movq   xmm9,xmm6
  001e8: addsd  xmm9,xmm5
:00052 %19 = %13
:00053 %20 = %14
:00054 %7 = %19
:00055 %8 = %20
:00056 %19 = %7 * %7                        [Float][Float]
  001ed: movq   xmm2,xmm8
  001f2: mulsd  xmm2,xmm8
:00057 %20 = %8 * %8                        [Float][Float]
  001f7: movq   xmm3,xmm9
  001fc: mulsd  xmm3,xmm9
:00058 %19 = %19 + %20                      [Float][Float]
  00201: addsd  xmm2,xmm3
:00059 %20 = const[LIMIT_SQUARED]           [4.0]
  00205: mov    rax,QWORD PTR [rip+0xfffffffffffff028]        # 0xfffff234
  0020c: cmp    rax,QWORD PTR [rip+0x5d1]        # 0x7e4
  00213: jne    0x3b8ef
  00219: movq   xmm3,QWORD PTR [rip+0x5d3]        # 0x7f4
  00221: mov    rax,QWORD PTR [rip+0x5ac]        # 0x7d4
  00228: mov    QWORD PTR [r14-0xd0],rax
:00060 _%19 = %19 > %20                     [Float][Float]
  0022f: ucomisd xmm2,xmm3
  00233: jbe    0x24c
:00061 condnotbr _%19 =>:00065
:00062 %11 = literal[true]
  00239: mov    rax,0x1c
  00240: mov    QWORD PTR [r14-0x88],rax
:00063 br =>:00067
  00247: jmp    0x3ba7f
:00065 %12 = %12 + 1: i16                   [Integer][Integer]
  0024c: mov    rdi,QWORD PTR [r14-0x90]
  00253: test   rdi,0x1
  0025a: je     0x3b9f9
  00260: add    rdi,0x2
  00264: jo     0x3b9f9
  0026a: mov    QWORD PTR [r14-0x90],rdi
:00066 br =>:00042
  00271: jmp    0x3be94
:00067 loop_end
:00068 %18 = %2 << 1: i16                   [Integer][Integer]
  00276: mov    rdi,QWORD PTR [r14-0x40]
  0027a: test   rdi,0x1
  00281: je     0x3bae6
  00287: mov    rsi,0x3
  0028e: mov    rcx,rsi
  00291: sar    rcx,1
  00294: js     0x3bb0f
  0029a: lzcnt  rax,rdi
  0029f: cmp    rcx,rax
  002a2: jg     0x3bae6
  002a8: sub    rdi,0x1
  002ac: shl    rdi,cl
  002af: or     rdi,0x1
  002b3: mov    QWORD PTR [r14-0xc0],rdi
:00069 condnotbr %11 =>:00072
  002ba: mov    rax,QWORD PTR [r14-0x88]
  002c1: or     rax,0x10
  002c5: cmp    rax,0x14
  002c9: je     0x2df
:00070 %19 = 0: i32
  002cf: mov    QWORD PTR [r14-0xc8],0x1
:00071 br =>:00073
  002da: jmp    0x3bb41
:00072 %19 = 1: i32
  002df: mov    QWORD PTR [r14-0xc8],0x3
  002ea: jmp    0x3bb74
:00073 %2 = %18 | %19                       [Integer][Integer]
  002ef: mov    rdi,QWORD PTR [r14-0xc0]
  002f6: mov    rsi,QWORD PTR [r14-0xc8]
  002fd: test   rdi,0x1
  00304: je     0x3bba7
  0030a: test   rsi,0x1
  00311: je     0x3bba7
  00317: or     rdi,rsi
  0031a: mov    QWORD PTR [r14-0x40],rdi
:00074 %3 = %3 + 1: i16                     [Integer][Integer]
  0031e: mov    rdi,QWORD PTR [r14-0x48]
  00322: test   rdi,0x1
  00329: je     0x3bbd0
  0032f: add    rdi,0x2
  00333: jo     0x3bbd0
  00339: mov    QWORD PTR [r14-0x48],rdi
:00075 _%18 = %3 == 8: i16                  [Integer][Integer]
  0033d: mov    rdi,QWORD PTR [r14-0x48]
  00341: test   rdi,0x1
  00348: je     0x3bbf9
  0034e: cmp    rdi,0x11
  00352: jne    0x46f
:00076 condnotbr _%18 =>:00084
:00077 %18 = %2.call chr()                  [Integer]
  00358: movq   xmm0,xmm4
  0035c: call   0xffffac05
  00361: mov    QWORD PTR [r14-0x78],rax
  00365: movq   xmm0,xmm5
  00369: call   0xffffac05
  0036e: mov    QWORD PTR [r14-0x80],rax
  00372: mov    rdi,QWORD PTR [r14-0x40]
  00376: test   rdi,0x1
  0037d: je     0x3bc22
  00383: cmp    DWORD PTR [rip+0xffffffffffffee9b],0x0        # 0xfffff225
  0038a: jne    0x3bc22
  00390: mov    r9,0x0
  00397: mov    rdx,rdi
  0039a: mov    QWORD PTR [rsp-0x40],rcx
  0039f: mov    QWORD PTR [rsp-0x28],0x0
  003a8: lea    rcx,[r14-0xc0]
  003af: mov    r8,0x0
  003b6: mov    rsi,QWORD PTR [rbx]
  003b9: mov    QWORD PTR [rsp-0x18],rsi
  003be: lea    rsi,[rsp-0x18]
  003c3: mov    QWORD PTR [rbx],rsi
  003c6: lea    r14,[rsp-0x10]
  003cb: mov    QWORD PTR [rsp-0x20],r14
  003d0: call   0x3bc31
  003d5: lea    r14,[rbp-0x8]
  003d9: mov    QWORD PTR [rbx],r14
  003dc: mov    r14,QWORD PTR [rbp-0x10]
  003e0: test   rax,rax
  003e3: je     0x3bc63
  003e9: mov    QWORD PTR [r14-0xc0],rax
:00078 
:00079 _ = %0.call print(%18; 1)            [Object]
  003f0: mov    rdi,QWORD PTR [r14-0x30]
  003f4: cmp    DWORD PTR [rip+0xffffffffffffee2a],0x0        # 0xfffff225
  003fb: jne    0x3bc72
  00401: mov    r9,0x0
  00408: mov    rdx,rdi
  0040b: mov    QWORD PTR [rsp-0x40],rcx
  00410: mov    QWORD PTR [rsp-0x28],0x0
  00419: lea    rcx,[r14-0xc0]
  00420: mov    r8,0x1
  00427: mov    rsi,QWORD PTR [rbx]
  0042a: mov    QWORD PTR [rsp-0x18],rsi
  0042f: lea    rsi,[rsp-0x18]
  00434: mov    QWORD PTR [rbx],rsi
  00437: lea    r14,[rsp-0x10]
  0043c: mov    QWORD PTR [rsp-0x20],r14
  00441: call   0x3bc81
  00446: lea    r14,[rbp-0x8]
  0044a: mov    QWORD PTR [rbx],r14
  0044d: mov    r14,QWORD PTR [rbp-0x10]
  00451: test   rax,rax
  00454: je     0x3bcb3
:00080 
:00081 %2 = 0: i32
  0045a: mov    QWORD PTR [r14-0x40],0x1
:00082 %3 = 0: i32
  00462: mov    QWORD PTR [r14-0x48],0x1
:00083 br =>:00095
  0046a: jmp    0x3bdf8
:00084 _%18 = %6 == %4                      [Integer][Integer]
  0046f: mov    rdi,QWORD PTR [r14-0x60]
  00473: mov    rsi,QWORD PTR [r14-0x50]
  00477: test   rdi,0x1
  0047e: je     0x3bcc2
  00484: test   rsi,0x1
  0048b: je     0x3bcc2
  00491: cmp    rdi,rsi
  00494: jne    0x3be11
:00085 condnotbr _%18 =>:00095
:00086 %18 = 8: i16 - %3                    [<INVALID>][<INVALID>]
  0049a: cmp    DWORD PTR [rip+0x35b],0x0        # 0x7fc
  004a1: jl     0x3bceb
  004a7: je     0x3bd14
  004ad: sub    DWORD PTR [rip+0x348],0x1        # 0x7fc
  004b4: xor    rdi,rdi
  004b7: jmp    0x3bceb
  004bc: mov    rdi,0x11
  004c3: mov    rsi,QWORD PTR [r14-0x48]
  004c7: sub    rsp,0x20
  004cb: movq   QWORD PTR [rsp],xmm2
  004d0: movq   QWORD PTR [rsp+0x8],xmm3
  004d6: movq   QWORD PTR [rsp+0x10],xmm4
  004dc: movq   QWORD PTR [rsp+0x18],xmm5
  004e2: mov    rdx,rdi
  004e5: mov    rcx,rsi
  004e8: mov    rdi,rbx
  004eb: mov    rsi,r12
  004ee: movabs rax,0x564be1edb750
  004f8: call   rax
  004fa: movq   xmm2,QWORD PTR [rsp]
  004ff: movq   xmm3,QWORD PTR [rsp+0x8]
  00505: movq   xmm4,QWORD PTR [rsp+0x10]
  0050b: movq   xmm5,QWORD PTR [rsp+0x18]
  00511: add    rsp,0x20
  00515: test   rax,rax
  00518: je     0x3bd3a
  0051e: mov    QWORD PTR [r14-0xc0],rax
:00087 %2 = %2 << %18                       [<INVALID>][<INVALID>]
  00525: mov    rdi,QWORD PTR [r14-0x40]
  00529: mov    rsi,QWORD PTR [r14-0xc0]
  00530: sub    rsp,0x20
  00534: movq   QWORD PTR [rsp],xmm2
  00539: movq   QWORD PTR [rsp+0x8],xmm3
  0053f: movq   QWORD PTR [rsp+0x10],xmm4
  00545: movq   QWORD PTR [rsp+0x18],xmm5
  0054b: mov    rdx,rdi
  0054e: mov    rcx,rsi
  00551: mov    rdi,rbx
  00554: mov    rsi,r12
  00557: movabs rax,0x564be1ed8bf0
  00561: call   rax
  00563: movq   xmm2,QWORD PTR [rsp]
  00568: movq   xmm3,QWORD PTR [rsp+0x8]
  0056e: movq   xmm4,QWORD PTR [rsp+0x10]
  00574: movq   xmm5,QWORD PTR [rsp+0x18]
  0057a: add    rsp,0x20
  0057e: test   rax,rax
  00581: je     0x3bd49
  00587: mov    QWORD PTR [r14-0x40],rax
:00088 %18 = %2.call chr()                  [<INVALID>]
  0058b: movq   xmm0,xmm4
  0058f: call   0xffffac05
  00594: mov    QWORD PTR [r14-0x78],rax
  00598: movq   xmm0,xmm5
  0059c: call   0xffffac05
  005a1: mov    QWORD PTR [r14-0x80],rax
  005a5: mov    rdi,QWORD PTR [r14-0x40]
  005a9: movabs rax,0x564be1ec7ec0
  005b3: call   rax
  005b5: mov    r15d,eax
  005b8: movabs r13,0x564be397e9b0
  005c2: cmp    QWORD PTR [r13+0x8],0x0
  005c7: je     0x3bd58
  005cd: cmp    r15d,DWORD PTR [r13-0x8]
  005d1: jne    0x3bd58
  005d7: mov    eax,DWORD PTR [rip+0xffffffffffffec48]        # 0xfffff225
  005dd: cmp    DWORD PTR [r13-0x4],eax
  005e1: jne    0x3bd58
  005e7: mov    QWORD PTR [rsp-0x28],0x0
  005f0: mov    rax,QWORD PTR [r14-0x40]
  005f4: mov    QWORD PTR [rsp-0x40],rax
  005f9: mov    rdi,0x0
  00600: mov    QWORD PTR [rsp-0x38],0x0
  00609: mov    r13,QWORD PTR [r13+0x8]
  0060d: mov    rax,QWORD PTR [r13+0x8]
  00611: mov    QWORD PTR [rsp-0x30],rax
  00616: mov    rax,QWORD PTR [r13+0x0]
  0061a: mov    r13,QWORD PTR [r13+0x10]
  0061e: mov    rsi,QWORD PTR [rbx]
  00621: mov    QWORD PTR [rsp-0x18],rsi
  00626: lea    rsi,[rsp-0x18]
  0062b: mov    QWORD PTR [rbx],rsi
  0062e: lea    r14,[rsp-0x10]
  00633: mov    QWORD PTR [rsp-0x20],r14
  00638: call   rax
  0063a: lea    r14,[rbp-0x8]
  0063e: mov    QWORD PTR [rbx],r14
  00641: mov    r14,QWORD PTR [rbp-0x10]
  00645: test   rax,rax
  00648: je     0x3bd99
  0064e: mov    QWORD PTR [r14-0xc0],rax
:00089 
:00090 _ = %0.call print(%18; 1)            [<INVALID>]
  00655: mov    r15d,0x1
  0065b: movabs r13,0x564be397e9d0
  00665: cmp    QWORD PTR [r13+0x8],0x0
  0066a: je     0x3bda8
  00670: cmp    r15d,DWORD PTR [r13-0x8]
  00674: jne    0x3bda8
  0067a: mov    eax,DWORD PTR [rip+0xffffffffffffeba5]        # 0xfffff225
  00680: cmp    DWORD PTR [r13-0x4],eax
  00684: jne    0x3bda8
  0068a: mov    QWORD PTR [rsp-0x28],0x0
  00693: mov    rax,QWORD PTR [r14-0x30]
  00697: mov    QWORD PTR [rsp-0x40],rax
  0069c: mov    rdi,0x1
  006a3: mov    rax,QWORD PTR [r14-0xc0]
  006aa: mov    QWORD PTR [rsp-0x48],rax
  006af: mov    QWORD PTR [rsp-0x38],0x0
  006b8: mov    r13,QWORD PTR [r13+0x8]
  006bc: mov    rax,QWORD PTR [r13+0x8]
  006c0: mov    QWORD PTR [rsp-0x30],rax
  006c5: mov    rax,QWORD PTR [r13+0x0]
  006c9: mov    r13,QWORD PTR [r13+0x10]
  006cd: mov    rsi,QWORD PTR [rbx]
  006d0: mov    QWORD PTR [rsp-0x18],rsi
  006d5: lea    rsi,[rsp-0x18]
  006da: mov    QWORD PTR [rbx],rsi
  006dd: lea    r14,[rsp-0x10]
  006e2: mov    QWORD PTR [rsp-0x20],r14
  006e7: call   rax
  006e9: lea    r14,[rbp-0x8]
  006ed: mov    QWORD PTR [rbx],r14
  006f0: mov    r14,QWORD PTR [rbp-0x10]
  006f4: test   rax,rax
  006f7: je     0x3bde9
:00091 
:00092 %2 = 0: i32
  006fd: mov    QWORD PTR [r14-0x40],0x1
:00093 %3 = 0: i32
  00705: mov    QWORD PTR [r14-0x48],0x1
:00094 br =>:00095
  0070d: jmp    0x3be44
:00095 %6 = %6 + 1: i16                     [Integer][Integer]
  00712: mov    rdi,QWORD PTR [r14-0x60]
  00716: test   rdi,0x1
  0071d: je     0x3be5d
  00723: add    rdi,0x2
  00727: jo     0x3be5d
  0072d: mov    QWORD PTR [r14-0x60],rdi
:00096 br =>:00024
  00731: jmp    0x3be7b
:00097 loop_end
  00736: jmp    0x3be6c
==> start partial compile: /main FuncId(81) self_class:Object start:[00019] bytecode:0x564be397e420
<-- compile finished. end:[00100]
<== finished compile. elapsed:127.3µs
offset:Pos(23964) code: 1957 bytes  data: 203 bytes
:00019 loop_start counter=5 jit-addr=0000000000000000
:00020 _%17 = %5 > %16                      [Integer][Integer]
  00000: mov    rdi,QWORD PTR [r14-0x58]
  00004: mov    rsi,QWORD PTR [r14-0xb0]
  0000b: test   rdi,0x1
  00012: je     0x3b714
  00018: test   rsi,0x1
  0001f: je     0x3b714
  00025: cmp    rdi,rsi
  00028: jg     0x7a0
:00021 condbr _%17 =>:00100
:00022 %6 = 0: i32
  0002e: mov    QWORD PTR [r14-0x60],0x1
:00023 %17 = %4
  00036: mov    rax,QWORD PTR [r14-0x50]
  0003a: mov    QWORD PTR [r14-0xb8],rax
  00041: jmp    0x3b723
:00024 loop_start counter=5 jit-addr=00007f6c0878559c
:00025 _%18 = %6 > %17                      [Integer][Integer]
  00046: mov    rdi,QWORD PTR [r14-0x60]
  0004a: mov    rsi,QWORD PTR [r14-0xb8]
  00051: test   rdi,0x1
  00058: je     0x3b73c
  0005e: test   rsi,0x1
  00065: je     0x3b73c
  0006b: cmp    rdi,rsi
  0006e: jg     0x77c
:00026 condbr _%18 =>:00097
:00027 %7 = literal[0.0]
  00074: movq   xmm2,QWORD PTR [rip+0x738]        # 0x7b4
  0007c: movabs rax,0x8000000000000002
  00086: mov    QWORD PTR [r14-0x68],rax
:00028 %8 = literal[0.0]
  0008a: movq   xmm3,QWORD PTR [rip+0x732]        # 0x7c4
  00092: movabs rax,0x8000000000000002
  0009c: mov    QWORD PTR [r14-0x70],rax
:00029 %18 = literal[2.0]
  000a0: movq   xmm4,QWORD PTR [rip+0x72c]        # 0x7d4
  000a8: mov    rax,0x2
  000af: mov    QWORD PTR [r14-0xc0],rax
:00030 %18 = %18 * %6                       [Float][Integer]
  000b6: mov    rdi,QWORD PTR [r14-0x60]
  000ba: test   rdi,0x1
  000c1: je     0x3b74b
  000c7: sar    rdi,1
  000ca: cvtsi2sd xmm5,rdi
  000cf: mulsd  xmm4,xmm5
:00031 %18 = %18 / %1                       [Float][Integer]
  000d3: mov    rdi,QWORD PTR [r14-0x38]
  000d7: test   rdi,0x1
  000de: je     0x3b75a
  000e4: sar    rdi,1
  000e7: cvtsi2sd xmm6,rdi
  000ec: movq   rax,xmm6
  000f1: test   rax,rax
  000f4: je     0xffffa2ad
  000fa: divsd  xmm4,xmm6
:00032 %19 = literal[1.5]
  000fe: movq   xmm7,QWORD PTR [rip+0x6de]        # 0x7e4
  00106: movabs rax,0xffc0000000000002
  00110: mov    QWORD PTR [r14-0xc8],rax
:00033 %9 = %18 - %19                       [Float][Float]
  00117: movq   xmm8,xmm4
  0011c: subsd  xmm8,xmm7
:00034 %18 = literal[2.0]
  00121: movq   xmm4,QWORD PTR [rip+0x6cb]        # 0x7f4
  00129: mov    rax,0x2
  00130: mov    QWORD PTR [r14-0xc0],rax
:00035 %18 = %18 * %5                       [Float][Integer]
  00137: mov    rdi,QWORD PTR [r14-0x58]
  0013b: test   rdi,0x1
  00142: je     0x3b779
  00148: sar    rdi,1
  0014b: cvtsi2sd xmm9,rdi
  00150: mulsd  xmm4,xmm9
:00036 %18 = %18 / %1                       [Float][Integer]
  00155: movq   rax,xmm6
  0015a: test   rax,rax
  0015d: je     0xffffa2ad
  00163: divsd  xmm4,xmm6
:00037 %19 = literal[1.0]
  00167: movq   xmm7,QWORD PTR [rip+0x695]        # 0x804
  0016f: movabs rax,0xff80000000000002
  00179: mov    QWORD PTR [r14-0xc8],rax
:00038 %10 = %18 - %19                      [Float][Float]
  00180: movq   xmm10,xmm4
  00185: subsd  xmm10,xmm7
:00039 %11 = literal[false]
  0018a: mov    rax,0x14
  00191: mov    QWORD PTR [r14-0x88],rax
:00040 %12 = 0: i32
  00198: mov    QWORD PTR [r14-0x90],0x1
:00041 %18 = const[ITER]                    [49]
  001a3: mov    rax,QWORD PTR [rip+0xffffffffffffe88a]        # 0xffffea34
  001aa: cmp    rax,QWORD PTR [rip+0x673]        # 0x824
  001b1: jne    0x3b796
  001b7: mov    rax,QWORD PTR [rip+0x656]        # 0x814
  001be: mov    QWORD PTR [r14-0xc0],rax
  001c5: jmp    0x3b84d
:00042 loop_start counter=5 jit-addr=00007f6c087849ba
:00043 _%19 = %12 > %18                     [Integer][Integer]
  001ca: mov    rdi,QWORD PTR [r14-0x90]
  001d1: mov    rsi,QWORD PTR [r14-0xc0]
  001d8: test   rdi,0x1
  001df: je     0x3b88a
  001e5: test   rsi,0x1
  001ec: je     0x3b88a
  001f2: cmp    rdi,rsi
  001f5: jg     0x3ba73
:00044 condbr _%19 =>:00067
:00045 %19 = %7 * %7                        [Float][Float]
  001fb: movq   xmm6,xmm2
  001ff: mulsd  xmm6,xmm2
:00046 %20 = %8 * %8                        [Float][Float]
  00203: movq   xmm7,xmm3
  00207: mulsd  xmm7,xmm3
:00047 %19 = %19 - %20                      [Float][Float]
  0020b: subsd  xmm6,xmm7
:00048 %13 = %19 + %9                       [Float][Float]
  0020f: movq   xmm8,xmm6
  00214: addsd  xmm8,xmm4
:00049 %19 = 2: i16 * %7                    [Integer][Float]
  00219: movq   xmm6,QWORD PTR [rip+0x613]        # 0x834
  00221: mulsd  xmm6,xmm2
:00050 %19 = %19 * %8                       [Float][Float]
  00225: mulsd  xmm6,xmm3
:00051 %14 = %19 + %10                      [Float][Float]
  00229: movq   xmm9,xmm6
  0022e: addsd  xmm9,xmm5
:00052 %19 = %13
:00053 %20 = %14
:00054 %7 = %19
:00055 %8 = %20
:00056 %19 = %7 * %7                        [Float][Float]
  00233: movq   xmm2,xmm8
  00238: mulsd  xmm2,xmm8
:00057 %20 = %8 * %8                        [Float][Float]
  0023d: movq   xmm3,xmm9
  00242: mulsd  xmm3,xmm9
:00058 %19 = %19 + %20                      [Float][Float]
  00247: addsd  xmm2,xmm3
:00059 %20 = const[LIMIT_SQUARED]           [4.0]
  0024b: mov    rax,QWORD PTR [rip+0xffffffffffffe7e2]        # 0xffffea34
  00252: cmp    rax,QWORD PTR [rip+0x5fb]        # 0x854
  00259: jne    0x3b916
  0025f: movq   xmm3,QWORD PTR [rip+0x5fd]        # 0x864
  00267: mov    rax,QWORD PTR [rip+0x5d6]        # 0x844
  0026e: mov    QWORD PTR [r14-0xd0],rax
:00060 _%19 = %19 > %20                     [Float][Float]
  00275: ucomisd xmm2,xmm3
  00279: jbe    0x292
:00061 condnotbr _%19 =>:00065
:00062 %11 = literal[true]
  0027f: mov    rax,0x1c
  00286: mov    QWORD PTR [r14-0x88],rax
:00063 br =>:00067
  0028d: jmp    0x3baa6
:00065 %12 = %12 + 1: i16                   [Integer][Integer]
  00292: mov    rdi,QWORD PTR [r14-0x90]
  00299: test   rdi,0x1
  002a0: je     0x3ba20
  002a6: add    rdi,0x2
  002aa: jo     0x3ba20
  002b0: mov    QWORD PTR [r14-0x90],rdi
:00066 br =>:00042
  002b7: jmp    0x3beca
:00067 loop_end
:00068 %18 = %2 << 1: i16                   [Integer][Integer]
  002bc: mov    rdi,QWORD PTR [r14-0x40]
  002c0: test   rdi,0x1
  002c7: je     0x3bb0d
  002cd: mov    rsi,0x3
  002d4: mov    rcx,rsi
  002d7: sar    rcx,1
  002da: js     0x3bb36
  002e0: lzcnt  rax,rdi
  002e5: cmp    rcx,rax
  002e8: jg     0x3bb0d
  002ee: sub    rdi,0x1
  002f2: shl    rdi,cl
  002f5: or     rdi,0x1
  002f9: mov    QWORD PTR [r14-0xc0],rdi
:00069 condnotbr %11 =>:00072
  00300: mov    rax,QWORD PTR [r14-0x88]
  00307: or     rax,0x10
  0030b: cmp    rax,0x14
  0030f: je     0x325
:00070 %19 = 0: i32
  00315: mov    QWORD PTR [r14-0xc8],0x1
:00071 br =>:00073
  00320: jmp    0x3bb68
:00072 %19 = 1: i32
  00325: mov    QWORD PTR [r14-0xc8],0x3
  00330: jmp    0x3bb9b
:00073 %2 = %18 | %19                       [Integer][Integer]
  00335: mov    rdi,QWORD PTR [r14-0xc0]
  0033c: mov    rsi,QWORD PTR [r14-0xc8]
  00343: test   rdi,0x1
  0034a: je     0x3bbce
  00350: test   rsi,0x1
  00357: je     0x3bbce
  0035d: or     rdi,rsi
  00360: mov    QWORD PTR [r14-0x40],rdi
:00074 %3 = %3 + 1: i16                     [Integer][Integer]
  00364: mov    rdi,QWORD PTR [r14-0x48]
  00368: test   rdi,0x1
  0036f: je     0x3bbf7
  00375: add    rdi,0x2
  00379: jo     0x3bbf7
  0037f: mov    QWORD PTR [r14-0x48],rdi
:00075 _%18 = %3 == 8: i16                  [Integer][Integer]
  00383: mov    rdi,QWORD PTR [r14-0x48]
  00387: test   rdi,0x1
  0038e: je     0x3bc20
  00394: cmp    rdi,0x11
  00398: jne    0x4b5
:00076 condnotbr _%18 =>:00084
:00077 %18 = %2.call chr()                  [Integer]
  0039e: movq   xmm0,xmm4
  003a2: call   0xffffa405
  003a7: mov    QWORD PTR [r14-0x78],rax
  003ab: movq   xmm0,xmm5
  003af: call   0xffffa405
  003b4: mov    QWORD PTR [r14-0x80],rax
  003b8: mov    rdi,QWORD PTR [r14-0x40]
  003bc: test   rdi,0x1
  003c3: je     0x3bc49
  003c9: cmp    DWORD PTR [rip+0xffffffffffffe655],0x0        # 0xffffea25
  003d0: jne    0x3bc49
  003d6: mov    r9,0x0
  003dd: mov    rdx,rdi
  003e0: mov    QWORD PTR [rsp-0x40],rcx
  003e5: mov    QWORD PTR [rsp-0x28],0x0
  003ee: lea    rcx,[r14-0xc0]
  003f5: mov    r8,0x0
  003fc: mov    rsi,QWORD PTR [rbx]
  003ff: mov    QWORD PTR [rsp-0x18],rsi
  00404: lea    rsi,[rsp-0x18]
  00409: mov    QWORD PTR [rbx],rsi
  0040c: lea    r14,[rsp-0x10]
  00411: mov    QWORD PTR [rsp-0x20],r14
  00416: call   0x3bc58
  0041b: lea    r14,[rbp-0x8]
  0041f: mov    QWORD PTR [rbx],r14
  00422: mov    r14,QWORD PTR [rbp-0x10]
  00426: test   rax,rax
  00429: je     0x3bc8a
  0042f: mov    QWORD PTR [r14-0xc0],rax
:00078 
:00079 _ = %0.call print(%18; 1)            [Object]
  00436: mov    rdi,QWORD PTR [r14-0x30]
  0043a: cmp    DWORD PTR [rip+0xffffffffffffe5e4],0x0        # 0xffffea25
  00441: jne    0x3bc99
  00447: mov    r9,0x0
  0044e: mov    rdx,rdi
  00451: mov    QWORD PTR [rsp-0x40],rcx
  00456: mov    QWORD PTR [rsp-0x28],0x0
  0045f: lea    rcx,[r14-0xc0]
  00466: mov    r8,0x1
  0046d: mov    rsi,QWORD PTR [rbx]
  00470: mov    QWORD PTR [rsp-0x18],rsi
  00475: lea    rsi,[rsp-0x18]
  0047a: mov    QWORD PTR [rbx],rsi
  0047d: lea    r14,[rsp-0x10]
  00482: mov    QWORD PTR [rsp-0x20],r14
  00487: call   0x3bca8
  0048c: lea    r14,[rbp-0x8]
  00490: mov    QWORD PTR [rbx],r14
  00493: mov    r14,QWORD PTR [rbp-0x10]
  00497: test   rax,rax
  0049a: je     0x3bcda
:00080 
:00081 %2 = 0: i32
  004a0: mov    QWORD PTR [r14-0x40],0x1
:00082 %3 = 0: i32
  004a8: mov    QWORD PTR [r14-0x48],0x1
:00083 br =>:00095
  004b0: jmp    0x3be1f
:00084 _%18 = %6 == %4                      [Integer][Integer]
  004b5: mov    rdi,QWORD PTR [r14-0x60]
  004b9: mov    rsi,QWORD PTR [r14-0x50]
  004bd: test   rdi,0x1
  004c4: je     0x3bce9
  004ca: test   rsi,0x1
  004d1: je     0x3bce9
  004d7: cmp    rdi,rsi
  004da: jne    0x3be38
:00085 condnotbr _%18 =>:00095
:00086 %18 = 8: i16 - %3                    [<INVALID>][<INVALID>]
  004e0: cmp    DWORD PTR [rip+0x385],0x0        # 0x86c
  004e7: jl     0x3bd12
  004ed: je     0x3bd3b
  004f3: sub    DWORD PTR [rip+0x372],0x1        # 0x86c
  004fa: xor    rdi,rdi
  004fd: jmp    0x3bd12
  00502: mov    rdi,0x11
  00509: mov    rsi,QWORD PTR [r14-0x48]
  0050d: sub    rsp,0x20
  00511: movq   QWORD PTR [rsp],xmm2
  00516: movq   QWORD PTR [rsp+0x8],xmm3
  0051c: movq   QWORD PTR [rsp+0x10],xmm4
  00522: movq   QWORD PTR [rsp+0x18],xmm5
  00528: mov    rdx,rdi
  0052b: mov    rcx,rsi
  0052e: mov    rdi,rbx
  00531: mov    rsi,r12
  00534: movabs rax,0x564be1edb750
  0053e: call   rax
  00540: movq   xmm2,QWORD PTR [rsp]
  00545: movq   xmm3,QWORD PTR [rsp+0x8]
  0054b: movq   xmm4,QWORD PTR [rsp+0x10]
  00551: movq   xmm5,QWORD PTR [rsp+0x18]
  00557: add    rsp,0x20
  0055b: test   rax,rax
  0055e: je     0x3bd61
  00564: mov    QWORD PTR [r14-0xc0],rax
:00087 %2 = %2 << %18                       [<INVALID>][<INVALID>]
  0056b: mov    rdi,QWORD PTR [r14-0x40]
  0056f: mov    rsi,QWORD PTR [r14-0xc0]
  00576: sub    rsp,0x20
  0057a: movq   QWORD PTR [rsp],xmm2
  0057f: movq   QWORD PTR [rsp+0x8],xmm3
  00585: movq   QWORD PTR [rsp+0x10],xmm4
  0058b: movq   QWORD PTR [rsp+0x18],xmm5
  00591: mov    rdx,rdi
  00594: mov    rcx,rsi
  00597: mov    rdi,rbx
  0059a: mov    rsi,r12
  0059d: movabs rax,0x564be1ed8bf0
  005a7: call   rax
  005a9: movq   xmm2,QWORD PTR [rsp]
  005ae: movq   xmm3,QWORD PTR [rsp+0x8]
  005b4: movq   xmm4,QWORD PTR [rsp+0x10]
  005ba: movq   xmm5,QWORD PTR [rsp+0x18]
  005c0: add    rsp,0x20
  005c4: test   rax,rax
  005c7: je     0x3bd70
  005cd: mov    QWORD PTR [r14-0x40],rax
:00088 %18 = %2.call chr()                  [<INVALID>]
  005d1: movq   xmm0,xmm4
  005d5: call   0xffffa405
  005da: mov    QWORD PTR [r14-0x78],rax
  005de: movq   xmm0,xmm5
  005e2: call   0xffffa405
  005e7: mov    QWORD PTR [r14-0x80],rax
  005eb: mov    rdi,QWORD PTR [r14-0x40]
  005ef: movabs rax,0x564be1ec7ec0
  005f9: call   rax
  005fb: mov    r15d,eax
  005fe: movabs r13,0x564be397e9b0
  00608: cmp    QWORD PTR [r13+0x8],0x0
  0060d: je     0x3bd7f
  00613: cmp    r15d,DWORD PTR [r13-0x8]
  00617: jne    0x3bd7f
  0061d: mov    eax,DWORD PTR [rip+0xffffffffffffe402]        # 0xffffea25
  00623: cmp    DWORD PTR [r13-0x4],eax
  00627: jne    0x3bd7f
  0062d: mov    QWORD PTR [rsp-0x28],0x0
  00636: mov    rax,QWORD PTR [r14-0x40]
  0063a: mov    QWORD PTR [rsp-0x40],rax
  0063f: mov    rdi,0x0
  00646: mov    QWORD PTR [rsp-0x38],0x0
  0064f: mov    r13,QWORD PTR [r13+0x8]
  00653: mov    rax,QWORD PTR [r13+0x8]
  00657: mov    QWORD PTR [rsp-0x30],rax
  0065c: mov    rax,QWORD PTR [r13+0x0]
  00660: mov    r13,QWORD PTR [r13+0x10]
  00664: mov    rsi,QWORD PTR [rbx]
  00667: mov    QWORD PTR [rsp-0x18],rsi
  0066c: lea    rsi,[rsp-0x18]
  00671: mov    QWORD PTR [rbx],rsi
  00674: lea    r14,[rsp-0x10]
  00679: mov    QWORD PTR [rsp-0x20],r14
  0067e: call   rax
  00680: lea    r14,[rbp-0x8]
  00684: mov    QWORD PTR [rbx],r14
  00687: mov    r14,QWORD PTR [rbp-0x10]
  0068b: test   rax,rax
  0068e: je     0x3bdc0
  00694: mov    QWORD PTR [r14-0xc0],rax
:00089 
:00090 _ = %0.call print(%18; 1)            [<INVALID>]
  0069b: mov    r15d,0x1
  006a1: movabs r13,0x564be397e9d0
  006ab: cmp    QWORD PTR [r13+0x8],0x0
  006b0: je     0x3bdcf
  006b6: cmp    r15d,DWORD PTR [r13-0x8]
  006ba: jne    0x3bdcf
  006c0: mov    eax,DWORD PTR [rip+0xffffffffffffe35f]        # 0xffffea25
  006c6: cmp    DWORD PTR [r13-0x4],eax
  006ca: jne    0x3bdcf
  006d0: mov    QWORD PTR [rsp-0x28],0x0
  006d9: mov    rax,QWORD PTR [r14-0x30]
  006dd: mov    QWORD PTR [rsp-0x40],rax
  006e2: mov    rdi,0x1
  006e9: mov    rax,QWORD PTR [r14-0xc0]
  006f0: mov    QWORD PTR [rsp-0x48],rax
  006f5: mov    QWORD PTR [rsp-0x38],0x0
  006fe: mov    r13,QWORD PTR [r13+0x8]
  00702: mov    rax,QWORD PTR [r13+0x8]
  00706: mov    QWORD PTR [rsp-0x30],rax
  0070b: mov    rax,QWORD PTR [r13+0x0]
  0070f: mov    r13,QWORD PTR [r13+0x10]
  00713: mov    rsi,QWORD PTR [rbx]
  00716: mov    QWORD PTR [rsp-0x18],rsi
  0071b: lea    rsi,[rsp-0x18]
  00720: mov    QWORD PTR [rbx],rsi
  00723: lea    r14,[rsp-0x10]
  00728: mov    QWORD PTR [rsp-0x20],r14
  0072d: call   rax
  0072f: lea    r14,[rbp-0x8]
  00733: mov    QWORD PTR [rbx],r14
  00736: mov    r14,QWORD PTR [rbp-0x10]
  0073a: test   rax,rax
  0073d: je     0x3be10
:00091 
:00092 %2 = 0: i32
  00743: mov    QWORD PTR [r14-0x40],0x1
:00093 %3 = 0: i32
  0074b: mov    QWORD PTR [r14-0x48],0x1
:00094 br =>:00095
  00753: jmp    0x3be6b
:00095 %6 = %6 + 1: i16                     [Integer][Integer]
  00758: mov    rdi,QWORD PTR [r14-0x60]
  0075c: test   rdi,0x1
  00763: je     0x3be84
  00769: add    rdi,0x2
  0076d: jo     0x3be84
  00773: mov    QWORD PTR [r14-0x60],rdi
:00096 br =>:00024
  00777: jmp    0x3beb1
:00097 loop_end
:00098 %5 = %5 + 1: i16                     [Integer][Integer]
  0077c: mov    rdi,QWORD PTR [r14-0x58]
  00780: test   rdi,0x1
  00787: je     0x3be93
  0078d: add    rdi,0x2
  00791: jo     0x3be93
  00797: mov    QWORD PTR [r14-0x58],rdi
:00099 br =>:00019
  0079b: jmp    0x3bf31
:00100 loop_end
  007a0: jmp    0x3bea2
