    Finished release [optimized] target(s) in 0.08s
     Running `target/release/monoruby benchmark/app_aobench.rb`
==> start whole compile: initialize FuncId(90) self_class:Vec start:[00000] bytecode:0x564559e90a40
<== finished compile. elapsed:10.9µs
offset:Pos(19878) code: 89 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x3
  0000e: jne    0x3b3aa
  00014: mov    rdi,QWORD PTR [r14-0x30]
  00018: test   rdi,0x7
  0001f: jne    0x3b3b9
  00025: cmp    DWORD PTR [rdi+0x4],0x2b
  00029: jne    0x3b3b9
:00000 init_method reg:4 arg:3 pos:3 req:3 block:0 stack_offset:5
:00001 @x: Vec[IvarId(0)] = %1
  0002f: mov    rdi,QWORD PTR [r14-0x30]
  00033: mov    rax,QWORD PTR [r14-0x38]
  00037: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  0003b: mov    rdi,QWORD PTR [r14-0x30]
  0003f: mov    rax,QWORD PTR [r14-0x40]
  00043: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  00047: mov    rdi,QWORD PTR [r14-0x30]
  0004b: mov    rax,QWORD PTR [r14-0x48]
  0004f: mov    QWORD PTR [rdi+0x20],rax
:00004 ret %3
  00053: mov    rax,QWORD PTR [r14-0x48]
  00057: leave  
  00058: ret    
==> start whole compile: vdot FuncId(94) self_class:Vec start:[00000] bytecode:0x564559ecbab0
<== finished compile. elapsed:67.2µs
offset:Pos(21724) code: 1092 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jne    0x3ac92
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    rdi,QWORD PTR [r14-0x30]
  0002b: test   rdi,0x7
  00032: jne    0x3aca1
  00038: cmp    DWORD PTR [rdi+0x4],0x2b
  0003c: jne    0x3aca1
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %2 = @x: Vec[IvarId(0)]
  00042: mov    rdi,QWORD PTR [r14-0x30]
  00046: mov    rax,QWORD PTR [rdi+0x10]
  0004a: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = %1.call x()                     [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x38]
  00052: test   rdi,0x7
  00059: jne    0x3acb0
  0005f: cmp    DWORD PTR [rdi+0x4],0x2b
  00063: jne    0x3acb0
  00069: cmp    DWORD PTR [rip+0xfffffffffffff275],0x26        # 0xfffff2e5
  00070: jne    0x3acb0
  00076: mov    esi,DWORD PTR [rip+0x3cc]        # 0x448
  0007c: cmp    esi,0xffffffff
  0007f: je     0x3acbf
  00085: cmp    WORD PTR [rdi+0x2],0x3
  0008a: jne    0xa3
  00090: cmp    esi,0x6
  00093: jge    0xa3
  00099: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009e: jmp    0xaf
  000a3: movabs rax,0x564559818b00
  000ad: call   rax
  000af: mov    QWORD PTR [r14-0x48],rax
:00003 
:00004 %2 = %2 * %3                         [Float][Float]
  000b3: mov    rdi,QWORD PTR [r14-0x40]
  000b7: test   rdi,0x1
  000be: jne    0x3ace8
  000c4: test   rdi,0x2
  000cb: je     0x107
  000d1: xorps  xmm2,xmm2
  000d4: movabs rax,0x8000000000000002
  000de: cmp    rdi,rax
  000e1: je     0x119
  000e7: mov    rax,rdi
  000ea: sar    rax,0x3f
  000ee: add    rax,0x2
  000f2: and    rdi,0xfffffffffffffffc
  000f6: or     rdi,rax
  000f9: rol    rdi,0x3d
  000fd: movq   xmm2,rdi
  00102: jmp    0x119
  00107: call   0xffffaba1
  0010c: test   rax,rax
  0010f: je     0x3ace8
  00115: movq   xmm2,xmm0
  00119: mov    rdi,QWORD PTR [r14-0x48]
  0011d: test   rdi,0x1
  00124: jne    0x3acf7
  0012a: test   rdi,0x2
  00131: je     0x16d
  00137: xorps  xmm3,xmm3
  0013a: movabs rax,0x8000000000000002
  00144: cmp    rdi,rax
  00147: je     0x17f
  0014d: mov    rax,rdi
  00150: sar    rax,0x3f
  00154: add    rax,0x2
  00158: and    rdi,0xfffffffffffffffc
  0015c: or     rdi,rax
  0015f: rol    rdi,0x3d
  00163: movq   xmm3,rdi
  00168: jmp    0x17f
  0016d: call   0xffffaba1
  00172: test   rax,rax
  00175: je     0x3acf7
  0017b: movq   xmm3,xmm0
  0017f: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00183: mov    rdi,QWORD PTR [r14-0x30]
  00187: mov    rax,QWORD PTR [rdi+0x18]
  0018b: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = %1.call y()                     [Vec]
  0018f: mov    rdi,QWORD PTR [r14-0x38]
  00193: test   rdi,0x7
  0019a: jne    0x3ad06
  001a0: cmp    DWORD PTR [rdi+0x4],0x2b
  001a4: jne    0x3ad06
  001aa: cmp    DWORD PTR [rip+0xfffffffffffff134],0x26        # 0xfffff2e5
  001b1: jne    0x3ad06
  001b7: mov    esi,DWORD PTR [rip+0x293]        # 0x450
  001bd: cmp    esi,0xffffffff
  001c0: je     0x3ad22
  001c6: cmp    WORD PTR [rdi+0x2],0x3
  001cb: jne    0x1e4
  001d1: cmp    esi,0x6
  001d4: jge    0x1e4
  001da: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df: jmp    0x202
  001e4: sub    rsp,0x10
  001e8: movq   QWORD PTR [rsp],xmm2
  001ed: movabs rax,0x564559818b00
  001f7: call   rax
  001f9: movq   xmm2,QWORD PTR [rsp]
  001fe: add    rsp,0x10
  00202: mov    QWORD PTR [r14-0x50],rax
:00007 
:00008 %3 = %3 * %4                         [Float][Float]
  00206: mov    rdi,QWORD PTR [r14-0x48]
  0020a: test   rdi,0x1
  00211: jne    0x3ad5d
  00217: test   rdi,0x2
  0021e: je     0x25a
  00224: xorps  xmm3,xmm3
  00227: movabs rax,0x8000000000000002
  00231: cmp    rdi,rax
  00234: je     0x26c
  0023a: mov    rax,rdi
  0023d: sar    rax,0x3f
  00241: add    rax,0x2
  00245: and    rdi,0xfffffffffffffffc
  00249: or     rdi,rax
  0024c: rol    rdi,0x3d
  00250: movq   xmm3,rdi
  00255: jmp    0x26c
  0025a: call   0xffffaba1
  0025f: test   rax,rax
  00262: je     0x3ad5d
  00268: movq   xmm3,xmm0
  0026c: mov    rdi,QWORD PTR [r14-0x50]
  00270: test   rdi,0x1
  00277: jne    0x3ad79
  0027d: test   rdi,0x2
  00284: je     0x2c0
  0028a: xorps  xmm4,xmm4
  0028d: movabs rax,0x8000000000000002
  00297: cmp    rdi,rax
  0029a: je     0x2d2
  002a0: mov    rax,rdi
  002a3: sar    rax,0x3f
  002a7: add    rax,0x2
  002ab: and    rdi,0xfffffffffffffffc
  002af: or     rdi,rax
  002b2: rol    rdi,0x3d
  002b6: movq   xmm4,rdi
  002bb: jmp    0x2d2
  002c0: call   0xffffaba1
  002c5: test   rax,rax
  002c8: je     0x3ad79
  002ce: movq   xmm4,xmm0
  002d2: mulsd  xmm3,xmm4
:00009 %2 = %2 + %3                         [Float][Float]
  002d6: addsd  xmm2,xmm3
:00010 %3 = @z: Vec[IvarId(2)]
  002da: mov    rdi,QWORD PTR [r14-0x30]
  002de: mov    rax,QWORD PTR [rdi+0x20]
  002e2: mov    QWORD PTR [r14-0x48],rax
:00011 %4 = %1.call z()                     [Vec]
  002e6: mov    rdi,QWORD PTR [r14-0x38]
  002ea: test   rdi,0x7
  002f1: jne    0x3ad95
  002f7: cmp    DWORD PTR [rdi+0x4],0x2b
  002fb: jne    0x3ad95
  00301: cmp    DWORD PTR [rip+0xffffffffffffefdd],0x26        # 0xfffff2e5
  00308: jne    0x3ad95
  0030e: mov    esi,DWORD PTR [rip+0x144]        # 0x458
  00314: cmp    esi,0xffffffff
  00317: je     0x3adb1
  0031d: cmp    WORD PTR [rdi+0x2],0x3
  00322: jne    0x33b
  00328: cmp    esi,0x6
  0032b: jge    0x33b
  00331: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00336: jmp    0x359
  0033b: sub    rsp,0x10
  0033f: movq   QWORD PTR [rsp],xmm2
  00344: movabs rax,0x564559818b00
  0034e: call   rax
  00350: movq   xmm2,QWORD PTR [rsp]
  00355: add    rsp,0x10
  00359: mov    QWORD PTR [r14-0x50],rax
:00012 
:00013 %3 = %3 * %4                         [Float][Float]
  0035d: mov    rdi,QWORD PTR [r14-0x48]
  00361: test   rdi,0x1
  00368: jne    0x3adec
  0036e: test   rdi,0x2
  00375: je     0x3b1
  0037b: xorps  xmm3,xmm3
  0037e: movabs rax,0x8000000000000002
  00388: cmp    rdi,rax
  0038b: je     0x3c3
  00391: mov    rax,rdi
  00394: sar    rax,0x3f
  00398: add    rax,0x2
  0039c: and    rdi,0xfffffffffffffffc
  003a0: or     rdi,rax
  003a3: rol    rdi,0x3d
  003a7: movq   xmm3,rdi
  003ac: jmp    0x3c3
  003b1: call   0xffffaba1
  003b6: test   rax,rax
  003b9: je     0x3adec
  003bf: movq   xmm3,xmm0
  003c3: mov    rdi,QWORD PTR [r14-0x50]
  003c7: test   rdi,0x1
  003ce: jne    0x3ae08
  003d4: test   rdi,0x2
  003db: je     0x417
  003e1: xorps  xmm4,xmm4
  003e4: movabs rax,0x8000000000000002
  003ee: cmp    rdi,rax
  003f1: je     0x429
  003f7: mov    rax,rdi
  003fa: sar    rax,0x3f
  003fe: add    rax,0x2
  00402: and    rdi,0xfffffffffffffffc
  00406: or     rdi,rax
  00409: rol    rdi,0x3d
  0040d: movq   xmm4,rdi
  00412: jmp    0x429
  00417: call   0xffffaba1
  0041c: test   rax,rax
  0041f: je     0x3ae08
  00425: movq   xmm4,xmm0
  00429: mulsd  xmm3,xmm4
:00014 %2 = %2 + %3                         [Float][Float]
  0042d: addsd  xmm2,xmm3
:00015 ret %2
  00431: movq   xmm0,xmm2
  00435: call   0xffffacc5
  0043a: mov    QWORD PTR [r14-0x40],rax
  0043e: mov    rax,QWORD PTR [r14-0x40]
  00442: leave  
  00443: ret    
==> start whole compile: intersect FuncId(98) self_class:Sphere start:[00000] bytecode:0x564559e8f370
<== finished compile. elapsed:88.2µs
offset:Pos(22982) code: 6266 bytes  data: 104 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3a93a
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x3a949
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x3a949
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x3a958
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x3a958
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffffed6b],0x26        # 0xffffedfb
  00090:    	jne    0x3a958
  00096:    	mov    esi,DWORD PTR [rip+0x17e2]        # 0x187e
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x3a967
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 45 	movabs rax,0x564559818b00
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x3a990
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x3a990
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffffecfa],0x26        # 0xffffedfb
  00101:    	jne    0x3a990
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffffecf1],0x0        # 0xffffedff
  0010e:    	jne    0x3a99f
  00114: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011d:    	mov    rax,QWORD PTR [r14-0x78]
  00121:    	mov    QWORD PTR [rsp-0x40],rax
  00126: 00 	mov    rdi,0x1
  0012d:    	mov    rax,QWORD PTR [r14-0x80]
  00131:    	mov    QWORD PTR [rsp-0x48],rax
  00136: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0013f: 07 	movabs rax,0x70000005c
  00149:    	mov    QWORD PTR [rsp-0x30],rax
  0014e: 45 	movabs r13,0x564559f06550
  00158:    	mov    rsi,QWORD PTR [rbx]
  0015b:    	mov    QWORD PTR [rsp-0x18],rsi
  00160:    	lea    rsi,[rsp-0x18]
  00165:    	mov    QWORD PTR [rbx],rsi
  00168:    	lea    r14,[rsp-0x10]
  0016d:    	mov    QWORD PTR [rsp-0x20],r14
  00172:    	call   0xfffffa34
  00177:    	lea    r14,[rbp-0x8]
  0017b:    	mov    QWORD PTR [rbx],r14
  0017e:    	mov    r14,QWORD PTR [rbp-0x10]
  00182:    	test   rax,rax
  00185:    	je     0x3a9b6
  0018b:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  0018f:    	mov    rdi,QWORD PTR [r14-0x38]
  00193: 00 	test   rdi,0x7
  0019a:    	jne    0x3a9c5
  001a0:    	cmp    DWORD PTR [rdi+0x4],0x31
  001a4:    	jne    0x3a9c5
  001aa: 26 	cmp    DWORD PTR [rip+0xffffffffffffec4a],0x26        # 0xffffedfb
  001b1:    	jne    0x3a9c5
  001b7:    	mov    esi,DWORD PTR [rip+0x16c9]        # 0x1886
  001bd:    	cmp    esi,0xffffffff
  001c0:    	je     0x3a9d4
  001c6:    	cmp    WORD PTR [rdi+0x2],0x3
  001cb:    	jne    0x1e4
  001d1:    	cmp    esi,0x6
  001d4:    	jge    0x1e4
  001da:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df:    	jmp    0x1f0
  001e4: 45 	movabs rax,0x564559818b00
  001ee:    	call   rax
  001f0:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  001f4:    	mov    rdi,QWORD PTR [r14-0x48]
  001f8: 00 	test   rdi,0x7
  001ff:    	jne    0x3a9fd
  00205:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00209:    	jne    0x3a9fd
  0020f: 26 	cmp    DWORD PTR [rip+0xffffffffffffebe5],0x26        # 0xffffedfb
  00216:    	jne    0x3a9fd
  0021c: 00 	cmp    DWORD PTR [rip+0xffffffffffffebdc],0x0        # 0xffffedff
  00223:    	jne    0x3aa0c
  00229: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00232:    	mov    rax,QWORD PTR [r14-0x48]
  00236:    	mov    QWORD PTR [rsp-0x40],rax
  0023b: 00 	mov    rdi,0x1
  00242:    	mov    rax,QWORD PTR [r14-0x78]
  00246:    	mov    QWORD PTR [rsp-0x48],rax
  0024b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00254: 05 	movabs rax,0x100050000005e
  0025e:    	mov    QWORD PTR [rsp-0x30],rax
  00263: 45 	movabs r13,0x564559ecbab0
  0026d:    	mov    rsi,QWORD PTR [rbx]
  00270:    	mov    QWORD PTR [rsp-0x18],rsi
  00275:    	lea    rsi,[rsp-0x18]
  0027a:    	mov    QWORD PTR [rbx],rsi
  0027d:    	lea    r14,[rsp-0x10]
  00282:    	mov    QWORD PTR [rsp-0x20],r14
  00287:    	call   0xfffffac2
  0028c:    	lea    r14,[rbp-0x8]
  00290:    	mov    QWORD PTR [rbx],r14
  00293:    	mov    r14,QWORD PTR [rbp-0x10]
  00297:    	test   rax,rax
  0029a:    	je     0x3aa23
  002a0:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002a4:    	mov    rax,QWORD PTR [r14-0x48]
  002a8:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002ac:    	mov    rdi,QWORD PTR [r14-0x48]
  002b0: 00 	test   rdi,0x7
  002b7:    	jne    0x3aa32
  002bd:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002c1:    	jne    0x3aa32
  002c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb2d],0x26        # 0xffffedfb
  002ce:    	jne    0x3aa32
  002d4: 00 	cmp    DWORD PTR [rip+0xffffffffffffeb24],0x0        # 0xffffedff
  002db:    	jne    0x3aa41
  002e1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002ea:    	mov    rax,QWORD PTR [r14-0x48]
  002ee:    	mov    QWORD PTR [rsp-0x40],rax
  002f3: 00 	mov    rdi,0x1
  002fa:    	mov    rax,QWORD PTR [r14-0x78]
  002fe:    	mov    QWORD PTR [rsp-0x48],rax
  00303: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0030c: 05 	movabs rax,0x100050000005e
  00316:    	mov    QWORD PTR [rsp-0x30],rax
  0031b: 45 	movabs r13,0x564559ecbab0
  00325:    	mov    rsi,QWORD PTR [rbx]
  00328:    	mov    QWORD PTR [rsp-0x18],rsi
  0032d:    	lea    rsi,[rsp-0x18]
  00332:    	mov    QWORD PTR [rbx],rsi
  00335:    	lea    r14,[rsp-0x10]
  0033a:    	mov    QWORD PTR [rsp-0x20],r14
  0033f:    	call   0xfffffac2
  00344:    	lea    r14,[rbp-0x8]
  00348:    	mov    QWORD PTR [rbx],r14
  0034b:    	mov    r14,QWORD PTR [rbp-0x10]
  0034f:    	test   rax,rax
  00352:    	je     0x3aa58
  00358:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  0035c:    	mov    rdi,QWORD PTR [r14-0x30]
  00360:    	mov    rax,QWORD PTR [rdi+0x18]
  00364:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  00368:    	mov    rdi,QWORD PTR [r14-0x30]
  0036c:    	mov    rax,QWORD PTR [rdi+0x18]
  00370: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  00377:    	mov    rdi,QWORD PTR [r14-0x80]
  0037b: 00 	test   rdi,0x1
  00382:    	jne    0x3aa67
  00388: 00 	test   rdi,0x2
  0038f:    	je     0x3cb
  00395:    	xorps  xmm2,xmm2
  00398: 00 	movabs rax,0x8000000000000002
  003a2:    	cmp    rdi,rax
  003a5:    	je     0x3dd
  003ab:    	mov    rax,rdi
  003ae:    	sar    rax,0x3f
  003b2:    	add    rax,0x2
  003b6:    	and    rdi,0xfffffffffffffffc
  003ba:    	or     rdi,rax
  003bd:    	rol    rdi,0x3d
  003c1:    	movq   xmm2,rdi
  003c6:    	jmp    0x3dd
  003cb:    	call   0xffffa6b7
  003d0:    	test   rax,rax
  003d3:    	je     0x3aa67
  003d9:    	movq   xmm2,xmm0
  003dd: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003e4: 00 	test   rdi,0x1
  003eb:    	jne    0x3aa76
  003f1: 00 	test   rdi,0x2
  003f8:    	je     0x434
  003fe:    	xorps  xmm3,xmm3
  00401: 00 	movabs rax,0x8000000000000002
  0040b:    	cmp    rdi,rax
  0040e:    	je     0x446
  00414:    	mov    rax,rdi
  00417:    	sar    rax,0x3f
  0041b:    	add    rax,0x2
  0041f:    	and    rdi,0xfffffffffffffffc
  00423:    	or     rdi,rax
  00426:    	rol    rdi,0x3d
  0042a:    	movq   xmm3,rdi
  0042f:    	jmp    0x446
  00434:    	call   0xffffa6b7
  00439:    	test   rax,rax
  0043c:    	je     0x3aa76
  00442:    	movq   xmm3,xmm0
  00446:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  0044a:    	mov    rdi,QWORD PTR [r14-0x78]
  0044e: 00 	test   rdi,0x1
  00455:    	jne    0x3aa85
  0045b: 00 	test   rdi,0x2
  00462:    	je     0x49e
  00468:    	xorps  xmm4,xmm4
  0046b: 00 	movabs rax,0x8000000000000002
  00475:    	cmp    rdi,rax
  00478:    	je     0x4b0
  0047e:    	mov    rax,rdi
  00481:    	sar    rax,0x3f
  00485:    	add    rax,0x2
  00489:    	and    rdi,0xfffffffffffffffc
  0048d:    	or     rdi,rax
  00490:    	rol    rdi,0x3d
  00494:    	movq   xmm4,rdi
  00499:    	jmp    0x4b0
  0049e:    	call   0xffffa6b7
  004a3:    	test   rax,rax
  004a6:    	je     0x3aa85
  004ac:    	movq   xmm4,xmm0
  004b0:    	movq   xmm5,xmm4
  004b4:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  004b8:    	mov    rdi,QWORD PTR [r14-0x50]
  004bc: 00 	test   rdi,0x1
  004c3:    	jne    0x3aaa1
  004c9: 00 	test   rdi,0x2
  004d0:    	je     0x50c
  004d6:    	xorps  xmm6,xmm6
  004d9: 00 	movabs rax,0x8000000000000002
  004e3:    	cmp    rdi,rax
  004e6:    	je     0x51e
  004ec:    	mov    rax,rdi
  004ef:    	sar    rax,0x3f
  004f3:    	add    rax,0x2
  004f7:    	and    rdi,0xfffffffffffffffc
  004fb:    	or     rdi,rax
  004fe:    	rol    rdi,0x3d
  00502:    	movq   xmm6,rdi
  00507:    	jmp    0x51e
  0050c:    	call   0xffffa6b7
  00511:    	test   rax,rax
  00514:    	je     0x3aaa1
  0051a:    	movq   xmm6,xmm0
  0051e:    	movq   xmm4,xmm6
  00522:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  00526:    	movq   xmm7,xmm4
  0052a:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  0052e: 00 	movq   xmm4,QWORD PTR [rip+0x1354]        # 0x188a
  00536: 00 	movabs rax,0x8000000000000002
  00540:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
  00544:    	ucomisd xmm7,xmm4
  00548:    	jbe    0x3b3d7
:00021 condnotbr _%9 =>:00087
:00022 %9 = %4
:00023 %9 = neg %9                          [<INVALID>]
  0054e: 00 	cmp    DWORD PTR [rip+0x133d],0x0        # 0x1892
  00555:    	jl     0x3aaca
  0055b:    	je     0x3ab0d
  00561: 01 	sub    DWORD PTR [rip+0x132a],0x1        # 0x1892
  00568:    	xor    rdi,rdi
  0056b:    	jmp    0x3aaca
  00570:    	movq   xmm0,xmm6
  00574:    	call   0xffffa7db
  00579:    	mov    QWORD PTR [r14-0x78],rax
  0057d:    	sub    rsp,0x30
  00581:    	movq   QWORD PTR [rsp],xmm2
  00586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0058c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00592:    	movq   QWORD PTR [rsp+0x18],xmm6
  00598:    	movq   QWORD PTR [rsp+0x20],xmm7
  0059e:    	mov    rdi,QWORD PTR [r14-0x78]
  005a2:    	mov    rdx,rdi
  005a5:    	mov    rdi,rbx
  005a8:    	mov    rsi,r12
  005ab: 45 	movabs rax,0x564559792710
  005b5:    	call   rax
  005b7:    	movq   xmm2,QWORD PTR [rsp]
  005bc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005c8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005ce:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005d4:    	add    rsp,0x30
  005d8:    	test   rax,rax
  005db:    	je     0x3ab29
  005e1:    	mov    QWORD PTR [r14-0x78],rax
:00024 %10 = const[Math]                    [<INVALID>]
  005e5: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe81e]        # 0xffffee0a
  005ec: 00 	cmp    rax,QWORD PTR [rip+0x12b7]        # 0x18aa
  005f3:    	jne    0x3ab38
  005f9: 00 	mov    rax,QWORD PTR [rip+0x129a]        # 0x189a
  00600:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.call sqrt(%11; 1)          [<INVALID>]
  00604:    	movq   xmm0,xmm7
  00608:    	call   0xffffa7db
  0060d: ff 	mov    QWORD PTR [r14-0x88],rax
  00614:    	movq   xmm0,xmm5
  00618:    	call   0xffffa7db
  0061d:    	mov    QWORD PTR [r14-0x58],rax
  00621:    	movq   xmm0,xmm7
  00625:    	call   0xffffa7db
  0062a:    	mov    QWORD PTR [r14-0x60],rax
  0062e:    	sub    rsp,0x10
  00632:    	movq   QWORD PTR [rsp],xmm7
  00637:    	mov    rdi,QWORD PTR [r14-0x80]
  0063b: 45 	movabs rax,0x564559780ec0
  00645:    	call   rax
  00647:    	mov    r15d,eax
  0064a: 45 	movabs r13,0x564559e8f520
  00654:    	cmp    QWORD PTR [r13+0x8],0x0
  00659:    	je     0x3abb9
  0065f:    	cmp    r15d,DWORD PTR [r13-0x8]
  00663:    	jne    0x3abb9
  00669:    	mov    eax,DWORD PTR [rip+0xffffffffffffe78c]        # 0xffffedfb
  0066f:    	cmp    DWORD PTR [r13-0x4],eax
  00673:    	jne    0x3abb9
  00679: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00682:    	mov    rax,QWORD PTR [r14-0x80]
  00686:    	mov    QWORD PTR [rsp-0x40],rax
  0068b: 00 	mov    rdi,0x1
  00692: ff 	mov    rax,QWORD PTR [r14-0x88]
  00699:    	mov    QWORD PTR [rsp-0x48],rax
  0069e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006a7:    	mov    r13,QWORD PTR [r13+0x8]
  006ab:    	mov    rax,QWORD PTR [r13+0x8]
  006af:    	mov    QWORD PTR [rsp-0x30],rax
  006b4:    	mov    rax,QWORD PTR [r13+0x0]
  006b8:    	mov    r13,QWORD PTR [r13+0x10]
  006bc:    	mov    rsi,QWORD PTR [rbx]
  006bf:    	mov    QWORD PTR [rsp-0x18],rsi
  006c4:    	lea    rsi,[rsp-0x18]
  006c9:    	mov    QWORD PTR [rbx],rsi
  006cc:    	lea    r14,[rsp-0x10]
  006d1:    	mov    QWORD PTR [rsp-0x20],r14
  006d6:    	call   rax
  006d8:    	lea    r14,[rbp-0x8]
  006dc:    	mov    QWORD PTR [rbx],r14
  006df:    	mov    r14,QWORD PTR [rbp-0x10]
  006e3:    	movq   xmm7,QWORD PTR [rsp]
  006e8:    	add    rsp,0x10
  006ec:    	test   rax,rax
  006ef:    	je     0x3abfa
  006f5:    	mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  006f9:    	mov    rdi,QWORD PTR [r14-0x78]
  006fd:    	mov    rsi,QWORD PTR [r14-0x80]
  00701:    	sub    rsp,0x10
  00705:    	movq   QWORD PTR [rsp],xmm7
  0070a:    	mov    rdx,rdi
  0070d:    	mov    rcx,rsi
  00710:    	mov    rdi,rbx
  00713:    	mov    rsi,r12
  00716: 45 	movabs rax,0x564559794750
  00720:    	call   rax
  00722:    	movq   xmm7,QWORD PTR [rsp]
  00727:    	add    rsp,0x10
  0072b:    	test   rax,rax
  0072e:    	je     0x3ac09
  00734:    	mov    QWORD PTR [r14-0x68],rax
:00029 %9 = literal[0.0]
  00738: 00 	movq   xmm2,QWORD PTR [rip+0x117a]        # 0x18ba
  00740: 00 	movabs rax,0x8000000000000002
  0074a:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
  0074e:    	mov    rdi,QWORD PTR [r14-0x68]
  00752:    	mov    rsi,QWORD PTR [r14-0x78]
  00756:    	sub    rsp,0x10
  0075a:    	movq   QWORD PTR [rsp],xmm7
  0075f:    	mov    rdx,rdi
  00762:    	mov    rcx,rsi
  00765:    	mov    rdi,rbx
  00768:    	mov    rsi,r12
  0076b: 45 	movabs rax,0x564559797d80
  00775:    	call   rax
  00777:    	movq   xmm7,QWORD PTR [rsp]
  0077c:    	add    rsp,0x10
  00780:    	test   rax,rax
  00783:    	je     0x3ac18
  00789:    	or     rax,0x10
  0078d:    	cmp    rax,0x14
  00791:    	je     0x3b38c
:00031 condnotbr _%9 =>:00086
:00032 %9 = %2.call t()                     [<INVALID>]
  00797:    	sub    rsp,0x10
  0079b:    	movq   QWORD PTR [rsp],xmm7
  007a0:    	mov    rdi,QWORD PTR [r14-0x40]
  007a4: 45 	movabs rax,0x564559780ec0
  007ae:    	call   rax
  007b0:    	mov    r15d,eax
  007b3: 45 	movabs r13,0x564559e8f580
  007bd:    	cmp    QWORD PTR [r13+0x8],0x0
  007c2:    	je     0x3ac27
  007c8:    	cmp    r15d,DWORD PTR [r13-0x8]
  007cc:    	jne    0x3ac27
  007d2:    	mov    eax,DWORD PTR [rip+0xffffffffffffe623]        # 0xffffedfb
  007d8:    	cmp    DWORD PTR [r13-0x4],eax
  007dc:    	jne    0x3ac27
  007e2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007eb:    	mov    rax,QWORD PTR [r14-0x40]
  007ef:    	mov    QWORD PTR [rsp-0x40],rax
  007f4: 00 	mov    rdi,0x0
  007fb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00804:    	mov    r13,QWORD PTR [r13+0x8]
  00808:    	mov    rax,QWORD PTR [r13+0x8]
  0080c:    	mov    QWORD PTR [rsp-0x30],rax
  00811:    	mov    rax,QWORD PTR [r13+0x0]
  00815:    	mov    r13,QWORD PTR [r13+0x10]
  00819:    	mov    rsi,QWORD PTR [rbx]
  0081c:    	mov    QWORD PTR [rsp-0x18],rsi
  00821:    	lea    rsi,[rsp-0x18]
  00826:    	mov    QWORD PTR [rbx],rsi
  00829:    	lea    r14,[rsp-0x10]
  0082e:    	mov    QWORD PTR [rsp-0x20],r14
  00833:    	call   rax
  00835:    	lea    r14,[rbp-0x8]
  00839:    	mov    QWORD PTR [rbx],r14
  0083c:    	mov    r14,QWORD PTR [rbp-0x10]
  00840:    	movq   xmm7,QWORD PTR [rsp]
  00845:    	add    rsp,0x10
  00849:    	test   rax,rax
  0084c:    	je     0x3ac68
  00852:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
  00856:    	mov    rdi,QWORD PTR [r14-0x68]
  0085a:    	mov    rsi,QWORD PTR [r14-0x78]
  0085e:    	sub    rsp,0x10
  00862:    	movq   QWORD PTR [rsp],xmm7
  00867:    	mov    rdx,rdi
  0086a:    	mov    rcx,rsi
  0086d:    	mov    rdi,rbx
  00870:    	mov    rsi,r12
  00873: 45 	movabs rax,0x564559798b50
  0087d:    	call   rax
  0087f:    	movq   xmm7,QWORD PTR [rsp]
  00884:    	add    rsp,0x10
  00888:    	test   rax,rax
  0088b:    	je     0x3ac77
  00891:    	or     rax,0x10
  00895:    	cmp    rax,0x14
  00899:    	je     0x3b3a5
:00035 condnotbr _%9 =>:00086
:00036 _ = %2.call t=(%7; 1)                [<INVALID>]
  0089f:    	sub    rsp,0x10
  008a3:    	movq   QWORD PTR [rsp],xmm7
  008a8:    	mov    rdi,QWORD PTR [r14-0x40]
  008ac: 45 	movabs rax,0x564559780ec0
  008b6:    	call   rax
  008b8:    	mov    r15d,eax
  008bb: 45 	movabs r13,0x564559e8f5c0
  008c5:    	cmp    QWORD PTR [r13+0x8],0x0
  008ca:    	je     0x3ac86
  008d0:    	cmp    r15d,DWORD PTR [r13-0x8]
  008d4:    	jne    0x3ac86
  008da:    	mov    eax,DWORD PTR [rip+0xffffffffffffe51b]        # 0xffffedfb
  008e0:    	cmp    DWORD PTR [r13-0x4],eax
  008e4:    	jne    0x3ac86
  008ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  008f3:    	mov    rax,QWORD PTR [r14-0x40]
  008f7:    	mov    QWORD PTR [rsp-0x40],rax
  008fc: 00 	mov    rdi,0x1
  00903:    	mov    rax,QWORD PTR [r14-0x68]
  00907:    	mov    QWORD PTR [rsp-0x48],rax
  0090c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00915:    	mov    r13,QWORD PTR [r13+0x8]
  00919:    	mov    rax,QWORD PTR [r13+0x8]
  0091d:    	mov    QWORD PTR [rsp-0x30],rax
  00922:    	mov    rax,QWORD PTR [r13+0x0]
  00926:    	mov    r13,QWORD PTR [r13+0x10]
  0092a:    	mov    rsi,QWORD PTR [rbx]
  0092d:    	mov    QWORD PTR [rsp-0x18],rsi
  00932:    	lea    rsi,[rsp-0x18]
  00937:    	mov    QWORD PTR [rbx],rsi
  0093a:    	lea    r14,[rsp-0x10]
  0093f:    	mov    QWORD PTR [rsp-0x20],r14
  00944:    	call   rax
  00946:    	lea    r14,[rbp-0x8]
  0094a:    	mov    QWORD PTR [rbx],r14
  0094d:    	mov    r14,QWORD PTR [rbp-0x10]
  00951:    	movq   xmm7,QWORD PTR [rsp]
  00956:    	add    rsp,0x10
  0095a:    	test   rax,rax
  0095d:    	je     0x3acc7
:00037 
:00038 %9 = literal[true]
  00963: 00 	mov    rax,0x1c
  0096a:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [<INVALID>]
  0096e:    	sub    rsp,0x10
  00972:    	movq   QWORD PTR [rsp],xmm7
  00977:    	mov    rdi,QWORD PTR [r14-0x40]
  0097b: 45 	movabs rax,0x564559780ec0
  00985:    	call   rax
  00987:    	mov    r15d,eax
  0098a: 45 	movabs r13,0x564559e8f5f0
  00994:    	cmp    QWORD PTR [r13+0x8],0x0
  00999:    	je     0x3acd6
  0099f:    	cmp    r15d,DWORD PTR [r13-0x8]
  009a3:    	jne    0x3acd6
  009a9:    	mov    eax,DWORD PTR [rip+0xffffffffffffe44c]        # 0xffffedfb
  009af:    	cmp    DWORD PTR [r13-0x4],eax
  009b3:    	jne    0x3acd6
  009b9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009c2:    	mov    rax,QWORD PTR [r14-0x40]
  009c6:    	mov    QWORD PTR [rsp-0x40],rax
  009cb: 00 	mov    rdi,0x1
  009d2:    	mov    rax,QWORD PTR [r14-0x78]
  009d6:    	mov    QWORD PTR [rsp-0x48],rax
  009db: 00 	mov    QWORD PTR [rsp-0x38],0x0
  009e4:    	mov    r13,QWORD PTR [r13+0x8]
  009e8:    	mov    rax,QWORD PTR [r13+0x8]
  009ec:    	mov    QWORD PTR [rsp-0x30],rax
  009f1:    	mov    rax,QWORD PTR [r13+0x0]
  009f5:    	mov    r13,QWORD PTR [r13+0x10]
  009f9:    	mov    rsi,QWORD PTR [rbx]
  009fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00a01:    	lea    rsi,[rsp-0x18]
  00a06:    	mov    QWORD PTR [rbx],rsi
  00a09:    	lea    r14,[rsp-0x10]
  00a0e:    	mov    QWORD PTR [rsp-0x20],r14
  00a13:    	call   rax
  00a15:    	lea    r14,[rbp-0x8]
  00a19:    	mov    QWORD PTR [rbx],r14
  00a1c:    	mov    r14,QWORD PTR [rbp-0x10]
  00a20:    	movq   xmm7,QWORD PTR [rsp]
  00a25:    	add    rsp,0x10
  00a29:    	test   rax,rax
  00a2c:    	je     0x3ad17
:00040 
:00041 %9 = const[Vec]                      [<INVALID>]
  00a32: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe3d1]        # 0xffffee0a
  00a39: 00 	cmp    rax,QWORD PTR [rip+0xe9a]        # 0x18da
  00a40:    	jne    0x3ad26
  00a46: 00 	mov    rax,QWORD PTR [rip+0xe7d]        # 0x18ca
  00a4d:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [<INVALID>]
  00a51:    	sub    rsp,0x10
  00a55:    	movq   QWORD PTR [rsp],xmm7
  00a5a:    	mov    rdi,QWORD PTR [r14-0x38]
  00a5e: 45 	movabs rax,0x564559780ec0
  00a68:    	call   rax
  00a6a:    	mov    r15d,eax
  00a6d: 45 	movabs r13,0x564559e8f620
  00a77:    	cmp    QWORD PTR [r13+0x8],0x0
  00a7c:    	je     0x3ad83
  00a82:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a86:    	jne    0x3ad83
  00a8c:    	mov    eax,DWORD PTR [rip+0xffffffffffffe369]        # 0xffffedfb
  00a92:    	cmp    DWORD PTR [r13-0x4],eax
  00a96:    	jne    0x3ad83
  00a9c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aa5:    	mov    rax,QWORD PTR [r14-0x38]
  00aa9:    	mov    QWORD PTR [rsp-0x40],rax
  00aae: 00 	mov    rdi,0x0
  00ab5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00abe:    	mov    r13,QWORD PTR [r13+0x8]
  00ac2:    	mov    rax,QWORD PTR [r13+0x8]
  00ac6:    	mov    QWORD PTR [rsp-0x30],rax
  00acb:    	mov    rax,QWORD PTR [r13+0x0]
  00acf:    	mov    r13,QWORD PTR [r13+0x10]
  00ad3:    	mov    rsi,QWORD PTR [rbx]
  00ad6:    	mov    QWORD PTR [rsp-0x18],rsi
  00adb:    	lea    rsi,[rsp-0x18]
  00ae0:    	mov    QWORD PTR [rbx],rsi
  00ae3:    	lea    r14,[rsp-0x10]
  00ae8:    	mov    QWORD PTR [rsp-0x20],r14
  00aed:    	call   rax
  00aef:    	lea    r14,[rbp-0x8]
  00af3:    	mov    QWORD PTR [rbx],r14
  00af6:    	mov    r14,QWORD PTR [rbp-0x10]
  00afa:    	movq   xmm7,QWORD PTR [rsp]
  00aff:    	add    rsp,0x10
  00b03:    	test   rax,rax
  00b06:    	je     0x3adc4
  00b0c:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [<INVALID>]
  00b10:    	sub    rsp,0x10
  00b14:    	movq   QWORD PTR [rsp],xmm7
  00b19:    	mov    rdi,QWORD PTR [r14-0x80]
  00b1d: 45 	movabs rax,0x564559780ec0
  00b27:    	call   rax
  00b29:    	mov    r15d,eax
  00b2c: 45 	movabs r13,0x564559e8f640
  00b36:    	cmp    QWORD PTR [r13+0x8],0x0
  00b3b:    	je     0x3add3
  00b41:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b45:    	jne    0x3add3
  00b4b:    	mov    eax,DWORD PTR [rip+0xffffffffffffe2aa]        # 0xffffedfb
  00b51:    	cmp    DWORD PTR [r13-0x4],eax
  00b55:    	jne    0x3add3
  00b5b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b64:    	mov    rax,QWORD PTR [r14-0x80]
  00b68:    	mov    QWORD PTR [rsp-0x40],rax
  00b6d: 00 	mov    rdi,0x0
  00b74: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b7d:    	mov    r13,QWORD PTR [r13+0x8]
  00b81:    	mov    rax,QWORD PTR [r13+0x8]
  00b85:    	mov    QWORD PTR [rsp-0x30],rax
  00b8a:    	mov    rax,QWORD PTR [r13+0x0]
  00b8e:    	mov    r13,QWORD PTR [r13+0x10]
  00b92:    	mov    rsi,QWORD PTR [rbx]
  00b95:    	mov    QWORD PTR [rsp-0x18],rsi
  00b9a:    	lea    rsi,[rsp-0x18]
  00b9f:    	mov    QWORD PTR [rbx],rsi
  00ba2:    	lea    r14,[rsp-0x10]
  00ba7:    	mov    QWORD PTR [rsp-0x20],r14
  00bac:    	call   rax
  00bae:    	lea    r14,[rbp-0x8]
  00bb2:    	mov    QWORD PTR [rbx],r14
  00bb5:    	mov    r14,QWORD PTR [rbp-0x10]
  00bb9:    	movq   xmm7,QWORD PTR [rsp]
  00bbe:    	add    rsp,0x10
  00bc2:    	test   rax,rax
  00bc5:    	je     0x3ae14
  00bcb:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [<INVALID>]
  00bcf:    	mov    rdi,QWORD PTR [r14-0x38]
  00bd3: 45 	movabs rax,0x564559780ec0
  00bdd:    	call   rax
  00bdf:    	mov    r15d,eax
  00be2: 45 	movabs r13,0x564559e8f660
  00bec:    	cmp    QWORD PTR [r13+0x8],0x0
  00bf1:    	je     0x3ae23
  00bf7:    	cmp    r15d,DWORD PTR [r13-0x8]
  00bfb:    	jne    0x3ae23
  00c01:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1f4]        # 0xffffedfb
  00c07:    	cmp    DWORD PTR [r13-0x4],eax
  00c0b:    	jne    0x3ae23
  00c11: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c1a:    	mov    rax,QWORD PTR [r14-0x38]
  00c1e:    	mov    QWORD PTR [rsp-0x40],rax
  00c23: 00 	mov    rdi,0x0
  00c2a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c33:    	mov    r13,QWORD PTR [r13+0x8]
  00c37:    	mov    rax,QWORD PTR [r13+0x8]
  00c3b:    	mov    QWORD PTR [rsp-0x30],rax
  00c40:    	mov    rax,QWORD PTR [r13+0x0]
  00c44:    	mov    r13,QWORD PTR [r13+0x10]
  00c48:    	mov    rsi,QWORD PTR [rbx]
  00c4b:    	mov    QWORD PTR [rsp-0x18],rsi
  00c50:    	lea    rsi,[rsp-0x18]
  00c55:    	mov    QWORD PTR [rbx],rsi
  00c58:    	lea    r14,[rsp-0x10]
  00c5d:    	mov    QWORD PTR [rsp-0x20],r14
  00c62:    	call   rax
  00c64:    	lea    r14,[rbp-0x8]
  00c68:    	mov    QWORD PTR [rbx],r14
  00c6b:    	mov    r14,QWORD PTR [rbp-0x10]
  00c6f:    	test   rax,rax
  00c72:    	je     0x3ae64
  00c78: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [<INVALID>]
  00c7f: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00c86: 45 	movabs rax,0x564559780ec0
  00c90:    	call   rax
  00c92:    	mov    r15d,eax
  00c95: 45 	movabs r13,0x564559e8f680
  00c9f:    	cmp    QWORD PTR [r13+0x8],0x0
  00ca4:    	je     0x3ae73
  00caa:    	cmp    r15d,DWORD PTR [r13-0x8]
  00cae:    	jne    0x3ae73
  00cb4:    	mov    eax,DWORD PTR [rip+0xffffffffffffe141]        # 0xffffedfb
  00cba:    	cmp    DWORD PTR [r13-0x4],eax
  00cbe:    	jne    0x3ae73
  00cc4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ccd: ff 	mov    rax,QWORD PTR [r14-0x88]
  00cd4:    	mov    QWORD PTR [rsp-0x40],rax
  00cd9: 00 	mov    rdi,0x0
  00ce0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ce9:    	mov    r13,QWORD PTR [r13+0x8]
  00ced:    	mov    rax,QWORD PTR [r13+0x8]
  00cf1:    	mov    QWORD PTR [rsp-0x30],rax
  00cf6:    	mov    rax,QWORD PTR [r13+0x0]
  00cfa:    	mov    r13,QWORD PTR [r13+0x10]
  00cfe:    	mov    rsi,QWORD PTR [rbx]
  00d01:    	mov    QWORD PTR [rsp-0x18],rsi
  00d06:    	lea    rsi,[rsp-0x18]
  00d0b:    	mov    QWORD PTR [rbx],rsi
  00d0e:    	lea    r14,[rsp-0x10]
  00d13:    	mov    QWORD PTR [rsp-0x20],r14
  00d18:    	call   rax
  00d1a:    	lea    r14,[rbp-0x8]
  00d1e:    	mov    QWORD PTR [rbx],r14
  00d21:    	mov    r14,QWORD PTR [rbp-0x10]
  00d25:    	test   rax,rax
  00d28:    	je     0x3aeb7
  00d2e: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [<INVALID>][<INVALID>]
  00d35: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00d3c:    	mov    rsi,QWORD PTR [r14-0x68]
  00d40:    	mov    rdx,rdi
  00d43:    	mov    rcx,rsi
  00d46:    	mov    rdi,rbx
  00d49:    	mov    rsi,r12
  00d4c: 45 	movabs rax,0x564559795730
  00d56:    	call   rax
  00d58:    	test   rax,rax
  00d5b:    	je     0x3aec6
  00d61: ff 	mov    QWORD PTR [r14-0x88],rax
:00051 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00d68:    	mov    rdi,QWORD PTR [r14-0x80]
  00d6c: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00d73:    	mov    rdx,rdi
  00d76:    	mov    rcx,rsi
  00d79:    	mov    rdi,rbx
  00d7c:    	mov    rsi,r12
  00d7f: 45 	movabs rax,0x5645597937b0
  00d89:    	call   rax
  00d8b:    	test   rax,rax
  00d8e:    	je     0x3aed5
  00d94:    	mov    QWORD PTR [r14-0x80],rax
:00052 %11 = %1.call org()                  [<INVALID>]
  00d98:    	mov    rdi,QWORD PTR [r14-0x38]
  00d9c: 45 	movabs rax,0x564559780ec0
  00da6:    	call   rax
  00da8:    	mov    r15d,eax
  00dab: 45 	movabs r13,0x564559e8f6c0
  00db5:    	cmp    QWORD PTR [r13+0x8],0x0
  00dba:    	je     0x3aee4
  00dc0:    	cmp    r15d,DWORD PTR [r13-0x8]
  00dc4:    	jne    0x3aee4
  00dca:    	mov    eax,DWORD PTR [rip+0xffffffffffffe02b]        # 0xffffedfb
  00dd0:    	cmp    DWORD PTR [r13-0x4],eax
  00dd4:    	jne    0x3aee4
  00dda: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00de3:    	mov    rax,QWORD PTR [r14-0x38]
  00de7:    	mov    QWORD PTR [rsp-0x40],rax
  00dec: 00 	mov    rdi,0x0
  00df3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00dfc:    	mov    r13,QWORD PTR [r13+0x8]
  00e00:    	mov    rax,QWORD PTR [r13+0x8]
  00e04:    	mov    QWORD PTR [rsp-0x30],rax
  00e09:    	mov    rax,QWORD PTR [r13+0x0]
  00e0d:    	mov    r13,QWORD PTR [r13+0x10]
  00e11:    	mov    rsi,QWORD PTR [rbx]
  00e14:    	mov    QWORD PTR [rsp-0x18],rsi
  00e19:    	lea    rsi,[rsp-0x18]
  00e1e:    	mov    QWORD PTR [rbx],rsi
  00e21:    	lea    r14,[rsp-0x10]
  00e26:    	mov    QWORD PTR [rsp-0x20],r14
  00e2b:    	call   rax
  00e2d:    	lea    r14,[rbp-0x8]
  00e31:    	mov    QWORD PTR [rbx],r14
  00e34:    	mov    r14,QWORD PTR [rbp-0x10]
  00e38:    	test   rax,rax
  00e3b:    	je     0x3af25
  00e41: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [<INVALID>]
  00e48: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e4f: 45 	movabs rax,0x564559780ec0
  00e59:    	call   rax
  00e5b:    	mov    r15d,eax
  00e5e: 45 	movabs r13,0x564559e8f6e0
  00e68:    	cmp    QWORD PTR [r13+0x8],0x0
  00e6d:    	je     0x3af34
  00e73:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e77:    	jne    0x3af34
  00e7d:    	mov    eax,DWORD PTR [rip+0xffffffffffffdf78]        # 0xffffedfb
  00e83:    	cmp    DWORD PTR [r13-0x4],eax
  00e87:    	jne    0x3af34
  00e8d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e96: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e9d:    	mov    QWORD PTR [rsp-0x40],rax
  00ea2: 00 	mov    rdi,0x0
  00ea9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00eb2:    	mov    r13,QWORD PTR [r13+0x8]
  00eb6:    	mov    rax,QWORD PTR [r13+0x8]
  00eba:    	mov    QWORD PTR [rsp-0x30],rax
  00ebf:    	mov    rax,QWORD PTR [r13+0x0]
  00ec3:    	mov    r13,QWORD PTR [r13+0x10]
  00ec7:    	mov    rsi,QWORD PTR [rbx]
  00eca:    	mov    QWORD PTR [rsp-0x18],rsi
  00ecf:    	lea    rsi,[rsp-0x18]
  00ed4:    	mov    QWORD PTR [rbx],rsi
  00ed7:    	lea    r14,[rsp-0x10]
  00edc:    	mov    QWORD PTR [rsp-0x20],r14
  00ee1:    	call   rax
  00ee3:    	lea    r14,[rbp-0x8]
  00ee7:    	mov    QWORD PTR [rbx],r14
  00eea:    	mov    r14,QWORD PTR [rbp-0x10]
  00eee:    	test   rax,rax
  00ef1:    	je     0x3af78
  00ef7: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [<INVALID>]
  00efe:    	mov    rdi,QWORD PTR [r14-0x38]
  00f02: 45 	movabs rax,0x564559780ec0
  00f0c:    	call   rax
  00f0e:    	mov    r15d,eax
  00f11: 45 	movabs r13,0x564559e8f700
  00f1b:    	cmp    QWORD PTR [r13+0x8],0x0
  00f20:    	je     0x3af87
  00f26:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f2a:    	jne    0x3af87
  00f30:    	mov    eax,DWORD PTR [rip+0xffffffffffffdec5]        # 0xffffedfb
  00f36:    	cmp    DWORD PTR [r13-0x4],eax
  00f3a:    	jne    0x3af87
  00f40: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f49:    	mov    rax,QWORD PTR [r14-0x38]
  00f4d:    	mov    QWORD PTR [rsp-0x40],rax
  00f52: 00 	mov    rdi,0x0
  00f59: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f62:    	mov    r13,QWORD PTR [r13+0x8]
  00f66:    	mov    rax,QWORD PTR [r13+0x8]
  00f6a:    	mov    QWORD PTR [rsp-0x30],rax
  00f6f:    	mov    rax,QWORD PTR [r13+0x0]
  00f73:    	mov    r13,QWORD PTR [r13+0x10]
  00f77:    	mov    rsi,QWORD PTR [rbx]
  00f7a:    	mov    QWORD PTR [rsp-0x18],rsi
  00f7f:    	lea    rsi,[rsp-0x18]
  00f84:    	mov    QWORD PTR [rbx],rsi
  00f87:    	lea    r14,[rsp-0x10]
  00f8c:    	mov    QWORD PTR [rsp-0x20],r14
  00f91:    	call   rax
  00f93:    	lea    r14,[rbp-0x8]
  00f97:    	mov    QWORD PTR [rbx],r14
  00f9a:    	mov    r14,QWORD PTR [rbp-0x10]
  00f9e:    	test   rax,rax
  00fa1:    	je     0x3afc8
  00fa7: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [<INVALID>]
  00fae: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00fb5: 45 	movabs rax,0x564559780ec0
  00fbf:    	call   rax
  00fc1:    	mov    r15d,eax
  00fc4: 45 	movabs r13,0x564559e8f720
  00fce:    	cmp    QWORD PTR [r13+0x8],0x0
  00fd3:    	je     0x3afd7
  00fd9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fdd:    	jne    0x3afd7
  00fe3:    	mov    eax,DWORD PTR [rip+0xffffffffffffde12]        # 0xffffedfb
  00fe9:    	cmp    DWORD PTR [r13-0x4],eax
  00fed:    	jne    0x3afd7
  00ff3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ffc: ff 	mov    rax,QWORD PTR [r14-0x90]
  01003:    	mov    QWORD PTR [rsp-0x40],rax
  01008: 00 	mov    rdi,0x0
  0100f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01018:    	mov    r13,QWORD PTR [r13+0x8]
  0101c:    	mov    rax,QWORD PTR [r13+0x8]
  01020:    	mov    QWORD PTR [rsp-0x30],rax
  01025:    	mov    rax,QWORD PTR [r13+0x0]
  01029:    	mov    r13,QWORD PTR [r13+0x10]
  0102d:    	mov    rsi,QWORD PTR [rbx]
  01030:    	mov    QWORD PTR [rsp-0x18],rsi
  01035:    	lea    rsi,[rsp-0x18]
  0103a:    	mov    QWORD PTR [rbx],rsi
  0103d:    	lea    r14,[rsp-0x10]
  01042:    	mov    QWORD PTR [rsp-0x20],r14
  01047:    	call   rax
  01049:    	lea    r14,[rbp-0x8]
  0104d:    	mov    QWORD PTR [rbx],r14
  01050:    	mov    r14,QWORD PTR [rbp-0x10]
  01054:    	test   rax,rax
  01057:    	je     0x3b01b
  0105d: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  01064: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0106b:    	mov    rsi,QWORD PTR [r14-0x68]
  0106f:    	mov    rdx,rdi
  01072:    	mov    rcx,rsi
  01075:    	mov    rdi,rbx
  01078:    	mov    rsi,r12
  0107b: 45 	movabs rax,0x564559795730
  01085:    	call   rax
  01087:    	test   rax,rax
  0108a:    	je     0x3b02a
  01090: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  01097: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0109e: ff 	mov    rsi,QWORD PTR [r14-0x90]
  010a5:    	mov    rdx,rdi
  010a8:    	mov    rcx,rsi
  010ab:    	mov    rdi,rbx
  010ae:    	mov    rsi,r12
  010b1: 45 	movabs rax,0x5645597937b0
  010bb:    	call   rax
  010bd:    	test   rax,rax
  010c0:    	je     0x3b039
  010c6: ff 	mov    QWORD PTR [r14-0x88],rax
:00062 %12 = %1.call org()                  [<INVALID>]
  010cd:    	mov    rdi,QWORD PTR [r14-0x38]
  010d1: 45 	movabs rax,0x564559780ec0
  010db:    	call   rax
  010dd:    	mov    r15d,eax
  010e0: 45 	movabs r13,0x564559e8f760
  010ea:    	cmp    QWORD PTR [r13+0x8],0x0
  010ef:    	je     0x3b048
  010f5:    	cmp    r15d,DWORD PTR [r13-0x8]
  010f9:    	jne    0x3b048
  010ff:    	mov    eax,DWORD PTR [rip+0xffffffffffffdcf6]        # 0xffffedfb
  01105:    	cmp    DWORD PTR [r13-0x4],eax
  01109:    	jne    0x3b048
  0110f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01118:    	mov    rax,QWORD PTR [r14-0x38]
  0111c:    	mov    QWORD PTR [rsp-0x40],rax
  01121: 00 	mov    rdi,0x0
  01128: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01131:    	mov    r13,QWORD PTR [r13+0x8]
  01135:    	mov    rax,QWORD PTR [r13+0x8]
  01139:    	mov    QWORD PTR [rsp-0x30],rax
  0113e:    	mov    rax,QWORD PTR [r13+0x0]
  01142:    	mov    r13,QWORD PTR [r13+0x10]
  01146:    	mov    rsi,QWORD PTR [rbx]
  01149:    	mov    QWORD PTR [rsp-0x18],rsi
  0114e:    	lea    rsi,[rsp-0x18]
  01153:    	mov    QWORD PTR [rbx],rsi
  01156:    	lea    r14,[rsp-0x10]
  0115b:    	mov    QWORD PTR [rsp-0x20],r14
  01160:    	call   rax
  01162:    	lea    r14,[rbp-0x8]
  01166:    	mov    QWORD PTR [rbx],r14
  01169:    	mov    r14,QWORD PTR [rbp-0x10]
  0116d:    	test   rax,rax
  01170:    	je     0x3b089
  01176: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [<INVALID>]
  0117d: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01184: 45 	movabs rax,0x564559780ec0
  0118e:    	call   rax
  01190:    	mov    r15d,eax
  01193: 45 	movabs r13,0x564559e8f780
  0119d:    	cmp    QWORD PTR [r13+0x8],0x0
  011a2:    	je     0x3b098
  011a8:    	cmp    r15d,DWORD PTR [r13-0x8]
  011ac:    	jne    0x3b098
  011b2:    	mov    eax,DWORD PTR [rip+0xffffffffffffdc43]        # 0xffffedfb
  011b8:    	cmp    DWORD PTR [r13-0x4],eax
  011bc:    	jne    0x3b098
  011c2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011cb: ff 	mov    rax,QWORD PTR [r14-0x90]
  011d2:    	mov    QWORD PTR [rsp-0x40],rax
  011d7: 00 	mov    rdi,0x0
  011de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011e7:    	mov    r13,QWORD PTR [r13+0x8]
  011eb:    	mov    rax,QWORD PTR [r13+0x8]
  011ef:    	mov    QWORD PTR [rsp-0x30],rax
  011f4:    	mov    rax,QWORD PTR [r13+0x0]
  011f8:    	mov    r13,QWORD PTR [r13+0x10]
  011fc:    	mov    rsi,QWORD PTR [rbx]
  011ff:    	mov    QWORD PTR [rsp-0x18],rsi
  01204:    	lea    rsi,[rsp-0x18]
  01209:    	mov    QWORD PTR [rbx],rsi
  0120c:    	lea    r14,[rsp-0x10]
  01211:    	mov    QWORD PTR [rsp-0x20],r14
  01216:    	call   rax
  01218:    	lea    r14,[rbp-0x8]
  0121c:    	mov    QWORD PTR [rbx],r14
  0121f:    	mov    r14,QWORD PTR [rbp-0x10]
  01223:    	test   rax,rax
  01226:    	je     0x3b0dc
  0122c: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [<INVALID>]
  01233:    	mov    rdi,QWORD PTR [r14-0x38]
  01237: 45 	movabs rax,0x564559780ec0
  01241:    	call   rax
  01243:    	mov    r15d,eax
  01246: 45 	movabs r13,0x564559e8f7a0
  01250:    	cmp    QWORD PTR [r13+0x8],0x0
  01255:    	je     0x3b0eb
  0125b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0125f:    	jne    0x3b0eb
  01265:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb90]        # 0xffffedfb
  0126b:    	cmp    DWORD PTR [r13-0x4],eax
  0126f:    	jne    0x3b0eb
  01275: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0127e:    	mov    rax,QWORD PTR [r14-0x38]
  01282:    	mov    QWORD PTR [rsp-0x40],rax
  01287: 00 	mov    rdi,0x0
  0128e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01297:    	mov    r13,QWORD PTR [r13+0x8]
  0129b:    	mov    rax,QWORD PTR [r13+0x8]
  0129f:    	mov    QWORD PTR [rsp-0x30],rax
  012a4:    	mov    rax,QWORD PTR [r13+0x0]
  012a8:    	mov    r13,QWORD PTR [r13+0x10]
  012ac:    	mov    rsi,QWORD PTR [rbx]
  012af:    	mov    QWORD PTR [rsp-0x18],rsi
  012b4:    	lea    rsi,[rsp-0x18]
  012b9:    	mov    QWORD PTR [rbx],rsi
  012bc:    	lea    r14,[rsp-0x10]
  012c1:    	mov    QWORD PTR [rsp-0x20],r14
  012c6:    	call   rax
  012c8:    	lea    r14,[rbp-0x8]
  012cc:    	mov    QWORD PTR [rbx],r14
  012cf:    	mov    r14,QWORD PTR [rbp-0x10]
  012d3:    	test   rax,rax
  012d6:    	je     0x3b12c
  012dc: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [<INVALID>]
  012e3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012ea: 45 	movabs rax,0x564559780ec0
  012f4:    	call   rax
  012f6:    	mov    r15d,eax
  012f9: 45 	movabs r13,0x564559e8f7c0
  01303:    	cmp    QWORD PTR [r13+0x8],0x0
  01308:    	je     0x3b13b
  0130e:    	cmp    r15d,DWORD PTR [r13-0x8]
  01312:    	jne    0x3b13b
  01318:    	mov    eax,DWORD PTR [rip+0xffffffffffffdadd]        # 0xffffedfb
  0131e:    	cmp    DWORD PTR [r13-0x4],eax
  01322:    	jne    0x3b13b
  01328: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01331: ff 	mov    rax,QWORD PTR [r14-0x98]
  01338:    	mov    QWORD PTR [rsp-0x40],rax
  0133d: 00 	mov    rdi,0x0
  01344: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0134d:    	mov    r13,QWORD PTR [r13+0x8]
  01351:    	mov    rax,QWORD PTR [r13+0x8]
  01355:    	mov    QWORD PTR [rsp-0x30],rax
  0135a:    	mov    rax,QWORD PTR [r13+0x0]
  0135e:    	mov    r13,QWORD PTR [r13+0x10]
  01362:    	mov    rsi,QWORD PTR [rbx]
  01365:    	mov    QWORD PTR [rsp-0x18],rsi
  0136a:    	lea    rsi,[rsp-0x18]
  0136f:    	mov    QWORD PTR [rbx],rsi
  01372:    	lea    r14,[rsp-0x10]
  01377:    	mov    QWORD PTR [rsp-0x20],r14
  0137c:    	call   rax
  0137e:    	lea    r14,[rbp-0x8]
  01382:    	mov    QWORD PTR [rbx],r14
  01385:    	mov    r14,QWORD PTR [rbp-0x10]
  01389:    	test   rax,rax
  0138c:    	je     0x3b17f
  01392: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  01399: ff 	mov    rdi,QWORD PTR [r14-0x98]
  013a0:    	mov    rsi,QWORD PTR [r14-0x68]
  013a4:    	mov    rdx,rdi
  013a7:    	mov    rcx,rsi
  013aa:    	mov    rdi,rbx
  013ad:    	mov    rsi,r12
  013b0: 45 	movabs rax,0x564559795730
  013ba:    	call   rax
  013bc:    	test   rax,rax
  013bf:    	je     0x3b18e
  013c5: ff 	mov    QWORD PTR [r14-0x98],rax
:00071 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  013cc: ff 	mov    rdi,QWORD PTR [r14-0x90]
  013d3: ff 	mov    rsi,QWORD PTR [r14-0x98]
  013da:    	mov    rdx,rdi
  013dd:    	mov    rcx,rsi
  013e0:    	mov    rdi,rbx
  013e3:    	mov    rsi,r12
  013e6: 45 	movabs rax,0x5645597937b0
  013f0:    	call   rax
  013f2:    	test   rax,rax
  013f5:    	je     0x3b19d
  013fb: ff 	mov    QWORD PTR [r14-0x90],rax
:00072 %9 = %9.call new(%10; 3)             [<INVALID>]
  01402:    	mov    rdi,QWORD PTR [r14-0x78]
  01406: 45 	movabs rax,0x564559780ec0
  01410:    	call   rax
  01412:    	mov    r15d,eax
  01415: 45 	movabs r13,0x564559e8f800
  0141f:    	cmp    QWORD PTR [r13+0x8],0x0
  01424:    	je     0x3b1ac
  0142a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0142e:    	jne    0x3b1ac
  01434:    	mov    eax,DWORD PTR [rip+0xffffffffffffd9c1]        # 0xffffedfb
  0143a:    	cmp    DWORD PTR [r13-0x4],eax
  0143e:    	jne    0x3b1ac
  01444: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0144d:    	mov    rax,QWORD PTR [r14-0x78]
  01451:    	mov    QWORD PTR [rsp-0x40],rax
  01456: 00 	mov    rdi,0x3
  0145d:    	mov    rax,QWORD PTR [r14-0x80]
  01461:    	mov    QWORD PTR [rsp-0x48],rax
  01466: ff 	mov    rax,QWORD PTR [r14-0x88]
  0146d:    	mov    QWORD PTR [rsp-0x50],rax
  01472: ff 	mov    rax,QWORD PTR [r14-0x90]
  01479:    	mov    QWORD PTR [rsp-0x58],rax
  0147e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01487:    	mov    r13,QWORD PTR [r13+0x8]
  0148b:    	mov    rax,QWORD PTR [r13+0x8]
  0148f:    	mov    QWORD PTR [rsp-0x30],rax
  01494:    	mov    rax,QWORD PTR [r13+0x0]
  01498:    	mov    r13,QWORD PTR [r13+0x10]
  0149c:    	mov    rsi,QWORD PTR [rbx]
  0149f:    	mov    QWORD PTR [rsp-0x18],rsi
  014a4:    	lea    rsi,[rsp-0x18]
  014a9:    	mov    QWORD PTR [rbx],rsi
  014ac:    	lea    r14,[rsp-0x10]
  014b1:    	mov    QWORD PTR [rsp-0x20],r14
  014b6:    	call   rax
  014b8:    	lea    r14,[rbp-0x8]
  014bc:    	mov    QWORD PTR [rbx],r14
  014bf:    	mov    r14,QWORD PTR [rbp-0x10]
  014c3:    	test   rax,rax
  014c6:    	je     0x3b1ed
  014cc:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [<INVALID>]
  014d0:    	mov    rdi,QWORD PTR [r14-0x40]
  014d4: 45 	movabs rax,0x564559780ec0
  014de:    	call   rax
  014e0:    	mov    r15d,eax
  014e3: 45 	movabs r13,0x564559e8f820
  014ed:    	cmp    QWORD PTR [r13+0x8],0x0
  014f2:    	je     0x3b1fc
  014f8:    	cmp    r15d,DWORD PTR [r13-0x8]
  014fc:    	jne    0x3b1fc
  01502:    	mov    eax,DWORD PTR [rip+0xffffffffffffd8f3]        # 0xffffedfb
  01508:    	cmp    DWORD PTR [r13-0x4],eax
  0150c:    	jne    0x3b1fc
  01512: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0151b:    	mov    rax,QWORD PTR [r14-0x40]
  0151f:    	mov    QWORD PTR [rsp-0x40],rax
  01524: 00 	mov    rdi,0x1
  0152b:    	mov    rax,QWORD PTR [r14-0x78]
  0152f:    	mov    QWORD PTR [rsp-0x48],rax
  01534: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0153d:    	mov    r13,QWORD PTR [r13+0x8]
  01541:    	mov    rax,QWORD PTR [r13+0x8]
  01545:    	mov    QWORD PTR [rsp-0x30],rax
  0154a:    	mov    rax,QWORD PTR [r13+0x0]
  0154e:    	mov    r13,QWORD PTR [r13+0x10]
  01552:    	mov    rsi,QWORD PTR [rbx]
  01555:    	mov    QWORD PTR [rsp-0x18],rsi
  0155a:    	lea    rsi,[rsp-0x18]
  0155f:    	mov    QWORD PTR [rbx],rsi
  01562:    	lea    r14,[rsp-0x10]
  01567:    	mov    QWORD PTR [rsp-0x20],r14
  0156c:    	call   rax
  0156e:    	lea    r14,[rbp-0x8]
  01572:    	mov    QWORD PTR [rbx],r14
  01575:    	mov    r14,QWORD PTR [rbp-0x10]
  01579:    	test   rax,rax
  0157c:    	je     0x3b23d
:00075 
:00076 %9 = %2.call pl()                    [<INVALID>]
  01582:    	mov    rdi,QWORD PTR [r14-0x40]
  01586: 45 	movabs rax,0x564559780ec0
  01590:    	call   rax
  01592:    	mov    r15d,eax
  01595: 45 	movabs r13,0x564559e8f840
  0159f:    	cmp    QWORD PTR [r13+0x8],0x0
  015a4:    	je     0x3b24c
  015aa:    	cmp    r15d,DWORD PTR [r13-0x8]
  015ae:    	jne    0x3b24c
  015b4:    	mov    eax,DWORD PTR [rip+0xffffffffffffd841]        # 0xffffedfb
  015ba:    	cmp    DWORD PTR [r13-0x4],eax
  015be:    	jne    0x3b24c
  015c4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015cd:    	mov    rax,QWORD PTR [r14-0x40]
  015d1:    	mov    QWORD PTR [rsp-0x40],rax
  015d6: 00 	mov    rdi,0x0
  015dd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015e6:    	mov    r13,QWORD PTR [r13+0x8]
  015ea:    	mov    rax,QWORD PTR [r13+0x8]
  015ee:    	mov    QWORD PTR [rsp-0x30],rax
  015f3:    	mov    rax,QWORD PTR [r13+0x0]
  015f7:    	mov    r13,QWORD PTR [r13+0x10]
  015fb:    	mov    rsi,QWORD PTR [rbx]
  015fe:    	mov    QWORD PTR [rsp-0x18],rsi
  01603:    	lea    rsi,[rsp-0x18]
  01608:    	mov    QWORD PTR [rbx],rsi
  0160b:    	lea    r14,[rsp-0x10]
  01610:    	mov    QWORD PTR [rsp-0x20],r14
  01615:    	call   rax
  01617:    	lea    r14,[rbp-0x8]
  0161b:    	mov    QWORD PTR [rbx],r14
  0161e:    	mov    r14,QWORD PTR [rbp-0x10]
  01622:    	test   rax,rax
  01625:    	je     0x3b28d
  0162b:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: <INVALID>[IvarId(0)]
  0162f:    	mov    rdi,QWORD PTR [r14-0x30]
  01633: 00 	mov    rsi,0xa5
  0163a:    	mov    rdx,r12
  0163d: 45 	movabs rax,0x5645597e4ae0
  01647:    	call   rax
  01649:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  0164d:    	mov    rdi,QWORD PTR [r14-0x78]
  01651: 45 	movabs rax,0x564559780ec0
  0165b:    	call   rax
  0165d:    	mov    r15d,eax
  01660: 45 	movabs r13,0x564559e8f870
  0166a:    	cmp    QWORD PTR [r13+0x8],0x0
  0166f:    	je     0x3b29c
  01675:    	cmp    r15d,DWORD PTR [r13-0x8]
  01679:    	jne    0x3b29c
  0167f:    	mov    eax,DWORD PTR [rip+0xffffffffffffd776]        # 0xffffedfb
  01685:    	cmp    DWORD PTR [r13-0x4],eax
  01689:    	jne    0x3b29c
  0168f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01698:    	mov    rax,QWORD PTR [r14-0x78]
  0169c:    	mov    QWORD PTR [rsp-0x40],rax
  016a1: 00 	mov    rdi,0x1
  016a8:    	mov    rax,QWORD PTR [r14-0x80]
  016ac:    	mov    QWORD PTR [rsp-0x48],rax
  016b1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016ba:    	mov    r13,QWORD PTR [r13+0x8]
  016be:    	mov    rax,QWORD PTR [r13+0x8]
  016c2:    	mov    QWORD PTR [rsp-0x30],rax
  016c7:    	mov    rax,QWORD PTR [r13+0x0]
  016cb:    	mov    r13,QWORD PTR [r13+0x10]
  016cf:    	mov    rsi,QWORD PTR [rbx]
  016d2:    	mov    QWORD PTR [rsp-0x18],rsi
  016d7:    	lea    rsi,[rsp-0x18]
  016dc:    	mov    QWORD PTR [rbx],rsi
  016df:    	lea    r14,[rsp-0x10]
  016e4:    	mov    QWORD PTR [rsp-0x20],r14
  016e9:    	call   rax
  016eb:    	lea    r14,[rbp-0x8]
  016ef:    	mov    QWORD PTR [rbx],r14
  016f2:    	mov    r14,QWORD PTR [rbp-0x10]
  016f6:    	test   rax,rax
  016f9:    	je     0x3b2dd
  016ff:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [<INVALID>]
  01703:    	mov    rdi,QWORD PTR [r14-0x70]
  01707: 45 	movabs rax,0x564559780ec0
  01711:    	call   rax
  01713:    	mov    r15d,eax
  01716: 45 	movabs r13,0x564559e8f890
  01720:    	cmp    QWORD PTR [r13+0x8],0x0
  01725:    	je     0x3b2ec
  0172b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0172f:    	jne    0x3b2ec
  01735:    	mov    eax,DWORD PTR [rip+0xffffffffffffd6c0]        # 0xffffedfb
  0173b:    	cmp    DWORD PTR [r13-0x4],eax
  0173f:    	jne    0x3b2ec
  01745: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0174e:    	mov    rax,QWORD PTR [r14-0x70]
  01752:    	mov    QWORD PTR [rsp-0x40],rax
  01757: 00 	mov    rdi,0x0
  0175e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01767:    	mov    r13,QWORD PTR [r13+0x8]
  0176b:    	mov    rax,QWORD PTR [r13+0x8]
  0176f:    	mov    QWORD PTR [rsp-0x30],rax
  01774:    	mov    rax,QWORD PTR [r13+0x0]
  01778:    	mov    r13,QWORD PTR [r13+0x10]
  0177c:    	mov    rsi,QWORD PTR [rbx]
  0177f:    	mov    QWORD PTR [rsp-0x18],rsi
  01784:    	lea    rsi,[rsp-0x18]
  01789:    	mov    QWORD PTR [rbx],rsi
  0178c:    	lea    r14,[rsp-0x10]
  01791:    	mov    QWORD PTR [rsp-0x20],r14
  01796:    	call   rax
  01798:    	lea    r14,[rbp-0x8]
  0179c:    	mov    QWORD PTR [rbx],r14
  0179f:    	mov    r14,QWORD PTR [rbp-0x10]
  017a3:    	test   rax,rax
  017a6:    	je     0x3b32d
  017ac:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [<INVALID>]
  017b0:    	mov    rdi,QWORD PTR [r14-0x40]
  017b4: 45 	movabs rax,0x564559780ec0
  017be:    	call   rax
  017c0:    	mov    r15d,eax
  017c3: 45 	movabs r13,0x564559e8f8b0
  017cd:    	cmp    QWORD PTR [r13+0x8],0x0
  017d2:    	je     0x3b33c
  017d8:    	cmp    r15d,DWORD PTR [r13-0x8]
  017dc:    	jne    0x3b33c
  017e2:    	mov    eax,DWORD PTR [rip+0xffffffffffffd613]        # 0xffffedfb
  017e8:    	cmp    DWORD PTR [r13-0x4],eax
  017ec:    	jne    0x3b33c
  017f2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017fb:    	mov    rax,QWORD PTR [r14-0x40]
  017ff:    	mov    QWORD PTR [rsp-0x40],rax
  01804: 00 	mov    rdi,0x1
  0180b:    	mov    rax,QWORD PTR [r14-0x78]
  0180f:    	mov    QWORD PTR [rsp-0x48],rax
  01814: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0181d:    	mov    r13,QWORD PTR [r13+0x8]
  01821:    	mov    rax,QWORD PTR [r13+0x8]
  01825:    	mov    QWORD PTR [rsp-0x30],rax
  0182a:    	mov    rax,QWORD PTR [r13+0x0]
  0182e:    	mov    r13,QWORD PTR [r13+0x10]
  01832:    	mov    rsi,QWORD PTR [rbx]
  01835:    	mov    QWORD PTR [rsp-0x18],rsi
  0183a:    	lea    rsi,[rsp-0x18]
  0183f:    	mov    QWORD PTR [rbx],rsi
  01842:    	lea    r14,[rsp-0x10]
  01847:    	mov    QWORD PTR [rsp-0x20],r14
  0184c:    	call   rax
  0184e:    	lea    r14,[rbp-0x8]
  01852:    	mov    QWORD PTR [rbx],r14
  01855:    	mov    r14,QWORD PTR [rbp-0x10]
  01859:    	test   rax,rax
  0185c:    	je     0x3b37d
:00084 
:00085 br =>:00086
  01862:    	jmp    0x3b3be
:00086 br =>:00087
  01867:    	jmp    0x3b417
:00087 %9 = nil
  0186c: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  01874:    	mov    rax,QWORD PTR [r14-0x78]
  01878:    	leave  
  01879:    	ret    
==> start whole compile: vsub FuncId(92) self_class:Vec start:[00000] bytecode:0x564559f06550
<== finished compile. elapsed:33.2µs
offset:Pos(29352) code: 1345 bytes  data: 55 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x39b4e
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    rdi,QWORD PTR [r14-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x39b5d
  00040: cmp    DWORD PTR [rdi+0x4],0x2b
  00044: jne    0x39b5d
:00000 init_method reg:7 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffffd4d7]        # 0xffffd528
  00051: cmp    rax,QWORD PTR [rip+0x500]        # 0x558
  00058: jne    0x39b6c
  0005e: mov    rax,QWORD PTR [rip+0x4e3]        # 0x548
  00065: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [r14-0x30]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call x()                     [Vec]
  00075: mov    rdi,QWORD PTR [r14-0x38]
  00079: test   rdi,0x7
  00080: jne    0x39bb7
  00086: cmp    DWORD PTR [rdi+0x4],0x2b
  0008a: jne    0x39bb7
  00090: cmp    DWORD PTR [rip+0xffffffffffffd482],0x26        # 0xffffd519
  00097: jne    0x39bb7
  0009d: mov    esi,DWORD PTR [rip+0x4c1]        # 0x564
  000a3: cmp    esi,0xffffffff
  000a6: je     0x39bc6
  000ac: cmp    WORD PTR [rdi+0x2],0x3
  000b1: jne    0xca
  000b7: cmp    esi,0x6
  000ba: jge    0xca
  000c0: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c5: jmp    0xd6
  000ca: movabs rax,0x564559818b00
  000d4: call   rax
  000d6: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 - %4                         [Float][Float]
  000da: mov    rdi,QWORD PTR [r14-0x48]
  000de: test   rdi,0x1
  000e5: jne    0x39bef
  000eb: test   rdi,0x2
  000f2: je     0x12e
  000f8: xorps  xmm2,xmm2
  000fb: movabs rax,0x8000000000000002
  00105: cmp    rdi,rax
  00108: je     0x140
  0010e: mov    rax,rdi
  00111: sar    rax,0x3f
  00115: add    rax,0x2
  00119: and    rdi,0xfffffffffffffffc
  0011d: or     rdi,rax
  00120: rol    rdi,0x3d
  00124: movq   xmm2,rdi
  00129: jmp    0x140
  0012e: call   0xffff8dd5
  00133: test   rax,rax
  00136: je     0x39bef
  0013c: movq   xmm2,xmm0
  00140: mov    rdi,QWORD PTR [r14-0x50]
  00144: test   rdi,0x1
  0014b: jne    0x39bfe
  00151: test   rdi,0x2
  00158: je     0x194
  0015e: xorps  xmm3,xmm3
  00161: movabs rax,0x8000000000000002
  0016b: cmp    rdi,rax
  0016e: je     0x1a6
  00174: mov    rax,rdi
  00177: sar    rax,0x3f
  0017b: add    rax,0x2
  0017f: and    rdi,0xfffffffffffffffc
  00183: or     rdi,rax
  00186: rol    rdi,0x3d
  0018a: movq   xmm3,rdi
  0018f: jmp    0x1a6
  00194: call   0xffff8dd5
  00199: test   rax,rax
  0019c: je     0x39bfe
  001a2: movq   xmm3,xmm0
  001a6: subsd  xmm2,xmm3
:00006 %4 = @y: Vec[IvarId(1)]
  001aa: mov    rdi,QWORD PTR [r14-0x30]
  001ae: mov    rax,QWORD PTR [rdi+0x18]
  001b2: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001b6: mov    rdi,QWORD PTR [r14-0x38]
  001ba: test   rdi,0x7
  001c1: jne    0x39c0d
  001c7: cmp    DWORD PTR [rdi+0x4],0x2b
  001cb: jne    0x39c0d
  001d1: cmp    DWORD PTR [rip+0xffffffffffffd341],0x26        # 0xffffd519
  001d8: jne    0x39c0d
  001de: mov    esi,DWORD PTR [rip+0x388]        # 0x56c
  001e4: cmp    esi,0xffffffff
  001e7: je     0x39c29
  001ed: cmp    WORD PTR [rdi+0x2],0x3
  001f2: jne    0x20b
  001f8: cmp    esi,0x6
  001fb: jge    0x20b
  00201: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00206: jmp    0x229
  0020b: sub    rsp,0x10
  0020f: movq   QWORD PTR [rsp],xmm2
  00214: movabs rax,0x564559818b00
  0021e: call   rax
  00220: movq   xmm2,QWORD PTR [rsp]
  00225: add    rsp,0x10
  00229: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 - %5                         [Float][Float]
  0022d: mov    rdi,QWORD PTR [r14-0x50]
  00231: test   rdi,0x1
  00238: jne    0x39c64
  0023e: test   rdi,0x2
  00245: je     0x281
  0024b: xorps  xmm3,xmm3
  0024e: movabs rax,0x8000000000000002
  00258: cmp    rdi,rax
  0025b: je     0x293
  00261: mov    rax,rdi
  00264: sar    rax,0x3f
  00268: add    rax,0x2
  0026c: and    rdi,0xfffffffffffffffc
  00270: or     rdi,rax
  00273: rol    rdi,0x3d
  00277: movq   xmm3,rdi
  0027c: jmp    0x293
  00281: call   0xffff8dd5
  00286: test   rax,rax
  00289: je     0x39c64
  0028f: movq   xmm3,xmm0
  00293: mov    rdi,QWORD PTR [r14-0x58]
  00297: test   rdi,0x1
  0029e: jne    0x39c80
  002a4: test   rdi,0x2
  002ab: je     0x2e7
  002b1: xorps  xmm4,xmm4
  002b4: movabs rax,0x8000000000000002
  002be: cmp    rdi,rax
  002c1: je     0x2f9
  002c7: mov    rax,rdi
  002ca: sar    rax,0x3f
  002ce: add    rax,0x2
  002d2: and    rdi,0xfffffffffffffffc
  002d6: or     rdi,rax
  002d9: rol    rdi,0x3d
  002dd: movq   xmm4,rdi
  002e2: jmp    0x2f9
  002e7: call   0xffff8dd5
  002ec: test   rax,rax
  002ef: je     0x39c80
  002f5: movq   xmm4,xmm0
  002f9: subsd  xmm3,xmm4
:00010 %5 = @z: Vec[IvarId(2)]
  002fd: mov    rdi,QWORD PTR [r14-0x30]
  00301: mov    rax,QWORD PTR [rdi+0x20]
  00305: mov    QWORD PTR [r14-0x58],rax
:00011 %6 = %1.call z()                     [Vec]
  00309: mov    rdi,QWORD PTR [r14-0x38]
  0030d: test   rdi,0x7
  00314: jne    0x39c9c
  0031a: cmp    DWORD PTR [rdi+0x4],0x2b
  0031e: jne    0x39c9c
  00324: cmp    DWORD PTR [rip+0xffffffffffffd1ee],0x26        # 0xffffd519
  0032b: jne    0x39c9c
  00331: mov    esi,DWORD PTR [rip+0x23d]        # 0x574
  00337: cmp    esi,0xffffffff
  0033a: je     0x39cc5
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x35e
  0034b: cmp    esi,0x6
  0034e: jge    0x35e
  00354: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00359: jmp    0x388
  0035e: sub    rsp,0x10
  00362: movq   QWORD PTR [rsp],xmm2
  00367: movq   QWORD PTR [rsp+0x8],xmm3
  0036d: movabs rax,0x564559818b00
  00377: call   rax
  00379: movq   xmm2,QWORD PTR [rsp]
  0037e: movq   xmm3,QWORD PTR [rsp+0x8]
  00384: add    rsp,0x10
  00388: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %5 = %5 - %6                         [Float][Float]
  0038c: mov    rdi,QWORD PTR [r14-0x58]
  00390: test   rdi,0x1
  00397: jne    0x39d0c
  0039d: test   rdi,0x2
  003a4: je     0x3e0
  003aa: xorps  xmm4,xmm4
  003ad: movabs rax,0x8000000000000002
  003b7: cmp    rdi,rax
  003ba: je     0x3f2
  003c0: mov    rax,rdi
  003c3: sar    rax,0x3f
  003c7: add    rax,0x2
  003cb: and    rdi,0xfffffffffffffffc
  003cf: or     rdi,rax
  003d2: rol    rdi,0x3d
  003d6: movq   xmm4,rdi
  003db: jmp    0x3f2
  003e0: call   0xffff8dd5
  003e5: test   rax,rax
  003e8: je     0x39d0c
  003ee: movq   xmm4,xmm0
  003f2: mov    rdi,QWORD PTR [r14-0x60]
  003f6: test   rdi,0x1
  003fd: jne    0x39d35
  00403: test   rdi,0x2
  0040a: je     0x446
  00410: xorps  xmm5,xmm5
  00413: movabs rax,0x8000000000000002
  0041d: cmp    rdi,rax
  00420: je     0x458
  00426: mov    rax,rdi
  00429: sar    rax,0x3f
  0042d: add    rax,0x2
  00431: and    rdi,0xfffffffffffffffc
  00435: or     rdi,rax
  00438: rol    rdi,0x3d
  0043c: movq   xmm5,rdi
  00441: jmp    0x458
  00446: call   0xffff8dd5
  0044b: test   rax,rax
  0044e: je     0x39d35
  00454: movq   xmm5,xmm0
  00458: subsd  xmm4,xmm5
:00014 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  0045c: movq   xmm0,xmm2
  00460: call   0xffff8ef9
  00465: mov    QWORD PTR [r14-0x48],rax
  00469: movq   xmm0,xmm3
  0046d: call   0xffff8ef9
  00472: mov    QWORD PTR [r14-0x50],rax
  00476: movq   xmm0,xmm4
  0047a: call   0xffff8ef9
  0047f: mov    QWORD PTR [r14-0x58],rax
  00483: mov    rdi,QWORD PTR [r14-0x40]
  00487: test   rdi,0x7
  0048e: jne    0x39d5e
  00494: cmp    DWORD PTR [rdi+0x4],0x2c
  00498: jne    0x39d5e
  0049e: cmp    DWORD PTR [rip+0xffffffffffffd074],0x26        # 0xffffd519
  004a5: jne    0x39d5e
  004ab: mov    r9,0x0
  004b2: sub    rsp,0x20
  004b6: movq   QWORD PTR [rsp],xmm2
  004bb: movq   QWORD PTR [rsp+0x8],xmm3
  004c1: movq   QWORD PTR [rsp+0x10],xmm4
  004c7: movq   QWORD PTR [rsp+0x18],xmm5
  004cd: mov    rdx,rdi
  004d0: mov    QWORD PTR [rsp-0x40],rcx
  004d5: mov    QWORD PTR [rsp-0x28],0x0
  004de: lea    rcx,[r14-0x48]
  004e2: mov    r8,0x3
  004e9: mov    rsi,QWORD PTR [rbx]
  004ec: mov    QWORD PTR [rsp-0x18],rsi
  004f1: lea    rsi,[rsp-0x18]
  004f6: mov    QWORD PTR [rbx],rsi
  004f9: lea    r14,[rsp-0x10]
  004fe: mov    QWORD PTR [rsp-0x20],r14
  00503: call   0x39d6d
  00508: lea    r14,[rbp-0x8]
  0050c: mov    QWORD PTR [rbx],r14
  0050f: mov    r14,QWORD PTR [rbp-0x10]
  00513: movq   xmm2,QWORD PTR [rsp]
  00518: movq   xmm3,QWORD PTR [rsp+0x8]
  0051e: movq   xmm4,QWORD PTR [rsp+0x10]
  00524: movq   xmm5,QWORD PTR [rsp+0x18]
  0052a: add    rsp,0x20
  0052e: test   rax,rax
  00531: je     0x39d9f
  00537: mov    QWORD PTR [r14-0x40],rax
:00015 
:00016 ret %2
  0053b: mov    rax,QWORD PTR [r14-0x40]
  0053f: leave  
  00540: ret    
==> start whole compile: <unnamed> FuncId(111) self_class:Scene start:[00000] bytecode:0x564559ecdf50
<== finished compile. elapsed:89µs
offset:Pos(31022) code: 6598 bytes  data: 288 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x39737
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x39737
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.inline IntegerTof()         [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x39746
  000e7: 26 	cmp    DWORD PTR [rip+0xffffffffffffcda5],0x26        # 0xffffce93
  000ee:    	jne    0x39746
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.inline IntegerTof()         [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x39755
  00128: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd64],0x26        # 0xffffce93
  0012f:    	jne    0x39755
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.inline IntegerTof()         [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x39771
  00163: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd29],0x26        # 0xffffce93
  0016a:    	jne    0x39771
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.inline IntegerTof()         [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x3979a
  001a1: 26 	cmp    DWORD PTR [rip+0xffffffffffffcceb],0x26        # 0xffffce93
  001a8:    	jne    0x3979a
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.inline IntegerTof()          [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x397d0
  001c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffccc5],0x26        # 0xffffce93
  001ce:    	jne    0x397d0
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.inline IntegerTof()         [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x39813
  001ff: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc8d],0x26        # 0xffffce93
  00206:    	jne    0x39813
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x39863
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xffff874f
  00289:    	test   rax,rax
  0028c:    	je     0x39863
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xffff871b
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 17 	movq   xmm9,QWORD PTR [rip+0x1711]        # 0x19d2
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xffff871b
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 16 	movq   xmm9,QWORD PTR [rip+0x16e9]        # 0x19e2
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xffff871b
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xffff871b
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x398c0
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xffff874f
  003b0:    	test   rax,rax
  003b3:    	je     0x398c0
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xffff871b
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 16 	movq   xmm9,QWORD PTR [rip+0x160a]        # 0x19f2
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xffff871b
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x15e3]        # 0x1a02
:00034 %15 = literal[2.0]
  0041f: 15 	movq   xmm9,QWORD PTR [rip+0x15ea]        # 0x1a12
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xffff871b
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xffff871b
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffca31]        # 0xffffcea2
  00471: 00 	cmp    rax,QWORD PTR [rip+0x15ba]        # 0x1a32
  00478:    	jne    0x3993c
  0047e: 00 	mov    rax,QWORD PTR [rip+0x159d]        # 0x1a22
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 15 	movq   xmm8,QWORD PTR [rip+0x15ad]        # 0x1a42
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xffff8873
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xffff8873
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xffff8873
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xffff8873
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xffff8873
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xffff8873
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xffff8873
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xffff8873
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xffff8873
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xffff8873
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x399ff
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x399ff
  00550: 26 	cmp    DWORD PTR [rip+0xffffffffffffc93c],0x26        # 0xffffce93
  00557:    	jne    0x399ff
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x39a0e
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd:    	test   rax,rax
  005e0:    	je     0x39a40
  005e6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005f4: 00 	test   rdi,0x7
  005fb:    	jne    0x39a4f
  00601:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00605:    	jne    0x39a4f
  0060b: 26 	cmp    DWORD PTR [rip+0xffffffffffffc881],0x26        # 0xffffce93
  00612:    	jne    0x39a4f
  00618:    	sub    rsp,0x20
  0061c:    	movq   QWORD PTR [rsp],xmm8
  00622: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00629: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  00630: 00 	cmp    DWORD PTR [rip+0xffffffffffffc860],0x0        # 0xffffce97
  00637:    	jne    0x39a5e
  0063d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00646: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0064d:    	mov    QWORD PTR [rsp-0x40],rax
  00652: 00 	mov    rdi,0x0
  00659: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00662: 07 	movabs rax,0x700000060
  0066c:    	mov    QWORD PTR [rsp-0x30],rax
  00671: 45 	movabs r13,0x564559ea5f60
  0067b:    	mov    rsi,QWORD PTR [rbx]
  0067e:    	mov    QWORD PTR [rsp-0x18],rsi
  00683:    	lea    rsi,[rsp-0x18]
  00688:    	mov    QWORD PTR [rbx],rsi
  0068b:    	lea    r14,[rsp-0x10]
  00690:    	mov    QWORD PTR [rsp-0x20],r14
  00695:    	call   0xffffd745
  0069a:    	lea    r14,[rbp-0x8]
  0069e:    	mov    QWORD PTR [rbx],r14
  006a1:    	mov    r14,QWORD PTR [rbp-0x10]
  006a5:    	movq   xmm8,QWORD PTR [rsp]
  006ab: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006b2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006b9:    	add    rsp,0x20
  006bd:    	test   rax,rax
  006c0:    	je     0x39a75
  006c6:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006ca: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc7d1]        # 0xffffcea2
  006d1: 00 	cmp    rax,QWORD PTR [rip+0x138a]        # 0x1a62
  006d8:    	jne    0x39a84
  006de: 00 	mov    rax,QWORD PTR [rip+0x136d]        # 0x1a52
  006e5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  006ec: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc7af]        # 0xffffcea2
  006f3: 00 	cmp    rax,QWORD PTR [rip+0x1388]        # 0x1a82
  006fa:    	jne    0x39aff
  00700: 00 	mov    rax,QWORD PTR [rip+0x136b]        # 0x1a72
  00707: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  0070e: 00 	movq   xmm2,QWORD PTR [rip+0x137c]        # 0x1a92
  00716: 00 	movabs rax,0x8000000000000002
  00720: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  00727: 00 	movq   xmm3,QWORD PTR [rip+0x1373]        # 0x1aa2
  0072f: 00 	movabs rax,0x8000000000000002
  00739: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00740: 00 	movq   xmm4,QWORD PTR [rip+0x136a]        # 0x1ab2
  00748: 00 	movabs rax,0x8000000000000002
  00752: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  00759: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00760: 00 	test   rdi,0x7
  00767:    	jne    0x39b6c
  0076d:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00771:    	jne    0x39b6c
  00777: 26 	cmp    DWORD PTR [rip+0xffffffffffffc715],0x26        # 0xffffce93
  0077e:    	jne    0x39b6c
  00784: 00 	mov    r9,0x0
  0078b:    	sub    rsp,0x20
  0078f:    	movq   QWORD PTR [rsp],xmm2
  00794:    	movq   QWORD PTR [rsp+0x8],xmm3
  0079a:    	movq   QWORD PTR [rsp+0x10],xmm4
  007a0:    	mov    rdx,rdi
  007a3:    	mov    QWORD PTR [rsp-0x40],rcx
  007a8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007b1: ff 	lea    rcx,[r14-0xb0]
  007b8: 00 	mov    r8,0x3
  007bf:    	mov    rsi,QWORD PTR [rbx]
  007c2:    	mov    QWORD PTR [rsp-0x18],rsi
  007c7:    	lea    rsi,[rsp-0x18]
  007cc:    	mov    QWORD PTR [rbx],rsi
  007cf:    	lea    r14,[rsp-0x10]
  007d4:    	mov    QWORD PTR [rsp-0x20],r14
  007d9:    	call   0x39b7b
  007de:    	lea    r14,[rbp-0x8]
  007e2:    	mov    QWORD PTR [rbx],r14
  007e5:    	mov    r14,QWORD PTR [rbp-0x10]
  007e9:    	movq   xmm2,QWORD PTR [rsp]
  007ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007fa:    	add    rsp,0x20
  007fe:    	test   rax,rax
  00801:    	je     0x39bad
  00807: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  0080e:    	mov    rax,QWORD PTR [r14-0x80]
  00812: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00819: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00820: 00 	test   rdi,0x7
  00827:    	jne    0x39bbc
  0082d:    	cmp    DWORD PTR [rdi+0x4],0x32
  00831:    	jne    0x39bbc
  00837: 26 	cmp    DWORD PTR [rip+0xffffffffffffc655],0x26        # 0xffffce93
  0083e:    	jne    0x39bbc
  00844: 00 	mov    r9,0x0
  0084b:    	sub    rsp,0x10
  0084f:    	movq   QWORD PTR [rsp],xmm3
  00854:    	movq   QWORD PTR [rsp+0x8],xmm4
  0085a:    	mov    rdx,rdi
  0085d:    	mov    QWORD PTR [rsp-0x40],rcx
  00862: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0086b: ff 	lea    rcx,[r14-0xa8]
  00872: 00 	mov    r8,0x2
  00879:    	mov    rsi,QWORD PTR [rbx]
  0087c:    	mov    QWORD PTR [rsp-0x18],rsi
  00881:    	lea    rsi,[rsp-0x18]
  00886:    	mov    QWORD PTR [rbx],rsi
  00889:    	lea    r14,[rsp-0x10]
  0088e:    	mov    QWORD PTR [rsp-0x20],r14
  00893:    	call   0x39bcb
  00898:    	lea    r14,[rbp-0x8]
  0089c:    	mov    QWORD PTR [rbx],r14
  0089f:    	mov    r14,QWORD PTR [rbp-0x10]
  008a3:    	movq   xmm3,QWORD PTR [rsp]
  008a8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008ae:    	add    rsp,0x10
  008b2:    	test   rax,rax
  008b5:    	je     0x39bfd
  008bb: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008c2: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc5d9]        # 0xffffcea2
  008c9: 00 	cmp    rax,QWORD PTR [rip+0x1202]        # 0x1ad2
  008d0:    	jne    0x39c0c
  008d6: 00 	mov    rax,QWORD PTR [rip+0x11e5]        # 0x1ac2
  008dd: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  008e4: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008eb: 00 	test   rdi,0x7
  008f2:    	jne    0x39c75
  008f8:    	cmp    DWORD PTR [rdi+0x4],0x34
  008fc:    	jne    0x39c75
  00902: 26 	cmp    DWORD PTR [rip+0xffffffffffffc58a],0x26        # 0xffffce93
  00909:    	jne    0x39c75
  0090f: 00 	mov    r9,0x0
  00916:    	sub    rsp,0x10
  0091a:    	movq   QWORD PTR [rsp],xmm3
  0091f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00925:    	mov    rdx,rdi
  00928:    	mov    QWORD PTR [rsp-0x40],rcx
  0092d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00936: ff 	lea    rcx,[r14-0xa8]
  0093d: 00 	mov    r8,0x0
  00944:    	mov    rsi,QWORD PTR [rbx]
  00947:    	mov    QWORD PTR [rsp-0x18],rsi
  0094c:    	lea    rsi,[rsp-0x18]
  00951:    	mov    QWORD PTR [rbx],rsi
  00954:    	lea    r14,[rsp-0x10]
  00959:    	mov    QWORD PTR [rsp-0x20],r14
  0095e:    	call   0x39c84
  00963:    	lea    r14,[rbp-0x8]
  00967:    	mov    QWORD PTR [rbx],r14
  0096a:    	mov    r14,QWORD PTR [rbp-0x10]
  0096e:    	movq   xmm3,QWORD PTR [rsp]
  00973:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00979:    	add    rsp,0x10
  0097d:    	test   rax,rax
  00980:    	je     0x39cb6
  00986: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  0098d:    	mov    rdi,QWORD PTR [r14-0x30]
  00991:    	mov    rax,QWORD PTR [rdi+0x10]
  00995: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  0099c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009a7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009ae: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009b5: 00 	test   rdi,0x7
  009bc:    	jne    0x39cc5
  009c2:    	cmp    DWORD PTR [rdi+0x4],0xb
  009c6:    	jne    0x39cc5
  009cc: 00 	test   rsi,0x1
  009d3:    	je     0x39cc5
  009d9:    	sar    rsi,1
  009dc:    	sub    rsp,0x10
  009e0:    	movq   QWORD PTR [rsp],xmm3
  009e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009eb: 45 	movabs rax,0x5645597e4900
  009f5:    	call   rax
  009f7:    	movq   xmm3,QWORD PTR [rsp]
  009fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a02:    	add    rsp,0x10
  00a06:    	test   rax,rax
  00a09:    	je     0x39cd4
  00a0f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a16: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a1d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a24: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a2b: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a32: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a39: 00 	test   rdi,0x7
  00a40:    	jne    0x39ce3
  00a46:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a4a:    	jne    0x39ce3
  00a50: 26 	cmp    DWORD PTR [rip+0xffffffffffffc43c],0x26        # 0xffffce93
  00a57:    	jne    0x39ce3
  00a5d:    	sub    rsp,0x10
  00a61:    	movq   QWORD PTR [rsp],xmm3
  00a66:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a6c: 00 	cmp    DWORD PTR [rip+0xffffffffffffc424],0x0        # 0xffffce97
  00a73:    	jne    0x39cf2
  00a79: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a82: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00a89:    	mov    QWORD PTR [rsp-0x40],rax
  00a8e: 00 	mov    rdi,0x2
  00a95: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00a9c:    	mov    QWORD PTR [rsp-0x48],rax
  00aa1: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00aa8:    	mov    QWORD PTR [rsp-0x50],rax
  00aad: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ab6: 0e 	movabs rax,0x1000e00000062
  00ac0:    	mov    QWORD PTR [rsp-0x30],rax
  00ac5: 45 	movabs r13,0x564559e8f370
  00acf:    	mov    rsi,QWORD PTR [rbx]
  00ad2:    	mov    QWORD PTR [rsp-0x18],rsi
  00ad7:    	lea    rsi,[rsp-0x18]
  00adc:    	mov    QWORD PTR [rbx],rsi
  00adf:    	lea    r14,[rsp-0x10]
  00ae4:    	mov    QWORD PTR [rsp-0x20],r14
  00ae9:    	call   0xffffda3e
  00aee:    	lea    r14,[rbp-0x8]
  00af2:    	mov    QWORD PTR [rbx],r14
  00af5:    	mov    r14,QWORD PTR [rbp-0x10]
  00af9:    	movq   xmm3,QWORD PTR [rsp]
  00afe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b04:    	add    rsp,0x10
  00b08:    	test   rax,rax
  00b0b:    	je     0x39d09
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b11:    	mov    rdi,QWORD PTR [r14-0x30]
  00b15:    	mov    rax,QWORD PTR [rdi+0x10]
  00b19: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b20: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b2b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b32: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b39: 00 	test   rdi,0x7
  00b40:    	jne    0x39d18
  00b46:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b4a:    	jne    0x39d18
  00b50: 00 	test   rsi,0x1
  00b57:    	je     0x39d18
  00b5d:    	sar    rsi,1
  00b60:    	sub    rsp,0x10
  00b64:    	movq   QWORD PTR [rsp],xmm3
  00b69:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b6f: 45 	movabs rax,0x5645597e4900
  00b79:    	call   rax
  00b7b:    	movq   xmm3,QWORD PTR [rsp]
  00b80:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b86:    	add    rsp,0x10
  00b8a:    	test   rax,rax
  00b8d:    	je     0x39d27
  00b93: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00b9a: ff 	mov    rax,QWORD PTR [r14-0x88]
  00ba1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00ba8: ff 	mov    rax,QWORD PTR [r14-0x90]
  00baf: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00bb6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bbd: 00 	test   rdi,0x7
  00bc4:    	jne    0x39d36
  00bca:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00bce:    	jne    0x39d36
  00bd4: 26 	cmp    DWORD PTR [rip+0xffffffffffffc2b8],0x26        # 0xffffce93
  00bdb:    	jne    0x39d36
  00be1:    	sub    rsp,0x10
  00be5:    	movq   QWORD PTR [rsp],xmm3
  00bea:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf0: 00 	cmp    DWORD PTR [rip+0xffffffffffffc2a0],0x0        # 0xffffce97
  00bf7:    	jne    0x39d45
  00bfd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c06: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c0d:    	mov    QWORD PTR [rsp-0x40],rax
  00c12: 00 	mov    rdi,0x2
  00c19: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00c20:    	mov    QWORD PTR [rsp-0x48],rax
  00c25: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00c2c:    	mov    QWORD PTR [rsp-0x50],rax
  00c31: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c3a: 0e 	movabs rax,0x1000e00000062
  00c44:    	mov    QWORD PTR [rsp-0x30],rax
  00c49: 45 	movabs r13,0x564559e8f370
  00c53:    	mov    rsi,QWORD PTR [rbx]
  00c56:    	mov    QWORD PTR [rsp-0x18],rsi
  00c5b:    	lea    rsi,[rsp-0x18]
  00c60:    	mov    QWORD PTR [rbx],rsi
  00c63:    	lea    r14,[rsp-0x10]
  00c68:    	mov    QWORD PTR [rsp-0x20],r14
  00c6d:    	call   0xffffda3e
  00c72:    	lea    r14,[rbp-0x8]
  00c76:    	mov    QWORD PTR [rbx],r14
  00c79:    	mov    r14,QWORD PTR [rbp-0x10]
  00c7d:    	movq   xmm3,QWORD PTR [rsp]
  00c82:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c88:    	add    rsp,0x10
  00c8c:    	test   rax,rax
  00c8f:    	je     0x39d5c
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00c95:    	mov    rdi,QWORD PTR [r14-0x30]
  00c99:    	mov    rax,QWORD PTR [rdi+0x10]
  00c9d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00ca4: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00caf: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cb6: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00cbd: 00 	test   rdi,0x7
  00cc4:    	jne    0x39d6b
  00cca:    	cmp    DWORD PTR [rdi+0x4],0xb
  00cce:    	jne    0x39d6b
  00cd4: 00 	test   rsi,0x1
  00cdb:    	je     0x39d6b
  00ce1:    	sar    rsi,1
  00ce4:    	sub    rsp,0x10
  00ce8:    	movq   QWORD PTR [rsp],xmm3
  00ced:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cf3: 45 	movabs rax,0x5645597e4900
  00cfd:    	call   rax
  00cff:    	movq   xmm3,QWORD PTR [rsp]
  00d04:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0a:    	add    rsp,0x10
  00d0e:    	test   rax,rax
  00d11:    	je     0x39d7a
  00d17: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00d1e: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d25: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00d2c: ff 	mov    rax,QWORD PTR [r14-0x90]
  00d33: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00d3a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d41: 00 	test   rdi,0x7
  00d48:    	jne    0x39d89
  00d4e:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00d52:    	jne    0x39d89
  00d58: 26 	cmp    DWORD PTR [rip+0xffffffffffffc134],0x26        # 0xffffce93
  00d5f:    	jne    0x39d89
  00d65:    	sub    rsp,0x10
  00d69:    	movq   QWORD PTR [rsp],xmm3
  00d6e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d74: 00 	cmp    DWORD PTR [rip+0xffffffffffffc11c],0x0        # 0xffffce97
  00d7b:    	jne    0x39d98
  00d81: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d8a: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d91:    	mov    QWORD PTR [rsp-0x40],rax
  00d96: 00 	mov    rdi,0x2
  00d9d: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00da4:    	mov    QWORD PTR [rsp-0x48],rax
  00da9: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00db0:    	mov    QWORD PTR [rsp-0x50],rax
  00db5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00dbe: 0e 	movabs rax,0x1000e00000062
  00dc8:    	mov    QWORD PTR [rsp-0x30],rax
  00dcd: 45 	movabs r13,0x564559e8f370
  00dd7:    	mov    rsi,QWORD PTR [rbx]
  00dda:    	mov    QWORD PTR [rsp-0x18],rsi
  00ddf:    	lea    rsi,[rsp-0x18]
  00de4:    	mov    QWORD PTR [rbx],rsi
  00de7:    	lea    r14,[rsp-0x10]
  00dec:    	mov    QWORD PTR [rsp-0x20],r14
  00df1:    	call   0xffffda3e
  00df6:    	lea    r14,[rbp-0x8]
  00dfa:    	mov    QWORD PTR [rbx],r14
  00dfd:    	mov    r14,QWORD PTR [rbp-0x10]
  00e01:    	movq   xmm3,QWORD PTR [rsp]
  00e06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e0c:    	add    rsp,0x10
  00e10:    	test   rax,rax
  00e13:    	je     0x39daf
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00e19:    	mov    rdi,QWORD PTR [r14-0x30]
  00e1d:    	mov    rax,QWORD PTR [rdi+0x18]
  00e21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00e28: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e2f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00e36: ff 	mov    rax,QWORD PTR [r14-0x90]
  00e3d: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00e44: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e4b: 00 	test   rdi,0x7
  00e52:    	jne    0x39dbe
  00e58:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00e5c:    	jne    0x39dbe
  00e62: 26 	cmp    DWORD PTR [rip+0xffffffffffffc02a],0x26        # 0xffffce93
  00e69:    	jne    0x39dbe
  00e6f:    	sub    rsp,0x10
  00e73:    	movq   QWORD PTR [rsp],xmm3
  00e78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e7e: 00 	cmp    DWORD PTR [rip+0xffffffffffffc012],0x0        # 0xffffce97
  00e85:    	jne    0x39dcd
  00e8b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e94: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00e9b:    	mov    QWORD PTR [rsp-0x40],rax
  00ea0: 00 	mov    rdi,0x2
  00ea7: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00eae:    	mov    QWORD PTR [rsp-0x48],rax
  00eb3: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00eba:    	mov    QWORD PTR [rsp-0x50],rax
  00ebf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ec8: 0c 	movabs rax,0xc00000064
  00ed2:    	mov    QWORD PTR [rsp-0x30],rax
  00ed7: 45 	movabs r13,0x564559ec5d10
  00ee1:    	mov    rsi,QWORD PTR [rbx]
  00ee4:    	mov    QWORD PTR [rsp-0x18],rsi
  00ee9:    	lea    rsi,[rsp-0x18]
  00eee:    	mov    QWORD PTR [rbx],rsi
  00ef1:    	lea    r14,[rsp-0x10]
  00ef6:    	mov    QWORD PTR [rsp-0x20],r14
  00efb:    	call   0xffffe00a
  00f00:    	lea    r14,[rbp-0x8]
  00f04:    	mov    QWORD PTR [rbx],r14
  00f07:    	mov    r14,QWORD PTR [rbp-0x10]
  00f0b:    	movq   xmm3,QWORD PTR [rsp]
  00f10:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f16:    	add    rsp,0x10
  00f1a:    	test   rax,rax
  00f1d:    	je     0x39de4
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00f23: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f2a: 00 	test   rdi,0x7
  00f31:    	jne    0x39df3
  00f37:    	cmp    DWORD PTR [rdi+0x4],0x33
  00f3b:    	jne    0x39df3
  00f41: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf4b],0x26        # 0xffffce93
  00f48:    	jne    0x39df3
  00f4e:    	mov    esi,DWORD PTR [rip+0xb8a]        # 0x1ade
  00f54:    	cmp    esi,0xffffffff
  00f57:    	je     0x39e02
  00f5d:    	cmp    WORD PTR [rdi+0x2],0x3
  00f62:    	jne    0xf7b
  00f68:    	cmp    esi,0x6
  00f6b:    	jge    0xf7b
  00f71:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f76:    	jmp    0xfa5
  00f7b:    	sub    rsp,0x10
  00f7f:    	movq   QWORD PTR [rsp],xmm3
  00f84:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f8a: 45 	movabs rax,0x564559818b00
  00f94:    	call   rax
  00f96:    	movq   xmm3,QWORD PTR [rsp]
  00f9b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fa1:    	add    rsp,0x10
  00fa5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00118
  00fac: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00fb3:    	or     rax,0x10
  00fb7:    	cmp    rax,0x14
  00fbb:    	je     0x19b2
:00087 %14 = %12
  00fc1: ff 	mov    rax,QWORD PTR [r14-0x90]
  00fc8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  00fcf: 00 	cmp    DWORD PTR [rip+0xb0c],0x0        # 0x1ae2
  00fd6:    	jl     0x39e49
  00fdc:    	je     0x39e58
  00fe2: 01 	sub    DWORD PTR [rip+0xaf9],0x1        # 0x1ae2
  00fe9:    	xor    rdi,rdi
  00fec:    	jmp    0x39e49
  00ff1:    	sub    rsp,0x10
  00ff5:    	movq   QWORD PTR [rsp],xmm3
  00ffa:    	movq   QWORD PTR [rsp+0x8],xmm4
  01000:    	mov    r15d,0x35
  01006: 45 	movabs r13,0x564559ece4e0
  01010:    	cmp    QWORD PTR [r13+0x8],0x0
  01015:    	je     0x39e74
  0101b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0101f:    	jne    0x39e74
  01025:    	mov    eax,DWORD PTR [rip+0xffffffffffffbe68]        # 0xffffce93
  0102b:    	cmp    DWORD PTR [r13-0x4],eax
  0102f:    	jne    0x39e74
  01035: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0103e:    	mov    rax,QWORD PTR [r14-0x30]
  01042:    	mov    QWORD PTR [rsp-0x40],rax
  01047: 00 	mov    rdi,0x1
  0104e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01055:    	mov    QWORD PTR [rsp-0x48],rax
  0105a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01063:    	mov    r13,QWORD PTR [r13+0x8]
  01067:    	mov    rax,QWORD PTR [r13+0x8]
  0106b:    	mov    QWORD PTR [rsp-0x30],rax
  01070:    	mov    rax,QWORD PTR [r13+0x0]
  01074:    	mov    r13,QWORD PTR [r13+0x10]
  01078:    	mov    rsi,QWORD PTR [rbx]
  0107b:    	mov    QWORD PTR [rsp-0x18],rsi
  01080:    	lea    rsi,[rsp-0x18]
  01085:    	mov    QWORD PTR [rbx],rsi
  01088:    	lea    r14,[rsp-0x10]
  0108d:    	mov    QWORD PTR [rsp-0x20],r14
  01092:    	call   rax
  01094:    	lea    r14,[rbp-0x8]
  01098:    	mov    QWORD PTR [rbx],r14
  0109b:    	mov    r14,QWORD PTR [rbp-0x10]
  0109f:    	movq   xmm3,QWORD PTR [rsp]
  010a4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010aa:    	add    rsp,0x10
  010ae:    	test   rax,rax
  010b1:    	je     0x39eb5
  010b7: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  010be:    	mov    rax,QWORD PTR [r14-0x18]
  010c2:    	mov    rax,QWORD PTR [rax]
  010c5:    	mov    rax,QWORD PTR [rax-0x28]
  010c9: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  010d0:    	mov    rax,QWORD PTR [r14-0x18]
  010d4:    	mov    rax,QWORD PTR [rax]
  010d7:    	mov    rax,QWORD PTR [rax-0x28]
  010db: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [<INVALID>]
  010e2:    	sub    rsp,0x10
  010e6:    	movq   QWORD PTR [rsp],xmm3
  010eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  010f1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  010f8: 45 	movabs rax,0x564559780ec0
  01102:    	call   rax
  01104:    	mov    r15d,eax
  01107: 45 	movabs r13,0x564559ece520
  01111:    	cmp    QWORD PTR [r13+0x8],0x0
  01116:    	je     0x39ec4
  0111c:    	cmp    r15d,DWORD PTR [r13-0x8]
  01120:    	jne    0x39ec4
  01126:    	mov    eax,DWORD PTR [rip+0xffffffffffffbd67]        # 0xffffce93
  0112c:    	cmp    DWORD PTR [r13-0x4],eax
  01130:    	jne    0x39ec4
  01136: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0113f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01146:    	mov    QWORD PTR [rsp-0x40],rax
  0114b: 00 	mov    rdi,0x0
  01152: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0115b:    	mov    r13,QWORD PTR [r13+0x8]
  0115f:    	mov    rax,QWORD PTR [r13+0x8]
  01163:    	mov    QWORD PTR [rsp-0x30],rax
  01168:    	mov    rax,QWORD PTR [r13+0x0]
  0116c:    	mov    r13,QWORD PTR [r13+0x10]
  01170:    	mov    rsi,QWORD PTR [rbx]
  01173:    	mov    QWORD PTR [rsp-0x18],rsi
  01178:    	lea    rsi,[rsp-0x18]
  0117d:    	mov    QWORD PTR [rbx],rsi
  01180:    	lea    r14,[rsp-0x10]
  01185:    	mov    QWORD PTR [rsp-0x20],r14
  0118a:    	call   rax
  0118c:    	lea    r14,[rbp-0x8]
  01190:    	mov    QWORD PTR [rbx],r14
  01193:    	mov    r14,QWORD PTR [rbp-0x10]
  01197:    	movq   xmm3,QWORD PTR [rsp]
  0119c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011a2:    	add    rsp,0x10
  011a6:    	test   rax,rax
  011a9:    	je     0x39f08
  011af: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [<INVALID>]
  011b6:    	sub    rsp,0x10
  011ba:    	movq   QWORD PTR [rsp],xmm3
  011bf:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  011cc: 45 	movabs rax,0x564559780ec0
  011d6:    	call   rax
  011d8:    	mov    r15d,eax
  011db: 45 	movabs r13,0x564559ece540
  011e5:    	cmp    QWORD PTR [r13+0x8],0x0
  011ea:    	je     0x39f17
  011f0:    	cmp    r15d,DWORD PTR [r13-0x8]
  011f4:    	jne    0x39f17
  011fa:    	mov    eax,DWORD PTR [rip+0xffffffffffffbc93]        # 0xffffce93
  01200:    	cmp    DWORD PTR [r13-0x4],eax
  01204:    	jne    0x39f17
  0120a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01213: ff 	mov    rax,QWORD PTR [r14-0x98]
  0121a:    	mov    QWORD PTR [rsp-0x40],rax
  0121f: 00 	mov    rdi,0x0
  01226: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0122f:    	mov    r13,QWORD PTR [r13+0x8]
  01233:    	mov    rax,QWORD PTR [r13+0x8]
  01237:    	mov    QWORD PTR [rsp-0x30],rax
  0123c:    	mov    rax,QWORD PTR [r13+0x0]
  01240:    	mov    r13,QWORD PTR [r13+0x10]
  01244:    	mov    rsi,QWORD PTR [rbx]
  01247:    	mov    QWORD PTR [rsp-0x18],rsi
  0124c:    	lea    rsi,[rsp-0x18]
  01251:    	mov    QWORD PTR [rbx],rsi
  01254:    	lea    r14,[rsp-0x10]
  01259:    	mov    QWORD PTR [rsp-0x20],r14
  0125e:    	call   rax
  01260:    	lea    r14,[rbp-0x8]
  01264:    	mov    QWORD PTR [rbx],r14
  01267:    	mov    r14,QWORD PTR [rbp-0x10]
  0126b:    	movq   xmm3,QWORD PTR [rsp]
  01270:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01276:    	add    rsp,0x10
  0127a:    	test   rax,rax
  0127d:    	je     0x39f5b
  01283: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0128a: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01291: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01298:    	sub    rsp,0x10
  0129c:    	movq   QWORD PTR [rsp],xmm3
  012a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012a7:    	mov    rdx,rdi
  012aa:    	mov    rcx,rsi
  012ad:    	mov    rdi,rbx
  012b0:    	mov    rsi,r12
  012b3: 45 	movabs rax,0x5645597937b0
  012bd:    	call   rax
  012bf:    	movq   xmm3,QWORD PTR [rsp]
  012c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ca:    	add    rsp,0x10
  012ce:    	test   rax,rax
  012d1:    	je     0x39f6a
  012d7: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 _ = %14.call x=(%15; 1)              [<INVALID>]
  012de:    	sub    rsp,0x10
  012e2:    	movq   QWORD PTR [rsp],xmm3
  012e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012f4: 45 	movabs rax,0x564559780ec0
  012fe:    	call   rax
  01300:    	mov    r15d,eax
  01303: 45 	movabs r13,0x564559ece570
  0130d:    	cmp    QWORD PTR [r13+0x8],0x0
  01312:    	je     0x39f79
  01318:    	cmp    r15d,DWORD PTR [r13-0x8]
  0131c:    	jne    0x39f79
  01322:    	mov    eax,DWORD PTR [rip+0xffffffffffffbb6b]        # 0xffffce93
  01328:    	cmp    DWORD PTR [r13-0x4],eax
  0132c:    	jne    0x39f79
  01332: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0133b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01342:    	mov    QWORD PTR [rsp-0x40],rax
  01347: 00 	mov    rdi,0x1
  0134e: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01355:    	mov    QWORD PTR [rsp-0x48],rax
  0135a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01363:    	mov    r13,QWORD PTR [r13+0x8]
  01367:    	mov    rax,QWORD PTR [r13+0x8]
  0136b:    	mov    QWORD PTR [rsp-0x30],rax
  01370:    	mov    rax,QWORD PTR [r13+0x0]
  01374:    	mov    r13,QWORD PTR [r13+0x10]
  01378:    	mov    rsi,QWORD PTR [rbx]
  0137b:    	mov    QWORD PTR [rsp-0x18],rsi
  01380:    	lea    rsi,[rsp-0x18]
  01385:    	mov    QWORD PTR [rbx],rsi
  01388:    	lea    r14,[rsp-0x10]
  0138d:    	mov    QWORD PTR [rsp-0x20],r14
  01392:    	call   rax
  01394:    	lea    r14,[rbp-0x8]
  01398:    	mov    QWORD PTR [rbx],r14
  0139b:    	mov    r14,QWORD PTR [rbp-0x10]
  0139f:    	movq   xmm3,QWORD PTR [rsp]
  013a4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013aa:    	add    rsp,0x10
  013ae:    	test   rax,rax
  013b1:    	je     0x39fbd
:00098 
:00099 %14 = dynvar(2, %2)
  013b7:    	mov    rax,QWORD PTR [r14-0x18]
  013bb:    	mov    rax,QWORD PTR [rax]
  013be:    	mov    rax,QWORD PTR [rax-0x28]
  013c2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  013c9:    	mov    rax,QWORD PTR [r14-0x18]
  013cd:    	mov    rax,QWORD PTR [rax]
  013d0:    	mov    rax,QWORD PTR [rax-0x28]
  013d4: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [<INVALID>]
  013db:    	sub    rsp,0x10
  013df:    	movq   QWORD PTR [rsp],xmm3
  013e4:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ea: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  013f1: 45 	movabs rax,0x564559780ec0
  013fb:    	call   rax
  013fd:    	mov    r15d,eax
  01400: 45 	movabs r13,0x564559ece5b0
  0140a:    	cmp    QWORD PTR [r13+0x8],0x0
  0140f:    	je     0x39fcc
  01415:    	cmp    r15d,DWORD PTR [r13-0x8]
  01419:    	jne    0x39fcc
  0141f:    	mov    eax,DWORD PTR [rip+0xffffffffffffba6e]        # 0xffffce93
  01425:    	cmp    DWORD PTR [r13-0x4],eax
  01429:    	jne    0x39fcc
  0142f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01438: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0143f:    	mov    QWORD PTR [rsp-0x40],rax
  01444: 00 	mov    rdi,0x0
  0144b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01454:    	mov    r13,QWORD PTR [r13+0x8]
  01458:    	mov    rax,QWORD PTR [r13+0x8]
  0145c:    	mov    QWORD PTR [rsp-0x30],rax
  01461:    	mov    rax,QWORD PTR [r13+0x0]
  01465:    	mov    r13,QWORD PTR [r13+0x10]
  01469:    	mov    rsi,QWORD PTR [rbx]
  0146c:    	mov    QWORD PTR [rsp-0x18],rsi
  01471:    	lea    rsi,[rsp-0x18]
  01476:    	mov    QWORD PTR [rbx],rsi
  01479:    	lea    r14,[rsp-0x10]
  0147e:    	mov    QWORD PTR [rsp-0x20],r14
  01483:    	call   rax
  01485:    	lea    r14,[rbp-0x8]
  01489:    	mov    QWORD PTR [rbx],r14
  0148c:    	mov    r14,QWORD PTR [rbp-0x10]
  01490:    	movq   xmm3,QWORD PTR [rsp]
  01495:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0149b:    	add    rsp,0x10
  0149f:    	test   rax,rax
  014a2:    	je     0x3a010
  014a8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [<INVALID>]
  014af:    	sub    rsp,0x10
  014b3:    	movq   QWORD PTR [rsp],xmm3
  014b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  014be: ff 	mov    rdi,QWORD PTR [r14-0x98]
  014c5: 45 	movabs rax,0x564559780ec0
  014cf:    	call   rax
  014d1:    	mov    r15d,eax
  014d4: 45 	movabs r13,0x564559ece5d0
  014de:    	cmp    QWORD PTR [r13+0x8],0x0
  014e3:    	je     0x3a01f
  014e9:    	cmp    r15d,DWORD PTR [r13-0x8]
  014ed:    	jne    0x3a01f
  014f3:    	mov    eax,DWORD PTR [rip+0xffffffffffffb99a]        # 0xffffce93
  014f9:    	cmp    DWORD PTR [r13-0x4],eax
  014fd:    	jne    0x3a01f
  01503: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0150c: ff 	mov    rax,QWORD PTR [r14-0x98]
  01513:    	mov    QWORD PTR [rsp-0x40],rax
  01518: 00 	mov    rdi,0x0
  0151f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01528:    	mov    r13,QWORD PTR [r13+0x8]
  0152c:    	mov    rax,QWORD PTR [r13+0x8]
  01530:    	mov    QWORD PTR [rsp-0x30],rax
  01535:    	mov    rax,QWORD PTR [r13+0x0]
  01539:    	mov    r13,QWORD PTR [r13+0x10]
  0153d:    	mov    rsi,QWORD PTR [rbx]
  01540:    	mov    QWORD PTR [rsp-0x18],rsi
  01545:    	lea    rsi,[rsp-0x18]
  0154a:    	mov    QWORD PTR [rbx],rsi
  0154d:    	lea    r14,[rsp-0x10]
  01552:    	mov    QWORD PTR [rsp-0x20],r14
  01557:    	call   rax
  01559:    	lea    r14,[rbp-0x8]
  0155d:    	mov    QWORD PTR [rbx],r14
  01560:    	mov    r14,QWORD PTR [rbp-0x10]
  01564:    	movq   xmm3,QWORD PTR [rsp]
  01569:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0156f:    	add    rsp,0x10
  01573:    	test   rax,rax
  01576:    	je     0x3a063
  0157c: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01583: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0158a: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01591:    	sub    rsp,0x10
  01595:    	movq   QWORD PTR [rsp],xmm3
  0159a:    	movq   QWORD PTR [rsp+0x8],xmm4
  015a0:    	mov    rdx,rdi
  015a3:    	mov    rcx,rsi
  015a6:    	mov    rdi,rbx
  015a9:    	mov    rsi,r12
  015ac: 45 	movabs rax,0x5645597937b0
  015b6:    	call   rax
  015b8:    	movq   xmm3,QWORD PTR [rsp]
  015bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c3:    	add    rsp,0x10
  015c7:    	test   rax,rax
  015ca:    	je     0x3a072
  015d0: ff 	mov    QWORD PTR [r14-0xa8],rax
:00106 _ = %14.call y=(%15; 1)              [<INVALID>]
  015d7:    	sub    rsp,0x10
  015db:    	movq   QWORD PTR [rsp],xmm3
  015e0:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  015ed: 45 	movabs rax,0x564559780ec0
  015f7:    	call   rax
  015f9:    	mov    r15d,eax
  015fc: 45 	movabs r13,0x564559ece600
  01606:    	cmp    QWORD PTR [r13+0x8],0x0
  0160b:    	je     0x3a081
  01611:    	cmp    r15d,DWORD PTR [r13-0x8]
  01615:    	jne    0x3a081
  0161b:    	mov    eax,DWORD PTR [rip+0xffffffffffffb872]        # 0xffffce93
  01621:    	cmp    DWORD PTR [r13-0x4],eax
  01625:    	jne    0x3a081
  0162b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01634: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0163b:    	mov    QWORD PTR [rsp-0x40],rax
  01640: 00 	mov    rdi,0x1
  01647: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0164e:    	mov    QWORD PTR [rsp-0x48],rax
  01653: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0165c:    	mov    r13,QWORD PTR [r13+0x8]
  01660:    	mov    rax,QWORD PTR [r13+0x8]
  01664:    	mov    QWORD PTR [rsp-0x30],rax
  01669:    	mov    rax,QWORD PTR [r13+0x0]
  0166d:    	mov    r13,QWORD PTR [r13+0x10]
  01671:    	mov    rsi,QWORD PTR [rbx]
  01674:    	mov    QWORD PTR [rsp-0x18],rsi
  01679:    	lea    rsi,[rsp-0x18]
  0167e:    	mov    QWORD PTR [rbx],rsi
  01681:    	lea    r14,[rsp-0x10]
  01686:    	mov    QWORD PTR [rsp-0x20],r14
  0168b:    	call   rax
  0168d:    	lea    r14,[rbp-0x8]
  01691:    	mov    QWORD PTR [rbx],r14
  01694:    	mov    r14,QWORD PTR [rbp-0x10]
  01698:    	movq   xmm3,QWORD PTR [rsp]
  0169d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016a3:    	add    rsp,0x10
  016a7:    	test   rax,rax
  016aa:    	je     0x3a0c5
:00107 
:00108 %14 = dynvar(2, %2)
  016b0:    	mov    rax,QWORD PTR [r14-0x18]
  016b4:    	mov    rax,QWORD PTR [rax]
  016b7:    	mov    rax,QWORD PTR [rax-0x28]
  016bb: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  016c2:    	mov    rax,QWORD PTR [r14-0x18]
  016c6:    	mov    rax,QWORD PTR [rax]
  016c9:    	mov    rax,QWORD PTR [rax-0x28]
  016cd: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [<INVALID>]
  016d4:    	sub    rsp,0x10
  016d8:    	movq   QWORD PTR [rsp],xmm3
  016dd:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  016ea: 45 	movabs rax,0x564559780ec0
  016f4:    	call   rax
  016f6:    	mov    r15d,eax
  016f9: 45 	movabs r13,0x564559ece640
  01703:    	cmp    QWORD PTR [r13+0x8],0x0
  01708:    	je     0x3a0d4
  0170e:    	cmp    r15d,DWORD PTR [r13-0x8]
  01712:    	jne    0x3a0d4
  01718:    	mov    eax,DWORD PTR [rip+0xffffffffffffb775]        # 0xffffce93
  0171e:    	cmp    DWORD PTR [r13-0x4],eax
  01722:    	jne    0x3a0d4
  01728: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01731: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01738:    	mov    QWORD PTR [rsp-0x40],rax
  0173d: 00 	mov    rdi,0x0
  01744: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0174d:    	mov    r13,QWORD PTR [r13+0x8]
  01751:    	mov    rax,QWORD PTR [r13+0x8]
  01755:    	mov    QWORD PTR [rsp-0x30],rax
  0175a:    	mov    rax,QWORD PTR [r13+0x0]
  0175e:    	mov    r13,QWORD PTR [r13+0x10]
  01762:    	mov    rsi,QWORD PTR [rbx]
  01765:    	mov    QWORD PTR [rsp-0x18],rsi
  0176a:    	lea    rsi,[rsp-0x18]
  0176f:    	mov    QWORD PTR [rbx],rsi
  01772:    	lea    r14,[rsp-0x10]
  01777:    	mov    QWORD PTR [rsp-0x20],r14
  0177c:    	call   rax
  0177e:    	lea    r14,[rbp-0x8]
  01782:    	mov    QWORD PTR [rbx],r14
  01785:    	mov    r14,QWORD PTR [rbp-0x10]
  01789:    	movq   xmm3,QWORD PTR [rsp]
  0178e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01794:    	add    rsp,0x10
  01798:    	test   rax,rax
  0179b:    	je     0x3a118
  017a1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [<INVALID>]
  017a8:    	sub    rsp,0x10
  017ac:    	movq   QWORD PTR [rsp],xmm3
  017b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017b7: ff 	mov    rdi,QWORD PTR [r14-0x98]
  017be: 45 	movabs rax,0x564559780ec0
  017c8:    	call   rax
  017ca:    	mov    r15d,eax
  017cd: 45 	movabs r13,0x564559ece660
  017d7:    	cmp    QWORD PTR [r13+0x8],0x0
  017dc:    	je     0x3a127
  017e2:    	cmp    r15d,DWORD PTR [r13-0x8]
  017e6:    	jne    0x3a127
  017ec:    	mov    eax,DWORD PTR [rip+0xffffffffffffb6a1]        # 0xffffce93
  017f2:    	cmp    DWORD PTR [r13-0x4],eax
  017f6:    	jne    0x3a127
  017fc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01805: ff 	mov    rax,QWORD PTR [r14-0x98]
  0180c:    	mov    QWORD PTR [rsp-0x40],rax
  01811: 00 	mov    rdi,0x0
  01818: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01821:    	mov    r13,QWORD PTR [r13+0x8]
  01825:    	mov    rax,QWORD PTR [r13+0x8]
  01829:    	mov    QWORD PTR [rsp-0x30],rax
  0182e:    	mov    rax,QWORD PTR [r13+0x0]
  01832:    	mov    r13,QWORD PTR [r13+0x10]
  01836:    	mov    rsi,QWORD PTR [rbx]
  01839:    	mov    QWORD PTR [rsp-0x18],rsi
  0183e:    	lea    rsi,[rsp-0x18]
  01843:    	mov    QWORD PTR [rbx],rsi
  01846:    	lea    r14,[rsp-0x10]
  0184b:    	mov    QWORD PTR [rsp-0x20],r14
  01850:    	call   rax
  01852:    	lea    r14,[rbp-0x8]
  01856:    	mov    QWORD PTR [rbx],r14
  01859:    	mov    r14,QWORD PTR [rbp-0x10]
  0185d:    	movq   xmm3,QWORD PTR [rsp]
  01862:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01868:    	add    rsp,0x10
  0186c:    	test   rax,rax
  0186f:    	je     0x3a16b
  01875: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0187c: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01883: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0188a:    	sub    rsp,0x10
  0188e:    	movq   QWORD PTR [rsp],xmm3
  01893:    	movq   QWORD PTR [rsp+0x8],xmm4
  01899:    	mov    rdx,rdi
  0189c:    	mov    rcx,rsi
  0189f:    	mov    rdi,rbx
  018a2:    	mov    rsi,r12
  018a5: 45 	movabs rax,0x5645597937b0
  018af:    	call   rax
  018b1:    	movq   xmm3,QWORD PTR [rsp]
  018b6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018bc:    	add    rsp,0x10
  018c0:    	test   rax,rax
  018c3:    	je     0x3a17a
  018c9: ff 	mov    QWORD PTR [r14-0xa8],rax
:00115 _ = %14.call z=(%15; 1)              [<INVALID>]
  018d0:    	sub    rsp,0x10
  018d4:    	movq   QWORD PTR [rsp],xmm3
  018d9:    	movq   QWORD PTR [rsp+0x8],xmm4
  018df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  018e6: 45 	movabs rax,0x564559780ec0
  018f0:    	call   rax
  018f2:    	mov    r15d,eax
  018f5: 45 	movabs r13,0x564559ece690
  018ff:    	cmp    QWORD PTR [r13+0x8],0x0
  01904:    	je     0x3a189
  0190a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0190e:    	jne    0x3a189
  01914:    	mov    eax,DWORD PTR [rip+0xffffffffffffb579]        # 0xffffce93
  0191a:    	cmp    DWORD PTR [r13-0x4],eax
  0191e:    	jne    0x3a189
  01924: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0192d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01934:    	mov    QWORD PTR [rsp-0x40],rax
  01939: 00 	mov    rdi,0x1
  01940: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01947:    	mov    QWORD PTR [rsp-0x48],rax
  0194c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01955:    	mov    r13,QWORD PTR [r13+0x8]
  01959:    	mov    rax,QWORD PTR [r13+0x8]
  0195d:    	mov    QWORD PTR [rsp-0x30],rax
  01962:    	mov    rax,QWORD PTR [r13+0x0]
  01966:    	mov    r13,QWORD PTR [r13+0x10]
  0196a:    	mov    rsi,QWORD PTR [rbx]
  0196d:    	mov    QWORD PTR [rsp-0x18],rsi
  01972:    	lea    rsi,[rsp-0x18]
  01977:    	mov    QWORD PTR [rbx],rsi
  0197a:    	lea    r14,[rsp-0x10]
  0197f:    	mov    QWORD PTR [rsp-0x20],r14
  01984:    	call   rax
  01986:    	lea    r14,[rbp-0x8]
  0198a:    	mov    QWORD PTR [rbx],r14
  0198d:    	mov    r14,QWORD PTR [rbp-0x10]
  01991:    	movq   xmm3,QWORD PTR [rsp]
  01996:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0199c:    	add    rsp,0x10
  019a0:    	test   rax,rax
  019a3:    	je     0x3a1cd
:00116 
:00117 ret %15
  019a9: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019b0:    	leave  
  019b1:    	ret    
:00118 %14 = nil
  019b2: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00119 ret %14
  019bd: ff 	mov    rax,QWORD PTR [r14-0xa0]
  019c4:    	leave  
  019c5:    	ret    
==> start whole compile: vnormalize FuncId(96) self_class:Vec start:[00000] bytecode:0x564559ea5f60
<== finished compile. elapsed:43.2µs
offset:Pos(37908) code: 1976 bytes  data: 92 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x0
  0000e: jne    0x386f6
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    QWORD PTR [r14-0x60],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x38705
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x38705
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:7
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x30]
  00052: cmp    DWORD PTR [rip+0xffffffffffffb354],0x26        # 0xffffb3ad
  00059: jne    0x38714
  0005f: cmp    DWORD PTR [rip+0xffffffffffffb34b],0x0        # 0xffffb3b1
  00066: jne    0x38723
  0006c: mov    QWORD PTR [rsp-0x28],0x0
  00075: mov    rax,QWORD PTR [r14-0x30]
  00079: mov    QWORD PTR [rsp-0x40],rax
  0007e: mov    rdi,0x0
  00085: mov    QWORD PTR [rsp-0x38],0x0
  0008e: movabs rax,0x50000005f
  00098: mov    QWORD PTR [rsp-0x30],rax
  0009d: movabs r13,0x564559e8af00
  000a7: mov    rsi,QWORD PTR [rbx]
  000aa: mov    QWORD PTR [rsp-0x18],rsi
  000af: lea    rsi,[rsp-0x18]
  000b4: mov    QWORD PTR [rbx],rsi
  000b7: lea    r14,[rsp-0x10]
  000bc: mov    QWORD PTR [rsp-0x20],r14
  000c1: call   0xffffbcb3
  000c6: lea    r14,[rbp-0x8]
  000ca: mov    QWORD PTR [rbx],r14
  000cd: mov    r14,QWORD PTR [rbp-0x10]
  000d1: test   rax,rax
  000d4: je     0x3873a
  000da: mov    QWORD PTR [r14-0x48],rax
:00002 
:00003 %1 = %3
  000de: mov    rax,QWORD PTR [r14-0x48]
  000e2: mov    QWORD PTR [r14-0x38],rax
:00004 %3 = const[Vec]                      [Vec]
  000e6: mov    rax,QWORD PTR [rip+0xffffffffffffb2cf]        # 0xffffb3bc
  000ed: cmp    rax,QWORD PTR [rip+0x6d8]        # 0x7cc
  000f4: jne    0x38749
  000fa: mov    rax,QWORD PTR [rip+0x6bb]        # 0x7bc
  00101: mov    QWORD PTR [r14-0x48],rax
:00005 %4 = @x: Vec[IvarId(0)]
  00105: mov    rdi,QWORD PTR [r14-0x30]
  00109: mov    rax,QWORD PTR [rdi+0x10]
  0010d: mov    QWORD PTR [r14-0x50],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00111: mov    rdi,QWORD PTR [r14-0x30]
  00115: mov    rax,QWORD PTR [rdi+0x18]
  00119: mov    QWORD PTR [r14-0x58],rax
:00007 %6 = @z: Vec[IvarId(2)]
  0011d: mov    rdi,QWORD PTR [r14-0x30]
  00121: mov    rax,QWORD PTR [rdi+0x20]
  00125: mov    QWORD PTR [r14-0x60],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00129: mov    rdi,QWORD PTR [r14-0x48]
  0012d: test   rdi,0x7
  00134: jne    0x38794
  0013a: cmp    DWORD PTR [rdi+0x4],0x2c
  0013e: jne    0x38794
  00144: cmp    DWORD PTR [rip+0xffffffffffffb262],0x26        # 0xffffb3ad
  0014b: jne    0x38794
  00151: mov    r9,0x0
  00158: mov    rdx,rdi
  0015b: mov    QWORD PTR [rsp-0x40],rcx
  00160: mov    QWORD PTR [rsp-0x28],0x0
  00169: lea    rcx,[r14-0x50]
  0016d: mov    r8,0x3
  00174: mov    rsi,QWORD PTR [rbx]
  00177: mov    QWORD PTR [rsp-0x18],rsi
  0017c: lea    rsi,[rsp-0x18]
  00181: mov    QWORD PTR [rbx],rsi
  00184: lea    r14,[rsp-0x10]
  00189: mov    QWORD PTR [rsp-0x20],r14
  0018e: call   0x387a3
  00193: lea    r14,[rbp-0x8]
  00197: mov    QWORD PTR [rbx],r14
  0019a: mov    r14,QWORD PTR [rbp-0x10]
  0019e: test   rax,rax
  001a1: je     0x387d5
  001a7: mov    QWORD PTR [r14-0x40],rax
:00009 
:00010 %3 = literal[1e-17]
  001ab: movq   xmm2,QWORD PTR [rip+0x629]        # 0x7dc
  001b3: movabs rax,0xe33877aa3236a4ba
  001bd: mov    QWORD PTR [r14-0x48],rax
:00011 _%3 = %1 > %3                        [Float][Float]
  001c1: mov    rdi,QWORD PTR [r14-0x38]
  001c5: test   rdi,0x1
  001cc: jne    0x387e4
  001d2: test   rdi,0x2
  001d9: je     0x215
  001df: xorps  xmm3,xmm3
  001e2: movabs rax,0x8000000000000002
  001ec: cmp    rdi,rax
  001ef: je     0x227
  001f5: mov    rax,rdi
  001f8: sar    rax,0x3f
  001fc: add    rax,0x2
  00200: and    rdi,0xfffffffffffffffc
  00204: or     rdi,rax
  00207: rol    rdi,0x3d
  0020b: movq   xmm3,rdi
  00210: jmp    0x227
  00215: call   0xffff6c69
  0021a: test   rax,rax
  0021d: je     0x387e4
  00223: movq   xmm3,xmm0
  00227: ucomisd xmm3,xmm2
  0022b: jbe    0x38a15
:00012 condnotbr _%3 =>:00029
:00013 %3 = %2.call x()                     [Vec]
  00231: mov    rdi,QWORD PTR [r14-0x40]
  00235: test   rdi,0x7
  0023c: jne    0x387f3
  00242: cmp    DWORD PTR [rdi+0x4],0x2b
  00246: jne    0x387f3
  0024c: cmp    DWORD PTR [rip+0xffffffffffffb15a],0x26        # 0xffffb3ad
  00253: jne    0x387f3
  00259: mov    esi,DWORD PTR [rip+0x589]        # 0x7e8
  0025f: cmp    esi,0xffffffff
  00262: je     0x38802
  00268: cmp    WORD PTR [rdi+0x2],0x3
  0026d: jne    0x286
  00273: cmp    esi,0x6
  00276: jge    0x286
  0027c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00281: jmp    0x292
  00286: movabs rax,0x564559818b00
  00290: call   rax
  00292: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 %3 = %3 / %1                         [Float][Float]
  00296: mov    rdi,QWORD PTR [r14-0x48]
  0029a: test   rdi,0x1
  002a1: jne    0x3882b
  002a7: test   rdi,0x2
  002ae: je     0x2ea
  002b4: xorps  xmm2,xmm2
  002b7: movabs rax,0x8000000000000002
  002c1: cmp    rdi,rax
  002c4: je     0x2fc
  002ca: mov    rax,rdi
  002cd: sar    rax,0x3f
  002d1: add    rax,0x2
  002d5: and    rdi,0xfffffffffffffffc
  002d9: or     rdi,rax
  002dc: rol    rdi,0x3d
  002e0: movq   xmm2,rdi
  002e5: jmp    0x2fc
  002ea: call   0xffff6c69
  002ef: test   rax,rax
  002f2: je     0x3882b
  002f8: movq   xmm2,xmm0
  002fc: mov    rdi,QWORD PTR [r14-0x38]
  00300: test   rdi,0x1
  00307: jne    0x3883a
  0030d: test   rdi,0x2
  00314: je     0x350
  0031a: xorps  xmm3,xmm3
  0031d: movabs rax,0x8000000000000002
  00327: cmp    rdi,rax
  0032a: je     0x362
  00330: mov    rax,rdi
  00333: sar    rax,0x3f
  00337: add    rax,0x2
  0033b: and    rdi,0xfffffffffffffffc
  0033f: or     rdi,rax
  00342: rol    rdi,0x3d
  00346: movq   xmm3,rdi
  0034b: jmp    0x362
  00350: call   0xffff6c69
  00355: test   rax,rax
  00358: je     0x3883a
  0035e: movq   xmm3,xmm0
  00362: movq   rax,xmm3
  00367: test   rax,rax
  0036a: je     0xffff6c35
  00370: divsd  xmm2,xmm3
:00016 _ = %2.call x=(%3; 1)                [Vec]
  00374: movq   xmm0,xmm2
  00378: call   0xffff6d8d
  0037d: mov    QWORD PTR [r14-0x48],rax
  00381: mov    rdi,QWORD PTR [r14-0x40]
  00385: test   rdi,0x7
  0038c: jne    0x38849
  00392: cmp    DWORD PTR [rdi+0x4],0x2b
  00396: jne    0x38849
  0039c: cmp    DWORD PTR [rip+0xffffffffffffb00a],0x26        # 0xffffb3ad
  003a3: jne    0x38849
  003a9: mov    esi,DWORD PTR [rip+0x441]        # 0x7f0
  003af: cmp    esi,0xffffffff
  003b2: je     0x38867
  003b8: cmp    WORD PTR [rdi+0x2],0x3
  003bd: jne    0x3da
  003c3: cmp    esi,0x6
  003c6: jge    0x3da
  003cc: mov    rax,QWORD PTR [r14-0x48]
  003d0: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  003d5: jmp    0x405
  003da: sub    rsp,0x10
  003de: movq   QWORD PTR [rsp],xmm2
  003e3: mov    rdx,QWORD PTR [r14-0x48]
  003e7: movabs rax,0x564559818d80
  003f1: call   rax
  003f3: movq   xmm2,QWORD PTR [rsp]
  003f8: add    rsp,0x10
  003fc: test   rax,rax
  003ff: je     0x38858
:00017 
:00018 %3 = %2.call y()                     [Vec]
  00405: mov    rdi,QWORD PTR [r14-0x40]
  00409: test   rdi,0x7
  00410: jne    0x388a9
  00416: cmp    DWORD PTR [rdi+0x4],0x2b
  0041a: jne    0x388a9
  00420: cmp    DWORD PTR [rip+0xffffffffffffaf86],0x26        # 0xffffb3ad
  00427: jne    0x388a9
  0042d: mov    esi,DWORD PTR [rip+0x3c5]        # 0x7f8
  00433: cmp    esi,0xffffffff
  00436: je     0x388b8
  0043c: cmp    WORD PTR [rdi+0x2],0x3
  00441: jne    0x45a
  00447: cmp    esi,0x6
  0044a: jge    0x45a
  00450: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00455: jmp    0x466
  0045a: movabs rax,0x564559818b00
  00464: call   rax
  00466: mov    QWORD PTR [r14-0x48],rax
:00019 
:00020 %3 = %3 / %1                         [Float][Float]
  0046a: mov    rdi,QWORD PTR [r14-0x48]
  0046e: test   rdi,0x1
  00475: jne    0x388e1
  0047b: test   rdi,0x2
  00482: je     0x4be
  00488: xorps  xmm2,xmm2
  0048b: movabs rax,0x8000000000000002
  00495: cmp    rdi,rax
  00498: je     0x4d0
  0049e: mov    rax,rdi
  004a1: sar    rax,0x3f
  004a5: add    rax,0x2
  004a9: and    rdi,0xfffffffffffffffc
  004ad: or     rdi,rax
  004b0: rol    rdi,0x3d
  004b4: movq   xmm2,rdi
  004b9: jmp    0x4d0
  004be: call   0xffff6c69
  004c3: test   rax,rax
  004c6: je     0x388e1
  004cc: movq   xmm2,xmm0
  004d0: mov    rdi,QWORD PTR [r14-0x38]
  004d4: test   rdi,0x1
  004db: jne    0x388f0
  004e1: test   rdi,0x2
  004e8: je     0x524
  004ee: xorps  xmm3,xmm3
  004f1: movabs rax,0x8000000000000002
  004fb: cmp    rdi,rax
  004fe: je     0x536
  00504: mov    rax,rdi
  00507: sar    rax,0x3f
  0050b: add    rax,0x2
  0050f: and    rdi,0xfffffffffffffffc
  00513: or     rdi,rax
  00516: rol    rdi,0x3d
  0051a: movq   xmm3,rdi
  0051f: jmp    0x536
  00524: call   0xffff6c69
  00529: test   rax,rax
  0052c: je     0x388f0
  00532: movq   xmm3,xmm0
  00536: movq   rax,xmm3
  0053b: test   rax,rax
  0053e: je     0xffff6c35
  00544: divsd  xmm2,xmm3
:00021 _ = %2.call y=(%3; 1)                [Vec]
  00548: movq   xmm0,xmm2
  0054c: call   0xffff6d8d
  00551: mov    QWORD PTR [r14-0x48],rax
  00555: mov    rdi,QWORD PTR [r14-0x40]
  00559: test   rdi,0x7
  00560: jne    0x388ff
  00566: cmp    DWORD PTR [rdi+0x4],0x2b
  0056a: jne    0x388ff
  00570: cmp    DWORD PTR [rip+0xffffffffffffae36],0x26        # 0xffffb3ad
  00577: jne    0x388ff
  0057d: mov    esi,DWORD PTR [rip+0x27d]        # 0x800
  00583: cmp    esi,0xffffffff
  00586: je     0x3891d
  0058c: cmp    WORD PTR [rdi+0x2],0x3
  00591: jne    0x5ae
  00597: cmp    esi,0x6
  0059a: jge    0x5ae
  005a0: mov    rax,QWORD PTR [r14-0x48]
  005a4: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  005a9: jmp    0x5d9
  005ae: sub    rsp,0x10
  005b2: movq   QWORD PTR [rsp],xmm2
  005b7: mov    rdx,QWORD PTR [r14-0x48]
  005bb: movabs rax,0x564559818d80
  005c5: call   rax
  005c7: movq   xmm2,QWORD PTR [rsp]
  005cc: add    rsp,0x10
  005d0: test   rax,rax
  005d3: je     0x3890e
:00022 
:00023 %3 = %2.call z()                     [Vec]
  005d9: mov    rdi,QWORD PTR [r14-0x40]
  005dd: test   rdi,0x7
  005e4: jne    0x3895f
  005ea: cmp    DWORD PTR [rdi+0x4],0x2b
  005ee: jne    0x3895f
  005f4: cmp    DWORD PTR [rip+0xffffffffffffadb2],0x26        # 0xffffb3ad
  005fb: jne    0x3895f
  00601: mov    esi,DWORD PTR [rip+0x201]        # 0x808
  00607: cmp    esi,0xffffffff
  0060a: je     0x3896e
  00610: cmp    WORD PTR [rdi+0x2],0x3
  00615: jne    0x62e
  0061b: cmp    esi,0x6
  0061e: jge    0x62e
  00624: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00629: jmp    0x63a
  0062e: movabs rax,0x564559818b00
  00638: call   rax
  0063a: mov    QWORD PTR [r14-0x48],rax
:00024 
:00025 %3 = %3 / %1                         [Float][Float]
  0063e: mov    rdi,QWORD PTR [r14-0x48]
  00642: test   rdi,0x1
  00649: jne    0x38997
  0064f: test   rdi,0x2
  00656: je     0x692
  0065c: xorps  xmm2,xmm2
  0065f: movabs rax,0x8000000000000002
  00669: cmp    rdi,rax
  0066c: je     0x6a4
  00672: mov    rax,rdi
  00675: sar    rax,0x3f
  00679: add    rax,0x2
  0067d: and    rdi,0xfffffffffffffffc
  00681: or     rdi,rax
  00684: rol    rdi,0x3d
  00688: movq   xmm2,rdi
  0068d: jmp    0x6a4
  00692: call   0xffff6c69
  00697: test   rax,rax
  0069a: je     0x38997
  006a0: movq   xmm2,xmm0
  006a4: mov    rdi,QWORD PTR [r14-0x38]
  006a8: test   rdi,0x1
  006af: jne    0x389a6
  006b5: test   rdi,0x2
  006bc: je     0x6f8
  006c2: xorps  xmm3,xmm3
  006c5: movabs rax,0x8000000000000002
  006cf: cmp    rdi,rax
  006d2: je     0x70a
  006d8: mov    rax,rdi
  006db: sar    rax,0x3f
  006df: add    rax,0x2
  006e3: and    rdi,0xfffffffffffffffc
  006e7: or     rdi,rax
  006ea: rol    rdi,0x3d
  006ee: movq   xmm3,rdi
  006f3: jmp    0x70a
  006f8: call   0xffff6c69
  006fd: test   rax,rax
  00700: je     0x389a6
  00706: movq   xmm3,xmm0
  0070a: movq   rax,xmm3
  0070f: test   rax,rax
  00712: je     0xffff6c35
  00718: divsd  xmm2,xmm3
:00026 _ = %2.call z=(%3; 1)                [Vec]
  0071c: movq   xmm0,xmm2
  00720: call   0xffff6d8d
  00725: mov    QWORD PTR [r14-0x48],rax
  00729: mov    rdi,QWORD PTR [r14-0x40]
  0072d: test   rdi,0x7
  00734: jne    0x389b5
  0073a: cmp    DWORD PTR [rdi+0x4],0x2b
  0073e: jne    0x389b5
  00744: cmp    DWORD PTR [rip+0xffffffffffffac62],0x26        # 0xffffb3ad
  0074b: jne    0x389b5
  00751: mov    esi,DWORD PTR [rip+0xb9]        # 0x810
  00757: cmp    esi,0xffffffff
  0075a: je     0x389d3
  00760: cmp    WORD PTR [rdi+0x2],0x3
  00765: jne    0x782
  0076b: cmp    esi,0x6
  0076e: jge    0x782
  00774: mov    rax,QWORD PTR [r14-0x48]
  00778: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0077d: jmp    0x7ad
  00782: sub    rsp,0x10
  00786: movq   QWORD PTR [rsp],xmm2
  0078b: mov    rdx,QWORD PTR [r14-0x48]
  0078f: movabs rax,0x564559818d80
  00799: call   rax
  0079b: movq   xmm2,QWORD PTR [rsp]
  007a0: add    rsp,0x10
  007a4: test   rax,rax
  007a7: je     0x389c4
:00027 
:00028 br =>:00029
  007ad: jmp    0x38a2e
:00029 ret %2
  007b2: mov    rax,QWORD PTR [r14-0x40]
  007b6: leave  
  007b7: ret    
==> start whole compile: vlength FuncId(95) self_class:Vec start:[00000] bytecode:0x564559e8af00
<== finished compile. elapsed:20.4µs
offset:Pos(39976) code: 868 bytes  data: 28 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x38233
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x38242
  0003c: cmp    DWORD PTR [rdi+0x4],0x2b
  00040: jne    0x38242
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = const[Math]                     [Math]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffffab5b]        # 0xffffaba8
  0004d: cmp    rax,QWORD PTR [rip+0x324]        # 0x378
  00054: jne    0x38251
  0005a: mov    rax,QWORD PTR [rip+0x307]        # 0x368
  00061: mov    QWORD PTR [r14-0x38],rax
:00002 %2 = @x: Vec[IvarId(0)]
  00065: mov    rdi,QWORD PTR [r14-0x30]
  00069: mov    rax,QWORD PTR [rdi+0x10]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00003 %3 = @x: Vec[IvarId(0)]
  00071: mov    rdi,QWORD PTR [r14-0x30]
  00075: mov    rax,QWORD PTR [rdi+0x10]
  00079: mov    QWORD PTR [r14-0x48],rax
:00004 %2 = %2 * %3                         [Float][Float]
  0007d: mov    rdi,QWORD PTR [r14-0x40]
  00081: test   rdi,0x1
  00088: jne    0x3829c
  0008e: test   rdi,0x2
  00095: je     0xd1
  0009b: xorps  xmm2,xmm2
  0009e: movabs rax,0x8000000000000002
  000a8: cmp    rdi,rax
  000ab: je     0xe3
  000b1: mov    rax,rdi
  000b4: sar    rax,0x3f
  000b8: add    rax,0x2
  000bc: and    rdi,0xfffffffffffffffc
  000c0: or     rdi,rax
  000c3: rol    rdi,0x3d
  000c7: movq   xmm2,rdi
  000cc: jmp    0xe3
  000d1: call   0xffff6455
  000d6: test   rax,rax
  000d9: je     0x3829c
  000df: movq   xmm2,xmm0
  000e3: mov    rdi,QWORD PTR [r14-0x48]
  000e7: test   rdi,0x1
  000ee: jne    0x382ab
  000f4: test   rdi,0x2
  000fb: je     0x137
  00101: xorps  xmm3,xmm3
  00104: movabs rax,0x8000000000000002
  0010e: cmp    rdi,rax
  00111: je     0x149
  00117: mov    rax,rdi
  0011a: sar    rax,0x3f
  0011e: add    rax,0x2
  00122: and    rdi,0xfffffffffffffffc
  00126: or     rdi,rax
  00129: rol    rdi,0x3d
  0012d: movq   xmm3,rdi
  00132: jmp    0x149
  00137: call   0xffff6455
  0013c: test   rax,rax
  0013f: je     0x382ab
  00145: movq   xmm3,xmm0
  00149: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  0014d: mov    rdi,QWORD PTR [r14-0x30]
  00151: mov    rax,QWORD PTR [rdi+0x18]
  00155: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = @y: Vec[IvarId(1)]
  00159: mov    rdi,QWORD PTR [r14-0x30]
  0015d: mov    rax,QWORD PTR [rdi+0x18]
  00161: mov    QWORD PTR [r14-0x50],rax
:00007 %3 = %3 * %4                         [Float][Float]
  00165: mov    rdi,QWORD PTR [r14-0x48]
  00169: test   rdi,0x1
  00170: jne    0x382ba
  00176: test   rdi,0x2
  0017d: je     0x1b9
  00183: xorps  xmm3,xmm3
  00186: movabs rax,0x8000000000000002
  00190: cmp    rdi,rax
  00193: je     0x1cb
  00199: mov    rax,rdi
  0019c: sar    rax,0x3f
  001a0: add    rax,0x2
  001a4: and    rdi,0xfffffffffffffffc
  001a8: or     rdi,rax
  001ab: rol    rdi,0x3d
  001af: movq   xmm3,rdi
  001b4: jmp    0x1cb
  001b9: call   0xffff6455
  001be: test   rax,rax
  001c1: je     0x382ba
  001c7: movq   xmm3,xmm0
  001cb: mov    rdi,QWORD PTR [r14-0x50]
  001cf: test   rdi,0x1
  001d6: jne    0x382d6
  001dc: test   rdi,0x2
  001e3: je     0x21f
  001e9: xorps  xmm4,xmm4
  001ec: movabs rax,0x8000000000000002
  001f6: cmp    rdi,rax
  001f9: je     0x231
  001ff: mov    rax,rdi
  00202: sar    rax,0x3f
  00206: add    rax,0x2
  0020a: and    rdi,0xfffffffffffffffc
  0020e: or     rdi,rax
  00211: rol    rdi,0x3d
  00215: movq   xmm4,rdi
  0021a: jmp    0x231
  0021f: call   0xffff6455
  00224: test   rax,rax
  00227: je     0x382d6
  0022d: movq   xmm4,xmm0
  00231: mulsd  xmm3,xmm4
:00008 %2 = %2 + %3                         [Float][Float]
  00235: addsd  xmm2,xmm3
:00009 %3 = @z: Vec[IvarId(2)]
  00239: mov    rdi,QWORD PTR [r14-0x30]
  0023d: mov    rax,QWORD PTR [rdi+0x20]
  00241: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = @z: Vec[IvarId(2)]
  00245: mov    rdi,QWORD PTR [r14-0x30]
  00249: mov    rax,QWORD PTR [rdi+0x20]
  0024d: mov    QWORD PTR [r14-0x50],rax
:00011 %3 = %3 * %4                         [Float][Float]
  00251: mov    rdi,QWORD PTR [r14-0x48]
  00255: test   rdi,0x1
  0025c: jne    0x382f2
  00262: test   rdi,0x2
  00269: je     0x2a5
  0026f: xorps  xmm3,xmm3
  00272: movabs rax,0x8000000000000002
  0027c: cmp    rdi,rax
  0027f: je     0x2b7
  00285: mov    rax,rdi
  00288: sar    rax,0x3f
  0028c: add    rax,0x2
  00290: and    rdi,0xfffffffffffffffc
  00294: or     rdi,rax
  00297: rol    rdi,0x3d
  0029b: movq   xmm3,rdi
  002a0: jmp    0x2b7
  002a5: call   0xffff6455
  002aa: test   rax,rax
  002ad: je     0x382f2
  002b3: movq   xmm3,xmm0
  002b7: mov    rdi,QWORD PTR [r14-0x50]
  002bb: test   rdi,0x1
  002c2: jne    0x3830e
  002c8: test   rdi,0x2
  002cf: je     0x30b
  002d5: xorps  xmm4,xmm4
  002d8: movabs rax,0x8000000000000002
  002e2: cmp    rdi,rax
  002e5: je     0x31d
  002eb: mov    rax,rdi
  002ee: sar    rax,0x3f
  002f2: add    rax,0x2
  002f6: and    rdi,0xfffffffffffffffc
  002fa: or     rdi,rax
  002fd: rol    rdi,0x3d
  00301: movq   xmm4,rdi
  00306: jmp    0x31d
  0030b: call   0xffff6455
  00310: test   rax,rax
  00313: je     0x3830e
  00319: movq   xmm4,xmm0
  0031d: mulsd  xmm3,xmm4
:00012 %2 = %2 + %3                         [Float][Float]
  00321: addsd  xmm2,xmm3
:00013 %1 = %1.inline MathSqrt(%2; 1)       [#<Class:Math>]
  00325: mov    rdi,QWORD PTR [r14-0x38]
  00329: test   rdi,0x7
  00330: jne    0x3832a
  00336: cmp    DWORD PTR [rdi+0x4],0x24
  0033a: jne    0x3832a
  00340: cmp    DWORD PTR [rip+0xffffffffffffa852],0x26        # 0xffffab99
  00347: jne    0x3832a
  0034d: sqrtsd xmm5,xmm2
:00014 
:00015 ret %1
  00351: movq   xmm0,xmm5
  00355: call   0xffff6579
  0035a: mov    QWORD PTR [r14-0x38],rax
  0035e: mov    rax,QWORD PTR [r14-0x38]
  00362: leave  
  00363: ret    
==> start whole compile: initialize FuncId(101) self_class:Ray start:[00000] bytecode:0x564559ea5d50
<== finished compile. elapsed:13µs
offset:Pos(40872) code: 77 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: jne    0x37fd3
  00014: mov    rdi,QWORD PTR [r14-0x30]
  00018: test   rdi,0x7
  0001f: jne    0x37fe2
  00025: cmp    DWORD PTR [rdi+0x4],0x31
  00029: jne    0x37fe2
:00000 init_method reg:3 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  0002f: mov    rdi,QWORD PTR [r14-0x30]
  00033: mov    rax,QWORD PTR [r14-0x38]
  00037: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  0003b: mov    rdi,QWORD PTR [r14-0x30]
  0003f: mov    rax,QWORD PTR [r14-0x40]
  00043: mov    QWORD PTR [rdi+0x18],rax
:00003 ret %2
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: leave  
  0004c: ret    
==> start whole compile: initialize FuncId(102) self_class:Isect start:[00000] bytecode:0x564559ee1310
<== finished compile. elapsed:30.6µs
offset:Pos(40949) code: 695 bytes  data: 172 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x37fa4
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x37fb3
  0003c: cmp    DWORD PTR [rdi+0x4],0x33
  00040: jne    0x37fb3
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  00046: movq   xmm2,QWORD PTR [rip+0x26d]        # 0x2bb
  0004e: movabs rax,0xb18968000000002
  00058: mov    QWORD PTR [r14-0x38],rax
:00002 @t: Isect[IvarId(0)] = %1
  0005c: mov    rdi,QWORD PTR [r14-0x30]
  00060: mov    rax,QWORD PTR [r14-0x38]
  00064: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  00068: mov    rax,0x14
  0006f: mov    QWORD PTR [r14-0x38],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00073: mov    rdi,QWORD PTR [r14-0x30]
  00077: mov    rax,QWORD PTR [r14-0x38]
  0007b: mov    QWORD PTR [rdi+0x18],rax
:00005 %1 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffffa755]        # 0xffffa7db
  00086: cmp    rax,QWORD PTR [rip+0x24e]        # 0x2db
  0008d: jne    0x37fc2
  00093: mov    rax,QWORD PTR [rip+0x231]        # 0x2cb
  0009a: mov    QWORD PTR [r14-0x38],rax
:00006 %2 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0x245]        # 0x2eb
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x40],rax
:00007 %3 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0x23f]        # 0x2fb
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x48],rax
:00008 %4 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0x239]        # 0x30b
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x50],rax
:00009 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x38]
  000e4: test   rdi,0x7
  000eb: jne    0x3800d
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x3800d
  000fb: cmp    DWORD PTR [rip+0xffffffffffffa6ca],0x26        # 0xffffa7cc
  00102: jne    0x3800d
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x40]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x3801c
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: test   rax,rax
  00182: je     0x3804e
  00188: mov    QWORD PTR [r14-0x38],rax
:00010 
:00011 @pl: Isect[IvarId(2)] = %1
  0018c: mov    rdi,QWORD PTR [r14-0x30]
  00190: mov    rax,QWORD PTR [r14-0x38]
  00194: mov    QWORD PTR [rdi+0x20],rax
:00012 %1 = const[Vec]                      [Vec]
  00198: mov    rax,QWORD PTR [rip+0xffffffffffffa63c]        # 0xffffa7db
  0019f: cmp    rax,QWORD PTR [rip+0x185]        # 0x32b
  001a6: jne    0x3805d
  001ac: mov    rax,QWORD PTR [rip+0x168]        # 0x31b
  001b3: mov    QWORD PTR [r14-0x38],rax
:00013 %2 = literal[0.0]
  001b7: movq   xmm2,QWORD PTR [rip+0x17c]        # 0x33b
  001bf: movabs rax,0x8000000000000002
  001c9: mov    QWORD PTR [r14-0x40],rax
:00014 %3 = literal[0.0]
  001cd: movq   xmm3,QWORD PTR [rip+0x176]        # 0x34b
  001d5: movabs rax,0x8000000000000002
  001df: mov    QWORD PTR [r14-0x48],rax
:00015 %4 = literal[0.0]
  001e3: movq   xmm4,QWORD PTR [rip+0x170]        # 0x35b
  001eb: movabs rax,0x8000000000000002
  001f5: mov    QWORD PTR [r14-0x50],rax
:00016 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  001f9: mov    rdi,QWORD PTR [r14-0x38]
  001fd: test   rdi,0x7
  00204: jne    0x380d2
  0020a: cmp    DWORD PTR [rdi+0x4],0x2c
  0020e: jne    0x380d2
  00214: cmp    DWORD PTR [rip+0xffffffffffffa5b1],0x26        # 0xffffa7cc
  0021b: jne    0x380d2
  00221: mov    r9,0x0
  00228: sub    rsp,0x20
  0022c: movq   QWORD PTR [rsp],xmm2
  00231: movq   QWORD PTR [rsp+0x8],xmm3
  00237: movq   QWORD PTR [rsp+0x10],xmm4
  0023d: mov    rdx,rdi
  00240: mov    QWORD PTR [rsp-0x40],rcx
  00245: mov    QWORD PTR [rsp-0x28],0x0
  0024e: lea    rcx,[r14-0x40]
  00252: mov    r8,0x3
  00259: mov    rsi,QWORD PTR [rbx]
  0025c: mov    QWORD PTR [rsp-0x18],rsi
  00261: lea    rsi,[rsp-0x18]
  00266: mov    QWORD PTR [rbx],rsi
  00269: lea    r14,[rsp-0x10]
  0026e: mov    QWORD PTR [rsp-0x20],r14
  00273: call   0x380e1
  00278: lea    r14,[rbp-0x8]
  0027c: mov    QWORD PTR [rbx],r14
  0027f: mov    r14,QWORD PTR [rbp-0x10]
  00283: movq   xmm2,QWORD PTR [rsp]
  00288: movq   xmm3,QWORD PTR [rsp+0x8]
  0028e: movq   xmm4,QWORD PTR [rsp+0x10]
  00294: add    rsp,0x20
  00298: test   rax,rax
  0029b: je     0x38113
  002a1: mov    QWORD PTR [r14-0x38],rax
:00017 
:00018 @n: Isect[IvarId(3)] = %1
  002a5: mov    rdi,QWORD PTR [r14-0x30]
  002a9: mov    rax,QWORD PTR [r14-0x38]
  002ad: mov    QWORD PTR [rdi+0x28],rax
:00019 ret %1
  002b1: mov    rax,QWORD PTR [r14-0x38]
  002b5: leave  
  002b6: ret    
==> start whole compile: intersect FuncId(100) self_class:Plane start:[00000] bytecode:0x564559ec5d10
<== finished compile. elapsed:82.9µs
offset:Pos(41816) code: 5410 bytes  data: 110 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x37dbf
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x37dce
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x37dce
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x37ddd
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x37ddd
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffffa3cf],0x26        # 0xffffa469
  0009a:    	jne    0x37ddd
  000a0: 00 	cmp    DWORD PTR [rip+0xffffffffffffa3c6],0x0        # 0xffffa46d
  000a7:    	jne    0x37dec
  000ad: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b6:    	mov    rax,QWORD PTR [r14-0x68]
  000ba:    	mov    QWORD PTR [rsp-0x40],rax
  000bf: 00 	mov    rdi,0x1
  000c6:    	mov    rax,QWORD PTR [r14-0x70]
  000ca:    	mov    QWORD PTR [rsp-0x48],rax
  000cf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000d8: 05 	movabs rax,0x100050000005e
  000e2:    	mov    QWORD PTR [rsp-0x30],rax
  000e7: 45 	movabs r13,0x564559ecbab0
  000f1:    	mov    rsi,QWORD PTR [rbx]
  000f4:    	mov    QWORD PTR [rsp-0x18],rsi
  000f9:    	lea    rsi,[rsp-0x18]
  000fe:    	mov    QWORD PTR [rbx],rsi
  00101:    	lea    r14,[rsp-0x10]
  00106:    	mov    QWORD PTR [rsp-0x20],r14
  0010b:    	call   0xffffb130
  00110:    	lea    r14,[rbp-0x8]
  00114:    	mov    QWORD PTR [rbx],r14
  00117:    	mov    r14,QWORD PTR [rbp-0x10]
  0011b:    	test   rax,rax
  0011e:    	je     0x37e03
  00124:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  00128:    	mov    rdi,QWORD PTR [r14-0x48]
  0012c: 00 	test   rdi,0x1
  00133:    	jne    0x37e12
  00139: 00 	test   rdi,0x2
  00140:    	je     0x17c
  00146:    	xorps  xmm2,xmm2
  00149: 00 	movabs rax,0x8000000000000002
  00153:    	cmp    rdi,rax
  00156:    	je     0x18e
  0015c:    	mov    rax,rdi
  0015f:    	sar    rax,0x3f
  00163:    	add    rax,0x2
  00167:    	and    rdi,0xfffffffffffffffc
  0016b:    	or     rdi,rax
  0016e:    	rol    rdi,0x3d
  00172:    	movq   xmm2,rdi
  00177:    	jmp    0x18e
  0017c:    	call   0xffff5d25
  00181:    	test   rax,rax
  00184:    	je     0x37e12
  0018a:    	movq   xmm2,xmm0
  0018e: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1393]        # 0x1528
:00006 %7 = %1.call dir()                   [Ray]
  00195:    	movq   xmm0,xmm2
  00199:    	call   0xffff5e49
  0019e:    	mov    QWORD PTR [r14-0x48],rax
  001a2:    	mov    rdi,QWORD PTR [r14-0x38]
  001a6: 00 	test   rdi,0x7
  001ad:    	jne    0x37e21
  001b3:    	cmp    DWORD PTR [rdi+0x4],0x31
  001b7:    	jne    0x37e21
  001bd: 26 	cmp    DWORD PTR [rip+0xffffffffffffa2a5],0x26        # 0xffffa469
  001c4:    	jne    0x37e21
  001ca:    	mov    esi,DWORD PTR [rip+0x1364]        # 0x1534
  001d0:    	cmp    esi,0xffffffff
  001d3:    	je     0x37e30
  001d9:    	cmp    WORD PTR [rdi+0x2],0x3
  001de:    	jne    0x1f7
  001e4:    	cmp    esi,0x6
  001e7:    	jge    0x1f7
  001ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f2:    	jmp    0x203
  001f7: 45 	movabs rax,0x564559818b00
  00201:    	call   rax
  00203:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00207:    	mov    rdi,QWORD PTR [r14-0x30]
  0020b:    	mov    rax,QWORD PTR [rdi+0x18]
  0020f:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  00213:    	mov    rdi,QWORD PTR [r14-0x68]
  00217: 00 	test   rdi,0x7
  0021e:    	jne    0x37e59
  00224:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00228:    	jne    0x37e59
  0022e: 26 	cmp    DWORD PTR [rip+0xffffffffffffa234],0x26        # 0xffffa469
  00235:    	jne    0x37e59
  0023b: 00 	cmp    DWORD PTR [rip+0xffffffffffffa22b],0x0        # 0xffffa46d
  00242:    	jne    0x37e68
  00248: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00251:    	mov    rax,QWORD PTR [r14-0x68]
  00255:    	mov    QWORD PTR [rsp-0x40],rax
  0025a: 00 	mov    rdi,0x1
  00261:    	mov    rax,QWORD PTR [r14-0x70]
  00265:    	mov    QWORD PTR [rsp-0x48],rax
  0026a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00273: 05 	movabs rax,0x100050000005e
  0027d:    	mov    QWORD PTR [rsp-0x30],rax
  00282: 45 	movabs r13,0x564559ecbab0
  0028c:    	mov    rsi,QWORD PTR [rbx]
  0028f:    	mov    QWORD PTR [rsp-0x18],rsi
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rbx],rsi
  0029c:    	lea    r14,[rsp-0x10]
  002a1:    	mov    QWORD PTR [rsp-0x20],r14
  002a6:    	call   0xffffb130
  002ab:    	lea    r14,[rbp-0x8]
  002af:    	mov    QWORD PTR [rbx],r14
  002b2:    	mov    r14,QWORD PTR [rbp-0x10]
  002b6:    	test   rax,rax
  002b9:    	je     0x37e7f
  002bf:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002c3:    	mov    rax,QWORD PTR [r14-0x50]
  002c7:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  002cb: 00 	movq   xmm2,QWORD PTR [rip+0x1265]        # 0x1538
  002d3: 00 	movabs rax,0x8000000000000002
  002dd:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
  002e1:    	mov    rdi,QWORD PTR [r14-0x50]
  002e5: 00 	test   rdi,0x1
  002ec:    	jne    0x37e8e
  002f2: 00 	test   rdi,0x2
  002f9:    	je     0x335
  002ff:    	xorps  xmm3,xmm3
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x347
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm3,rdi
  00330:    	jmp    0x347
  00335:    	call   0xffff5d25
  0033a:    	test   rax,rax
  0033d:    	je     0x37e8e
  00343:    	movq   xmm3,xmm0
  00347:    	ucomisd xmm3,xmm2
  0034b:    	jae    0x37ee4
:00014 condnotbr _%7 =>:00018
:00015 %5 = %4
:00016 %5 = neg %5                          [<INVALID>]
  00351: 00 	cmp    DWORD PTR [rip+0x11e8],0x0        # 0x1540
  00358:    	jl     0x37e9d
  0035e:    	je     0x37eb9
  00364: 01 	sub    DWORD PTR [rip+0x11d5],0x1        # 0x1540
  0036b:    	xor    rdi,rdi
  0036e:    	jmp    0x37e9d
  00373:    	movq   xmm0,xmm3
  00377:    	call   0xffff5e49
  0037c:    	mov    QWORD PTR [r14-0x58],rax
  00380:    	sub    rsp,0x10
  00384:    	movq   QWORD PTR [rsp],xmm3
  00389:    	mov    rdi,QWORD PTR [r14-0x58]
  0038d:    	mov    rdx,rdi
  00390:    	mov    rdi,rbx
  00393:    	mov    rsi,r12
  00396: 45 	movabs rax,0x564559792710
  003a0:    	call   rax
  003a2:    	movq   xmm3,QWORD PTR [rsp]
  003a7:    	add    rsp,0x10
  003ab:    	test   rax,rax
  003ae:    	je     0x37ed5
  003b4:    	mov    QWORD PTR [r14-0x58],rax
:00017 br =>:00018
  003b8:    	jmp    0x37efd
:00018 %7 = literal[1e-17]
  003bd: 00 	movq   xmm2,QWORD PTR [rip+0x1183]        # 0x1548
  003c5: aa 	movabs rax,0xe33877aa3236a4ba
  003cf:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
  003d3:    	mov    rdi,QWORD PTR [r14-0x58]
  003d7: 00 	test   rdi,0x1
  003de:    	jne    0x37f16
  003e4: 00 	test   rdi,0x2
  003eb:    	je     0x427
  003f1:    	xorps  xmm4,xmm4
  003f4: 00 	movabs rax,0x8000000000000002
  003fe:    	cmp    rdi,rax
  00401:    	je     0x439
  00407:    	mov    rax,rdi
  0040a:    	sar    rax,0x3f
  0040e:    	add    rax,0x2
  00412:    	and    rdi,0xfffffffffffffffc
  00416:    	or     rdi,rax
  00419:    	rol    rdi,0x3d
  0041d:    	movq   xmm4,rdi
  00422:    	jmp    0x439
  00427:    	call   0xffff5d25
  0042c:    	test   rax,rax
  0042f:    	je     0x37f16
  00435:    	movq   xmm4,xmm0
  00439:    	ucomisd xmm4,xmm2
  0043d:    	jae    0x451
:00020 condnotbr _%7 =>:00024
:00021 %7 = nil
  00443: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  0044b:    	mov    rax,QWORD PTR [r14-0x68]
  0044f:    	leave  
  00450:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  00451:    	mov    rdi,QWORD PTR [r14-0x38]
  00455: 00 	test   rdi,0x7
  0045c:    	jne    0x37f25
  00462:    	cmp    DWORD PTR [rdi+0x4],0x31
  00466:    	jne    0x37f25
  0046c: 26 	cmp    DWORD PTR [rip+0xffffffffffff9ff6],0x26        # 0xffffa469
  00473:    	jne    0x37f25
  00479:    	mov    esi,DWORD PTR [rip+0x10d5]        # 0x1554
  0047f:    	cmp    esi,0xffffffff
  00482:    	je     0x37f34
  00488:    	cmp    WORD PTR [rdi+0x2],0x3
  0048d:    	jne    0x4a6
  00493:    	cmp    esi,0x6
  00496:    	jge    0x4a6
  0049c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004a1:    	jmp    0x4b2
  004a6: 45 	movabs rax,0x564559818b00
  004b0:    	call   rax
  004b2:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  004b6:    	mov    rdi,QWORD PTR [r14-0x30]
  004ba:    	mov    rax,QWORD PTR [rdi+0x18]
  004be:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  004c2:    	mov    rdi,QWORD PTR [r14-0x68]
  004c6: 00 	test   rdi,0x7
  004cd:    	jne    0x37f5d
  004d3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  004d7:    	jne    0x37f5d
  004dd: 26 	cmp    DWORD PTR [rip+0xffffffffffff9f85],0x26        # 0xffffa469
  004e4:    	jne    0x37f5d
  004ea: 00 	cmp    DWORD PTR [rip+0xffffffffffff9f7c],0x0        # 0xffffa46d
  004f1:    	jne    0x37f6c
  004f7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00500:    	mov    rax,QWORD PTR [r14-0x68]
  00504:    	mov    QWORD PTR [rsp-0x40],rax
  00509: 00 	mov    rdi,0x1
  00510:    	mov    rax,QWORD PTR [r14-0x70]
  00514:    	mov    QWORD PTR [rsp-0x48],rax
  00519: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00522: 05 	movabs rax,0x100050000005e
  0052c:    	mov    QWORD PTR [rsp-0x30],rax
  00531: 45 	movabs r13,0x564559ecbab0
  0053b:    	mov    rsi,QWORD PTR [rbx]
  0053e:    	mov    QWORD PTR [rsp-0x18],rsi
  00543:    	lea    rsi,[rsp-0x18]
  00548:    	mov    QWORD PTR [rbx],rsi
  0054b:    	lea    r14,[rsp-0x10]
  00550:    	mov    QWORD PTR [rsp-0x20],r14
  00555:    	call   0xffffb130
  0055a:    	lea    r14,[rbp-0x8]
  0055e:    	mov    QWORD PTR [rbx],r14
  00561:    	mov    r14,QWORD PTR [rbp-0x10]
  00565:    	test   rax,rax
  00568:    	je     0x37f83
  0056e:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  00572:    	mov    rdi,QWORD PTR [r14-0x68]
  00576: 00 	test   rdi,0x1
  0057d:    	jne    0x37f92
  00583: 00 	test   rdi,0x2
  0058a:    	je     0x5c6
  00590:    	xorps  xmm2,xmm2
  00593: 00 	movabs rax,0x8000000000000002
  0059d:    	cmp    rdi,rax
  005a0:    	je     0x5d8
  005a6:    	mov    rax,rdi
  005a9:    	sar    rax,0x3f
  005ad:    	add    rax,0x2
  005b1:    	and    rdi,0xfffffffffffffffc
  005b5:    	or     rdi,rax
  005b8:    	rol    rdi,0x3d
  005bc:    	movq   xmm2,rdi
  005c1:    	jmp    0x5d8
  005c6:    	call   0xffff5d25
  005cb:    	test   rax,rax
  005ce:    	je     0x37f92
  005d4:    	movq   xmm2,xmm0
  005d8:    	mov    rdi,QWORD PTR [r14-0x48]
  005dc: 00 	test   rdi,0x1
  005e3:    	jne    0x37fa1
  005e9: 00 	test   rdi,0x2
  005f0:    	je     0x62c
  005f6:    	xorps  xmm3,xmm3
  005f9: 00 	movabs rax,0x8000000000000002
  00603:    	cmp    rdi,rax
  00606:    	je     0x63e
  0060c:    	mov    rax,rdi
  0060f:    	sar    rax,0x3f
  00613:    	add    rax,0x2
  00617:    	and    rdi,0xfffffffffffffffc
  0061b:    	or     rdi,rax
  0061e:    	rol    rdi,0x3d
  00622:    	movq   xmm3,rdi
  00627:    	jmp    0x63e
  0062c:    	call   0xffff5d25
  00631:    	test   rax,rax
  00634:    	je     0x37fa1
  0063a:    	movq   xmm3,xmm0
  0063e:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  00642: 00 	xorps  xmm2,XMMWORD PTR [rip+0xf0f]        # 0x1558
:00031 %6 = %7 / %4                         [Float][Float]
  00649:    	mov    rdi,QWORD PTR [r14-0x50]
  0064d: 00 	test   rdi,0x1
  00654:    	jne    0x37fb0
  0065a: 00 	test   rdi,0x2
  00661:    	je     0x69d
  00667:    	xorps  xmm4,xmm4
  0066a: 00 	movabs rax,0x8000000000000002
  00674:    	cmp    rdi,rax
  00677:    	je     0x6af
  0067d:    	mov    rax,rdi
  00680:    	sar    rax,0x3f
  00684:    	add    rax,0x2
  00688:    	and    rdi,0xfffffffffffffffc
  0068c:    	or     rdi,rax
  0068f:    	rol    rdi,0x3d
  00693:    	movq   xmm4,rdi
  00698:    	jmp    0x6af
  0069d:    	call   0xffff5d25
  006a2:    	test   rax,rax
  006a5:    	je     0x37fb0
  006ab:    	movq   xmm4,xmm0
  006af:    	movq   xmm5,xmm2
  006b3:    	movq   rax,xmm4
  006b8:    	test   rax,rax
  006bb:    	je     0xffff5cf1
  006c1:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  006c5: 00 	movq   xmm2,QWORD PTR [rip+0xe9b]        # 0x1568
  006cd: 00 	movabs rax,0x8000000000000002
  006d7:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
  006db:    	ucomisd xmm5,xmm2
  006df:    	jbe    0x3865b
:00034 condnotbr _%7 =>:00083
:00035 %7 = %2.call t()                     [<INVALID>]
  006e5: 00 	cmp    DWORD PTR [rip+0xe84],0x0        # 0x1570
  006ec:    	jl     0x37fcc
  006f2:    	je     0x37fe8
  006f8: 01 	sub    DWORD PTR [rip+0xe71],0x1        # 0x1570
  006ff:    	xor    rdi,rdi
  00702:    	jmp    0x37fcc
  00707:    	movq   xmm0,xmm5
  0070b:    	call   0xffff5e49
  00710:    	mov    QWORD PTR [r14-0x60],rax
  00714:    	mov    rdi,QWORD PTR [r14-0x40]
  00718: 45 	movabs rax,0x564559780ec0
  00722:    	call   rax
  00724:    	mov    r15d,eax
  00727: 45 	movabs r13,0x564559ec5f50
  00731:    	cmp    QWORD PTR [r13+0x8],0x0
  00736:    	je     0x38004
  0073c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00740:    	jne    0x38004
  00746:    	mov    eax,DWORD PTR [rip+0xffffffffffff9d1d]        # 0xffffa469
  0074c:    	cmp    DWORD PTR [r13-0x4],eax
  00750:    	jne    0x38004
  00756: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0075f:    	mov    rax,QWORD PTR [r14-0x40]
  00763:    	mov    QWORD PTR [rsp-0x40],rax
  00768: 00 	mov    rdi,0x0
  0076f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00778:    	mov    r13,QWORD PTR [r13+0x8]
  0077c:    	mov    rax,QWORD PTR [r13+0x8]
  00780:    	mov    QWORD PTR [rsp-0x30],rax
  00785:    	mov    rax,QWORD PTR [r13+0x0]
  00789:    	mov    r13,QWORD PTR [r13+0x10]
  0078d:    	mov    rsi,QWORD PTR [rbx]
  00790:    	mov    QWORD PTR [rsp-0x18],rsi
  00795:    	lea    rsi,[rsp-0x18]
  0079a:    	mov    QWORD PTR [rbx],rsi
  0079d:    	lea    r14,[rsp-0x10]
  007a2:    	mov    QWORD PTR [rsp-0x20],r14
  007a7:    	call   rax
  007a9:    	lea    r14,[rbp-0x8]
  007ad:    	mov    QWORD PTR [rbx],r14
  007b0:    	mov    r14,QWORD PTR [rbp-0x10]
  007b4:    	test   rax,rax
  007b7:    	je     0x38045
  007bd:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
  007c1:    	mov    rdi,QWORD PTR [r14-0x60]
  007c5:    	mov    rsi,QWORD PTR [r14-0x68]
  007c9:    	mov    rdx,rdi
  007cc:    	mov    rcx,rsi
  007cf:    	mov    rdi,rbx
  007d2:    	mov    rsi,r12
  007d5: 45 	movabs rax,0x564559798b50
  007df:    	call   rax
  007e1:    	test   rax,rax
  007e4:    	je     0x38054
  007ea:    	or     rax,0x10
  007ee:    	cmp    rax,0x14
  007f2:    	je     0x38681
:00038 condnotbr _%7 =>:00083
:00039 %7 = literal[true]
  007f8: 00 	mov    rax,0x1c
  007ff:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [<INVALID>]
  00803:    	mov    rdi,QWORD PTR [r14-0x40]
  00807: 45 	movabs rax,0x564559780ec0
  00811:    	call   rax
  00813:    	mov    r15d,eax
  00816: 45 	movabs r13,0x564559ec5fa0
  00820:    	cmp    QWORD PTR [r13+0x8],0x0
  00825:    	je     0x38063
  0082b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0082f:    	jne    0x38063
  00835:    	mov    eax,DWORD PTR [rip+0xffffffffffff9c2e]        # 0xffffa469
  0083b:    	cmp    DWORD PTR [r13-0x4],eax
  0083f:    	jne    0x38063
  00845: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0084e:    	mov    rax,QWORD PTR [r14-0x40]
  00852:    	mov    QWORD PTR [rsp-0x40],rax
  00857: 00 	mov    rdi,0x1
  0085e:    	mov    rax,QWORD PTR [r14-0x68]
  00862:    	mov    QWORD PTR [rsp-0x48],rax
  00867: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00870:    	mov    r13,QWORD PTR [r13+0x8]
  00874:    	mov    rax,QWORD PTR [r13+0x8]
  00878:    	mov    QWORD PTR [rsp-0x30],rax
  0087d:    	mov    rax,QWORD PTR [r13+0x0]
  00881:    	mov    r13,QWORD PTR [r13+0x10]
  00885:    	mov    rsi,QWORD PTR [rbx]
  00888:    	mov    QWORD PTR [rsp-0x18],rsi
  0088d:    	lea    rsi,[rsp-0x18]
  00892:    	mov    QWORD PTR [rbx],rsi
  00895:    	lea    r14,[rsp-0x10]
  0089a:    	mov    QWORD PTR [rsp-0x20],r14
  0089f:    	call   rax
  008a1:    	lea    r14,[rbp-0x8]
  008a5:    	mov    QWORD PTR [rbx],r14
  008a8:    	mov    r14,QWORD PTR [rbp-0x10]
  008ac:    	test   rax,rax
  008af:    	je     0x380a4
:00041 
:00042 _ = %2.call t=(%6; 1)                [<INVALID>]
  008b5:    	mov    rdi,QWORD PTR [r14-0x40]
  008b9: 45 	movabs rax,0x564559780ec0
  008c3:    	call   rax
  008c5:    	mov    r15d,eax
  008c8: 45 	movabs r13,0x564559ec5fc0
  008d2:    	cmp    QWORD PTR [r13+0x8],0x0
  008d7:    	je     0x380b3
  008dd:    	cmp    r15d,DWORD PTR [r13-0x8]
  008e1:    	jne    0x380b3
  008e7:    	mov    eax,DWORD PTR [rip+0xffffffffffff9b7c]        # 0xffffa469
  008ed:    	cmp    DWORD PTR [r13-0x4],eax
  008f1:    	jne    0x380b3
  008f7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00900:    	mov    rax,QWORD PTR [r14-0x40]
  00904:    	mov    QWORD PTR [rsp-0x40],rax
  00909: 00 	mov    rdi,0x1
  00910:    	mov    rax,QWORD PTR [r14-0x60]
  00914:    	mov    QWORD PTR [rsp-0x48],rax
  00919: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00922:    	mov    r13,QWORD PTR [r13+0x8]
  00926:    	mov    rax,QWORD PTR [r13+0x8]
  0092a:    	mov    QWORD PTR [rsp-0x30],rax
  0092f:    	mov    rax,QWORD PTR [r13+0x0]
  00933:    	mov    r13,QWORD PTR [r13+0x10]
  00937:    	mov    rsi,QWORD PTR [rbx]
  0093a:    	mov    QWORD PTR [rsp-0x18],rsi
  0093f:    	lea    rsi,[rsp-0x18]
  00944:    	mov    QWORD PTR [rbx],rsi
  00947:    	lea    r14,[rsp-0x10]
  0094c:    	mov    QWORD PTR [rsp-0x20],r14
  00951:    	call   rax
  00953:    	lea    r14,[rbp-0x8]
  00957:    	mov    QWORD PTR [rbx],r14
  0095a:    	mov    r14,QWORD PTR [rbp-0x10]
  0095e:    	test   rax,rax
  00961:    	je     0x380f4
:00043 
:00044 %7 = @n: <INVALID>[IvarId(0)]
  00967:    	mov    rdi,QWORD PTR [r14-0x30]
  0096b: 00 	mov    rsi,0xac
  00972:    	mov    rdx,r12
  00975: 45 	movabs rax,0x5645597e4ae0
  0097f:    	call   rax
  00981:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [<INVALID>]
  00985:    	mov    rdi,QWORD PTR [r14-0x40]
  00989: 45 	movabs rax,0x564559780ec0
  00993:    	call   rax
  00995:    	mov    r15d,eax
  00998: 45 	movabs r13,0x564559ec5ff0
  009a2:    	cmp    QWORD PTR [r13+0x8],0x0
  009a7:    	je     0x38103
  009ad:    	cmp    r15d,DWORD PTR [r13-0x8]
  009b1:    	jne    0x38103
  009b7:    	mov    eax,DWORD PTR [rip+0xffffffffffff9aac]        # 0xffffa469
  009bd:    	cmp    DWORD PTR [r13-0x4],eax
  009c1:    	jne    0x38103
  009c7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009d0:    	mov    rax,QWORD PTR [r14-0x40]
  009d4:    	mov    QWORD PTR [rsp-0x40],rax
  009d9: 00 	mov    rdi,0x1
  009e0:    	mov    rax,QWORD PTR [r14-0x68]
  009e4:    	mov    QWORD PTR [rsp-0x48],rax
  009e9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  009f2:    	mov    r13,QWORD PTR [r13+0x8]
  009f6:    	mov    rax,QWORD PTR [r13+0x8]
  009fa:    	mov    QWORD PTR [rsp-0x30],rax
  009ff:    	mov    rax,QWORD PTR [r13+0x0]
  00a03:    	mov    r13,QWORD PTR [r13+0x10]
  00a07:    	mov    rsi,QWORD PTR [rbx]
  00a0a:    	mov    QWORD PTR [rsp-0x18],rsi
  00a0f:    	lea    rsi,[rsp-0x18]
  00a14:    	mov    QWORD PTR [rbx],rsi
  00a17:    	lea    r14,[rsp-0x10]
  00a1c:    	mov    QWORD PTR [rsp-0x20],r14
  00a21:    	call   rax
  00a23:    	lea    r14,[rbp-0x8]
  00a27:    	mov    QWORD PTR [rbx],r14
  00a2a:    	mov    r14,QWORD PTR [rbp-0x10]
  00a2e:    	test   rax,rax
  00a31:    	je     0x38144
:00046 
:00047 %7 = const[Vec]                      [<INVALID>]
  00a37: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff9a3a]        # 0xffffa478
  00a3e: 00 	cmp    rax,QWORD PTR [rip+0xb43]        # 0x1588
  00a45:    	jne    0x38153
  00a4b: 00 	mov    rax,QWORD PTR [rip+0xb26]        # 0x1578
  00a52:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [<INVALID>]
  00a56:    	mov    rdi,QWORD PTR [r14-0x38]
  00a5a: 45 	movabs rax,0x564559780ec0
  00a64:    	call   rax
  00a66:    	mov    r15d,eax
  00a69: 45 	movabs r13,0x564559ec6020
  00a73:    	cmp    QWORD PTR [r13+0x8],0x0
  00a78:    	je     0x3819e
  00a7e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a82:    	jne    0x3819e
  00a88:    	mov    eax,DWORD PTR [rip+0xffffffffffff99db]        # 0xffffa469
  00a8e:    	cmp    DWORD PTR [r13-0x4],eax
  00a92:    	jne    0x3819e
  00a98: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aa1:    	mov    rax,QWORD PTR [r14-0x38]
  00aa5:    	mov    QWORD PTR [rsp-0x40],rax
  00aaa: 00 	mov    rdi,0x0
  00ab1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00aba:    	mov    r13,QWORD PTR [r13+0x8]
  00abe:    	mov    rax,QWORD PTR [r13+0x8]
  00ac2:    	mov    QWORD PTR [rsp-0x30],rax
  00ac7:    	mov    rax,QWORD PTR [r13+0x0]
  00acb:    	mov    r13,QWORD PTR [r13+0x10]
  00acf:    	mov    rsi,QWORD PTR [rbx]
  00ad2:    	mov    QWORD PTR [rsp-0x18],rsi
  00ad7:    	lea    rsi,[rsp-0x18]
  00adc:    	mov    QWORD PTR [rbx],rsi
  00adf:    	lea    r14,[rsp-0x10]
  00ae4:    	mov    QWORD PTR [rsp-0x20],r14
  00ae9:    	call   rax
  00aeb:    	lea    r14,[rbp-0x8]
  00aef:    	mov    QWORD PTR [rbx],r14
  00af2:    	mov    r14,QWORD PTR [rbp-0x10]
  00af6:    	test   rax,rax
  00af9:    	je     0x381df
  00aff:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [<INVALID>]
  00b03:    	mov    rdi,QWORD PTR [r14-0x70]
  00b07: 45 	movabs rax,0x564559780ec0
  00b11:    	call   rax
  00b13:    	mov    r15d,eax
  00b16: 45 	movabs r13,0x564559ec6040
  00b20:    	cmp    QWORD PTR [r13+0x8],0x0
  00b25:    	je     0x381ee
  00b2b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b2f:    	jne    0x381ee
  00b35:    	mov    eax,DWORD PTR [rip+0xffffffffffff992e]        # 0xffffa469
  00b3b:    	cmp    DWORD PTR [r13-0x4],eax
  00b3f:    	jne    0x381ee
  00b45: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b4e:    	mov    rax,QWORD PTR [r14-0x70]
  00b52:    	mov    QWORD PTR [rsp-0x40],rax
  00b57: 00 	mov    rdi,0x0
  00b5e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b67:    	mov    r13,QWORD PTR [r13+0x8]
  00b6b:    	mov    rax,QWORD PTR [r13+0x8]
  00b6f:    	mov    QWORD PTR [rsp-0x30],rax
  00b74:    	mov    rax,QWORD PTR [r13+0x0]
  00b78:    	mov    r13,QWORD PTR [r13+0x10]
  00b7c:    	mov    rsi,QWORD PTR [rbx]
  00b7f:    	mov    QWORD PTR [rsp-0x18],rsi
  00b84:    	lea    rsi,[rsp-0x18]
  00b89:    	mov    QWORD PTR [rbx],rsi
  00b8c:    	lea    r14,[rsp-0x10]
  00b91:    	mov    QWORD PTR [rsp-0x20],r14
  00b96:    	call   rax
  00b98:    	lea    r14,[rbp-0x8]
  00b9c:    	mov    QWORD PTR [rbx],r14
  00b9f:    	mov    r14,QWORD PTR [rbp-0x10]
  00ba3:    	test   rax,rax
  00ba6:    	je     0x3822f
  00bac:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [<INVALID>]
  00bb0:    	mov    rdi,QWORD PTR [r14-0x38]
  00bb4: 45 	movabs rax,0x564559780ec0
  00bbe:    	call   rax
  00bc0:    	mov    r15d,eax
  00bc3: 45 	movabs r13,0x564559ec6060
  00bcd:    	cmp    QWORD PTR [r13+0x8],0x0
  00bd2:    	je     0x3823e
  00bd8:    	cmp    r15d,DWORD PTR [r13-0x8]
  00bdc:    	jne    0x3823e
  00be2:    	mov    eax,DWORD PTR [rip+0xffffffffffff9881]        # 0xffffa469
  00be8:    	cmp    DWORD PTR [r13-0x4],eax
  00bec:    	jne    0x3823e
  00bf2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00bfb:    	mov    rax,QWORD PTR [r14-0x38]
  00bff:    	mov    QWORD PTR [rsp-0x40],rax
  00c04: 00 	mov    rdi,0x0
  00c0b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c14:    	mov    r13,QWORD PTR [r13+0x8]
  00c18:    	mov    rax,QWORD PTR [r13+0x8]
  00c1c:    	mov    QWORD PTR [rsp-0x30],rax
  00c21:    	mov    rax,QWORD PTR [r13+0x0]
  00c25:    	mov    r13,QWORD PTR [r13+0x10]
  00c29:    	mov    rsi,QWORD PTR [rbx]
  00c2c:    	mov    QWORD PTR [rsp-0x18],rsi
  00c31:    	lea    rsi,[rsp-0x18]
  00c36:    	mov    QWORD PTR [rbx],rsi
  00c39:    	lea    r14,[rsp-0x10]
  00c3e:    	mov    QWORD PTR [rsp-0x20],r14
  00c43:    	call   rax
  00c45:    	lea    r14,[rbp-0x8]
  00c49:    	mov    QWORD PTR [rbx],r14
  00c4c:    	mov    r14,QWORD PTR [rbp-0x10]
  00c50:    	test   rax,rax
  00c53:    	je     0x3827f
  00c59:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [<INVALID>]
  00c5d:    	mov    rdi,QWORD PTR [r14-0x78]
  00c61: 45 	movabs rax,0x564559780ec0
  00c6b:    	call   rax
  00c6d:    	mov    r15d,eax
  00c70: 45 	movabs r13,0x564559ec6080
  00c7a:    	cmp    QWORD PTR [r13+0x8],0x0
  00c7f:    	je     0x3828e
  00c85:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c89:    	jne    0x3828e
  00c8f:    	mov    eax,DWORD PTR [rip+0xffffffffffff97d4]        # 0xffffa469
  00c95:    	cmp    DWORD PTR [r13-0x4],eax
  00c99:    	jne    0x3828e
  00c9f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ca8:    	mov    rax,QWORD PTR [r14-0x78]
  00cac:    	mov    QWORD PTR [rsp-0x40],rax
  00cb1: 00 	mov    rdi,0x0
  00cb8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cc1:    	mov    r13,QWORD PTR [r13+0x8]
  00cc5:    	mov    rax,QWORD PTR [r13+0x8]
  00cc9:    	mov    QWORD PTR [rsp-0x30],rax
  00cce:    	mov    rax,QWORD PTR [r13+0x0]
  00cd2:    	mov    r13,QWORD PTR [r13+0x10]
  00cd6:    	mov    rsi,QWORD PTR [rbx]
  00cd9:    	mov    QWORD PTR [rsp-0x18],rsi
  00cde:    	lea    rsi,[rsp-0x18]
  00ce3:    	mov    QWORD PTR [rbx],rsi
  00ce6:    	lea    r14,[rsp-0x10]
  00ceb:    	mov    QWORD PTR [rsp-0x20],r14
  00cf0:    	call   rax
  00cf2:    	lea    r14,[rbp-0x8]
  00cf6:    	mov    QWORD PTR [rbx],r14
  00cf9:    	mov    r14,QWORD PTR [rbp-0x10]
  00cfd:    	test   rax,rax
  00d00:    	je     0x382cf
  00d06:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [<INVALID>][<INVALID>]
  00d0a:    	mov    rdi,QWORD PTR [r14-0x60]
  00d0e:    	mov    rsi,QWORD PTR [r14-0x78]
  00d12:    	mov    rdx,rdi
  00d15:    	mov    rcx,rsi
  00d18:    	mov    rdi,rbx
  00d1b:    	mov    rsi,r12
  00d1e: 45 	movabs rax,0x564559795730
  00d28:    	call   rax
  00d2a:    	test   rax,rax
  00d2d:    	je     0x382de
  00d33:    	mov    QWORD PTR [r14-0x78],rax
:00057 %8 = %8 + %9                         [<INVALID>][<INVALID>]
  00d37:    	mov    rdi,QWORD PTR [r14-0x70]
  00d3b:    	mov    rsi,QWORD PTR [r14-0x78]
  00d3f:    	mov    rdx,rdi
  00d42:    	mov    rcx,rsi
  00d45:    	mov    rdi,rbx
  00d48:    	mov    rsi,r12
  00d4b: 45 	movabs rax,0x5645597937b0
  00d55:    	call   rax
  00d57:    	test   rax,rax
  00d5a:    	je     0x382ed
  00d60:    	mov    QWORD PTR [r14-0x70],rax
:00058 %9 = %1.call org()                   [<INVALID>]
  00d64:    	mov    rdi,QWORD PTR [r14-0x38]
  00d68: 45 	movabs rax,0x564559780ec0
  00d72:    	call   rax
  00d74:    	mov    r15d,eax
  00d77: 45 	movabs r13,0x564559ec60c0
  00d81:    	cmp    QWORD PTR [r13+0x8],0x0
  00d86:    	je     0x382fc
  00d8c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d90:    	jne    0x382fc
  00d96:    	mov    eax,DWORD PTR [rip+0xffffffffffff96cd]        # 0xffffa469
  00d9c:    	cmp    DWORD PTR [r13-0x4],eax
  00da0:    	jne    0x382fc
  00da6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00daf:    	mov    rax,QWORD PTR [r14-0x38]
  00db3:    	mov    QWORD PTR [rsp-0x40],rax
  00db8: 00 	mov    rdi,0x0
  00dbf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00dc8:    	mov    r13,QWORD PTR [r13+0x8]
  00dcc:    	mov    rax,QWORD PTR [r13+0x8]
  00dd0:    	mov    QWORD PTR [rsp-0x30],rax
  00dd5:    	mov    rax,QWORD PTR [r13+0x0]
  00dd9:    	mov    r13,QWORD PTR [r13+0x10]
  00ddd:    	mov    rsi,QWORD PTR [rbx]
  00de0:    	mov    QWORD PTR [rsp-0x18],rsi
  00de5:    	lea    rsi,[rsp-0x18]
  00dea:    	mov    QWORD PTR [rbx],rsi
  00ded:    	lea    r14,[rsp-0x10]
  00df2:    	mov    QWORD PTR [rsp-0x20],r14
  00df7:    	call   rax
  00df9:    	lea    r14,[rbp-0x8]
  00dfd:    	mov    QWORD PTR [rbx],r14
  00e00:    	mov    r14,QWORD PTR [rbp-0x10]
  00e04:    	test   rax,rax
  00e07:    	je     0x3833d
  00e0d:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [<INVALID>]
  00e11:    	mov    rdi,QWORD PTR [r14-0x78]
  00e15: 45 	movabs rax,0x564559780ec0
  00e1f:    	call   rax
  00e21:    	mov    r15d,eax
  00e24: 45 	movabs r13,0x564559ec60e0
  00e2e:    	cmp    QWORD PTR [r13+0x8],0x0
  00e33:    	je     0x3834c
  00e39:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e3d:    	jne    0x3834c
  00e43:    	mov    eax,DWORD PTR [rip+0xffffffffffff9620]        # 0xffffa469
  00e49:    	cmp    DWORD PTR [r13-0x4],eax
  00e4d:    	jne    0x3834c
  00e53: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e5c:    	mov    rax,QWORD PTR [r14-0x78]
  00e60:    	mov    QWORD PTR [rsp-0x40],rax
  00e65: 00 	mov    rdi,0x0
  00e6c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e75:    	mov    r13,QWORD PTR [r13+0x8]
  00e79:    	mov    rax,QWORD PTR [r13+0x8]
  00e7d:    	mov    QWORD PTR [rsp-0x30],rax
  00e82:    	mov    rax,QWORD PTR [r13+0x0]
  00e86:    	mov    r13,QWORD PTR [r13+0x10]
  00e8a:    	mov    rsi,QWORD PTR [rbx]
  00e8d:    	mov    QWORD PTR [rsp-0x18],rsi
  00e92:    	lea    rsi,[rsp-0x18]
  00e97:    	mov    QWORD PTR [rbx],rsi
  00e9a:    	lea    r14,[rsp-0x10]
  00e9f:    	mov    QWORD PTR [rsp-0x20],r14
  00ea4:    	call   rax
  00ea6:    	lea    r14,[rbp-0x8]
  00eaa:    	mov    QWORD PTR [rbx],r14
  00ead:    	mov    r14,QWORD PTR [rbp-0x10]
  00eb1:    	test   rax,rax
  00eb4:    	je     0x3838d
  00eba:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [<INVALID>]
  00ebe:    	mov    rdi,QWORD PTR [r14-0x38]
  00ec2: 45 	movabs rax,0x564559780ec0
  00ecc:    	call   rax
  00ece:    	mov    r15d,eax
  00ed1: 45 	movabs r13,0x564559ec6100
  00edb:    	cmp    QWORD PTR [r13+0x8],0x0
  00ee0:    	je     0x3839c
  00ee6:    	cmp    r15d,DWORD PTR [r13-0x8]
  00eea:    	jne    0x3839c
  00ef0:    	mov    eax,DWORD PTR [rip+0xffffffffffff9573]        # 0xffffa469
  00ef6:    	cmp    DWORD PTR [r13-0x4],eax
  00efa:    	jne    0x3839c
  00f00: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f09:    	mov    rax,QWORD PTR [r14-0x38]
  00f0d:    	mov    QWORD PTR [rsp-0x40],rax
  00f12: 00 	mov    rdi,0x0
  00f19: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f22:    	mov    r13,QWORD PTR [r13+0x8]
  00f26:    	mov    rax,QWORD PTR [r13+0x8]
  00f2a:    	mov    QWORD PTR [rsp-0x30],rax
  00f2f:    	mov    rax,QWORD PTR [r13+0x0]
  00f33:    	mov    r13,QWORD PTR [r13+0x10]
  00f37:    	mov    rsi,QWORD PTR [rbx]
  00f3a:    	mov    QWORD PTR [rsp-0x18],rsi
  00f3f:    	lea    rsi,[rsp-0x18]
  00f44:    	mov    QWORD PTR [rbx],rsi
  00f47:    	lea    r14,[rsp-0x10]
  00f4c:    	mov    QWORD PTR [rsp-0x20],r14
  00f51:    	call   rax
  00f53:    	lea    r14,[rbp-0x8]
  00f57:    	mov    QWORD PTR [rbx],r14
  00f5a:    	mov    r14,QWORD PTR [rbp-0x10]
  00f5e:    	test   rax,rax
  00f61:    	je     0x383dd
  00f67:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [<INVALID>]
  00f6b:    	mov    rdi,QWORD PTR [r14-0x80]
  00f6f: 45 	movabs rax,0x564559780ec0
  00f79:    	call   rax
  00f7b:    	mov    r15d,eax
  00f7e: 45 	movabs r13,0x564559ec6120
  00f88:    	cmp    QWORD PTR [r13+0x8],0x0
  00f8d:    	je     0x383ec
  00f93:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f97:    	jne    0x383ec
  00f9d:    	mov    eax,DWORD PTR [rip+0xffffffffffff94c6]        # 0xffffa469
  00fa3:    	cmp    DWORD PTR [r13-0x4],eax
  00fa7:    	jne    0x383ec
  00fad: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fb6:    	mov    rax,QWORD PTR [r14-0x80]
  00fba:    	mov    QWORD PTR [rsp-0x40],rax
  00fbf: 00 	mov    rdi,0x0
  00fc6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fcf:    	mov    r13,QWORD PTR [r13+0x8]
  00fd3:    	mov    rax,QWORD PTR [r13+0x8]
  00fd7:    	mov    QWORD PTR [rsp-0x30],rax
  00fdc:    	mov    rax,QWORD PTR [r13+0x0]
  00fe0:    	mov    r13,QWORD PTR [r13+0x10]
  00fe4:    	mov    rsi,QWORD PTR [rbx]
  00fe7:    	mov    QWORD PTR [rsp-0x18],rsi
  00fec:    	lea    rsi,[rsp-0x18]
  00ff1:    	mov    QWORD PTR [rbx],rsi
  00ff4:    	lea    r14,[rsp-0x10]
  00ff9:    	mov    QWORD PTR [rsp-0x20],r14
  00ffe:    	call   rax
  01000:    	lea    r14,[rbp-0x8]
  01004:    	mov    QWORD PTR [rbx],r14
  01007:    	mov    r14,QWORD PTR [rbp-0x10]
  0100b:    	test   rax,rax
  0100e:    	je     0x3842d
  01014:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  01018:    	mov    rdi,QWORD PTR [r14-0x60]
  0101c:    	mov    rsi,QWORD PTR [r14-0x80]
  01020:    	mov    rdx,rdi
  01023:    	mov    rcx,rsi
  01026:    	mov    rdi,rbx
  01029:    	mov    rsi,r12
  0102c: 45 	movabs rax,0x564559795730
  01036:    	call   rax
  01038:    	test   rax,rax
  0103b:    	je     0x3843c
  01041:    	mov    QWORD PTR [r14-0x80],rax
:00067 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  01045:    	mov    rdi,QWORD PTR [r14-0x78]
  01049:    	mov    rsi,QWORD PTR [r14-0x80]
  0104d:    	mov    rdx,rdi
  01050:    	mov    rcx,rsi
  01053:    	mov    rdi,rbx
  01056:    	mov    rsi,r12
  01059: 45 	movabs rax,0x5645597937b0
  01063:    	call   rax
  01065:    	test   rax,rax
  01068:    	je     0x3844b
  0106e:    	mov    QWORD PTR [r14-0x78],rax
:00068 %10 = %1.call org()                  [<INVALID>]
  01072:    	mov    rdi,QWORD PTR [r14-0x38]
  01076: 45 	movabs rax,0x564559780ec0
  01080:    	call   rax
  01082:    	mov    r15d,eax
  01085: 45 	movabs r13,0x564559ec6160
  0108f:    	cmp    QWORD PTR [r13+0x8],0x0
  01094:    	je     0x3845a
  0109a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0109e:    	jne    0x3845a
  010a4:    	mov    eax,DWORD PTR [rip+0xffffffffffff93bf]        # 0xffffa469
  010aa:    	cmp    DWORD PTR [r13-0x4],eax
  010ae:    	jne    0x3845a
  010b4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010bd:    	mov    rax,QWORD PTR [r14-0x38]
  010c1:    	mov    QWORD PTR [rsp-0x40],rax
  010c6: 00 	mov    rdi,0x0
  010cd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010d6:    	mov    r13,QWORD PTR [r13+0x8]
  010da:    	mov    rax,QWORD PTR [r13+0x8]
  010de:    	mov    QWORD PTR [rsp-0x30],rax
  010e3:    	mov    rax,QWORD PTR [r13+0x0]
  010e7:    	mov    r13,QWORD PTR [r13+0x10]
  010eb:    	mov    rsi,QWORD PTR [rbx]
  010ee:    	mov    QWORD PTR [rsp-0x18],rsi
  010f3:    	lea    rsi,[rsp-0x18]
  010f8:    	mov    QWORD PTR [rbx],rsi
  010fb:    	lea    r14,[rsp-0x10]
  01100:    	mov    QWORD PTR [rsp-0x20],r14
  01105:    	call   rax
  01107:    	lea    r14,[rbp-0x8]
  0110b:    	mov    QWORD PTR [rbx],r14
  0110e:    	mov    r14,QWORD PTR [rbp-0x10]
  01112:    	test   rax,rax
  01115:    	je     0x3849b
  0111b:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [<INVALID>]
  0111f:    	mov    rdi,QWORD PTR [r14-0x80]
  01123: 45 	movabs rax,0x564559780ec0
  0112d:    	call   rax
  0112f:    	mov    r15d,eax
  01132: 45 	movabs r13,0x564559ec6180
  0113c:    	cmp    QWORD PTR [r13+0x8],0x0
  01141:    	je     0x384aa
  01147:    	cmp    r15d,DWORD PTR [r13-0x8]
  0114b:    	jne    0x384aa
  01151:    	mov    eax,DWORD PTR [rip+0xffffffffffff9312]        # 0xffffa469
  01157:    	cmp    DWORD PTR [r13-0x4],eax
  0115b:    	jne    0x384aa
  01161: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0116a:    	mov    rax,QWORD PTR [r14-0x80]
  0116e:    	mov    QWORD PTR [rsp-0x40],rax
  01173: 00 	mov    rdi,0x0
  0117a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01183:    	mov    r13,QWORD PTR [r13+0x8]
  01187:    	mov    rax,QWORD PTR [r13+0x8]
  0118b:    	mov    QWORD PTR [rsp-0x30],rax
  01190:    	mov    rax,QWORD PTR [r13+0x0]
  01194:    	mov    r13,QWORD PTR [r13+0x10]
  01198:    	mov    rsi,QWORD PTR [rbx]
  0119b:    	mov    QWORD PTR [rsp-0x18],rsi
  011a0:    	lea    rsi,[rsp-0x18]
  011a5:    	mov    QWORD PTR [rbx],rsi
  011a8:    	lea    r14,[rsp-0x10]
  011ad:    	mov    QWORD PTR [rsp-0x20],r14
  011b2:    	call   rax
  011b4:    	lea    r14,[rbp-0x8]
  011b8:    	mov    QWORD PTR [rbx],r14
  011bb:    	mov    r14,QWORD PTR [rbp-0x10]
  011bf:    	test   rax,rax
  011c2:    	je     0x384eb
  011c8:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [<INVALID>]
  011cc:    	mov    rdi,QWORD PTR [r14-0x38]
  011d0: 45 	movabs rax,0x564559780ec0
  011da:    	call   rax
  011dc:    	mov    r15d,eax
  011df: 45 	movabs r13,0x564559ec61a0
  011e9:    	cmp    QWORD PTR [r13+0x8],0x0
  011ee:    	je     0x384fa
  011f4:    	cmp    r15d,DWORD PTR [r13-0x8]
  011f8:    	jne    0x384fa
  011fe:    	mov    eax,DWORD PTR [rip+0xffffffffffff9265]        # 0xffffa469
  01204:    	cmp    DWORD PTR [r13-0x4],eax
  01208:    	jne    0x384fa
  0120e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01217:    	mov    rax,QWORD PTR [r14-0x38]
  0121b:    	mov    QWORD PTR [rsp-0x40],rax
  01220: 00 	mov    rdi,0x0
  01227: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01230:    	mov    r13,QWORD PTR [r13+0x8]
  01234:    	mov    rax,QWORD PTR [r13+0x8]
  01238:    	mov    QWORD PTR [rsp-0x30],rax
  0123d:    	mov    rax,QWORD PTR [r13+0x0]
  01241:    	mov    r13,QWORD PTR [r13+0x10]
  01245:    	mov    rsi,QWORD PTR [rbx]
  01248:    	mov    QWORD PTR [rsp-0x18],rsi
  0124d:    	lea    rsi,[rsp-0x18]
  01252:    	mov    QWORD PTR [rbx],rsi
  01255:    	lea    r14,[rsp-0x10]
  0125a:    	mov    QWORD PTR [rsp-0x20],r14
  0125f:    	call   rax
  01261:    	lea    r14,[rbp-0x8]
  01265:    	mov    QWORD PTR [rbx],r14
  01268:    	mov    r14,QWORD PTR [rbp-0x10]
  0126c:    	test   rax,rax
  0126f:    	je     0x3853b
  01275: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [<INVALID>]
  0127c: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01283: 45 	movabs rax,0x564559780ec0
  0128d:    	call   rax
  0128f:    	mov    r15d,eax
  01292: 45 	movabs r13,0x564559ec61c0
  0129c:    	cmp    QWORD PTR [r13+0x8],0x0
  012a1:    	je     0x3854a
  012a7:    	cmp    r15d,DWORD PTR [r13-0x8]
  012ab:    	jne    0x3854a
  012b1:    	mov    eax,DWORD PTR [rip+0xffffffffffff91b2]        # 0xffffa469
  012b7:    	cmp    DWORD PTR [r13-0x4],eax
  012bb:    	jne    0x3854a
  012c1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012ca: ff 	mov    rax,QWORD PTR [r14-0x88]
  012d1:    	mov    QWORD PTR [rsp-0x40],rax
  012d6: 00 	mov    rdi,0x0
  012dd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012e6:    	mov    r13,QWORD PTR [r13+0x8]
  012ea:    	mov    rax,QWORD PTR [r13+0x8]
  012ee:    	mov    QWORD PTR [rsp-0x30],rax
  012f3:    	mov    rax,QWORD PTR [r13+0x0]
  012f7:    	mov    r13,QWORD PTR [r13+0x10]
  012fb:    	mov    rsi,QWORD PTR [rbx]
  012fe:    	mov    QWORD PTR [rsp-0x18],rsi
  01303:    	lea    rsi,[rsp-0x18]
  01308:    	mov    QWORD PTR [rbx],rsi
  0130b:    	lea    r14,[rsp-0x10]
  01310:    	mov    QWORD PTR [rsp-0x20],r14
  01315:    	call   rax
  01317:    	lea    r14,[rbp-0x8]
  0131b:    	mov    QWORD PTR [rbx],r14
  0131e:    	mov    r14,QWORD PTR [rbp-0x10]
  01322:    	test   rax,rax
  01325:    	je     0x3858e
  0132b: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01332:    	mov    rdi,QWORD PTR [r14-0x60]
  01336: ff 	mov    rsi,QWORD PTR [r14-0x88]
  0133d:    	mov    rdx,rdi
  01340:    	mov    rcx,rsi
  01343:    	mov    rdi,rbx
  01346:    	mov    rsi,r12
  01349: 45 	movabs rax,0x564559795730
  01353:    	call   rax
  01355:    	test   rax,rax
  01358:    	je     0x3859d
  0135e: ff 	mov    QWORD PTR [r14-0x88],rax
:00077 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01365:    	mov    rdi,QWORD PTR [r14-0x80]
  01369: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01370:    	mov    rdx,rdi
  01373:    	mov    rcx,rsi
  01376:    	mov    rdi,rbx
  01379:    	mov    rsi,r12
  0137c: 45 	movabs rax,0x5645597937b0
  01386:    	call   rax
  01388:    	test   rax,rax
  0138b:    	je     0x385ac
  01391:    	mov    QWORD PTR [r14-0x80],rax
:00078 %7 = %7.call new(%8; 3)              [<INVALID>]
  01395:    	mov    rdi,QWORD PTR [r14-0x68]
  01399: 45 	movabs rax,0x564559780ec0
  013a3:    	call   rax
  013a5:    	mov    r15d,eax
  013a8: 45 	movabs r13,0x564559ec6200
  013b2:    	cmp    QWORD PTR [r13+0x8],0x0
  013b7:    	je     0x385bb
  013bd:    	cmp    r15d,DWORD PTR [r13-0x8]
  013c1:    	jne    0x385bb
  013c7:    	mov    eax,DWORD PTR [rip+0xffffffffffff909c]        # 0xffffa469
  013cd:    	cmp    DWORD PTR [r13-0x4],eax
  013d1:    	jne    0x385bb
  013d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013e0:    	mov    rax,QWORD PTR [r14-0x68]
  013e4:    	mov    QWORD PTR [rsp-0x40],rax
  013e9: 00 	mov    rdi,0x3
  013f0:    	mov    rax,QWORD PTR [r14-0x70]
  013f4:    	mov    QWORD PTR [rsp-0x48],rax
  013f9:    	mov    rax,QWORD PTR [r14-0x78]
  013fd:    	mov    QWORD PTR [rsp-0x50],rax
  01402:    	mov    rax,QWORD PTR [r14-0x80]
  01406:    	mov    QWORD PTR [rsp-0x58],rax
  0140b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01414:    	mov    r13,QWORD PTR [r13+0x8]
  01418:    	mov    rax,QWORD PTR [r13+0x8]
  0141c:    	mov    QWORD PTR [rsp-0x30],rax
  01421:    	mov    rax,QWORD PTR [r13+0x0]
  01425:    	mov    r13,QWORD PTR [r13+0x10]
  01429:    	mov    rsi,QWORD PTR [rbx]
  0142c:    	mov    QWORD PTR [rsp-0x18],rsi
  01431:    	lea    rsi,[rsp-0x18]
  01436:    	mov    QWORD PTR [rbx],rsi
  01439:    	lea    r14,[rsp-0x10]
  0143e:    	mov    QWORD PTR [rsp-0x20],r14
  01443:    	call   rax
  01445:    	lea    r14,[rbp-0x8]
  01449:    	mov    QWORD PTR [rbx],r14
  0144c:    	mov    r14,QWORD PTR [rbp-0x10]
  01450:    	test   rax,rax
  01453:    	je     0x385fc
  01459:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [<INVALID>]
  0145d:    	mov    rdi,QWORD PTR [r14-0x40]
  01461: 45 	movabs rax,0x564559780ec0
  0146b:    	call   rax
  0146d:    	mov    r15d,eax
  01470: 45 	movabs r13,0x564559ec6220
  0147a:    	cmp    QWORD PTR [r13+0x8],0x0
  0147f:    	je     0x3860b
  01485:    	cmp    r15d,DWORD PTR [r13-0x8]
  01489:    	jne    0x3860b
  0148f:    	mov    eax,DWORD PTR [rip+0xffffffffffff8fd4]        # 0xffffa469
  01495:    	cmp    DWORD PTR [r13-0x4],eax
  01499:    	jne    0x3860b
  0149f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014a8:    	mov    rax,QWORD PTR [r14-0x40]
  014ac:    	mov    QWORD PTR [rsp-0x40],rax
  014b1: 00 	mov    rdi,0x1
  014b8:    	mov    rax,QWORD PTR [r14-0x68]
  014bc:    	mov    QWORD PTR [rsp-0x48],rax
  014c1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014ca:    	mov    r13,QWORD PTR [r13+0x8]
  014ce:    	mov    rax,QWORD PTR [r13+0x8]
  014d2:    	mov    QWORD PTR [rsp-0x30],rax
  014d7:    	mov    rax,QWORD PTR [r13+0x0]
  014db:    	mov    r13,QWORD PTR [r13+0x10]
  014df:    	mov    rsi,QWORD PTR [rbx]
  014e2:    	mov    QWORD PTR [rsp-0x18],rsi
  014e7:    	lea    rsi,[rsp-0x18]
  014ec:    	mov    QWORD PTR [rbx],rsi
  014ef:    	lea    r14,[rsp-0x10]
  014f4:    	mov    QWORD PTR [rsp-0x20],r14
  014f9:    	call   rax
  014fb:    	lea    r14,[rbp-0x8]
  014ff:    	mov    QWORD PTR [rbx],r14
  01502:    	mov    r14,QWORD PTR [rbp-0x10]
  01506:    	test   rax,rax
  01509:    	je     0x3864c
:00081 
:00082 br =>:00083
  0150f:    	jmp    0x3869a
:00083 %7 = nil
  01514: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  0151c:    	mov    rax,QWORD PTR [r14-0x68]
  01520:    	leave  
  01521:    	ret    
==> start whole compile: clamp FuncId(87) self_class:Scene start:[00000] bytecode:0x564559e86360
<== finished compile. elapsed:32.6µs
offset:Pos(47336) code: 475 bytes  data: 85 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x37123
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x37132
  00035: cmp    DWORD PTR [rdi+0x4],0x35
  00039: jne    0x37132
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  0003f: movq   xmm2,QWORD PTR [rip+0x1a1]        # 0x1e8
  00047: movabs rax,0x37f800000000002
  00051: mov    QWORD PTR [r14-0x48],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00055: mov    rdi,QWORD PTR [r14-0x38]
  00059: test   rdi,0x1
  00060: jne    0x37141
  00066: test   rdi,0x2
  0006d: je     0xa9
  00073: xorps  xmm3,xmm3
  00076: movabs rax,0x8000000000000002
  00080: cmp    rdi,rax
  00083: je     0xbb
  00089: mov    rax,rdi
  0008c: sar    rax,0x3f
  00090: add    rax,0x2
  00094: and    rdi,0xfffffffffffffffc
  00098: or     rdi,rax
  0009b: rol    rdi,0x3d
  0009f: movq   xmm3,rdi
  000a4: jmp    0xbb
  000a9: call   0xffff4795
  000ae: test   rax,rax
  000b1: je     0x37141
  000b7: movq   xmm3,xmm0
  000bb: movq   xmm4,xmm3
  000bf: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000c3: movq   xmm2,QWORD PTR [rip+0x12d]        # 0x1f8
  000cb: movabs rax,0x37f000000000002
  000d5: mov    QWORD PTR [r14-0x48],rax
:00004 _%3 = %2 > %3                        [Float][Float]
  000d9: ucomisd xmm4,xmm2
  000dd: jbe    0x37150
:00005 condnotbr _%3 =>:00008
:00006 %2 = literal[255.0]
  000e3: movq   xmm2,QWORD PTR [rip+0x11d]        # 0x208
  000eb: movabs rax,0x37f000000000002
  000f5: mov    QWORD PTR [r14-0x40],rax
:00007 br =>:00008
  000f9: jmp    0x37176
:00008 %3 = literal[0.0]
  000fe: movq   xmm2,QWORD PTR [rip+0x112]        # 0x218
  00106: movabs rax,0x8000000000000002
  00110: mov    QWORD PTR [r14-0x48],rax
:00009 _%3 = %2 < %3                        [Float][Float]
  00114: ucomisd xmm4,xmm2
  00118: jae    0x37193
:00010 condnotbr _%3 =>:00013
:00011 %2 = literal[0.0]
  0011e: movq   xmm2,QWORD PTR [rip+0x102]        # 0x228
  00126: movabs rax,0x8000000000000002
  00130: mov    QWORD PTR [r14-0x40],rax
:00012 br =>:00013
  00134: jmp    0x371ac
:00013 %3 = %2.call to_i()                  [Float]
  00139: mov    rdi,QWORD PTR [r14-0x40]
  0013d: test   rdi,0x1
  00144: jne    0x371c9
  0014a: test   rdi,0x2
  00151: jne    0x16e
  00157: test   rdi,0x7
  0015e: jne    0x371c9
  00164: cmp    DWORD PTR [rdi+0x4],0x7
  00168: jne    0x371c9
  0016e: cmp    DWORD PTR [rip+0xffffffffffff8d64],0x26        # 0xffff8ed9
  00175: jne    0x371c9
  0017b: mov    r9,0x0
  00182: mov    rdx,rdi
  00185: mov    QWORD PTR [rsp-0x40],rcx
  0018a: mov    QWORD PTR [rsp-0x28],0x0
  00193: lea    rcx,[r14-0x48]
  00197: mov    r8,0x0
  0019e: mov    rsi,QWORD PTR [rbx]
  001a1: mov    QWORD PTR [rsp-0x18],rsi
  001a6: lea    rsi,[rsp-0x18]
  001ab: mov    QWORD PTR [rbx],rsi
  001ae: lea    r14,[rsp-0x10]
  001b3: mov    QWORD PTR [rsp-0x20],r14
  001b8: call   0x371d8
  001bd: lea    r14,[rbp-0x8]
  001c1: mov    QWORD PTR [rbx],r14
  001c4: mov    r14,QWORD PTR [rbp-0x10]
  001c8: test   rax,rax
  001cb: je     0x3720a
  001d1: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 ret %3
  001d5: mov    rax,QWORD PTR [r14-0x48]
  001d9: leave  
  001da: ret    
==> start whole compile: <unnamed> FuncId(110) self_class:Scene start:[00000] bytecode:0x564559ef6100
<== finished compile. elapsed:14.9µs
offset:Pos(47896) code: 253 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x36ff8
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x36ff8
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(3, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax]
  0006c: mov    rax,QWORD PTR [rax]
  0006f: mov    rax,QWORD PTR [rax-0x30]
  00073: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7274497]
  00077: mov    rax,0xde0003
  0007e: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  00082: mov    rdi,QWORD PTR [r14-0x40]
  00086: test   rdi,0x1
  0008d: je     0x37007
  00093: cmp    DWORD PTR [rip+0xffffffffffff8c0f],0x26        # 0xffff8ca9
  0009a: jne    0x37007
  000a0: mov    r9,QWORD PTR [r14-0x48]
  000a4: mov    rdx,rdi
  000a7: mov    QWORD PTR [rsp-0x40],rcx
  000ac: mov    QWORD PTR [rsp-0x28],0x0
  000b5: lea    rcx,[r14-0x50]
  000b9: mov    r8,0x0
  000c0: mov    rsi,QWORD PTR [rbx]
  000c3: mov    QWORD PTR [rsp-0x18],rsi
  000c8: lea    rsi,[rsp-0x18]
  000cd: mov    QWORD PTR [rbx],rsi
  000d0: lea    r14,[rsp-0x10]
  000d5: mov    QWORD PTR [rsp-0x20],r14
  000da: call   0x37016
  000df: lea    r14,[rbp-0x8]
  000e3: mov    QWORD PTR [rbx],r14
  000e6: mov    r14,QWORD PTR [rbp-0x10]
  000ea: test   rax,rax
  000ed: je     0x37048
  000f3: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  000f7: mov    rax,QWORD PTR [r14-0x40]
  000fb: leave  
  000fc: ret    
==> start whole compile: <unnamed> FuncId(109) self_class:Scene start:[00000] bytecode:0x564559ed4140
<== finished compile. elapsed:57.3µs
offset:Pos(48149) code: 3647 bytes  data: 108 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jge    0x3d
  00017: mov    eax,0x1
  0001c: sub    eax,edx
  0001e: test   rax,rax
  00021: je     0x3d
  00027: lea    rdi,[r14-0x40]
  0002b: mov    QWORD PTR [rdi+rax*8],0x4
  00033: sub    rax,0x1
  00037: jne    0x2b
  0003d: mov    rax,0x4
  00044: mov    QWORD PTR [r14-0x40],rax
  00048: mov    QWORD PTR [r14-0x48],rax
  0004c: mov    QWORD PTR [r14-0x50],rax
  00050: mov    QWORD PTR [r14-0x58],rax
  00054: mov    QWORD PTR [r14-0x60],rax
  00058: mov    QWORD PTR [r14-0x68],rax
  0005c: mov    QWORD PTR [r14-0x70],rax
  00060: mov    QWORD PTR [r14-0x78],rax
  00064: mov    rdi,QWORD PTR [r14-0x30]
  00068: test   rdi,0x7
  0006f: jne    0x36f69
  00075: cmp    DWORD PTR [rdi+0x4],0x35
  00079: jne    0x36f69
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffff8b35]        # 0xffff8bbb
  00086: cmp    rax,QWORD PTR [rip+0xdce]        # 0xe5b
  0008d: jne    0x36f78
  00093: mov    rax,QWORD PTR [rip+0xdb1]        # 0xe4b
  0009a: mov    QWORD PTR [r14-0x60],rax
:00002 %7 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0xdc5]        # 0xe6b
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x68],rax
:00003 %8 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0xdbf]        # 0xe7b
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x70],rax
:00004 %9 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0xdb9]        # 0xe8b
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x78],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x60]
  000e4: test   rdi,0x7
  000eb: jne    0x36fc3
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x36fc3
  000fb: cmp    DWORD PTR [rip+0xffffffffffff8aaa],0x26        # 0xffff8bac
  00102: jne    0x36fc3
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x68]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x36fd2
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: test   rax,rax
  00182: je     0x37004
  00188: mov    QWORD PTR [r14-0x40],rax
:00006 
:00007 %6 = dynvar(2, %3)
  0018c: mov    rax,QWORD PTR [r14-0x18]
  00190: mov    rax,QWORD PTR [rax]
  00193: mov    rax,QWORD PTR [rax-0x30]
  00197: mov    QWORD PTR [r14-0x60],rax
:00008 %7 = literal[7208961]
  0019b: mov    rax,0xdc0003
  001a2: mov    QWORD PTR [r14-0x68],rax
:00009 _ = %6.call times(&%7)               [Integer]
  001a6: mov    rdi,QWORD PTR [r14-0x60]
  001aa: test   rdi,0x1
  001b1: je     0x37013
  001b7: cmp    DWORD PTR [rip+0xffffffffffff89ee],0x26        # 0xffff8bac
  001be: jne    0x37013
  001c4: mov    r9,QWORD PTR [r14-0x68]
  001c8: sub    rsp,0x10
  001cc: movq   QWORD PTR [rsp],xmm3
  001d1: movq   QWORD PTR [rsp+0x8],xmm4
  001d7: mov    rdx,rdi
  001da: mov    QWORD PTR [rsp-0x40],rcx
  001df: mov    QWORD PTR [rsp-0x28],0x0
  001e8: lea    rcx,[r14-0x70]
  001ec: mov    r8,0x0
  001f3: mov    rsi,QWORD PTR [rbx]
  001f6: mov    QWORD PTR [rsp-0x18],rsi
  001fb: lea    rsi,[rsp-0x18]
  00200: mov    QWORD PTR [rbx],rsi
  00203: lea    r14,[rsp-0x10]
  00208: mov    QWORD PTR [rsp-0x20],r14
  0020d: call   0x37022
  00212: lea    r14,[rbp-0x8]
  00216: mov    QWORD PTR [rbx],r14
  00219: mov    r14,QWORD PTR [rbp-0x10]
  0021d: movq   xmm3,QWORD PTR [rsp]
  00222: movq   xmm4,QWORD PTR [rsp+0x8]
  00228: add    rsp,0x10
  0022c: test   rax,rax
  0022f: je     0x37054
:00010 
:00011 %6 = %2.call x()                     [Vec]
  00235: mov    rdi,QWORD PTR [r14-0x40]
  00239: test   rdi,0x7
  00240: jne    0x37063
  00246: cmp    DWORD PTR [rdi+0x4],0x2b
  0024a: jne    0x37063
  00250: cmp    DWORD PTR [rip+0xffffffffffff8955],0x26        # 0xffff8bac
  00257: jne    0x37063
  0025d: mov    esi,DWORD PTR [rip+0xc34]        # 0xe97
  00263: cmp    esi,0xffffffff
  00266: je     0x37072
  0026c: cmp    WORD PTR [rdi+0x2],0x3
  00271: jne    0x28a
  00277: cmp    esi,0x6
  0027a: jge    0x28a
  00280: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00285: jmp    0x2b4
  0028a: sub    rsp,0x10
  0028e: movq   QWORD PTR [rsp],xmm3
  00293: movq   QWORD PTR [rsp+0x8],xmm4
  00299: movabs rax,0x564559818b00
  002a3: call   rax
  002a5: movq   xmm3,QWORD PTR [rsp]
  002aa: movq   xmm4,QWORD PTR [rsp+0x8]
  002b0: add    rsp,0x10
  002b4: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %7 = dynvar(2, %4)
  002b8: mov    rax,QWORD PTR [r14-0x18]
  002bc: mov    rax,QWORD PTR [rax]
  002bf: mov    rax,QWORD PTR [rax-0x38]
  002c3: mov    QWORD PTR [r14-0x68],rax
:00014 %8 = dynvar(2, %4)
  002c7: mov    rax,QWORD PTR [r14-0x18]
  002cb: mov    rax,QWORD PTR [rax]
  002ce: mov    rax,QWORD PTR [rax-0x38]
  002d2: mov    QWORD PTR [r14-0x70],rax
:00015 %7 = %7 * %8                         [Float][Float]
  002d6: mov    rdi,QWORD PTR [r14-0x68]
  002da: test   rdi,0x1
  002e1: jne    0x370b9
  002e7: test   rdi,0x2
  002ee: je     0x32a
  002f4: xorps  xmm2,xmm2
  002f7: movabs rax,0x8000000000000002
  00301: cmp    rdi,rax
  00304: je     0x33c
  0030a: mov    rax,rdi
  0030d: sar    rax,0x3f
  00311: add    rax,0x2
  00315: and    rdi,0xfffffffffffffffc
  00319: or     rdi,rax
  0031c: rol    rdi,0x3d
  00320: movq   xmm2,rdi
  00325: jmp    0x33c
  0032a: call   0xffff4468
  0032f: test   rax,rax
  00332: je     0x370b9
  00338: movq   xmm2,xmm0
  0033c: mov    rdi,QWORD PTR [r14-0x70]
  00340: test   rdi,0x1
  00347: jne    0x370c8
  0034d: test   rdi,0x2
  00354: je     0x390
  0035a: xorps  xmm3,xmm3
  0035d: movabs rax,0x8000000000000002
  00367: cmp    rdi,rax
  0036a: je     0x3a2
  00370: mov    rax,rdi
  00373: sar    rax,0x3f
  00377: add    rax,0x2
  0037b: and    rdi,0xfffffffffffffffc
  0037f: or     rdi,rax
  00382: rol    rdi,0x3d
  00386: movq   xmm3,rdi
  0038b: jmp    0x3a2
  00390: call   0xffff4468
  00395: test   rax,rax
  00398: je     0x370c8
  0039e: movq   xmm3,xmm0
  003a2: mulsd  xmm2,xmm3
:00016 %3 = %6 / %7                         [Float][Float]
  003a6: mov    rdi,QWORD PTR [r14-0x60]
  003aa: test   rdi,0x1
  003b1: jne    0x370d7
  003b7: test   rdi,0x2
  003be: je     0x3fa
  003c4: xorps  xmm5,xmm5
  003c7: movabs rax,0x8000000000000002
  003d1: cmp    rdi,rax
  003d4: je     0x40c
  003da: mov    rax,rdi
  003dd: sar    rax,0x3f
  003e1: add    rax,0x2
  003e5: and    rdi,0xfffffffffffffffc
  003e9: or     rdi,rax
  003ec: rol    rdi,0x3d
  003f0: movq   xmm5,rdi
  003f5: jmp    0x40c
  003fa: call   0xffff4468
  003ff: test   rax,rax
  00402: je     0x370d7
  00408: movq   xmm5,xmm0
  0040c: movq   xmm6,xmm5
  00410: movq   rax,xmm2
  00415: test   rax,rax
  00418: je     0xffff4434
  0041e: divsd  xmm6,xmm2
:00017 %6 = %2.call y()                     [Vec]
  00422: movq   xmm0,xmm6
  00426: call   0xffff458c
  0042b: mov    QWORD PTR [r14-0x48],rax
  0042f: mov    rdi,QWORD PTR [r14-0x40]
  00433: test   rdi,0x7
  0043a: jne    0x370f3
  00440: cmp    DWORD PTR [rdi+0x4],0x2b
  00444: jne    0x370f3
  0044a: cmp    DWORD PTR [rip+0xffffffffffff875b],0x26        # 0xffff8bac
  00451: jne    0x370f3
  00457: mov    esi,DWORD PTR [rip+0xa42]        # 0xe9f
  0045d: cmp    esi,0xffffffff
  00460: je     0x3710f
  00466: cmp    WORD PTR [rdi+0x2],0x3
  0046b: jne    0x484
  00471: cmp    esi,0x6
  00474: jge    0x484
  0047a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0047f: jmp    0x4ba
  00484: sub    rsp,0x20
  00488: movq   QWORD PTR [rsp],xmm2
  0048d: movq   QWORD PTR [rsp+0x8],xmm3
  00493: movq   QWORD PTR [rsp+0x10],xmm4
  00499: movabs rax,0x564559818b00
  004a3: call   rax
  004a5: movq   xmm2,QWORD PTR [rsp]
  004aa: movq   xmm3,QWORD PTR [rsp+0x8]
  004b0: movq   xmm4,QWORD PTR [rsp+0x10]
  004b6: add    rsp,0x20
  004ba: mov    QWORD PTR [r14-0x60],rax
:00018 
:00019 %7 = dynvar(2, %4)
  004be: mov    rax,QWORD PTR [r14-0x18]
  004c2: mov    rax,QWORD PTR [rax]
  004c5: mov    rax,QWORD PTR [rax-0x38]
  004c9: mov    QWORD PTR [r14-0x68],rax
:00020 %8 = dynvar(2, %4)
  004cd: mov    rax,QWORD PTR [r14-0x18]
  004d1: mov    rax,QWORD PTR [rax]
  004d4: mov    rax,QWORD PTR [rax-0x38]
  004d8: mov    QWORD PTR [r14-0x70],rax
:00021 %7 = %7 * %8                         [Float][Float]
  004dc: mov    rdi,QWORD PTR [r14-0x68]
  004e0: test   rdi,0x1
  004e7: jne    0x37162
  004ed: test   rdi,0x2
  004f4: je     0x530
  004fa: xorps  xmm2,xmm2
  004fd: movabs rax,0x8000000000000002
  00507: cmp    rdi,rax
  0050a: je     0x542
  00510: mov    rax,rdi
  00513: sar    rax,0x3f
  00517: add    rax,0x2
  0051b: and    rdi,0xfffffffffffffffc
  0051f: or     rdi,rax
  00522: rol    rdi,0x3d
  00526: movq   xmm2,rdi
  0052b: jmp    0x542
  00530: call   0xffff4468
  00535: test   rax,rax
  00538: je     0x37162
  0053e: movq   xmm2,xmm0
  00542: mov    rdi,QWORD PTR [r14-0x70]
  00546: test   rdi,0x1
  0054d: jne    0x37171
  00553: test   rdi,0x2
  0055a: je     0x596
  00560: xorps  xmm3,xmm3
  00563: movabs rax,0x8000000000000002
  0056d: cmp    rdi,rax
  00570: je     0x5a8
  00576: mov    rax,rdi
  00579: sar    rax,0x3f
  0057d: add    rax,0x2
  00581: and    rdi,0xfffffffffffffffc
  00585: or     rdi,rax
  00588: rol    rdi,0x3d
  0058c: movq   xmm3,rdi
  00591: jmp    0x5a8
  00596: call   0xffff4468
  0059b: test   rax,rax
  0059e: je     0x37171
  005a4: movq   xmm3,xmm0
  005a8: mulsd  xmm2,xmm3
:00022 %4 = %6 / %7                         [Float][Float]
  005ac: mov    rdi,QWORD PTR [r14-0x60]
  005b0: test   rdi,0x1
  005b7: jne    0x37180
  005bd: test   rdi,0x2
  005c4: je     0x600
  005ca: xorps  xmm5,xmm5
  005cd: movabs rax,0x8000000000000002
  005d7: cmp    rdi,rax
  005da: je     0x612
  005e0: mov    rax,rdi
  005e3: sar    rax,0x3f
  005e7: add    rax,0x2
  005eb: and    rdi,0xfffffffffffffffc
  005ef: or     rdi,rax
  005f2: rol    rdi,0x3d
  005f6: movq   xmm5,rdi
  005fb: jmp    0x612
  00600: call   0xffff4468
  00605: test   rax,rax
  00608: je     0x37180
  0060e: movq   xmm5,xmm0
  00612: movq   xmm6,xmm5
  00616: movq   rax,xmm2
  0061b: test   rax,rax
  0061e: je     0xffff4434
  00624: divsd  xmm6,xmm2
:00023 %6 = %2.call z()                     [Vec]
  00628: movq   xmm0,xmm6
  0062c: call   0xffff458c
  00631: mov    QWORD PTR [r14-0x50],rax
  00635: mov    rdi,QWORD PTR [r14-0x40]
  00639: test   rdi,0x7
  00640: jne    0x3719c
  00646: cmp    DWORD PTR [rdi+0x4],0x2b
  0064a: jne    0x3719c
  00650: cmp    DWORD PTR [rip+0xffffffffffff8555],0x26        # 0xffff8bac
  00657: jne    0x3719c
  0065d: mov    esi,DWORD PTR [rip+0x844]        # 0xea7
  00663: cmp    esi,0xffffffff
  00666: je     0x371b8
  0066c: cmp    WORD PTR [rdi+0x2],0x3
  00671: jne    0x68a
  00677: cmp    esi,0x6
  0067a: jge    0x68a
  00680: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00685: jmp    0x6c0
  0068a: sub    rsp,0x20
  0068e: movq   QWORD PTR [rsp],xmm2
  00693: movq   QWORD PTR [rsp+0x8],xmm3
  00699: movq   QWORD PTR [rsp+0x10],xmm4
  0069f: movabs rax,0x564559818b00
  006a9: call   rax
  006ab: movq   xmm2,QWORD PTR [rsp]
  006b0: movq   xmm3,QWORD PTR [rsp+0x8]
  006b6: movq   xmm4,QWORD PTR [rsp+0x10]
  006bc: add    rsp,0x20
  006c0: mov    QWORD PTR [r14-0x60],rax
:00024 
:00025 %7 = dynvar(2, %4)
  006c4: mov    rax,QWORD PTR [r14-0x18]
  006c8: mov    rax,QWORD PTR [rax]
  006cb: mov    rax,QWORD PTR [rax-0x38]
  006cf: mov    QWORD PTR [r14-0x68],rax
:00026 %8 = dynvar(2, %4)
  006d3: mov    rax,QWORD PTR [r14-0x18]
  006d7: mov    rax,QWORD PTR [rax]
  006da: mov    rax,QWORD PTR [rax-0x38]
  006de: mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7 * %8                         [Float][Float]
  006e2: mov    rdi,QWORD PTR [r14-0x68]
  006e6: test   rdi,0x1
  006ed: jne    0x3720b
  006f3: test   rdi,0x2
  006fa: je     0x736
  00700: xorps  xmm2,xmm2
  00703: movabs rax,0x8000000000000002
  0070d: cmp    rdi,rax
  00710: je     0x748
  00716: mov    rax,rdi
  00719: sar    rax,0x3f
  0071d: add    rax,0x2
  00721: and    rdi,0xfffffffffffffffc
  00725: or     rdi,rax
  00728: rol    rdi,0x3d
  0072c: movq   xmm2,rdi
  00731: jmp    0x748
  00736: call   0xffff4468
  0073b: test   rax,rax
  0073e: je     0x3720b
  00744: movq   xmm2,xmm0
  00748: mov    rdi,QWORD PTR [r14-0x70]
  0074c: test   rdi,0x1
  00753: jne    0x3721a
  00759: test   rdi,0x2
  00760: je     0x79c
  00766: xorps  xmm3,xmm3
  00769: movabs rax,0x8000000000000002
  00773: cmp    rdi,rax
  00776: je     0x7ae
  0077c: mov    rax,rdi
  0077f: sar    rax,0x3f
  00783: add    rax,0x2
  00787: and    rdi,0xfffffffffffffffc
  0078b: or     rdi,rax
  0078e: rol    rdi,0x3d
  00792: movq   xmm3,rdi
  00797: jmp    0x7ae
  0079c: call   0xffff4468
  007a1: test   rax,rax
  007a4: je     0x3721a
  007aa: movq   xmm3,xmm0
  007ae: mulsd  xmm2,xmm3
:00028 %5 = %6 / %7                         [Float][Float]
  007b2: mov    rdi,QWORD PTR [r14-0x60]
  007b6: test   rdi,0x1
  007bd: jne    0x37229
  007c3: test   rdi,0x2
  007ca: je     0x806
  007d0: xorps  xmm5,xmm5
  007d3: movabs rax,0x8000000000000002
  007dd: cmp    rdi,rax
  007e0: je     0x818
  007e6: mov    rax,rdi
  007e9: sar    rax,0x3f
  007ed: add    rax,0x2
  007f1: and    rdi,0xfffffffffffffffc
  007f5: or     rdi,rax
  007f8: rol    rdi,0x3d
  007fc: movq   xmm5,rdi
  00801: jmp    0x818
  00806: call   0xffff4468
  0080b: test   rax,rax
  0080e: je     0x37229
  00814: movq   xmm5,xmm0
  00818: movq   xmm6,xmm5
  0081c: movq   rax,xmm2
  00821: test   rax,rax
  00824: je     0xffff4434
  0082a: divsd  xmm6,xmm2
:00029 %6 = %4
  0082e: mov    rax,QWORD PTR [r14-0x50]
  00832: mov    QWORD PTR [r14-0x60],rax
:00030 %6 = %0.call clamp(%6; 1)            [Scene]
  00836: movq   xmm0,xmm6
  0083a: call   0xffff458c
  0083f: mov    QWORD PTR [r14-0x58],rax
  00843: mov    rdi,QWORD PTR [r14-0x30]
  00847: cmp    DWORD PTR [rip+0xffffffffffff835e],0x26        # 0xffff8bac
  0084e: jne    0x37245
  00854: sub    rsp,0x20
  00858: movq   QWORD PTR [rsp],xmm2
  0085d: movq   QWORD PTR [rsp+0x8],xmm3
  00863: movq   QWORD PTR [rsp+0x10],xmm4
  00869: cmp    DWORD PTR [rip+0xffffffffffff8340],0x0        # 0xffff8bb0
  00870: jne    0x37261
  00876: mov    QWORD PTR [rsp-0x28],0x0
  0087f: mov    rax,QWORD PTR [r14-0x30]
  00883: mov    QWORD PTR [rsp-0x40],rax
  00888: mov    rdi,0x1
  0088f: mov    rax,QWORD PTR [r14-0x60]
  00893: mov    QWORD PTR [rsp-0x48],rax
  00898: mov    QWORD PTR [rsp-0x38],0x0
  008a1: movabs rax,0x1000400000057
  008ab: mov    QWORD PTR [rsp-0x30],rax
  008b0: movabs r13,0x564559e86360
  008ba: mov    rsi,QWORD PTR [rbx]
  008bd: mov    QWORD PTR [rsp-0x18],rsi
  008c2: lea    rsi,[rsp-0x18]
  008c7: mov    QWORD PTR [rbx],rsi
  008ca: lea    r14,[rsp-0x10]
  008cf: mov    QWORD PTR [rsp-0x20],r14
  008d4: call   0xffffbc0b
  008d9: lea    r14,[rbp-0x8]
  008dd: mov    QWORD PTR [rbx],r14
  008e0: mov    r14,QWORD PTR [rbp-0x10]
  008e4: movq   xmm2,QWORD PTR [rsp]
  008e9: movq   xmm3,QWORD PTR [rsp+0x8]
  008ef: movq   xmm4,QWORD PTR [rsp+0x10]
  008f5: add    rsp,0x20
  008f9: test   rax,rax
  008fc: je     0x37278
  00902: mov    QWORD PTR [r14-0x60],rax
:00031 
:00032 %6 = %6.call chr()                   [Integer]
  00906: mov    rdi,QWORD PTR [r14-0x60]
  0090a: test   rdi,0x1
  00911: je     0x37287
  00917: cmp    DWORD PTR [rip+0xffffffffffff828e],0x26        # 0xffff8bac
  0091e: jne    0x37287
  00924: mov    r9,0x0
  0092b: sub    rsp,0x20
  0092f: movq   QWORD PTR [rsp],xmm2
  00934: movq   QWORD PTR [rsp+0x8],xmm3
  0093a: movq   QWORD PTR [rsp+0x10],xmm4
  00940: mov    rdx,rdi
  00943: mov    QWORD PTR [rsp-0x40],rcx
  00948: mov    QWORD PTR [rsp-0x28],0x0
  00951: lea    rcx,[r14-0x68]
  00955: mov    r8,0x0
  0095c: mov    rsi,QWORD PTR [rbx]
  0095f: mov    QWORD PTR [rsp-0x18],rsi
  00964: lea    rsi,[rsp-0x18]
  00969: mov    QWORD PTR [rbx],rsi
  0096c: lea    r14,[rsp-0x10]
  00971: mov    QWORD PTR [rsp-0x20],r14
  00976: call   0x372a3
  0097b: lea    r14,[rbp-0x8]
  0097f: mov    QWORD PTR [rbx],r14
  00982: mov    r14,QWORD PTR [rbp-0x10]
  00986: movq   xmm2,QWORD PTR [rsp]
  0098b: movq   xmm3,QWORD PTR [rsp+0x8]
  00991: movq   xmm4,QWORD PTR [rsp+0x10]
  00997: add    rsp,0x20
  0099b: test   rax,rax
  0099e: je     0x372d5
  009a4: mov    QWORD PTR [r14-0x60],rax
:00033 
:00034 _ = %0.call print(%6; 1)             [Scene]
  009a8: mov    rdi,QWORD PTR [r14-0x30]
  009ac: cmp    DWORD PTR [rip+0xffffffffffff81f9],0x26        # 0xffff8bac
  009b3: jne    0x372e4
  009b9: mov    r9,0x0
  009c0: sub    rsp,0x20
  009c4: movq   QWORD PTR [rsp],xmm2
  009c9: movq   QWORD PTR [rsp+0x8],xmm3
  009cf: movq   QWORD PTR [rsp+0x10],xmm4
  009d5: mov    rdx,rdi
  009d8: mov    QWORD PTR [rsp-0x40],rcx
  009dd: mov    QWORD PTR [rsp-0x28],0x0
  009e6: lea    rcx,[r14-0x60]
  009ea: mov    r8,0x1
  009f1: mov    rsi,QWORD PTR [rbx]
  009f4: mov    QWORD PTR [rsp-0x18],rsi
  009f9: lea    rsi,[rsp-0x18]
  009fe: mov    QWORD PTR [rbx],rsi
  00a01: lea    r14,[rsp-0x10]
  00a06: mov    QWORD PTR [rsp-0x20],r14
  00a0b: call   0x37300
  00a10: lea    r14,[rbp-0x8]
  00a14: mov    QWORD PTR [rbx],r14
  00a17: mov    r14,QWORD PTR [rbp-0x10]
  00a1b: movq   xmm2,QWORD PTR [rsp]
  00a20: movq   xmm3,QWORD PTR [rsp+0x8]
  00a26: movq   xmm4,QWORD PTR [rsp+0x10]
  00a2c: add    rsp,0x20
  00a30: test   rax,rax
  00a33: je     0x37332
:00035 
:00036 %6 = %3
  00a39: mov    rax,QWORD PTR [r14-0x48]
  00a3d: mov    QWORD PTR [r14-0x60],rax
:00037 %6 = %0.call clamp(%6; 1)            [Scene]
  00a41: mov    rdi,QWORD PTR [r14-0x30]
  00a45: cmp    DWORD PTR [rip+0xffffffffffff8160],0x26        # 0xffff8bac
  00a4c: jne    0x37341
  00a52: sub    rsp,0x20
  00a56: movq   QWORD PTR [rsp],xmm2
  00a5b: movq   QWORD PTR [rsp+0x8],xmm3
  00a61: movq   QWORD PTR [rsp+0x10],xmm4
  00a67: cmp    DWORD PTR [rip+0xffffffffffff8142],0x0        # 0xffff8bb0
  00a6e: jne    0x3735d
  00a74: mov    QWORD PTR [rsp-0x28],0x0
  00a7d: mov    rax,QWORD PTR [r14-0x30]
  00a81: mov    QWORD PTR [rsp-0x40],rax
  00a86: mov    rdi,0x1
  00a8d: mov    rax,QWORD PTR [r14-0x60]
  00a91: mov    QWORD PTR [rsp-0x48],rax
  00a96: mov    QWORD PTR [rsp-0x38],0x0
  00a9f: movabs rax,0x1000400000057
  00aa9: mov    QWORD PTR [rsp-0x30],rax
  00aae: movabs r13,0x564559e86360
  00ab8: mov    rsi,QWORD PTR [rbx]
  00abb: mov    QWORD PTR [rsp-0x18],rsi
  00ac0: lea    rsi,[rsp-0x18]
  00ac5: mov    QWORD PTR [rbx],rsi
  00ac8: lea    r14,[rsp-0x10]
  00acd: mov    QWORD PTR [rsp-0x20],r14
  00ad2: call   0xffffbc0b
  00ad7: lea    r14,[rbp-0x8]
  00adb: mov    QWORD PTR [rbx],r14
  00ade: mov    r14,QWORD PTR [rbp-0x10]
  00ae2: movq   xmm2,QWORD PTR [rsp]
  00ae7: movq   xmm3,QWORD PTR [rsp+0x8]
  00aed: movq   xmm4,QWORD PTR [rsp+0x10]
  00af3: add    rsp,0x20
  00af7: test   rax,rax
  00afa: je     0x37374
  00b00: mov    QWORD PTR [r14-0x60],rax
:00038 
:00039 %6 = %6.call chr()                   [Integer]
  00b04: mov    rdi,QWORD PTR [r14-0x60]
  00b08: test   rdi,0x1
  00b0f: je     0x37383
  00b15: cmp    DWORD PTR [rip+0xffffffffffff8090],0x26        # 0xffff8bac
  00b1c: jne    0x37383
  00b22: mov    r9,0x0
  00b29: sub    rsp,0x20
  00b2d: movq   QWORD PTR [rsp],xmm2
  00b32: movq   QWORD PTR [rsp+0x8],xmm3
  00b38: movq   QWORD PTR [rsp+0x10],xmm4
  00b3e: mov    rdx,rdi
  00b41: mov    QWORD PTR [rsp-0x40],rcx
  00b46: mov    QWORD PTR [rsp-0x28],0x0
  00b4f: lea    rcx,[r14-0x68]
  00b53: mov    r8,0x0
  00b5a: mov    rsi,QWORD PTR [rbx]
  00b5d: mov    QWORD PTR [rsp-0x18],rsi
  00b62: lea    rsi,[rsp-0x18]
  00b67: mov    QWORD PTR [rbx],rsi
  00b6a: lea    r14,[rsp-0x10]
  00b6f: mov    QWORD PTR [rsp-0x20],r14
  00b74: call   0x3739f
  00b79: lea    r14,[rbp-0x8]
  00b7d: mov    QWORD PTR [rbx],r14
  00b80: mov    r14,QWORD PTR [rbp-0x10]
  00b84: movq   xmm2,QWORD PTR [rsp]
  00b89: movq   xmm3,QWORD PTR [rsp+0x8]
  00b8f: movq   xmm4,QWORD PTR [rsp+0x10]
  00b95: add    rsp,0x20
  00b99: test   rax,rax
  00b9c: je     0x373d1
  00ba2: mov    QWORD PTR [r14-0x60],rax
:00040 
:00041 _ = %0.call print(%6; 1)             [Scene]
  00ba6: mov    rdi,QWORD PTR [r14-0x30]
  00baa: cmp    DWORD PTR [rip+0xffffffffffff7ffb],0x26        # 0xffff8bac
  00bb1: jne    0x373e0
  00bb7: mov    r9,0x0
  00bbe: sub    rsp,0x20
  00bc2: movq   QWORD PTR [rsp],xmm2
  00bc7: movq   QWORD PTR [rsp+0x8],xmm3
  00bcd: movq   QWORD PTR [rsp+0x10],xmm4
  00bd3: mov    rdx,rdi
  00bd6: mov    QWORD PTR [rsp-0x40],rcx
  00bdb: mov    QWORD PTR [rsp-0x28],0x0
  00be4: lea    rcx,[r14-0x60]
  00be8: mov    r8,0x1
  00bef: mov    rsi,QWORD PTR [rbx]
  00bf2: mov    QWORD PTR [rsp-0x18],rsi
  00bf7: lea    rsi,[rsp-0x18]
  00bfc: mov    QWORD PTR [rbx],rsi
  00bff: lea    r14,[rsp-0x10]
  00c04: mov    QWORD PTR [rsp-0x20],r14
  00c09: call   0x373fc
  00c0e: lea    r14,[rbp-0x8]
  00c12: mov    QWORD PTR [rbx],r14
  00c15: mov    r14,QWORD PTR [rbp-0x10]
  00c19: movq   xmm2,QWORD PTR [rsp]
  00c1e: movq   xmm3,QWORD PTR [rsp+0x8]
  00c24: movq   xmm4,QWORD PTR [rsp+0x10]
  00c2a: add    rsp,0x20
  00c2e: test   rax,rax
  00c31: je     0x3742e
:00042 
:00043 %6 = %5
  00c37: mov    rax,QWORD PTR [r14-0x58]
  00c3b: mov    QWORD PTR [r14-0x60],rax
:00044 %6 = %0.call clamp(%6; 1)            [Scene]
  00c3f: mov    rdi,QWORD PTR [r14-0x30]
  00c43: cmp    DWORD PTR [rip+0xffffffffffff7f62],0x26        # 0xffff8bac
  00c4a: jne    0x3743d
  00c50: sub    rsp,0x20
  00c54: movq   QWORD PTR [rsp],xmm2
  00c59: movq   QWORD PTR [rsp+0x8],xmm3
  00c5f: movq   QWORD PTR [rsp+0x10],xmm4
  00c65: cmp    DWORD PTR [rip+0xffffffffffff7f44],0x0        # 0xffff8bb0
  00c6c: jne    0x37459
  00c72: mov    QWORD PTR [rsp-0x28],0x0
  00c7b: mov    rax,QWORD PTR [r14-0x30]
  00c7f: mov    QWORD PTR [rsp-0x40],rax
  00c84: mov    rdi,0x1
  00c8b: mov    rax,QWORD PTR [r14-0x60]
  00c8f: mov    QWORD PTR [rsp-0x48],rax
  00c94: mov    QWORD PTR [rsp-0x38],0x0
  00c9d: movabs rax,0x1000400000057
  00ca7: mov    QWORD PTR [rsp-0x30],rax
  00cac: movabs r13,0x564559e86360
  00cb6: mov    rsi,QWORD PTR [rbx]
  00cb9: mov    QWORD PTR [rsp-0x18],rsi
  00cbe: lea    rsi,[rsp-0x18]
  00cc3: mov    QWORD PTR [rbx],rsi
  00cc6: lea    r14,[rsp-0x10]
  00ccb: mov    QWORD PTR [rsp-0x20],r14
  00cd0: call   0xffffbc0b
  00cd5: lea    r14,[rbp-0x8]
  00cd9: mov    QWORD PTR [rbx],r14
  00cdc: mov    r14,QWORD PTR [rbp-0x10]
  00ce0: movq   xmm2,QWORD PTR [rsp]
  00ce5: movq   xmm3,QWORD PTR [rsp+0x8]
  00ceb: movq   xmm4,QWORD PTR [rsp+0x10]
  00cf1: add    rsp,0x20
  00cf5: test   rax,rax
  00cf8: je     0x37470
  00cfe: mov    QWORD PTR [r14-0x60],rax
:00045 
:00046 %6 = %6.call chr()                   [Integer]
  00d02: mov    rdi,QWORD PTR [r14-0x60]
  00d06: test   rdi,0x1
  00d0d: je     0x3747f
  00d13: cmp    DWORD PTR [rip+0xffffffffffff7e92],0x26        # 0xffff8bac
  00d1a: jne    0x3747f
  00d20: mov    r9,0x0
  00d27: sub    rsp,0x20
  00d2b: movq   QWORD PTR [rsp],xmm2
  00d30: movq   QWORD PTR [rsp+0x8],xmm3
  00d36: movq   QWORD PTR [rsp+0x10],xmm4
  00d3c: mov    rdx,rdi
  00d3f: mov    QWORD PTR [rsp-0x40],rcx
  00d44: mov    QWORD PTR [rsp-0x28],0x0
  00d4d: lea    rcx,[r14-0x68]
  00d51: mov    r8,0x0
  00d58: mov    rsi,QWORD PTR [rbx]
  00d5b: mov    QWORD PTR [rsp-0x18],rsi
  00d60: lea    rsi,[rsp-0x18]
  00d65: mov    QWORD PTR [rbx],rsi
  00d68: lea    r14,[rsp-0x10]
  00d6d: mov    QWORD PTR [rsp-0x20],r14
  00d72: call   0x3749b
  00d77: lea    r14,[rbp-0x8]
  00d7b: mov    QWORD PTR [rbx],r14
  00d7e: mov    r14,QWORD PTR [rbp-0x10]
  00d82: movq   xmm2,QWORD PTR [rsp]
  00d87: movq   xmm3,QWORD PTR [rsp+0x8]
  00d8d: movq   xmm4,QWORD PTR [rsp+0x10]
  00d93: add    rsp,0x20
  00d97: test   rax,rax
  00d9a: je     0x374cd
  00da0: mov    QWORD PTR [r14-0x60],rax
:00047 
:00048 %6 = %0.call print(%6; 1)            [Scene]
  00da4: mov    rdi,QWORD PTR [r14-0x30]
  00da8: cmp    DWORD PTR [rip+0xffffffffffff7dfd],0x26        # 0xffff8bac
  00daf: jne    0x374dc
  00db5: mov    r9,0x0
  00dbc: sub    rsp,0x20
  00dc0: movq   QWORD PTR [rsp],xmm2
  00dc5: movq   QWORD PTR [rsp+0x8],xmm3
  00dcb: movq   QWORD PTR [rsp+0x10],xmm4
  00dd1: mov    rdx,rdi
  00dd4: mov    QWORD PTR [rsp-0x40],rcx
  00dd9: mov    QWORD PTR [rsp-0x28],0x0
  00de2: lea    rcx,[r14-0x60]
  00de6: mov    r8,0x1
  00ded: mov    rsi,QWORD PTR [rbx]
  00df0: mov    QWORD PTR [rsp-0x18],rsi
  00df5: lea    rsi,[rsp-0x18]
  00dfa: mov    QWORD PTR [rbx],rsi
  00dfd: lea    r14,[rsp-0x10]
  00e02: mov    QWORD PTR [rsp-0x20],r14
  00e07: call   0x374f8
  00e0c: lea    r14,[rbp-0x8]
  00e10: mov    QWORD PTR [rbx],r14
  00e13: mov    r14,QWORD PTR [rbp-0x10]
  00e17: movq   xmm2,QWORD PTR [rsp]
  00e1c: movq   xmm3,QWORD PTR [rsp+0x8]
  00e22: movq   xmm4,QWORD PTR [rsp+0x10]
  00e28: add    rsp,0x20
  00e2c: test   rax,rax
  00e2f: je     0x3752a
  00e35: mov    QWORD PTR [r14-0x60],rax
:00049 
:00050 ret %6
  00e39: mov    rax,QWORD PTR [r14-0x60]
  00e3d: leave  
  00e3e: ret    
==> start whole compile: <unnamed> FuncId(107) self_class:Scene start:[00000] bytecode:0x564559e85480
<== finished compile. elapsed:17.3µs
offset:Pos(51904) code: 251 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x3669d
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x3669d
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x20]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7143425]
  00071: mov    rax,0xda0003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 _ = %2.call times(&%3)               [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x366ac
  0008d: cmp    DWORD PTR [rip+0xffffffffffff7c6d],0x26        # 0xffff7d01
  00094: jne    0x366ac
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x366bb
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: test   rax,rax
  000e7: je     0x366ed
:00004 
:00005 %2 = nil
  000ed: mov    QWORD PTR [r14-0x40],0x4
:00006 ret %2
  000f5: mov    rax,QWORD PTR [r14-0x40]
  000f9: leave  
  000fa: ret    
==> start whole compile: <unnamed> FuncId(108) self_class:Scene start:[00000] bytecode:0x564559e9b0d0
<== finished compile. elapsed:114.6µs
offset:Pos(53187) code: 8087 bytes  data: 414 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [r14-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x36208
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x35
  000a7:    	jne    0x36208
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff7746],0x26        # 0xffff77fe
  000b8:    	jne    0x36217
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0x98]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x36226
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e:    	test   rax,rax
  00111:    	je     0x36258
  00117: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00003 %2 = %13
  0011e: ff 	mov    rax,QWORD PTR [r14-0x98]
  00125:    	mov    QWORD PTR [r14-0x40],rax
:00004 %13 = literal[2.0]
  00129: 00 	movq   xmm2,QWORD PTR [rip+0x1e6c]        # 0x1f9d
  00131: 00 	mov    rax,0x2
  00138: ff 	mov    QWORD PTR [r14-0x98],rax
:00005 %14 = literal[3.14159265]
  0013f: 00 	movq   xmm3,QWORD PTR [rip+0x1e66]        # 0x1fad
  00147: da 	movabs rax,0x490fda9e46a78a
  00151: ff 	mov    QWORD PTR [r14-0xa0],rax
:00006 %13 = %13 * %14                      [Float][Float]
  00158:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
  0015c:    	mov    rdi,QWORD PTR [r14-0x30]
  00160: 26 	cmp    DWORD PTR [rip+0xffffffffffff7697],0x26        # 0xffff77fe
  00167:    	jne    0x36267
  0016d: 00 	mov    r9,0x0
  00174:    	sub    rsp,0x10
  00178:    	movq   QWORD PTR [rsp],xmm2
  0017d:    	mov    rdx,rdi
  00180:    	mov    QWORD PTR [rsp-0x40],rcx
  00185: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0018e: ff 	lea    rcx,[r14-0xa0]
  00195: 00 	mov    r8,0x0
  0019c:    	mov    rsi,QWORD PTR [rbx]
  0019f:    	mov    QWORD PTR [rsp-0x18],rsi
  001a4:    	lea    rsi,[rsp-0x18]
  001a9:    	mov    QWORD PTR [rbx],rsi
  001ac:    	lea    r14,[rsp-0x10]
  001b1:    	mov    QWORD PTR [rsp-0x20],r14
  001b6:    	call   0x36286
  001bb:    	lea    r14,[rbp-0x8]
  001bf:    	mov    QWORD PTR [rbx],r14
  001c2:    	mov    r14,QWORD PTR [rbp-0x10]
  001c6:    	movq   xmm2,QWORD PTR [rsp]
  001cb:    	add    rsp,0x10
  001cf:    	test   rax,rax
  001d2:    	je     0x362b8
  001d8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 
:00009 %3 = %13 * %14                       [Float][Float]
  001df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001e6: 00 	test   rdi,0x1
  001ed:    	jne    0x362c7
  001f3: 00 	test   rdi,0x2
  001fa:    	je     0x236
  00200:    	xorps  xmm3,xmm3
  00203: 00 	movabs rax,0x8000000000000002
  0020d:    	cmp    rdi,rax
  00210:    	je     0x248
  00216:    	mov    rax,rdi
  00219:    	sar    rax,0x3f
  0021d:    	add    rax,0x2
  00221:    	and    rdi,0xfffffffffffffffc
  00225:    	or     rdi,rax
  00228:    	rol    rdi,0x3d
  0022c:    	movq   xmm3,rdi
  00231:    	jmp    0x248
  00236:    	call   0xffff30ba
  0023b:    	test   rax,rax
  0023e:    	je     0x362c7
  00244:    	movq   xmm3,xmm0
  00248:    	movq   xmm4,xmm2
  0024c:    	mulsd  xmm4,xmm3
:00010 %13 = const[Math]                    [Math]
  00250: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff75b6]        # 0xffff780d
  00257: 00 	cmp    rax,QWORD PTR [rip+0x1d6f]        # 0x1fcd
  0025e:    	jne    0x362e6
  00264: 00 	mov    rax,QWORD PTR [rip+0x1d52]        # 0x1fbd
  0026b: ff 	mov    QWORD PTR [r14-0x98],rax
:00011 %14 = %3
:00012 %13 = %13.inline MathCos(%14; 1)     [#<Class:Math>]
  00272: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00279: 00 	test   rdi,0x7
  00280:    	jne    0x3634f
  00286:    	cmp    DWORD PTR [rdi+0x4],0x24
  0028a:    	jne    0x3634f
  00290: 26 	cmp    DWORD PTR [rip+0xffffffffffff7567],0x26        # 0xffff77fe
  00297:    	jne    0x3634f
  0029d:    	sub    rsp,0x10
  002a1:    	movq   QWORD PTR [rsp],xmm2
  002a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  002ac:    	movq   xmm0,xmm4
  002b0: 45 	movabs rax,0x5645597ea650
  002ba:    	call   rax
  002bc:    	movq   xmm2,QWORD PTR [rsp]
  002c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002c7:    	add    rsp,0x10
  002cb:    	movq   xmm2,xmm0
:00013 
:00014 %14 = const[Math]                    [Math]
  002cf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7537]        # 0xffff780d
  002d6: 00 	cmp    rax,QWORD PTR [rip+0x1d10]        # 0x1fed
  002dd:    	jne    0x36372
  002e3: 00 	mov    rax,QWORD PTR [rip+0x1cf3]        # 0x1fdd
  002ea: ff 	mov    QWORD PTR [r14-0xa0],rax
:00015 %15 = literal[1.0]
  002f1: 00 	movq   xmm3,QWORD PTR [rip+0x1d04]        # 0x1ffd
  002f9: 00 	movabs rax,0xff80000000000002
  00303: ff 	mov    QWORD PTR [r14-0xa8],rax
:00016 %15 = %15 - %2                       [Float][Float]
  0030a:    	mov    rdi,QWORD PTR [r14-0x40]
  0030e: 00 	test   rdi,0x1
  00315:    	jne    0x363db
  0031b: 00 	test   rdi,0x2
  00322:    	je     0x35e
  00328:    	xorps  xmm5,xmm5
  0032b: 00 	movabs rax,0x8000000000000002
  00335:    	cmp    rdi,rax
  00338:    	je     0x370
  0033e:    	mov    rax,rdi
  00341:    	sar    rax,0x3f
  00345:    	add    rax,0x2
  00349:    	and    rdi,0xfffffffffffffffc
  0034d:    	or     rdi,rax
  00350:    	rol    rdi,0x3d
  00354:    	movq   xmm5,rdi
  00359:    	jmp    0x370
  0035e:    	call   0xffff30ba
  00363:    	test   rax,rax
  00366:    	je     0x363db
  0036c:    	movq   xmm5,xmm0
  00370:    	subsd  xmm3,xmm5
:00017 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  00374: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0037b: 00 	test   rdi,0x7
  00382:    	jne    0x36407
  00388:    	cmp    DWORD PTR [rdi+0x4],0x24
  0038c:    	jne    0x36407
  00392: 26 	cmp    DWORD PTR [rip+0xffffffffffff7465],0x26        # 0xffff77fe
  00399:    	jne    0x36407
  0039f:    	sqrtsd xmm6,xmm3
:00018 
:00019 %4 = %13 * %14                       [Float][Float]
  003a3:    	movq   xmm7,xmm2
  003a7:    	mulsd  xmm7,xmm6
:00020 %13 = const[Math]                    [Math]
  003ab: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff745b]        # 0xffff780d
  003b2: 00 	cmp    rax,QWORD PTR [rip+0x1c64]        # 0x201d
  003b9:    	jne    0x36443
  003bf: 00 	mov    rax,QWORD PTR [rip+0x1c47]        # 0x200d
  003c6: ff 	mov    QWORD PTR [r14-0x98],rax
:00021 %14 = %3
:00022 %13 = %13.inline MathSin(%14; 1)     [#<Class:Math>]
  003cd: ff 	mov    rdi,QWORD PTR [r14-0x98]
  003d4: 00 	test   rdi,0x7
  003db:    	jne    0x364d0
  003e1:    	cmp    DWORD PTR [rdi+0x4],0x24
  003e5:    	jne    0x364d0
  003eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff740c],0x26        # 0xffff77fe
  003f2:    	jne    0x364d0
  003f8:    	sub    rsp,0x30
  003fc:    	movq   QWORD PTR [rsp],xmm2
  00401:    	movq   QWORD PTR [rsp+0x8],xmm3
  00407:    	movq   QWORD PTR [rsp+0x10],xmm4
  0040d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00413:    	movq   QWORD PTR [rsp+0x20],xmm7
  00419:    	movq   xmm0,xmm4
  0041d: 45 	movabs rax,0x5645597ea660
  00427:    	call   rax
  00429:    	movq   xmm2,QWORD PTR [rsp]
  0042e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00434:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0043a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00440:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00446:    	add    rsp,0x30
  0044a:    	movq   xmm2,xmm0
:00023 
:00024 %14 = const[Math]                    [Math]
  0044e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff73b8]        # 0xffff780d
  00455: 00 	cmp    rax,QWORD PTR [rip+0x1be1]        # 0x203d
  0045c:    	jne    0x36510
  00462: 00 	mov    rax,QWORD PTR [rip+0x1bc4]        # 0x202d
  00469: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = literal[1.0]
  00470: 00 	movq   xmm3,QWORD PTR [rip+0x1bd5]        # 0x204d
  00478: 00 	movabs rax,0xff80000000000002
  00482: ff 	mov    QWORD PTR [r14-0xa8],rax
:00026 %15 = %15 - %2                       [Float][Float]
  00489:    	subsd  xmm3,xmm5
:00027 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  0048d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00494: 00 	test   rdi,0x7
  0049b:    	jne    0x3659d
  004a1:    	cmp    DWORD PTR [rdi+0x4],0x24
  004a5:    	jne    0x3659d
  004ab: 26 	cmp    DWORD PTR [rip+0xffffffffffff734c],0x26        # 0xffff77fe
  004b2:    	jne    0x3659d
  004b8:    	sqrtsd xmm6,xmm3
:00028 
:00029 %5 = %13 * %14                       [Float][Float]
  004bc:    	movq   xmm8,xmm2
  004c1:    	mulsd  xmm8,xmm6
:00030 %13 = const[Math]                    [Math]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7340]        # 0xffff780d
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1b99]        # 0x206d
  004d4:    	jne    0x365e6
  004da: 00 	mov    rax,QWORD PTR [rip+0x1b7c]        # 0x205d
  004e1: ff 	mov    QWORD PTR [r14-0x98],rax
:00031 %14 = %2
:00032 %6 = %13.inline MathSqrt(%14; 1)     [#<Class:Math>]
  004e8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  004ef: 00 	test   rdi,0x7
  004f6:    	jne    0x36681
  004fc:    	cmp    DWORD PTR [rdi+0x4],0x24
  00500:    	jne    0x36681
  00506: 26 	cmp    DWORD PTR [rip+0xffffffffffff72f1],0x26        # 0xffff77fe
  0050d:    	jne    0x36681
  00513:    	sqrtsd xmm2,xmm5
:00033 
:00034 %13 = dynvar(2, %2)
  00517:    	mov    rax,QWORD PTR [r14-0x18]
  0051b:    	mov    rax,QWORD PTR [rax]
  0051e:    	mov    rax,QWORD PTR [rax-0x28]
  00522: ff 	mov    QWORD PTR [r14-0x98],rax
:00035 %14 = 0: i32
  00529: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00036 %13 = %13.[%14]                      [Array][Integer]
  00534: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0053b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00542: 00 	test   rdi,0x7
  00549:    	jne    0x366d8
  0054f:    	cmp    DWORD PTR [rdi+0x4],0xb
  00553:    	jne    0x366d8
  00559: 00 	test   rsi,0x1
  00560:    	je     0x366d8
  00566:    	sar    rsi,1
  00569:    	sub    rsp,0x30
  0056d:    	movq   QWORD PTR [rsp],xmm2
  00572:    	movq   QWORD PTR [rsp+0x8],xmm3
  00578:    	movq   QWORD PTR [rsp+0x10],xmm4
  0057e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00584:    	movq   QWORD PTR [rsp+0x20],xmm7
  0058a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00591: 45 	movabs rax,0x5645597e4900
  0059b:    	call   rax
  0059d:    	movq   xmm2,QWORD PTR [rsp]
  005a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ba: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005c1:    	add    rsp,0x30
  005c5:    	test   rax,rax
  005c8:    	je     0x3672c
  005ce: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %13 = %13.call x()                   [Vec]
  005d5:    	movq   xmm0,xmm2
  005d9:    	call   0xffff31de
  005de:    	mov    QWORD PTR [r14-0x60],rax
  005e2:    	movq   xmm0,xmm4
  005e6:    	call   0xffff31de
  005eb:    	mov    QWORD PTR [r14-0x48],rax
  005ef:    	movq   xmm0,xmm7
  005f3:    	call   0xffff31de
  005f8:    	mov    QWORD PTR [r14-0x50],rax
  005fc:    	movq   xmm0,xmm8
  00601:    	call   0xffff31de
  00606:    	mov    QWORD PTR [r14-0x58],rax
  0060a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00611: 00 	test   rdi,0x7
  00618:    	jne    0x3673b
  0061e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00622:    	jne    0x3673b
  00628: 26 	cmp    DWORD PTR [rip+0xffffffffffff71cf],0x26        # 0xffff77fe
  0062f:    	jne    0x3673b
  00635:    	mov    esi,DWORD PTR [rip+0x1a3e]        # 0x2079
  0063b:    	cmp    esi,0xffffffff
  0063e:    	je     0x3675a
  00644:    	cmp    WORD PTR [rdi+0x2],0x3
  00649:    	jne    0x662
  0064f:    	cmp    esi,0x6
  00652:    	jge    0x662
  00658:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065d:    	jmp    0x680
  00662:    	sub    rsp,0x10
  00666:    	movq   QWORD PTR [rsp],xmm3
  0066b: 45 	movabs rax,0x564559818b00
  00675:    	call   rax
  00677:    	movq   xmm3,QWORD PTR [rsp]
  0067c:    	add    rsp,0x10
  00680: ff 	mov    QWORD PTR [r14-0x98],rax
:00038 
:00039 %13 = %4 * %13                       [Float][Float]
  00687:    	mov    rdi,QWORD PTR [r14-0x50]
  0068b: 00 	test   rdi,0x1
  00692:    	jne    0x36795
  00698: 00 	test   rdi,0x2
  0069f:    	je     0x6db
  006a5:    	xorps  xmm2,xmm2
  006a8: 00 	movabs rax,0x8000000000000002
  006b2:    	cmp    rdi,rax
  006b5:    	je     0x6ed
  006bb:    	mov    rax,rdi
  006be:    	sar    rax,0x3f
  006c2:    	add    rax,0x2
  006c6:    	and    rdi,0xfffffffffffffffc
  006ca:    	or     rdi,rax
  006cd:    	rol    rdi,0x3d
  006d1:    	movq   xmm2,rdi
  006d6:    	jmp    0x6ed
  006db:    	call   0xffff30ba
  006e0:    	test   rax,rax
  006e3:    	je     0x36795
  006e9:    	movq   xmm2,xmm0
  006ed: ff 	mov    rdi,QWORD PTR [r14-0x98]
  006f4: 00 	test   rdi,0x1
  006fb:    	jne    0x367b4
  00701: 00 	test   rdi,0x2
  00708:    	je     0x744
  0070e:    	xorps  xmm4,xmm4
  00711: 00 	movabs rax,0x8000000000000002
  0071b:    	cmp    rdi,rax
  0071e:    	je     0x756
  00724:    	mov    rax,rdi
  00727:    	sar    rax,0x3f
  0072b:    	add    rax,0x2
  0072f:    	and    rdi,0xfffffffffffffffc
  00733:    	or     rdi,rax
  00736:    	rol    rdi,0x3d
  0073a:    	movq   xmm4,rdi
  0073f:    	jmp    0x756
  00744:    	call   0xffff30ba
  00749:    	test   rax,rax
  0074c:    	je     0x367b4
  00752:    	movq   xmm4,xmm0
  00756:    	mulsd  xmm4,xmm2
:00040 %14 = dynvar(2, %2)
  0075a:    	mov    rax,QWORD PTR [r14-0x18]
  0075e:    	mov    rax,QWORD PTR [rax]
  00761:    	mov    rax,QWORD PTR [rax-0x28]
  00765: ff 	mov    QWORD PTR [r14-0xa0],rax
:00041 %15 = 1: i32
  0076c: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00042 %14 = %14.[%15]                      [Array][Integer]
  00777: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0077e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00785: 00 	test   rdi,0x7
  0078c:    	jne    0x367d3
  00792:    	cmp    DWORD PTR [rdi+0x4],0xb
  00796:    	jne    0x367d3
  0079c: 00 	test   rsi,0x1
  007a3:    	je     0x367d3
  007a9:    	sar    rsi,1
  007ac:    	sub    rsp,0x10
  007b0:    	movq   QWORD PTR [rsp],xmm2
  007b5:    	movq   QWORD PTR [rsp+0x8],xmm4
  007bb: 45 	movabs rax,0x5645597e4900
  007c5:    	call   rax
  007c7:    	movq   xmm2,QWORD PTR [rsp]
  007cc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007d2:    	add    rsp,0x10
  007d6:    	test   rax,rax
  007d9:    	je     0x367f2
  007df: ff 	mov    QWORD PTR [r14-0xa0],rax
:00043 %14 = %14.call x()                   [Vec]
  007e6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  007ed: 00 	test   rdi,0x7
  007f4:    	jne    0x36801
  007fa:    	cmp    DWORD PTR [rdi+0x4],0x2b
  007fe:    	jne    0x36801
  00804: 26 	cmp    DWORD PTR [rip+0xffffffffffff6ff3],0x26        # 0xffff77fe
  0080b:    	jne    0x36801
  00811:    	mov    esi,DWORD PTR [rip+0x186a]        # 0x2081
  00817:    	cmp    esi,0xffffffff
  0081a:    	je     0x36820
  00820:    	cmp    WORD PTR [rdi+0x2],0x3
  00825:    	jne    0x83e
  0082b:    	cmp    esi,0x6
  0082e:    	jge    0x83e
  00834:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00839:    	jmp    0x85c
  0083e:    	sub    rsp,0x10
  00842:    	movq   QWORD PTR [rsp],xmm4
  00847: 45 	movabs rax,0x564559818b00
  00851:    	call   rax
  00853:    	movq   xmm4,QWORD PTR [rsp]
  00858:    	add    rsp,0x10
  0085c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 
:00045 %14 = %5 * %14                       [Float][Float]
  00863:    	mov    rdi,QWORD PTR [r14-0x58]
  00867: 00 	test   rdi,0x1
  0086e:    	jne    0x3685b
  00874: 00 	test   rdi,0x2
  0087b:    	je     0x8b7
  00881:    	xorps  xmm2,xmm2
  00884: 00 	movabs rax,0x8000000000000002
  0088e:    	cmp    rdi,rax
  00891:    	je     0x8c9
  00897:    	mov    rax,rdi
  0089a:    	sar    rax,0x3f
  0089e:    	add    rax,0x2
  008a2:    	and    rdi,0xfffffffffffffffc
  008a6:    	or     rdi,rax
  008a9:    	rol    rdi,0x3d
  008ad:    	movq   xmm2,rdi
  008b2:    	jmp    0x8c9
  008b7:    	call   0xffff30ba
  008bc:    	test   rax,rax
  008bf:    	je     0x3685b
  008c5:    	movq   xmm2,xmm0
  008c9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008d0: 00 	test   rdi,0x1
  008d7:    	jne    0x3687a
  008dd: 00 	test   rdi,0x2
  008e4:    	je     0x920
  008ea:    	xorps  xmm3,xmm3
  008ed: 00 	movabs rax,0x8000000000000002
  008f7:    	cmp    rdi,rax
  008fa:    	je     0x932
  00900:    	mov    rax,rdi
  00903:    	sar    rax,0x3f
  00907:    	add    rax,0x2
  0090b:    	and    rdi,0xfffffffffffffffc
  0090f:    	or     rdi,rax
  00912:    	rol    rdi,0x3d
  00916:    	movq   xmm3,rdi
  0091b:    	jmp    0x932
  00920:    	call   0xffff30ba
  00925:    	test   rax,rax
  00928:    	je     0x3687a
  0092e:    	movq   xmm3,xmm0
  00932:    	mulsd  xmm3,xmm2
:00046 %13 = %13 + %14                      [Float][Float]
  00936:    	addsd  xmm4,xmm3
:00047 %14 = dynvar(2, %2)
  0093a:    	mov    rax,QWORD PTR [r14-0x18]
  0093e:    	mov    rax,QWORD PTR [rax]
  00941:    	mov    rax,QWORD PTR [rax-0x28]
  00945: ff 	mov    QWORD PTR [r14-0xa0],rax
:00048 %15 = 2: i32
  0094c: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00049 %14 = %14.[%15]                      [Array][Integer]
  00957: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0095e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00965: 00 	test   rdi,0x7
  0096c:    	jne    0x36899
  00972:    	cmp    DWORD PTR [rdi+0x4],0xb
  00976:    	jne    0x36899
  0097c: 00 	test   rsi,0x1
  00983:    	je     0x36899
  00989:    	sar    rsi,1
  0098c:    	sub    rsp,0x10
  00990:    	movq   QWORD PTR [rsp],xmm2
  00995:    	movq   QWORD PTR [rsp+0x8],xmm4
  0099b: 45 	movabs rax,0x5645597e4900
  009a5:    	call   rax
  009a7:    	movq   xmm2,QWORD PTR [rsp]
  009ac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009b2:    	add    rsp,0x10
  009b6:    	test   rax,rax
  009b9:    	je     0x368b8
  009bf: ff 	mov    QWORD PTR [r14-0xa0],rax
:00050 %14 = %14.call x()                   [Vec]
  009c6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009cd: 00 	test   rdi,0x7
  009d4:    	jne    0x368c7
  009da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009de:    	jne    0x368c7
  009e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff6e13],0x26        # 0xffff77fe
  009eb:    	jne    0x368c7
  009f1:    	mov    esi,DWORD PTR [rip+0x1692]        # 0x2089
  009f7:    	cmp    esi,0xffffffff
  009fa:    	je     0x368e6
  00a00:    	cmp    WORD PTR [rdi+0x2],0x3
  00a05:    	jne    0xa1e
  00a0b:    	cmp    esi,0x6
  00a0e:    	jge    0xa1e
  00a14:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a19:    	jmp    0xa3c
  00a1e:    	sub    rsp,0x10
  00a22:    	movq   QWORD PTR [rsp],xmm4
  00a27: 45 	movabs rax,0x564559818b00
  00a31:    	call   rax
  00a33:    	movq   xmm4,QWORD PTR [rsp]
  00a38:    	add    rsp,0x10
  00a3c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00052 %14 = %6 * %14                       [Float][Float]
  00a43:    	mov    rdi,QWORD PTR [r14-0x60]
  00a47: 00 	test   rdi,0x1
  00a4e:    	jne    0x36921
  00a54: 00 	test   rdi,0x2
  00a5b:    	je     0xa97
  00a61:    	xorps  xmm2,xmm2
  00a64: 00 	movabs rax,0x8000000000000002
  00a6e:    	cmp    rdi,rax
  00a71:    	je     0xaa9
  00a77:    	mov    rax,rdi
  00a7a:    	sar    rax,0x3f
  00a7e:    	add    rax,0x2
  00a82:    	and    rdi,0xfffffffffffffffc
  00a86:    	or     rdi,rax
  00a89:    	rol    rdi,0x3d
  00a8d:    	movq   xmm2,rdi
  00a92:    	jmp    0xaa9
  00a97:    	call   0xffff30ba
  00a9c:    	test   rax,rax
  00a9f:    	je     0x36921
  00aa5:    	movq   xmm2,xmm0
  00aa9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ab0: 00 	test   rdi,0x1
  00ab7:    	jne    0x36940
  00abd: 00 	test   rdi,0x2
  00ac4:    	je     0xb00
  00aca:    	xorps  xmm3,xmm3
  00acd: 00 	movabs rax,0x8000000000000002
  00ad7:    	cmp    rdi,rax
  00ada:    	je     0xb12
  00ae0:    	mov    rax,rdi
  00ae3:    	sar    rax,0x3f
  00ae7:    	add    rax,0x2
  00aeb:    	and    rdi,0xfffffffffffffffc
  00aef:    	or     rdi,rax
  00af2:    	rol    rdi,0x3d
  00af6:    	movq   xmm3,rdi
  00afb:    	jmp    0xb12
  00b00:    	call   0xffff30ba
  00b05:    	test   rax,rax
  00b08:    	je     0x36940
  00b0e:    	movq   xmm3,xmm0
  00b12:    	mulsd  xmm3,xmm2
:00053 %7 = %13 + %14                       [Float][Float]
  00b16:    	movq   xmm5,xmm4
  00b1a:    	addsd  xmm5,xmm3
:00054 %13 = dynvar(2, %2)
  00b1e:    	mov    rax,QWORD PTR [r14-0x18]
  00b22:    	mov    rax,QWORD PTR [rax]
  00b25:    	mov    rax,QWORD PTR [rax-0x28]
  00b29: ff 	mov    QWORD PTR [r14-0x98],rax
:00055 %14 = 0: i32
  00b30: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00056 %13 = %13.[%14]                      [Array][Integer]
  00b3b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b42: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00b49: 00 	test   rdi,0x7
  00b50:    	jne    0x3695f
  00b56:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b5a:    	jne    0x3695f
  00b60: 00 	test   rsi,0x1
  00b67:    	je     0x3695f
  00b6d:    	sar    rsi,1
  00b70:    	sub    rsp,0x10
  00b74:    	movq   QWORD PTR [rsp],xmm2
  00b79:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b7f: 45 	movabs rax,0x5645597e4900
  00b89:    	call   rax
  00b8b:    	movq   xmm2,QWORD PTR [rsp]
  00b90:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b96:    	add    rsp,0x10
  00b9a:    	test   rax,rax
  00b9d:    	je     0x3697b
  00ba3: ff 	mov    QWORD PTR [r14-0x98],rax
:00057 %13 = %13.call y()                   [Vec]
  00baa:    	movq   xmm0,xmm5
  00bae:    	call   0xffff31de
  00bb3:    	mov    QWORD PTR [r14-0x68],rax
  00bb7: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00bbe: 00 	test   rdi,0x7
  00bc5:    	jne    0x3698a
  00bcb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00bcf:    	jne    0x3698a
  00bd5: 26 	cmp    DWORD PTR [rip+0xffffffffffff6c22],0x26        # 0xffff77fe
  00bdc:    	jne    0x3698a
  00be2:    	mov    esi,DWORD PTR [rip+0x14a9]        # 0x2091
  00be8:    	cmp    esi,0xffffffff
  00beb:    	je     0x36999
  00bf1:    	cmp    WORD PTR [rdi+0x2],0x3
  00bf6:    	jne    0xc0f
  00bfc:    	cmp    esi,0x6
  00bff:    	jge    0xc0f
  00c05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c0a:    	jmp    0xc1b
  00c0f: 45 	movabs rax,0x564559818b00
  00c19:    	call   rax
  00c1b: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00059 %13 = %4 * %13                       [Float][Float]
  00c22:    	mov    rdi,QWORD PTR [r14-0x50]
  00c26: 00 	test   rdi,0x1
  00c2d:    	jne    0x369c2
  00c33: 00 	test   rdi,0x2
  00c3a:    	je     0xc76
  00c40:    	xorps  xmm2,xmm2
  00c43: 00 	movabs rax,0x8000000000000002
  00c4d:    	cmp    rdi,rax
  00c50:    	je     0xc88
  00c56:    	mov    rax,rdi
  00c59:    	sar    rax,0x3f
  00c5d:    	add    rax,0x2
  00c61:    	and    rdi,0xfffffffffffffffc
  00c65:    	or     rdi,rax
  00c68:    	rol    rdi,0x3d
  00c6c:    	movq   xmm2,rdi
  00c71:    	jmp    0xc88
  00c76:    	call   0xffff30ba
  00c7b:    	test   rax,rax
  00c7e:    	je     0x369c2
  00c84:    	movq   xmm2,xmm0
  00c88: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c8f: 00 	test   rdi,0x1
  00c96:    	jne    0x369d1
  00c9c: 00 	test   rdi,0x2
  00ca3:    	je     0xcdf
  00ca9:    	xorps  xmm3,xmm3
  00cac: 00 	movabs rax,0x8000000000000002
  00cb6:    	cmp    rdi,rax
  00cb9:    	je     0xcf1
  00cbf:    	mov    rax,rdi
  00cc2:    	sar    rax,0x3f
  00cc6:    	add    rax,0x2
  00cca:    	and    rdi,0xfffffffffffffffc
  00cce:    	or     rdi,rax
  00cd1:    	rol    rdi,0x3d
  00cd5:    	movq   xmm3,rdi
  00cda:    	jmp    0xcf1
  00cdf:    	call   0xffff30ba
  00ce4:    	test   rax,rax
  00ce7:    	je     0x369d1
  00ced:    	movq   xmm3,xmm0
  00cf1:    	mulsd  xmm3,xmm2
:00060 %14 = dynvar(2, %2)
  00cf5:    	mov    rax,QWORD PTR [r14-0x18]
  00cf9:    	mov    rax,QWORD PTR [rax]
  00cfc:    	mov    rax,QWORD PTR [rax-0x28]
  00d00: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = 1: i32
  00d07: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00062 %14 = %14.[%15]                      [Array][Integer]
  00d12: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d19: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d20: 00 	test   rdi,0x7
  00d27:    	jne    0x369e0
  00d2d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d31:    	jne    0x369e0
  00d37: 00 	test   rsi,0x1
  00d3e:    	je     0x369e0
  00d44:    	sar    rsi,1
  00d47:    	sub    rsp,0x10
  00d4b:    	movq   QWORD PTR [rsp],xmm2
  00d50:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d56: 45 	movabs rax,0x5645597e4900
  00d60:    	call   rax
  00d62:    	movq   xmm2,QWORD PTR [rsp]
  00d67:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d6d:    	add    rsp,0x10
  00d71:    	test   rax,rax
  00d74:    	je     0x369ff
  00d7a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00063 %14 = %14.call y()                   [Vec]
  00d81: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d88: 00 	test   rdi,0x7
  00d8f:    	jne    0x36a0e
  00d95:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d99:    	jne    0x36a0e
  00d9f: 26 	cmp    DWORD PTR [rip+0xffffffffffff6a58],0x26        # 0xffff77fe
  00da6:    	jne    0x36a0e
  00dac:    	mov    esi,DWORD PTR [rip+0x12e7]        # 0x2099
  00db2:    	cmp    esi,0xffffffff
  00db5:    	je     0x36a2d
  00dbb:    	cmp    WORD PTR [rdi+0x2],0x3
  00dc0:    	jne    0xdd9
  00dc6:    	cmp    esi,0x6
  00dc9:    	jge    0xdd9
  00dcf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dd4:    	jmp    0xdf7
  00dd9:    	sub    rsp,0x10
  00ddd:    	movq   QWORD PTR [rsp],xmm3
  00de2: 45 	movabs rax,0x564559818b00
  00dec:    	call   rax
  00dee:    	movq   xmm3,QWORD PTR [rsp]
  00df3:    	add    rsp,0x10
  00df7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00064 
:00065 %14 = %5 * %14                       [Float][Float]
  00dfe:    	mov    rdi,QWORD PTR [r14-0x58]
  00e02: 00 	test   rdi,0x1
  00e09:    	jne    0x36a68
  00e0f: 00 	test   rdi,0x2
  00e16:    	je     0xe52
  00e1c:    	xorps  xmm2,xmm2
  00e1f: 00 	movabs rax,0x8000000000000002
  00e29:    	cmp    rdi,rax
  00e2c:    	je     0xe64
  00e32:    	mov    rax,rdi
  00e35:    	sar    rax,0x3f
  00e39:    	add    rax,0x2
  00e3d:    	and    rdi,0xfffffffffffffffc
  00e41:    	or     rdi,rax
  00e44:    	rol    rdi,0x3d
  00e48:    	movq   xmm2,rdi
  00e4d:    	jmp    0xe64
  00e52:    	call   0xffff30ba
  00e57:    	test   rax,rax
  00e5a:    	je     0x36a68
  00e60:    	movq   xmm2,xmm0
  00e64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e6b: 00 	test   rdi,0x1
  00e72:    	jne    0x36a87
  00e78: 00 	test   rdi,0x2
  00e7f:    	je     0xebb
  00e85:    	xorps  xmm4,xmm4
  00e88: 00 	movabs rax,0x8000000000000002
  00e92:    	cmp    rdi,rax
  00e95:    	je     0xecd
  00e9b:    	mov    rax,rdi
  00e9e:    	sar    rax,0x3f
  00ea2:    	add    rax,0x2
  00ea6:    	and    rdi,0xfffffffffffffffc
  00eaa:    	or     rdi,rax
  00ead:    	rol    rdi,0x3d
  00eb1:    	movq   xmm4,rdi
  00eb6:    	jmp    0xecd
  00ebb:    	call   0xffff30ba
  00ec0:    	test   rax,rax
  00ec3:    	je     0x36a87
  00ec9:    	movq   xmm4,xmm0
  00ecd:    	mulsd  xmm4,xmm2
:00066 %13 = %13 + %14                      [Float][Float]
  00ed1:    	addsd  xmm3,xmm4
:00067 %14 = dynvar(2, %2)
  00ed5:    	mov    rax,QWORD PTR [r14-0x18]
  00ed9:    	mov    rax,QWORD PTR [rax]
  00edc:    	mov    rax,QWORD PTR [rax-0x28]
  00ee0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = 2: i32
  00ee7: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00069 %14 = %14.[%15]                      [Array][Integer]
  00ef2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ef9: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00f00: 00 	test   rdi,0x7
  00f07:    	jne    0x36aa6
  00f0d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f11:    	jne    0x36aa6
  00f17: 00 	test   rsi,0x1
  00f1e:    	je     0x36aa6
  00f24:    	sar    rsi,1
  00f27:    	sub    rsp,0x10
  00f2b:    	movq   QWORD PTR [rsp],xmm2
  00f30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f36: 45 	movabs rax,0x5645597e4900
  00f40:    	call   rax
  00f42:    	movq   xmm2,QWORD PTR [rsp]
  00f47:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4d:    	add    rsp,0x10
  00f51:    	test   rax,rax
  00f54:    	je     0x36ac5
  00f5a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00070 %14 = %14.call y()                   [Vec]
  00f61: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f68: 00 	test   rdi,0x7
  00f6f:    	jne    0x36ad4
  00f75:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f79:    	jne    0x36ad4
  00f7f: 26 	cmp    DWORD PTR [rip+0xffffffffffff6878],0x26        # 0xffff77fe
  00f86:    	jne    0x36ad4
  00f8c:    	mov    esi,DWORD PTR [rip+0x110f]        # 0x20a1
  00f92:    	cmp    esi,0xffffffff
  00f95:    	je     0x36af3
  00f9b:    	cmp    WORD PTR [rdi+0x2],0x3
  00fa0:    	jne    0xfb9
  00fa6:    	cmp    esi,0x6
  00fa9:    	jge    0xfb9
  00faf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fb4:    	jmp    0xfd7
  00fb9:    	sub    rsp,0x10
  00fbd:    	movq   QWORD PTR [rsp],xmm3
  00fc2: 45 	movabs rax,0x564559818b00
  00fcc:    	call   rax
  00fce:    	movq   xmm3,QWORD PTR [rsp]
  00fd3:    	add    rsp,0x10
  00fd7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00071 
:00072 %14 = %6 * %14                       [Float][Float]
  00fde:    	mov    rdi,QWORD PTR [r14-0x60]
  00fe2: 00 	test   rdi,0x1
  00fe9:    	jne    0x36b2e
  00fef: 00 	test   rdi,0x2
  00ff6:    	je     0x1032
  00ffc:    	xorps  xmm2,xmm2
  00fff: 00 	movabs rax,0x8000000000000002
  01009:    	cmp    rdi,rax
  0100c:    	je     0x1044
  01012:    	mov    rax,rdi
  01015:    	sar    rax,0x3f
  01019:    	add    rax,0x2
  0101d:    	and    rdi,0xfffffffffffffffc
  01021:    	or     rdi,rax
  01024:    	rol    rdi,0x3d
  01028:    	movq   xmm2,rdi
  0102d:    	jmp    0x1044
  01032:    	call   0xffff30ba
  01037:    	test   rax,rax
  0103a:    	je     0x36b2e
  01040:    	movq   xmm2,xmm0
  01044: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104b: 00 	test   rdi,0x1
  01052:    	jne    0x36b4d
  01058: 00 	test   rdi,0x2
  0105f:    	je     0x109b
  01065:    	xorps  xmm4,xmm4
  01068: 00 	movabs rax,0x8000000000000002
  01072:    	cmp    rdi,rax
  01075:    	je     0x10ad
  0107b:    	mov    rax,rdi
  0107e:    	sar    rax,0x3f
  01082:    	add    rax,0x2
  01086:    	and    rdi,0xfffffffffffffffc
  0108a:    	or     rdi,rax
  0108d:    	rol    rdi,0x3d
  01091:    	movq   xmm4,rdi
  01096:    	jmp    0x10ad
  0109b:    	call   0xffff30ba
  010a0:    	test   rax,rax
  010a3:    	je     0x36b4d
  010a9:    	movq   xmm4,xmm0
  010ad:    	mulsd  xmm4,xmm2
:00073 %8 = %13 + %14                       [Float][Float]
  010b1:    	movq   xmm5,xmm3
  010b5:    	addsd  xmm5,xmm4
:00074 %13 = dynvar(2, %2)
  010b9:    	mov    rax,QWORD PTR [r14-0x18]
  010bd:    	mov    rax,QWORD PTR [rax]
  010c0:    	mov    rax,QWORD PTR [rax-0x28]
  010c4: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 %14 = 0: i32
  010cb: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00076 %13 = %13.[%14]                      [Array][Integer]
  010d6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  010dd: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  010e4: 00 	test   rdi,0x7
  010eb:    	jne    0x36b6c
  010f1:    	cmp    DWORD PTR [rdi+0x4],0xb
  010f5:    	jne    0x36b6c
  010fb: 00 	test   rsi,0x1
  01102:    	je     0x36b6c
  01108:    	sar    rsi,1
  0110b:    	sub    rsp,0x10
  0110f:    	movq   QWORD PTR [rsp],xmm2
  01114:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111a: 45 	movabs rax,0x5645597e4900
  01124:    	call   rax
  01126:    	movq   xmm2,QWORD PTR [rsp]
  0112b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01131:    	add    rsp,0x10
  01135:    	test   rax,rax
  01138:    	je     0x36b88
  0113e: ff 	mov    QWORD PTR [r14-0x98],rax
:00077 %13 = %13.call z()                   [Vec]
  01145:    	movq   xmm0,xmm5
  01149:    	call   0xffff31de
  0114e:    	mov    QWORD PTR [r14-0x70],rax
  01152: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01159: 00 	test   rdi,0x7
  01160:    	jne    0x36b97
  01166:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0116a:    	jne    0x36b97
  01170: 26 	cmp    DWORD PTR [rip+0xffffffffffff6687],0x26        # 0xffff77fe
  01177:    	jne    0x36b97
  0117d:    	mov    esi,DWORD PTR [rip+0xf26]        # 0x20a9
  01183:    	cmp    esi,0xffffffff
  01186:    	je     0x36ba6
  0118c:    	cmp    WORD PTR [rdi+0x2],0x3
  01191:    	jne    0x11aa
  01197:    	cmp    esi,0x6
  0119a:    	jge    0x11aa
  011a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011a5:    	jmp    0x11b6
  011aa: 45 	movabs rax,0x564559818b00
  011b4:    	call   rax
  011b6: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 
:00079 %13 = %4 * %13                       [Float][Float]
  011bd:    	mov    rdi,QWORD PTR [r14-0x50]
  011c1: 00 	test   rdi,0x1
  011c8:    	jne    0x36bcf
  011ce: 00 	test   rdi,0x2
  011d5:    	je     0x1211
  011db:    	xorps  xmm2,xmm2
  011de: 00 	movabs rax,0x8000000000000002
  011e8:    	cmp    rdi,rax
  011eb:    	je     0x1223
  011f1:    	mov    rax,rdi
  011f4:    	sar    rax,0x3f
  011f8:    	add    rax,0x2
  011fc:    	and    rdi,0xfffffffffffffffc
  01200:    	or     rdi,rax
  01203:    	rol    rdi,0x3d
  01207:    	movq   xmm2,rdi
  0120c:    	jmp    0x1223
  01211:    	call   0xffff30ba
  01216:    	test   rax,rax
  01219:    	je     0x36bcf
  0121f:    	movq   xmm2,xmm0
  01223: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0122a: 00 	test   rdi,0x1
  01231:    	jne    0x36bde
  01237: 00 	test   rdi,0x2
  0123e:    	je     0x127a
  01244:    	xorps  xmm3,xmm3
  01247: 00 	movabs rax,0x8000000000000002
  01251:    	cmp    rdi,rax
  01254:    	je     0x128c
  0125a:    	mov    rax,rdi
  0125d:    	sar    rax,0x3f
  01261:    	add    rax,0x2
  01265:    	and    rdi,0xfffffffffffffffc
  01269:    	or     rdi,rax
  0126c:    	rol    rdi,0x3d
  01270:    	movq   xmm3,rdi
  01275:    	jmp    0x128c
  0127a:    	call   0xffff30ba
  0127f:    	test   rax,rax
  01282:    	je     0x36bde
  01288:    	movq   xmm3,xmm0
  0128c:    	mulsd  xmm3,xmm2
:00080 %14 = dynvar(2, %2)
  01290:    	mov    rax,QWORD PTR [r14-0x18]
  01294:    	mov    rax,QWORD PTR [rax]
  01297:    	mov    rax,QWORD PTR [rax-0x28]
  0129b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  012a2: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  012ad: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012b4: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  012bb: 00 	test   rdi,0x7
  012c2:    	jne    0x36bed
  012c8:    	cmp    DWORD PTR [rdi+0x4],0xb
  012cc:    	jne    0x36bed
  012d2: 00 	test   rsi,0x1
  012d9:    	je     0x36bed
  012df:    	sar    rsi,1
  012e2:    	sub    rsp,0x10
  012e6:    	movq   QWORD PTR [rsp],xmm2
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f1: 45 	movabs rax,0x5645597e4900
  012fb:    	call   rax
  012fd:    	movq   xmm2,QWORD PTR [rsp]
  01302:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01308:    	add    rsp,0x10
  0130c:    	test   rax,rax
  0130f:    	je     0x36c0c
  01315: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %14 = %14.call z()                   [Vec]
  0131c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01323: 00 	test   rdi,0x7
  0132a:    	jne    0x36c1b
  01330:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01334:    	jne    0x36c1b
  0133a: 26 	cmp    DWORD PTR [rip+0xffffffffffff64bd],0x26        # 0xffff77fe
  01341:    	jne    0x36c1b
  01347:    	mov    esi,DWORD PTR [rip+0xd64]        # 0x20b1
  0134d:    	cmp    esi,0xffffffff
  01350:    	je     0x36c3a
  01356:    	cmp    WORD PTR [rdi+0x2],0x3
  0135b:    	jne    0x1374
  01361:    	cmp    esi,0x6
  01364:    	jge    0x1374
  0136a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0136f:    	jmp    0x1392
  01374:    	sub    rsp,0x10
  01378:    	movq   QWORD PTR [rsp],xmm3
  0137d: 45 	movabs rax,0x564559818b00
  01387:    	call   rax
  01389:    	movq   xmm3,QWORD PTR [rsp]
  0138e:    	add    rsp,0x10
  01392: ff 	mov    QWORD PTR [r14-0xa0],rax
:00084 
:00085 %14 = %5 * %14                       [Float][Float]
  01399:    	mov    rdi,QWORD PTR [r14-0x58]
  0139d: 00 	test   rdi,0x1
  013a4:    	jne    0x36c75
  013aa: 00 	test   rdi,0x2
  013b1:    	je     0x13ed
  013b7:    	xorps  xmm2,xmm2
  013ba: 00 	movabs rax,0x8000000000000002
  013c4:    	cmp    rdi,rax
  013c7:    	je     0x13ff
  013cd:    	mov    rax,rdi
  013d0:    	sar    rax,0x3f
  013d4:    	add    rax,0x2
  013d8:    	and    rdi,0xfffffffffffffffc
  013dc:    	or     rdi,rax
  013df:    	rol    rdi,0x3d
  013e3:    	movq   xmm2,rdi
  013e8:    	jmp    0x13ff
  013ed:    	call   0xffff30ba
  013f2:    	test   rax,rax
  013f5:    	je     0x36c75
  013fb:    	movq   xmm2,xmm0
  013ff: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01406: 00 	test   rdi,0x1
  0140d:    	jne    0x36c94
  01413: 00 	test   rdi,0x2
  0141a:    	je     0x1456
  01420:    	xorps  xmm4,xmm4
  01423: 00 	movabs rax,0x8000000000000002
  0142d:    	cmp    rdi,rax
  01430:    	je     0x1468
  01436:    	mov    rax,rdi
  01439:    	sar    rax,0x3f
  0143d:    	add    rax,0x2
  01441:    	and    rdi,0xfffffffffffffffc
  01445:    	or     rdi,rax
  01448:    	rol    rdi,0x3d
  0144c:    	movq   xmm4,rdi
  01451:    	jmp    0x1468
  01456:    	call   0xffff30ba
  0145b:    	test   rax,rax
  0145e:    	je     0x36c94
  01464:    	movq   xmm4,xmm0
  01468:    	mulsd  xmm4,xmm2
:00086 %13 = %13 + %14                      [Float][Float]
  0146c:    	addsd  xmm3,xmm4
:00087 %14 = dynvar(2, %2)
  01470:    	mov    rax,QWORD PTR [r14-0x18]
  01474:    	mov    rax,QWORD PTR [rax]
  01477:    	mov    rax,QWORD PTR [rax-0x28]
  0147b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 2: i32
  01482: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00089 %14 = %14.[%15]                      [Array][Integer]
  0148d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01494: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  0149b: 00 	test   rdi,0x7
  014a2:    	jne    0x36cb3
  014a8:    	cmp    DWORD PTR [rdi+0x4],0xb
  014ac:    	jne    0x36cb3
  014b2: 00 	test   rsi,0x1
  014b9:    	je     0x36cb3
  014bf:    	sar    rsi,1
  014c2:    	sub    rsp,0x10
  014c6:    	movq   QWORD PTR [rsp],xmm2
  014cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d1: 45 	movabs rax,0x5645597e4900
  014db:    	call   rax
  014dd:    	movq   xmm2,QWORD PTR [rsp]
  014e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014e8:    	add    rsp,0x10
  014ec:    	test   rax,rax
  014ef:    	je     0x36cd2
  014f5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %14 = %14.call z()                   [Vec]
  014fc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01503: 00 	test   rdi,0x7
  0150a:    	jne    0x36ce1
  01510:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01514:    	jne    0x36ce1
  0151a: 26 	cmp    DWORD PTR [rip+0xffffffffffff62dd],0x26        # 0xffff77fe
  01521:    	jne    0x36ce1
  01527:    	mov    esi,DWORD PTR [rip+0xb8c]        # 0x20b9
  0152d:    	cmp    esi,0xffffffff
  01530:    	je     0x36d00
  01536:    	cmp    WORD PTR [rdi+0x2],0x3
  0153b:    	jne    0x1554
  01541:    	cmp    esi,0x6
  01544:    	jge    0x1554
  0154a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0154f:    	jmp    0x1572
  01554:    	sub    rsp,0x10
  01558:    	movq   QWORD PTR [rsp],xmm3
  0155d: 45 	movabs rax,0x564559818b00
  01567:    	call   rax
  01569:    	movq   xmm3,QWORD PTR [rsp]
  0156e:    	add    rsp,0x10
  01572: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 
:00092 %14 = %6 * %14                       [Float][Float]
  01579:    	mov    rdi,QWORD PTR [r14-0x60]
  0157d: 00 	test   rdi,0x1
  01584:    	jne    0x36d3b
  0158a: 00 	test   rdi,0x2
  01591:    	je     0x15cd
  01597:    	xorps  xmm2,xmm2
  0159a: 00 	movabs rax,0x8000000000000002
  015a4:    	cmp    rdi,rax
  015a7:    	je     0x15df
  015ad:    	mov    rax,rdi
  015b0:    	sar    rax,0x3f
  015b4:    	add    rax,0x2
  015b8:    	and    rdi,0xfffffffffffffffc
  015bc:    	or     rdi,rax
  015bf:    	rol    rdi,0x3d
  015c3:    	movq   xmm2,rdi
  015c8:    	jmp    0x15df
  015cd:    	call   0xffff30ba
  015d2:    	test   rax,rax
  015d5:    	je     0x36d3b
  015db:    	movq   xmm2,xmm0
  015df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  015e6: 00 	test   rdi,0x1
  015ed:    	jne    0x36d5a
  015f3: 00 	test   rdi,0x2
  015fa:    	je     0x1636
  01600:    	xorps  xmm4,xmm4
  01603: 00 	movabs rax,0x8000000000000002
  0160d:    	cmp    rdi,rax
  01610:    	je     0x1648
  01616:    	mov    rax,rdi
  01619:    	sar    rax,0x3f
  0161d:    	add    rax,0x2
  01621:    	and    rdi,0xfffffffffffffffc
  01625:    	or     rdi,rax
  01628:    	rol    rdi,0x3d
  0162c:    	movq   xmm4,rdi
  01631:    	jmp    0x1648
  01636:    	call   0xffff30ba
  0163b:    	test   rax,rax
  0163e:    	je     0x36d5a
  01644:    	movq   xmm4,xmm0
  01648:    	mulsd  xmm4,xmm2
:00093 %9 = %13 + %14                       [Float][Float]
  0164c:    	movq   xmm5,xmm3
  01650:    	addsd  xmm5,xmm4
:00094 %13 = const[Vec]                     [Vec]
  01654: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff61b2]        # 0xffff780d
  0165b: 00 	cmp    rax,QWORD PTR [rip+0xa6b]        # 0x20cd
  01662:    	jne    0x36d79
  01668: 00 	mov    rax,QWORD PTR [rip+0xa4e]        # 0x20bd
  0166f: ff 	mov    QWORD PTR [r14-0x98],rax
:00095 %14 = %7
  01676:    	mov    rax,QWORD PTR [r14-0x68]
  0167a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00096 %15 = %8
  01681:    	mov    rax,QWORD PTR [r14-0x70]
  01685: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %16 = %9
:00098 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  0168c:    	movq   xmm0,xmm5
  01690:    	call   0xffff31de
  01695: ff 	mov    QWORD PTR [r14-0xb0],rax
  0169c:    	movq   xmm0,xmm5
  016a0:    	call   0xffff31de
  016a5:    	mov    QWORD PTR [r14-0x78],rax
  016a9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016b0: 00 	test   rdi,0x7
  016b7:    	jne    0x36dee
  016bd:    	cmp    DWORD PTR [rdi+0x4],0x2c
  016c1:    	jne    0x36dee
  016c7: 26 	cmp    DWORD PTR [rip+0xffffffffffff6130],0x26        # 0xffff77fe
  016ce:    	jne    0x36dee
  016d4: 00 	mov    r9,0x0
  016db:    	sub    rsp,0x10
  016df:    	movq   QWORD PTR [rsp],xmm5
  016e4:    	mov    rdx,rdi
  016e7:    	mov    QWORD PTR [rsp-0x40],rcx
  016ec: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016f5: ff 	lea    rcx,[r14-0xa0]
  016fc: 00 	mov    r8,0x3
  01703:    	mov    rsi,QWORD PTR [rbx]
  01706:    	mov    QWORD PTR [rsp-0x18],rsi
  0170b:    	lea    rsi,[rsp-0x18]
  01710:    	mov    QWORD PTR [rbx],rsi
  01713:    	lea    r14,[rsp-0x10]
  01718:    	mov    QWORD PTR [rsp-0x20],r14
  0171d:    	call   0x36dfd
  01722:    	lea    r14,[rbp-0x8]
  01726:    	mov    QWORD PTR [rbx],r14
  01729:    	mov    r14,QWORD PTR [rbp-0x10]
  0172d:    	movq   xmm5,QWORD PTR [rsp]
  01732:    	add    rsp,0x10
  01736:    	test   rax,rax
  01739:    	je     0x36e2f
  0173f:    	mov    QWORD PTR [r14-0x80],rax
:00099 
:00100 %13 = const[Ray]                     [Ray]
  01743: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff60c3]        # 0xffff780d
  0174a: 00 	cmp    rax,QWORD PTR [rip+0x99c]        # 0x20ed
  01751:    	jne    0x36e3e
  01757: 00 	mov    rax,QWORD PTR [rip+0x97f]        # 0x20dd
  0175e: ff 	mov    QWORD PTR [r14-0x98],rax
:00101 %14 = dynvar(2, %7)
  01765:    	mov    rax,QWORD PTR [r14-0x18]
  01769:    	mov    rax,QWORD PTR [rax]
  0176c:    	mov    rax,QWORD PTR [rax-0x50]
  01770: ff 	mov    QWORD PTR [r14-0xa0],rax
:00102 %15 = %10
  01777:    	mov    rax,QWORD PTR [r14-0x80]
  0177b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01782: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01789: 00 	test   rdi,0x7
  01790:    	jne    0x36e9b
  01796:    	cmp    DWORD PTR [rdi+0x4],0x32
  0179a:    	jne    0x36e9b
  017a0: 26 	cmp    DWORD PTR [rip+0xffffffffffff6057],0x26        # 0xffff77fe
  017a7:    	jne    0x36e9b
  017ad: 00 	mov    r9,0x0
  017b4:    	sub    rsp,0x10
  017b8:    	movq   QWORD PTR [rsp],xmm5
  017bd:    	mov    rdx,rdi
  017c0:    	mov    QWORD PTR [rsp-0x40],rcx
  017c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017ce: ff 	lea    rcx,[r14-0xa0]
  017d5: 00 	mov    r8,0x2
  017dc:    	mov    rsi,QWORD PTR [rbx]
  017df:    	mov    QWORD PTR [rsp-0x18],rsi
  017e4:    	lea    rsi,[rsp-0x18]
  017e9:    	mov    QWORD PTR [rbx],rsi
  017ec:    	lea    r14,[rsp-0x10]
  017f1:    	mov    QWORD PTR [rsp-0x20],r14
  017f6:    	call   0x36eaa
  017fb:    	lea    r14,[rbp-0x8]
  017ff:    	mov    QWORD PTR [rbx],r14
  01802:    	mov    r14,QWORD PTR [rbp-0x10]
  01806:    	movq   xmm5,QWORD PTR [rsp]
  0180b:    	add    rsp,0x10
  0180f:    	test   rax,rax
  01812:    	je     0x36edc
  01818: ff 	mov    QWORD PTR [r14-0x88],rax
:00104 
:00105 %13 = const[Isect]                   [Isect]
  0181f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5fe7]        # 0xffff780d
  01826: 00 	cmp    rax,QWORD PTR [rip+0x8e0]        # 0x210d
  0182d:    	jne    0x36eeb
  01833: 00 	mov    rax,QWORD PTR [rip+0x8c3]        # 0x20fd
  0183a: ff 	mov    QWORD PTR [r14-0x98],rax
:00106 %12 = %13.call new()                 [#<Class:Isect>]
  01841: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01848: 00 	test   rdi,0x7
  0184f:    	jne    0x36f48
  01855:    	cmp    DWORD PTR [rdi+0x4],0x34
  01859:    	jne    0x36f48
  0185f: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f98],0x26        # 0xffff77fe
  01866:    	jne    0x36f48
  0186c: 00 	mov    r9,0x0
  01873:    	sub    rsp,0x10
  01877:    	movq   QWORD PTR [rsp],xmm5
  0187c:    	mov    rdx,rdi
  0187f:    	mov    QWORD PTR [rsp-0x40],rcx
  01884: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0188d: ff 	lea    rcx,[r14-0xa0]
  01894: 00 	mov    r8,0x0
  0189b:    	mov    rsi,QWORD PTR [rbx]
  0189e:    	mov    QWORD PTR [rsp-0x18],rsi
  018a3:    	lea    rsi,[rsp-0x18]
  018a8:    	mov    QWORD PTR [rbx],rsi
  018ab:    	lea    r14,[rsp-0x10]
  018b0:    	mov    QWORD PTR [rsp-0x20],r14
  018b5:    	call   0x36f57
  018ba:    	lea    r14,[rbp-0x8]
  018be:    	mov    QWORD PTR [rbx],r14
  018c1:    	mov    r14,QWORD PTR [rbp-0x10]
  018c5:    	movq   xmm5,QWORD PTR [rsp]
  018ca:    	add    rsp,0x10
  018ce:    	test   rax,rax
  018d1:    	je     0x36f89
  018d7: ff 	mov    QWORD PTR [r14-0x90],rax
:00107 
:00108 %13 = @spheres: Scene[IvarId(0)]
  018de:    	mov    rdi,QWORD PTR [r14-0x30]
  018e2:    	mov    rax,QWORD PTR [rdi+0x10]
  018e6: ff 	mov    QWORD PTR [r14-0x98],rax
:00109 %14 = 0: i32
  018ed: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00110 %13 = %13.[%14]                      [Array][Integer]
  018f8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ff: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01906: 00 	test   rdi,0x7
  0190d:    	jne    0x36f98
  01913:    	cmp    DWORD PTR [rdi+0x4],0xb
  01917:    	jne    0x36f98
  0191d: 00 	test   rsi,0x1
  01924:    	je     0x36f98
  0192a:    	sar    rsi,1
  0192d:    	sub    rsp,0x10
  01931:    	movq   QWORD PTR [rsp],xmm5
  01936: 45 	movabs rax,0x5645597e4900
  01940:    	call   rax
  01942:    	movq   xmm5,QWORD PTR [rsp]
  01947:    	add    rsp,0x10
  0194b:    	test   rax,rax
  0194e:    	je     0x36fa7
  01954: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %11
  0195b: ff 	mov    rax,QWORD PTR [r14-0x88]
  01962: ff 	mov    QWORD PTR [r14-0xa0],rax
:00112 %15 = %12
  01969: ff 	mov    rax,QWORD PTR [r14-0x90]
  01970: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 _ = %13.call intersect(%14; 2)       [Sphere]
  01977: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0197e: 00 	test   rdi,0x7
  01985:    	jne    0x36fb6
  0198b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0198f:    	jne    0x36fb6
  01995: 26 	cmp    DWORD PTR [rip+0xffffffffffff5e62],0x26        # 0xffff77fe
  0199c:    	jne    0x36fb6
  019a2:    	sub    rsp,0x10
  019a6:    	movq   QWORD PTR [rsp],xmm5
  019ab: 00 	cmp    DWORD PTR [rip+0xffffffffffff5e50],0x0        # 0xffff7802
  019b2:    	jne    0x36fc5
  019b8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019c1: ff 	mov    rax,QWORD PTR [r14-0x98]
  019c8:    	mov    QWORD PTR [rsp-0x40],rax
  019cd: 00 	mov    rdi,0x2
  019d4: ff 	mov    rax,QWORD PTR [r14-0xa0]
  019db:    	mov    QWORD PTR [rsp-0x48],rax
  019e0: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019e7:    	mov    QWORD PTR [rsp-0x50],rax
  019ec: 00 	mov    QWORD PTR [rsp-0x38],0x0
  019f5: 0e 	movabs rax,0x1000e00000062
  019ff:    	mov    QWORD PTR [rsp-0x30],rax
  01a04: 45 	movabs r13,0x564559e8f370
  01a0e:    	mov    rsi,QWORD PTR [rbx]
  01a11:    	mov    QWORD PTR [rsp-0x18],rsi
  01a16:    	lea    rsi,[rsp-0x18]
  01a1b:    	mov    QWORD PTR [rbx],rsi
  01a1e:    	lea    r14,[rsp-0x10]
  01a23:    	mov    QWORD PTR [rsp-0x20],r14
  01a28:    	call   0xffff83a9
  01a2d:    	lea    r14,[rbp-0x8]
  01a31:    	mov    QWORD PTR [rbx],r14
  01a34:    	mov    r14,QWORD PTR [rbp-0x10]
  01a38:    	movq   xmm5,QWORD PTR [rsp]
  01a3d:    	add    rsp,0x10
  01a41:    	test   rax,rax
  01a44:    	je     0x36fdc
:00114 
:00115 %13 = @spheres: Scene[IvarId(0)]
  01a4a:    	mov    rdi,QWORD PTR [r14-0x30]
  01a4e:    	mov    rax,QWORD PTR [rdi+0x10]
  01a52: ff 	mov    QWORD PTR [r14-0x98],rax
:00116 %14 = 1: i32
  01a59: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00117 %13 = %13.[%14]                      [Array][Integer]
  01a64: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a6b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01a72: 00 	test   rdi,0x7
  01a79:    	jne    0x36feb
  01a7f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01a83:    	jne    0x36feb
  01a89: 00 	test   rsi,0x1
  01a90:    	je     0x36feb
  01a96:    	sar    rsi,1
  01a99:    	sub    rsp,0x10
  01a9d:    	movq   QWORD PTR [rsp],xmm5
  01aa2: 45 	movabs rax,0x5645597e4900
  01aac:    	call   rax
  01aae:    	movq   xmm5,QWORD PTR [rsp]
  01ab3:    	add    rsp,0x10
  01ab7:    	test   rax,rax
  01aba:    	je     0x36ffa
  01ac0: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = %11
  01ac7: ff 	mov    rax,QWORD PTR [r14-0x88]
  01ace: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %12
  01ad5: ff 	mov    rax,QWORD PTR [r14-0x90]
  01adc: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 _ = %13.call intersect(%14; 2)       [Sphere]
  01ae3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01aea: 00 	test   rdi,0x7
  01af1:    	jne    0x37009
  01af7:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01afb:    	jne    0x37009
  01b01: 26 	cmp    DWORD PTR [rip+0xffffffffffff5cf6],0x26        # 0xffff77fe
  01b08:    	jne    0x37009
  01b0e:    	sub    rsp,0x10
  01b12:    	movq   QWORD PTR [rsp],xmm5
  01b17: 00 	cmp    DWORD PTR [rip+0xffffffffffff5ce4],0x0        # 0xffff7802
  01b1e:    	jne    0x37018
  01b24: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b2d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01b34:    	mov    QWORD PTR [rsp-0x40],rax
  01b39: 00 	mov    rdi,0x2
  01b40: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01b47:    	mov    QWORD PTR [rsp-0x48],rax
  01b4c: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01b53:    	mov    QWORD PTR [rsp-0x50],rax
  01b58: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b61: 0e 	movabs rax,0x1000e00000062
  01b6b:    	mov    QWORD PTR [rsp-0x30],rax
  01b70: 45 	movabs r13,0x564559e8f370
  01b7a:    	mov    rsi,QWORD PTR [rbx]
  01b7d:    	mov    QWORD PTR [rsp-0x18],rsi
  01b82:    	lea    rsi,[rsp-0x18]
  01b87:    	mov    QWORD PTR [rbx],rsi
  01b8a:    	lea    r14,[rsp-0x10]
  01b8f:    	mov    QWORD PTR [rsp-0x20],r14
  01b94:    	call   0xffff83a9
  01b99:    	lea    r14,[rbp-0x8]
  01b9d:    	mov    QWORD PTR [rbx],r14
  01ba0:    	mov    r14,QWORD PTR [rbp-0x10]
  01ba4:    	movq   xmm5,QWORD PTR [rsp]
  01ba9:    	add    rsp,0x10
  01bad:    	test   rax,rax
  01bb0:    	je     0x3702f
:00121 
:00122 %13 = @spheres: Scene[IvarId(0)]
  01bb6:    	mov    rdi,QWORD PTR [r14-0x30]
  01bba:    	mov    rax,QWORD PTR [rdi+0x10]
  01bbe: ff 	mov    QWORD PTR [r14-0x98],rax
:00123 %14 = 2: i32
  01bc5: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00124 %13 = %13.[%14]                      [Array][Integer]
  01bd0: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bd7: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01bde: 00 	test   rdi,0x7
  01be5:    	jne    0x3703e
  01beb:    	cmp    DWORD PTR [rdi+0x4],0xb
  01bef:    	jne    0x3703e
  01bf5: 00 	test   rsi,0x1
  01bfc:    	je     0x3703e
  01c02:    	sar    rsi,1
  01c05:    	sub    rsp,0x10
  01c09:    	movq   QWORD PTR [rsp],xmm5
  01c0e: 45 	movabs rax,0x5645597e4900
  01c18:    	call   rax
  01c1a:    	movq   xmm5,QWORD PTR [rsp]
  01c1f:    	add    rsp,0x10
  01c23:    	test   rax,rax
  01c26:    	je     0x3704d
  01c2c: ff 	mov    QWORD PTR [r14-0x98],rax
:00125 %14 = %11
  01c33: ff 	mov    rax,QWORD PTR [r14-0x88]
  01c3a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00126 %15 = %12
  01c41: ff 	mov    rax,QWORD PTR [r14-0x90]
  01c48: ff 	mov    QWORD PTR [r14-0xa8],rax
:00127 _ = %13.call intersect(%14; 2)       [Sphere]
  01c4f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c56: 00 	test   rdi,0x7
  01c5d:    	jne    0x3705c
  01c63:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01c67:    	jne    0x3705c
  01c6d: 26 	cmp    DWORD PTR [rip+0xffffffffffff5b8a],0x26        # 0xffff77fe
  01c74:    	jne    0x3705c
  01c7a:    	sub    rsp,0x10
  01c7e:    	movq   QWORD PTR [rsp],xmm5
  01c83: 00 	cmp    DWORD PTR [rip+0xffffffffffff5b78],0x0        # 0xffff7802
  01c8a:    	jne    0x3706b
  01c90: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c99: ff 	mov    rax,QWORD PTR [r14-0x98]
  01ca0:    	mov    QWORD PTR [rsp-0x40],rax
  01ca5: 00 	mov    rdi,0x2
  01cac: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01cb3:    	mov    QWORD PTR [rsp-0x48],rax
  01cb8: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01cbf:    	mov    QWORD PTR [rsp-0x50],rax
  01cc4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01ccd: 0e 	movabs rax,0x1000e00000062
  01cd7:    	mov    QWORD PTR [rsp-0x30],rax
  01cdc: 45 	movabs r13,0x564559e8f370
  01ce6:    	mov    rsi,QWORD PTR [rbx]
  01ce9:    	mov    QWORD PTR [rsp-0x18],rsi
  01cee:    	lea    rsi,[rsp-0x18]
  01cf3:    	mov    QWORD PTR [rbx],rsi
  01cf6:    	lea    r14,[rsp-0x10]
  01cfb:    	mov    QWORD PTR [rsp-0x20],r14
  01d00:    	call   0xffff83a9
  01d05:    	lea    r14,[rbp-0x8]
  01d09:    	mov    QWORD PTR [rbx],r14
  01d0c:    	mov    r14,QWORD PTR [rbp-0x10]
  01d10:    	movq   xmm5,QWORD PTR [rsp]
  01d15:    	add    rsp,0x10
  01d19:    	test   rax,rax
  01d1c:    	je     0x37082
:00128 
:00129 %13 = @plane: Scene[IvarId(1)]
  01d22:    	mov    rdi,QWORD PTR [r14-0x30]
  01d26:    	mov    rax,QWORD PTR [rdi+0x18]
  01d2a: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01d31: ff 	mov    rax,QWORD PTR [r14-0x88]
  01d38: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01d3f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01d46: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Plane]
  01d4d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d54: 00 	test   rdi,0x7
  01d5b:    	jne    0x37091
  01d61:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01d65:    	jne    0x37091
  01d6b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a8c],0x26        # 0xffff77fe
  01d72:    	jne    0x37091
  01d78:    	sub    rsp,0x10
  01d7c:    	movq   QWORD PTR [rsp],xmm5
  01d81: 00 	cmp    DWORD PTR [rip+0xffffffffffff5a7a],0x0        # 0xffff7802
  01d88:    	jne    0x370a0
  01d8e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d97: ff 	mov    rax,QWORD PTR [r14-0x98]
  01d9e:    	mov    QWORD PTR [rsp-0x40],rax
  01da3: 00 	mov    rdi,0x2
  01daa: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01db1:    	mov    QWORD PTR [rsp-0x48],rax
  01db6: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01dbd:    	mov    QWORD PTR [rsp-0x50],rax
  01dc2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dcb: 0c 	movabs rax,0x1000c00000064
  01dd5:    	mov    QWORD PTR [rsp-0x30],rax
  01dda: 45 	movabs r13,0x564559ec5d10
  01de4:    	mov    rsi,QWORD PTR [rbx]
  01de7:    	mov    QWORD PTR [rsp-0x18],rsi
  01dec:    	lea    rsi,[rsp-0x18]
  01df1:    	mov    QWORD PTR [rbx],rsi
  01df4:    	lea    r14,[rsp-0x10]
  01df9:    	mov    QWORD PTR [rsp-0x20],r14
  01dfe:    	call   0xffff8975
  01e03:    	lea    r14,[rbp-0x8]
  01e07:    	mov    QWORD PTR [rbx],r14
  01e0a:    	mov    r14,QWORD PTR [rbp-0x10]
  01e0e:    	movq   xmm5,QWORD PTR [rsp]
  01e13:    	add    rsp,0x10
  01e17:    	test   rax,rax
  01e1a:    	je     0x370b7
:00133 
:00134 %13 = %12.call hit()                 [Isect]
  01e20: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01e27: 00 	test   rdi,0x7
  01e2e:    	jne    0x370c6
  01e34:    	cmp    DWORD PTR [rdi+0x4],0x33
  01e38:    	jne    0x370c6
  01e3e: 26 	cmp    DWORD PTR [rip+0xffffffffffff59b9],0x26        # 0xffff77fe
  01e45:    	jne    0x370c6
  01e4b:    	mov    esi,DWORD PTR [rip+0x2c8]        # 0x2119
  01e51:    	cmp    esi,0xffffffff
  01e54:    	je     0x370d5
  01e5a:    	cmp    WORD PTR [rdi+0x2],0x3
  01e5f:    	jne    0x1e78
  01e65:    	cmp    esi,0x6
  01e68:    	jge    0x1e78
  01e6e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01e73:    	jmp    0x1e96
  01e78:    	sub    rsp,0x10
  01e7c:    	movq   QWORD PTR [rsp],xmm5
  01e81: 45 	movabs rax,0x564559818b00
  01e8b:    	call   rax
  01e8d:    	movq   xmm5,QWORD PTR [rsp]
  01e92:    	add    rsp,0x10
  01e96: ff 	mov    QWORD PTR [r14-0x98],rax
:00135 
:00136 condnotbr %13 =>:00142
  01e9d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01ea4:    	or     rax,0x10
  01ea8:    	cmp    rax,0x14
  01eac:    	je     0x1f75
:00137 %13 = dynvar(2, %6)
  01eb2:    	mov    rax,QWORD PTR [r14-0x18]
  01eb6:    	mov    rax,QWORD PTR [rax]
  01eb9:    	mov    rax,QWORD PTR [rax-0x48]
  01ebd: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = literal[1.0]
  01ec4: 00 	movq   xmm2,QWORD PTR [rip+0x251]        # 0x211d
  01ecc: 00 	movabs rax,0xff80000000000002
  01ed6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %13 = %13 + %14                      [Float][Float]
  01edd: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ee4: 00 	test   rdi,0x1
  01eeb:    	jne    0x37110
  01ef1: 00 	test   rdi,0x2
  01ef8:    	je     0x1f34
  01efe:    	xorps  xmm3,xmm3
  01f01: 00 	movabs rax,0x8000000000000002
  01f0b:    	cmp    rdi,rax
  01f0e:    	je     0x1f46
  01f14:    	mov    rax,rdi
  01f17:    	sar    rax,0x3f
  01f1b:    	add    rax,0x2
  01f1f:    	and    rdi,0xfffffffffffffffc
  01f23:    	or     rdi,rax
  01f26:    	rol    rdi,0x3d
  01f2a:    	movq   xmm3,rdi
  01f2f:    	jmp    0x1f46
  01f34:    	call   0xffff30ba
  01f39:    	test   rax,rax
  01f3c:    	je     0x37110
  01f42:    	movq   xmm3,xmm0
  01f46:    	addsd  xmm3,xmm2
:00140 dynvar(2, %6) = %13
  01f4a:    	movq   xmm0,xmm3
  01f4e:    	call   0xffff31de
  01f53: ff 	mov    QWORD PTR [r14-0x98],rax
  01f5a:    	mov    rax,QWORD PTR [r14-0x18]
  01f5e:    	mov    rax,QWORD PTR [rax]
  01f61: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01f68:    	mov    QWORD PTR [rax-0x48],rdi
:00141 ret %13
  01f6c: ff 	mov    rax,QWORD PTR [r14-0x98]
  01f73:    	leave  
  01f74:    	ret    
:00142 %13 = literal[0.0]
  01f75: 00 	movq   xmm2,QWORD PTR [rip+0x1b0]        # 0x212d
  01f7d: 00 	movabs rax,0x8000000000000002
  01f87: ff 	mov    QWORD PTR [r14-0x98],rax
:00143 ret %13
  01f8e: ff 	mov    rax,QWORD PTR [r14-0x98]
  01f95:    	leave  
  01f96:    	ret    
==> start whole compile: intersect FuncId(98) self_class:Sphere start:[00000] bytecode:0x564559e8f370
<== finished compile. elapsed:103.9µs
offset:Pos(61688) code: 5811 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x34fea
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x34ff9
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x34ff9
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x35008
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x35008
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffff5639],0x26        # 0xffff56c9
  00090:    	jne    0x35008
  00096:    	mov    esi,DWORD PTR [rip+0x161b]        # 0x16b7
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x35017
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 45 	movabs rax,0x564559818b00
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x35040
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x35040
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff55c8],0x26        # 0xffff56c9
  00101:    	jne    0x35040
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffff55bf],0x0        # 0xffff56cd
  0010e:    	jne    0x3504f
  00114: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011d:    	mov    rax,QWORD PTR [r14-0x78]
  00121:    	mov    QWORD PTR [rsp-0x40],rax
  00126: 00 	mov    rdi,0x1
  0012d:    	mov    rax,QWORD PTR [r14-0x80]
  00131:    	mov    QWORD PTR [rsp-0x48],rax
  00136: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0013f: 07 	movabs rax,0x100070000005c
  00149:    	mov    QWORD PTR [rsp-0x30],rax
  0014e: 45 	movabs r13,0x564559f06550
  00158:    	mov    rsi,QWORD PTR [rbx]
  0015b:    	mov    QWORD PTR [rsp-0x18],rsi
  00160:    	lea    rsi,[rsp-0x18]
  00165:    	mov    QWORD PTR [rbx],rsi
  00168:    	lea    r14,[rsp-0x10]
  0016d:    	mov    QWORD PTR [rsp-0x20],r14
  00172:    	call   0xffff6302
  00177:    	lea    r14,[rbp-0x8]
  0017b:    	mov    QWORD PTR [rbx],r14
  0017e:    	mov    r14,QWORD PTR [rbp-0x10]
  00182:    	test   rax,rax
  00185:    	je     0x35066
  0018b:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  0018f:    	mov    rdi,QWORD PTR [r14-0x38]
  00193: 00 	test   rdi,0x7
  0019a:    	jne    0x35075
  001a0:    	cmp    DWORD PTR [rdi+0x4],0x31
  001a4:    	jne    0x35075
  001aa: 26 	cmp    DWORD PTR [rip+0xffffffffffff5518],0x26        # 0xffff56c9
  001b1:    	jne    0x35075
  001b7:    	mov    esi,DWORD PTR [rip+0x1502]        # 0x16bf
  001bd:    	cmp    esi,0xffffffff
  001c0:    	je     0x35084
  001c6:    	cmp    WORD PTR [rdi+0x2],0x3
  001cb:    	jne    0x1e4
  001d1:    	cmp    esi,0x6
  001d4:    	jge    0x1e4
  001da:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df:    	jmp    0x1f0
  001e4: 45 	movabs rax,0x564559818b00
  001ee:    	call   rax
  001f0:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  001f4:    	mov    rdi,QWORD PTR [r14-0x48]
  001f8: 00 	test   rdi,0x7
  001ff:    	jne    0x350ad
  00205:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00209:    	jne    0x350ad
  0020f: 26 	cmp    DWORD PTR [rip+0xffffffffffff54b3],0x26        # 0xffff56c9
  00216:    	jne    0x350ad
  0021c: 00 	cmp    DWORD PTR [rip+0xffffffffffff54aa],0x0        # 0xffff56cd
  00223:    	jne    0x350bc
  00229: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00232:    	mov    rax,QWORD PTR [r14-0x48]
  00236:    	mov    QWORD PTR [rsp-0x40],rax
  0023b: 00 	mov    rdi,0x1
  00242:    	mov    rax,QWORD PTR [r14-0x78]
  00246:    	mov    QWORD PTR [rsp-0x48],rax
  0024b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00254: 05 	movabs rax,0x100050000005e
  0025e:    	mov    QWORD PTR [rsp-0x30],rax
  00263: 45 	movabs r13,0x564559ecbab0
  0026d:    	mov    rsi,QWORD PTR [rbx]
  00270:    	mov    QWORD PTR [rsp-0x18],rsi
  00275:    	lea    rsi,[rsp-0x18]
  0027a:    	mov    QWORD PTR [rbx],rsi
  0027d:    	lea    r14,[rsp-0x10]
  00282:    	mov    QWORD PTR [rsp-0x20],r14
  00287:    	call   0xffff6390
  0028c:    	lea    r14,[rbp-0x8]
  00290:    	mov    QWORD PTR [rbx],r14
  00293:    	mov    r14,QWORD PTR [rbp-0x10]
  00297:    	test   rax,rax
  0029a:    	je     0x350d3
  002a0:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002a4:    	mov    rax,QWORD PTR [r14-0x48]
  002a8:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002ac:    	mov    rdi,QWORD PTR [r14-0x48]
  002b0: 00 	test   rdi,0x7
  002b7:    	jne    0x350e2
  002bd:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002c1:    	jne    0x350e2
  002c7: 26 	cmp    DWORD PTR [rip+0xffffffffffff53fb],0x26        # 0xffff56c9
  002ce:    	jne    0x350e2
  002d4: 00 	cmp    DWORD PTR [rip+0xffffffffffff53f2],0x0        # 0xffff56cd
  002db:    	jne    0x350f1
  002e1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002ea:    	mov    rax,QWORD PTR [r14-0x48]
  002ee:    	mov    QWORD PTR [rsp-0x40],rax
  002f3: 00 	mov    rdi,0x1
  002fa:    	mov    rax,QWORD PTR [r14-0x78]
  002fe:    	mov    QWORD PTR [rsp-0x48],rax
  00303: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0030c: 05 	movabs rax,0x100050000005e
  00316:    	mov    QWORD PTR [rsp-0x30],rax
  0031b: 45 	movabs r13,0x564559ecbab0
  00325:    	mov    rsi,QWORD PTR [rbx]
  00328:    	mov    QWORD PTR [rsp-0x18],rsi
  0032d:    	lea    rsi,[rsp-0x18]
  00332:    	mov    QWORD PTR [rbx],rsi
  00335:    	lea    r14,[rsp-0x10]
  0033a:    	mov    QWORD PTR [rsp-0x20],r14
  0033f:    	call   0xffff6390
  00344:    	lea    r14,[rbp-0x8]
  00348:    	mov    QWORD PTR [rbx],r14
  0034b:    	mov    r14,QWORD PTR [rbp-0x10]
  0034f:    	test   rax,rax
  00352:    	je     0x35108
  00358:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  0035c:    	mov    rdi,QWORD PTR [r14-0x30]
  00360:    	mov    rax,QWORD PTR [rdi+0x18]
  00364:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  00368:    	mov    rdi,QWORD PTR [r14-0x30]
  0036c:    	mov    rax,QWORD PTR [rdi+0x18]
  00370: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  00377:    	mov    rdi,QWORD PTR [r14-0x80]
  0037b: 00 	test   rdi,0x1
  00382:    	jne    0x35117
  00388: 00 	test   rdi,0x2
  0038f:    	je     0x3cb
  00395:    	xorps  xmm2,xmm2
  00398: 00 	movabs rax,0x8000000000000002
  003a2:    	cmp    rdi,rax
  003a5:    	je     0x3dd
  003ab:    	mov    rax,rdi
  003ae:    	sar    rax,0x3f
  003b2:    	add    rax,0x2
  003b6:    	and    rdi,0xfffffffffffffffc
  003ba:    	or     rdi,rax
  003bd:    	rol    rdi,0x3d
  003c1:    	movq   xmm2,rdi
  003c6:    	jmp    0x3dd
  003cb:    	call   0xffff0f85
  003d0:    	test   rax,rax
  003d3:    	je     0x35117
  003d9:    	movq   xmm2,xmm0
  003dd: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003e4: 00 	test   rdi,0x1
  003eb:    	jne    0x35126
  003f1: 00 	test   rdi,0x2
  003f8:    	je     0x434
  003fe:    	xorps  xmm3,xmm3
  00401: 00 	movabs rax,0x8000000000000002
  0040b:    	cmp    rdi,rax
  0040e:    	je     0x446
  00414:    	mov    rax,rdi
  00417:    	sar    rax,0x3f
  0041b:    	add    rax,0x2
  0041f:    	and    rdi,0xfffffffffffffffc
  00423:    	or     rdi,rax
  00426:    	rol    rdi,0x3d
  0042a:    	movq   xmm3,rdi
  0042f:    	jmp    0x446
  00434:    	call   0xffff0f85
  00439:    	test   rax,rax
  0043c:    	je     0x35126
  00442:    	movq   xmm3,xmm0
  00446:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  0044a:    	mov    rdi,QWORD PTR [r14-0x78]
  0044e: 00 	test   rdi,0x1
  00455:    	jne    0x35135
  0045b: 00 	test   rdi,0x2
  00462:    	je     0x49e
  00468:    	xorps  xmm4,xmm4
  0046b: 00 	movabs rax,0x8000000000000002
  00475:    	cmp    rdi,rax
  00478:    	je     0x4b0
  0047e:    	mov    rax,rdi
  00481:    	sar    rax,0x3f
  00485:    	add    rax,0x2
  00489:    	and    rdi,0xfffffffffffffffc
  0048d:    	or     rdi,rax
  00490:    	rol    rdi,0x3d
  00494:    	movq   xmm4,rdi
  00499:    	jmp    0x4b0
  0049e:    	call   0xffff0f85
  004a3:    	test   rax,rax
  004a6:    	je     0x35135
  004ac:    	movq   xmm4,xmm0
  004b0:    	movq   xmm5,xmm4
  004b4:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  004b8:    	mov    rdi,QWORD PTR [r14-0x50]
  004bc: 00 	test   rdi,0x1
  004c3:    	jne    0x35151
  004c9: 00 	test   rdi,0x2
  004d0:    	je     0x50c
  004d6:    	xorps  xmm6,xmm6
  004d9: 00 	movabs rax,0x8000000000000002
  004e3:    	cmp    rdi,rax
  004e6:    	je     0x51e
  004ec:    	mov    rax,rdi
  004ef:    	sar    rax,0x3f
  004f3:    	add    rax,0x2
  004f7:    	and    rdi,0xfffffffffffffffc
  004fb:    	or     rdi,rax
  004fe:    	rol    rdi,0x3d
  00502:    	movq   xmm6,rdi
  00507:    	jmp    0x51e
  0050c:    	call   0xffff0f85
  00511:    	test   rax,rax
  00514:    	je     0x35151
  0051a:    	movq   xmm6,xmm0
  0051e:    	movq   xmm4,xmm6
  00522:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  00526:    	movq   xmm7,xmm4
  0052a:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  0052e: 00 	movq   xmm4,QWORD PTR [rip+0x1192]        # 0x16c8
  00536: 00 	movabs rax,0x8000000000000002
  00540:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
  00544:    	ucomisd xmm7,xmm4
  00548:    	jbe    0x35d46
:00021 condnotbr _%9 =>:00087
:00022 %9 = %4
:00023 %9 = neg %9                          [Float]
  0054e:    	movq   xmm4,xmm6
  00552: 00 	xorps  xmm4,XMMWORD PTR [rip+0x117f]        # 0x16d8
:00024 %10 = const[Math]                    [Math]
  00559: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5178]        # 0xffff56d8
  00560: 00 	cmp    rax,QWORD PTR [rip+0x1191]        # 0x16f8
  00567:    	jne    0x3517a
  0056d: 00 	mov    rax,QWORD PTR [rip+0x1174]        # 0x16e8
  00574:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.inline MathSqrt(%11; 1)    [#<Class:Math>]
  00578:    	mov    rdi,QWORD PTR [r14-0x80]
  0057c: 00 	test   rdi,0x7
  00583:    	jne    0x35207
  00589:    	cmp    DWORD PTR [rdi+0x4],0x24
  0058d:    	jne    0x35207
  00593: 26 	cmp    DWORD PTR [rip+0xffffffffffff512f],0x26        # 0xffff56c9
  0059a:    	jne    0x35207
  005a0:    	sqrtsd xmm2,xmm7
:00027 
:00028 %7 = %9 - %10                        [Float][Float]
  005a4:    	movq   xmm3,xmm4
  005a8:    	subsd  xmm3,xmm2
:00029 %9 = literal[0.0]
  005ac: 00 	movq   xmm4,QWORD PTR [rip+0x1154]        # 0x1708
  005b4: 00 	movabs rax,0x8000000000000002
  005be:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [Float][Float]
  005c2:    	ucomisd xmm3,xmm4
  005c6:    	jbe    0x35c8f
:00031 condnotbr _%9 =>:00086
:00032 %9 = %2.call t()                     [Isect]
  005cc:    	movq   xmm0,xmm3
  005d0:    	call   0xffff10a9
  005d5:    	mov    QWORD PTR [r14-0x68],rax
  005d9:    	movq   xmm0,xmm5
  005dd:    	call   0xffff10a9
  005e2:    	mov    QWORD PTR [r14-0x58],rax
  005e6:    	movq   xmm0,xmm7
  005ea:    	call   0xffff10a9
  005ef:    	mov    QWORD PTR [r14-0x60],rax
  005f3:    	mov    rdi,QWORD PTR [r14-0x40]
  005f7: 00 	test   rdi,0x7
  005fe:    	jne    0x35244
  00604:    	cmp    DWORD PTR [rdi+0x4],0x33
  00608:    	jne    0x35244
  0060e: 26 	cmp    DWORD PTR [rip+0xffffffffffff50b4],0x26        # 0xffff56c9
  00615:    	jne    0x35244
  0061b:    	mov    esi,DWORD PTR [rip+0x10f3]        # 0x1714
  00621:    	cmp    esi,0xffffffff
  00624:    	je     0x35270
  0062a:    	cmp    WORD PTR [rdi+0x2],0x3
  0062f:    	jne    0x648
  00635:    	cmp    esi,0x6
  00638:    	jge    0x648
  0063e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00643:    	jmp    0x672
  00648:    	sub    rsp,0x10
  0064c:    	movq   QWORD PTR [rsp],xmm2
  00651:    	movq   QWORD PTR [rsp+0x8],xmm7
  00657: 45 	movabs rax,0x564559818b00
  00661:    	call   rax
  00663:    	movq   xmm2,QWORD PTR [rsp]
  00668:    	movq   xmm7,QWORD PTR [rsp+0x8]
  0066e:    	add    rsp,0x10
  00672:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [Float][Float]
  00676:    	mov    rdi,QWORD PTR [r14-0x68]
  0067a: 00 	test   rdi,0x1
  00681:    	jne    0x352b7
  00687: 00 	test   rdi,0x2
  0068e:    	je     0x6ca
  00694:    	xorps  xmm3,xmm3
  00697: 00 	movabs rax,0x8000000000000002
  006a1:    	cmp    rdi,rax
  006a4:    	je     0x6dc
  006aa:    	mov    rax,rdi
  006ad:    	sar    rax,0x3f
  006b1:    	add    rax,0x2
  006b5:    	and    rdi,0xfffffffffffffffc
  006b9:    	or     rdi,rax
  006bc:    	rol    rdi,0x3d
  006c0:    	movq   xmm3,rdi
  006c5:    	jmp    0x6dc
  006ca:    	call   0xffff0f85
  006cf:    	test   rax,rax
  006d2:    	je     0x352b7
  006d8:    	movq   xmm3,xmm0
  006dc:    	mov    rdi,QWORD PTR [r14-0x78]
  006e0: 00 	test   rdi,0x1
  006e7:    	jne    0x352e3
  006ed: 00 	test   rdi,0x2
  006f4:    	je     0x730
  006fa:    	xorps  xmm4,xmm4
  006fd: 00 	movabs rax,0x8000000000000002
  00707:    	cmp    rdi,rax
  0070a:    	je     0x742
  00710:    	mov    rax,rdi
  00713:    	sar    rax,0x3f
  00717:    	add    rax,0x2
  0071b:    	and    rdi,0xfffffffffffffffc
  0071f:    	or     rdi,rax
  00722:    	rol    rdi,0x3d
  00726:    	movq   xmm4,rdi
  0072b:    	jmp    0x742
  00730:    	call   0xffff0f85
  00735:    	test   rax,rax
  00738:    	je     0x352e3
  0073e:    	movq   xmm4,xmm0
  00742:    	ucomisd xmm3,xmm4
  00746:    	jae    0x35ce3
:00035 condnotbr _%9 =>:00086
:00036 _ = %2.call t=(%7; 1)                [Isect]
  0074c:    	mov    rdi,QWORD PTR [r14-0x40]
  00750: 00 	test   rdi,0x7
  00757:    	jne    0x3530f
  0075d:    	cmp    DWORD PTR [rdi+0x4],0x33
  00761:    	jne    0x3530f
  00767: 26 	cmp    DWORD PTR [rip+0xffffffffffff4f5b],0x26        # 0xffff56c9
  0076e:    	jne    0x3530f
  00774:    	mov    esi,DWORD PTR [rip+0xfa2]        # 0x171c
  0077a:    	cmp    esi,0xffffffff
  0077d:    	je     0x3534a
  00783:    	cmp    WORD PTR [rdi+0x2],0x3
  00788:    	jne    0x7a5
  0078e:    	cmp    esi,0x6
  00791:    	jge    0x7a5
  00797:    	mov    rax,QWORD PTR [r14-0x68]
  0079b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007a0:    	jmp    0x7dc
  007a5:    	sub    rsp,0x10
  007a9:    	movq   QWORD PTR [rsp],xmm2
  007ae:    	movq   QWORD PTR [rsp+0x8],xmm7
  007b4:    	mov    rdx,QWORD PTR [r14-0x68]
  007b8: 45 	movabs rax,0x564559818d80
  007c2:    	call   rax
  007c4:    	movq   xmm2,QWORD PTR [rsp]
  007c9:    	movq   xmm7,QWORD PTR [rsp+0x8]
  007cf:    	add    rsp,0x10
  007d3:    	test   rax,rax
  007d6:    	je     0x3533b
:00037 
:00038 %9 = literal[true]
  007dc: 00 	mov    rax,0x1c
  007e3:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [Isect]
  007e7:    	mov    rdi,QWORD PTR [r14-0x40]
  007eb: 00 	test   rdi,0x7
  007f2:    	jne    0x35398
  007f8:    	cmp    DWORD PTR [rdi+0x4],0x33
  007fc:    	jne    0x35398
  00802: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ec0],0x26        # 0xffff56c9
  00809:    	jne    0x35398
  0080f:    	mov    esi,DWORD PTR [rip+0xf0f]        # 0x1724
  00815:    	cmp    esi,0xffffffff
  00818:    	je     0x353d3
  0081e:    	cmp    WORD PTR [rdi+0x2],0x3
  00823:    	jne    0x840
  00829:    	cmp    esi,0x6
  0082c:    	jge    0x840
  00832:    	mov    rax,QWORD PTR [r14-0x78]
  00836:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0083b:    	jmp    0x877
  00840:    	sub    rsp,0x10
  00844:    	movq   QWORD PTR [rsp],xmm2
  00849:    	movq   QWORD PTR [rsp+0x8],xmm7
  0084f:    	mov    rdx,QWORD PTR [r14-0x78]
  00853: 45 	movabs rax,0x564559818d80
  0085d:    	call   rax
  0085f:    	movq   xmm2,QWORD PTR [rsp]
  00864:    	movq   xmm7,QWORD PTR [rsp+0x8]
  0086a:    	add    rsp,0x10
  0086e:    	test   rax,rax
  00871:    	je     0x353c4
:00040 
:00041 %9 = const[Vec]                      [Vec]
  00877: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4e5a]        # 0xffff56d8
  0087e: 00 	cmp    rax,QWORD PTR [rip+0xeb3]        # 0x1738
  00885:    	jne    0x35421
  0088b: 00 	mov    rax,QWORD PTR [rip+0xe96]        # 0x1728
  00892:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [Ray]
  00896:    	mov    rdi,QWORD PTR [r14-0x38]
  0089a: 00 	test   rdi,0x7
  008a1:    	jne    0x3548a
  008a7:    	cmp    DWORD PTR [rdi+0x4],0x31
  008ab:    	jne    0x3548a
  008b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff4e11],0x26        # 0xffff56c9
  008b8:    	jne    0x3548a
  008be:    	mov    esi,DWORD PTR [rip+0xe80]        # 0x1744
  008c4:    	cmp    esi,0xffffffff
  008c7:    	je     0x354a9
  008cd:    	cmp    WORD PTR [rdi+0x2],0x3
  008d2:    	jne    0x8eb
  008d8:    	cmp    esi,0x6
  008db:    	jge    0x8eb
  008e1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008e6:    	jmp    0x909
  008eb:    	sub    rsp,0x10
  008ef:    	movq   QWORD PTR [rsp],xmm7
  008f4: 45 	movabs rax,0x564559818b00
  008fe:    	call   rax
  00900:    	movq   xmm7,QWORD PTR [rsp]
  00905:    	add    rsp,0x10
  00909:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [Vec]
  0090d:    	mov    rdi,QWORD PTR [r14-0x80]
  00911: 00 	test   rdi,0x7
  00918:    	jne    0x354e4
  0091e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00922:    	jne    0x354e4
  00928: 26 	cmp    DWORD PTR [rip+0xffffffffffff4d9a],0x26        # 0xffff56c9
  0092f:    	jne    0x354e4
  00935:    	mov    esi,DWORD PTR [rip+0xe11]        # 0x174c
  0093b:    	cmp    esi,0xffffffff
  0093e:    	je     0x35503
  00944:    	cmp    WORD PTR [rdi+0x2],0x3
  00949:    	jne    0x962
  0094f:    	cmp    esi,0x6
  00952:    	jge    0x962
  00958:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0095d:    	jmp    0x980
  00962:    	sub    rsp,0x10
  00966:    	movq   QWORD PTR [rsp],xmm7
  0096b: 45 	movabs rax,0x564559818b00
  00975:    	call   rax
  00977:    	movq   xmm7,QWORD PTR [rsp]
  0097c:    	add    rsp,0x10
  00980:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [Ray]
  00984:    	mov    rdi,QWORD PTR [r14-0x38]
  00988: 00 	test   rdi,0x7
  0098f:    	jne    0x3553e
  00995:    	cmp    DWORD PTR [rdi+0x4],0x31
  00999:    	jne    0x3553e
  0099f: 26 	cmp    DWORD PTR [rip+0xffffffffffff4d23],0x26        # 0xffff56c9
  009a6:    	jne    0x3553e
  009ac:    	mov    esi,DWORD PTR [rip+0xda2]        # 0x1754
  009b2:    	cmp    esi,0xffffffff
  009b5:    	je     0x3554d
  009bb:    	cmp    WORD PTR [rdi+0x2],0x3
  009c0:    	jne    0x9d9
  009c6:    	cmp    esi,0x6
  009c9:    	jge    0x9d9
  009cf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009d4:    	jmp    0x9e5
  009d9: 45 	movabs rax,0x564559818b00
  009e3:    	call   rax
  009e5: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [Vec]
  009ec: ff 	mov    rdi,QWORD PTR [r14-0x88]
  009f3: 00 	test   rdi,0x7
  009fa:    	jne    0x35576
  00a00:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a04:    	jne    0x35576
  00a0a: 26 	cmp    DWORD PTR [rip+0xffffffffffff4cb8],0x26        # 0xffff56c9
  00a11:    	jne    0x35576
  00a17:    	mov    esi,DWORD PTR [rip+0xd3f]        # 0x175c
  00a1d:    	cmp    esi,0xffffffff
  00a20:    	je     0x35585
  00a26:    	cmp    WORD PTR [rdi+0x2],0x3
  00a2b:    	jne    0xa44
  00a31:    	cmp    esi,0x6
  00a34:    	jge    0xa44
  00a3a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a3f:    	jmp    0xa50
  00a44: 45 	movabs rax,0x564559818b00
  00a4e:    	call   rax
  00a50: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [Float][Float]
  00a57: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00a5e: 00 	test   rdi,0x1
  00a65:    	jne    0x355ae
  00a6b: 00 	test   rdi,0x2
  00a72:    	je     0xaae
  00a78:    	xorps  xmm2,xmm2
  00a7b: 00 	movabs rax,0x8000000000000002
  00a85:    	cmp    rdi,rax
  00a88:    	je     0xac0
  00a8e:    	mov    rax,rdi
  00a91:    	sar    rax,0x3f
  00a95:    	add    rax,0x2
  00a99:    	and    rdi,0xfffffffffffffffc
  00a9d:    	or     rdi,rax
  00aa0:    	rol    rdi,0x3d
  00aa4:    	movq   xmm2,rdi
  00aa9:    	jmp    0xac0
  00aae:    	call   0xffff0f85
  00ab3:    	test   rax,rax
  00ab6:    	je     0x355ae
  00abc:    	movq   xmm2,xmm0
  00ac0:    	mov    rdi,QWORD PTR [r14-0x68]
  00ac4: 00 	test   rdi,0x1
  00acb:    	jne    0x355bd
  00ad1: 00 	test   rdi,0x2
  00ad8:    	je     0xb14
  00ade:    	xorps  xmm3,xmm3
  00ae1: 00 	movabs rax,0x8000000000000002
  00aeb:    	cmp    rdi,rax
  00aee:    	je     0xb26
  00af4:    	mov    rax,rdi
  00af7:    	sar    rax,0x3f
  00afb:    	add    rax,0x2
  00aff:    	and    rdi,0xfffffffffffffffc
  00b03:    	or     rdi,rax
  00b06:    	rol    rdi,0x3d
  00b0a:    	movq   xmm3,rdi
  00b0f:    	jmp    0xb26
  00b14:    	call   0xffff0f85
  00b19:    	test   rax,rax
  00b1c:    	je     0x355bd
  00b22:    	movq   xmm3,xmm0
  00b26:    	mulsd  xmm2,xmm3
:00051 %10 = %10 + %11                      [Float][Float]
  00b2a:    	mov    rdi,QWORD PTR [r14-0x80]
  00b2e: 00 	test   rdi,0x1
  00b35:    	jne    0x355cc
  00b3b: 00 	test   rdi,0x2
  00b42:    	je     0xb7e
  00b48:    	xorps  xmm4,xmm4
  00b4b: 00 	movabs rax,0x8000000000000002
  00b55:    	cmp    rdi,rax
  00b58:    	je     0xb90
  00b5e:    	mov    rax,rdi
  00b61:    	sar    rax,0x3f
  00b65:    	add    rax,0x2
  00b69:    	and    rdi,0xfffffffffffffffc
  00b6d:    	or     rdi,rax
  00b70:    	rol    rdi,0x3d
  00b74:    	movq   xmm4,rdi
  00b79:    	jmp    0xb90
  00b7e:    	call   0xffff0f85
  00b83:    	test   rax,rax
  00b86:    	je     0x355cc
  00b8c:    	movq   xmm4,xmm0
  00b90:    	addsd  xmm4,xmm2
:00052 %11 = %1.call org()                  [Ray]
  00b94:    	mov    rdi,QWORD PTR [r14-0x38]
  00b98: 00 	test   rdi,0x7
  00b9f:    	jne    0x355eb
  00ba5:    	cmp    DWORD PTR [rdi+0x4],0x31
  00ba9:    	jne    0x355eb
  00baf: 26 	cmp    DWORD PTR [rip+0xffffffffffff4b13],0x26        # 0xffff56c9
  00bb6:    	jne    0x355eb
  00bbc:    	mov    esi,DWORD PTR [rip+0xba2]        # 0x1764
  00bc2:    	cmp    esi,0xffffffff
  00bc5:    	je     0x35607
  00bcb:    	cmp    WORD PTR [rdi+0x2],0x3
  00bd0:    	jne    0xbe9
  00bd6:    	cmp    esi,0x6
  00bd9:    	jge    0xbe9
  00bdf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be4:    	jmp    0xc07
  00be9:    	sub    rsp,0x10
  00bed:    	movq   QWORD PTR [rsp],xmm4
  00bf2: 45 	movabs rax,0x564559818b00
  00bfc:    	call   rax
  00bfe:    	movq   xmm4,QWORD PTR [rsp]
  00c03:    	add    rsp,0x10
  00c07: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [Vec]
  00c0e: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00c15: 00 	test   rdi,0x7
  00c1c:    	jne    0x35642
  00c22:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c26:    	jne    0x35642
  00c2c: 26 	cmp    DWORD PTR [rip+0xffffffffffff4a96],0x26        # 0xffff56c9
  00c33:    	jne    0x35642
  00c39:    	mov    esi,DWORD PTR [rip+0xb2d]        # 0x176c
  00c3f:    	cmp    esi,0xffffffff
  00c42:    	je     0x3565e
  00c48:    	cmp    WORD PTR [rdi+0x2],0x3
  00c4d:    	jne    0xc66
  00c53:    	cmp    esi,0x6
  00c56:    	jge    0xc66
  00c5c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c61:    	jmp    0xc84
  00c66:    	sub    rsp,0x10
  00c6a:    	movq   QWORD PTR [rsp],xmm4
  00c6f: 45 	movabs rax,0x564559818b00
  00c79:    	call   rax
  00c7b:    	movq   xmm4,QWORD PTR [rsp]
  00c80:    	add    rsp,0x10
  00c84: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [Ray]
  00c8b:    	mov    rdi,QWORD PTR [r14-0x38]
  00c8f: 00 	test   rdi,0x7
  00c96:    	jne    0x35699
  00c9c:    	cmp    DWORD PTR [rdi+0x4],0x31
  00ca0:    	jne    0x35699
  00ca6: 26 	cmp    DWORD PTR [rip+0xffffffffffff4a1c],0x26        # 0xffff56c9
  00cad:    	jne    0x35699
  00cb3:    	mov    esi,DWORD PTR [rip+0xabb]        # 0x1774
  00cb9:    	cmp    esi,0xffffffff
  00cbc:    	je     0x356b5
  00cc2:    	cmp    WORD PTR [rdi+0x2],0x3
  00cc7:    	jne    0xce0
  00ccd:    	cmp    esi,0x6
  00cd0:    	jge    0xce0
  00cd6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cdb:    	jmp    0xcfe
  00ce0:    	sub    rsp,0x10
  00ce4:    	movq   QWORD PTR [rsp],xmm4
  00ce9: 45 	movabs rax,0x564559818b00
  00cf3:    	call   rax
  00cf5:    	movq   xmm4,QWORD PTR [rsp]
  00cfa:    	add    rsp,0x10
  00cfe: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [Vec]
  00d05: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00d0c: 00 	test   rdi,0x7
  00d13:    	jne    0x356f0
  00d19:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d1d:    	jne    0x356f0
  00d23: 26 	cmp    DWORD PTR [rip+0xffffffffffff499f],0x26        # 0xffff56c9
  00d2a:    	jne    0x356f0
  00d30:    	mov    esi,DWORD PTR [rip+0xa46]        # 0x177c
  00d36:    	cmp    esi,0xffffffff
  00d39:    	je     0x3570c
  00d3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00d44:    	jne    0xd5d
  00d4a:    	cmp    esi,0x6
  00d4d:    	jge    0xd5d
  00d53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d58:    	jmp    0xd7b
  00d5d:    	sub    rsp,0x10
  00d61:    	movq   QWORD PTR [rsp],xmm4
  00d66: 45 	movabs rax,0x564559818b00
  00d70:    	call   rax
  00d72:    	movq   xmm4,QWORD PTR [rsp]
  00d77:    	add    rsp,0x10
  00d7b: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [Float][Float]
  00d82: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00d89: 00 	test   rdi,0x1
  00d90:    	jne    0x35747
  00d96: 00 	test   rdi,0x2
  00d9d:    	je     0xdd9
  00da3:    	xorps  xmm2,xmm2
  00da6: 00 	movabs rax,0x8000000000000002
  00db0:    	cmp    rdi,rax
  00db3:    	je     0xdeb
  00db9:    	mov    rax,rdi
  00dbc:    	sar    rax,0x3f
  00dc0:    	add    rax,0x2
  00dc4:    	and    rdi,0xfffffffffffffffc
  00dc8:    	or     rdi,rax
  00dcb:    	rol    rdi,0x3d
  00dcf:    	movq   xmm2,rdi
  00dd4:    	jmp    0xdeb
  00dd9:    	call   0xffff0f85
  00dde:    	test   rax,rax
  00de1:    	je     0x35747
  00de7:    	movq   xmm2,xmm0
  00deb:    	mov    rdi,QWORD PTR [r14-0x68]
  00def: 00 	test   rdi,0x1
  00df6:    	jne    0x35763
  00dfc: 00 	test   rdi,0x2
  00e03:    	je     0xe3f
  00e09:    	xorps  xmm3,xmm3
  00e0c: 00 	movabs rax,0x8000000000000002
  00e16:    	cmp    rdi,rax
  00e19:    	je     0xe51
  00e1f:    	mov    rax,rdi
  00e22:    	sar    rax,0x3f
  00e26:    	add    rax,0x2
  00e2a:    	and    rdi,0xfffffffffffffffc
  00e2e:    	or     rdi,rax
  00e31:    	rol    rdi,0x3d
  00e35:    	movq   xmm3,rdi
  00e3a:    	jmp    0xe51
  00e3f:    	call   0xffff0f85
  00e44:    	test   rax,rax
  00e47:    	je     0x35763
  00e4d:    	movq   xmm3,xmm0
  00e51:    	mulsd  xmm2,xmm3
:00061 %11 = %11 + %12                      [Float][Float]
  00e55: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e5c: 00 	test   rdi,0x1
  00e63:    	jne    0x3577f
  00e69: 00 	test   rdi,0x2
  00e70:    	je     0xeac
  00e76:    	xorps  xmm5,xmm5
  00e79: 00 	movabs rax,0x8000000000000002
  00e83:    	cmp    rdi,rax
  00e86:    	je     0xebe
  00e8c:    	mov    rax,rdi
  00e8f:    	sar    rax,0x3f
  00e93:    	add    rax,0x2
  00e97:    	and    rdi,0xfffffffffffffffc
  00e9b:    	or     rdi,rax
  00e9e:    	rol    rdi,0x3d
  00ea2:    	movq   xmm5,rdi
  00ea7:    	jmp    0xebe
  00eac:    	call   0xffff0f85
  00eb1:    	test   rax,rax
  00eb4:    	je     0x3577f
  00eba:    	movq   xmm5,xmm0
  00ebe:    	addsd  xmm5,xmm2
:00062 %12 = %1.call org()                  [Ray]
  00ec2:    	mov    rdi,QWORD PTR [r14-0x38]
  00ec6: 00 	test   rdi,0x7
  00ecd:    	jne    0x357ab
  00ed3:    	cmp    DWORD PTR [rdi+0x4],0x31
  00ed7:    	jne    0x357ab
  00edd: 26 	cmp    DWORD PTR [rip+0xffffffffffff47e5],0x26        # 0xffff56c9
  00ee4:    	jne    0x357ab
  00eea:    	mov    esi,DWORD PTR [rip+0x894]        # 0x1784
  00ef0:    	cmp    esi,0xffffffff
  00ef3:    	je     0x357d7
  00ef9:    	cmp    WORD PTR [rdi+0x2],0x3
  00efe:    	jne    0xf17
  00f04:    	cmp    esi,0x6
  00f07:    	jge    0xf17
  00f0d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f12:    	jmp    0xf41
  00f17:    	sub    rsp,0x10
  00f1b:    	movq   QWORD PTR [rsp],xmm4
  00f20:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f26: 45 	movabs rax,0x564559818b00
  00f30:    	call   rax
  00f32:    	movq   xmm4,QWORD PTR [rsp]
  00f37:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f3d:    	add    rsp,0x10
  00f41: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [Vec]
  00f48: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f4f: 00 	test   rdi,0x7
  00f56:    	jne    0x3581e
  00f5c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f60:    	jne    0x3581e
  00f66: 26 	cmp    DWORD PTR [rip+0xffffffffffff475c],0x26        # 0xffff56c9
  00f6d:    	jne    0x3581e
  00f73:    	mov    esi,DWORD PTR [rip+0x813]        # 0x178c
  00f79:    	cmp    esi,0xffffffff
  00f7c:    	je     0x3584a
  00f82:    	cmp    WORD PTR [rdi+0x2],0x3
  00f87:    	jne    0xfa0
  00f8d:    	cmp    esi,0x6
  00f90:    	jge    0xfa0
  00f96:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f9b:    	jmp    0xfca
  00fa0:    	sub    rsp,0x10
  00fa4:    	movq   QWORD PTR [rsp],xmm4
  00fa9:    	movq   QWORD PTR [rsp+0x8],xmm5
  00faf: 45 	movabs rax,0x564559818b00
  00fb9:    	call   rax
  00fbb:    	movq   xmm4,QWORD PTR [rsp]
  00fc0:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fc6:    	add    rsp,0x10
  00fca: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [Ray]
  00fd1:    	mov    rdi,QWORD PTR [r14-0x38]
  00fd5: 00 	test   rdi,0x7
  00fdc:    	jne    0x35891
  00fe2:    	cmp    DWORD PTR [rdi+0x4],0x31
  00fe6:    	jne    0x35891
  00fec: 26 	cmp    DWORD PTR [rip+0xffffffffffff46d6],0x26        # 0xffff56c9
  00ff3:    	jne    0x35891
  00ff9:    	mov    esi,DWORD PTR [rip+0x795]        # 0x1794
  00fff:    	cmp    esi,0xffffffff
  01002:    	je     0x358bd
  01008:    	cmp    WORD PTR [rdi+0x2],0x3
  0100d:    	jne    0x1026
  01013:    	cmp    esi,0x6
  01016:    	jge    0x1026
  0101c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01021:    	jmp    0x1050
  01026:    	sub    rsp,0x10
  0102a:    	movq   QWORD PTR [rsp],xmm4
  0102f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01035: 45 	movabs rax,0x564559818b00
  0103f:    	call   rax
  01041:    	movq   xmm4,QWORD PTR [rsp]
  01046:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0104c:    	add    rsp,0x10
  01050: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [Vec]
  01057: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0105e: 00 	test   rdi,0x7
  01065:    	jne    0x35904
  0106b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0106f:    	jne    0x35904
  01075: 26 	cmp    DWORD PTR [rip+0xffffffffffff464d],0x26        # 0xffff56c9
  0107c:    	jne    0x35904
  01082:    	mov    esi,DWORD PTR [rip+0x714]        # 0x179c
  01088:    	cmp    esi,0xffffffff
  0108b:    	je     0x35930
  01091:    	cmp    WORD PTR [rdi+0x2],0x3
  01096:    	jne    0x10af
  0109c:    	cmp    esi,0x6
  0109f:    	jge    0x10af
  010a5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010aa:    	jmp    0x10d9
  010af:    	sub    rsp,0x10
  010b3:    	movq   QWORD PTR [rsp],xmm4
  010b8:    	movq   QWORD PTR [rsp+0x8],xmm5
  010be: 45 	movabs rax,0x564559818b00
  010c8:    	call   rax
  010ca:    	movq   xmm4,QWORD PTR [rsp]
  010cf:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010d5:    	add    rsp,0x10
  010d9: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [Float][Float]
  010e0: ff 	mov    rdi,QWORD PTR [r14-0x98]
  010e7: 00 	test   rdi,0x1
  010ee:    	jne    0x35977
  010f4: 00 	test   rdi,0x2
  010fb:    	je     0x1137
  01101:    	xorps  xmm2,xmm2
  01104: 00 	movabs rax,0x8000000000000002
  0110e:    	cmp    rdi,rax
  01111:    	je     0x1149
  01117:    	mov    rax,rdi
  0111a:    	sar    rax,0x3f
  0111e:    	add    rax,0x2
  01122:    	and    rdi,0xfffffffffffffffc
  01126:    	or     rdi,rax
  01129:    	rol    rdi,0x3d
  0112d:    	movq   xmm2,rdi
  01132:    	jmp    0x1149
  01137:    	call   0xffff0f85
  0113c:    	test   rax,rax
  0113f:    	je     0x35977
  01145:    	movq   xmm2,xmm0
  01149:    	mov    rdi,QWORD PTR [r14-0x68]
  0114d: 00 	test   rdi,0x1
  01154:    	jne    0x359a3
  0115a: 00 	test   rdi,0x2
  01161:    	je     0x119d
  01167:    	xorps  xmm3,xmm3
  0116a: 00 	movabs rax,0x8000000000000002
  01174:    	cmp    rdi,rax
  01177:    	je     0x11af
  0117d:    	mov    rax,rdi
  01180:    	sar    rax,0x3f
  01184:    	add    rax,0x2
  01188:    	and    rdi,0xfffffffffffffffc
  0118c:    	or     rdi,rax
  0118f:    	rol    rdi,0x3d
  01193:    	movq   xmm3,rdi
  01198:    	jmp    0x11af
  0119d:    	call   0xffff0f85
  011a2:    	test   rax,rax
  011a5:    	je     0x359a3
  011ab:    	movq   xmm3,xmm0
  011af:    	mulsd  xmm2,xmm3
:00071 %12 = %12 + %13                      [Float][Float]
  011b3: ff 	mov    rdi,QWORD PTR [r14-0x90]
  011ba: 00 	test   rdi,0x1
  011c1:    	jne    0x359cf
  011c7: 00 	test   rdi,0x2
  011ce:    	je     0x120a
  011d4:    	xorps  xmm6,xmm6
  011d7: 00 	movabs rax,0x8000000000000002
  011e1:    	cmp    rdi,rax
  011e4:    	je     0x121c
  011ea:    	mov    rax,rdi
  011ed:    	sar    rax,0x3f
  011f1:    	add    rax,0x2
  011f5:    	and    rdi,0xfffffffffffffffc
  011f9:    	or     rdi,rax
  011fc:    	rol    rdi,0x3d
  01200:    	movq   xmm6,rdi
  01205:    	jmp    0x121c
  0120a:    	call   0xffff0f85
  0120f:    	test   rax,rax
  01212:    	je     0x359cf
  01218:    	movq   xmm6,xmm0
  0121c:    	addsd  xmm6,xmm2
:00072 %9 = %9.call new(%10; 3)             [#<Class:Vec>]
  01220:    	movq   xmm0,xmm4
  01224:    	call   0xffff10a9
  01229:    	mov    QWORD PTR [r14-0x80],rax
  0122d:    	movq   xmm0,xmm5
  01231:    	call   0xffff10a9
  01236: ff 	mov    QWORD PTR [r14-0x88],rax
  0123d:    	movq   xmm0,xmm6
  01241:    	call   0xffff10a9
  01246: ff 	mov    QWORD PTR [r14-0x90],rax
  0124d:    	mov    rdi,QWORD PTR [r14-0x78]
  01251: 00 	test   rdi,0x7
  01258:    	jne    0x35a0b
  0125e:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01262:    	jne    0x35a0b
  01268: 26 	cmp    DWORD PTR [rip+0xffffffffffff445a],0x26        # 0xffff56c9
  0126f:    	jne    0x35a0b
  01275: 00 	mov    r9,0x0
  0127c:    	sub    rsp,0x20
  01280:    	movq   QWORD PTR [rsp],xmm2
  01285:    	movq   QWORD PTR [rsp+0x8],xmm4
  0128b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01291:    	movq   QWORD PTR [rsp+0x18],xmm6
  01297:    	mov    rdx,rdi
  0129a:    	mov    QWORD PTR [rsp-0x40],rcx
  0129f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012a8:    	lea    rcx,[r14-0x80]
  012ac: 00 	mov    r8,0x3
  012b3:    	mov    rsi,QWORD PTR [rbx]
  012b6:    	mov    QWORD PTR [rsp-0x18],rsi
  012bb:    	lea    rsi,[rsp-0x18]
  012c0:    	mov    QWORD PTR [rbx],rsi
  012c3:    	lea    r14,[rsp-0x10]
  012c8:    	mov    QWORD PTR [rsp-0x20],r14
  012cd:    	call   0x35a2a
  012d2:    	lea    r14,[rbp-0x8]
  012d6:    	mov    QWORD PTR [rbx],r14
  012d9:    	mov    r14,QWORD PTR [rbp-0x10]
  012dd:    	movq   xmm2,QWORD PTR [rsp]
  012e2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012e8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012ee:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012f4:    	add    rsp,0x20
  012f8:    	test   rax,rax
  012fb:    	je     0x35a5c
  01301:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [Isect]
  01305:    	mov    rdi,QWORD PTR [r14-0x40]
  01309: 00 	test   rdi,0x7
  01310:    	jne    0x35a6b
  01316:    	cmp    DWORD PTR [rdi+0x4],0x33
  0131a:    	jne    0x35a6b
  01320: 26 	cmp    DWORD PTR [rip+0xffffffffffff43a2],0x26        # 0xffff56c9
  01327:    	jne    0x35a6b
  0132d:    	mov    esi,DWORD PTR [rip+0x471]        # 0x17a4
  01333:    	cmp    esi,0xffffffff
  01336:    	je     0x35a99
  0133c:    	cmp    WORD PTR [rdi+0x2],0x3
  01341:    	jne    0x135e
  01347:    	cmp    esi,0x6
  0134a:    	jge    0x135e
  01350:    	mov    rax,QWORD PTR [r14-0x78]
  01354:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01359:    	jmp    0x13ad
  0135e:    	sub    rsp,0x20
  01362:    	movq   QWORD PTR [rsp],xmm2
  01367:    	movq   QWORD PTR [rsp+0x8],xmm4
  0136d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01373:    	movq   QWORD PTR [rsp+0x18],xmm6
  01379:    	mov    rdx,QWORD PTR [r14-0x78]
  0137d: 45 	movabs rax,0x564559818d80
  01387:    	call   rax
  01389:    	movq   xmm2,QWORD PTR [rsp]
  0138e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01394:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0139a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013a0:    	add    rsp,0x20
  013a4:    	test   rax,rax
  013a7:    	je     0x35a8a
:00075 
:00076 %9 = %2.call pl()                    [Isect]
  013ad:    	mov    rdi,QWORD PTR [r14-0x40]
  013b1: 00 	test   rdi,0x7
  013b8:    	jne    0x35aff
  013be:    	cmp    DWORD PTR [rdi+0x4],0x33
  013c2:    	jne    0x35aff
  013c8: 26 	cmp    DWORD PTR [rip+0xffffffffffff42fa],0x26        # 0xffff56c9
  013cf:    	jne    0x35aff
  013d5:    	mov    esi,DWORD PTR [rip+0x3d1]        # 0x17ac
  013db:    	cmp    esi,0xffffffff
  013de:    	je     0x35b1e
  013e4:    	cmp    WORD PTR [rdi+0x2],0x3
  013e9:    	jne    0x1402
  013ef:    	cmp    esi,0x6
  013f2:    	jge    0x1402
  013f8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013fd:    	jmp    0x1444
  01402:    	sub    rsp,0x20
  01406:    	movq   QWORD PTR [rsp],xmm2
  0140b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01411:    	movq   QWORD PTR [rsp+0x10],xmm5
  01417:    	movq   QWORD PTR [rsp+0x18],xmm6
  0141d: 45 	movabs rax,0x564559818b00
  01427:    	call   rax
  01429:    	movq   xmm2,QWORD PTR [rsp]
  0142e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01434:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0143a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01440:    	add    rsp,0x20
  01444:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: Sphere[IvarId(0)]
  01448:    	mov    rdi,QWORD PTR [r14-0x30]
  0144c:    	mov    rax,QWORD PTR [rdi+0x10]
  01450:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [Vec]
  01454:    	mov    rdi,QWORD PTR [r14-0x78]
  01458: 00 	test   rdi,0x7
  0145f:    	jne    0x35b7d
  01465:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01469:    	jne    0x35b7d
  0146f: 26 	cmp    DWORD PTR [rip+0xffffffffffff4253],0x26        # 0xffff56c9
  01476:    	jne    0x35b7d
  0147c:    	sub    rsp,0x20
  01480:    	movq   QWORD PTR [rsp],xmm2
  01485:    	movq   QWORD PTR [rsp+0x8],xmm5
  0148b:    	movq   QWORD PTR [rsp+0x10],xmm6
  01491: 00 	cmp    DWORD PTR [rip+0xffffffffffff4235],0x0        # 0xffff56cd
  01498:    	jne    0x35b9c
  0149e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014a7:    	mov    rax,QWORD PTR [r14-0x78]
  014ab:    	mov    QWORD PTR [rsp-0x40],rax
  014b0: 00 	mov    rdi,0x1
  014b7:    	mov    rax,QWORD PTR [r14-0x80]
  014bb:    	mov    QWORD PTR [rsp-0x48],rax
  014c0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014c9: 07 	movabs rax,0x100070000005c
  014d3:    	mov    QWORD PTR [rsp-0x30],rax
  014d8: 45 	movabs r13,0x564559f06550
  014e2:    	mov    rsi,QWORD PTR [rbx]
  014e5:    	mov    QWORD PTR [rsp-0x18],rsi
  014ea:    	lea    rsi,[rsp-0x18]
  014ef:    	mov    QWORD PTR [rbx],rsi
  014f2:    	lea    r14,[rsp-0x10]
  014f7:    	mov    QWORD PTR [rsp-0x20],r14
  014fc:    	call   0xffff6302
  01501:    	lea    r14,[rbp-0x8]
  01505:    	mov    QWORD PTR [rbx],r14
  01508:    	mov    r14,QWORD PTR [rbp-0x10]
  0150c:    	movq   xmm2,QWORD PTR [rsp]
  01511:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01517:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0151d:    	add    rsp,0x20
  01521:    	test   rax,rax
  01524:    	je     0x35bb3
  0152a:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [Vec]
  0152e:    	mov    rdi,QWORD PTR [r14-0x70]
  01532: 00 	test   rdi,0x7
  01539:    	jne    0x35bc2
  0153f:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01543:    	jne    0x35bc2
  01549: 26 	cmp    DWORD PTR [rip+0xffffffffffff4179],0x26        # 0xffff56c9
  01550:    	jne    0x35bc2
  01556:    	sub    rsp,0x20
  0155a:    	movq   QWORD PTR [rsp],xmm2
  0155f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01565:    	movq   QWORD PTR [rsp+0x10],xmm6
  0156b: 00 	cmp    DWORD PTR [rip+0xffffffffffff415b],0x0        # 0xffff56cd
  01572:    	jne    0x35be1
  01578: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01581:    	mov    rax,QWORD PTR [r14-0x70]
  01585:    	mov    QWORD PTR [rsp-0x40],rax
  0158a: 00 	mov    rdi,0x0
  01591: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0159a: 07 	movabs rax,0x1000700000060
  015a4:    	mov    QWORD PTR [rsp-0x30],rax
  015a9: 45 	movabs r13,0x564559ea5f60
  015b3:    	mov    rsi,QWORD PTR [rbx]
  015b6:    	mov    QWORD PTR [rsp-0x18],rsi
  015bb:    	lea    rsi,[rsp-0x18]
  015c0:    	mov    QWORD PTR [rbx],rsi
  015c3:    	lea    r14,[rsp-0x10]
  015c8:    	mov    QWORD PTR [rsp-0x20],r14
  015cd:    	call   0xffff5f7b
  015d2:    	lea    r14,[rbp-0x8]
  015d6:    	mov    QWORD PTR [rbx],r14
  015d9:    	mov    r14,QWORD PTR [rbp-0x10]
  015dd:    	movq   xmm2,QWORD PTR [rsp]
  015e2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015e8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015ee:    	add    rsp,0x20
  015f2:    	test   rax,rax
  015f5:    	je     0x35bf8
  015fb:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [Isect]
  015ff:    	mov    rdi,QWORD PTR [r14-0x40]
  01603: 00 	test   rdi,0x7
  0160a:    	jne    0x35c07
  01610:    	cmp    DWORD PTR [rdi+0x4],0x33
  01614:    	jne    0x35c07
  0161a: 26 	cmp    DWORD PTR [rip+0xffffffffffff40a8],0x26        # 0xffff56c9
  01621:    	jne    0x35c07
  01627:    	mov    esi,DWORD PTR [rip+0x187]        # 0x17b4
  0162d:    	cmp    esi,0xffffffff
  01630:    	je     0x35c35
  01636:    	cmp    WORD PTR [rdi+0x2],0x3
  0163b:    	jne    0x1658
  01641:    	cmp    esi,0x6
  01644:    	jge    0x1658
  0164a:    	mov    rax,QWORD PTR [r14-0x78]
  0164e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01653:    	jmp    0x169b
  01658:    	sub    rsp,0x20
  0165c:    	movq   QWORD PTR [rsp],xmm2
  01661:    	movq   QWORD PTR [rsp+0x8],xmm5
  01667:    	movq   QWORD PTR [rsp+0x10],xmm6
  0166d:    	mov    rdx,QWORD PTR [r14-0x78]
  01671: 45 	movabs rax,0x564559818d80
  0167b:    	call   rax
  0167d:    	movq   xmm2,QWORD PTR [rsp]
  01682:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01688:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0168e:    	add    rsp,0x20
  01692:    	test   rax,rax
  01695:    	je     0x35c26
:00084 
:00085 br =>:00086
  0169b:    	jmp    0x35d19
:00086 br =>:00087
  016a0:    	jmp    0x35d86
:00087 %9 = nil
  016a5: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  016ad:    	mov    rax,QWORD PTR [r14-0x78]
  016b1:    	leave  
  016b2:    	ret    
==> start whole compile: <unnamed> FuncId(106) self_class:Scene start:[00000] bytecode:0x564559ee14d0
<== finished compile. elapsed:23.7µs
offset:Pos(67760) code: 247 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x345fa
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x345fa
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x30]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7077889]
  00071: mov    rax,0xd80003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x34609
  0008d: cmp    DWORD PTR [rip+0xffffffffffff3e7d],0x26        # 0xffff3f11
  00094: jne    0x34609
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x34618
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: test   rax,rax
  000e7: je     0x3464a
  000ed: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  000f1: mov    rax,QWORD PTR [r14-0x40]
  000f5: leave  
  000f6: ret    
==> start whole compile: vcross FuncId(93) self_class:Vec start:[00000] bytecode:0x564559e86470
<== finished compile. elapsed:70µs
offset:Pos(68007) code: 2426 bytes  data: 87 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x34562
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    QWORD PTR [r14-0x68],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x34571
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x34571
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004e: mov    rax,QWORD PTR [rip+0xffffffffffff3dd4]        # 0xffff3e29
  00055: cmp    rax,QWORD PTR [rip+0x93d]        # 0x999
  0005c: jne    0x34580
  00062: mov    rax,QWORD PTR [rip+0x920]        # 0x989
  00069: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @y: Vec[IvarId(1)]
  0006d: mov    rdi,QWORD PTR [r14-0x30]
  00071: mov    rax,QWORD PTR [rdi+0x18]
  00075: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call z()                     [Vec]
  00079: mov    rdi,QWORD PTR [r14-0x38]
  0007d: test   rdi,0x7
  00084: jne    0x345cb
  0008a: cmp    DWORD PTR [rdi+0x4],0x2b
  0008e: jne    0x345cb
  00094: cmp    DWORD PTR [rip+0xffffffffffff3d7f],0x26        # 0xffff3e1a
  0009b: jne    0x345cb
  000a1: mov    esi,DWORD PTR [rip+0x8fe]        # 0x9a5
  000a7: cmp    esi,0xffffffff
  000aa: je     0x345da
  000b0: cmp    WORD PTR [rdi+0x2],0x3
  000b5: jne    0xce
  000bb: cmp    esi,0x6
  000be: jge    0xce
  000c4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c9: jmp    0xda
  000ce: movabs rax,0x564559818b00
  000d8: call   rax
  000da: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 * %4                         [Float][Float]
  000de: mov    rdi,QWORD PTR [r14-0x48]
  000e2: test   rdi,0x1
  000e9: jne    0x34603
  000ef: test   rdi,0x2
  000f6: je     0x132
  000fc: xorps  xmm2,xmm2
  000ff: movabs rax,0x8000000000000002
  00109: cmp    rdi,rax
  0010c: je     0x144
  00112: mov    rax,rdi
  00115: sar    rax,0x3f
  00119: add    rax,0x2
  0011d: and    rdi,0xfffffffffffffffc
  00121: or     rdi,rax
  00124: rol    rdi,0x3d
  00128: movq   xmm2,rdi
  0012d: jmp    0x144
  00132: call   0xfffef6d6
  00137: test   rax,rax
  0013a: je     0x34603
  00140: movq   xmm2,xmm0
  00144: mov    rdi,QWORD PTR [r14-0x50]
  00148: test   rdi,0x1
  0014f: jne    0x34612
  00155: test   rdi,0x2
  0015c: je     0x198
  00162: xorps  xmm3,xmm3
  00165: movabs rax,0x8000000000000002
  0016f: cmp    rdi,rax
  00172: je     0x1aa
  00178: mov    rax,rdi
  0017b: sar    rax,0x3f
  0017f: add    rax,0x2
  00183: and    rdi,0xfffffffffffffffc
  00187: or     rdi,rax
  0018a: rol    rdi,0x3d
  0018e: movq   xmm3,rdi
  00193: jmp    0x1aa
  00198: call   0xfffef6d6
  0019d: test   rax,rax
  001a0: je     0x34612
  001a6: movq   xmm3,xmm0
  001aa: mulsd  xmm2,xmm3
:00006 %4 = @z: Vec[IvarId(2)]
  001ae: mov    rdi,QWORD PTR [r14-0x30]
  001b2: mov    rax,QWORD PTR [rdi+0x20]
  001b6: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001ba: mov    rdi,QWORD PTR [r14-0x38]
  001be: test   rdi,0x7
  001c5: jne    0x34621
  001cb: cmp    DWORD PTR [rdi+0x4],0x2b
  001cf: jne    0x34621
  001d5: cmp    DWORD PTR [rip+0xffffffffffff3c3e],0x26        # 0xffff3e1a
  001dc: jne    0x34621
  001e2: mov    esi,DWORD PTR [rip+0x7c5]        # 0x9ad
  001e8: cmp    esi,0xffffffff
  001eb: je     0x3463d
  001f1: cmp    WORD PTR [rdi+0x2],0x3
  001f6: jne    0x20f
  001fc: cmp    esi,0x6
  001ff: jge    0x20f
  00205: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020a: jmp    0x22d
  0020f: sub    rsp,0x10
  00213: movq   QWORD PTR [rsp],xmm2
  00218: movabs rax,0x564559818b00
  00222: call   rax
  00224: movq   xmm2,QWORD PTR [rsp]
  00229: add    rsp,0x10
  0022d: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 * %5                         [Float][Float]
  00231: mov    rdi,QWORD PTR [r14-0x50]
  00235: test   rdi,0x1
  0023c: jne    0x34678
  00242: test   rdi,0x2
  00249: je     0x285
  0024f: xorps  xmm3,xmm3
  00252: movabs rax,0x8000000000000002
  0025c: cmp    rdi,rax
  0025f: je     0x297
  00265: mov    rax,rdi
  00268: sar    rax,0x3f
  0026c: add    rax,0x2
  00270: and    rdi,0xfffffffffffffffc
  00274: or     rdi,rax
  00277: rol    rdi,0x3d
  0027b: movq   xmm3,rdi
  00280: jmp    0x297
  00285: call   0xfffef6d6
  0028a: test   rax,rax
  0028d: je     0x34678
  00293: movq   xmm3,xmm0
  00297: mov    rdi,QWORD PTR [r14-0x58]
  0029b: test   rdi,0x1
  002a2: jne    0x34694
  002a8: test   rdi,0x2
  002af: je     0x2eb
  002b5: xorps  xmm4,xmm4
  002b8: movabs rax,0x8000000000000002
  002c2: cmp    rdi,rax
  002c5: je     0x2fd
  002cb: mov    rax,rdi
  002ce: sar    rax,0x3f
  002d2: add    rax,0x2
  002d6: and    rdi,0xfffffffffffffffc
  002da: or     rdi,rax
  002dd: rol    rdi,0x3d
  002e1: movq   xmm4,rdi
  002e6: jmp    0x2fd
  002eb: call   0xfffef6d6
  002f0: test   rax,rax
  002f3: je     0x34694
  002f9: movq   xmm4,xmm0
  002fd: mulsd  xmm3,xmm4
:00010 %3 = %3 - %4                         [Float][Float]
  00301: subsd  xmm2,xmm3
:00011 %4 = @z: Vec[IvarId(2)]
  00305: mov    rdi,QWORD PTR [r14-0x30]
  00309: mov    rax,QWORD PTR [rdi+0x20]
  0030d: mov    QWORD PTR [r14-0x50],rax
:00012 %5 = %1.call x()                     [Vec]
  00311: mov    rdi,QWORD PTR [r14-0x38]
  00315: test   rdi,0x7
  0031c: jne    0x346b0
  00322: cmp    DWORD PTR [rdi+0x4],0x2b
  00326: jne    0x346b0
  0032c: cmp    DWORD PTR [rip+0xffffffffffff3ae7],0x26        # 0xffff3e1a
  00333: jne    0x346b0
  00339: mov    esi,DWORD PTR [rip+0x676]        # 0x9b5
  0033f: cmp    esi,0xffffffff
  00342: je     0x346cc
  00348: cmp    WORD PTR [rdi+0x2],0x3
  0034d: jne    0x366
  00353: cmp    esi,0x6
  00356: jge    0x366
  0035c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00361: jmp    0x384
  00366: sub    rsp,0x10
  0036a: movq   QWORD PTR [rsp],xmm2
  0036f: movabs rax,0x564559818b00
  00379: call   rax
  0037b: movq   xmm2,QWORD PTR [rsp]
  00380: add    rsp,0x10
  00384: mov    QWORD PTR [r14-0x58],rax
:00013 
:00014 %4 = %4 * %5                         [Float][Float]
  00388: mov    rdi,QWORD PTR [r14-0x50]
  0038c: test   rdi,0x1
  00393: jne    0x34707
  00399: test   rdi,0x2
  003a0: je     0x3dc
  003a6: xorps  xmm3,xmm3
  003a9: movabs rax,0x8000000000000002
  003b3: cmp    rdi,rax
  003b6: je     0x3ee
  003bc: mov    rax,rdi
  003bf: sar    rax,0x3f
  003c3: add    rax,0x2
  003c7: and    rdi,0xfffffffffffffffc
  003cb: or     rdi,rax
  003ce: rol    rdi,0x3d
  003d2: movq   xmm3,rdi
  003d7: jmp    0x3ee
  003dc: call   0xfffef6d6
  003e1: test   rax,rax
  003e4: je     0x34707
  003ea: movq   xmm3,xmm0
  003ee: mov    rdi,QWORD PTR [r14-0x58]
  003f2: test   rdi,0x1
  003f9: jne    0x34723
  003ff: test   rdi,0x2
  00406: je     0x442
  0040c: xorps  xmm4,xmm4
  0040f: movabs rax,0x8000000000000002
  00419: cmp    rdi,rax
  0041c: je     0x454
  00422: mov    rax,rdi
  00425: sar    rax,0x3f
  00429: add    rax,0x2
  0042d: and    rdi,0xfffffffffffffffc
  00431: or     rdi,rax
  00434: rol    rdi,0x3d
  00438: movq   xmm4,rdi
  0043d: jmp    0x454
  00442: call   0xfffef6d6
  00447: test   rax,rax
  0044a: je     0x34723
  00450: movq   xmm4,xmm0
  00454: mulsd  xmm3,xmm4
:00015 %5 = @x: Vec[IvarId(0)]
  00458: mov    rdi,QWORD PTR [r14-0x30]
  0045c: mov    rax,QWORD PTR [rdi+0x10]
  00460: mov    QWORD PTR [r14-0x58],rax
:00016 %6 = %1.call z()                     [Vec]
  00464: mov    rdi,QWORD PTR [r14-0x38]
  00468: test   rdi,0x7
  0046f: jne    0x3473f
  00475: cmp    DWORD PTR [rdi+0x4],0x2b
  00479: jne    0x3473f
  0047f: cmp    DWORD PTR [rip+0xffffffffffff3994],0x26        # 0xffff3e1a
  00486: jne    0x3473f
  0048c: mov    esi,DWORD PTR [rip+0x52b]        # 0x9bd
  00492: cmp    esi,0xffffffff
  00495: je     0x34768
  0049b: cmp    WORD PTR [rdi+0x2],0x3
  004a0: jne    0x4b9
  004a6: cmp    esi,0x6
  004a9: jge    0x4b9
  004af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004b4: jmp    0x4e3
  004b9: sub    rsp,0x10
  004bd: movq   QWORD PTR [rsp],xmm2
  004c2: movq   QWORD PTR [rsp+0x8],xmm3
  004c8: movabs rax,0x564559818b00
  004d2: call   rax
  004d4: movq   xmm2,QWORD PTR [rsp]
  004d9: movq   xmm3,QWORD PTR [rsp+0x8]
  004df: add    rsp,0x10
  004e3: mov    QWORD PTR [r14-0x60],rax
:00017 
:00018 %5 = %5 * %6                         [Float][Float]
  004e7: mov    rdi,QWORD PTR [r14-0x58]
  004eb: test   rdi,0x1
  004f2: jne    0x347af
  004f8: test   rdi,0x2
  004ff: je     0x53b
  00505: xorps  xmm4,xmm4
  00508: movabs rax,0x8000000000000002
  00512: cmp    rdi,rax
  00515: je     0x54d
  0051b: mov    rax,rdi
  0051e: sar    rax,0x3f
  00522: add    rax,0x2
  00526: and    rdi,0xfffffffffffffffc
  0052a: or     rdi,rax
  0052d: rol    rdi,0x3d
  00531: movq   xmm4,rdi
  00536: jmp    0x54d
  0053b: call   0xfffef6d6
  00540: test   rax,rax
  00543: je     0x347af
  00549: movq   xmm4,xmm0
  0054d: mov    rdi,QWORD PTR [r14-0x60]
  00551: test   rdi,0x1
  00558: jne    0x347d8
  0055e: test   rdi,0x2
  00565: je     0x5a1
  0056b: xorps  xmm5,xmm5
  0056e: movabs rax,0x8000000000000002
  00578: cmp    rdi,rax
  0057b: je     0x5b3
  00581: mov    rax,rdi
  00584: sar    rax,0x3f
  00588: add    rax,0x2
  0058c: and    rdi,0xfffffffffffffffc
  00590: or     rdi,rax
  00593: rol    rdi,0x3d
  00597: movq   xmm5,rdi
  0059c: jmp    0x5b3
  005a1: call   0xfffef6d6
  005a6: test   rax,rax
  005a9: je     0x347d8
  005af: movq   xmm5,xmm0
  005b3: mulsd  xmm4,xmm5
:00019 %4 = %4 - %5                         [Float][Float]
  005b7: subsd  xmm3,xmm4
:00020 %5 = @x: Vec[IvarId(0)]
  005bb: mov    rdi,QWORD PTR [r14-0x30]
  005bf: mov    rax,QWORD PTR [rdi+0x10]
  005c3: mov    QWORD PTR [r14-0x58],rax
:00021 %6 = %1.call y()                     [Vec]
  005c7: mov    rdi,QWORD PTR [r14-0x38]
  005cb: test   rdi,0x7
  005d2: jne    0x34801
  005d8: cmp    DWORD PTR [rdi+0x4],0x2b
  005dc: jne    0x34801
  005e2: cmp    DWORD PTR [rip+0xffffffffffff3831],0x26        # 0xffff3e1a
  005e9: jne    0x34801
  005ef: mov    esi,DWORD PTR [rip+0x3d0]        # 0x9c5
  005f5: cmp    esi,0xffffffff
  005f8: je     0x3482a
  005fe: cmp    WORD PTR [rdi+0x2],0x3
  00603: jne    0x61c
  00609: cmp    esi,0x6
  0060c: jge    0x61c
  00612: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00617: jmp    0x646
  0061c: sub    rsp,0x10
  00620: movq   QWORD PTR [rsp],xmm2
  00625: movq   QWORD PTR [rsp+0x8],xmm3
  0062b: movabs rax,0x564559818b00
  00635: call   rax
  00637: movq   xmm2,QWORD PTR [rsp]
  0063c: movq   xmm3,QWORD PTR [rsp+0x8]
  00642: add    rsp,0x10
  00646: mov    QWORD PTR [r14-0x60],rax
:00022 
:00023 %5 = %5 * %6                         [Float][Float]
  0064a: mov    rdi,QWORD PTR [r14-0x58]
  0064e: test   rdi,0x1
  00655: jne    0x34871
  0065b: test   rdi,0x2
  00662: je     0x69e
  00668: xorps  xmm4,xmm4
  0066b: movabs rax,0x8000000000000002
  00675: cmp    rdi,rax
  00678: je     0x6b0
  0067e: mov    rax,rdi
  00681: sar    rax,0x3f
  00685: add    rax,0x2
  00689: and    rdi,0xfffffffffffffffc
  0068d: or     rdi,rax
  00690: rol    rdi,0x3d
  00694: movq   xmm4,rdi
  00699: jmp    0x6b0
  0069e: call   0xfffef6d6
  006a3: test   rax,rax
  006a6: je     0x34871
  006ac: movq   xmm4,xmm0
  006b0: mov    rdi,QWORD PTR [r14-0x60]
  006b4: test   rdi,0x1
  006bb: jne    0x3489a
  006c1: test   rdi,0x2
  006c8: je     0x704
  006ce: xorps  xmm5,xmm5
  006d1: movabs rax,0x8000000000000002
  006db: cmp    rdi,rax
  006de: je     0x716
  006e4: mov    rax,rdi
  006e7: sar    rax,0x3f
  006eb: add    rax,0x2
  006ef: and    rdi,0xfffffffffffffffc
  006f3: or     rdi,rax
  006f6: rol    rdi,0x3d
  006fa: movq   xmm5,rdi
  006ff: jmp    0x716
  00704: call   0xfffef6d6
  00709: test   rax,rax
  0070c: je     0x3489a
  00712: movq   xmm5,xmm0
  00716: mulsd  xmm4,xmm5
:00024 %6 = @y: Vec[IvarId(1)]
  0071a: mov    rdi,QWORD PTR [r14-0x30]
  0071e: mov    rax,QWORD PTR [rdi+0x18]
  00722: mov    QWORD PTR [r14-0x60],rax
:00025 %7 = %1.call x()                     [Vec]
  00726: mov    rdi,QWORD PTR [r14-0x38]
  0072a: test   rdi,0x7
  00731: jne    0x348c3
  00737: cmp    DWORD PTR [rdi+0x4],0x2b
  0073b: jne    0x348c3
  00741: cmp    DWORD PTR [rip+0xffffffffffff36d2],0x26        # 0xffff3e1a
  00748: jne    0x348c3
  0074e: mov    esi,DWORD PTR [rip+0x279]        # 0x9cd
  00754: cmp    esi,0xffffffff
  00757: je     0x348f9
  0075d: cmp    WORD PTR [rdi+0x2],0x3
  00762: jne    0x77b
  00768: cmp    esi,0x6
  0076b: jge    0x77b
  00771: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00776: jmp    0x7b1
  0077b: sub    rsp,0x20
  0077f: movq   QWORD PTR [rsp],xmm2
  00784: movq   QWORD PTR [rsp+0x8],xmm3
  0078a: movq   QWORD PTR [rsp+0x10],xmm4
  00790: movabs rax,0x564559818b00
  0079a: call   rax
  0079c: movq   xmm2,QWORD PTR [rsp]
  007a1: movq   xmm3,QWORD PTR [rsp+0x8]
  007a7: movq   xmm4,QWORD PTR [rsp+0x10]
  007ad: add    rsp,0x20
  007b1: mov    QWORD PTR [r14-0x68],rax
:00026 
:00027 %6 = %6 * %7                         [Float][Float]
  007b5: mov    rdi,QWORD PTR [r14-0x60]
  007b9: test   rdi,0x1
  007c0: jne    0x3494c
  007c6: test   rdi,0x2
  007cd: je     0x809
  007d3: xorps  xmm5,xmm5
  007d6: movabs rax,0x8000000000000002
  007e0: cmp    rdi,rax
  007e3: je     0x81b
  007e9: mov    rax,rdi
  007ec: sar    rax,0x3f
  007f0: add    rax,0x2
  007f4: and    rdi,0xfffffffffffffffc
  007f8: or     rdi,rax
  007fb: rol    rdi,0x3d
  007ff: movq   xmm5,rdi
  00804: jmp    0x81b
  00809: call   0xfffef6d6
  0080e: test   rax,rax
  00811: je     0x3494c
  00817: movq   xmm5,xmm0
  0081b: mov    rdi,QWORD PTR [r14-0x68]
  0081f: test   rdi,0x1
  00826: jne    0x34982
  0082c: test   rdi,0x2
  00833: je     0x86f
  00839: xorps  xmm6,xmm6
  0083c: movabs rax,0x8000000000000002
  00846: cmp    rdi,rax
  00849: je     0x881
  0084f: mov    rax,rdi
  00852: sar    rax,0x3f
  00856: add    rax,0x2
  0085a: and    rdi,0xfffffffffffffffc
  0085e: or     rdi,rax
  00861: rol    rdi,0x3d
  00865: movq   xmm6,rdi
  0086a: jmp    0x881
  0086f: call   0xfffef6d6
  00874: test   rax,rax
  00877: je     0x34982
  0087d: movq   xmm6,xmm0
  00881: mulsd  xmm5,xmm6
:00028 %5 = %5 - %6                         [Float][Float]
  00885: subsd  xmm4,xmm5
:00029 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  00889: movq   xmm0,xmm2
  0088d: call   0xfffef7fa
  00892: mov    QWORD PTR [r14-0x48],rax
  00896: movq   xmm0,xmm3
  0089a: call   0xfffef7fa
  0089f: mov    QWORD PTR [r14-0x50],rax
  008a3: movq   xmm0,xmm4
  008a7: call   0xfffef7fa
  008ac: mov    QWORD PTR [r14-0x58],rax
  008b0: mov    rdi,QWORD PTR [r14-0x40]
  008b4: test   rdi,0x7
  008bb: jne    0x349b8
  008c1: cmp    DWORD PTR [rdi+0x4],0x2c
  008c5: jne    0x349b8
  008cb: cmp    DWORD PTR [rip+0xffffffffffff3548],0x26        # 0xffff3e1a
  008d2: jne    0x349b8
  008d8: mov    r9,0x0
  008df: sub    rsp,0x30
  008e3: movq   QWORD PTR [rsp],xmm2
  008e8: movq   QWORD PTR [rsp+0x8],xmm3
  008ee: movq   QWORD PTR [rsp+0x10],xmm4
  008f4: movq   QWORD PTR [rsp+0x18],xmm5
  008fa: movq   QWORD PTR [rsp+0x20],xmm6
  00900: mov    rdx,rdi
  00903: mov    QWORD PTR [rsp-0x40],rcx
  00908: mov    QWORD PTR [rsp-0x28],0x0
  00911: lea    rcx,[r14-0x48]
  00915: mov    r8,0x3
  0091c: mov    rsi,QWORD PTR [rbx]
  0091f: mov    QWORD PTR [rsp-0x18],rsi
  00924: lea    rsi,[rsp-0x18]
  00929: mov    QWORD PTR [rbx],rsi
  0092c: lea    r14,[rsp-0x10]
  00931: mov    QWORD PTR [rsp-0x20],r14
  00936: call   0x349d4
  0093b: lea    r14,[rbp-0x8]
  0093f: mov    QWORD PTR [rbx],r14
  00942: mov    r14,QWORD PTR [rbp-0x10]
  00946: movq   xmm2,QWORD PTR [rsp]
  0094b: movq   xmm3,QWORD PTR [rsp+0x8]
  00951: movq   xmm4,QWORD PTR [rsp+0x10]
  00957: movq   xmm5,QWORD PTR [rsp+0x18]
  0095d: movq   xmm6,QWORD PTR [rsp+0x20]
  00963: add    rsp,0x30
  00967: test   rax,rax
  0096a: je     0x34a06
  00970: mov    QWORD PTR [r14-0x40],rax
:00030 
:00031 ret %2
  00974: mov    rax,QWORD PTR [r14-0x40]
  00978: leave  
  00979: ret    
==> start whole compile: ambient_occlusion FuncId(104) self_class:Scene start:[00000] bytecode:0x564559e9a1f0
<== finished compile. elapsed:109.6µs
offset:Pos(70520) code: 3998 bytes  data: 290 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: jne    0x34044
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    QWORD PTR [r14-0x78],rax
  0003e: mov    QWORD PTR [r14-0x80],rax
  00042: mov    QWORD PTR [r14-0x88],rax
  00049: mov    QWORD PTR [r14-0x90],rax
  00050: mov    rdi,QWORD PTR [r14-0x30]
  00054: test   rdi,0x7
  0005b: jne    0x34053
  00061: cmp    DWORD PTR [rdi+0x4],0x35
  00065: jne    0x34053
:00000 init_method reg:13 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  0006b: mov    rax,QWORD PTR [rip+0xffffffffffff33e6]        # 0xffff3458
  00072: cmp    rax,QWORD PTR [rip+0xf3f]        # 0xfb8
  00079: jne    0x34062
  0007f: mov    rax,QWORD PTR [rip+0xf22]        # 0xfa8
  00086: mov    QWORD PTR [r14-0x70],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  0008a: mov    rdi,QWORD PTR [r14-0x70]
  0008e: test   rdi,0x7
  00095: jne    0x340ad
  0009b: cmp    DWORD PTR [rdi+0x4],0x1e
  0009f: jne    0x340ad
  000a5: cmp    DWORD PTR [rip+0xffffffffffff339d],0x26        # 0xffff3449
  000ac: jne    0x340ad
  000b2: mov    r9,0x0
  000b9: mov    rdx,rdi
  000bc: mov    QWORD PTR [rsp-0x40],rcx
  000c1: mov    QWORD PTR [rsp-0x28],0x0
  000ca: lea    rcx,[r14-0x78]
  000ce: mov    r8,0x0
  000d5: mov    rsi,QWORD PTR [rbx]
  000d8: mov    QWORD PTR [rsp-0x18],rsi
  000dd: lea    rsi,[rsp-0x18]
  000e2: mov    QWORD PTR [rbx],rsi
  000e5: lea    r14,[rsp-0x10]
  000ea: mov    QWORD PTR [rsp-0x20],r14
  000ef: call   0x340bc
  000f4: lea    r14,[rbp-0x8]
  000f8: mov    QWORD PTR [rbx],r14
  000fb: mov    r14,QWORD PTR [rbp-0x10]
  000ff: test   rax,rax
  00102: je     0x340ee
  00108: mov    QWORD PTR [r14-0x40],rax
:00003 
:00004 %8 = %2
  0010c: mov    rax,QWORD PTR [r14-0x40]
  00110: mov    QWORD PTR [r14-0x70],rax
:00005 %9 = %1.call n()                     [Isect]
  00114: mov    rdi,QWORD PTR [r14-0x38]
  00118: test   rdi,0x7
  0011f: jne    0x340fd
  00125: cmp    DWORD PTR [rdi+0x4],0x33
  00129: jne    0x340fd
  0012f: cmp    DWORD PTR [rip+0xffffffffffff3313],0x26        # 0xffff3449
  00136: jne    0x340fd
  0013c: mov    esi,DWORD PTR [rip+0xe82]        # 0xfc4
  00142: cmp    esi,0xffffffff
  00145: je     0x3410c
  0014b: cmp    WORD PTR [rdi+0x2],0x3
  00150: jne    0x169
  00156: cmp    esi,0x6
  00159: jge    0x169
  0015f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00164: jmp    0x175
  00169: movabs rax,0x564559818b00
  00173: call   rax
  00175: mov    QWORD PTR [r14-0x78],rax
:00006 
:00007 _ = %0.call otherBasis(%8; 2)        [Scene]
  00179: mov    rdi,QWORD PTR [r14-0x30]
  0017d: cmp    DWORD PTR [rip+0xffffffffffff32c5],0x26        # 0xffff3449
  00184: jne    0x34135
  0018a: cmp    DWORD PTR [rip+0xffffffffffff32bc],0x0        # 0xffff344d
  00191: jne    0x34144
  00197: mov    QWORD PTR [rsp-0x28],0x0
  001a0: mov    rax,QWORD PTR [r14-0x30]
  001a4: mov    QWORD PTR [rsp-0x40],rax
  001a9: mov    rdi,0x2
  001b0: mov    rax,QWORD PTR [r14-0x70]
  001b4: mov    QWORD PTR [rsp-0x48],rax
  001b9: mov    rax,QWORD PTR [r14-0x78]
  001bd: mov    QWORD PTR [rsp-0x50],rax
  001c2: mov    QWORD PTR [rsp-0x38],0x0
  001cb: movabs rax,0x800000058
  001d5: mov    QWORD PTR [rsp-0x30],rax
  001da: movabs r13,0x564559eba010
  001e4: mov    rsi,QWORD PTR [rbx]
  001e7: mov    QWORD PTR [rsp-0x18],rsi
  001ec: lea    rsi,[rsp-0x18]
  001f1: mov    QWORD PTR [rbx],rsi
  001f4: lea    r14,[rsp-0x10]
  001f9: mov    QWORD PTR [rsp-0x20],r14
  001fe: call   0xffffba41
  00203: lea    r14,[rbp-0x8]
  00207: mov    QWORD PTR [rbx],r14
  0020a: mov    r14,QWORD PTR [rbp-0x10]
  0020e: test   rax,rax
  00211: je     0x3415b
:00008 
:00009 %3 = const[NAO_SAMPLES]              [8]
  00217: mov    rax,QWORD PTR [rip+0xffffffffffff323a]        # 0xffff3458
  0021e: cmp    rax,QWORD PTR [rip+0xdb3]        # 0xfd8
  00225: jne    0x3416a
  0022b: mov    rax,QWORD PTR [rip+0xd96]        # 0xfc8
  00232: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = const[NAO_SAMPLES]              [8]
  00236: mov    rax,QWORD PTR [rip+0xffffffffffff321b]        # 0xffff3458
  0023d: cmp    rax,QWORD PTR [rip+0xdb4]        # 0xff8
  00244: jne    0x341b5
  0024a: mov    rax,QWORD PTR [rip+0xd97]        # 0xfe8
  00251: mov    QWORD PTR [r14-0x50],rax
:00011 %5 = literal[0.0001]
  00255: movq   xmm2,QWORD PTR [rip+0xdab]        # 0x1008
  0025d: movabs rax,0xf8d1b71758e2196a
  00267: mov    QWORD PTR [r14-0x58],rax
:00012 %6 = literal[0.0]
  0026b: movq   xmm3,QWORD PTR [rip+0xda5]        # 0x1018
  00273: movabs rax,0x8000000000000002
  0027d: mov    QWORD PTR [r14-0x60],rax
:00013 %8 = const[Vec]                      [Vec]
  00281: mov    rax,QWORD PTR [rip+0xffffffffffff31d0]        # 0xffff3458
  00288: cmp    rax,QWORD PTR [rip+0xda9]        # 0x1038
  0028f: jne    0x34200
  00295: mov    rax,QWORD PTR [rip+0xd8c]        # 0x1028
  0029c: mov    QWORD PTR [r14-0x70],rax
:00014 %9 = %1.call pl()                    [Isect]
  002a0: mov    rdi,QWORD PTR [r14-0x38]
  002a4: test   rdi,0x7
  002ab: jne    0x34269
  002b1: cmp    DWORD PTR [rdi+0x4],0x33
  002b5: jne    0x34269
  002bb: cmp    DWORD PTR [rip+0xffffffffffff3187],0x26        # 0xffff3449
  002c2: jne    0x34269
  002c8: mov    esi,DWORD PTR [rip+0xd76]        # 0x1044
  002ce: cmp    esi,0xffffffff
  002d1: je     0x34278
  002d7: cmp    WORD PTR [rdi+0x2],0x3
  002dc: jne    0x2f5
  002e2: cmp    esi,0x6
  002e5: jge    0x2f5
  002eb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002f0: jmp    0x301
  002f5: movabs rax,0x564559818b00
  002ff: call   rax
  00301: mov    QWORD PTR [r14-0x78],rax
:00015 
:00016 %9 = %9.call x()                     [Vec]
  00305: mov    rdi,QWORD PTR [r14-0x78]
  00309: test   rdi,0x7
  00310: jne    0x342a1
  00316: cmp    DWORD PTR [rdi+0x4],0x2b
  0031a: jne    0x342a1
  00320: cmp    DWORD PTR [rip+0xffffffffffff3122],0x26        # 0xffff3449
  00327: jne    0x342a1
  0032d: mov    esi,DWORD PTR [rip+0xd19]        # 0x104c
  00333: cmp    esi,0xffffffff
  00336: je     0x342b0
  0033c: cmp    WORD PTR [rdi+0x2],0x3
  00341: jne    0x35a
  00347: cmp    esi,0x6
  0034a: jge    0x35a
  00350: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00355: jmp    0x366
  0035a: movabs rax,0x564559818b00
  00364: call   rax
  00366: mov    QWORD PTR [r14-0x78],rax
:00017 
:00018 %10 = %1.call n()                    [Isect]
  0036a: mov    rdi,QWORD PTR [r14-0x38]
  0036e: test   rdi,0x7
  00375: jne    0x342d9
  0037b: cmp    DWORD PTR [rdi+0x4],0x33
  0037f: jne    0x342d9
  00385: cmp    DWORD PTR [rip+0xffffffffffff30bd],0x26        # 0xffff3449
  0038c: jne    0x342d9
  00392: mov    esi,DWORD PTR [rip+0xcbc]        # 0x1054
  00398: cmp    esi,0xffffffff
  0039b: je     0x342e8
  003a1: cmp    WORD PTR [rdi+0x2],0x3
  003a6: jne    0x3bf
  003ac: cmp    esi,0x6
  003af: jge    0x3bf
  003b5: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003ba: jmp    0x3cb
  003bf: movabs rax,0x564559818b00
  003c9: call   rax
  003cb: mov    QWORD PTR [r14-0x80],rax
:00019 
:00020 %10 = %10.call x()                   [Vec]
  003cf: mov    rdi,QWORD PTR [r14-0x80]
  003d3: test   rdi,0x7
  003da: jne    0x34311
  003e0: cmp    DWORD PTR [rdi+0x4],0x2b
  003e4: jne    0x34311
  003ea: cmp    DWORD PTR [rip+0xffffffffffff3058],0x26        # 0xffff3449
  003f1: jne    0x34311
  003f7: mov    esi,DWORD PTR [rip+0xc5f]        # 0x105c
  003fd: cmp    esi,0xffffffff
  00400: je     0x34320
  00406: cmp    WORD PTR [rdi+0x2],0x3
  0040b: jne    0x424
  00411: cmp    esi,0x6
  00414: jge    0x424
  0041a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0041f: jmp    0x430
  00424: movabs rax,0x564559818b00
  0042e: call   rax
  00430: mov    QWORD PTR [r14-0x80],rax
:00021 
:00022 %10 = %5 * %10                       [Float][Float]
  00434: mov    rdi,QWORD PTR [r14-0x58]
  00438: test   rdi,0x1
  0043f: jne    0x34349
  00445: test   rdi,0x2
  0044c: je     0x488
  00452: xorps  xmm2,xmm2
  00455: movabs rax,0x8000000000000002
  0045f: cmp    rdi,rax
  00462: je     0x49a
  00468: mov    rax,rdi
  0046b: sar    rax,0x3f
  0046f: add    rax,0x2
  00473: and    rdi,0xfffffffffffffffc
  00477: or     rdi,rax
  0047a: rol    rdi,0x3d
  0047e: movq   xmm2,rdi
  00483: jmp    0x49a
  00488: call   0xfffeed05
  0048d: test   rax,rax
  00490: je     0x34349
  00496: movq   xmm2,xmm0
  0049a: mov    rdi,QWORD PTR [r14-0x80]
  0049e: test   rdi,0x1
  004a5: jne    0x34358
  004ab: test   rdi,0x2
  004b2: je     0x4ee
  004b8: xorps  xmm3,xmm3
  004bb: movabs rax,0x8000000000000002
  004c5: cmp    rdi,rax
  004c8: je     0x500
  004ce: mov    rax,rdi
  004d1: sar    rax,0x3f
  004d5: add    rax,0x2
  004d9: and    rdi,0xfffffffffffffffc
  004dd: or     rdi,rax
  004e0: rol    rdi,0x3d
  004e4: movq   xmm3,rdi
  004e9: jmp    0x500
  004ee: call   0xfffeed05
  004f3: test   rax,rax
  004f6: je     0x34358
  004fc: movq   xmm3,xmm0
  00500: mulsd  xmm3,xmm2
:00023 %9 = %9 + %10                        [Float][Float]
  00504: mov    rdi,QWORD PTR [r14-0x78]
  00508: test   rdi,0x1
  0050f: jne    0x34367
  00515: test   rdi,0x2
  0051c: je     0x558
  00522: xorps  xmm4,xmm4
  00525: movabs rax,0x8000000000000002
  0052f: cmp    rdi,rax
  00532: je     0x56a
  00538: mov    rax,rdi
  0053b: sar    rax,0x3f
  0053f: add    rax,0x2
  00543: and    rdi,0xfffffffffffffffc
  00547: or     rdi,rax
  0054a: rol    rdi,0x3d
  0054e: movq   xmm4,rdi
  00553: jmp    0x56a
  00558: call   0xfffeed05
  0055d: test   rax,rax
  00560: je     0x34367
  00566: movq   xmm4,xmm0
  0056a: addsd  xmm4,xmm3
:00024 %10 = %1.call pl()                   [Isect]
  0056e: mov    rdi,QWORD PTR [r14-0x38]
  00572: test   rdi,0x7
  00579: jne    0x34383
  0057f: cmp    DWORD PTR [rdi+0x4],0x33
  00583: jne    0x34383
  00589: cmp    DWORD PTR [rip+0xffffffffffff2eb9],0x26        # 0xffff3449
  00590: jne    0x34383
  00596: mov    esi,DWORD PTR [rip+0xac8]        # 0x1064
  0059c: cmp    esi,0xffffffff
  0059f: je     0x3439f
  005a5: cmp    WORD PTR [rdi+0x2],0x3
  005aa: jne    0x5c3
  005b0: cmp    esi,0x6
  005b3: jge    0x5c3
  005b9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005be: jmp    0x5e1
  005c3: sub    rsp,0x10
  005c7: movq   QWORD PTR [rsp],xmm4
  005cc: movabs rax,0x564559818b00
  005d6: call   rax
  005d8: movq   xmm4,QWORD PTR [rsp]
  005dd: add    rsp,0x10
  005e1: mov    QWORD PTR [r14-0x80],rax
:00025 
:00026 %10 = %10.call y()                   [Vec]
  005e5: mov    rdi,QWORD PTR [r14-0x80]
  005e9: test   rdi,0x7
  005f0: jne    0x343da
  005f6: cmp    DWORD PTR [rdi+0x4],0x2b
  005fa: jne    0x343da
  00600: cmp    DWORD PTR [rip+0xffffffffffff2e42],0x26        # 0xffff3449
  00607: jne    0x343da
  0060d: mov    esi,DWORD PTR [rip+0xa59]        # 0x106c
  00613: cmp    esi,0xffffffff
  00616: je     0x343f6
  0061c: cmp    WORD PTR [rdi+0x2],0x3
  00621: jne    0x63a
  00627: cmp    esi,0x6
  0062a: jge    0x63a
  00630: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00635: jmp    0x658
  0063a: sub    rsp,0x10
  0063e: movq   QWORD PTR [rsp],xmm4
  00643: movabs rax,0x564559818b00
  0064d: call   rax
  0064f: movq   xmm4,QWORD PTR [rsp]
  00654: add    rsp,0x10
  00658: mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %11 = %1.call n()                    [Isect]
  0065c: mov    rdi,QWORD PTR [r14-0x38]
  00660: test   rdi,0x7
  00667: jne    0x34431
  0066d: cmp    DWORD PTR [rdi+0x4],0x33
  00671: jne    0x34431
  00677: cmp    DWORD PTR [rip+0xffffffffffff2dcb],0x26        # 0xffff3449
  0067e: jne    0x34431
  00684: mov    esi,DWORD PTR [rip+0x9ea]        # 0x1074
  0068a: cmp    esi,0xffffffff
  0068d: je     0x3444d
  00693: cmp    WORD PTR [rdi+0x2],0x3
  00698: jne    0x6b1
  0069e: cmp    esi,0x6
  006a1: jge    0x6b1
  006a7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006ac: jmp    0x6cf
  006b1: sub    rsp,0x10
  006b5: movq   QWORD PTR [rsp],xmm4
  006ba: movabs rax,0x564559818b00
  006c4: call   rax
  006c6: movq   xmm4,QWORD PTR [rsp]
  006cb: add    rsp,0x10
  006cf: mov    QWORD PTR [r14-0x88],rax
:00029 
:00030 %11 = %11.call y()                   [Vec]
  006d6: mov    rdi,QWORD PTR [r14-0x88]
  006dd: test   rdi,0x7
  006e4: jne    0x34488
  006ea: cmp    DWORD PTR [rdi+0x4],0x2b
  006ee: jne    0x34488
  006f4: cmp    DWORD PTR [rip+0xffffffffffff2d4e],0x26        # 0xffff3449
  006fb: jne    0x34488
  00701: mov    esi,DWORD PTR [rip+0x975]        # 0x107c
  00707: cmp    esi,0xffffffff
  0070a: je     0x344a4
  00710: cmp    WORD PTR [rdi+0x2],0x3
  00715: jne    0x72e
  0071b: cmp    esi,0x6
  0071e: jge    0x72e
  00724: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00729: jmp    0x74c
  0072e: sub    rsp,0x10
  00732: movq   QWORD PTR [rsp],xmm4
  00737: movabs rax,0x564559818b00
  00741: call   rax
  00743: movq   xmm4,QWORD PTR [rsp]
  00748: add    rsp,0x10
  0074c: mov    QWORD PTR [r14-0x88],rax
:00031 
:00032 %11 = %5 * %11                       [Float][Float]
  00753: mov    rdi,QWORD PTR [r14-0x58]
  00757: test   rdi,0x1
  0075e: jne    0x344df
  00764: test   rdi,0x2
  0076b: je     0x7a7
  00771: xorps  xmm2,xmm2
  00774: movabs rax,0x8000000000000002
  0077e: cmp    rdi,rax
  00781: je     0x7b9
  00787: mov    rax,rdi
  0078a: sar    rax,0x3f
  0078e: add    rax,0x2
  00792: and    rdi,0xfffffffffffffffc
  00796: or     rdi,rax
  00799: rol    rdi,0x3d
  0079d: movq   xmm2,rdi
  007a2: jmp    0x7b9
  007a7: call   0xfffeed05
  007ac: test   rax,rax
  007af: je     0x344df
  007b5: movq   xmm2,xmm0
  007b9: mov    rdi,QWORD PTR [r14-0x88]
  007c0: test   rdi,0x1
  007c7: jne    0x344fb
  007cd: test   rdi,0x2
  007d4: je     0x810
  007da: xorps  xmm3,xmm3
  007dd: movabs rax,0x8000000000000002
  007e7: cmp    rdi,rax
  007ea: je     0x822
  007f0: mov    rax,rdi
  007f3: sar    rax,0x3f
  007f7: add    rax,0x2
  007fb: and    rdi,0xfffffffffffffffc
  007ff: or     rdi,rax
  00802: rol    rdi,0x3d
  00806: movq   xmm3,rdi
  0080b: jmp    0x822
  00810: call   0xfffeed05
  00815: test   rax,rax
  00818: je     0x344fb
  0081e: movq   xmm3,xmm0
  00822: mulsd  xmm3,xmm2
:00033 %10 = %10 + %11                      [Float][Float]
  00826: mov    rdi,QWORD PTR [r14-0x80]
  0082a: test   rdi,0x1
  00831: jne    0x34517
  00837: test   rdi,0x2
  0083e: je     0x87a
  00844: xorps  xmm5,xmm5
  00847: movabs rax,0x8000000000000002
  00851: cmp    rdi,rax
  00854: je     0x88c
  0085a: mov    rax,rdi
  0085d: sar    rax,0x3f
  00861: add    rax,0x2
  00865: and    rdi,0xfffffffffffffffc
  00869: or     rdi,rax
  0086c: rol    rdi,0x3d
  00870: movq   xmm5,rdi
  00875: jmp    0x88c
  0087a: call   0xfffeed05
  0087f: test   rax,rax
  00882: je     0x34517
  00888: movq   xmm5,xmm0
  0088c: addsd  xmm5,xmm3
:00034 %11 = %1.call pl()                   [Isect]
  00890: mov    rdi,QWORD PTR [r14-0x38]
  00894: test   rdi,0x7
  0089b: jne    0x34543
  008a1: cmp    DWORD PTR [rdi+0x4],0x33
  008a5: jne    0x34543
  008ab: cmp    DWORD PTR [rip+0xffffffffffff2b97],0x26        # 0xffff3449
  008b2: jne    0x34543
  008b8: mov    esi,DWORD PTR [rip+0x7c6]        # 0x1084
  008be: cmp    esi,0xffffffff
  008c1: je     0x3456c
  008c7: cmp    WORD PTR [rdi+0x2],0x3
  008cc: jne    0x8e5
  008d2: cmp    esi,0x6
  008d5: jge    0x8e5
  008db: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008e0: jmp    0x90f
  008e5: sub    rsp,0x10
  008e9: movq   QWORD PTR [rsp],xmm4
  008ee: movq   QWORD PTR [rsp+0x8],xmm5
  008f4: movabs rax,0x564559818b00
  008fe: call   rax
  00900: movq   xmm4,QWORD PTR [rsp]
  00905: movq   xmm5,QWORD PTR [rsp+0x8]
  0090b: add    rsp,0x10
  0090f: mov    QWORD PTR [r14-0x88],rax
:00035 
:00036 %11 = %11.call z()                   [Vec]
  00916: mov    rdi,QWORD PTR [r14-0x88]
  0091d: test   rdi,0x7
  00924: jne    0x345b3
  0092a: cmp    DWORD PTR [rdi+0x4],0x2b
  0092e: jne    0x345b3
  00934: cmp    DWORD PTR [rip+0xffffffffffff2b0e],0x26        # 0xffff3449
  0093b: jne    0x345b3
  00941: mov    esi,DWORD PTR [rip+0x745]        # 0x108c
  00947: cmp    esi,0xffffffff
  0094a: je     0x345dc
  00950: cmp    WORD PTR [rdi+0x2],0x3
  00955: jne    0x96e
  0095b: cmp    esi,0x6
  0095e: jge    0x96e
  00964: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00969: jmp    0x998
  0096e: sub    rsp,0x10
  00972: movq   QWORD PTR [rsp],xmm4
  00977: movq   QWORD PTR [rsp+0x8],xmm5
  0097d: movabs rax,0x564559818b00
  00987: call   rax
  00989: movq   xmm4,QWORD PTR [rsp]
  0098e: movq   xmm5,QWORD PTR [rsp+0x8]
  00994: add    rsp,0x10
  00998: mov    QWORD PTR [r14-0x88],rax
:00037 
:00038 %12 = %1.call n()                    [Isect]
  0099f: mov    rdi,QWORD PTR [r14-0x38]
  009a3: test   rdi,0x7
  009aa: jne    0x34623
  009b0: cmp    DWORD PTR [rdi+0x4],0x33
  009b4: jne    0x34623
  009ba: cmp    DWORD PTR [rip+0xffffffffffff2a88],0x26        # 0xffff3449
  009c1: jne    0x34623
  009c7: mov    esi,DWORD PTR [rip+0x6c7]        # 0x1094
  009cd: cmp    esi,0xffffffff
  009d0: je     0x3464c
  009d6: cmp    WORD PTR [rdi+0x2],0x3
  009db: jne    0x9f4
  009e1: cmp    esi,0x6
  009e4: jge    0x9f4
  009ea: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ef: jmp    0xa1e
  009f4: sub    rsp,0x10
  009f8: movq   QWORD PTR [rsp],xmm4
  009fd: movq   QWORD PTR [rsp+0x8],xmm5
  00a03: movabs rax,0x564559818b00
  00a0d: call   rax
  00a0f: movq   xmm4,QWORD PTR [rsp]
  00a14: movq   xmm5,QWORD PTR [rsp+0x8]
  00a1a: add    rsp,0x10
  00a1e: mov    QWORD PTR [r14-0x90],rax
:00039 
:00040 %12 = %12.call z()                   [Vec]
  00a25: mov    rdi,QWORD PTR [r14-0x90]
  00a2c: test   rdi,0x7
  00a33: jne    0x34693
  00a39: cmp    DWORD PTR [rdi+0x4],0x2b
  00a3d: jne    0x34693
  00a43: cmp    DWORD PTR [rip+0xffffffffffff29ff],0x26        # 0xffff3449
  00a4a: jne    0x34693
  00a50: mov    esi,DWORD PTR [rip+0x646]        # 0x109c
  00a56: cmp    esi,0xffffffff
  00a59: je     0x346bc
  00a5f: cmp    WORD PTR [rdi+0x2],0x3
  00a64: jne    0xa7d
  00a6a: cmp    esi,0x6
  00a6d: jge    0xa7d
  00a73: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a78: jmp    0xaa7
  00a7d: sub    rsp,0x10
  00a81: movq   QWORD PTR [rsp],xmm4
  00a86: movq   QWORD PTR [rsp+0x8],xmm5
  00a8c: movabs rax,0x564559818b00
  00a96: call   rax
  00a98: movq   xmm4,QWORD PTR [rsp]
  00a9d: movq   xmm5,QWORD PTR [rsp+0x8]
  00aa3: add    rsp,0x10
  00aa7: mov    QWORD PTR [r14-0x90],rax
:00041 
:00042 %12 = %5 * %12                       [Float][Float]
  00aae: mov    rdi,QWORD PTR [r14-0x58]
  00ab2: test   rdi,0x1
  00ab9: jne    0x34703
  00abf: test   rdi,0x2
  00ac6: je     0xb02
  00acc: xorps  xmm2,xmm2
  00acf: movabs rax,0x8000000000000002
  00ad9: cmp    rdi,rax
  00adc: je     0xb14
  00ae2: mov    rax,rdi
  00ae5: sar    rax,0x3f
  00ae9: add    rax,0x2
  00aed: and    rdi,0xfffffffffffffffc
  00af1: or     rdi,rax
  00af4: rol    rdi,0x3d
  00af8: movq   xmm2,rdi
  00afd: jmp    0xb14
  00b02: call   0xfffeed05
  00b07: test   rax,rax
  00b0a: je     0x34703
  00b10: movq   xmm2,xmm0
  00b14: mov    rdi,QWORD PTR [r14-0x90]
  00b1b: test   rdi,0x1
  00b22: jne    0x3472c
  00b28: test   rdi,0x2
  00b2f: je     0xb6b
  00b35: xorps  xmm3,xmm3
  00b38: movabs rax,0x8000000000000002
  00b42: cmp    rdi,rax
  00b45: je     0xb7d
  00b4b: mov    rax,rdi
  00b4e: sar    rax,0x3f
  00b52: add    rax,0x2
  00b56: and    rdi,0xfffffffffffffffc
  00b5a: or     rdi,rax
  00b5d: rol    rdi,0x3d
  00b61: movq   xmm3,rdi
  00b66: jmp    0xb7d
  00b6b: call   0xfffeed05
  00b70: test   rax,rax
  00b73: je     0x3472c
  00b79: movq   xmm3,xmm0
  00b7d: mulsd  xmm3,xmm2
:00043 %11 = %11 + %12                      [Float][Float]
  00b81: mov    rdi,QWORD PTR [r14-0x88]
  00b88: test   rdi,0x1
  00b8f: jne    0x34755
  00b95: test   rdi,0x2
  00b9c: je     0xbd8
  00ba2: xorps  xmm6,xmm6
  00ba5: movabs rax,0x8000000000000002
  00baf: cmp    rdi,rax
  00bb2: je     0xbea
  00bb8: mov    rax,rdi
  00bbb: sar    rax,0x3f
  00bbf: add    rax,0x2
  00bc3: and    rdi,0xfffffffffffffffc
  00bc7: or     rdi,rax
  00bca: rol    rdi,0x3d
  00bce: movq   xmm6,rdi
  00bd3: jmp    0xbea
  00bd8: call   0xfffeed05
  00bdd: test   rax,rax
  00be0: je     0x34755
  00be6: movq   xmm6,xmm0
  00bea: addsd  xmm6,xmm3
:00044 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00bee: movq   xmm0,xmm4
  00bf2: call   0xfffeee29
  00bf7: mov    QWORD PTR [r14-0x78],rax
  00bfb: movq   xmm0,xmm5
  00bff: call   0xfffeee29
  00c04: mov    QWORD PTR [r14-0x80],rax
  00c08: movq   xmm0,xmm6
  00c0c: call   0xfffeee29
  00c11: mov    QWORD PTR [r14-0x88],rax
  00c18: mov    rdi,QWORD PTR [r14-0x70]
  00c1c: test   rdi,0x7
  00c23: jne    0x3478e
  00c29: cmp    DWORD PTR [rdi+0x4],0x2c
  00c2d: jne    0x3478e
  00c33: cmp    DWORD PTR [rip+0xffffffffffff280f],0x26        # 0xffff3449
  00c3a: jne    0x3478e
  00c40: mov    r9,0x0
  00c47: sub    rsp,0x20
  00c4b: movq   QWORD PTR [rsp],xmm3
  00c50: movq   QWORD PTR [rsp+0x8],xmm4
  00c56: movq   QWORD PTR [rsp+0x10],xmm5
  00c5c: movq   QWORD PTR [rsp+0x18],xmm6
  00c62: mov    rdx,rdi
  00c65: mov    QWORD PTR [rsp-0x40],rcx
  00c6a: mov    QWORD PTR [rsp-0x28],0x0
  00c73: lea    rcx,[r14-0x78]
  00c77: mov    r8,0x3
  00c7e: mov    rsi,QWORD PTR [rbx]
  00c81: mov    QWORD PTR [rsp-0x18],rsi
  00c86: lea    rsi,[rsp-0x18]
  00c8b: mov    QWORD PTR [rbx],rsi
  00c8e: lea    r14,[rsp-0x10]
  00c93: mov    QWORD PTR [rsp-0x20],r14
  00c98: call   0x347ad
  00c9d: lea    r14,[rbp-0x8]
  00ca1: mov    QWORD PTR [rbx],r14
  00ca4: mov    r14,QWORD PTR [rbp-0x10]
  00ca8: movq   xmm3,QWORD PTR [rsp]
  00cad: movq   xmm4,QWORD PTR [rsp+0x8]
  00cb3: movq   xmm5,QWORD PTR [rsp+0x10]
  00cb9: movq   xmm6,QWORD PTR [rsp+0x18]
  00cbf: add    rsp,0x20
  00cc3: test   rax,rax
  00cc6: je     0x347df
  00ccc: mov    QWORD PTR [r14-0x68],rax
:00045 
:00046 %8 = literal[6946817]
  00cd0: mov    rax,0xd40003
  00cd7: mov    QWORD PTR [r14-0x70],rax
:00047 _ = %4.call times(&%8)               [Integer]
  00cdb: mov    rdi,QWORD PTR [r14-0x50]
  00cdf: test   rdi,0x1
  00ce6: je     0x347ee
  00cec: cmp    DWORD PTR [rip+0xffffffffffff2756],0x26        # 0xffff3449
  00cf3: jne    0x347ee
  00cf9: mov    r9,QWORD PTR [r14-0x70]
  00cfd: sub    rsp,0x20
  00d01: movq   QWORD PTR [rsp],xmm3
  00d06: movq   QWORD PTR [rsp+0x8],xmm4
  00d0c: movq   QWORD PTR [rsp+0x10],xmm5
  00d12: movq   QWORD PTR [rsp+0x18],xmm6
  00d18: mov    rdx,rdi
  00d1b: mov    QWORD PTR [rsp-0x40],rcx
  00d20: mov    QWORD PTR [rsp-0x28],0x0
  00d29: lea    rcx,[r14-0x78]
  00d2d: mov    r8,0x0
  00d34: mov    rsi,QWORD PTR [rbx]
  00d37: mov    QWORD PTR [rsp-0x18],rsi
  00d3c: lea    rsi,[rsp-0x18]
  00d41: mov    QWORD PTR [rbx],rsi
  00d44: lea    r14,[rsp-0x10]
  00d49: mov    QWORD PTR [rsp-0x20],r14
  00d4e: call   0x3480d
  00d53: lea    r14,[rbp-0x8]
  00d57: mov    QWORD PTR [rbx],r14
  00d5a: mov    r14,QWORD PTR [rbp-0x10]
  00d5e: movq   xmm3,QWORD PTR [rsp]
  00d63: movq   xmm4,QWORD PTR [rsp+0x8]
  00d69: movq   xmm5,QWORD PTR [rsp+0x10]
  00d6f: movq   xmm6,QWORD PTR [rsp+0x18]
  00d75: add    rsp,0x20
  00d79: test   rax,rax
  00d7c: je     0x3483f
:00048 
:00049 %8 = %3.inline IntegerTof()          [Integer]
  00d82: mov    rdi,QWORD PTR [r14-0x48]
  00d86: test   rdi,0x1
  00d8d: je     0x3484e
  00d93: cmp    DWORD PTR [rip+0xffffffffffff26af],0x26        # 0xffff3449
  00d9a: jne    0x3484e
  00da0: sar    rdi,1
  00da3: cvtsi2sd xmm2,rdi
:00050 
:00051 %9 = %4.inline IntegerTof()          [Integer]
  00da8: mov    rdi,QWORD PTR [r14-0x50]
  00dac: test   rdi,0x1
  00db3: je     0x3486d
  00db9: cmp    DWORD PTR [rip+0xffffffffffff2689],0x26        # 0xffff3449
  00dc0: jne    0x3486d
  00dc6: sar    rdi,1
  00dc9: cvtsi2sd xmm4,rdi
:00052 
:00053 %8 = %8 * %9                         [Float][Float]
  00dce: mulsd  xmm2,xmm4
:00054 %8 = %8 - %6                         [Float][Float]
  00dd2: mov    rdi,QWORD PTR [r14-0x60]
  00dd6: test   rdi,0x1
  00ddd: jne    0x34899
  00de3: test   rdi,0x2
  00dea: je     0xe26
  00df0: xorps  xmm7,xmm7
  00df3: movabs rax,0x8000000000000002
  00dfd: cmp    rdi,rax
  00e00: je     0xe38
  00e06: mov    rax,rdi
  00e09: sar    rax,0x3f
  00e0d: add    rax,0x2
  00e11: and    rdi,0xfffffffffffffffc
  00e15: or     rdi,rax
  00e18: rol    rdi,0x3d
  00e1c: movq   xmm7,rdi
  00e21: jmp    0xe38
  00e26: call   0xfffeed05
  00e2b: test   rax,rax
  00e2e: je     0x34899
  00e34: movq   xmm7,xmm0
  00e38: subsd  xmm2,xmm7
:00055 %9 = %3.inline IntegerTof()          [Integer]
  00e3c: mov    rdi,QWORD PTR [r14-0x48]
  00e40: test   rdi,0x1
  00e47: je     0x348d2
  00e4d: cmp    DWORD PTR [rip+0xffffffffffff25f5],0x26        # 0xffff3449
  00e54: jne    0x348d2
  00e5a: sar    rdi,1
  00e5d: cvtsi2sd xmm4,rdi
:00056 
:00057 %10 = %4.inline IntegerTof()         [Integer]
  00e62: mov    rdi,QWORD PTR [r14-0x50]
  00e66: test   rdi,0x1
  00e6d: je     0x3490b
  00e73: cmp    DWORD PTR [rip+0xffffffffffff25cf],0x26        # 0xffff3449
  00e7a: jne    0x3490b
  00e80: sar    rdi,1
  00e83: cvtsi2sd xmm5,rdi
:00058 
:00059 %9 = %9 * %10                        [Float][Float]
  00e88: mulsd  xmm4,xmm5
:00060 %6 = %8 / %9                         [Float][Float]
  00e8c: movq   xmm7,xmm2
  00e90: movq   rax,xmm4
  00e95: test   rax,rax
  00e98: je     0xfffeecd1
  00e9e: divsd  xmm7,xmm4
:00061 %8 = const[Vec]                      [Vec]
  00ea2: mov    rax,QWORD PTR [rip+0xffffffffffff25af]        # 0xffff3458
  00ea9: cmp    rax,QWORD PTR [rip+0x208]        # 0x10b8
  00eb0: jne    0x34944
  00eb6: mov    rax,QWORD PTR [rip+0x1eb]        # 0x10a8
  00ebd: mov    QWORD PTR [r14-0x70],rax
:00062 %9 = %6
:00063 %10 = %6
:00064 %11 = %6
:00065 %8 = %8.call new(%9; 3)              [#<Class:Vec>]
  00ec1: movq   xmm0,xmm7
  00ec5: call   0xfffeee29
  00eca: mov    QWORD PTR [r14-0x78],rax
  00ece: movq   xmm0,xmm7
  00ed2: call   0xfffeee29
  00ed7: mov    QWORD PTR [r14-0x80],rax
  00edb: movq   xmm0,xmm7
  00edf: call   0xfffeee29
  00ee4: mov    QWORD PTR [r14-0x88],rax
  00eeb: movq   xmm0,xmm7
  00eef: call   0xfffeee29
  00ef4: mov    QWORD PTR [r14-0x60],rax
  00ef8: mov    rdi,QWORD PTR [r14-0x70]
  00efc: test   rdi,0x7
  00f03: jne    0x349d1
  00f09: cmp    DWORD PTR [rdi+0x4],0x2c
  00f0d: jne    0x349d1
  00f13: cmp    DWORD PTR [rip+0xffffffffffff252f],0x26        # 0xffff3449
  00f1a: jne    0x349d1
  00f20: mov    r9,0x0
  00f27: sub    rsp,0x10
  00f2b: movq   QWORD PTR [rsp],xmm3
  00f30: movq   QWORD PTR [rsp+0x8],xmm7
  00f36: mov    rdx,rdi
  00f39: mov    QWORD PTR [rsp-0x40],rcx
  00f3e: mov    QWORD PTR [rsp-0x28],0x0
  00f47: lea    rcx,[r14-0x78]
  00f4b: mov    r8,0x3
  00f52: mov    rsi,QWORD PTR [rbx]
  00f55: mov    QWORD PTR [rsp-0x18],rsi
  00f5a: lea    rsi,[rsp-0x18]
  00f5f: mov    QWORD PTR [rbx],rsi
  00f62: lea    r14,[rsp-0x10]
  00f67: mov    QWORD PTR [rsp-0x20],r14
  00f6c: call   0x349f0
  00f71: lea    r14,[rbp-0x8]
  00f75: mov    QWORD PTR [rbx],r14
  00f78: mov    r14,QWORD PTR [rbp-0x10]
  00f7c: movq   xmm3,QWORD PTR [rsp]
  00f81: movq   xmm7,QWORD PTR [rsp+0x8]
  00f87: add    rsp,0x10
  00f8b: test   rax,rax
  00f8e: je     0x34a22
  00f94: mov    QWORD PTR [r14-0x70],rax
:00066 
:00067 ret %8
  00f98: mov    rax,QWORD PTR [r14-0x70]
  00f9c: leave  
  00f9d: ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x564559eba010
<== finished compile. elapsed:99.5µs
offset:Pos(74808) code: 6334 bytes  data: 310 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x33971
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x33980
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x33980
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff233f]        # 0xffff2398
  00059: 00 	cmp    rax,QWORD PTR [rip+0x1878]        # 0x18d8
  00060:    	jne    0x3398f
  00066: 00 	mov    rax,QWORD PTR [rip+0x185b]        # 0x18c8
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x339da
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x339da
  0008c: 26 	cmp    DWORD PTR [rip+0xffffffffffff22f6],0x26        # 0xffff2389
  00093:    	jne    0x339da
  00099:    	mov    esi,DWORD PTR [rip+0x1845]        # 0x18e4
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x339e9
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 45 	movabs rax,0x564559818b00
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x33a12
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x33a12
  000f1: 26 	cmp    DWORD PTR [rip+0xffffffffffff2291],0x26        # 0xffff2389
  000f8:    	jne    0x33a12
  000fe:    	mov    esi,DWORD PTR [rip+0x17e8]        # 0x18ec
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x33a21
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 45 	movabs rax,0x564559818b00
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x33a4a
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x33a4a
  00156: 26 	cmp    DWORD PTR [rip+0xffffffffffff222c],0x26        # 0xffff2389
  0015d:    	jne    0x33a4a
  00163:    	mov    esi,DWORD PTR [rip+0x178b]        # 0x18f4
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x33a59
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 45 	movabs rax,0x564559818b00
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x33a82
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x33a82
  001bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff21c7],0x26        # 0xffff2389
  001c2:    	jne    0x33a82
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x33a91
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x33ac3
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdx,QWORD PTR [r14-0x38]
  00226:    	mov    rcx,QWORD PTR [r14-0x48]
  0022a:    	mov    r8,QWORD PTR [r14-0x50]
  0022e:    	mov    rdi,rbx
  00231:    	mov    rsi,r12
  00234: 45 	movabs r9,0x564559eba0c8
  0023e: 45 	movabs rax,0x5645597e4980
  00248:    	call   rax
  0024a:    	test   rax,rax
  0024d:    	je     0x33ad2
:00012 %3 = 1: i32
  00253: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  0025b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2136]        # 0xffff2398
  00262: 00 	cmp    rax,QWORD PTR [rip+0x169f]        # 0x1908
  00269:    	jne    0x33ae1
  0026f: 00 	mov    rax,QWORD PTR [rip+0x1682]        # 0x18f8
  00276:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  0027a: 00 	movq   xmm2,QWORD PTR [rip+0x1696]        # 0x1918
  00282: 00 	movabs rax,0x8000000000000002
  0028c:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  00290: 00 	movq   xmm3,QWORD PTR [rip+0x1690]        # 0x1928
  00298: 00 	movabs rax,0x8000000000000002
  002a2:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002a6: 00 	movq   xmm4,QWORD PTR [rip+0x168a]        # 0x1938
  002ae: 00 	movabs rax,0x8000000000000002
  002b8:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002bc:    	mov    rdi,QWORD PTR [r14-0x50]
  002c0: 00 	test   rdi,0x7
  002c7:    	jne    0x33b2c
  002cd:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002d1:    	jne    0x33b2c
  002d7: 26 	cmp    DWORD PTR [rip+0xffffffffffff20ab],0x26        # 0xffff2389
  002de:    	jne    0x33b2c
  002e4: 00 	mov    r9,0x0
  002eb:    	sub    rsp,0x20
  002ef:    	movq   QWORD PTR [rsp],xmm2
  002f4:    	movq   QWORD PTR [rsp+0x8],xmm3
  002fa:    	movq   QWORD PTR [rsp+0x10],xmm4
  00300:    	mov    rdx,rdi
  00303:    	mov    QWORD PTR [rsp-0x40],rcx
  00308: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00311:    	lea    rcx,[r14-0x58]
  00315: 00 	mov    r8,0x3
  0031c:    	mov    rsi,QWORD PTR [rbx]
  0031f:    	mov    QWORD PTR [rsp-0x18],rsi
  00324:    	lea    rsi,[rsp-0x18]
  00329:    	mov    QWORD PTR [rbx],rsi
  0032c:    	lea    r14,[rsp-0x10]
  00331:    	mov    QWORD PTR [rsp-0x20],r14
  00336:    	call   0x33b3b
  0033b:    	lea    r14,[rbp-0x8]
  0033f:    	mov    QWORD PTR [rbx],r14
  00342:    	mov    r14,QWORD PTR [rbp-0x10]
  00346:    	movq   xmm2,QWORD PTR [rsp]
  0034b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00351:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00357:    	add    rsp,0x20
  0035b:    	test   rax,rax
  0035e:    	je     0x33b6d
  00364:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00368:    	sub    rsp,0x20
  0036c:    	movq   QWORD PTR [rsp],xmm2
  00371:    	movq   QWORD PTR [rsp+0x8],xmm3
  00377:    	movq   QWORD PTR [rsp+0x10],xmm4
  0037d:    	mov    rdx,QWORD PTR [r14-0x38]
  00381:    	mov    rcx,QWORD PTR [r14-0x48]
  00385:    	mov    r8,QWORD PTR [r14-0x50]
  00389:    	mov    rdi,rbx
  0038c:    	mov    rsi,r12
  0038f: 45 	movabs r9,0x564559eba148
  00399: 45 	movabs rax,0x5645597e4980
  003a3:    	call   rax
  003a5:    	movq   xmm2,QWORD PTR [rsp]
  003aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003b6:    	add    rsp,0x20
  003ba:    	test   rax,rax
  003bd:    	je     0x33b7c
:00020 %3 = %2.call x()                     [Vec]
  003c3:    	mov    rdi,QWORD PTR [r14-0x40]
  003c7: 00 	test   rdi,0x7
  003ce:    	jne    0x33b8b
  003d4:    	cmp    DWORD PTR [rdi+0x4],0x2b
  003d8:    	jne    0x33b8b
  003de: 26 	cmp    DWORD PTR [rip+0xffffffffffff1fa4],0x26        # 0xffff2389
  003e5:    	jne    0x33b8b
  003eb:    	mov    esi,DWORD PTR [rip+0x1553]        # 0x1944
  003f1:    	cmp    esi,0xffffffff
  003f4:    	je     0x33b9a
  003fa:    	cmp    WORD PTR [rdi+0x2],0x3
  003ff:    	jne    0x418
  00405:    	cmp    esi,0x6
  00408:    	jge    0x418
  0040e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00413:    	jmp    0x44e
  00418:    	sub    rsp,0x20
  0041c:    	movq   QWORD PTR [rsp],xmm2
  00421:    	movq   QWORD PTR [rsp+0x8],xmm3
  00427:    	movq   QWORD PTR [rsp+0x10],xmm4
  0042d: 45 	movabs rax,0x564559818b00
  00437:    	call   rax
  00439:    	movq   xmm2,QWORD PTR [rsp]
  0043e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00444:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044a:    	add    rsp,0x20
  0044e:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00452: 00 	movq   xmm5,QWORD PTR [rip+0x14ee]        # 0x1948
  0045a: 99 	movabs rax,0xff1999999999999a
  00464:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  00468:    	mov    rdi,QWORD PTR [r14-0x48]
  0046c: 00 	test   rdi,0x1
  00473:    	jne    0x33bed
  00479: 00 	test   rdi,0x2
  00480:    	je     0x4bc
  00486:    	xorps  xmm6,xmm6
  00489: 00 	movabs rax,0x8000000000000002
  00493:    	cmp    rdi,rax
  00496:    	je     0x4ce
  0049c:    	mov    rax,rdi
  0049f:    	sar    rax,0x3f
  004a3:    	add    rax,0x2
  004a7:    	and    rdi,0xfffffffffffffffc
  004ab:    	or     rdi,rax
  004ae:    	rol    rdi,0x3d
  004b2:    	movq   xmm6,rdi
  004b7:    	jmp    0x4ce
  004bc:    	call   0xfffedc45
  004c1:    	test   rax,rax
  004c4:    	je     0x33bed
  004ca:    	movq   xmm6,xmm0
  004ce:    	ucomisd xmm6,xmm5
  004d2:    	jae    0x33d1b
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  004d8:    	mov    rdi,QWORD PTR [r14-0x40]
  004dc: 00 	test   rdi,0x7
  004e3:    	jne    0x33bfc
  004e9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  004ed:    	jne    0x33bfc
  004f3: 26 	cmp    DWORD PTR [rip+0xffffffffffff1e8f],0x26        # 0xffff2389
  004fa:    	jne    0x33bfc
  00500:    	mov    esi,DWORD PTR [rip+0x144e]        # 0x1954
  00506:    	cmp    esi,0xffffffff
  00509:    	je     0x33c0b
  0050f:    	cmp    WORD PTR [rdi+0x2],0x3
  00514:    	jne    0x52d
  0051a:    	cmp    esi,0x6
  0051d:    	jge    0x52d
  00523:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00528:    	jmp    0x56f
  0052d:    	sub    rsp,0x20
  00531:    	movq   QWORD PTR [rsp],xmm2
  00536:    	movq   QWORD PTR [rsp+0x8],xmm3
  0053c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00542:    	movq   QWORD PTR [rsp+0x18],xmm5
  00548: 45 	movabs rax,0x564559818b00
  00552:    	call   rax
  00554:    	movq   xmm2,QWORD PTR [rsp]
  00559:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0055f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00565:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0056b:    	add    rsp,0x20
  0056f:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  00573: 00 	movq   xmm5,QWORD PTR [rip+0x13dd]        # 0x1958
  0057b: 99 	movabs rax,0xff1999999999999e
  00585:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  00589:    	mov    rdi,QWORD PTR [r14-0x48]
  0058d: 00 	test   rdi,0x1
  00594:    	jne    0x33c6a
  0059a: 00 	test   rdi,0x2
  005a1:    	je     0x5dd
  005a7:    	xorps  xmm6,xmm6
  005aa: 00 	movabs rax,0x8000000000000002
  005b4:    	cmp    rdi,rax
  005b7:    	je     0x5ef
  005bd:    	mov    rax,rdi
  005c0:    	sar    rax,0x3f
  005c4:    	add    rax,0x2
  005c8:    	and    rdi,0xfffffffffffffffc
  005cc:    	or     rdi,rax
  005cf:    	rol    rdi,0x3d
  005d3:    	movq   xmm6,rdi
  005d8:    	jmp    0x5ef
  005dd:    	call   0xfffedc45
  005e2:    	test   rax,rax
  005e5:    	je     0x33c6a
  005eb:    	movq   xmm6,xmm0
  005ef:    	ucomisd xmm6,xmm5
  005f3:    	jbe    0x33d34
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  005f9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00601:    	mov    rdi,QWORD PTR [r14-0x38]
  00605:    	mov    rsi,QWORD PTR [r14-0x48]
  00609: 00 	test   rdi,0x7
  00610:    	jne    0x33c79
  00616:    	cmp    DWORD PTR [rdi+0x4],0xb
  0061a:    	jne    0x33c79
  00620: 00 	test   rsi,0x1
  00627:    	je     0x33c79
  0062d:    	sar    rsi,1
  00630:    	sub    rsp,0x20
  00634:    	movq   QWORD PTR [rsp],xmm2
  00639:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00645:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064b: 45 	movabs rax,0x5645597e4900
  00655:    	call   rax
  00657:    	movq   xmm2,QWORD PTR [rsp]
  0065c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00662:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00668:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066e:    	add    rsp,0x20
  00672:    	test   rax,rax
  00675:    	je     0x33c88
  0067b:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  0067f: 00 	movq   xmm5,QWORD PTR [rip+0x12e1]        # 0x1968
  00687: 00 	movabs rax,0xff80000000000002
  00691:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  00695:    	mov    rdi,QWORD PTR [r14-0x48]
  00699: 00 	test   rdi,0x7
  006a0:    	jne    0x33c97
  006a6:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006aa:    	jne    0x33c97
  006b0: 26 	cmp    DWORD PTR [rip+0xffffffffffff1cd2],0x26        # 0xffff2389
  006b7:    	jne    0x33c97
  006bd:    	mov    esi,DWORD PTR [rip+0x12b1]        # 0x1974
  006c3:    	cmp    esi,0xffffffff
  006c6:    	je     0x33cb5
  006cc:    	cmp    WORD PTR [rdi+0x2],0x3
  006d1:    	jne    0x6ee
  006d7:    	cmp    esi,0x6
  006da:    	jge    0x6ee
  006e0:    	mov    rax,QWORD PTR [r14-0x50]
  006e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006e9:    	jmp    0x73d
  006ee:    	sub    rsp,0x20
  006f2:    	movq   QWORD PTR [rsp],xmm2
  006f7:    	movq   QWORD PTR [rsp+0x8],xmm3
  006fd:    	movq   QWORD PTR [rsp+0x10],xmm4
  00703:    	movq   QWORD PTR [rsp+0x18],xmm5
  00709:    	mov    rdx,QWORD PTR [r14-0x50]
  0070d: 45 	movabs rax,0x564559818d80
  00717:    	call   rax
  00719:    	movq   xmm2,QWORD PTR [rsp]
  0071e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00724:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0072a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00730:    	add    rsp,0x20
  00734:    	test   rax,rax
  00737:    	je     0x33ca6
:00034 
:00035 br =>:00073
  0073d:    	jmp    0x340cb
:00036 %3 = %2.call y()                     [<INVALID>]
  00742: 00 	cmp    DWORD PTR [rip+0x122f],0x0        # 0x1978
  00749:    	jl     0x33d4d
  0074f:    	je     0x33d5c
  00755: 01 	sub    DWORD PTR [rip+0x121c],0x1        # 0x1978
  0075c:    	xor    rdi,rdi
  0075f:    	jmp    0x33d4d
  00764:    	sub    rsp,0x20
  00768:    	movq   QWORD PTR [rsp],xmm2
  0076d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00773:    	movq   QWORD PTR [rsp+0x10],xmm4
  00779:    	movq   QWORD PTR [rsp+0x18],xmm5
  0077f:    	mov    rdi,QWORD PTR [r14-0x40]
  00783: 45 	movabs rax,0x564559780ec0
  0078d:    	call   rax
  0078f:    	mov    r15d,eax
  00792: 45 	movabs r13,0x564559eba260
  0079c:    	cmp    QWORD PTR [r13+0x8],0x0
  007a1:    	je     0x33d78
  007a7:    	cmp    r15d,DWORD PTR [r13-0x8]
  007ab:    	jne    0x33d78
  007b1:    	mov    eax,DWORD PTR [rip+0xffffffffffff1bd2]        # 0xffff2389
  007b7:    	cmp    DWORD PTR [r13-0x4],eax
  007bb:    	jne    0x33d78
  007c1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007ca:    	mov    rax,QWORD PTR [r14-0x40]
  007ce:    	mov    QWORD PTR [rsp-0x40],rax
  007d3: 00 	mov    rdi,0x0
  007da: 00 	mov    QWORD PTR [rsp-0x38],0x0
  007e3:    	mov    r13,QWORD PTR [r13+0x8]
  007e7:    	mov    rax,QWORD PTR [r13+0x8]
  007eb:    	mov    QWORD PTR [rsp-0x30],rax
  007f0:    	mov    rax,QWORD PTR [r13+0x0]
  007f4:    	mov    r13,QWORD PTR [r13+0x10]
  007f8:    	mov    rsi,QWORD PTR [rbx]
  007fb:    	mov    QWORD PTR [rsp-0x18],rsi
  00800:    	lea    rsi,[rsp-0x18]
  00805:    	mov    QWORD PTR [rbx],rsi
  00808:    	lea    r14,[rsp-0x10]
  0080d:    	mov    QWORD PTR [rsp-0x20],r14
  00812:    	call   rax
  00814:    	lea    r14,[rbp-0x8]
  00818:    	mov    QWORD PTR [rbx],r14
  0081b:    	mov    r14,QWORD PTR [rbp-0x10]
  0081f:    	movq   xmm2,QWORD PTR [rsp]
  00824:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0082a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00830:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00836:    	add    rsp,0x20
  0083a:    	test   rax,rax
  0083d:    	je     0x33db9
  00843:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00847: 00 	movq   xmm5,QWORD PTR [rip+0x1139]        # 0x1988
  0084f: 99 	movabs rax,0xff1999999999999a
  00859:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
  0085d:    	mov    rdi,QWORD PTR [r14-0x48]
  00861:    	mov    rsi,QWORD PTR [r14-0x50]
  00865:    	sub    rsp,0x20
  00869:    	movq   QWORD PTR [rsp],xmm2
  0086e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00874:    	movq   QWORD PTR [rsp+0x10],xmm4
  0087a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00880:    	mov    rdx,rdi
  00883:    	mov    rcx,rsi
  00886:    	mov    rdi,rbx
  00889:    	mov    rsi,r12
  0088c: 45 	movabs rax,0x564559798b50
  00896:    	call   rax
  00898:    	movq   xmm2,QWORD PTR [rsp]
  0089d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008af:    	add    rsp,0x20
  008b3:    	test   rax,rax
  008b6:    	je     0x33dc8
  008bc:    	or     rax,0x10
  008c0:    	cmp    rax,0x14
  008c4:    	je     0x33e95
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [<INVALID>]
  008ca:    	sub    rsp,0x20
  008ce:    	movq   QWORD PTR [rsp],xmm2
  008d3:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d9:    	movq   QWORD PTR [rsp+0x10],xmm4
  008df:    	movq   QWORD PTR [rsp+0x18],xmm5
  008e5:    	mov    rdi,QWORD PTR [r14-0x40]
  008e9: 45 	movabs rax,0x564559780ec0
  008f3:    	call   rax
  008f5:    	mov    r15d,eax
  008f8: 45 	movabs r13,0x564559eba2b0
  00902:    	cmp    QWORD PTR [r13+0x8],0x0
  00907:    	je     0x33dd7
  0090d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00911:    	jne    0x33dd7
  00917:    	mov    eax,DWORD PTR [rip+0xffffffffffff1a6c]        # 0xffff2389
  0091d:    	cmp    DWORD PTR [r13-0x4],eax
  00921:    	jne    0x33dd7
  00927: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00930:    	mov    rax,QWORD PTR [r14-0x40]
  00934:    	mov    QWORD PTR [rsp-0x40],rax
  00939: 00 	mov    rdi,0x0
  00940: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00949:    	mov    r13,QWORD PTR [r13+0x8]
  0094d:    	mov    rax,QWORD PTR [r13+0x8]
  00951:    	mov    QWORD PTR [rsp-0x30],rax
  00956:    	mov    rax,QWORD PTR [r13+0x0]
  0095a:    	mov    r13,QWORD PTR [r13+0x10]
  0095e:    	mov    rsi,QWORD PTR [rbx]
  00961:    	mov    QWORD PTR [rsp-0x18],rsi
  00966:    	lea    rsi,[rsp-0x18]
  0096b:    	mov    QWORD PTR [rbx],rsi
  0096e:    	lea    r14,[rsp-0x10]
  00973:    	mov    QWORD PTR [rsp-0x20],r14
  00978:    	call   rax
  0097a:    	lea    r14,[rbp-0x8]
  0097e:    	mov    QWORD PTR [rbx],r14
  00981:    	mov    r14,QWORD PTR [rbp-0x10]
  00985:    	movq   xmm2,QWORD PTR [rsp]
  0098a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00990:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00996:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0099c:    	add    rsp,0x20
  009a0:    	test   rax,rax
  009a3:    	je     0x33e18
  009a9:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  009ad: 00 	movq   xmm5,QWORD PTR [rip+0xfe3]        # 0x1998
  009b5: 99 	movabs rax,0xff1999999999999e
  009bf:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  009c3:    	mov    rdi,QWORD PTR [r14-0x48]
  009c7:    	mov    rsi,QWORD PTR [r14-0x50]
  009cb:    	sub    rsp,0x20
  009cf:    	movq   QWORD PTR [rsp],xmm2
  009d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  009da:    	movq   QWORD PTR [rsp+0x10],xmm4
  009e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  009e6:    	mov    rdx,rdi
  009e9:    	mov    rcx,rsi
  009ec:    	mov    rdi,rbx
  009ef:    	mov    rsi,r12
  009f2: 45 	movabs rax,0x564559797d80
  009fc:    	call   rax
  009fe:    	movq   xmm2,QWORD PTR [rsp]
  00a03:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a09:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a0f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a15:    	add    rsp,0x20
  00a19:    	test   rax,rax
  00a1c:    	je     0x33e27
  00a22:    	or     rax,0x10
  00a26:    	cmp    rax,0x14
  00a2a:    	je     0x33eae
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  00a30: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a38:    	sub    rsp,0x20
  00a3c:    	movq   QWORD PTR [rsp],xmm2
  00a41:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a47:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a4d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a53:    	mov    rdi,rbx
  00a56:    	mov    rsi,r12
  00a59:    	mov    rdx,QWORD PTR [r14-0x38]
  00a5d:    	mov    rcx,QWORD PTR [r14-0x48]
  00a61: 45 	movabs r8,0x564559eba308
  00a6b: 45 	movabs rax,0x5645597e47d0
  00a75:    	call   rax
  00a77:    	movq   xmm2,QWORD PTR [rsp]
  00a7c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a82:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a88:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a8e:    	add    rsp,0x20
  00a92:    	test   rax,rax
  00a95:    	je     0x33e36
  00a9b:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a9f: 00 	movq   xmm5,QWORD PTR [rip+0xf01]        # 0x19a8
  00aa7: 00 	movabs rax,0xff80000000000002
  00ab1:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00ab5:    	sub    rsp,0x20
  00ab9:    	movq   QWORD PTR [rsp],xmm2
  00abe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ac4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aca:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ad0:    	mov    rdi,QWORD PTR [r14-0x48]
  00ad4: 45 	movabs rax,0x564559780ec0
  00ade:    	call   rax
  00ae0:    	mov    r15d,eax
  00ae3: 45 	movabs r13,0x564559eba330
  00aed:    	cmp    QWORD PTR [r13+0x8],0x0
  00af2:    	je     0x33e45
  00af8:    	cmp    r15d,DWORD PTR [r13-0x8]
  00afc:    	jne    0x33e45
  00b02:    	mov    eax,DWORD PTR [rip+0xffffffffffff1881]        # 0xffff2389
  00b08:    	cmp    DWORD PTR [r13-0x4],eax
  00b0c:    	jne    0x33e45
  00b12: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b1b:    	mov    rax,QWORD PTR [r14-0x48]
  00b1f:    	mov    QWORD PTR [rsp-0x40],rax
  00b24: 00 	mov    rdi,0x1
  00b2b:    	mov    rax,QWORD PTR [r14-0x50]
  00b2f:    	mov    QWORD PTR [rsp-0x48],rax
  00b34: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b3d:    	mov    r13,QWORD PTR [r13+0x8]
  00b41:    	mov    rax,QWORD PTR [r13+0x8]
  00b45:    	mov    QWORD PTR [rsp-0x30],rax
  00b4a:    	mov    rax,QWORD PTR [r13+0x0]
  00b4e:    	mov    r13,QWORD PTR [r13+0x10]
  00b52:    	mov    rsi,QWORD PTR [rbx]
  00b55:    	mov    QWORD PTR [rsp-0x18],rsi
  00b5a:    	lea    rsi,[rsp-0x18]
  00b5f:    	mov    QWORD PTR [rbx],rsi
  00b62:    	lea    r14,[rsp-0x10]
  00b67:    	mov    QWORD PTR [rsp-0x20],r14
  00b6c:    	call   rax
  00b6e:    	lea    r14,[rbp-0x8]
  00b72:    	mov    QWORD PTR [rbx],r14
  00b75:    	mov    r14,QWORD PTR [rbp-0x10]
  00b79:    	movq   xmm2,QWORD PTR [rsp]
  00b7e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b84:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b8a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b90:    	add    rsp,0x20
  00b94:    	test   rax,rax
  00b97:    	je     0x33e86
:00050 
:00051 br =>:00073
  00b9d:    	jmp    0x340e4
:00052 %3 = %2.call z()                     [<INVALID>]
  00ba2: 00 	cmp    DWORD PTR [rip+0xe07],0x0        # 0x19b0
  00ba9:    	jl     0x33ec7
  00baf:    	je     0x33ed6
  00bb5: 01 	sub    DWORD PTR [rip+0xdf4],0x1        # 0x19b0
  00bbc:    	xor    rdi,rdi
  00bbf:    	jmp    0x33ec7
  00bc4:    	sub    rsp,0x20
  00bc8:    	movq   QWORD PTR [rsp],xmm2
  00bcd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bd3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bd9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bdf:    	mov    rdi,QWORD PTR [r14-0x40]
  00be3: 45 	movabs rax,0x564559780ec0
  00bed:    	call   rax
  00bef:    	mov    r15d,eax
  00bf2: 45 	movabs r13,0x564559eba360
  00bfc:    	cmp    QWORD PTR [r13+0x8],0x0
  00c01:    	je     0x33ef2
  00c07:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c0b:    	jne    0x33ef2
  00c11:    	mov    eax,DWORD PTR [rip+0xffffffffffff1772]        # 0xffff2389
  00c17:    	cmp    DWORD PTR [r13-0x4],eax
  00c1b:    	jne    0x33ef2
  00c21: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c2a:    	mov    rax,QWORD PTR [r14-0x40]
  00c2e:    	mov    QWORD PTR [rsp-0x40],rax
  00c33: 00 	mov    rdi,0x0
  00c3a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c43:    	mov    r13,QWORD PTR [r13+0x8]
  00c47:    	mov    rax,QWORD PTR [r13+0x8]
  00c4b:    	mov    QWORD PTR [rsp-0x30],rax
  00c50:    	mov    rax,QWORD PTR [r13+0x0]
  00c54:    	mov    r13,QWORD PTR [r13+0x10]
  00c58:    	mov    rsi,QWORD PTR [rbx]
  00c5b:    	mov    QWORD PTR [rsp-0x18],rsi
  00c60:    	lea    rsi,[rsp-0x18]
  00c65:    	mov    QWORD PTR [rbx],rsi
  00c68:    	lea    r14,[rsp-0x10]
  00c6d:    	mov    QWORD PTR [rsp-0x20],r14
  00c72:    	call   rax
  00c74:    	lea    r14,[rbp-0x8]
  00c78:    	mov    QWORD PTR [rbx],r14
  00c7b:    	mov    r14,QWORD PTR [rbp-0x10]
  00c7f:    	movq   xmm2,QWORD PTR [rsp]
  00c84:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c8a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c90:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c96:    	add    rsp,0x20
  00c9a:    	test   rax,rax
  00c9d:    	je     0x33f33
  00ca3:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00ca7: 00 	movq   xmm5,QWORD PTR [rip+0xd09]        # 0x19b8
  00caf: 99 	movabs rax,0xff1999999999999a
  00cb9:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
  00cbd:    	mov    rdi,QWORD PTR [r14-0x48]
  00cc1:    	mov    rsi,QWORD PTR [r14-0x50]
  00cc5:    	sub    rsp,0x20
  00cc9:    	movq   QWORD PTR [rsp],xmm2
  00cce:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cda:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce0:    	mov    rdx,rdi
  00ce3:    	mov    rcx,rsi
  00ce6:    	mov    rdi,rbx
  00ce9:    	mov    rsi,r12
  00cec: 45 	movabs rax,0x564559798b50
  00cf6:    	call   rax
  00cf8:    	movq   xmm2,QWORD PTR [rsp]
  00cfd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d0f:    	add    rsp,0x20
  00d13:    	test   rax,rax
  00d16:    	je     0x33f42
  00d1c:    	or     rax,0x10
  00d20:    	cmp    rax,0x14
  00d24:    	je     0x3400f
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [<INVALID>]
  00d2a:    	sub    rsp,0x20
  00d2e:    	movq   QWORD PTR [rsp],xmm2
  00d33:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d39:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d3f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d45:    	mov    rdi,QWORD PTR [r14-0x40]
  00d49: 45 	movabs rax,0x564559780ec0
  00d53:    	call   rax
  00d55:    	mov    r15d,eax
  00d58: 45 	movabs r13,0x564559eba3b0
  00d62:    	cmp    QWORD PTR [r13+0x8],0x0
  00d67:    	je     0x33f51
  00d6d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d71:    	jne    0x33f51
  00d77:    	mov    eax,DWORD PTR [rip+0xffffffffffff160c]        # 0xffff2389
  00d7d:    	cmp    DWORD PTR [r13-0x4],eax
  00d81:    	jne    0x33f51
  00d87: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d90:    	mov    rax,QWORD PTR [r14-0x40]
  00d94:    	mov    QWORD PTR [rsp-0x40],rax
  00d99: 00 	mov    rdi,0x0
  00da0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00da9:    	mov    r13,QWORD PTR [r13+0x8]
  00dad:    	mov    rax,QWORD PTR [r13+0x8]
  00db1:    	mov    QWORD PTR [rsp-0x30],rax
  00db6:    	mov    rax,QWORD PTR [r13+0x0]
  00dba:    	mov    r13,QWORD PTR [r13+0x10]
  00dbe:    	mov    rsi,QWORD PTR [rbx]
  00dc1:    	mov    QWORD PTR [rsp-0x18],rsi
  00dc6:    	lea    rsi,[rsp-0x18]
  00dcb:    	mov    QWORD PTR [rbx],rsi
  00dce:    	lea    r14,[rsp-0x10]
  00dd3:    	mov    QWORD PTR [rsp-0x20],r14
  00dd8:    	call   rax
  00dda:    	lea    r14,[rbp-0x8]
  00dde:    	mov    QWORD PTR [rbx],r14
  00de1:    	mov    r14,QWORD PTR [rbp-0x10]
  00de5:    	movq   xmm2,QWORD PTR [rsp]
  00dea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dfc:    	add    rsp,0x20
  00e00:    	test   rax,rax
  00e03:    	je     0x33f92
  00e09:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00e0d: 00 	movq   xmm5,QWORD PTR [rip+0xbb3]        # 0x19c8
  00e15: 99 	movabs rax,0xff1999999999999e
  00e1f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  00e23:    	mov    rdi,QWORD PTR [r14-0x48]
  00e27:    	mov    rsi,QWORD PTR [r14-0x50]
  00e2b:    	sub    rsp,0x20
  00e2f:    	movq   QWORD PTR [rsp],xmm2
  00e34:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e40:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e46:    	mov    rdx,rdi
  00e49:    	mov    rcx,rsi
  00e4c:    	mov    rdi,rbx
  00e4f:    	mov    rsi,r12
  00e52: 45 	movabs rax,0x564559797d80
  00e5c:    	call   rax
  00e5e:    	movq   xmm2,QWORD PTR [rsp]
  00e63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e75:    	add    rsp,0x20
  00e79:    	test   rax,rax
  00e7c:    	je     0x33fa1
  00e82:    	or     rax,0x10
  00e86:    	cmp    rax,0x14
  00e8a:    	je     0x34028
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00e90: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eb3:    	mov    rdi,rbx
  00eb6:    	mov    rsi,r12
  00eb9:    	mov    rdx,QWORD PTR [r14-0x38]
  00ebd:    	mov    rcx,QWORD PTR [r14-0x48]
  00ec1: 45 	movabs r8,0x564559eba408
  00ecb: 45 	movabs rax,0x5645597e47d0
  00ed5:    	call   rax
  00ed7:    	movq   xmm2,QWORD PTR [rsp]
  00edc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ee2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eee:    	add    rsp,0x20
  00ef2:    	test   rax,rax
  00ef5:    	je     0x33fb0
  00efb:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00eff: 00 	movq   xmm5,QWORD PTR [rip+0xad1]        # 0x19d8
  00f07: 00 	movabs rax,0xff80000000000002
  00f11:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [<INVALID>]
  00f15:    	sub    rsp,0x20
  00f19:    	movq   QWORD PTR [rsp],xmm2
  00f1e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f24:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f2a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f30:    	mov    rdi,QWORD PTR [r14-0x48]
  00f34: 45 	movabs rax,0x564559780ec0
  00f3e:    	call   rax
  00f40:    	mov    r15d,eax
  00f43: 45 	movabs r13,0x564559eba430
  00f4d:    	cmp    QWORD PTR [r13+0x8],0x0
  00f52:    	je     0x33fbf
  00f58:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f5c:    	jne    0x33fbf
  00f62:    	mov    eax,DWORD PTR [rip+0xffffffffffff1421]        # 0xffff2389
  00f68:    	cmp    DWORD PTR [r13-0x4],eax
  00f6c:    	jne    0x33fbf
  00f72: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f7b:    	mov    rax,QWORD PTR [r14-0x48]
  00f7f:    	mov    QWORD PTR [rsp-0x40],rax
  00f84: 00 	mov    rdi,0x1
  00f8b:    	mov    rax,QWORD PTR [r14-0x50]
  00f8f:    	mov    QWORD PTR [rsp-0x48],rax
  00f94: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f9d:    	mov    r13,QWORD PTR [r13+0x8]
  00fa1:    	mov    rax,QWORD PTR [r13+0x8]
  00fa5:    	mov    QWORD PTR [rsp-0x30],rax
  00faa:    	mov    rax,QWORD PTR [r13+0x0]
  00fae:    	mov    r13,QWORD PTR [r13+0x10]
  00fb2:    	mov    rsi,QWORD PTR [rbx]
  00fb5:    	mov    QWORD PTR [rsp-0x18],rsi
  00fba:    	lea    rsi,[rsp-0x18]
  00fbf:    	mov    QWORD PTR [rbx],rsi
  00fc2:    	lea    r14,[rsp-0x10]
  00fc7:    	mov    QWORD PTR [rsp-0x20],r14
  00fcc:    	call   rax
  00fce:    	lea    r14,[rbp-0x8]
  00fd2:    	mov    QWORD PTR [rbx],r14
  00fd5:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd9:    	movq   xmm2,QWORD PTR [rsp]
  00fde:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fea:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff0:    	add    rsp,0x20
  00ff4:    	test   rax,rax
  00ff7:    	je     0x34000
:00066 
:00067 br =>:00073
  00ffd:    	jmp    0x340fd
:00068 %3 = 1: i32
  01002: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  0100a:    	sub    rsp,0x20
  0100e:    	movq   QWORD PTR [rsp],xmm2
  01013:    	movq   QWORD PTR [rsp+0x8],xmm3
  01019:    	movq   QWORD PTR [rsp+0x10],xmm4
  0101f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01025:    	mov    rdi,rbx
  01028:    	mov    rsi,r12
  0102b:    	mov    rdx,QWORD PTR [r14-0x38]
  0102f:    	mov    rcx,QWORD PTR [r14-0x48]
  01033: 45 	movabs r8,0x564559eba468
  0103d: 45 	movabs rax,0x5645597e47d0
  01047:    	call   rax
  01049:    	movq   xmm2,QWORD PTR [rsp]
  0104e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01054:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0105a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01060:    	add    rsp,0x20
  01064:    	test   rax,rax
  01067:    	je     0x34041
  0106d:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  01071: 00 	movq   xmm5,QWORD PTR [rip+0x96f]        # 0x19e8
  01079: 00 	movabs rax,0xff80000000000002
  01083:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  01087: 00 	cmp    DWORD PTR [rip+0x962],0x0        # 0x19f0
  0108e:    	jl     0x34050
  01094:    	je     0x3405f
  0109a: 01 	sub    DWORD PTR [rip+0x94f],0x1        # 0x19f0
  010a1:    	xor    rdi,rdi
  010a4:    	jmp    0x34050
  010a9:    	sub    rsp,0x20
  010ad:    	movq   QWORD PTR [rsp],xmm2
  010b2:    	movq   QWORD PTR [rsp+0x8],xmm3
  010b8:    	movq   QWORD PTR [rsp+0x10],xmm4
  010be:    	movq   QWORD PTR [rsp+0x18],xmm5
  010c4:    	mov    rdi,QWORD PTR [r14-0x48]
  010c8: 45 	movabs rax,0x564559780ec0
  010d2:    	call   rax
  010d4:    	mov    r15d,eax
  010d7: 45 	movabs r13,0x564559eba490
  010e1:    	cmp    QWORD PTR [r13+0x8],0x0
  010e6:    	je     0x3407b
  010ec:    	cmp    r15d,DWORD PTR [r13-0x8]
  010f0:    	jne    0x3407b
  010f6:    	mov    eax,DWORD PTR [rip+0xffffffffffff128d]        # 0xffff2389
  010fc:    	cmp    DWORD PTR [r13-0x4],eax
  01100:    	jne    0x3407b
  01106: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0110f:    	mov    rax,QWORD PTR [r14-0x48]
  01113:    	mov    QWORD PTR [rsp-0x40],rax
  01118: 00 	mov    rdi,0x1
  0111f:    	mov    rax,QWORD PTR [r14-0x50]
  01123:    	mov    QWORD PTR [rsp-0x48],rax
  01128: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01131:    	mov    r13,QWORD PTR [r13+0x8]
  01135:    	mov    rax,QWORD PTR [r13+0x8]
  01139:    	mov    QWORD PTR [rsp-0x30],rax
  0113e:    	mov    rax,QWORD PTR [r13+0x0]
  01142:    	mov    r13,QWORD PTR [r13+0x10]
  01146:    	mov    rsi,QWORD PTR [rbx]
  01149:    	mov    QWORD PTR [rsp-0x18],rsi
  0114e:    	lea    rsi,[rsp-0x18]
  01153:    	mov    QWORD PTR [rbx],rsi
  01156:    	lea    r14,[rsp-0x10]
  0115b:    	mov    QWORD PTR [rsp-0x20],r14
  01160:    	call   rax
  01162:    	lea    r14,[rbp-0x8]
  01166:    	mov    QWORD PTR [rbx],r14
  01169:    	mov    r14,QWORD PTR [rbp-0x10]
  0116d:    	movq   xmm2,QWORD PTR [rsp]
  01172:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01178:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0117e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01184:    	add    rsp,0x20
  01188:    	test   rax,rax
  0118b:    	je     0x340bc
:00072 
  01191:    	jmp    0x34116
:00073 %3 = 0: i32
  01196: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  0119e: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  011a6:    	mov    rdi,QWORD PTR [r14-0x38]
  011aa:    	mov    rsi,QWORD PTR [r14-0x50]
  011ae: 00 	test   rdi,0x7
  011b5:    	jne    0x3412f
  011bb:    	cmp    DWORD PTR [rdi+0x4],0xb
  011bf:    	jne    0x3412f
  011c5: 00 	test   rsi,0x1
  011cc:    	je     0x3412f
  011d2:    	sar    rsi,1
  011d5:    	sub    rsp,0x20
  011d9:    	movq   QWORD PTR [rsp],xmm2
  011de:    	movq   QWORD PTR [rsp+0x8],xmm3
  011e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ea: 45 	movabs rax,0x5645597e4900
  011f4:    	call   rax
  011f6:    	movq   xmm2,QWORD PTR [rsp]
  011fb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01201:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01207:    	add    rsp,0x20
  0120b:    	test   rax,rax
  0120e:    	je     0x3413e
  01214:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  01218: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  01220:    	mov    rdi,QWORD PTR [r14-0x38]
  01224:    	mov    rsi,QWORD PTR [r14-0x58]
  01228: 00 	test   rdi,0x7
  0122f:    	jne    0x3414d
  01235:    	cmp    DWORD PTR [rdi+0x4],0xb
  01239:    	jne    0x3414d
  0123f: 00 	test   rsi,0x1
  01246:    	je     0x3414d
  0124c:    	sar    rsi,1
  0124f:    	sub    rsp,0x10
  01253:    	movq   QWORD PTR [rsp],xmm3
  01258:    	movq   QWORD PTR [rsp+0x8],xmm4
  0125e: 45 	movabs rax,0x5645597e4900
  01268:    	call   rax
  0126a:    	movq   xmm3,QWORD PTR [rsp]
  0126f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01275:    	add    rsp,0x10
  01279:    	test   rax,rax
  0127c:    	je     0x3415c
  01282:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  01286:    	mov    rdi,QWORD PTR [r14-0x50]
  0128a: 00 	test   rdi,0x7
  01291:    	jne    0x3416b
  01297:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0129b:    	jne    0x3416b
  012a1: 26 	cmp    DWORD PTR [rip+0xffffffffffff10e1],0x26        # 0xffff2389
  012a8:    	jne    0x3416b
  012ae:    	sub    rsp,0x10
  012b2:    	movq   QWORD PTR [rsp],xmm3
  012b7:    	movq   QWORD PTR [rsp+0x8],xmm4
  012bd: 00 	cmp    DWORD PTR [rip+0xffffffffffff10c9],0x0        # 0xffff238d
  012c4:    	jne    0x3417a
  012ca: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012d3:    	mov    rax,QWORD PTR [r14-0x50]
  012d7:    	mov    QWORD PTR [rsp-0x40],rax
  012dc: 00 	mov    rdi,0x1
  012e3:    	mov    rax,QWORD PTR [r14-0x58]
  012e7:    	mov    QWORD PTR [rsp-0x48],rax
  012ec: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012f5: 08 	movabs rax,0x100080000005d
  012ff:    	mov    QWORD PTR [rsp-0x30],rax
  01304: 45 	movabs r13,0x564559e86470
  0130e:    	mov    rsi,QWORD PTR [rbx]
  01311:    	mov    QWORD PTR [rsp-0x18],rsi
  01316:    	lea    rsi,[rsp-0x18]
  0131b:    	mov    QWORD PTR [rbx],rsi
  0131e:    	lea    r14,[rsp-0x10]
  01323:    	mov    QWORD PTR [rsp-0x20],r14
  01328:    	call   0xffffa9d5
  0132d:    	lea    r14,[rbp-0x8]
  01331:    	mov    QWORD PTR [rbx],r14
  01334:    	mov    r14,QWORD PTR [rbp-0x10]
  01338:    	movq   xmm3,QWORD PTR [rsp]
  0133d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01343:    	add    rsp,0x10
  01347:    	test   rax,rax
  0134a:    	je     0x34191
  01350:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  01354:    	sub    rsp,0x10
  01358:    	movq   QWORD PTR [rsp],xmm3
  0135d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01363:    	mov    rdx,QWORD PTR [r14-0x38]
  01367:    	mov    rcx,QWORD PTR [r14-0x48]
  0136b:    	mov    r8,QWORD PTR [r14-0x50]
  0136f:    	mov    rdi,rbx
  01372:    	mov    rsi,r12
  01375: 45 	movabs r9,0x564559eba518
  0137f: 45 	movabs rax,0x5645597e4980
  01389:    	call   rax
  0138b:    	movq   xmm3,QWORD PTR [rsp]
  01390:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01396:    	add    rsp,0x10
  0139a:    	test   rax,rax
  0139d:    	je     0x341a0
:00081 %3 = 0: i32
  013a3: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  013ab: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  013b3:    	mov    rdi,QWORD PTR [r14-0x38]
  013b7:    	mov    rsi,QWORD PTR [r14-0x50]
  013bb: 00 	test   rdi,0x7
  013c2:    	jne    0x341af
  013c8:    	cmp    DWORD PTR [rdi+0x4],0xb
  013cc:    	jne    0x341af
  013d2: 00 	test   rsi,0x1
  013d9:    	je     0x341af
  013df:    	sar    rsi,1
  013e2:    	sub    rsp,0x10
  013e6:    	movq   QWORD PTR [rsp],xmm3
  013eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  013f1: 45 	movabs rax,0x5645597e4900
  013fb:    	call   rax
  013fd:    	movq   xmm3,QWORD PTR [rsp]
  01402:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01408:    	add    rsp,0x10
  0140c:    	test   rax,rax
  0140f:    	je     0x341be
  01415:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  01419:    	mov    rdi,QWORD PTR [r14-0x50]
  0141d: 00 	test   rdi,0x7
  01424:    	jne    0x341cd
  0142a:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0142e:    	jne    0x341cd
  01434: 26 	cmp    DWORD PTR [rip+0xffffffffffff0f4e],0x26        # 0xffff2389
  0143b:    	jne    0x341cd
  01441:    	sub    rsp,0x10
  01445:    	movq   QWORD PTR [rsp],xmm3
  0144a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01450: 00 	cmp    DWORD PTR [rip+0xffffffffffff0f36],0x0        # 0xffff238d
  01457:    	jne    0x341dc
  0145d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01466:    	mov    rax,QWORD PTR [r14-0x50]
  0146a:    	mov    QWORD PTR [rsp-0x40],rax
  0146f: 00 	mov    rdi,0x0
  01476: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0147f: 07 	movabs rax,0x1000700000060
  01489:    	mov    QWORD PTR [rsp-0x30],rax
  0148e: 45 	movabs r13,0x564559ea5f60
  01498:    	mov    rsi,QWORD PTR [rbx]
  0149b:    	mov    QWORD PTR [rsp-0x18],rsi
  014a0:    	lea    rsi,[rsp-0x18]
  014a5:    	mov    QWORD PTR [rbx],rsi
  014a8:    	lea    r14,[rsp-0x10]
  014ad:    	mov    QWORD PTR [rsp-0x20],r14
  014b2:    	call   0xffff2c3b
  014b7:    	lea    r14,[rbp-0x8]
  014bb:    	mov    QWORD PTR [rbx],r14
  014be:    	mov    r14,QWORD PTR [rbp-0x10]
  014c2:    	movq   xmm3,QWORD PTR [rsp]
  014c7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014cd:    	add    rsp,0x10
  014d1:    	test   rax,rax
  014d4:    	je     0x341f3
  014da:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  014de:    	sub    rsp,0x10
  014e2:    	movq   QWORD PTR [rsp],xmm3
  014e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014ed:    	mov    rdx,QWORD PTR [r14-0x38]
  014f1:    	mov    rcx,QWORD PTR [r14-0x48]
  014f5:    	mov    r8,QWORD PTR [r14-0x50]
  014f9:    	mov    rdi,rbx
  014fc:    	mov    rsi,r12
  014ff: 45 	movabs r9,0x564559eba578
  01509: 45 	movabs rax,0x5645597e4980
  01513:    	call   rax
  01515:    	movq   xmm3,QWORD PTR [rsp]
  0151a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01520:    	add    rsp,0x10
  01524:    	test   rax,rax
  01527:    	je     0x34202
:00087 %3 = 1: i32
  0152d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  01535: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  0153d:    	mov    rdi,QWORD PTR [r14-0x38]
  01541:    	mov    rsi,QWORD PTR [r14-0x50]
  01545: 00 	test   rdi,0x7
  0154c:    	jne    0x34211
  01552:    	cmp    DWORD PTR [rdi+0x4],0xb
  01556:    	jne    0x34211
  0155c: 00 	test   rsi,0x1
  01563:    	je     0x34211
  01569:    	sar    rsi,1
  0156c:    	sub    rsp,0x10
  01570:    	movq   QWORD PTR [rsp],xmm3
  01575:    	movq   QWORD PTR [rsp+0x8],xmm4
  0157b: 45 	movabs rax,0x5645597e4900
  01585:    	call   rax
  01587:    	movq   xmm3,QWORD PTR [rsp]
  0158c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01592:    	add    rsp,0x10
  01596:    	test   rax,rax
  01599:    	je     0x34220
  0159f:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  015a3: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  015ab:    	mov    rdi,QWORD PTR [r14-0x38]
  015af:    	mov    rsi,QWORD PTR [r14-0x58]
  015b3: 00 	test   rdi,0x7
  015ba:    	jne    0x3422f
  015c0:    	cmp    DWORD PTR [rdi+0x4],0xb
  015c4:    	jne    0x3422f
  015ca: 00 	test   rsi,0x1
  015d1:    	je     0x3422f
  015d7:    	sar    rsi,1
  015da:    	sub    rsp,0x10
  015de:    	movq   QWORD PTR [rsp],xmm3
  015e3:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e9: 45 	movabs rax,0x5645597e4900
  015f3:    	call   rax
  015f5:    	movq   xmm3,QWORD PTR [rsp]
  015fa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01600:    	add    rsp,0x10
  01604:    	test   rax,rax
  01607:    	je     0x3423e
  0160d:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  01611:    	mov    rdi,QWORD PTR [r14-0x50]
  01615: 00 	test   rdi,0x7
  0161c:    	jne    0x3424d
  01622:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01626:    	jne    0x3424d
  0162c: 26 	cmp    DWORD PTR [rip+0xffffffffffff0d56],0x26        # 0xffff2389
  01633:    	jne    0x3424d
  01639:    	sub    rsp,0x10
  0163d:    	movq   QWORD PTR [rsp],xmm3
  01642:    	movq   QWORD PTR [rsp+0x8],xmm4
  01648: 00 	cmp    DWORD PTR [rip+0xffffffffffff0d3e],0x0        # 0xffff238d
  0164f:    	jne    0x3425c
  01655: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0165e:    	mov    rax,QWORD PTR [r14-0x50]
  01662:    	mov    QWORD PTR [rsp-0x40],rax
  01667: 00 	mov    rdi,0x1
  0166e:    	mov    rax,QWORD PTR [r14-0x58]
  01672:    	mov    QWORD PTR [rsp-0x48],rax
  01677: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01680: 08 	movabs rax,0x100080000005d
  0168a:    	mov    QWORD PTR [rsp-0x30],rax
  0168f: 45 	movabs r13,0x564559e86470
  01699:    	mov    rsi,QWORD PTR [rbx]
  0169c:    	mov    QWORD PTR [rsp-0x18],rsi
  016a1:    	lea    rsi,[rsp-0x18]
  016a6:    	mov    QWORD PTR [rbx],rsi
  016a9:    	lea    r14,[rsp-0x10]
  016ae:    	mov    QWORD PTR [rsp-0x20],r14
  016b3:    	call   0xffffa9d5
  016b8:    	lea    r14,[rbp-0x8]
  016bc:    	mov    QWORD PTR [rbx],r14
  016bf:    	mov    r14,QWORD PTR [rbp-0x10]
  016c3:    	movq   xmm3,QWORD PTR [rsp]
  016c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016ce:    	add    rsp,0x10
  016d2:    	test   rax,rax
  016d5:    	je     0x34273
  016db:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  016df:    	sub    rsp,0x10
  016e3:    	movq   QWORD PTR [rsp],xmm3
  016e8:    	movq   QWORD PTR [rsp+0x8],xmm4
  016ee:    	mov    rdx,QWORD PTR [r14-0x38]
  016f2:    	mov    rcx,QWORD PTR [r14-0x48]
  016f6:    	mov    r8,QWORD PTR [r14-0x50]
  016fa:    	mov    rdi,rbx
  016fd:    	mov    rsi,r12
  01700: 45 	movabs r9,0x564559eba5f8
  0170a: 45 	movabs rax,0x5645597e4980
  01714:    	call   rax
  01716:    	movq   xmm3,QWORD PTR [rsp]
  0171b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01721:    	add    rsp,0x10
  01725:    	test   rax,rax
  01728:    	je     0x34282
:00095 %3 = 1: i32
  0172e: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  01736: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  0173e:    	mov    rdi,QWORD PTR [r14-0x38]
  01742:    	mov    rsi,QWORD PTR [r14-0x50]
  01746: 00 	test   rdi,0x7
  0174d:    	jne    0x34291
  01753:    	cmp    DWORD PTR [rdi+0x4],0xb
  01757:    	jne    0x34291
  0175d: 00 	test   rsi,0x1
  01764:    	je     0x34291
  0176a:    	sar    rsi,1
  0176d:    	sub    rsp,0x10
  01771:    	movq   QWORD PTR [rsp],xmm3
  01776:    	movq   QWORD PTR [rsp+0x8],xmm4
  0177c: 45 	movabs rax,0x5645597e4900
  01786:    	call   rax
  01788:    	movq   xmm3,QWORD PTR [rsp]
  0178d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01793:    	add    rsp,0x10
  01797:    	test   rax,rax
  0179a:    	je     0x342a0
  017a0:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  017a4:    	mov    rdi,QWORD PTR [r14-0x50]
  017a8: 00 	test   rdi,0x7
  017af:    	jne    0x342af
  017b5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  017b9:    	jne    0x342af
  017bf: 26 	cmp    DWORD PTR [rip+0xffffffffffff0bc3],0x26        # 0xffff2389
  017c6:    	jne    0x342af
  017cc:    	sub    rsp,0x10
  017d0:    	movq   QWORD PTR [rsp],xmm3
  017d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  017db: 00 	cmp    DWORD PTR [rip+0xffffffffffff0bab],0x0        # 0xffff238d
  017e2:    	jne    0x342be
  017e8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017f1:    	mov    rax,QWORD PTR [r14-0x50]
  017f5:    	mov    QWORD PTR [rsp-0x40],rax
  017fa: 00 	mov    rdi,0x0
  01801: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0180a: 07 	movabs rax,0x1000700000060
  01814:    	mov    QWORD PTR [rsp-0x30],rax
  01819: 45 	movabs r13,0x564559ea5f60
  01823:    	mov    rsi,QWORD PTR [rbx]
  01826:    	mov    QWORD PTR [rsp-0x18],rsi
  0182b:    	lea    rsi,[rsp-0x18]
  01830:    	mov    QWORD PTR [rbx],rsi
  01833:    	lea    r14,[rsp-0x10]
  01838:    	mov    QWORD PTR [rsp-0x20],r14
  0183d:    	call   0xffff2c3b
  01842:    	lea    r14,[rbp-0x8]
  01846:    	mov    QWORD PTR [rbx],r14
  01849:    	mov    r14,QWORD PTR [rbp-0x10]
  0184d:    	movq   xmm3,QWORD PTR [rsp]
  01852:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01858:    	add    rsp,0x10
  0185c:    	test   rax,rax
  0185f:    	je     0x342d5
  01865:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01869:    	sub    rsp,0x10
  0186d:    	movq   QWORD PTR [rsp],xmm3
  01872:    	movq   QWORD PTR [rsp+0x8],xmm4
  01878:    	mov    rdx,QWORD PTR [r14-0x38]
  0187c:    	mov    rcx,QWORD PTR [r14-0x48]
  01880:    	mov    r8,QWORD PTR [r14-0x50]
  01884:    	mov    rdi,rbx
  01887:    	mov    rsi,r12
  0188a: 45 	movabs r9,0x564559eba658
  01894: 45 	movabs rax,0x5645597e4980
  0189e:    	call   rax
  018a0:    	movq   xmm3,QWORD PTR [rsp]
  018a5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018ab:    	add    rsp,0x10
  018af:    	test   rax,rax
  018b2:    	je     0x342e4
:00101 ret %4
  018b8:    	mov    rax,QWORD PTR [r14-0x50]
  018bc:    	leave  
  018bd:    	ret    
==> start whole compile: intersect FuncId(100) self_class:Plane start:[00000] bytecode:0x564559ec5d10
<== finished compile. elapsed:93.5µs
offset:Pos(81452) code: 5165 bytes  data: 263 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x328ff
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x3290e
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x3290e
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x3291d
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x3291d
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffff08fb],0x26        # 0xffff0995
  0009a:    	jne    0x3291d
  000a0: 00 	cmp    DWORD PTR [rip+0xffffffffffff08f2],0x0        # 0xffff0999
  000a7:    	jne    0x3292c
  000ad: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b6:    	mov    rax,QWORD PTR [r14-0x68]
  000ba:    	mov    QWORD PTR [rsp-0x40],rax
  000bf: 00 	mov    rdi,0x1
  000c6:    	mov    rax,QWORD PTR [r14-0x70]
  000ca:    	mov    QWORD PTR [rsp-0x48],rax
  000cf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000d8: 05 	movabs rax,0x100050000005e
  000e2:    	mov    QWORD PTR [rsp-0x30],rax
  000e7: 45 	movabs r13,0x564559ecbab0
  000f1:    	mov    rsi,QWORD PTR [rbx]
  000f4:    	mov    QWORD PTR [rsp-0x18],rsi
  000f9:    	lea    rsi,[rsp-0x18]
  000fe:    	mov    QWORD PTR [rbx],rsi
  00101:    	lea    r14,[rsp-0x10]
  00106:    	mov    QWORD PTR [rsp-0x20],r14
  0010b:    	call   0xffff165c
  00110:    	lea    r14,[rbp-0x8]
  00114:    	mov    QWORD PTR [rbx],r14
  00117:    	mov    r14,QWORD PTR [rbp-0x10]
  0011b:    	test   rax,rax
  0011e:    	je     0x32943
  00124:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  00128:    	mov    rdi,QWORD PTR [r14-0x48]
  0012c: 00 	test   rdi,0x1
  00133:    	jne    0x32952
  00139: 00 	test   rdi,0x2
  00140:    	je     0x17c
  00146:    	xorps  xmm2,xmm2
  00149: 00 	movabs rax,0x8000000000000002
  00153:    	cmp    rdi,rax
  00156:    	je     0x18e
  0015c:    	mov    rax,rdi
  0015f:    	sar    rax,0x3f
  00163:    	add    rax,0x2
  00167:    	and    rdi,0xfffffffffffffffc
  0016b:    	or     rdi,rax
  0016e:    	rol    rdi,0x3d
  00172:    	movq   xmm2,rdi
  00177:    	jmp    0x18e
  0017c:    	call   0xfffec251
  00181:    	test   rax,rax
  00184:    	je     0x32952
  0018a:    	movq   xmm2,xmm0
  0018e: 00 	xorps  xmm2,XMMWORD PTR [rip+0x129f]        # 0x1434
:00006 %7 = %1.call dir()                   [Ray]
  00195:    	movq   xmm0,xmm2
  00199:    	call   0xfffec375
  0019e:    	mov    QWORD PTR [r14-0x48],rax
  001a2:    	mov    rdi,QWORD PTR [r14-0x38]
  001a6: 00 	test   rdi,0x7
  001ad:    	jne    0x32961
  001b3:    	cmp    DWORD PTR [rdi+0x4],0x31
  001b7:    	jne    0x32961
  001bd: 26 	cmp    DWORD PTR [rip+0xffffffffffff07d1],0x26        # 0xffff0995
  001c4:    	jne    0x32961
  001ca:    	mov    esi,DWORD PTR [rip+0x1270]        # 0x1440
  001d0:    	cmp    esi,0xffffffff
  001d3:    	je     0x32970
  001d9:    	cmp    WORD PTR [rdi+0x2],0x3
  001de:    	jne    0x1f7
  001e4:    	cmp    esi,0x6
  001e7:    	jge    0x1f7
  001ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f2:    	jmp    0x203
  001f7: 45 	movabs rax,0x564559818b00
  00201:    	call   rax
  00203:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00207:    	mov    rdi,QWORD PTR [r14-0x30]
  0020b:    	mov    rax,QWORD PTR [rdi+0x18]
  0020f:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  00213:    	mov    rdi,QWORD PTR [r14-0x68]
  00217: 00 	test   rdi,0x7
  0021e:    	jne    0x32999
  00224:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00228:    	jne    0x32999
  0022e: 26 	cmp    DWORD PTR [rip+0xffffffffffff0760],0x26        # 0xffff0995
  00235:    	jne    0x32999
  0023b: 00 	cmp    DWORD PTR [rip+0xffffffffffff0757],0x0        # 0xffff0999
  00242:    	jne    0x329a8
  00248: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00251:    	mov    rax,QWORD PTR [r14-0x68]
  00255:    	mov    QWORD PTR [rsp-0x40],rax
  0025a: 00 	mov    rdi,0x1
  00261:    	mov    rax,QWORD PTR [r14-0x70]
  00265:    	mov    QWORD PTR [rsp-0x48],rax
  0026a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00273: 05 	movabs rax,0x100050000005e
  0027d:    	mov    QWORD PTR [rsp-0x30],rax
  00282: 45 	movabs r13,0x564559ecbab0
  0028c:    	mov    rsi,QWORD PTR [rbx]
  0028f:    	mov    QWORD PTR [rsp-0x18],rsi
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rbx],rsi
  0029c:    	lea    r14,[rsp-0x10]
  002a1:    	mov    QWORD PTR [rsp-0x20],r14
  002a6:    	call   0xffff165c
  002ab:    	lea    r14,[rbp-0x8]
  002af:    	mov    QWORD PTR [rbx],r14
  002b2:    	mov    r14,QWORD PTR [rbp-0x10]
  002b6:    	test   rax,rax
  002b9:    	je     0x329bf
  002bf:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002c3:    	mov    rax,QWORD PTR [r14-0x50]
  002c7:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  002cb: 00 	movq   xmm2,QWORD PTR [rip+0x1171]        # 0x1444
  002d3: 00 	movabs rax,0x8000000000000002
  002dd:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
  002e1:    	mov    rdi,QWORD PTR [r14-0x50]
  002e5: 00 	test   rdi,0x1
  002ec:    	jne    0x329ce
  002f2: 00 	test   rdi,0x2
  002f9:    	je     0x335
  002ff:    	xorps  xmm3,xmm3
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x347
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm3,rdi
  00330:    	jmp    0x347
  00335:    	call   0xfffec251
  0033a:    	test   rax,rax
  0033d:    	je     0x329ce
  00343:    	movq   xmm3,xmm0
  00347:    	ucomisd xmm3,xmm2
  0034b:    	jae    0x329dd
:00014 condnotbr _%7 =>:00018
:00015 %5 = %4
:00016 %5 = neg %5                          [Float]
  00351:    	movq   xmm2,xmm3
  00355: 00 	xorps  xmm2,XMMWORD PTR [rip+0x10f8]        # 0x1454
:00017 br =>:00018
  0035c:    	jmp    0x329f6
:00018 %7 = literal[1e-17]
  00361: 00 	movq   xmm2,QWORD PTR [rip+0x10fb]        # 0x1464
  00369: aa 	movabs rax,0xe33877aa3236a4ba
  00373:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
  00377:    	mov    rdi,QWORD PTR [r14-0x58]
  0037b: 00 	test   rdi,0x1
  00382:    	jne    0x32a1c
  00388: 00 	test   rdi,0x2
  0038f:    	je     0x3cb
  00395:    	xorps  xmm4,xmm4
  00398: 00 	movabs rax,0x8000000000000002
  003a2:    	cmp    rdi,rax
  003a5:    	je     0x3dd
  003ab:    	mov    rax,rdi
  003ae:    	sar    rax,0x3f
  003b2:    	add    rax,0x2
  003b6:    	and    rdi,0xfffffffffffffffc
  003ba:    	or     rdi,rax
  003bd:    	rol    rdi,0x3d
  003c1:    	movq   xmm4,rdi
  003c6:    	jmp    0x3dd
  003cb:    	call   0xfffec251
  003d0:    	test   rax,rax
  003d3:    	je     0x32a1c
  003d9:    	movq   xmm4,xmm0
  003dd:    	ucomisd xmm4,xmm2
  003e1:    	jae    0x3f5
:00020 condnotbr _%7 =>:00024
:00021 %7 = nil
  003e7: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  003ef:    	mov    rax,QWORD PTR [r14-0x68]
  003f3:    	leave  
  003f4:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  003f5:    	mov    rdi,QWORD PTR [r14-0x38]
  003f9: 00 	test   rdi,0x7
  00400:    	jne    0x32a2b
  00406:    	cmp    DWORD PTR [rdi+0x4],0x31
  0040a:    	jne    0x32a2b
  00410: 26 	cmp    DWORD PTR [rip+0xffffffffffff057e],0x26        # 0xffff0995
  00417:    	jne    0x32a2b
  0041d:    	mov    esi,DWORD PTR [rip+0x104d]        # 0x1470
  00423:    	cmp    esi,0xffffffff
  00426:    	je     0x32a3a
  0042c:    	cmp    WORD PTR [rdi+0x2],0x3
  00431:    	jne    0x44a
  00437:    	cmp    esi,0x6
  0043a:    	jge    0x44a
  00440:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00445:    	jmp    0x456
  0044a: 45 	movabs rax,0x564559818b00
  00454:    	call   rax
  00456:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  0045a:    	mov    rdi,QWORD PTR [r14-0x30]
  0045e:    	mov    rax,QWORD PTR [rdi+0x18]
  00462:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  00466:    	mov    rdi,QWORD PTR [r14-0x68]
  0046a: 00 	test   rdi,0x7
  00471:    	jne    0x32a63
  00477:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0047b:    	jne    0x32a63
  00481: 26 	cmp    DWORD PTR [rip+0xffffffffffff050d],0x26        # 0xffff0995
  00488:    	jne    0x32a63
  0048e: 00 	cmp    DWORD PTR [rip+0xffffffffffff0504],0x0        # 0xffff0999
  00495:    	jne    0x32a72
  0049b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  004a4:    	mov    rax,QWORD PTR [r14-0x68]
  004a8:    	mov    QWORD PTR [rsp-0x40],rax
  004ad: 00 	mov    rdi,0x1
  004b4:    	mov    rax,QWORD PTR [r14-0x70]
  004b8:    	mov    QWORD PTR [rsp-0x48],rax
  004bd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  004c6: 05 	movabs rax,0x100050000005e
  004d0:    	mov    QWORD PTR [rsp-0x30],rax
  004d5: 45 	movabs r13,0x564559ecbab0
  004df:    	mov    rsi,QWORD PTR [rbx]
  004e2:    	mov    QWORD PTR [rsp-0x18],rsi
  004e7:    	lea    rsi,[rsp-0x18]
  004ec:    	mov    QWORD PTR [rbx],rsi
  004ef:    	lea    r14,[rsp-0x10]
  004f4:    	mov    QWORD PTR [rsp-0x20],r14
  004f9:    	call   0xffff165c
  004fe:    	lea    r14,[rbp-0x8]
  00502:    	mov    QWORD PTR [rbx],r14
  00505:    	mov    r14,QWORD PTR [rbp-0x10]
  00509:    	test   rax,rax
  0050c:    	je     0x32a89
  00512:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  00516:    	mov    rdi,QWORD PTR [r14-0x68]
  0051a: 00 	test   rdi,0x1
  00521:    	jne    0x32a98
  00527: 00 	test   rdi,0x2
  0052e:    	je     0x56a
  00534:    	xorps  xmm2,xmm2
  00537: 00 	movabs rax,0x8000000000000002
  00541:    	cmp    rdi,rax
  00544:    	je     0x57c
  0054a:    	mov    rax,rdi
  0054d:    	sar    rax,0x3f
  00551:    	add    rax,0x2
  00555:    	and    rdi,0xfffffffffffffffc
  00559:    	or     rdi,rax
  0055c:    	rol    rdi,0x3d
  00560:    	movq   xmm2,rdi
  00565:    	jmp    0x57c
  0056a:    	call   0xfffec251
  0056f:    	test   rax,rax
  00572:    	je     0x32a98
  00578:    	movq   xmm2,xmm0
  0057c:    	mov    rdi,QWORD PTR [r14-0x48]
  00580: 00 	test   rdi,0x1
  00587:    	jne    0x32aa7
  0058d: 00 	test   rdi,0x2
  00594:    	je     0x5d0
  0059a:    	xorps  xmm3,xmm3
  0059d: 00 	movabs rax,0x8000000000000002
  005a7:    	cmp    rdi,rax
  005aa:    	je     0x5e2
  005b0:    	mov    rax,rdi
  005b3:    	sar    rax,0x3f
  005b7:    	add    rax,0x2
  005bb:    	and    rdi,0xfffffffffffffffc
  005bf:    	or     rdi,rax
  005c2:    	rol    rdi,0x3d
  005c6:    	movq   xmm3,rdi
  005cb:    	jmp    0x5e2
  005d0:    	call   0xfffec251
  005d5:    	test   rax,rax
  005d8:    	je     0x32aa7
  005de:    	movq   xmm3,xmm0
  005e2:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  005e6: 00 	xorps  xmm2,XMMWORD PTR [rip+0xe87]        # 0x1474
:00031 %6 = %7 / %4                         [Float][Float]
  005ed:    	mov    rdi,QWORD PTR [r14-0x50]
  005f1: 00 	test   rdi,0x1
  005f8:    	jne    0x32ab6
  005fe: 00 	test   rdi,0x2
  00605:    	je     0x641
  0060b:    	xorps  xmm4,xmm4
  0060e: 00 	movabs rax,0x8000000000000002
  00618:    	cmp    rdi,rax
  0061b:    	je     0x653
  00621:    	mov    rax,rdi
  00624:    	sar    rax,0x3f
  00628:    	add    rax,0x2
  0062c:    	and    rdi,0xfffffffffffffffc
  00630:    	or     rdi,rax
  00633:    	rol    rdi,0x3d
  00637:    	movq   xmm4,rdi
  0063c:    	jmp    0x653
  00641:    	call   0xfffec251
  00646:    	test   rax,rax
  00649:    	je     0x32ab6
  0064f:    	movq   xmm4,xmm0
  00653:    	movq   xmm5,xmm2
  00657:    	movq   rax,xmm4
  0065c:    	test   rax,rax
  0065f:    	je     0xfffec21d
  00665:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  00669: 00 	movq   xmm2,QWORD PTR [rip+0xe13]        # 0x1484
  00671: 00 	movabs rax,0x8000000000000002
  0067b:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
  0067f:    	ucomisd xmm5,xmm2
  00683:    	jbe    0x33273
:00034 condnotbr _%7 =>:00083
:00035 %7 = %2.call t()                     [Isect]
  00689:    	movq   xmm0,xmm5
  0068d:    	call   0xfffec375
  00692:    	mov    QWORD PTR [r14-0x60],rax
  00696:    	mov    rdi,QWORD PTR [r14-0x40]
  0069a: 00 	test   rdi,0x7
  006a1:    	jne    0x32ad2
  006a7:    	cmp    DWORD PTR [rdi+0x4],0x33
  006ab:    	jne    0x32ad2
  006b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff02dd],0x26        # 0xffff0995
  006b8:    	jne    0x32ad2
  006be:    	mov    esi,DWORD PTR [rip+0xdcc]        # 0x1490
  006c4:    	cmp    esi,0xffffffff
  006c7:    	je     0x32ae1
  006cd:    	cmp    WORD PTR [rdi+0x2],0x3
  006d2:    	jne    0x6eb
  006d8:    	cmp    esi,0x6
  006db:    	jge    0x6eb
  006e1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006e6:    	jmp    0x6f7
  006eb: 45 	movabs rax,0x564559818b00
  006f5:    	call   rax
  006f7:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [Float][Float]
  006fb:    	mov    rdi,QWORD PTR [r14-0x60]
  006ff: 00 	test   rdi,0x1
  00706:    	jne    0x32b0a
  0070c: 00 	test   rdi,0x2
  00713:    	je     0x74f
  00719:    	xorps  xmm2,xmm2
  0071c: 00 	movabs rax,0x8000000000000002
  00726:    	cmp    rdi,rax
  00729:    	je     0x761
  0072f:    	mov    rax,rdi
  00732:    	sar    rax,0x3f
  00736:    	add    rax,0x2
  0073a:    	and    rdi,0xfffffffffffffffc
  0073e:    	or     rdi,rax
  00741:    	rol    rdi,0x3d
  00745:    	movq   xmm2,rdi
  0074a:    	jmp    0x761
  0074f:    	call   0xfffec251
  00754:    	test   rax,rax
  00757:    	je     0x32b0a
  0075d:    	movq   xmm2,xmm0
  00761:    	mov    rdi,QWORD PTR [r14-0x68]
  00765: 00 	test   rdi,0x1
  0076c:    	jne    0x32b19
  00772: 00 	test   rdi,0x2
  00779:    	je     0x7b5
  0077f:    	xorps  xmm3,xmm3
  00782: 00 	movabs rax,0x8000000000000002
  0078c:    	cmp    rdi,rax
  0078f:    	je     0x7c7
  00795:    	mov    rax,rdi
  00798:    	sar    rax,0x3f
  0079c:    	add    rax,0x2
  007a0:    	and    rdi,0xfffffffffffffffc
  007a4:    	or     rdi,rax
  007a7:    	rol    rdi,0x3d
  007ab:    	movq   xmm3,rdi
  007b0:    	jmp    0x7c7
  007b5:    	call   0xfffec251
  007ba:    	test   rax,rax
  007bd:    	je     0x32b19
  007c3:    	movq   xmm3,xmm0
  007c7:    	ucomisd xmm2,xmm3
  007cb:    	jae    0x33299
:00038 condnotbr _%7 =>:00083
:00039 %7 = literal[true]
  007d1: 00 	mov    rax,0x1c
  007d8:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [Isect]
  007dc:    	mov    rdi,QWORD PTR [r14-0x40]
  007e0: 00 	test   rdi,0x7
  007e7:    	jne    0x32b28
  007ed:    	cmp    DWORD PTR [rdi+0x4],0x33
  007f1:    	jne    0x32b28
  007f7: 26 	cmp    DWORD PTR [rip+0xffffffffffff0197],0x26        # 0xffff0995
  007fe:    	jne    0x32b28
  00804:    	mov    esi,DWORD PTR [rip+0xc8e]        # 0x1498
  0080a:    	cmp    esi,0xffffffff
  0080d:    	je     0x32b46
  00813:    	cmp    WORD PTR [rdi+0x2],0x3
  00818:    	jne    0x835
  0081e:    	cmp    esi,0x6
  00821:    	jge    0x835
  00827:    	mov    rax,QWORD PTR [r14-0x68]
  0082b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00830:    	jmp    0x84e
  00835:    	mov    rdx,QWORD PTR [r14-0x68]
  00839: 45 	movabs rax,0x564559818d80
  00843:    	call   rax
  00845:    	test   rax,rax
  00848:    	je     0x32b37
:00041 
:00042 _ = %2.call t=(%6; 1)                [Isect]
  0084e:    	mov    rdi,QWORD PTR [r14-0x40]
  00852: 00 	test   rdi,0x7
  00859:    	jne    0x32b76
  0085f:    	cmp    DWORD PTR [rdi+0x4],0x33
  00863:    	jne    0x32b76
  00869: 26 	cmp    DWORD PTR [rip+0xffffffffffff0125],0x26        # 0xffff0995
  00870:    	jne    0x32b76
  00876:    	mov    esi,DWORD PTR [rip+0xc24]        # 0x14a0
  0087c:    	cmp    esi,0xffffffff
  0087f:    	je     0x32b94
  00885:    	cmp    WORD PTR [rdi+0x2],0x3
  0088a:    	jne    0x8a7
  00890:    	cmp    esi,0x6
  00893:    	jge    0x8a7
  00899:    	mov    rax,QWORD PTR [r14-0x60]
  0089d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  008a2:    	jmp    0x8c0
  008a7:    	mov    rdx,QWORD PTR [r14-0x60]
  008ab: 45 	movabs rax,0x564559818d80
  008b5:    	call   rax
  008b7:    	test   rax,rax
  008ba:    	je     0x32b85
:00043 
:00044 %7 = @n: Plane[IvarId(1)]
  008c0:    	mov    rdi,QWORD PTR [r14-0x30]
  008c4:    	mov    rax,QWORD PTR [rdi+0x18]
  008c8:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [Isect]
  008cc:    	mov    rdi,QWORD PTR [r14-0x40]
  008d0: 00 	test   rdi,0x7
  008d7:    	jne    0x32bc4
  008dd:    	cmp    DWORD PTR [rdi+0x4],0x33
  008e1:    	jne    0x32bc4
  008e7: 26 	cmp    DWORD PTR [rip+0xffffffffffff00a7],0x26        # 0xffff0995
  008ee:    	jne    0x32bc4
  008f4:    	mov    esi,DWORD PTR [rip+0xbae]        # 0x14a8
  008fa:    	cmp    esi,0xffffffff
  008fd:    	je     0x32be2
  00903:    	cmp    WORD PTR [rdi+0x2],0x3
  00908:    	jne    0x925
  0090e:    	cmp    esi,0x6
  00911:    	jge    0x925
  00917:    	mov    rax,QWORD PTR [r14-0x68]
  0091b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00920:    	jmp    0x93e
  00925:    	mov    rdx,QWORD PTR [r14-0x68]
  00929: 45 	movabs rax,0x564559818d80
  00933:    	call   rax
  00935:    	test   rax,rax
  00938:    	je     0x32bd3
:00046 
:00047 %7 = const[Vec]                      [Vec]
  0093e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff005f]        # 0xffff09a4
  00945: 00 	cmp    rax,QWORD PTR [rip+0xb78]        # 0x14c4
  0094c:    	jne    0x32c12
  00952: 00 	mov    rax,QWORD PTR [rip+0xb5b]        # 0x14b4
  00959:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [Ray]
  0095d:    	mov    rdi,QWORD PTR [r14-0x38]
  00961: 00 	test   rdi,0x7
  00968:    	jne    0x32c5d
  0096e:    	cmp    DWORD PTR [rdi+0x4],0x31
  00972:    	jne    0x32c5d
  00978: 26 	cmp    DWORD PTR [rip+0xffffffffffff0016],0x26        # 0xffff0995
  0097f:    	jne    0x32c5d
  00985:    	mov    esi,DWORD PTR [rip+0xb45]        # 0x14d0
  0098b:    	cmp    esi,0xffffffff
  0098e:    	je     0x32c6c
  00994:    	cmp    WORD PTR [rdi+0x2],0x3
  00999:    	jne    0x9b2
  0099f:    	cmp    esi,0x6
  009a2:    	jge    0x9b2
  009a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ad:    	jmp    0x9be
  009b2: 45 	movabs rax,0x564559818b00
  009bc:    	call   rax
  009be:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [Vec]
  009c2:    	mov    rdi,QWORD PTR [r14-0x70]
  009c6: 00 	test   rdi,0x7
  009cd:    	jne    0x32c95
  009d3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009d7:    	jne    0x32c95
  009dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffeffb1],0x26        # 0xffff0995
  009e4:    	jne    0x32c95
  009ea:    	mov    esi,DWORD PTR [rip+0xae8]        # 0x14d8
  009f0:    	cmp    esi,0xffffffff
  009f3:    	je     0x32ca4
  009f9:    	cmp    WORD PTR [rdi+0x2],0x3
  009fe:    	jne    0xa17
  00a04:    	cmp    esi,0x6
  00a07:    	jge    0xa17
  00a0d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a12:    	jmp    0xa23
  00a17: 45 	movabs rax,0x564559818b00
  00a21:    	call   rax
  00a23:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [Ray]
  00a27:    	mov    rdi,QWORD PTR [r14-0x38]
  00a2b: 00 	test   rdi,0x7
  00a32:    	jne    0x32ccd
  00a38:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a3c:    	jne    0x32ccd
  00a42: 26 	cmp    DWORD PTR [rip+0xfffffffffffeff4c],0x26        # 0xffff0995
  00a49:    	jne    0x32ccd
  00a4f:    	mov    esi,DWORD PTR [rip+0xa8b]        # 0x14e0
  00a55:    	cmp    esi,0xffffffff
  00a58:    	je     0x32cdc
  00a5e:    	cmp    WORD PTR [rdi+0x2],0x3
  00a63:    	jne    0xa7c
  00a69:    	cmp    esi,0x6
  00a6c:    	jge    0xa7c
  00a72:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a77:    	jmp    0xa88
  00a7c: 45 	movabs rax,0x564559818b00
  00a86:    	call   rax
  00a88:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [Vec]
  00a8c:    	mov    rdi,QWORD PTR [r14-0x78]
  00a90: 00 	test   rdi,0x7
  00a97:    	jne    0x32d05
  00a9d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00aa1:    	jne    0x32d05
  00aa7: 26 	cmp    DWORD PTR [rip+0xfffffffffffefee7],0x26        # 0xffff0995
  00aae:    	jne    0x32d05
  00ab4:    	mov    esi,DWORD PTR [rip+0xa2e]        # 0x14e8
  00aba:    	cmp    esi,0xffffffff
  00abd:    	je     0x32d14
  00ac3:    	cmp    WORD PTR [rdi+0x2],0x3
  00ac8:    	jne    0xae1
  00ace:    	cmp    esi,0x6
  00ad1:    	jge    0xae1
  00ad7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00adc:    	jmp    0xaed
  00ae1: 45 	movabs rax,0x564559818b00
  00aeb:    	call   rax
  00aed:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [Float][Float]
  00af1:    	mov    rdi,QWORD PTR [r14-0x60]
  00af5: 00 	test   rdi,0x1
  00afc:    	jne    0x32d3d
  00b02: 00 	test   rdi,0x2
  00b09:    	je     0xb45
  00b0f:    	xorps  xmm2,xmm2
  00b12: 00 	movabs rax,0x8000000000000002
  00b1c:    	cmp    rdi,rax
  00b1f:    	je     0xb57
  00b25:    	mov    rax,rdi
  00b28:    	sar    rax,0x3f
  00b2c:    	add    rax,0x2
  00b30:    	and    rdi,0xfffffffffffffffc
  00b34:    	or     rdi,rax
  00b37:    	rol    rdi,0x3d
  00b3b:    	movq   xmm2,rdi
  00b40:    	jmp    0xb57
  00b45:    	call   0xfffec251
  00b4a:    	test   rax,rax
  00b4d:    	je     0x32d3d
  00b53:    	movq   xmm2,xmm0
  00b57:    	mov    rdi,QWORD PTR [r14-0x78]
  00b5b: 00 	test   rdi,0x1
  00b62:    	jne    0x32d4c
  00b68: 00 	test   rdi,0x2
  00b6f:    	je     0xbab
  00b75:    	xorps  xmm3,xmm3
  00b78: 00 	movabs rax,0x8000000000000002
  00b82:    	cmp    rdi,rax
  00b85:    	je     0xbbd
  00b8b:    	mov    rax,rdi
  00b8e:    	sar    rax,0x3f
  00b92:    	add    rax,0x2
  00b96:    	and    rdi,0xfffffffffffffffc
  00b9a:    	or     rdi,rax
  00b9d:    	rol    rdi,0x3d
  00ba1:    	movq   xmm3,rdi
  00ba6:    	jmp    0xbbd
  00bab:    	call   0xfffec251
  00bb0:    	test   rax,rax
  00bb3:    	je     0x32d4c
  00bb9:    	movq   xmm3,xmm0
  00bbd:    	mulsd  xmm3,xmm2
:00057 %8 = %8 + %9                         [Float][Float]
  00bc1:    	mov    rdi,QWORD PTR [r14-0x70]
  00bc5: 00 	test   rdi,0x1
  00bcc:    	jne    0x32d5b
  00bd2: 00 	test   rdi,0x2
  00bd9:    	je     0xc15
  00bdf:    	xorps  xmm4,xmm4
  00be2: 00 	movabs rax,0x8000000000000002
  00bec:    	cmp    rdi,rax
  00bef:    	je     0xc27
  00bf5:    	mov    rax,rdi
  00bf8:    	sar    rax,0x3f
  00bfc:    	add    rax,0x2
  00c00:    	and    rdi,0xfffffffffffffffc
  00c04:    	or     rdi,rax
  00c07:    	rol    rdi,0x3d
  00c0b:    	movq   xmm4,rdi
  00c10:    	jmp    0xc27
  00c15:    	call   0xfffec251
  00c1a:    	test   rax,rax
  00c1d:    	je     0x32d5b
  00c23:    	movq   xmm4,xmm0
  00c27:    	addsd  xmm4,xmm3
:00058 %9 = %1.call org()                   [Ray]
  00c2b:    	mov    rdi,QWORD PTR [r14-0x38]
  00c2f: 00 	test   rdi,0x7
  00c36:    	jne    0x32d77
  00c3c:    	cmp    DWORD PTR [rdi+0x4],0x31
  00c40:    	jne    0x32d77
  00c46: 26 	cmp    DWORD PTR [rip+0xfffffffffffefd48],0x26        # 0xffff0995
  00c4d:    	jne    0x32d77
  00c53:    	mov    esi,DWORD PTR [rip+0x897]        # 0x14f0
  00c59:    	cmp    esi,0xffffffff
  00c5c:    	je     0x32d93
  00c62:    	cmp    WORD PTR [rdi+0x2],0x3
  00c67:    	jne    0xc80
  00c6d:    	cmp    esi,0x6
  00c70:    	jge    0xc80
  00c76:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c7b:    	jmp    0xc9e
  00c80:    	sub    rsp,0x10
  00c84:    	movq   QWORD PTR [rsp],xmm4
  00c89: 45 	movabs rax,0x564559818b00
  00c93:    	call   rax
  00c95:    	movq   xmm4,QWORD PTR [rsp]
  00c9a:    	add    rsp,0x10
  00c9e:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [Vec]
  00ca2:    	mov    rdi,QWORD PTR [r14-0x78]
  00ca6: 00 	test   rdi,0x7
  00cad:    	jne    0x32dce
  00cb3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00cb7:    	jne    0x32dce
  00cbd: 26 	cmp    DWORD PTR [rip+0xfffffffffffefcd1],0x26        # 0xffff0995
  00cc4:    	jne    0x32dce
  00cca:    	mov    esi,DWORD PTR [rip+0x828]        # 0x14f8
  00cd0:    	cmp    esi,0xffffffff
  00cd3:    	je     0x32dea
  00cd9:    	cmp    WORD PTR [rdi+0x2],0x3
  00cde:    	jne    0xcf7
  00ce4:    	cmp    esi,0x6
  00ce7:    	jge    0xcf7
  00ced:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cf2:    	jmp    0xd15
  00cf7:    	sub    rsp,0x10
  00cfb:    	movq   QWORD PTR [rsp],xmm4
  00d00: 45 	movabs rax,0x564559818b00
  00d0a:    	call   rax
  00d0c:    	movq   xmm4,QWORD PTR [rsp]
  00d11:    	add    rsp,0x10
  00d15:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [Ray]
  00d19:    	mov    rdi,QWORD PTR [r14-0x38]
  00d1d: 00 	test   rdi,0x7
  00d24:    	jne    0x32e25
  00d2a:    	cmp    DWORD PTR [rdi+0x4],0x31
  00d2e:    	jne    0x32e25
  00d34: 26 	cmp    DWORD PTR [rip+0xfffffffffffefc5a],0x26        # 0xffff0995
  00d3b:    	jne    0x32e25
  00d41:    	mov    esi,DWORD PTR [rip+0x7b9]        # 0x1500
  00d47:    	cmp    esi,0xffffffff
  00d4a:    	je     0x32e41
  00d50:    	cmp    WORD PTR [rdi+0x2],0x3
  00d55:    	jne    0xd6e
  00d5b:    	cmp    esi,0x6
  00d5e:    	jge    0xd6e
  00d64:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d69:    	jmp    0xd8c
  00d6e:    	sub    rsp,0x10
  00d72:    	movq   QWORD PTR [rsp],xmm4
  00d77: 45 	movabs rax,0x564559818b00
  00d81:    	call   rax
  00d83:    	movq   xmm4,QWORD PTR [rsp]
  00d88:    	add    rsp,0x10
  00d8c:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [Vec]
  00d90:    	mov    rdi,QWORD PTR [r14-0x80]
  00d94: 00 	test   rdi,0x7
  00d9b:    	jne    0x32e7c
  00da1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00da5:    	jne    0x32e7c
  00dab: 26 	cmp    DWORD PTR [rip+0xfffffffffffefbe3],0x26        # 0xffff0995
  00db2:    	jne    0x32e7c
  00db8:    	mov    esi,DWORD PTR [rip+0x74a]        # 0x1508
  00dbe:    	cmp    esi,0xffffffff
  00dc1:    	je     0x32e98
  00dc7:    	cmp    WORD PTR [rdi+0x2],0x3
  00dcc:    	jne    0xde5
  00dd2:    	cmp    esi,0x6
  00dd5:    	jge    0xde5
  00ddb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00de0:    	jmp    0xe03
  00de5:    	sub    rsp,0x10
  00de9:    	movq   QWORD PTR [rsp],xmm4
  00dee: 45 	movabs rax,0x564559818b00
  00df8:    	call   rax
  00dfa:    	movq   xmm4,QWORD PTR [rsp]
  00dff:    	add    rsp,0x10
  00e03:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [Float][Float]
  00e07:    	mov    rdi,QWORD PTR [r14-0x60]
  00e0b: 00 	test   rdi,0x1
  00e12:    	jne    0x32ed3
  00e18: 00 	test   rdi,0x2
  00e1f:    	je     0xe5b
  00e25:    	xorps  xmm2,xmm2
  00e28: 00 	movabs rax,0x8000000000000002
  00e32:    	cmp    rdi,rax
  00e35:    	je     0xe6d
  00e3b:    	mov    rax,rdi
  00e3e:    	sar    rax,0x3f
  00e42:    	add    rax,0x2
  00e46:    	and    rdi,0xfffffffffffffffc
  00e4a:    	or     rdi,rax
  00e4d:    	rol    rdi,0x3d
  00e51:    	movq   xmm2,rdi
  00e56:    	jmp    0xe6d
  00e5b:    	call   0xfffec251
  00e60:    	test   rax,rax
  00e63:    	je     0x32ed3
  00e69:    	movq   xmm2,xmm0
  00e6d:    	mov    rdi,QWORD PTR [r14-0x80]
  00e71: 00 	test   rdi,0x1
  00e78:    	jne    0x32eef
  00e7e: 00 	test   rdi,0x2
  00e85:    	je     0xec1
  00e8b:    	xorps  xmm3,xmm3
  00e8e: 00 	movabs rax,0x8000000000000002
  00e98:    	cmp    rdi,rax
  00e9b:    	je     0xed3
  00ea1:    	mov    rax,rdi
  00ea4:    	sar    rax,0x3f
  00ea8:    	add    rax,0x2
  00eac:    	and    rdi,0xfffffffffffffffc
  00eb0:    	or     rdi,rax
  00eb3:    	rol    rdi,0x3d
  00eb7:    	movq   xmm3,rdi
  00ebc:    	jmp    0xed3
  00ec1:    	call   0xfffec251
  00ec6:    	test   rax,rax
  00ec9:    	je     0x32eef
  00ecf:    	movq   xmm3,xmm0
  00ed3:    	mulsd  xmm3,xmm2
:00067 %9 = %9 + %10                        [Float][Float]
  00ed7:    	mov    rdi,QWORD PTR [r14-0x78]
  00edb: 00 	test   rdi,0x1
  00ee2:    	jne    0x32f0b
  00ee8: 00 	test   rdi,0x2
  00eef:    	je     0xf2b
  00ef5:    	xorps  xmm5,xmm5
  00ef8: 00 	movabs rax,0x8000000000000002
  00f02:    	cmp    rdi,rax
  00f05:    	je     0xf3d
  00f0b:    	mov    rax,rdi
  00f0e:    	sar    rax,0x3f
  00f12:    	add    rax,0x2
  00f16:    	and    rdi,0xfffffffffffffffc
  00f1a:    	or     rdi,rax
  00f1d:    	rol    rdi,0x3d
  00f21:    	movq   xmm5,rdi
  00f26:    	jmp    0xf3d
  00f2b:    	call   0xfffec251
  00f30:    	test   rax,rax
  00f33:    	je     0x32f0b
  00f39:    	movq   xmm5,xmm0
  00f3d:    	addsd  xmm5,xmm3
:00068 %10 = %1.call org()                  [Ray]
  00f41:    	mov    rdi,QWORD PTR [r14-0x38]
  00f45: 00 	test   rdi,0x7
  00f4c:    	jne    0x32f34
  00f52:    	cmp    DWORD PTR [rdi+0x4],0x31
  00f56:    	jne    0x32f34
  00f5c: 26 	cmp    DWORD PTR [rip+0xfffffffffffefa32],0x26        # 0xffff0995
  00f63:    	jne    0x32f34
  00f69:    	mov    esi,DWORD PTR [rip+0x5a1]        # 0x1510
  00f6f:    	cmp    esi,0xffffffff
  00f72:    	je     0x32f5d
  00f78:    	cmp    WORD PTR [rdi+0x2],0x3
  00f7d:    	jne    0xf96
  00f83:    	cmp    esi,0x6
  00f86:    	jge    0xf96
  00f8c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f91:    	jmp    0xfc0
  00f96:    	sub    rsp,0x10
  00f9a:    	movq   QWORD PTR [rsp],xmm4
  00f9f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00fa5: 45 	movabs rax,0x564559818b00
  00faf:    	call   rax
  00fb1:    	movq   xmm4,QWORD PTR [rsp]
  00fb6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fbc:    	add    rsp,0x10
  00fc0:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [Vec]
  00fc4:    	mov    rdi,QWORD PTR [r14-0x80]
  00fc8: 00 	test   rdi,0x7
  00fcf:    	jne    0x32fa4
  00fd5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00fd9:    	jne    0x32fa4
  00fdf: 26 	cmp    DWORD PTR [rip+0xfffffffffffef9af],0x26        # 0xffff0995
  00fe6:    	jne    0x32fa4
  00fec:    	mov    esi,DWORD PTR [rip+0x526]        # 0x1518
  00ff2:    	cmp    esi,0xffffffff
  00ff5:    	je     0x32fcd
  00ffb:    	cmp    WORD PTR [rdi+0x2],0x3
  01000:    	jne    0x1019
  01006:    	cmp    esi,0x6
  01009:    	jge    0x1019
  0100f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01014:    	jmp    0x1043
  01019:    	sub    rsp,0x10
  0101d:    	movq   QWORD PTR [rsp],xmm4
  01022:    	movq   QWORD PTR [rsp+0x8],xmm5
  01028: 45 	movabs rax,0x564559818b00
  01032:    	call   rax
  01034:    	movq   xmm4,QWORD PTR [rsp]
  01039:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0103f:    	add    rsp,0x10
  01043:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [Ray]
  01047:    	mov    rdi,QWORD PTR [r14-0x38]
  0104b: 00 	test   rdi,0x7
  01052:    	jne    0x33014
  01058:    	cmp    DWORD PTR [rdi+0x4],0x31
  0105c:    	jne    0x33014
  01062: 26 	cmp    DWORD PTR [rip+0xfffffffffffef92c],0x26        # 0xffff0995
  01069:    	jne    0x33014
  0106f:    	mov    esi,DWORD PTR [rip+0x4ab]        # 0x1520
  01075:    	cmp    esi,0xffffffff
  01078:    	je     0x3303d
  0107e:    	cmp    WORD PTR [rdi+0x2],0x3
  01083:    	jne    0x109c
  01089:    	cmp    esi,0x6
  0108c:    	jge    0x109c
  01092:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01097:    	jmp    0x10c6
  0109c:    	sub    rsp,0x10
  010a0:    	movq   QWORD PTR [rsp],xmm4
  010a5:    	movq   QWORD PTR [rsp+0x8],xmm5
  010ab: 45 	movabs rax,0x564559818b00
  010b5:    	call   rax
  010b7:    	movq   xmm4,QWORD PTR [rsp]
  010bc:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010c2:    	add    rsp,0x10
  010c6: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [Vec]
  010cd: ff 	mov    rdi,QWORD PTR [r14-0x88]
  010d4: 00 	test   rdi,0x7
  010db:    	jne    0x33084
  010e1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  010e5:    	jne    0x33084
  010eb: 26 	cmp    DWORD PTR [rip+0xfffffffffffef8a3],0x26        # 0xffff0995
  010f2:    	jne    0x33084
  010f8:    	mov    esi,DWORD PTR [rip+0x42a]        # 0x1528
  010fe:    	cmp    esi,0xffffffff
  01101:    	je     0x330ad
  01107:    	cmp    WORD PTR [rdi+0x2],0x3
  0110c:    	jne    0x1125
  01112:    	cmp    esi,0x6
  01115:    	jge    0x1125
  0111b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01120:    	jmp    0x114f
  01125:    	sub    rsp,0x10
  01129:    	movq   QWORD PTR [rsp],xmm4
  0112e:    	movq   QWORD PTR [rsp+0x8],xmm5
  01134: 45 	movabs rax,0x564559818b00
  0113e:    	call   rax
  01140:    	movq   xmm4,QWORD PTR [rsp]
  01145:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0114b:    	add    rsp,0x10
  0114f: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [Float][Float]
  01156:    	mov    rdi,QWORD PTR [r14-0x60]
  0115a: 00 	test   rdi,0x1
  01161:    	jne    0x330f4
  01167: 00 	test   rdi,0x2
  0116e:    	je     0x11aa
  01174:    	xorps  xmm2,xmm2
  01177: 00 	movabs rax,0x8000000000000002
  01181:    	cmp    rdi,rax
  01184:    	je     0x11bc
  0118a:    	mov    rax,rdi
  0118d:    	sar    rax,0x3f
  01191:    	add    rax,0x2
  01195:    	and    rdi,0xfffffffffffffffc
  01199:    	or     rdi,rax
  0119c:    	rol    rdi,0x3d
  011a0:    	movq   xmm2,rdi
  011a5:    	jmp    0x11bc
  011aa:    	call   0xfffec251
  011af:    	test   rax,rax
  011b2:    	je     0x330f4
  011b8:    	movq   xmm2,xmm0
  011bc: ff 	mov    rdi,QWORD PTR [r14-0x88]
  011c3: 00 	test   rdi,0x1
  011ca:    	jne    0x3311d
  011d0: 00 	test   rdi,0x2
  011d7:    	je     0x1213
  011dd:    	xorps  xmm3,xmm3
  011e0: 00 	movabs rax,0x8000000000000002
  011ea:    	cmp    rdi,rax
  011ed:    	je     0x1225
  011f3:    	mov    rax,rdi
  011f6:    	sar    rax,0x3f
  011fa:    	add    rax,0x2
  011fe:    	and    rdi,0xfffffffffffffffc
  01202:    	or     rdi,rax
  01205:    	rol    rdi,0x3d
  01209:    	movq   xmm3,rdi
  0120e:    	jmp    0x1225
  01213:    	call   0xfffec251
  01218:    	test   rax,rax
  0121b:    	je     0x3311d
  01221:    	movq   xmm3,xmm0
  01225:    	mulsd  xmm3,xmm2
:00077 %10 = %10 + %11                      [Float][Float]
  01229:    	mov    rdi,QWORD PTR [r14-0x80]
  0122d: 00 	test   rdi,0x1
  01234:    	jne    0x33146
  0123a: 00 	test   rdi,0x2
  01241:    	je     0x127d
  01247:    	xorps  xmm6,xmm6
  0124a: 00 	movabs rax,0x8000000000000002
  01254:    	cmp    rdi,rax
  01257:    	je     0x128f
  0125d:    	mov    rax,rdi
  01260:    	sar    rax,0x3f
  01264:    	add    rax,0x2
  01268:    	and    rdi,0xfffffffffffffffc
  0126c:    	or     rdi,rax
  0126f:    	rol    rdi,0x3d
  01273:    	movq   xmm6,rdi
  01278:    	jmp    0x128f
  0127d:    	call   0xfffec251
  01282:    	test   rax,rax
  01285:    	je     0x33146
  0128b:    	movq   xmm6,xmm0
  0128f:    	addsd  xmm6,xmm3
:00078 %7 = %7.call new(%8; 3)              [#<Class:Vec>]
  01293:    	movq   xmm0,xmm4
  01297:    	call   0xfffec375
  0129c:    	mov    QWORD PTR [r14-0x70],rax
  012a0:    	movq   xmm0,xmm5
  012a4:    	call   0xfffec375
  012a9:    	mov    QWORD PTR [r14-0x78],rax
  012ad:    	movq   xmm0,xmm6
  012b1:    	call   0xfffec375
  012b6:    	mov    QWORD PTR [r14-0x80],rax
  012ba:    	mov    rdi,QWORD PTR [r14-0x68]
  012be: 00 	test   rdi,0x7
  012c5:    	jne    0x3317f
  012cb:    	cmp    DWORD PTR [rdi+0x4],0x2c
  012cf:    	jne    0x3317f
  012d5: 26 	cmp    DWORD PTR [rip+0xfffffffffffef6b9],0x26        # 0xffff0995
  012dc:    	jne    0x3317f
  012e2: 00 	mov    r9,0x0
  012e9:    	sub    rsp,0x20
  012ed:    	movq   QWORD PTR [rsp],xmm3
  012f2:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f8:    	movq   QWORD PTR [rsp+0x10],xmm5
  012fe:    	movq   QWORD PTR [rsp+0x18],xmm6
  01304:    	mov    rdx,rdi
  01307:    	mov    QWORD PTR [rsp-0x40],rcx
  0130c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01315:    	lea    rcx,[r14-0x70]
  01319: 00 	mov    r8,0x3
  01320:    	mov    rsi,QWORD PTR [rbx]
  01323:    	mov    QWORD PTR [rsp-0x18],rsi
  01328:    	lea    rsi,[rsp-0x18]
  0132d:    	mov    QWORD PTR [rbx],rsi
  01330:    	lea    r14,[rsp-0x10]
  01335:    	mov    QWORD PTR [rsp-0x20],r14
  0133a:    	call   0x3319e
  0133f:    	lea    r14,[rbp-0x8]
  01343:    	mov    QWORD PTR [rbx],r14
  01346:    	mov    r14,QWORD PTR [rbp-0x10]
  0134a:    	movq   xmm3,QWORD PTR [rsp]
  0134f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01355:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0135b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01361:    	add    rsp,0x20
  01365:    	test   rax,rax
  01368:    	je     0x331d0
  0136e:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [Isect]
  01372:    	mov    rdi,QWORD PTR [r14-0x40]
  01376: 00 	test   rdi,0x7
  0137d:    	jne    0x331df
  01383:    	cmp    DWORD PTR [rdi+0x4],0x33
  01387:    	jne    0x331df
  0138d: 26 	cmp    DWORD PTR [rip+0xfffffffffffef601],0x26        # 0xffff0995
  01394:    	jne    0x331df
  0139a:    	mov    esi,DWORD PTR [rip+0x190]        # 0x1530
  013a0:    	cmp    esi,0xffffffff
  013a3:    	je     0x3320d
  013a9:    	cmp    WORD PTR [rdi+0x2],0x3
  013ae:    	jne    0x13cb
  013b4:    	cmp    esi,0x6
  013b7:    	jge    0x13cb
  013bd:    	mov    rax,QWORD PTR [r14-0x68]
  013c1:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013c6:    	jmp    0x141a
  013cb:    	sub    rsp,0x20
  013cf:    	movq   QWORD PTR [rsp],xmm3
  013d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  013da:    	movq   QWORD PTR [rsp+0x10],xmm5
  013e0:    	movq   QWORD PTR [rsp+0x18],xmm6
  013e6:    	mov    rdx,QWORD PTR [r14-0x68]
  013ea: 45 	movabs rax,0x564559818d80
  013f4:    	call   rax
  013f6:    	movq   xmm3,QWORD PTR [rsp]
  013fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01401:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01407:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0140d:    	add    rsp,0x20
  01411:    	test   rax,rax
  01414:    	je     0x331fe
:00081 
:00082 br =>:00083
  0141a:    	jmp    0x332b2
:00083 %7 = nil
  0141f: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  01427:    	mov    rax,QWORD PTR [r14-0x68]
  0142b:    	leave  
  0142c:    	ret    
==> start whole compile: <unnamed> FuncId(111) self_class:Scene start:[00000] bytecode:0x564559ecdf50
<== finished compile. elapsed:104.9µs
offset:Pos(86880) code: 6440 bytes  data: 352 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x31db6
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x31db6
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.inline IntegerTof()         [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x31dc5
  000e7: 26 	cmp    DWORD PTR [rip+0xfffffffffffef373],0x26        # 0xfffef461
  000ee:    	jne    0x31dc5
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.inline IntegerTof()         [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x31dd4
  00128: 26 	cmp    DWORD PTR [rip+0xfffffffffffef332],0x26        # 0xfffef461
  0012f:    	jne    0x31dd4
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.inline IntegerTof()         [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x31df0
  00163: 26 	cmp    DWORD PTR [rip+0xfffffffffffef2f7],0x26        # 0xfffef461
  0016a:    	jne    0x31df0
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.inline IntegerTof()         [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x31e19
  001a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffef2b9],0x26        # 0xfffef461
  001a8:    	jne    0x31e19
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.inline IntegerTof()          [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x31e4f
  001c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffef293],0x26        # 0xfffef461
  001ce:    	jne    0x31e4f
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.inline IntegerTof()         [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x31e92
  001ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffef25b],0x26        # 0xfffef461
  00206:    	jne    0x31e92
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x31ee2
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xfffead1d
  00289:    	test   rax,rax
  0028c:    	je     0x31ee2
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xfffeace9
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 16 	movq   xmm9,QWORD PTR [rip+0x166f]        # 0x1930
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xfffeace9
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 16 	movq   xmm9,QWORD PTR [rip+0x1647]        # 0x1940
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xfffeace9
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xfffeace9
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x31f3f
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xfffead1d
  003b0:    	test   rax,rax
  003b3:    	je     0x31f3f
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xfffeace9
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 15 	movq   xmm9,QWORD PTR [rip+0x1568]        # 0x1950
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xfffeace9
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1541]        # 0x1960
:00034 %15 = literal[2.0]
  0041f: 15 	movq   xmm9,QWORD PTR [rip+0x1548]        # 0x1970
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xfffeace9
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xfffeace9
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeefff]        # 0xfffef470
  00471: 00 	cmp    rax,QWORD PTR [rip+0x1518]        # 0x1990
  00478:    	jne    0x31fbb
  0047e: 00 	mov    rax,QWORD PTR [rip+0x14fb]        # 0x1980
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 15 	movq   xmm8,QWORD PTR [rip+0x150b]        # 0x19a0
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xfffeae41
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xfffeae41
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xfffeae41
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xfffeae41
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xfffeae41
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xfffeae41
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xfffeae41
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xfffeae41
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xfffeae41
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xfffeae41
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x3207e
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x3207e
  00550: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef0a],0x26        # 0xfffef461
  00557:    	jne    0x3207e
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x3208d
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd:    	test   rax,rax
  005e0:    	je     0x320bf
  005e6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005f4: 00 	test   rdi,0x7
  005fb:    	jne    0x320ce
  00601:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00605:    	jne    0x320ce
  0060b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeee4f],0x26        # 0xfffef461
  00612:    	jne    0x320ce
  00618:    	sub    rsp,0x20
  0061c:    	movq   QWORD PTR [rsp],xmm8
  00622: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00629: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  00630: 00 	cmp    DWORD PTR [rip+0xfffffffffffeee2e],0x0        # 0xfffef465
  00637:    	jne    0x320dd
  0063d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00646: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0064d:    	mov    QWORD PTR [rsp-0x40],rax
  00652: 00 	mov    rdi,0x0
  00659: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00662: 07 	movabs rax,0x1000700000060
  0066c:    	mov    QWORD PTR [rsp-0x30],rax
  00671: 45 	movabs r13,0x564559ea5f60
  0067b:    	mov    rsi,QWORD PTR [rbx]
  0067e:    	mov    QWORD PTR [rsp-0x18],rsi
  00683:    	lea    rsi,[rsp-0x18]
  00688:    	mov    QWORD PTR [rbx],rsi
  0068b:    	lea    r14,[rsp-0x10]
  00690:    	mov    QWORD PTR [rsp-0x20],r14
  00695:    	call   0xfffefd13
  0069a:    	lea    r14,[rbp-0x8]
  0069e:    	mov    QWORD PTR [rbx],r14
  006a1:    	mov    r14,QWORD PTR [rbp-0x10]
  006a5:    	movq   xmm8,QWORD PTR [rsp]
  006ab: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006b2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006b9:    	add    rsp,0x20
  006bd:    	test   rax,rax
  006c0:    	je     0x320f4
  006c6:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006ca: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeed9f]        # 0xfffef470
  006d1: 00 	cmp    rax,QWORD PTR [rip+0x12e8]        # 0x19c0
  006d8:    	jne    0x32103
  006de: 00 	mov    rax,QWORD PTR [rip+0x12cb]        # 0x19b0
  006e5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  006ec: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeed7d]        # 0xfffef470
  006f3: 00 	cmp    rax,QWORD PTR [rip+0x12e6]        # 0x19e0
  006fa:    	jne    0x3217e
  00700: 00 	mov    rax,QWORD PTR [rip+0x12c9]        # 0x19d0
  00707: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  0070e: 00 	movq   xmm2,QWORD PTR [rip+0x12da]        # 0x19f0
  00716: 00 	movabs rax,0x8000000000000002
  00720: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  00727: 00 	movq   xmm3,QWORD PTR [rip+0x12d1]        # 0x1a00
  0072f: 00 	movabs rax,0x8000000000000002
  00739: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00740: 00 	movq   xmm4,QWORD PTR [rip+0x12c8]        # 0x1a10
  00748: 00 	movabs rax,0x8000000000000002
  00752: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  00759: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00760: 00 	test   rdi,0x7
  00767:    	jne    0x321eb
  0076d:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00771:    	jne    0x321eb
  00777: 26 	cmp    DWORD PTR [rip+0xfffffffffffeece3],0x26        # 0xfffef461
  0077e:    	jne    0x321eb
  00784: 00 	mov    r9,0x0
  0078b:    	sub    rsp,0x20
  0078f:    	movq   QWORD PTR [rsp],xmm2
  00794:    	movq   QWORD PTR [rsp+0x8],xmm3
  0079a:    	movq   QWORD PTR [rsp+0x10],xmm4
  007a0:    	mov    rdx,rdi
  007a3:    	mov    QWORD PTR [rsp-0x40],rcx
  007a8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007b1: ff 	lea    rcx,[r14-0xb0]
  007b8: 00 	mov    r8,0x3
  007bf:    	mov    rsi,QWORD PTR [rbx]
  007c2:    	mov    QWORD PTR [rsp-0x18],rsi
  007c7:    	lea    rsi,[rsp-0x18]
  007cc:    	mov    QWORD PTR [rbx],rsi
  007cf:    	lea    r14,[rsp-0x10]
  007d4:    	mov    QWORD PTR [rsp-0x20],r14
  007d9:    	call   0x321fa
  007de:    	lea    r14,[rbp-0x8]
  007e2:    	mov    QWORD PTR [rbx],r14
  007e5:    	mov    r14,QWORD PTR [rbp-0x10]
  007e9:    	movq   xmm2,QWORD PTR [rsp]
  007ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007fa:    	add    rsp,0x20
  007fe:    	test   rax,rax
  00801:    	je     0x3222c
  00807: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  0080e:    	mov    rax,QWORD PTR [r14-0x80]
  00812: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00819: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00820: 00 	test   rdi,0x7
  00827:    	jne    0x3223b
  0082d:    	cmp    DWORD PTR [rdi+0x4],0x32
  00831:    	jne    0x3223b
  00837: 26 	cmp    DWORD PTR [rip+0xfffffffffffeec23],0x26        # 0xfffef461
  0083e:    	jne    0x3223b
  00844: 00 	mov    r9,0x0
  0084b:    	sub    rsp,0x10
  0084f:    	movq   QWORD PTR [rsp],xmm3
  00854:    	movq   QWORD PTR [rsp+0x8],xmm4
  0085a:    	mov    rdx,rdi
  0085d:    	mov    QWORD PTR [rsp-0x40],rcx
  00862: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0086b: ff 	lea    rcx,[r14-0xa8]
  00872: 00 	mov    r8,0x2
  00879:    	mov    rsi,QWORD PTR [rbx]
  0087c:    	mov    QWORD PTR [rsp-0x18],rsi
  00881:    	lea    rsi,[rsp-0x18]
  00886:    	mov    QWORD PTR [rbx],rsi
  00889:    	lea    r14,[rsp-0x10]
  0088e:    	mov    QWORD PTR [rsp-0x20],r14
  00893:    	call   0x3224a
  00898:    	lea    r14,[rbp-0x8]
  0089c:    	mov    QWORD PTR [rbx],r14
  0089f:    	mov    r14,QWORD PTR [rbp-0x10]
  008a3:    	movq   xmm3,QWORD PTR [rsp]
  008a8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008ae:    	add    rsp,0x10
  008b2:    	test   rax,rax
  008b5:    	je     0x3227c
  008bb: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008c2: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeeba7]        # 0xfffef470
  008c9: 00 	cmp    rax,QWORD PTR [rip+0x1160]        # 0x1a30
  008d0:    	jne    0x3228b
  008d6: 00 	mov    rax,QWORD PTR [rip+0x1143]        # 0x1a20
  008dd: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  008e4: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008eb: 00 	test   rdi,0x7
  008f2:    	jne    0x322f4
  008f8:    	cmp    DWORD PTR [rdi+0x4],0x34
  008fc:    	jne    0x322f4
  00902: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeb58],0x26        # 0xfffef461
  00909:    	jne    0x322f4
  0090f: 00 	mov    r9,0x0
  00916:    	sub    rsp,0x10
  0091a:    	movq   QWORD PTR [rsp],xmm3
  0091f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00925:    	mov    rdx,rdi
  00928:    	mov    QWORD PTR [rsp-0x40],rcx
  0092d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00936: ff 	lea    rcx,[r14-0xa8]
  0093d: 00 	mov    r8,0x0
  00944:    	mov    rsi,QWORD PTR [rbx]
  00947:    	mov    QWORD PTR [rsp-0x18],rsi
  0094c:    	lea    rsi,[rsp-0x18]
  00951:    	mov    QWORD PTR [rbx],rsi
  00954:    	lea    r14,[rsp-0x10]
  00959:    	mov    QWORD PTR [rsp-0x20],r14
  0095e:    	call   0x32303
  00963:    	lea    r14,[rbp-0x8]
  00967:    	mov    QWORD PTR [rbx],r14
  0096a:    	mov    r14,QWORD PTR [rbp-0x10]
  0096e:    	movq   xmm3,QWORD PTR [rsp]
  00973:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00979:    	add    rsp,0x10
  0097d:    	test   rax,rax
  00980:    	je     0x32335
  00986: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  0098d:    	mov    rdi,QWORD PTR [r14-0x30]
  00991:    	mov    rax,QWORD PTR [rdi+0x10]
  00995: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  0099c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009a7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009ae: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009b5: 00 	test   rdi,0x7
  009bc:    	jne    0x32344
  009c2:    	cmp    DWORD PTR [rdi+0x4],0xb
  009c6:    	jne    0x32344
  009cc: 00 	test   rsi,0x1
  009d3:    	je     0x32344
  009d9:    	sar    rsi,1
  009dc:    	sub    rsp,0x10
  009e0:    	movq   QWORD PTR [rsp],xmm3
  009e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009eb: 45 	movabs rax,0x5645597e4900
  009f5:    	call   rax
  009f7:    	movq   xmm3,QWORD PTR [rsp]
  009fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a02:    	add    rsp,0x10
  00a06:    	test   rax,rax
  00a09:    	je     0x32353
  00a0f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a16: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a1d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a24: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a2b: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a32: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a39: 00 	test   rdi,0x7
  00a40:    	jne    0x32362
  00a46:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a4a:    	jne    0x32362
  00a50: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea0a],0x26        # 0xfffef461
  00a57:    	jne    0x32362
  00a5d:    	sub    rsp,0x10
  00a61:    	movq   QWORD PTR [rsp],xmm3
  00a66:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a6c: 00 	cmp    DWORD PTR [rip+0xfffffffffffee9f2],0x0        # 0xfffef465
  00a73:    	jne    0x32371
  00a79: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a82: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00a89:    	mov    QWORD PTR [rsp-0x40],rax
  00a8e: 00 	mov    rdi,0x2
  00a95: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00a9c:    	mov    QWORD PTR [rsp-0x48],rax
  00aa1: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00aa8:    	mov    QWORD PTR [rsp-0x50],rax
  00aad: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ab6: 0e 	movabs rax,0x1000e00000062
  00ac0:    	mov    QWORD PTR [rsp-0x30],rax
  00ac5: 45 	movabs r13,0x564559e8f370
  00acf:    	mov    rsi,QWORD PTR [rbx]
  00ad2:    	mov    QWORD PTR [rsp-0x18],rsi
  00ad7:    	lea    rsi,[rsp-0x18]
  00adc:    	mov    QWORD PTR [rbx],rsi
  00adf:    	lea    r14,[rsp-0x10]
  00ae4:    	mov    QWORD PTR [rsp-0x20],r14
  00ae9:    	call   0xffff000c
  00aee:    	lea    r14,[rbp-0x8]
  00af2:    	mov    QWORD PTR [rbx],r14
  00af5:    	mov    r14,QWORD PTR [rbp-0x10]
  00af9:    	movq   xmm3,QWORD PTR [rsp]
  00afe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b04:    	add    rsp,0x10
  00b08:    	test   rax,rax
  00b0b:    	je     0x32388
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b11:    	mov    rdi,QWORD PTR [r14-0x30]
  00b15:    	mov    rax,QWORD PTR [rdi+0x10]
  00b19: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b20: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b2b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b32: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b39: 00 	test   rdi,0x7
  00b40:    	jne    0x32397
  00b46:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b4a:    	jne    0x32397
  00b50: 00 	test   rsi,0x1
  00b57:    	je     0x32397
  00b5d:    	sar    rsi,1
  00b60:    	sub    rsp,0x10
  00b64:    	movq   QWORD PTR [rsp],xmm3
  00b69:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b6f: 45 	movabs rax,0x5645597e4900
  00b79:    	call   rax
  00b7b:    	movq   xmm3,QWORD PTR [rsp]
  00b80:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b86:    	add    rsp,0x10
  00b8a:    	test   rax,rax
  00b8d:    	je     0x323a6
  00b93: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00b9a: ff 	mov    rax,QWORD PTR [r14-0x88]
  00ba1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00ba8: ff 	mov    rax,QWORD PTR [r14-0x90]
  00baf: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00bb6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bbd: 00 	test   rdi,0x7
  00bc4:    	jne    0x323b5
  00bca:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00bce:    	jne    0x323b5
  00bd4: 26 	cmp    DWORD PTR [rip+0xfffffffffffee886],0x26        # 0xfffef461
  00bdb:    	jne    0x323b5
  00be1:    	sub    rsp,0x10
  00be5:    	movq   QWORD PTR [rsp],xmm3
  00bea:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf0: 00 	cmp    DWORD PTR [rip+0xfffffffffffee86e],0x0        # 0xfffef465
  00bf7:    	jne    0x323c4
  00bfd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c06: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c0d:    	mov    QWORD PTR [rsp-0x40],rax
  00c12: 00 	mov    rdi,0x2
  00c19: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00c20:    	mov    QWORD PTR [rsp-0x48],rax
  00c25: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00c2c:    	mov    QWORD PTR [rsp-0x50],rax
  00c31: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c3a: 0e 	movabs rax,0x1000e00000062
  00c44:    	mov    QWORD PTR [rsp-0x30],rax
  00c49: 45 	movabs r13,0x564559e8f370
  00c53:    	mov    rsi,QWORD PTR [rbx]
  00c56:    	mov    QWORD PTR [rsp-0x18],rsi
  00c5b:    	lea    rsi,[rsp-0x18]
  00c60:    	mov    QWORD PTR [rbx],rsi
  00c63:    	lea    r14,[rsp-0x10]
  00c68:    	mov    QWORD PTR [rsp-0x20],r14
  00c6d:    	call   0xffff000c
  00c72:    	lea    r14,[rbp-0x8]
  00c76:    	mov    QWORD PTR [rbx],r14
  00c79:    	mov    r14,QWORD PTR [rbp-0x10]
  00c7d:    	movq   xmm3,QWORD PTR [rsp]
  00c82:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c88:    	add    rsp,0x10
  00c8c:    	test   rax,rax
  00c8f:    	je     0x323db
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00c95:    	mov    rdi,QWORD PTR [r14-0x30]
  00c99:    	mov    rax,QWORD PTR [rdi+0x10]
  00c9d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00ca4: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00caf: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cb6: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00cbd: 00 	test   rdi,0x7
  00cc4:    	jne    0x323ea
  00cca:    	cmp    DWORD PTR [rdi+0x4],0xb
  00cce:    	jne    0x323ea
  00cd4: 00 	test   rsi,0x1
  00cdb:    	je     0x323ea
  00ce1:    	sar    rsi,1
  00ce4:    	sub    rsp,0x10
  00ce8:    	movq   QWORD PTR [rsp],xmm3
  00ced:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cf3: 45 	movabs rax,0x5645597e4900
  00cfd:    	call   rax
  00cff:    	movq   xmm3,QWORD PTR [rsp]
  00d04:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0a:    	add    rsp,0x10
  00d0e:    	test   rax,rax
  00d11:    	je     0x323f9
  00d17: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00d1e: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d25: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00d2c: ff 	mov    rax,QWORD PTR [r14-0x90]
  00d33: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00d3a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d41: 00 	test   rdi,0x7
  00d48:    	jne    0x32408
  00d4e:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00d52:    	jne    0x32408
  00d58: 26 	cmp    DWORD PTR [rip+0xfffffffffffee702],0x26        # 0xfffef461
  00d5f:    	jne    0x32408
  00d65:    	sub    rsp,0x10
  00d69:    	movq   QWORD PTR [rsp],xmm3
  00d6e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d74: 00 	cmp    DWORD PTR [rip+0xfffffffffffee6ea],0x0        # 0xfffef465
  00d7b:    	jne    0x32417
  00d81: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d8a: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d91:    	mov    QWORD PTR [rsp-0x40],rax
  00d96: 00 	mov    rdi,0x2
  00d9d: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00da4:    	mov    QWORD PTR [rsp-0x48],rax
  00da9: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00db0:    	mov    QWORD PTR [rsp-0x50],rax
  00db5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00dbe: 0e 	movabs rax,0x1000e00000062
  00dc8:    	mov    QWORD PTR [rsp-0x30],rax
  00dcd: 45 	movabs r13,0x564559e8f370
  00dd7:    	mov    rsi,QWORD PTR [rbx]
  00dda:    	mov    QWORD PTR [rsp-0x18],rsi
  00ddf:    	lea    rsi,[rsp-0x18]
  00de4:    	mov    QWORD PTR [rbx],rsi
  00de7:    	lea    r14,[rsp-0x10]
  00dec:    	mov    QWORD PTR [rsp-0x20],r14
  00df1:    	call   0xffff000c
  00df6:    	lea    r14,[rbp-0x8]
  00dfa:    	mov    QWORD PTR [rbx],r14
  00dfd:    	mov    r14,QWORD PTR [rbp-0x10]
  00e01:    	movq   xmm3,QWORD PTR [rsp]
  00e06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e0c:    	add    rsp,0x10
  00e10:    	test   rax,rax
  00e13:    	je     0x3242e
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00e19:    	mov    rdi,QWORD PTR [r14-0x30]
  00e1d:    	mov    rax,QWORD PTR [rdi+0x18]
  00e21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00e28: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e2f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00e36: ff 	mov    rax,QWORD PTR [r14-0x90]
  00e3d: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00e44: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e4b: 00 	test   rdi,0x7
  00e52:    	jne    0x3243d
  00e58:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00e5c:    	jne    0x3243d
  00e62: 26 	cmp    DWORD PTR [rip+0xfffffffffffee5f8],0x26        # 0xfffef461
  00e69:    	jne    0x3243d
  00e6f:    	sub    rsp,0x10
  00e73:    	movq   QWORD PTR [rsp],xmm3
  00e78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e7e: 00 	cmp    DWORD PTR [rip+0xfffffffffffee5e0],0x0        # 0xfffef465
  00e85:    	jne    0x3244c
  00e8b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e94: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00e9b:    	mov    QWORD PTR [rsp-0x40],rax
  00ea0: 00 	mov    rdi,0x2
  00ea7: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00eae:    	mov    QWORD PTR [rsp-0x48],rax
  00eb3: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00eba:    	mov    QWORD PTR [rsp-0x50],rax
  00ebf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ec8: 0c 	movabs rax,0x1000c00000064
  00ed2:    	mov    QWORD PTR [rsp-0x30],rax
  00ed7: 45 	movabs r13,0x564559ec5d10
  00ee1:    	mov    rsi,QWORD PTR [rbx]
  00ee4:    	mov    QWORD PTR [rsp-0x18],rsi
  00ee9:    	lea    rsi,[rsp-0x18]
  00eee:    	mov    QWORD PTR [rbx],rsi
  00ef1:    	lea    r14,[rsp-0x10]
  00ef6:    	mov    QWORD PTR [rsp-0x20],r14
  00efb:    	call   0xffff05d8
  00f00:    	lea    r14,[rbp-0x8]
  00f04:    	mov    QWORD PTR [rbx],r14
  00f07:    	mov    r14,QWORD PTR [rbp-0x10]
  00f0b:    	movq   xmm3,QWORD PTR [rsp]
  00f10:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f16:    	add    rsp,0x10
  00f1a:    	test   rax,rax
  00f1d:    	je     0x32463
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00f23: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f2a: 00 	test   rdi,0x7
  00f31:    	jne    0x32472
  00f37:    	cmp    DWORD PTR [rdi+0x4],0x33
  00f3b:    	jne    0x32472
  00f41: 26 	cmp    DWORD PTR [rip+0xfffffffffffee519],0x26        # 0xfffef461
  00f48:    	jne    0x32472
  00f4e:    	mov    esi,DWORD PTR [rip+0xae8]        # 0x1a3c
  00f54:    	cmp    esi,0xffffffff
  00f57:    	je     0x32481
  00f5d:    	cmp    WORD PTR [rdi+0x2],0x3
  00f62:    	jne    0xf7b
  00f68:    	cmp    esi,0x6
  00f6b:    	jge    0xf7b
  00f71:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f76:    	jmp    0xfa5
  00f7b:    	sub    rsp,0x10
  00f7f:    	movq   QWORD PTR [rsp],xmm3
  00f84:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f8a: 45 	movabs rax,0x564559818b00
  00f94:    	call   rax
  00f96:    	movq   xmm3,QWORD PTR [rsp]
  00f9b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fa1:    	add    rsp,0x10
  00fa5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00118
  00fac: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00fb3:    	or     rax,0x10
  00fb7:    	cmp    rax,0x14
  00fbb:    	je     0x1914
:00087 %14 = %12
  00fc1: ff 	mov    rax,QWORD PTR [r14-0x90]
  00fc8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  00fcf:    	mov    rdi,QWORD PTR [r14-0x30]
  00fd3: 26 	cmp    DWORD PTR [rip+0xfffffffffffee487],0x26        # 0xfffef461
  00fda:    	jne    0x324c8
  00fe0:    	sub    rsp,0x10
  00fe4:    	movq   QWORD PTR [rsp],xmm3
  00fe9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fef: 00 	cmp    DWORD PTR [rip+0xfffffffffffee46f],0x0        # 0xfffef465
  00ff6:    	jne    0x324d7
  00ffc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01005:    	mov    rax,QWORD PTR [r14-0x30]
  01009:    	mov    QWORD PTR [rsp-0x40],rax
  0100e: 00 	mov    rdi,0x1
  01015: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0101c:    	mov    QWORD PTR [rsp-0x48],rax
  01021: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0102a: 0d 	movabs rax,0x1000d00000068
  01034:    	mov    QWORD PTR [rsp-0x30],rax
  01039: 45 	movabs r13,0x564559e9a1f0
  01043:    	mov    rsi,QWORD PTR [rbx]
  01046:    	mov    QWORD PTR [rsp-0x18],rsi
  0104b:    	lea    rsi,[rsp-0x18]
  01050:    	mov    QWORD PTR [rbx],rsi
  01053:    	lea    r14,[rsp-0x10]
  01058:    	mov    QWORD PTR [rsp-0x20],r14
  0105d:    	call   0xffff79cb
  01062:    	lea    r14,[rbp-0x8]
  01066:    	mov    QWORD PTR [rbx],r14
  01069:    	mov    r14,QWORD PTR [rbp-0x10]
  0106d:    	movq   xmm3,QWORD PTR [rsp]
  01072:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01078:    	add    rsp,0x10
  0107c:    	test   rax,rax
  0107f:    	je     0x324ee
  01085: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  0108c:    	mov    rax,QWORD PTR [r14-0x18]
  01090:    	mov    rax,QWORD PTR [rax]
  01093:    	mov    rax,QWORD PTR [rax-0x28]
  01097: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  0109e:    	mov    rax,QWORD PTR [r14-0x18]
  010a2:    	mov    rax,QWORD PTR [rax]
  010a5:    	mov    rax,QWORD PTR [rax-0x28]
  010a9: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [Vec]
  010b0: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  010b7: 00 	test   rdi,0x7
  010be:    	jne    0x324fd
  010c4:    	cmp    DWORD PTR [rdi+0x4],0x2b
  010c8:    	jne    0x324fd
  010ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffee38c],0x26        # 0xfffef461
  010d5:    	jne    0x324fd
  010db:    	mov    esi,DWORD PTR [rip+0x963]        # 0x1a44
  010e1:    	cmp    esi,0xffffffff
  010e4:    	je     0x3250c
  010ea:    	cmp    WORD PTR [rdi+0x2],0x3
  010ef:    	jne    0x1108
  010f5:    	cmp    esi,0x6
  010f8:    	jge    0x1108
  010fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01103:    	jmp    0x1132
  01108:    	sub    rsp,0x10
  0110c:    	movq   QWORD PTR [rsp],xmm3
  01111:    	movq   QWORD PTR [rsp+0x8],xmm4
  01117: 45 	movabs rax,0x564559818b00
  01121:    	call   rax
  01123:    	movq   xmm3,QWORD PTR [rsp]
  01128:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0112e:    	add    rsp,0x10
  01132: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [Vec]
  01139: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01140: 00 	test   rdi,0x7
  01147:    	jne    0x32553
  0114d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01151:    	jne    0x32553
  01157: 26 	cmp    DWORD PTR [rip+0xfffffffffffee303],0x26        # 0xfffef461
  0115e:    	jne    0x32553
  01164:    	mov    esi,DWORD PTR [rip+0x8e2]        # 0x1a4c
  0116a:    	cmp    esi,0xffffffff
  0116d:    	je     0x32562
  01173:    	cmp    WORD PTR [rdi+0x2],0x3
  01178:    	jne    0x1191
  0117e:    	cmp    esi,0x6
  01181:    	jge    0x1191
  01187:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0118c:    	jmp    0x11bb
  01191:    	sub    rsp,0x10
  01195:    	movq   QWORD PTR [rsp],xmm3
  0119a:    	movq   QWORD PTR [rsp+0x8],xmm4
  011a0: 45 	movabs rax,0x564559818b00
  011aa:    	call   rax
  011ac:    	movq   xmm3,QWORD PTR [rsp]
  011b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011b7:    	add    rsp,0x10
  011bb: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [Float][Float]
  011c2: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  011c9: 00 	test   rdi,0x1
  011d0:    	jne    0x325a9
  011d6: 00 	test   rdi,0x2
  011dd:    	je     0x1219
  011e3:    	xorps  xmm2,xmm2
  011e6: 00 	movabs rax,0x8000000000000002
  011f0:    	cmp    rdi,rax
  011f3:    	je     0x122b
  011f9:    	mov    rax,rdi
  011fc:    	sar    rax,0x3f
  01200:    	add    rax,0x2
  01204:    	and    rdi,0xfffffffffffffffc
  01208:    	or     rdi,rax
  0120b:    	rol    rdi,0x3d
  0120f:    	movq   xmm2,rdi
  01214:    	jmp    0x122b
  01219:    	call   0xfffead1d
  0121e:    	test   rax,rax
  01221:    	je     0x325a9
  01227:    	movq   xmm2,xmm0
  0122b: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01232: 00 	test   rdi,0x1
  01239:    	jne    0x325b8
  0123f: 00 	test   rdi,0x2
  01246:    	je     0x1282
  0124c:    	xorps  xmm5,xmm5
  0124f: 00 	movabs rax,0x8000000000000002
  01259:    	cmp    rdi,rax
  0125c:    	je     0x1294
  01262:    	mov    rax,rdi
  01265:    	sar    rax,0x3f
  01269:    	add    rax,0x2
  0126d:    	and    rdi,0xfffffffffffffffc
  01271:    	or     rdi,rax
  01274:    	rol    rdi,0x3d
  01278:    	movq   xmm5,rdi
  0127d:    	jmp    0x1294
  01282:    	call   0xfffead1d
  01287:    	test   rax,rax
  0128a:    	je     0x325b8
  01290:    	movq   xmm5,xmm0
  01294:    	addsd  xmm2,xmm5
:00097 _ = %14.call x=(%15; 1)              [Vec]
  01298:    	movq   xmm0,xmm2
  0129c:    	call   0xfffeae41
  012a1: ff 	mov    QWORD PTR [r14-0xa8],rax
  012a8: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012af: 00 	test   rdi,0x7
  012b6:    	jne    0x325c7
  012bc:    	cmp    DWORD PTR [rdi+0x4],0x2b
  012c0:    	jne    0x325c7
  012c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffee194],0x26        # 0xfffef461
  012cd:    	jne    0x325c7
  012d3:    	mov    esi,DWORD PTR [rip+0x77b]        # 0x1a54
  012d9:    	cmp    esi,0xffffffff
  012dc:    	je     0x325e5
  012e2:    	cmp    WORD PTR [rdi+0x2],0x3
  012e7:    	jne    0x1307
  012ed:    	cmp    esi,0x6
  012f0:    	jge    0x1307
  012f6: ff 	mov    rax,QWORD PTR [r14-0xa8]
  012fd:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01302:    	jmp    0x1359
  01307:    	sub    rsp,0x20
  0130b:    	movq   QWORD PTR [rsp],xmm2
  01310:    	movq   QWORD PTR [rsp+0x8],xmm3
  01316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0131c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01322: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01329: 45 	movabs rax,0x564559818d80
  01333:    	call   rax
  01335:    	movq   xmm2,QWORD PTR [rsp]
  0133a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01340:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01346:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0134c:    	add    rsp,0x20
  01350:    	test   rax,rax
  01353:    	je     0x325d6
:00098 
:00099 %14 = dynvar(2, %2)
  01359:    	mov    rax,QWORD PTR [r14-0x18]
  0135d:    	mov    rax,QWORD PTR [rax]
  01360:    	mov    rax,QWORD PTR [rax-0x28]
  01364: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  0136b:    	mov    rax,QWORD PTR [r14-0x18]
  0136f:    	mov    rax,QWORD PTR [rax]
  01372:    	mov    rax,QWORD PTR [rax-0x28]
  01376: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [Vec]
  0137d: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01384: 00 	test   rdi,0x7
  0138b:    	jne    0x3264e
  01391:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01395:    	jne    0x3264e
  0139b: 26 	cmp    DWORD PTR [rip+0xfffffffffffee0bf],0x26        # 0xfffef461
  013a2:    	jne    0x3264e
  013a8:    	mov    esi,DWORD PTR [rip+0x6ae]        # 0x1a5c
  013ae:    	cmp    esi,0xffffffff
  013b1:    	je     0x3265d
  013b7:    	cmp    WORD PTR [rdi+0x2],0x3
  013bc:    	jne    0x13d5
  013c2:    	cmp    esi,0x6
  013c5:    	jge    0x13d5
  013cb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013d0:    	jmp    0x140b
  013d5:    	sub    rsp,0x20
  013d9:    	movq   QWORD PTR [rsp],xmm3
  013de:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e4:    	movq   QWORD PTR [rsp+0x10],xmm5
  013ea: 45 	movabs rax,0x564559818b00
  013f4:    	call   rax
  013f6:    	movq   xmm3,QWORD PTR [rsp]
  013fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01401:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01407:    	add    rsp,0x20
  0140b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [Vec]
  01412: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01419: 00 	test   rdi,0x7
  01420:    	jne    0x326b0
  01426:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0142a:    	jne    0x326b0
  01430: 26 	cmp    DWORD PTR [rip+0xfffffffffffee02a],0x26        # 0xfffef461
  01437:    	jne    0x326b0
  0143d:    	mov    esi,DWORD PTR [rip+0x621]        # 0x1a64
  01443:    	cmp    esi,0xffffffff
  01446:    	je     0x326bf
  0144c:    	cmp    WORD PTR [rdi+0x2],0x3
  01451:    	jne    0x146a
  01457:    	cmp    esi,0x6
  0145a:    	jge    0x146a
  01460:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01465:    	jmp    0x1494
  0146a:    	sub    rsp,0x10
  0146e:    	movq   QWORD PTR [rsp],xmm3
  01473:    	movq   QWORD PTR [rsp+0x8],xmm4
  01479: 45 	movabs rax,0x564559818b00
  01483:    	call   rax
  01485:    	movq   xmm3,QWORD PTR [rsp]
  0148a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01490:    	add    rsp,0x10
  01494: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [Float][Float]
  0149b: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  014a2: 00 	test   rdi,0x1
  014a9:    	jne    0x32706
  014af: 00 	test   rdi,0x2
  014b6:    	je     0x14f2
  014bc:    	xorps  xmm2,xmm2
  014bf: 00 	movabs rax,0x8000000000000002
  014c9:    	cmp    rdi,rax
  014cc:    	je     0x1504
  014d2:    	mov    rax,rdi
  014d5:    	sar    rax,0x3f
  014d9:    	add    rax,0x2
  014dd:    	and    rdi,0xfffffffffffffffc
  014e1:    	or     rdi,rax
  014e4:    	rol    rdi,0x3d
  014e8:    	movq   xmm2,rdi
  014ed:    	jmp    0x1504
  014f2:    	call   0xfffead1d
  014f7:    	test   rax,rax
  014fa:    	je     0x32706
  01500:    	movq   xmm2,xmm0
  01504: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  0150b: 00 	test   rdi,0x1
  01512:    	jne    0x32715
  01518: 00 	test   rdi,0x2
  0151f:    	je     0x155b
  01525:    	xorps  xmm5,xmm5
  01528: 00 	movabs rax,0x8000000000000002
  01532:    	cmp    rdi,rax
  01535:    	je     0x156d
  0153b:    	mov    rax,rdi
  0153e:    	sar    rax,0x3f
  01542:    	add    rax,0x2
  01546:    	and    rdi,0xfffffffffffffffc
  0154a:    	or     rdi,rax
  0154d:    	rol    rdi,0x3d
  01551:    	movq   xmm5,rdi
  01556:    	jmp    0x156d
  0155b:    	call   0xfffead1d
  01560:    	test   rax,rax
  01563:    	je     0x32715
  01569:    	movq   xmm5,xmm0
  0156d:    	addsd  xmm2,xmm5
:00106 _ = %14.call y=(%15; 1)              [Vec]
  01571:    	movq   xmm0,xmm2
  01575:    	call   0xfffeae41
  0157a: ff 	mov    QWORD PTR [r14-0xa8],rax
  01581: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01588: 00 	test   rdi,0x7
  0158f:    	jne    0x32724
  01595:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01599:    	jne    0x32724
  0159f: 26 	cmp    DWORD PTR [rip+0xfffffffffffedebb],0x26        # 0xfffef461
  015a6:    	jne    0x32724
  015ac:    	mov    esi,DWORD PTR [rip+0x4ba]        # 0x1a6c
  015b2:    	cmp    esi,0xffffffff
  015b5:    	je     0x32742
  015bb:    	cmp    WORD PTR [rdi+0x2],0x3
  015c0:    	jne    0x15e0
  015c6:    	cmp    esi,0x6
  015c9:    	jge    0x15e0
  015cf: ff 	mov    rax,QWORD PTR [r14-0xa8]
  015d6:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  015db:    	jmp    0x1632
  015e0:    	sub    rsp,0x20
  015e4:    	movq   QWORD PTR [rsp],xmm2
  015e9:    	movq   QWORD PTR [rsp+0x8],xmm3
  015ef:    	movq   QWORD PTR [rsp+0x10],xmm4
  015f5:    	movq   QWORD PTR [rsp+0x18],xmm5
  015fb: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01602: 45 	movabs rax,0x564559818d80
  0160c:    	call   rax
  0160e:    	movq   xmm2,QWORD PTR [rsp]
  01613:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01619:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0161f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01625:    	add    rsp,0x20
  01629:    	test   rax,rax
  0162c:    	je     0x32733
:00107 
:00108 %14 = dynvar(2, %2)
  01632:    	mov    rax,QWORD PTR [r14-0x18]
  01636:    	mov    rax,QWORD PTR [rax]
  01639:    	mov    rax,QWORD PTR [rax-0x28]
  0163d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  01644:    	mov    rax,QWORD PTR [r14-0x18]
  01648:    	mov    rax,QWORD PTR [rax]
  0164b:    	mov    rax,QWORD PTR [rax-0x28]
  0164f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [Vec]
  01656: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0165d: 00 	test   rdi,0x7
  01664:    	jne    0x327ab
  0166a:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0166e:    	jne    0x327ab
  01674: 26 	cmp    DWORD PTR [rip+0xfffffffffffedde6],0x26        # 0xfffef461
  0167b:    	jne    0x327ab
  01681:    	mov    esi,DWORD PTR [rip+0x3ed]        # 0x1a74
  01687:    	cmp    esi,0xffffffff
  0168a:    	je     0x327ba
  01690:    	cmp    WORD PTR [rdi+0x2],0x3
  01695:    	jne    0x16ae
  0169b:    	cmp    esi,0x6
  0169e:    	jge    0x16ae
  016a4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  016a9:    	jmp    0x16e4
  016ae:    	sub    rsp,0x20
  016b2:    	movq   QWORD PTR [rsp],xmm3
  016b7:    	movq   QWORD PTR [rsp+0x8],xmm4
  016bd:    	movq   QWORD PTR [rsp+0x10],xmm5
  016c3: 45 	movabs rax,0x564559818b00
  016cd:    	call   rax
  016cf:    	movq   xmm3,QWORD PTR [rsp]
  016d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016da:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016e0:    	add    rsp,0x20
  016e4: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [Vec]
  016eb: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016f2: 00 	test   rdi,0x7
  016f9:    	jne    0x3280d
  016ff:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01703:    	jne    0x3280d
  01709: 26 	cmp    DWORD PTR [rip+0xfffffffffffedd51],0x26        # 0xfffef461
  01710:    	jne    0x3280d
  01716:    	mov    esi,DWORD PTR [rip+0x360]        # 0x1a7c
  0171c:    	cmp    esi,0xffffffff
  0171f:    	je     0x3281c
  01725:    	cmp    WORD PTR [rdi+0x2],0x3
  0172a:    	jne    0x1743
  01730:    	cmp    esi,0x6
  01733:    	jge    0x1743
  01739:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0173e:    	jmp    0x176d
  01743:    	sub    rsp,0x10
  01747:    	movq   QWORD PTR [rsp],xmm3
  0174c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01752: 45 	movabs rax,0x564559818b00
  0175c:    	call   rax
  0175e:    	movq   xmm3,QWORD PTR [rsp]
  01763:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01769:    	add    rsp,0x10
  0176d: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [Float][Float]
  01774: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0177b: 00 	test   rdi,0x1
  01782:    	jne    0x32863
  01788: 00 	test   rdi,0x2
  0178f:    	je     0x17cb
  01795:    	xorps  xmm2,xmm2
  01798: 00 	movabs rax,0x8000000000000002
  017a2:    	cmp    rdi,rax
  017a5:    	je     0x17dd
  017ab:    	mov    rax,rdi
  017ae:    	sar    rax,0x3f
  017b2:    	add    rax,0x2
  017b6:    	and    rdi,0xfffffffffffffffc
  017ba:    	or     rdi,rax
  017bd:    	rol    rdi,0x3d
  017c1:    	movq   xmm2,rdi
  017c6:    	jmp    0x17dd
  017cb:    	call   0xfffead1d
  017d0:    	test   rax,rax
  017d3:    	je     0x32863
  017d9:    	movq   xmm2,xmm0
  017dd: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  017e4: 00 	test   rdi,0x1
  017eb:    	jne    0x32872
  017f1: 00 	test   rdi,0x2
  017f8:    	je     0x1834
  017fe:    	xorps  xmm5,xmm5
  01801: 00 	movabs rax,0x8000000000000002
  0180b:    	cmp    rdi,rax
  0180e:    	je     0x1846
  01814:    	mov    rax,rdi
  01817:    	sar    rax,0x3f
  0181b:    	add    rax,0x2
  0181f:    	and    rdi,0xfffffffffffffffc
  01823:    	or     rdi,rax
  01826:    	rol    rdi,0x3d
  0182a:    	movq   xmm5,rdi
  0182f:    	jmp    0x1846
  01834:    	call   0xfffead1d
  01839:    	test   rax,rax
  0183c:    	je     0x32872
  01842:    	movq   xmm5,xmm0
  01846:    	addsd  xmm2,xmm5
:00115 _ = %14.call z=(%15; 1)              [Vec]
  0184a:    	movq   xmm0,xmm2
  0184e:    	call   0xfffeae41
  01853: ff 	mov    QWORD PTR [r14-0xa8],rax
  0185a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01861: 00 	test   rdi,0x7
  01868:    	jne    0x32881
  0186e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01872:    	jne    0x32881
  01878: 26 	cmp    DWORD PTR [rip+0xfffffffffffedbe2],0x26        # 0xfffef461
  0187f:    	jne    0x32881
  01885:    	mov    esi,DWORD PTR [rip+0x1f9]        # 0x1a84
  0188b:    	cmp    esi,0xffffffff
  0188e:    	je     0x3289f
  01894:    	cmp    WORD PTR [rdi+0x2],0x3
  01899:    	jne    0x18b9
  0189f:    	cmp    esi,0x6
  018a2:    	jge    0x18b9
  018a8: ff 	mov    rax,QWORD PTR [r14-0xa8]
  018af:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  018b4:    	jmp    0x190b
  018b9:    	sub    rsp,0x20
  018bd:    	movq   QWORD PTR [rsp],xmm2
  018c2:    	movq   QWORD PTR [rsp+0x8],xmm3
  018c8:    	movq   QWORD PTR [rsp+0x10],xmm4
  018ce:    	movq   QWORD PTR [rsp+0x18],xmm5
  018d4: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  018db: 45 	movabs rax,0x564559818d80
  018e5:    	call   rax
  018e7:    	movq   xmm2,QWORD PTR [rsp]
  018ec:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018f2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018f8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018fe:    	add    rsp,0x20
  01902:    	test   rax,rax
  01905:    	je     0x32890
:00116 
:00117 ret %15
  0190b: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01912:    	leave  
  01913:    	ret    
:00118 %14 = nil
  01914: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00119 ret %14
  0191f: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01926:    	leave  
  01927:    	ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x564559eba010
<== finished compile. elapsed:116.9µs
offset:Pos(93672) code: 6208 bytes  data: 308 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x30e80
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x30e8f
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x30e8f
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed98f]        # 0xfffed9e8
  00059: 00 	cmp    rax,QWORD PTR [rip+0x17f8]        # 0x1858
  00060:    	jne    0x30e9e
  00066: 00 	mov    rax,QWORD PTR [rip+0x17db]        # 0x1848
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x30ee9
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x30ee9
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffed946],0x26        # 0xfffed9d9
  00093:    	jne    0x30ee9
  00099:    	mov    esi,DWORD PTR [rip+0x17c5]        # 0x1864
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x30ef8
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 45 	movabs rax,0x564559818b00
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x30f21
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x30f21
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffed8e1],0x26        # 0xfffed9d9
  000f8:    	jne    0x30f21
  000fe:    	mov    esi,DWORD PTR [rip+0x1768]        # 0x186c
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x30f30
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 45 	movabs rax,0x564559818b00
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x30f59
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x30f59
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffed87c],0x26        # 0xfffed9d9
  0015d:    	jne    0x30f59
  00163:    	mov    esi,DWORD PTR [rip+0x170b]        # 0x1874
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x30f68
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 45 	movabs rax,0x564559818b00
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x30f91
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x30f91
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffed817],0x26        # 0xfffed9d9
  001c2:    	jne    0x30f91
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x30fa0
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x30fd2
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdi,QWORD PTR [r14-0x38]
  00226:    	mov    rsi,QWORD PTR [r14-0x48]
  0022a: 00 	test   rdi,0x7
  00231:    	jne    0x30fe1
  00237:    	cmp    DWORD PTR [rdi+0x4],0xb
  0023b:    	jne    0x30fe1
  00241: 00 	test   rsi,0x1
  00248:    	je     0x30fe1
  0024e:    	sar    rsi,1
  00251:    	mov    rdx,r12
  00254:    	mov    rcx,QWORD PTR [r14-0x50]
  00258: 45 	movabs rax,0x5645597e4a90
  00262:    	call   rax
  00264:    	test   rax,rax
  00267:    	je     0x30ff0
:00012 %3 = 1: i32
  0026d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00275: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed76c]        # 0xfffed9e8
  0027c: 00 	cmp    rax,QWORD PTR [rip+0x1605]        # 0x1888
  00283:    	jne    0x30fff
  00289: 00 	mov    rax,QWORD PTR [rip+0x15e8]        # 0x1878
  00290:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  00294: 00 	movq   xmm2,QWORD PTR [rip+0x15fc]        # 0x1898
  0029c: 00 	movabs rax,0x8000000000000002
  002a6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002aa: 00 	movq   xmm3,QWORD PTR [rip+0x15f6]        # 0x18a8
  002b2: 00 	movabs rax,0x8000000000000002
  002bc:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002c0: 00 	movq   xmm4,QWORD PTR [rip+0x15f0]        # 0x18b8
  002c8: 00 	movabs rax,0x8000000000000002
  002d2:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002d6:    	mov    rdi,QWORD PTR [r14-0x50]
  002da: 00 	test   rdi,0x7
  002e1:    	jne    0x3104a
  002e7:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002eb:    	jne    0x3104a
  002f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffed6e1],0x26        # 0xfffed9d9
  002f8:    	jne    0x3104a
  002fe: 00 	mov    r9,0x0
  00305:    	sub    rsp,0x20
  00309:    	movq   QWORD PTR [rsp],xmm2
  0030e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00314:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031a:    	mov    rdx,rdi
  0031d:    	mov    QWORD PTR [rsp-0x40],rcx
  00322: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0032b:    	lea    rcx,[r14-0x58]
  0032f: 00 	mov    r8,0x3
  00336:    	mov    rsi,QWORD PTR [rbx]
  00339:    	mov    QWORD PTR [rsp-0x18],rsi
  0033e:    	lea    rsi,[rsp-0x18]
  00343:    	mov    QWORD PTR [rbx],rsi
  00346:    	lea    r14,[rsp-0x10]
  0034b:    	mov    QWORD PTR [rsp-0x20],r14
  00350:    	call   0x31059
  00355:    	lea    r14,[rbp-0x8]
  00359:    	mov    QWORD PTR [rbx],r14
  0035c:    	mov    r14,QWORD PTR [rbp-0x10]
  00360:    	movq   xmm2,QWORD PTR [rsp]
  00365:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0036b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00371:    	add    rsp,0x20
  00375:    	test   rax,rax
  00378:    	je     0x3108b
  0037e:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00382:    	mov    rdi,QWORD PTR [r14-0x38]
  00386:    	mov    rsi,QWORD PTR [r14-0x48]
  0038a: 00 	test   rdi,0x7
  00391:    	jne    0x3109a
  00397:    	cmp    DWORD PTR [rdi+0x4],0xb
  0039b:    	jne    0x3109a
  003a1: 00 	test   rsi,0x1
  003a8:    	je     0x3109a
  003ae:    	sar    rsi,1
  003b1:    	sub    rsp,0x20
  003b5:    	movq   QWORD PTR [rsp],xmm2
  003ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  003c6:    	mov    rdx,r12
  003c9:    	mov    rcx,QWORD PTR [r14-0x50]
  003cd: 45 	movabs rax,0x5645597e4a90
  003d7:    	call   rax
  003d9:    	movq   xmm2,QWORD PTR [rsp]
  003de:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003e4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ea:    	add    rsp,0x20
  003ee:    	test   rax,rax
  003f1:    	je     0x310a9
:00020 %3 = %2.call x()                     [Vec]
  003f7:    	mov    rdi,QWORD PTR [r14-0x40]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x310b8
  00408:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0040c:    	jne    0x310b8
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffed5c0],0x26        # 0xfffed9d9
  00419:    	jne    0x310b8
  0041f:    	mov    esi,DWORD PTR [rip+0x149f]        # 0x18c4
  00425:    	cmp    esi,0xffffffff
  00428:    	je     0x310c7
  0042e:    	cmp    WORD PTR [rdi+0x2],0x3
  00433:    	jne    0x44c
  00439:    	cmp    esi,0x6
  0043c:    	jge    0x44c
  00442:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00447:    	jmp    0x482
  0044c:    	sub    rsp,0x20
  00450:    	movq   QWORD PTR [rsp],xmm2
  00455:    	movq   QWORD PTR [rsp+0x8],xmm3
  0045b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00461: 45 	movabs rax,0x564559818b00
  0046b:    	call   rax
  0046d:    	movq   xmm2,QWORD PTR [rsp]
  00472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0047e:    	add    rsp,0x20
  00482:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00486: 00 	movq   xmm5,QWORD PTR [rip+0x143a]        # 0x18c8
  0048e: 99 	movabs rax,0xff1999999999999a
  00498:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  0049c:    	mov    rdi,QWORD PTR [r14-0x48]
  004a0: 00 	test   rdi,0x1
  004a7:    	jne    0x3111a
  004ad: 00 	test   rdi,0x2
  004b4:    	je     0x4f0
  004ba:    	xorps  xmm6,xmm6
  004bd: 00 	movabs rax,0x8000000000000002
  004c7:    	cmp    rdi,rax
  004ca:    	je     0x502
  004d0:    	mov    rax,rdi
  004d3:    	sar    rax,0x3f
  004d7:    	add    rax,0x2
  004db:    	and    rdi,0xfffffffffffffffc
  004df:    	or     rdi,rax
  004e2:    	rol    rdi,0x3d
  004e6:    	movq   xmm6,rdi
  004eb:    	jmp    0x502
  004f0:    	call   0xfffe9295
  004f5:    	test   rax,rax
  004f8:    	je     0x3111a
  004fe:    	movq   xmm6,xmm0
  00502:    	ucomisd xmm6,xmm5
  00506:    	jae    0x31248
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  0050c:    	mov    rdi,QWORD PTR [r14-0x40]
  00510: 00 	test   rdi,0x7
  00517:    	jne    0x31129
  0051d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00521:    	jne    0x31129
  00527: 26 	cmp    DWORD PTR [rip+0xfffffffffffed4ab],0x26        # 0xfffed9d9
  0052e:    	jne    0x31129
  00534:    	mov    esi,DWORD PTR [rip+0x139a]        # 0x18d4
  0053a:    	cmp    esi,0xffffffff
  0053d:    	je     0x31138
  00543:    	cmp    WORD PTR [rdi+0x2],0x3
  00548:    	jne    0x561
  0054e:    	cmp    esi,0x6
  00551:    	jge    0x561
  00557:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0055c:    	jmp    0x5a3
  00561:    	sub    rsp,0x20
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm4
  00576:    	movq   QWORD PTR [rsp+0x18],xmm5
  0057c: 45 	movabs rax,0x564559818b00
  00586:    	call   rax
  00588:    	movq   xmm2,QWORD PTR [rsp]
  0058d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00593:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00599:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0059f:    	add    rsp,0x20
  005a3:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005a7: 00 	movq   xmm5,QWORD PTR [rip+0x1329]        # 0x18d8
  005af: 99 	movabs rax,0xff1999999999999e
  005b9:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  005bd:    	mov    rdi,QWORD PTR [r14-0x48]
  005c1: 00 	test   rdi,0x1
  005c8:    	jne    0x31197
  005ce: 00 	test   rdi,0x2
  005d5:    	je     0x611
  005db:    	xorps  xmm6,xmm6
  005de: 00 	movabs rax,0x8000000000000002
  005e8:    	cmp    rdi,rax
  005eb:    	je     0x623
  005f1:    	mov    rax,rdi
  005f4:    	sar    rax,0x3f
  005f8:    	add    rax,0x2
  005fc:    	and    rdi,0xfffffffffffffffc
  00600:    	or     rdi,rax
  00603:    	rol    rdi,0x3d
  00607:    	movq   xmm6,rdi
  0060c:    	jmp    0x623
  00611:    	call   0xfffe9295
  00616:    	test   rax,rax
  00619:    	je     0x31197
  0061f:    	movq   xmm6,xmm0
  00623:    	ucomisd xmm6,xmm5
  00627:    	jbe    0x31261
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  0062d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00635:    	mov    rdi,QWORD PTR [r14-0x38]
  00639:    	mov    rsi,QWORD PTR [r14-0x48]
  0063d: 00 	test   rdi,0x7
  00644:    	jne    0x311a6
  0064a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0064e:    	jne    0x311a6
  00654: 00 	test   rsi,0x1
  0065b:    	je     0x311a6
  00661:    	sar    rsi,1
  00664:    	sub    rsp,0x20
  00668:    	movq   QWORD PTR [rsp],xmm2
  0066d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00673:    	movq   QWORD PTR [rsp+0x10],xmm4
  00679:    	movq   QWORD PTR [rsp+0x18],xmm5
  0067f: 45 	movabs rax,0x5645597e4900
  00689:    	call   rax
  0068b:    	movq   xmm2,QWORD PTR [rsp]
  00690:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00696:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0069c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006a2:    	add    rsp,0x20
  006a6:    	test   rax,rax
  006a9:    	je     0x311b5
  006af:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006b3: 00 	movq   xmm5,QWORD PTR [rip+0x122d]        # 0x18e8
  006bb: 00 	movabs rax,0xff80000000000002
  006c5:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006c9:    	mov    rdi,QWORD PTR [r14-0x48]
  006cd: 00 	test   rdi,0x7
  006d4:    	jne    0x311c4
  006da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006de:    	jne    0x311c4
  006e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffed2ee],0x26        # 0xfffed9d9
  006eb:    	jne    0x311c4
  006f1:    	mov    esi,DWORD PTR [rip+0x11fd]        # 0x18f4
  006f7:    	cmp    esi,0xffffffff
  006fa:    	je     0x311e2
  00700:    	cmp    WORD PTR [rdi+0x2],0x3
  00705:    	jne    0x722
  0070b:    	cmp    esi,0x6
  0070e:    	jge    0x722
  00714:    	mov    rax,QWORD PTR [r14-0x50]
  00718:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071d:    	jmp    0x771
  00722:    	sub    rsp,0x20
  00726:    	movq   QWORD PTR [rsp],xmm2
  0072b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00731:    	movq   QWORD PTR [rsp+0x10],xmm4
  00737:    	movq   QWORD PTR [rsp+0x18],xmm5
  0073d:    	mov    rdx,QWORD PTR [r14-0x50]
  00741: 45 	movabs rax,0x564559818d80
  0074b:    	call   rax
  0074d:    	movq   xmm2,QWORD PTR [rsp]
  00752:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00758:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0075e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00764:    	add    rsp,0x20
  00768:    	test   rax,rax
  0076b:    	je     0x311d3
:00034 
:00035 br =>:00073
  00771:    	jmp    0x3166a
:00036 %3 = %2.call y()                     [Vec]
  00776:    	mov    rdi,QWORD PTR [r14-0x40]
  0077a: 00 	test   rdi,0x7
  00781:    	jne    0x3127a
  00787:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0078b:    	jne    0x3127a
  00791: 26 	cmp    DWORD PTR [rip+0xfffffffffffed241],0x26        # 0xfffed9d9
  00798:    	jne    0x3127a
  0079e:    	mov    esi,DWORD PTR [rip+0x1158]        # 0x18fc
  007a4:    	cmp    esi,0xffffffff
  007a7:    	je     0x31289
  007ad:    	cmp    WORD PTR [rdi+0x2],0x3
  007b2:    	jne    0x7cb
  007b8:    	cmp    esi,0x6
  007bb:    	jge    0x7cb
  007c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007c6:    	jmp    0x80d
  007cb:    	sub    rsp,0x20
  007cf:    	movq   QWORD PTR [rsp],xmm2
  007d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  007da:    	movq   QWORD PTR [rsp+0x10],xmm4
  007e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  007e6: 45 	movabs rax,0x564559818b00
  007f0:    	call   rax
  007f2:    	movq   xmm2,QWORD PTR [rsp]
  007f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00803:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00809:    	add    rsp,0x20
  0080d:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00811: 00 	movq   xmm5,QWORD PTR [rip+0x10ef]        # 0x1908
  00819: 99 	movabs rax,0xff1999999999999a
  00823:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
  00827:    	mov    rdi,QWORD PTR [r14-0x48]
  0082b: 00 	test   rdi,0x1
  00832:    	jne    0x312e8
  00838: 00 	test   rdi,0x2
  0083f:    	je     0x87b
  00845:    	xorps  xmm6,xmm6
  00848: 00 	movabs rax,0x8000000000000002
  00852:    	cmp    rdi,rax
  00855:    	je     0x88d
  0085b:    	mov    rax,rdi
  0085e:    	sar    rax,0x3f
  00862:    	add    rax,0x2
  00866:    	and    rdi,0xfffffffffffffffc
  0086a:    	or     rdi,rax
  0086d:    	rol    rdi,0x3d
  00871:    	movq   xmm6,rdi
  00876:    	jmp    0x88d
  0087b:    	call   0xfffe9295
  00880:    	test   rax,rax
  00883:    	je     0x312e8
  00889:    	movq   xmm6,xmm0
  0088d:    	ucomisd xmm6,xmm5
  00891:    	jae    0x313e0
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [<INVALID>]
  00897: 00 	cmp    DWORD PTR [rip+0x1072],0x0        # 0x1910
  0089e:    	jl     0x312f7
  008a4:    	je     0x31306
  008aa: 01 	sub    DWORD PTR [rip+0x105f],0x1        # 0x1910
  008b1:    	xor    rdi,rdi
  008b4:    	jmp    0x312f7
  008b9:    	sub    rsp,0x20
  008bd:    	movq   QWORD PTR [rsp],xmm2
  008c2:    	movq   QWORD PTR [rsp+0x8],xmm3
  008c8:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ce:    	movq   QWORD PTR [rsp+0x18],xmm5
  008d4:    	mov    rdi,QWORD PTR [r14-0x40]
  008d8: 45 	movabs rax,0x564559780ec0
  008e2:    	call   rax
  008e4:    	mov    r15d,eax
  008e7: 45 	movabs r13,0x564559eba2b0
  008f1:    	cmp    QWORD PTR [r13+0x8],0x0
  008f6:    	je     0x31322
  008fc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00900:    	jne    0x31322
  00906:    	mov    eax,DWORD PTR [rip+0xfffffffffffed0cd]        # 0xfffed9d9
  0090c:    	cmp    DWORD PTR [r13-0x4],eax
  00910:    	jne    0x31322
  00916: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0091f:    	mov    rax,QWORD PTR [r14-0x40]
  00923:    	mov    QWORD PTR [rsp-0x40],rax
  00928: 00 	mov    rdi,0x0
  0092f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00938:    	mov    r13,QWORD PTR [r13+0x8]
  0093c:    	mov    rax,QWORD PTR [r13+0x8]
  00940:    	mov    QWORD PTR [rsp-0x30],rax
  00945:    	mov    rax,QWORD PTR [r13+0x0]
  00949:    	mov    r13,QWORD PTR [r13+0x10]
  0094d:    	mov    rsi,QWORD PTR [rbx]
  00950:    	mov    QWORD PTR [rsp-0x18],rsi
  00955:    	lea    rsi,[rsp-0x18]
  0095a:    	mov    QWORD PTR [rbx],rsi
  0095d:    	lea    r14,[rsp-0x10]
  00962:    	mov    QWORD PTR [rsp-0x20],r14
  00967:    	call   rax
  00969:    	lea    r14,[rbp-0x8]
  0096d:    	mov    QWORD PTR [rbx],r14
  00970:    	mov    r14,QWORD PTR [rbp-0x10]
  00974:    	movq   xmm2,QWORD PTR [rsp]
  00979:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0097f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00985:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0098b:    	add    rsp,0x20
  0098f:    	test   rax,rax
  00992:    	je     0x31363
  00998:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  0099c: 00 	movq   xmm5,QWORD PTR [rip+0xf74]        # 0x1918
  009a4: 99 	movabs rax,0xff1999999999999e
  009ae:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  009b2:    	mov    rdi,QWORD PTR [r14-0x48]
  009b6:    	mov    rsi,QWORD PTR [r14-0x50]
  009ba:    	sub    rsp,0x20
  009be:    	movq   QWORD PTR [rsp],xmm2
  009c3:    	movq   QWORD PTR [rsp+0x8],xmm3
  009c9:    	movq   QWORD PTR [rsp+0x10],xmm4
  009cf:    	movq   QWORD PTR [rsp+0x18],xmm5
  009d5:    	mov    rdx,rdi
  009d8:    	mov    rcx,rsi
  009db:    	mov    rdi,rbx
  009de:    	mov    rsi,r12
  009e1: 45 	movabs rax,0x564559797d80
  009eb:    	call   rax
  009ed:    	movq   xmm2,QWORD PTR [rsp]
  009f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a04:    	add    rsp,0x20
  00a08:    	test   rax,rax
  00a0b:    	je     0x31372
  00a11:    	or     rax,0x10
  00a15:    	cmp    rax,0x14
  00a19:    	je     0x313f9
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  00a1f: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a27:    	sub    rsp,0x20
  00a2b:    	movq   QWORD PTR [rsp],xmm2
  00a30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a36:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a3c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a42:    	mov    rdi,rbx
  00a45:    	mov    rsi,r12
  00a48:    	mov    rdx,QWORD PTR [r14-0x38]
  00a4c:    	mov    rcx,QWORD PTR [r14-0x48]
  00a50: 45 	movabs r8,0x564559eba308
  00a5a: 45 	movabs rax,0x5645597e47d0
  00a64:    	call   rax
  00a66:    	movq   xmm2,QWORD PTR [rsp]
  00a6b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a71:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a77:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a7d:    	add    rsp,0x20
  00a81:    	test   rax,rax
  00a84:    	je     0x31381
  00a8a:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a8e: 00 	movq   xmm5,QWORD PTR [rip+0xe92]        # 0x1928
  00a96: 00 	movabs rax,0xff80000000000002
  00aa0:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00aa4:    	sub    rsp,0x20
  00aa8:    	movq   QWORD PTR [rsp],xmm2
  00aad:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ab3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ab9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00abf:    	mov    rdi,QWORD PTR [r14-0x48]
  00ac3: 45 	movabs rax,0x564559780ec0
  00acd:    	call   rax
  00acf:    	mov    r15d,eax
  00ad2: 45 	movabs r13,0x564559eba330
  00adc:    	cmp    QWORD PTR [r13+0x8],0x0
  00ae1:    	je     0x31390
  00ae7:    	cmp    r15d,DWORD PTR [r13-0x8]
  00aeb:    	jne    0x31390
  00af1:    	mov    eax,DWORD PTR [rip+0xfffffffffffecee2]        # 0xfffed9d9
  00af7:    	cmp    DWORD PTR [r13-0x4],eax
  00afb:    	jne    0x31390
  00b01: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b0a:    	mov    rax,QWORD PTR [r14-0x48]
  00b0e:    	mov    QWORD PTR [rsp-0x40],rax
  00b13: 00 	mov    rdi,0x1
  00b1a:    	mov    rax,QWORD PTR [r14-0x50]
  00b1e:    	mov    QWORD PTR [rsp-0x48],rax
  00b23: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b2c:    	mov    r13,QWORD PTR [r13+0x8]
  00b30:    	mov    rax,QWORD PTR [r13+0x8]
  00b34:    	mov    QWORD PTR [rsp-0x30],rax
  00b39:    	mov    rax,QWORD PTR [r13+0x0]
  00b3d:    	mov    r13,QWORD PTR [r13+0x10]
  00b41:    	mov    rsi,QWORD PTR [rbx]
  00b44:    	mov    QWORD PTR [rsp-0x18],rsi
  00b49:    	lea    rsi,[rsp-0x18]
  00b4e:    	mov    QWORD PTR [rbx],rsi
  00b51:    	lea    r14,[rsp-0x10]
  00b56:    	mov    QWORD PTR [rsp-0x20],r14
  00b5b:    	call   rax
  00b5d:    	lea    r14,[rbp-0x8]
  00b61:    	mov    QWORD PTR [rbx],r14
  00b64:    	mov    r14,QWORD PTR [rbp-0x10]
  00b68:    	movq   xmm2,QWORD PTR [rsp]
  00b6d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b73:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b79:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b7f:    	add    rsp,0x20
  00b83:    	test   rax,rax
  00b86:    	je     0x313d1
:00050 
:00051 br =>:00073
  00b8c:    	jmp    0x31683
:00052 %3 = %2.call z()                     [Vec]
  00b91:    	mov    rdi,QWORD PTR [r14-0x40]
  00b95: 00 	test   rdi,0x7
  00b9c:    	jne    0x31412
  00ba2:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ba6:    	jne    0x31412
  00bac: 26 	cmp    DWORD PTR [rip+0xfffffffffffece26],0x26        # 0xfffed9d9
  00bb3:    	jne    0x31412
  00bb9:    	mov    esi,DWORD PTR [rip+0xd75]        # 0x1934
  00bbf:    	cmp    esi,0xffffffff
  00bc2:    	je     0x31421
  00bc8:    	cmp    WORD PTR [rdi+0x2],0x3
  00bcd:    	jne    0xbe6
  00bd3:    	cmp    esi,0x6
  00bd6:    	jge    0xbe6
  00bdc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be1:    	jmp    0xc28
  00be6:    	sub    rsp,0x20
  00bea:    	movq   QWORD PTR [rsp],xmm2
  00bef:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bf5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bfb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c01: 45 	movabs rax,0x564559818b00
  00c0b:    	call   rax
  00c0d:    	movq   xmm2,QWORD PTR [rsp]
  00c12:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c18:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c1e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c24:    	add    rsp,0x20
  00c28:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00c2c: 00 	movq   xmm5,QWORD PTR [rip+0xd04]        # 0x1938
  00c34: 99 	movabs rax,0xff1999999999999a
  00c3e:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
  00c42:    	mov    rdi,QWORD PTR [r14-0x48]
  00c46: 00 	test   rdi,0x1
  00c4d:    	jne    0x31480
  00c53: 00 	test   rdi,0x2
  00c5a:    	je     0xc96
  00c60:    	xorps  xmm6,xmm6
  00c63: 00 	movabs rax,0x8000000000000002
  00c6d:    	cmp    rdi,rax
  00c70:    	je     0xca8
  00c76:    	mov    rax,rdi
  00c79:    	sar    rax,0x3f
  00c7d:    	add    rax,0x2
  00c81:    	and    rdi,0xfffffffffffffffc
  00c85:    	or     rdi,rax
  00c88:    	rol    rdi,0x3d
  00c8c:    	movq   xmm6,rdi
  00c91:    	jmp    0xca8
  00c96:    	call   0xfffe9295
  00c9b:    	test   rax,rax
  00c9e:    	je     0x31480
  00ca4:    	movq   xmm6,xmm0
  00ca8:    	ucomisd xmm6,xmm5
  00cac:    	jae    0x315ae
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [Vec]
  00cb2:    	mov    rdi,QWORD PTR [r14-0x40]
  00cb6: 00 	test   rdi,0x7
  00cbd:    	jne    0x3148f
  00cc3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00cc7:    	jne    0x3148f
  00ccd: 26 	cmp    DWORD PTR [rip+0xfffffffffffecd05],0x26        # 0xfffed9d9
  00cd4:    	jne    0x3148f
  00cda:    	mov    esi,DWORD PTR [rip+0xc64]        # 0x1944
  00ce0:    	cmp    esi,0xffffffff
  00ce3:    	je     0x3149e
  00ce9:    	cmp    WORD PTR [rdi+0x2],0x3
  00cee:    	jne    0xd07
  00cf4:    	cmp    esi,0x6
  00cf7:    	jge    0xd07
  00cfd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d02:    	jmp    0xd49
  00d07:    	sub    rsp,0x20
  00d0b:    	movq   QWORD PTR [rsp],xmm2
  00d10:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d16:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d22: 45 	movabs rax,0x564559818b00
  00d2c:    	call   rax
  00d2e:    	movq   xmm2,QWORD PTR [rsp]
  00d33:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d39:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d3f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d45:    	add    rsp,0x20
  00d49:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00d4d: 00 	movq   xmm5,QWORD PTR [rip+0xbf3]        # 0x1948
  00d55: 99 	movabs rax,0xff1999999999999e
  00d5f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
  00d63:    	mov    rdi,QWORD PTR [r14-0x48]
  00d67: 00 	test   rdi,0x1
  00d6e:    	jne    0x314fd
  00d74: 00 	test   rdi,0x2
  00d7b:    	je     0xdb7
  00d81:    	xorps  xmm6,xmm6
  00d84: 00 	movabs rax,0x8000000000000002
  00d8e:    	cmp    rdi,rax
  00d91:    	je     0xdc9
  00d97:    	mov    rax,rdi
  00d9a:    	sar    rax,0x3f
  00d9e:    	add    rax,0x2
  00da2:    	and    rdi,0xfffffffffffffffc
  00da6:    	or     rdi,rax
  00da9:    	rol    rdi,0x3d
  00dad:    	movq   xmm6,rdi
  00db2:    	jmp    0xdc9
  00db7:    	call   0xfffe9295
  00dbc:    	test   rax,rax
  00dbf:    	je     0x314fd
  00dc5:    	movq   xmm6,xmm0
  00dc9:    	ucomisd xmm6,xmm5
  00dcd:    	jbe    0x315c7
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00dd3: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00ddb:    	mov    rdi,QWORD PTR [r14-0x38]
  00ddf:    	mov    rsi,QWORD PTR [r14-0x48]
  00de3: 00 	test   rdi,0x7
  00dea:    	jne    0x3150c
  00df0:    	cmp    DWORD PTR [rdi+0x4],0xb
  00df4:    	jne    0x3150c
  00dfa: 00 	test   rsi,0x1
  00e01:    	je     0x3150c
  00e07:    	sar    rsi,1
  00e0a:    	sub    rsp,0x20
  00e0e:    	movq   QWORD PTR [rsp],xmm2
  00e13:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e19:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e1f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e25: 45 	movabs rax,0x5645597e4900
  00e2f:    	call   rax
  00e31:    	movq   xmm2,QWORD PTR [rsp]
  00e36:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e3c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e42:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e48:    	add    rsp,0x20
  00e4c:    	test   rax,rax
  00e4f:    	je     0x3151b
  00e55:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00e59: 00 	movq   xmm5,QWORD PTR [rip+0xaf7]        # 0x1958
  00e61: 00 	movabs rax,0xff80000000000002
  00e6b:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00e6f:    	mov    rdi,QWORD PTR [r14-0x48]
  00e73: 00 	test   rdi,0x7
  00e7a:    	jne    0x3152a
  00e80:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e84:    	jne    0x3152a
  00e8a: 26 	cmp    DWORD PTR [rip+0xfffffffffffecb48],0x26        # 0xfffed9d9
  00e91:    	jne    0x3152a
  00e97:    	mov    esi,DWORD PTR [rip+0xac7]        # 0x1964
  00e9d:    	cmp    esi,0xffffffff
  00ea0:    	je     0x31548
  00ea6:    	cmp    WORD PTR [rdi+0x2],0x3
  00eab:    	jne    0xec8
  00eb1:    	cmp    esi,0x6
  00eb4:    	jge    0xec8
  00eba:    	mov    rax,QWORD PTR [r14-0x50]
  00ebe:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00ec3:    	jmp    0xf17
  00ec8:    	sub    rsp,0x20
  00ecc:    	movq   QWORD PTR [rsp],xmm2
  00ed1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ed7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00edd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ee3:    	mov    rdx,QWORD PTR [r14-0x50]
  00ee7: 45 	movabs rax,0x564559818d80
  00ef1:    	call   rax
  00ef3:    	movq   xmm2,QWORD PTR [rsp]
  00ef8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00efe:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f04:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f0a:    	add    rsp,0x20
  00f0e:    	test   rax,rax
  00f11:    	je     0x31539
:00066 
:00067 br =>:00073
  00f17:    	jmp    0x3169c
:00068 %3 = 1: i32
  00f1c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f24:    	sub    rsp,0x20
  00f28:    	movq   QWORD PTR [rsp],xmm2
  00f2d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f33:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f39:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f3f:    	mov    rdi,rbx
  00f42:    	mov    rsi,r12
  00f45:    	mov    rdx,QWORD PTR [r14-0x38]
  00f49:    	mov    rcx,QWORD PTR [r14-0x48]
  00f4d: 45 	movabs r8,0x564559eba468
  00f57: 45 	movabs rax,0x5645597e47d0
  00f61:    	call   rax
  00f63:    	movq   xmm2,QWORD PTR [rsp]
  00f68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f7a:    	add    rsp,0x20
  00f7e:    	test   rax,rax
  00f81:    	je     0x315e0
  00f87:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00f8b: 00 	movq   xmm5,QWORD PTR [rip+0x9d5]        # 0x1968
  00f93: 00 	movabs rax,0xff80000000000002
  00f9d:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fa1: 00 	cmp    DWORD PTR [rip+0x9c8],0x0        # 0x1970
  00fa8:    	jl     0x315ef
  00fae:    	je     0x315fe
  00fb4: 01 	sub    DWORD PTR [rip+0x9b5],0x1        # 0x1970
  00fbb:    	xor    rdi,rdi
  00fbe:    	jmp    0x315ef
  00fc3:    	sub    rsp,0x20
  00fc7:    	movq   QWORD PTR [rsp],xmm2
  00fcc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fd2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fd8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fde:    	mov    rdi,QWORD PTR [r14-0x48]
  00fe2: 45 	movabs rax,0x564559780ec0
  00fec:    	call   rax
  00fee:    	mov    r15d,eax
  00ff1: 45 	movabs r13,0x564559eba490
  00ffb:    	cmp    QWORD PTR [r13+0x8],0x0
  01000:    	je     0x3161a
  01006:    	cmp    r15d,DWORD PTR [r13-0x8]
  0100a:    	jne    0x3161a
  01010:    	mov    eax,DWORD PTR [rip+0xfffffffffffec9c3]        # 0xfffed9d9
  01016:    	cmp    DWORD PTR [r13-0x4],eax
  0101a:    	jne    0x3161a
  01020: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01029:    	mov    rax,QWORD PTR [r14-0x48]
  0102d:    	mov    QWORD PTR [rsp-0x40],rax
  01032: 00 	mov    rdi,0x1
  01039:    	mov    rax,QWORD PTR [r14-0x50]
  0103d:    	mov    QWORD PTR [rsp-0x48],rax
  01042: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0104b:    	mov    r13,QWORD PTR [r13+0x8]
  0104f:    	mov    rax,QWORD PTR [r13+0x8]
  01053:    	mov    QWORD PTR [rsp-0x30],rax
  01058:    	mov    rax,QWORD PTR [r13+0x0]
  0105c:    	mov    r13,QWORD PTR [r13+0x10]
  01060:    	mov    rsi,QWORD PTR [rbx]
  01063:    	mov    QWORD PTR [rsp-0x18],rsi
  01068:    	lea    rsi,[rsp-0x18]
  0106d:    	mov    QWORD PTR [rbx],rsi
  01070:    	lea    r14,[rsp-0x10]
  01075:    	mov    QWORD PTR [rsp-0x20],r14
  0107a:    	call   rax
  0107c:    	lea    r14,[rbp-0x8]
  01080:    	mov    QWORD PTR [rbx],r14
  01083:    	mov    r14,QWORD PTR [rbp-0x10]
  01087:    	movq   xmm2,QWORD PTR [rsp]
  0108c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01092:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01098:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0109e:    	add    rsp,0x20
  010a2:    	test   rax,rax
  010a5:    	je     0x3165b
:00072 
  010ab:    	jmp    0x316b5
:00073 %3 = 0: i32
  010b0: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  010b8: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  010c0:    	mov    rdi,QWORD PTR [r14-0x38]
  010c4:    	mov    rsi,QWORD PTR [r14-0x50]
  010c8: 00 	test   rdi,0x7
  010cf:    	jne    0x316ce
  010d5:    	cmp    DWORD PTR [rdi+0x4],0xb
  010d9:    	jne    0x316ce
  010df: 00 	test   rsi,0x1
  010e6:    	je     0x316ce
  010ec:    	sar    rsi,1
  010ef:    	sub    rsp,0x20
  010f3:    	movq   QWORD PTR [rsp],xmm2
  010f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  010fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01104: 45 	movabs rax,0x5645597e4900
  0110e:    	call   rax
  01110:    	movq   xmm2,QWORD PTR [rsp]
  01115:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0111b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01121:    	add    rsp,0x20
  01125:    	test   rax,rax
  01128:    	je     0x316dd
  0112e:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  01132: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  0113a:    	mov    rdi,QWORD PTR [r14-0x38]
  0113e:    	mov    rsi,QWORD PTR [r14-0x58]
  01142: 00 	test   rdi,0x7
  01149:    	jne    0x316ec
  0114f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01153:    	jne    0x316ec
  01159: 00 	test   rsi,0x1
  01160:    	je     0x316ec
  01166:    	sar    rsi,1
  01169:    	sub    rsp,0x10
  0116d:    	movq   QWORD PTR [rsp],xmm3
  01172:    	movq   QWORD PTR [rsp+0x8],xmm4
  01178: 45 	movabs rax,0x5645597e4900
  01182:    	call   rax
  01184:    	movq   xmm3,QWORD PTR [rsp]
  01189:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0118f:    	add    rsp,0x10
  01193:    	test   rax,rax
  01196:    	je     0x316fb
  0119c:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  011a0:    	mov    rdi,QWORD PTR [r14-0x50]
  011a4: 00 	test   rdi,0x7
  011ab:    	jne    0x3170a
  011b1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011b5:    	jne    0x3170a
  011bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffec817],0x26        # 0xfffed9d9
  011c2:    	jne    0x3170a
  011c8:    	sub    rsp,0x10
  011cc:    	movq   QWORD PTR [rsp],xmm3
  011d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  011d7: 00 	cmp    DWORD PTR [rip+0xfffffffffffec7ff],0x0        # 0xfffed9dd
  011de:    	jne    0x31719
  011e4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011ed:    	mov    rax,QWORD PTR [r14-0x50]
  011f1:    	mov    QWORD PTR [rsp-0x40],rax
  011f6: 00 	mov    rdi,0x1
  011fd:    	mov    rax,QWORD PTR [r14-0x58]
  01201:    	mov    QWORD PTR [rsp-0x48],rax
  01206: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0120f: 08 	movabs rax,0x100080000005d
  01219:    	mov    QWORD PTR [rsp-0x30],rax
  0121e: 45 	movabs r13,0x564559e86470
  01228:    	mov    rsi,QWORD PTR [rbx]
  0122b:    	mov    QWORD PTR [rsp-0x18],rsi
  01230:    	lea    rsi,[rsp-0x18]
  01235:    	mov    QWORD PTR [rbx],rsi
  01238:    	lea    r14,[rsp-0x10]
  0123d:    	mov    QWORD PTR [rsp-0x20],r14
  01242:    	call   0xffff6025
  01247:    	lea    r14,[rbp-0x8]
  0124b:    	mov    QWORD PTR [rbx],r14
  0124e:    	mov    r14,QWORD PTR [rbp-0x10]
  01252:    	movq   xmm3,QWORD PTR [rsp]
  01257:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0125d:    	add    rsp,0x10
  01261:    	test   rax,rax
  01264:    	je     0x31730
  0126a:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  0126e:    	mov    rdi,QWORD PTR [r14-0x38]
  01272:    	mov    rsi,QWORD PTR [r14-0x48]
  01276: 00 	test   rdi,0x7
  0127d:    	jne    0x3173f
  01283:    	cmp    DWORD PTR [rdi+0x4],0xb
  01287:    	jne    0x3173f
  0128d: 00 	test   rsi,0x1
  01294:    	je     0x3173f
  0129a:    	sar    rsi,1
  0129d:    	sub    rsp,0x10
  012a1:    	movq   QWORD PTR [rsp],xmm3
  012a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ac:    	mov    rdx,r12
  012af:    	mov    rcx,QWORD PTR [r14-0x50]
  012b3: 45 	movabs rax,0x5645597e4a90
  012bd:    	call   rax
  012bf:    	movq   xmm3,QWORD PTR [rsp]
  012c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ca:    	add    rsp,0x10
  012ce:    	test   rax,rax
  012d1:    	je     0x3174e
:00081 %3 = 0: i32
  012d7: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  012df: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  012e7:    	mov    rdi,QWORD PTR [r14-0x38]
  012eb:    	mov    rsi,QWORD PTR [r14-0x50]
  012ef: 00 	test   rdi,0x7
  012f6:    	jne    0x3175d
  012fc:    	cmp    DWORD PTR [rdi+0x4],0xb
  01300:    	jne    0x3175d
  01306: 00 	test   rsi,0x1
  0130d:    	je     0x3175d
  01313:    	sar    rsi,1
  01316:    	sub    rsp,0x10
  0131a:    	movq   QWORD PTR [rsp],xmm3
  0131f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01325: 45 	movabs rax,0x5645597e4900
  0132f:    	call   rax
  01331:    	movq   xmm3,QWORD PTR [rsp]
  01336:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0133c:    	add    rsp,0x10
  01340:    	test   rax,rax
  01343:    	je     0x3176c
  01349:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  0134d:    	mov    rdi,QWORD PTR [r14-0x50]
  01351: 00 	test   rdi,0x7
  01358:    	jne    0x3177b
  0135e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01362:    	jne    0x3177b
  01368: 26 	cmp    DWORD PTR [rip+0xfffffffffffec66a],0x26        # 0xfffed9d9
  0136f:    	jne    0x3177b
  01375:    	sub    rsp,0x10
  01379:    	movq   QWORD PTR [rsp],xmm3
  0137e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01384: 00 	cmp    DWORD PTR [rip+0xfffffffffffec652],0x0        # 0xfffed9dd
  0138b:    	jne    0x3178a
  01391: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0139a:    	mov    rax,QWORD PTR [r14-0x50]
  0139e:    	mov    QWORD PTR [rsp-0x40],rax
  013a3: 00 	mov    rdi,0x0
  013aa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013b3: 07 	movabs rax,0x1000700000060
  013bd:    	mov    QWORD PTR [rsp-0x30],rax
  013c2: 45 	movabs r13,0x564559ea5f60
  013cc:    	mov    rsi,QWORD PTR [rbx]
  013cf:    	mov    QWORD PTR [rsp-0x18],rsi
  013d4:    	lea    rsi,[rsp-0x18]
  013d9:    	mov    QWORD PTR [rbx],rsi
  013dc:    	lea    r14,[rsp-0x10]
  013e1:    	mov    QWORD PTR [rsp-0x20],r14
  013e6:    	call   0xfffee28b
  013eb:    	lea    r14,[rbp-0x8]
  013ef:    	mov    QWORD PTR [rbx],r14
  013f2:    	mov    r14,QWORD PTR [rbp-0x10]
  013f6:    	movq   xmm3,QWORD PTR [rsp]
  013fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01401:    	add    rsp,0x10
  01405:    	test   rax,rax
  01408:    	je     0x317a1
  0140e:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01412:    	mov    rdi,QWORD PTR [r14-0x38]
  01416:    	mov    rsi,QWORD PTR [r14-0x48]
  0141a: 00 	test   rdi,0x7
  01421:    	jne    0x317b0
  01427:    	cmp    DWORD PTR [rdi+0x4],0xb
  0142b:    	jne    0x317b0
  01431: 00 	test   rsi,0x1
  01438:    	je     0x317b0
  0143e:    	sar    rsi,1
  01441:    	sub    rsp,0x10
  01445:    	movq   QWORD PTR [rsp],xmm3
  0144a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01450:    	mov    rdx,r12
  01453:    	mov    rcx,QWORD PTR [r14-0x50]
  01457: 45 	movabs rax,0x5645597e4a90
  01461:    	call   rax
  01463:    	movq   xmm3,QWORD PTR [rsp]
  01468:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0146e:    	add    rsp,0x10
  01472:    	test   rax,rax
  01475:    	je     0x317bf
:00087 %3 = 1: i32
  0147b: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  01483: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  0148b:    	mov    rdi,QWORD PTR [r14-0x38]
  0148f:    	mov    rsi,QWORD PTR [r14-0x50]
  01493: 00 	test   rdi,0x7
  0149a:    	jne    0x317ce
  014a0:    	cmp    DWORD PTR [rdi+0x4],0xb
  014a4:    	jne    0x317ce
  014aa: 00 	test   rsi,0x1
  014b1:    	je     0x317ce
  014b7:    	sar    rsi,1
  014ba:    	sub    rsp,0x10
  014be:    	movq   QWORD PTR [rsp],xmm3
  014c3:    	movq   QWORD PTR [rsp+0x8],xmm4
  014c9: 45 	movabs rax,0x5645597e4900
  014d3:    	call   rax
  014d5:    	movq   xmm3,QWORD PTR [rsp]
  014da:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014e0:    	add    rsp,0x10
  014e4:    	test   rax,rax
  014e7:    	je     0x317dd
  014ed:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  014f1: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  014f9:    	mov    rdi,QWORD PTR [r14-0x38]
  014fd:    	mov    rsi,QWORD PTR [r14-0x58]
  01501: 00 	test   rdi,0x7
  01508:    	jne    0x317ec
  0150e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01512:    	jne    0x317ec
  01518: 00 	test   rsi,0x1
  0151f:    	je     0x317ec
  01525:    	sar    rsi,1
  01528:    	sub    rsp,0x10
  0152c:    	movq   QWORD PTR [rsp],xmm3
  01531:    	movq   QWORD PTR [rsp+0x8],xmm4
  01537: 45 	movabs rax,0x5645597e4900
  01541:    	call   rax
  01543:    	movq   xmm3,QWORD PTR [rsp]
  01548:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0154e:    	add    rsp,0x10
  01552:    	test   rax,rax
  01555:    	je     0x317fb
  0155b:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  0155f:    	mov    rdi,QWORD PTR [r14-0x50]
  01563: 00 	test   rdi,0x7
  0156a:    	jne    0x3180a
  01570:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01574:    	jne    0x3180a
  0157a: 26 	cmp    DWORD PTR [rip+0xfffffffffffec458],0x26        # 0xfffed9d9
  01581:    	jne    0x3180a
  01587:    	sub    rsp,0x10
  0158b:    	movq   QWORD PTR [rsp],xmm3
  01590:    	movq   QWORD PTR [rsp+0x8],xmm4
  01596: 00 	cmp    DWORD PTR [rip+0xfffffffffffec440],0x0        # 0xfffed9dd
  0159d:    	jne    0x31819
  015a3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015ac:    	mov    rax,QWORD PTR [r14-0x50]
  015b0:    	mov    QWORD PTR [rsp-0x40],rax
  015b5: 00 	mov    rdi,0x1
  015bc:    	mov    rax,QWORD PTR [r14-0x58]
  015c0:    	mov    QWORD PTR [rsp-0x48],rax
  015c5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015ce: 08 	movabs rax,0x100080000005d
  015d8:    	mov    QWORD PTR [rsp-0x30],rax
  015dd: 45 	movabs r13,0x564559e86470
  015e7:    	mov    rsi,QWORD PTR [rbx]
  015ea:    	mov    QWORD PTR [rsp-0x18],rsi
  015ef:    	lea    rsi,[rsp-0x18]
  015f4:    	mov    QWORD PTR [rbx],rsi
  015f7:    	lea    r14,[rsp-0x10]
  015fc:    	mov    QWORD PTR [rsp-0x20],r14
  01601:    	call   0xffff6025
  01606:    	lea    r14,[rbp-0x8]
  0160a:    	mov    QWORD PTR [rbx],r14
  0160d:    	mov    r14,QWORD PTR [rbp-0x10]
  01611:    	movq   xmm3,QWORD PTR [rsp]
  01616:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0161c:    	add    rsp,0x10
  01620:    	test   rax,rax
  01623:    	je     0x31830
  01629:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  0162d:    	mov    rdi,QWORD PTR [r14-0x38]
  01631:    	mov    rsi,QWORD PTR [r14-0x48]
  01635: 00 	test   rdi,0x7
  0163c:    	jne    0x3183f
  01642:    	cmp    DWORD PTR [rdi+0x4],0xb
  01646:    	jne    0x3183f
  0164c: 00 	test   rsi,0x1
  01653:    	je     0x3183f
  01659:    	sar    rsi,1
  0165c:    	sub    rsp,0x10
  01660:    	movq   QWORD PTR [rsp],xmm3
  01665:    	movq   QWORD PTR [rsp+0x8],xmm4
  0166b:    	mov    rdx,r12
  0166e:    	mov    rcx,QWORD PTR [r14-0x50]
  01672: 45 	movabs rax,0x5645597e4a90
  0167c:    	call   rax
  0167e:    	movq   xmm3,QWORD PTR [rsp]
  01683:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01689:    	add    rsp,0x10
  0168d:    	test   rax,rax
  01690:    	je     0x3184e
:00095 %3 = 1: i32
  01696: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  0169e: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  016a6:    	mov    rdi,QWORD PTR [r14-0x38]
  016aa:    	mov    rsi,QWORD PTR [r14-0x50]
  016ae: 00 	test   rdi,0x7
  016b5:    	jne    0x3185d
  016bb:    	cmp    DWORD PTR [rdi+0x4],0xb
  016bf:    	jne    0x3185d
  016c5: 00 	test   rsi,0x1
  016cc:    	je     0x3185d
  016d2:    	sar    rsi,1
  016d5:    	sub    rsp,0x10
  016d9:    	movq   QWORD PTR [rsp],xmm3
  016de:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e4: 45 	movabs rax,0x5645597e4900
  016ee:    	call   rax
  016f0:    	movq   xmm3,QWORD PTR [rsp]
  016f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016fb:    	add    rsp,0x10
  016ff:    	test   rax,rax
  01702:    	je     0x3186c
  01708:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  0170c:    	mov    rdi,QWORD PTR [r14-0x50]
  01710: 00 	test   rdi,0x7
  01717:    	jne    0x3187b
  0171d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01721:    	jne    0x3187b
  01727: 26 	cmp    DWORD PTR [rip+0xfffffffffffec2ab],0x26        # 0xfffed9d9
  0172e:    	jne    0x3187b
  01734:    	sub    rsp,0x10
  01738:    	movq   QWORD PTR [rsp],xmm3
  0173d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01743: 00 	cmp    DWORD PTR [rip+0xfffffffffffec293],0x0        # 0xfffed9dd
  0174a:    	jne    0x3188a
  01750: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01759:    	mov    rax,QWORD PTR [r14-0x50]
  0175d:    	mov    QWORD PTR [rsp-0x40],rax
  01762: 00 	mov    rdi,0x0
  01769: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01772: 07 	movabs rax,0x1000700000060
  0177c:    	mov    QWORD PTR [rsp-0x30],rax
  01781: 45 	movabs r13,0x564559ea5f60
  0178b:    	mov    rsi,QWORD PTR [rbx]
  0178e:    	mov    QWORD PTR [rsp-0x18],rsi
  01793:    	lea    rsi,[rsp-0x18]
  01798:    	mov    QWORD PTR [rbx],rsi
  0179b:    	lea    r14,[rsp-0x10]
  017a0:    	mov    QWORD PTR [rsp-0x20],r14
  017a5:    	call   0xfffee28b
  017aa:    	lea    r14,[rbp-0x8]
  017ae:    	mov    QWORD PTR [rbx],r14
  017b1:    	mov    r14,QWORD PTR [rbp-0x10]
  017b5:    	movq   xmm3,QWORD PTR [rsp]
  017ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017c0:    	add    rsp,0x10
  017c4:    	test   rax,rax
  017c7:    	je     0x318a1
  017cd:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  017d1:    	mov    rdi,QWORD PTR [r14-0x38]
  017d5:    	mov    rsi,QWORD PTR [r14-0x48]
  017d9: 00 	test   rdi,0x7
  017e0:    	jne    0x318b0
  017e6:    	cmp    DWORD PTR [rdi+0x4],0xb
  017ea:    	jne    0x318b0
  017f0: 00 	test   rsi,0x1
  017f7:    	je     0x318b0
  017fd:    	sar    rsi,1
  01800:    	sub    rsp,0x10
  01804:    	movq   QWORD PTR [rsp],xmm3
  01809:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180f:    	mov    rdx,r12
  01812:    	mov    rcx,QWORD PTR [r14-0x50]
  01816: 45 	movabs rax,0x5645597e4a90
  01820:    	call   rax
  01822:    	movq   xmm3,QWORD PTR [rsp]
  01827:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0182d:    	add    rsp,0x10
  01831:    	test   rax,rax
  01834:    	je     0x318bf
:00101 ret %4
  0183a:    	mov    rax,QWORD PTR [r14-0x50]
  0183e:    	leave  
  0183f:    	ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x564559eba010
<== finished compile. elapsed:116.8µs
offset:Pos(100188) code: 6064 bytes  data: 320 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x2ff5a
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x2ff69
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x2ff69
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec01b]        # 0xfffec074
  00059: 00 	cmp    rax,QWORD PTR [rip+0x1764]        # 0x17c4
  00060:    	jne    0x2ff78
  00066: 00 	mov    rax,QWORD PTR [rip+0x1747]        # 0x17b4
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x2ffc3
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x2ffc3
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffebfd2],0x26        # 0xfffec065
  00093:    	jne    0x2ffc3
  00099:    	mov    esi,DWORD PTR [rip+0x1731]        # 0x17d0
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x2ffd2
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 45 	movabs rax,0x564559818b00
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x2fffb
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x2fffb
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffebf6d],0x26        # 0xfffec065
  000f8:    	jne    0x2fffb
  000fe:    	mov    esi,DWORD PTR [rip+0x16d4]        # 0x17d8
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x3000a
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 45 	movabs rax,0x564559818b00
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x30033
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x30033
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffebf08],0x26        # 0xfffec065
  0015d:    	jne    0x30033
  00163:    	mov    esi,DWORD PTR [rip+0x1677]        # 0x17e0
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x30042
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 45 	movabs rax,0x564559818b00
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x3006b
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x3006b
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffebea3],0x26        # 0xfffec065
  001c2:    	jne    0x3006b
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x3007a
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x300ac
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdi,QWORD PTR [r14-0x38]
  00226:    	mov    rsi,QWORD PTR [r14-0x48]
  0022a: 00 	test   rdi,0x7
  00231:    	jne    0x300bb
  00237:    	cmp    DWORD PTR [rdi+0x4],0xb
  0023b:    	jne    0x300bb
  00241: 00 	test   rsi,0x1
  00248:    	je     0x300bb
  0024e:    	sar    rsi,1
  00251:    	mov    rdx,r12
  00254:    	mov    rcx,QWORD PTR [r14-0x50]
  00258: 45 	movabs rax,0x5645597e4a90
  00262:    	call   rax
  00264:    	test   rax,rax
  00267:    	je     0x300ca
:00012 %3 = 1: i32
  0026d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00275: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebdf8]        # 0xfffec074
  0027c: 00 	cmp    rax,QWORD PTR [rip+0x1571]        # 0x17f4
  00283:    	jne    0x300d9
  00289: 00 	mov    rax,QWORD PTR [rip+0x1554]        # 0x17e4
  00290:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  00294: 00 	movq   xmm2,QWORD PTR [rip+0x1568]        # 0x1804
  0029c: 00 	movabs rax,0x8000000000000002
  002a6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002aa: 00 	movq   xmm3,QWORD PTR [rip+0x1562]        # 0x1814
  002b2: 00 	movabs rax,0x8000000000000002
  002bc:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002c0: 00 	movq   xmm4,QWORD PTR [rip+0x155c]        # 0x1824
  002c8: 00 	movabs rax,0x8000000000000002
  002d2:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002d6:    	mov    rdi,QWORD PTR [r14-0x50]
  002da: 00 	test   rdi,0x7
  002e1:    	jne    0x30124
  002e7:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002eb:    	jne    0x30124
  002f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffebd6d],0x26        # 0xfffec065
  002f8:    	jne    0x30124
  002fe: 00 	mov    r9,0x0
  00305:    	sub    rsp,0x20
  00309:    	movq   QWORD PTR [rsp],xmm2
  0030e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00314:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031a:    	mov    rdx,rdi
  0031d:    	mov    QWORD PTR [rsp-0x40],rcx
  00322: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0032b:    	lea    rcx,[r14-0x58]
  0032f: 00 	mov    r8,0x3
  00336:    	mov    rsi,QWORD PTR [rbx]
  00339:    	mov    QWORD PTR [rsp-0x18],rsi
  0033e:    	lea    rsi,[rsp-0x18]
  00343:    	mov    QWORD PTR [rbx],rsi
  00346:    	lea    r14,[rsp-0x10]
  0034b:    	mov    QWORD PTR [rsp-0x20],r14
  00350:    	call   0x30133
  00355:    	lea    r14,[rbp-0x8]
  00359:    	mov    QWORD PTR [rbx],r14
  0035c:    	mov    r14,QWORD PTR [rbp-0x10]
  00360:    	movq   xmm2,QWORD PTR [rsp]
  00365:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0036b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00371:    	add    rsp,0x20
  00375:    	test   rax,rax
  00378:    	je     0x30165
  0037e:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00382:    	mov    rdi,QWORD PTR [r14-0x38]
  00386:    	mov    rsi,QWORD PTR [r14-0x48]
  0038a: 00 	test   rdi,0x7
  00391:    	jne    0x30174
  00397:    	cmp    DWORD PTR [rdi+0x4],0xb
  0039b:    	jne    0x30174
  003a1: 00 	test   rsi,0x1
  003a8:    	je     0x30174
  003ae:    	sar    rsi,1
  003b1:    	sub    rsp,0x20
  003b5:    	movq   QWORD PTR [rsp],xmm2
  003ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  003c6:    	mov    rdx,r12
  003c9:    	mov    rcx,QWORD PTR [r14-0x50]
  003cd: 45 	movabs rax,0x5645597e4a90
  003d7:    	call   rax
  003d9:    	movq   xmm2,QWORD PTR [rsp]
  003de:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003e4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ea:    	add    rsp,0x20
  003ee:    	test   rax,rax
  003f1:    	je     0x30183
:00020 %3 = %2.call x()                     [Vec]
  003f7:    	mov    rdi,QWORD PTR [r14-0x40]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x30192
  00408:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0040c:    	jne    0x30192
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc4c],0x26        # 0xfffec065
  00419:    	jne    0x30192
  0041f:    	mov    esi,DWORD PTR [rip+0x140b]        # 0x1830
  00425:    	cmp    esi,0xffffffff
  00428:    	je     0x301a1
  0042e:    	cmp    WORD PTR [rdi+0x2],0x3
  00433:    	jne    0x44c
  00439:    	cmp    esi,0x6
  0043c:    	jge    0x44c
  00442:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00447:    	jmp    0x482
  0044c:    	sub    rsp,0x20
  00450:    	movq   QWORD PTR [rsp],xmm2
  00455:    	movq   QWORD PTR [rsp+0x8],xmm3
  0045b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00461: 45 	movabs rax,0x564559818b00
  0046b:    	call   rax
  0046d:    	movq   xmm2,QWORD PTR [rsp]
  00472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0047e:    	add    rsp,0x20
  00482:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00486: 00 	movq   xmm5,QWORD PTR [rip+0x13a6]        # 0x1834
  0048e: 99 	movabs rax,0xff1999999999999a
  00498:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  0049c:    	mov    rdi,QWORD PTR [r14-0x48]
  004a0: 00 	test   rdi,0x1
  004a7:    	jne    0x301f4
  004ad: 00 	test   rdi,0x2
  004b4:    	je     0x4f0
  004ba:    	xorps  xmm6,xmm6
  004bd: 00 	movabs rax,0x8000000000000002
  004c7:    	cmp    rdi,rax
  004ca:    	je     0x502
  004d0:    	mov    rax,rdi
  004d3:    	sar    rax,0x3f
  004d7:    	add    rax,0x2
  004db:    	and    rdi,0xfffffffffffffffc
  004df:    	or     rdi,rax
  004e2:    	rol    rdi,0x3d
  004e6:    	movq   xmm6,rdi
  004eb:    	jmp    0x502
  004f0:    	call   0xfffe7921
  004f5:    	test   rax,rax
  004f8:    	je     0x301f4
  004fe:    	movq   xmm6,xmm0
  00502:    	ucomisd xmm6,xmm5
  00506:    	jae    0x30322
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  0050c:    	mov    rdi,QWORD PTR [r14-0x40]
  00510: 00 	test   rdi,0x7
  00517:    	jne    0x30203
  0051d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00521:    	jne    0x30203
  00527: 26 	cmp    DWORD PTR [rip+0xfffffffffffebb37],0x26        # 0xfffec065
  0052e:    	jne    0x30203
  00534:    	mov    esi,DWORD PTR [rip+0x1306]        # 0x1840
  0053a:    	cmp    esi,0xffffffff
  0053d:    	je     0x30212
  00543:    	cmp    WORD PTR [rdi+0x2],0x3
  00548:    	jne    0x561
  0054e:    	cmp    esi,0x6
  00551:    	jge    0x561
  00557:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0055c:    	jmp    0x5a3
  00561:    	sub    rsp,0x20
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm4
  00576:    	movq   QWORD PTR [rsp+0x18],xmm5
  0057c: 45 	movabs rax,0x564559818b00
  00586:    	call   rax
  00588:    	movq   xmm2,QWORD PTR [rsp]
  0058d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00593:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00599:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0059f:    	add    rsp,0x20
  005a3:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005a7: 00 	movq   xmm5,QWORD PTR [rip+0x1295]        # 0x1844
  005af: 99 	movabs rax,0xff1999999999999e
  005b9:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  005bd:    	mov    rdi,QWORD PTR [r14-0x48]
  005c1: 00 	test   rdi,0x1
  005c8:    	jne    0x30271
  005ce: 00 	test   rdi,0x2
  005d5:    	je     0x611
  005db:    	xorps  xmm6,xmm6
  005de: 00 	movabs rax,0x8000000000000002
  005e8:    	cmp    rdi,rax
  005eb:    	je     0x623
  005f1:    	mov    rax,rdi
  005f4:    	sar    rax,0x3f
  005f8:    	add    rax,0x2
  005fc:    	and    rdi,0xfffffffffffffffc
  00600:    	or     rdi,rax
  00603:    	rol    rdi,0x3d
  00607:    	movq   xmm6,rdi
  0060c:    	jmp    0x623
  00611:    	call   0xfffe7921
  00616:    	test   rax,rax
  00619:    	je     0x30271
  0061f:    	movq   xmm6,xmm0
  00623:    	ucomisd xmm6,xmm5
  00627:    	jbe    0x3033b
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  0062d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00635:    	mov    rdi,QWORD PTR [r14-0x38]
  00639:    	mov    rsi,QWORD PTR [r14-0x48]
  0063d: 00 	test   rdi,0x7
  00644:    	jne    0x30280
  0064a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0064e:    	jne    0x30280
  00654: 00 	test   rsi,0x1
  0065b:    	je     0x30280
  00661:    	sar    rsi,1
  00664:    	sub    rsp,0x20
  00668:    	movq   QWORD PTR [rsp],xmm2
  0066d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00673:    	movq   QWORD PTR [rsp+0x10],xmm4
  00679:    	movq   QWORD PTR [rsp+0x18],xmm5
  0067f: 45 	movabs rax,0x5645597e4900
  00689:    	call   rax
  0068b:    	movq   xmm2,QWORD PTR [rsp]
  00690:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00696:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0069c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006a2:    	add    rsp,0x20
  006a6:    	test   rax,rax
  006a9:    	je     0x3028f
  006af:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006b3: 00 	movq   xmm5,QWORD PTR [rip+0x1199]        # 0x1854
  006bb: 00 	movabs rax,0xff80000000000002
  006c5:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006c9:    	mov    rdi,QWORD PTR [r14-0x48]
  006cd: 00 	test   rdi,0x7
  006d4:    	jne    0x3029e
  006da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006de:    	jne    0x3029e
  006e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb97a],0x26        # 0xfffec065
  006eb:    	jne    0x3029e
  006f1:    	mov    esi,DWORD PTR [rip+0x1169]        # 0x1860
  006f7:    	cmp    esi,0xffffffff
  006fa:    	je     0x302bc
  00700:    	cmp    WORD PTR [rdi+0x2],0x3
  00705:    	jne    0x722
  0070b:    	cmp    esi,0x6
  0070e:    	jge    0x722
  00714:    	mov    rax,QWORD PTR [r14-0x50]
  00718:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071d:    	jmp    0x771
  00722:    	sub    rsp,0x20
  00726:    	movq   QWORD PTR [rsp],xmm2
  0072b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00731:    	movq   QWORD PTR [rsp+0x10],xmm4
  00737:    	movq   QWORD PTR [rsp+0x18],xmm5
  0073d:    	mov    rdx,QWORD PTR [r14-0x50]
  00741: 45 	movabs rax,0x564559818d80
  0074b:    	call   rax
  0074d:    	movq   xmm2,QWORD PTR [rsp]
  00752:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00758:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0075e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00764:    	add    rsp,0x20
  00768:    	test   rax,rax
  0076b:    	je     0x302ad
:00034 
:00035 br =>:00073
  00771:    	jmp    0x3077a
:00036 %3 = %2.call y()                     [Vec]
  00776:    	mov    rdi,QWORD PTR [r14-0x40]
  0077a: 00 	test   rdi,0x7
  00781:    	jne    0x30354
  00787:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0078b:    	jne    0x30354
  00791: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb8cd],0x26        # 0xfffec065
  00798:    	jne    0x30354
  0079e:    	mov    esi,DWORD PTR [rip+0x10c4]        # 0x1868
  007a4:    	cmp    esi,0xffffffff
  007a7:    	je     0x30363
  007ad:    	cmp    WORD PTR [rdi+0x2],0x3
  007b2:    	jne    0x7cb
  007b8:    	cmp    esi,0x6
  007bb:    	jge    0x7cb
  007c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007c6:    	jmp    0x80d
  007cb:    	sub    rsp,0x20
  007cf:    	movq   QWORD PTR [rsp],xmm2
  007d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  007da:    	movq   QWORD PTR [rsp+0x10],xmm4
  007e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  007e6: 45 	movabs rax,0x564559818b00
  007f0:    	call   rax
  007f2:    	movq   xmm2,QWORD PTR [rsp]
  007f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00803:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00809:    	add    rsp,0x20
  0080d:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00811: 00 	movq   xmm5,QWORD PTR [rip+0x105b]        # 0x1874
  00819: 99 	movabs rax,0xff1999999999999a
  00823:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
  00827:    	mov    rdi,QWORD PTR [r14-0x48]
  0082b: 00 	test   rdi,0x1
  00832:    	jne    0x303c2
  00838: 00 	test   rdi,0x2
  0083f:    	je     0x87b
  00845:    	xorps  xmm6,xmm6
  00848: 00 	movabs rax,0x8000000000000002
  00852:    	cmp    rdi,rax
  00855:    	je     0x88d
  0085b:    	mov    rax,rdi
  0085e:    	sar    rax,0x3f
  00862:    	add    rax,0x2
  00866:    	and    rdi,0xfffffffffffffffc
  0086a:    	or     rdi,rax
  0086d:    	rol    rdi,0x3d
  00871:    	movq   xmm6,rdi
  00876:    	jmp    0x88d
  0087b:    	call   0xfffe7921
  00880:    	test   rax,rax
  00883:    	je     0x303c2
  00889:    	movq   xmm6,xmm0
  0088d:    	ucomisd xmm6,xmm5
  00891:    	jae    0x304f0
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [Vec]
  00897:    	mov    rdi,QWORD PTR [r14-0x40]
  0089b: 00 	test   rdi,0x7
  008a2:    	jne    0x303d1
  008a8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  008ac:    	jne    0x303d1
  008b2: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb7ac],0x26        # 0xfffec065
  008b9:    	jne    0x303d1
  008bf:    	mov    esi,DWORD PTR [rip+0xfbb]        # 0x1880
  008c5:    	cmp    esi,0xffffffff
  008c8:    	je     0x303e0
  008ce:    	cmp    WORD PTR [rdi+0x2],0x3
  008d3:    	jne    0x8ec
  008d9:    	cmp    esi,0x6
  008dc:    	jge    0x8ec
  008e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008e7:    	jmp    0x92e
  008ec:    	sub    rsp,0x20
  008f0:    	movq   QWORD PTR [rsp],xmm2
  008f5:    	movq   QWORD PTR [rsp+0x8],xmm3
  008fb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00901:    	movq   QWORD PTR [rsp+0x18],xmm5
  00907: 45 	movabs rax,0x564559818b00
  00911:    	call   rax
  00913:    	movq   xmm2,QWORD PTR [rsp]
  00918:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0091e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00924:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0092a:    	add    rsp,0x20
  0092e:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  00932: 00 	movq   xmm5,QWORD PTR [rip+0xf4a]        # 0x1884
  0093a: 99 	movabs rax,0xff1999999999999e
  00944:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [Float][Float]
  00948:    	mov    rdi,QWORD PTR [r14-0x48]
  0094c: 00 	test   rdi,0x1
  00953:    	jne    0x3043f
  00959: 00 	test   rdi,0x2
  00960:    	je     0x99c
  00966:    	xorps  xmm6,xmm6
  00969: 00 	movabs rax,0x8000000000000002
  00973:    	cmp    rdi,rax
  00976:    	je     0x9ae
  0097c:    	mov    rax,rdi
  0097f:    	sar    rax,0x3f
  00983:    	add    rax,0x2
  00987:    	and    rdi,0xfffffffffffffffc
  0098b:    	or     rdi,rax
  0098e:    	rol    rdi,0x3d
  00992:    	movq   xmm6,rdi
  00997:    	jmp    0x9ae
  0099c:    	call   0xfffe7921
  009a1:    	test   rax,rax
  009a4:    	je     0x3043f
  009aa:    	movq   xmm6,xmm0
  009ae:    	ucomisd xmm6,xmm5
  009b2:    	jbe    0x30509
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  009b8: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [Array][Integer]
  009c0:    	mov    rdi,QWORD PTR [r14-0x38]
  009c4:    	mov    rsi,QWORD PTR [r14-0x48]
  009c8: 00 	test   rdi,0x7
  009cf:    	jne    0x3044e
  009d5:    	cmp    DWORD PTR [rdi+0x4],0xb
  009d9:    	jne    0x3044e
  009df: 00 	test   rsi,0x1
  009e6:    	je     0x3044e
  009ec:    	sar    rsi,1
  009ef:    	sub    rsp,0x20
  009f3:    	movq   QWORD PTR [rsp],xmm2
  009f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a04:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a0a: 45 	movabs rax,0x5645597e4900
  00a14:    	call   rax
  00a16:    	movq   xmm2,QWORD PTR [rsp]
  00a1b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a21:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a27:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a2d:    	add    rsp,0x20
  00a31:    	test   rax,rax
  00a34:    	je     0x3045d
  00a3a:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a3e: 00 	movq   xmm5,QWORD PTR [rip+0xe4e]        # 0x1894
  00a46: 00 	movabs rax,0xff80000000000002
  00a50:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [Vec]
  00a54:    	mov    rdi,QWORD PTR [r14-0x48]
  00a58: 00 	test   rdi,0x7
  00a5f:    	jne    0x3046c
  00a65:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a69:    	jne    0x3046c
  00a6f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb5ef],0x26        # 0xfffec065
  00a76:    	jne    0x3046c
  00a7c:    	mov    esi,DWORD PTR [rip+0xe1e]        # 0x18a0
  00a82:    	cmp    esi,0xffffffff
  00a85:    	je     0x3048a
  00a8b:    	cmp    WORD PTR [rdi+0x2],0x3
  00a90:    	jne    0xaad
  00a96:    	cmp    esi,0x6
  00a99:    	jge    0xaad
  00a9f:    	mov    rax,QWORD PTR [r14-0x50]
  00aa3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00aa8:    	jmp    0xafc
  00aad:    	sub    rsp,0x20
  00ab1:    	movq   QWORD PTR [rsp],xmm2
  00ab6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00abc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac8:    	mov    rdx,QWORD PTR [r14-0x50]
  00acc: 45 	movabs rax,0x564559818d80
  00ad6:    	call   rax
  00ad8:    	movq   xmm2,QWORD PTR [rsp]
  00add:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ae3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ae9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00aef:    	add    rsp,0x20
  00af3:    	test   rax,rax
  00af6:    	je     0x3047b
:00050 
:00051 br =>:00073
  00afc:    	jmp    0x30793
:00052 %3 = %2.call z()                     [Vec]
  00b01:    	mov    rdi,QWORD PTR [r14-0x40]
  00b05: 00 	test   rdi,0x7
  00b0c:    	jne    0x30522
  00b12:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00b16:    	jne    0x30522
  00b1c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb542],0x26        # 0xfffec065
  00b23:    	jne    0x30522
  00b29:    	mov    esi,DWORD PTR [rip+0xd79]        # 0x18a8
  00b2f:    	cmp    esi,0xffffffff
  00b32:    	je     0x30531
  00b38:    	cmp    WORD PTR [rdi+0x2],0x3
  00b3d:    	jne    0xb56
  00b43:    	cmp    esi,0x6
  00b46:    	jge    0xb56
  00b4c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b51:    	jmp    0xb98
  00b56:    	sub    rsp,0x20
  00b5a:    	movq   QWORD PTR [rsp],xmm2
  00b5f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b65:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b6b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b71: 45 	movabs rax,0x564559818b00
  00b7b:    	call   rax
  00b7d:    	movq   xmm2,QWORD PTR [rsp]
  00b82:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b88:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b8e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b94:    	add    rsp,0x20
  00b98:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00b9c: 00 	movq   xmm5,QWORD PTR [rip+0xd10]        # 0x18b4
  00ba4: 99 	movabs rax,0xff1999999999999a
  00bae:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
  00bb2:    	mov    rdi,QWORD PTR [r14-0x48]
  00bb6: 00 	test   rdi,0x1
  00bbd:    	jne    0x30590
  00bc3: 00 	test   rdi,0x2
  00bca:    	je     0xc06
  00bd0:    	xorps  xmm6,xmm6
  00bd3: 00 	movabs rax,0x8000000000000002
  00bdd:    	cmp    rdi,rax
  00be0:    	je     0xc18
  00be6:    	mov    rax,rdi
  00be9:    	sar    rax,0x3f
  00bed:    	add    rax,0x2
  00bf1:    	and    rdi,0xfffffffffffffffc
  00bf5:    	or     rdi,rax
  00bf8:    	rol    rdi,0x3d
  00bfc:    	movq   xmm6,rdi
  00c01:    	jmp    0xc18
  00c06:    	call   0xfffe7921
  00c0b:    	test   rax,rax
  00c0e:    	je     0x30590
  00c14:    	movq   xmm6,xmm0
  00c18:    	ucomisd xmm6,xmm5
  00c1c:    	jae    0x306be
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [Vec]
  00c22:    	mov    rdi,QWORD PTR [r14-0x40]
  00c26: 00 	test   rdi,0x7
  00c2d:    	jne    0x3059f
  00c33:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c37:    	jne    0x3059f
  00c3d: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb421],0x26        # 0xfffec065
  00c44:    	jne    0x3059f
  00c4a:    	mov    esi,DWORD PTR [rip+0xc70]        # 0x18c0
  00c50:    	cmp    esi,0xffffffff
  00c53:    	je     0x305ae
  00c59:    	cmp    WORD PTR [rdi+0x2],0x3
  00c5e:    	jne    0xc77
  00c64:    	cmp    esi,0x6
  00c67:    	jge    0xc77
  00c6d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c72:    	jmp    0xcb9
  00c77:    	sub    rsp,0x20
  00c7b:    	movq   QWORD PTR [rsp],xmm2
  00c80:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c86:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c8c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c92: 45 	movabs rax,0x564559818b00
  00c9c:    	call   rax
  00c9e:    	movq   xmm2,QWORD PTR [rsp]
  00ca3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ca9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00caf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cb5:    	add    rsp,0x20
  00cb9:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00cbd: 00 	movq   xmm5,QWORD PTR [rip+0xbff]        # 0x18c4
  00cc5: 99 	movabs rax,0xff1999999999999e
  00ccf:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
  00cd3:    	mov    rdi,QWORD PTR [r14-0x48]
  00cd7: 00 	test   rdi,0x1
  00cde:    	jne    0x3060d
  00ce4: 00 	test   rdi,0x2
  00ceb:    	je     0xd27
  00cf1:    	xorps  xmm6,xmm6
  00cf4: 00 	movabs rax,0x8000000000000002
  00cfe:    	cmp    rdi,rax
  00d01:    	je     0xd39
  00d07:    	mov    rax,rdi
  00d0a:    	sar    rax,0x3f
  00d0e:    	add    rax,0x2
  00d12:    	and    rdi,0xfffffffffffffffc
  00d16:    	or     rdi,rax
  00d19:    	rol    rdi,0x3d
  00d1d:    	movq   xmm6,rdi
  00d22:    	jmp    0xd39
  00d27:    	call   0xfffe7921
  00d2c:    	test   rax,rax
  00d2f:    	je     0x3060d
  00d35:    	movq   xmm6,xmm0
  00d39:    	ucomisd xmm6,xmm5
  00d3d:    	jbe    0x306d7
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00d43: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00d4b:    	mov    rdi,QWORD PTR [r14-0x38]
  00d4f:    	mov    rsi,QWORD PTR [r14-0x48]
  00d53: 00 	test   rdi,0x7
  00d5a:    	jne    0x3061c
  00d60:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d64:    	jne    0x3061c
  00d6a: 00 	test   rsi,0x1
  00d71:    	je     0x3061c
  00d77:    	sar    rsi,1
  00d7a:    	sub    rsp,0x20
  00d7e:    	movq   QWORD PTR [rsp],xmm2
  00d83:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d89:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d8f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d95: 45 	movabs rax,0x5645597e4900
  00d9f:    	call   rax
  00da1:    	movq   xmm2,QWORD PTR [rsp]
  00da6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00db8:    	add    rsp,0x20
  00dbc:    	test   rax,rax
  00dbf:    	je     0x3062b
  00dc5:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00dc9: 00 	movq   xmm5,QWORD PTR [rip+0xb03]        # 0x18d4
  00dd1: 00 	movabs rax,0xff80000000000002
  00ddb:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00ddf:    	mov    rdi,QWORD PTR [r14-0x48]
  00de3: 00 	test   rdi,0x7
  00dea:    	jne    0x3063a
  00df0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00df4:    	jne    0x3063a
  00dfa: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb264],0x26        # 0xfffec065
  00e01:    	jne    0x3063a
  00e07:    	mov    esi,DWORD PTR [rip+0xad3]        # 0x18e0
  00e0d:    	cmp    esi,0xffffffff
  00e10:    	je     0x30658
  00e16:    	cmp    WORD PTR [rdi+0x2],0x3
  00e1b:    	jne    0xe38
  00e21:    	cmp    esi,0x6
  00e24:    	jge    0xe38
  00e2a:    	mov    rax,QWORD PTR [r14-0x50]
  00e2e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e33:    	jmp    0xe87
  00e38:    	sub    rsp,0x20
  00e3c:    	movq   QWORD PTR [rsp],xmm2
  00e41:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e47:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e4d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e53:    	mov    rdx,QWORD PTR [r14-0x50]
  00e57: 45 	movabs rax,0x564559818d80
  00e61:    	call   rax
  00e63:    	movq   xmm2,QWORD PTR [rsp]
  00e68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e7a:    	add    rsp,0x20
  00e7e:    	test   rax,rax
  00e81:    	je     0x30649
:00066 
:00067 br =>:00073
  00e87:    	jmp    0x307ac
:00068 %3 = 1: i32
  00e8c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e94:    	sub    rsp,0x20
  00e98:    	movq   QWORD PTR [rsp],xmm2
  00e9d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ea9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eaf:    	mov    rdi,rbx
  00eb2:    	mov    rsi,r12
  00eb5:    	mov    rdx,QWORD PTR [r14-0x38]
  00eb9:    	mov    rcx,QWORD PTR [r14-0x48]
  00ebd: 45 	movabs r8,0x564559eba468
  00ec7: 45 	movabs rax,0x5645597e47d0
  00ed1:    	call   rax
  00ed3:    	movq   xmm2,QWORD PTR [rsp]
  00ed8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ede:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eea:    	add    rsp,0x20
  00eee:    	test   rax,rax
  00ef1:    	je     0x306f0
  00ef7:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00efb: 00 	movq   xmm5,QWORD PTR [rip+0x9e1]        # 0x18e4
  00f03: 00 	movabs rax,0xff80000000000002
  00f0d:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f11: 00 	cmp    DWORD PTR [rip+0x9d4],0x0        # 0x18ec
  00f18:    	jl     0x306ff
  00f1e:    	je     0x3070e
  00f24: 01 	sub    DWORD PTR [rip+0x9c1],0x1        # 0x18ec
  00f2b:    	xor    rdi,rdi
  00f2e:    	jmp    0x306ff
  00f33:    	sub    rsp,0x20
  00f37:    	movq   QWORD PTR [rsp],xmm2
  00f3c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f42:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f48:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4e:    	mov    rdi,QWORD PTR [r14-0x48]
  00f52: 45 	movabs rax,0x564559780ec0
  00f5c:    	call   rax
  00f5e:    	mov    r15d,eax
  00f61: 45 	movabs r13,0x564559eba490
  00f6b:    	cmp    QWORD PTR [r13+0x8],0x0
  00f70:    	je     0x3072a
  00f76:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f7a:    	jne    0x3072a
  00f80:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb0df]        # 0xfffec065
  00f86:    	cmp    DWORD PTR [r13-0x4],eax
  00f8a:    	jne    0x3072a
  00f90: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f99:    	mov    rax,QWORD PTR [r14-0x48]
  00f9d:    	mov    QWORD PTR [rsp-0x40],rax
  00fa2: 00 	mov    rdi,0x1
  00fa9:    	mov    rax,QWORD PTR [r14-0x50]
  00fad:    	mov    QWORD PTR [rsp-0x48],rax
  00fb2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fbb:    	mov    r13,QWORD PTR [r13+0x8]
  00fbf:    	mov    rax,QWORD PTR [r13+0x8]
  00fc3:    	mov    QWORD PTR [rsp-0x30],rax
  00fc8:    	mov    rax,QWORD PTR [r13+0x0]
  00fcc:    	mov    r13,QWORD PTR [r13+0x10]
  00fd0:    	mov    rsi,QWORD PTR [rbx]
  00fd3:    	mov    QWORD PTR [rsp-0x18],rsi
  00fd8:    	lea    rsi,[rsp-0x18]
  00fdd:    	mov    QWORD PTR [rbx],rsi
  00fe0:    	lea    r14,[rsp-0x10]
  00fe5:    	mov    QWORD PTR [rsp-0x20],r14
  00fea:    	call   rax
  00fec:    	lea    r14,[rbp-0x8]
  00ff0:    	mov    QWORD PTR [rbx],r14
  00ff3:    	mov    r14,QWORD PTR [rbp-0x10]
  00ff7:    	movq   xmm2,QWORD PTR [rsp]
  00ffc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01002:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01008:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0100e:    	add    rsp,0x20
  01012:    	test   rax,rax
  01015:    	je     0x3076b
:00072 
  0101b:    	jmp    0x307c5
:00073 %3 = 0: i32
  01020: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  01028: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  01030:    	mov    rdi,QWORD PTR [r14-0x38]
  01034:    	mov    rsi,QWORD PTR [r14-0x50]
  01038: 00 	test   rdi,0x7
  0103f:    	jne    0x307de
  01045:    	cmp    DWORD PTR [rdi+0x4],0xb
  01049:    	jne    0x307de
  0104f: 00 	test   rsi,0x1
  01056:    	je     0x307de
  0105c:    	sar    rsi,1
  0105f:    	sub    rsp,0x20
  01063:    	movq   QWORD PTR [rsp],xmm2
  01068:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01074: 45 	movabs rax,0x5645597e4900
  0107e:    	call   rax
  01080:    	movq   xmm2,QWORD PTR [rsp]
  01085:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0108b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01091:    	add    rsp,0x20
  01095:    	test   rax,rax
  01098:    	je     0x307ed
  0109e:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  010a2: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  010aa:    	mov    rdi,QWORD PTR [r14-0x38]
  010ae:    	mov    rsi,QWORD PTR [r14-0x58]
  010b2: 00 	test   rdi,0x7
  010b9:    	jne    0x307fc
  010bf:    	cmp    DWORD PTR [rdi+0x4],0xb
  010c3:    	jne    0x307fc
  010c9: 00 	test   rsi,0x1
  010d0:    	je     0x307fc
  010d6:    	sar    rsi,1
  010d9:    	sub    rsp,0x10
  010dd:    	movq   QWORD PTR [rsp],xmm3
  010e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e8: 45 	movabs rax,0x5645597e4900
  010f2:    	call   rax
  010f4:    	movq   xmm3,QWORD PTR [rsp]
  010f9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010ff:    	add    rsp,0x10
  01103:    	test   rax,rax
  01106:    	je     0x3080b
  0110c:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  01110:    	mov    rdi,QWORD PTR [r14-0x50]
  01114: 00 	test   rdi,0x7
  0111b:    	jne    0x3081a
  01121:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01125:    	jne    0x3081a
  0112b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaf33],0x26        # 0xfffec065
  01132:    	jne    0x3081a
  01138:    	sub    rsp,0x10
  0113c:    	movq   QWORD PTR [rsp],xmm3
  01141:    	movq   QWORD PTR [rsp+0x8],xmm4
  01147: 00 	cmp    DWORD PTR [rip+0xfffffffffffeaf1b],0x0        # 0xfffec069
  0114e:    	jne    0x30829
  01154: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0115d:    	mov    rax,QWORD PTR [r14-0x50]
  01161:    	mov    QWORD PTR [rsp-0x40],rax
  01166: 00 	mov    rdi,0x1
  0116d:    	mov    rax,QWORD PTR [r14-0x58]
  01171:    	mov    QWORD PTR [rsp-0x48],rax
  01176: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0117f: 08 	movabs rax,0x100080000005d
  01189:    	mov    QWORD PTR [rsp-0x30],rax
  0118e: 45 	movabs r13,0x564559e86470
  01198:    	mov    rsi,QWORD PTR [rbx]
  0119b:    	mov    QWORD PTR [rsp-0x18],rsi
  011a0:    	lea    rsi,[rsp-0x18]
  011a5:    	mov    QWORD PTR [rbx],rsi
  011a8:    	lea    r14,[rsp-0x10]
  011ad:    	mov    QWORD PTR [rsp-0x20],r14
  011b2:    	call   0xffff46b1
  011b7:    	lea    r14,[rbp-0x8]
  011bb:    	mov    QWORD PTR [rbx],r14
  011be:    	mov    r14,QWORD PTR [rbp-0x10]
  011c2:    	movq   xmm3,QWORD PTR [rsp]
  011c7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011cd:    	add    rsp,0x10
  011d1:    	test   rax,rax
  011d4:    	je     0x30840
  011da:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  011de:    	mov    rdi,QWORD PTR [r14-0x38]
  011e2:    	mov    rsi,QWORD PTR [r14-0x48]
  011e6: 00 	test   rdi,0x7
  011ed:    	jne    0x3084f
  011f3:    	cmp    DWORD PTR [rdi+0x4],0xb
  011f7:    	jne    0x3084f
  011fd: 00 	test   rsi,0x1
  01204:    	je     0x3084f
  0120a:    	sar    rsi,1
  0120d:    	sub    rsp,0x10
  01211:    	movq   QWORD PTR [rsp],xmm3
  01216:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121c:    	mov    rdx,r12
  0121f:    	mov    rcx,QWORD PTR [r14-0x50]
  01223: 45 	movabs rax,0x5645597e4a90
  0122d:    	call   rax
  0122f:    	movq   xmm3,QWORD PTR [rsp]
  01234:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123a:    	add    rsp,0x10
  0123e:    	test   rax,rax
  01241:    	je     0x3085e
:00081 %3 = 0: i32
  01247: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  0124f: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  01257:    	mov    rdi,QWORD PTR [r14-0x38]
  0125b:    	mov    rsi,QWORD PTR [r14-0x50]
  0125f: 00 	test   rdi,0x7
  01266:    	jne    0x3086d
  0126c:    	cmp    DWORD PTR [rdi+0x4],0xb
  01270:    	jne    0x3086d
  01276: 00 	test   rsi,0x1
  0127d:    	je     0x3086d
  01283:    	sar    rsi,1
  01286:    	sub    rsp,0x10
  0128a:    	movq   QWORD PTR [rsp],xmm3
  0128f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01295: 45 	movabs rax,0x5645597e4900
  0129f:    	call   rax
  012a1:    	movq   xmm3,QWORD PTR [rsp]
  012a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ac:    	add    rsp,0x10
  012b0:    	test   rax,rax
  012b3:    	je     0x3087c
  012b9:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  012bd:    	mov    rdi,QWORD PTR [r14-0x50]
  012c1: 00 	test   rdi,0x7
  012c8:    	jne    0x3088b
  012ce:    	cmp    DWORD PTR [rdi+0x4],0x2b
  012d2:    	jne    0x3088b
  012d8: 26 	cmp    DWORD PTR [rip+0xfffffffffffead86],0x26        # 0xfffec065
  012df:    	jne    0x3088b
  012e5:    	sub    rsp,0x10
  012e9:    	movq   QWORD PTR [rsp],xmm3
  012ee:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f4: 00 	cmp    DWORD PTR [rip+0xfffffffffffead6e],0x0        # 0xfffec069
  012fb:    	jne    0x3089a
  01301: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0130a:    	mov    rax,QWORD PTR [r14-0x50]
  0130e:    	mov    QWORD PTR [rsp-0x40],rax
  01313: 00 	mov    rdi,0x0
  0131a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01323: 07 	movabs rax,0x1000700000060
  0132d:    	mov    QWORD PTR [rsp-0x30],rax
  01332: 45 	movabs r13,0x564559ea5f60
  0133c:    	mov    rsi,QWORD PTR [rbx]
  0133f:    	mov    QWORD PTR [rsp-0x18],rsi
  01344:    	lea    rsi,[rsp-0x18]
  01349:    	mov    QWORD PTR [rbx],rsi
  0134c:    	lea    r14,[rsp-0x10]
  01351:    	mov    QWORD PTR [rsp-0x20],r14
  01356:    	call   0xfffec917
  0135b:    	lea    r14,[rbp-0x8]
  0135f:    	mov    QWORD PTR [rbx],r14
  01362:    	mov    r14,QWORD PTR [rbp-0x10]
  01366:    	movq   xmm3,QWORD PTR [rsp]
  0136b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01371:    	add    rsp,0x10
  01375:    	test   rax,rax
  01378:    	je     0x308b1
  0137e:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01382:    	mov    rdi,QWORD PTR [r14-0x38]
  01386:    	mov    rsi,QWORD PTR [r14-0x48]
  0138a: 00 	test   rdi,0x7
  01391:    	jne    0x308c0
  01397:    	cmp    DWORD PTR [rdi+0x4],0xb
  0139b:    	jne    0x308c0
  013a1: 00 	test   rsi,0x1
  013a8:    	je     0x308c0
  013ae:    	sar    rsi,1
  013b1:    	sub    rsp,0x10
  013b5:    	movq   QWORD PTR [rsp],xmm3
  013ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c0:    	mov    rdx,r12
  013c3:    	mov    rcx,QWORD PTR [r14-0x50]
  013c7: 45 	movabs rax,0x5645597e4a90
  013d1:    	call   rax
  013d3:    	movq   xmm3,QWORD PTR [rsp]
  013d8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013de:    	add    rsp,0x10
  013e2:    	test   rax,rax
  013e5:    	je     0x308cf
:00087 %3 = 1: i32
  013eb: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  013f3: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  013fb:    	mov    rdi,QWORD PTR [r14-0x38]
  013ff:    	mov    rsi,QWORD PTR [r14-0x50]
  01403: 00 	test   rdi,0x7
  0140a:    	jne    0x308de
  01410:    	cmp    DWORD PTR [rdi+0x4],0xb
  01414:    	jne    0x308de
  0141a: 00 	test   rsi,0x1
  01421:    	je     0x308de
  01427:    	sar    rsi,1
  0142a:    	sub    rsp,0x10
  0142e:    	movq   QWORD PTR [rsp],xmm3
  01433:    	movq   QWORD PTR [rsp+0x8],xmm4
  01439: 45 	movabs rax,0x5645597e4900
  01443:    	call   rax
  01445:    	movq   xmm3,QWORD PTR [rsp]
  0144a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01450:    	add    rsp,0x10
  01454:    	test   rax,rax
  01457:    	je     0x308ed
  0145d:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01461: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  01469:    	mov    rdi,QWORD PTR [r14-0x38]
  0146d:    	mov    rsi,QWORD PTR [r14-0x58]
  01471: 00 	test   rdi,0x7
  01478:    	jne    0x308fc
  0147e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01482:    	jne    0x308fc
  01488: 00 	test   rsi,0x1
  0148f:    	je     0x308fc
  01495:    	sar    rsi,1
  01498:    	sub    rsp,0x10
  0149c:    	movq   QWORD PTR [rsp],xmm3
  014a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  014a7: 45 	movabs rax,0x5645597e4900
  014b1:    	call   rax
  014b3:    	movq   xmm3,QWORD PTR [rsp]
  014b8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014be:    	add    rsp,0x10
  014c2:    	test   rax,rax
  014c5:    	je     0x3090b
  014cb:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  014cf:    	mov    rdi,QWORD PTR [r14-0x50]
  014d3: 00 	test   rdi,0x7
  014da:    	jne    0x3091a
  014e0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  014e4:    	jne    0x3091a
  014ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffeab74],0x26        # 0xfffec065
  014f1:    	jne    0x3091a
  014f7:    	sub    rsp,0x10
  014fb:    	movq   QWORD PTR [rsp],xmm3
  01500:    	movq   QWORD PTR [rsp+0x8],xmm4
  01506: 00 	cmp    DWORD PTR [rip+0xfffffffffffeab5c],0x0        # 0xfffec069
  0150d:    	jne    0x30929
  01513: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0151c:    	mov    rax,QWORD PTR [r14-0x50]
  01520:    	mov    QWORD PTR [rsp-0x40],rax
  01525: 00 	mov    rdi,0x1
  0152c:    	mov    rax,QWORD PTR [r14-0x58]
  01530:    	mov    QWORD PTR [rsp-0x48],rax
  01535: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0153e: 08 	movabs rax,0x100080000005d
  01548:    	mov    QWORD PTR [rsp-0x30],rax
  0154d: 45 	movabs r13,0x564559e86470
  01557:    	mov    rsi,QWORD PTR [rbx]
  0155a:    	mov    QWORD PTR [rsp-0x18],rsi
  0155f:    	lea    rsi,[rsp-0x18]
  01564:    	mov    QWORD PTR [rbx],rsi
  01567:    	lea    r14,[rsp-0x10]
  0156c:    	mov    QWORD PTR [rsp-0x20],r14
  01571:    	call   0xffff46b1
  01576:    	lea    r14,[rbp-0x8]
  0157a:    	mov    QWORD PTR [rbx],r14
  0157d:    	mov    r14,QWORD PTR [rbp-0x10]
  01581:    	movq   xmm3,QWORD PTR [rsp]
  01586:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0158c:    	add    rsp,0x10
  01590:    	test   rax,rax
  01593:    	je     0x30940
  01599:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  0159d:    	mov    rdi,QWORD PTR [r14-0x38]
  015a1:    	mov    rsi,QWORD PTR [r14-0x48]
  015a5: 00 	test   rdi,0x7
  015ac:    	jne    0x3094f
  015b2:    	cmp    DWORD PTR [rdi+0x4],0xb
  015b6:    	jne    0x3094f
  015bc: 00 	test   rsi,0x1
  015c3:    	je     0x3094f
  015c9:    	sar    rsi,1
  015cc:    	sub    rsp,0x10
  015d0:    	movq   QWORD PTR [rsp],xmm3
  015d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  015db:    	mov    rdx,r12
  015de:    	mov    rcx,QWORD PTR [r14-0x50]
  015e2: 45 	movabs rax,0x5645597e4a90
  015ec:    	call   rax
  015ee:    	movq   xmm3,QWORD PTR [rsp]
  015f3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015f9:    	add    rsp,0x10
  015fd:    	test   rax,rax
  01600:    	je     0x3095e
:00095 %3 = 1: i32
  01606: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  0160e: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  01616:    	mov    rdi,QWORD PTR [r14-0x38]
  0161a:    	mov    rsi,QWORD PTR [r14-0x50]
  0161e: 00 	test   rdi,0x7
  01625:    	jne    0x3096d
  0162b:    	cmp    DWORD PTR [rdi+0x4],0xb
  0162f:    	jne    0x3096d
  01635: 00 	test   rsi,0x1
  0163c:    	je     0x3096d
  01642:    	sar    rsi,1
  01645:    	sub    rsp,0x10
  01649:    	movq   QWORD PTR [rsp],xmm3
  0164e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01654: 45 	movabs rax,0x5645597e4900
  0165e:    	call   rax
  01660:    	movq   xmm3,QWORD PTR [rsp]
  01665:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0166b:    	add    rsp,0x10
  0166f:    	test   rax,rax
  01672:    	je     0x3097c
  01678:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  0167c:    	mov    rdi,QWORD PTR [r14-0x50]
  01680: 00 	test   rdi,0x7
  01687:    	jne    0x3098b
  0168d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01691:    	jne    0x3098b
  01697: 26 	cmp    DWORD PTR [rip+0xfffffffffffea9c7],0x26        # 0xfffec065
  0169e:    	jne    0x3098b
  016a4:    	sub    rsp,0x10
  016a8:    	movq   QWORD PTR [rsp],xmm3
  016ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  016b3: 00 	cmp    DWORD PTR [rip+0xfffffffffffea9af],0x0        # 0xfffec069
  016ba:    	jne    0x3099a
  016c0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016c9:    	mov    rax,QWORD PTR [r14-0x50]
  016cd:    	mov    QWORD PTR [rsp-0x40],rax
  016d2: 00 	mov    rdi,0x0
  016d9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016e2: 07 	movabs rax,0x1000700000060
  016ec:    	mov    QWORD PTR [rsp-0x30],rax
  016f1: 45 	movabs r13,0x564559ea5f60
  016fb:    	mov    rsi,QWORD PTR [rbx]
  016fe:    	mov    QWORD PTR [rsp-0x18],rsi
  01703:    	lea    rsi,[rsp-0x18]
  01708:    	mov    QWORD PTR [rbx],rsi
  0170b:    	lea    r14,[rsp-0x10]
  01710:    	mov    QWORD PTR [rsp-0x20],r14
  01715:    	call   0xfffec917
  0171a:    	lea    r14,[rbp-0x8]
  0171e:    	mov    QWORD PTR [rbx],r14
  01721:    	mov    r14,QWORD PTR [rbp-0x10]
  01725:    	movq   xmm3,QWORD PTR [rsp]
  0172a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01730:    	add    rsp,0x10
  01734:    	test   rax,rax
  01737:    	je     0x309b1
  0173d:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01741:    	mov    rdi,QWORD PTR [r14-0x38]
  01745:    	mov    rsi,QWORD PTR [r14-0x48]
  01749: 00 	test   rdi,0x7
  01750:    	jne    0x309c0
  01756:    	cmp    DWORD PTR [rdi+0x4],0xb
  0175a:    	jne    0x309c0
  01760: 00 	test   rsi,0x1
  01767:    	je     0x309c0
  0176d:    	sar    rsi,1
  01770:    	sub    rsp,0x10
  01774:    	movq   QWORD PTR [rsp],xmm3
  01779:    	movq   QWORD PTR [rsp+0x8],xmm4
  0177f:    	mov    rdx,r12
  01782:    	mov    rcx,QWORD PTR [r14-0x50]
  01786: 45 	movabs rax,0x5645597e4a90
  01790:    	call   rax
  01792:    	movq   xmm3,QWORD PTR [rsp]
  01797:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0179d:    	add    rsp,0x10
  017a1:    	test   rax,rax
  017a4:    	je     0x309cf
:00101 ret %4
  017aa:    	mov    rax,QWORD PTR [r14-0x50]
  017ae:    	leave  
  017af:    	ret    
