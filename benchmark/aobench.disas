    Finished release [optimized] target(s) in 0.09s
     Running `target/release/monoruby benchmark/app_aobench.rb`
==> start whole compile: initialize FuncId(90) self_class:Vec start:[00000] bytecode:0x5592e73ac8a0
<== finished compile. elapsed:9.4µs
offset:Pos(19718) code: 105 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x3
  0000e: jne    0x3b3ee
  00014: mov    QWORD PTR [r14-0x50],0x4
  0001c: mov    rdi,QWORD PTR [r14-0x30]
  00020: test   rdi,0x7
  00027: jne    0x3b3fd
  0002d: cmp    DWORD PTR [rdi+0x4],0x2b
  00031: jne    0x3b3fd
:00000 init_method reg:5 arg:3 pos:3 req:3 block:0 stack_offset:6
:00001 @x: Vec[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [r14-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [r14-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  0004f: mov    rdi,QWORD PTR [r14-0x30]
  00053: mov    rax,QWORD PTR [r14-0x48]
  00057: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  0005b: mov    rax,QWORD PTR [r14-0x48]
  0005f: mov    QWORD PTR [r14-0x50],rax
:00005 ret %4
  00063: mov    rax,QWORD PTR [r14-0x50]
  00067: leave  
  00068: ret    
==> start whole compile: vdot FuncId(94) self_class:Vec start:[00000] bytecode:0x5592e73e6700
<== finished compile. elapsed:23.2µs
offset:Pos(21580) code: 1092 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jne    0x3acc6
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    rdi,QWORD PTR [r14-0x30]
  0002b: test   rdi,0x7
  00032: jne    0x3acd5
  00038: cmp    DWORD PTR [rdi+0x4],0x2b
  0003c: jne    0x3acd5
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %2 = @x: Vec[IvarId(0)]
  00042: mov    rdi,QWORD PTR [r14-0x30]
  00046: mov    rax,QWORD PTR [rdi+0x10]
  0004a: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = %1.call x()                     [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x38]
  00052: test   rdi,0x7
  00059: jne    0x3ace4
  0005f: cmp    DWORD PTR [rdi+0x4],0x2b
  00063: jne    0x3ace4
  00069: cmp    DWORD PTR [rip+0xfffffffffffff267],0x26        # 0xfffff2d7
  00070: jne    0x3ace4
  00076: mov    esi,DWORD PTR [rip+0x3cc]        # 0x448
  0007c: cmp    esi,0xffffffff
  0007f: je     0x3acf3
  00085: cmp    WORD PTR [rdi+0x2],0x3
  0008a: jne    0xa3
  00090: cmp    esi,0x6
  00093: jge    0xa3
  00099: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009e: jmp    0xaf
  000a3: movabs rax,0x5592e6dd3800
  000ad: call   rax
  000af: mov    QWORD PTR [r14-0x48],rax
:00003 
:00004 %2 = %2 * %3                         [Float][Float]
  000b3: mov    rdi,QWORD PTR [r14-0x40]
  000b7: test   rdi,0x1
  000be: jne    0x3ad1c
  000c4: test   rdi,0x2
  000cb: je     0x107
  000d1: xorps  xmm2,xmm2
  000d4: movabs rax,0x8000000000000002
  000de: cmp    rdi,rax
  000e1: je     0x119
  000e7: mov    rax,rdi
  000ea: sar    rax,0x3f
  000ee: add    rax,0x2
  000f2: and    rdi,0xfffffffffffffffc
  000f6: or     rdi,rax
  000f9: rol    rdi,0x3d
  000fd: movq   xmm2,rdi
  00102: jmp    0x119
  00107: call   0xffffac31
  0010c: test   rax,rax
  0010f: je     0x3ad1c
  00115: movq   xmm2,xmm0
  00119: mov    rdi,QWORD PTR [r14-0x48]
  0011d: test   rdi,0x1
  00124: jne    0x3ad2b
  0012a: test   rdi,0x2
  00131: je     0x16d
  00137: xorps  xmm3,xmm3
  0013a: movabs rax,0x8000000000000002
  00144: cmp    rdi,rax
  00147: je     0x17f
  0014d: mov    rax,rdi
  00150: sar    rax,0x3f
  00154: add    rax,0x2
  00158: and    rdi,0xfffffffffffffffc
  0015c: or     rdi,rax
  0015f: rol    rdi,0x3d
  00163: movq   xmm3,rdi
  00168: jmp    0x17f
  0016d: call   0xffffac31
  00172: test   rax,rax
  00175: je     0x3ad2b
  0017b: movq   xmm3,xmm0
  0017f: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00183: mov    rdi,QWORD PTR [r14-0x30]
  00187: mov    rax,QWORD PTR [rdi+0x18]
  0018b: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = %1.call y()                     [Vec]
  0018f: mov    rdi,QWORD PTR [r14-0x38]
  00193: test   rdi,0x7
  0019a: jne    0x3ad3a
  001a0: cmp    DWORD PTR [rdi+0x4],0x2b
  001a4: jne    0x3ad3a
  001aa: cmp    DWORD PTR [rip+0xfffffffffffff126],0x26        # 0xfffff2d7
  001b1: jne    0x3ad3a
  001b7: mov    esi,DWORD PTR [rip+0x293]        # 0x450
  001bd: cmp    esi,0xffffffff
  001c0: je     0x3ad56
  001c6: cmp    WORD PTR [rdi+0x2],0x3
  001cb: jne    0x1e4
  001d1: cmp    esi,0x6
  001d4: jge    0x1e4
  001da: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df: jmp    0x202
  001e4: sub    rsp,0x10
  001e8: movq   QWORD PTR [rsp],xmm2
  001ed: movabs rax,0x5592e6dd3800
  001f7: call   rax
  001f9: movq   xmm2,QWORD PTR [rsp]
  001fe: add    rsp,0x10
  00202: mov    QWORD PTR [r14-0x50],rax
:00007 
:00008 %3 = %3 * %4                         [Float][Float]
  00206: mov    rdi,QWORD PTR [r14-0x48]
  0020a: test   rdi,0x1
  00211: jne    0x3ad91
  00217: test   rdi,0x2
  0021e: je     0x25a
  00224: xorps  xmm3,xmm3
  00227: movabs rax,0x8000000000000002
  00231: cmp    rdi,rax
  00234: je     0x26c
  0023a: mov    rax,rdi
  0023d: sar    rax,0x3f
  00241: add    rax,0x2
  00245: and    rdi,0xfffffffffffffffc
  00249: or     rdi,rax
  0024c: rol    rdi,0x3d
  00250: movq   xmm3,rdi
  00255: jmp    0x26c
  0025a: call   0xffffac31
  0025f: test   rax,rax
  00262: je     0x3ad91
  00268: movq   xmm3,xmm0
  0026c: mov    rdi,QWORD PTR [r14-0x50]
  00270: test   rdi,0x1
  00277: jne    0x3adad
  0027d: test   rdi,0x2
  00284: je     0x2c0
  0028a: xorps  xmm4,xmm4
  0028d: movabs rax,0x8000000000000002
  00297: cmp    rdi,rax
  0029a: je     0x2d2
  002a0: mov    rax,rdi
  002a3: sar    rax,0x3f
  002a7: add    rax,0x2
  002ab: and    rdi,0xfffffffffffffffc
  002af: or     rdi,rax
  002b2: rol    rdi,0x3d
  002b6: movq   xmm4,rdi
  002bb: jmp    0x2d2
  002c0: call   0xffffac31
  002c5: test   rax,rax
  002c8: je     0x3adad
  002ce: movq   xmm4,xmm0
  002d2: mulsd  xmm3,xmm4
:00009 %2 = %2 + %3                         [Float][Float]
  002d6: addsd  xmm2,xmm3
:00010 %3 = @z: Vec[IvarId(2)]
  002da: mov    rdi,QWORD PTR [r14-0x30]
  002de: mov    rax,QWORD PTR [rdi+0x20]
  002e2: mov    QWORD PTR [r14-0x48],rax
:00011 %4 = %1.call z()                     [Vec]
  002e6: mov    rdi,QWORD PTR [r14-0x38]
  002ea: test   rdi,0x7
  002f1: jne    0x3adc9
  002f7: cmp    DWORD PTR [rdi+0x4],0x2b
  002fb: jne    0x3adc9
  00301: cmp    DWORD PTR [rip+0xffffffffffffefcf],0x26        # 0xfffff2d7
  00308: jne    0x3adc9
  0030e: mov    esi,DWORD PTR [rip+0x144]        # 0x458
  00314: cmp    esi,0xffffffff
  00317: je     0x3ade5
  0031d: cmp    WORD PTR [rdi+0x2],0x3
  00322: jne    0x33b
  00328: cmp    esi,0x6
  0032b: jge    0x33b
  00331: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00336: jmp    0x359
  0033b: sub    rsp,0x10
  0033f: movq   QWORD PTR [rsp],xmm2
  00344: movabs rax,0x5592e6dd3800
  0034e: call   rax
  00350: movq   xmm2,QWORD PTR [rsp]
  00355: add    rsp,0x10
  00359: mov    QWORD PTR [r14-0x50],rax
:00012 
:00013 %3 = %3 * %4                         [Float][Float]
  0035d: mov    rdi,QWORD PTR [r14-0x48]
  00361: test   rdi,0x1
  00368: jne    0x3ae20
  0036e: test   rdi,0x2
  00375: je     0x3b1
  0037b: xorps  xmm3,xmm3
  0037e: movabs rax,0x8000000000000002
  00388: cmp    rdi,rax
  0038b: je     0x3c3
  00391: mov    rax,rdi
  00394: sar    rax,0x3f
  00398: add    rax,0x2
  0039c: and    rdi,0xfffffffffffffffc
  003a0: or     rdi,rax
  003a3: rol    rdi,0x3d
  003a7: movq   xmm3,rdi
  003ac: jmp    0x3c3
  003b1: call   0xffffac31
  003b6: test   rax,rax
  003b9: je     0x3ae20
  003bf: movq   xmm3,xmm0
  003c3: mov    rdi,QWORD PTR [r14-0x50]
  003c7: test   rdi,0x1
  003ce: jne    0x3ae3c
  003d4: test   rdi,0x2
  003db: je     0x417
  003e1: xorps  xmm4,xmm4
  003e4: movabs rax,0x8000000000000002
  003ee: cmp    rdi,rax
  003f1: je     0x429
  003f7: mov    rax,rdi
  003fa: sar    rax,0x3f
  003fe: add    rax,0x2
  00402: and    rdi,0xfffffffffffffffc
  00406: or     rdi,rax
  00409: rol    rdi,0x3d
  0040d: movq   xmm4,rdi
  00412: jmp    0x429
  00417: call   0xffffac31
  0041c: test   rax,rax
  0041f: je     0x3ae3c
  00425: movq   xmm4,xmm0
  00429: mulsd  xmm3,xmm4
:00014 %2 = %2 + %3                         [Float][Float]
  0042d: addsd  xmm2,xmm3
:00015 ret %2
  00431: movq   xmm0,xmm2
  00435: call   0xffffad55
  0043a: mov    QWORD PTR [r14-0x40],rax
  0043e: mov    rax,QWORD PTR [r14-0x40]
  00442: leave  
  00443: ret    
==> start whole compile: intersect FuncId(98) self_class:Sphere start:[00000] bytecode:0x5592e73e2200
<== finished compile. elapsed:91.6µs
offset:Pos(22838) code: 6320 bytes  data: 114 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3a96e
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x3a97d
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x3a97d
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x3a98c
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x3a98c
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffffed5d],0x26        # 0xffffeded
  00090:    	jne    0x3a98c
  00096:    	mov    esi,DWORD PTR [rip+0x1818]        # 0x18b4
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x3a99b
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 92 	movabs rax,0x5592e6dd3800
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x3a9c4
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x3a9c4
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffffecec],0x26        # 0xffffeded
  00101:    	jne    0x3a9c4
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffffece3],0x0        # 0xffffedf1
  0010e:    	je     0x126
  00114:    	mov    rdi,r12
  00117:    	mov    rsi,QWORD PTR [rbx]
  0011a: 92 	movabs rax,0x5592e6e3ca90
  00124:    	call   rax
  00126: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0012f:    	mov    rax,QWORD PTR [r14-0x78]
  00133:    	mov    QWORD PTR [rsp-0x40],rax
  00138: 00 	mov    rdi,0x1
  0013f:    	mov    rax,QWORD PTR [r14-0x80]
  00143:    	mov    QWORD PTR [rsp-0x48],rax
  00148: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00151: 07 	movabs rax,0x70000005c
  0015b:    	mov    QWORD PTR [rsp-0x30],rax
  00160: 92 	movabs r13,0x5592e73ff180
  0016a:    	mov    rsi,QWORD PTR [rbx]
  0016d:    	mov    QWORD PTR [rsp-0x18],rsi
  00172:    	lea    rsi,[rsp-0x18]
  00177:    	mov    QWORD PTR [rbx],rsi
  0017a:    	lea    r14,[rsp-0x10]
  0017f:    	mov    QWORD PTR [rsp-0x20],r14
  00184:    	call   0xfffffa34
  00189:    	lea    r14,[rbp-0x8]
  0018d:    	mov    QWORD PTR [rbx],r14
  00190:    	mov    r14,QWORD PTR [rbp-0x10]
  00194:    	test   rax,rax
  00197:    	je     0x3a9d3
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x3a9e2
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x31
  001b6:    	jne    0x3a9e2
  001bc: 26 	cmp    DWORD PTR [rip+0xffffffffffffec2a],0x26        # 0xffffeded
  001c3:    	jne    0x3a9e2
  001c9:    	mov    esi,DWORD PTR [rip+0x16ed]        # 0x18bc
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x3a9f1
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: 92 	movabs rax,0x5592e6dd3800
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x3aa1a
  00217:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0021b:    	jne    0x3aa1a
  00221: 26 	cmp    DWORD PTR [rip+0xffffffffffffebc5],0x26        # 0xffffeded
  00228:    	jne    0x3aa1a
  0022e: 00 	cmp    DWORD PTR [rip+0xffffffffffffebbc],0x0        # 0xffffedf1
  00235:    	je     0x24d
  0023b:    	mov    rdi,r12
  0023e:    	mov    rsi,QWORD PTR [rbx]
  00241: 92 	movabs rax,0x5592e6e3ca90
  0024b:    	call   rax
  0024d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00256:    	mov    rax,QWORD PTR [r14-0x48]
  0025a:    	mov    QWORD PTR [rsp-0x40],rax
  0025f: 00 	mov    rdi,0x1
  00266:    	mov    rax,QWORD PTR [r14-0x78]
  0026a:    	mov    QWORD PTR [rsp-0x48],rax
  0026f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00278: 05 	movabs rax,0x100050000005e
  00282:    	mov    QWORD PTR [rsp-0x30],rax
  00287: 92 	movabs r13,0x5592e73e6700
  00291:    	mov    rsi,QWORD PTR [rbx]
  00294:    	mov    QWORD PTR [rsp-0x18],rsi
  00299:    	lea    rsi,[rsp-0x18]
  0029e:    	mov    QWORD PTR [rbx],rsi
  002a1:    	lea    r14,[rsp-0x10]
  002a6:    	mov    QWORD PTR [rsp-0x20],r14
  002ab:    	call   0xfffffac2
  002b0:    	lea    r14,[rbp-0x8]
  002b4:    	mov    QWORD PTR [rbx],r14
  002b7:    	mov    r14,QWORD PTR [rbp-0x10]
  002bb:    	test   rax,rax
  002be:    	je     0x3aa29
  002c4:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002c8:    	mov    rax,QWORD PTR [r14-0x48]
  002cc:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002d0:    	mov    rdi,QWORD PTR [r14-0x48]
  002d4: 00 	test   rdi,0x7
  002db:    	jne    0x3aa38
  002e1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002e5:    	jne    0x3aa38
  002eb: 26 	cmp    DWORD PTR [rip+0xffffffffffffeafb],0x26        # 0xffffeded
  002f2:    	jne    0x3aa38
  002f8: 00 	cmp    DWORD PTR [rip+0xffffffffffffeaf2],0x0        # 0xffffedf1
  002ff:    	je     0x317
  00305:    	mov    rdi,r12
  00308:    	mov    rsi,QWORD PTR [rbx]
  0030b: 92 	movabs rax,0x5592e6e3ca90
  00315:    	call   rax
  00317: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00320:    	mov    rax,QWORD PTR [r14-0x48]
  00324:    	mov    QWORD PTR [rsp-0x40],rax
  00329: 00 	mov    rdi,0x1
  00330:    	mov    rax,QWORD PTR [r14-0x78]
  00334:    	mov    QWORD PTR [rsp-0x48],rax
  00339: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00342: 05 	movabs rax,0x100050000005e
  0034c:    	mov    QWORD PTR [rsp-0x30],rax
  00351: 92 	movabs r13,0x5592e73e6700
  0035b:    	mov    rsi,QWORD PTR [rbx]
  0035e:    	mov    QWORD PTR [rsp-0x18],rsi
  00363:    	lea    rsi,[rsp-0x18]
  00368:    	mov    QWORD PTR [rbx],rsi
  0036b:    	lea    r14,[rsp-0x10]
  00370:    	mov    QWORD PTR [rsp-0x20],r14
  00375:    	call   0xfffffac2
  0037a:    	lea    r14,[rbp-0x8]
  0037e:    	mov    QWORD PTR [rbx],r14
  00381:    	mov    r14,QWORD PTR [rbp-0x10]
  00385:    	test   rax,rax
  00388:    	je     0x3aa47
  0038e:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  00392:    	mov    rdi,QWORD PTR [r14-0x30]
  00396:    	mov    rax,QWORD PTR [rdi+0x18]
  0039a:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  0039e:    	mov    rdi,QWORD PTR [r14-0x30]
  003a2:    	mov    rax,QWORD PTR [rdi+0x18]
  003a6: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  003ad:    	mov    rdi,QWORD PTR [r14-0x80]
  003b1: 00 	test   rdi,0x1
  003b8:    	jne    0x3aa56
  003be: 00 	test   rdi,0x2
  003c5:    	je     0x401
  003cb:    	xorps  xmm2,xmm2
  003ce: 00 	movabs rax,0x8000000000000002
  003d8:    	cmp    rdi,rax
  003db:    	je     0x413
  003e1:    	mov    rax,rdi
  003e4:    	sar    rax,0x3f
  003e8:    	add    rax,0x2
  003ec:    	and    rdi,0xfffffffffffffffc
  003f0:    	or     rdi,rax
  003f3:    	rol    rdi,0x3d
  003f7:    	movq   xmm2,rdi
  003fc:    	jmp    0x413
  00401:    	call   0xffffa747
  00406:    	test   rax,rax
  00409:    	je     0x3aa56
  0040f:    	movq   xmm2,xmm0
  00413: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0041a: 00 	test   rdi,0x1
  00421:    	jne    0x3aa65
  00427: 00 	test   rdi,0x2
  0042e:    	je     0x46a
  00434:    	xorps  xmm3,xmm3
  00437: 00 	movabs rax,0x8000000000000002
  00441:    	cmp    rdi,rax
  00444:    	je     0x47c
  0044a:    	mov    rax,rdi
  0044d:    	sar    rax,0x3f
  00451:    	add    rax,0x2
  00455:    	and    rdi,0xfffffffffffffffc
  00459:    	or     rdi,rax
  0045c:    	rol    rdi,0x3d
  00460:    	movq   xmm3,rdi
  00465:    	jmp    0x47c
  0046a:    	call   0xffffa747
  0046f:    	test   rax,rax
  00472:    	je     0x3aa65
  00478:    	movq   xmm3,xmm0
  0047c:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  00480:    	mov    rdi,QWORD PTR [r14-0x78]
  00484: 00 	test   rdi,0x1
  0048b:    	jne    0x3aa74
  00491: 00 	test   rdi,0x2
  00498:    	je     0x4d4
  0049e:    	xorps  xmm4,xmm4
  004a1: 00 	movabs rax,0x8000000000000002
  004ab:    	cmp    rdi,rax
  004ae:    	je     0x4e6
  004b4:    	mov    rax,rdi
  004b7:    	sar    rax,0x3f
  004bb:    	add    rax,0x2
  004bf:    	and    rdi,0xfffffffffffffffc
  004c3:    	or     rdi,rax
  004c6:    	rol    rdi,0x3d
  004ca:    	movq   xmm4,rdi
  004cf:    	jmp    0x4e6
  004d4:    	call   0xffffa747
  004d9:    	test   rax,rax
  004dc:    	je     0x3aa74
  004e2:    	movq   xmm4,xmm0
  004e6:    	movq   xmm5,xmm4
  004ea:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  004ee:    	mov    rdi,QWORD PTR [r14-0x50]
  004f2: 00 	test   rdi,0x1
  004f9:    	jne    0x3aa90
  004ff: 00 	test   rdi,0x2
  00506:    	je     0x542
  0050c:    	xorps  xmm6,xmm6
  0050f: 00 	movabs rax,0x8000000000000002
  00519:    	cmp    rdi,rax
  0051c:    	je     0x554
  00522:    	mov    rax,rdi
  00525:    	sar    rax,0x3f
  00529:    	add    rax,0x2
  0052d:    	and    rdi,0xfffffffffffffffc
  00531:    	or     rdi,rax
  00534:    	rol    rdi,0x3d
  00538:    	movq   xmm6,rdi
  0053d:    	jmp    0x554
  00542:    	call   0xffffa747
  00547:    	test   rax,rax
  0054a:    	je     0x3aa90
  00550:    	movq   xmm6,xmm0
  00554:    	movq   xmm4,xmm6
  00558:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  0055c:    	movq   xmm7,xmm4
  00560:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  00564: 00 	movq   xmm4,QWORD PTR [rip+0x135e]        # 0x18ca
  0056c: 00 	movabs rax,0x8000000000000002
  00576:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
  0057a:    	ucomisd xmm7,xmm4
  0057e:    	jbe    0x3b3c6
:00021 condnotbr _%9 =>:00087
:00022 %9 = %4
:00023 %9 = neg %9                          [<INVALID>]
  00584: 00 	cmp    DWORD PTR [rip+0x1347],0x0        # 0x18d2
  0058b:    	jl     0x3aab9
  00591:    	je     0x3aafc
  00597: 01 	sub    DWORD PTR [rip+0x1334],0x1        # 0x18d2
  0059e:    	xor    rdi,rdi
  005a1:    	jmp    0x3aab9
  005a6:    	movq   xmm0,xmm6
  005aa:    	call   0xffffa86b
  005af:    	mov    QWORD PTR [r14-0x78],rax
  005b3:    	sub    rsp,0x30
  005b7:    	movq   QWORD PTR [rsp],xmm2
  005bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  005c2:    	movq   QWORD PTR [rsp+0x10],xmm5
  005c8:    	movq   QWORD PTR [rsp+0x18],xmm6
  005ce:    	movq   QWORD PTR [rsp+0x20],xmm7
  005d4:    	mov    rdi,QWORD PTR [r14-0x78]
  005d8:    	mov    rdx,rdi
  005db:    	mov    rdi,rbx
  005de:    	mov    rsi,r12
  005e1: 92 	movabs rax,0x5592e6de73c0
  005eb:    	call   rax
  005ed:    	movq   xmm2,QWORD PTR [rsp]
  005f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005f8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005fe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00604:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0060a:    	add    rsp,0x30
  0060e:    	test   rax,rax
  00611:    	je     0x3ab18
  00617:    	mov    QWORD PTR [r14-0x78],rax
:00024 %10 = const[Math]                    [<INVALID>]
  0061b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe7d8]        # 0xffffedfa
  00622: 00 	cmp    rax,QWORD PTR [rip+0x12c1]        # 0x18ea
  00629:    	jne    0x3ab27
  0062f: 00 	mov    rax,QWORD PTR [rip+0x12a4]        # 0x18da
  00636:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.call sqrt(%11; 1)          [<INVALID>]
  0063a:    	movq   xmm0,xmm7
  0063e:    	call   0xffffa86b
  00643: ff 	mov    QWORD PTR [r14-0x88],rax
  0064a:    	movq   xmm0,xmm5
  0064e:    	call   0xffffa86b
  00653:    	mov    QWORD PTR [r14-0x58],rax
  00657:    	movq   xmm0,xmm7
  0065b:    	call   0xffffa86b
  00660:    	mov    QWORD PTR [r14-0x60],rax
  00664:    	sub    rsp,0x10
  00668:    	movq   QWORD PTR [rsp],xmm7
  0066d:    	mov    rdi,QWORD PTR [r14-0x80]
  00671: 92 	movabs rax,0x5592e6de1bb0
  0067b:    	call   rax
  0067d:    	mov    r15d,eax
  00680: 92 	movabs r13,0x5592e73e23b0
  0068a:    	cmp    QWORD PTR [r13+0x8],0x0
  0068f:    	je     0x3aba8
  00695:    	cmp    r15d,DWORD PTR [r13-0x8]
  00699:    	jne    0x3aba8
  0069f:    	mov    eax,DWORD PTR [rip+0xffffffffffffe748]        # 0xffffeded
  006a5:    	cmp    DWORD PTR [r13-0x4],eax
  006a9:    	jne    0x3aba8
  006af: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006b8:    	mov    rax,QWORD PTR [r14-0x80]
  006bc:    	mov    QWORD PTR [rsp-0x40],rax
  006c1: 00 	mov    rdi,0x1
  006c8: ff 	mov    rax,QWORD PTR [r14-0x88]
  006cf:    	mov    QWORD PTR [rsp-0x48],rax
  006d4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006dd:    	mov    r13,QWORD PTR [r13+0x8]
  006e1:    	mov    rax,QWORD PTR [r13+0x8]
  006e5:    	mov    QWORD PTR [rsp-0x30],rax
  006ea:    	mov    rax,QWORD PTR [r13+0x0]
  006ee:    	mov    r13,QWORD PTR [r13+0x10]
  006f2:    	mov    rsi,QWORD PTR [rbx]
  006f5:    	mov    QWORD PTR [rsp-0x18],rsi
  006fa:    	lea    rsi,[rsp-0x18]
  006ff:    	mov    QWORD PTR [rbx],rsi
  00702:    	lea    r14,[rsp-0x10]
  00707:    	mov    QWORD PTR [rsp-0x20],r14
  0070c:    	call   rax
  0070e:    	lea    r14,[rbp-0x8]
  00712:    	mov    QWORD PTR [rbx],r14
  00715:    	mov    r14,QWORD PTR [rbp-0x10]
  00719:    	movq   xmm7,QWORD PTR [rsp]
  0071e:    	add    rsp,0x10
  00722:    	test   rax,rax
  00725:    	je     0x3abe9
  0072b:    	mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  0072f:    	mov    rdi,QWORD PTR [r14-0x78]
  00733:    	mov    rsi,QWORD PTR [r14-0x80]
  00737:    	sub    rsp,0x10
  0073b:    	movq   QWORD PTR [rsp],xmm7
  00740:    	mov    rdx,rdi
  00743:    	mov    rcx,rsi
  00746:    	mov    rdi,rbx
  00749:    	mov    rsi,r12
  0074c: 92 	movabs rax,0x5592e6de9380
  00756:    	call   rax
  00758:    	movq   xmm7,QWORD PTR [rsp]
  0075d:    	add    rsp,0x10
  00761:    	test   rax,rax
  00764:    	je     0x3abf8
  0076a:    	mov    QWORD PTR [r14-0x68],rax
:00029 %9 = literal[0.0]
  0076e: 00 	movq   xmm2,QWORD PTR [rip+0x1184]        # 0x18fa
  00776: 00 	movabs rax,0x8000000000000002
  00780:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
  00784:    	mov    rdi,QWORD PTR [r14-0x68]
  00788:    	mov    rsi,QWORD PTR [r14-0x78]
  0078c:    	sub    rsp,0x10
  00790:    	movq   QWORD PTR [rsp],xmm7
  00795:    	mov    rdx,rdi
  00798:    	mov    rcx,rsi
  0079b:    	mov    rdi,rbx
  0079e:    	mov    rsi,r12
  007a1: 92 	movabs rax,0x5592e6dec740
  007ab:    	call   rax
  007ad:    	movq   xmm7,QWORD PTR [rsp]
  007b2:    	add    rsp,0x10
  007b6:    	test   rax,rax
  007b9:    	je     0x3ac07
  007bf:    	or     rax,0x10
  007c3:    	cmp    rax,0x14
  007c7:    	je     0x3b37b
:00031 condnotbr _%9 =>:00086
:00032 %9 = %2.call t()                     [<INVALID>]
  007cd:    	sub    rsp,0x10
  007d1:    	movq   QWORD PTR [rsp],xmm7
  007d6:    	mov    rdi,QWORD PTR [r14-0x40]
  007da: 92 	movabs rax,0x5592e6de1bb0
  007e4:    	call   rax
  007e6:    	mov    r15d,eax
  007e9: 92 	movabs r13,0x5592e73e2410
  007f3:    	cmp    QWORD PTR [r13+0x8],0x0
  007f8:    	je     0x3ac16
  007fe:    	cmp    r15d,DWORD PTR [r13-0x8]
  00802:    	jne    0x3ac16
  00808:    	mov    eax,DWORD PTR [rip+0xffffffffffffe5df]        # 0xffffeded
  0080e:    	cmp    DWORD PTR [r13-0x4],eax
  00812:    	jne    0x3ac16
  00818: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00821:    	mov    rax,QWORD PTR [r14-0x40]
  00825:    	mov    QWORD PTR [rsp-0x40],rax
  0082a: 00 	mov    rdi,0x0
  00831: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0083a:    	mov    r13,QWORD PTR [r13+0x8]
  0083e:    	mov    rax,QWORD PTR [r13+0x8]
  00842:    	mov    QWORD PTR [rsp-0x30],rax
  00847:    	mov    rax,QWORD PTR [r13+0x0]
  0084b:    	mov    r13,QWORD PTR [r13+0x10]
  0084f:    	mov    rsi,QWORD PTR [rbx]
  00852:    	mov    QWORD PTR [rsp-0x18],rsi
  00857:    	lea    rsi,[rsp-0x18]
  0085c:    	mov    QWORD PTR [rbx],rsi
  0085f:    	lea    r14,[rsp-0x10]
  00864:    	mov    QWORD PTR [rsp-0x20],r14
  00869:    	call   rax
  0086b:    	lea    r14,[rbp-0x8]
  0086f:    	mov    QWORD PTR [rbx],r14
  00872:    	mov    r14,QWORD PTR [rbp-0x10]
  00876:    	movq   xmm7,QWORD PTR [rsp]
  0087b:    	add    rsp,0x10
  0087f:    	test   rax,rax
  00882:    	je     0x3ac57
  00888:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
  0088c:    	mov    rdi,QWORD PTR [r14-0x68]
  00890:    	mov    rsi,QWORD PTR [r14-0x78]
  00894:    	sub    rsp,0x10
  00898:    	movq   QWORD PTR [rsp],xmm7
  0089d:    	mov    rdx,rdi
  008a0:    	mov    rcx,rsi
  008a3:    	mov    rdi,rbx
  008a6:    	mov    rsi,r12
  008a9: 92 	movabs rax,0x5592e6ded4c0
  008b3:    	call   rax
  008b5:    	movq   xmm7,QWORD PTR [rsp]
  008ba:    	add    rsp,0x10
  008be:    	test   rax,rax
  008c1:    	je     0x3ac66
  008c7:    	or     rax,0x10
  008cb:    	cmp    rax,0x14
  008cf:    	je     0x3b394
:00035 condnotbr _%9 =>:00086
:00036 _ = %2.call t=(%7; 1)                [<INVALID>]
  008d5:    	sub    rsp,0x10
  008d9:    	movq   QWORD PTR [rsp],xmm7
  008de:    	mov    rdi,QWORD PTR [r14-0x40]
  008e2: 92 	movabs rax,0x5592e6de1bb0
  008ec:    	call   rax
  008ee:    	mov    r15d,eax
  008f1: 92 	movabs r13,0x5592e73e2450
  008fb:    	cmp    QWORD PTR [r13+0x8],0x0
  00900:    	je     0x3ac75
  00906:    	cmp    r15d,DWORD PTR [r13-0x8]
  0090a:    	jne    0x3ac75
  00910:    	mov    eax,DWORD PTR [rip+0xffffffffffffe4d7]        # 0xffffeded
  00916:    	cmp    DWORD PTR [r13-0x4],eax
  0091a:    	jne    0x3ac75
  00920: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00929:    	mov    rax,QWORD PTR [r14-0x40]
  0092d:    	mov    QWORD PTR [rsp-0x40],rax
  00932: 00 	mov    rdi,0x1
  00939:    	mov    rax,QWORD PTR [r14-0x68]
  0093d:    	mov    QWORD PTR [rsp-0x48],rax
  00942: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0094b:    	mov    r13,QWORD PTR [r13+0x8]
  0094f:    	mov    rax,QWORD PTR [r13+0x8]
  00953:    	mov    QWORD PTR [rsp-0x30],rax
  00958:    	mov    rax,QWORD PTR [r13+0x0]
  0095c:    	mov    r13,QWORD PTR [r13+0x10]
  00960:    	mov    rsi,QWORD PTR [rbx]
  00963:    	mov    QWORD PTR [rsp-0x18],rsi
  00968:    	lea    rsi,[rsp-0x18]
  0096d:    	mov    QWORD PTR [rbx],rsi
  00970:    	lea    r14,[rsp-0x10]
  00975:    	mov    QWORD PTR [rsp-0x20],r14
  0097a:    	call   rax
  0097c:    	lea    r14,[rbp-0x8]
  00980:    	mov    QWORD PTR [rbx],r14
  00983:    	mov    r14,QWORD PTR [rbp-0x10]
  00987:    	movq   xmm7,QWORD PTR [rsp]
  0098c:    	add    rsp,0x10
  00990:    	test   rax,rax
  00993:    	je     0x3acb6
:00037 
:00038 %9 = literal[true]
  00999: 00 	mov    rax,0x1c
  009a0:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [<INVALID>]
  009a4:    	sub    rsp,0x10
  009a8:    	movq   QWORD PTR [rsp],xmm7
  009ad:    	mov    rdi,QWORD PTR [r14-0x40]
  009b1: 92 	movabs rax,0x5592e6de1bb0
  009bb:    	call   rax
  009bd:    	mov    r15d,eax
  009c0: 92 	movabs r13,0x5592e73e2480
  009ca:    	cmp    QWORD PTR [r13+0x8],0x0
  009cf:    	je     0x3acc5
  009d5:    	cmp    r15d,DWORD PTR [r13-0x8]
  009d9:    	jne    0x3acc5
  009df:    	mov    eax,DWORD PTR [rip+0xffffffffffffe408]        # 0xffffeded
  009e5:    	cmp    DWORD PTR [r13-0x4],eax
  009e9:    	jne    0x3acc5
  009ef: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009f8:    	mov    rax,QWORD PTR [r14-0x40]
  009fc:    	mov    QWORD PTR [rsp-0x40],rax
  00a01: 00 	mov    rdi,0x1
  00a08:    	mov    rax,QWORD PTR [r14-0x78]
  00a0c:    	mov    QWORD PTR [rsp-0x48],rax
  00a11: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a1a:    	mov    r13,QWORD PTR [r13+0x8]
  00a1e:    	mov    rax,QWORD PTR [r13+0x8]
  00a22:    	mov    QWORD PTR [rsp-0x30],rax
  00a27:    	mov    rax,QWORD PTR [r13+0x0]
  00a2b:    	mov    r13,QWORD PTR [r13+0x10]
  00a2f:    	mov    rsi,QWORD PTR [rbx]
  00a32:    	mov    QWORD PTR [rsp-0x18],rsi
  00a37:    	lea    rsi,[rsp-0x18]
  00a3c:    	mov    QWORD PTR [rbx],rsi
  00a3f:    	lea    r14,[rsp-0x10]
  00a44:    	mov    QWORD PTR [rsp-0x20],r14
  00a49:    	call   rax
  00a4b:    	lea    r14,[rbp-0x8]
  00a4f:    	mov    QWORD PTR [rbx],r14
  00a52:    	mov    r14,QWORD PTR [rbp-0x10]
  00a56:    	movq   xmm7,QWORD PTR [rsp]
  00a5b:    	add    rsp,0x10
  00a5f:    	test   rax,rax
  00a62:    	je     0x3ad06
:00040 
:00041 %9 = const[Vec]                      [<INVALID>]
  00a68: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe38b]        # 0xffffedfa
  00a6f: 00 	cmp    rax,QWORD PTR [rip+0xea4]        # 0x191a
  00a76:    	jne    0x3ad15
  00a7c: 00 	mov    rax,QWORD PTR [rip+0xe87]        # 0x190a
  00a83:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [<INVALID>]
  00a87:    	sub    rsp,0x10
  00a8b:    	movq   QWORD PTR [rsp],xmm7
  00a90:    	mov    rdi,QWORD PTR [r14-0x38]
  00a94: 92 	movabs rax,0x5592e6de1bb0
  00a9e:    	call   rax
  00aa0:    	mov    r15d,eax
  00aa3: 92 	movabs r13,0x5592e73e24b0
  00aad:    	cmp    QWORD PTR [r13+0x8],0x0
  00ab2:    	je     0x3ad72
  00ab8:    	cmp    r15d,DWORD PTR [r13-0x8]
  00abc:    	jne    0x3ad72
  00ac2:    	mov    eax,DWORD PTR [rip+0xffffffffffffe325]        # 0xffffeded
  00ac8:    	cmp    DWORD PTR [r13-0x4],eax
  00acc:    	jne    0x3ad72
  00ad2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00adb:    	mov    rax,QWORD PTR [r14-0x38]
  00adf:    	mov    QWORD PTR [rsp-0x40],rax
  00ae4: 00 	mov    rdi,0x0
  00aeb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00af4:    	mov    r13,QWORD PTR [r13+0x8]
  00af8:    	mov    rax,QWORD PTR [r13+0x8]
  00afc:    	mov    QWORD PTR [rsp-0x30],rax
  00b01:    	mov    rax,QWORD PTR [r13+0x0]
  00b05:    	mov    r13,QWORD PTR [r13+0x10]
  00b09:    	mov    rsi,QWORD PTR [rbx]
  00b0c:    	mov    QWORD PTR [rsp-0x18],rsi
  00b11:    	lea    rsi,[rsp-0x18]
  00b16:    	mov    QWORD PTR [rbx],rsi
  00b19:    	lea    r14,[rsp-0x10]
  00b1e:    	mov    QWORD PTR [rsp-0x20],r14
  00b23:    	call   rax
  00b25:    	lea    r14,[rbp-0x8]
  00b29:    	mov    QWORD PTR [rbx],r14
  00b2c:    	mov    r14,QWORD PTR [rbp-0x10]
  00b30:    	movq   xmm7,QWORD PTR [rsp]
  00b35:    	add    rsp,0x10
  00b39:    	test   rax,rax
  00b3c:    	je     0x3adb3
  00b42:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [<INVALID>]
  00b46:    	sub    rsp,0x10
  00b4a:    	movq   QWORD PTR [rsp],xmm7
  00b4f:    	mov    rdi,QWORD PTR [r14-0x80]
  00b53: 92 	movabs rax,0x5592e6de1bb0
  00b5d:    	call   rax
  00b5f:    	mov    r15d,eax
  00b62: 92 	movabs r13,0x5592e73e24d0
  00b6c:    	cmp    QWORD PTR [r13+0x8],0x0
  00b71:    	je     0x3adc2
  00b77:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b7b:    	jne    0x3adc2
  00b81:    	mov    eax,DWORD PTR [rip+0xffffffffffffe266]        # 0xffffeded
  00b87:    	cmp    DWORD PTR [r13-0x4],eax
  00b8b:    	jne    0x3adc2
  00b91: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b9a:    	mov    rax,QWORD PTR [r14-0x80]
  00b9e:    	mov    QWORD PTR [rsp-0x40],rax
  00ba3: 00 	mov    rdi,0x0
  00baa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00bb3:    	mov    r13,QWORD PTR [r13+0x8]
  00bb7:    	mov    rax,QWORD PTR [r13+0x8]
  00bbb:    	mov    QWORD PTR [rsp-0x30],rax
  00bc0:    	mov    rax,QWORD PTR [r13+0x0]
  00bc4:    	mov    r13,QWORD PTR [r13+0x10]
  00bc8:    	mov    rsi,QWORD PTR [rbx]
  00bcb:    	mov    QWORD PTR [rsp-0x18],rsi
  00bd0:    	lea    rsi,[rsp-0x18]
  00bd5:    	mov    QWORD PTR [rbx],rsi
  00bd8:    	lea    r14,[rsp-0x10]
  00bdd:    	mov    QWORD PTR [rsp-0x20],r14
  00be2:    	call   rax
  00be4:    	lea    r14,[rbp-0x8]
  00be8:    	mov    QWORD PTR [rbx],r14
  00beb:    	mov    r14,QWORD PTR [rbp-0x10]
  00bef:    	movq   xmm7,QWORD PTR [rsp]
  00bf4:    	add    rsp,0x10
  00bf8:    	test   rax,rax
  00bfb:    	je     0x3ae03
  00c01:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [<INVALID>]
  00c05:    	mov    rdi,QWORD PTR [r14-0x38]
  00c09: 92 	movabs rax,0x5592e6de1bb0
  00c13:    	call   rax
  00c15:    	mov    r15d,eax
  00c18: 92 	movabs r13,0x5592e73e24f0
  00c22:    	cmp    QWORD PTR [r13+0x8],0x0
  00c27:    	je     0x3ae12
  00c2d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c31:    	jne    0x3ae12
  00c37:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1b0]        # 0xffffeded
  00c3d:    	cmp    DWORD PTR [r13-0x4],eax
  00c41:    	jne    0x3ae12
  00c47: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c50:    	mov    rax,QWORD PTR [r14-0x38]
  00c54:    	mov    QWORD PTR [rsp-0x40],rax
  00c59: 00 	mov    rdi,0x0
  00c60: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c69:    	mov    r13,QWORD PTR [r13+0x8]
  00c6d:    	mov    rax,QWORD PTR [r13+0x8]
  00c71:    	mov    QWORD PTR [rsp-0x30],rax
  00c76:    	mov    rax,QWORD PTR [r13+0x0]
  00c7a:    	mov    r13,QWORD PTR [r13+0x10]
  00c7e:    	mov    rsi,QWORD PTR [rbx]
  00c81:    	mov    QWORD PTR [rsp-0x18],rsi
  00c86:    	lea    rsi,[rsp-0x18]
  00c8b:    	mov    QWORD PTR [rbx],rsi
  00c8e:    	lea    r14,[rsp-0x10]
  00c93:    	mov    QWORD PTR [rsp-0x20],r14
  00c98:    	call   rax
  00c9a:    	lea    r14,[rbp-0x8]
  00c9e:    	mov    QWORD PTR [rbx],r14
  00ca1:    	mov    r14,QWORD PTR [rbp-0x10]
  00ca5:    	test   rax,rax
  00ca8:    	je     0x3ae53
  00cae: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [<INVALID>]
  00cb5: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00cbc: 92 	movabs rax,0x5592e6de1bb0
  00cc6:    	call   rax
  00cc8:    	mov    r15d,eax
  00ccb: 92 	movabs r13,0x5592e73e2510
  00cd5:    	cmp    QWORD PTR [r13+0x8],0x0
  00cda:    	je     0x3ae62
  00ce0:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ce4:    	jne    0x3ae62
  00cea:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0fd]        # 0xffffeded
  00cf0:    	cmp    DWORD PTR [r13-0x4],eax
  00cf4:    	jne    0x3ae62
  00cfa: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d03: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d0a:    	mov    QWORD PTR [rsp-0x40],rax
  00d0f: 00 	mov    rdi,0x0
  00d16: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d1f:    	mov    r13,QWORD PTR [r13+0x8]
  00d23:    	mov    rax,QWORD PTR [r13+0x8]
  00d27:    	mov    QWORD PTR [rsp-0x30],rax
  00d2c:    	mov    rax,QWORD PTR [r13+0x0]
  00d30:    	mov    r13,QWORD PTR [r13+0x10]
  00d34:    	mov    rsi,QWORD PTR [rbx]
  00d37:    	mov    QWORD PTR [rsp-0x18],rsi
  00d3c:    	lea    rsi,[rsp-0x18]
  00d41:    	mov    QWORD PTR [rbx],rsi
  00d44:    	lea    r14,[rsp-0x10]
  00d49:    	mov    QWORD PTR [rsp-0x20],r14
  00d4e:    	call   rax
  00d50:    	lea    r14,[rbp-0x8]
  00d54:    	mov    QWORD PTR [rbx],r14
  00d57:    	mov    r14,QWORD PTR [rbp-0x10]
  00d5b:    	test   rax,rax
  00d5e:    	je     0x3aea6
  00d64: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [<INVALID>][<INVALID>]
  00d6b: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00d72:    	mov    rsi,QWORD PTR [r14-0x68]
  00d76:    	mov    rdx,rdi
  00d79:    	mov    rcx,rsi
  00d7c:    	mov    rdi,rbx
  00d7f:    	mov    rsi,r12
  00d82: 92 	movabs rax,0x5592e6dea2e0
  00d8c:    	call   rax
  00d8e:    	test   rax,rax
  00d91:    	je     0x3aeb5
  00d97: ff 	mov    QWORD PTR [r14-0x88],rax
:00051 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00d9e:    	mov    rdi,QWORD PTR [r14-0x80]
  00da2: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00da9:    	mov    rdx,rdi
  00dac:    	mov    rcx,rsi
  00daf:    	mov    rdi,rbx
  00db2:    	mov    rsi,r12
  00db5: 92 	movabs rax,0x5592e6de8460
  00dbf:    	call   rax
  00dc1:    	test   rax,rax
  00dc4:    	je     0x3aec4
  00dca:    	mov    QWORD PTR [r14-0x80],rax
:00052 %11 = %1.call org()                  [<INVALID>]
  00dce:    	mov    rdi,QWORD PTR [r14-0x38]
  00dd2: 92 	movabs rax,0x5592e6de1bb0
  00ddc:    	call   rax
  00dde:    	mov    r15d,eax
  00de1: 92 	movabs r13,0x5592e73e2550
  00deb:    	cmp    QWORD PTR [r13+0x8],0x0
  00df0:    	je     0x3aed3
  00df6:    	cmp    r15d,DWORD PTR [r13-0x8]
  00dfa:    	jne    0x3aed3
  00e00:    	mov    eax,DWORD PTR [rip+0xffffffffffffdfe7]        # 0xffffeded
  00e06:    	cmp    DWORD PTR [r13-0x4],eax
  00e0a:    	jne    0x3aed3
  00e10: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e19:    	mov    rax,QWORD PTR [r14-0x38]
  00e1d:    	mov    QWORD PTR [rsp-0x40],rax
  00e22: 00 	mov    rdi,0x0
  00e29: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e32:    	mov    r13,QWORD PTR [r13+0x8]
  00e36:    	mov    rax,QWORD PTR [r13+0x8]
  00e3a:    	mov    QWORD PTR [rsp-0x30],rax
  00e3f:    	mov    rax,QWORD PTR [r13+0x0]
  00e43:    	mov    r13,QWORD PTR [r13+0x10]
  00e47:    	mov    rsi,QWORD PTR [rbx]
  00e4a:    	mov    QWORD PTR [rsp-0x18],rsi
  00e4f:    	lea    rsi,[rsp-0x18]
  00e54:    	mov    QWORD PTR [rbx],rsi
  00e57:    	lea    r14,[rsp-0x10]
  00e5c:    	mov    QWORD PTR [rsp-0x20],r14
  00e61:    	call   rax
  00e63:    	lea    r14,[rbp-0x8]
  00e67:    	mov    QWORD PTR [rbx],r14
  00e6a:    	mov    r14,QWORD PTR [rbp-0x10]
  00e6e:    	test   rax,rax
  00e71:    	je     0x3af14
  00e77: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [<INVALID>]
  00e7e: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e85: 92 	movabs rax,0x5592e6de1bb0
  00e8f:    	call   rax
  00e91:    	mov    r15d,eax
  00e94: 92 	movabs r13,0x5592e73e2570
  00e9e:    	cmp    QWORD PTR [r13+0x8],0x0
  00ea3:    	je     0x3af23
  00ea9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ead:    	jne    0x3af23
  00eb3:    	mov    eax,DWORD PTR [rip+0xffffffffffffdf34]        # 0xffffeded
  00eb9:    	cmp    DWORD PTR [r13-0x4],eax
  00ebd:    	jne    0x3af23
  00ec3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ecc: ff 	mov    rax,QWORD PTR [r14-0x88]
  00ed3:    	mov    QWORD PTR [rsp-0x40],rax
  00ed8: 00 	mov    rdi,0x0
  00edf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ee8:    	mov    r13,QWORD PTR [r13+0x8]
  00eec:    	mov    rax,QWORD PTR [r13+0x8]
  00ef0:    	mov    QWORD PTR [rsp-0x30],rax
  00ef5:    	mov    rax,QWORD PTR [r13+0x0]
  00ef9:    	mov    r13,QWORD PTR [r13+0x10]
  00efd:    	mov    rsi,QWORD PTR [rbx]
  00f00:    	mov    QWORD PTR [rsp-0x18],rsi
  00f05:    	lea    rsi,[rsp-0x18]
  00f0a:    	mov    QWORD PTR [rbx],rsi
  00f0d:    	lea    r14,[rsp-0x10]
  00f12:    	mov    QWORD PTR [rsp-0x20],r14
  00f17:    	call   rax
  00f19:    	lea    r14,[rbp-0x8]
  00f1d:    	mov    QWORD PTR [rbx],r14
  00f20:    	mov    r14,QWORD PTR [rbp-0x10]
  00f24:    	test   rax,rax
  00f27:    	je     0x3af67
  00f2d: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [<INVALID>]
  00f34:    	mov    rdi,QWORD PTR [r14-0x38]
  00f38: 92 	movabs rax,0x5592e6de1bb0
  00f42:    	call   rax
  00f44:    	mov    r15d,eax
  00f47: 92 	movabs r13,0x5592e73e2590
  00f51:    	cmp    QWORD PTR [r13+0x8],0x0
  00f56:    	je     0x3af76
  00f5c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f60:    	jne    0x3af76
  00f66:    	mov    eax,DWORD PTR [rip+0xffffffffffffde81]        # 0xffffeded
  00f6c:    	cmp    DWORD PTR [r13-0x4],eax
  00f70:    	jne    0x3af76
  00f76: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f7f:    	mov    rax,QWORD PTR [r14-0x38]
  00f83:    	mov    QWORD PTR [rsp-0x40],rax
  00f88: 00 	mov    rdi,0x0
  00f8f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f98:    	mov    r13,QWORD PTR [r13+0x8]
  00f9c:    	mov    rax,QWORD PTR [r13+0x8]
  00fa0:    	mov    QWORD PTR [rsp-0x30],rax
  00fa5:    	mov    rax,QWORD PTR [r13+0x0]
  00fa9:    	mov    r13,QWORD PTR [r13+0x10]
  00fad:    	mov    rsi,QWORD PTR [rbx]
  00fb0:    	mov    QWORD PTR [rsp-0x18],rsi
  00fb5:    	lea    rsi,[rsp-0x18]
  00fba:    	mov    QWORD PTR [rbx],rsi
  00fbd:    	lea    r14,[rsp-0x10]
  00fc2:    	mov    QWORD PTR [rsp-0x20],r14
  00fc7:    	call   rax
  00fc9:    	lea    r14,[rbp-0x8]
  00fcd:    	mov    QWORD PTR [rbx],r14
  00fd0:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd4:    	test   rax,rax
  00fd7:    	je     0x3afb7
  00fdd: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [<INVALID>]
  00fe4: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00feb: 92 	movabs rax,0x5592e6de1bb0
  00ff5:    	call   rax
  00ff7:    	mov    r15d,eax
  00ffa: 92 	movabs r13,0x5592e73e25b0
  01004:    	cmp    QWORD PTR [r13+0x8],0x0
  01009:    	je     0x3afc6
  0100f:    	cmp    r15d,DWORD PTR [r13-0x8]
  01013:    	jne    0x3afc6
  01019:    	mov    eax,DWORD PTR [rip+0xffffffffffffddce]        # 0xffffeded
  0101f:    	cmp    DWORD PTR [r13-0x4],eax
  01023:    	jne    0x3afc6
  01029: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01032: ff 	mov    rax,QWORD PTR [r14-0x90]
  01039:    	mov    QWORD PTR [rsp-0x40],rax
  0103e: 00 	mov    rdi,0x0
  01045: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0104e:    	mov    r13,QWORD PTR [r13+0x8]
  01052:    	mov    rax,QWORD PTR [r13+0x8]
  01056:    	mov    QWORD PTR [rsp-0x30],rax
  0105b:    	mov    rax,QWORD PTR [r13+0x0]
  0105f:    	mov    r13,QWORD PTR [r13+0x10]
  01063:    	mov    rsi,QWORD PTR [rbx]
  01066:    	mov    QWORD PTR [rsp-0x18],rsi
  0106b:    	lea    rsi,[rsp-0x18]
  01070:    	mov    QWORD PTR [rbx],rsi
  01073:    	lea    r14,[rsp-0x10]
  01078:    	mov    QWORD PTR [rsp-0x20],r14
  0107d:    	call   rax
  0107f:    	lea    r14,[rbp-0x8]
  01083:    	mov    QWORD PTR [rbx],r14
  01086:    	mov    r14,QWORD PTR [rbp-0x10]
  0108a:    	test   rax,rax
  0108d:    	je     0x3b00a
  01093: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  0109a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  010a1:    	mov    rsi,QWORD PTR [r14-0x68]
  010a5:    	mov    rdx,rdi
  010a8:    	mov    rcx,rsi
  010ab:    	mov    rdi,rbx
  010ae:    	mov    rsi,r12
  010b1: 92 	movabs rax,0x5592e6dea2e0
  010bb:    	call   rax
  010bd:    	test   rax,rax
  010c0:    	je     0x3b019
  010c6: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  010cd: ff 	mov    rdi,QWORD PTR [r14-0x88]
  010d4: ff 	mov    rsi,QWORD PTR [r14-0x90]
  010db:    	mov    rdx,rdi
  010de:    	mov    rcx,rsi
  010e1:    	mov    rdi,rbx
  010e4:    	mov    rsi,r12
  010e7: 92 	movabs rax,0x5592e6de8460
  010f1:    	call   rax
  010f3:    	test   rax,rax
  010f6:    	je     0x3b028
  010fc: ff 	mov    QWORD PTR [r14-0x88],rax
:00062 %12 = %1.call org()                  [<INVALID>]
  01103:    	mov    rdi,QWORD PTR [r14-0x38]
  01107: 92 	movabs rax,0x5592e6de1bb0
  01111:    	call   rax
  01113:    	mov    r15d,eax
  01116: 92 	movabs r13,0x5592e73e25f0
  01120:    	cmp    QWORD PTR [r13+0x8],0x0
  01125:    	je     0x3b037
  0112b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0112f:    	jne    0x3b037
  01135:    	mov    eax,DWORD PTR [rip+0xffffffffffffdcb2]        # 0xffffeded
  0113b:    	cmp    DWORD PTR [r13-0x4],eax
  0113f:    	jne    0x3b037
  01145: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0114e:    	mov    rax,QWORD PTR [r14-0x38]
  01152:    	mov    QWORD PTR [rsp-0x40],rax
  01157: 00 	mov    rdi,0x0
  0115e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01167:    	mov    r13,QWORD PTR [r13+0x8]
  0116b:    	mov    rax,QWORD PTR [r13+0x8]
  0116f:    	mov    QWORD PTR [rsp-0x30],rax
  01174:    	mov    rax,QWORD PTR [r13+0x0]
  01178:    	mov    r13,QWORD PTR [r13+0x10]
  0117c:    	mov    rsi,QWORD PTR [rbx]
  0117f:    	mov    QWORD PTR [rsp-0x18],rsi
  01184:    	lea    rsi,[rsp-0x18]
  01189:    	mov    QWORD PTR [rbx],rsi
  0118c:    	lea    r14,[rsp-0x10]
  01191:    	mov    QWORD PTR [rsp-0x20],r14
  01196:    	call   rax
  01198:    	lea    r14,[rbp-0x8]
  0119c:    	mov    QWORD PTR [rbx],r14
  0119f:    	mov    r14,QWORD PTR [rbp-0x10]
  011a3:    	test   rax,rax
  011a6:    	je     0x3b078
  011ac: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [<INVALID>]
  011b3: ff 	mov    rdi,QWORD PTR [r14-0x90]
  011ba: 92 	movabs rax,0x5592e6de1bb0
  011c4:    	call   rax
  011c6:    	mov    r15d,eax
  011c9: 92 	movabs r13,0x5592e73e2610
  011d3:    	cmp    QWORD PTR [r13+0x8],0x0
  011d8:    	je     0x3b087
  011de:    	cmp    r15d,DWORD PTR [r13-0x8]
  011e2:    	jne    0x3b087
  011e8:    	mov    eax,DWORD PTR [rip+0xffffffffffffdbff]        # 0xffffeded
  011ee:    	cmp    DWORD PTR [r13-0x4],eax
  011f2:    	jne    0x3b087
  011f8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01201: ff 	mov    rax,QWORD PTR [r14-0x90]
  01208:    	mov    QWORD PTR [rsp-0x40],rax
  0120d: 00 	mov    rdi,0x0
  01214: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0121d:    	mov    r13,QWORD PTR [r13+0x8]
  01221:    	mov    rax,QWORD PTR [r13+0x8]
  01225:    	mov    QWORD PTR [rsp-0x30],rax
  0122a:    	mov    rax,QWORD PTR [r13+0x0]
  0122e:    	mov    r13,QWORD PTR [r13+0x10]
  01232:    	mov    rsi,QWORD PTR [rbx]
  01235:    	mov    QWORD PTR [rsp-0x18],rsi
  0123a:    	lea    rsi,[rsp-0x18]
  0123f:    	mov    QWORD PTR [rbx],rsi
  01242:    	lea    r14,[rsp-0x10]
  01247:    	mov    QWORD PTR [rsp-0x20],r14
  0124c:    	call   rax
  0124e:    	lea    r14,[rbp-0x8]
  01252:    	mov    QWORD PTR [rbx],r14
  01255:    	mov    r14,QWORD PTR [rbp-0x10]
  01259:    	test   rax,rax
  0125c:    	je     0x3b0cb
  01262: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [<INVALID>]
  01269:    	mov    rdi,QWORD PTR [r14-0x38]
  0126d: 92 	movabs rax,0x5592e6de1bb0
  01277:    	call   rax
  01279:    	mov    r15d,eax
  0127c: 92 	movabs r13,0x5592e73e2630
  01286:    	cmp    QWORD PTR [r13+0x8],0x0
  0128b:    	je     0x3b0da
  01291:    	cmp    r15d,DWORD PTR [r13-0x8]
  01295:    	jne    0x3b0da
  0129b:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb4c]        # 0xffffeded
  012a1:    	cmp    DWORD PTR [r13-0x4],eax
  012a5:    	jne    0x3b0da
  012ab: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012b4:    	mov    rax,QWORD PTR [r14-0x38]
  012b8:    	mov    QWORD PTR [rsp-0x40],rax
  012bd: 00 	mov    rdi,0x0
  012c4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012cd:    	mov    r13,QWORD PTR [r13+0x8]
  012d1:    	mov    rax,QWORD PTR [r13+0x8]
  012d5:    	mov    QWORD PTR [rsp-0x30],rax
  012da:    	mov    rax,QWORD PTR [r13+0x0]
  012de:    	mov    r13,QWORD PTR [r13+0x10]
  012e2:    	mov    rsi,QWORD PTR [rbx]
  012e5:    	mov    QWORD PTR [rsp-0x18],rsi
  012ea:    	lea    rsi,[rsp-0x18]
  012ef:    	mov    QWORD PTR [rbx],rsi
  012f2:    	lea    r14,[rsp-0x10]
  012f7:    	mov    QWORD PTR [rsp-0x20],r14
  012fc:    	call   rax
  012fe:    	lea    r14,[rbp-0x8]
  01302:    	mov    QWORD PTR [rbx],r14
  01305:    	mov    r14,QWORD PTR [rbp-0x10]
  01309:    	test   rax,rax
  0130c:    	je     0x3b11b
  01312: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [<INVALID>]
  01319: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01320: 92 	movabs rax,0x5592e6de1bb0
  0132a:    	call   rax
  0132c:    	mov    r15d,eax
  0132f: 92 	movabs r13,0x5592e73e2650
  01339:    	cmp    QWORD PTR [r13+0x8],0x0
  0133e:    	je     0x3b12a
  01344:    	cmp    r15d,DWORD PTR [r13-0x8]
  01348:    	jne    0x3b12a
  0134e:    	mov    eax,DWORD PTR [rip+0xffffffffffffda99]        # 0xffffeded
  01354:    	cmp    DWORD PTR [r13-0x4],eax
  01358:    	jne    0x3b12a
  0135e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01367: ff 	mov    rax,QWORD PTR [r14-0x98]
  0136e:    	mov    QWORD PTR [rsp-0x40],rax
  01373: 00 	mov    rdi,0x0
  0137a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01383:    	mov    r13,QWORD PTR [r13+0x8]
  01387:    	mov    rax,QWORD PTR [r13+0x8]
  0138b:    	mov    QWORD PTR [rsp-0x30],rax
  01390:    	mov    rax,QWORD PTR [r13+0x0]
  01394:    	mov    r13,QWORD PTR [r13+0x10]
  01398:    	mov    rsi,QWORD PTR [rbx]
  0139b:    	mov    QWORD PTR [rsp-0x18],rsi
  013a0:    	lea    rsi,[rsp-0x18]
  013a5:    	mov    QWORD PTR [rbx],rsi
  013a8:    	lea    r14,[rsp-0x10]
  013ad:    	mov    QWORD PTR [rsp-0x20],r14
  013b2:    	call   rax
  013b4:    	lea    r14,[rbp-0x8]
  013b8:    	mov    QWORD PTR [rbx],r14
  013bb:    	mov    r14,QWORD PTR [rbp-0x10]
  013bf:    	test   rax,rax
  013c2:    	je     0x3b16e
  013c8: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  013cf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  013d6:    	mov    rsi,QWORD PTR [r14-0x68]
  013da:    	mov    rdx,rdi
  013dd:    	mov    rcx,rsi
  013e0:    	mov    rdi,rbx
  013e3:    	mov    rsi,r12
  013e6: 92 	movabs rax,0x5592e6dea2e0
  013f0:    	call   rax
  013f2:    	test   rax,rax
  013f5:    	je     0x3b17d
  013fb: ff 	mov    QWORD PTR [r14-0x98],rax
:00071 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01402: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01409: ff 	mov    rsi,QWORD PTR [r14-0x98]
  01410:    	mov    rdx,rdi
  01413:    	mov    rcx,rsi
  01416:    	mov    rdi,rbx
  01419:    	mov    rsi,r12
  0141c: 92 	movabs rax,0x5592e6de8460
  01426:    	call   rax
  01428:    	test   rax,rax
  0142b:    	je     0x3b18c
  01431: ff 	mov    QWORD PTR [r14-0x90],rax
:00072 %9 = %9.call new(%10; 3)             [<INVALID>]
  01438:    	mov    rdi,QWORD PTR [r14-0x78]
  0143c: 92 	movabs rax,0x5592e6de1bb0
  01446:    	call   rax
  01448:    	mov    r15d,eax
  0144b: 92 	movabs r13,0x5592e73e2690
  01455:    	cmp    QWORD PTR [r13+0x8],0x0
  0145a:    	je     0x3b19b
  01460:    	cmp    r15d,DWORD PTR [r13-0x8]
  01464:    	jne    0x3b19b
  0146a:    	mov    eax,DWORD PTR [rip+0xffffffffffffd97d]        # 0xffffeded
  01470:    	cmp    DWORD PTR [r13-0x4],eax
  01474:    	jne    0x3b19b
  0147a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01483:    	mov    rax,QWORD PTR [r14-0x78]
  01487:    	mov    QWORD PTR [rsp-0x40],rax
  0148c: 00 	mov    rdi,0x3
  01493:    	mov    rax,QWORD PTR [r14-0x80]
  01497:    	mov    QWORD PTR [rsp-0x48],rax
  0149c: ff 	mov    rax,QWORD PTR [r14-0x88]
  014a3:    	mov    QWORD PTR [rsp-0x50],rax
  014a8: ff 	mov    rax,QWORD PTR [r14-0x90]
  014af:    	mov    QWORD PTR [rsp-0x58],rax
  014b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014bd:    	mov    r13,QWORD PTR [r13+0x8]
  014c1:    	mov    rax,QWORD PTR [r13+0x8]
  014c5:    	mov    QWORD PTR [rsp-0x30],rax
  014ca:    	mov    rax,QWORD PTR [r13+0x0]
  014ce:    	mov    r13,QWORD PTR [r13+0x10]
  014d2:    	mov    rsi,QWORD PTR [rbx]
  014d5:    	mov    QWORD PTR [rsp-0x18],rsi
  014da:    	lea    rsi,[rsp-0x18]
  014df:    	mov    QWORD PTR [rbx],rsi
  014e2:    	lea    r14,[rsp-0x10]
  014e7:    	mov    QWORD PTR [rsp-0x20],r14
  014ec:    	call   rax
  014ee:    	lea    r14,[rbp-0x8]
  014f2:    	mov    QWORD PTR [rbx],r14
  014f5:    	mov    r14,QWORD PTR [rbp-0x10]
  014f9:    	test   rax,rax
  014fc:    	je     0x3b1dc
  01502:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [<INVALID>]
  01506:    	mov    rdi,QWORD PTR [r14-0x40]
  0150a: 92 	movabs rax,0x5592e6de1bb0
  01514:    	call   rax
  01516:    	mov    r15d,eax
  01519: 92 	movabs r13,0x5592e73e26b0
  01523:    	cmp    QWORD PTR [r13+0x8],0x0
  01528:    	je     0x3b1eb
  0152e:    	cmp    r15d,DWORD PTR [r13-0x8]
  01532:    	jne    0x3b1eb
  01538:    	mov    eax,DWORD PTR [rip+0xffffffffffffd8af]        # 0xffffeded
  0153e:    	cmp    DWORD PTR [r13-0x4],eax
  01542:    	jne    0x3b1eb
  01548: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01551:    	mov    rax,QWORD PTR [r14-0x40]
  01555:    	mov    QWORD PTR [rsp-0x40],rax
  0155a: 00 	mov    rdi,0x1
  01561:    	mov    rax,QWORD PTR [r14-0x78]
  01565:    	mov    QWORD PTR [rsp-0x48],rax
  0156a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01573:    	mov    r13,QWORD PTR [r13+0x8]
  01577:    	mov    rax,QWORD PTR [r13+0x8]
  0157b:    	mov    QWORD PTR [rsp-0x30],rax
  01580:    	mov    rax,QWORD PTR [r13+0x0]
  01584:    	mov    r13,QWORD PTR [r13+0x10]
  01588:    	mov    rsi,QWORD PTR [rbx]
  0158b:    	mov    QWORD PTR [rsp-0x18],rsi
  01590:    	lea    rsi,[rsp-0x18]
  01595:    	mov    QWORD PTR [rbx],rsi
  01598:    	lea    r14,[rsp-0x10]
  0159d:    	mov    QWORD PTR [rsp-0x20],r14
  015a2:    	call   rax
  015a4:    	lea    r14,[rbp-0x8]
  015a8:    	mov    QWORD PTR [rbx],r14
  015ab:    	mov    r14,QWORD PTR [rbp-0x10]
  015af:    	test   rax,rax
  015b2:    	je     0x3b22c
:00075 
:00076 %9 = %2.call pl()                    [<INVALID>]
  015b8:    	mov    rdi,QWORD PTR [r14-0x40]
  015bc: 92 	movabs rax,0x5592e6de1bb0
  015c6:    	call   rax
  015c8:    	mov    r15d,eax
  015cb: 92 	movabs r13,0x5592e73e26d0
  015d5:    	cmp    QWORD PTR [r13+0x8],0x0
  015da:    	je     0x3b23b
  015e0:    	cmp    r15d,DWORD PTR [r13-0x8]
  015e4:    	jne    0x3b23b
  015ea:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7fd]        # 0xffffeded
  015f0:    	cmp    DWORD PTR [r13-0x4],eax
  015f4:    	jne    0x3b23b
  015fa: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01603:    	mov    rax,QWORD PTR [r14-0x40]
  01607:    	mov    QWORD PTR [rsp-0x40],rax
  0160c: 00 	mov    rdi,0x0
  01613: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0161c:    	mov    r13,QWORD PTR [r13+0x8]
  01620:    	mov    rax,QWORD PTR [r13+0x8]
  01624:    	mov    QWORD PTR [rsp-0x30],rax
  01629:    	mov    rax,QWORD PTR [r13+0x0]
  0162d:    	mov    r13,QWORD PTR [r13+0x10]
  01631:    	mov    rsi,QWORD PTR [rbx]
  01634:    	mov    QWORD PTR [rsp-0x18],rsi
  01639:    	lea    rsi,[rsp-0x18]
  0163e:    	mov    QWORD PTR [rbx],rsi
  01641:    	lea    r14,[rsp-0x10]
  01646:    	mov    QWORD PTR [rsp-0x20],r14
  0164b:    	call   rax
  0164d:    	lea    r14,[rbp-0x8]
  01651:    	mov    QWORD PTR [rbx],r14
  01654:    	mov    r14,QWORD PTR [rbp-0x10]
  01658:    	test   rax,rax
  0165b:    	je     0x3b27c
  01661:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: <INVALID>[IvarId(0)]
  01665:    	mov    rdi,QWORD PTR [r14-0x30]
  01669: 00 	mov    rsi,0xa5
  01670:    	mov    rdx,r12
  01673: 92 	movabs rax,0x5592e6e492e0
  0167d:    	call   rax
  0167f:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  01683:    	mov    rdi,QWORD PTR [r14-0x78]
  01687: 92 	movabs rax,0x5592e6de1bb0
  01691:    	call   rax
  01693:    	mov    r15d,eax
  01696: 92 	movabs r13,0x5592e73e2700
  016a0:    	cmp    QWORD PTR [r13+0x8],0x0
  016a5:    	je     0x3b28b
  016ab:    	cmp    r15d,DWORD PTR [r13-0x8]
  016af:    	jne    0x3b28b
  016b5:    	mov    eax,DWORD PTR [rip+0xffffffffffffd732]        # 0xffffeded
  016bb:    	cmp    DWORD PTR [r13-0x4],eax
  016bf:    	jne    0x3b28b
  016c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016ce:    	mov    rax,QWORD PTR [r14-0x78]
  016d2:    	mov    QWORD PTR [rsp-0x40],rax
  016d7: 00 	mov    rdi,0x1
  016de:    	mov    rax,QWORD PTR [r14-0x80]
  016e2:    	mov    QWORD PTR [rsp-0x48],rax
  016e7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016f0:    	mov    r13,QWORD PTR [r13+0x8]
  016f4:    	mov    rax,QWORD PTR [r13+0x8]
  016f8:    	mov    QWORD PTR [rsp-0x30],rax
  016fd:    	mov    rax,QWORD PTR [r13+0x0]
  01701:    	mov    r13,QWORD PTR [r13+0x10]
  01705:    	mov    rsi,QWORD PTR [rbx]
  01708:    	mov    QWORD PTR [rsp-0x18],rsi
  0170d:    	lea    rsi,[rsp-0x18]
  01712:    	mov    QWORD PTR [rbx],rsi
  01715:    	lea    r14,[rsp-0x10]
  0171a:    	mov    QWORD PTR [rsp-0x20],r14
  0171f:    	call   rax
  01721:    	lea    r14,[rbp-0x8]
  01725:    	mov    QWORD PTR [rbx],r14
  01728:    	mov    r14,QWORD PTR [rbp-0x10]
  0172c:    	test   rax,rax
  0172f:    	je     0x3b2cc
  01735:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [<INVALID>]
  01739:    	mov    rdi,QWORD PTR [r14-0x70]
  0173d: 92 	movabs rax,0x5592e6de1bb0
  01747:    	call   rax
  01749:    	mov    r15d,eax
  0174c: 92 	movabs r13,0x5592e73e2720
  01756:    	cmp    QWORD PTR [r13+0x8],0x0
  0175b:    	je     0x3b2db
  01761:    	cmp    r15d,DWORD PTR [r13-0x8]
  01765:    	jne    0x3b2db
  0176b:    	mov    eax,DWORD PTR [rip+0xffffffffffffd67c]        # 0xffffeded
  01771:    	cmp    DWORD PTR [r13-0x4],eax
  01775:    	jne    0x3b2db
  0177b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01784:    	mov    rax,QWORD PTR [r14-0x70]
  01788:    	mov    QWORD PTR [rsp-0x40],rax
  0178d: 00 	mov    rdi,0x0
  01794: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0179d:    	mov    r13,QWORD PTR [r13+0x8]
  017a1:    	mov    rax,QWORD PTR [r13+0x8]
  017a5:    	mov    QWORD PTR [rsp-0x30],rax
  017aa:    	mov    rax,QWORD PTR [r13+0x0]
  017ae:    	mov    r13,QWORD PTR [r13+0x10]
  017b2:    	mov    rsi,QWORD PTR [rbx]
  017b5:    	mov    QWORD PTR [rsp-0x18],rsi
  017ba:    	lea    rsi,[rsp-0x18]
  017bf:    	mov    QWORD PTR [rbx],rsi
  017c2:    	lea    r14,[rsp-0x10]
  017c7:    	mov    QWORD PTR [rsp-0x20],r14
  017cc:    	call   rax
  017ce:    	lea    r14,[rbp-0x8]
  017d2:    	mov    QWORD PTR [rbx],r14
  017d5:    	mov    r14,QWORD PTR [rbp-0x10]
  017d9:    	test   rax,rax
  017dc:    	je     0x3b31c
  017e2:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [<INVALID>]
  017e6:    	mov    rdi,QWORD PTR [r14-0x40]
  017ea: 92 	movabs rax,0x5592e6de1bb0
  017f4:    	call   rax
  017f6:    	mov    r15d,eax
  017f9: 92 	movabs r13,0x5592e73e2740
  01803:    	cmp    QWORD PTR [r13+0x8],0x0
  01808:    	je     0x3b32b
  0180e:    	cmp    r15d,DWORD PTR [r13-0x8]
  01812:    	jne    0x3b32b
  01818:    	mov    eax,DWORD PTR [rip+0xffffffffffffd5cf]        # 0xffffeded
  0181e:    	cmp    DWORD PTR [r13-0x4],eax
  01822:    	jne    0x3b32b
  01828: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01831:    	mov    rax,QWORD PTR [r14-0x40]
  01835:    	mov    QWORD PTR [rsp-0x40],rax
  0183a: 00 	mov    rdi,0x1
  01841:    	mov    rax,QWORD PTR [r14-0x78]
  01845:    	mov    QWORD PTR [rsp-0x48],rax
  0184a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01853:    	mov    r13,QWORD PTR [r13+0x8]
  01857:    	mov    rax,QWORD PTR [r13+0x8]
  0185b:    	mov    QWORD PTR [rsp-0x30],rax
  01860:    	mov    rax,QWORD PTR [r13+0x0]
  01864:    	mov    r13,QWORD PTR [r13+0x10]
  01868:    	mov    rsi,QWORD PTR [rbx]
  0186b:    	mov    QWORD PTR [rsp-0x18],rsi
  01870:    	lea    rsi,[rsp-0x18]
  01875:    	mov    QWORD PTR [rbx],rsi
  01878:    	lea    r14,[rsp-0x10]
  0187d:    	mov    QWORD PTR [rsp-0x20],r14
  01882:    	call   rax
  01884:    	lea    r14,[rbp-0x8]
  01888:    	mov    QWORD PTR [rbx],r14
  0188b:    	mov    r14,QWORD PTR [rbp-0x10]
  0188f:    	test   rax,rax
  01892:    	je     0x3b36c
:00084 
:00085 br =>:00086
  01898:    	jmp    0x3b3ad
:00086 br =>:00087
  0189d:    	jmp    0x3b406
:00087 %9 = nil
  018a2: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  018aa:    	mov    rax,QWORD PTR [r14-0x78]
  018ae:    	leave  
  018af:    	ret    
==> start whole compile: vsub FuncId(92) self_class:Vec start:[00000] bytecode:0x5592e73ff180
<== finished compile. elapsed:39.1µs
offset:Pos(29272) code: 1345 bytes  data: 55 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x39afd
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    rdi,QWORD PTR [r14-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x39b0c
  00040: cmp    DWORD PTR [rdi+0x4],0x2b
  00044: jne    0x39b0c
:00000 init_method reg:7 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffffd487]        # 0xffffd4d8
  00051: cmp    rax,QWORD PTR [rip+0x500]        # 0x558
  00058: jne    0x39b1b
  0005e: mov    rax,QWORD PTR [rip+0x4e3]        # 0x548
  00065: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [r14-0x30]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call x()                     [Vec]
  00075: mov    rdi,QWORD PTR [r14-0x38]
  00079: test   rdi,0x7
  00080: jne    0x39b66
  00086: cmp    DWORD PTR [rdi+0x4],0x2b
  0008a: jne    0x39b66
  00090: cmp    DWORD PTR [rip+0xffffffffffffd434],0x26        # 0xffffd4cb
  00097: jne    0x39b66
  0009d: mov    esi,DWORD PTR [rip+0x4c1]        # 0x564
  000a3: cmp    esi,0xffffffff
  000a6: je     0x39b75
  000ac: cmp    WORD PTR [rdi+0x2],0x3
  000b1: jne    0xca
  000b7: cmp    esi,0x6
  000ba: jge    0xca
  000c0: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c5: jmp    0xd6
  000ca: movabs rax,0x5592e6dd3800
  000d4: call   rax
  000d6: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 - %4                         [Float][Float]
  000da: mov    rdi,QWORD PTR [r14-0x48]
  000de: test   rdi,0x1
  000e5: jne    0x39b9e
  000eb: test   rdi,0x2
  000f2: je     0x12e
  000f8: xorps  xmm2,xmm2
  000fb: movabs rax,0x8000000000000002
  00105: cmp    rdi,rax
  00108: je     0x140
  0010e: mov    rax,rdi
  00111: sar    rax,0x3f
  00115: add    rax,0x2
  00119: and    rdi,0xfffffffffffffffc
  0011d: or     rdi,rax
  00120: rol    rdi,0x3d
  00124: movq   xmm2,rdi
  00129: jmp    0x140
  0012e: call   0xffff8e25
  00133: test   rax,rax
  00136: je     0x39b9e
  0013c: movq   xmm2,xmm0
  00140: mov    rdi,QWORD PTR [r14-0x50]
  00144: test   rdi,0x1
  0014b: jne    0x39bad
  00151: test   rdi,0x2
  00158: je     0x194
  0015e: xorps  xmm3,xmm3
  00161: movabs rax,0x8000000000000002
  0016b: cmp    rdi,rax
  0016e: je     0x1a6
  00174: mov    rax,rdi
  00177: sar    rax,0x3f
  0017b: add    rax,0x2
  0017f: and    rdi,0xfffffffffffffffc
  00183: or     rdi,rax
  00186: rol    rdi,0x3d
  0018a: movq   xmm3,rdi
  0018f: jmp    0x1a6
  00194: call   0xffff8e25
  00199: test   rax,rax
  0019c: je     0x39bad
  001a2: movq   xmm3,xmm0
  001a6: subsd  xmm2,xmm3
:00006 %4 = @y: Vec[IvarId(1)]
  001aa: mov    rdi,QWORD PTR [r14-0x30]
  001ae: mov    rax,QWORD PTR [rdi+0x18]
  001b2: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001b6: mov    rdi,QWORD PTR [r14-0x38]
  001ba: test   rdi,0x7
  001c1: jne    0x39bbc
  001c7: cmp    DWORD PTR [rdi+0x4],0x2b
  001cb: jne    0x39bbc
  001d1: cmp    DWORD PTR [rip+0xffffffffffffd2f3],0x26        # 0xffffd4cb
  001d8: jne    0x39bbc
  001de: mov    esi,DWORD PTR [rip+0x388]        # 0x56c
  001e4: cmp    esi,0xffffffff
  001e7: je     0x39bd8
  001ed: cmp    WORD PTR [rdi+0x2],0x3
  001f2: jne    0x20b
  001f8: cmp    esi,0x6
  001fb: jge    0x20b
  00201: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00206: jmp    0x229
  0020b: sub    rsp,0x10
  0020f: movq   QWORD PTR [rsp],xmm2
  00214: movabs rax,0x5592e6dd3800
  0021e: call   rax
  00220: movq   xmm2,QWORD PTR [rsp]
  00225: add    rsp,0x10
  00229: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 - %5                         [Float][Float]
  0022d: mov    rdi,QWORD PTR [r14-0x50]
  00231: test   rdi,0x1
  00238: jne    0x39c13
  0023e: test   rdi,0x2
  00245: je     0x281
  0024b: xorps  xmm3,xmm3
  0024e: movabs rax,0x8000000000000002
  00258: cmp    rdi,rax
  0025b: je     0x293
  00261: mov    rax,rdi
  00264: sar    rax,0x3f
  00268: add    rax,0x2
  0026c: and    rdi,0xfffffffffffffffc
  00270: or     rdi,rax
  00273: rol    rdi,0x3d
  00277: movq   xmm3,rdi
  0027c: jmp    0x293
  00281: call   0xffff8e25
  00286: test   rax,rax
  00289: je     0x39c13
  0028f: movq   xmm3,xmm0
  00293: mov    rdi,QWORD PTR [r14-0x58]
  00297: test   rdi,0x1
  0029e: jne    0x39c2f
  002a4: test   rdi,0x2
  002ab: je     0x2e7
  002b1: xorps  xmm4,xmm4
  002b4: movabs rax,0x8000000000000002
  002be: cmp    rdi,rax
  002c1: je     0x2f9
  002c7: mov    rax,rdi
  002ca: sar    rax,0x3f
  002ce: add    rax,0x2
  002d2: and    rdi,0xfffffffffffffffc
  002d6: or     rdi,rax
  002d9: rol    rdi,0x3d
  002dd: movq   xmm4,rdi
  002e2: jmp    0x2f9
  002e7: call   0xffff8e25
  002ec: test   rax,rax
  002ef: je     0x39c2f
  002f5: movq   xmm4,xmm0
  002f9: subsd  xmm3,xmm4
:00010 %5 = @z: Vec[IvarId(2)]
  002fd: mov    rdi,QWORD PTR [r14-0x30]
  00301: mov    rax,QWORD PTR [rdi+0x20]
  00305: mov    QWORD PTR [r14-0x58],rax
:00011 %6 = %1.call z()                     [Vec]
  00309: mov    rdi,QWORD PTR [r14-0x38]
  0030d: test   rdi,0x7
  00314: jne    0x39c4b
  0031a: cmp    DWORD PTR [rdi+0x4],0x2b
  0031e: jne    0x39c4b
  00324: cmp    DWORD PTR [rip+0xffffffffffffd1a0],0x26        # 0xffffd4cb
  0032b: jne    0x39c4b
  00331: mov    esi,DWORD PTR [rip+0x23d]        # 0x574
  00337: cmp    esi,0xffffffff
  0033a: je     0x39c74
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x35e
  0034b: cmp    esi,0x6
  0034e: jge    0x35e
  00354: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00359: jmp    0x388
  0035e: sub    rsp,0x10
  00362: movq   QWORD PTR [rsp],xmm2
  00367: movq   QWORD PTR [rsp+0x8],xmm3
  0036d: movabs rax,0x5592e6dd3800
  00377: call   rax
  00379: movq   xmm2,QWORD PTR [rsp]
  0037e: movq   xmm3,QWORD PTR [rsp+0x8]
  00384: add    rsp,0x10
  00388: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %5 = %5 - %6                         [Float][Float]
  0038c: mov    rdi,QWORD PTR [r14-0x58]
  00390: test   rdi,0x1
  00397: jne    0x39cbb
  0039d: test   rdi,0x2
  003a4: je     0x3e0
  003aa: xorps  xmm4,xmm4
  003ad: movabs rax,0x8000000000000002
  003b7: cmp    rdi,rax
  003ba: je     0x3f2
  003c0: mov    rax,rdi
  003c3: sar    rax,0x3f
  003c7: add    rax,0x2
  003cb: and    rdi,0xfffffffffffffffc
  003cf: or     rdi,rax
  003d2: rol    rdi,0x3d
  003d6: movq   xmm4,rdi
  003db: jmp    0x3f2
  003e0: call   0xffff8e25
  003e5: test   rax,rax
  003e8: je     0x39cbb
  003ee: movq   xmm4,xmm0
  003f2: mov    rdi,QWORD PTR [r14-0x60]
  003f6: test   rdi,0x1
  003fd: jne    0x39ce4
  00403: test   rdi,0x2
  0040a: je     0x446
  00410: xorps  xmm5,xmm5
  00413: movabs rax,0x8000000000000002
  0041d: cmp    rdi,rax
  00420: je     0x458
  00426: mov    rax,rdi
  00429: sar    rax,0x3f
  0042d: add    rax,0x2
  00431: and    rdi,0xfffffffffffffffc
  00435: or     rdi,rax
  00438: rol    rdi,0x3d
  0043c: movq   xmm5,rdi
  00441: jmp    0x458
  00446: call   0xffff8e25
  0044b: test   rax,rax
  0044e: je     0x39ce4
  00454: movq   xmm5,xmm0
  00458: subsd  xmm4,xmm5
:00014 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  0045c: movq   xmm0,xmm2
  00460: call   0xffff8f49
  00465: mov    QWORD PTR [r14-0x48],rax
  00469: movq   xmm0,xmm3
  0046d: call   0xffff8f49
  00472: mov    QWORD PTR [r14-0x50],rax
  00476: movq   xmm0,xmm4
  0047a: call   0xffff8f49
  0047f: mov    QWORD PTR [r14-0x58],rax
  00483: mov    rdi,QWORD PTR [r14-0x40]
  00487: test   rdi,0x7
  0048e: jne    0x39d0d
  00494: cmp    DWORD PTR [rdi+0x4],0x2c
  00498: jne    0x39d0d
  0049e: cmp    DWORD PTR [rip+0xffffffffffffd026],0x26        # 0xffffd4cb
  004a5: jne    0x39d0d
  004ab: mov    r9,0x0
  004b2: sub    rsp,0x20
  004b6: movq   QWORD PTR [rsp],xmm2
  004bb: movq   QWORD PTR [rsp+0x8],xmm3
  004c1: movq   QWORD PTR [rsp+0x10],xmm4
  004c7: movq   QWORD PTR [rsp+0x18],xmm5
  004cd: mov    rdx,rdi
  004d0: mov    QWORD PTR [rsp-0x40],rcx
  004d5: mov    QWORD PTR [rsp-0x28],0x0
  004de: lea    rcx,[r14-0x48]
  004e2: mov    r8,0x3
  004e9: mov    rsi,QWORD PTR [rbx]
  004ec: mov    QWORD PTR [rsp-0x18],rsi
  004f1: lea    rsi,[rsp-0x18]
  004f6: mov    QWORD PTR [rbx],rsi
  004f9: lea    r14,[rsp-0x10]
  004fe: mov    QWORD PTR [rsp-0x20],r14
  00503: call   0x39d1c
  00508: lea    r14,[rbp-0x8]
  0050c: mov    QWORD PTR [rbx],r14
  0050f: mov    r14,QWORD PTR [rbp-0x10]
  00513: movq   xmm2,QWORD PTR [rsp]
  00518: movq   xmm3,QWORD PTR [rsp+0x8]
  0051e: movq   xmm4,QWORD PTR [rsp+0x10]
  00524: movq   xmm5,QWORD PTR [rsp+0x18]
  0052a: add    rsp,0x20
  0052e: test   rax,rax
  00531: je     0x39d4e
  00537: mov    QWORD PTR [r14-0x40],rax
:00015 
:00016 ret %2
  0053b: mov    rax,QWORD PTR [r14-0x40]
  0053f: leave  
  00540: ret    
==> start whole compile: <unnamed> FuncId(111) self_class:Scene start:[00000] bytecode:0x5592e73f7bb0
<== finished compile. elapsed:103.2µs
offset:Pos(30942) code: 6702 bytes  data: 280 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x396e6
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x396e6
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.inline IntegerTof()         [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x396f5
  000e7: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd57],0x26        # 0xffffce45
  000ee:    	jne    0x396f5
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.inline IntegerTof()         [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x39704
  00128: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd16],0x26        # 0xffffce45
  0012f:    	jne    0x39704
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.inline IntegerTof()         [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x39720
  00163: 26 	cmp    DWORD PTR [rip+0xffffffffffffccdb],0x26        # 0xffffce45
  0016a:    	jne    0x39720
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.inline IntegerTof()         [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x39749
  001a1: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc9d],0x26        # 0xffffce45
  001a8:    	jne    0x39749
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.inline IntegerTof()          [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x3977f
  001c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc77],0x26        # 0xffffce45
  001ce:    	jne    0x3977f
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.inline IntegerTof()         [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x397c2
  001ff: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc3f],0x26        # 0xffffce45
  00206:    	jne    0x397c2
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x39812
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xffff879f
  00289:    	test   rax,rax
  0028c:    	je     0x39812
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xffff876b
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 17 	movq   xmm9,QWORD PTR [rip+0x1771]        # 0x1a32
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xffff876b
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 17 	movq   xmm9,QWORD PTR [rip+0x1749]        # 0x1a42
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xffff876b
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xffff876b
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x3986f
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xffff879f
  003b0:    	test   rax,rax
  003b3:    	je     0x3986f
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xffff876b
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 16 	movq   xmm9,QWORD PTR [rip+0x166a]        # 0x1a52
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xffff876b
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1643]        # 0x1a62
:00034 %15 = literal[2.0]
  0041f: 16 	movq   xmm9,QWORD PTR [rip+0x164a]        # 0x1a72
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xffff876b
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xffff876b
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc9e1]        # 0xffffce52
  00471: 00 	cmp    rax,QWORD PTR [rip+0x161a]        # 0x1a92
  00478:    	jne    0x398eb
  0047e: 00 	mov    rax,QWORD PTR [rip+0x15fd]        # 0x1a82
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 16 	movq   xmm8,QWORD PTR [rip+0x160d]        # 0x1aa2
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xffff88c3
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xffff88c3
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xffff88c3
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xffff88c3
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xffff88c3
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xffff88c3
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xffff88c3
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xffff88c3
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xffff88c3
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xffff88c3
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x399ae
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x399ae
  00550: 26 	cmp    DWORD PTR [rip+0xffffffffffffc8ee],0x26        # 0xffffce45
  00557:    	jne    0x399ae
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x399bd
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd:    	test   rax,rax
  005e0:    	je     0x399ef
  005e6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005f4: 00 	test   rdi,0x7
  005fb:    	jne    0x399fe
  00601:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00605:    	jne    0x399fe
  0060b: 26 	cmp    DWORD PTR [rip+0xffffffffffffc833],0x26        # 0xffffce45
  00612:    	jne    0x399fe
  00618:    	sub    rsp,0x20
  0061c:    	movq   QWORD PTR [rsp],xmm8
  00622: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00629: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  00630: 00 	cmp    DWORD PTR [rip+0xffffffffffffc812],0x0        # 0xffffce49
  00637:    	je     0x64f
  0063d:    	mov    rdi,r12
  00640:    	mov    rsi,QWORD PTR [rbx]
  00643: 92 	movabs rax,0x5592e6e3ca90
  0064d:    	call   rax
  0064f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00658: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0065f:    	mov    QWORD PTR [rsp-0x40],rax
  00664: 00 	mov    rdi,0x0
  0066b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00674: 07 	movabs rax,0x700000060
  0067e:    	mov    QWORD PTR [rsp-0x30],rax
  00683: 92 	movabs r13,0x5592e73d9f90
  0068d:    	mov    rsi,QWORD PTR [rbx]
  00690:    	mov    QWORD PTR [rsp-0x18],rsi
  00695:    	lea    rsi,[rsp-0x18]
  0069a:    	mov    QWORD PTR [rbx],rsi
  0069d:    	lea    r14,[rsp-0x10]
  006a2:    	mov    QWORD PTR [rsp-0x20],r14
  006a7:    	call   0xffffd705
  006ac:    	lea    r14,[rbp-0x8]
  006b0:    	mov    QWORD PTR [rbx],r14
  006b3:    	mov    r14,QWORD PTR [rbp-0x10]
  006b7:    	movq   xmm8,QWORD PTR [rsp]
  006bd: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006c4: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006cb:    	add    rsp,0x20
  006cf:    	test   rax,rax
  006d2:    	je     0x39a0d
  006d8:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006dc: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc76f]        # 0xffffce52
  006e3: 00 	cmp    rax,QWORD PTR [rip+0x13d8]        # 0x1ac2
  006ea:    	jne    0x39a1c
  006f0: 00 	mov    rax,QWORD PTR [rip+0x13bb]        # 0x1ab2
  006f7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  006fe: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc74d]        # 0xffffce52
  00705: 00 	cmp    rax,QWORD PTR [rip+0x13d6]        # 0x1ae2
  0070c:    	jne    0x39a97
  00712: 00 	mov    rax,QWORD PTR [rip+0x13b9]        # 0x1ad2
  00719: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  00720: 00 	movq   xmm2,QWORD PTR [rip+0x13ca]        # 0x1af2
  00728: 00 	movabs rax,0x8000000000000002
  00732: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  00739: 00 	movq   xmm3,QWORD PTR [rip+0x13c1]        # 0x1b02
  00741: 00 	movabs rax,0x8000000000000002
  0074b: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00752: 00 	movq   xmm4,QWORD PTR [rip+0x13b8]        # 0x1b12
  0075a: 00 	movabs rax,0x8000000000000002
  00764: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  0076b: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00772: 00 	test   rdi,0x7
  00779:    	jne    0x39b04
  0077f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00783:    	jne    0x39b04
  00789: 26 	cmp    DWORD PTR [rip+0xffffffffffffc6b5],0x26        # 0xffffce45
  00790:    	jne    0x39b04
  00796: 00 	mov    r9,0x0
  0079d:    	sub    rsp,0x20
  007a1:    	movq   QWORD PTR [rsp],xmm2
  007a6:    	movq   QWORD PTR [rsp+0x8],xmm3
  007ac:    	movq   QWORD PTR [rsp+0x10],xmm4
  007b2:    	mov    rdx,rdi
  007b5:    	mov    QWORD PTR [rsp-0x40],rcx
  007ba: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007c3: ff 	lea    rcx,[r14-0xb0]
  007ca: 00 	mov    r8,0x3
  007d1:    	mov    rsi,QWORD PTR [rbx]
  007d4:    	mov    QWORD PTR [rsp-0x18],rsi
  007d9:    	lea    rsi,[rsp-0x18]
  007de:    	mov    QWORD PTR [rbx],rsi
  007e1:    	lea    r14,[rsp-0x10]
  007e6:    	mov    QWORD PTR [rsp-0x20],r14
  007eb:    	call   0x39b13
  007f0:    	lea    r14,[rbp-0x8]
  007f4:    	mov    QWORD PTR [rbx],r14
  007f7:    	mov    r14,QWORD PTR [rbp-0x10]
  007fb:    	movq   xmm2,QWORD PTR [rsp]
  00800:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00806:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0080c:    	add    rsp,0x20
  00810:    	test   rax,rax
  00813:    	je     0x39b45
  00819: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  00820:    	mov    rax,QWORD PTR [r14-0x80]
  00824: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  0082b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00832: 00 	test   rdi,0x7
  00839:    	jne    0x39b54
  0083f:    	cmp    DWORD PTR [rdi+0x4],0x32
  00843:    	jne    0x39b54
  00849: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5f5],0x26        # 0xffffce45
  00850:    	jne    0x39b54
  00856: 00 	mov    r9,0x0
  0085d:    	sub    rsp,0x10
  00861:    	movq   QWORD PTR [rsp],xmm3
  00866:    	movq   QWORD PTR [rsp+0x8],xmm4
  0086c:    	mov    rdx,rdi
  0086f:    	mov    QWORD PTR [rsp-0x40],rcx
  00874: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0087d: ff 	lea    rcx,[r14-0xa8]
  00884: 00 	mov    r8,0x2
  0088b:    	mov    rsi,QWORD PTR [rbx]
  0088e:    	mov    QWORD PTR [rsp-0x18],rsi
  00893:    	lea    rsi,[rsp-0x18]
  00898:    	mov    QWORD PTR [rbx],rsi
  0089b:    	lea    r14,[rsp-0x10]
  008a0:    	mov    QWORD PTR [rsp-0x20],r14
  008a5:    	call   0x39b63
  008aa:    	lea    r14,[rbp-0x8]
  008ae:    	mov    QWORD PTR [rbx],r14
  008b1:    	mov    r14,QWORD PTR [rbp-0x10]
  008b5:    	movq   xmm3,QWORD PTR [rsp]
  008ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008c0:    	add    rsp,0x10
  008c4:    	test   rax,rax
  008c7:    	je     0x39b95
  008cd: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008d4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc577]        # 0xffffce52
  008db: 00 	cmp    rax,QWORD PTR [rip+0x1250]        # 0x1b32
  008e2:    	jne    0x39ba4
  008e8: 00 	mov    rax,QWORD PTR [rip+0x1233]        # 0x1b22
  008ef: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  008f6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008fd: 00 	test   rdi,0x7
  00904:    	jne    0x39c0d
  0090a:    	cmp    DWORD PTR [rdi+0x4],0x34
  0090e:    	jne    0x39c0d
  00914: 26 	cmp    DWORD PTR [rip+0xffffffffffffc52a],0x26        # 0xffffce45
  0091b:    	jne    0x39c0d
  00921: 00 	mov    r9,0x0
  00928:    	sub    rsp,0x10
  0092c:    	movq   QWORD PTR [rsp],xmm3
  00931:    	movq   QWORD PTR [rsp+0x8],xmm4
  00937:    	mov    rdx,rdi
  0093a:    	mov    QWORD PTR [rsp-0x40],rcx
  0093f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00948: ff 	lea    rcx,[r14-0xa8]
  0094f: 00 	mov    r8,0x0
  00956:    	mov    rsi,QWORD PTR [rbx]
  00959:    	mov    QWORD PTR [rsp-0x18],rsi
  0095e:    	lea    rsi,[rsp-0x18]
  00963:    	mov    QWORD PTR [rbx],rsi
  00966:    	lea    r14,[rsp-0x10]
  0096b:    	mov    QWORD PTR [rsp-0x20],r14
  00970:    	call   0x39c1c
  00975:    	lea    r14,[rbp-0x8]
  00979:    	mov    QWORD PTR [rbx],r14
  0097c:    	mov    r14,QWORD PTR [rbp-0x10]
  00980:    	movq   xmm3,QWORD PTR [rsp]
  00985:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0098b:    	add    rsp,0x10
  0098f:    	test   rax,rax
  00992:    	je     0x39c4e
  00998: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  0099f:    	mov    rdi,QWORD PTR [r14-0x30]
  009a3:    	mov    rax,QWORD PTR [rdi+0x10]
  009a7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  009ae: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009b9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009c0: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009c7: 00 	test   rdi,0x7
  009ce:    	jne    0x39c5d
  009d4:    	cmp    DWORD PTR [rdi+0x4],0xb
  009d8:    	jne    0x39c5d
  009de: 00 	test   rsi,0x1
  009e5:    	je     0x39c5d
  009eb:    	sar    rsi,1
  009ee:    	sub    rsp,0x10
  009f2:    	movq   QWORD PTR [rsp],xmm3
  009f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  009fd: 92 	movabs rax,0x5592e6e49100
  00a07:    	call   rax
  00a09:    	movq   xmm3,QWORD PTR [rsp]
  00a0e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a14:    	add    rsp,0x10
  00a18:    	test   rax,rax
  00a1b:    	je     0x39c6c
  00a21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a28: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a2f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a36: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a3d: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a44: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a4b: 00 	test   rdi,0x7
  00a52:    	jne    0x39c7b
  00a58:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a5c:    	jne    0x39c7b
  00a62: 26 	cmp    DWORD PTR [rip+0xffffffffffffc3dc],0x26        # 0xffffce45
  00a69:    	jne    0x39c7b
  00a6f:    	sub    rsp,0x10
  00a73:    	movq   QWORD PTR [rsp],xmm3
  00a78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a7e: 00 	cmp    DWORD PTR [rip+0xffffffffffffc3c4],0x0        # 0xffffce49
  00a85:    	je     0xa9d
  00a8b:    	mov    rdi,r12
  00a8e:    	mov    rsi,QWORD PTR [rbx]
  00a91: 92 	movabs rax,0x5592e6e3ca90
  00a9b:    	call   rax
  00a9d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aa6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00aad:    	mov    QWORD PTR [rsp-0x40],rax
  00ab2: 00 	mov    rdi,0x2
  00ab9: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00ac0:    	mov    QWORD PTR [rsp-0x48],rax
  00ac5: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00acc:    	mov    QWORD PTR [rsp-0x50],rax
  00ad1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ada: 0e 	movabs rax,0x1000e00000062
  00ae4:    	mov    QWORD PTR [rsp-0x30],rax
  00ae9: 92 	movabs r13,0x5592e73e2200
  00af3:    	mov    rsi,QWORD PTR [rbx]
  00af6:    	mov    QWORD PTR [rsp-0x18],rsi
  00afb:    	lea    rsi,[rsp-0x18]
  00b00:    	mov    QWORD PTR [rbx],rsi
  00b03:    	lea    r14,[rsp-0x10]
  00b08:    	mov    QWORD PTR [rsp-0x20],r14
  00b0d:    	call   0xffffd9fe
  00b12:    	lea    r14,[rbp-0x8]
  00b16:    	mov    QWORD PTR [rbx],r14
  00b19:    	mov    r14,QWORD PTR [rbp-0x10]
  00b1d:    	movq   xmm3,QWORD PTR [rsp]
  00b22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b28:    	add    rsp,0x10
  00b2c:    	test   rax,rax
  00b2f:    	je     0x39c8a
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b35:    	mov    rdi,QWORD PTR [r14-0x30]
  00b39:    	mov    rax,QWORD PTR [rdi+0x10]
  00b3d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b44: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b4f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b56: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b5d: 00 	test   rdi,0x7
  00b64:    	jne    0x39c99
  00b6a:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b6e:    	jne    0x39c99
  00b74: 00 	test   rsi,0x1
  00b7b:    	je     0x39c99
  00b81:    	sar    rsi,1
  00b84:    	sub    rsp,0x10
  00b88:    	movq   QWORD PTR [rsp],xmm3
  00b8d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b93: 92 	movabs rax,0x5592e6e49100
  00b9d:    	call   rax
  00b9f:    	movq   xmm3,QWORD PTR [rsp]
  00ba4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00baa:    	add    rsp,0x10
  00bae:    	test   rax,rax
  00bb1:    	je     0x39ca8
  00bb7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00bbe: ff 	mov    rax,QWORD PTR [r14-0x88]
  00bc5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00bcc: ff 	mov    rax,QWORD PTR [r14-0x90]
  00bd3: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00bda: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00be1: 00 	test   rdi,0x7
  00be8:    	jne    0x39cb7
  00bee:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00bf2:    	jne    0x39cb7
  00bf8: 26 	cmp    DWORD PTR [rip+0xffffffffffffc246],0x26        # 0xffffce45
  00bff:    	jne    0x39cb7
  00c05:    	sub    rsp,0x10
  00c09:    	movq   QWORD PTR [rsp],xmm3
  00c0e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c14: 00 	cmp    DWORD PTR [rip+0xffffffffffffc22e],0x0        # 0xffffce49
  00c1b:    	je     0xc33
  00c21:    	mov    rdi,r12
  00c24:    	mov    rsi,QWORD PTR [rbx]
  00c27: 92 	movabs rax,0x5592e6e3ca90
  00c31:    	call   rax
  00c33: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c3c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c43:    	mov    QWORD PTR [rsp-0x40],rax
  00c48: 00 	mov    rdi,0x2
  00c4f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00c56:    	mov    QWORD PTR [rsp-0x48],rax
  00c5b: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00c62:    	mov    QWORD PTR [rsp-0x50],rax
  00c67: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c70: 0e 	movabs rax,0x1000e00000062
  00c7a:    	mov    QWORD PTR [rsp-0x30],rax
  00c7f: 92 	movabs r13,0x5592e73e2200
  00c89:    	mov    rsi,QWORD PTR [rbx]
  00c8c:    	mov    QWORD PTR [rsp-0x18],rsi
  00c91:    	lea    rsi,[rsp-0x18]
  00c96:    	mov    QWORD PTR [rbx],rsi
  00c99:    	lea    r14,[rsp-0x10]
  00c9e:    	mov    QWORD PTR [rsp-0x20],r14
  00ca3:    	call   0xffffd9fe
  00ca8:    	lea    r14,[rbp-0x8]
  00cac:    	mov    QWORD PTR [rbx],r14
  00caf:    	mov    r14,QWORD PTR [rbp-0x10]
  00cb3:    	movq   xmm3,QWORD PTR [rsp]
  00cb8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cbe:    	add    rsp,0x10
  00cc2:    	test   rax,rax
  00cc5:    	je     0x39cc6
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00ccb:    	mov    rdi,QWORD PTR [r14-0x30]
  00ccf:    	mov    rax,QWORD PTR [rdi+0x10]
  00cd3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00cda: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ce5: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cec: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00cf3: 00 	test   rdi,0x7
  00cfa:    	jne    0x39cd5
  00d00:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d04:    	jne    0x39cd5
  00d0a: 00 	test   rsi,0x1
  00d11:    	je     0x39cd5
  00d17:    	sar    rsi,1
  00d1a:    	sub    rsp,0x10
  00d1e:    	movq   QWORD PTR [rsp],xmm3
  00d23:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d29: 92 	movabs rax,0x5592e6e49100
  00d33:    	call   rax
  00d35:    	movq   xmm3,QWORD PTR [rsp]
  00d3a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d40:    	add    rsp,0x10
  00d44:    	test   rax,rax
  00d47:    	je     0x39ce4
  00d4d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00d54: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d5b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00d62: ff 	mov    rax,QWORD PTR [r14-0x90]
  00d69: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00d70: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d77: 00 	test   rdi,0x7
  00d7e:    	jne    0x39cf3
  00d84:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00d88:    	jne    0x39cf3
  00d8e: 26 	cmp    DWORD PTR [rip+0xffffffffffffc0b0],0x26        # 0xffffce45
  00d95:    	jne    0x39cf3
  00d9b:    	sub    rsp,0x10
  00d9f:    	movq   QWORD PTR [rsp],xmm3
  00da4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00daa: 00 	cmp    DWORD PTR [rip+0xffffffffffffc098],0x0        # 0xffffce49
  00db1:    	je     0xdc9
  00db7:    	mov    rdi,r12
  00dba:    	mov    rsi,QWORD PTR [rbx]
  00dbd: 92 	movabs rax,0x5592e6e3ca90
  00dc7:    	call   rax
  00dc9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00dd2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00dd9:    	mov    QWORD PTR [rsp-0x40],rax
  00dde: 00 	mov    rdi,0x2
  00de5: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00dec:    	mov    QWORD PTR [rsp-0x48],rax
  00df1: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00df8:    	mov    QWORD PTR [rsp-0x50],rax
  00dfd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e06: 0e 	movabs rax,0x1000e00000062
  00e10:    	mov    QWORD PTR [rsp-0x30],rax
  00e15: 92 	movabs r13,0x5592e73e2200
  00e1f:    	mov    rsi,QWORD PTR [rbx]
  00e22:    	mov    QWORD PTR [rsp-0x18],rsi
  00e27:    	lea    rsi,[rsp-0x18]
  00e2c:    	mov    QWORD PTR [rbx],rsi
  00e2f:    	lea    r14,[rsp-0x10]
  00e34:    	mov    QWORD PTR [rsp-0x20],r14
  00e39:    	call   0xffffd9fe
  00e3e:    	lea    r14,[rbp-0x8]
  00e42:    	mov    QWORD PTR [rbx],r14
  00e45:    	mov    r14,QWORD PTR [rbp-0x10]
  00e49:    	movq   xmm3,QWORD PTR [rsp]
  00e4e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e54:    	add    rsp,0x10
  00e58:    	test   rax,rax
  00e5b:    	je     0x39d02
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00e61:    	mov    rdi,QWORD PTR [r14-0x30]
  00e65:    	mov    rax,QWORD PTR [rdi+0x18]
  00e69: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00e70: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e77: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00e7e: ff 	mov    rax,QWORD PTR [r14-0x90]
  00e85: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00e8c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e93: 00 	test   rdi,0x7
  00e9a:    	jne    0x39d11
  00ea0:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00ea4:    	jne    0x39d11
  00eaa: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf94],0x26        # 0xffffce45
  00eb1:    	jne    0x39d11
  00eb7:    	sub    rsp,0x10
  00ebb:    	movq   QWORD PTR [rsp],xmm3
  00ec0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ec6: 00 	cmp    DWORD PTR [rip+0xffffffffffffbf7c],0x0        # 0xffffce49
  00ecd:    	je     0xee5
  00ed3:    	mov    rdi,r12
  00ed6:    	mov    rsi,QWORD PTR [rbx]
  00ed9: 92 	movabs rax,0x5592e6e3ca90
  00ee3:    	call   rax
  00ee5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00eee: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00ef5:    	mov    QWORD PTR [rsp-0x40],rax
  00efa: 00 	mov    rdi,0x2
  00f01: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00f08:    	mov    QWORD PTR [rsp-0x48],rax
  00f0d: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00f14:    	mov    QWORD PTR [rsp-0x50],rax
  00f19: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f22: 0c 	movabs rax,0xc00000064
  00f2c:    	mov    QWORD PTR [rsp-0x30],rax
  00f31: 92 	movabs r13,0x5592e73e8da0
  00f3b:    	mov    rsi,QWORD PTR [rbx]
  00f3e:    	mov    QWORD PTR [rsp-0x18],rsi
  00f43:    	lea    rsi,[rsp-0x18]
  00f48:    	mov    QWORD PTR [rbx],rsi
  00f4b:    	lea    r14,[rsp-0x10]
  00f50:    	mov    QWORD PTR [rsp-0x20],r14
  00f55:    	call   0xffffdfca
  00f5a:    	lea    r14,[rbp-0x8]
  00f5e:    	mov    QWORD PTR [rbx],r14
  00f61:    	mov    r14,QWORD PTR [rbp-0x10]
  00f65:    	movq   xmm3,QWORD PTR [rsp]
  00f6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f70:    	add    rsp,0x10
  00f74:    	test   rax,rax
  00f77:    	je     0x39d20
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00f7d: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f84: 00 	test   rdi,0x7
  00f8b:    	jne    0x39d2f
  00f91:    	cmp    DWORD PTR [rdi+0x4],0x33
  00f95:    	jne    0x39d2f
  00f9b: 26 	cmp    DWORD PTR [rip+0xffffffffffffbea3],0x26        # 0xffffce45
  00fa2:    	jne    0x39d2f
  00fa8:    	mov    esi,DWORD PTR [rip+0xb90]        # 0x1b3e
  00fae:    	cmp    esi,0xffffffff
  00fb1:    	je     0x39d3e
  00fb7:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbc:    	jne    0xfd5
  00fc2:    	cmp    esi,0x6
  00fc5:    	jge    0xfd5
  00fcb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd0:    	jmp    0xfff
  00fd5:    	sub    rsp,0x10
  00fd9:    	movq   QWORD PTR [rsp],xmm3
  00fde:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fe4: 92 	movabs rax,0x5592e6dd3800
  00fee:    	call   rax
  00ff0:    	movq   xmm3,QWORD PTR [rsp]
  00ff5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ffb:    	add    rsp,0x10
  00fff: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00119
  01006: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0100d:    	or     rax,0x10
  01011:    	cmp    rax,0x14
  01015:    	je     0x1a1a
:00087 %14 = %12
  0101b: ff 	mov    rax,QWORD PTR [r14-0x90]
  01022: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  01029: 00 	cmp    DWORD PTR [rip+0xb12],0x0        # 0x1b42
  01030:    	jl     0x39d85
  01036:    	je     0x39d94
  0103c: 01 	sub    DWORD PTR [rip+0xaff],0x1        # 0x1b42
  01043:    	xor    rdi,rdi
  01046:    	jmp    0x39d85
  0104b:    	sub    rsp,0x10
  0104f:    	movq   QWORD PTR [rsp],xmm3
  01054:    	movq   QWORD PTR [rsp+0x8],xmm4
  0105a:    	mov    r15d,0x35
  01060: 92 	movabs r13,0x5592e73f8140
  0106a:    	cmp    QWORD PTR [r13+0x8],0x0
  0106f:    	je     0x39db0
  01075:    	cmp    r15d,DWORD PTR [r13-0x8]
  01079:    	jne    0x39db0
  0107f:    	mov    eax,DWORD PTR [rip+0xffffffffffffbdc0]        # 0xffffce45
  01085:    	cmp    DWORD PTR [r13-0x4],eax
  01089:    	jne    0x39db0
  0108f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01098:    	mov    rax,QWORD PTR [r14-0x30]
  0109c:    	mov    QWORD PTR [rsp-0x40],rax
  010a1: 00 	mov    rdi,0x1
  010a8: ff 	mov    rax,QWORD PTR [r14-0xa0]
  010af:    	mov    QWORD PTR [rsp-0x48],rax
  010b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010bd:    	mov    r13,QWORD PTR [r13+0x8]
  010c1:    	mov    rax,QWORD PTR [r13+0x8]
  010c5:    	mov    QWORD PTR [rsp-0x30],rax
  010ca:    	mov    rax,QWORD PTR [r13+0x0]
  010ce:    	mov    r13,QWORD PTR [r13+0x10]
  010d2:    	mov    rsi,QWORD PTR [rbx]
  010d5:    	mov    QWORD PTR [rsp-0x18],rsi
  010da:    	lea    rsi,[rsp-0x18]
  010df:    	mov    QWORD PTR [rbx],rsi
  010e2:    	lea    r14,[rsp-0x10]
  010e7:    	mov    QWORD PTR [rsp-0x20],r14
  010ec:    	call   rax
  010ee:    	lea    r14,[rbp-0x8]
  010f2:    	mov    QWORD PTR [rbx],r14
  010f5:    	mov    r14,QWORD PTR [rbp-0x10]
  010f9:    	movq   xmm3,QWORD PTR [rsp]
  010fe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01104:    	add    rsp,0x10
  01108:    	test   rax,rax
  0110b:    	je     0x39df1
  01111: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  01118:    	mov    rax,QWORD PTR [r14-0x18]
  0111c:    	mov    rax,QWORD PTR [rax]
  0111f:    	mov    rax,QWORD PTR [rax-0x28]
  01123: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  0112a:    	mov    rax,QWORD PTR [r14-0x18]
  0112e:    	mov    rax,QWORD PTR [rax]
  01131:    	mov    rax,QWORD PTR [rax-0x28]
  01135: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [<INVALID>]
  0113c:    	sub    rsp,0x10
  01140:    	movq   QWORD PTR [rsp],xmm3
  01145:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114b: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01152: 92 	movabs rax,0x5592e6de1bb0
  0115c:    	call   rax
  0115e:    	mov    r15d,eax
  01161: 92 	movabs r13,0x5592e73f8180
  0116b:    	cmp    QWORD PTR [r13+0x8],0x0
  01170:    	je     0x39e00
  01176:    	cmp    r15d,DWORD PTR [r13-0x8]
  0117a:    	jne    0x39e00
  01180:    	mov    eax,DWORD PTR [rip+0xffffffffffffbcbf]        # 0xffffce45
  01186:    	cmp    DWORD PTR [r13-0x4],eax
  0118a:    	jne    0x39e00
  01190: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01199: ff 	mov    rax,QWORD PTR [r14-0xa8]
  011a0:    	mov    QWORD PTR [rsp-0x40],rax
  011a5: 00 	mov    rdi,0x0
  011ac: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011b5:    	mov    r13,QWORD PTR [r13+0x8]
  011b9:    	mov    rax,QWORD PTR [r13+0x8]
  011bd:    	mov    QWORD PTR [rsp-0x30],rax
  011c2:    	mov    rax,QWORD PTR [r13+0x0]
  011c6:    	mov    r13,QWORD PTR [r13+0x10]
  011ca:    	mov    rsi,QWORD PTR [rbx]
  011cd:    	mov    QWORD PTR [rsp-0x18],rsi
  011d2:    	lea    rsi,[rsp-0x18]
  011d7:    	mov    QWORD PTR [rbx],rsi
  011da:    	lea    r14,[rsp-0x10]
  011df:    	mov    QWORD PTR [rsp-0x20],r14
  011e4:    	call   rax
  011e6:    	lea    r14,[rbp-0x8]
  011ea:    	mov    QWORD PTR [rbx],r14
  011ed:    	mov    r14,QWORD PTR [rbp-0x10]
  011f1:    	movq   xmm3,QWORD PTR [rsp]
  011f6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011fc:    	add    rsp,0x10
  01200:    	test   rax,rax
  01203:    	je     0x39e44
  01209: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [<INVALID>]
  01210:    	sub    rsp,0x10
  01214:    	movq   QWORD PTR [rsp],xmm3
  01219:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01226: 92 	movabs rax,0x5592e6de1bb0
  01230:    	call   rax
  01232:    	mov    r15d,eax
  01235: 92 	movabs r13,0x5592e73f81a0
  0123f:    	cmp    QWORD PTR [r13+0x8],0x0
  01244:    	je     0x39e53
  0124a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0124e:    	jne    0x39e53
  01254:    	mov    eax,DWORD PTR [rip+0xffffffffffffbbeb]        # 0xffffce45
  0125a:    	cmp    DWORD PTR [r13-0x4],eax
  0125e:    	jne    0x39e53
  01264: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0126d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01274:    	mov    QWORD PTR [rsp-0x40],rax
  01279: 00 	mov    rdi,0x0
  01280: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01289:    	mov    r13,QWORD PTR [r13+0x8]
  0128d:    	mov    rax,QWORD PTR [r13+0x8]
  01291:    	mov    QWORD PTR [rsp-0x30],rax
  01296:    	mov    rax,QWORD PTR [r13+0x0]
  0129a:    	mov    r13,QWORD PTR [r13+0x10]
  0129e:    	mov    rsi,QWORD PTR [rbx]
  012a1:    	mov    QWORD PTR [rsp-0x18],rsi
  012a6:    	lea    rsi,[rsp-0x18]
  012ab:    	mov    QWORD PTR [rbx],rsi
  012ae:    	lea    r14,[rsp-0x10]
  012b3:    	mov    QWORD PTR [rsp-0x20],r14
  012b8:    	call   rax
  012ba:    	lea    r14,[rbp-0x8]
  012be:    	mov    QWORD PTR [rbx],r14
  012c1:    	mov    r14,QWORD PTR [rbp-0x10]
  012c5:    	movq   xmm3,QWORD PTR [rsp]
  012ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d0:    	add    rsp,0x10
  012d4:    	test   rax,rax
  012d7:    	je     0x39e97
  012dd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  012e4: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  012eb: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  012f2:    	sub    rsp,0x10
  012f6:    	movq   QWORD PTR [rsp],xmm3
  012fb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01301:    	mov    rdx,rdi
  01304:    	mov    rcx,rsi
  01307:    	mov    rdi,rbx
  0130a:    	mov    rsi,r12
  0130d: 92 	movabs rax,0x5592e6de8460
  01317:    	call   rax
  01319:    	movq   xmm3,QWORD PTR [rsp]
  0131e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01324:    	add    rsp,0x10
  01328:    	test   rax,rax
  0132b:    	je     0x39ea6
  01331: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 _ = %14.call x=(%15; 1)              [<INVALID>]
  01338:    	sub    rsp,0x10
  0133c:    	movq   QWORD PTR [rsp],xmm3
  01341:    	movq   QWORD PTR [rsp+0x8],xmm4
  01347: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0134e: 92 	movabs rax,0x5592e6de1bb0
  01358:    	call   rax
  0135a:    	mov    r15d,eax
  0135d: 92 	movabs r13,0x5592e73f81d0
  01367:    	cmp    QWORD PTR [r13+0x8],0x0
  0136c:    	je     0x39eb5
  01372:    	cmp    r15d,DWORD PTR [r13-0x8]
  01376:    	jne    0x39eb5
  0137c:    	mov    eax,DWORD PTR [rip+0xffffffffffffbac3]        # 0xffffce45
  01382:    	cmp    DWORD PTR [r13-0x4],eax
  01386:    	jne    0x39eb5
  0138c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01395: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0139c:    	mov    QWORD PTR [rsp-0x40],rax
  013a1: 00 	mov    rdi,0x1
  013a8: ff 	mov    rax,QWORD PTR [r14-0xa8]
  013af:    	mov    QWORD PTR [rsp-0x48],rax
  013b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013bd:    	mov    r13,QWORD PTR [r13+0x8]
  013c1:    	mov    rax,QWORD PTR [r13+0x8]
  013c5:    	mov    QWORD PTR [rsp-0x30],rax
  013ca:    	mov    rax,QWORD PTR [r13+0x0]
  013ce:    	mov    r13,QWORD PTR [r13+0x10]
  013d2:    	mov    rsi,QWORD PTR [rbx]
  013d5:    	mov    QWORD PTR [rsp-0x18],rsi
  013da:    	lea    rsi,[rsp-0x18]
  013df:    	mov    QWORD PTR [rbx],rsi
  013e2:    	lea    r14,[rsp-0x10]
  013e7:    	mov    QWORD PTR [rsp-0x20],r14
  013ec:    	call   rax
  013ee:    	lea    r14,[rbp-0x8]
  013f2:    	mov    QWORD PTR [rbx],r14
  013f5:    	mov    r14,QWORD PTR [rbp-0x10]
  013f9:    	movq   xmm3,QWORD PTR [rsp]
  013fe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01404:    	add    rsp,0x10
  01408:    	test   rax,rax
  0140b:    	je     0x39ef9
:00098 
:00099 %14 = dynvar(2, %2)
  01411:    	mov    rax,QWORD PTR [r14-0x18]
  01415:    	mov    rax,QWORD PTR [rax]
  01418:    	mov    rax,QWORD PTR [rax-0x28]
  0141c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  01423:    	mov    rax,QWORD PTR [r14-0x18]
  01427:    	mov    rax,QWORD PTR [rax]
  0142a:    	mov    rax,QWORD PTR [rax-0x28]
  0142e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [<INVALID>]
  01435:    	sub    rsp,0x10
  01439:    	movq   QWORD PTR [rsp],xmm3
  0143e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01444: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0144b: 92 	movabs rax,0x5592e6de1bb0
  01455:    	call   rax
  01457:    	mov    r15d,eax
  0145a: 92 	movabs r13,0x5592e73f8210
  01464:    	cmp    QWORD PTR [r13+0x8],0x0
  01469:    	je     0x39f08
  0146f:    	cmp    r15d,DWORD PTR [r13-0x8]
  01473:    	jne    0x39f08
  01479:    	mov    eax,DWORD PTR [rip+0xffffffffffffb9c6]        # 0xffffce45
  0147f:    	cmp    DWORD PTR [r13-0x4],eax
  01483:    	jne    0x39f08
  01489: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01492: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01499:    	mov    QWORD PTR [rsp-0x40],rax
  0149e: 00 	mov    rdi,0x0
  014a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014ae:    	mov    r13,QWORD PTR [r13+0x8]
  014b2:    	mov    rax,QWORD PTR [r13+0x8]
  014b6:    	mov    QWORD PTR [rsp-0x30],rax
  014bb:    	mov    rax,QWORD PTR [r13+0x0]
  014bf:    	mov    r13,QWORD PTR [r13+0x10]
  014c3:    	mov    rsi,QWORD PTR [rbx]
  014c6:    	mov    QWORD PTR [rsp-0x18],rsi
  014cb:    	lea    rsi,[rsp-0x18]
  014d0:    	mov    QWORD PTR [rbx],rsi
  014d3:    	lea    r14,[rsp-0x10]
  014d8:    	mov    QWORD PTR [rsp-0x20],r14
  014dd:    	call   rax
  014df:    	lea    r14,[rbp-0x8]
  014e3:    	mov    QWORD PTR [rbx],r14
  014e6:    	mov    r14,QWORD PTR [rbp-0x10]
  014ea:    	movq   xmm3,QWORD PTR [rsp]
  014ef:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f5:    	add    rsp,0x10
  014f9:    	test   rax,rax
  014fc:    	je     0x39f4c
  01502: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [<INVALID>]
  01509:    	sub    rsp,0x10
  0150d:    	movq   QWORD PTR [rsp],xmm3
  01512:    	movq   QWORD PTR [rsp+0x8],xmm4
  01518: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0151f: 92 	movabs rax,0x5592e6de1bb0
  01529:    	call   rax
  0152b:    	mov    r15d,eax
  0152e: 92 	movabs r13,0x5592e73f8230
  01538:    	cmp    QWORD PTR [r13+0x8],0x0
  0153d:    	je     0x39f5b
  01543:    	cmp    r15d,DWORD PTR [r13-0x8]
  01547:    	jne    0x39f5b
  0154d:    	mov    eax,DWORD PTR [rip+0xffffffffffffb8f2]        # 0xffffce45
  01553:    	cmp    DWORD PTR [r13-0x4],eax
  01557:    	jne    0x39f5b
  0155d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01566: ff 	mov    rax,QWORD PTR [r14-0x98]
  0156d:    	mov    QWORD PTR [rsp-0x40],rax
  01572: 00 	mov    rdi,0x0
  01579: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01582:    	mov    r13,QWORD PTR [r13+0x8]
  01586:    	mov    rax,QWORD PTR [r13+0x8]
  0158a:    	mov    QWORD PTR [rsp-0x30],rax
  0158f:    	mov    rax,QWORD PTR [r13+0x0]
  01593:    	mov    r13,QWORD PTR [r13+0x10]
  01597:    	mov    rsi,QWORD PTR [rbx]
  0159a:    	mov    QWORD PTR [rsp-0x18],rsi
  0159f:    	lea    rsi,[rsp-0x18]
  015a4:    	mov    QWORD PTR [rbx],rsi
  015a7:    	lea    r14,[rsp-0x10]
  015ac:    	mov    QWORD PTR [rsp-0x20],r14
  015b1:    	call   rax
  015b3:    	lea    r14,[rbp-0x8]
  015b7:    	mov    QWORD PTR [rbx],r14
  015ba:    	mov    r14,QWORD PTR [rbp-0x10]
  015be:    	movq   xmm3,QWORD PTR [rsp]
  015c3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c9:    	add    rsp,0x10
  015cd:    	test   rax,rax
  015d0:    	je     0x39f9f
  015d6: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  015dd: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015e4: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  015eb:    	sub    rsp,0x10
  015ef:    	movq   QWORD PTR [rsp],xmm3
  015f4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015fa:    	mov    rdx,rdi
  015fd:    	mov    rcx,rsi
  01600:    	mov    rdi,rbx
  01603:    	mov    rsi,r12
  01606: 92 	movabs rax,0x5592e6de8460
  01610:    	call   rax
  01612:    	movq   xmm3,QWORD PTR [rsp]
  01617:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0161d:    	add    rsp,0x10
  01621:    	test   rax,rax
  01624:    	je     0x39fae
  0162a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00106 _ = %14.call y=(%15; 1)              [<INVALID>]
  01631:    	sub    rsp,0x10
  01635:    	movq   QWORD PTR [rsp],xmm3
  0163a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01640: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01647: 92 	movabs rax,0x5592e6de1bb0
  01651:    	call   rax
  01653:    	mov    r15d,eax
  01656: 92 	movabs r13,0x5592e73f8260
  01660:    	cmp    QWORD PTR [r13+0x8],0x0
  01665:    	je     0x39fbd
  0166b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0166f:    	jne    0x39fbd
  01675:    	mov    eax,DWORD PTR [rip+0xffffffffffffb7ca]        # 0xffffce45
  0167b:    	cmp    DWORD PTR [r13-0x4],eax
  0167f:    	jne    0x39fbd
  01685: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0168e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01695:    	mov    QWORD PTR [rsp-0x40],rax
  0169a: 00 	mov    rdi,0x1
  016a1: ff 	mov    rax,QWORD PTR [r14-0xa8]
  016a8:    	mov    QWORD PTR [rsp-0x48],rax
  016ad: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016b6:    	mov    r13,QWORD PTR [r13+0x8]
  016ba:    	mov    rax,QWORD PTR [r13+0x8]
  016be:    	mov    QWORD PTR [rsp-0x30],rax
  016c3:    	mov    rax,QWORD PTR [r13+0x0]
  016c7:    	mov    r13,QWORD PTR [r13+0x10]
  016cb:    	mov    rsi,QWORD PTR [rbx]
  016ce:    	mov    QWORD PTR [rsp-0x18],rsi
  016d3:    	lea    rsi,[rsp-0x18]
  016d8:    	mov    QWORD PTR [rbx],rsi
  016db:    	lea    r14,[rsp-0x10]
  016e0:    	mov    QWORD PTR [rsp-0x20],r14
  016e5:    	call   rax
  016e7:    	lea    r14,[rbp-0x8]
  016eb:    	mov    QWORD PTR [rbx],r14
  016ee:    	mov    r14,QWORD PTR [rbp-0x10]
  016f2:    	movq   xmm3,QWORD PTR [rsp]
  016f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016fd:    	add    rsp,0x10
  01701:    	test   rax,rax
  01704:    	je     0x3a001
:00107 
:00108 %14 = dynvar(2, %2)
  0170a:    	mov    rax,QWORD PTR [r14-0x18]
  0170e:    	mov    rax,QWORD PTR [rax]
  01711:    	mov    rax,QWORD PTR [rax-0x28]
  01715: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  0171c:    	mov    rax,QWORD PTR [r14-0x18]
  01720:    	mov    rax,QWORD PTR [rax]
  01723:    	mov    rax,QWORD PTR [rax-0x28]
  01727: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [<INVALID>]
  0172e:    	sub    rsp,0x10
  01732:    	movq   QWORD PTR [rsp],xmm3
  01737:    	movq   QWORD PTR [rsp+0x8],xmm4
  0173d: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01744: 92 	movabs rax,0x5592e6de1bb0
  0174e:    	call   rax
  01750:    	mov    r15d,eax
  01753: 92 	movabs r13,0x5592e73f82a0
  0175d:    	cmp    QWORD PTR [r13+0x8],0x0
  01762:    	je     0x3a010
  01768:    	cmp    r15d,DWORD PTR [r13-0x8]
  0176c:    	jne    0x3a010
  01772:    	mov    eax,DWORD PTR [rip+0xffffffffffffb6cd]        # 0xffffce45
  01778:    	cmp    DWORD PTR [r13-0x4],eax
  0177c:    	jne    0x3a010
  01782: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0178b: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01792:    	mov    QWORD PTR [rsp-0x40],rax
  01797: 00 	mov    rdi,0x0
  0179e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017a7:    	mov    r13,QWORD PTR [r13+0x8]
  017ab:    	mov    rax,QWORD PTR [r13+0x8]
  017af:    	mov    QWORD PTR [rsp-0x30],rax
  017b4:    	mov    rax,QWORD PTR [r13+0x0]
  017b8:    	mov    r13,QWORD PTR [r13+0x10]
  017bc:    	mov    rsi,QWORD PTR [rbx]
  017bf:    	mov    QWORD PTR [rsp-0x18],rsi
  017c4:    	lea    rsi,[rsp-0x18]
  017c9:    	mov    QWORD PTR [rbx],rsi
  017cc:    	lea    r14,[rsp-0x10]
  017d1:    	mov    QWORD PTR [rsp-0x20],r14
  017d6:    	call   rax
  017d8:    	lea    r14,[rbp-0x8]
  017dc:    	mov    QWORD PTR [rbx],r14
  017df:    	mov    r14,QWORD PTR [rbp-0x10]
  017e3:    	movq   xmm3,QWORD PTR [rsp]
  017e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ee:    	add    rsp,0x10
  017f2:    	test   rax,rax
  017f5:    	je     0x3a054
  017fb: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [<INVALID>]
  01802:    	sub    rsp,0x10
  01806:    	movq   QWORD PTR [rsp],xmm3
  0180b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01811: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01818: 92 	movabs rax,0x5592e6de1bb0
  01822:    	call   rax
  01824:    	mov    r15d,eax
  01827: 92 	movabs r13,0x5592e73f82c0
  01831:    	cmp    QWORD PTR [r13+0x8],0x0
  01836:    	je     0x3a063
  0183c:    	cmp    r15d,DWORD PTR [r13-0x8]
  01840:    	jne    0x3a063
  01846:    	mov    eax,DWORD PTR [rip+0xffffffffffffb5f9]        # 0xffffce45
  0184c:    	cmp    DWORD PTR [r13-0x4],eax
  01850:    	jne    0x3a063
  01856: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0185f: ff 	mov    rax,QWORD PTR [r14-0x98]
  01866:    	mov    QWORD PTR [rsp-0x40],rax
  0186b: 00 	mov    rdi,0x0
  01872: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0187b:    	mov    r13,QWORD PTR [r13+0x8]
  0187f:    	mov    rax,QWORD PTR [r13+0x8]
  01883:    	mov    QWORD PTR [rsp-0x30],rax
  01888:    	mov    rax,QWORD PTR [r13+0x0]
  0188c:    	mov    r13,QWORD PTR [r13+0x10]
  01890:    	mov    rsi,QWORD PTR [rbx]
  01893:    	mov    QWORD PTR [rsp-0x18],rsi
  01898:    	lea    rsi,[rsp-0x18]
  0189d:    	mov    QWORD PTR [rbx],rsi
  018a0:    	lea    r14,[rsp-0x10]
  018a5:    	mov    QWORD PTR [rsp-0x20],r14
  018aa:    	call   rax
  018ac:    	lea    r14,[rbp-0x8]
  018b0:    	mov    QWORD PTR [rbx],r14
  018b3:    	mov    r14,QWORD PTR [rbp-0x10]
  018b7:    	movq   xmm3,QWORD PTR [rsp]
  018bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018c2:    	add    rsp,0x10
  018c6:    	test   rax,rax
  018c9:    	je     0x3a0a7
  018cf: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  018d6: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  018dd: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  018e4:    	sub    rsp,0x10
  018e8:    	movq   QWORD PTR [rsp],xmm3
  018ed:    	movq   QWORD PTR [rsp+0x8],xmm4
  018f3:    	mov    rdx,rdi
  018f6:    	mov    rcx,rsi
  018f9:    	mov    rdi,rbx
  018fc:    	mov    rsi,r12
  018ff: 92 	movabs rax,0x5592e6de8460
  01909:    	call   rax
  0190b:    	movq   xmm3,QWORD PTR [rsp]
  01910:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01916:    	add    rsp,0x10
  0191a:    	test   rax,rax
  0191d:    	je     0x3a0b6
  01923: ff 	mov    QWORD PTR [r14-0xa8],rax
:00115 _ = %14.call z=(%15; 1)              [<INVALID>]
  0192a:    	sub    rsp,0x10
  0192e:    	movq   QWORD PTR [rsp],xmm3
  01933:    	movq   QWORD PTR [rsp+0x8],xmm4
  01939: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01940: 92 	movabs rax,0x5592e6de1bb0
  0194a:    	call   rax
  0194c:    	mov    r15d,eax
  0194f: 92 	movabs r13,0x5592e73f82f0
  01959:    	cmp    QWORD PTR [r13+0x8],0x0
  0195e:    	je     0x3a0c5
  01964:    	cmp    r15d,DWORD PTR [r13-0x8]
  01968:    	jne    0x3a0c5
  0196e:    	mov    eax,DWORD PTR [rip+0xffffffffffffb4d1]        # 0xffffce45
  01974:    	cmp    DWORD PTR [r13-0x4],eax
  01978:    	jne    0x3a0c5
  0197e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01987: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0198e:    	mov    QWORD PTR [rsp-0x40],rax
  01993: 00 	mov    rdi,0x1
  0199a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019a1:    	mov    QWORD PTR [rsp-0x48],rax
  019a6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  019af:    	mov    r13,QWORD PTR [r13+0x8]
  019b3:    	mov    rax,QWORD PTR [r13+0x8]
  019b7:    	mov    QWORD PTR [rsp-0x30],rax
  019bc:    	mov    rax,QWORD PTR [r13+0x0]
  019c0:    	mov    r13,QWORD PTR [r13+0x10]
  019c4:    	mov    rsi,QWORD PTR [rbx]
  019c7:    	mov    QWORD PTR [rsp-0x18],rsi
  019cc:    	lea    rsi,[rsp-0x18]
  019d1:    	mov    QWORD PTR [rbx],rsi
  019d4:    	lea    r14,[rsp-0x10]
  019d9:    	mov    QWORD PTR [rsp-0x20],r14
  019de:    	call   rax
  019e0:    	lea    r14,[rbp-0x8]
  019e4:    	mov    QWORD PTR [rbx],r14
  019e7:    	mov    r14,QWORD PTR [rbp-0x10]
  019eb:    	movq   xmm3,QWORD PTR [rsp]
  019f0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019f6:    	add    rsp,0x10
  019fa:    	test   rax,rax
  019fd:    	je     0x3a109
:00116 
:00117 %14 = %15
  01a03: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a0a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00118 ret %14
  01a11: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a18:    	leave  
  01a19:    	ret    
:00119 %14 = nil
  01a1a: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00120 ret %14
  01a25: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a2c:    	leave  
  01a2d:    	ret    
==> start whole compile: vnormalize FuncId(96) self_class:Vec start:[00000] bytecode:0x5592e73d9f90
<== finished compile. elapsed:49.9µs
offset:Pos(37924) code: 1994 bytes  data: 90 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x0
  0000e: jne    0x385d2
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    QWORD PTR [r14-0x60],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x385e1
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x385e1
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:7
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x30]
  00052: cmp    DWORD PTR [rip+0xffffffffffffb2a6],0x26        # 0xffffb2ff
  00059: jne    0x385f0
  0005f: cmp    DWORD PTR [rip+0xffffffffffffb29d],0x0        # 0xffffb303
  00066: je     0x7e
  0006c: mov    rdi,r12
  0006f: mov    rsi,QWORD PTR [rbx]
  00072: movabs rax,0x5592e6e3ca90
  0007c: call   rax
  0007e: mov    QWORD PTR [rsp-0x28],0x0
  00087: mov    rax,QWORD PTR [r14-0x30]
  0008b: mov    QWORD PTR [rsp-0x40],rax
  00090: mov    rdi,0x0
  00097: mov    QWORD PTR [rsp-0x38],0x0
  000a0: movabs rax,0x50000005f
  000aa: mov    QWORD PTR [rsp-0x30],rax
  000af: movabs r13,0x5592e7427f40
  000b9: mov    rsi,QWORD PTR [rbx]
  000bc: mov    QWORD PTR [rsp-0x18],rsi
  000c1: lea    rsi,[rsp-0x18]
  000c6: mov    QWORD PTR [rbx],rsi
  000c9: lea    r14,[rsp-0x10]
  000ce: mov    QWORD PTR [rsp-0x20],r14
  000d3: call   0xffffbc13
  000d8: lea    r14,[rbp-0x8]
  000dc: mov    QWORD PTR [rbx],r14
  000df: mov    r14,QWORD PTR [rbp-0x10]
  000e3: test   rax,rax
  000e6: je     0x385ff
  000ec: mov    QWORD PTR [r14-0x48],rax
:00002 
:00003 %1 = %3
  000f0: mov    rax,QWORD PTR [r14-0x48]
  000f4: mov    QWORD PTR [r14-0x38],rax
:00004 %3 = const[Vec]                      [Vec]
  000f8: mov    rax,QWORD PTR [rip+0xffffffffffffb20d]        # 0xffffb30c
  000ff: cmp    rax,QWORD PTR [rip+0x6d6]        # 0x7dc
  00106: jne    0x3860e
  0010c: mov    rax,QWORD PTR [rip+0x6b9]        # 0x7cc
  00113: mov    QWORD PTR [r14-0x48],rax
:00005 %4 = @x: Vec[IvarId(0)]
  00117: mov    rdi,QWORD PTR [r14-0x30]
  0011b: mov    rax,QWORD PTR [rdi+0x10]
  0011f: mov    QWORD PTR [r14-0x50],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00123: mov    rdi,QWORD PTR [r14-0x30]
  00127: mov    rax,QWORD PTR [rdi+0x18]
  0012b: mov    QWORD PTR [r14-0x58],rax
:00007 %6 = @z: Vec[IvarId(2)]
  0012f: mov    rdi,QWORD PTR [r14-0x30]
  00133: mov    rax,QWORD PTR [rdi+0x20]
  00137: mov    QWORD PTR [r14-0x60],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  0013b: mov    rdi,QWORD PTR [r14-0x48]
  0013f: test   rdi,0x7
  00146: jne    0x38659
  0014c: cmp    DWORD PTR [rdi+0x4],0x2c
  00150: jne    0x38659
  00156: cmp    DWORD PTR [rip+0xffffffffffffb1a2],0x26        # 0xffffb2ff
  0015d: jne    0x38659
  00163: mov    r9,0x0
  0016a: mov    rdx,rdi
  0016d: mov    QWORD PTR [rsp-0x40],rcx
  00172: mov    QWORD PTR [rsp-0x28],0x0
  0017b: lea    rcx,[r14-0x50]
  0017f: mov    r8,0x3
  00186: mov    rsi,QWORD PTR [rbx]
  00189: mov    QWORD PTR [rsp-0x18],rsi
  0018e: lea    rsi,[rsp-0x18]
  00193: mov    QWORD PTR [rbx],rsi
  00196: lea    r14,[rsp-0x10]
  0019b: mov    QWORD PTR [rsp-0x20],r14
  001a0: call   0x38668
  001a5: lea    r14,[rbp-0x8]
  001a9: mov    QWORD PTR [rbx],r14
  001ac: mov    r14,QWORD PTR [rbp-0x10]
  001b0: test   rax,rax
  001b3: je     0x3869a
  001b9: mov    QWORD PTR [r14-0x40],rax
:00009 
:00010 %3 = literal[1e-17]
  001bd: movq   xmm2,QWORD PTR [rip+0x627]        # 0x7ec
  001c5: movabs rax,0xe33877aa3236a4ba
  001cf: mov    QWORD PTR [r14-0x48],rax
:00011 _%3 = %1 > %3                        [Float][Float]
  001d3: mov    rdi,QWORD PTR [r14-0x38]
  001d7: test   rdi,0x1
  001de: jne    0x386a9
  001e4: test   rdi,0x2
  001eb: je     0x227
  001f1: xorps  xmm3,xmm3
  001f4: movabs rax,0x8000000000000002
  001fe: cmp    rdi,rax
  00201: je     0x239
  00207: mov    rax,rdi
  0020a: sar    rax,0x3f
  0020e: add    rax,0x2
  00212: and    rdi,0xfffffffffffffffc
  00216: or     rdi,rax
  00219: rol    rdi,0x3d
  0021d: movq   xmm3,rdi
  00222: jmp    0x239
  00227: call   0xffff6c59
  0022c: test   rax,rax
  0022f: je     0x386a9
  00235: movq   xmm3,xmm0
  00239: ucomisd xmm3,xmm2
  0023d: jbe    0x388da
:00012 condnotbr _%3 =>:00029
:00013 %3 = %2.call x()                     [Vec]
  00243: mov    rdi,QWORD PTR [r14-0x40]
  00247: test   rdi,0x7
  0024e: jne    0x386b8
  00254: cmp    DWORD PTR [rdi+0x4],0x2b
  00258: jne    0x386b8
  0025e: cmp    DWORD PTR [rip+0xffffffffffffb09a],0x26        # 0xffffb2ff
  00265: jne    0x386b8
  0026b: mov    esi,DWORD PTR [rip+0x587]        # 0x7f8
  00271: cmp    esi,0xffffffff
  00274: je     0x386c7
  0027a: cmp    WORD PTR [rdi+0x2],0x3
  0027f: jne    0x298
  00285: cmp    esi,0x6
  00288: jge    0x298
  0028e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00293: jmp    0x2a4
  00298: movabs rax,0x5592e6dd3800
  002a2: call   rax
  002a4: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 %3 = %3 / %1                         [Float][Float]
  002a8: mov    rdi,QWORD PTR [r14-0x48]
  002ac: test   rdi,0x1
  002b3: jne    0x386f0
  002b9: test   rdi,0x2
  002c0: je     0x2fc
  002c6: xorps  xmm2,xmm2
  002c9: movabs rax,0x8000000000000002
  002d3: cmp    rdi,rax
  002d6: je     0x30e
  002dc: mov    rax,rdi
  002df: sar    rax,0x3f
  002e3: add    rax,0x2
  002e7: and    rdi,0xfffffffffffffffc
  002eb: or     rdi,rax
  002ee: rol    rdi,0x3d
  002f2: movq   xmm2,rdi
  002f7: jmp    0x30e
  002fc: call   0xffff6c59
  00301: test   rax,rax
  00304: je     0x386f0
  0030a: movq   xmm2,xmm0
  0030e: mov    rdi,QWORD PTR [r14-0x38]
  00312: test   rdi,0x1
  00319: jne    0x386ff
  0031f: test   rdi,0x2
  00326: je     0x362
  0032c: xorps  xmm3,xmm3
  0032f: movabs rax,0x8000000000000002
  00339: cmp    rdi,rax
  0033c: je     0x374
  00342: mov    rax,rdi
  00345: sar    rax,0x3f
  00349: add    rax,0x2
  0034d: and    rdi,0xfffffffffffffffc
  00351: or     rdi,rax
  00354: rol    rdi,0x3d
  00358: movq   xmm3,rdi
  0035d: jmp    0x374
  00362: call   0xffff6c59
  00367: test   rax,rax
  0036a: je     0x386ff
  00370: movq   xmm3,xmm0
  00374: movq   rax,xmm3
  00379: test   rax,rax
  0037c: je     0xffff6c25
  00382: divsd  xmm2,xmm3
:00016 _ = %2.call x=(%3; 1)                [Vec]
  00386: movq   xmm0,xmm2
  0038a: call   0xffff6d7d
  0038f: mov    QWORD PTR [r14-0x48],rax
  00393: mov    rdi,QWORD PTR [r14-0x40]
  00397: test   rdi,0x7
  0039e: jne    0x3870e
  003a4: cmp    DWORD PTR [rdi+0x4],0x2b
  003a8: jne    0x3870e
  003ae: cmp    DWORD PTR [rip+0xffffffffffffaf4a],0x26        # 0xffffb2ff
  003b5: jne    0x3870e
  003bb: mov    esi,DWORD PTR [rip+0x43f]        # 0x800
  003c1: cmp    esi,0xffffffff
  003c4: je     0x3872c
  003ca: cmp    WORD PTR [rdi+0x2],0x3
  003cf: jne    0x3ec
  003d5: cmp    esi,0x6
  003d8: jge    0x3ec
  003de: mov    rax,QWORD PTR [r14-0x48]
  003e2: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  003e7: jmp    0x417
  003ec: sub    rsp,0x10
  003f0: movq   QWORD PTR [rsp],xmm2
  003f5: mov    rdx,QWORD PTR [r14-0x48]
  003f9: movabs rax,0x5592e6dd3a80
  00403: call   rax
  00405: movq   xmm2,QWORD PTR [rsp]
  0040a: add    rsp,0x10
  0040e: test   rax,rax
  00411: je     0x3871d
:00017 
:00018 %3 = %2.call y()                     [Vec]
  00417: mov    rdi,QWORD PTR [r14-0x40]
  0041b: test   rdi,0x7
  00422: jne    0x3876e
  00428: cmp    DWORD PTR [rdi+0x4],0x2b
  0042c: jne    0x3876e
  00432: cmp    DWORD PTR [rip+0xffffffffffffaec6],0x26        # 0xffffb2ff
  00439: jne    0x3876e
  0043f: mov    esi,DWORD PTR [rip+0x3c3]        # 0x808
  00445: cmp    esi,0xffffffff
  00448: je     0x3877d
  0044e: cmp    WORD PTR [rdi+0x2],0x3
  00453: jne    0x46c
  00459: cmp    esi,0x6
  0045c: jge    0x46c
  00462: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00467: jmp    0x478
  0046c: movabs rax,0x5592e6dd3800
  00476: call   rax
  00478: mov    QWORD PTR [r14-0x48],rax
:00019 
:00020 %3 = %3 / %1                         [Float][Float]
  0047c: mov    rdi,QWORD PTR [r14-0x48]
  00480: test   rdi,0x1
  00487: jne    0x387a6
  0048d: test   rdi,0x2
  00494: je     0x4d0
  0049a: xorps  xmm2,xmm2
  0049d: movabs rax,0x8000000000000002
  004a7: cmp    rdi,rax
  004aa: je     0x4e2
  004b0: mov    rax,rdi
  004b3: sar    rax,0x3f
  004b7: add    rax,0x2
  004bb: and    rdi,0xfffffffffffffffc
  004bf: or     rdi,rax
  004c2: rol    rdi,0x3d
  004c6: movq   xmm2,rdi
  004cb: jmp    0x4e2
  004d0: call   0xffff6c59
  004d5: test   rax,rax
  004d8: je     0x387a6
  004de: movq   xmm2,xmm0
  004e2: mov    rdi,QWORD PTR [r14-0x38]
  004e6: test   rdi,0x1
  004ed: jne    0x387b5
  004f3: test   rdi,0x2
  004fa: je     0x536
  00500: xorps  xmm3,xmm3
  00503: movabs rax,0x8000000000000002
  0050d: cmp    rdi,rax
  00510: je     0x548
  00516: mov    rax,rdi
  00519: sar    rax,0x3f
  0051d: add    rax,0x2
  00521: and    rdi,0xfffffffffffffffc
  00525: or     rdi,rax
  00528: rol    rdi,0x3d
  0052c: movq   xmm3,rdi
  00531: jmp    0x548
  00536: call   0xffff6c59
  0053b: test   rax,rax
  0053e: je     0x387b5
  00544: movq   xmm3,xmm0
  00548: movq   rax,xmm3
  0054d: test   rax,rax
  00550: je     0xffff6c25
  00556: divsd  xmm2,xmm3
:00021 _ = %2.call y=(%3; 1)                [Vec]
  0055a: movq   xmm0,xmm2
  0055e: call   0xffff6d7d
  00563: mov    QWORD PTR [r14-0x48],rax
  00567: mov    rdi,QWORD PTR [r14-0x40]
  0056b: test   rdi,0x7
  00572: jne    0x387c4
  00578: cmp    DWORD PTR [rdi+0x4],0x2b
  0057c: jne    0x387c4
  00582: cmp    DWORD PTR [rip+0xffffffffffffad76],0x26        # 0xffffb2ff
  00589: jne    0x387c4
  0058f: mov    esi,DWORD PTR [rip+0x27b]        # 0x810
  00595: cmp    esi,0xffffffff
  00598: je     0x387e2
  0059e: cmp    WORD PTR [rdi+0x2],0x3
  005a3: jne    0x5c0
  005a9: cmp    esi,0x6
  005ac: jge    0x5c0
  005b2: mov    rax,QWORD PTR [r14-0x48]
  005b6: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  005bb: jmp    0x5eb
  005c0: sub    rsp,0x10
  005c4: movq   QWORD PTR [rsp],xmm2
  005c9: mov    rdx,QWORD PTR [r14-0x48]
  005cd: movabs rax,0x5592e6dd3a80
  005d7: call   rax
  005d9: movq   xmm2,QWORD PTR [rsp]
  005de: add    rsp,0x10
  005e2: test   rax,rax
  005e5: je     0x387d3
:00022 
:00023 %3 = %2.call z()                     [Vec]
  005eb: mov    rdi,QWORD PTR [r14-0x40]
  005ef: test   rdi,0x7
  005f6: jne    0x38824
  005fc: cmp    DWORD PTR [rdi+0x4],0x2b
  00600: jne    0x38824
  00606: cmp    DWORD PTR [rip+0xffffffffffffacf2],0x26        # 0xffffb2ff
  0060d: jne    0x38824
  00613: mov    esi,DWORD PTR [rip+0x1ff]        # 0x818
  00619: cmp    esi,0xffffffff
  0061c: je     0x38833
  00622: cmp    WORD PTR [rdi+0x2],0x3
  00627: jne    0x640
  0062d: cmp    esi,0x6
  00630: jge    0x640
  00636: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0063b: jmp    0x64c
  00640: movabs rax,0x5592e6dd3800
  0064a: call   rax
  0064c: mov    QWORD PTR [r14-0x48],rax
:00024 
:00025 %3 = %3 / %1                         [Float][Float]
  00650: mov    rdi,QWORD PTR [r14-0x48]
  00654: test   rdi,0x1
  0065b: jne    0x3885c
  00661: test   rdi,0x2
  00668: je     0x6a4
  0066e: xorps  xmm2,xmm2
  00671: movabs rax,0x8000000000000002
  0067b: cmp    rdi,rax
  0067e: je     0x6b6
  00684: mov    rax,rdi
  00687: sar    rax,0x3f
  0068b: add    rax,0x2
  0068f: and    rdi,0xfffffffffffffffc
  00693: or     rdi,rax
  00696: rol    rdi,0x3d
  0069a: movq   xmm2,rdi
  0069f: jmp    0x6b6
  006a4: call   0xffff6c59
  006a9: test   rax,rax
  006ac: je     0x3885c
  006b2: movq   xmm2,xmm0
  006b6: mov    rdi,QWORD PTR [r14-0x38]
  006ba: test   rdi,0x1
  006c1: jne    0x3886b
  006c7: test   rdi,0x2
  006ce: je     0x70a
  006d4: xorps  xmm3,xmm3
  006d7: movabs rax,0x8000000000000002
  006e1: cmp    rdi,rax
  006e4: je     0x71c
  006ea: mov    rax,rdi
  006ed: sar    rax,0x3f
  006f1: add    rax,0x2
  006f5: and    rdi,0xfffffffffffffffc
  006f9: or     rdi,rax
  006fc: rol    rdi,0x3d
  00700: movq   xmm3,rdi
  00705: jmp    0x71c
  0070a: call   0xffff6c59
  0070f: test   rax,rax
  00712: je     0x3886b
  00718: movq   xmm3,xmm0
  0071c: movq   rax,xmm3
  00721: test   rax,rax
  00724: je     0xffff6c25
  0072a: divsd  xmm2,xmm3
:00026 _ = %2.call z=(%3; 1)                [Vec]
  0072e: movq   xmm0,xmm2
  00732: call   0xffff6d7d
  00737: mov    QWORD PTR [r14-0x48],rax
  0073b: mov    rdi,QWORD PTR [r14-0x40]
  0073f: test   rdi,0x7
  00746: jne    0x3887a
  0074c: cmp    DWORD PTR [rdi+0x4],0x2b
  00750: jne    0x3887a
  00756: cmp    DWORD PTR [rip+0xffffffffffffaba2],0x26        # 0xffffb2ff
  0075d: jne    0x3887a
  00763: mov    esi,DWORD PTR [rip+0xb7]        # 0x820
  00769: cmp    esi,0xffffffff
  0076c: je     0x38898
  00772: cmp    WORD PTR [rdi+0x2],0x3
  00777: jne    0x794
  0077d: cmp    esi,0x6
  00780: jge    0x794
  00786: mov    rax,QWORD PTR [r14-0x48]
  0078a: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0078f: jmp    0x7bf
  00794: sub    rsp,0x10
  00798: movq   QWORD PTR [rsp],xmm2
  0079d: mov    rdx,QWORD PTR [r14-0x48]
  007a1: movabs rax,0x5592e6dd3a80
  007ab: call   rax
  007ad: movq   xmm2,QWORD PTR [rsp]
  007b2: add    rsp,0x10
  007b6: test   rax,rax
  007b9: je     0x38889
:00027 
:00028 br =>:00029
  007bf: jmp    0x388f3
:00029 ret %2
  007c4: mov    rax,QWORD PTR [r14-0x40]
  007c8: leave  
  007c9: ret    
==> start whole compile: vlength FuncId(95) self_class:Vec start:[00000] bytecode:0x5592e7427f40
<== finished compile. elapsed:22.6µs
offset:Pos(40008) code: 868 bytes  data: 28 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x380e8
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x380f7
  0003c: cmp    DWORD PTR [rdi+0x4],0x2b
  00040: jne    0x380f7
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = const[Math]                     [Math]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffffaa9b]        # 0xffffaae8
  0004d: cmp    rax,QWORD PTR [rip+0x324]        # 0x378
  00054: jne    0x38106
  0005a: mov    rax,QWORD PTR [rip+0x307]        # 0x368
  00061: mov    QWORD PTR [r14-0x38],rax
:00002 %2 = @x: Vec[IvarId(0)]
  00065: mov    rdi,QWORD PTR [r14-0x30]
  00069: mov    rax,QWORD PTR [rdi+0x10]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00003 %3 = @x: Vec[IvarId(0)]
  00071: mov    rdi,QWORD PTR [r14-0x30]
  00075: mov    rax,QWORD PTR [rdi+0x10]
  00079: mov    QWORD PTR [r14-0x48],rax
:00004 %2 = %2 * %3                         [Float][Float]
  0007d: mov    rdi,QWORD PTR [r14-0x40]
  00081: test   rdi,0x1
  00088: jne    0x38151
  0008e: test   rdi,0x2
  00095: je     0xd1
  0009b: xorps  xmm2,xmm2
  0009e: movabs rax,0x8000000000000002
  000a8: cmp    rdi,rax
  000ab: je     0xe3
  000b1: mov    rax,rdi
  000b4: sar    rax,0x3f
  000b8: add    rax,0x2
  000bc: and    rdi,0xfffffffffffffffc
  000c0: or     rdi,rax
  000c3: rol    rdi,0x3d
  000c7: movq   xmm2,rdi
  000cc: jmp    0xe3
  000d1: call   0xffff6435
  000d6: test   rax,rax
  000d9: je     0x38151
  000df: movq   xmm2,xmm0
  000e3: mov    rdi,QWORD PTR [r14-0x48]
  000e7: test   rdi,0x1
  000ee: jne    0x38160
  000f4: test   rdi,0x2
  000fb: je     0x137
  00101: xorps  xmm3,xmm3
  00104: movabs rax,0x8000000000000002
  0010e: cmp    rdi,rax
  00111: je     0x149
  00117: mov    rax,rdi
  0011a: sar    rax,0x3f
  0011e: add    rax,0x2
  00122: and    rdi,0xfffffffffffffffc
  00126: or     rdi,rax
  00129: rol    rdi,0x3d
  0012d: movq   xmm3,rdi
  00132: jmp    0x149
  00137: call   0xffff6435
  0013c: test   rax,rax
  0013f: je     0x38160
  00145: movq   xmm3,xmm0
  00149: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  0014d: mov    rdi,QWORD PTR [r14-0x30]
  00151: mov    rax,QWORD PTR [rdi+0x18]
  00155: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = @y: Vec[IvarId(1)]
  00159: mov    rdi,QWORD PTR [r14-0x30]
  0015d: mov    rax,QWORD PTR [rdi+0x18]
  00161: mov    QWORD PTR [r14-0x50],rax
:00007 %3 = %3 * %4                         [Float][Float]
  00165: mov    rdi,QWORD PTR [r14-0x48]
  00169: test   rdi,0x1
  00170: jne    0x3816f
  00176: test   rdi,0x2
  0017d: je     0x1b9
  00183: xorps  xmm3,xmm3
  00186: movabs rax,0x8000000000000002
  00190: cmp    rdi,rax
  00193: je     0x1cb
  00199: mov    rax,rdi
  0019c: sar    rax,0x3f
  001a0: add    rax,0x2
  001a4: and    rdi,0xfffffffffffffffc
  001a8: or     rdi,rax
  001ab: rol    rdi,0x3d
  001af: movq   xmm3,rdi
  001b4: jmp    0x1cb
  001b9: call   0xffff6435
  001be: test   rax,rax
  001c1: je     0x3816f
  001c7: movq   xmm3,xmm0
  001cb: mov    rdi,QWORD PTR [r14-0x50]
  001cf: test   rdi,0x1
  001d6: jne    0x3818b
  001dc: test   rdi,0x2
  001e3: je     0x21f
  001e9: xorps  xmm4,xmm4
  001ec: movabs rax,0x8000000000000002
  001f6: cmp    rdi,rax
  001f9: je     0x231
  001ff: mov    rax,rdi
  00202: sar    rax,0x3f
  00206: add    rax,0x2
  0020a: and    rdi,0xfffffffffffffffc
  0020e: or     rdi,rax
  00211: rol    rdi,0x3d
  00215: movq   xmm4,rdi
  0021a: jmp    0x231
  0021f: call   0xffff6435
  00224: test   rax,rax
  00227: je     0x3818b
  0022d: movq   xmm4,xmm0
  00231: mulsd  xmm3,xmm4
:00008 %2 = %2 + %3                         [Float][Float]
  00235: addsd  xmm2,xmm3
:00009 %3 = @z: Vec[IvarId(2)]
  00239: mov    rdi,QWORD PTR [r14-0x30]
  0023d: mov    rax,QWORD PTR [rdi+0x20]
  00241: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = @z: Vec[IvarId(2)]
  00245: mov    rdi,QWORD PTR [r14-0x30]
  00249: mov    rax,QWORD PTR [rdi+0x20]
  0024d: mov    QWORD PTR [r14-0x50],rax
:00011 %3 = %3 * %4                         [Float][Float]
  00251: mov    rdi,QWORD PTR [r14-0x48]
  00255: test   rdi,0x1
  0025c: jne    0x381a7
  00262: test   rdi,0x2
  00269: je     0x2a5
  0026f: xorps  xmm3,xmm3
  00272: movabs rax,0x8000000000000002
  0027c: cmp    rdi,rax
  0027f: je     0x2b7
  00285: mov    rax,rdi
  00288: sar    rax,0x3f
  0028c: add    rax,0x2
  00290: and    rdi,0xfffffffffffffffc
  00294: or     rdi,rax
  00297: rol    rdi,0x3d
  0029b: movq   xmm3,rdi
  002a0: jmp    0x2b7
  002a5: call   0xffff6435
  002aa: test   rax,rax
  002ad: je     0x381a7
  002b3: movq   xmm3,xmm0
  002b7: mov    rdi,QWORD PTR [r14-0x50]
  002bb: test   rdi,0x1
  002c2: jne    0x381c3
  002c8: test   rdi,0x2
  002cf: je     0x30b
  002d5: xorps  xmm4,xmm4
  002d8: movabs rax,0x8000000000000002
  002e2: cmp    rdi,rax
  002e5: je     0x31d
  002eb: mov    rax,rdi
  002ee: sar    rax,0x3f
  002f2: add    rax,0x2
  002f6: and    rdi,0xfffffffffffffffc
  002fa: or     rdi,rax
  002fd: rol    rdi,0x3d
  00301: movq   xmm4,rdi
  00306: jmp    0x31d
  0030b: call   0xffff6435
  00310: test   rax,rax
  00313: je     0x381c3
  00319: movq   xmm4,xmm0
  0031d: mulsd  xmm3,xmm4
:00012 %2 = %2 + %3                         [Float][Float]
  00321: addsd  xmm2,xmm3
:00013 %1 = %1.inline MathSqrt(%2; 1)       [#<Class:Math>]
  00325: mov    rdi,QWORD PTR [r14-0x38]
  00329: test   rdi,0x7
  00330: jne    0x381df
  00336: cmp    DWORD PTR [rdi+0x4],0x24
  0033a: jne    0x381df
  00340: cmp    DWORD PTR [rip+0xffffffffffffa794],0x26        # 0xffffaadb
  00347: jne    0x381df
  0034d: sqrtsd xmm5,xmm2
:00014 
:00015 ret %1
  00351: movq   xmm0,xmm5
  00355: call   0xffff6559
  0035a: mov    QWORD PTR [r14-0x38],rax
  0035e: mov    rax,QWORD PTR [r14-0x38]
  00362: leave  
  00363: ret    
==> start whole compile: initialize FuncId(101) self_class:Ray start:[00000] bytecode:0x5592e73dc3e0
<== finished compile. elapsed:13µs
offset:Pos(40904) code: 93 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: jne    0x37e88
  00014: mov    QWORD PTR [r14-0x48],0x4
  0001c: mov    rdi,QWORD PTR [r14-0x30]
  00020: test   rdi,0x7
  00027: jne    0x37e97
  0002d: cmp    DWORD PTR [rdi+0x4],0x31
  00031: jne    0x37e97
:00000 init_method reg:4 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [r14-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [r14-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  0004f: mov    rax,QWORD PTR [r14-0x40]
  00053: mov    QWORD PTR [r14-0x48],rax
:00004 ret %3
  00057: mov    rax,QWORD PTR [r14-0x48]
  0005b: leave  
  0005c: ret    
==> start whole compile: initialize FuncId(102) self_class:Isect start:[00000] bytecode:0x5592e73e03f0
<== finished compile. elapsed:42.4µs
offset:Pos(40997) code: 695 bytes  data: 172 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x37e49
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x37e58
  0003c: cmp    DWORD PTR [rdi+0x4],0x33
  00040: jne    0x37e58
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  00046: movq   xmm2,QWORD PTR [rip+0x26d]        # 0x2bb
  0004e: movabs rax,0xb18968000000002
  00058: mov    QWORD PTR [r14-0x38],rax
:00002 @t: Isect[IvarId(0)] = %1
  0005c: mov    rdi,QWORD PTR [r14-0x30]
  00060: mov    rax,QWORD PTR [r14-0x38]
  00064: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  00068: mov    rax,0x14
  0006f: mov    QWORD PTR [r14-0x38],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00073: mov    rdi,QWORD PTR [r14-0x30]
  00077: mov    rax,QWORD PTR [r14-0x38]
  0007b: mov    QWORD PTR [rdi+0x18],rax
:00005 %1 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffffa685]        # 0xffffa70b
  00086: cmp    rax,QWORD PTR [rip+0x24e]        # 0x2db
  0008d: jne    0x37e67
  00093: mov    rax,QWORD PTR [rip+0x231]        # 0x2cb
  0009a: mov    QWORD PTR [r14-0x38],rax
:00006 %2 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0x245]        # 0x2eb
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x40],rax
:00007 %3 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0x23f]        # 0x2fb
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x48],rax
:00008 %4 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0x239]        # 0x30b
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x50],rax
:00009 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x38]
  000e4: test   rdi,0x7
  000eb: jne    0x37eb2
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x37eb2
  000fb: cmp    DWORD PTR [rip+0xffffffffffffa5fc],0x26        # 0xffffa6fe
  00102: jne    0x37eb2
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x40]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x37ec1
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: test   rax,rax
  00182: je     0x37ef3
  00188: mov    QWORD PTR [r14-0x38],rax
:00010 
:00011 @pl: Isect[IvarId(2)] = %1
  0018c: mov    rdi,QWORD PTR [r14-0x30]
  00190: mov    rax,QWORD PTR [r14-0x38]
  00194: mov    QWORD PTR [rdi+0x20],rax
:00012 %1 = const[Vec]                      [Vec]
  00198: mov    rax,QWORD PTR [rip+0xffffffffffffa56c]        # 0xffffa70b
  0019f: cmp    rax,QWORD PTR [rip+0x185]        # 0x32b
  001a6: jne    0x37f02
  001ac: mov    rax,QWORD PTR [rip+0x168]        # 0x31b
  001b3: mov    QWORD PTR [r14-0x38],rax
:00013 %2 = literal[0.0]
  001b7: movq   xmm2,QWORD PTR [rip+0x17c]        # 0x33b
  001bf: movabs rax,0x8000000000000002
  001c9: mov    QWORD PTR [r14-0x40],rax
:00014 %3 = literal[0.0]
  001cd: movq   xmm3,QWORD PTR [rip+0x176]        # 0x34b
  001d5: movabs rax,0x8000000000000002
  001df: mov    QWORD PTR [r14-0x48],rax
:00015 %4 = literal[0.0]
  001e3: movq   xmm4,QWORD PTR [rip+0x170]        # 0x35b
  001eb: movabs rax,0x8000000000000002
  001f5: mov    QWORD PTR [r14-0x50],rax
:00016 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  001f9: mov    rdi,QWORD PTR [r14-0x38]
  001fd: test   rdi,0x7
  00204: jne    0x37f77
  0020a: cmp    DWORD PTR [rdi+0x4],0x2c
  0020e: jne    0x37f77
  00214: cmp    DWORD PTR [rip+0xffffffffffffa4e3],0x26        # 0xffffa6fe
  0021b: jne    0x37f77
  00221: mov    r9,0x0
  00228: sub    rsp,0x20
  0022c: movq   QWORD PTR [rsp],xmm2
  00231: movq   QWORD PTR [rsp+0x8],xmm3
  00237: movq   QWORD PTR [rsp+0x10],xmm4
  0023d: mov    rdx,rdi
  00240: mov    QWORD PTR [rsp-0x40],rcx
  00245: mov    QWORD PTR [rsp-0x28],0x0
  0024e: lea    rcx,[r14-0x40]
  00252: mov    r8,0x3
  00259: mov    rsi,QWORD PTR [rbx]
  0025c: mov    QWORD PTR [rsp-0x18],rsi
  00261: lea    rsi,[rsp-0x18]
  00266: mov    QWORD PTR [rbx],rsi
  00269: lea    r14,[rsp-0x10]
  0026e: mov    QWORD PTR [rsp-0x20],r14
  00273: call   0x37f86
  00278: lea    r14,[rbp-0x8]
  0027c: mov    QWORD PTR [rbx],r14
  0027f: mov    r14,QWORD PTR [rbp-0x10]
  00283: movq   xmm2,QWORD PTR [rsp]
  00288: movq   xmm3,QWORD PTR [rsp+0x8]
  0028e: movq   xmm4,QWORD PTR [rsp+0x10]
  00294: add    rsp,0x20
  00298: test   rax,rax
  0029b: je     0x37fb8
  002a1: mov    QWORD PTR [r14-0x38],rax
:00017 
:00018 @n: Isect[IvarId(3)] = %1
  002a5: mov    rdi,QWORD PTR [r14-0x30]
  002a9: mov    rax,QWORD PTR [r14-0x38]
  002ad: mov    QWORD PTR [rdi+0x28],rax
:00019 ret %1
  002b1: mov    rax,QWORD PTR [r14-0x38]
  002b5: leave  
  002b6: ret    
==> start whole compile: intersect FuncId(100) self_class:Plane start:[00000] bytecode:0x5592e73e8da0
<== finished compile. elapsed:91.8µs
offset:Pos(41864) code: 5464 bytes  data: 104 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x37c64
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x37c73
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x37c73
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x37c82
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x37c82
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffffa301],0x26        # 0xffffa39b
  0009a:    	jne    0x37c82
  000a0: 00 	cmp    DWORD PTR [rip+0xffffffffffffa2f8],0x0        # 0xffffa39f
  000a7:    	je     0xbf
  000ad:    	mov    rdi,r12
  000b0:    	mov    rsi,QWORD PTR [rbx]
  000b3: 92 	movabs rax,0x5592e6e3ca90
  000bd:    	call   rax
  000bf: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000c8:    	mov    rax,QWORD PTR [r14-0x68]
  000cc:    	mov    QWORD PTR [rsp-0x40],rax
  000d1: 00 	mov    rdi,0x1
  000d8:    	mov    rax,QWORD PTR [r14-0x70]
  000dc:    	mov    QWORD PTR [rsp-0x48],rax
  000e1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000ea: 05 	movabs rax,0x100050000005e
  000f4:    	mov    QWORD PTR [rsp-0x30],rax
  000f9: 92 	movabs r13,0x5592e73e6700
  00103:    	mov    rsi,QWORD PTR [rbx]
  00106:    	mov    QWORD PTR [rsp-0x18],rsi
  0010b:    	lea    rsi,[rsp-0x18]
  00110:    	mov    QWORD PTR [rbx],rsi
  00113:    	lea    r14,[rsp-0x10]
  00118:    	mov    QWORD PTR [rsp-0x20],r14
  0011d:    	call   0xffffb070
  00122:    	lea    r14,[rbp-0x8]
  00126:    	mov    QWORD PTR [rbx],r14
  00129:    	mov    r14,QWORD PTR [rbp-0x10]
  0012d:    	test   rax,rax
  00130:    	je     0x37c91
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x37ca0
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xffff5cf5
  00193:    	test   rax,rax
  00196:    	je     0x37ca0
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x13b1]        # 0x1558
:00006 %7 = %1.call dir()                   [Ray]
  001a7:    	movq   xmm0,xmm2
  001ab:    	call   0xffff5e19
  001b0:    	mov    QWORD PTR [r14-0x48],rax
  001b4:    	mov    rdi,QWORD PTR [r14-0x38]
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x37caf
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x31
  001c9:    	jne    0x37caf
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffffa1c5],0x26        # 0xffffa39b
  001d6:    	jne    0x37caf
  001dc:    	mov    esi,DWORD PTR [rip+0x1382]        # 0x1564
  001e2:    	cmp    esi,0xffffffff
  001e5:    	je     0x37cbe
  001eb:    	cmp    WORD PTR [rdi+0x2],0x3
  001f0:    	jne    0x209
  001f6:    	cmp    esi,0x6
  001f9:    	jge    0x209
  001ff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00204:    	jmp    0x215
  00209: 92 	movabs rax,0x5592e6dd3800
  00213:    	call   rax
  00215:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00219:    	mov    rdi,QWORD PTR [r14-0x30]
  0021d:    	mov    rax,QWORD PTR [rdi+0x18]
  00221:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  00225:    	mov    rdi,QWORD PTR [r14-0x68]
  00229: 00 	test   rdi,0x7
  00230:    	jne    0x37ce7
  00236:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0023a:    	jne    0x37ce7
  00240: 26 	cmp    DWORD PTR [rip+0xffffffffffffa154],0x26        # 0xffffa39b
  00247:    	jne    0x37ce7
  0024d: 00 	cmp    DWORD PTR [rip+0xffffffffffffa14b],0x0        # 0xffffa39f
  00254:    	je     0x26c
  0025a:    	mov    rdi,r12
  0025d:    	mov    rsi,QWORD PTR [rbx]
  00260: 92 	movabs rax,0x5592e6e3ca90
  0026a:    	call   rax
  0026c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00275:    	mov    rax,QWORD PTR [r14-0x68]
  00279:    	mov    QWORD PTR [rsp-0x40],rax
  0027e: 00 	mov    rdi,0x1
  00285:    	mov    rax,QWORD PTR [r14-0x70]
  00289:    	mov    QWORD PTR [rsp-0x48],rax
  0028e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00297: 05 	movabs rax,0x100050000005e
  002a1:    	mov    QWORD PTR [rsp-0x30],rax
  002a6: 92 	movabs r13,0x5592e73e6700
  002b0:    	mov    rsi,QWORD PTR [rbx]
  002b3:    	mov    QWORD PTR [rsp-0x18],rsi
  002b8:    	lea    rsi,[rsp-0x18]
  002bd:    	mov    QWORD PTR [rbx],rsi
  002c0:    	lea    r14,[rsp-0x10]
  002c5:    	mov    QWORD PTR [rsp-0x20],r14
  002ca:    	call   0xffffb070
  002cf:    	lea    r14,[rbp-0x8]
  002d3:    	mov    QWORD PTR [rbx],r14
  002d6:    	mov    r14,QWORD PTR [rbp-0x10]
  002da:    	test   rax,rax
  002dd:    	je     0x37cf6
  002e3:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002e7:    	mov    rax,QWORD PTR [r14-0x50]
  002eb:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  002ef: 00 	movq   xmm2,QWORD PTR [rip+0x1271]        # 0x1568
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
  00305:    	mov    rdi,QWORD PTR [r14-0x50]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x37d05
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm3,xmm3
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm3,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xffff5cf5
  0035e:    	test   rax,rax
  00361:    	je     0x37d05
  00367:    	movq   xmm3,xmm0
  0036b:    	ucomisd xmm3,xmm2
  0036f:    	jae    0x37d5b
:00014 condnotbr _%7 =>:00018
:00015 %5 = %4
:00016 %5 = neg %5                          [<INVALID>]
  00375: 00 	cmp    DWORD PTR [rip+0x11f4],0x0        # 0x1570
  0037c:    	jl     0x37d14
  00382:    	je     0x37d30
  00388: 01 	sub    DWORD PTR [rip+0x11e1],0x1        # 0x1570
  0038f:    	xor    rdi,rdi
  00392:    	jmp    0x37d14
  00397:    	movq   xmm0,xmm3
  0039b:    	call   0xffff5e19
  003a0:    	mov    QWORD PTR [r14-0x58],rax
  003a4:    	sub    rsp,0x10
  003a8:    	movq   QWORD PTR [rsp],xmm3
  003ad:    	mov    rdi,QWORD PTR [r14-0x58]
  003b1:    	mov    rdx,rdi
  003b4:    	mov    rdi,rbx
  003b7:    	mov    rsi,r12
  003ba: 92 	movabs rax,0x5592e6de73c0
  003c4:    	call   rax
  003c6:    	movq   xmm3,QWORD PTR [rsp]
  003cb:    	add    rsp,0x10
  003cf:    	test   rax,rax
  003d2:    	je     0x37d4c
  003d8:    	mov    QWORD PTR [r14-0x58],rax
:00017 br =>:00018
  003dc:    	jmp    0x37d74
:00018 %7 = literal[1e-17]
  003e1: 00 	movq   xmm2,QWORD PTR [rip+0x118f]        # 0x1578
  003e9: aa 	movabs rax,0xe33877aa3236a4ba
  003f3:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
  003f7:    	mov    rdi,QWORD PTR [r14-0x58]
  003fb: 00 	test   rdi,0x1
  00402:    	jne    0x37d8d
  00408: 00 	test   rdi,0x2
  0040f:    	je     0x44b
  00415:    	xorps  xmm4,xmm4
  00418: 00 	movabs rax,0x8000000000000002
  00422:    	cmp    rdi,rax
  00425:    	je     0x45d
  0042b:    	mov    rax,rdi
  0042e:    	sar    rax,0x3f
  00432:    	add    rax,0x2
  00436:    	and    rdi,0xfffffffffffffffc
  0043a:    	or     rdi,rax
  0043d:    	rol    rdi,0x3d
  00441:    	movq   xmm4,rdi
  00446:    	jmp    0x45d
  0044b:    	call   0xffff5cf5
  00450:    	test   rax,rax
  00453:    	je     0x37d8d
  00459:    	movq   xmm4,xmm0
  0045d:    	ucomisd xmm4,xmm2
  00461:    	jae    0x475
:00020 condnotbr _%7 =>:00024
:00021 %7 = nil
  00467: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  0046f:    	mov    rax,QWORD PTR [r14-0x68]
  00473:    	leave  
  00474:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  00475:    	mov    rdi,QWORD PTR [r14-0x38]
  00479: 00 	test   rdi,0x7
  00480:    	jne    0x37d9c
  00486:    	cmp    DWORD PTR [rdi+0x4],0x31
  0048a:    	jne    0x37d9c
  00490: 26 	cmp    DWORD PTR [rip+0xffffffffffff9f04],0x26        # 0xffffa39b
  00497:    	jne    0x37d9c
  0049d:    	mov    esi,DWORD PTR [rip+0x10e1]        # 0x1584
  004a3:    	cmp    esi,0xffffffff
  004a6:    	je     0x37dab
  004ac:    	cmp    WORD PTR [rdi+0x2],0x3
  004b1:    	jne    0x4ca
  004b7:    	cmp    esi,0x6
  004ba:    	jge    0x4ca
  004c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004c5:    	jmp    0x4d6
  004ca: 92 	movabs rax,0x5592e6dd3800
  004d4:    	call   rax
  004d6:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  004da:    	mov    rdi,QWORD PTR [r14-0x30]
  004de:    	mov    rax,QWORD PTR [rdi+0x18]
  004e2:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  004e6:    	mov    rdi,QWORD PTR [r14-0x68]
  004ea: 00 	test   rdi,0x7
  004f1:    	jne    0x37dd4
  004f7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  004fb:    	jne    0x37dd4
  00501: 26 	cmp    DWORD PTR [rip+0xffffffffffff9e93],0x26        # 0xffffa39b
  00508:    	jne    0x37dd4
  0050e: 00 	cmp    DWORD PTR [rip+0xffffffffffff9e8a],0x0        # 0xffffa39f
  00515:    	je     0x52d
  0051b:    	mov    rdi,r12
  0051e:    	mov    rsi,QWORD PTR [rbx]
  00521: 92 	movabs rax,0x5592e6e3ca90
  0052b:    	call   rax
  0052d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00536:    	mov    rax,QWORD PTR [r14-0x68]
  0053a:    	mov    QWORD PTR [rsp-0x40],rax
  0053f: 00 	mov    rdi,0x1
  00546:    	mov    rax,QWORD PTR [r14-0x70]
  0054a:    	mov    QWORD PTR [rsp-0x48],rax
  0054f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00558: 05 	movabs rax,0x100050000005e
  00562:    	mov    QWORD PTR [rsp-0x30],rax
  00567: 92 	movabs r13,0x5592e73e6700
  00571:    	mov    rsi,QWORD PTR [rbx]
  00574:    	mov    QWORD PTR [rsp-0x18],rsi
  00579:    	lea    rsi,[rsp-0x18]
  0057e:    	mov    QWORD PTR [rbx],rsi
  00581:    	lea    r14,[rsp-0x10]
  00586:    	mov    QWORD PTR [rsp-0x20],r14
  0058b:    	call   0xffffb070
  00590:    	lea    r14,[rbp-0x8]
  00594:    	mov    QWORD PTR [rbx],r14
  00597:    	mov    r14,QWORD PTR [rbp-0x10]
  0059b:    	test   rax,rax
  0059e:    	je     0x37de3
  005a4:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  005a8:    	mov    rdi,QWORD PTR [r14-0x68]
  005ac: 00 	test   rdi,0x1
  005b3:    	jne    0x37df2
  005b9: 00 	test   rdi,0x2
  005c0:    	je     0x5fc
  005c6:    	xorps  xmm2,xmm2
  005c9: 00 	movabs rax,0x8000000000000002
  005d3:    	cmp    rdi,rax
  005d6:    	je     0x60e
  005dc:    	mov    rax,rdi
  005df:    	sar    rax,0x3f
  005e3:    	add    rax,0x2
  005e7:    	and    rdi,0xfffffffffffffffc
  005eb:    	or     rdi,rax
  005ee:    	rol    rdi,0x3d
  005f2:    	movq   xmm2,rdi
  005f7:    	jmp    0x60e
  005fc:    	call   0xffff5cf5
  00601:    	test   rax,rax
  00604:    	je     0x37df2
  0060a:    	movq   xmm2,xmm0
  0060e:    	mov    rdi,QWORD PTR [r14-0x48]
  00612: 00 	test   rdi,0x1
  00619:    	jne    0x37e01
  0061f: 00 	test   rdi,0x2
  00626:    	je     0x662
  0062c:    	xorps  xmm3,xmm3
  0062f: 00 	movabs rax,0x8000000000000002
  00639:    	cmp    rdi,rax
  0063c:    	je     0x674
  00642:    	mov    rax,rdi
  00645:    	sar    rax,0x3f
  00649:    	add    rax,0x2
  0064d:    	and    rdi,0xfffffffffffffffc
  00651:    	or     rdi,rax
  00654:    	rol    rdi,0x3d
  00658:    	movq   xmm3,rdi
  0065d:    	jmp    0x674
  00662:    	call   0xffff5cf5
  00667:    	test   rax,rax
  0066a:    	je     0x37e01
  00670:    	movq   xmm3,xmm0
  00674:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  00678: 00 	xorps  xmm2,XMMWORD PTR [rip+0xf09]        # 0x1588
:00031 %6 = %7 / %4                         [Float][Float]
  0067f:    	mov    rdi,QWORD PTR [r14-0x50]
  00683: 00 	test   rdi,0x1
  0068a:    	jne    0x37e10
  00690: 00 	test   rdi,0x2
  00697:    	je     0x6d3
  0069d:    	xorps  xmm4,xmm4
  006a0: 00 	movabs rax,0x8000000000000002
  006aa:    	cmp    rdi,rax
  006ad:    	je     0x6e5
  006b3:    	mov    rax,rdi
  006b6:    	sar    rax,0x3f
  006ba:    	add    rax,0x2
  006be:    	and    rdi,0xfffffffffffffffc
  006c2:    	or     rdi,rax
  006c5:    	rol    rdi,0x3d
  006c9:    	movq   xmm4,rdi
  006ce:    	jmp    0x6e5
  006d3:    	call   0xffff5cf5
  006d8:    	test   rax,rax
  006db:    	je     0x37e10
  006e1:    	movq   xmm4,xmm0
  006e5:    	movq   xmm5,xmm2
  006e9:    	movq   rax,xmm4
  006ee:    	test   rax,rax
  006f1:    	je     0xffff5cc1
  006f7:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  006fb: 00 	movq   xmm2,QWORD PTR [rip+0xe95]        # 0x1598
  00703: 00 	movabs rax,0x8000000000000002
  0070d:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
  00711:    	ucomisd xmm5,xmm2
  00715:    	jbe    0x384bb
:00034 condnotbr _%7 =>:00083
:00035 %7 = %2.call t()                     [<INVALID>]
  0071b: 00 	cmp    DWORD PTR [rip+0xe7e],0x0        # 0x15a0
  00722:    	jl     0x37e2c
  00728:    	je     0x37e48
  0072e: 01 	sub    DWORD PTR [rip+0xe6b],0x1        # 0x15a0
  00735:    	xor    rdi,rdi
  00738:    	jmp    0x37e2c
  0073d:    	movq   xmm0,xmm5
  00741:    	call   0xffff5e19
  00746:    	mov    QWORD PTR [r14-0x60],rax
  0074a:    	mov    rdi,QWORD PTR [r14-0x40]
  0074e: 92 	movabs rax,0x5592e6de1bb0
  00758:    	call   rax
  0075a:    	mov    r15d,eax
  0075d: 92 	movabs r13,0x5592e73e8fe0
  00767:    	cmp    QWORD PTR [r13+0x8],0x0
  0076c:    	je     0x37e64
  00772:    	cmp    r15d,DWORD PTR [r13-0x8]
  00776:    	jne    0x37e64
  0077c:    	mov    eax,DWORD PTR [rip+0xffffffffffff9c19]        # 0xffffa39b
  00782:    	cmp    DWORD PTR [r13-0x4],eax
  00786:    	jne    0x37e64
  0078c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00795:    	mov    rax,QWORD PTR [r14-0x40]
  00799:    	mov    QWORD PTR [rsp-0x40],rax
  0079e: 00 	mov    rdi,0x0
  007a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  007ae:    	mov    r13,QWORD PTR [r13+0x8]
  007b2:    	mov    rax,QWORD PTR [r13+0x8]
  007b6:    	mov    QWORD PTR [rsp-0x30],rax
  007bb:    	mov    rax,QWORD PTR [r13+0x0]
  007bf:    	mov    r13,QWORD PTR [r13+0x10]
  007c3:    	mov    rsi,QWORD PTR [rbx]
  007c6:    	mov    QWORD PTR [rsp-0x18],rsi
  007cb:    	lea    rsi,[rsp-0x18]
  007d0:    	mov    QWORD PTR [rbx],rsi
  007d3:    	lea    r14,[rsp-0x10]
  007d8:    	mov    QWORD PTR [rsp-0x20],r14
  007dd:    	call   rax
  007df:    	lea    r14,[rbp-0x8]
  007e3:    	mov    QWORD PTR [rbx],r14
  007e6:    	mov    r14,QWORD PTR [rbp-0x10]
  007ea:    	test   rax,rax
  007ed:    	je     0x37ea5
  007f3:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
  007f7:    	mov    rdi,QWORD PTR [r14-0x60]
  007fb:    	mov    rsi,QWORD PTR [r14-0x68]
  007ff:    	mov    rdx,rdi
  00802:    	mov    rcx,rsi
  00805:    	mov    rdi,rbx
  00808:    	mov    rsi,r12
  0080b: 92 	movabs rax,0x5592e6ded4c0
  00815:    	call   rax
  00817:    	test   rax,rax
  0081a:    	je     0x37eb4
  00820:    	or     rax,0x10
  00824:    	cmp    rax,0x14
  00828:    	je     0x384e1
:00038 condnotbr _%7 =>:00083
:00039 %7 = literal[true]
  0082e: 00 	mov    rax,0x1c
  00835:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [<INVALID>]
  00839:    	mov    rdi,QWORD PTR [r14-0x40]
  0083d: 92 	movabs rax,0x5592e6de1bb0
  00847:    	call   rax
  00849:    	mov    r15d,eax
  0084c: 92 	movabs r13,0x5592e73e9030
  00856:    	cmp    QWORD PTR [r13+0x8],0x0
  0085b:    	je     0x37ec3
  00861:    	cmp    r15d,DWORD PTR [r13-0x8]
  00865:    	jne    0x37ec3
  0086b:    	mov    eax,DWORD PTR [rip+0xffffffffffff9b2a]        # 0xffffa39b
  00871:    	cmp    DWORD PTR [r13-0x4],eax
  00875:    	jne    0x37ec3
  0087b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00884:    	mov    rax,QWORD PTR [r14-0x40]
  00888:    	mov    QWORD PTR [rsp-0x40],rax
  0088d: 00 	mov    rdi,0x1
  00894:    	mov    rax,QWORD PTR [r14-0x68]
  00898:    	mov    QWORD PTR [rsp-0x48],rax
  0089d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  008a6:    	mov    r13,QWORD PTR [r13+0x8]
  008aa:    	mov    rax,QWORD PTR [r13+0x8]
  008ae:    	mov    QWORD PTR [rsp-0x30],rax
  008b3:    	mov    rax,QWORD PTR [r13+0x0]
  008b7:    	mov    r13,QWORD PTR [r13+0x10]
  008bb:    	mov    rsi,QWORD PTR [rbx]
  008be:    	mov    QWORD PTR [rsp-0x18],rsi
  008c3:    	lea    rsi,[rsp-0x18]
  008c8:    	mov    QWORD PTR [rbx],rsi
  008cb:    	lea    r14,[rsp-0x10]
  008d0:    	mov    QWORD PTR [rsp-0x20],r14
  008d5:    	call   rax
  008d7:    	lea    r14,[rbp-0x8]
  008db:    	mov    QWORD PTR [rbx],r14
  008de:    	mov    r14,QWORD PTR [rbp-0x10]
  008e2:    	test   rax,rax
  008e5:    	je     0x37f04
:00041 
:00042 _ = %2.call t=(%6; 1)                [<INVALID>]
  008eb:    	mov    rdi,QWORD PTR [r14-0x40]
  008ef: 92 	movabs rax,0x5592e6de1bb0
  008f9:    	call   rax
  008fb:    	mov    r15d,eax
  008fe: 92 	movabs r13,0x5592e73e9050
  00908:    	cmp    QWORD PTR [r13+0x8],0x0
  0090d:    	je     0x37f13
  00913:    	cmp    r15d,DWORD PTR [r13-0x8]
  00917:    	jne    0x37f13
  0091d:    	mov    eax,DWORD PTR [rip+0xffffffffffff9a78]        # 0xffffa39b
  00923:    	cmp    DWORD PTR [r13-0x4],eax
  00927:    	jne    0x37f13
  0092d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00936:    	mov    rax,QWORD PTR [r14-0x40]
  0093a:    	mov    QWORD PTR [rsp-0x40],rax
  0093f: 00 	mov    rdi,0x1
  00946:    	mov    rax,QWORD PTR [r14-0x60]
  0094a:    	mov    QWORD PTR [rsp-0x48],rax
  0094f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00958:    	mov    r13,QWORD PTR [r13+0x8]
  0095c:    	mov    rax,QWORD PTR [r13+0x8]
  00960:    	mov    QWORD PTR [rsp-0x30],rax
  00965:    	mov    rax,QWORD PTR [r13+0x0]
  00969:    	mov    r13,QWORD PTR [r13+0x10]
  0096d:    	mov    rsi,QWORD PTR [rbx]
  00970:    	mov    QWORD PTR [rsp-0x18],rsi
  00975:    	lea    rsi,[rsp-0x18]
  0097a:    	mov    QWORD PTR [rbx],rsi
  0097d:    	lea    r14,[rsp-0x10]
  00982:    	mov    QWORD PTR [rsp-0x20],r14
  00987:    	call   rax
  00989:    	lea    r14,[rbp-0x8]
  0098d:    	mov    QWORD PTR [rbx],r14
  00990:    	mov    r14,QWORD PTR [rbp-0x10]
  00994:    	test   rax,rax
  00997:    	je     0x37f54
:00043 
:00044 %7 = @n: <INVALID>[IvarId(0)]
  0099d:    	mov    rdi,QWORD PTR [r14-0x30]
  009a1: 00 	mov    rsi,0xac
  009a8:    	mov    rdx,r12
  009ab: 92 	movabs rax,0x5592e6e492e0
  009b5:    	call   rax
  009b7:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [<INVALID>]
  009bb:    	mov    rdi,QWORD PTR [r14-0x40]
  009bf: 92 	movabs rax,0x5592e6de1bb0
  009c9:    	call   rax
  009cb:    	mov    r15d,eax
  009ce: 92 	movabs r13,0x5592e73e9080
  009d8:    	cmp    QWORD PTR [r13+0x8],0x0
  009dd:    	je     0x37f63
  009e3:    	cmp    r15d,DWORD PTR [r13-0x8]
  009e7:    	jne    0x37f63
  009ed:    	mov    eax,DWORD PTR [rip+0xffffffffffff99a8]        # 0xffffa39b
  009f3:    	cmp    DWORD PTR [r13-0x4],eax
  009f7:    	jne    0x37f63
  009fd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a06:    	mov    rax,QWORD PTR [r14-0x40]
  00a0a:    	mov    QWORD PTR [rsp-0x40],rax
  00a0f: 00 	mov    rdi,0x1
  00a16:    	mov    rax,QWORD PTR [r14-0x68]
  00a1a:    	mov    QWORD PTR [rsp-0x48],rax
  00a1f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a28:    	mov    r13,QWORD PTR [r13+0x8]
  00a2c:    	mov    rax,QWORD PTR [r13+0x8]
  00a30:    	mov    QWORD PTR [rsp-0x30],rax
  00a35:    	mov    rax,QWORD PTR [r13+0x0]
  00a39:    	mov    r13,QWORD PTR [r13+0x10]
  00a3d:    	mov    rsi,QWORD PTR [rbx]
  00a40:    	mov    QWORD PTR [rsp-0x18],rsi
  00a45:    	lea    rsi,[rsp-0x18]
  00a4a:    	mov    QWORD PTR [rbx],rsi
  00a4d:    	lea    r14,[rsp-0x10]
  00a52:    	mov    QWORD PTR [rsp-0x20],r14
  00a57:    	call   rax
  00a59:    	lea    r14,[rbp-0x8]
  00a5d:    	mov    QWORD PTR [rbx],r14
  00a60:    	mov    r14,QWORD PTR [rbp-0x10]
  00a64:    	test   rax,rax
  00a67:    	je     0x37fa4
:00046 
:00047 %7 = const[Vec]                      [<INVALID>]
  00a6d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff9934]        # 0xffffa3a8
  00a74: 00 	cmp    rax,QWORD PTR [rip+0xb3d]        # 0x15b8
  00a7b:    	jne    0x37fb3
  00a81: 00 	mov    rax,QWORD PTR [rip+0xb20]        # 0x15a8
  00a88:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [<INVALID>]
  00a8c:    	mov    rdi,QWORD PTR [r14-0x38]
  00a90: 92 	movabs rax,0x5592e6de1bb0
  00a9a:    	call   rax
  00a9c:    	mov    r15d,eax
  00a9f: 92 	movabs r13,0x5592e73e90b0
  00aa9:    	cmp    QWORD PTR [r13+0x8],0x0
  00aae:    	je     0x37ffe
  00ab4:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ab8:    	jne    0x37ffe
  00abe:    	mov    eax,DWORD PTR [rip+0xffffffffffff98d7]        # 0xffffa39b
  00ac4:    	cmp    DWORD PTR [r13-0x4],eax
  00ac8:    	jne    0x37ffe
  00ace: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ad7:    	mov    rax,QWORD PTR [r14-0x38]
  00adb:    	mov    QWORD PTR [rsp-0x40],rax
  00ae0: 00 	mov    rdi,0x0
  00ae7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00af0:    	mov    r13,QWORD PTR [r13+0x8]
  00af4:    	mov    rax,QWORD PTR [r13+0x8]
  00af8:    	mov    QWORD PTR [rsp-0x30],rax
  00afd:    	mov    rax,QWORD PTR [r13+0x0]
  00b01:    	mov    r13,QWORD PTR [r13+0x10]
  00b05:    	mov    rsi,QWORD PTR [rbx]
  00b08:    	mov    QWORD PTR [rsp-0x18],rsi
  00b0d:    	lea    rsi,[rsp-0x18]
  00b12:    	mov    QWORD PTR [rbx],rsi
  00b15:    	lea    r14,[rsp-0x10]
  00b1a:    	mov    QWORD PTR [rsp-0x20],r14
  00b1f:    	call   rax
  00b21:    	lea    r14,[rbp-0x8]
  00b25:    	mov    QWORD PTR [rbx],r14
  00b28:    	mov    r14,QWORD PTR [rbp-0x10]
  00b2c:    	test   rax,rax
  00b2f:    	je     0x3803f
  00b35:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [<INVALID>]
  00b39:    	mov    rdi,QWORD PTR [r14-0x70]
  00b3d: 92 	movabs rax,0x5592e6de1bb0
  00b47:    	call   rax
  00b49:    	mov    r15d,eax
  00b4c: 92 	movabs r13,0x5592e73e90d0
  00b56:    	cmp    QWORD PTR [r13+0x8],0x0
  00b5b:    	je     0x3804e
  00b61:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b65:    	jne    0x3804e
  00b6b:    	mov    eax,DWORD PTR [rip+0xffffffffffff982a]        # 0xffffa39b
  00b71:    	cmp    DWORD PTR [r13-0x4],eax
  00b75:    	jne    0x3804e
  00b7b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b84:    	mov    rax,QWORD PTR [r14-0x70]
  00b88:    	mov    QWORD PTR [rsp-0x40],rax
  00b8d: 00 	mov    rdi,0x0
  00b94: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b9d:    	mov    r13,QWORD PTR [r13+0x8]
  00ba1:    	mov    rax,QWORD PTR [r13+0x8]
  00ba5:    	mov    QWORD PTR [rsp-0x30],rax
  00baa:    	mov    rax,QWORD PTR [r13+0x0]
  00bae:    	mov    r13,QWORD PTR [r13+0x10]
  00bb2:    	mov    rsi,QWORD PTR [rbx]
  00bb5:    	mov    QWORD PTR [rsp-0x18],rsi
  00bba:    	lea    rsi,[rsp-0x18]
  00bbf:    	mov    QWORD PTR [rbx],rsi
  00bc2:    	lea    r14,[rsp-0x10]
  00bc7:    	mov    QWORD PTR [rsp-0x20],r14
  00bcc:    	call   rax
  00bce:    	lea    r14,[rbp-0x8]
  00bd2:    	mov    QWORD PTR [rbx],r14
  00bd5:    	mov    r14,QWORD PTR [rbp-0x10]
  00bd9:    	test   rax,rax
  00bdc:    	je     0x3808f
  00be2:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [<INVALID>]
  00be6:    	mov    rdi,QWORD PTR [r14-0x38]
  00bea: 92 	movabs rax,0x5592e6de1bb0
  00bf4:    	call   rax
  00bf6:    	mov    r15d,eax
  00bf9: 92 	movabs r13,0x5592e73e90f0
  00c03:    	cmp    QWORD PTR [r13+0x8],0x0
  00c08:    	je     0x3809e
  00c0e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c12:    	jne    0x3809e
  00c18:    	mov    eax,DWORD PTR [rip+0xffffffffffff977d]        # 0xffffa39b
  00c1e:    	cmp    DWORD PTR [r13-0x4],eax
  00c22:    	jne    0x3809e
  00c28: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c31:    	mov    rax,QWORD PTR [r14-0x38]
  00c35:    	mov    QWORD PTR [rsp-0x40],rax
  00c3a: 00 	mov    rdi,0x0
  00c41: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c4a:    	mov    r13,QWORD PTR [r13+0x8]
  00c4e:    	mov    rax,QWORD PTR [r13+0x8]
  00c52:    	mov    QWORD PTR [rsp-0x30],rax
  00c57:    	mov    rax,QWORD PTR [r13+0x0]
  00c5b:    	mov    r13,QWORD PTR [r13+0x10]
  00c5f:    	mov    rsi,QWORD PTR [rbx]
  00c62:    	mov    QWORD PTR [rsp-0x18],rsi
  00c67:    	lea    rsi,[rsp-0x18]
  00c6c:    	mov    QWORD PTR [rbx],rsi
  00c6f:    	lea    r14,[rsp-0x10]
  00c74:    	mov    QWORD PTR [rsp-0x20],r14
  00c79:    	call   rax
  00c7b:    	lea    r14,[rbp-0x8]
  00c7f:    	mov    QWORD PTR [rbx],r14
  00c82:    	mov    r14,QWORD PTR [rbp-0x10]
  00c86:    	test   rax,rax
  00c89:    	je     0x380df
  00c8f:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [<INVALID>]
  00c93:    	mov    rdi,QWORD PTR [r14-0x78]
  00c97: 92 	movabs rax,0x5592e6de1bb0
  00ca1:    	call   rax
  00ca3:    	mov    r15d,eax
  00ca6: 92 	movabs r13,0x5592e73e9110
  00cb0:    	cmp    QWORD PTR [r13+0x8],0x0
  00cb5:    	je     0x380ee
  00cbb:    	cmp    r15d,DWORD PTR [r13-0x8]
  00cbf:    	jne    0x380ee
  00cc5:    	mov    eax,DWORD PTR [rip+0xffffffffffff96d0]        # 0xffffa39b
  00ccb:    	cmp    DWORD PTR [r13-0x4],eax
  00ccf:    	jne    0x380ee
  00cd5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00cde:    	mov    rax,QWORD PTR [r14-0x78]
  00ce2:    	mov    QWORD PTR [rsp-0x40],rax
  00ce7: 00 	mov    rdi,0x0
  00cee: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cf7:    	mov    r13,QWORD PTR [r13+0x8]
  00cfb:    	mov    rax,QWORD PTR [r13+0x8]
  00cff:    	mov    QWORD PTR [rsp-0x30],rax
  00d04:    	mov    rax,QWORD PTR [r13+0x0]
  00d08:    	mov    r13,QWORD PTR [r13+0x10]
  00d0c:    	mov    rsi,QWORD PTR [rbx]
  00d0f:    	mov    QWORD PTR [rsp-0x18],rsi
  00d14:    	lea    rsi,[rsp-0x18]
  00d19:    	mov    QWORD PTR [rbx],rsi
  00d1c:    	lea    r14,[rsp-0x10]
  00d21:    	mov    QWORD PTR [rsp-0x20],r14
  00d26:    	call   rax
  00d28:    	lea    r14,[rbp-0x8]
  00d2c:    	mov    QWORD PTR [rbx],r14
  00d2f:    	mov    r14,QWORD PTR [rbp-0x10]
  00d33:    	test   rax,rax
  00d36:    	je     0x3812f
  00d3c:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [<INVALID>][<INVALID>]
  00d40:    	mov    rdi,QWORD PTR [r14-0x60]
  00d44:    	mov    rsi,QWORD PTR [r14-0x78]
  00d48:    	mov    rdx,rdi
  00d4b:    	mov    rcx,rsi
  00d4e:    	mov    rdi,rbx
  00d51:    	mov    rsi,r12
  00d54: 92 	movabs rax,0x5592e6dea2e0
  00d5e:    	call   rax
  00d60:    	test   rax,rax
  00d63:    	je     0x3813e
  00d69:    	mov    QWORD PTR [r14-0x78],rax
:00057 %8 = %8 + %9                         [<INVALID>][<INVALID>]
  00d6d:    	mov    rdi,QWORD PTR [r14-0x70]
  00d71:    	mov    rsi,QWORD PTR [r14-0x78]
  00d75:    	mov    rdx,rdi
  00d78:    	mov    rcx,rsi
  00d7b:    	mov    rdi,rbx
  00d7e:    	mov    rsi,r12
  00d81: 92 	movabs rax,0x5592e6de8460
  00d8b:    	call   rax
  00d8d:    	test   rax,rax
  00d90:    	je     0x3814d
  00d96:    	mov    QWORD PTR [r14-0x70],rax
:00058 %9 = %1.call org()                   [<INVALID>]
  00d9a:    	mov    rdi,QWORD PTR [r14-0x38]
  00d9e: 92 	movabs rax,0x5592e6de1bb0
  00da8:    	call   rax
  00daa:    	mov    r15d,eax
  00dad: 92 	movabs r13,0x5592e73e9150
  00db7:    	cmp    QWORD PTR [r13+0x8],0x0
  00dbc:    	je     0x3815c
  00dc2:    	cmp    r15d,DWORD PTR [r13-0x8]
  00dc6:    	jne    0x3815c
  00dcc:    	mov    eax,DWORD PTR [rip+0xffffffffffff95c9]        # 0xffffa39b
  00dd2:    	cmp    DWORD PTR [r13-0x4],eax
  00dd6:    	jne    0x3815c
  00ddc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00de5:    	mov    rax,QWORD PTR [r14-0x38]
  00de9:    	mov    QWORD PTR [rsp-0x40],rax
  00dee: 00 	mov    rdi,0x0
  00df5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00dfe:    	mov    r13,QWORD PTR [r13+0x8]
  00e02:    	mov    rax,QWORD PTR [r13+0x8]
  00e06:    	mov    QWORD PTR [rsp-0x30],rax
  00e0b:    	mov    rax,QWORD PTR [r13+0x0]
  00e0f:    	mov    r13,QWORD PTR [r13+0x10]
  00e13:    	mov    rsi,QWORD PTR [rbx]
  00e16:    	mov    QWORD PTR [rsp-0x18],rsi
  00e1b:    	lea    rsi,[rsp-0x18]
  00e20:    	mov    QWORD PTR [rbx],rsi
  00e23:    	lea    r14,[rsp-0x10]
  00e28:    	mov    QWORD PTR [rsp-0x20],r14
  00e2d:    	call   rax
  00e2f:    	lea    r14,[rbp-0x8]
  00e33:    	mov    QWORD PTR [rbx],r14
  00e36:    	mov    r14,QWORD PTR [rbp-0x10]
  00e3a:    	test   rax,rax
  00e3d:    	je     0x3819d
  00e43:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [<INVALID>]
  00e47:    	mov    rdi,QWORD PTR [r14-0x78]
  00e4b: 92 	movabs rax,0x5592e6de1bb0
  00e55:    	call   rax
  00e57:    	mov    r15d,eax
  00e5a: 92 	movabs r13,0x5592e73e9170
  00e64:    	cmp    QWORD PTR [r13+0x8],0x0
  00e69:    	je     0x381ac
  00e6f:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e73:    	jne    0x381ac
  00e79:    	mov    eax,DWORD PTR [rip+0xffffffffffff951c]        # 0xffffa39b
  00e7f:    	cmp    DWORD PTR [r13-0x4],eax
  00e83:    	jne    0x381ac
  00e89: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e92:    	mov    rax,QWORD PTR [r14-0x78]
  00e96:    	mov    QWORD PTR [rsp-0x40],rax
  00e9b: 00 	mov    rdi,0x0
  00ea2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00eab:    	mov    r13,QWORD PTR [r13+0x8]
  00eaf:    	mov    rax,QWORD PTR [r13+0x8]
  00eb3:    	mov    QWORD PTR [rsp-0x30],rax
  00eb8:    	mov    rax,QWORD PTR [r13+0x0]
  00ebc:    	mov    r13,QWORD PTR [r13+0x10]
  00ec0:    	mov    rsi,QWORD PTR [rbx]
  00ec3:    	mov    QWORD PTR [rsp-0x18],rsi
  00ec8:    	lea    rsi,[rsp-0x18]
  00ecd:    	mov    QWORD PTR [rbx],rsi
  00ed0:    	lea    r14,[rsp-0x10]
  00ed5:    	mov    QWORD PTR [rsp-0x20],r14
  00eda:    	call   rax
  00edc:    	lea    r14,[rbp-0x8]
  00ee0:    	mov    QWORD PTR [rbx],r14
  00ee3:    	mov    r14,QWORD PTR [rbp-0x10]
  00ee7:    	test   rax,rax
  00eea:    	je     0x381ed
  00ef0:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [<INVALID>]
  00ef4:    	mov    rdi,QWORD PTR [r14-0x38]
  00ef8: 92 	movabs rax,0x5592e6de1bb0
  00f02:    	call   rax
  00f04:    	mov    r15d,eax
  00f07: 92 	movabs r13,0x5592e73e9190
  00f11:    	cmp    QWORD PTR [r13+0x8],0x0
  00f16:    	je     0x381fc
  00f1c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f20:    	jne    0x381fc
  00f26:    	mov    eax,DWORD PTR [rip+0xffffffffffff946f]        # 0xffffa39b
  00f2c:    	cmp    DWORD PTR [r13-0x4],eax
  00f30:    	jne    0x381fc
  00f36: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f3f:    	mov    rax,QWORD PTR [r14-0x38]
  00f43:    	mov    QWORD PTR [rsp-0x40],rax
  00f48: 00 	mov    rdi,0x0
  00f4f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f58:    	mov    r13,QWORD PTR [r13+0x8]
  00f5c:    	mov    rax,QWORD PTR [r13+0x8]
  00f60:    	mov    QWORD PTR [rsp-0x30],rax
  00f65:    	mov    rax,QWORD PTR [r13+0x0]
  00f69:    	mov    r13,QWORD PTR [r13+0x10]
  00f6d:    	mov    rsi,QWORD PTR [rbx]
  00f70:    	mov    QWORD PTR [rsp-0x18],rsi
  00f75:    	lea    rsi,[rsp-0x18]
  00f7a:    	mov    QWORD PTR [rbx],rsi
  00f7d:    	lea    r14,[rsp-0x10]
  00f82:    	mov    QWORD PTR [rsp-0x20],r14
  00f87:    	call   rax
  00f89:    	lea    r14,[rbp-0x8]
  00f8d:    	mov    QWORD PTR [rbx],r14
  00f90:    	mov    r14,QWORD PTR [rbp-0x10]
  00f94:    	test   rax,rax
  00f97:    	je     0x3823d
  00f9d:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [<INVALID>]
  00fa1:    	mov    rdi,QWORD PTR [r14-0x80]
  00fa5: 92 	movabs rax,0x5592e6de1bb0
  00faf:    	call   rax
  00fb1:    	mov    r15d,eax
  00fb4: 92 	movabs r13,0x5592e73e91b0
  00fbe:    	cmp    QWORD PTR [r13+0x8],0x0
  00fc3:    	je     0x3824c
  00fc9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fcd:    	jne    0x3824c
  00fd3:    	mov    eax,DWORD PTR [rip+0xffffffffffff93c2]        # 0xffffa39b
  00fd9:    	cmp    DWORD PTR [r13-0x4],eax
  00fdd:    	jne    0x3824c
  00fe3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fec:    	mov    rax,QWORD PTR [r14-0x80]
  00ff0:    	mov    QWORD PTR [rsp-0x40],rax
  00ff5: 00 	mov    rdi,0x0
  00ffc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01005:    	mov    r13,QWORD PTR [r13+0x8]
  01009:    	mov    rax,QWORD PTR [r13+0x8]
  0100d:    	mov    QWORD PTR [rsp-0x30],rax
  01012:    	mov    rax,QWORD PTR [r13+0x0]
  01016:    	mov    r13,QWORD PTR [r13+0x10]
  0101a:    	mov    rsi,QWORD PTR [rbx]
  0101d:    	mov    QWORD PTR [rsp-0x18],rsi
  01022:    	lea    rsi,[rsp-0x18]
  01027:    	mov    QWORD PTR [rbx],rsi
  0102a:    	lea    r14,[rsp-0x10]
  0102f:    	mov    QWORD PTR [rsp-0x20],r14
  01034:    	call   rax
  01036:    	lea    r14,[rbp-0x8]
  0103a:    	mov    QWORD PTR [rbx],r14
  0103d:    	mov    r14,QWORD PTR [rbp-0x10]
  01041:    	test   rax,rax
  01044:    	je     0x3828d
  0104a:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  0104e:    	mov    rdi,QWORD PTR [r14-0x60]
  01052:    	mov    rsi,QWORD PTR [r14-0x80]
  01056:    	mov    rdx,rdi
  01059:    	mov    rcx,rsi
  0105c:    	mov    rdi,rbx
  0105f:    	mov    rsi,r12
  01062: 92 	movabs rax,0x5592e6dea2e0
  0106c:    	call   rax
  0106e:    	test   rax,rax
  01071:    	je     0x3829c
  01077:    	mov    QWORD PTR [r14-0x80],rax
:00067 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  0107b:    	mov    rdi,QWORD PTR [r14-0x78]
  0107f:    	mov    rsi,QWORD PTR [r14-0x80]
  01083:    	mov    rdx,rdi
  01086:    	mov    rcx,rsi
  01089:    	mov    rdi,rbx
  0108c:    	mov    rsi,r12
  0108f: 92 	movabs rax,0x5592e6de8460
  01099:    	call   rax
  0109b:    	test   rax,rax
  0109e:    	je     0x382ab
  010a4:    	mov    QWORD PTR [r14-0x78],rax
:00068 %10 = %1.call org()                  [<INVALID>]
  010a8:    	mov    rdi,QWORD PTR [r14-0x38]
  010ac: 92 	movabs rax,0x5592e6de1bb0
  010b6:    	call   rax
  010b8:    	mov    r15d,eax
  010bb: 92 	movabs r13,0x5592e73e91f0
  010c5:    	cmp    QWORD PTR [r13+0x8],0x0
  010ca:    	je     0x382ba
  010d0:    	cmp    r15d,DWORD PTR [r13-0x8]
  010d4:    	jne    0x382ba
  010da:    	mov    eax,DWORD PTR [rip+0xffffffffffff92bb]        # 0xffffa39b
  010e0:    	cmp    DWORD PTR [r13-0x4],eax
  010e4:    	jne    0x382ba
  010ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010f3:    	mov    rax,QWORD PTR [r14-0x38]
  010f7:    	mov    QWORD PTR [rsp-0x40],rax
  010fc: 00 	mov    rdi,0x0
  01103: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0110c:    	mov    r13,QWORD PTR [r13+0x8]
  01110:    	mov    rax,QWORD PTR [r13+0x8]
  01114:    	mov    QWORD PTR [rsp-0x30],rax
  01119:    	mov    rax,QWORD PTR [r13+0x0]
  0111d:    	mov    r13,QWORD PTR [r13+0x10]
  01121:    	mov    rsi,QWORD PTR [rbx]
  01124:    	mov    QWORD PTR [rsp-0x18],rsi
  01129:    	lea    rsi,[rsp-0x18]
  0112e:    	mov    QWORD PTR [rbx],rsi
  01131:    	lea    r14,[rsp-0x10]
  01136:    	mov    QWORD PTR [rsp-0x20],r14
  0113b:    	call   rax
  0113d:    	lea    r14,[rbp-0x8]
  01141:    	mov    QWORD PTR [rbx],r14
  01144:    	mov    r14,QWORD PTR [rbp-0x10]
  01148:    	test   rax,rax
  0114b:    	je     0x382fb
  01151:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [<INVALID>]
  01155:    	mov    rdi,QWORD PTR [r14-0x80]
  01159: 92 	movabs rax,0x5592e6de1bb0
  01163:    	call   rax
  01165:    	mov    r15d,eax
  01168: 92 	movabs r13,0x5592e73e9210
  01172:    	cmp    QWORD PTR [r13+0x8],0x0
  01177:    	je     0x3830a
  0117d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01181:    	jne    0x3830a
  01187:    	mov    eax,DWORD PTR [rip+0xffffffffffff920e]        # 0xffffa39b
  0118d:    	cmp    DWORD PTR [r13-0x4],eax
  01191:    	jne    0x3830a
  01197: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011a0:    	mov    rax,QWORD PTR [r14-0x80]
  011a4:    	mov    QWORD PTR [rsp-0x40],rax
  011a9: 00 	mov    rdi,0x0
  011b0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011b9:    	mov    r13,QWORD PTR [r13+0x8]
  011bd:    	mov    rax,QWORD PTR [r13+0x8]
  011c1:    	mov    QWORD PTR [rsp-0x30],rax
  011c6:    	mov    rax,QWORD PTR [r13+0x0]
  011ca:    	mov    r13,QWORD PTR [r13+0x10]
  011ce:    	mov    rsi,QWORD PTR [rbx]
  011d1:    	mov    QWORD PTR [rsp-0x18],rsi
  011d6:    	lea    rsi,[rsp-0x18]
  011db:    	mov    QWORD PTR [rbx],rsi
  011de:    	lea    r14,[rsp-0x10]
  011e3:    	mov    QWORD PTR [rsp-0x20],r14
  011e8:    	call   rax
  011ea:    	lea    r14,[rbp-0x8]
  011ee:    	mov    QWORD PTR [rbx],r14
  011f1:    	mov    r14,QWORD PTR [rbp-0x10]
  011f5:    	test   rax,rax
  011f8:    	je     0x3834b
  011fe:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [<INVALID>]
  01202:    	mov    rdi,QWORD PTR [r14-0x38]
  01206: 92 	movabs rax,0x5592e6de1bb0
  01210:    	call   rax
  01212:    	mov    r15d,eax
  01215: 92 	movabs r13,0x5592e73e9230
  0121f:    	cmp    QWORD PTR [r13+0x8],0x0
  01224:    	je     0x3835a
  0122a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0122e:    	jne    0x3835a
  01234:    	mov    eax,DWORD PTR [rip+0xffffffffffff9161]        # 0xffffa39b
  0123a:    	cmp    DWORD PTR [r13-0x4],eax
  0123e:    	jne    0x3835a
  01244: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0124d:    	mov    rax,QWORD PTR [r14-0x38]
  01251:    	mov    QWORD PTR [rsp-0x40],rax
  01256: 00 	mov    rdi,0x0
  0125d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01266:    	mov    r13,QWORD PTR [r13+0x8]
  0126a:    	mov    rax,QWORD PTR [r13+0x8]
  0126e:    	mov    QWORD PTR [rsp-0x30],rax
  01273:    	mov    rax,QWORD PTR [r13+0x0]
  01277:    	mov    r13,QWORD PTR [r13+0x10]
  0127b:    	mov    rsi,QWORD PTR [rbx]
  0127e:    	mov    QWORD PTR [rsp-0x18],rsi
  01283:    	lea    rsi,[rsp-0x18]
  01288:    	mov    QWORD PTR [rbx],rsi
  0128b:    	lea    r14,[rsp-0x10]
  01290:    	mov    QWORD PTR [rsp-0x20],r14
  01295:    	call   rax
  01297:    	lea    r14,[rbp-0x8]
  0129b:    	mov    QWORD PTR [rbx],r14
  0129e:    	mov    r14,QWORD PTR [rbp-0x10]
  012a2:    	test   rax,rax
  012a5:    	je     0x3839b
  012ab: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [<INVALID>]
  012b2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  012b9: 92 	movabs rax,0x5592e6de1bb0
  012c3:    	call   rax
  012c5:    	mov    r15d,eax
  012c8: 92 	movabs r13,0x5592e73e9250
  012d2:    	cmp    QWORD PTR [r13+0x8],0x0
  012d7:    	je     0x383aa
  012dd:    	cmp    r15d,DWORD PTR [r13-0x8]
  012e1:    	jne    0x383aa
  012e7:    	mov    eax,DWORD PTR [rip+0xffffffffffff90ae]        # 0xffffa39b
  012ed:    	cmp    DWORD PTR [r13-0x4],eax
  012f1:    	jne    0x383aa
  012f7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01300: ff 	mov    rax,QWORD PTR [r14-0x88]
  01307:    	mov    QWORD PTR [rsp-0x40],rax
  0130c: 00 	mov    rdi,0x0
  01313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0131c:    	mov    r13,QWORD PTR [r13+0x8]
  01320:    	mov    rax,QWORD PTR [r13+0x8]
  01324:    	mov    QWORD PTR [rsp-0x30],rax
  01329:    	mov    rax,QWORD PTR [r13+0x0]
  0132d:    	mov    r13,QWORD PTR [r13+0x10]
  01331:    	mov    rsi,QWORD PTR [rbx]
  01334:    	mov    QWORD PTR [rsp-0x18],rsi
  01339:    	lea    rsi,[rsp-0x18]
  0133e:    	mov    QWORD PTR [rbx],rsi
  01341:    	lea    r14,[rsp-0x10]
  01346:    	mov    QWORD PTR [rsp-0x20],r14
  0134b:    	call   rax
  0134d:    	lea    r14,[rbp-0x8]
  01351:    	mov    QWORD PTR [rbx],r14
  01354:    	mov    r14,QWORD PTR [rbp-0x10]
  01358:    	test   rax,rax
  0135b:    	je     0x383ee
  01361: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01368:    	mov    rdi,QWORD PTR [r14-0x60]
  0136c: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01373:    	mov    rdx,rdi
  01376:    	mov    rcx,rsi
  01379:    	mov    rdi,rbx
  0137c:    	mov    rsi,r12
  0137f: 92 	movabs rax,0x5592e6dea2e0
  01389:    	call   rax
  0138b:    	test   rax,rax
  0138e:    	je     0x383fd
  01394: ff 	mov    QWORD PTR [r14-0x88],rax
:00077 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  0139b:    	mov    rdi,QWORD PTR [r14-0x80]
  0139f: ff 	mov    rsi,QWORD PTR [r14-0x88]
  013a6:    	mov    rdx,rdi
  013a9:    	mov    rcx,rsi
  013ac:    	mov    rdi,rbx
  013af:    	mov    rsi,r12
  013b2: 92 	movabs rax,0x5592e6de8460
  013bc:    	call   rax
  013be:    	test   rax,rax
  013c1:    	je     0x3840c
  013c7:    	mov    QWORD PTR [r14-0x80],rax
:00078 %7 = %7.call new(%8; 3)              [<INVALID>]
  013cb:    	mov    rdi,QWORD PTR [r14-0x68]
  013cf: 92 	movabs rax,0x5592e6de1bb0
  013d9:    	call   rax
  013db:    	mov    r15d,eax
  013de: 92 	movabs r13,0x5592e73e9290
  013e8:    	cmp    QWORD PTR [r13+0x8],0x0
  013ed:    	je     0x3841b
  013f3:    	cmp    r15d,DWORD PTR [r13-0x8]
  013f7:    	jne    0x3841b
  013fd:    	mov    eax,DWORD PTR [rip+0xffffffffffff8f98]        # 0xffffa39b
  01403:    	cmp    DWORD PTR [r13-0x4],eax
  01407:    	jne    0x3841b
  0140d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01416:    	mov    rax,QWORD PTR [r14-0x68]
  0141a:    	mov    QWORD PTR [rsp-0x40],rax
  0141f: 00 	mov    rdi,0x3
  01426:    	mov    rax,QWORD PTR [r14-0x70]
  0142a:    	mov    QWORD PTR [rsp-0x48],rax
  0142f:    	mov    rax,QWORD PTR [r14-0x78]
  01433:    	mov    QWORD PTR [rsp-0x50],rax
  01438:    	mov    rax,QWORD PTR [r14-0x80]
  0143c:    	mov    QWORD PTR [rsp-0x58],rax
  01441: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0144a:    	mov    r13,QWORD PTR [r13+0x8]
  0144e:    	mov    rax,QWORD PTR [r13+0x8]
  01452:    	mov    QWORD PTR [rsp-0x30],rax
  01457:    	mov    rax,QWORD PTR [r13+0x0]
  0145b:    	mov    r13,QWORD PTR [r13+0x10]
  0145f:    	mov    rsi,QWORD PTR [rbx]
  01462:    	mov    QWORD PTR [rsp-0x18],rsi
  01467:    	lea    rsi,[rsp-0x18]
  0146c:    	mov    QWORD PTR [rbx],rsi
  0146f:    	lea    r14,[rsp-0x10]
  01474:    	mov    QWORD PTR [rsp-0x20],r14
  01479:    	call   rax
  0147b:    	lea    r14,[rbp-0x8]
  0147f:    	mov    QWORD PTR [rbx],r14
  01482:    	mov    r14,QWORD PTR [rbp-0x10]
  01486:    	test   rax,rax
  01489:    	je     0x3845c
  0148f:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [<INVALID>]
  01493:    	mov    rdi,QWORD PTR [r14-0x40]
  01497: 92 	movabs rax,0x5592e6de1bb0
  014a1:    	call   rax
  014a3:    	mov    r15d,eax
  014a6: 92 	movabs r13,0x5592e73e92b0
  014b0:    	cmp    QWORD PTR [r13+0x8],0x0
  014b5:    	je     0x3846b
  014bb:    	cmp    r15d,DWORD PTR [r13-0x8]
  014bf:    	jne    0x3846b
  014c5:    	mov    eax,DWORD PTR [rip+0xffffffffffff8ed0]        # 0xffffa39b
  014cb:    	cmp    DWORD PTR [r13-0x4],eax
  014cf:    	jne    0x3846b
  014d5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014de:    	mov    rax,QWORD PTR [r14-0x40]
  014e2:    	mov    QWORD PTR [rsp-0x40],rax
  014e7: 00 	mov    rdi,0x1
  014ee:    	mov    rax,QWORD PTR [r14-0x68]
  014f2:    	mov    QWORD PTR [rsp-0x48],rax
  014f7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01500:    	mov    r13,QWORD PTR [r13+0x8]
  01504:    	mov    rax,QWORD PTR [r13+0x8]
  01508:    	mov    QWORD PTR [rsp-0x30],rax
  0150d:    	mov    rax,QWORD PTR [r13+0x0]
  01511:    	mov    r13,QWORD PTR [r13+0x10]
  01515:    	mov    rsi,QWORD PTR [rbx]
  01518:    	mov    QWORD PTR [rsp-0x18],rsi
  0151d:    	lea    rsi,[rsp-0x18]
  01522:    	mov    QWORD PTR [rbx],rsi
  01525:    	lea    r14,[rsp-0x10]
  0152a:    	mov    QWORD PTR [rsp-0x20],r14
  0152f:    	call   rax
  01531:    	lea    r14,[rbp-0x8]
  01535:    	mov    QWORD PTR [rbx],r14
  01538:    	mov    r14,QWORD PTR [rbp-0x10]
  0153c:    	test   rax,rax
  0153f:    	je     0x384ac
:00081 
:00082 br =>:00083
  01545:    	jmp    0x384fa
:00083 %7 = nil
  0154a: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  01552:    	mov    rax,QWORD PTR [r14-0x68]
  01556:    	leave  
  01557:    	ret    
==> start whole compile: clamp FuncId(87) self_class:Scene start:[00000] bytecode:0x5592e73a9360
<== finished compile. elapsed:29.1µs
offset:Pos(47432) code: 475 bytes  data: 85 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x36f53
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x36f62
  00035: cmp    DWORD PTR [rdi+0x4],0x35
  00039: jne    0x36f62
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  0003f: movq   xmm2,QWORD PTR [rip+0x1a1]        # 0x1e8
  00047: movabs rax,0x37f800000000002
  00051: mov    QWORD PTR [r14-0x48],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00055: mov    rdi,QWORD PTR [r14-0x38]
  00059: test   rdi,0x1
  00060: jne    0x36f71
  00066: test   rdi,0x2
  0006d: je     0xa9
  00073: xorps  xmm3,xmm3
  00076: movabs rax,0x8000000000000002
  00080: cmp    rdi,rax
  00083: je     0xbb
  00089: mov    rax,rdi
  0008c: sar    rax,0x3f
  00090: add    rax,0x2
  00094: and    rdi,0xfffffffffffffffc
  00098: or     rdi,rax
  0009b: rol    rdi,0x3d
  0009f: movq   xmm3,rdi
  000a4: jmp    0xbb
  000a9: call   0xffff4735
  000ae: test   rax,rax
  000b1: je     0x36f71
  000b7: movq   xmm3,xmm0
  000bb: movq   xmm4,xmm3
  000bf: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000c3: movq   xmm2,QWORD PTR [rip+0x12d]        # 0x1f8
  000cb: movabs rax,0x37f000000000002
  000d5: mov    QWORD PTR [r14-0x48],rax
:00004 _%3 = %2 > %3                        [Float][Float]
  000d9: ucomisd xmm4,xmm2
  000dd: jbe    0x36f80
:00005 condnotbr _%3 =>:00008
:00006 %2 = literal[255.0]
  000e3: movq   xmm2,QWORD PTR [rip+0x11d]        # 0x208
  000eb: movabs rax,0x37f000000000002
  000f5: mov    QWORD PTR [r14-0x40],rax
:00007 br =>:00008
  000f9: jmp    0x36fa6
:00008 %3 = literal[0.0]
  000fe: movq   xmm2,QWORD PTR [rip+0x112]        # 0x218
  00106: movabs rax,0x8000000000000002
  00110: mov    QWORD PTR [r14-0x48],rax
:00009 _%3 = %2 < %3                        [Float][Float]
  00114: ucomisd xmm4,xmm2
  00118: jae    0x36fc3
:00010 condnotbr _%3 =>:00013
:00011 %2 = literal[0.0]
  0011e: movq   xmm2,QWORD PTR [rip+0x102]        # 0x228
  00126: movabs rax,0x8000000000000002
  00130: mov    QWORD PTR [r14-0x40],rax
:00012 br =>:00013
  00134: jmp    0x36fdc
:00013 %3 = %2.call to_i()                  [Float]
  00139: mov    rdi,QWORD PTR [r14-0x40]
  0013d: test   rdi,0x1
  00144: jne    0x36ff9
  0014a: test   rdi,0x2
  00151: jne    0x16e
  00157: test   rdi,0x7
  0015e: jne    0x36ff9
  00164: cmp    DWORD PTR [rdi+0x4],0x7
  00168: jne    0x36ff9
  0016e: cmp    DWORD PTR [rip+0xffffffffffff8c66],0x26        # 0xffff8ddb
  00175: jne    0x36ff9
  0017b: mov    r9,0x0
  00182: mov    rdx,rdi
  00185: mov    QWORD PTR [rsp-0x40],rcx
  0018a: mov    QWORD PTR [rsp-0x28],0x0
  00193: lea    rcx,[r14-0x48]
  00197: mov    r8,0x0
  0019e: mov    rsi,QWORD PTR [rbx]
  001a1: mov    QWORD PTR [rsp-0x18],rsi
  001a6: lea    rsi,[rsp-0x18]
  001ab: mov    QWORD PTR [rbx],rsi
  001ae: lea    r14,[rsp-0x10]
  001b3: mov    QWORD PTR [rsp-0x20],r14
  001b8: call   0x37008
  001bd: lea    r14,[rbp-0x8]
  001c1: mov    QWORD PTR [rbx],r14
  001c4: mov    r14,QWORD PTR [rbp-0x10]
  001c8: test   rax,rax
  001cb: je     0x3703a
  001d1: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 ret %3
  001d5: mov    rax,QWORD PTR [r14-0x48]
  001d9: leave  
  001da: ret    
==> start whole compile: <unnamed> FuncId(110) self_class:Scene start:[00000] bytecode:0x5592e7419170
<== finished compile. elapsed:17.4µs
offset:Pos(47992) code: 253 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x36e28
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x36e28
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(3, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax]
  0006c: mov    rax,QWORD PTR [rax]
  0006f: mov    rax,QWORD PTR [rax-0x30]
  00073: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7274497]
  00077: mov    rax,0xde0003
  0007e: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  00082: mov    rdi,QWORD PTR [r14-0x40]
  00086: test   rdi,0x1
  0008d: je     0x36e37
  00093: cmp    DWORD PTR [rip+0xffffffffffff8b11],0x26        # 0xffff8bab
  0009a: jne    0x36e37
  000a0: mov    r9,QWORD PTR [r14-0x48]
  000a4: mov    rdx,rdi
  000a7: mov    QWORD PTR [rsp-0x40],rcx
  000ac: mov    QWORD PTR [rsp-0x28],0x0
  000b5: lea    rcx,[r14-0x50]
  000b9: mov    r8,0x0
  000c0: mov    rsi,QWORD PTR [rbx]
  000c3: mov    QWORD PTR [rsp-0x18],rsi
  000c8: lea    rsi,[rsp-0x18]
  000cd: mov    QWORD PTR [rbx],rsi
  000d0: lea    r14,[rsp-0x10]
  000d5: mov    QWORD PTR [rsp-0x20],r14
  000da: call   0x36e46
  000df: lea    r14,[rbp-0x8]
  000e3: mov    QWORD PTR [rbx],r14
  000e6: mov    r14,QWORD PTR [rbp-0x10]
  000ea: test   rax,rax
  000ed: je     0x36e78
  000f3: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  000f7: mov    rax,QWORD PTR [r14-0x40]
  000fb: leave  
  000fc: ret    
==> start whole compile: <unnamed> FuncId(109) self_class:Scene start:[00000] bytecode:0x5592e73f84b0
<== finished compile. elapsed:60.4µs
offset:Pos(48245) code: 3701 bytes  data: 102 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jge    0x3d
  00017: mov    eax,0x1
  0001c: sub    eax,edx
  0001e: test   rax,rax
  00021: je     0x3d
  00027: lea    rdi,[r14-0x40]
  0002b: mov    QWORD PTR [rdi+rax*8],0x4
  00033: sub    rax,0x1
  00037: jne    0x2b
  0003d: mov    rax,0x4
  00044: mov    QWORD PTR [r14-0x40],rax
  00048: mov    QWORD PTR [r14-0x48],rax
  0004c: mov    QWORD PTR [r14-0x50],rax
  00050: mov    QWORD PTR [r14-0x58],rax
  00054: mov    QWORD PTR [r14-0x60],rax
  00058: mov    QWORD PTR [r14-0x68],rax
  0005c: mov    QWORD PTR [r14-0x70],rax
  00060: mov    QWORD PTR [r14-0x78],rax
  00064: mov    rdi,QWORD PTR [r14-0x30]
  00068: test   rdi,0x7
  0006f: jne    0x36d99
  00075: cmp    DWORD PTR [rdi+0x4],0x35
  00079: jne    0x36d99
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffff8a35]        # 0xffff8abb
  00086: cmp    rax,QWORD PTR [rip+0xdfe]        # 0xe8b
  0008d: jne    0x36da8
  00093: mov    rax,QWORD PTR [rip+0xde1]        # 0xe7b
  0009a: mov    QWORD PTR [r14-0x60],rax
:00002 %7 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0xdf5]        # 0xe9b
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x68],rax
:00003 %8 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0xdef]        # 0xeab
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x70],rax
:00004 %9 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0xde9]        # 0xebb
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x78],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x60]
  000e4: test   rdi,0x7
  000eb: jne    0x36df3
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x36df3
  000fb: cmp    DWORD PTR [rip+0xffffffffffff89ac],0x26        # 0xffff8aae
  00102: jne    0x36df3
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x68]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x36e02
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: test   rax,rax
  00182: je     0x36e34
  00188: mov    QWORD PTR [r14-0x40],rax
:00006 
:00007 %6 = dynvar(2, %3)
  0018c: mov    rax,QWORD PTR [r14-0x18]
  00190: mov    rax,QWORD PTR [rax]
  00193: mov    rax,QWORD PTR [rax-0x30]
  00197: mov    QWORD PTR [r14-0x60],rax
:00008 %7 = literal[7208961]
  0019b: mov    rax,0xdc0003
  001a2: mov    QWORD PTR [r14-0x68],rax
:00009 _ = %6.call times(&%7)               [Integer]
  001a6: mov    rdi,QWORD PTR [r14-0x60]
  001aa: test   rdi,0x1
  001b1: je     0x36e43
  001b7: cmp    DWORD PTR [rip+0xffffffffffff88f0],0x26        # 0xffff8aae
  001be: jne    0x36e43
  001c4: mov    r9,QWORD PTR [r14-0x68]
  001c8: sub    rsp,0x10
  001cc: movq   QWORD PTR [rsp],xmm3
  001d1: movq   QWORD PTR [rsp+0x8],xmm4
  001d7: mov    rdx,rdi
  001da: mov    QWORD PTR [rsp-0x40],rcx
  001df: mov    QWORD PTR [rsp-0x28],0x0
  001e8: lea    rcx,[r14-0x70]
  001ec: mov    r8,0x0
  001f3: mov    rsi,QWORD PTR [rbx]
  001f6: mov    QWORD PTR [rsp-0x18],rsi
  001fb: lea    rsi,[rsp-0x18]
  00200: mov    QWORD PTR [rbx],rsi
  00203: lea    r14,[rsp-0x10]
  00208: mov    QWORD PTR [rsp-0x20],r14
  0020d: call   0x36e52
  00212: lea    r14,[rbp-0x8]
  00216: mov    QWORD PTR [rbx],r14
  00219: mov    r14,QWORD PTR [rbp-0x10]
  0021d: movq   xmm3,QWORD PTR [rsp]
  00222: movq   xmm4,QWORD PTR [rsp+0x8]
  00228: add    rsp,0x10
  0022c: test   rax,rax
  0022f: je     0x36e84
:00010 
:00011 %6 = %2.call x()                     [Vec]
  00235: mov    rdi,QWORD PTR [r14-0x40]
  00239: test   rdi,0x7
  00240: jne    0x36e93
  00246: cmp    DWORD PTR [rdi+0x4],0x2b
  0024a: jne    0x36e93
  00250: cmp    DWORD PTR [rip+0xffffffffffff8857],0x26        # 0xffff8aae
  00257: jne    0x36e93
  0025d: mov    esi,DWORD PTR [rip+0xc64]        # 0xec7
  00263: cmp    esi,0xffffffff
  00266: je     0x36ea2
  0026c: cmp    WORD PTR [rdi+0x2],0x3
  00271: jne    0x28a
  00277: cmp    esi,0x6
  0027a: jge    0x28a
  00280: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00285: jmp    0x2b4
  0028a: sub    rsp,0x10
  0028e: movq   QWORD PTR [rsp],xmm3
  00293: movq   QWORD PTR [rsp+0x8],xmm4
  00299: movabs rax,0x5592e6dd3800
  002a3: call   rax
  002a5: movq   xmm3,QWORD PTR [rsp]
  002aa: movq   xmm4,QWORD PTR [rsp+0x8]
  002b0: add    rsp,0x10
  002b4: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %7 = dynvar(2, %4)
  002b8: mov    rax,QWORD PTR [r14-0x18]
  002bc: mov    rax,QWORD PTR [rax]
  002bf: mov    rax,QWORD PTR [rax-0x38]
  002c3: mov    QWORD PTR [r14-0x68],rax
:00014 %8 = dynvar(2, %4)
  002c7: mov    rax,QWORD PTR [r14-0x18]
  002cb: mov    rax,QWORD PTR [rax]
  002ce: mov    rax,QWORD PTR [rax-0x38]
  002d2: mov    QWORD PTR [r14-0x70],rax
:00015 %7 = %7 * %8                         [Float][Float]
  002d6: mov    rdi,QWORD PTR [r14-0x68]
  002da: test   rdi,0x1
  002e1: jne    0x36ee9
  002e7: test   rdi,0x2
  002ee: je     0x32a
  002f4: xorps  xmm2,xmm2
  002f7: movabs rax,0x8000000000000002
  00301: cmp    rdi,rax
  00304: je     0x33c
  0030a: mov    rax,rdi
  0030d: sar    rax,0x3f
  00311: add    rax,0x2
  00315: and    rdi,0xfffffffffffffffc
  00319: or     rdi,rax
  0031c: rol    rdi,0x3d
  00320: movq   xmm2,rdi
  00325: jmp    0x33c
  0032a: call   0xffff4408
  0032f: test   rax,rax
  00332: je     0x36ee9
  00338: movq   xmm2,xmm0
  0033c: mov    rdi,QWORD PTR [r14-0x70]
  00340: test   rdi,0x1
  00347: jne    0x36ef8
  0034d: test   rdi,0x2
  00354: je     0x390
  0035a: xorps  xmm3,xmm3
  0035d: movabs rax,0x8000000000000002
  00367: cmp    rdi,rax
  0036a: je     0x3a2
  00370: mov    rax,rdi
  00373: sar    rax,0x3f
  00377: add    rax,0x2
  0037b: and    rdi,0xfffffffffffffffc
  0037f: or     rdi,rax
  00382: rol    rdi,0x3d
  00386: movq   xmm3,rdi
  0038b: jmp    0x3a2
  00390: call   0xffff4408
  00395: test   rax,rax
  00398: je     0x36ef8
  0039e: movq   xmm3,xmm0
  003a2: mulsd  xmm2,xmm3
:00016 %3 = %6 / %7                         [Float][Float]
  003a6: mov    rdi,QWORD PTR [r14-0x60]
  003aa: test   rdi,0x1
  003b1: jne    0x36f07
  003b7: test   rdi,0x2
  003be: je     0x3fa
  003c4: xorps  xmm5,xmm5
  003c7: movabs rax,0x8000000000000002
  003d1: cmp    rdi,rax
  003d4: je     0x40c
  003da: mov    rax,rdi
  003dd: sar    rax,0x3f
  003e1: add    rax,0x2
  003e5: and    rdi,0xfffffffffffffffc
  003e9: or     rdi,rax
  003ec: rol    rdi,0x3d
  003f0: movq   xmm5,rdi
  003f5: jmp    0x40c
  003fa: call   0xffff4408
  003ff: test   rax,rax
  00402: je     0x36f07
  00408: movq   xmm5,xmm0
  0040c: movq   xmm6,xmm5
  00410: movq   rax,xmm2
  00415: test   rax,rax
  00418: je     0xffff43d4
  0041e: divsd  xmm6,xmm2
:00017 %6 = %2.call y()                     [Vec]
  00422: movq   xmm0,xmm6
  00426: call   0xffff452c
  0042b: mov    QWORD PTR [r14-0x48],rax
  0042f: mov    rdi,QWORD PTR [r14-0x40]
  00433: test   rdi,0x7
  0043a: jne    0x36f23
  00440: cmp    DWORD PTR [rdi+0x4],0x2b
  00444: jne    0x36f23
  0044a: cmp    DWORD PTR [rip+0xffffffffffff865d],0x26        # 0xffff8aae
  00451: jne    0x36f23
  00457: mov    esi,DWORD PTR [rip+0xa72]        # 0xecf
  0045d: cmp    esi,0xffffffff
  00460: je     0x36f3f
  00466: cmp    WORD PTR [rdi+0x2],0x3
  0046b: jne    0x484
  00471: cmp    esi,0x6
  00474: jge    0x484
  0047a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0047f: jmp    0x4ba
  00484: sub    rsp,0x20
  00488: movq   QWORD PTR [rsp],xmm2
  0048d: movq   QWORD PTR [rsp+0x8],xmm3
  00493: movq   QWORD PTR [rsp+0x10],xmm4
  00499: movabs rax,0x5592e6dd3800
  004a3: call   rax
  004a5: movq   xmm2,QWORD PTR [rsp]
  004aa: movq   xmm3,QWORD PTR [rsp+0x8]
  004b0: movq   xmm4,QWORD PTR [rsp+0x10]
  004b6: add    rsp,0x20
  004ba: mov    QWORD PTR [r14-0x60],rax
:00018 
:00019 %7 = dynvar(2, %4)
  004be: mov    rax,QWORD PTR [r14-0x18]
  004c2: mov    rax,QWORD PTR [rax]
  004c5: mov    rax,QWORD PTR [rax-0x38]
  004c9: mov    QWORD PTR [r14-0x68],rax
:00020 %8 = dynvar(2, %4)
  004cd: mov    rax,QWORD PTR [r14-0x18]
  004d1: mov    rax,QWORD PTR [rax]
  004d4: mov    rax,QWORD PTR [rax-0x38]
  004d8: mov    QWORD PTR [r14-0x70],rax
:00021 %7 = %7 * %8                         [Float][Float]
  004dc: mov    rdi,QWORD PTR [r14-0x68]
  004e0: test   rdi,0x1
  004e7: jne    0x36f92
  004ed: test   rdi,0x2
  004f4: je     0x530
  004fa: xorps  xmm2,xmm2
  004fd: movabs rax,0x8000000000000002
  00507: cmp    rdi,rax
  0050a: je     0x542
  00510: mov    rax,rdi
  00513: sar    rax,0x3f
  00517: add    rax,0x2
  0051b: and    rdi,0xfffffffffffffffc
  0051f: or     rdi,rax
  00522: rol    rdi,0x3d
  00526: movq   xmm2,rdi
  0052b: jmp    0x542
  00530: call   0xffff4408
  00535: test   rax,rax
  00538: je     0x36f92
  0053e: movq   xmm2,xmm0
  00542: mov    rdi,QWORD PTR [r14-0x70]
  00546: test   rdi,0x1
  0054d: jne    0x36fa1
  00553: test   rdi,0x2
  0055a: je     0x596
  00560: xorps  xmm3,xmm3
  00563: movabs rax,0x8000000000000002
  0056d: cmp    rdi,rax
  00570: je     0x5a8
  00576: mov    rax,rdi
  00579: sar    rax,0x3f
  0057d: add    rax,0x2
  00581: and    rdi,0xfffffffffffffffc
  00585: or     rdi,rax
  00588: rol    rdi,0x3d
  0058c: movq   xmm3,rdi
  00591: jmp    0x5a8
  00596: call   0xffff4408
  0059b: test   rax,rax
  0059e: je     0x36fa1
  005a4: movq   xmm3,xmm0
  005a8: mulsd  xmm2,xmm3
:00022 %4 = %6 / %7                         [Float][Float]
  005ac: mov    rdi,QWORD PTR [r14-0x60]
  005b0: test   rdi,0x1
  005b7: jne    0x36fb0
  005bd: test   rdi,0x2
  005c4: je     0x600
  005ca: xorps  xmm5,xmm5
  005cd: movabs rax,0x8000000000000002
  005d7: cmp    rdi,rax
  005da: je     0x612
  005e0: mov    rax,rdi
  005e3: sar    rax,0x3f
  005e7: add    rax,0x2
  005eb: and    rdi,0xfffffffffffffffc
  005ef: or     rdi,rax
  005f2: rol    rdi,0x3d
  005f6: movq   xmm5,rdi
  005fb: jmp    0x612
  00600: call   0xffff4408
  00605: test   rax,rax
  00608: je     0x36fb0
  0060e: movq   xmm5,xmm0
  00612: movq   xmm6,xmm5
  00616: movq   rax,xmm2
  0061b: test   rax,rax
  0061e: je     0xffff43d4
  00624: divsd  xmm6,xmm2
:00023 %6 = %2.call z()                     [Vec]
  00628: movq   xmm0,xmm6
  0062c: call   0xffff452c
  00631: mov    QWORD PTR [r14-0x50],rax
  00635: mov    rdi,QWORD PTR [r14-0x40]
  00639: test   rdi,0x7
  00640: jne    0x36fcc
  00646: cmp    DWORD PTR [rdi+0x4],0x2b
  0064a: jne    0x36fcc
  00650: cmp    DWORD PTR [rip+0xffffffffffff8457],0x26        # 0xffff8aae
  00657: jne    0x36fcc
  0065d: mov    esi,DWORD PTR [rip+0x874]        # 0xed7
  00663: cmp    esi,0xffffffff
  00666: je     0x36fe8
  0066c: cmp    WORD PTR [rdi+0x2],0x3
  00671: jne    0x68a
  00677: cmp    esi,0x6
  0067a: jge    0x68a
  00680: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00685: jmp    0x6c0
  0068a: sub    rsp,0x20
  0068e: movq   QWORD PTR [rsp],xmm2
  00693: movq   QWORD PTR [rsp+0x8],xmm3
  00699: movq   QWORD PTR [rsp+0x10],xmm4
  0069f: movabs rax,0x5592e6dd3800
  006a9: call   rax
  006ab: movq   xmm2,QWORD PTR [rsp]
  006b0: movq   xmm3,QWORD PTR [rsp+0x8]
  006b6: movq   xmm4,QWORD PTR [rsp+0x10]
  006bc: add    rsp,0x20
  006c0: mov    QWORD PTR [r14-0x60],rax
:00024 
:00025 %7 = dynvar(2, %4)
  006c4: mov    rax,QWORD PTR [r14-0x18]
  006c8: mov    rax,QWORD PTR [rax]
  006cb: mov    rax,QWORD PTR [rax-0x38]
  006cf: mov    QWORD PTR [r14-0x68],rax
:00026 %8 = dynvar(2, %4)
  006d3: mov    rax,QWORD PTR [r14-0x18]
  006d7: mov    rax,QWORD PTR [rax]
  006da: mov    rax,QWORD PTR [rax-0x38]
  006de: mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7 * %8                         [Float][Float]
  006e2: mov    rdi,QWORD PTR [r14-0x68]
  006e6: test   rdi,0x1
  006ed: jne    0x3703b
  006f3: test   rdi,0x2
  006fa: je     0x736
  00700: xorps  xmm2,xmm2
  00703: movabs rax,0x8000000000000002
  0070d: cmp    rdi,rax
  00710: je     0x748
  00716: mov    rax,rdi
  00719: sar    rax,0x3f
  0071d: add    rax,0x2
  00721: and    rdi,0xfffffffffffffffc
  00725: or     rdi,rax
  00728: rol    rdi,0x3d
  0072c: movq   xmm2,rdi
  00731: jmp    0x748
  00736: call   0xffff4408
  0073b: test   rax,rax
  0073e: je     0x3703b
  00744: movq   xmm2,xmm0
  00748: mov    rdi,QWORD PTR [r14-0x70]
  0074c: test   rdi,0x1
  00753: jne    0x3704a
  00759: test   rdi,0x2
  00760: je     0x79c
  00766: xorps  xmm3,xmm3
  00769: movabs rax,0x8000000000000002
  00773: cmp    rdi,rax
  00776: je     0x7ae
  0077c: mov    rax,rdi
  0077f: sar    rax,0x3f
  00783: add    rax,0x2
  00787: and    rdi,0xfffffffffffffffc
  0078b: or     rdi,rax
  0078e: rol    rdi,0x3d
  00792: movq   xmm3,rdi
  00797: jmp    0x7ae
  0079c: call   0xffff4408
  007a1: test   rax,rax
  007a4: je     0x3704a
  007aa: movq   xmm3,xmm0
  007ae: mulsd  xmm2,xmm3
:00028 %5 = %6 / %7                         [Float][Float]
  007b2: mov    rdi,QWORD PTR [r14-0x60]
  007b6: test   rdi,0x1
  007bd: jne    0x37059
  007c3: test   rdi,0x2
  007ca: je     0x806
  007d0: xorps  xmm5,xmm5
  007d3: movabs rax,0x8000000000000002
  007dd: cmp    rdi,rax
  007e0: je     0x818
  007e6: mov    rax,rdi
  007e9: sar    rax,0x3f
  007ed: add    rax,0x2
  007f1: and    rdi,0xfffffffffffffffc
  007f5: or     rdi,rax
  007f8: rol    rdi,0x3d
  007fc: movq   xmm5,rdi
  00801: jmp    0x818
  00806: call   0xffff4408
  0080b: test   rax,rax
  0080e: je     0x37059
  00814: movq   xmm5,xmm0
  00818: movq   xmm6,xmm5
  0081c: movq   rax,xmm2
  00821: test   rax,rax
  00824: je     0xffff43d4
  0082a: divsd  xmm6,xmm2
:00029 %6 = %4
  0082e: mov    rax,QWORD PTR [r14-0x50]
  00832: mov    QWORD PTR [r14-0x60],rax
:00030 %6 = %0.call clamp(%6; 1)            [Scene]
  00836: movq   xmm0,xmm6
  0083a: call   0xffff452c
  0083f: mov    QWORD PTR [r14-0x58],rax
  00843: mov    rdi,QWORD PTR [r14-0x30]
  00847: cmp    DWORD PTR [rip+0xffffffffffff8260],0x26        # 0xffff8aae
  0084e: jne    0x37075
  00854: sub    rsp,0x20
  00858: movq   QWORD PTR [rsp],xmm2
  0085d: movq   QWORD PTR [rsp+0x8],xmm3
  00863: movq   QWORD PTR [rsp+0x10],xmm4
  00869: cmp    DWORD PTR [rip+0xffffffffffff8242],0x0        # 0xffff8ab2
  00870: je     0x888
  00876: mov    rdi,r12
  00879: mov    rsi,QWORD PTR [rbx]
  0087c: movabs rax,0x5592e6e3ca90
  00886: call   rax
  00888: mov    QWORD PTR [rsp-0x28],0x0
  00891: mov    rax,QWORD PTR [r14-0x30]
  00895: mov    QWORD PTR [rsp-0x40],rax
  0089a: mov    rdi,0x1
  008a1: mov    rax,QWORD PTR [r14-0x60]
  008a5: mov    QWORD PTR [rsp-0x48],rax
  008aa: mov    QWORD PTR [rsp-0x38],0x0
  008b3: movabs rax,0x1000400000057
  008bd: mov    QWORD PTR [rsp-0x30],rax
  008c2: movabs r13,0x5592e73a9360
  008cc: mov    rsi,QWORD PTR [rbx]
  008cf: mov    QWORD PTR [rsp-0x18],rsi
  008d4: lea    rsi,[rsp-0x18]
  008d9: mov    QWORD PTR [rbx],rsi
  008dc: lea    r14,[rsp-0x10]
  008e1: mov    QWORD PTR [rsp-0x20],r14
  008e6: call   0xffffbb5b
  008eb: lea    r14,[rbp-0x8]
  008ef: mov    QWORD PTR [rbx],r14
  008f2: mov    r14,QWORD PTR [rbp-0x10]
  008f6: movq   xmm2,QWORD PTR [rsp]
  008fb: movq   xmm3,QWORD PTR [rsp+0x8]
  00901: movq   xmm4,QWORD PTR [rsp+0x10]
  00907: add    rsp,0x20
  0090b: test   rax,rax
  0090e: je     0x37091
  00914: mov    QWORD PTR [r14-0x60],rax
:00031 
:00032 %6 = %6.call chr()                   [Integer]
  00918: mov    rdi,QWORD PTR [r14-0x60]
  0091c: test   rdi,0x1
  00923: je     0x370a0
  00929: cmp    DWORD PTR [rip+0xffffffffffff817e],0x26        # 0xffff8aae
  00930: jne    0x370a0
  00936: mov    r9,0x0
  0093d: sub    rsp,0x20
  00941: movq   QWORD PTR [rsp],xmm2
  00946: movq   QWORD PTR [rsp+0x8],xmm3
  0094c: movq   QWORD PTR [rsp+0x10],xmm4
  00952: mov    rdx,rdi
  00955: mov    QWORD PTR [rsp-0x40],rcx
  0095a: mov    QWORD PTR [rsp-0x28],0x0
  00963: lea    rcx,[r14-0x68]
  00967: mov    r8,0x0
  0096e: mov    rsi,QWORD PTR [rbx]
  00971: mov    QWORD PTR [rsp-0x18],rsi
  00976: lea    rsi,[rsp-0x18]
  0097b: mov    QWORD PTR [rbx],rsi
  0097e: lea    r14,[rsp-0x10]
  00983: mov    QWORD PTR [rsp-0x20],r14
  00988: call   0x370bc
  0098d: lea    r14,[rbp-0x8]
  00991: mov    QWORD PTR [rbx],r14
  00994: mov    r14,QWORD PTR [rbp-0x10]
  00998: movq   xmm2,QWORD PTR [rsp]
  0099d: movq   xmm3,QWORD PTR [rsp+0x8]
  009a3: movq   xmm4,QWORD PTR [rsp+0x10]
  009a9: add    rsp,0x20
  009ad: test   rax,rax
  009b0: je     0x370ee
  009b6: mov    QWORD PTR [r14-0x60],rax
:00033 
:00034 _ = %0.call print(%6; 1)             [Scene]
  009ba: mov    rdi,QWORD PTR [r14-0x30]
  009be: cmp    DWORD PTR [rip+0xffffffffffff80e9],0x26        # 0xffff8aae
  009c5: jne    0x370fd
  009cb: mov    r9,0x0
  009d2: sub    rsp,0x20
  009d6: movq   QWORD PTR [rsp],xmm2
  009db: movq   QWORD PTR [rsp+0x8],xmm3
  009e1: movq   QWORD PTR [rsp+0x10],xmm4
  009e7: mov    rdx,rdi
  009ea: mov    QWORD PTR [rsp-0x40],rcx
  009ef: mov    QWORD PTR [rsp-0x28],0x0
  009f8: lea    rcx,[r14-0x60]
  009fc: mov    r8,0x1
  00a03: mov    rsi,QWORD PTR [rbx]
  00a06: mov    QWORD PTR [rsp-0x18],rsi
  00a0b: lea    rsi,[rsp-0x18]
  00a10: mov    QWORD PTR [rbx],rsi
  00a13: lea    r14,[rsp-0x10]
  00a18: mov    QWORD PTR [rsp-0x20],r14
  00a1d: call   0x37119
  00a22: lea    r14,[rbp-0x8]
  00a26: mov    QWORD PTR [rbx],r14
  00a29: mov    r14,QWORD PTR [rbp-0x10]
  00a2d: movq   xmm2,QWORD PTR [rsp]
  00a32: movq   xmm3,QWORD PTR [rsp+0x8]
  00a38: movq   xmm4,QWORD PTR [rsp+0x10]
  00a3e: add    rsp,0x20
  00a42: test   rax,rax
  00a45: je     0x3714b
:00035 
:00036 %6 = %3
  00a4b: mov    rax,QWORD PTR [r14-0x48]
  00a4f: mov    QWORD PTR [r14-0x60],rax
:00037 %6 = %0.call clamp(%6; 1)            [Scene]
  00a53: mov    rdi,QWORD PTR [r14-0x30]
  00a57: cmp    DWORD PTR [rip+0xffffffffffff8050],0x26        # 0xffff8aae
  00a5e: jne    0x3715a
  00a64: sub    rsp,0x20
  00a68: movq   QWORD PTR [rsp],xmm2
  00a6d: movq   QWORD PTR [rsp+0x8],xmm3
  00a73: movq   QWORD PTR [rsp+0x10],xmm4
  00a79: cmp    DWORD PTR [rip+0xffffffffffff8032],0x0        # 0xffff8ab2
  00a80: je     0xa98
  00a86: mov    rdi,r12
  00a89: mov    rsi,QWORD PTR [rbx]
  00a8c: movabs rax,0x5592e6e3ca90
  00a96: call   rax
  00a98: mov    QWORD PTR [rsp-0x28],0x0
  00aa1: mov    rax,QWORD PTR [r14-0x30]
  00aa5: mov    QWORD PTR [rsp-0x40],rax
  00aaa: mov    rdi,0x1
  00ab1: mov    rax,QWORD PTR [r14-0x60]
  00ab5: mov    QWORD PTR [rsp-0x48],rax
  00aba: mov    QWORD PTR [rsp-0x38],0x0
  00ac3: movabs rax,0x1000400000057
  00acd: mov    QWORD PTR [rsp-0x30],rax
  00ad2: movabs r13,0x5592e73a9360
  00adc: mov    rsi,QWORD PTR [rbx]
  00adf: mov    QWORD PTR [rsp-0x18],rsi
  00ae4: lea    rsi,[rsp-0x18]
  00ae9: mov    QWORD PTR [rbx],rsi
  00aec: lea    r14,[rsp-0x10]
  00af1: mov    QWORD PTR [rsp-0x20],r14
  00af6: call   0xffffbb5b
  00afb: lea    r14,[rbp-0x8]
  00aff: mov    QWORD PTR [rbx],r14
  00b02: mov    r14,QWORD PTR [rbp-0x10]
  00b06: movq   xmm2,QWORD PTR [rsp]
  00b0b: movq   xmm3,QWORD PTR [rsp+0x8]
  00b11: movq   xmm4,QWORD PTR [rsp+0x10]
  00b17: add    rsp,0x20
  00b1b: test   rax,rax
  00b1e: je     0x37176
  00b24: mov    QWORD PTR [r14-0x60],rax
:00038 
:00039 %6 = %6.call chr()                   [Integer]
  00b28: mov    rdi,QWORD PTR [r14-0x60]
  00b2c: test   rdi,0x1
  00b33: je     0x37185
  00b39: cmp    DWORD PTR [rip+0xffffffffffff7f6e],0x26        # 0xffff8aae
  00b40: jne    0x37185
  00b46: mov    r9,0x0
  00b4d: sub    rsp,0x20
  00b51: movq   QWORD PTR [rsp],xmm2
  00b56: movq   QWORD PTR [rsp+0x8],xmm3
  00b5c: movq   QWORD PTR [rsp+0x10],xmm4
  00b62: mov    rdx,rdi
  00b65: mov    QWORD PTR [rsp-0x40],rcx
  00b6a: mov    QWORD PTR [rsp-0x28],0x0
  00b73: lea    rcx,[r14-0x68]
  00b77: mov    r8,0x0
  00b7e: mov    rsi,QWORD PTR [rbx]
  00b81: mov    QWORD PTR [rsp-0x18],rsi
  00b86: lea    rsi,[rsp-0x18]
  00b8b: mov    QWORD PTR [rbx],rsi
  00b8e: lea    r14,[rsp-0x10]
  00b93: mov    QWORD PTR [rsp-0x20],r14
  00b98: call   0x371a1
  00b9d: lea    r14,[rbp-0x8]
  00ba1: mov    QWORD PTR [rbx],r14
  00ba4: mov    r14,QWORD PTR [rbp-0x10]
  00ba8: movq   xmm2,QWORD PTR [rsp]
  00bad: movq   xmm3,QWORD PTR [rsp+0x8]
  00bb3: movq   xmm4,QWORD PTR [rsp+0x10]
  00bb9: add    rsp,0x20
  00bbd: test   rax,rax
  00bc0: je     0x371d3
  00bc6: mov    QWORD PTR [r14-0x60],rax
:00040 
:00041 _ = %0.call print(%6; 1)             [Scene]
  00bca: mov    rdi,QWORD PTR [r14-0x30]
  00bce: cmp    DWORD PTR [rip+0xffffffffffff7ed9],0x26        # 0xffff8aae
  00bd5: jne    0x371e2
  00bdb: mov    r9,0x0
  00be2: sub    rsp,0x20
  00be6: movq   QWORD PTR [rsp],xmm2
  00beb: movq   QWORD PTR [rsp+0x8],xmm3
  00bf1: movq   QWORD PTR [rsp+0x10],xmm4
  00bf7: mov    rdx,rdi
  00bfa: mov    QWORD PTR [rsp-0x40],rcx
  00bff: mov    QWORD PTR [rsp-0x28],0x0
  00c08: lea    rcx,[r14-0x60]
  00c0c: mov    r8,0x1
  00c13: mov    rsi,QWORD PTR [rbx]
  00c16: mov    QWORD PTR [rsp-0x18],rsi
  00c1b: lea    rsi,[rsp-0x18]
  00c20: mov    QWORD PTR [rbx],rsi
  00c23: lea    r14,[rsp-0x10]
  00c28: mov    QWORD PTR [rsp-0x20],r14
  00c2d: call   0x371fe
  00c32: lea    r14,[rbp-0x8]
  00c36: mov    QWORD PTR [rbx],r14
  00c39: mov    r14,QWORD PTR [rbp-0x10]
  00c3d: movq   xmm2,QWORD PTR [rsp]
  00c42: movq   xmm3,QWORD PTR [rsp+0x8]
  00c48: movq   xmm4,QWORD PTR [rsp+0x10]
  00c4e: add    rsp,0x20
  00c52: test   rax,rax
  00c55: je     0x37230
:00042 
:00043 %6 = %5
  00c5b: mov    rax,QWORD PTR [r14-0x58]
  00c5f: mov    QWORD PTR [r14-0x60],rax
:00044 %6 = %0.call clamp(%6; 1)            [Scene]
  00c63: mov    rdi,QWORD PTR [r14-0x30]
  00c67: cmp    DWORD PTR [rip+0xffffffffffff7e40],0x26        # 0xffff8aae
  00c6e: jne    0x3723f
  00c74: sub    rsp,0x20
  00c78: movq   QWORD PTR [rsp],xmm2
  00c7d: movq   QWORD PTR [rsp+0x8],xmm3
  00c83: movq   QWORD PTR [rsp+0x10],xmm4
  00c89: cmp    DWORD PTR [rip+0xffffffffffff7e22],0x0        # 0xffff8ab2
  00c90: je     0xca8
  00c96: mov    rdi,r12
  00c99: mov    rsi,QWORD PTR [rbx]
  00c9c: movabs rax,0x5592e6e3ca90
  00ca6: call   rax
  00ca8: mov    QWORD PTR [rsp-0x28],0x0
  00cb1: mov    rax,QWORD PTR [r14-0x30]
  00cb5: mov    QWORD PTR [rsp-0x40],rax
  00cba: mov    rdi,0x1
  00cc1: mov    rax,QWORD PTR [r14-0x60]
  00cc5: mov    QWORD PTR [rsp-0x48],rax
  00cca: mov    QWORD PTR [rsp-0x38],0x0
  00cd3: movabs rax,0x1000400000057
  00cdd: mov    QWORD PTR [rsp-0x30],rax
  00ce2: movabs r13,0x5592e73a9360
  00cec: mov    rsi,QWORD PTR [rbx]
  00cef: mov    QWORD PTR [rsp-0x18],rsi
  00cf4: lea    rsi,[rsp-0x18]
  00cf9: mov    QWORD PTR [rbx],rsi
  00cfc: lea    r14,[rsp-0x10]
  00d01: mov    QWORD PTR [rsp-0x20],r14
  00d06: call   0xffffbb5b
  00d0b: lea    r14,[rbp-0x8]
  00d0f: mov    QWORD PTR [rbx],r14
  00d12: mov    r14,QWORD PTR [rbp-0x10]
  00d16: movq   xmm2,QWORD PTR [rsp]
  00d1b: movq   xmm3,QWORD PTR [rsp+0x8]
  00d21: movq   xmm4,QWORD PTR [rsp+0x10]
  00d27: add    rsp,0x20
  00d2b: test   rax,rax
  00d2e: je     0x3725b
  00d34: mov    QWORD PTR [r14-0x60],rax
:00045 
:00046 %6 = %6.call chr()                   [Integer]
  00d38: mov    rdi,QWORD PTR [r14-0x60]
  00d3c: test   rdi,0x1
  00d43: je     0x3726a
  00d49: cmp    DWORD PTR [rip+0xffffffffffff7d5e],0x26        # 0xffff8aae
  00d50: jne    0x3726a
  00d56: mov    r9,0x0
  00d5d: sub    rsp,0x20
  00d61: movq   QWORD PTR [rsp],xmm2
  00d66: movq   QWORD PTR [rsp+0x8],xmm3
  00d6c: movq   QWORD PTR [rsp+0x10],xmm4
  00d72: mov    rdx,rdi
  00d75: mov    QWORD PTR [rsp-0x40],rcx
  00d7a: mov    QWORD PTR [rsp-0x28],0x0
  00d83: lea    rcx,[r14-0x68]
  00d87: mov    r8,0x0
  00d8e: mov    rsi,QWORD PTR [rbx]
  00d91: mov    QWORD PTR [rsp-0x18],rsi
  00d96: lea    rsi,[rsp-0x18]
  00d9b: mov    QWORD PTR [rbx],rsi
  00d9e: lea    r14,[rsp-0x10]
  00da3: mov    QWORD PTR [rsp-0x20],r14
  00da8: call   0x37286
  00dad: lea    r14,[rbp-0x8]
  00db1: mov    QWORD PTR [rbx],r14
  00db4: mov    r14,QWORD PTR [rbp-0x10]
  00db8: movq   xmm2,QWORD PTR [rsp]
  00dbd: movq   xmm3,QWORD PTR [rsp+0x8]
  00dc3: movq   xmm4,QWORD PTR [rsp+0x10]
  00dc9: add    rsp,0x20
  00dcd: test   rax,rax
  00dd0: je     0x372b8
  00dd6: mov    QWORD PTR [r14-0x60],rax
:00047 
:00048 %6 = %0.call print(%6; 1)            [Scene]
  00dda: mov    rdi,QWORD PTR [r14-0x30]
  00dde: cmp    DWORD PTR [rip+0xffffffffffff7cc9],0x26        # 0xffff8aae
  00de5: jne    0x372c7
  00deb: mov    r9,0x0
  00df2: sub    rsp,0x20
  00df6: movq   QWORD PTR [rsp],xmm2
  00dfb: movq   QWORD PTR [rsp+0x8],xmm3
  00e01: movq   QWORD PTR [rsp+0x10],xmm4
  00e07: mov    rdx,rdi
  00e0a: mov    QWORD PTR [rsp-0x40],rcx
  00e0f: mov    QWORD PTR [rsp-0x28],0x0
  00e18: lea    rcx,[r14-0x60]
  00e1c: mov    r8,0x1
  00e23: mov    rsi,QWORD PTR [rbx]
  00e26: mov    QWORD PTR [rsp-0x18],rsi
  00e2b: lea    rsi,[rsp-0x18]
  00e30: mov    QWORD PTR [rbx],rsi
  00e33: lea    r14,[rsp-0x10]
  00e38: mov    QWORD PTR [rsp-0x20],r14
  00e3d: call   0x372e3
  00e42: lea    r14,[rbp-0x8]
  00e46: mov    QWORD PTR [rbx],r14
  00e49: mov    r14,QWORD PTR [rbp-0x10]
  00e4d: movq   xmm2,QWORD PTR [rsp]
  00e52: movq   xmm3,QWORD PTR [rsp+0x8]
  00e58: movq   xmm4,QWORD PTR [rsp+0x10]
  00e5e: add    rsp,0x20
  00e62: test   rax,rax
  00e65: je     0x37315
  00e6b: mov    QWORD PTR [r14-0x60],rax
:00049 
:00050 ret %6
  00e6f: mov    rax,QWORD PTR [r14-0x60]
  00e73: leave  
  00e74: ret    
==> start whole compile: <unnamed> FuncId(107) self_class:Scene start:[00000] bytecode:0x5592e73a8480
<== finished compile. elapsed:26µs
offset:Pos(52048) code: 251 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x36458
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x36458
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x20]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7143425]
  00071: mov    rax,0xda0003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 _ = %2.call times(&%3)               [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x36467
  0008d: cmp    DWORD PTR [rip+0xffffffffffff7b3f],0x26        # 0xffff7bd3
  00094: jne    0x36467
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x36476
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: test   rax,rax
  000e7: je     0x364a8
:00004 
:00005 %2 = nil
  000ed: mov    QWORD PTR [r14-0x40],0x4
:00006 ret %2
  000f5: mov    rax,QWORD PTR [r14-0x40]
  000f9: leave  
  000fa: ret    
==> start whole compile: <unnamed> FuncId(108) self_class:Scene start:[00000] bytecode:0x5592e73bb090
<== finished compile. elapsed:118.1µs
offset:Pos(53331) code: 8152 bytes  data: 413 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [r14-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x35fc3
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x35
  000a7:    	jne    0x35fc3
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff7618],0x26        # 0xffff76d0
  000b8:    	jne    0x35fd2
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0x98]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x35fe1
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e:    	test   rax,rax
  00111:    	je     0x36013
  00117: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00003 %2 = %13
  0011e: ff 	mov    rax,QWORD PTR [r14-0x98]
  00125:    	mov    QWORD PTR [r14-0x40],rax
:00004 %13 = literal[2.0]
  00129: 00 	movq   xmm2,QWORD PTR [rip+0x1eac]        # 0x1fdd
  00131: 00 	mov    rax,0x2
  00138: ff 	mov    QWORD PTR [r14-0x98],rax
:00005 %14 = literal[3.14159265]
  0013f: 00 	movq   xmm3,QWORD PTR [rip+0x1ea6]        # 0x1fed
  00147: da 	movabs rax,0x490fda9e46a78a
  00151: ff 	mov    QWORD PTR [r14-0xa0],rax
:00006 %13 = %13 * %14                      [Float][Float]
  00158:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
  0015c:    	mov    rdi,QWORD PTR [r14-0x30]
  00160: 26 	cmp    DWORD PTR [rip+0xffffffffffff7569],0x26        # 0xffff76d0
  00167:    	jne    0x36022
  0016d: 00 	mov    r9,0x0
  00174:    	sub    rsp,0x10
  00178:    	movq   QWORD PTR [rsp],xmm2
  0017d:    	mov    rdx,rdi
  00180:    	mov    QWORD PTR [rsp-0x40],rcx
  00185: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0018e: ff 	lea    rcx,[r14-0xa0]
  00195: 00 	mov    r8,0x0
  0019c:    	mov    rsi,QWORD PTR [rbx]
  0019f:    	mov    QWORD PTR [rsp-0x18],rsi
  001a4:    	lea    rsi,[rsp-0x18]
  001a9:    	mov    QWORD PTR [rbx],rsi
  001ac:    	lea    r14,[rsp-0x10]
  001b1:    	mov    QWORD PTR [rsp-0x20],r14
  001b6:    	call   0x36041
  001bb:    	lea    r14,[rbp-0x8]
  001bf:    	mov    QWORD PTR [rbx],r14
  001c2:    	mov    r14,QWORD PTR [rbp-0x10]
  001c6:    	movq   xmm2,QWORD PTR [rsp]
  001cb:    	add    rsp,0x10
  001cf:    	test   rax,rax
  001d2:    	je     0x36073
  001d8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 
:00009 %3 = %13 * %14                       [Float][Float]
  001df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001e6: 00 	test   rdi,0x1
  001ed:    	jne    0x36082
  001f3: 00 	test   rdi,0x2
  001fa:    	je     0x236
  00200:    	xorps  xmm3,xmm3
  00203: 00 	movabs rax,0x8000000000000002
  0020d:    	cmp    rdi,rax
  00210:    	je     0x248
  00216:    	mov    rax,rdi
  00219:    	sar    rax,0x3f
  0021d:    	add    rax,0x2
  00221:    	and    rdi,0xfffffffffffffffc
  00225:    	or     rdi,rax
  00228:    	rol    rdi,0x3d
  0022c:    	movq   xmm3,rdi
  00231:    	jmp    0x248
  00236:    	call   0xffff302a
  0023b:    	test   rax,rax
  0023e:    	je     0x36082
  00244:    	movq   xmm3,xmm0
  00248:    	movq   xmm4,xmm2
  0024c:    	mulsd  xmm4,xmm3
:00010 %13 = const[Math]                    [Math]
  00250: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7486]        # 0xffff76dd
  00257: 00 	cmp    rax,QWORD PTR [rip+0x1daf]        # 0x200d
  0025e:    	jne    0x360a1
  00264: 00 	mov    rax,QWORD PTR [rip+0x1d92]        # 0x1ffd
  0026b: ff 	mov    QWORD PTR [r14-0x98],rax
:00011 %14 = %3
:00012 %13 = %13.inline MathCos(%14; 1)     [#<Class:Math>]
  00272: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00279: 00 	test   rdi,0x7
  00280:    	jne    0x3610a
  00286:    	cmp    DWORD PTR [rdi+0x4],0x24
  0028a:    	jne    0x3610a
  00290: 26 	cmp    DWORD PTR [rip+0xffffffffffff7439],0x26        # 0xffff76d0
  00297:    	jne    0x3610a
  0029d:    	sub    rsp,0x10
  002a1:    	movq   QWORD PTR [rsp],xmm2
  002a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  002ac:    	movq   xmm0,xmm4
  002b0: 92 	movabs rax,0x5592e6da7170
  002ba:    	call   rax
  002bc:    	movq   xmm2,QWORD PTR [rsp]
  002c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002c7:    	add    rsp,0x10
  002cb:    	movq   xmm2,xmm0
:00013 
:00014 %14 = const[Math]                    [Math]
  002cf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7407]        # 0xffff76dd
  002d6: 00 	cmp    rax,QWORD PTR [rip+0x1d50]        # 0x202d
  002dd:    	jne    0x3612d
  002e3: 00 	mov    rax,QWORD PTR [rip+0x1d33]        # 0x201d
  002ea: ff 	mov    QWORD PTR [r14-0xa0],rax
:00015 %15 = literal[1.0]
  002f1: 00 	movq   xmm3,QWORD PTR [rip+0x1d44]        # 0x203d
  002f9: 00 	movabs rax,0xff80000000000002
  00303: ff 	mov    QWORD PTR [r14-0xa8],rax
:00016 %15 = %15 - %2                       [Float][Float]
  0030a:    	mov    rdi,QWORD PTR [r14-0x40]
  0030e: 00 	test   rdi,0x1
  00315:    	jne    0x36196
  0031b: 00 	test   rdi,0x2
  00322:    	je     0x35e
  00328:    	xorps  xmm5,xmm5
  0032b: 00 	movabs rax,0x8000000000000002
  00335:    	cmp    rdi,rax
  00338:    	je     0x370
  0033e:    	mov    rax,rdi
  00341:    	sar    rax,0x3f
  00345:    	add    rax,0x2
  00349:    	and    rdi,0xfffffffffffffffc
  0034d:    	or     rdi,rax
  00350:    	rol    rdi,0x3d
  00354:    	movq   xmm5,rdi
  00359:    	jmp    0x370
  0035e:    	call   0xffff302a
  00363:    	test   rax,rax
  00366:    	je     0x36196
  0036c:    	movq   xmm5,xmm0
  00370:    	subsd  xmm3,xmm5
:00017 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  00374: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0037b: 00 	test   rdi,0x7
  00382:    	jne    0x361c2
  00388:    	cmp    DWORD PTR [rdi+0x4],0x24
  0038c:    	jne    0x361c2
  00392: 26 	cmp    DWORD PTR [rip+0xffffffffffff7337],0x26        # 0xffff76d0
  00399:    	jne    0x361c2
  0039f:    	sqrtsd xmm6,xmm3
:00018 
:00019 %4 = %13 * %14                       [Float][Float]
  003a3:    	movq   xmm7,xmm2
  003a7:    	mulsd  xmm7,xmm6
:00020 %13 = const[Math]                    [Math]
  003ab: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff732b]        # 0xffff76dd
  003b2: 00 	cmp    rax,QWORD PTR [rip+0x1ca4]        # 0x205d
  003b9:    	jne    0x361fe
  003bf: 00 	mov    rax,QWORD PTR [rip+0x1c87]        # 0x204d
  003c6: ff 	mov    QWORD PTR [r14-0x98],rax
:00021 %14 = %3
:00022 %13 = %13.inline MathSin(%14; 1)     [#<Class:Math>]
  003cd: ff 	mov    rdi,QWORD PTR [r14-0x98]
  003d4: 00 	test   rdi,0x7
  003db:    	jne    0x3628b
  003e1:    	cmp    DWORD PTR [rdi+0x4],0x24
  003e5:    	jne    0x3628b
  003eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff72de],0x26        # 0xffff76d0
  003f2:    	jne    0x3628b
  003f8:    	sub    rsp,0x30
  003fc:    	movq   QWORD PTR [rsp],xmm2
  00401:    	movq   QWORD PTR [rsp+0x8],xmm3
  00407:    	movq   QWORD PTR [rsp+0x10],xmm4
  0040d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00413:    	movq   QWORD PTR [rsp+0x20],xmm7
  00419:    	movq   xmm0,xmm4
  0041d: 92 	movabs rax,0x5592e6da7180
  00427:    	call   rax
  00429:    	movq   xmm2,QWORD PTR [rsp]
  0042e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00434:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0043a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00440:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00446:    	add    rsp,0x30
  0044a:    	movq   xmm2,xmm0
:00023 
:00024 %14 = const[Math]                    [Math]
  0044e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7288]        # 0xffff76dd
  00455: 00 	cmp    rax,QWORD PTR [rip+0x1c21]        # 0x207d
  0045c:    	jne    0x362cb
  00462: 00 	mov    rax,QWORD PTR [rip+0x1c04]        # 0x206d
  00469: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = literal[1.0]
  00470: 00 	movq   xmm3,QWORD PTR [rip+0x1c15]        # 0x208d
  00478: 00 	movabs rax,0xff80000000000002
  00482: ff 	mov    QWORD PTR [r14-0xa8],rax
:00026 %15 = %15 - %2                       [Float][Float]
  00489:    	subsd  xmm3,xmm5
:00027 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  0048d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00494: 00 	test   rdi,0x7
  0049b:    	jne    0x36358
  004a1:    	cmp    DWORD PTR [rdi+0x4],0x24
  004a5:    	jne    0x36358
  004ab: 26 	cmp    DWORD PTR [rip+0xffffffffffff721e],0x26        # 0xffff76d0
  004b2:    	jne    0x36358
  004b8:    	sqrtsd xmm6,xmm3
:00028 
:00029 %5 = %13 * %14                       [Float][Float]
  004bc:    	movq   xmm8,xmm2
  004c1:    	mulsd  xmm8,xmm6
:00030 %13 = const[Math]                    [Math]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7210]        # 0xffff76dd
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1bd9]        # 0x20ad
  004d4:    	jne    0x363a1
  004da: 00 	mov    rax,QWORD PTR [rip+0x1bbc]        # 0x209d
  004e1: ff 	mov    QWORD PTR [r14-0x98],rax
:00031 %14 = %2
:00032 %6 = %13.inline MathSqrt(%14; 1)     [#<Class:Math>]
  004e8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  004ef: 00 	test   rdi,0x7
  004f6:    	jne    0x3643c
  004fc:    	cmp    DWORD PTR [rdi+0x4],0x24
  00500:    	jne    0x3643c
  00506: 26 	cmp    DWORD PTR [rip+0xffffffffffff71c3],0x26        # 0xffff76d0
  0050d:    	jne    0x3643c
  00513:    	sqrtsd xmm2,xmm5
:00033 
:00034 %13 = dynvar(2, %2)
  00517:    	mov    rax,QWORD PTR [r14-0x18]
  0051b:    	mov    rax,QWORD PTR [rax]
  0051e:    	mov    rax,QWORD PTR [rax-0x28]
  00522: ff 	mov    QWORD PTR [r14-0x98],rax
:00035 %14 = 0: i32
  00529: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00036 %13 = %13.[%14]                      [Array][Integer]
  00534: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0053b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00542: 00 	test   rdi,0x7
  00549:    	jne    0x36493
  0054f:    	cmp    DWORD PTR [rdi+0x4],0xb
  00553:    	jne    0x36493
  00559: 00 	test   rsi,0x1
  00560:    	je     0x36493
  00566:    	sar    rsi,1
  00569:    	sub    rsp,0x30
  0056d:    	movq   QWORD PTR [rsp],xmm2
  00572:    	movq   QWORD PTR [rsp+0x8],xmm3
  00578:    	movq   QWORD PTR [rsp+0x10],xmm4
  0057e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00584:    	movq   QWORD PTR [rsp+0x20],xmm7
  0058a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00591: 92 	movabs rax,0x5592e6e49100
  0059b:    	call   rax
  0059d:    	movq   xmm2,QWORD PTR [rsp]
  005a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ba: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005c1:    	add    rsp,0x30
  005c5:    	test   rax,rax
  005c8:    	je     0x364e7
  005ce: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %13 = %13.call x()                   [Vec]
  005d5:    	movq   xmm0,xmm2
  005d9:    	call   0xffff314e
  005de:    	mov    QWORD PTR [r14-0x60],rax
  005e2:    	movq   xmm0,xmm4
  005e6:    	call   0xffff314e
  005eb:    	mov    QWORD PTR [r14-0x48],rax
  005ef:    	movq   xmm0,xmm7
  005f3:    	call   0xffff314e
  005f8:    	mov    QWORD PTR [r14-0x50],rax
  005fc:    	movq   xmm0,xmm8
  00601:    	call   0xffff314e
  00606:    	mov    QWORD PTR [r14-0x58],rax
  0060a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00611: 00 	test   rdi,0x7
  00618:    	jne    0x364f6
  0061e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00622:    	jne    0x364f6
  00628: 26 	cmp    DWORD PTR [rip+0xffffffffffff70a1],0x26        # 0xffff76d0
  0062f:    	jne    0x364f6
  00635:    	mov    esi,DWORD PTR [rip+0x1a7e]        # 0x20b9
  0063b:    	cmp    esi,0xffffffff
  0063e:    	je     0x36515
  00644:    	cmp    WORD PTR [rdi+0x2],0x3
  00649:    	jne    0x662
  0064f:    	cmp    esi,0x6
  00652:    	jge    0x662
  00658:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065d:    	jmp    0x680
  00662:    	sub    rsp,0x10
  00666:    	movq   QWORD PTR [rsp],xmm3
  0066b: 92 	movabs rax,0x5592e6dd3800
  00675:    	call   rax
  00677:    	movq   xmm3,QWORD PTR [rsp]
  0067c:    	add    rsp,0x10
  00680: ff 	mov    QWORD PTR [r14-0x98],rax
:00038 
:00039 %13 = %4 * %13                       [Float][Float]
  00687:    	mov    rdi,QWORD PTR [r14-0x50]
  0068b: 00 	test   rdi,0x1
  00692:    	jne    0x36550
  00698: 00 	test   rdi,0x2
  0069f:    	je     0x6db
  006a5:    	xorps  xmm2,xmm2
  006a8: 00 	movabs rax,0x8000000000000002
  006b2:    	cmp    rdi,rax
  006b5:    	je     0x6ed
  006bb:    	mov    rax,rdi
  006be:    	sar    rax,0x3f
  006c2:    	add    rax,0x2
  006c6:    	and    rdi,0xfffffffffffffffc
  006ca:    	or     rdi,rax
  006cd:    	rol    rdi,0x3d
  006d1:    	movq   xmm2,rdi
  006d6:    	jmp    0x6ed
  006db:    	call   0xffff302a
  006e0:    	test   rax,rax
  006e3:    	je     0x36550
  006e9:    	movq   xmm2,xmm0
  006ed: ff 	mov    rdi,QWORD PTR [r14-0x98]
  006f4: 00 	test   rdi,0x1
  006fb:    	jne    0x3656f
  00701: 00 	test   rdi,0x2
  00708:    	je     0x744
  0070e:    	xorps  xmm4,xmm4
  00711: 00 	movabs rax,0x8000000000000002
  0071b:    	cmp    rdi,rax
  0071e:    	je     0x756
  00724:    	mov    rax,rdi
  00727:    	sar    rax,0x3f
  0072b:    	add    rax,0x2
  0072f:    	and    rdi,0xfffffffffffffffc
  00733:    	or     rdi,rax
  00736:    	rol    rdi,0x3d
  0073a:    	movq   xmm4,rdi
  0073f:    	jmp    0x756
  00744:    	call   0xffff302a
  00749:    	test   rax,rax
  0074c:    	je     0x3656f
  00752:    	movq   xmm4,xmm0
  00756:    	mulsd  xmm4,xmm2
:00040 %14 = dynvar(2, %2)
  0075a:    	mov    rax,QWORD PTR [r14-0x18]
  0075e:    	mov    rax,QWORD PTR [rax]
  00761:    	mov    rax,QWORD PTR [rax-0x28]
  00765: ff 	mov    QWORD PTR [r14-0xa0],rax
:00041 %15 = 1: i32
  0076c: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00042 %14 = %14.[%15]                      [Array][Integer]
  00777: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0077e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00785: 00 	test   rdi,0x7
  0078c:    	jne    0x3658e
  00792:    	cmp    DWORD PTR [rdi+0x4],0xb
  00796:    	jne    0x3658e
  0079c: 00 	test   rsi,0x1
  007a3:    	je     0x3658e
  007a9:    	sar    rsi,1
  007ac:    	sub    rsp,0x10
  007b0:    	movq   QWORD PTR [rsp],xmm2
  007b5:    	movq   QWORD PTR [rsp+0x8],xmm4
  007bb: 92 	movabs rax,0x5592e6e49100
  007c5:    	call   rax
  007c7:    	movq   xmm2,QWORD PTR [rsp]
  007cc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007d2:    	add    rsp,0x10
  007d6:    	test   rax,rax
  007d9:    	je     0x365ad
  007df: ff 	mov    QWORD PTR [r14-0xa0],rax
:00043 %14 = %14.call x()                   [Vec]
  007e6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  007ed: 00 	test   rdi,0x7
  007f4:    	jne    0x365bc
  007fa:    	cmp    DWORD PTR [rdi+0x4],0x2b
  007fe:    	jne    0x365bc
  00804: 26 	cmp    DWORD PTR [rip+0xffffffffffff6ec5],0x26        # 0xffff76d0
  0080b:    	jne    0x365bc
  00811:    	mov    esi,DWORD PTR [rip+0x18aa]        # 0x20c1
  00817:    	cmp    esi,0xffffffff
  0081a:    	je     0x365db
  00820:    	cmp    WORD PTR [rdi+0x2],0x3
  00825:    	jne    0x83e
  0082b:    	cmp    esi,0x6
  0082e:    	jge    0x83e
  00834:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00839:    	jmp    0x85c
  0083e:    	sub    rsp,0x10
  00842:    	movq   QWORD PTR [rsp],xmm4
  00847: 92 	movabs rax,0x5592e6dd3800
  00851:    	call   rax
  00853:    	movq   xmm4,QWORD PTR [rsp]
  00858:    	add    rsp,0x10
  0085c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 
:00045 %14 = %5 * %14                       [Float][Float]
  00863:    	mov    rdi,QWORD PTR [r14-0x58]
  00867: 00 	test   rdi,0x1
  0086e:    	jne    0x36616
  00874: 00 	test   rdi,0x2
  0087b:    	je     0x8b7
  00881:    	xorps  xmm2,xmm2
  00884: 00 	movabs rax,0x8000000000000002
  0088e:    	cmp    rdi,rax
  00891:    	je     0x8c9
  00897:    	mov    rax,rdi
  0089a:    	sar    rax,0x3f
  0089e:    	add    rax,0x2
  008a2:    	and    rdi,0xfffffffffffffffc
  008a6:    	or     rdi,rax
  008a9:    	rol    rdi,0x3d
  008ad:    	movq   xmm2,rdi
  008b2:    	jmp    0x8c9
  008b7:    	call   0xffff302a
  008bc:    	test   rax,rax
  008bf:    	je     0x36616
  008c5:    	movq   xmm2,xmm0
  008c9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008d0: 00 	test   rdi,0x1
  008d7:    	jne    0x36635
  008dd: 00 	test   rdi,0x2
  008e4:    	je     0x920
  008ea:    	xorps  xmm3,xmm3
  008ed: 00 	movabs rax,0x8000000000000002
  008f7:    	cmp    rdi,rax
  008fa:    	je     0x932
  00900:    	mov    rax,rdi
  00903:    	sar    rax,0x3f
  00907:    	add    rax,0x2
  0090b:    	and    rdi,0xfffffffffffffffc
  0090f:    	or     rdi,rax
  00912:    	rol    rdi,0x3d
  00916:    	movq   xmm3,rdi
  0091b:    	jmp    0x932
  00920:    	call   0xffff302a
  00925:    	test   rax,rax
  00928:    	je     0x36635
  0092e:    	movq   xmm3,xmm0
  00932:    	mulsd  xmm3,xmm2
:00046 %13 = %13 + %14                      [Float][Float]
  00936:    	addsd  xmm4,xmm3
:00047 %14 = dynvar(2, %2)
  0093a:    	mov    rax,QWORD PTR [r14-0x18]
  0093e:    	mov    rax,QWORD PTR [rax]
  00941:    	mov    rax,QWORD PTR [rax-0x28]
  00945: ff 	mov    QWORD PTR [r14-0xa0],rax
:00048 %15 = 2: i32
  0094c: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00049 %14 = %14.[%15]                      [Array][Integer]
  00957: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0095e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00965: 00 	test   rdi,0x7
  0096c:    	jne    0x36654
  00972:    	cmp    DWORD PTR [rdi+0x4],0xb
  00976:    	jne    0x36654
  0097c: 00 	test   rsi,0x1
  00983:    	je     0x36654
  00989:    	sar    rsi,1
  0098c:    	sub    rsp,0x10
  00990:    	movq   QWORD PTR [rsp],xmm2
  00995:    	movq   QWORD PTR [rsp+0x8],xmm4
  0099b: 92 	movabs rax,0x5592e6e49100
  009a5:    	call   rax
  009a7:    	movq   xmm2,QWORD PTR [rsp]
  009ac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009b2:    	add    rsp,0x10
  009b6:    	test   rax,rax
  009b9:    	je     0x36673
  009bf: ff 	mov    QWORD PTR [r14-0xa0],rax
:00050 %14 = %14.call x()                   [Vec]
  009c6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009cd: 00 	test   rdi,0x7
  009d4:    	jne    0x36682
  009da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009de:    	jne    0x36682
  009e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff6ce5],0x26        # 0xffff76d0
  009eb:    	jne    0x36682
  009f1:    	mov    esi,DWORD PTR [rip+0x16d2]        # 0x20c9
  009f7:    	cmp    esi,0xffffffff
  009fa:    	je     0x366a1
  00a00:    	cmp    WORD PTR [rdi+0x2],0x3
  00a05:    	jne    0xa1e
  00a0b:    	cmp    esi,0x6
  00a0e:    	jge    0xa1e
  00a14:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a19:    	jmp    0xa3c
  00a1e:    	sub    rsp,0x10
  00a22:    	movq   QWORD PTR [rsp],xmm4
  00a27: 92 	movabs rax,0x5592e6dd3800
  00a31:    	call   rax
  00a33:    	movq   xmm4,QWORD PTR [rsp]
  00a38:    	add    rsp,0x10
  00a3c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00052 %14 = %6 * %14                       [Float][Float]
  00a43:    	mov    rdi,QWORD PTR [r14-0x60]
  00a47: 00 	test   rdi,0x1
  00a4e:    	jne    0x366dc
  00a54: 00 	test   rdi,0x2
  00a5b:    	je     0xa97
  00a61:    	xorps  xmm2,xmm2
  00a64: 00 	movabs rax,0x8000000000000002
  00a6e:    	cmp    rdi,rax
  00a71:    	je     0xaa9
  00a77:    	mov    rax,rdi
  00a7a:    	sar    rax,0x3f
  00a7e:    	add    rax,0x2
  00a82:    	and    rdi,0xfffffffffffffffc
  00a86:    	or     rdi,rax
  00a89:    	rol    rdi,0x3d
  00a8d:    	movq   xmm2,rdi
  00a92:    	jmp    0xaa9
  00a97:    	call   0xffff302a
  00a9c:    	test   rax,rax
  00a9f:    	je     0x366dc
  00aa5:    	movq   xmm2,xmm0
  00aa9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ab0: 00 	test   rdi,0x1
  00ab7:    	jne    0x366fb
  00abd: 00 	test   rdi,0x2
  00ac4:    	je     0xb00
  00aca:    	xorps  xmm3,xmm3
  00acd: 00 	movabs rax,0x8000000000000002
  00ad7:    	cmp    rdi,rax
  00ada:    	je     0xb12
  00ae0:    	mov    rax,rdi
  00ae3:    	sar    rax,0x3f
  00ae7:    	add    rax,0x2
  00aeb:    	and    rdi,0xfffffffffffffffc
  00aef:    	or     rdi,rax
  00af2:    	rol    rdi,0x3d
  00af6:    	movq   xmm3,rdi
  00afb:    	jmp    0xb12
  00b00:    	call   0xffff302a
  00b05:    	test   rax,rax
  00b08:    	je     0x366fb
  00b0e:    	movq   xmm3,xmm0
  00b12:    	mulsd  xmm3,xmm2
:00053 %7 = %13 + %14                       [Float][Float]
  00b16:    	movq   xmm5,xmm4
  00b1a:    	addsd  xmm5,xmm3
:00054 %13 = dynvar(2, %2)
  00b1e:    	mov    rax,QWORD PTR [r14-0x18]
  00b22:    	mov    rax,QWORD PTR [rax]
  00b25:    	mov    rax,QWORD PTR [rax-0x28]
  00b29: ff 	mov    QWORD PTR [r14-0x98],rax
:00055 %14 = 0: i32
  00b30: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00056 %13 = %13.[%14]                      [Array][Integer]
  00b3b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b42: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00b49: 00 	test   rdi,0x7
  00b50:    	jne    0x3671a
  00b56:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b5a:    	jne    0x3671a
  00b60: 00 	test   rsi,0x1
  00b67:    	je     0x3671a
  00b6d:    	sar    rsi,1
  00b70:    	sub    rsp,0x10
  00b74:    	movq   QWORD PTR [rsp],xmm2
  00b79:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b7f: 92 	movabs rax,0x5592e6e49100
  00b89:    	call   rax
  00b8b:    	movq   xmm2,QWORD PTR [rsp]
  00b90:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b96:    	add    rsp,0x10
  00b9a:    	test   rax,rax
  00b9d:    	je     0x36736
  00ba3: ff 	mov    QWORD PTR [r14-0x98],rax
:00057 %13 = %13.call y()                   [Vec]
  00baa:    	movq   xmm0,xmm5
  00bae:    	call   0xffff314e
  00bb3:    	mov    QWORD PTR [r14-0x68],rax
  00bb7: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00bbe: 00 	test   rdi,0x7
  00bc5:    	jne    0x36745
  00bcb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00bcf:    	jne    0x36745
  00bd5: 26 	cmp    DWORD PTR [rip+0xffffffffffff6af4],0x26        # 0xffff76d0
  00bdc:    	jne    0x36745
  00be2:    	mov    esi,DWORD PTR [rip+0x14e9]        # 0x20d1
  00be8:    	cmp    esi,0xffffffff
  00beb:    	je     0x36754
  00bf1:    	cmp    WORD PTR [rdi+0x2],0x3
  00bf6:    	jne    0xc0f
  00bfc:    	cmp    esi,0x6
  00bff:    	jge    0xc0f
  00c05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c0a:    	jmp    0xc1b
  00c0f: 92 	movabs rax,0x5592e6dd3800
  00c19:    	call   rax
  00c1b: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00059 %13 = %4 * %13                       [Float][Float]
  00c22:    	mov    rdi,QWORD PTR [r14-0x50]
  00c26: 00 	test   rdi,0x1
  00c2d:    	jne    0x3677d
  00c33: 00 	test   rdi,0x2
  00c3a:    	je     0xc76
  00c40:    	xorps  xmm2,xmm2
  00c43: 00 	movabs rax,0x8000000000000002
  00c4d:    	cmp    rdi,rax
  00c50:    	je     0xc88
  00c56:    	mov    rax,rdi
  00c59:    	sar    rax,0x3f
  00c5d:    	add    rax,0x2
  00c61:    	and    rdi,0xfffffffffffffffc
  00c65:    	or     rdi,rax
  00c68:    	rol    rdi,0x3d
  00c6c:    	movq   xmm2,rdi
  00c71:    	jmp    0xc88
  00c76:    	call   0xffff302a
  00c7b:    	test   rax,rax
  00c7e:    	je     0x3677d
  00c84:    	movq   xmm2,xmm0
  00c88: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c8f: 00 	test   rdi,0x1
  00c96:    	jne    0x3678c
  00c9c: 00 	test   rdi,0x2
  00ca3:    	je     0xcdf
  00ca9:    	xorps  xmm3,xmm3
  00cac: 00 	movabs rax,0x8000000000000002
  00cb6:    	cmp    rdi,rax
  00cb9:    	je     0xcf1
  00cbf:    	mov    rax,rdi
  00cc2:    	sar    rax,0x3f
  00cc6:    	add    rax,0x2
  00cca:    	and    rdi,0xfffffffffffffffc
  00cce:    	or     rdi,rax
  00cd1:    	rol    rdi,0x3d
  00cd5:    	movq   xmm3,rdi
  00cda:    	jmp    0xcf1
  00cdf:    	call   0xffff302a
  00ce4:    	test   rax,rax
  00ce7:    	je     0x3678c
  00ced:    	movq   xmm3,xmm0
  00cf1:    	mulsd  xmm3,xmm2
:00060 %14 = dynvar(2, %2)
  00cf5:    	mov    rax,QWORD PTR [r14-0x18]
  00cf9:    	mov    rax,QWORD PTR [rax]
  00cfc:    	mov    rax,QWORD PTR [rax-0x28]
  00d00: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = 1: i32
  00d07: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00062 %14 = %14.[%15]                      [Array][Integer]
  00d12: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d19: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d20: 00 	test   rdi,0x7
  00d27:    	jne    0x3679b
  00d2d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d31:    	jne    0x3679b
  00d37: 00 	test   rsi,0x1
  00d3e:    	je     0x3679b
  00d44:    	sar    rsi,1
  00d47:    	sub    rsp,0x10
  00d4b:    	movq   QWORD PTR [rsp],xmm2
  00d50:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d56: 92 	movabs rax,0x5592e6e49100
  00d60:    	call   rax
  00d62:    	movq   xmm2,QWORD PTR [rsp]
  00d67:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d6d:    	add    rsp,0x10
  00d71:    	test   rax,rax
  00d74:    	je     0x367ba
  00d7a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00063 %14 = %14.call y()                   [Vec]
  00d81: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d88: 00 	test   rdi,0x7
  00d8f:    	jne    0x367c9
  00d95:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d99:    	jne    0x367c9
  00d9f: 26 	cmp    DWORD PTR [rip+0xffffffffffff692a],0x26        # 0xffff76d0
  00da6:    	jne    0x367c9
  00dac:    	mov    esi,DWORD PTR [rip+0x1327]        # 0x20d9
  00db2:    	cmp    esi,0xffffffff
  00db5:    	je     0x367e8
  00dbb:    	cmp    WORD PTR [rdi+0x2],0x3
  00dc0:    	jne    0xdd9
  00dc6:    	cmp    esi,0x6
  00dc9:    	jge    0xdd9
  00dcf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dd4:    	jmp    0xdf7
  00dd9:    	sub    rsp,0x10
  00ddd:    	movq   QWORD PTR [rsp],xmm3
  00de2: 92 	movabs rax,0x5592e6dd3800
  00dec:    	call   rax
  00dee:    	movq   xmm3,QWORD PTR [rsp]
  00df3:    	add    rsp,0x10
  00df7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00064 
:00065 %14 = %5 * %14                       [Float][Float]
  00dfe:    	mov    rdi,QWORD PTR [r14-0x58]
  00e02: 00 	test   rdi,0x1
  00e09:    	jne    0x36823
  00e0f: 00 	test   rdi,0x2
  00e16:    	je     0xe52
  00e1c:    	xorps  xmm2,xmm2
  00e1f: 00 	movabs rax,0x8000000000000002
  00e29:    	cmp    rdi,rax
  00e2c:    	je     0xe64
  00e32:    	mov    rax,rdi
  00e35:    	sar    rax,0x3f
  00e39:    	add    rax,0x2
  00e3d:    	and    rdi,0xfffffffffffffffc
  00e41:    	or     rdi,rax
  00e44:    	rol    rdi,0x3d
  00e48:    	movq   xmm2,rdi
  00e4d:    	jmp    0xe64
  00e52:    	call   0xffff302a
  00e57:    	test   rax,rax
  00e5a:    	je     0x36823
  00e60:    	movq   xmm2,xmm0
  00e64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e6b: 00 	test   rdi,0x1
  00e72:    	jne    0x36842
  00e78: 00 	test   rdi,0x2
  00e7f:    	je     0xebb
  00e85:    	xorps  xmm4,xmm4
  00e88: 00 	movabs rax,0x8000000000000002
  00e92:    	cmp    rdi,rax
  00e95:    	je     0xecd
  00e9b:    	mov    rax,rdi
  00e9e:    	sar    rax,0x3f
  00ea2:    	add    rax,0x2
  00ea6:    	and    rdi,0xfffffffffffffffc
  00eaa:    	or     rdi,rax
  00ead:    	rol    rdi,0x3d
  00eb1:    	movq   xmm4,rdi
  00eb6:    	jmp    0xecd
  00ebb:    	call   0xffff302a
  00ec0:    	test   rax,rax
  00ec3:    	je     0x36842
  00ec9:    	movq   xmm4,xmm0
  00ecd:    	mulsd  xmm4,xmm2
:00066 %13 = %13 + %14                      [Float][Float]
  00ed1:    	addsd  xmm3,xmm4
:00067 %14 = dynvar(2, %2)
  00ed5:    	mov    rax,QWORD PTR [r14-0x18]
  00ed9:    	mov    rax,QWORD PTR [rax]
  00edc:    	mov    rax,QWORD PTR [rax-0x28]
  00ee0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = 2: i32
  00ee7: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00069 %14 = %14.[%15]                      [Array][Integer]
  00ef2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ef9: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00f00: 00 	test   rdi,0x7
  00f07:    	jne    0x36861
  00f0d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f11:    	jne    0x36861
  00f17: 00 	test   rsi,0x1
  00f1e:    	je     0x36861
  00f24:    	sar    rsi,1
  00f27:    	sub    rsp,0x10
  00f2b:    	movq   QWORD PTR [rsp],xmm2
  00f30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f36: 92 	movabs rax,0x5592e6e49100
  00f40:    	call   rax
  00f42:    	movq   xmm2,QWORD PTR [rsp]
  00f47:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4d:    	add    rsp,0x10
  00f51:    	test   rax,rax
  00f54:    	je     0x36880
  00f5a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00070 %14 = %14.call y()                   [Vec]
  00f61: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f68: 00 	test   rdi,0x7
  00f6f:    	jne    0x3688f
  00f75:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f79:    	jne    0x3688f
  00f7f: 26 	cmp    DWORD PTR [rip+0xffffffffffff674a],0x26        # 0xffff76d0
  00f86:    	jne    0x3688f
  00f8c:    	mov    esi,DWORD PTR [rip+0x114f]        # 0x20e1
  00f92:    	cmp    esi,0xffffffff
  00f95:    	je     0x368ae
  00f9b:    	cmp    WORD PTR [rdi+0x2],0x3
  00fa0:    	jne    0xfb9
  00fa6:    	cmp    esi,0x6
  00fa9:    	jge    0xfb9
  00faf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fb4:    	jmp    0xfd7
  00fb9:    	sub    rsp,0x10
  00fbd:    	movq   QWORD PTR [rsp],xmm3
  00fc2: 92 	movabs rax,0x5592e6dd3800
  00fcc:    	call   rax
  00fce:    	movq   xmm3,QWORD PTR [rsp]
  00fd3:    	add    rsp,0x10
  00fd7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00071 
:00072 %14 = %6 * %14                       [Float][Float]
  00fde:    	mov    rdi,QWORD PTR [r14-0x60]
  00fe2: 00 	test   rdi,0x1
  00fe9:    	jne    0x368e9
  00fef: 00 	test   rdi,0x2
  00ff6:    	je     0x1032
  00ffc:    	xorps  xmm2,xmm2
  00fff: 00 	movabs rax,0x8000000000000002
  01009:    	cmp    rdi,rax
  0100c:    	je     0x1044
  01012:    	mov    rax,rdi
  01015:    	sar    rax,0x3f
  01019:    	add    rax,0x2
  0101d:    	and    rdi,0xfffffffffffffffc
  01021:    	or     rdi,rax
  01024:    	rol    rdi,0x3d
  01028:    	movq   xmm2,rdi
  0102d:    	jmp    0x1044
  01032:    	call   0xffff302a
  01037:    	test   rax,rax
  0103a:    	je     0x368e9
  01040:    	movq   xmm2,xmm0
  01044: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104b: 00 	test   rdi,0x1
  01052:    	jne    0x36908
  01058: 00 	test   rdi,0x2
  0105f:    	je     0x109b
  01065:    	xorps  xmm4,xmm4
  01068: 00 	movabs rax,0x8000000000000002
  01072:    	cmp    rdi,rax
  01075:    	je     0x10ad
  0107b:    	mov    rax,rdi
  0107e:    	sar    rax,0x3f
  01082:    	add    rax,0x2
  01086:    	and    rdi,0xfffffffffffffffc
  0108a:    	or     rdi,rax
  0108d:    	rol    rdi,0x3d
  01091:    	movq   xmm4,rdi
  01096:    	jmp    0x10ad
  0109b:    	call   0xffff302a
  010a0:    	test   rax,rax
  010a3:    	je     0x36908
  010a9:    	movq   xmm4,xmm0
  010ad:    	mulsd  xmm4,xmm2
:00073 %8 = %13 + %14                       [Float][Float]
  010b1:    	movq   xmm5,xmm3
  010b5:    	addsd  xmm5,xmm4
:00074 %13 = dynvar(2, %2)
  010b9:    	mov    rax,QWORD PTR [r14-0x18]
  010bd:    	mov    rax,QWORD PTR [rax]
  010c0:    	mov    rax,QWORD PTR [rax-0x28]
  010c4: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 %14 = 0: i32
  010cb: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00076 %13 = %13.[%14]                      [Array][Integer]
  010d6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  010dd: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  010e4: 00 	test   rdi,0x7
  010eb:    	jne    0x36927
  010f1:    	cmp    DWORD PTR [rdi+0x4],0xb
  010f5:    	jne    0x36927
  010fb: 00 	test   rsi,0x1
  01102:    	je     0x36927
  01108:    	sar    rsi,1
  0110b:    	sub    rsp,0x10
  0110f:    	movq   QWORD PTR [rsp],xmm2
  01114:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111a: 92 	movabs rax,0x5592e6e49100
  01124:    	call   rax
  01126:    	movq   xmm2,QWORD PTR [rsp]
  0112b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01131:    	add    rsp,0x10
  01135:    	test   rax,rax
  01138:    	je     0x36943
  0113e: ff 	mov    QWORD PTR [r14-0x98],rax
:00077 %13 = %13.call z()                   [Vec]
  01145:    	movq   xmm0,xmm5
  01149:    	call   0xffff314e
  0114e:    	mov    QWORD PTR [r14-0x70],rax
  01152: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01159: 00 	test   rdi,0x7
  01160:    	jne    0x36952
  01166:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0116a:    	jne    0x36952
  01170: 26 	cmp    DWORD PTR [rip+0xffffffffffff6559],0x26        # 0xffff76d0
  01177:    	jne    0x36952
  0117d:    	mov    esi,DWORD PTR [rip+0xf66]        # 0x20e9
  01183:    	cmp    esi,0xffffffff
  01186:    	je     0x36961
  0118c:    	cmp    WORD PTR [rdi+0x2],0x3
  01191:    	jne    0x11aa
  01197:    	cmp    esi,0x6
  0119a:    	jge    0x11aa
  011a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011a5:    	jmp    0x11b6
  011aa: 92 	movabs rax,0x5592e6dd3800
  011b4:    	call   rax
  011b6: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 
:00079 %13 = %4 * %13                       [Float][Float]
  011bd:    	mov    rdi,QWORD PTR [r14-0x50]
  011c1: 00 	test   rdi,0x1
  011c8:    	jne    0x3698a
  011ce: 00 	test   rdi,0x2
  011d5:    	je     0x1211
  011db:    	xorps  xmm2,xmm2
  011de: 00 	movabs rax,0x8000000000000002
  011e8:    	cmp    rdi,rax
  011eb:    	je     0x1223
  011f1:    	mov    rax,rdi
  011f4:    	sar    rax,0x3f
  011f8:    	add    rax,0x2
  011fc:    	and    rdi,0xfffffffffffffffc
  01200:    	or     rdi,rax
  01203:    	rol    rdi,0x3d
  01207:    	movq   xmm2,rdi
  0120c:    	jmp    0x1223
  01211:    	call   0xffff302a
  01216:    	test   rax,rax
  01219:    	je     0x3698a
  0121f:    	movq   xmm2,xmm0
  01223: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0122a: 00 	test   rdi,0x1
  01231:    	jne    0x36999
  01237: 00 	test   rdi,0x2
  0123e:    	je     0x127a
  01244:    	xorps  xmm3,xmm3
  01247: 00 	movabs rax,0x8000000000000002
  01251:    	cmp    rdi,rax
  01254:    	je     0x128c
  0125a:    	mov    rax,rdi
  0125d:    	sar    rax,0x3f
  01261:    	add    rax,0x2
  01265:    	and    rdi,0xfffffffffffffffc
  01269:    	or     rdi,rax
  0126c:    	rol    rdi,0x3d
  01270:    	movq   xmm3,rdi
  01275:    	jmp    0x128c
  0127a:    	call   0xffff302a
  0127f:    	test   rax,rax
  01282:    	je     0x36999
  01288:    	movq   xmm3,xmm0
  0128c:    	mulsd  xmm3,xmm2
:00080 %14 = dynvar(2, %2)
  01290:    	mov    rax,QWORD PTR [r14-0x18]
  01294:    	mov    rax,QWORD PTR [rax]
  01297:    	mov    rax,QWORD PTR [rax-0x28]
  0129b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  012a2: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  012ad: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012b4: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  012bb: 00 	test   rdi,0x7
  012c2:    	jne    0x369a8
  012c8:    	cmp    DWORD PTR [rdi+0x4],0xb
  012cc:    	jne    0x369a8
  012d2: 00 	test   rsi,0x1
  012d9:    	je     0x369a8
  012df:    	sar    rsi,1
  012e2:    	sub    rsp,0x10
  012e6:    	movq   QWORD PTR [rsp],xmm2
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f1: 92 	movabs rax,0x5592e6e49100
  012fb:    	call   rax
  012fd:    	movq   xmm2,QWORD PTR [rsp]
  01302:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01308:    	add    rsp,0x10
  0130c:    	test   rax,rax
  0130f:    	je     0x369c7
  01315: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %14 = %14.call z()                   [Vec]
  0131c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01323: 00 	test   rdi,0x7
  0132a:    	jne    0x369d6
  01330:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01334:    	jne    0x369d6
  0133a: 26 	cmp    DWORD PTR [rip+0xffffffffffff638f],0x26        # 0xffff76d0
  01341:    	jne    0x369d6
  01347:    	mov    esi,DWORD PTR [rip+0xda4]        # 0x20f1
  0134d:    	cmp    esi,0xffffffff
  01350:    	je     0x369f5
  01356:    	cmp    WORD PTR [rdi+0x2],0x3
  0135b:    	jne    0x1374
  01361:    	cmp    esi,0x6
  01364:    	jge    0x1374
  0136a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0136f:    	jmp    0x1392
  01374:    	sub    rsp,0x10
  01378:    	movq   QWORD PTR [rsp],xmm3
  0137d: 92 	movabs rax,0x5592e6dd3800
  01387:    	call   rax
  01389:    	movq   xmm3,QWORD PTR [rsp]
  0138e:    	add    rsp,0x10
  01392: ff 	mov    QWORD PTR [r14-0xa0],rax
:00084 
:00085 %14 = %5 * %14                       [Float][Float]
  01399:    	mov    rdi,QWORD PTR [r14-0x58]
  0139d: 00 	test   rdi,0x1
  013a4:    	jne    0x36a30
  013aa: 00 	test   rdi,0x2
  013b1:    	je     0x13ed
  013b7:    	xorps  xmm2,xmm2
  013ba: 00 	movabs rax,0x8000000000000002
  013c4:    	cmp    rdi,rax
  013c7:    	je     0x13ff
  013cd:    	mov    rax,rdi
  013d0:    	sar    rax,0x3f
  013d4:    	add    rax,0x2
  013d8:    	and    rdi,0xfffffffffffffffc
  013dc:    	or     rdi,rax
  013df:    	rol    rdi,0x3d
  013e3:    	movq   xmm2,rdi
  013e8:    	jmp    0x13ff
  013ed:    	call   0xffff302a
  013f2:    	test   rax,rax
  013f5:    	je     0x36a30
  013fb:    	movq   xmm2,xmm0
  013ff: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01406: 00 	test   rdi,0x1
  0140d:    	jne    0x36a4f
  01413: 00 	test   rdi,0x2
  0141a:    	je     0x1456
  01420:    	xorps  xmm4,xmm4
  01423: 00 	movabs rax,0x8000000000000002
  0142d:    	cmp    rdi,rax
  01430:    	je     0x1468
  01436:    	mov    rax,rdi
  01439:    	sar    rax,0x3f
  0143d:    	add    rax,0x2
  01441:    	and    rdi,0xfffffffffffffffc
  01445:    	or     rdi,rax
  01448:    	rol    rdi,0x3d
  0144c:    	movq   xmm4,rdi
  01451:    	jmp    0x1468
  01456:    	call   0xffff302a
  0145b:    	test   rax,rax
  0145e:    	je     0x36a4f
  01464:    	movq   xmm4,xmm0
  01468:    	mulsd  xmm4,xmm2
:00086 %13 = %13 + %14                      [Float][Float]
  0146c:    	addsd  xmm3,xmm4
:00087 %14 = dynvar(2, %2)
  01470:    	mov    rax,QWORD PTR [r14-0x18]
  01474:    	mov    rax,QWORD PTR [rax]
  01477:    	mov    rax,QWORD PTR [rax-0x28]
  0147b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 2: i32
  01482: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00089 %14 = %14.[%15]                      [Array][Integer]
  0148d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01494: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  0149b: 00 	test   rdi,0x7
  014a2:    	jne    0x36a6e
  014a8:    	cmp    DWORD PTR [rdi+0x4],0xb
  014ac:    	jne    0x36a6e
  014b2: 00 	test   rsi,0x1
  014b9:    	je     0x36a6e
  014bf:    	sar    rsi,1
  014c2:    	sub    rsp,0x10
  014c6:    	movq   QWORD PTR [rsp],xmm2
  014cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d1: 92 	movabs rax,0x5592e6e49100
  014db:    	call   rax
  014dd:    	movq   xmm2,QWORD PTR [rsp]
  014e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014e8:    	add    rsp,0x10
  014ec:    	test   rax,rax
  014ef:    	je     0x36a8d
  014f5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %14 = %14.call z()                   [Vec]
  014fc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01503: 00 	test   rdi,0x7
  0150a:    	jne    0x36a9c
  01510:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01514:    	jne    0x36a9c
  0151a: 26 	cmp    DWORD PTR [rip+0xffffffffffff61af],0x26        # 0xffff76d0
  01521:    	jne    0x36a9c
  01527:    	mov    esi,DWORD PTR [rip+0xbcc]        # 0x20f9
  0152d:    	cmp    esi,0xffffffff
  01530:    	je     0x36abb
  01536:    	cmp    WORD PTR [rdi+0x2],0x3
  0153b:    	jne    0x1554
  01541:    	cmp    esi,0x6
  01544:    	jge    0x1554
  0154a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0154f:    	jmp    0x1572
  01554:    	sub    rsp,0x10
  01558:    	movq   QWORD PTR [rsp],xmm3
  0155d: 92 	movabs rax,0x5592e6dd3800
  01567:    	call   rax
  01569:    	movq   xmm3,QWORD PTR [rsp]
  0156e:    	add    rsp,0x10
  01572: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 
:00092 %14 = %6 * %14                       [Float][Float]
  01579:    	mov    rdi,QWORD PTR [r14-0x60]
  0157d: 00 	test   rdi,0x1
  01584:    	jne    0x36af6
  0158a: 00 	test   rdi,0x2
  01591:    	je     0x15cd
  01597:    	xorps  xmm2,xmm2
  0159a: 00 	movabs rax,0x8000000000000002
  015a4:    	cmp    rdi,rax
  015a7:    	je     0x15df
  015ad:    	mov    rax,rdi
  015b0:    	sar    rax,0x3f
  015b4:    	add    rax,0x2
  015b8:    	and    rdi,0xfffffffffffffffc
  015bc:    	or     rdi,rax
  015bf:    	rol    rdi,0x3d
  015c3:    	movq   xmm2,rdi
  015c8:    	jmp    0x15df
  015cd:    	call   0xffff302a
  015d2:    	test   rax,rax
  015d5:    	je     0x36af6
  015db:    	movq   xmm2,xmm0
  015df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  015e6: 00 	test   rdi,0x1
  015ed:    	jne    0x36b15
  015f3: 00 	test   rdi,0x2
  015fa:    	je     0x1636
  01600:    	xorps  xmm4,xmm4
  01603: 00 	movabs rax,0x8000000000000002
  0160d:    	cmp    rdi,rax
  01610:    	je     0x1648
  01616:    	mov    rax,rdi
  01619:    	sar    rax,0x3f
  0161d:    	add    rax,0x2
  01621:    	and    rdi,0xfffffffffffffffc
  01625:    	or     rdi,rax
  01628:    	rol    rdi,0x3d
  0162c:    	movq   xmm4,rdi
  01631:    	jmp    0x1648
  01636:    	call   0xffff302a
  0163b:    	test   rax,rax
  0163e:    	je     0x36b15
  01644:    	movq   xmm4,xmm0
  01648:    	mulsd  xmm4,xmm2
:00093 %9 = %13 + %14                       [Float][Float]
  0164c:    	movq   xmm5,xmm3
  01650:    	addsd  xmm5,xmm4
:00094 %13 = const[Vec]                     [Vec]
  01654: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6082]        # 0xffff76dd
  0165b: 00 	cmp    rax,QWORD PTR [rip+0xaab]        # 0x210d
  01662:    	jne    0x36b34
  01668: 00 	mov    rax,QWORD PTR [rip+0xa8e]        # 0x20fd
  0166f: ff 	mov    QWORD PTR [r14-0x98],rax
:00095 %14 = %7
  01676:    	mov    rax,QWORD PTR [r14-0x68]
  0167a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00096 %15 = %8
  01681:    	mov    rax,QWORD PTR [r14-0x70]
  01685: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %16 = %9
:00098 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  0168c:    	movq   xmm0,xmm5
  01690:    	call   0xffff314e
  01695: ff 	mov    QWORD PTR [r14-0xb0],rax
  0169c:    	movq   xmm0,xmm5
  016a0:    	call   0xffff314e
  016a5:    	mov    QWORD PTR [r14-0x78],rax
  016a9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016b0: 00 	test   rdi,0x7
  016b7:    	jne    0x36ba9
  016bd:    	cmp    DWORD PTR [rdi+0x4],0x2c
  016c1:    	jne    0x36ba9
  016c7: 26 	cmp    DWORD PTR [rip+0xffffffffffff6002],0x26        # 0xffff76d0
  016ce:    	jne    0x36ba9
  016d4: 00 	mov    r9,0x0
  016db:    	sub    rsp,0x10
  016df:    	movq   QWORD PTR [rsp],xmm5
  016e4:    	mov    rdx,rdi
  016e7:    	mov    QWORD PTR [rsp-0x40],rcx
  016ec: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016f5: ff 	lea    rcx,[r14-0xa0]
  016fc: 00 	mov    r8,0x3
  01703:    	mov    rsi,QWORD PTR [rbx]
  01706:    	mov    QWORD PTR [rsp-0x18],rsi
  0170b:    	lea    rsi,[rsp-0x18]
  01710:    	mov    QWORD PTR [rbx],rsi
  01713:    	lea    r14,[rsp-0x10]
  01718:    	mov    QWORD PTR [rsp-0x20],r14
  0171d:    	call   0x36bb8
  01722:    	lea    r14,[rbp-0x8]
  01726:    	mov    QWORD PTR [rbx],r14
  01729:    	mov    r14,QWORD PTR [rbp-0x10]
  0172d:    	movq   xmm5,QWORD PTR [rsp]
  01732:    	add    rsp,0x10
  01736:    	test   rax,rax
  01739:    	je     0x36bea
  0173f:    	mov    QWORD PTR [r14-0x80],rax
:00099 
:00100 %13 = const[Ray]                     [Ray]
  01743: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5f93]        # 0xffff76dd
  0174a: 00 	cmp    rax,QWORD PTR [rip+0x9dc]        # 0x212d
  01751:    	jne    0x36bf9
  01757: 00 	mov    rax,QWORD PTR [rip+0x9bf]        # 0x211d
  0175e: ff 	mov    QWORD PTR [r14-0x98],rax
:00101 %14 = dynvar(2, %7)
  01765:    	mov    rax,QWORD PTR [r14-0x18]
  01769:    	mov    rax,QWORD PTR [rax]
  0176c:    	mov    rax,QWORD PTR [rax-0x50]
  01770: ff 	mov    QWORD PTR [r14-0xa0],rax
:00102 %15 = %10
  01777:    	mov    rax,QWORD PTR [r14-0x80]
  0177b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01782: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01789: 00 	test   rdi,0x7
  01790:    	jne    0x36c56
  01796:    	cmp    DWORD PTR [rdi+0x4],0x32
  0179a:    	jne    0x36c56
  017a0: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f29],0x26        # 0xffff76d0
  017a7:    	jne    0x36c56
  017ad: 00 	mov    r9,0x0
  017b4:    	sub    rsp,0x10
  017b8:    	movq   QWORD PTR [rsp],xmm5
  017bd:    	mov    rdx,rdi
  017c0:    	mov    QWORD PTR [rsp-0x40],rcx
  017c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017ce: ff 	lea    rcx,[r14-0xa0]
  017d5: 00 	mov    r8,0x2
  017dc:    	mov    rsi,QWORD PTR [rbx]
  017df:    	mov    QWORD PTR [rsp-0x18],rsi
  017e4:    	lea    rsi,[rsp-0x18]
  017e9:    	mov    QWORD PTR [rbx],rsi
  017ec:    	lea    r14,[rsp-0x10]
  017f1:    	mov    QWORD PTR [rsp-0x20],r14
  017f6:    	call   0x36c65
  017fb:    	lea    r14,[rbp-0x8]
  017ff:    	mov    QWORD PTR [rbx],r14
  01802:    	mov    r14,QWORD PTR [rbp-0x10]
  01806:    	movq   xmm5,QWORD PTR [rsp]
  0180b:    	add    rsp,0x10
  0180f:    	test   rax,rax
  01812:    	je     0x36c97
  01818: ff 	mov    QWORD PTR [r14-0x88],rax
:00104 
:00105 %13 = const[Isect]                   [Isect]
  0181f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5eb7]        # 0xffff76dd
  01826: 00 	cmp    rax,QWORD PTR [rip+0x920]        # 0x214d
  0182d:    	jne    0x36ca6
  01833: 00 	mov    rax,QWORD PTR [rip+0x903]        # 0x213d
  0183a: ff 	mov    QWORD PTR [r14-0x98],rax
:00106 %12 = %13.call new()                 [#<Class:Isect>]
  01841: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01848: 00 	test   rdi,0x7
  0184f:    	jne    0x36d03
  01855:    	cmp    DWORD PTR [rdi+0x4],0x34
  01859:    	jne    0x36d03
  0185f: 26 	cmp    DWORD PTR [rip+0xffffffffffff5e6a],0x26        # 0xffff76d0
  01866:    	jne    0x36d03
  0186c: 00 	mov    r9,0x0
  01873:    	sub    rsp,0x10
  01877:    	movq   QWORD PTR [rsp],xmm5
  0187c:    	mov    rdx,rdi
  0187f:    	mov    QWORD PTR [rsp-0x40],rcx
  01884: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0188d: ff 	lea    rcx,[r14-0xa0]
  01894: 00 	mov    r8,0x0
  0189b:    	mov    rsi,QWORD PTR [rbx]
  0189e:    	mov    QWORD PTR [rsp-0x18],rsi
  018a3:    	lea    rsi,[rsp-0x18]
  018a8:    	mov    QWORD PTR [rbx],rsi
  018ab:    	lea    r14,[rsp-0x10]
  018b0:    	mov    QWORD PTR [rsp-0x20],r14
  018b5:    	call   0x36d12
  018ba:    	lea    r14,[rbp-0x8]
  018be:    	mov    QWORD PTR [rbx],r14
  018c1:    	mov    r14,QWORD PTR [rbp-0x10]
  018c5:    	movq   xmm5,QWORD PTR [rsp]
  018ca:    	add    rsp,0x10
  018ce:    	test   rax,rax
  018d1:    	je     0x36d44
  018d7: ff 	mov    QWORD PTR [r14-0x90],rax
:00107 
:00108 %13 = @spheres: Scene[IvarId(0)]
  018de:    	mov    rdi,QWORD PTR [r14-0x30]
  018e2:    	mov    rax,QWORD PTR [rdi+0x10]
  018e6: ff 	mov    QWORD PTR [r14-0x98],rax
:00109 %14 = 0: i32
  018ed: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00110 %13 = %13.[%14]                      [Array][Integer]
  018f8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ff: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01906: 00 	test   rdi,0x7
  0190d:    	jne    0x36d53
  01913:    	cmp    DWORD PTR [rdi+0x4],0xb
  01917:    	jne    0x36d53
  0191d: 00 	test   rsi,0x1
  01924:    	je     0x36d53
  0192a:    	sar    rsi,1
  0192d:    	sub    rsp,0x10
  01931:    	movq   QWORD PTR [rsp],xmm5
  01936: 92 	movabs rax,0x5592e6e49100
  01940:    	call   rax
  01942:    	movq   xmm5,QWORD PTR [rsp]
  01947:    	add    rsp,0x10
  0194b:    	test   rax,rax
  0194e:    	je     0x36d62
  01954: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %11
  0195b: ff 	mov    rax,QWORD PTR [r14-0x88]
  01962: ff 	mov    QWORD PTR [r14-0xa0],rax
:00112 %15 = %12
  01969: ff 	mov    rax,QWORD PTR [r14-0x90]
  01970: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 _ = %13.call intersect(%14; 2)       [Sphere]
  01977: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0197e: 00 	test   rdi,0x7
  01985:    	jne    0x36d71
  0198b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0198f:    	jne    0x36d71
  01995: 26 	cmp    DWORD PTR [rip+0xffffffffffff5d34],0x26        # 0xffff76d0
  0199c:    	jne    0x36d71
  019a2:    	sub    rsp,0x10
  019a6:    	movq   QWORD PTR [rsp],xmm5
  019ab: 00 	cmp    DWORD PTR [rip+0xffffffffffff5d22],0x0        # 0xffff76d4
  019b2:    	je     0x19ca
  019b8:    	mov    rdi,r12
  019bb:    	mov    rsi,QWORD PTR [rbx]
  019be: 92 	movabs rax,0x5592e6e3ca90
  019c8:    	call   rax
  019ca: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019d3: ff 	mov    rax,QWORD PTR [r14-0x98]
  019da:    	mov    QWORD PTR [rsp-0x40],rax
  019df: 00 	mov    rdi,0x2
  019e6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  019ed:    	mov    QWORD PTR [rsp-0x48],rax
  019f2: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019f9:    	mov    QWORD PTR [rsp-0x50],rax
  019fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a07: 0e 	movabs rax,0x1000e00000062
  01a11:    	mov    QWORD PTR [rsp-0x30],rax
  01a16: 92 	movabs r13,0x5592e73e2200
  01a20:    	mov    rsi,QWORD PTR [rbx]
  01a23:    	mov    QWORD PTR [rsp-0x18],rsi
  01a28:    	lea    rsi,[rsp-0x18]
  01a2d:    	mov    QWORD PTR [rbx],rsi
  01a30:    	lea    r14,[rsp-0x10]
  01a35:    	mov    QWORD PTR [rsp-0x20],r14
  01a3a:    	call   0xffff8289
  01a3f:    	lea    r14,[rbp-0x8]
  01a43:    	mov    QWORD PTR [rbx],r14
  01a46:    	mov    r14,QWORD PTR [rbp-0x10]
  01a4a:    	movq   xmm5,QWORD PTR [rsp]
  01a4f:    	add    rsp,0x10
  01a53:    	test   rax,rax
  01a56:    	je     0x36d80
:00114 
:00115 %13 = @spheres: Scene[IvarId(0)]
  01a5c:    	mov    rdi,QWORD PTR [r14-0x30]
  01a60:    	mov    rax,QWORD PTR [rdi+0x10]
  01a64: ff 	mov    QWORD PTR [r14-0x98],rax
:00116 %14 = 1: i32
  01a6b: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00117 %13 = %13.[%14]                      [Array][Integer]
  01a76: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a7d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01a84: 00 	test   rdi,0x7
  01a8b:    	jne    0x36d8f
  01a91:    	cmp    DWORD PTR [rdi+0x4],0xb
  01a95:    	jne    0x36d8f
  01a9b: 00 	test   rsi,0x1
  01aa2:    	je     0x36d8f
  01aa8:    	sar    rsi,1
  01aab:    	sub    rsp,0x10
  01aaf:    	movq   QWORD PTR [rsp],xmm5
  01ab4: 92 	movabs rax,0x5592e6e49100
  01abe:    	call   rax
  01ac0:    	movq   xmm5,QWORD PTR [rsp]
  01ac5:    	add    rsp,0x10
  01ac9:    	test   rax,rax
  01acc:    	je     0x36d9e
  01ad2: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = %11
  01ad9: ff 	mov    rax,QWORD PTR [r14-0x88]
  01ae0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %12
  01ae7: ff 	mov    rax,QWORD PTR [r14-0x90]
  01aee: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 _ = %13.call intersect(%14; 2)       [Sphere]
  01af5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01afc: 00 	test   rdi,0x7
  01b03:    	jne    0x36dad
  01b09:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01b0d:    	jne    0x36dad
  01b13: 26 	cmp    DWORD PTR [rip+0xffffffffffff5bb6],0x26        # 0xffff76d0
  01b1a:    	jne    0x36dad
  01b20:    	sub    rsp,0x10
  01b24:    	movq   QWORD PTR [rsp],xmm5
  01b29: 00 	cmp    DWORD PTR [rip+0xffffffffffff5ba4],0x0        # 0xffff76d4
  01b30:    	je     0x1b48
  01b36:    	mov    rdi,r12
  01b39:    	mov    rsi,QWORD PTR [rbx]
  01b3c: 92 	movabs rax,0x5592e6e3ca90
  01b46:    	call   rax
  01b48: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b51: ff 	mov    rax,QWORD PTR [r14-0x98]
  01b58:    	mov    QWORD PTR [rsp-0x40],rax
  01b5d: 00 	mov    rdi,0x2
  01b64: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01b6b:    	mov    QWORD PTR [rsp-0x48],rax
  01b70: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01b77:    	mov    QWORD PTR [rsp-0x50],rax
  01b7c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b85: 0e 	movabs rax,0x1000e00000062
  01b8f:    	mov    QWORD PTR [rsp-0x30],rax
  01b94: 92 	movabs r13,0x5592e73e2200
  01b9e:    	mov    rsi,QWORD PTR [rbx]
  01ba1:    	mov    QWORD PTR [rsp-0x18],rsi
  01ba6:    	lea    rsi,[rsp-0x18]
  01bab:    	mov    QWORD PTR [rbx],rsi
  01bae:    	lea    r14,[rsp-0x10]
  01bb3:    	mov    QWORD PTR [rsp-0x20],r14
  01bb8:    	call   0xffff8289
  01bbd:    	lea    r14,[rbp-0x8]
  01bc1:    	mov    QWORD PTR [rbx],r14
  01bc4:    	mov    r14,QWORD PTR [rbp-0x10]
  01bc8:    	movq   xmm5,QWORD PTR [rsp]
  01bcd:    	add    rsp,0x10
  01bd1:    	test   rax,rax
  01bd4:    	je     0x36dbc
:00121 
:00122 %13 = @spheres: Scene[IvarId(0)]
  01bda:    	mov    rdi,QWORD PTR [r14-0x30]
  01bde:    	mov    rax,QWORD PTR [rdi+0x10]
  01be2: ff 	mov    QWORD PTR [r14-0x98],rax
:00123 %14 = 2: i32
  01be9: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00124 %13 = %13.[%14]                      [Array][Integer]
  01bf4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bfb: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01c02: 00 	test   rdi,0x7
  01c09:    	jne    0x36dcb
  01c0f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01c13:    	jne    0x36dcb
  01c19: 00 	test   rsi,0x1
  01c20:    	je     0x36dcb
  01c26:    	sar    rsi,1
  01c29:    	sub    rsp,0x10
  01c2d:    	movq   QWORD PTR [rsp],xmm5
  01c32: 92 	movabs rax,0x5592e6e49100
  01c3c:    	call   rax
  01c3e:    	movq   xmm5,QWORD PTR [rsp]
  01c43:    	add    rsp,0x10
  01c47:    	test   rax,rax
  01c4a:    	je     0x36dda
  01c50: ff 	mov    QWORD PTR [r14-0x98],rax
:00125 %14 = %11
  01c57: ff 	mov    rax,QWORD PTR [r14-0x88]
  01c5e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00126 %15 = %12
  01c65: ff 	mov    rax,QWORD PTR [r14-0x90]
  01c6c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00127 _ = %13.call intersect(%14; 2)       [Sphere]
  01c73: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c7a: 00 	test   rdi,0x7
  01c81:    	jne    0x36de9
  01c87:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01c8b:    	jne    0x36de9
  01c91: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a38],0x26        # 0xffff76d0
  01c98:    	jne    0x36de9
  01c9e:    	sub    rsp,0x10
  01ca2:    	movq   QWORD PTR [rsp],xmm5
  01ca7: 00 	cmp    DWORD PTR [rip+0xffffffffffff5a26],0x0        # 0xffff76d4
  01cae:    	je     0x1cc6
  01cb4:    	mov    rdi,r12
  01cb7:    	mov    rsi,QWORD PTR [rbx]
  01cba: 92 	movabs rax,0x5592e6e3ca90
  01cc4:    	call   rax
  01cc6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ccf: ff 	mov    rax,QWORD PTR [r14-0x98]
  01cd6:    	mov    QWORD PTR [rsp-0x40],rax
  01cdb: 00 	mov    rdi,0x2
  01ce2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01ce9:    	mov    QWORD PTR [rsp-0x48],rax
  01cee: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01cf5:    	mov    QWORD PTR [rsp-0x50],rax
  01cfa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01d03: 0e 	movabs rax,0x1000e00000062
  01d0d:    	mov    QWORD PTR [rsp-0x30],rax
  01d12: 92 	movabs r13,0x5592e73e2200
  01d1c:    	mov    rsi,QWORD PTR [rbx]
  01d1f:    	mov    QWORD PTR [rsp-0x18],rsi
  01d24:    	lea    rsi,[rsp-0x18]
  01d29:    	mov    QWORD PTR [rbx],rsi
  01d2c:    	lea    r14,[rsp-0x10]
  01d31:    	mov    QWORD PTR [rsp-0x20],r14
  01d36:    	call   0xffff8289
  01d3b:    	lea    r14,[rbp-0x8]
  01d3f:    	mov    QWORD PTR [rbx],r14
  01d42:    	mov    r14,QWORD PTR [rbp-0x10]
  01d46:    	movq   xmm5,QWORD PTR [rsp]
  01d4b:    	add    rsp,0x10
  01d4f:    	test   rax,rax
  01d52:    	je     0x36df8
:00128 
:00129 %13 = @plane: Scene[IvarId(1)]
  01d58:    	mov    rdi,QWORD PTR [r14-0x30]
  01d5c:    	mov    rax,QWORD PTR [rdi+0x18]
  01d60: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01d67: ff 	mov    rax,QWORD PTR [r14-0x88]
  01d6e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01d75: ff 	mov    rax,QWORD PTR [r14-0x90]
  01d7c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Plane]
  01d83: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d8a: 00 	test   rdi,0x7
  01d91:    	jne    0x36e07
  01d97:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01d9b:    	jne    0x36e07
  01da1: 26 	cmp    DWORD PTR [rip+0xffffffffffff5928],0x26        # 0xffff76d0
  01da8:    	jne    0x36e07
  01dae:    	sub    rsp,0x10
  01db2:    	movq   QWORD PTR [rsp],xmm5
  01db7: 00 	cmp    DWORD PTR [rip+0xffffffffffff5916],0x0        # 0xffff76d4
  01dbe:    	je     0x1dd6
  01dc4:    	mov    rdi,r12
  01dc7:    	mov    rsi,QWORD PTR [rbx]
  01dca: 92 	movabs rax,0x5592e6e3ca90
  01dd4:    	call   rax
  01dd6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ddf: ff 	mov    rax,QWORD PTR [r14-0x98]
  01de6:    	mov    QWORD PTR [rsp-0x40],rax
  01deb: 00 	mov    rdi,0x2
  01df2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01df9:    	mov    QWORD PTR [rsp-0x48],rax
  01dfe: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e05:    	mov    QWORD PTR [rsp-0x50],rax
  01e0a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e13: 0c 	movabs rax,0x1000c00000064
  01e1d:    	mov    QWORD PTR [rsp-0x30],rax
  01e22: 92 	movabs r13,0x5592e73e8da0
  01e2c:    	mov    rsi,QWORD PTR [rbx]
  01e2f:    	mov    QWORD PTR [rsp-0x18],rsi
  01e34:    	lea    rsi,[rsp-0x18]
  01e39:    	mov    QWORD PTR [rbx],rsi
  01e3c:    	lea    r14,[rsp-0x10]
  01e41:    	mov    QWORD PTR [rsp-0x20],r14
  01e46:    	call   0xffff8855
  01e4b:    	lea    r14,[rbp-0x8]
  01e4f:    	mov    QWORD PTR [rbx],r14
  01e52:    	mov    r14,QWORD PTR [rbp-0x10]
  01e56:    	movq   xmm5,QWORD PTR [rsp]
  01e5b:    	add    rsp,0x10
  01e5f:    	test   rax,rax
  01e62:    	je     0x36e16
:00133 
:00134 %13 = %12.call hit()                 [Isect]
  01e68: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01e6f: 00 	test   rdi,0x7
  01e76:    	jne    0x36e25
  01e7c:    	cmp    DWORD PTR [rdi+0x4],0x33
  01e80:    	jne    0x36e25
  01e86: 26 	cmp    DWORD PTR [rip+0xffffffffffff5843],0x26        # 0xffff76d0
  01e8d:    	jne    0x36e25
  01e93:    	mov    esi,DWORD PTR [rip+0x2c0]        # 0x2159
  01e99:    	cmp    esi,0xffffffff
  01e9c:    	je     0x36e34
  01ea2:    	cmp    WORD PTR [rdi+0x2],0x3
  01ea7:    	jne    0x1ec0
  01ead:    	cmp    esi,0x6
  01eb0:    	jge    0x1ec0
  01eb6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01ebb:    	jmp    0x1ede
  01ec0:    	sub    rsp,0x10
  01ec4:    	movq   QWORD PTR [rsp],xmm5
  01ec9: 92 	movabs rax,0x5592e6dd3800
  01ed3:    	call   rax
  01ed5:    	movq   xmm5,QWORD PTR [rsp]
  01eda:    	add    rsp,0x10
  01ede: ff 	mov    QWORD PTR [r14-0x98],rax
:00135 
:00136 condnotbr %13 =>:00142
  01ee5: ff 	mov    rax,QWORD PTR [r14-0x98]
  01eec:    	or     rax,0x10
  01ef0:    	cmp    rax,0x14
  01ef4:    	je     0x1fb6
:00137 %13 = dynvar(2, %6)
  01efa:    	mov    rax,QWORD PTR [r14-0x18]
  01efe:    	mov    rax,QWORD PTR [rax]
  01f01:    	mov    rax,QWORD PTR [rax-0x48]
  01f05: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = literal[1.0]
  01f0c: 00 	movq   xmm2,QWORD PTR [rip+0x249]        # 0x215d
  01f14: 00 	movabs rax,0xff80000000000002
  01f1e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  01f25: 00 	cmp    DWORD PTR [rip+0x239],0x0        # 0x2165
  01f2c:    	jl     0x36e6f
  01f32:    	je     0x36e7e
  01f38: 01 	sub    DWORD PTR [rip+0x226],0x1        # 0x2165
  01f3f:    	xor    rdi,rdi
  01f42:    	jmp    0x36e6f
  01f47: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01f4e: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01f55:    	sub    rsp,0x10
  01f59:    	movq   QWORD PTR [rsp],xmm2
  01f5e:    	movq   QWORD PTR [rsp+0x8],xmm5
  01f64:    	mov    rdx,rdi
  01f67:    	mov    rcx,rsi
  01f6a:    	mov    rdi,rbx
  01f6d:    	mov    rsi,r12
  01f70: 92 	movabs rax,0x5592e6de8460
  01f7a:    	call   rax
  01f7c:    	movq   xmm2,QWORD PTR [rsp]
  01f81:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01f87:    	add    rsp,0x10
  01f8b:    	test   rax,rax
  01f8e:    	je     0x36e9a
  01f94: ff 	mov    QWORD PTR [r14-0x98],rax
:00140 dynvar(2, %6) = %13
  01f9b:    	mov    rax,QWORD PTR [r14-0x18]
  01f9f:    	mov    rax,QWORD PTR [rax]
  01fa2: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01fa9:    	mov    QWORD PTR [rax-0x48],rdi
:00141 ret %13
  01fad: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fb4:    	leave  
  01fb5:    	ret    
:00142 %13 = literal[0.0]
  01fb6: 00 	movq   xmm2,QWORD PTR [rip+0x1af]        # 0x216d
  01fbe: 00 	movabs rax,0x8000000000000002
  01fc8: ff 	mov    QWORD PTR [r14-0x98],rax
:00143 ret %13
  01fcf: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fd6:    	leave  
  01fd7:    	ret    
==> start whole compile: intersect FuncId(98) self_class:Sphere start:[00000] bytecode:0x5592e73e2200
<== finished compile. elapsed:108.6µs
offset:Pos(61896) code: 5901 bytes  data: 267 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x34d34
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x34d43
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x34d43
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x34d52
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x34d52
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffff54cb],0x26        # 0xffff555b
  00090:    	jne    0x34d52
  00096:    	mov    esi,DWORD PTR [rip+0x1675]        # 0x1711
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x34d61
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 92 	movabs rax,0x5592e6dd3800
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x34d8a
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x34d8a
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff545a],0x26        # 0xffff555b
  00101:    	jne    0x34d8a
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffff5451],0x0        # 0xffff555f
  0010e:    	je     0x126
  00114:    	mov    rdi,r12
  00117:    	mov    rsi,QWORD PTR [rbx]
  0011a: 92 	movabs rax,0x5592e6e3ca90
  00124:    	call   rax
  00126: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0012f:    	mov    rax,QWORD PTR [r14-0x78]
  00133:    	mov    QWORD PTR [rsp-0x40],rax
  00138: 00 	mov    rdi,0x1
  0013f:    	mov    rax,QWORD PTR [r14-0x80]
  00143:    	mov    QWORD PTR [rsp-0x48],rax
  00148: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00151: 07 	movabs rax,0x100070000005c
  0015b:    	mov    QWORD PTR [rsp-0x30],rax
  00160: 92 	movabs r13,0x5592e73ff180
  0016a:    	mov    rsi,QWORD PTR [rbx]
  0016d:    	mov    QWORD PTR [rsp-0x18],rsi
  00172:    	lea    rsi,[rsp-0x18]
  00177:    	mov    QWORD PTR [rbx],rsi
  0017a:    	lea    r14,[rsp-0x10]
  0017f:    	mov    QWORD PTR [rsp-0x20],r14
  00184:    	call   0xffff61a2
  00189:    	lea    r14,[rbp-0x8]
  0018d:    	mov    QWORD PTR [rbx],r14
  00190:    	mov    r14,QWORD PTR [rbp-0x10]
  00194:    	test   rax,rax
  00197:    	je     0x34d99
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x34da8
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x31
  001b6:    	jne    0x34da8
  001bc: 26 	cmp    DWORD PTR [rip+0xffffffffffff5398],0x26        # 0xffff555b
  001c3:    	jne    0x34da8
  001c9:    	mov    esi,DWORD PTR [rip+0x154a]        # 0x1719
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x34db7
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: 92 	movabs rax,0x5592e6dd3800
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x34de0
  00217:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0021b:    	jne    0x34de0
  00221: 26 	cmp    DWORD PTR [rip+0xffffffffffff5333],0x26        # 0xffff555b
  00228:    	jne    0x34de0
  0022e: 00 	cmp    DWORD PTR [rip+0xffffffffffff532a],0x0        # 0xffff555f
  00235:    	je     0x24d
  0023b:    	mov    rdi,r12
  0023e:    	mov    rsi,QWORD PTR [rbx]
  00241: 92 	movabs rax,0x5592e6e3ca90
  0024b:    	call   rax
  0024d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00256:    	mov    rax,QWORD PTR [r14-0x48]
  0025a:    	mov    QWORD PTR [rsp-0x40],rax
  0025f: 00 	mov    rdi,0x1
  00266:    	mov    rax,QWORD PTR [r14-0x78]
  0026a:    	mov    QWORD PTR [rsp-0x48],rax
  0026f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00278: 05 	movabs rax,0x100050000005e
  00282:    	mov    QWORD PTR [rsp-0x30],rax
  00287: 92 	movabs r13,0x5592e73e6700
  00291:    	mov    rsi,QWORD PTR [rbx]
  00294:    	mov    QWORD PTR [rsp-0x18],rsi
  00299:    	lea    rsi,[rsp-0x18]
  0029e:    	mov    QWORD PTR [rbx],rsi
  002a1:    	lea    r14,[rsp-0x10]
  002a6:    	mov    QWORD PTR [rsp-0x20],r14
  002ab:    	call   0xffff6230
  002b0:    	lea    r14,[rbp-0x8]
  002b4:    	mov    QWORD PTR [rbx],r14
  002b7:    	mov    r14,QWORD PTR [rbp-0x10]
  002bb:    	test   rax,rax
  002be:    	je     0x34def
  002c4:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002c8:    	mov    rax,QWORD PTR [r14-0x48]
  002cc:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002d0:    	mov    rdi,QWORD PTR [r14-0x48]
  002d4: 00 	test   rdi,0x7
  002db:    	jne    0x34dfe
  002e1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002e5:    	jne    0x34dfe
  002eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff5269],0x26        # 0xffff555b
  002f2:    	jne    0x34dfe
  002f8: 00 	cmp    DWORD PTR [rip+0xffffffffffff5260],0x0        # 0xffff555f
  002ff:    	je     0x317
  00305:    	mov    rdi,r12
  00308:    	mov    rsi,QWORD PTR [rbx]
  0030b: 92 	movabs rax,0x5592e6e3ca90
  00315:    	call   rax
  00317: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00320:    	mov    rax,QWORD PTR [r14-0x48]
  00324:    	mov    QWORD PTR [rsp-0x40],rax
  00329: 00 	mov    rdi,0x1
  00330:    	mov    rax,QWORD PTR [r14-0x78]
  00334:    	mov    QWORD PTR [rsp-0x48],rax
  00339: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00342: 05 	movabs rax,0x100050000005e
  0034c:    	mov    QWORD PTR [rsp-0x30],rax
  00351: 92 	movabs r13,0x5592e73e6700
  0035b:    	mov    rsi,QWORD PTR [rbx]
  0035e:    	mov    QWORD PTR [rsp-0x18],rsi
  00363:    	lea    rsi,[rsp-0x18]
  00368:    	mov    QWORD PTR [rbx],rsi
  0036b:    	lea    r14,[rsp-0x10]
  00370:    	mov    QWORD PTR [rsp-0x20],r14
  00375:    	call   0xffff6230
  0037a:    	lea    r14,[rbp-0x8]
  0037e:    	mov    QWORD PTR [rbx],r14
  00381:    	mov    r14,QWORD PTR [rbp-0x10]
  00385:    	test   rax,rax
  00388:    	je     0x34e0d
  0038e:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  00392:    	mov    rdi,QWORD PTR [r14-0x30]
  00396:    	mov    rax,QWORD PTR [rdi+0x18]
  0039a:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  0039e:    	mov    rdi,QWORD PTR [r14-0x30]
  003a2:    	mov    rax,QWORD PTR [rdi+0x18]
  003a6: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  003ad:    	mov    rdi,QWORD PTR [r14-0x80]
  003b1: 00 	test   rdi,0x1
  003b8:    	jne    0x34e1c
  003be: 00 	test   rdi,0x2
  003c5:    	je     0x401
  003cb:    	xorps  xmm2,xmm2
  003ce: 00 	movabs rax,0x8000000000000002
  003d8:    	cmp    rdi,rax
  003db:    	je     0x413
  003e1:    	mov    rax,rdi
  003e4:    	sar    rax,0x3f
  003e8:    	add    rax,0x2
  003ec:    	and    rdi,0xfffffffffffffffc
  003f0:    	or     rdi,rax
  003f3:    	rol    rdi,0x3d
  003f7:    	movq   xmm2,rdi
  003fc:    	jmp    0x413
  00401:    	call   0xffff0eb5
  00406:    	test   rax,rax
  00409:    	je     0x34e1c
  0040f:    	movq   xmm2,xmm0
  00413: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0041a: 00 	test   rdi,0x1
  00421:    	jne    0x34e2b
  00427: 00 	test   rdi,0x2
  0042e:    	je     0x46a
  00434:    	xorps  xmm3,xmm3
  00437: 00 	movabs rax,0x8000000000000002
  00441:    	cmp    rdi,rax
  00444:    	je     0x47c
  0044a:    	mov    rax,rdi
  0044d:    	sar    rax,0x3f
  00451:    	add    rax,0x2
  00455:    	and    rdi,0xfffffffffffffffc
  00459:    	or     rdi,rax
  0045c:    	rol    rdi,0x3d
  00460:    	movq   xmm3,rdi
  00465:    	jmp    0x47c
  0046a:    	call   0xffff0eb5
  0046f:    	test   rax,rax
  00472:    	je     0x34e2b
  00478:    	movq   xmm3,xmm0
  0047c:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  00480:    	mov    rdi,QWORD PTR [r14-0x78]
  00484: 00 	test   rdi,0x1
  0048b:    	jne    0x34e3a
  00491: 00 	test   rdi,0x2
  00498:    	je     0x4d4
  0049e:    	xorps  xmm4,xmm4
  004a1: 00 	movabs rax,0x8000000000000002
  004ab:    	cmp    rdi,rax
  004ae:    	je     0x4e6
  004b4:    	mov    rax,rdi
  004b7:    	sar    rax,0x3f
  004bb:    	add    rax,0x2
  004bf:    	and    rdi,0xfffffffffffffffc
  004c3:    	or     rdi,rax
  004c6:    	rol    rdi,0x3d
  004ca:    	movq   xmm4,rdi
  004cf:    	jmp    0x4e6
  004d4:    	call   0xffff0eb5
  004d9:    	test   rax,rax
  004dc:    	je     0x34e3a
  004e2:    	movq   xmm4,xmm0
  004e6:    	movq   xmm5,xmm4
  004ea:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  004ee:    	mov    rdi,QWORD PTR [r14-0x50]
  004f2: 00 	test   rdi,0x1
  004f9:    	jne    0x34e56
  004ff: 00 	test   rdi,0x2
  00506:    	je     0x542
  0050c:    	xorps  xmm6,xmm6
  0050f: 00 	movabs rax,0x8000000000000002
  00519:    	cmp    rdi,rax
  0051c:    	je     0x554
  00522:    	mov    rax,rdi
  00525:    	sar    rax,0x3f
  00529:    	add    rax,0x2
  0052d:    	and    rdi,0xfffffffffffffffc
  00531:    	or     rdi,rax
  00534:    	rol    rdi,0x3d
  00538:    	movq   xmm6,rdi
  0053d:    	jmp    0x554
  00542:    	call   0xffff0eb5
  00547:    	test   rax,rax
  0054a:    	je     0x34e56
  00550:    	movq   xmm6,xmm0
  00554:    	movq   xmm4,xmm6
  00558:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  0055c:    	movq   xmm7,xmm4
  00560:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  00564: 00 	movq   xmm4,QWORD PTR [rip+0x11bc]        # 0x1728
  0056c: 00 	movabs rax,0x8000000000000002
  00576:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
  0057a:    	ucomisd xmm7,xmm4
  0057e:    	jbe    0x35a1d
:00021 condnotbr _%9 =>:00087
:00022 %9 = %4
:00023 %9 = neg %9                          [Float]
  00584:    	movq   xmm4,xmm6
  00588: 00 	xorps  xmm4,XMMWORD PTR [rip+0x11a9]        # 0x1738
:00024 %10 = const[Math]                    [Math]
  0058f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4fd2]        # 0xffff5568
  00596: 00 	cmp    rax,QWORD PTR [rip+0x11bb]        # 0x1758
  0059d:    	jne    0x34e7f
  005a3: 00 	mov    rax,QWORD PTR [rip+0x119e]        # 0x1748
  005aa:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.inline MathSqrt(%11; 1)    [#<Class:Math>]
  005ae:    	mov    rdi,QWORD PTR [r14-0x80]
  005b2: 00 	test   rdi,0x7
  005b9:    	jne    0x34f0c
  005bf:    	cmp    DWORD PTR [rdi+0x4],0x24
  005c3:    	jne    0x34f0c
  005c9: 26 	cmp    DWORD PTR [rip+0xffffffffffff4f8b],0x26        # 0xffff555b
  005d0:    	jne    0x34f0c
  005d6:    	sqrtsd xmm2,xmm7
:00027 
:00028 %7 = %9 - %10                        [Float][Float]
  005da:    	movq   xmm3,xmm4
  005de:    	subsd  xmm3,xmm2
:00029 %9 = literal[0.0]
  005e2: 00 	movq   xmm4,QWORD PTR [rip+0x117e]        # 0x1768
  005ea: 00 	movabs rax,0x8000000000000002
  005f4:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [Float][Float]
  005f8:    	ucomisd xmm3,xmm4
  005fc:    	jbe    0x35966
:00031 condnotbr _%9 =>:00086
:00032 %9 = %2.call t()                     [Isect]
  00602:    	movq   xmm0,xmm3
  00606:    	call   0xffff0fd9
  0060b:    	mov    QWORD PTR [r14-0x68],rax
  0060f:    	movq   xmm0,xmm5
  00613:    	call   0xffff0fd9
  00618:    	mov    QWORD PTR [r14-0x58],rax
  0061c:    	movq   xmm0,xmm7
  00620:    	call   0xffff0fd9
  00625:    	mov    QWORD PTR [r14-0x60],rax
  00629:    	mov    rdi,QWORD PTR [r14-0x40]
  0062d: 00 	test   rdi,0x7
  00634:    	jne    0x34f49
  0063a:    	cmp    DWORD PTR [rdi+0x4],0x33
  0063e:    	jne    0x34f49
  00644: 26 	cmp    DWORD PTR [rip+0xffffffffffff4f10],0x26        # 0xffff555b
  0064b:    	jne    0x34f49
  00651:    	mov    esi,DWORD PTR [rip+0x111d]        # 0x1774
  00657:    	cmp    esi,0xffffffff
  0065a:    	je     0x34f75
  00660:    	cmp    WORD PTR [rdi+0x2],0x3
  00665:    	jne    0x67e
  0066b:    	cmp    esi,0x6
  0066e:    	jge    0x67e
  00674:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00679:    	jmp    0x6a8
  0067e:    	sub    rsp,0x10
  00682:    	movq   QWORD PTR [rsp],xmm2
  00687:    	movq   QWORD PTR [rsp+0x8],xmm7
  0068d: 92 	movabs rax,0x5592e6dd3800
  00697:    	call   rax
  00699:    	movq   xmm2,QWORD PTR [rsp]
  0069e:    	movq   xmm7,QWORD PTR [rsp+0x8]
  006a4:    	add    rsp,0x10
  006a8:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [Float][Float]
  006ac:    	mov    rdi,QWORD PTR [r14-0x68]
  006b0: 00 	test   rdi,0x1
  006b7:    	jne    0x34fbc
  006bd: 00 	test   rdi,0x2
  006c4:    	je     0x700
  006ca:    	xorps  xmm3,xmm3
  006cd: 00 	movabs rax,0x8000000000000002
  006d7:    	cmp    rdi,rax
  006da:    	je     0x712
  006e0:    	mov    rax,rdi
  006e3:    	sar    rax,0x3f
  006e7:    	add    rax,0x2
  006eb:    	and    rdi,0xfffffffffffffffc
  006ef:    	or     rdi,rax
  006f2:    	rol    rdi,0x3d
  006f6:    	movq   xmm3,rdi
  006fb:    	jmp    0x712
  00700:    	call   0xffff0eb5
  00705:    	test   rax,rax
  00708:    	je     0x34fbc
  0070e:    	movq   xmm3,xmm0
  00712:    	mov    rdi,QWORD PTR [r14-0x78]
  00716: 00 	test   rdi,0x1
  0071d:    	jne    0x34fe8
  00723: 00 	test   rdi,0x2
  0072a:    	je     0x766
  00730:    	xorps  xmm4,xmm4
  00733: 00 	movabs rax,0x8000000000000002
  0073d:    	cmp    rdi,rax
  00740:    	je     0x778
  00746:    	mov    rax,rdi
  00749:    	sar    rax,0x3f
  0074d:    	add    rax,0x2
  00751:    	and    rdi,0xfffffffffffffffc
  00755:    	or     rdi,rax
  00758:    	rol    rdi,0x3d
  0075c:    	movq   xmm4,rdi
  00761:    	jmp    0x778
  00766:    	call   0xffff0eb5
  0076b:    	test   rax,rax
  0076e:    	je     0x34fe8
  00774:    	movq   xmm4,xmm0
  00778:    	ucomisd xmm3,xmm4
  0077c:    	jae    0x359ba
:00035 condnotbr _%9 =>:00086
:00036 _ = %2.call t=(%7; 1)                [Isect]
  00782:    	mov    rdi,QWORD PTR [r14-0x40]
  00786: 00 	test   rdi,0x7
  0078d:    	jne    0x35014
  00793:    	cmp    DWORD PTR [rdi+0x4],0x33
  00797:    	jne    0x35014
  0079d: 26 	cmp    DWORD PTR [rip+0xffffffffffff4db7],0x26        # 0xffff555b
  007a4:    	jne    0x35014
  007aa:    	mov    esi,DWORD PTR [rip+0xfcc]        # 0x177c
  007b0:    	cmp    esi,0xffffffff
  007b3:    	je     0x3504f
  007b9:    	cmp    WORD PTR [rdi+0x2],0x3
  007be:    	jne    0x7db
  007c4:    	cmp    esi,0x6
  007c7:    	jge    0x7db
  007cd:    	mov    rax,QWORD PTR [r14-0x68]
  007d1:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007d6:    	jmp    0x812
  007db:    	sub    rsp,0x10
  007df:    	movq   QWORD PTR [rsp],xmm2
  007e4:    	movq   QWORD PTR [rsp+0x8],xmm7
  007ea:    	mov    rdx,QWORD PTR [r14-0x68]
  007ee: 92 	movabs rax,0x5592e6dd3a80
  007f8:    	call   rax
  007fa:    	movq   xmm2,QWORD PTR [rsp]
  007ff:    	movq   xmm7,QWORD PTR [rsp+0x8]
  00805:    	add    rsp,0x10
  00809:    	test   rax,rax
  0080c:    	je     0x35040
:00037 
:00038 %9 = literal[true]
  00812: 00 	mov    rax,0x1c
  00819:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [Isect]
  0081d:    	mov    rdi,QWORD PTR [r14-0x40]
  00821: 00 	test   rdi,0x7
  00828:    	jne    0x3509d
  0082e:    	cmp    DWORD PTR [rdi+0x4],0x33
  00832:    	jne    0x3509d
  00838: 26 	cmp    DWORD PTR [rip+0xffffffffffff4d1c],0x26        # 0xffff555b
  0083f:    	jne    0x3509d
  00845:    	mov    esi,DWORD PTR [rip+0xf39]        # 0x1784
  0084b:    	cmp    esi,0xffffffff
  0084e:    	je     0x350d8
  00854:    	cmp    WORD PTR [rdi+0x2],0x3
  00859:    	jne    0x876
  0085f:    	cmp    esi,0x6
  00862:    	jge    0x876
  00868:    	mov    rax,QWORD PTR [r14-0x78]
  0086c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00871:    	jmp    0x8ad
  00876:    	sub    rsp,0x10
  0087a:    	movq   QWORD PTR [rsp],xmm2
  0087f:    	movq   QWORD PTR [rsp+0x8],xmm7
  00885:    	mov    rdx,QWORD PTR [r14-0x78]
  00889: 92 	movabs rax,0x5592e6dd3a80
  00893:    	call   rax
  00895:    	movq   xmm2,QWORD PTR [rsp]
  0089a:    	movq   xmm7,QWORD PTR [rsp+0x8]
  008a0:    	add    rsp,0x10
  008a4:    	test   rax,rax
  008a7:    	je     0x350c9
:00040 
:00041 %9 = const[Vec]                      [Vec]
  008ad: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4cb4]        # 0xffff5568
  008b4: 00 	cmp    rax,QWORD PTR [rip+0xedd]        # 0x1798
  008bb:    	jne    0x35126
  008c1: 00 	mov    rax,QWORD PTR [rip+0xec0]        # 0x1788
  008c8:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [Ray]
  008cc:    	mov    rdi,QWORD PTR [r14-0x38]
  008d0: 00 	test   rdi,0x7
  008d7:    	jne    0x3518f
  008dd:    	cmp    DWORD PTR [rdi+0x4],0x31
  008e1:    	jne    0x3518f
  008e7: 26 	cmp    DWORD PTR [rip+0xffffffffffff4c6d],0x26        # 0xffff555b
  008ee:    	jne    0x3518f
  008f4:    	mov    esi,DWORD PTR [rip+0xeaa]        # 0x17a4
  008fa:    	cmp    esi,0xffffffff
  008fd:    	je     0x351ae
  00903:    	cmp    WORD PTR [rdi+0x2],0x3
  00908:    	jne    0x921
  0090e:    	cmp    esi,0x6
  00911:    	jge    0x921
  00917:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0091c:    	jmp    0x93f
  00921:    	sub    rsp,0x10
  00925:    	movq   QWORD PTR [rsp],xmm7
  0092a: 92 	movabs rax,0x5592e6dd3800
  00934:    	call   rax
  00936:    	movq   xmm7,QWORD PTR [rsp]
  0093b:    	add    rsp,0x10
  0093f:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [Vec]
  00943:    	mov    rdi,QWORD PTR [r14-0x80]
  00947: 00 	test   rdi,0x7
  0094e:    	jne    0x351e9
  00954:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00958:    	jne    0x351e9
  0095e: 26 	cmp    DWORD PTR [rip+0xffffffffffff4bf6],0x26        # 0xffff555b
  00965:    	jne    0x351e9
  0096b:    	mov    esi,DWORD PTR [rip+0xe3b]        # 0x17ac
  00971:    	cmp    esi,0xffffffff
  00974:    	je     0x35208
  0097a:    	cmp    WORD PTR [rdi+0x2],0x3
  0097f:    	jne    0x998
  00985:    	cmp    esi,0x6
  00988:    	jge    0x998
  0098e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00993:    	jmp    0x9b6
  00998:    	sub    rsp,0x10
  0099c:    	movq   QWORD PTR [rsp],xmm7
  009a1: 92 	movabs rax,0x5592e6dd3800
  009ab:    	call   rax
  009ad:    	movq   xmm7,QWORD PTR [rsp]
  009b2:    	add    rsp,0x10
  009b6:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [Ray]
  009ba:    	mov    rdi,QWORD PTR [r14-0x38]
  009be: 00 	test   rdi,0x7
  009c5:    	jne    0x35243
  009cb:    	cmp    DWORD PTR [rdi+0x4],0x31
  009cf:    	jne    0x35243
  009d5: 26 	cmp    DWORD PTR [rip+0xffffffffffff4b7f],0x26        # 0xffff555b
  009dc:    	jne    0x35243
  009e2:    	mov    esi,DWORD PTR [rip+0xdcc]        # 0x17b4
  009e8:    	cmp    esi,0xffffffff
  009eb:    	je     0x35252
  009f1:    	cmp    WORD PTR [rdi+0x2],0x3
  009f6:    	jne    0xa0f
  009fc:    	cmp    esi,0x6
  009ff:    	jge    0xa0f
  00a05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a0a:    	jmp    0xa1b
  00a0f: 92 	movabs rax,0x5592e6dd3800
  00a19:    	call   rax
  00a1b: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [Vec]
  00a22: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00a29: 00 	test   rdi,0x7
  00a30:    	jne    0x3527b
  00a36:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a3a:    	jne    0x3527b
  00a40: 26 	cmp    DWORD PTR [rip+0xffffffffffff4b14],0x26        # 0xffff555b
  00a47:    	jne    0x3527b
  00a4d:    	mov    esi,DWORD PTR [rip+0xd69]        # 0x17bc
  00a53:    	cmp    esi,0xffffffff
  00a56:    	je     0x3528a
  00a5c:    	cmp    WORD PTR [rdi+0x2],0x3
  00a61:    	jne    0xa7a
  00a67:    	cmp    esi,0x6
  00a6a:    	jge    0xa7a
  00a70:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a75:    	jmp    0xa86
  00a7a: 92 	movabs rax,0x5592e6dd3800
  00a84:    	call   rax
  00a86: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [Float][Float]
  00a8d: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00a94: 00 	test   rdi,0x1
  00a9b:    	jne    0x352b3
  00aa1: 00 	test   rdi,0x2
  00aa8:    	je     0xae4
  00aae:    	xorps  xmm2,xmm2
  00ab1: 00 	movabs rax,0x8000000000000002
  00abb:    	cmp    rdi,rax
  00abe:    	je     0xaf6
  00ac4:    	mov    rax,rdi
  00ac7:    	sar    rax,0x3f
  00acb:    	add    rax,0x2
  00acf:    	and    rdi,0xfffffffffffffffc
  00ad3:    	or     rdi,rax
  00ad6:    	rol    rdi,0x3d
  00ada:    	movq   xmm2,rdi
  00adf:    	jmp    0xaf6
  00ae4:    	call   0xffff0eb5
  00ae9:    	test   rax,rax
  00aec:    	je     0x352b3
  00af2:    	movq   xmm2,xmm0
  00af6:    	mov    rdi,QWORD PTR [r14-0x68]
  00afa: 00 	test   rdi,0x1
  00b01:    	jne    0x352c2
  00b07: 00 	test   rdi,0x2
  00b0e:    	je     0xb4a
  00b14:    	xorps  xmm3,xmm3
  00b17: 00 	movabs rax,0x8000000000000002
  00b21:    	cmp    rdi,rax
  00b24:    	je     0xb5c
  00b2a:    	mov    rax,rdi
  00b2d:    	sar    rax,0x3f
  00b31:    	add    rax,0x2
  00b35:    	and    rdi,0xfffffffffffffffc
  00b39:    	or     rdi,rax
  00b3c:    	rol    rdi,0x3d
  00b40:    	movq   xmm3,rdi
  00b45:    	jmp    0xb5c
  00b4a:    	call   0xffff0eb5
  00b4f:    	test   rax,rax
  00b52:    	je     0x352c2
  00b58:    	movq   xmm3,xmm0
  00b5c:    	mulsd  xmm2,xmm3
:00051 %10 = %10 + %11                      [Float][Float]
  00b60:    	mov    rdi,QWORD PTR [r14-0x80]
  00b64: 00 	test   rdi,0x1
  00b6b:    	jne    0x352d1
  00b71: 00 	test   rdi,0x2
  00b78:    	je     0xbb4
  00b7e:    	xorps  xmm4,xmm4
  00b81: 00 	movabs rax,0x8000000000000002
  00b8b:    	cmp    rdi,rax
  00b8e:    	je     0xbc6
  00b94:    	mov    rax,rdi
  00b97:    	sar    rax,0x3f
  00b9b:    	add    rax,0x2
  00b9f:    	and    rdi,0xfffffffffffffffc
  00ba3:    	or     rdi,rax
  00ba6:    	rol    rdi,0x3d
  00baa:    	movq   xmm4,rdi
  00baf:    	jmp    0xbc6
  00bb4:    	call   0xffff0eb5
  00bb9:    	test   rax,rax
  00bbc:    	je     0x352d1
  00bc2:    	movq   xmm4,xmm0
  00bc6:    	addsd  xmm4,xmm2
:00052 %11 = %1.call org()                  [Ray]
  00bca:    	mov    rdi,QWORD PTR [r14-0x38]
  00bce: 00 	test   rdi,0x7
  00bd5:    	jne    0x352f0
  00bdb:    	cmp    DWORD PTR [rdi+0x4],0x31
  00bdf:    	jne    0x352f0
  00be5: 26 	cmp    DWORD PTR [rip+0xffffffffffff496f],0x26        # 0xffff555b
  00bec:    	jne    0x352f0
  00bf2:    	mov    esi,DWORD PTR [rip+0xbcc]        # 0x17c4
  00bf8:    	cmp    esi,0xffffffff
  00bfb:    	je     0x3530c
  00c01:    	cmp    WORD PTR [rdi+0x2],0x3
  00c06:    	jne    0xc1f
  00c0c:    	cmp    esi,0x6
  00c0f:    	jge    0xc1f
  00c15:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c1a:    	jmp    0xc3d
  00c1f:    	sub    rsp,0x10
  00c23:    	movq   QWORD PTR [rsp],xmm4
  00c28: 92 	movabs rax,0x5592e6dd3800
  00c32:    	call   rax
  00c34:    	movq   xmm4,QWORD PTR [rsp]
  00c39:    	add    rsp,0x10
  00c3d: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [Vec]
  00c44: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00c4b: 00 	test   rdi,0x7
  00c52:    	jne    0x35347
  00c58:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c5c:    	jne    0x35347
  00c62: 26 	cmp    DWORD PTR [rip+0xffffffffffff48f2],0x26        # 0xffff555b
  00c69:    	jne    0x35347
  00c6f:    	mov    esi,DWORD PTR [rip+0xb57]        # 0x17cc
  00c75:    	cmp    esi,0xffffffff
  00c78:    	je     0x35363
  00c7e:    	cmp    WORD PTR [rdi+0x2],0x3
  00c83:    	jne    0xc9c
  00c89:    	cmp    esi,0x6
  00c8c:    	jge    0xc9c
  00c92:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c97:    	jmp    0xcba
  00c9c:    	sub    rsp,0x10
  00ca0:    	movq   QWORD PTR [rsp],xmm4
  00ca5: 92 	movabs rax,0x5592e6dd3800
  00caf:    	call   rax
  00cb1:    	movq   xmm4,QWORD PTR [rsp]
  00cb6:    	add    rsp,0x10
  00cba: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [Ray]
  00cc1:    	mov    rdi,QWORD PTR [r14-0x38]
  00cc5: 00 	test   rdi,0x7
  00ccc:    	jne    0x3539e
  00cd2:    	cmp    DWORD PTR [rdi+0x4],0x31
  00cd6:    	jne    0x3539e
  00cdc: 26 	cmp    DWORD PTR [rip+0xffffffffffff4878],0x26        # 0xffff555b
  00ce3:    	jne    0x3539e
  00ce9:    	mov    esi,DWORD PTR [rip+0xae5]        # 0x17d4
  00cef:    	cmp    esi,0xffffffff
  00cf2:    	je     0x353ba
  00cf8:    	cmp    WORD PTR [rdi+0x2],0x3
  00cfd:    	jne    0xd16
  00d03:    	cmp    esi,0x6
  00d06:    	jge    0xd16
  00d0c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d11:    	jmp    0xd34
  00d16:    	sub    rsp,0x10
  00d1a:    	movq   QWORD PTR [rsp],xmm4
  00d1f: 92 	movabs rax,0x5592e6dd3800
  00d29:    	call   rax
  00d2b:    	movq   xmm4,QWORD PTR [rsp]
  00d30:    	add    rsp,0x10
  00d34: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [Vec]
  00d3b: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00d42: 00 	test   rdi,0x7
  00d49:    	jne    0x353f5
  00d4f:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d53:    	jne    0x353f5
  00d59: 26 	cmp    DWORD PTR [rip+0xffffffffffff47fb],0x26        # 0xffff555b
  00d60:    	jne    0x353f5
  00d66:    	mov    esi,DWORD PTR [rip+0xa70]        # 0x17dc
  00d6c:    	cmp    esi,0xffffffff
  00d6f:    	je     0x35411
  00d75:    	cmp    WORD PTR [rdi+0x2],0x3
  00d7a:    	jne    0xd93
  00d80:    	cmp    esi,0x6
  00d83:    	jge    0xd93
  00d89:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d8e:    	jmp    0xdb1
  00d93:    	sub    rsp,0x10
  00d97:    	movq   QWORD PTR [rsp],xmm4
  00d9c: 92 	movabs rax,0x5592e6dd3800
  00da6:    	call   rax
  00da8:    	movq   xmm4,QWORD PTR [rsp]
  00dad:    	add    rsp,0x10
  00db1: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [Float][Float]
  00db8: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00dbf: 00 	test   rdi,0x1
  00dc6:    	jne    0x3544c
  00dcc: 00 	test   rdi,0x2
  00dd3:    	je     0xe0f
  00dd9:    	xorps  xmm2,xmm2
  00ddc: 00 	movabs rax,0x8000000000000002
  00de6:    	cmp    rdi,rax
  00de9:    	je     0xe21
  00def:    	mov    rax,rdi
  00df2:    	sar    rax,0x3f
  00df6:    	add    rax,0x2
  00dfa:    	and    rdi,0xfffffffffffffffc
  00dfe:    	or     rdi,rax
  00e01:    	rol    rdi,0x3d
  00e05:    	movq   xmm2,rdi
  00e0a:    	jmp    0xe21
  00e0f:    	call   0xffff0eb5
  00e14:    	test   rax,rax
  00e17:    	je     0x3544c
  00e1d:    	movq   xmm2,xmm0
  00e21:    	mov    rdi,QWORD PTR [r14-0x68]
  00e25: 00 	test   rdi,0x1
  00e2c:    	jne    0x35468
  00e32: 00 	test   rdi,0x2
  00e39:    	je     0xe75
  00e3f:    	xorps  xmm3,xmm3
  00e42: 00 	movabs rax,0x8000000000000002
  00e4c:    	cmp    rdi,rax
  00e4f:    	je     0xe87
  00e55:    	mov    rax,rdi
  00e58:    	sar    rax,0x3f
  00e5c:    	add    rax,0x2
  00e60:    	and    rdi,0xfffffffffffffffc
  00e64:    	or     rdi,rax
  00e67:    	rol    rdi,0x3d
  00e6b:    	movq   xmm3,rdi
  00e70:    	jmp    0xe87
  00e75:    	call   0xffff0eb5
  00e7a:    	test   rax,rax
  00e7d:    	je     0x35468
  00e83:    	movq   xmm3,xmm0
  00e87:    	mulsd  xmm2,xmm3
:00061 %11 = %11 + %12                      [Float][Float]
  00e8b: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e92: 00 	test   rdi,0x1
  00e99:    	jne    0x35484
  00e9f: 00 	test   rdi,0x2
  00ea6:    	je     0xee2
  00eac:    	xorps  xmm5,xmm5
  00eaf: 00 	movabs rax,0x8000000000000002
  00eb9:    	cmp    rdi,rax
  00ebc:    	je     0xef4
  00ec2:    	mov    rax,rdi
  00ec5:    	sar    rax,0x3f
  00ec9:    	add    rax,0x2
  00ecd:    	and    rdi,0xfffffffffffffffc
  00ed1:    	or     rdi,rax
  00ed4:    	rol    rdi,0x3d
  00ed8:    	movq   xmm5,rdi
  00edd:    	jmp    0xef4
  00ee2:    	call   0xffff0eb5
  00ee7:    	test   rax,rax
  00eea:    	je     0x35484
  00ef0:    	movq   xmm5,xmm0
  00ef4:    	addsd  xmm5,xmm2
:00062 %12 = %1.call org()                  [Ray]
  00ef8:    	mov    rdi,QWORD PTR [r14-0x38]
  00efc: 00 	test   rdi,0x7
  00f03:    	jne    0x354b0
  00f09:    	cmp    DWORD PTR [rdi+0x4],0x31
  00f0d:    	jne    0x354b0
  00f13: 26 	cmp    DWORD PTR [rip+0xffffffffffff4641],0x26        # 0xffff555b
  00f1a:    	jne    0x354b0
  00f20:    	mov    esi,DWORD PTR [rip+0x8be]        # 0x17e4
  00f26:    	cmp    esi,0xffffffff
  00f29:    	je     0x354dc
  00f2f:    	cmp    WORD PTR [rdi+0x2],0x3
  00f34:    	jne    0xf4d
  00f3a:    	cmp    esi,0x6
  00f3d:    	jge    0xf4d
  00f43:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f48:    	jmp    0xf77
  00f4d:    	sub    rsp,0x10
  00f51:    	movq   QWORD PTR [rsp],xmm4
  00f56:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f5c: 92 	movabs rax,0x5592e6dd3800
  00f66:    	call   rax
  00f68:    	movq   xmm4,QWORD PTR [rsp]
  00f6d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f73:    	add    rsp,0x10
  00f77: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [Vec]
  00f7e: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f85: 00 	test   rdi,0x7
  00f8c:    	jne    0x35523
  00f92:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f96:    	jne    0x35523
  00f9c: 26 	cmp    DWORD PTR [rip+0xffffffffffff45b8],0x26        # 0xffff555b
  00fa3:    	jne    0x35523
  00fa9:    	mov    esi,DWORD PTR [rip+0x83d]        # 0x17ec
  00faf:    	cmp    esi,0xffffffff
  00fb2:    	je     0x3554f
  00fb8:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbd:    	jne    0xfd6
  00fc3:    	cmp    esi,0x6
  00fc6:    	jge    0xfd6
  00fcc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd1:    	jmp    0x1000
  00fd6:    	sub    rsp,0x10
  00fda:    	movq   QWORD PTR [rsp],xmm4
  00fdf:    	movq   QWORD PTR [rsp+0x8],xmm5
  00fe5: 92 	movabs rax,0x5592e6dd3800
  00fef:    	call   rax
  00ff1:    	movq   xmm4,QWORD PTR [rsp]
  00ff6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ffc:    	add    rsp,0x10
  01000: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [Ray]
  01007:    	mov    rdi,QWORD PTR [r14-0x38]
  0100b: 00 	test   rdi,0x7
  01012:    	jne    0x35596
  01018:    	cmp    DWORD PTR [rdi+0x4],0x31
  0101c:    	jne    0x35596
  01022: 26 	cmp    DWORD PTR [rip+0xffffffffffff4532],0x26        # 0xffff555b
  01029:    	jne    0x35596
  0102f:    	mov    esi,DWORD PTR [rip+0x7bf]        # 0x17f4
  01035:    	cmp    esi,0xffffffff
  01038:    	je     0x355c2
  0103e:    	cmp    WORD PTR [rdi+0x2],0x3
  01043:    	jne    0x105c
  01049:    	cmp    esi,0x6
  0104c:    	jge    0x105c
  01052:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01057:    	jmp    0x1086
  0105c:    	sub    rsp,0x10
  01060:    	movq   QWORD PTR [rsp],xmm4
  01065:    	movq   QWORD PTR [rsp+0x8],xmm5
  0106b: 92 	movabs rax,0x5592e6dd3800
  01075:    	call   rax
  01077:    	movq   xmm4,QWORD PTR [rsp]
  0107c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01082:    	add    rsp,0x10
  01086: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [Vec]
  0108d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01094: 00 	test   rdi,0x7
  0109b:    	jne    0x35609
  010a1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  010a5:    	jne    0x35609
  010ab: 26 	cmp    DWORD PTR [rip+0xffffffffffff44a9],0x26        # 0xffff555b
  010b2:    	jne    0x35609
  010b8:    	mov    esi,DWORD PTR [rip+0x73e]        # 0x17fc
  010be:    	cmp    esi,0xffffffff
  010c1:    	je     0x35635
  010c7:    	cmp    WORD PTR [rdi+0x2],0x3
  010cc:    	jne    0x10e5
  010d2:    	cmp    esi,0x6
  010d5:    	jge    0x10e5
  010db:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010e0:    	jmp    0x110f
  010e5:    	sub    rsp,0x10
  010e9:    	movq   QWORD PTR [rsp],xmm4
  010ee:    	movq   QWORD PTR [rsp+0x8],xmm5
  010f4: 92 	movabs rax,0x5592e6dd3800
  010fe:    	call   rax
  01100:    	movq   xmm4,QWORD PTR [rsp]
  01105:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0110b:    	add    rsp,0x10
  0110f: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [Float][Float]
  01116: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0111d: 00 	test   rdi,0x1
  01124:    	jne    0x3567c
  0112a: 00 	test   rdi,0x2
  01131:    	je     0x116d
  01137:    	xorps  xmm2,xmm2
  0113a: 00 	movabs rax,0x8000000000000002
  01144:    	cmp    rdi,rax
  01147:    	je     0x117f
  0114d:    	mov    rax,rdi
  01150:    	sar    rax,0x3f
  01154:    	add    rax,0x2
  01158:    	and    rdi,0xfffffffffffffffc
  0115c:    	or     rdi,rax
  0115f:    	rol    rdi,0x3d
  01163:    	movq   xmm2,rdi
  01168:    	jmp    0x117f
  0116d:    	call   0xffff0eb5
  01172:    	test   rax,rax
  01175:    	je     0x3567c
  0117b:    	movq   xmm2,xmm0
  0117f:    	mov    rdi,QWORD PTR [r14-0x68]
  01183: 00 	test   rdi,0x1
  0118a:    	jne    0x356a8
  01190: 00 	test   rdi,0x2
  01197:    	je     0x11d3
  0119d:    	xorps  xmm3,xmm3
  011a0: 00 	movabs rax,0x8000000000000002
  011aa:    	cmp    rdi,rax
  011ad:    	je     0x11e5
  011b3:    	mov    rax,rdi
  011b6:    	sar    rax,0x3f
  011ba:    	add    rax,0x2
  011be:    	and    rdi,0xfffffffffffffffc
  011c2:    	or     rdi,rax
  011c5:    	rol    rdi,0x3d
  011c9:    	movq   xmm3,rdi
  011ce:    	jmp    0x11e5
  011d3:    	call   0xffff0eb5
  011d8:    	test   rax,rax
  011db:    	je     0x356a8
  011e1:    	movq   xmm3,xmm0
  011e5:    	mulsd  xmm2,xmm3
:00071 %12 = %12 + %13                      [Float][Float]
  011e9: ff 	mov    rdi,QWORD PTR [r14-0x90]
  011f0: 00 	test   rdi,0x1
  011f7:    	jne    0x356d4
  011fd: 00 	test   rdi,0x2
  01204:    	je     0x1240
  0120a:    	xorps  xmm6,xmm6
  0120d: 00 	movabs rax,0x8000000000000002
  01217:    	cmp    rdi,rax
  0121a:    	je     0x1252
  01220:    	mov    rax,rdi
  01223:    	sar    rax,0x3f
  01227:    	add    rax,0x2
  0122b:    	and    rdi,0xfffffffffffffffc
  0122f:    	or     rdi,rax
  01232:    	rol    rdi,0x3d
  01236:    	movq   xmm6,rdi
  0123b:    	jmp    0x1252
  01240:    	call   0xffff0eb5
  01245:    	test   rax,rax
  01248:    	je     0x356d4
  0124e:    	movq   xmm6,xmm0
  01252:    	addsd  xmm6,xmm2
:00072 %9 = %9.call new(%10; 3)             [#<Class:Vec>]
  01256:    	movq   xmm0,xmm4
  0125a:    	call   0xffff0fd9
  0125f:    	mov    QWORD PTR [r14-0x80],rax
  01263:    	movq   xmm0,xmm5
  01267:    	call   0xffff0fd9
  0126c: ff 	mov    QWORD PTR [r14-0x88],rax
  01273:    	movq   xmm0,xmm6
  01277:    	call   0xffff0fd9
  0127c: ff 	mov    QWORD PTR [r14-0x90],rax
  01283:    	mov    rdi,QWORD PTR [r14-0x78]
  01287: 00 	test   rdi,0x7
  0128e:    	jne    0x35710
  01294:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01298:    	jne    0x35710
  0129e: 26 	cmp    DWORD PTR [rip+0xffffffffffff42b6],0x26        # 0xffff555b
  012a5:    	jne    0x35710
  012ab: 00 	mov    r9,0x0
  012b2:    	sub    rsp,0x20
  012b6:    	movq   QWORD PTR [rsp],xmm2
  012bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  012c1:    	movq   QWORD PTR [rsp+0x10],xmm5
  012c7:    	movq   QWORD PTR [rsp+0x18],xmm6
  012cd:    	mov    rdx,rdi
  012d0:    	mov    QWORD PTR [rsp-0x40],rcx
  012d5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012de:    	lea    rcx,[r14-0x80]
  012e2: 00 	mov    r8,0x3
  012e9:    	mov    rsi,QWORD PTR [rbx]
  012ec:    	mov    QWORD PTR [rsp-0x18],rsi
  012f1:    	lea    rsi,[rsp-0x18]
  012f6:    	mov    QWORD PTR [rbx],rsi
  012f9:    	lea    r14,[rsp-0x10]
  012fe:    	mov    QWORD PTR [rsp-0x20],r14
  01303:    	call   0x3572f
  01308:    	lea    r14,[rbp-0x8]
  0130c:    	mov    QWORD PTR [rbx],r14
  0130f:    	mov    r14,QWORD PTR [rbp-0x10]
  01313:    	movq   xmm2,QWORD PTR [rsp]
  01318:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0131e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01324:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0132a:    	add    rsp,0x20
  0132e:    	test   rax,rax
  01331:    	je     0x35761
  01337:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [Isect]
  0133b:    	mov    rdi,QWORD PTR [r14-0x40]
  0133f: 00 	test   rdi,0x7
  01346:    	jne    0x35770
  0134c:    	cmp    DWORD PTR [rdi+0x4],0x33
  01350:    	jne    0x35770
  01356: 26 	cmp    DWORD PTR [rip+0xffffffffffff41fe],0x26        # 0xffff555b
  0135d:    	jne    0x35770
  01363:    	mov    esi,DWORD PTR [rip+0x49b]        # 0x1804
  01369:    	cmp    esi,0xffffffff
  0136c:    	je     0x3579e
  01372:    	cmp    WORD PTR [rdi+0x2],0x3
  01377:    	jne    0x1394
  0137d:    	cmp    esi,0x6
  01380:    	jge    0x1394
  01386:    	mov    rax,QWORD PTR [r14-0x78]
  0138a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0138f:    	jmp    0x13e3
  01394:    	sub    rsp,0x20
  01398:    	movq   QWORD PTR [rsp],xmm2
  0139d:    	movq   QWORD PTR [rsp+0x8],xmm4
  013a3:    	movq   QWORD PTR [rsp+0x10],xmm5
  013a9:    	movq   QWORD PTR [rsp+0x18],xmm6
  013af:    	mov    rdx,QWORD PTR [r14-0x78]
  013b3: 92 	movabs rax,0x5592e6dd3a80
  013bd:    	call   rax
  013bf:    	movq   xmm2,QWORD PTR [rsp]
  013c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ca:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013d0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013d6:    	add    rsp,0x20
  013da:    	test   rax,rax
  013dd:    	je     0x3578f
:00075 
:00076 %9 = %2.call pl()                    [Isect]
  013e3:    	mov    rdi,QWORD PTR [r14-0x40]
  013e7: 00 	test   rdi,0x7
  013ee:    	jne    0x35804
  013f4:    	cmp    DWORD PTR [rdi+0x4],0x33
  013f8:    	jne    0x35804
  013fe: 26 	cmp    DWORD PTR [rip+0xffffffffffff4156],0x26        # 0xffff555b
  01405:    	jne    0x35804
  0140b:    	mov    esi,DWORD PTR [rip+0x3fb]        # 0x180c
  01411:    	cmp    esi,0xffffffff
  01414:    	je     0x35823
  0141a:    	cmp    WORD PTR [rdi+0x2],0x3
  0141f:    	jne    0x1438
  01425:    	cmp    esi,0x6
  01428:    	jge    0x1438
  0142e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01433:    	jmp    0x147a
  01438:    	sub    rsp,0x20
  0143c:    	movq   QWORD PTR [rsp],xmm2
  01441:    	movq   QWORD PTR [rsp+0x8],xmm4
  01447:    	movq   QWORD PTR [rsp+0x10],xmm5
  0144d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01453: 92 	movabs rax,0x5592e6dd3800
  0145d:    	call   rax
  0145f:    	movq   xmm2,QWORD PTR [rsp]
  01464:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0146a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01470:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01476:    	add    rsp,0x20
  0147a:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: Sphere[IvarId(0)]
  0147e:    	mov    rdi,QWORD PTR [r14-0x30]
  01482:    	mov    rax,QWORD PTR [rdi+0x10]
  01486:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [Vec]
  0148a:    	mov    rdi,QWORD PTR [r14-0x78]
  0148e: 00 	test   rdi,0x7
  01495:    	jne    0x35882
  0149b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0149f:    	jne    0x35882
  014a5: 26 	cmp    DWORD PTR [rip+0xffffffffffff40af],0x26        # 0xffff555b
  014ac:    	jne    0x35882
  014b2:    	sub    rsp,0x20
  014b6:    	movq   QWORD PTR [rsp],xmm2
  014bb:    	movq   QWORD PTR [rsp+0x8],xmm5
  014c1:    	movq   QWORD PTR [rsp+0x10],xmm6
  014c7: 00 	cmp    DWORD PTR [rip+0xffffffffffff4091],0x0        # 0xffff555f
  014ce:    	je     0x14e6
  014d4:    	mov    rdi,r12
  014d7:    	mov    rsi,QWORD PTR [rbx]
  014da: 92 	movabs rax,0x5592e6e3ca90
  014e4:    	call   rax
  014e6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014ef:    	mov    rax,QWORD PTR [r14-0x78]
  014f3:    	mov    QWORD PTR [rsp-0x40],rax
  014f8: 00 	mov    rdi,0x1
  014ff:    	mov    rax,QWORD PTR [r14-0x80]
  01503:    	mov    QWORD PTR [rsp-0x48],rax
  01508: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01511: 07 	movabs rax,0x100070000005c
  0151b:    	mov    QWORD PTR [rsp-0x30],rax
  01520: 92 	movabs r13,0x5592e73ff180
  0152a:    	mov    rsi,QWORD PTR [rbx]
  0152d:    	mov    QWORD PTR [rsp-0x18],rsi
  01532:    	lea    rsi,[rsp-0x18]
  01537:    	mov    QWORD PTR [rbx],rsi
  0153a:    	lea    r14,[rsp-0x10]
  0153f:    	mov    QWORD PTR [rsp-0x20],r14
  01544:    	call   0xffff61a2
  01549:    	lea    r14,[rbp-0x8]
  0154d:    	mov    QWORD PTR [rbx],r14
  01550:    	mov    r14,QWORD PTR [rbp-0x10]
  01554:    	movq   xmm2,QWORD PTR [rsp]
  01559:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0155f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01565:    	add    rsp,0x20
  01569:    	test   rax,rax
  0156c:    	je     0x358a1
  01572:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [Vec]
  01576:    	mov    rdi,QWORD PTR [r14-0x70]
  0157a: 00 	test   rdi,0x7
  01581:    	jne    0x358b0
  01587:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0158b:    	jne    0x358b0
  01591: 26 	cmp    DWORD PTR [rip+0xffffffffffff3fc3],0x26        # 0xffff555b
  01598:    	jne    0x358b0
  0159e:    	sub    rsp,0x20
  015a2:    	movq   QWORD PTR [rsp],xmm2
  015a7:    	movq   QWORD PTR [rsp+0x8],xmm5
  015ad:    	movq   QWORD PTR [rsp+0x10],xmm6
  015b3: 00 	cmp    DWORD PTR [rip+0xffffffffffff3fa5],0x0        # 0xffff555f
  015ba:    	je     0x15d2
  015c0:    	mov    rdi,r12
  015c3:    	mov    rsi,QWORD PTR [rbx]
  015c6: 92 	movabs rax,0x5592e6e3ca90
  015d0:    	call   rax
  015d2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015db:    	mov    rax,QWORD PTR [r14-0x70]
  015df:    	mov    QWORD PTR [rsp-0x40],rax
  015e4: 00 	mov    rdi,0x0
  015eb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015f4: 07 	movabs rax,0x1000700000060
  015fe:    	mov    QWORD PTR [rsp-0x30],rax
  01603: 92 	movabs r13,0x5592e73d9f90
  0160d:    	mov    rsi,QWORD PTR [rbx]
  01610:    	mov    QWORD PTR [rsp-0x18],rsi
  01615:    	lea    rsi,[rsp-0x18]
  0161a:    	mov    QWORD PTR [rbx],rsi
  0161d:    	lea    r14,[rsp-0x10]
  01622:    	mov    QWORD PTR [rsp-0x20],r14
  01627:    	call   0xffff5e1b
  0162c:    	lea    r14,[rbp-0x8]
  01630:    	mov    QWORD PTR [rbx],r14
  01633:    	mov    r14,QWORD PTR [rbp-0x10]
  01637:    	movq   xmm2,QWORD PTR [rsp]
  0163c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01642:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01648:    	add    rsp,0x20
  0164c:    	test   rax,rax
  0164f:    	je     0x358cf
  01655:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [Isect]
  01659:    	mov    rdi,QWORD PTR [r14-0x40]
  0165d: 00 	test   rdi,0x7
  01664:    	jne    0x358de
  0166a:    	cmp    DWORD PTR [rdi+0x4],0x33
  0166e:    	jne    0x358de
  01674: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ee0],0x26        # 0xffff555b
  0167b:    	jne    0x358de
  01681:    	mov    esi,DWORD PTR [rip+0x18d]        # 0x1814
  01687:    	cmp    esi,0xffffffff
  0168a:    	je     0x3590c
  01690:    	cmp    WORD PTR [rdi+0x2],0x3
  01695:    	jne    0x16b2
  0169b:    	cmp    esi,0x6
  0169e:    	jge    0x16b2
  016a4:    	mov    rax,QWORD PTR [r14-0x78]
  016a8:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  016ad:    	jmp    0x16f5
  016b2:    	sub    rsp,0x20
  016b6:    	movq   QWORD PTR [rsp],xmm2
  016bb:    	movq   QWORD PTR [rsp+0x8],xmm5
  016c1:    	movq   QWORD PTR [rsp+0x10],xmm6
  016c7:    	mov    rdx,QWORD PTR [r14-0x78]
  016cb: 92 	movabs rax,0x5592e6dd3a80
  016d5:    	call   rax
  016d7:    	movq   xmm2,QWORD PTR [rsp]
  016dc:    	movq   xmm5,QWORD PTR [rsp+0x8]
  016e2:    	movq   xmm6,QWORD PTR [rsp+0x10]
  016e8:    	add    rsp,0x20
  016ec:    	test   rax,rax
  016ef:    	je     0x358fd
:00084 
:00085 br =>:00086
  016f5:    	jmp    0x359f0
:00086 br =>:00087
  016fa:    	jmp    0x35a5d
:00087 %9 = nil
  016ff: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  01707:    	mov    rax,QWORD PTR [r14-0x78]
  0170b:    	leave  
  0170c:    	ret    
==> start whole compile: <unnamed> FuncId(106) self_class:Scene start:[00000] bytecode:0x5592e7418280
<== finished compile. elapsed:23.1µs
offset:Pos(68064) code: 247 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x34271
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x34271
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x30]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7077889]
  00071: mov    rax,0xd80003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x34280
  0008d: cmp    DWORD PTR [rip+0xffffffffffff3caf],0x26        # 0xffff3d43
  00094: jne    0x34280
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x3428f
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: test   rax,rax
  000e7: je     0x342c1
  000ed: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  000f1: mov    rax,QWORD PTR [r14-0x40]
  000f5: leave  
  000f6: ret    
==> start whole compile: vcross FuncId(93) self_class:Vec start:[00000] bytecode:0x5592e73a9470
<== finished compile. elapsed:53.5µs
offset:Pos(68311) code: 2426 bytes  data: 87 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x341d9
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    QWORD PTR [r14-0x68],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x341e8
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x341e8
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004e: mov    rax,QWORD PTR [rip+0xffffffffffff3c04]        # 0xffff3c59
  00055: cmp    rax,QWORD PTR [rip+0x93d]        # 0x999
  0005c: jne    0x341f7
  00062: mov    rax,QWORD PTR [rip+0x920]        # 0x989
  00069: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @y: Vec[IvarId(1)]
  0006d: mov    rdi,QWORD PTR [r14-0x30]
  00071: mov    rax,QWORD PTR [rdi+0x18]
  00075: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call z()                     [Vec]
  00079: mov    rdi,QWORD PTR [r14-0x38]
  0007d: test   rdi,0x7
  00084: jne    0x34242
  0008a: cmp    DWORD PTR [rdi+0x4],0x2b
  0008e: jne    0x34242
  00094: cmp    DWORD PTR [rip+0xffffffffffff3bb1],0x26        # 0xffff3c4c
  0009b: jne    0x34242
  000a1: mov    esi,DWORD PTR [rip+0x8fe]        # 0x9a5
  000a7: cmp    esi,0xffffffff
  000aa: je     0x34251
  000b0: cmp    WORD PTR [rdi+0x2],0x3
  000b5: jne    0xce
  000bb: cmp    esi,0x6
  000be: jge    0xce
  000c4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c9: jmp    0xda
  000ce: movabs rax,0x5592e6dd3800
  000d8: call   rax
  000da: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 * %4                         [Float][Float]
  000de: mov    rdi,QWORD PTR [r14-0x48]
  000e2: test   rdi,0x1
  000e9: jne    0x3427a
  000ef: test   rdi,0x2
  000f6: je     0x132
  000fc: xorps  xmm2,xmm2
  000ff: movabs rax,0x8000000000000002
  00109: cmp    rdi,rax
  0010c: je     0x144
  00112: mov    rax,rdi
  00115: sar    rax,0x3f
  00119: add    rax,0x2
  0011d: and    rdi,0xfffffffffffffffc
  00121: or     rdi,rax
  00124: rol    rdi,0x3d
  00128: movq   xmm2,rdi
  0012d: jmp    0x144
  00132: call   0xfffef5a6
  00137: test   rax,rax
  0013a: je     0x3427a
  00140: movq   xmm2,xmm0
  00144: mov    rdi,QWORD PTR [r14-0x50]
  00148: test   rdi,0x1
  0014f: jne    0x34289
  00155: test   rdi,0x2
  0015c: je     0x198
  00162: xorps  xmm3,xmm3
  00165: movabs rax,0x8000000000000002
  0016f: cmp    rdi,rax
  00172: je     0x1aa
  00178: mov    rax,rdi
  0017b: sar    rax,0x3f
  0017f: add    rax,0x2
  00183: and    rdi,0xfffffffffffffffc
  00187: or     rdi,rax
  0018a: rol    rdi,0x3d
  0018e: movq   xmm3,rdi
  00193: jmp    0x1aa
  00198: call   0xfffef5a6
  0019d: test   rax,rax
  001a0: je     0x34289
  001a6: movq   xmm3,xmm0
  001aa: mulsd  xmm2,xmm3
:00006 %4 = @z: Vec[IvarId(2)]
  001ae: mov    rdi,QWORD PTR [r14-0x30]
  001b2: mov    rax,QWORD PTR [rdi+0x20]
  001b6: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001ba: mov    rdi,QWORD PTR [r14-0x38]
  001be: test   rdi,0x7
  001c5: jne    0x34298
  001cb: cmp    DWORD PTR [rdi+0x4],0x2b
  001cf: jne    0x34298
  001d5: cmp    DWORD PTR [rip+0xffffffffffff3a70],0x26        # 0xffff3c4c
  001dc: jne    0x34298
  001e2: mov    esi,DWORD PTR [rip+0x7c5]        # 0x9ad
  001e8: cmp    esi,0xffffffff
  001eb: je     0x342b4
  001f1: cmp    WORD PTR [rdi+0x2],0x3
  001f6: jne    0x20f
  001fc: cmp    esi,0x6
  001ff: jge    0x20f
  00205: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020a: jmp    0x22d
  0020f: sub    rsp,0x10
  00213: movq   QWORD PTR [rsp],xmm2
  00218: movabs rax,0x5592e6dd3800
  00222: call   rax
  00224: movq   xmm2,QWORD PTR [rsp]
  00229: add    rsp,0x10
  0022d: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 * %5                         [Float][Float]
  00231: mov    rdi,QWORD PTR [r14-0x50]
  00235: test   rdi,0x1
  0023c: jne    0x342ef
  00242: test   rdi,0x2
  00249: je     0x285
  0024f: xorps  xmm3,xmm3
  00252: movabs rax,0x8000000000000002
  0025c: cmp    rdi,rax
  0025f: je     0x297
  00265: mov    rax,rdi
  00268: sar    rax,0x3f
  0026c: add    rax,0x2
  00270: and    rdi,0xfffffffffffffffc
  00274: or     rdi,rax
  00277: rol    rdi,0x3d
  0027b: movq   xmm3,rdi
  00280: jmp    0x297
  00285: call   0xfffef5a6
  0028a: test   rax,rax
  0028d: je     0x342ef
  00293: movq   xmm3,xmm0
  00297: mov    rdi,QWORD PTR [r14-0x58]
  0029b: test   rdi,0x1
  002a2: jne    0x3430b
  002a8: test   rdi,0x2
  002af: je     0x2eb
  002b5: xorps  xmm4,xmm4
  002b8: movabs rax,0x8000000000000002
  002c2: cmp    rdi,rax
  002c5: je     0x2fd
  002cb: mov    rax,rdi
  002ce: sar    rax,0x3f
  002d2: add    rax,0x2
  002d6: and    rdi,0xfffffffffffffffc
  002da: or     rdi,rax
  002dd: rol    rdi,0x3d
  002e1: movq   xmm4,rdi
  002e6: jmp    0x2fd
  002eb: call   0xfffef5a6
  002f0: test   rax,rax
  002f3: je     0x3430b
  002f9: movq   xmm4,xmm0
  002fd: mulsd  xmm3,xmm4
:00010 %3 = %3 - %4                         [Float][Float]
  00301: subsd  xmm2,xmm3
:00011 %4 = @z: Vec[IvarId(2)]
  00305: mov    rdi,QWORD PTR [r14-0x30]
  00309: mov    rax,QWORD PTR [rdi+0x20]
  0030d: mov    QWORD PTR [r14-0x50],rax
:00012 %5 = %1.call x()                     [Vec]
  00311: mov    rdi,QWORD PTR [r14-0x38]
  00315: test   rdi,0x7
  0031c: jne    0x34327
  00322: cmp    DWORD PTR [rdi+0x4],0x2b
  00326: jne    0x34327
  0032c: cmp    DWORD PTR [rip+0xffffffffffff3919],0x26        # 0xffff3c4c
  00333: jne    0x34327
  00339: mov    esi,DWORD PTR [rip+0x676]        # 0x9b5
  0033f: cmp    esi,0xffffffff
  00342: je     0x34343
  00348: cmp    WORD PTR [rdi+0x2],0x3
  0034d: jne    0x366
  00353: cmp    esi,0x6
  00356: jge    0x366
  0035c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00361: jmp    0x384
  00366: sub    rsp,0x10
  0036a: movq   QWORD PTR [rsp],xmm2
  0036f: movabs rax,0x5592e6dd3800
  00379: call   rax
  0037b: movq   xmm2,QWORD PTR [rsp]
  00380: add    rsp,0x10
  00384: mov    QWORD PTR [r14-0x58],rax
:00013 
:00014 %4 = %4 * %5                         [Float][Float]
  00388: mov    rdi,QWORD PTR [r14-0x50]
  0038c: test   rdi,0x1
  00393: jne    0x3437e
  00399: test   rdi,0x2
  003a0: je     0x3dc
  003a6: xorps  xmm3,xmm3
  003a9: movabs rax,0x8000000000000002
  003b3: cmp    rdi,rax
  003b6: je     0x3ee
  003bc: mov    rax,rdi
  003bf: sar    rax,0x3f
  003c3: add    rax,0x2
  003c7: and    rdi,0xfffffffffffffffc
  003cb: or     rdi,rax
  003ce: rol    rdi,0x3d
  003d2: movq   xmm3,rdi
  003d7: jmp    0x3ee
  003dc: call   0xfffef5a6
  003e1: test   rax,rax
  003e4: je     0x3437e
  003ea: movq   xmm3,xmm0
  003ee: mov    rdi,QWORD PTR [r14-0x58]
  003f2: test   rdi,0x1
  003f9: jne    0x3439a
  003ff: test   rdi,0x2
  00406: je     0x442
  0040c: xorps  xmm4,xmm4
  0040f: movabs rax,0x8000000000000002
  00419: cmp    rdi,rax
  0041c: je     0x454
  00422: mov    rax,rdi
  00425: sar    rax,0x3f
  00429: add    rax,0x2
  0042d: and    rdi,0xfffffffffffffffc
  00431: or     rdi,rax
  00434: rol    rdi,0x3d
  00438: movq   xmm4,rdi
  0043d: jmp    0x454
  00442: call   0xfffef5a6
  00447: test   rax,rax
  0044a: je     0x3439a
  00450: movq   xmm4,xmm0
  00454: mulsd  xmm3,xmm4
:00015 %5 = @x: Vec[IvarId(0)]
  00458: mov    rdi,QWORD PTR [r14-0x30]
  0045c: mov    rax,QWORD PTR [rdi+0x10]
  00460: mov    QWORD PTR [r14-0x58],rax
:00016 %6 = %1.call z()                     [Vec]
  00464: mov    rdi,QWORD PTR [r14-0x38]
  00468: test   rdi,0x7
  0046f: jne    0x343b6
  00475: cmp    DWORD PTR [rdi+0x4],0x2b
  00479: jne    0x343b6
  0047f: cmp    DWORD PTR [rip+0xffffffffffff37c6],0x26        # 0xffff3c4c
  00486: jne    0x343b6
  0048c: mov    esi,DWORD PTR [rip+0x52b]        # 0x9bd
  00492: cmp    esi,0xffffffff
  00495: je     0x343df
  0049b: cmp    WORD PTR [rdi+0x2],0x3
  004a0: jne    0x4b9
  004a6: cmp    esi,0x6
  004a9: jge    0x4b9
  004af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004b4: jmp    0x4e3
  004b9: sub    rsp,0x10
  004bd: movq   QWORD PTR [rsp],xmm2
  004c2: movq   QWORD PTR [rsp+0x8],xmm3
  004c8: movabs rax,0x5592e6dd3800
  004d2: call   rax
  004d4: movq   xmm2,QWORD PTR [rsp]
  004d9: movq   xmm3,QWORD PTR [rsp+0x8]
  004df: add    rsp,0x10
  004e3: mov    QWORD PTR [r14-0x60],rax
:00017 
:00018 %5 = %5 * %6                         [Float][Float]
  004e7: mov    rdi,QWORD PTR [r14-0x58]
  004eb: test   rdi,0x1
  004f2: jne    0x34426
  004f8: test   rdi,0x2
  004ff: je     0x53b
  00505: xorps  xmm4,xmm4
  00508: movabs rax,0x8000000000000002
  00512: cmp    rdi,rax
  00515: je     0x54d
  0051b: mov    rax,rdi
  0051e: sar    rax,0x3f
  00522: add    rax,0x2
  00526: and    rdi,0xfffffffffffffffc
  0052a: or     rdi,rax
  0052d: rol    rdi,0x3d
  00531: movq   xmm4,rdi
  00536: jmp    0x54d
  0053b: call   0xfffef5a6
  00540: test   rax,rax
  00543: je     0x34426
  00549: movq   xmm4,xmm0
  0054d: mov    rdi,QWORD PTR [r14-0x60]
  00551: test   rdi,0x1
  00558: jne    0x3444f
  0055e: test   rdi,0x2
  00565: je     0x5a1
  0056b: xorps  xmm5,xmm5
  0056e: movabs rax,0x8000000000000002
  00578: cmp    rdi,rax
  0057b: je     0x5b3
  00581: mov    rax,rdi
  00584: sar    rax,0x3f
  00588: add    rax,0x2
  0058c: and    rdi,0xfffffffffffffffc
  00590: or     rdi,rax
  00593: rol    rdi,0x3d
  00597: movq   xmm5,rdi
  0059c: jmp    0x5b3
  005a1: call   0xfffef5a6
  005a6: test   rax,rax
  005a9: je     0x3444f
  005af: movq   xmm5,xmm0
  005b3: mulsd  xmm4,xmm5
:00019 %4 = %4 - %5                         [Float][Float]
  005b7: subsd  xmm3,xmm4
:00020 %5 = @x: Vec[IvarId(0)]
  005bb: mov    rdi,QWORD PTR [r14-0x30]
  005bf: mov    rax,QWORD PTR [rdi+0x10]
  005c3: mov    QWORD PTR [r14-0x58],rax
:00021 %6 = %1.call y()                     [Vec]
  005c7: mov    rdi,QWORD PTR [r14-0x38]
  005cb: test   rdi,0x7
  005d2: jne    0x34478
  005d8: cmp    DWORD PTR [rdi+0x4],0x2b
  005dc: jne    0x34478
  005e2: cmp    DWORD PTR [rip+0xffffffffffff3663],0x26        # 0xffff3c4c
  005e9: jne    0x34478
  005ef: mov    esi,DWORD PTR [rip+0x3d0]        # 0x9c5
  005f5: cmp    esi,0xffffffff
  005f8: je     0x344a1
  005fe: cmp    WORD PTR [rdi+0x2],0x3
  00603: jne    0x61c
  00609: cmp    esi,0x6
  0060c: jge    0x61c
  00612: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00617: jmp    0x646
  0061c: sub    rsp,0x10
  00620: movq   QWORD PTR [rsp],xmm2
  00625: movq   QWORD PTR [rsp+0x8],xmm3
  0062b: movabs rax,0x5592e6dd3800
  00635: call   rax
  00637: movq   xmm2,QWORD PTR [rsp]
  0063c: movq   xmm3,QWORD PTR [rsp+0x8]
  00642: add    rsp,0x10
  00646: mov    QWORD PTR [r14-0x60],rax
:00022 
:00023 %5 = %5 * %6                         [Float][Float]
  0064a: mov    rdi,QWORD PTR [r14-0x58]
  0064e: test   rdi,0x1
  00655: jne    0x344e8
  0065b: test   rdi,0x2
  00662: je     0x69e
  00668: xorps  xmm4,xmm4
  0066b: movabs rax,0x8000000000000002
  00675: cmp    rdi,rax
  00678: je     0x6b0
  0067e: mov    rax,rdi
  00681: sar    rax,0x3f
  00685: add    rax,0x2
  00689: and    rdi,0xfffffffffffffffc
  0068d: or     rdi,rax
  00690: rol    rdi,0x3d
  00694: movq   xmm4,rdi
  00699: jmp    0x6b0
  0069e: call   0xfffef5a6
  006a3: test   rax,rax
  006a6: je     0x344e8
  006ac: movq   xmm4,xmm0
  006b0: mov    rdi,QWORD PTR [r14-0x60]
  006b4: test   rdi,0x1
  006bb: jne    0x34511
  006c1: test   rdi,0x2
  006c8: je     0x704
  006ce: xorps  xmm5,xmm5
  006d1: movabs rax,0x8000000000000002
  006db: cmp    rdi,rax
  006de: je     0x716
  006e4: mov    rax,rdi
  006e7: sar    rax,0x3f
  006eb: add    rax,0x2
  006ef: and    rdi,0xfffffffffffffffc
  006f3: or     rdi,rax
  006f6: rol    rdi,0x3d
  006fa: movq   xmm5,rdi
  006ff: jmp    0x716
  00704: call   0xfffef5a6
  00709: test   rax,rax
  0070c: je     0x34511
  00712: movq   xmm5,xmm0
  00716: mulsd  xmm4,xmm5
:00024 %6 = @y: Vec[IvarId(1)]
  0071a: mov    rdi,QWORD PTR [r14-0x30]
  0071e: mov    rax,QWORD PTR [rdi+0x18]
  00722: mov    QWORD PTR [r14-0x60],rax
:00025 %7 = %1.call x()                     [Vec]
  00726: mov    rdi,QWORD PTR [r14-0x38]
  0072a: test   rdi,0x7
  00731: jne    0x3453a
  00737: cmp    DWORD PTR [rdi+0x4],0x2b
  0073b: jne    0x3453a
  00741: cmp    DWORD PTR [rip+0xffffffffffff3504],0x26        # 0xffff3c4c
  00748: jne    0x3453a
  0074e: mov    esi,DWORD PTR [rip+0x279]        # 0x9cd
  00754: cmp    esi,0xffffffff
  00757: je     0x34570
  0075d: cmp    WORD PTR [rdi+0x2],0x3
  00762: jne    0x77b
  00768: cmp    esi,0x6
  0076b: jge    0x77b
  00771: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00776: jmp    0x7b1
  0077b: sub    rsp,0x20
  0077f: movq   QWORD PTR [rsp],xmm2
  00784: movq   QWORD PTR [rsp+0x8],xmm3
  0078a: movq   QWORD PTR [rsp+0x10],xmm4
  00790: movabs rax,0x5592e6dd3800
  0079a: call   rax
  0079c: movq   xmm2,QWORD PTR [rsp]
  007a1: movq   xmm3,QWORD PTR [rsp+0x8]
  007a7: movq   xmm4,QWORD PTR [rsp+0x10]
  007ad: add    rsp,0x20
  007b1: mov    QWORD PTR [r14-0x68],rax
:00026 
:00027 %6 = %6 * %7                         [Float][Float]
  007b5: mov    rdi,QWORD PTR [r14-0x60]
  007b9: test   rdi,0x1
  007c0: jne    0x345c3
  007c6: test   rdi,0x2
  007cd: je     0x809
  007d3: xorps  xmm5,xmm5
  007d6: movabs rax,0x8000000000000002
  007e0: cmp    rdi,rax
  007e3: je     0x81b
  007e9: mov    rax,rdi
  007ec: sar    rax,0x3f
  007f0: add    rax,0x2
  007f4: and    rdi,0xfffffffffffffffc
  007f8: or     rdi,rax
  007fb: rol    rdi,0x3d
  007ff: movq   xmm5,rdi
  00804: jmp    0x81b
  00809: call   0xfffef5a6
  0080e: test   rax,rax
  00811: je     0x345c3
  00817: movq   xmm5,xmm0
  0081b: mov    rdi,QWORD PTR [r14-0x68]
  0081f: test   rdi,0x1
  00826: jne    0x345f9
  0082c: test   rdi,0x2
  00833: je     0x86f
  00839: xorps  xmm6,xmm6
  0083c: movabs rax,0x8000000000000002
  00846: cmp    rdi,rax
  00849: je     0x881
  0084f: mov    rax,rdi
  00852: sar    rax,0x3f
  00856: add    rax,0x2
  0085a: and    rdi,0xfffffffffffffffc
  0085e: or     rdi,rax
  00861: rol    rdi,0x3d
  00865: movq   xmm6,rdi
  0086a: jmp    0x881
  0086f: call   0xfffef5a6
  00874: test   rax,rax
  00877: je     0x345f9
  0087d: movq   xmm6,xmm0
  00881: mulsd  xmm5,xmm6
:00028 %5 = %5 - %6                         [Float][Float]
  00885: subsd  xmm4,xmm5
:00029 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  00889: movq   xmm0,xmm2
  0088d: call   0xfffef6ca
  00892: mov    QWORD PTR [r14-0x48],rax
  00896: movq   xmm0,xmm3
  0089a: call   0xfffef6ca
  0089f: mov    QWORD PTR [r14-0x50],rax
  008a3: movq   xmm0,xmm4
  008a7: call   0xfffef6ca
  008ac: mov    QWORD PTR [r14-0x58],rax
  008b0: mov    rdi,QWORD PTR [r14-0x40]
  008b4: test   rdi,0x7
  008bb: jne    0x3462f
  008c1: cmp    DWORD PTR [rdi+0x4],0x2c
  008c5: jne    0x3462f
  008cb: cmp    DWORD PTR [rip+0xffffffffffff337a],0x26        # 0xffff3c4c
  008d2: jne    0x3462f
  008d8: mov    r9,0x0
  008df: sub    rsp,0x30
  008e3: movq   QWORD PTR [rsp],xmm2
  008e8: movq   QWORD PTR [rsp+0x8],xmm3
  008ee: movq   QWORD PTR [rsp+0x10],xmm4
  008f4: movq   QWORD PTR [rsp+0x18],xmm5
  008fa: movq   QWORD PTR [rsp+0x20],xmm6
  00900: mov    rdx,rdi
  00903: mov    QWORD PTR [rsp-0x40],rcx
  00908: mov    QWORD PTR [rsp-0x28],0x0
  00911: lea    rcx,[r14-0x48]
  00915: mov    r8,0x3
  0091c: mov    rsi,QWORD PTR [rbx]
  0091f: mov    QWORD PTR [rsp-0x18],rsi
  00924: lea    rsi,[rsp-0x18]
  00929: mov    QWORD PTR [rbx],rsi
  0092c: lea    r14,[rsp-0x10]
  00931: mov    QWORD PTR [rsp-0x20],r14
  00936: call   0x3464b
  0093b: lea    r14,[rbp-0x8]
  0093f: mov    QWORD PTR [rbx],r14
  00942: mov    r14,QWORD PTR [rbp-0x10]
  00946: movq   xmm2,QWORD PTR [rsp]
  0094b: movq   xmm3,QWORD PTR [rsp+0x8]
  00951: movq   xmm4,QWORD PTR [rsp+0x10]
  00957: movq   xmm5,QWORD PTR [rsp+0x18]
  0095d: movq   xmm6,QWORD PTR [rsp+0x20]
  00963: add    rsp,0x30
  00967: test   rax,rax
  0096a: je     0x3467d
  00970: mov    QWORD PTR [r14-0x40],rax
:00030 
:00031 ret %2
  00974: mov    rax,QWORD PTR [r14-0x40]
  00978: leave  
  00979: ret    
==> start whole compile: intersect FuncId(100) self_class:Plane start:[00000] bytecode:0x5592e73e8da0
<== finished compile. elapsed:153µs
offset:Pos(70824) code: 5219 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x33cbb
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x33cca
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x33cca
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x33cd9
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x33cd9
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffff31e1],0x26        # 0xffff327b
  0009a:    	jne    0x33cd9
  000a0: 00 	cmp    DWORD PTR [rip+0xffffffffffff31d8],0x0        # 0xffff327f
  000a7:    	je     0xbf
  000ad:    	mov    rdi,r12
  000b0:    	mov    rsi,QWORD PTR [rbx]
  000b3: 92 	movabs rax,0x5592e6e3ca90
  000bd:    	call   rax
  000bf: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000c8:    	mov    rax,QWORD PTR [r14-0x68]
  000cc:    	mov    QWORD PTR [rsp-0x40],rax
  000d1: 00 	mov    rdi,0x1
  000d8:    	mov    rax,QWORD PTR [r14-0x70]
  000dc:    	mov    QWORD PTR [rsp-0x48],rax
  000e1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000ea: 05 	movabs rax,0x100050000005e
  000f4:    	mov    QWORD PTR [rsp-0x30],rax
  000f9: 92 	movabs r13,0x5592e73e6700
  00103:    	mov    rsi,QWORD PTR [rbx]
  00106:    	mov    QWORD PTR [rsp-0x18],rsi
  0010b:    	lea    rsi,[rsp-0x18]
  00110:    	mov    QWORD PTR [rbx],rsi
  00113:    	lea    r14,[rsp-0x10]
  00118:    	mov    QWORD PTR [rsp-0x20],r14
  0011d:    	call   0xffff3f50
  00122:    	lea    r14,[rbp-0x8]
  00126:    	mov    QWORD PTR [rbx],r14
  00129:    	mov    r14,QWORD PTR [rbp-0x10]
  0012d:    	test   rax,rax
  00130:    	je     0x33ce8
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x33cf7
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xfffeebd5
  00193:    	test   rax,rax
  00196:    	je     0x33cf7
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x12c1]        # 0x1468
:00006 %7 = %1.call dir()                   [Ray]
  001a7:    	movq   xmm0,xmm2
  001ab:    	call   0xfffeecf9
  001b0:    	mov    QWORD PTR [r14-0x48],rax
  001b4:    	mov    rdi,QWORD PTR [r14-0x38]
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x33d06
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x31
  001c9:    	jne    0x33d06
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffff30a5],0x26        # 0xffff327b
  001d6:    	jne    0x33d06
  001dc:    	mov    esi,DWORD PTR [rip+0x1292]        # 0x1474
  001e2:    	cmp    esi,0xffffffff
  001e5:    	je     0x33d15
  001eb:    	cmp    WORD PTR [rdi+0x2],0x3
  001f0:    	jne    0x209
  001f6:    	cmp    esi,0x6
  001f9:    	jge    0x209
  001ff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00204:    	jmp    0x215
  00209: 92 	movabs rax,0x5592e6dd3800
  00213:    	call   rax
  00215:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00219:    	mov    rdi,QWORD PTR [r14-0x30]
  0021d:    	mov    rax,QWORD PTR [rdi+0x18]
  00221:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  00225:    	mov    rdi,QWORD PTR [r14-0x68]
  00229: 00 	test   rdi,0x7
  00230:    	jne    0x33d3e
  00236:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0023a:    	jne    0x33d3e
  00240: 26 	cmp    DWORD PTR [rip+0xffffffffffff3034],0x26        # 0xffff327b
  00247:    	jne    0x33d3e
  0024d: 00 	cmp    DWORD PTR [rip+0xffffffffffff302b],0x0        # 0xffff327f
  00254:    	je     0x26c
  0025a:    	mov    rdi,r12
  0025d:    	mov    rsi,QWORD PTR [rbx]
  00260: 92 	movabs rax,0x5592e6e3ca90
  0026a:    	call   rax
  0026c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00275:    	mov    rax,QWORD PTR [r14-0x68]
  00279:    	mov    QWORD PTR [rsp-0x40],rax
  0027e: 00 	mov    rdi,0x1
  00285:    	mov    rax,QWORD PTR [r14-0x70]
  00289:    	mov    QWORD PTR [rsp-0x48],rax
  0028e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00297: 05 	movabs rax,0x100050000005e
  002a1:    	mov    QWORD PTR [rsp-0x30],rax
  002a6: 92 	movabs r13,0x5592e73e6700
  002b0:    	mov    rsi,QWORD PTR [rbx]
  002b3:    	mov    QWORD PTR [rsp-0x18],rsi
  002b8:    	lea    rsi,[rsp-0x18]
  002bd:    	mov    QWORD PTR [rbx],rsi
  002c0:    	lea    r14,[rsp-0x10]
  002c5:    	mov    QWORD PTR [rsp-0x20],r14
  002ca:    	call   0xffff3f50
  002cf:    	lea    r14,[rbp-0x8]
  002d3:    	mov    QWORD PTR [rbx],r14
  002d6:    	mov    r14,QWORD PTR [rbp-0x10]
  002da:    	test   rax,rax
  002dd:    	je     0x33d4d
  002e3:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002e7:    	mov    rax,QWORD PTR [r14-0x50]
  002eb:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  002ef: 00 	movq   xmm2,QWORD PTR [rip+0x1181]        # 0x1478
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
  00305:    	mov    rdi,QWORD PTR [r14-0x50]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x33d5c
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm3,xmm3
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm3,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xfffeebd5
  0035e:    	test   rax,rax
  00361:    	je     0x33d5c
  00367:    	movq   xmm3,xmm0
  0036b:    	ucomisd xmm3,xmm2
  0036f:    	jae    0x33d6b
:00014 condnotbr _%7 =>:00018
:00015 %5 = %4
:00016 %5 = neg %5                          [Float]
  00375:    	movq   xmm2,xmm3
  00379: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1108]        # 0x1488
:00017 br =>:00018
  00380:    	jmp    0x33d84
:00018 %7 = literal[1e-17]
  00385: 00 	movq   xmm2,QWORD PTR [rip+0x110b]        # 0x1498
  0038d: aa 	movabs rax,0xe33877aa3236a4ba
  00397:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
  0039b:    	mov    rdi,QWORD PTR [r14-0x58]
  0039f: 00 	test   rdi,0x1
  003a6:    	jne    0x33daa
  003ac: 00 	test   rdi,0x2
  003b3:    	je     0x3ef
  003b9:    	xorps  xmm4,xmm4
  003bc: 00 	movabs rax,0x8000000000000002
  003c6:    	cmp    rdi,rax
  003c9:    	je     0x401
  003cf:    	mov    rax,rdi
  003d2:    	sar    rax,0x3f
  003d6:    	add    rax,0x2
  003da:    	and    rdi,0xfffffffffffffffc
  003de:    	or     rdi,rax
  003e1:    	rol    rdi,0x3d
  003e5:    	movq   xmm4,rdi
  003ea:    	jmp    0x401
  003ef:    	call   0xfffeebd5
  003f4:    	test   rax,rax
  003f7:    	je     0x33daa
  003fd:    	movq   xmm4,xmm0
  00401:    	ucomisd xmm4,xmm2
  00405:    	jae    0x419
:00020 condnotbr _%7 =>:00024
:00021 %7 = nil
  0040b: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  00413:    	mov    rax,QWORD PTR [r14-0x68]
  00417:    	leave  
  00418:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  00419:    	mov    rdi,QWORD PTR [r14-0x38]
  0041d: 00 	test   rdi,0x7
  00424:    	jne    0x33db9
  0042a:    	cmp    DWORD PTR [rdi+0x4],0x31
  0042e:    	jne    0x33db9
  00434: 26 	cmp    DWORD PTR [rip+0xffffffffffff2e40],0x26        # 0xffff327b
  0043b:    	jne    0x33db9
  00441:    	mov    esi,DWORD PTR [rip+0x105d]        # 0x14a4
  00447:    	cmp    esi,0xffffffff
  0044a:    	je     0x33dc8
  00450:    	cmp    WORD PTR [rdi+0x2],0x3
  00455:    	jne    0x46e
  0045b:    	cmp    esi,0x6
  0045e:    	jge    0x46e
  00464:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00469:    	jmp    0x47a
  0046e: 92 	movabs rax,0x5592e6dd3800
  00478:    	call   rax
  0047a:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  0047e:    	mov    rdi,QWORD PTR [r14-0x30]
  00482:    	mov    rax,QWORD PTR [rdi+0x18]
  00486:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  0048a:    	mov    rdi,QWORD PTR [r14-0x68]
  0048e: 00 	test   rdi,0x7
  00495:    	jne    0x33df1
  0049b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0049f:    	jne    0x33df1
  004a5: 26 	cmp    DWORD PTR [rip+0xffffffffffff2dcf],0x26        # 0xffff327b
  004ac:    	jne    0x33df1
  004b2: 00 	cmp    DWORD PTR [rip+0xffffffffffff2dc6],0x0        # 0xffff327f
  004b9:    	je     0x4d1
  004bf:    	mov    rdi,r12
  004c2:    	mov    rsi,QWORD PTR [rbx]
  004c5: 92 	movabs rax,0x5592e6e3ca90
  004cf:    	call   rax
  004d1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  004da:    	mov    rax,QWORD PTR [r14-0x68]
  004de:    	mov    QWORD PTR [rsp-0x40],rax
  004e3: 00 	mov    rdi,0x1
  004ea:    	mov    rax,QWORD PTR [r14-0x70]
  004ee:    	mov    QWORD PTR [rsp-0x48],rax
  004f3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  004fc: 05 	movabs rax,0x100050000005e
  00506:    	mov    QWORD PTR [rsp-0x30],rax
  0050b: 92 	movabs r13,0x5592e73e6700
  00515:    	mov    rsi,QWORD PTR [rbx]
  00518:    	mov    QWORD PTR [rsp-0x18],rsi
  0051d:    	lea    rsi,[rsp-0x18]
  00522:    	mov    QWORD PTR [rbx],rsi
  00525:    	lea    r14,[rsp-0x10]
  0052a:    	mov    QWORD PTR [rsp-0x20],r14
  0052f:    	call   0xffff3f50
  00534:    	lea    r14,[rbp-0x8]
  00538:    	mov    QWORD PTR [rbx],r14
  0053b:    	mov    r14,QWORD PTR [rbp-0x10]
  0053f:    	test   rax,rax
  00542:    	je     0x33e00
  00548:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  0054c:    	mov    rdi,QWORD PTR [r14-0x68]
  00550: 00 	test   rdi,0x1
  00557:    	jne    0x33e0f
  0055d: 00 	test   rdi,0x2
  00564:    	je     0x5a0
  0056a:    	xorps  xmm2,xmm2
  0056d: 00 	movabs rax,0x8000000000000002
  00577:    	cmp    rdi,rax
  0057a:    	je     0x5b2
  00580:    	mov    rax,rdi
  00583:    	sar    rax,0x3f
  00587:    	add    rax,0x2
  0058b:    	and    rdi,0xfffffffffffffffc
  0058f:    	or     rdi,rax
  00592:    	rol    rdi,0x3d
  00596:    	movq   xmm2,rdi
  0059b:    	jmp    0x5b2
  005a0:    	call   0xfffeebd5
  005a5:    	test   rax,rax
  005a8:    	je     0x33e0f
  005ae:    	movq   xmm2,xmm0
  005b2:    	mov    rdi,QWORD PTR [r14-0x48]
  005b6: 00 	test   rdi,0x1
  005bd:    	jne    0x33e1e
  005c3: 00 	test   rdi,0x2
  005ca:    	je     0x606
  005d0:    	xorps  xmm3,xmm3
  005d3: 00 	movabs rax,0x8000000000000002
  005dd:    	cmp    rdi,rax
  005e0:    	je     0x618
  005e6:    	mov    rax,rdi
  005e9:    	sar    rax,0x3f
  005ed:    	add    rax,0x2
  005f1:    	and    rdi,0xfffffffffffffffc
  005f5:    	or     rdi,rax
  005f8:    	rol    rdi,0x3d
  005fc:    	movq   xmm3,rdi
  00601:    	jmp    0x618
  00606:    	call   0xfffeebd5
  0060b:    	test   rax,rax
  0060e:    	je     0x33e1e
  00614:    	movq   xmm3,xmm0
  00618:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  0061c: 00 	xorps  xmm2,XMMWORD PTR [rip+0xe85]        # 0x14a8
:00031 %6 = %7 / %4                         [Float][Float]
  00623:    	mov    rdi,QWORD PTR [r14-0x50]
  00627: 00 	test   rdi,0x1
  0062e:    	jne    0x33e2d
  00634: 00 	test   rdi,0x2
  0063b:    	je     0x677
  00641:    	xorps  xmm4,xmm4
  00644: 00 	movabs rax,0x8000000000000002
  0064e:    	cmp    rdi,rax
  00651:    	je     0x689
  00657:    	mov    rax,rdi
  0065a:    	sar    rax,0x3f
  0065e:    	add    rax,0x2
  00662:    	and    rdi,0xfffffffffffffffc
  00666:    	or     rdi,rax
  00669:    	rol    rdi,0x3d
  0066d:    	movq   xmm4,rdi
  00672:    	jmp    0x689
  00677:    	call   0xfffeebd5
  0067c:    	test   rax,rax
  0067f:    	je     0x33e2d
  00685:    	movq   xmm4,xmm0
  00689:    	movq   xmm5,xmm2
  0068d:    	movq   rax,xmm4
  00692:    	test   rax,rax
  00695:    	je     0xfffeeba1
  0069b:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  0069f: 00 	movq   xmm2,QWORD PTR [rip+0xe11]        # 0x14b8
  006a7: 00 	movabs rax,0x8000000000000002
  006b1:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
  006b5:    	ucomisd xmm5,xmm2
  006b9:    	jbe    0x345ea
:00034 condnotbr _%7 =>:00083
:00035 %7 = %2.call t()                     [Isect]
  006bf:    	movq   xmm0,xmm5
  006c3:    	call   0xfffeecf9
  006c8:    	mov    QWORD PTR [r14-0x60],rax
  006cc:    	mov    rdi,QWORD PTR [r14-0x40]
  006d0: 00 	test   rdi,0x7
  006d7:    	jne    0x33e49
  006dd:    	cmp    DWORD PTR [rdi+0x4],0x33
  006e1:    	jne    0x33e49
  006e7: 26 	cmp    DWORD PTR [rip+0xffffffffffff2b8d],0x26        # 0xffff327b
  006ee:    	jne    0x33e49
  006f4:    	mov    esi,DWORD PTR [rip+0xdca]        # 0x14c4
  006fa:    	cmp    esi,0xffffffff
  006fd:    	je     0x33e58
  00703:    	cmp    WORD PTR [rdi+0x2],0x3
  00708:    	jne    0x721
  0070e:    	cmp    esi,0x6
  00711:    	jge    0x721
  00717:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0071c:    	jmp    0x72d
  00721: 92 	movabs rax,0x5592e6dd3800
  0072b:    	call   rax
  0072d:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [Float][Float]
  00731:    	mov    rdi,QWORD PTR [r14-0x60]
  00735: 00 	test   rdi,0x1
  0073c:    	jne    0x33e81
  00742: 00 	test   rdi,0x2
  00749:    	je     0x785
  0074f:    	xorps  xmm2,xmm2
  00752: 00 	movabs rax,0x8000000000000002
  0075c:    	cmp    rdi,rax
  0075f:    	je     0x797
  00765:    	mov    rax,rdi
  00768:    	sar    rax,0x3f
  0076c:    	add    rax,0x2
  00770:    	and    rdi,0xfffffffffffffffc
  00774:    	or     rdi,rax
  00777:    	rol    rdi,0x3d
  0077b:    	movq   xmm2,rdi
  00780:    	jmp    0x797
  00785:    	call   0xfffeebd5
  0078a:    	test   rax,rax
  0078d:    	je     0x33e81
  00793:    	movq   xmm2,xmm0
  00797:    	mov    rdi,QWORD PTR [r14-0x68]
  0079b: 00 	test   rdi,0x1
  007a2:    	jne    0x33e90
  007a8: 00 	test   rdi,0x2
  007af:    	je     0x7eb
  007b5:    	xorps  xmm3,xmm3
  007b8: 00 	movabs rax,0x8000000000000002
  007c2:    	cmp    rdi,rax
  007c5:    	je     0x7fd
  007cb:    	mov    rax,rdi
  007ce:    	sar    rax,0x3f
  007d2:    	add    rax,0x2
  007d6:    	and    rdi,0xfffffffffffffffc
  007da:    	or     rdi,rax
  007dd:    	rol    rdi,0x3d
  007e1:    	movq   xmm3,rdi
  007e6:    	jmp    0x7fd
  007eb:    	call   0xfffeebd5
  007f0:    	test   rax,rax
  007f3:    	je     0x33e90
  007f9:    	movq   xmm3,xmm0
  007fd:    	ucomisd xmm2,xmm3
  00801:    	jae    0x34610
:00038 condnotbr _%7 =>:00083
:00039 %7 = literal[true]
  00807: 00 	mov    rax,0x1c
  0080e:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [Isect]
  00812:    	mov    rdi,QWORD PTR [r14-0x40]
  00816: 00 	test   rdi,0x7
  0081d:    	jne    0x33e9f
  00823:    	cmp    DWORD PTR [rdi+0x4],0x33
  00827:    	jne    0x33e9f
  0082d: 26 	cmp    DWORD PTR [rip+0xffffffffffff2a47],0x26        # 0xffff327b
  00834:    	jne    0x33e9f
  0083a:    	mov    esi,DWORD PTR [rip+0xc8c]        # 0x14cc
  00840:    	cmp    esi,0xffffffff
  00843:    	je     0x33ebd
  00849:    	cmp    WORD PTR [rdi+0x2],0x3
  0084e:    	jne    0x86b
  00854:    	cmp    esi,0x6
  00857:    	jge    0x86b
  0085d:    	mov    rax,QWORD PTR [r14-0x68]
  00861:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00866:    	jmp    0x884
  0086b:    	mov    rdx,QWORD PTR [r14-0x68]
  0086f: 92 	movabs rax,0x5592e6dd3a80
  00879:    	call   rax
  0087b:    	test   rax,rax
  0087e:    	je     0x33eae
:00041 
:00042 _ = %2.call t=(%6; 1)                [Isect]
  00884:    	mov    rdi,QWORD PTR [r14-0x40]
  00888: 00 	test   rdi,0x7
  0088f:    	jne    0x33eed
  00895:    	cmp    DWORD PTR [rdi+0x4],0x33
  00899:    	jne    0x33eed
  0089f: 26 	cmp    DWORD PTR [rip+0xffffffffffff29d5],0x26        # 0xffff327b
  008a6:    	jne    0x33eed
  008ac:    	mov    esi,DWORD PTR [rip+0xc22]        # 0x14d4
  008b2:    	cmp    esi,0xffffffff
  008b5:    	je     0x33f0b
  008bb:    	cmp    WORD PTR [rdi+0x2],0x3
  008c0:    	jne    0x8dd
  008c6:    	cmp    esi,0x6
  008c9:    	jge    0x8dd
  008cf:    	mov    rax,QWORD PTR [r14-0x60]
  008d3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  008d8:    	jmp    0x8f6
  008dd:    	mov    rdx,QWORD PTR [r14-0x60]
  008e1: 92 	movabs rax,0x5592e6dd3a80
  008eb:    	call   rax
  008ed:    	test   rax,rax
  008f0:    	je     0x33efc
:00043 
:00044 %7 = @n: Plane[IvarId(1)]
  008f6:    	mov    rdi,QWORD PTR [r14-0x30]
  008fa:    	mov    rax,QWORD PTR [rdi+0x18]
  008fe:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [Isect]
  00902:    	mov    rdi,QWORD PTR [r14-0x40]
  00906: 00 	test   rdi,0x7
  0090d:    	jne    0x33f3b
  00913:    	cmp    DWORD PTR [rdi+0x4],0x33
  00917:    	jne    0x33f3b
  0091d: 26 	cmp    DWORD PTR [rip+0xffffffffffff2957],0x26        # 0xffff327b
  00924:    	jne    0x33f3b
  0092a:    	mov    esi,DWORD PTR [rip+0xbac]        # 0x14dc
  00930:    	cmp    esi,0xffffffff
  00933:    	je     0x33f59
  00939:    	cmp    WORD PTR [rdi+0x2],0x3
  0093e:    	jne    0x95b
  00944:    	cmp    esi,0x6
  00947:    	jge    0x95b
  0094d:    	mov    rax,QWORD PTR [r14-0x68]
  00951:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00956:    	jmp    0x974
  0095b:    	mov    rdx,QWORD PTR [r14-0x68]
  0095f: 92 	movabs rax,0x5592e6dd3a80
  00969:    	call   rax
  0096b:    	test   rax,rax
  0096e:    	je     0x33f4a
:00046 
:00047 %7 = const[Vec]                      [Vec]
  00974: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff290d]        # 0xffff3288
  0097b: 00 	cmp    rax,QWORD PTR [rip+0xb76]        # 0x14f8
  00982:    	jne    0x33f89
  00988: 00 	mov    rax,QWORD PTR [rip+0xb59]        # 0x14e8
  0098f:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [Ray]
  00993:    	mov    rdi,QWORD PTR [r14-0x38]
  00997: 00 	test   rdi,0x7
  0099e:    	jne    0x33fd4
  009a4:    	cmp    DWORD PTR [rdi+0x4],0x31
  009a8:    	jne    0x33fd4
  009ae: 26 	cmp    DWORD PTR [rip+0xffffffffffff28c6],0x26        # 0xffff327b
  009b5:    	jne    0x33fd4
  009bb:    	mov    esi,DWORD PTR [rip+0xb43]        # 0x1504
  009c1:    	cmp    esi,0xffffffff
  009c4:    	je     0x33fe3
  009ca:    	cmp    WORD PTR [rdi+0x2],0x3
  009cf:    	jne    0x9e8
  009d5:    	cmp    esi,0x6
  009d8:    	jge    0x9e8
  009de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009e3:    	jmp    0x9f4
  009e8: 92 	movabs rax,0x5592e6dd3800
  009f2:    	call   rax
  009f4:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [Vec]
  009f8:    	mov    rdi,QWORD PTR [r14-0x70]
  009fc: 00 	test   rdi,0x7
  00a03:    	jne    0x3400c
  00a09:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a0d:    	jne    0x3400c
  00a13: 26 	cmp    DWORD PTR [rip+0xffffffffffff2861],0x26        # 0xffff327b
  00a1a:    	jne    0x3400c
  00a20:    	mov    esi,DWORD PTR [rip+0xae6]        # 0x150c
  00a26:    	cmp    esi,0xffffffff
  00a29:    	je     0x3401b
  00a2f:    	cmp    WORD PTR [rdi+0x2],0x3
  00a34:    	jne    0xa4d
  00a3a:    	cmp    esi,0x6
  00a3d:    	jge    0xa4d
  00a43:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a48:    	jmp    0xa59
  00a4d: 92 	movabs rax,0x5592e6dd3800
  00a57:    	call   rax
  00a59:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [Ray]
  00a5d:    	mov    rdi,QWORD PTR [r14-0x38]
  00a61: 00 	test   rdi,0x7
  00a68:    	jne    0x34044
  00a6e:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a72:    	jne    0x34044
  00a78: 26 	cmp    DWORD PTR [rip+0xffffffffffff27fc],0x26        # 0xffff327b
  00a7f:    	jne    0x34044
  00a85:    	mov    esi,DWORD PTR [rip+0xa89]        # 0x1514
  00a8b:    	cmp    esi,0xffffffff
  00a8e:    	je     0x34053
  00a94:    	cmp    WORD PTR [rdi+0x2],0x3
  00a99:    	jne    0xab2
  00a9f:    	cmp    esi,0x6
  00aa2:    	jge    0xab2
  00aa8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aad:    	jmp    0xabe
  00ab2: 92 	movabs rax,0x5592e6dd3800
  00abc:    	call   rax
  00abe:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [Vec]
  00ac2:    	mov    rdi,QWORD PTR [r14-0x78]
  00ac6: 00 	test   rdi,0x7
  00acd:    	jne    0x3407c
  00ad3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ad7:    	jne    0x3407c
  00add: 26 	cmp    DWORD PTR [rip+0xffffffffffff2797],0x26        # 0xffff327b
  00ae4:    	jne    0x3407c
  00aea:    	mov    esi,DWORD PTR [rip+0xa2c]        # 0x151c
  00af0:    	cmp    esi,0xffffffff
  00af3:    	je     0x3408b
  00af9:    	cmp    WORD PTR [rdi+0x2],0x3
  00afe:    	jne    0xb17
  00b04:    	cmp    esi,0x6
  00b07:    	jge    0xb17
  00b0d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b12:    	jmp    0xb23
  00b17: 92 	movabs rax,0x5592e6dd3800
  00b21:    	call   rax
  00b23:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [Float][Float]
  00b27:    	mov    rdi,QWORD PTR [r14-0x60]
  00b2b: 00 	test   rdi,0x1
  00b32:    	jne    0x340b4
  00b38: 00 	test   rdi,0x2
  00b3f:    	je     0xb7b
  00b45:    	xorps  xmm2,xmm2
  00b48: 00 	movabs rax,0x8000000000000002
  00b52:    	cmp    rdi,rax
  00b55:    	je     0xb8d
  00b5b:    	mov    rax,rdi
  00b5e:    	sar    rax,0x3f
  00b62:    	add    rax,0x2
  00b66:    	and    rdi,0xfffffffffffffffc
  00b6a:    	or     rdi,rax
  00b6d:    	rol    rdi,0x3d
  00b71:    	movq   xmm2,rdi
  00b76:    	jmp    0xb8d
  00b7b:    	call   0xfffeebd5
  00b80:    	test   rax,rax
  00b83:    	je     0x340b4
  00b89:    	movq   xmm2,xmm0
  00b8d:    	mov    rdi,QWORD PTR [r14-0x78]
  00b91: 00 	test   rdi,0x1
  00b98:    	jne    0x340c3
  00b9e: 00 	test   rdi,0x2
  00ba5:    	je     0xbe1
  00bab:    	xorps  xmm3,xmm3
  00bae: 00 	movabs rax,0x8000000000000002
  00bb8:    	cmp    rdi,rax
  00bbb:    	je     0xbf3
  00bc1:    	mov    rax,rdi
  00bc4:    	sar    rax,0x3f
  00bc8:    	add    rax,0x2
  00bcc:    	and    rdi,0xfffffffffffffffc
  00bd0:    	or     rdi,rax
  00bd3:    	rol    rdi,0x3d
  00bd7:    	movq   xmm3,rdi
  00bdc:    	jmp    0xbf3
  00be1:    	call   0xfffeebd5
  00be6:    	test   rax,rax
  00be9:    	je     0x340c3
  00bef:    	movq   xmm3,xmm0
  00bf3:    	mulsd  xmm3,xmm2
:00057 %8 = %8 + %9                         [Float][Float]
  00bf7:    	mov    rdi,QWORD PTR [r14-0x70]
  00bfb: 00 	test   rdi,0x1
  00c02:    	jne    0x340d2
  00c08: 00 	test   rdi,0x2
  00c0f:    	je     0xc4b
  00c15:    	xorps  xmm4,xmm4
  00c18: 00 	movabs rax,0x8000000000000002
  00c22:    	cmp    rdi,rax
  00c25:    	je     0xc5d
  00c2b:    	mov    rax,rdi
  00c2e:    	sar    rax,0x3f
  00c32:    	add    rax,0x2
  00c36:    	and    rdi,0xfffffffffffffffc
  00c3a:    	or     rdi,rax
  00c3d:    	rol    rdi,0x3d
  00c41:    	movq   xmm4,rdi
  00c46:    	jmp    0xc5d
  00c4b:    	call   0xfffeebd5
  00c50:    	test   rax,rax
  00c53:    	je     0x340d2
  00c59:    	movq   xmm4,xmm0
  00c5d:    	addsd  xmm4,xmm3
:00058 %9 = %1.call org()                   [Ray]
  00c61:    	mov    rdi,QWORD PTR [r14-0x38]
  00c65: 00 	test   rdi,0x7
  00c6c:    	jne    0x340ee
  00c72:    	cmp    DWORD PTR [rdi+0x4],0x31
  00c76:    	jne    0x340ee
  00c7c: 26 	cmp    DWORD PTR [rip+0xffffffffffff25f8],0x26        # 0xffff327b
  00c83:    	jne    0x340ee
  00c89:    	mov    esi,DWORD PTR [rip+0x895]        # 0x1524
  00c8f:    	cmp    esi,0xffffffff
  00c92:    	je     0x3410a
  00c98:    	cmp    WORD PTR [rdi+0x2],0x3
  00c9d:    	jne    0xcb6
  00ca3:    	cmp    esi,0x6
  00ca6:    	jge    0xcb6
  00cac:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cb1:    	jmp    0xcd4
  00cb6:    	sub    rsp,0x10
  00cba:    	movq   QWORD PTR [rsp],xmm4
  00cbf: 92 	movabs rax,0x5592e6dd3800
  00cc9:    	call   rax
  00ccb:    	movq   xmm4,QWORD PTR [rsp]
  00cd0:    	add    rsp,0x10
  00cd4:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [Vec]
  00cd8:    	mov    rdi,QWORD PTR [r14-0x78]
  00cdc: 00 	test   rdi,0x7
  00ce3:    	jne    0x34145
  00ce9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ced:    	jne    0x34145
  00cf3: 26 	cmp    DWORD PTR [rip+0xffffffffffff2581],0x26        # 0xffff327b
  00cfa:    	jne    0x34145
  00d00:    	mov    esi,DWORD PTR [rip+0x826]        # 0x152c
  00d06:    	cmp    esi,0xffffffff
  00d09:    	je     0x34161
  00d0f:    	cmp    WORD PTR [rdi+0x2],0x3
  00d14:    	jne    0xd2d
  00d1a:    	cmp    esi,0x6
  00d1d:    	jge    0xd2d
  00d23:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d28:    	jmp    0xd4b
  00d2d:    	sub    rsp,0x10
  00d31:    	movq   QWORD PTR [rsp],xmm4
  00d36: 92 	movabs rax,0x5592e6dd3800
  00d40:    	call   rax
  00d42:    	movq   xmm4,QWORD PTR [rsp]
  00d47:    	add    rsp,0x10
  00d4b:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [Ray]
  00d4f:    	mov    rdi,QWORD PTR [r14-0x38]
  00d53: 00 	test   rdi,0x7
  00d5a:    	jne    0x3419c
  00d60:    	cmp    DWORD PTR [rdi+0x4],0x31
  00d64:    	jne    0x3419c
  00d6a: 26 	cmp    DWORD PTR [rip+0xffffffffffff250a],0x26        # 0xffff327b
  00d71:    	jne    0x3419c
  00d77:    	mov    esi,DWORD PTR [rip+0x7b7]        # 0x1534
  00d7d:    	cmp    esi,0xffffffff
  00d80:    	je     0x341b8
  00d86:    	cmp    WORD PTR [rdi+0x2],0x3
  00d8b:    	jne    0xda4
  00d91:    	cmp    esi,0x6
  00d94:    	jge    0xda4
  00d9a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d9f:    	jmp    0xdc2
  00da4:    	sub    rsp,0x10
  00da8:    	movq   QWORD PTR [rsp],xmm4
  00dad: 92 	movabs rax,0x5592e6dd3800
  00db7:    	call   rax
  00db9:    	movq   xmm4,QWORD PTR [rsp]
  00dbe:    	add    rsp,0x10
  00dc2:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [Vec]
  00dc6:    	mov    rdi,QWORD PTR [r14-0x80]
  00dca: 00 	test   rdi,0x7
  00dd1:    	jne    0x341f3
  00dd7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ddb:    	jne    0x341f3
  00de1: 26 	cmp    DWORD PTR [rip+0xffffffffffff2493],0x26        # 0xffff327b
  00de8:    	jne    0x341f3
  00dee:    	mov    esi,DWORD PTR [rip+0x748]        # 0x153c
  00df4:    	cmp    esi,0xffffffff
  00df7:    	je     0x3420f
  00dfd:    	cmp    WORD PTR [rdi+0x2],0x3
  00e02:    	jne    0xe1b
  00e08:    	cmp    esi,0x6
  00e0b:    	jge    0xe1b
  00e11:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e16:    	jmp    0xe39
  00e1b:    	sub    rsp,0x10
  00e1f:    	movq   QWORD PTR [rsp],xmm4
  00e24: 92 	movabs rax,0x5592e6dd3800
  00e2e:    	call   rax
  00e30:    	movq   xmm4,QWORD PTR [rsp]
  00e35:    	add    rsp,0x10
  00e39:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [Float][Float]
  00e3d:    	mov    rdi,QWORD PTR [r14-0x60]
  00e41: 00 	test   rdi,0x1
  00e48:    	jne    0x3424a
  00e4e: 00 	test   rdi,0x2
  00e55:    	je     0xe91
  00e5b:    	xorps  xmm2,xmm2
  00e5e: 00 	movabs rax,0x8000000000000002
  00e68:    	cmp    rdi,rax
  00e6b:    	je     0xea3
  00e71:    	mov    rax,rdi
  00e74:    	sar    rax,0x3f
  00e78:    	add    rax,0x2
  00e7c:    	and    rdi,0xfffffffffffffffc
  00e80:    	or     rdi,rax
  00e83:    	rol    rdi,0x3d
  00e87:    	movq   xmm2,rdi
  00e8c:    	jmp    0xea3
  00e91:    	call   0xfffeebd5
  00e96:    	test   rax,rax
  00e99:    	je     0x3424a
  00e9f:    	movq   xmm2,xmm0
  00ea3:    	mov    rdi,QWORD PTR [r14-0x80]
  00ea7: 00 	test   rdi,0x1
  00eae:    	jne    0x34266
  00eb4: 00 	test   rdi,0x2
  00ebb:    	je     0xef7
  00ec1:    	xorps  xmm3,xmm3
  00ec4: 00 	movabs rax,0x8000000000000002
  00ece:    	cmp    rdi,rax
  00ed1:    	je     0xf09
  00ed7:    	mov    rax,rdi
  00eda:    	sar    rax,0x3f
  00ede:    	add    rax,0x2
  00ee2:    	and    rdi,0xfffffffffffffffc
  00ee6:    	or     rdi,rax
  00ee9:    	rol    rdi,0x3d
  00eed:    	movq   xmm3,rdi
  00ef2:    	jmp    0xf09
  00ef7:    	call   0xfffeebd5
  00efc:    	test   rax,rax
  00eff:    	je     0x34266
  00f05:    	movq   xmm3,xmm0
  00f09:    	mulsd  xmm3,xmm2
:00067 %9 = %9 + %10                        [Float][Float]
  00f0d:    	mov    rdi,QWORD PTR [r14-0x78]
  00f11: 00 	test   rdi,0x1
  00f18:    	jne    0x34282
  00f1e: 00 	test   rdi,0x2
  00f25:    	je     0xf61
  00f2b:    	xorps  xmm5,xmm5
  00f2e: 00 	movabs rax,0x8000000000000002
  00f38:    	cmp    rdi,rax
  00f3b:    	je     0xf73
  00f41:    	mov    rax,rdi
  00f44:    	sar    rax,0x3f
  00f48:    	add    rax,0x2
  00f4c:    	and    rdi,0xfffffffffffffffc
  00f50:    	or     rdi,rax
  00f53:    	rol    rdi,0x3d
  00f57:    	movq   xmm5,rdi
  00f5c:    	jmp    0xf73
  00f61:    	call   0xfffeebd5
  00f66:    	test   rax,rax
  00f69:    	je     0x34282
  00f6f:    	movq   xmm5,xmm0
  00f73:    	addsd  xmm5,xmm3
:00068 %10 = %1.call org()                  [Ray]
  00f77:    	mov    rdi,QWORD PTR [r14-0x38]
  00f7b: 00 	test   rdi,0x7
  00f82:    	jne    0x342ab
  00f88:    	cmp    DWORD PTR [rdi+0x4],0x31
  00f8c:    	jne    0x342ab
  00f92: 26 	cmp    DWORD PTR [rip+0xffffffffffff22e2],0x26        # 0xffff327b
  00f99:    	jne    0x342ab
  00f9f:    	mov    esi,DWORD PTR [rip+0x59f]        # 0x1544
  00fa5:    	cmp    esi,0xffffffff
  00fa8:    	je     0x342d4
  00fae:    	cmp    WORD PTR [rdi+0x2],0x3
  00fb3:    	jne    0xfcc
  00fb9:    	cmp    esi,0x6
  00fbc:    	jge    0xfcc
  00fc2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fc7:    	jmp    0xff6
  00fcc:    	sub    rsp,0x10
  00fd0:    	movq   QWORD PTR [rsp],xmm4
  00fd5:    	movq   QWORD PTR [rsp+0x8],xmm5
  00fdb: 92 	movabs rax,0x5592e6dd3800
  00fe5:    	call   rax
  00fe7:    	movq   xmm4,QWORD PTR [rsp]
  00fec:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ff2:    	add    rsp,0x10
  00ff6:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [Vec]
  00ffa:    	mov    rdi,QWORD PTR [r14-0x80]
  00ffe: 00 	test   rdi,0x7
  01005:    	jne    0x3431b
  0100b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0100f:    	jne    0x3431b
  01015: 26 	cmp    DWORD PTR [rip+0xffffffffffff225f],0x26        # 0xffff327b
  0101c:    	jne    0x3431b
  01022:    	mov    esi,DWORD PTR [rip+0x524]        # 0x154c
  01028:    	cmp    esi,0xffffffff
  0102b:    	je     0x34344
  01031:    	cmp    WORD PTR [rdi+0x2],0x3
  01036:    	jne    0x104f
  0103c:    	cmp    esi,0x6
  0103f:    	jge    0x104f
  01045:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0104a:    	jmp    0x1079
  0104f:    	sub    rsp,0x10
  01053:    	movq   QWORD PTR [rsp],xmm4
  01058:    	movq   QWORD PTR [rsp+0x8],xmm5
  0105e: 92 	movabs rax,0x5592e6dd3800
  01068:    	call   rax
  0106a:    	movq   xmm4,QWORD PTR [rsp]
  0106f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01075:    	add    rsp,0x10
  01079:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [Ray]
  0107d:    	mov    rdi,QWORD PTR [r14-0x38]
  01081: 00 	test   rdi,0x7
  01088:    	jne    0x3438b
  0108e:    	cmp    DWORD PTR [rdi+0x4],0x31
  01092:    	jne    0x3438b
  01098: 26 	cmp    DWORD PTR [rip+0xffffffffffff21dc],0x26        # 0xffff327b
  0109f:    	jne    0x3438b
  010a5:    	mov    esi,DWORD PTR [rip+0x4a9]        # 0x1554
  010ab:    	cmp    esi,0xffffffff
  010ae:    	je     0x343b4
  010b4:    	cmp    WORD PTR [rdi+0x2],0x3
  010b9:    	jne    0x10d2
  010bf:    	cmp    esi,0x6
  010c2:    	jge    0x10d2
  010c8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010cd:    	jmp    0x10fc
  010d2:    	sub    rsp,0x10
  010d6:    	movq   QWORD PTR [rsp],xmm4
  010db:    	movq   QWORD PTR [rsp+0x8],xmm5
  010e1: 92 	movabs rax,0x5592e6dd3800
  010eb:    	call   rax
  010ed:    	movq   xmm4,QWORD PTR [rsp]
  010f2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010f8:    	add    rsp,0x10
  010fc: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [Vec]
  01103: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0110a: 00 	test   rdi,0x7
  01111:    	jne    0x343fb
  01117:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0111b:    	jne    0x343fb
  01121: 26 	cmp    DWORD PTR [rip+0xffffffffffff2153],0x26        # 0xffff327b
  01128:    	jne    0x343fb
  0112e:    	mov    esi,DWORD PTR [rip+0x428]        # 0x155c
  01134:    	cmp    esi,0xffffffff
  01137:    	je     0x34424
  0113d:    	cmp    WORD PTR [rdi+0x2],0x3
  01142:    	jne    0x115b
  01148:    	cmp    esi,0x6
  0114b:    	jge    0x115b
  01151:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01156:    	jmp    0x1185
  0115b:    	sub    rsp,0x10
  0115f:    	movq   QWORD PTR [rsp],xmm4
  01164:    	movq   QWORD PTR [rsp+0x8],xmm5
  0116a: 92 	movabs rax,0x5592e6dd3800
  01174:    	call   rax
  01176:    	movq   xmm4,QWORD PTR [rsp]
  0117b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01181:    	add    rsp,0x10
  01185: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [Float][Float]
  0118c:    	mov    rdi,QWORD PTR [r14-0x60]
  01190: 00 	test   rdi,0x1
  01197:    	jne    0x3446b
  0119d: 00 	test   rdi,0x2
  011a4:    	je     0x11e0
  011aa:    	xorps  xmm2,xmm2
  011ad: 00 	movabs rax,0x8000000000000002
  011b7:    	cmp    rdi,rax
  011ba:    	je     0x11f2
  011c0:    	mov    rax,rdi
  011c3:    	sar    rax,0x3f
  011c7:    	add    rax,0x2
  011cb:    	and    rdi,0xfffffffffffffffc
  011cf:    	or     rdi,rax
  011d2:    	rol    rdi,0x3d
  011d6:    	movq   xmm2,rdi
  011db:    	jmp    0x11f2
  011e0:    	call   0xfffeebd5
  011e5:    	test   rax,rax
  011e8:    	je     0x3446b
  011ee:    	movq   xmm2,xmm0
  011f2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  011f9: 00 	test   rdi,0x1
  01200:    	jne    0x34494
  01206: 00 	test   rdi,0x2
  0120d:    	je     0x1249
  01213:    	xorps  xmm3,xmm3
  01216: 00 	movabs rax,0x8000000000000002
  01220:    	cmp    rdi,rax
  01223:    	je     0x125b
  01229:    	mov    rax,rdi
  0122c:    	sar    rax,0x3f
  01230:    	add    rax,0x2
  01234:    	and    rdi,0xfffffffffffffffc
  01238:    	or     rdi,rax
  0123b:    	rol    rdi,0x3d
  0123f:    	movq   xmm3,rdi
  01244:    	jmp    0x125b
  01249:    	call   0xfffeebd5
  0124e:    	test   rax,rax
  01251:    	je     0x34494
  01257:    	movq   xmm3,xmm0
  0125b:    	mulsd  xmm3,xmm2
:00077 %10 = %10 + %11                      [Float][Float]
  0125f:    	mov    rdi,QWORD PTR [r14-0x80]
  01263: 00 	test   rdi,0x1
  0126a:    	jne    0x344bd
  01270: 00 	test   rdi,0x2
  01277:    	je     0x12b3
  0127d:    	xorps  xmm6,xmm6
  01280: 00 	movabs rax,0x8000000000000002
  0128a:    	cmp    rdi,rax
  0128d:    	je     0x12c5
  01293:    	mov    rax,rdi
  01296:    	sar    rax,0x3f
  0129a:    	add    rax,0x2
  0129e:    	and    rdi,0xfffffffffffffffc
  012a2:    	or     rdi,rax
  012a5:    	rol    rdi,0x3d
  012a9:    	movq   xmm6,rdi
  012ae:    	jmp    0x12c5
  012b3:    	call   0xfffeebd5
  012b8:    	test   rax,rax
  012bb:    	je     0x344bd
  012c1:    	movq   xmm6,xmm0
  012c5:    	addsd  xmm6,xmm3
:00078 %7 = %7.call new(%8; 3)              [#<Class:Vec>]
  012c9:    	movq   xmm0,xmm4
  012cd:    	call   0xfffeecf9
  012d2:    	mov    QWORD PTR [r14-0x70],rax
  012d6:    	movq   xmm0,xmm5
  012da:    	call   0xfffeecf9
  012df:    	mov    QWORD PTR [r14-0x78],rax
  012e3:    	movq   xmm0,xmm6
  012e7:    	call   0xfffeecf9
  012ec:    	mov    QWORD PTR [r14-0x80],rax
  012f0:    	mov    rdi,QWORD PTR [r14-0x68]
  012f4: 00 	test   rdi,0x7
  012fb:    	jne    0x344f6
  01301:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01305:    	jne    0x344f6
  0130b: 26 	cmp    DWORD PTR [rip+0xffffffffffff1f69],0x26        # 0xffff327b
  01312:    	jne    0x344f6
  01318: 00 	mov    r9,0x0
  0131f:    	sub    rsp,0x20
  01323:    	movq   QWORD PTR [rsp],xmm3
  01328:    	movq   QWORD PTR [rsp+0x8],xmm4
  0132e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01334:    	movq   QWORD PTR [rsp+0x18],xmm6
  0133a:    	mov    rdx,rdi
  0133d:    	mov    QWORD PTR [rsp-0x40],rcx
  01342: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0134b:    	lea    rcx,[r14-0x70]
  0134f: 00 	mov    r8,0x3
  01356:    	mov    rsi,QWORD PTR [rbx]
  01359:    	mov    QWORD PTR [rsp-0x18],rsi
  0135e:    	lea    rsi,[rsp-0x18]
  01363:    	mov    QWORD PTR [rbx],rsi
  01366:    	lea    r14,[rsp-0x10]
  0136b:    	mov    QWORD PTR [rsp-0x20],r14
  01370:    	call   0x34515
  01375:    	lea    r14,[rbp-0x8]
  01379:    	mov    QWORD PTR [rbx],r14
  0137c:    	mov    r14,QWORD PTR [rbp-0x10]
  01380:    	movq   xmm3,QWORD PTR [rsp]
  01385:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0138b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01391:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01397:    	add    rsp,0x20
  0139b:    	test   rax,rax
  0139e:    	je     0x34547
  013a4:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [Isect]
  013a8:    	mov    rdi,QWORD PTR [r14-0x40]
  013ac: 00 	test   rdi,0x7
  013b3:    	jne    0x34556
  013b9:    	cmp    DWORD PTR [rdi+0x4],0x33
  013bd:    	jne    0x34556
  013c3: 26 	cmp    DWORD PTR [rip+0xffffffffffff1eb1],0x26        # 0xffff327b
  013ca:    	jne    0x34556
  013d0:    	mov    esi,DWORD PTR [rip+0x18e]        # 0x1564
  013d6:    	cmp    esi,0xffffffff
  013d9:    	je     0x34584
  013df:    	cmp    WORD PTR [rdi+0x2],0x3
  013e4:    	jne    0x1401
  013ea:    	cmp    esi,0x6
  013ed:    	jge    0x1401
  013f3:    	mov    rax,QWORD PTR [r14-0x68]
  013f7:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013fc:    	jmp    0x1450
  01401:    	sub    rsp,0x20
  01405:    	movq   QWORD PTR [rsp],xmm3
  0140a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01410:    	movq   QWORD PTR [rsp+0x10],xmm5
  01416:    	movq   QWORD PTR [rsp+0x18],xmm6
  0141c:    	mov    rdx,QWORD PTR [r14-0x68]
  01420: 92 	movabs rax,0x5592e6dd3a80
  0142a:    	call   rax
  0142c:    	movq   xmm3,QWORD PTR [rsp]
  01431:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01437:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0143d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01443:    	add    rsp,0x20
  01447:    	test   rax,rax
  0144a:    	je     0x34575
:00081 
:00082 br =>:00083
  01450:    	jmp    0x34629
:00083 %7 = nil
  01455: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  0145d:    	mov    rax,QWORD PTR [r14-0x68]
  01461:    	leave  
  01462:    	ret    
==> start whole compile: <unnamed> FuncId(108) self_class:Scene start:[00000] bytecode:0x5592e73bb090
<== finished compile. elapsed:130.4µs
offset:Pos(76304) code: 8159 bytes  data: 409 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [r14-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x330f9
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x35
  000a7:    	jne    0x330f9
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c5b],0x26        # 0xffff1d13
  000b8:    	jne    0x33108
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0x98]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x33117
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e:    	test   rax,rax
  00111:    	je     0x33149
  00117: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00003 %2 = %13
  0011e: ff 	mov    rax,QWORD PTR [r14-0x98]
  00125:    	mov    QWORD PTR [r14-0x40],rax
:00004 %13 = literal[2.0]
  00129: 00 	movq   xmm2,QWORD PTR [rip+0x1eaf]        # 0x1fe0
  00131: 00 	mov    rax,0x2
  00138: ff 	mov    QWORD PTR [r14-0x98],rax
:00005 %14 = literal[3.14159265]
  0013f: 00 	movq   xmm3,QWORD PTR [rip+0x1ea9]        # 0x1ff0
  00147: da 	movabs rax,0x490fda9e46a78a
  00151: ff 	mov    QWORD PTR [r14-0xa0],rax
:00006 %13 = %13 * %14                      [Float][Float]
  00158:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
  0015c:    	mov    rdi,QWORD PTR [r14-0x30]
  00160: 26 	cmp    DWORD PTR [rip+0xffffffffffff1bac],0x26        # 0xffff1d13
  00167:    	jne    0x33158
  0016d: 00 	mov    r9,0x0
  00174:    	sub    rsp,0x10
  00178:    	movq   QWORD PTR [rsp],xmm2
  0017d:    	mov    rdx,rdi
  00180:    	mov    QWORD PTR [rsp-0x40],rcx
  00185: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0018e: ff 	lea    rcx,[r14-0xa0]
  00195: 00 	mov    r8,0x0
  0019c:    	mov    rsi,QWORD PTR [rbx]
  0019f:    	mov    QWORD PTR [rsp-0x18],rsi
  001a4:    	lea    rsi,[rsp-0x18]
  001a9:    	mov    QWORD PTR [rbx],rsi
  001ac:    	lea    r14,[rsp-0x10]
  001b1:    	mov    QWORD PTR [rsp-0x20],r14
  001b6:    	call   0x33177
  001bb:    	lea    r14,[rbp-0x8]
  001bf:    	mov    QWORD PTR [rbx],r14
  001c2:    	mov    r14,QWORD PTR [rbp-0x10]
  001c6:    	movq   xmm2,QWORD PTR [rsp]
  001cb:    	add    rsp,0x10
  001cf:    	test   rax,rax
  001d2:    	je     0x331a9
  001d8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 
:00009 %3 = %13 * %14                       [Float][Float]
  001df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001e6: 00 	test   rdi,0x1
  001ed:    	jne    0x331b8
  001f3: 00 	test   rdi,0x2
  001fa:    	je     0x236
  00200:    	xorps  xmm3,xmm3
  00203: 00 	movabs rax,0x8000000000000002
  0020d:    	cmp    rdi,rax
  00210:    	je     0x248
  00216:    	mov    rax,rdi
  00219:    	sar    rax,0x3f
  0021d:    	add    rax,0x2
  00221:    	and    rdi,0xfffffffffffffffc
  00225:    	or     rdi,rax
  00228:    	rol    rdi,0x3d
  0022c:    	movq   xmm3,rdi
  00231:    	jmp    0x248
  00236:    	call   0xfffed66d
  0023b:    	test   rax,rax
  0023e:    	je     0x331b8
  00244:    	movq   xmm3,xmm0
  00248:    	movq   xmm4,xmm2
  0024c:    	mulsd  xmm4,xmm3
:00010 %13 = const[Math]                    [Math]
  00250: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1ac9]        # 0xffff1d20
  00257: 00 	cmp    rax,QWORD PTR [rip+0x1db2]        # 0x2010
  0025e:    	jne    0x331d7
  00264: 00 	mov    rax,QWORD PTR [rip+0x1d95]        # 0x2000
  0026b: ff 	mov    QWORD PTR [r14-0x98],rax
:00011 %14 = %3
:00012 %13 = %13.inline MathCos(%14; 1)     [#<Class:Math>]
  00272: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00279: 00 	test   rdi,0x7
  00280:    	jne    0x33240
  00286:    	cmp    DWORD PTR [rdi+0x4],0x24
  0028a:    	jne    0x33240
  00290: 26 	cmp    DWORD PTR [rip+0xffffffffffff1a7c],0x26        # 0xffff1d13
  00297:    	jne    0x33240
  0029d:    	sub    rsp,0x10
  002a1:    	movq   QWORD PTR [rsp],xmm2
  002a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  002ac:    	movq   xmm0,xmm4
  002b0: 92 	movabs rax,0x5592e6da7170
  002ba:    	call   rax
  002bc:    	movq   xmm2,QWORD PTR [rsp]
  002c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002c7:    	add    rsp,0x10
  002cb:    	movq   xmm2,xmm0
:00013 
:00014 %14 = const[Math]                    [Math]
  002cf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1a4a]        # 0xffff1d20
  002d6: 00 	cmp    rax,QWORD PTR [rip+0x1d53]        # 0x2030
  002dd:    	jne    0x33263
  002e3: 00 	mov    rax,QWORD PTR [rip+0x1d36]        # 0x2020
  002ea: ff 	mov    QWORD PTR [r14-0xa0],rax
:00015 %15 = literal[1.0]
  002f1: 00 	movq   xmm3,QWORD PTR [rip+0x1d47]        # 0x2040
  002f9: 00 	movabs rax,0xff80000000000002
  00303: ff 	mov    QWORD PTR [r14-0xa8],rax
:00016 %15 = %15 - %2                       [Float][Float]
  0030a:    	mov    rdi,QWORD PTR [r14-0x40]
  0030e: 00 	test   rdi,0x1
  00315:    	jne    0x332cc
  0031b: 00 	test   rdi,0x2
  00322:    	je     0x35e
  00328:    	xorps  xmm5,xmm5
  0032b: 00 	movabs rax,0x8000000000000002
  00335:    	cmp    rdi,rax
  00338:    	je     0x370
  0033e:    	mov    rax,rdi
  00341:    	sar    rax,0x3f
  00345:    	add    rax,0x2
  00349:    	and    rdi,0xfffffffffffffffc
  0034d:    	or     rdi,rax
  00350:    	rol    rdi,0x3d
  00354:    	movq   xmm5,rdi
  00359:    	jmp    0x370
  0035e:    	call   0xfffed66d
  00363:    	test   rax,rax
  00366:    	je     0x332cc
  0036c:    	movq   xmm5,xmm0
  00370:    	subsd  xmm3,xmm5
:00017 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  00374: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0037b: 00 	test   rdi,0x7
  00382:    	jne    0x332f8
  00388:    	cmp    DWORD PTR [rdi+0x4],0x24
  0038c:    	jne    0x332f8
  00392: 26 	cmp    DWORD PTR [rip+0xffffffffffff197a],0x26        # 0xffff1d13
  00399:    	jne    0x332f8
  0039f:    	sqrtsd xmm6,xmm3
:00018 
:00019 %4 = %13 * %14                       [Float][Float]
  003a3:    	movq   xmm7,xmm2
  003a7:    	mulsd  xmm7,xmm6
:00020 %13 = const[Math]                    [Math]
  003ab: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff196e]        # 0xffff1d20
  003b2: 00 	cmp    rax,QWORD PTR [rip+0x1ca7]        # 0x2060
  003b9:    	jne    0x33334
  003bf: 00 	mov    rax,QWORD PTR [rip+0x1c8a]        # 0x2050
  003c6: ff 	mov    QWORD PTR [r14-0x98],rax
:00021 %14 = %3
:00022 %13 = %13.inline MathSin(%14; 1)     [#<Class:Math>]
  003cd: ff 	mov    rdi,QWORD PTR [r14-0x98]
  003d4: 00 	test   rdi,0x7
  003db:    	jne    0x333c1
  003e1:    	cmp    DWORD PTR [rdi+0x4],0x24
  003e5:    	jne    0x333c1
  003eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff1921],0x26        # 0xffff1d13
  003f2:    	jne    0x333c1
  003f8:    	sub    rsp,0x30
  003fc:    	movq   QWORD PTR [rsp],xmm2
  00401:    	movq   QWORD PTR [rsp+0x8],xmm3
  00407:    	movq   QWORD PTR [rsp+0x10],xmm4
  0040d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00413:    	movq   QWORD PTR [rsp+0x20],xmm7
  00419:    	movq   xmm0,xmm4
  0041d: 92 	movabs rax,0x5592e6da7180
  00427:    	call   rax
  00429:    	movq   xmm2,QWORD PTR [rsp]
  0042e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00434:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0043a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00440:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00446:    	add    rsp,0x30
  0044a:    	movq   xmm2,xmm0
:00023 
:00024 %14 = const[Math]                    [Math]
  0044e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff18cb]        # 0xffff1d20
  00455: 00 	cmp    rax,QWORD PTR [rip+0x1c24]        # 0x2080
  0045c:    	jne    0x33401
  00462: 00 	mov    rax,QWORD PTR [rip+0x1c07]        # 0x2070
  00469: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = literal[1.0]
  00470: 00 	movq   xmm3,QWORD PTR [rip+0x1c18]        # 0x2090
  00478: 00 	movabs rax,0xff80000000000002
  00482: ff 	mov    QWORD PTR [r14-0xa8],rax
:00026 %15 = %15 - %2                       [Float][Float]
  00489:    	subsd  xmm3,xmm5
:00027 %14 = %14.inline MathSqrt(%15; 1)    [#<Class:Math>]
  0048d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00494: 00 	test   rdi,0x7
  0049b:    	jne    0x3348e
  004a1:    	cmp    DWORD PTR [rdi+0x4],0x24
  004a5:    	jne    0x3348e
  004ab: 26 	cmp    DWORD PTR [rip+0xffffffffffff1861],0x26        # 0xffff1d13
  004b2:    	jne    0x3348e
  004b8:    	sqrtsd xmm6,xmm3
:00028 
:00029 %5 = %13 * %14                       [Float][Float]
  004bc:    	movq   xmm8,xmm2
  004c1:    	mulsd  xmm8,xmm6
:00030 %13 = const[Math]                    [Math]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1853]        # 0xffff1d20
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1bdc]        # 0x20b0
  004d4:    	jne    0x334d7
  004da: 00 	mov    rax,QWORD PTR [rip+0x1bbf]        # 0x20a0
  004e1: ff 	mov    QWORD PTR [r14-0x98],rax
:00031 %14 = %2
:00032 %6 = %13.inline MathSqrt(%14; 1)     [#<Class:Math>]
  004e8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  004ef: 00 	test   rdi,0x7
  004f6:    	jne    0x33572
  004fc:    	cmp    DWORD PTR [rdi+0x4],0x24
  00500:    	jne    0x33572
  00506: 26 	cmp    DWORD PTR [rip+0xffffffffffff1806],0x26        # 0xffff1d13
  0050d:    	jne    0x33572
  00513:    	sqrtsd xmm2,xmm5
:00033 
:00034 %13 = dynvar(2, %2)
  00517:    	mov    rax,QWORD PTR [r14-0x18]
  0051b:    	mov    rax,QWORD PTR [rax]
  0051e:    	mov    rax,QWORD PTR [rax-0x28]
  00522: ff 	mov    QWORD PTR [r14-0x98],rax
:00035 %14 = 0: i32
  00529: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00036 %13 = %13.[%14]                      [Array][Integer]
  00534: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0053b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00542: 00 	test   rdi,0x7
  00549:    	jne    0x335c9
  0054f:    	cmp    DWORD PTR [rdi+0x4],0xb
  00553:    	jne    0x335c9
  00559: 00 	test   rsi,0x1
  00560:    	je     0x335c9
  00566:    	sar    rsi,1
  00569:    	sub    rsp,0x30
  0056d:    	movq   QWORD PTR [rsp],xmm2
  00572:    	movq   QWORD PTR [rsp+0x8],xmm3
  00578:    	movq   QWORD PTR [rsp+0x10],xmm4
  0057e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00584:    	movq   QWORD PTR [rsp+0x20],xmm7
  0058a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00591: 92 	movabs rax,0x5592e6e49100
  0059b:    	call   rax
  0059d:    	movq   xmm2,QWORD PTR [rsp]
  005a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ba: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005c1:    	add    rsp,0x30
  005c5:    	test   rax,rax
  005c8:    	je     0x3361d
  005ce: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %13 = %13.call x()                   [Vec]
  005d5:    	movq   xmm0,xmm2
  005d9:    	call   0xfffed791
  005de:    	mov    QWORD PTR [r14-0x60],rax
  005e2:    	movq   xmm0,xmm4
  005e6:    	call   0xfffed791
  005eb:    	mov    QWORD PTR [r14-0x48],rax
  005ef:    	movq   xmm0,xmm7
  005f3:    	call   0xfffed791
  005f8:    	mov    QWORD PTR [r14-0x50],rax
  005fc:    	movq   xmm0,xmm8
  00601:    	call   0xfffed791
  00606:    	mov    QWORD PTR [r14-0x58],rax
  0060a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00611: 00 	test   rdi,0x7
  00618:    	jne    0x3362c
  0061e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00622:    	jne    0x3362c
  00628: 26 	cmp    DWORD PTR [rip+0xffffffffffff16e4],0x26        # 0xffff1d13
  0062f:    	jne    0x3362c
  00635:    	mov    esi,DWORD PTR [rip+0x1a81]        # 0x20bc
  0063b:    	cmp    esi,0xffffffff
  0063e:    	je     0x3364b
  00644:    	cmp    WORD PTR [rdi+0x2],0x3
  00649:    	jne    0x662
  0064f:    	cmp    esi,0x6
  00652:    	jge    0x662
  00658:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065d:    	jmp    0x680
  00662:    	sub    rsp,0x10
  00666:    	movq   QWORD PTR [rsp],xmm3
  0066b: 92 	movabs rax,0x5592e6dd3800
  00675:    	call   rax
  00677:    	movq   xmm3,QWORD PTR [rsp]
  0067c:    	add    rsp,0x10
  00680: ff 	mov    QWORD PTR [r14-0x98],rax
:00038 
:00039 %13 = %4 * %13                       [Float][Float]
  00687:    	mov    rdi,QWORD PTR [r14-0x50]
  0068b: 00 	test   rdi,0x1
  00692:    	jne    0x33686
  00698: 00 	test   rdi,0x2
  0069f:    	je     0x6db
  006a5:    	xorps  xmm2,xmm2
  006a8: 00 	movabs rax,0x8000000000000002
  006b2:    	cmp    rdi,rax
  006b5:    	je     0x6ed
  006bb:    	mov    rax,rdi
  006be:    	sar    rax,0x3f
  006c2:    	add    rax,0x2
  006c6:    	and    rdi,0xfffffffffffffffc
  006ca:    	or     rdi,rax
  006cd:    	rol    rdi,0x3d
  006d1:    	movq   xmm2,rdi
  006d6:    	jmp    0x6ed
  006db:    	call   0xfffed66d
  006e0:    	test   rax,rax
  006e3:    	je     0x33686
  006e9:    	movq   xmm2,xmm0
  006ed: ff 	mov    rdi,QWORD PTR [r14-0x98]
  006f4: 00 	test   rdi,0x1
  006fb:    	jne    0x336a5
  00701: 00 	test   rdi,0x2
  00708:    	je     0x744
  0070e:    	xorps  xmm4,xmm4
  00711: 00 	movabs rax,0x8000000000000002
  0071b:    	cmp    rdi,rax
  0071e:    	je     0x756
  00724:    	mov    rax,rdi
  00727:    	sar    rax,0x3f
  0072b:    	add    rax,0x2
  0072f:    	and    rdi,0xfffffffffffffffc
  00733:    	or     rdi,rax
  00736:    	rol    rdi,0x3d
  0073a:    	movq   xmm4,rdi
  0073f:    	jmp    0x756
  00744:    	call   0xfffed66d
  00749:    	test   rax,rax
  0074c:    	je     0x336a5
  00752:    	movq   xmm4,xmm0
  00756:    	mulsd  xmm4,xmm2
:00040 %14 = dynvar(2, %2)
  0075a:    	mov    rax,QWORD PTR [r14-0x18]
  0075e:    	mov    rax,QWORD PTR [rax]
  00761:    	mov    rax,QWORD PTR [rax-0x28]
  00765: ff 	mov    QWORD PTR [r14-0xa0],rax
:00041 %15 = 1: i32
  0076c: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00042 %14 = %14.[%15]                      [Array][Integer]
  00777: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0077e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00785: 00 	test   rdi,0x7
  0078c:    	jne    0x336c4
  00792:    	cmp    DWORD PTR [rdi+0x4],0xb
  00796:    	jne    0x336c4
  0079c: 00 	test   rsi,0x1
  007a3:    	je     0x336c4
  007a9:    	sar    rsi,1
  007ac:    	sub    rsp,0x10
  007b0:    	movq   QWORD PTR [rsp],xmm2
  007b5:    	movq   QWORD PTR [rsp+0x8],xmm4
  007bb: 92 	movabs rax,0x5592e6e49100
  007c5:    	call   rax
  007c7:    	movq   xmm2,QWORD PTR [rsp]
  007cc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007d2:    	add    rsp,0x10
  007d6:    	test   rax,rax
  007d9:    	je     0x336e3
  007df: ff 	mov    QWORD PTR [r14-0xa0],rax
:00043 %14 = %14.call x()                   [Vec]
  007e6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  007ed: 00 	test   rdi,0x7
  007f4:    	jne    0x336f2
  007fa:    	cmp    DWORD PTR [rdi+0x4],0x2b
  007fe:    	jne    0x336f2
  00804: 26 	cmp    DWORD PTR [rip+0xffffffffffff1508],0x26        # 0xffff1d13
  0080b:    	jne    0x336f2
  00811:    	mov    esi,DWORD PTR [rip+0x18ad]        # 0x20c4
  00817:    	cmp    esi,0xffffffff
  0081a:    	je     0x33711
  00820:    	cmp    WORD PTR [rdi+0x2],0x3
  00825:    	jne    0x83e
  0082b:    	cmp    esi,0x6
  0082e:    	jge    0x83e
  00834:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00839:    	jmp    0x85c
  0083e:    	sub    rsp,0x10
  00842:    	movq   QWORD PTR [rsp],xmm4
  00847: 92 	movabs rax,0x5592e6dd3800
  00851:    	call   rax
  00853:    	movq   xmm4,QWORD PTR [rsp]
  00858:    	add    rsp,0x10
  0085c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 
:00045 %14 = %5 * %14                       [Float][Float]
  00863:    	mov    rdi,QWORD PTR [r14-0x58]
  00867: 00 	test   rdi,0x1
  0086e:    	jne    0x3374c
  00874: 00 	test   rdi,0x2
  0087b:    	je     0x8b7
  00881:    	xorps  xmm2,xmm2
  00884: 00 	movabs rax,0x8000000000000002
  0088e:    	cmp    rdi,rax
  00891:    	je     0x8c9
  00897:    	mov    rax,rdi
  0089a:    	sar    rax,0x3f
  0089e:    	add    rax,0x2
  008a2:    	and    rdi,0xfffffffffffffffc
  008a6:    	or     rdi,rax
  008a9:    	rol    rdi,0x3d
  008ad:    	movq   xmm2,rdi
  008b2:    	jmp    0x8c9
  008b7:    	call   0xfffed66d
  008bc:    	test   rax,rax
  008bf:    	je     0x3374c
  008c5:    	movq   xmm2,xmm0
  008c9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008d0: 00 	test   rdi,0x1
  008d7:    	jne    0x3376b
  008dd: 00 	test   rdi,0x2
  008e4:    	je     0x920
  008ea:    	xorps  xmm3,xmm3
  008ed: 00 	movabs rax,0x8000000000000002
  008f7:    	cmp    rdi,rax
  008fa:    	je     0x932
  00900:    	mov    rax,rdi
  00903:    	sar    rax,0x3f
  00907:    	add    rax,0x2
  0090b:    	and    rdi,0xfffffffffffffffc
  0090f:    	or     rdi,rax
  00912:    	rol    rdi,0x3d
  00916:    	movq   xmm3,rdi
  0091b:    	jmp    0x932
  00920:    	call   0xfffed66d
  00925:    	test   rax,rax
  00928:    	je     0x3376b
  0092e:    	movq   xmm3,xmm0
  00932:    	mulsd  xmm3,xmm2
:00046 %13 = %13 + %14                      [Float][Float]
  00936:    	addsd  xmm4,xmm3
:00047 %14 = dynvar(2, %2)
  0093a:    	mov    rax,QWORD PTR [r14-0x18]
  0093e:    	mov    rax,QWORD PTR [rax]
  00941:    	mov    rax,QWORD PTR [rax-0x28]
  00945: ff 	mov    QWORD PTR [r14-0xa0],rax
:00048 %15 = 2: i32
  0094c: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00049 %14 = %14.[%15]                      [Array][Integer]
  00957: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0095e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00965: 00 	test   rdi,0x7
  0096c:    	jne    0x3378a
  00972:    	cmp    DWORD PTR [rdi+0x4],0xb
  00976:    	jne    0x3378a
  0097c: 00 	test   rsi,0x1
  00983:    	je     0x3378a
  00989:    	sar    rsi,1
  0098c:    	sub    rsp,0x10
  00990:    	movq   QWORD PTR [rsp],xmm2
  00995:    	movq   QWORD PTR [rsp+0x8],xmm4
  0099b: 92 	movabs rax,0x5592e6e49100
  009a5:    	call   rax
  009a7:    	movq   xmm2,QWORD PTR [rsp]
  009ac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009b2:    	add    rsp,0x10
  009b6:    	test   rax,rax
  009b9:    	je     0x337a9
  009bf: ff 	mov    QWORD PTR [r14-0xa0],rax
:00050 %14 = %14.call x()                   [Vec]
  009c6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009cd: 00 	test   rdi,0x7
  009d4:    	jne    0x337b8
  009da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009de:    	jne    0x337b8
  009e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff1328],0x26        # 0xffff1d13
  009eb:    	jne    0x337b8
  009f1:    	mov    esi,DWORD PTR [rip+0x16d5]        # 0x20cc
  009f7:    	cmp    esi,0xffffffff
  009fa:    	je     0x337d7
  00a00:    	cmp    WORD PTR [rdi+0x2],0x3
  00a05:    	jne    0xa1e
  00a0b:    	cmp    esi,0x6
  00a0e:    	jge    0xa1e
  00a14:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a19:    	jmp    0xa3c
  00a1e:    	sub    rsp,0x10
  00a22:    	movq   QWORD PTR [rsp],xmm4
  00a27: 92 	movabs rax,0x5592e6dd3800
  00a31:    	call   rax
  00a33:    	movq   xmm4,QWORD PTR [rsp]
  00a38:    	add    rsp,0x10
  00a3c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00052 %14 = %6 * %14                       [Float][Float]
  00a43:    	mov    rdi,QWORD PTR [r14-0x60]
  00a47: 00 	test   rdi,0x1
  00a4e:    	jne    0x33812
  00a54: 00 	test   rdi,0x2
  00a5b:    	je     0xa97
  00a61:    	xorps  xmm2,xmm2
  00a64: 00 	movabs rax,0x8000000000000002
  00a6e:    	cmp    rdi,rax
  00a71:    	je     0xaa9
  00a77:    	mov    rax,rdi
  00a7a:    	sar    rax,0x3f
  00a7e:    	add    rax,0x2
  00a82:    	and    rdi,0xfffffffffffffffc
  00a86:    	or     rdi,rax
  00a89:    	rol    rdi,0x3d
  00a8d:    	movq   xmm2,rdi
  00a92:    	jmp    0xaa9
  00a97:    	call   0xfffed66d
  00a9c:    	test   rax,rax
  00a9f:    	je     0x33812
  00aa5:    	movq   xmm2,xmm0
  00aa9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ab0: 00 	test   rdi,0x1
  00ab7:    	jne    0x33831
  00abd: 00 	test   rdi,0x2
  00ac4:    	je     0xb00
  00aca:    	xorps  xmm3,xmm3
  00acd: 00 	movabs rax,0x8000000000000002
  00ad7:    	cmp    rdi,rax
  00ada:    	je     0xb12
  00ae0:    	mov    rax,rdi
  00ae3:    	sar    rax,0x3f
  00ae7:    	add    rax,0x2
  00aeb:    	and    rdi,0xfffffffffffffffc
  00aef:    	or     rdi,rax
  00af2:    	rol    rdi,0x3d
  00af6:    	movq   xmm3,rdi
  00afb:    	jmp    0xb12
  00b00:    	call   0xfffed66d
  00b05:    	test   rax,rax
  00b08:    	je     0x33831
  00b0e:    	movq   xmm3,xmm0
  00b12:    	mulsd  xmm3,xmm2
:00053 %7 = %13 + %14                       [Float][Float]
  00b16:    	movq   xmm5,xmm4
  00b1a:    	addsd  xmm5,xmm3
:00054 %13 = dynvar(2, %2)
  00b1e:    	mov    rax,QWORD PTR [r14-0x18]
  00b22:    	mov    rax,QWORD PTR [rax]
  00b25:    	mov    rax,QWORD PTR [rax-0x28]
  00b29: ff 	mov    QWORD PTR [r14-0x98],rax
:00055 %14 = 0: i32
  00b30: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00056 %13 = %13.[%14]                      [Array][Integer]
  00b3b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b42: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00b49: 00 	test   rdi,0x7
  00b50:    	jne    0x33850
  00b56:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b5a:    	jne    0x33850
  00b60: 00 	test   rsi,0x1
  00b67:    	je     0x33850
  00b6d:    	sar    rsi,1
  00b70:    	sub    rsp,0x10
  00b74:    	movq   QWORD PTR [rsp],xmm2
  00b79:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b7f: 92 	movabs rax,0x5592e6e49100
  00b89:    	call   rax
  00b8b:    	movq   xmm2,QWORD PTR [rsp]
  00b90:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b96:    	add    rsp,0x10
  00b9a:    	test   rax,rax
  00b9d:    	je     0x3386c
  00ba3: ff 	mov    QWORD PTR [r14-0x98],rax
:00057 %13 = %13.call y()                   [Vec]
  00baa:    	movq   xmm0,xmm5
  00bae:    	call   0xfffed791
  00bb3:    	mov    QWORD PTR [r14-0x68],rax
  00bb7: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00bbe: 00 	test   rdi,0x7
  00bc5:    	jne    0x3387b
  00bcb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00bcf:    	jne    0x3387b
  00bd5: 26 	cmp    DWORD PTR [rip+0xffffffffffff1137],0x26        # 0xffff1d13
  00bdc:    	jne    0x3387b
  00be2:    	mov    esi,DWORD PTR [rip+0x14ec]        # 0x20d4
  00be8:    	cmp    esi,0xffffffff
  00beb:    	je     0x3388a
  00bf1:    	cmp    WORD PTR [rdi+0x2],0x3
  00bf6:    	jne    0xc0f
  00bfc:    	cmp    esi,0x6
  00bff:    	jge    0xc0f
  00c05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c0a:    	jmp    0xc1b
  00c0f: 92 	movabs rax,0x5592e6dd3800
  00c19:    	call   rax
  00c1b: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00059 %13 = %4 * %13                       [Float][Float]
  00c22:    	mov    rdi,QWORD PTR [r14-0x50]
  00c26: 00 	test   rdi,0x1
  00c2d:    	jne    0x338b3
  00c33: 00 	test   rdi,0x2
  00c3a:    	je     0xc76
  00c40:    	xorps  xmm2,xmm2
  00c43: 00 	movabs rax,0x8000000000000002
  00c4d:    	cmp    rdi,rax
  00c50:    	je     0xc88
  00c56:    	mov    rax,rdi
  00c59:    	sar    rax,0x3f
  00c5d:    	add    rax,0x2
  00c61:    	and    rdi,0xfffffffffffffffc
  00c65:    	or     rdi,rax
  00c68:    	rol    rdi,0x3d
  00c6c:    	movq   xmm2,rdi
  00c71:    	jmp    0xc88
  00c76:    	call   0xfffed66d
  00c7b:    	test   rax,rax
  00c7e:    	je     0x338b3
  00c84:    	movq   xmm2,xmm0
  00c88: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c8f: 00 	test   rdi,0x1
  00c96:    	jne    0x338c2
  00c9c: 00 	test   rdi,0x2
  00ca3:    	je     0xcdf
  00ca9:    	xorps  xmm3,xmm3
  00cac: 00 	movabs rax,0x8000000000000002
  00cb6:    	cmp    rdi,rax
  00cb9:    	je     0xcf1
  00cbf:    	mov    rax,rdi
  00cc2:    	sar    rax,0x3f
  00cc6:    	add    rax,0x2
  00cca:    	and    rdi,0xfffffffffffffffc
  00cce:    	or     rdi,rax
  00cd1:    	rol    rdi,0x3d
  00cd5:    	movq   xmm3,rdi
  00cda:    	jmp    0xcf1
  00cdf:    	call   0xfffed66d
  00ce4:    	test   rax,rax
  00ce7:    	je     0x338c2
  00ced:    	movq   xmm3,xmm0
  00cf1:    	mulsd  xmm3,xmm2
:00060 %14 = dynvar(2, %2)
  00cf5:    	mov    rax,QWORD PTR [r14-0x18]
  00cf9:    	mov    rax,QWORD PTR [rax]
  00cfc:    	mov    rax,QWORD PTR [rax-0x28]
  00d00: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = 1: i32
  00d07: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00062 %14 = %14.[%15]                      [Array][Integer]
  00d12: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d19: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d20: 00 	test   rdi,0x7
  00d27:    	jne    0x338d1
  00d2d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d31:    	jne    0x338d1
  00d37: 00 	test   rsi,0x1
  00d3e:    	je     0x338d1
  00d44:    	sar    rsi,1
  00d47:    	sub    rsp,0x10
  00d4b:    	movq   QWORD PTR [rsp],xmm2
  00d50:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d56: 92 	movabs rax,0x5592e6e49100
  00d60:    	call   rax
  00d62:    	movq   xmm2,QWORD PTR [rsp]
  00d67:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d6d:    	add    rsp,0x10
  00d71:    	test   rax,rax
  00d74:    	je     0x338f0
  00d7a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00063 %14 = %14.call y()                   [Vec]
  00d81: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d88: 00 	test   rdi,0x7
  00d8f:    	jne    0x338ff
  00d95:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d99:    	jne    0x338ff
  00d9f: 26 	cmp    DWORD PTR [rip+0xffffffffffff0f6d],0x26        # 0xffff1d13
  00da6:    	jne    0x338ff
  00dac:    	mov    esi,DWORD PTR [rip+0x132a]        # 0x20dc
  00db2:    	cmp    esi,0xffffffff
  00db5:    	je     0x3391e
  00dbb:    	cmp    WORD PTR [rdi+0x2],0x3
  00dc0:    	jne    0xdd9
  00dc6:    	cmp    esi,0x6
  00dc9:    	jge    0xdd9
  00dcf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dd4:    	jmp    0xdf7
  00dd9:    	sub    rsp,0x10
  00ddd:    	movq   QWORD PTR [rsp],xmm3
  00de2: 92 	movabs rax,0x5592e6dd3800
  00dec:    	call   rax
  00dee:    	movq   xmm3,QWORD PTR [rsp]
  00df3:    	add    rsp,0x10
  00df7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00064 
:00065 %14 = %5 * %14                       [Float][Float]
  00dfe:    	mov    rdi,QWORD PTR [r14-0x58]
  00e02: 00 	test   rdi,0x1
  00e09:    	jne    0x33959
  00e0f: 00 	test   rdi,0x2
  00e16:    	je     0xe52
  00e1c:    	xorps  xmm2,xmm2
  00e1f: 00 	movabs rax,0x8000000000000002
  00e29:    	cmp    rdi,rax
  00e2c:    	je     0xe64
  00e32:    	mov    rax,rdi
  00e35:    	sar    rax,0x3f
  00e39:    	add    rax,0x2
  00e3d:    	and    rdi,0xfffffffffffffffc
  00e41:    	or     rdi,rax
  00e44:    	rol    rdi,0x3d
  00e48:    	movq   xmm2,rdi
  00e4d:    	jmp    0xe64
  00e52:    	call   0xfffed66d
  00e57:    	test   rax,rax
  00e5a:    	je     0x33959
  00e60:    	movq   xmm2,xmm0
  00e64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e6b: 00 	test   rdi,0x1
  00e72:    	jne    0x33978
  00e78: 00 	test   rdi,0x2
  00e7f:    	je     0xebb
  00e85:    	xorps  xmm4,xmm4
  00e88: 00 	movabs rax,0x8000000000000002
  00e92:    	cmp    rdi,rax
  00e95:    	je     0xecd
  00e9b:    	mov    rax,rdi
  00e9e:    	sar    rax,0x3f
  00ea2:    	add    rax,0x2
  00ea6:    	and    rdi,0xfffffffffffffffc
  00eaa:    	or     rdi,rax
  00ead:    	rol    rdi,0x3d
  00eb1:    	movq   xmm4,rdi
  00eb6:    	jmp    0xecd
  00ebb:    	call   0xfffed66d
  00ec0:    	test   rax,rax
  00ec3:    	je     0x33978
  00ec9:    	movq   xmm4,xmm0
  00ecd:    	mulsd  xmm4,xmm2
:00066 %13 = %13 + %14                      [Float][Float]
  00ed1:    	addsd  xmm3,xmm4
:00067 %14 = dynvar(2, %2)
  00ed5:    	mov    rax,QWORD PTR [r14-0x18]
  00ed9:    	mov    rax,QWORD PTR [rax]
  00edc:    	mov    rax,QWORD PTR [rax-0x28]
  00ee0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = 2: i32
  00ee7: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00069 %14 = %14.[%15]                      [Array][Integer]
  00ef2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ef9: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00f00: 00 	test   rdi,0x7
  00f07:    	jne    0x33997
  00f0d:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f11:    	jne    0x33997
  00f17: 00 	test   rsi,0x1
  00f1e:    	je     0x33997
  00f24:    	sar    rsi,1
  00f27:    	sub    rsp,0x10
  00f2b:    	movq   QWORD PTR [rsp],xmm2
  00f30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f36: 92 	movabs rax,0x5592e6e49100
  00f40:    	call   rax
  00f42:    	movq   xmm2,QWORD PTR [rsp]
  00f47:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4d:    	add    rsp,0x10
  00f51:    	test   rax,rax
  00f54:    	je     0x339b6
  00f5a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00070 %14 = %14.call y()                   [Vec]
  00f61: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f68: 00 	test   rdi,0x7
  00f6f:    	jne    0x339c5
  00f75:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f79:    	jne    0x339c5
  00f7f: 26 	cmp    DWORD PTR [rip+0xffffffffffff0d8d],0x26        # 0xffff1d13
  00f86:    	jne    0x339c5
  00f8c:    	mov    esi,DWORD PTR [rip+0x1152]        # 0x20e4
  00f92:    	cmp    esi,0xffffffff
  00f95:    	je     0x339e4
  00f9b:    	cmp    WORD PTR [rdi+0x2],0x3
  00fa0:    	jne    0xfb9
  00fa6:    	cmp    esi,0x6
  00fa9:    	jge    0xfb9
  00faf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fb4:    	jmp    0xfd7
  00fb9:    	sub    rsp,0x10
  00fbd:    	movq   QWORD PTR [rsp],xmm3
  00fc2: 92 	movabs rax,0x5592e6dd3800
  00fcc:    	call   rax
  00fce:    	movq   xmm3,QWORD PTR [rsp]
  00fd3:    	add    rsp,0x10
  00fd7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00071 
:00072 %14 = %6 * %14                       [Float][Float]
  00fde:    	mov    rdi,QWORD PTR [r14-0x60]
  00fe2: 00 	test   rdi,0x1
  00fe9:    	jne    0x33a1f
  00fef: 00 	test   rdi,0x2
  00ff6:    	je     0x1032
  00ffc:    	xorps  xmm2,xmm2
  00fff: 00 	movabs rax,0x8000000000000002
  01009:    	cmp    rdi,rax
  0100c:    	je     0x1044
  01012:    	mov    rax,rdi
  01015:    	sar    rax,0x3f
  01019:    	add    rax,0x2
  0101d:    	and    rdi,0xfffffffffffffffc
  01021:    	or     rdi,rax
  01024:    	rol    rdi,0x3d
  01028:    	movq   xmm2,rdi
  0102d:    	jmp    0x1044
  01032:    	call   0xfffed66d
  01037:    	test   rax,rax
  0103a:    	je     0x33a1f
  01040:    	movq   xmm2,xmm0
  01044: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104b: 00 	test   rdi,0x1
  01052:    	jne    0x33a3e
  01058: 00 	test   rdi,0x2
  0105f:    	je     0x109b
  01065:    	xorps  xmm4,xmm4
  01068: 00 	movabs rax,0x8000000000000002
  01072:    	cmp    rdi,rax
  01075:    	je     0x10ad
  0107b:    	mov    rax,rdi
  0107e:    	sar    rax,0x3f
  01082:    	add    rax,0x2
  01086:    	and    rdi,0xfffffffffffffffc
  0108a:    	or     rdi,rax
  0108d:    	rol    rdi,0x3d
  01091:    	movq   xmm4,rdi
  01096:    	jmp    0x10ad
  0109b:    	call   0xfffed66d
  010a0:    	test   rax,rax
  010a3:    	je     0x33a3e
  010a9:    	movq   xmm4,xmm0
  010ad:    	mulsd  xmm4,xmm2
:00073 %8 = %13 + %14                       [Float][Float]
  010b1:    	movq   xmm5,xmm3
  010b5:    	addsd  xmm5,xmm4
:00074 %13 = dynvar(2, %2)
  010b9:    	mov    rax,QWORD PTR [r14-0x18]
  010bd:    	mov    rax,QWORD PTR [rax]
  010c0:    	mov    rax,QWORD PTR [rax-0x28]
  010c4: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 %14 = 0: i32
  010cb: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00076 %13 = %13.[%14]                      [Array][Integer]
  010d6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  010dd: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  010e4: 00 	test   rdi,0x7
  010eb:    	jne    0x33a5d
  010f1:    	cmp    DWORD PTR [rdi+0x4],0xb
  010f5:    	jne    0x33a5d
  010fb: 00 	test   rsi,0x1
  01102:    	je     0x33a5d
  01108:    	sar    rsi,1
  0110b:    	sub    rsp,0x10
  0110f:    	movq   QWORD PTR [rsp],xmm2
  01114:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111a: 92 	movabs rax,0x5592e6e49100
  01124:    	call   rax
  01126:    	movq   xmm2,QWORD PTR [rsp]
  0112b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01131:    	add    rsp,0x10
  01135:    	test   rax,rax
  01138:    	je     0x33a79
  0113e: ff 	mov    QWORD PTR [r14-0x98],rax
:00077 %13 = %13.call z()                   [Vec]
  01145:    	movq   xmm0,xmm5
  01149:    	call   0xfffed791
  0114e:    	mov    QWORD PTR [r14-0x70],rax
  01152: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01159: 00 	test   rdi,0x7
  01160:    	jne    0x33a88
  01166:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0116a:    	jne    0x33a88
  01170: 26 	cmp    DWORD PTR [rip+0xffffffffffff0b9c],0x26        # 0xffff1d13
  01177:    	jne    0x33a88
  0117d:    	mov    esi,DWORD PTR [rip+0xf69]        # 0x20ec
  01183:    	cmp    esi,0xffffffff
  01186:    	je     0x33a97
  0118c:    	cmp    WORD PTR [rdi+0x2],0x3
  01191:    	jne    0x11aa
  01197:    	cmp    esi,0x6
  0119a:    	jge    0x11aa
  011a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011a5:    	jmp    0x11b6
  011aa: 92 	movabs rax,0x5592e6dd3800
  011b4:    	call   rax
  011b6: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 
:00079 %13 = %4 * %13                       [Float][Float]
  011bd:    	mov    rdi,QWORD PTR [r14-0x50]
  011c1: 00 	test   rdi,0x1
  011c8:    	jne    0x33ac0
  011ce: 00 	test   rdi,0x2
  011d5:    	je     0x1211
  011db:    	xorps  xmm2,xmm2
  011de: 00 	movabs rax,0x8000000000000002
  011e8:    	cmp    rdi,rax
  011eb:    	je     0x1223
  011f1:    	mov    rax,rdi
  011f4:    	sar    rax,0x3f
  011f8:    	add    rax,0x2
  011fc:    	and    rdi,0xfffffffffffffffc
  01200:    	or     rdi,rax
  01203:    	rol    rdi,0x3d
  01207:    	movq   xmm2,rdi
  0120c:    	jmp    0x1223
  01211:    	call   0xfffed66d
  01216:    	test   rax,rax
  01219:    	je     0x33ac0
  0121f:    	movq   xmm2,xmm0
  01223: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0122a: 00 	test   rdi,0x1
  01231:    	jne    0x33acf
  01237: 00 	test   rdi,0x2
  0123e:    	je     0x127a
  01244:    	xorps  xmm3,xmm3
  01247: 00 	movabs rax,0x8000000000000002
  01251:    	cmp    rdi,rax
  01254:    	je     0x128c
  0125a:    	mov    rax,rdi
  0125d:    	sar    rax,0x3f
  01261:    	add    rax,0x2
  01265:    	and    rdi,0xfffffffffffffffc
  01269:    	or     rdi,rax
  0126c:    	rol    rdi,0x3d
  01270:    	movq   xmm3,rdi
  01275:    	jmp    0x128c
  0127a:    	call   0xfffed66d
  0127f:    	test   rax,rax
  01282:    	je     0x33acf
  01288:    	movq   xmm3,xmm0
  0128c:    	mulsd  xmm3,xmm2
:00080 %14 = dynvar(2, %2)
  01290:    	mov    rax,QWORD PTR [r14-0x18]
  01294:    	mov    rax,QWORD PTR [rax]
  01297:    	mov    rax,QWORD PTR [rax-0x28]
  0129b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  012a2: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  012ad: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012b4: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  012bb: 00 	test   rdi,0x7
  012c2:    	jne    0x33ade
  012c8:    	cmp    DWORD PTR [rdi+0x4],0xb
  012cc:    	jne    0x33ade
  012d2: 00 	test   rsi,0x1
  012d9:    	je     0x33ade
  012df:    	sar    rsi,1
  012e2:    	sub    rsp,0x10
  012e6:    	movq   QWORD PTR [rsp],xmm2
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f1: 92 	movabs rax,0x5592e6e49100
  012fb:    	call   rax
  012fd:    	movq   xmm2,QWORD PTR [rsp]
  01302:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01308:    	add    rsp,0x10
  0130c:    	test   rax,rax
  0130f:    	je     0x33afd
  01315: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %14 = %14.call z()                   [Vec]
  0131c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01323: 00 	test   rdi,0x7
  0132a:    	jne    0x33b0c
  01330:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01334:    	jne    0x33b0c
  0133a: 26 	cmp    DWORD PTR [rip+0xffffffffffff09d2],0x26        # 0xffff1d13
  01341:    	jne    0x33b0c
  01347:    	mov    esi,DWORD PTR [rip+0xda7]        # 0x20f4
  0134d:    	cmp    esi,0xffffffff
  01350:    	je     0x33b2b
  01356:    	cmp    WORD PTR [rdi+0x2],0x3
  0135b:    	jne    0x1374
  01361:    	cmp    esi,0x6
  01364:    	jge    0x1374
  0136a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0136f:    	jmp    0x1392
  01374:    	sub    rsp,0x10
  01378:    	movq   QWORD PTR [rsp],xmm3
  0137d: 92 	movabs rax,0x5592e6dd3800
  01387:    	call   rax
  01389:    	movq   xmm3,QWORD PTR [rsp]
  0138e:    	add    rsp,0x10
  01392: ff 	mov    QWORD PTR [r14-0xa0],rax
:00084 
:00085 %14 = %5 * %14                       [Float][Float]
  01399:    	mov    rdi,QWORD PTR [r14-0x58]
  0139d: 00 	test   rdi,0x1
  013a4:    	jne    0x33b66
  013aa: 00 	test   rdi,0x2
  013b1:    	je     0x13ed
  013b7:    	xorps  xmm2,xmm2
  013ba: 00 	movabs rax,0x8000000000000002
  013c4:    	cmp    rdi,rax
  013c7:    	je     0x13ff
  013cd:    	mov    rax,rdi
  013d0:    	sar    rax,0x3f
  013d4:    	add    rax,0x2
  013d8:    	and    rdi,0xfffffffffffffffc
  013dc:    	or     rdi,rax
  013df:    	rol    rdi,0x3d
  013e3:    	movq   xmm2,rdi
  013e8:    	jmp    0x13ff
  013ed:    	call   0xfffed66d
  013f2:    	test   rax,rax
  013f5:    	je     0x33b66
  013fb:    	movq   xmm2,xmm0
  013ff: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01406: 00 	test   rdi,0x1
  0140d:    	jne    0x33b85
  01413: 00 	test   rdi,0x2
  0141a:    	je     0x1456
  01420:    	xorps  xmm4,xmm4
  01423: 00 	movabs rax,0x8000000000000002
  0142d:    	cmp    rdi,rax
  01430:    	je     0x1468
  01436:    	mov    rax,rdi
  01439:    	sar    rax,0x3f
  0143d:    	add    rax,0x2
  01441:    	and    rdi,0xfffffffffffffffc
  01445:    	or     rdi,rax
  01448:    	rol    rdi,0x3d
  0144c:    	movq   xmm4,rdi
  01451:    	jmp    0x1468
  01456:    	call   0xfffed66d
  0145b:    	test   rax,rax
  0145e:    	je     0x33b85
  01464:    	movq   xmm4,xmm0
  01468:    	mulsd  xmm4,xmm2
:00086 %13 = %13 + %14                      [Float][Float]
  0146c:    	addsd  xmm3,xmm4
:00087 %14 = dynvar(2, %2)
  01470:    	mov    rax,QWORD PTR [r14-0x18]
  01474:    	mov    rax,QWORD PTR [rax]
  01477:    	mov    rax,QWORD PTR [rax-0x28]
  0147b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 2: i32
  01482: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00089 %14 = %14.[%15]                      [Array][Integer]
  0148d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01494: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  0149b: 00 	test   rdi,0x7
  014a2:    	jne    0x33ba4
  014a8:    	cmp    DWORD PTR [rdi+0x4],0xb
  014ac:    	jne    0x33ba4
  014b2: 00 	test   rsi,0x1
  014b9:    	je     0x33ba4
  014bf:    	sar    rsi,1
  014c2:    	sub    rsp,0x10
  014c6:    	movq   QWORD PTR [rsp],xmm2
  014cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d1: 92 	movabs rax,0x5592e6e49100
  014db:    	call   rax
  014dd:    	movq   xmm2,QWORD PTR [rsp]
  014e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014e8:    	add    rsp,0x10
  014ec:    	test   rax,rax
  014ef:    	je     0x33bc3
  014f5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %14 = %14.call z()                   [Vec]
  014fc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01503: 00 	test   rdi,0x7
  0150a:    	jne    0x33bd2
  01510:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01514:    	jne    0x33bd2
  0151a: 26 	cmp    DWORD PTR [rip+0xffffffffffff07f2],0x26        # 0xffff1d13
  01521:    	jne    0x33bd2
  01527:    	mov    esi,DWORD PTR [rip+0xbcf]        # 0x20fc
  0152d:    	cmp    esi,0xffffffff
  01530:    	je     0x33bf1
  01536:    	cmp    WORD PTR [rdi+0x2],0x3
  0153b:    	jne    0x1554
  01541:    	cmp    esi,0x6
  01544:    	jge    0x1554
  0154a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0154f:    	jmp    0x1572
  01554:    	sub    rsp,0x10
  01558:    	movq   QWORD PTR [rsp],xmm3
  0155d: 92 	movabs rax,0x5592e6dd3800
  01567:    	call   rax
  01569:    	movq   xmm3,QWORD PTR [rsp]
  0156e:    	add    rsp,0x10
  01572: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 
:00092 %14 = %6 * %14                       [Float][Float]
  01579:    	mov    rdi,QWORD PTR [r14-0x60]
  0157d: 00 	test   rdi,0x1
  01584:    	jne    0x33c2c
  0158a: 00 	test   rdi,0x2
  01591:    	je     0x15cd
  01597:    	xorps  xmm2,xmm2
  0159a: 00 	movabs rax,0x8000000000000002
  015a4:    	cmp    rdi,rax
  015a7:    	je     0x15df
  015ad:    	mov    rax,rdi
  015b0:    	sar    rax,0x3f
  015b4:    	add    rax,0x2
  015b8:    	and    rdi,0xfffffffffffffffc
  015bc:    	or     rdi,rax
  015bf:    	rol    rdi,0x3d
  015c3:    	movq   xmm2,rdi
  015c8:    	jmp    0x15df
  015cd:    	call   0xfffed66d
  015d2:    	test   rax,rax
  015d5:    	je     0x33c2c
  015db:    	movq   xmm2,xmm0
  015df: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  015e6: 00 	test   rdi,0x1
  015ed:    	jne    0x33c4b
  015f3: 00 	test   rdi,0x2
  015fa:    	je     0x1636
  01600:    	xorps  xmm4,xmm4
  01603: 00 	movabs rax,0x8000000000000002
  0160d:    	cmp    rdi,rax
  01610:    	je     0x1648
  01616:    	mov    rax,rdi
  01619:    	sar    rax,0x3f
  0161d:    	add    rax,0x2
  01621:    	and    rdi,0xfffffffffffffffc
  01625:    	or     rdi,rax
  01628:    	rol    rdi,0x3d
  0162c:    	movq   xmm4,rdi
  01631:    	jmp    0x1648
  01636:    	call   0xfffed66d
  0163b:    	test   rax,rax
  0163e:    	je     0x33c4b
  01644:    	movq   xmm4,xmm0
  01648:    	mulsd  xmm4,xmm2
:00093 %9 = %13 + %14                       [Float][Float]
  0164c:    	movq   xmm5,xmm3
  01650:    	addsd  xmm5,xmm4
:00094 %13 = const[Vec]                     [Vec]
  01654: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff06c5]        # 0xffff1d20
  0165b: 00 	cmp    rax,QWORD PTR [rip+0xaae]        # 0x2110
  01662:    	jne    0x33c6a
  01668: 00 	mov    rax,QWORD PTR [rip+0xa91]        # 0x2100
  0166f: ff 	mov    QWORD PTR [r14-0x98],rax
:00095 %14 = %7
  01676:    	mov    rax,QWORD PTR [r14-0x68]
  0167a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00096 %15 = %8
  01681:    	mov    rax,QWORD PTR [r14-0x70]
  01685: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %16 = %9
:00098 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  0168c:    	movq   xmm0,xmm5
  01690:    	call   0xfffed791
  01695: ff 	mov    QWORD PTR [r14-0xb0],rax
  0169c:    	movq   xmm0,xmm5
  016a0:    	call   0xfffed791
  016a5:    	mov    QWORD PTR [r14-0x78],rax
  016a9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016b0: 00 	test   rdi,0x7
  016b7:    	jne    0x33cdf
  016bd:    	cmp    DWORD PTR [rdi+0x4],0x2c
  016c1:    	jne    0x33cdf
  016c7: 26 	cmp    DWORD PTR [rip+0xffffffffffff0645],0x26        # 0xffff1d13
  016ce:    	jne    0x33cdf
  016d4: 00 	mov    r9,0x0
  016db:    	sub    rsp,0x10
  016df:    	movq   QWORD PTR [rsp],xmm5
  016e4:    	mov    rdx,rdi
  016e7:    	mov    QWORD PTR [rsp-0x40],rcx
  016ec: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016f5: ff 	lea    rcx,[r14-0xa0]
  016fc: 00 	mov    r8,0x3
  01703:    	mov    rsi,QWORD PTR [rbx]
  01706:    	mov    QWORD PTR [rsp-0x18],rsi
  0170b:    	lea    rsi,[rsp-0x18]
  01710:    	mov    QWORD PTR [rbx],rsi
  01713:    	lea    r14,[rsp-0x10]
  01718:    	mov    QWORD PTR [rsp-0x20],r14
  0171d:    	call   0x33cee
  01722:    	lea    r14,[rbp-0x8]
  01726:    	mov    QWORD PTR [rbx],r14
  01729:    	mov    r14,QWORD PTR [rbp-0x10]
  0172d:    	movq   xmm5,QWORD PTR [rsp]
  01732:    	add    rsp,0x10
  01736:    	test   rax,rax
  01739:    	je     0x33d20
  0173f:    	mov    QWORD PTR [r14-0x80],rax
:00099 
:00100 %13 = const[Ray]                     [Ray]
  01743: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff05d6]        # 0xffff1d20
  0174a: 00 	cmp    rax,QWORD PTR [rip+0x9df]        # 0x2130
  01751:    	jne    0x33d2f
  01757: 00 	mov    rax,QWORD PTR [rip+0x9c2]        # 0x2120
  0175e: ff 	mov    QWORD PTR [r14-0x98],rax
:00101 %14 = dynvar(2, %7)
  01765:    	mov    rax,QWORD PTR [r14-0x18]
  01769:    	mov    rax,QWORD PTR [rax]
  0176c:    	mov    rax,QWORD PTR [rax-0x50]
  01770: ff 	mov    QWORD PTR [r14-0xa0],rax
:00102 %15 = %10
  01777:    	mov    rax,QWORD PTR [r14-0x80]
  0177b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01782: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01789: 00 	test   rdi,0x7
  01790:    	jne    0x33d8c
  01796:    	cmp    DWORD PTR [rdi+0x4],0x32
  0179a:    	jne    0x33d8c
  017a0: 26 	cmp    DWORD PTR [rip+0xffffffffffff056c],0x26        # 0xffff1d13
  017a7:    	jne    0x33d8c
  017ad: 00 	mov    r9,0x0
  017b4:    	sub    rsp,0x10
  017b8:    	movq   QWORD PTR [rsp],xmm5
  017bd:    	mov    rdx,rdi
  017c0:    	mov    QWORD PTR [rsp-0x40],rcx
  017c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017ce: ff 	lea    rcx,[r14-0xa0]
  017d5: 00 	mov    r8,0x2
  017dc:    	mov    rsi,QWORD PTR [rbx]
  017df:    	mov    QWORD PTR [rsp-0x18],rsi
  017e4:    	lea    rsi,[rsp-0x18]
  017e9:    	mov    QWORD PTR [rbx],rsi
  017ec:    	lea    r14,[rsp-0x10]
  017f1:    	mov    QWORD PTR [rsp-0x20],r14
  017f6:    	call   0x33d9b
  017fb:    	lea    r14,[rbp-0x8]
  017ff:    	mov    QWORD PTR [rbx],r14
  01802:    	mov    r14,QWORD PTR [rbp-0x10]
  01806:    	movq   xmm5,QWORD PTR [rsp]
  0180b:    	add    rsp,0x10
  0180f:    	test   rax,rax
  01812:    	je     0x33dcd
  01818: ff 	mov    QWORD PTR [r14-0x88],rax
:00104 
:00105 %13 = const[Isect]                   [Isect]
  0181f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff04fa]        # 0xffff1d20
  01826: 00 	cmp    rax,QWORD PTR [rip+0x923]        # 0x2150
  0182d:    	jne    0x33ddc
  01833: 00 	mov    rax,QWORD PTR [rip+0x906]        # 0x2140
  0183a: ff 	mov    QWORD PTR [r14-0x98],rax
:00106 %12 = %13.call new()                 [#<Class:Isect>]
  01841: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01848: 00 	test   rdi,0x7
  0184f:    	jne    0x33e39
  01855:    	cmp    DWORD PTR [rdi+0x4],0x34
  01859:    	jne    0x33e39
  0185f: 26 	cmp    DWORD PTR [rip+0xffffffffffff04ad],0x26        # 0xffff1d13
  01866:    	jne    0x33e39
  0186c: 00 	mov    r9,0x0
  01873:    	sub    rsp,0x10
  01877:    	movq   QWORD PTR [rsp],xmm5
  0187c:    	mov    rdx,rdi
  0187f:    	mov    QWORD PTR [rsp-0x40],rcx
  01884: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0188d: ff 	lea    rcx,[r14-0xa0]
  01894: 00 	mov    r8,0x0
  0189b:    	mov    rsi,QWORD PTR [rbx]
  0189e:    	mov    QWORD PTR [rsp-0x18],rsi
  018a3:    	lea    rsi,[rsp-0x18]
  018a8:    	mov    QWORD PTR [rbx],rsi
  018ab:    	lea    r14,[rsp-0x10]
  018b0:    	mov    QWORD PTR [rsp-0x20],r14
  018b5:    	call   0x33e48
  018ba:    	lea    r14,[rbp-0x8]
  018be:    	mov    QWORD PTR [rbx],r14
  018c1:    	mov    r14,QWORD PTR [rbp-0x10]
  018c5:    	movq   xmm5,QWORD PTR [rsp]
  018ca:    	add    rsp,0x10
  018ce:    	test   rax,rax
  018d1:    	je     0x33e7a
  018d7: ff 	mov    QWORD PTR [r14-0x90],rax
:00107 
:00108 %13 = @spheres: Scene[IvarId(0)]
  018de:    	mov    rdi,QWORD PTR [r14-0x30]
  018e2:    	mov    rax,QWORD PTR [rdi+0x10]
  018e6: ff 	mov    QWORD PTR [r14-0x98],rax
:00109 %14 = 0: i32
  018ed: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00110 %13 = %13.[%14]                      [Array][Integer]
  018f8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ff: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01906: 00 	test   rdi,0x7
  0190d:    	jne    0x33e89
  01913:    	cmp    DWORD PTR [rdi+0x4],0xb
  01917:    	jne    0x33e89
  0191d: 00 	test   rsi,0x1
  01924:    	je     0x33e89
  0192a:    	sar    rsi,1
  0192d:    	sub    rsp,0x10
  01931:    	movq   QWORD PTR [rsp],xmm5
  01936: 92 	movabs rax,0x5592e6e49100
  01940:    	call   rax
  01942:    	movq   xmm5,QWORD PTR [rsp]
  01947:    	add    rsp,0x10
  0194b:    	test   rax,rax
  0194e:    	je     0x33e98
  01954: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %11
  0195b: ff 	mov    rax,QWORD PTR [r14-0x88]
  01962: ff 	mov    QWORD PTR [r14-0xa0],rax
:00112 %15 = %12
  01969: ff 	mov    rax,QWORD PTR [r14-0x90]
  01970: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 _ = %13.call intersect(%14; 2)       [Sphere]
  01977: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0197e: 00 	test   rdi,0x7
  01985:    	jne    0x33ea7
  0198b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0198f:    	jne    0x33ea7
  01995: 26 	cmp    DWORD PTR [rip+0xffffffffffff0377],0x26        # 0xffff1d13
  0199c:    	jne    0x33ea7
  019a2:    	sub    rsp,0x10
  019a6:    	movq   QWORD PTR [rsp],xmm5
  019ab: 00 	cmp    DWORD PTR [rip+0xffffffffffff0365],0x0        # 0xffff1d17
  019b2:    	je     0x19ca
  019b8:    	mov    rdi,r12
  019bb:    	mov    rsi,QWORD PTR [rbx]
  019be: 92 	movabs rax,0x5592e6e3ca90
  019c8:    	call   rax
  019ca: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019d3: ff 	mov    rax,QWORD PTR [r14-0x98]
  019da:    	mov    QWORD PTR [rsp-0x40],rax
  019df: 00 	mov    rdi,0x2
  019e6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  019ed:    	mov    QWORD PTR [rsp-0x48],rax
  019f2: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019f9:    	mov    QWORD PTR [rsp-0x50],rax
  019fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a07: 0e 	movabs rax,0x1000e00000062
  01a11:    	mov    QWORD PTR [rsp-0x30],rax
  01a16: 92 	movabs r13,0x5592e73e2200
  01a20:    	mov    rsi,QWORD PTR [rbx]
  01a23:    	mov    QWORD PTR [rsp-0x18],rsi
  01a28:    	lea    rsi,[rsp-0x18]
  01a2d:    	mov    QWORD PTR [rbx],rsi
  01a30:    	lea    r14,[rsp-0x10]
  01a35:    	mov    QWORD PTR [rsp-0x20],r14
  01a3a:    	call   0xffff28cc
  01a3f:    	lea    r14,[rbp-0x8]
  01a43:    	mov    QWORD PTR [rbx],r14
  01a46:    	mov    r14,QWORD PTR [rbp-0x10]
  01a4a:    	movq   xmm5,QWORD PTR [rsp]
  01a4f:    	add    rsp,0x10
  01a53:    	test   rax,rax
  01a56:    	je     0x33eb6
:00114 
:00115 %13 = @spheres: Scene[IvarId(0)]
  01a5c:    	mov    rdi,QWORD PTR [r14-0x30]
  01a60:    	mov    rax,QWORD PTR [rdi+0x10]
  01a64: ff 	mov    QWORD PTR [r14-0x98],rax
:00116 %14 = 1: i32
  01a6b: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00117 %13 = %13.[%14]                      [Array][Integer]
  01a76: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a7d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01a84: 00 	test   rdi,0x7
  01a8b:    	jne    0x33ec5
  01a91:    	cmp    DWORD PTR [rdi+0x4],0xb
  01a95:    	jne    0x33ec5
  01a9b: 00 	test   rsi,0x1
  01aa2:    	je     0x33ec5
  01aa8:    	sar    rsi,1
  01aab:    	sub    rsp,0x10
  01aaf:    	movq   QWORD PTR [rsp],xmm5
  01ab4: 92 	movabs rax,0x5592e6e49100
  01abe:    	call   rax
  01ac0:    	movq   xmm5,QWORD PTR [rsp]
  01ac5:    	add    rsp,0x10
  01ac9:    	test   rax,rax
  01acc:    	je     0x33ed4
  01ad2: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = %11
  01ad9: ff 	mov    rax,QWORD PTR [r14-0x88]
  01ae0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %12
  01ae7: ff 	mov    rax,QWORD PTR [r14-0x90]
  01aee: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 _ = %13.call intersect(%14; 2)       [Sphere]
  01af5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01afc: 00 	test   rdi,0x7
  01b03:    	jne    0x33ee3
  01b09:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01b0d:    	jne    0x33ee3
  01b13: 26 	cmp    DWORD PTR [rip+0xffffffffffff01f9],0x26        # 0xffff1d13
  01b1a:    	jne    0x33ee3
  01b20:    	sub    rsp,0x10
  01b24:    	movq   QWORD PTR [rsp],xmm5
  01b29: 00 	cmp    DWORD PTR [rip+0xffffffffffff01e7],0x0        # 0xffff1d17
  01b30:    	je     0x1b48
  01b36:    	mov    rdi,r12
  01b39:    	mov    rsi,QWORD PTR [rbx]
  01b3c: 92 	movabs rax,0x5592e6e3ca90
  01b46:    	call   rax
  01b48: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b51: ff 	mov    rax,QWORD PTR [r14-0x98]
  01b58:    	mov    QWORD PTR [rsp-0x40],rax
  01b5d: 00 	mov    rdi,0x2
  01b64: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01b6b:    	mov    QWORD PTR [rsp-0x48],rax
  01b70: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01b77:    	mov    QWORD PTR [rsp-0x50],rax
  01b7c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b85: 0e 	movabs rax,0x1000e00000062
  01b8f:    	mov    QWORD PTR [rsp-0x30],rax
  01b94: 92 	movabs r13,0x5592e73e2200
  01b9e:    	mov    rsi,QWORD PTR [rbx]
  01ba1:    	mov    QWORD PTR [rsp-0x18],rsi
  01ba6:    	lea    rsi,[rsp-0x18]
  01bab:    	mov    QWORD PTR [rbx],rsi
  01bae:    	lea    r14,[rsp-0x10]
  01bb3:    	mov    QWORD PTR [rsp-0x20],r14
  01bb8:    	call   0xffff28cc
  01bbd:    	lea    r14,[rbp-0x8]
  01bc1:    	mov    QWORD PTR [rbx],r14
  01bc4:    	mov    r14,QWORD PTR [rbp-0x10]
  01bc8:    	movq   xmm5,QWORD PTR [rsp]
  01bcd:    	add    rsp,0x10
  01bd1:    	test   rax,rax
  01bd4:    	je     0x33ef2
:00121 
:00122 %13 = @spheres: Scene[IvarId(0)]
  01bda:    	mov    rdi,QWORD PTR [r14-0x30]
  01bde:    	mov    rax,QWORD PTR [rdi+0x10]
  01be2: ff 	mov    QWORD PTR [r14-0x98],rax
:00123 %14 = 2: i32
  01be9: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00124 %13 = %13.[%14]                      [Array][Integer]
  01bf4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bfb: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01c02: 00 	test   rdi,0x7
  01c09:    	jne    0x33f01
  01c0f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01c13:    	jne    0x33f01
  01c19: 00 	test   rsi,0x1
  01c20:    	je     0x33f01
  01c26:    	sar    rsi,1
  01c29:    	sub    rsp,0x10
  01c2d:    	movq   QWORD PTR [rsp],xmm5
  01c32: 92 	movabs rax,0x5592e6e49100
  01c3c:    	call   rax
  01c3e:    	movq   xmm5,QWORD PTR [rsp]
  01c43:    	add    rsp,0x10
  01c47:    	test   rax,rax
  01c4a:    	je     0x33f10
  01c50: ff 	mov    QWORD PTR [r14-0x98],rax
:00125 %14 = %11
  01c57: ff 	mov    rax,QWORD PTR [r14-0x88]
  01c5e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00126 %15 = %12
  01c65: ff 	mov    rax,QWORD PTR [r14-0x90]
  01c6c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00127 _ = %13.call intersect(%14; 2)       [Sphere]
  01c73: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c7a: 00 	test   rdi,0x7
  01c81:    	jne    0x33f1f
  01c87:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01c8b:    	jne    0x33f1f
  01c91: 26 	cmp    DWORD PTR [rip+0xffffffffffff007b],0x26        # 0xffff1d13
  01c98:    	jne    0x33f1f
  01c9e:    	sub    rsp,0x10
  01ca2:    	movq   QWORD PTR [rsp],xmm5
  01ca7: 00 	cmp    DWORD PTR [rip+0xffffffffffff0069],0x0        # 0xffff1d17
  01cae:    	je     0x1cc6
  01cb4:    	mov    rdi,r12
  01cb7:    	mov    rsi,QWORD PTR [rbx]
  01cba: 92 	movabs rax,0x5592e6e3ca90
  01cc4:    	call   rax
  01cc6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ccf: ff 	mov    rax,QWORD PTR [r14-0x98]
  01cd6:    	mov    QWORD PTR [rsp-0x40],rax
  01cdb: 00 	mov    rdi,0x2
  01ce2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01ce9:    	mov    QWORD PTR [rsp-0x48],rax
  01cee: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01cf5:    	mov    QWORD PTR [rsp-0x50],rax
  01cfa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01d03: 0e 	movabs rax,0x1000e00000062
  01d0d:    	mov    QWORD PTR [rsp-0x30],rax
  01d12: 92 	movabs r13,0x5592e73e2200
  01d1c:    	mov    rsi,QWORD PTR [rbx]
  01d1f:    	mov    QWORD PTR [rsp-0x18],rsi
  01d24:    	lea    rsi,[rsp-0x18]
  01d29:    	mov    QWORD PTR [rbx],rsi
  01d2c:    	lea    r14,[rsp-0x10]
  01d31:    	mov    QWORD PTR [rsp-0x20],r14
  01d36:    	call   0xffff28cc
  01d3b:    	lea    r14,[rbp-0x8]
  01d3f:    	mov    QWORD PTR [rbx],r14
  01d42:    	mov    r14,QWORD PTR [rbp-0x10]
  01d46:    	movq   xmm5,QWORD PTR [rsp]
  01d4b:    	add    rsp,0x10
  01d4f:    	test   rax,rax
  01d52:    	je     0x33f2e
:00128 
:00129 %13 = @plane: Scene[IvarId(1)]
  01d58:    	mov    rdi,QWORD PTR [r14-0x30]
  01d5c:    	mov    rax,QWORD PTR [rdi+0x18]
  01d60: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01d67: ff 	mov    rax,QWORD PTR [r14-0x88]
  01d6e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01d75: ff 	mov    rax,QWORD PTR [r14-0x90]
  01d7c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Plane]
  01d83: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d8a: 00 	test   rdi,0x7
  01d91:    	jne    0x33f3d
  01d97:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01d9b:    	jne    0x33f3d
  01da1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeff6b],0x26        # 0xffff1d13
  01da8:    	jne    0x33f3d
  01dae:    	sub    rsp,0x10
  01db2:    	movq   QWORD PTR [rsp],xmm5
  01db7: 00 	cmp    DWORD PTR [rip+0xfffffffffffeff59],0x0        # 0xffff1d17
  01dbe:    	je     0x1dd6
  01dc4:    	mov    rdi,r12
  01dc7:    	mov    rsi,QWORD PTR [rbx]
  01dca: 92 	movabs rax,0x5592e6e3ca90
  01dd4:    	call   rax
  01dd6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ddf: ff 	mov    rax,QWORD PTR [r14-0x98]
  01de6:    	mov    QWORD PTR [rsp-0x40],rax
  01deb: 00 	mov    rdi,0x2
  01df2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01df9:    	mov    QWORD PTR [rsp-0x48],rax
  01dfe: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e05:    	mov    QWORD PTR [rsp-0x50],rax
  01e0a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e13: 0c 	movabs rax,0x1000c00000064
  01e1d:    	mov    QWORD PTR [rsp-0x30],rax
  01e22: 92 	movabs r13,0x5592e73e8da0
  01e2c:    	mov    rsi,QWORD PTR [rbx]
  01e2f:    	mov    QWORD PTR [rsp-0x18],rsi
  01e34:    	lea    rsi,[rsp-0x18]
  01e39:    	mov    QWORD PTR [rbx],rsi
  01e3c:    	lea    r14,[rsp-0x10]
  01e41:    	mov    QWORD PTR [rsp-0x20],r14
  01e46:    	call   0xffff2e98
  01e4b:    	lea    r14,[rbp-0x8]
  01e4f:    	mov    QWORD PTR [rbx],r14
  01e52:    	mov    r14,QWORD PTR [rbp-0x10]
  01e56:    	movq   xmm5,QWORD PTR [rsp]
  01e5b:    	add    rsp,0x10
  01e5f:    	test   rax,rax
  01e62:    	je     0x33f4c
:00133 
:00134 %13 = %12.call hit()                 [Isect]
  01e68: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01e6f: 00 	test   rdi,0x7
  01e76:    	jne    0x33f5b
  01e7c:    	cmp    DWORD PTR [rdi+0x4],0x33
  01e80:    	jne    0x33f5b
  01e86: 26 	cmp    DWORD PTR [rip+0xfffffffffffefe86],0x26        # 0xffff1d13
  01e8d:    	jne    0x33f5b
  01e93:    	mov    esi,DWORD PTR [rip+0x2c3]        # 0x215c
  01e99:    	cmp    esi,0xffffffff
  01e9c:    	je     0x33f6a
  01ea2:    	cmp    WORD PTR [rdi+0x2],0x3
  01ea7:    	jne    0x1ec0
  01ead:    	cmp    esi,0x6
  01eb0:    	jge    0x1ec0
  01eb6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01ebb:    	jmp    0x1ede
  01ec0:    	sub    rsp,0x10
  01ec4:    	movq   QWORD PTR [rsp],xmm5
  01ec9: 92 	movabs rax,0x5592e6dd3800
  01ed3:    	call   rax
  01ed5:    	movq   xmm5,QWORD PTR [rsp]
  01eda:    	add    rsp,0x10
  01ede: ff 	mov    QWORD PTR [r14-0x98],rax
:00135 
:00136 condnotbr %13 =>:00142
  01ee5: ff 	mov    rax,QWORD PTR [r14-0x98]
  01eec:    	or     rax,0x10
  01ef0:    	cmp    rax,0x14
  01ef4:    	je     0x1fbd
:00137 %13 = dynvar(2, %6)
  01efa:    	mov    rax,QWORD PTR [r14-0x18]
  01efe:    	mov    rax,QWORD PTR [rax]
  01f01:    	mov    rax,QWORD PTR [rax-0x48]
  01f05: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = literal[1.0]
  01f0c: 00 	movq   xmm2,QWORD PTR [rip+0x24c]        # 0x2160
  01f14: 00 	movabs rax,0xff80000000000002
  01f1e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %13 = %13 + %14                      [Float][Float]
  01f25: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01f2c: 00 	test   rdi,0x1
  01f33:    	jne    0x33fa5
  01f39: 00 	test   rdi,0x2
  01f40:    	je     0x1f7c
  01f46:    	xorps  xmm3,xmm3
  01f49: 00 	movabs rax,0x8000000000000002
  01f53:    	cmp    rdi,rax
  01f56:    	je     0x1f8e
  01f5c:    	mov    rax,rdi
  01f5f:    	sar    rax,0x3f
  01f63:    	add    rax,0x2
  01f67:    	and    rdi,0xfffffffffffffffc
  01f6b:    	or     rdi,rax
  01f6e:    	rol    rdi,0x3d
  01f72:    	movq   xmm3,rdi
  01f77:    	jmp    0x1f8e
  01f7c:    	call   0xfffed66d
  01f81:    	test   rax,rax
  01f84:    	je     0x33fa5
  01f8a:    	movq   xmm3,xmm0
  01f8e:    	addsd  xmm3,xmm2
:00140 dynvar(2, %6) = %13
  01f92:    	movq   xmm0,xmm3
  01f96:    	call   0xfffed791
  01f9b: ff 	mov    QWORD PTR [r14-0x98],rax
  01fa2:    	mov    rax,QWORD PTR [r14-0x18]
  01fa6:    	mov    rax,QWORD PTR [rax]
  01fa9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01fb0:    	mov    QWORD PTR [rax-0x48],rdi
:00141 ret %13
  01fb4: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fbb:    	leave  
  01fbc:    	ret    
:00142 %13 = literal[0.0]
  01fbd: 00 	movq   xmm2,QWORD PTR [rip+0x1ab]        # 0x2170
  01fc5: 00 	movabs rax,0x8000000000000002
  01fcf: ff 	mov    QWORD PTR [r14-0x98],rax
:00143 ret %13
  01fd6: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fdd:    	leave  
  01fde:    	ret    
==> start whole compile: ambient_occlusion FuncId(104) self_class:Scene start:[00000] bytecode:0x5592e7401830
<== finished compile. elapsed:88.7µs
offset:Pos(84872) code: 4016 bytes  data: 288 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: jne    0x31e3c
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    QWORD PTR [r14-0x78],rax
  0003e: mov    QWORD PTR [r14-0x80],rax
  00042: mov    QWORD PTR [r14-0x88],rax
  00049: mov    QWORD PTR [r14-0x90],rax
  00050: mov    rdi,QWORD PTR [r14-0x30]
  00054: test   rdi,0x7
  0005b: jne    0x31e4b
  00061: cmp    DWORD PTR [rdi+0x4],0x35
  00065: jne    0x31e4b
:00000 init_method reg:13 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  0006b: mov    rax,QWORD PTR [rip+0xfffffffffffefb36]        # 0xfffefba8
  00072: cmp    rax,QWORD PTR [rip+0xf4f]        # 0xfc8
  00079: jne    0x31e5a
  0007f: mov    rax,QWORD PTR [rip+0xf32]        # 0xfb8
  00086: mov    QWORD PTR [r14-0x70],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  0008a: mov    rdi,QWORD PTR [r14-0x70]
  0008e: test   rdi,0x7
  00095: jne    0x31ea5
  0009b: cmp    DWORD PTR [rdi+0x4],0x1e
  0009f: jne    0x31ea5
  000a5: cmp    DWORD PTR [rip+0xfffffffffffefaef],0x26        # 0xfffefb9b
  000ac: jne    0x31ea5
  000b2: mov    r9,0x0
  000b9: mov    rdx,rdi
  000bc: mov    QWORD PTR [rsp-0x40],rcx
  000c1: mov    QWORD PTR [rsp-0x28],0x0
  000ca: lea    rcx,[r14-0x78]
  000ce: mov    r8,0x0
  000d5: mov    rsi,QWORD PTR [rbx]
  000d8: mov    QWORD PTR [rsp-0x18],rsi
  000dd: lea    rsi,[rsp-0x18]
  000e2: mov    QWORD PTR [rbx],rsi
  000e5: lea    r14,[rsp-0x10]
  000ea: mov    QWORD PTR [rsp-0x20],r14
  000ef: call   0x31eb4
  000f4: lea    r14,[rbp-0x8]
  000f8: mov    QWORD PTR [rbx],r14
  000fb: mov    r14,QWORD PTR [rbp-0x10]
  000ff: test   rax,rax
  00102: je     0x31ee6
  00108: mov    QWORD PTR [r14-0x40],rax
:00003 
:00004 %8 = %2
  0010c: mov    rax,QWORD PTR [r14-0x40]
  00110: mov    QWORD PTR [r14-0x70],rax
:00005 %9 = %1.call n()                     [Isect]
  00114: mov    rdi,QWORD PTR [r14-0x38]
  00118: test   rdi,0x7
  0011f: jne    0x31ef5
  00125: cmp    DWORD PTR [rdi+0x4],0x33
  00129: jne    0x31ef5
  0012f: cmp    DWORD PTR [rip+0xfffffffffffefa65],0x26        # 0xfffefb9b
  00136: jne    0x31ef5
  0013c: mov    esi,DWORD PTR [rip+0xe92]        # 0xfd4
  00142: cmp    esi,0xffffffff
  00145: je     0x31f04
  0014b: cmp    WORD PTR [rdi+0x2],0x3
  00150: jne    0x169
  00156: cmp    esi,0x6
  00159: jge    0x169
  0015f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00164: jmp    0x175
  00169: movabs rax,0x5592e6dd3800
  00173: call   rax
  00175: mov    QWORD PTR [r14-0x78],rax
:00006 
:00007 _ = %0.call otherBasis(%8; 2)        [Scene]
  00179: mov    rdi,QWORD PTR [r14-0x30]
  0017d: cmp    DWORD PTR [rip+0xfffffffffffefa17],0x26        # 0xfffefb9b
  00184: jne    0x31f2d
  0018a: cmp    DWORD PTR [rip+0xfffffffffffefa0e],0x0        # 0xfffefb9f
  00191: je     0x1a9
  00197: mov    rdi,r12
  0019a: mov    rsi,QWORD PTR [rbx]
  0019d: movabs rax,0x5592e6e3ca90
  001a7: call   rax
  001a9: mov    QWORD PTR [rsp-0x28],0x0
  001b2: mov    rax,QWORD PTR [r14-0x30]
  001b6: mov    QWORD PTR [rsp-0x40],rax
  001bb: mov    rdi,0x2
  001c2: mov    rax,QWORD PTR [r14-0x70]
  001c6: mov    QWORD PTR [rsp-0x48],rax
  001cb: mov    rax,QWORD PTR [r14-0x78]
  001cf: mov    QWORD PTR [rsp-0x50],rax
  001d4: mov    QWORD PTR [rsp-0x38],0x0
  001dd: movabs rax,0x800000058
  001e7: mov    QWORD PTR [rsp-0x30],rax
  001ec: movabs r13,0x5592e73f7530
  001f6: mov    rsi,QWORD PTR [rbx]
  001f9: mov    QWORD PTR [rsp-0x18],rsi
  001fe: lea    rsi,[rsp-0x18]
  00203: mov    QWORD PTR [rbx],rsi
  00206: lea    r14,[rsp-0x10]
  0020b: mov    QWORD PTR [rsp-0x20],r14
  00210: call   0xffff82c1
  00215: lea    r14,[rbp-0x8]
  00219: mov    QWORD PTR [rbx],r14
  0021c: mov    r14,QWORD PTR [rbp-0x10]
  00220: test   rax,rax
  00223: je     0x31f3c
:00008 
:00009 %3 = const[NAO_SAMPLES]              [8]
  00229: mov    rax,QWORD PTR [rip+0xfffffffffffef978]        # 0xfffefba8
  00230: cmp    rax,QWORD PTR [rip+0xdb1]        # 0xfe8
  00237: jne    0x31f4b
  0023d: mov    rax,QWORD PTR [rip+0xd94]        # 0xfd8
  00244: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = const[NAO_SAMPLES]              [8]
  00248: mov    rax,QWORD PTR [rip+0xfffffffffffef959]        # 0xfffefba8
  0024f: cmp    rax,QWORD PTR [rip+0xdb2]        # 0x1008
  00256: jne    0x31f96
  0025c: mov    rax,QWORD PTR [rip+0xd95]        # 0xff8
  00263: mov    QWORD PTR [r14-0x50],rax
:00011 %5 = literal[0.0001]
  00267: movq   xmm2,QWORD PTR [rip+0xda9]        # 0x1018
  0026f: movabs rax,0xf8d1b71758e2196a
  00279: mov    QWORD PTR [r14-0x58],rax
:00012 %6 = literal[0.0]
  0027d: movq   xmm3,QWORD PTR [rip+0xda3]        # 0x1028
  00285: movabs rax,0x8000000000000002
  0028f: mov    QWORD PTR [r14-0x60],rax
:00013 %8 = const[Vec]                      [Vec]
  00293: mov    rax,QWORD PTR [rip+0xfffffffffffef90e]        # 0xfffefba8
  0029a: cmp    rax,QWORD PTR [rip+0xda7]        # 0x1048
  002a1: jne    0x31fe1
  002a7: mov    rax,QWORD PTR [rip+0xd8a]        # 0x1038
  002ae: mov    QWORD PTR [r14-0x70],rax
:00014 %9 = %1.call pl()                    [Isect]
  002b2: mov    rdi,QWORD PTR [r14-0x38]
  002b6: test   rdi,0x7
  002bd: jne    0x3204a
  002c3: cmp    DWORD PTR [rdi+0x4],0x33
  002c7: jne    0x3204a
  002cd: cmp    DWORD PTR [rip+0xfffffffffffef8c7],0x26        # 0xfffefb9b
  002d4: jne    0x3204a
  002da: mov    esi,DWORD PTR [rip+0xd74]        # 0x1054
  002e0: cmp    esi,0xffffffff
  002e3: je     0x32059
  002e9: cmp    WORD PTR [rdi+0x2],0x3
  002ee: jne    0x307
  002f4: cmp    esi,0x6
  002f7: jge    0x307
  002fd: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00302: jmp    0x313
  00307: movabs rax,0x5592e6dd3800
  00311: call   rax
  00313: mov    QWORD PTR [r14-0x78],rax
:00015 
:00016 %9 = %9.call x()                     [Vec]
  00317: mov    rdi,QWORD PTR [r14-0x78]
  0031b: test   rdi,0x7
  00322: jne    0x32082
  00328: cmp    DWORD PTR [rdi+0x4],0x2b
  0032c: jne    0x32082
  00332: cmp    DWORD PTR [rip+0xfffffffffffef862],0x26        # 0xfffefb9b
  00339: jne    0x32082
  0033f: mov    esi,DWORD PTR [rip+0xd17]        # 0x105c
  00345: cmp    esi,0xffffffff
  00348: je     0x32091
  0034e: cmp    WORD PTR [rdi+0x2],0x3
  00353: jne    0x36c
  00359: cmp    esi,0x6
  0035c: jge    0x36c
  00362: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00367: jmp    0x378
  0036c: movabs rax,0x5592e6dd3800
  00376: call   rax
  00378: mov    QWORD PTR [r14-0x78],rax
:00017 
:00018 %10 = %1.call n()                    [Isect]
  0037c: mov    rdi,QWORD PTR [r14-0x38]
  00380: test   rdi,0x7
  00387: jne    0x320ba
  0038d: cmp    DWORD PTR [rdi+0x4],0x33
  00391: jne    0x320ba
  00397: cmp    DWORD PTR [rip+0xfffffffffffef7fd],0x26        # 0xfffefb9b
  0039e: jne    0x320ba
  003a4: mov    esi,DWORD PTR [rip+0xcba]        # 0x1064
  003aa: cmp    esi,0xffffffff
  003ad: je     0x320c9
  003b3: cmp    WORD PTR [rdi+0x2],0x3
  003b8: jne    0x3d1
  003be: cmp    esi,0x6
  003c1: jge    0x3d1
  003c7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003cc: jmp    0x3dd
  003d1: movabs rax,0x5592e6dd3800
  003db: call   rax
  003dd: mov    QWORD PTR [r14-0x80],rax
:00019 
:00020 %10 = %10.call x()                   [Vec]
  003e1: mov    rdi,QWORD PTR [r14-0x80]
  003e5: test   rdi,0x7
  003ec: jne    0x320f2
  003f2: cmp    DWORD PTR [rdi+0x4],0x2b
  003f6: jne    0x320f2
  003fc: cmp    DWORD PTR [rip+0xfffffffffffef798],0x26        # 0xfffefb9b
  00403: jne    0x320f2
  00409: mov    esi,DWORD PTR [rip+0xc5d]        # 0x106c
  0040f: cmp    esi,0xffffffff
  00412: je     0x32101
  00418: cmp    WORD PTR [rdi+0x2],0x3
  0041d: jne    0x436
  00423: cmp    esi,0x6
  00426: jge    0x436
  0042c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00431: jmp    0x442
  00436: movabs rax,0x5592e6dd3800
  00440: call   rax
  00442: mov    QWORD PTR [r14-0x80],rax
:00021 
:00022 %10 = %5 * %10                       [Float][Float]
  00446: mov    rdi,QWORD PTR [r14-0x58]
  0044a: test   rdi,0x1
  00451: jne    0x3212a
  00457: test   rdi,0x2
  0045e: je     0x49a
  00464: xorps  xmm2,xmm2
  00467: movabs rax,0x8000000000000002
  00471: cmp    rdi,rax
  00474: je     0x4ac
  0047a: mov    rax,rdi
  0047d: sar    rax,0x3f
  00481: add    rax,0x2
  00485: and    rdi,0xfffffffffffffffc
  00489: or     rdi,rax
  0048c: rol    rdi,0x3d
  00490: movq   xmm2,rdi
  00495: jmp    0x4ac
  0049a: call   0xfffeb4f5
  0049f: test   rax,rax
  004a2: je     0x3212a
  004a8: movq   xmm2,xmm0
  004ac: mov    rdi,QWORD PTR [r14-0x80]
  004b0: test   rdi,0x1
  004b7: jne    0x32139
  004bd: test   rdi,0x2
  004c4: je     0x500
  004ca: xorps  xmm3,xmm3
  004cd: movabs rax,0x8000000000000002
  004d7: cmp    rdi,rax
  004da: je     0x512
  004e0: mov    rax,rdi
  004e3: sar    rax,0x3f
  004e7: add    rax,0x2
  004eb: and    rdi,0xfffffffffffffffc
  004ef: or     rdi,rax
  004f2: rol    rdi,0x3d
  004f6: movq   xmm3,rdi
  004fb: jmp    0x512
  00500: call   0xfffeb4f5
  00505: test   rax,rax
  00508: je     0x32139
  0050e: movq   xmm3,xmm0
  00512: mulsd  xmm3,xmm2
:00023 %9 = %9 + %10                        [Float][Float]
  00516: mov    rdi,QWORD PTR [r14-0x78]
  0051a: test   rdi,0x1
  00521: jne    0x32148
  00527: test   rdi,0x2
  0052e: je     0x56a
  00534: xorps  xmm4,xmm4
  00537: movabs rax,0x8000000000000002
  00541: cmp    rdi,rax
  00544: je     0x57c
  0054a: mov    rax,rdi
  0054d: sar    rax,0x3f
  00551: add    rax,0x2
  00555: and    rdi,0xfffffffffffffffc
  00559: or     rdi,rax
  0055c: rol    rdi,0x3d
  00560: movq   xmm4,rdi
  00565: jmp    0x57c
  0056a: call   0xfffeb4f5
  0056f: test   rax,rax
  00572: je     0x32148
  00578: movq   xmm4,xmm0
  0057c: addsd  xmm4,xmm3
:00024 %10 = %1.call pl()                   [Isect]
  00580: mov    rdi,QWORD PTR [r14-0x38]
  00584: test   rdi,0x7
  0058b: jne    0x32164
  00591: cmp    DWORD PTR [rdi+0x4],0x33
  00595: jne    0x32164
  0059b: cmp    DWORD PTR [rip+0xfffffffffffef5f9],0x26        # 0xfffefb9b
  005a2: jne    0x32164
  005a8: mov    esi,DWORD PTR [rip+0xac6]        # 0x1074
  005ae: cmp    esi,0xffffffff
  005b1: je     0x32180
  005b7: cmp    WORD PTR [rdi+0x2],0x3
  005bc: jne    0x5d5
  005c2: cmp    esi,0x6
  005c5: jge    0x5d5
  005cb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005d0: jmp    0x5f3
  005d5: sub    rsp,0x10
  005d9: movq   QWORD PTR [rsp],xmm4
  005de: movabs rax,0x5592e6dd3800
  005e8: call   rax
  005ea: movq   xmm4,QWORD PTR [rsp]
  005ef: add    rsp,0x10
  005f3: mov    QWORD PTR [r14-0x80],rax
:00025 
:00026 %10 = %10.call y()                   [Vec]
  005f7: mov    rdi,QWORD PTR [r14-0x80]
  005fb: test   rdi,0x7
  00602: jne    0x321bb
  00608: cmp    DWORD PTR [rdi+0x4],0x2b
  0060c: jne    0x321bb
  00612: cmp    DWORD PTR [rip+0xfffffffffffef582],0x26        # 0xfffefb9b
  00619: jne    0x321bb
  0061f: mov    esi,DWORD PTR [rip+0xa57]        # 0x107c
  00625: cmp    esi,0xffffffff
  00628: je     0x321d7
  0062e: cmp    WORD PTR [rdi+0x2],0x3
  00633: jne    0x64c
  00639: cmp    esi,0x6
  0063c: jge    0x64c
  00642: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00647: jmp    0x66a
  0064c: sub    rsp,0x10
  00650: movq   QWORD PTR [rsp],xmm4
  00655: movabs rax,0x5592e6dd3800
  0065f: call   rax
  00661: movq   xmm4,QWORD PTR [rsp]
  00666: add    rsp,0x10
  0066a: mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %11 = %1.call n()                    [Isect]
  0066e: mov    rdi,QWORD PTR [r14-0x38]
  00672: test   rdi,0x7
  00679: jne    0x32212
  0067f: cmp    DWORD PTR [rdi+0x4],0x33
  00683: jne    0x32212
  00689: cmp    DWORD PTR [rip+0xfffffffffffef50b],0x26        # 0xfffefb9b
  00690: jne    0x32212
  00696: mov    esi,DWORD PTR [rip+0x9e8]        # 0x1084
  0069c: cmp    esi,0xffffffff
  0069f: je     0x3222e
  006a5: cmp    WORD PTR [rdi+0x2],0x3
  006aa: jne    0x6c3
  006b0: cmp    esi,0x6
  006b3: jge    0x6c3
  006b9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006be: jmp    0x6e1
  006c3: sub    rsp,0x10
  006c7: movq   QWORD PTR [rsp],xmm4
  006cc: movabs rax,0x5592e6dd3800
  006d6: call   rax
  006d8: movq   xmm4,QWORD PTR [rsp]
  006dd: add    rsp,0x10
  006e1: mov    QWORD PTR [r14-0x88],rax
:00029 
:00030 %11 = %11.call y()                   [Vec]
  006e8: mov    rdi,QWORD PTR [r14-0x88]
  006ef: test   rdi,0x7
  006f6: jne    0x32269
  006fc: cmp    DWORD PTR [rdi+0x4],0x2b
  00700: jne    0x32269
  00706: cmp    DWORD PTR [rip+0xfffffffffffef48e],0x26        # 0xfffefb9b
  0070d: jne    0x32269
  00713: mov    esi,DWORD PTR [rip+0x973]        # 0x108c
  00719: cmp    esi,0xffffffff
  0071c: je     0x32285
  00722: cmp    WORD PTR [rdi+0x2],0x3
  00727: jne    0x740
  0072d: cmp    esi,0x6
  00730: jge    0x740
  00736: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0073b: jmp    0x75e
  00740: sub    rsp,0x10
  00744: movq   QWORD PTR [rsp],xmm4
  00749: movabs rax,0x5592e6dd3800
  00753: call   rax
  00755: movq   xmm4,QWORD PTR [rsp]
  0075a: add    rsp,0x10
  0075e: mov    QWORD PTR [r14-0x88],rax
:00031 
:00032 %11 = %5 * %11                       [Float][Float]
  00765: mov    rdi,QWORD PTR [r14-0x58]
  00769: test   rdi,0x1
  00770: jne    0x322c0
  00776: test   rdi,0x2
  0077d: je     0x7b9
  00783: xorps  xmm2,xmm2
  00786: movabs rax,0x8000000000000002
  00790: cmp    rdi,rax
  00793: je     0x7cb
  00799: mov    rax,rdi
  0079c: sar    rax,0x3f
  007a0: add    rax,0x2
  007a4: and    rdi,0xfffffffffffffffc
  007a8: or     rdi,rax
  007ab: rol    rdi,0x3d
  007af: movq   xmm2,rdi
  007b4: jmp    0x7cb
  007b9: call   0xfffeb4f5
  007be: test   rax,rax
  007c1: je     0x322c0
  007c7: movq   xmm2,xmm0
  007cb: mov    rdi,QWORD PTR [r14-0x88]
  007d2: test   rdi,0x1
  007d9: jne    0x322dc
  007df: test   rdi,0x2
  007e6: je     0x822
  007ec: xorps  xmm3,xmm3
  007ef: movabs rax,0x8000000000000002
  007f9: cmp    rdi,rax
  007fc: je     0x834
  00802: mov    rax,rdi
  00805: sar    rax,0x3f
  00809: add    rax,0x2
  0080d: and    rdi,0xfffffffffffffffc
  00811: or     rdi,rax
  00814: rol    rdi,0x3d
  00818: movq   xmm3,rdi
  0081d: jmp    0x834
  00822: call   0xfffeb4f5
  00827: test   rax,rax
  0082a: je     0x322dc
  00830: movq   xmm3,xmm0
  00834: mulsd  xmm3,xmm2
:00033 %10 = %10 + %11                      [Float][Float]
  00838: mov    rdi,QWORD PTR [r14-0x80]
  0083c: test   rdi,0x1
  00843: jne    0x322f8
  00849: test   rdi,0x2
  00850: je     0x88c
  00856: xorps  xmm5,xmm5
  00859: movabs rax,0x8000000000000002
  00863: cmp    rdi,rax
  00866: je     0x89e
  0086c: mov    rax,rdi
  0086f: sar    rax,0x3f
  00873: add    rax,0x2
  00877: and    rdi,0xfffffffffffffffc
  0087b: or     rdi,rax
  0087e: rol    rdi,0x3d
  00882: movq   xmm5,rdi
  00887: jmp    0x89e
  0088c: call   0xfffeb4f5
  00891: test   rax,rax
  00894: je     0x322f8
  0089a: movq   xmm5,xmm0
  0089e: addsd  xmm5,xmm3
:00034 %11 = %1.call pl()                   [Isect]
  008a2: mov    rdi,QWORD PTR [r14-0x38]
  008a6: test   rdi,0x7
  008ad: jne    0x32324
  008b3: cmp    DWORD PTR [rdi+0x4],0x33
  008b7: jne    0x32324
  008bd: cmp    DWORD PTR [rip+0xfffffffffffef2d7],0x26        # 0xfffefb9b
  008c4: jne    0x32324
  008ca: mov    esi,DWORD PTR [rip+0x7c4]        # 0x1094
  008d0: cmp    esi,0xffffffff
  008d3: je     0x3234d
  008d9: cmp    WORD PTR [rdi+0x2],0x3
  008de: jne    0x8f7
  008e4: cmp    esi,0x6
  008e7: jge    0x8f7
  008ed: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008f2: jmp    0x921
  008f7: sub    rsp,0x10
  008fb: movq   QWORD PTR [rsp],xmm4
  00900: movq   QWORD PTR [rsp+0x8],xmm5
  00906: movabs rax,0x5592e6dd3800
  00910: call   rax
  00912: movq   xmm4,QWORD PTR [rsp]
  00917: movq   xmm5,QWORD PTR [rsp+0x8]
  0091d: add    rsp,0x10
  00921: mov    QWORD PTR [r14-0x88],rax
:00035 
:00036 %11 = %11.call z()                   [Vec]
  00928: mov    rdi,QWORD PTR [r14-0x88]
  0092f: test   rdi,0x7
  00936: jne    0x32394
  0093c: cmp    DWORD PTR [rdi+0x4],0x2b
  00940: jne    0x32394
  00946: cmp    DWORD PTR [rip+0xfffffffffffef24e],0x26        # 0xfffefb9b
  0094d: jne    0x32394
  00953: mov    esi,DWORD PTR [rip+0x743]        # 0x109c
  00959: cmp    esi,0xffffffff
  0095c: je     0x323bd
  00962: cmp    WORD PTR [rdi+0x2],0x3
  00967: jne    0x980
  0096d: cmp    esi,0x6
  00970: jge    0x980
  00976: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0097b: jmp    0x9aa
  00980: sub    rsp,0x10
  00984: movq   QWORD PTR [rsp],xmm4
  00989: movq   QWORD PTR [rsp+0x8],xmm5
  0098f: movabs rax,0x5592e6dd3800
  00999: call   rax
  0099b: movq   xmm4,QWORD PTR [rsp]
  009a0: movq   xmm5,QWORD PTR [rsp+0x8]
  009a6: add    rsp,0x10
  009aa: mov    QWORD PTR [r14-0x88],rax
:00037 
:00038 %12 = %1.call n()                    [Isect]
  009b1: mov    rdi,QWORD PTR [r14-0x38]
  009b5: test   rdi,0x7
  009bc: jne    0x32404
  009c2: cmp    DWORD PTR [rdi+0x4],0x33
  009c6: jne    0x32404
  009cc: cmp    DWORD PTR [rip+0xfffffffffffef1c8],0x26        # 0xfffefb9b
  009d3: jne    0x32404
  009d9: mov    esi,DWORD PTR [rip+0x6c5]        # 0x10a4
  009df: cmp    esi,0xffffffff
  009e2: je     0x3242d
  009e8: cmp    WORD PTR [rdi+0x2],0x3
  009ed: jne    0xa06
  009f3: cmp    esi,0x6
  009f6: jge    0xa06
  009fc: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a01: jmp    0xa30
  00a06: sub    rsp,0x10
  00a0a: movq   QWORD PTR [rsp],xmm4
  00a0f: movq   QWORD PTR [rsp+0x8],xmm5
  00a15: movabs rax,0x5592e6dd3800
  00a1f: call   rax
  00a21: movq   xmm4,QWORD PTR [rsp]
  00a26: movq   xmm5,QWORD PTR [rsp+0x8]
  00a2c: add    rsp,0x10
  00a30: mov    QWORD PTR [r14-0x90],rax
:00039 
:00040 %12 = %12.call z()                   [Vec]
  00a37: mov    rdi,QWORD PTR [r14-0x90]
  00a3e: test   rdi,0x7
  00a45: jne    0x32474
  00a4b: cmp    DWORD PTR [rdi+0x4],0x2b
  00a4f: jne    0x32474
  00a55: cmp    DWORD PTR [rip+0xfffffffffffef13f],0x26        # 0xfffefb9b
  00a5c: jne    0x32474
  00a62: mov    esi,DWORD PTR [rip+0x644]        # 0x10ac
  00a68: cmp    esi,0xffffffff
  00a6b: je     0x3249d
  00a71: cmp    WORD PTR [rdi+0x2],0x3
  00a76: jne    0xa8f
  00a7c: cmp    esi,0x6
  00a7f: jge    0xa8f
  00a85: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a8a: jmp    0xab9
  00a8f: sub    rsp,0x10
  00a93: movq   QWORD PTR [rsp],xmm4
  00a98: movq   QWORD PTR [rsp+0x8],xmm5
  00a9e: movabs rax,0x5592e6dd3800
  00aa8: call   rax
  00aaa: movq   xmm4,QWORD PTR [rsp]
  00aaf: movq   xmm5,QWORD PTR [rsp+0x8]
  00ab5: add    rsp,0x10
  00ab9: mov    QWORD PTR [r14-0x90],rax
:00041 
:00042 %12 = %5 * %12                       [Float][Float]
  00ac0: mov    rdi,QWORD PTR [r14-0x58]
  00ac4: test   rdi,0x1
  00acb: jne    0x324e4
  00ad1: test   rdi,0x2
  00ad8: je     0xb14
  00ade: xorps  xmm2,xmm2
  00ae1: movabs rax,0x8000000000000002
  00aeb: cmp    rdi,rax
  00aee: je     0xb26
  00af4: mov    rax,rdi
  00af7: sar    rax,0x3f
  00afb: add    rax,0x2
  00aff: and    rdi,0xfffffffffffffffc
  00b03: or     rdi,rax
  00b06: rol    rdi,0x3d
  00b0a: movq   xmm2,rdi
  00b0f: jmp    0xb26
  00b14: call   0xfffeb4f5
  00b19: test   rax,rax
  00b1c: je     0x324e4
  00b22: movq   xmm2,xmm0
  00b26: mov    rdi,QWORD PTR [r14-0x90]
  00b2d: test   rdi,0x1
  00b34: jne    0x3250d
  00b3a: test   rdi,0x2
  00b41: je     0xb7d
  00b47: xorps  xmm3,xmm3
  00b4a: movabs rax,0x8000000000000002
  00b54: cmp    rdi,rax
  00b57: je     0xb8f
  00b5d: mov    rax,rdi
  00b60: sar    rax,0x3f
  00b64: add    rax,0x2
  00b68: and    rdi,0xfffffffffffffffc
  00b6c: or     rdi,rax
  00b6f: rol    rdi,0x3d
  00b73: movq   xmm3,rdi
  00b78: jmp    0xb8f
  00b7d: call   0xfffeb4f5
  00b82: test   rax,rax
  00b85: je     0x3250d
  00b8b: movq   xmm3,xmm0
  00b8f: mulsd  xmm3,xmm2
:00043 %11 = %11 + %12                      [Float][Float]
  00b93: mov    rdi,QWORD PTR [r14-0x88]
  00b9a: test   rdi,0x1
  00ba1: jne    0x32536
  00ba7: test   rdi,0x2
  00bae: je     0xbea
  00bb4: xorps  xmm6,xmm6
  00bb7: movabs rax,0x8000000000000002
  00bc1: cmp    rdi,rax
  00bc4: je     0xbfc
  00bca: mov    rax,rdi
  00bcd: sar    rax,0x3f
  00bd1: add    rax,0x2
  00bd5: and    rdi,0xfffffffffffffffc
  00bd9: or     rdi,rax
  00bdc: rol    rdi,0x3d
  00be0: movq   xmm6,rdi
  00be5: jmp    0xbfc
  00bea: call   0xfffeb4f5
  00bef: test   rax,rax
  00bf2: je     0x32536
  00bf8: movq   xmm6,xmm0
  00bfc: addsd  xmm6,xmm3
:00044 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c00: movq   xmm0,xmm4
  00c04: call   0xfffeb619
  00c09: mov    QWORD PTR [r14-0x78],rax
  00c0d: movq   xmm0,xmm5
  00c11: call   0xfffeb619
  00c16: mov    QWORD PTR [r14-0x80],rax
  00c1a: movq   xmm0,xmm6
  00c1e: call   0xfffeb619
  00c23: mov    QWORD PTR [r14-0x88],rax
  00c2a: mov    rdi,QWORD PTR [r14-0x70]
  00c2e: test   rdi,0x7
  00c35: jne    0x3256f
  00c3b: cmp    DWORD PTR [rdi+0x4],0x2c
  00c3f: jne    0x3256f
  00c45: cmp    DWORD PTR [rip+0xfffffffffffeef4f],0x26        # 0xfffefb9b
  00c4c: jne    0x3256f
  00c52: mov    r9,0x0
  00c59: sub    rsp,0x20
  00c5d: movq   QWORD PTR [rsp],xmm3
  00c62: movq   QWORD PTR [rsp+0x8],xmm4
  00c68: movq   QWORD PTR [rsp+0x10],xmm5
  00c6e: movq   QWORD PTR [rsp+0x18],xmm6
  00c74: mov    rdx,rdi
  00c77: mov    QWORD PTR [rsp-0x40],rcx
  00c7c: mov    QWORD PTR [rsp-0x28],0x0
  00c85: lea    rcx,[r14-0x78]
  00c89: mov    r8,0x3
  00c90: mov    rsi,QWORD PTR [rbx]
  00c93: mov    QWORD PTR [rsp-0x18],rsi
  00c98: lea    rsi,[rsp-0x18]
  00c9d: mov    QWORD PTR [rbx],rsi
  00ca0: lea    r14,[rsp-0x10]
  00ca5: mov    QWORD PTR [rsp-0x20],r14
  00caa: call   0x3258e
  00caf: lea    r14,[rbp-0x8]
  00cb3: mov    QWORD PTR [rbx],r14
  00cb6: mov    r14,QWORD PTR [rbp-0x10]
  00cba: movq   xmm3,QWORD PTR [rsp]
  00cbf: movq   xmm4,QWORD PTR [rsp+0x8]
  00cc5: movq   xmm5,QWORD PTR [rsp+0x10]
  00ccb: movq   xmm6,QWORD PTR [rsp+0x18]
  00cd1: add    rsp,0x20
  00cd5: test   rax,rax
  00cd8: je     0x325c0
  00cde: mov    QWORD PTR [r14-0x68],rax
:00045 
:00046 %8 = literal[6946817]
  00ce2: mov    rax,0xd40003
  00ce9: mov    QWORD PTR [r14-0x70],rax
:00047 _ = %4.call times(&%8)               [Integer]
  00ced: mov    rdi,QWORD PTR [r14-0x50]
  00cf1: test   rdi,0x1
  00cf8: je     0x325cf
  00cfe: cmp    DWORD PTR [rip+0xfffffffffffeee96],0x26        # 0xfffefb9b
  00d05: jne    0x325cf
  00d0b: mov    r9,QWORD PTR [r14-0x70]
  00d0f: sub    rsp,0x20
  00d13: movq   QWORD PTR [rsp],xmm3
  00d18: movq   QWORD PTR [rsp+0x8],xmm4
  00d1e: movq   QWORD PTR [rsp+0x10],xmm5
  00d24: movq   QWORD PTR [rsp+0x18],xmm6
  00d2a: mov    rdx,rdi
  00d2d: mov    QWORD PTR [rsp-0x40],rcx
  00d32: mov    QWORD PTR [rsp-0x28],0x0
  00d3b: lea    rcx,[r14-0x78]
  00d3f: mov    r8,0x0
  00d46: mov    rsi,QWORD PTR [rbx]
  00d49: mov    QWORD PTR [rsp-0x18],rsi
  00d4e: lea    rsi,[rsp-0x18]
  00d53: mov    QWORD PTR [rbx],rsi
  00d56: lea    r14,[rsp-0x10]
  00d5b: mov    QWORD PTR [rsp-0x20],r14
  00d60: call   0x325ee
  00d65: lea    r14,[rbp-0x8]
  00d69: mov    QWORD PTR [rbx],r14
  00d6c: mov    r14,QWORD PTR [rbp-0x10]
  00d70: movq   xmm3,QWORD PTR [rsp]
  00d75: movq   xmm4,QWORD PTR [rsp+0x8]
  00d7b: movq   xmm5,QWORD PTR [rsp+0x10]
  00d81: movq   xmm6,QWORD PTR [rsp+0x18]
  00d87: add    rsp,0x20
  00d8b: test   rax,rax
  00d8e: je     0x32620
:00048 
:00049 %8 = %3.inline IntegerTof()          [Integer]
  00d94: mov    rdi,QWORD PTR [r14-0x48]
  00d98: test   rdi,0x1
  00d9f: je     0x3262f
  00da5: cmp    DWORD PTR [rip+0xfffffffffffeedef],0x26        # 0xfffefb9b
  00dac: jne    0x3262f
  00db2: sar    rdi,1
  00db5: cvtsi2sd xmm2,rdi
:00050 
:00051 %9 = %4.inline IntegerTof()          [Integer]
  00dba: mov    rdi,QWORD PTR [r14-0x50]
  00dbe: test   rdi,0x1
  00dc5: je     0x3264e
  00dcb: cmp    DWORD PTR [rip+0xfffffffffffeedc9],0x26        # 0xfffefb9b
  00dd2: jne    0x3264e
  00dd8: sar    rdi,1
  00ddb: cvtsi2sd xmm4,rdi
:00052 
:00053 %8 = %8 * %9                         [Float][Float]
  00de0: mulsd  xmm2,xmm4
:00054 %8 = %8 - %6                         [Float][Float]
  00de4: mov    rdi,QWORD PTR [r14-0x60]
  00de8: test   rdi,0x1
  00def: jne    0x3267a
  00df5: test   rdi,0x2
  00dfc: je     0xe38
  00e02: xorps  xmm7,xmm7
  00e05: movabs rax,0x8000000000000002
  00e0f: cmp    rdi,rax
  00e12: je     0xe4a
  00e18: mov    rax,rdi
  00e1b: sar    rax,0x3f
  00e1f: add    rax,0x2
  00e23: and    rdi,0xfffffffffffffffc
  00e27: or     rdi,rax
  00e2a: rol    rdi,0x3d
  00e2e: movq   xmm7,rdi
  00e33: jmp    0xe4a
  00e38: call   0xfffeb4f5
  00e3d: test   rax,rax
  00e40: je     0x3267a
  00e46: movq   xmm7,xmm0
  00e4a: subsd  xmm2,xmm7
:00055 %9 = %3.inline IntegerTof()          [Integer]
  00e4e: mov    rdi,QWORD PTR [r14-0x48]
  00e52: test   rdi,0x1
  00e59: je     0x326b3
  00e5f: cmp    DWORD PTR [rip+0xfffffffffffeed35],0x26        # 0xfffefb9b
  00e66: jne    0x326b3
  00e6c: sar    rdi,1
  00e6f: cvtsi2sd xmm4,rdi
:00056 
:00057 %10 = %4.inline IntegerTof()         [Integer]
  00e74: mov    rdi,QWORD PTR [r14-0x50]
  00e78: test   rdi,0x1
  00e7f: je     0x326ec
  00e85: cmp    DWORD PTR [rip+0xfffffffffffeed0f],0x26        # 0xfffefb9b
  00e8c: jne    0x326ec
  00e92: sar    rdi,1
  00e95: cvtsi2sd xmm5,rdi
:00058 
:00059 %9 = %9 * %10                        [Float][Float]
  00e9a: mulsd  xmm4,xmm5
:00060 %6 = %8 / %9                         [Float][Float]
  00e9e: movq   xmm7,xmm2
  00ea2: movq   rax,xmm4
  00ea7: test   rax,rax
  00eaa: je     0xfffeb4c1
  00eb0: divsd  xmm7,xmm4
:00061 %8 = const[Vec]                      [Vec]
  00eb4: mov    rax,QWORD PTR [rip+0xfffffffffffeeced]        # 0xfffefba8
  00ebb: cmp    rax,QWORD PTR [rip+0x206]        # 0x10c8
  00ec2: jne    0x32725
  00ec8: mov    rax,QWORD PTR [rip+0x1e9]        # 0x10b8
  00ecf: mov    QWORD PTR [r14-0x70],rax
:00062 %9 = %6
:00063 %10 = %6
:00064 %11 = %6
:00065 %8 = %8.call new(%9; 3)              [#<Class:Vec>]
  00ed3: movq   xmm0,xmm7
  00ed7: call   0xfffeb619
  00edc: mov    QWORD PTR [r14-0x78],rax
  00ee0: movq   xmm0,xmm7
  00ee4: call   0xfffeb619
  00ee9: mov    QWORD PTR [r14-0x80],rax
  00eed: movq   xmm0,xmm7
  00ef1: call   0xfffeb619
  00ef6: mov    QWORD PTR [r14-0x88],rax
  00efd: movq   xmm0,xmm7
  00f01: call   0xfffeb619
  00f06: mov    QWORD PTR [r14-0x60],rax
  00f0a: mov    rdi,QWORD PTR [r14-0x70]
  00f0e: test   rdi,0x7
  00f15: jne    0x327b2
  00f1b: cmp    DWORD PTR [rdi+0x4],0x2c
  00f1f: jne    0x327b2
  00f25: cmp    DWORD PTR [rip+0xfffffffffffeec6f],0x26        # 0xfffefb9b
  00f2c: jne    0x327b2
  00f32: mov    r9,0x0
  00f39: sub    rsp,0x10
  00f3d: movq   QWORD PTR [rsp],xmm3
  00f42: movq   QWORD PTR [rsp+0x8],xmm7
  00f48: mov    rdx,rdi
  00f4b: mov    QWORD PTR [rsp-0x40],rcx
  00f50: mov    QWORD PTR [rsp-0x28],0x0
  00f59: lea    rcx,[r14-0x78]
  00f5d: mov    r8,0x3
  00f64: mov    rsi,QWORD PTR [rbx]
  00f67: mov    QWORD PTR [rsp-0x18],rsi
  00f6c: lea    rsi,[rsp-0x18]
  00f71: mov    QWORD PTR [rbx],rsi
  00f74: lea    r14,[rsp-0x10]
  00f79: mov    QWORD PTR [rsp-0x20],r14
  00f7e: call   0x327d1
  00f83: lea    r14,[rbp-0x8]
  00f87: mov    QWORD PTR [rbx],r14
  00f8a: mov    r14,QWORD PTR [rbp-0x10]
  00f8e: movq   xmm3,QWORD PTR [rsp]
  00f93: movq   xmm7,QWORD PTR [rsp+0x8]
  00f99: add    rsp,0x10
  00f9d: test   rax,rax
  00fa0: je     0x32803
  00fa6: mov    QWORD PTR [r14-0x70],rax
:00066 
:00067 ret %8
  00faa: mov    rax,QWORD PTR [r14-0x70]
  00fae: leave  
  00faf: ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x5592e73f7530
<== finished compile. elapsed:114.2µs
offset:Pos(89176) code: 6414 bytes  data: 310 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x31742
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x31751
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x31751
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeea7f]        # 0xfffeead8
  00059: 00 	cmp    rax,QWORD PTR [rip+0x18c8]        # 0x1928
  00060:    	jne    0x31760
  00066: 00 	mov    rax,QWORD PTR [rip+0x18ab]        # 0x1918
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x317ab
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x317ab
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea38],0x26        # 0xfffeeacb
  00093:    	jne    0x317ab
  00099:    	mov    esi,DWORD PTR [rip+0x1895]        # 0x1934
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x317ba
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 92 	movabs rax,0x5592e6dd3800
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x317e3
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x317e3
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffee9d3],0x26        # 0xfffeeacb
  000f8:    	jne    0x317e3
  000fe:    	mov    esi,DWORD PTR [rip+0x1838]        # 0x193c
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x317f2
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 92 	movabs rax,0x5592e6dd3800
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x3181b
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x3181b
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffee96e],0x26        # 0xfffeeacb
  0015d:    	jne    0x3181b
  00163:    	mov    esi,DWORD PTR [rip+0x17db]        # 0x1944
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x3182a
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 92 	movabs rax,0x5592e6dd3800
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x31853
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x31853
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffee909],0x26        # 0xfffeeacb
  001c2:    	jne    0x31853
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x31862
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x31894
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdx,QWORD PTR [r14-0x38]
  00226:    	mov    rcx,QWORD PTR [r14-0x48]
  0022a:    	mov    r8,QWORD PTR [r14-0x50]
  0022e:    	mov    rdi,rbx
  00231:    	mov    rsi,r12
  00234: 92 	movabs r9,0x5592e73f75e8
  0023e: 92 	movabs rax,0x5592e6e49180
  00248:    	call   rax
  0024a:    	test   rax,rax
  0024d:    	je     0x318a3
:00012 %3 = 1: i32
  00253: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  0025b: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee876]        # 0xfffeead8
  00262: 00 	cmp    rax,QWORD PTR [rip+0x16ef]        # 0x1958
  00269:    	jne    0x318b2
  0026f: 00 	mov    rax,QWORD PTR [rip+0x16d2]        # 0x1948
  00276:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  0027a: 00 	movq   xmm2,QWORD PTR [rip+0x16e6]        # 0x1968
  00282: 00 	movabs rax,0x8000000000000002
  0028c:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  00290: 00 	movq   xmm3,QWORD PTR [rip+0x16e0]        # 0x1978
  00298: 00 	movabs rax,0x8000000000000002
  002a2:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002a6: 00 	movq   xmm4,QWORD PTR [rip+0x16da]        # 0x1988
  002ae: 00 	movabs rax,0x8000000000000002
  002b8:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002bc:    	mov    rdi,QWORD PTR [r14-0x50]
  002c0: 00 	test   rdi,0x7
  002c7:    	jne    0x318fd
  002cd:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002d1:    	jne    0x318fd
  002d7: 26 	cmp    DWORD PTR [rip+0xfffffffffffee7ed],0x26        # 0xfffeeacb
  002de:    	jne    0x318fd
  002e4: 00 	mov    r9,0x0
  002eb:    	sub    rsp,0x20
  002ef:    	movq   QWORD PTR [rsp],xmm2
  002f4:    	movq   QWORD PTR [rsp+0x8],xmm3
  002fa:    	movq   QWORD PTR [rsp+0x10],xmm4
  00300:    	mov    rdx,rdi
  00303:    	mov    QWORD PTR [rsp-0x40],rcx
  00308: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00311:    	lea    rcx,[r14-0x58]
  00315: 00 	mov    r8,0x3
  0031c:    	mov    rsi,QWORD PTR [rbx]
  0031f:    	mov    QWORD PTR [rsp-0x18],rsi
  00324:    	lea    rsi,[rsp-0x18]
  00329:    	mov    QWORD PTR [rbx],rsi
  0032c:    	lea    r14,[rsp-0x10]
  00331:    	mov    QWORD PTR [rsp-0x20],r14
  00336:    	call   0x3190c
  0033b:    	lea    r14,[rbp-0x8]
  0033f:    	mov    QWORD PTR [rbx],r14
  00342:    	mov    r14,QWORD PTR [rbp-0x10]
  00346:    	movq   xmm2,QWORD PTR [rsp]
  0034b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00351:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00357:    	add    rsp,0x20
  0035b:    	test   rax,rax
  0035e:    	je     0x3193e
  00364:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00368:    	sub    rsp,0x20
  0036c:    	movq   QWORD PTR [rsp],xmm2
  00371:    	movq   QWORD PTR [rsp+0x8],xmm3
  00377:    	movq   QWORD PTR [rsp+0x10],xmm4
  0037d:    	mov    rdx,QWORD PTR [r14-0x38]
  00381:    	mov    rcx,QWORD PTR [r14-0x48]
  00385:    	mov    r8,QWORD PTR [r14-0x50]
  00389:    	mov    rdi,rbx
  0038c:    	mov    rsi,r12
  0038f: 92 	movabs r9,0x5592e73f7668
  00399: 92 	movabs rax,0x5592e6e49180
  003a3:    	call   rax
  003a5:    	movq   xmm2,QWORD PTR [rsp]
  003aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003b6:    	add    rsp,0x20
  003ba:    	test   rax,rax
  003bd:    	je     0x3194d
:00020 %3 = %2.call x()                     [Vec]
  003c3:    	mov    rdi,QWORD PTR [r14-0x40]
  003c7: 00 	test   rdi,0x7
  003ce:    	jne    0x3195c
  003d4:    	cmp    DWORD PTR [rdi+0x4],0x2b
  003d8:    	jne    0x3195c
  003de: 26 	cmp    DWORD PTR [rip+0xfffffffffffee6e6],0x26        # 0xfffeeacb
  003e5:    	jne    0x3195c
  003eb:    	mov    esi,DWORD PTR [rip+0x15a3]        # 0x1994
  003f1:    	cmp    esi,0xffffffff
  003f4:    	je     0x3196b
  003fa:    	cmp    WORD PTR [rdi+0x2],0x3
  003ff:    	jne    0x418
  00405:    	cmp    esi,0x6
  00408:    	jge    0x418
  0040e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00413:    	jmp    0x44e
  00418:    	sub    rsp,0x20
  0041c:    	movq   QWORD PTR [rsp],xmm2
  00421:    	movq   QWORD PTR [rsp+0x8],xmm3
  00427:    	movq   QWORD PTR [rsp+0x10],xmm4
  0042d: 92 	movabs rax,0x5592e6dd3800
  00437:    	call   rax
  00439:    	movq   xmm2,QWORD PTR [rsp]
  0043e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00444:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044a:    	add    rsp,0x20
  0044e:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00452: 00 	movq   xmm5,QWORD PTR [rip+0x153e]        # 0x1998
  0045a: 99 	movabs rax,0xff1999999999999a
  00464:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  00468:    	mov    rdi,QWORD PTR [r14-0x48]
  0046c: 00 	test   rdi,0x1
  00473:    	jne    0x319be
  00479: 00 	test   rdi,0x2
  00480:    	je     0x4bc
  00486:    	xorps  xmm6,xmm6
  00489: 00 	movabs rax,0x8000000000000002
  00493:    	cmp    rdi,rax
  00496:    	je     0x4ce
  0049c:    	mov    rax,rdi
  0049f:    	sar    rax,0x3f
  004a3:    	add    rax,0x2
  004a7:    	and    rdi,0xfffffffffffffffc
  004ab:    	or     rdi,rax
  004ae:    	rol    rdi,0x3d
  004b2:    	movq   xmm6,rdi
  004b7:    	jmp    0x4ce
  004bc:    	call   0xfffea425
  004c1:    	test   rax,rax
  004c4:    	je     0x319be
  004ca:    	movq   xmm6,xmm0
  004ce:    	ucomisd xmm6,xmm5
  004d2:    	jae    0x31aec
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  004d8:    	mov    rdi,QWORD PTR [r14-0x40]
  004dc: 00 	test   rdi,0x7
  004e3:    	jne    0x319cd
  004e9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  004ed:    	jne    0x319cd
  004f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffee5d1],0x26        # 0xfffeeacb
  004fa:    	jne    0x319cd
  00500:    	mov    esi,DWORD PTR [rip+0x149e]        # 0x19a4
  00506:    	cmp    esi,0xffffffff
  00509:    	je     0x319dc
  0050f:    	cmp    WORD PTR [rdi+0x2],0x3
  00514:    	jne    0x52d
  0051a:    	cmp    esi,0x6
  0051d:    	jge    0x52d
  00523:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00528:    	jmp    0x56f
  0052d:    	sub    rsp,0x20
  00531:    	movq   QWORD PTR [rsp],xmm2
  00536:    	movq   QWORD PTR [rsp+0x8],xmm3
  0053c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00542:    	movq   QWORD PTR [rsp+0x18],xmm5
  00548: 92 	movabs rax,0x5592e6dd3800
  00552:    	call   rax
  00554:    	movq   xmm2,QWORD PTR [rsp]
  00559:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0055f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00565:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0056b:    	add    rsp,0x20
  0056f:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  00573: 00 	movq   xmm5,QWORD PTR [rip+0x142d]        # 0x19a8
  0057b: 99 	movabs rax,0xff1999999999999e
  00585:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  00589:    	mov    rdi,QWORD PTR [r14-0x48]
  0058d: 00 	test   rdi,0x1
  00594:    	jne    0x31a3b
  0059a: 00 	test   rdi,0x2
  005a1:    	je     0x5dd
  005a7:    	xorps  xmm6,xmm6
  005aa: 00 	movabs rax,0x8000000000000002
  005b4:    	cmp    rdi,rax
  005b7:    	je     0x5ef
  005bd:    	mov    rax,rdi
  005c0:    	sar    rax,0x3f
  005c4:    	add    rax,0x2
  005c8:    	and    rdi,0xfffffffffffffffc
  005cc:    	or     rdi,rax
  005cf:    	rol    rdi,0x3d
  005d3:    	movq   xmm6,rdi
  005d8:    	jmp    0x5ef
  005dd:    	call   0xfffea425
  005e2:    	test   rax,rax
  005e5:    	je     0x31a3b
  005eb:    	movq   xmm6,xmm0
  005ef:    	ucomisd xmm6,xmm5
  005f3:    	jbe    0x31b05
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  005f9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00601:    	mov    rdi,QWORD PTR [r14-0x38]
  00605:    	mov    rsi,QWORD PTR [r14-0x48]
  00609: 00 	test   rdi,0x7
  00610:    	jne    0x31a4a
  00616:    	cmp    DWORD PTR [rdi+0x4],0xb
  0061a:    	jne    0x31a4a
  00620: 00 	test   rsi,0x1
  00627:    	je     0x31a4a
  0062d:    	sar    rsi,1
  00630:    	sub    rsp,0x20
  00634:    	movq   QWORD PTR [rsp],xmm2
  00639:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00645:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064b: 92 	movabs rax,0x5592e6e49100
  00655:    	call   rax
  00657:    	movq   xmm2,QWORD PTR [rsp]
  0065c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00662:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00668:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066e:    	add    rsp,0x20
  00672:    	test   rax,rax
  00675:    	je     0x31a59
  0067b:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  0067f: 00 	movq   xmm5,QWORD PTR [rip+0x1331]        # 0x19b8
  00687: 00 	movabs rax,0xff80000000000002
  00691:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  00695:    	mov    rdi,QWORD PTR [r14-0x48]
  00699: 00 	test   rdi,0x7
  006a0:    	jne    0x31a68
  006a6:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006aa:    	jne    0x31a68
  006b0: 26 	cmp    DWORD PTR [rip+0xfffffffffffee414],0x26        # 0xfffeeacb
  006b7:    	jne    0x31a68
  006bd:    	mov    esi,DWORD PTR [rip+0x1301]        # 0x19c4
  006c3:    	cmp    esi,0xffffffff
  006c6:    	je     0x31a86
  006cc:    	cmp    WORD PTR [rdi+0x2],0x3
  006d1:    	jne    0x6ee
  006d7:    	cmp    esi,0x6
  006da:    	jge    0x6ee
  006e0:    	mov    rax,QWORD PTR [r14-0x50]
  006e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006e9:    	jmp    0x73d
  006ee:    	sub    rsp,0x20
  006f2:    	movq   QWORD PTR [rsp],xmm2
  006f7:    	movq   QWORD PTR [rsp+0x8],xmm3
  006fd:    	movq   QWORD PTR [rsp+0x10],xmm4
  00703:    	movq   QWORD PTR [rsp+0x18],xmm5
  00709:    	mov    rdx,QWORD PTR [r14-0x50]
  0070d: 92 	movabs rax,0x5592e6dd3a80
  00717:    	call   rax
  00719:    	movq   xmm2,QWORD PTR [rsp]
  0071e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00724:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0072a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00730:    	add    rsp,0x20
  00734:    	test   rax,rax
  00737:    	je     0x31a77
:00034 
:00035 br =>:00073
  0073d:    	jmp    0x31e9c
:00036 %3 = %2.call y()                     [<INVALID>]
  00742: 00 	cmp    DWORD PTR [rip+0x127f],0x0        # 0x19c8
  00749:    	jl     0x31b1e
  0074f:    	je     0x31b2d
  00755: 01 	sub    DWORD PTR [rip+0x126c],0x1        # 0x19c8
  0075c:    	xor    rdi,rdi
  0075f:    	jmp    0x31b1e
  00764:    	sub    rsp,0x20
  00768:    	movq   QWORD PTR [rsp],xmm2
  0076d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00773:    	movq   QWORD PTR [rsp+0x10],xmm4
  00779:    	movq   QWORD PTR [rsp+0x18],xmm5
  0077f:    	mov    rdi,QWORD PTR [r14-0x40]
  00783: 92 	movabs rax,0x5592e6de1bb0
  0078d:    	call   rax
  0078f:    	mov    r15d,eax
  00792: 92 	movabs r13,0x5592e73f7780
  0079c:    	cmp    QWORD PTR [r13+0x8],0x0
  007a1:    	je     0x31b49
  007a7:    	cmp    r15d,DWORD PTR [r13-0x8]
  007ab:    	jne    0x31b49
  007b1:    	mov    eax,DWORD PTR [rip+0xfffffffffffee314]        # 0xfffeeacb
  007b7:    	cmp    DWORD PTR [r13-0x4],eax
  007bb:    	jne    0x31b49
  007c1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007ca:    	mov    rax,QWORD PTR [r14-0x40]
  007ce:    	mov    QWORD PTR [rsp-0x40],rax
  007d3: 00 	mov    rdi,0x0
  007da: 00 	mov    QWORD PTR [rsp-0x38],0x0
  007e3:    	mov    r13,QWORD PTR [r13+0x8]
  007e7:    	mov    rax,QWORD PTR [r13+0x8]
  007eb:    	mov    QWORD PTR [rsp-0x30],rax
  007f0:    	mov    rax,QWORD PTR [r13+0x0]
  007f4:    	mov    r13,QWORD PTR [r13+0x10]
  007f8:    	mov    rsi,QWORD PTR [rbx]
  007fb:    	mov    QWORD PTR [rsp-0x18],rsi
  00800:    	lea    rsi,[rsp-0x18]
  00805:    	mov    QWORD PTR [rbx],rsi
  00808:    	lea    r14,[rsp-0x10]
  0080d:    	mov    QWORD PTR [rsp-0x20],r14
  00812:    	call   rax
  00814:    	lea    r14,[rbp-0x8]
  00818:    	mov    QWORD PTR [rbx],r14
  0081b:    	mov    r14,QWORD PTR [rbp-0x10]
  0081f:    	movq   xmm2,QWORD PTR [rsp]
  00824:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0082a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00830:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00836:    	add    rsp,0x20
  0083a:    	test   rax,rax
  0083d:    	je     0x31b8a
  00843:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00847: 00 	movq   xmm5,QWORD PTR [rip+0x1189]        # 0x19d8
  0084f: 99 	movabs rax,0xff1999999999999a
  00859:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
  0085d:    	mov    rdi,QWORD PTR [r14-0x48]
  00861:    	mov    rsi,QWORD PTR [r14-0x50]
  00865:    	sub    rsp,0x20
  00869:    	movq   QWORD PTR [rsp],xmm2
  0086e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00874:    	movq   QWORD PTR [rsp+0x10],xmm4
  0087a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00880:    	mov    rdx,rdi
  00883:    	mov    rcx,rsi
  00886:    	mov    rdi,rbx
  00889:    	mov    rsi,r12
  0088c: 92 	movabs rax,0x5592e6ded4c0
  00896:    	call   rax
  00898:    	movq   xmm2,QWORD PTR [rsp]
  0089d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008af:    	add    rsp,0x20
  008b3:    	test   rax,rax
  008b6:    	je     0x31b99
  008bc:    	or     rax,0x10
  008c0:    	cmp    rax,0x14
  008c4:    	je     0x31c66
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [<INVALID>]
  008ca:    	sub    rsp,0x20
  008ce:    	movq   QWORD PTR [rsp],xmm2
  008d3:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d9:    	movq   QWORD PTR [rsp+0x10],xmm4
  008df:    	movq   QWORD PTR [rsp+0x18],xmm5
  008e5:    	mov    rdi,QWORD PTR [r14-0x40]
  008e9: 92 	movabs rax,0x5592e6de1bb0
  008f3:    	call   rax
  008f5:    	mov    r15d,eax
  008f8: 92 	movabs r13,0x5592e73f77d0
  00902:    	cmp    QWORD PTR [r13+0x8],0x0
  00907:    	je     0x31ba8
  0090d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00911:    	jne    0x31ba8
  00917:    	mov    eax,DWORD PTR [rip+0xfffffffffffee1ae]        # 0xfffeeacb
  0091d:    	cmp    DWORD PTR [r13-0x4],eax
  00921:    	jne    0x31ba8
  00927: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00930:    	mov    rax,QWORD PTR [r14-0x40]
  00934:    	mov    QWORD PTR [rsp-0x40],rax
  00939: 00 	mov    rdi,0x0
  00940: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00949:    	mov    r13,QWORD PTR [r13+0x8]
  0094d:    	mov    rax,QWORD PTR [r13+0x8]
  00951:    	mov    QWORD PTR [rsp-0x30],rax
  00956:    	mov    rax,QWORD PTR [r13+0x0]
  0095a:    	mov    r13,QWORD PTR [r13+0x10]
  0095e:    	mov    rsi,QWORD PTR [rbx]
  00961:    	mov    QWORD PTR [rsp-0x18],rsi
  00966:    	lea    rsi,[rsp-0x18]
  0096b:    	mov    QWORD PTR [rbx],rsi
  0096e:    	lea    r14,[rsp-0x10]
  00973:    	mov    QWORD PTR [rsp-0x20],r14
  00978:    	call   rax
  0097a:    	lea    r14,[rbp-0x8]
  0097e:    	mov    QWORD PTR [rbx],r14
  00981:    	mov    r14,QWORD PTR [rbp-0x10]
  00985:    	movq   xmm2,QWORD PTR [rsp]
  0098a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00990:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00996:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0099c:    	add    rsp,0x20
  009a0:    	test   rax,rax
  009a3:    	je     0x31be9
  009a9:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  009ad: 00 	movq   xmm5,QWORD PTR [rip+0x1033]        # 0x19e8
  009b5: 99 	movabs rax,0xff1999999999999e
  009bf:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  009c3:    	mov    rdi,QWORD PTR [r14-0x48]
  009c7:    	mov    rsi,QWORD PTR [r14-0x50]
  009cb:    	sub    rsp,0x20
  009cf:    	movq   QWORD PTR [rsp],xmm2
  009d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  009da:    	movq   QWORD PTR [rsp+0x10],xmm4
  009e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  009e6:    	mov    rdx,rdi
  009e9:    	mov    rcx,rsi
  009ec:    	mov    rdi,rbx
  009ef:    	mov    rsi,r12
  009f2: 92 	movabs rax,0x5592e6dec740
  009fc:    	call   rax
  009fe:    	movq   xmm2,QWORD PTR [rsp]
  00a03:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a09:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a0f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a15:    	add    rsp,0x20
  00a19:    	test   rax,rax
  00a1c:    	je     0x31bf8
  00a22:    	or     rax,0x10
  00a26:    	cmp    rax,0x14
  00a2a:    	je     0x31c7f
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  00a30: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a38:    	sub    rsp,0x20
  00a3c:    	movq   QWORD PTR [rsp],xmm2
  00a41:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a47:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a4d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a53:    	mov    rdi,rbx
  00a56:    	mov    rsi,r12
  00a59:    	mov    rdx,QWORD PTR [r14-0x38]
  00a5d:    	mov    rcx,QWORD PTR [r14-0x48]
  00a61: 92 	movabs r8,0x5592e73f7828
  00a6b: 92 	movabs rax,0x5592e6e48fd0
  00a75:    	call   rax
  00a77:    	movq   xmm2,QWORD PTR [rsp]
  00a7c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a82:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a88:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a8e:    	add    rsp,0x20
  00a92:    	test   rax,rax
  00a95:    	je     0x31c07
  00a9b:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a9f: 00 	movq   xmm5,QWORD PTR [rip+0xf51]        # 0x19f8
  00aa7: 00 	movabs rax,0xff80000000000002
  00ab1:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00ab5:    	sub    rsp,0x20
  00ab9:    	movq   QWORD PTR [rsp],xmm2
  00abe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ac4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aca:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ad0:    	mov    rdi,QWORD PTR [r14-0x48]
  00ad4: 92 	movabs rax,0x5592e6de1bb0
  00ade:    	call   rax
  00ae0:    	mov    r15d,eax
  00ae3: 92 	movabs r13,0x5592e73f7850
  00aed:    	cmp    QWORD PTR [r13+0x8],0x0
  00af2:    	je     0x31c16
  00af8:    	cmp    r15d,DWORD PTR [r13-0x8]
  00afc:    	jne    0x31c16
  00b02:    	mov    eax,DWORD PTR [rip+0xfffffffffffedfc3]        # 0xfffeeacb
  00b08:    	cmp    DWORD PTR [r13-0x4],eax
  00b0c:    	jne    0x31c16
  00b12: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b1b:    	mov    rax,QWORD PTR [r14-0x48]
  00b1f:    	mov    QWORD PTR [rsp-0x40],rax
  00b24: 00 	mov    rdi,0x1
  00b2b:    	mov    rax,QWORD PTR [r14-0x50]
  00b2f:    	mov    QWORD PTR [rsp-0x48],rax
  00b34: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b3d:    	mov    r13,QWORD PTR [r13+0x8]
  00b41:    	mov    rax,QWORD PTR [r13+0x8]
  00b45:    	mov    QWORD PTR [rsp-0x30],rax
  00b4a:    	mov    rax,QWORD PTR [r13+0x0]
  00b4e:    	mov    r13,QWORD PTR [r13+0x10]
  00b52:    	mov    rsi,QWORD PTR [rbx]
  00b55:    	mov    QWORD PTR [rsp-0x18],rsi
  00b5a:    	lea    rsi,[rsp-0x18]
  00b5f:    	mov    QWORD PTR [rbx],rsi
  00b62:    	lea    r14,[rsp-0x10]
  00b67:    	mov    QWORD PTR [rsp-0x20],r14
  00b6c:    	call   rax
  00b6e:    	lea    r14,[rbp-0x8]
  00b72:    	mov    QWORD PTR [rbx],r14
  00b75:    	mov    r14,QWORD PTR [rbp-0x10]
  00b79:    	movq   xmm2,QWORD PTR [rsp]
  00b7e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b84:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b8a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b90:    	add    rsp,0x20
  00b94:    	test   rax,rax
  00b97:    	je     0x31c57
:00050 
:00051 br =>:00073
  00b9d:    	jmp    0x31eb5
:00052 %3 = %2.call z()                     [<INVALID>]
  00ba2: 00 	cmp    DWORD PTR [rip+0xe57],0x0        # 0x1a00
  00ba9:    	jl     0x31c98
  00baf:    	je     0x31ca7
  00bb5: 01 	sub    DWORD PTR [rip+0xe44],0x1        # 0x1a00
  00bbc:    	xor    rdi,rdi
  00bbf:    	jmp    0x31c98
  00bc4:    	sub    rsp,0x20
  00bc8:    	movq   QWORD PTR [rsp],xmm2
  00bcd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bd3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bd9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bdf:    	mov    rdi,QWORD PTR [r14-0x40]
  00be3: 92 	movabs rax,0x5592e6de1bb0
  00bed:    	call   rax
  00bef:    	mov    r15d,eax
  00bf2: 92 	movabs r13,0x5592e73f7880
  00bfc:    	cmp    QWORD PTR [r13+0x8],0x0
  00c01:    	je     0x31cc3
  00c07:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c0b:    	jne    0x31cc3
  00c11:    	mov    eax,DWORD PTR [rip+0xfffffffffffedeb4]        # 0xfffeeacb
  00c17:    	cmp    DWORD PTR [r13-0x4],eax
  00c1b:    	jne    0x31cc3
  00c21: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c2a:    	mov    rax,QWORD PTR [r14-0x40]
  00c2e:    	mov    QWORD PTR [rsp-0x40],rax
  00c33: 00 	mov    rdi,0x0
  00c3a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c43:    	mov    r13,QWORD PTR [r13+0x8]
  00c47:    	mov    rax,QWORD PTR [r13+0x8]
  00c4b:    	mov    QWORD PTR [rsp-0x30],rax
  00c50:    	mov    rax,QWORD PTR [r13+0x0]
  00c54:    	mov    r13,QWORD PTR [r13+0x10]
  00c58:    	mov    rsi,QWORD PTR [rbx]
  00c5b:    	mov    QWORD PTR [rsp-0x18],rsi
  00c60:    	lea    rsi,[rsp-0x18]
  00c65:    	mov    QWORD PTR [rbx],rsi
  00c68:    	lea    r14,[rsp-0x10]
  00c6d:    	mov    QWORD PTR [rsp-0x20],r14
  00c72:    	call   rax
  00c74:    	lea    r14,[rbp-0x8]
  00c78:    	mov    QWORD PTR [rbx],r14
  00c7b:    	mov    r14,QWORD PTR [rbp-0x10]
  00c7f:    	movq   xmm2,QWORD PTR [rsp]
  00c84:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c8a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c90:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c96:    	add    rsp,0x20
  00c9a:    	test   rax,rax
  00c9d:    	je     0x31d04
  00ca3:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00ca7: 00 	movq   xmm5,QWORD PTR [rip+0xd59]        # 0x1a08
  00caf: 99 	movabs rax,0xff1999999999999a
  00cb9:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
  00cbd:    	mov    rdi,QWORD PTR [r14-0x48]
  00cc1:    	mov    rsi,QWORD PTR [r14-0x50]
  00cc5:    	sub    rsp,0x20
  00cc9:    	movq   QWORD PTR [rsp],xmm2
  00cce:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cda:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce0:    	mov    rdx,rdi
  00ce3:    	mov    rcx,rsi
  00ce6:    	mov    rdi,rbx
  00ce9:    	mov    rsi,r12
  00cec: 92 	movabs rax,0x5592e6ded4c0
  00cf6:    	call   rax
  00cf8:    	movq   xmm2,QWORD PTR [rsp]
  00cfd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d0f:    	add    rsp,0x20
  00d13:    	test   rax,rax
  00d16:    	je     0x31d13
  00d1c:    	or     rax,0x10
  00d20:    	cmp    rax,0x14
  00d24:    	je     0x31de0
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [<INVALID>]
  00d2a:    	sub    rsp,0x20
  00d2e:    	movq   QWORD PTR [rsp],xmm2
  00d33:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d39:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d3f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d45:    	mov    rdi,QWORD PTR [r14-0x40]
  00d49: 92 	movabs rax,0x5592e6de1bb0
  00d53:    	call   rax
  00d55:    	mov    r15d,eax
  00d58: 92 	movabs r13,0x5592e73f78d0
  00d62:    	cmp    QWORD PTR [r13+0x8],0x0
  00d67:    	je     0x31d22
  00d6d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d71:    	jne    0x31d22
  00d77:    	mov    eax,DWORD PTR [rip+0xfffffffffffedd4e]        # 0xfffeeacb
  00d7d:    	cmp    DWORD PTR [r13-0x4],eax
  00d81:    	jne    0x31d22
  00d87: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d90:    	mov    rax,QWORD PTR [r14-0x40]
  00d94:    	mov    QWORD PTR [rsp-0x40],rax
  00d99: 00 	mov    rdi,0x0
  00da0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00da9:    	mov    r13,QWORD PTR [r13+0x8]
  00dad:    	mov    rax,QWORD PTR [r13+0x8]
  00db1:    	mov    QWORD PTR [rsp-0x30],rax
  00db6:    	mov    rax,QWORD PTR [r13+0x0]
  00dba:    	mov    r13,QWORD PTR [r13+0x10]
  00dbe:    	mov    rsi,QWORD PTR [rbx]
  00dc1:    	mov    QWORD PTR [rsp-0x18],rsi
  00dc6:    	lea    rsi,[rsp-0x18]
  00dcb:    	mov    QWORD PTR [rbx],rsi
  00dce:    	lea    r14,[rsp-0x10]
  00dd3:    	mov    QWORD PTR [rsp-0x20],r14
  00dd8:    	call   rax
  00dda:    	lea    r14,[rbp-0x8]
  00dde:    	mov    QWORD PTR [rbx],r14
  00de1:    	mov    r14,QWORD PTR [rbp-0x10]
  00de5:    	movq   xmm2,QWORD PTR [rsp]
  00dea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dfc:    	add    rsp,0x20
  00e00:    	test   rax,rax
  00e03:    	je     0x31d63
  00e09:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00e0d: 00 	movq   xmm5,QWORD PTR [rip+0xc03]        # 0x1a18
  00e15: 99 	movabs rax,0xff1999999999999e
  00e1f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  00e23:    	mov    rdi,QWORD PTR [r14-0x48]
  00e27:    	mov    rsi,QWORD PTR [r14-0x50]
  00e2b:    	sub    rsp,0x20
  00e2f:    	movq   QWORD PTR [rsp],xmm2
  00e34:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e40:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e46:    	mov    rdx,rdi
  00e49:    	mov    rcx,rsi
  00e4c:    	mov    rdi,rbx
  00e4f:    	mov    rsi,r12
  00e52: 92 	movabs rax,0x5592e6dec740
  00e5c:    	call   rax
  00e5e:    	movq   xmm2,QWORD PTR [rsp]
  00e63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e75:    	add    rsp,0x20
  00e79:    	test   rax,rax
  00e7c:    	je     0x31d72
  00e82:    	or     rax,0x10
  00e86:    	cmp    rax,0x14
  00e8a:    	je     0x31df9
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00e90: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eb3:    	mov    rdi,rbx
  00eb6:    	mov    rsi,r12
  00eb9:    	mov    rdx,QWORD PTR [r14-0x38]
  00ebd:    	mov    rcx,QWORD PTR [r14-0x48]
  00ec1: 92 	movabs r8,0x5592e73f7928
  00ecb: 92 	movabs rax,0x5592e6e48fd0
  00ed5:    	call   rax
  00ed7:    	movq   xmm2,QWORD PTR [rsp]
  00edc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ee2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eee:    	add    rsp,0x20
  00ef2:    	test   rax,rax
  00ef5:    	je     0x31d81
  00efb:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00eff: 00 	movq   xmm5,QWORD PTR [rip+0xb21]        # 0x1a28
  00f07: 00 	movabs rax,0xff80000000000002
  00f11:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [<INVALID>]
  00f15:    	sub    rsp,0x20
  00f19:    	movq   QWORD PTR [rsp],xmm2
  00f1e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f24:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f2a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f30:    	mov    rdi,QWORD PTR [r14-0x48]
  00f34: 92 	movabs rax,0x5592e6de1bb0
  00f3e:    	call   rax
  00f40:    	mov    r15d,eax
  00f43: 92 	movabs r13,0x5592e73f7950
  00f4d:    	cmp    QWORD PTR [r13+0x8],0x0
  00f52:    	je     0x31d90
  00f58:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f5c:    	jne    0x31d90
  00f62:    	mov    eax,DWORD PTR [rip+0xfffffffffffedb63]        # 0xfffeeacb
  00f68:    	cmp    DWORD PTR [r13-0x4],eax
  00f6c:    	jne    0x31d90
  00f72: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f7b:    	mov    rax,QWORD PTR [r14-0x48]
  00f7f:    	mov    QWORD PTR [rsp-0x40],rax
  00f84: 00 	mov    rdi,0x1
  00f8b:    	mov    rax,QWORD PTR [r14-0x50]
  00f8f:    	mov    QWORD PTR [rsp-0x48],rax
  00f94: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f9d:    	mov    r13,QWORD PTR [r13+0x8]
  00fa1:    	mov    rax,QWORD PTR [r13+0x8]
  00fa5:    	mov    QWORD PTR [rsp-0x30],rax
  00faa:    	mov    rax,QWORD PTR [r13+0x0]
  00fae:    	mov    r13,QWORD PTR [r13+0x10]
  00fb2:    	mov    rsi,QWORD PTR [rbx]
  00fb5:    	mov    QWORD PTR [rsp-0x18],rsi
  00fba:    	lea    rsi,[rsp-0x18]
  00fbf:    	mov    QWORD PTR [rbx],rsi
  00fc2:    	lea    r14,[rsp-0x10]
  00fc7:    	mov    QWORD PTR [rsp-0x20],r14
  00fcc:    	call   rax
  00fce:    	lea    r14,[rbp-0x8]
  00fd2:    	mov    QWORD PTR [rbx],r14
  00fd5:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd9:    	movq   xmm2,QWORD PTR [rsp]
  00fde:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fea:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff0:    	add    rsp,0x20
  00ff4:    	test   rax,rax
  00ff7:    	je     0x31dd1
:00066 
:00067 br =>:00073
  00ffd:    	jmp    0x31ece
:00068 %3 = 1: i32
  01002: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  0100a:    	sub    rsp,0x20
  0100e:    	movq   QWORD PTR [rsp],xmm2
  01013:    	movq   QWORD PTR [rsp+0x8],xmm3
  01019:    	movq   QWORD PTR [rsp+0x10],xmm4
  0101f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01025:    	mov    rdi,rbx
  01028:    	mov    rsi,r12
  0102b:    	mov    rdx,QWORD PTR [r14-0x38]
  0102f:    	mov    rcx,QWORD PTR [r14-0x48]
  01033: 92 	movabs r8,0x5592e73f7988
  0103d: 92 	movabs rax,0x5592e6e48fd0
  01047:    	call   rax
  01049:    	movq   xmm2,QWORD PTR [rsp]
  0104e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01054:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0105a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01060:    	add    rsp,0x20
  01064:    	test   rax,rax
  01067:    	je     0x31e12
  0106d:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  01071: 00 	movq   xmm5,QWORD PTR [rip+0x9bf]        # 0x1a38
  01079: 00 	movabs rax,0xff80000000000002
  01083:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  01087: 00 	cmp    DWORD PTR [rip+0x9b2],0x0        # 0x1a40
  0108e:    	jl     0x31e21
  01094:    	je     0x31e30
  0109a: 01 	sub    DWORD PTR [rip+0x99f],0x1        # 0x1a40
  010a1:    	xor    rdi,rdi
  010a4:    	jmp    0x31e21
  010a9:    	sub    rsp,0x20
  010ad:    	movq   QWORD PTR [rsp],xmm2
  010b2:    	movq   QWORD PTR [rsp+0x8],xmm3
  010b8:    	movq   QWORD PTR [rsp+0x10],xmm4
  010be:    	movq   QWORD PTR [rsp+0x18],xmm5
  010c4:    	mov    rdi,QWORD PTR [r14-0x48]
  010c8: 92 	movabs rax,0x5592e6de1bb0
  010d2:    	call   rax
  010d4:    	mov    r15d,eax
  010d7: 92 	movabs r13,0x5592e73f79b0
  010e1:    	cmp    QWORD PTR [r13+0x8],0x0
  010e6:    	je     0x31e4c
  010ec:    	cmp    r15d,DWORD PTR [r13-0x8]
  010f0:    	jne    0x31e4c
  010f6:    	mov    eax,DWORD PTR [rip+0xfffffffffffed9cf]        # 0xfffeeacb
  010fc:    	cmp    DWORD PTR [r13-0x4],eax
  01100:    	jne    0x31e4c
  01106: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0110f:    	mov    rax,QWORD PTR [r14-0x48]
  01113:    	mov    QWORD PTR [rsp-0x40],rax
  01118: 00 	mov    rdi,0x1
  0111f:    	mov    rax,QWORD PTR [r14-0x50]
  01123:    	mov    QWORD PTR [rsp-0x48],rax
  01128: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01131:    	mov    r13,QWORD PTR [r13+0x8]
  01135:    	mov    rax,QWORD PTR [r13+0x8]
  01139:    	mov    QWORD PTR [rsp-0x30],rax
  0113e:    	mov    rax,QWORD PTR [r13+0x0]
  01142:    	mov    r13,QWORD PTR [r13+0x10]
  01146:    	mov    rsi,QWORD PTR [rbx]
  01149:    	mov    QWORD PTR [rsp-0x18],rsi
  0114e:    	lea    rsi,[rsp-0x18]
  01153:    	mov    QWORD PTR [rbx],rsi
  01156:    	lea    r14,[rsp-0x10]
  0115b:    	mov    QWORD PTR [rsp-0x20],r14
  01160:    	call   rax
  01162:    	lea    r14,[rbp-0x8]
  01166:    	mov    QWORD PTR [rbx],r14
  01169:    	mov    r14,QWORD PTR [rbp-0x10]
  0116d:    	movq   xmm2,QWORD PTR [rsp]
  01172:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01178:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0117e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01184:    	add    rsp,0x20
  01188:    	test   rax,rax
  0118b:    	je     0x31e8d
:00072 
  01191:    	jmp    0x31ee7
:00073 %3 = 0: i32
  01196: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  0119e: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  011a6:    	mov    rdi,QWORD PTR [r14-0x38]
  011aa:    	mov    rsi,QWORD PTR [r14-0x50]
  011ae: 00 	test   rdi,0x7
  011b5:    	jne    0x31f00
  011bb:    	cmp    DWORD PTR [rdi+0x4],0xb
  011bf:    	jne    0x31f00
  011c5: 00 	test   rsi,0x1
  011cc:    	je     0x31f00
  011d2:    	sar    rsi,1
  011d5:    	sub    rsp,0x20
  011d9:    	movq   QWORD PTR [rsp],xmm2
  011de:    	movq   QWORD PTR [rsp+0x8],xmm3
  011e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ea: 92 	movabs rax,0x5592e6e49100
  011f4:    	call   rax
  011f6:    	movq   xmm2,QWORD PTR [rsp]
  011fb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01201:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01207:    	add    rsp,0x20
  0120b:    	test   rax,rax
  0120e:    	je     0x31f0f
  01214:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  01218: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  01220:    	mov    rdi,QWORD PTR [r14-0x38]
  01224:    	mov    rsi,QWORD PTR [r14-0x58]
  01228: 00 	test   rdi,0x7
  0122f:    	jne    0x31f1e
  01235:    	cmp    DWORD PTR [rdi+0x4],0xb
  01239:    	jne    0x31f1e
  0123f: 00 	test   rsi,0x1
  01246:    	je     0x31f1e
  0124c:    	sar    rsi,1
  0124f:    	sub    rsp,0x10
  01253:    	movq   QWORD PTR [rsp],xmm3
  01258:    	movq   QWORD PTR [rsp+0x8],xmm4
  0125e: 92 	movabs rax,0x5592e6e49100
  01268:    	call   rax
  0126a:    	movq   xmm3,QWORD PTR [rsp]
  0126f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01275:    	add    rsp,0x10
  01279:    	test   rax,rax
  0127c:    	je     0x31f2d
  01282:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  01286:    	mov    rdi,QWORD PTR [r14-0x50]
  0128a: 00 	test   rdi,0x7
  01291:    	jne    0x31f3c
  01297:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0129b:    	jne    0x31f3c
  012a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffed823],0x26        # 0xfffeeacb
  012a8:    	jne    0x31f3c
  012ae:    	sub    rsp,0x10
  012b2:    	movq   QWORD PTR [rsp],xmm3
  012b7:    	movq   QWORD PTR [rsp+0x8],xmm4
  012bd: 00 	cmp    DWORD PTR [rip+0xfffffffffffed80b],0x0        # 0xfffeeacf
  012c4:    	je     0x12dc
  012ca:    	mov    rdi,r12
  012cd:    	mov    rsi,QWORD PTR [rbx]
  012d0: 92 	movabs rax,0x5592e6e3ca90
  012da:    	call   rax
  012dc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012e5:    	mov    rax,QWORD PTR [r14-0x50]
  012e9:    	mov    QWORD PTR [rsp-0x40],rax
  012ee: 00 	mov    rdi,0x1
  012f5:    	mov    rax,QWORD PTR [r14-0x58]
  012f9:    	mov    QWORD PTR [rsp-0x48],rax
  012fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01307: 08 	movabs rax,0x100080000005d
  01311:    	mov    QWORD PTR [rsp-0x30],rax
  01316: 92 	movabs r13,0x5592e73a9470
  01320:    	mov    rsi,QWORD PTR [rbx]
  01323:    	mov    QWORD PTR [rsp-0x18],rsi
  01328:    	lea    rsi,[rsp-0x18]
  0132d:    	mov    QWORD PTR [rbx],rsi
  01330:    	lea    r14,[rsp-0x10]
  01335:    	mov    QWORD PTR [rsp-0x20],r14
  0133a:    	call   0xffff7245
  0133f:    	lea    r14,[rbp-0x8]
  01343:    	mov    QWORD PTR [rbx],r14
  01346:    	mov    r14,QWORD PTR [rbp-0x10]
  0134a:    	movq   xmm3,QWORD PTR [rsp]
  0134f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01355:    	add    rsp,0x10
  01359:    	test   rax,rax
  0135c:    	je     0x31f4b
  01362:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  01366:    	sub    rsp,0x10
  0136a:    	movq   QWORD PTR [rsp],xmm3
  0136f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01375:    	mov    rdx,QWORD PTR [r14-0x38]
  01379:    	mov    rcx,QWORD PTR [r14-0x48]
  0137d:    	mov    r8,QWORD PTR [r14-0x50]
  01381:    	mov    rdi,rbx
  01384:    	mov    rsi,r12
  01387: 92 	movabs r9,0x5592e73f7a38
  01391: 92 	movabs rax,0x5592e6e49180
  0139b:    	call   rax
  0139d:    	movq   xmm3,QWORD PTR [rsp]
  013a2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013a8:    	add    rsp,0x10
  013ac:    	test   rax,rax
  013af:    	je     0x31f5a
:00081 %3 = 0: i32
  013b5: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  013bd: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  013c5:    	mov    rdi,QWORD PTR [r14-0x38]
  013c9:    	mov    rsi,QWORD PTR [r14-0x50]
  013cd: 00 	test   rdi,0x7
  013d4:    	jne    0x31f69
  013da:    	cmp    DWORD PTR [rdi+0x4],0xb
  013de:    	jne    0x31f69
  013e4: 00 	test   rsi,0x1
  013eb:    	je     0x31f69
  013f1:    	sar    rsi,1
  013f4:    	sub    rsp,0x10
  013f8:    	movq   QWORD PTR [rsp],xmm3
  013fd:    	movq   QWORD PTR [rsp+0x8],xmm4
  01403: 92 	movabs rax,0x5592e6e49100
  0140d:    	call   rax
  0140f:    	movq   xmm3,QWORD PTR [rsp]
  01414:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0141a:    	add    rsp,0x10
  0141e:    	test   rax,rax
  01421:    	je     0x31f78
  01427:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  0142b:    	mov    rdi,QWORD PTR [r14-0x50]
  0142f: 00 	test   rdi,0x7
  01436:    	jne    0x31f87
  0143c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01440:    	jne    0x31f87
  01446: 26 	cmp    DWORD PTR [rip+0xfffffffffffed67e],0x26        # 0xfffeeacb
  0144d:    	jne    0x31f87
  01453:    	sub    rsp,0x10
  01457:    	movq   QWORD PTR [rsp],xmm3
  0145c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01462: 00 	cmp    DWORD PTR [rip+0xfffffffffffed666],0x0        # 0xfffeeacf
  01469:    	je     0x1481
  0146f:    	mov    rdi,r12
  01472:    	mov    rsi,QWORD PTR [rbx]
  01475: 92 	movabs rax,0x5592e6e3ca90
  0147f:    	call   rax
  01481: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0148a:    	mov    rax,QWORD PTR [r14-0x50]
  0148e:    	mov    QWORD PTR [rsp-0x40],rax
  01493: 00 	mov    rdi,0x0
  0149a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014a3: 07 	movabs rax,0x1000700000060
  014ad:    	mov    QWORD PTR [rsp-0x30],rax
  014b2: 92 	movabs r13,0x5592e73d9f90
  014bc:    	mov    rsi,QWORD PTR [rbx]
  014bf:    	mov    QWORD PTR [rsp-0x18],rsi
  014c4:    	lea    rsi,[rsp-0x18]
  014c9:    	mov    QWORD PTR [rbx],rsi
  014cc:    	lea    r14,[rsp-0x10]
  014d1:    	mov    QWORD PTR [rsp-0x20],r14
  014d6:    	call   0xfffef38b
  014db:    	lea    r14,[rbp-0x8]
  014df:    	mov    QWORD PTR [rbx],r14
  014e2:    	mov    r14,QWORD PTR [rbp-0x10]
  014e6:    	movq   xmm3,QWORD PTR [rsp]
  014eb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f1:    	add    rsp,0x10
  014f5:    	test   rax,rax
  014f8:    	je     0x31f96
  014fe:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01502:    	sub    rsp,0x10
  01506:    	movq   QWORD PTR [rsp],xmm3
  0150b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01511:    	mov    rdx,QWORD PTR [r14-0x38]
  01515:    	mov    rcx,QWORD PTR [r14-0x48]
  01519:    	mov    r8,QWORD PTR [r14-0x50]
  0151d:    	mov    rdi,rbx
  01520:    	mov    rsi,r12
  01523: 92 	movabs r9,0x5592e73f7a98
  0152d: 92 	movabs rax,0x5592e6e49180
  01537:    	call   rax
  01539:    	movq   xmm3,QWORD PTR [rsp]
  0153e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01544:    	add    rsp,0x10
  01548:    	test   rax,rax
  0154b:    	je     0x31fa5
:00087 %3 = 1: i32
  01551: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  01559: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  01561:    	mov    rdi,QWORD PTR [r14-0x38]
  01565:    	mov    rsi,QWORD PTR [r14-0x50]
  01569: 00 	test   rdi,0x7
  01570:    	jne    0x31fb4
  01576:    	cmp    DWORD PTR [rdi+0x4],0xb
  0157a:    	jne    0x31fb4
  01580: 00 	test   rsi,0x1
  01587:    	je     0x31fb4
  0158d:    	sar    rsi,1
  01590:    	sub    rsp,0x10
  01594:    	movq   QWORD PTR [rsp],xmm3
  01599:    	movq   QWORD PTR [rsp+0x8],xmm4
  0159f: 92 	movabs rax,0x5592e6e49100
  015a9:    	call   rax
  015ab:    	movq   xmm3,QWORD PTR [rsp]
  015b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b6:    	add    rsp,0x10
  015ba:    	test   rax,rax
  015bd:    	je     0x31fc3
  015c3:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  015c7: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  015cf:    	mov    rdi,QWORD PTR [r14-0x38]
  015d3:    	mov    rsi,QWORD PTR [r14-0x58]
  015d7: 00 	test   rdi,0x7
  015de:    	jne    0x31fd2
  015e4:    	cmp    DWORD PTR [rdi+0x4],0xb
  015e8:    	jne    0x31fd2
  015ee: 00 	test   rsi,0x1
  015f5:    	je     0x31fd2
  015fb:    	sar    rsi,1
  015fe:    	sub    rsp,0x10
  01602:    	movq   QWORD PTR [rsp],xmm3
  01607:    	movq   QWORD PTR [rsp+0x8],xmm4
  0160d: 92 	movabs rax,0x5592e6e49100
  01617:    	call   rax
  01619:    	movq   xmm3,QWORD PTR [rsp]
  0161e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01624:    	add    rsp,0x10
  01628:    	test   rax,rax
  0162b:    	je     0x31fe1
  01631:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  01635:    	mov    rdi,QWORD PTR [r14-0x50]
  01639: 00 	test   rdi,0x7
  01640:    	jne    0x31ff0
  01646:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0164a:    	jne    0x31ff0
  01650: 26 	cmp    DWORD PTR [rip+0xfffffffffffed474],0x26        # 0xfffeeacb
  01657:    	jne    0x31ff0
  0165d:    	sub    rsp,0x10
  01661:    	movq   QWORD PTR [rsp],xmm3
  01666:    	movq   QWORD PTR [rsp+0x8],xmm4
  0166c: 00 	cmp    DWORD PTR [rip+0xfffffffffffed45c],0x0        # 0xfffeeacf
  01673:    	je     0x168b
  01679:    	mov    rdi,r12
  0167c:    	mov    rsi,QWORD PTR [rbx]
  0167f: 92 	movabs rax,0x5592e6e3ca90
  01689:    	call   rax
  0168b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01694:    	mov    rax,QWORD PTR [r14-0x50]
  01698:    	mov    QWORD PTR [rsp-0x40],rax
  0169d: 00 	mov    rdi,0x1
  016a4:    	mov    rax,QWORD PTR [r14-0x58]
  016a8:    	mov    QWORD PTR [rsp-0x48],rax
  016ad: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016b6: 08 	movabs rax,0x100080000005d
  016c0:    	mov    QWORD PTR [rsp-0x30],rax
  016c5: 92 	movabs r13,0x5592e73a9470
  016cf:    	mov    rsi,QWORD PTR [rbx]
  016d2:    	mov    QWORD PTR [rsp-0x18],rsi
  016d7:    	lea    rsi,[rsp-0x18]
  016dc:    	mov    QWORD PTR [rbx],rsi
  016df:    	lea    r14,[rsp-0x10]
  016e4:    	mov    QWORD PTR [rsp-0x20],r14
  016e9:    	call   0xffff7245
  016ee:    	lea    r14,[rbp-0x8]
  016f2:    	mov    QWORD PTR [rbx],r14
  016f5:    	mov    r14,QWORD PTR [rbp-0x10]
  016f9:    	movq   xmm3,QWORD PTR [rsp]
  016fe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01704:    	add    rsp,0x10
  01708:    	test   rax,rax
  0170b:    	je     0x31fff
  01711:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  01715:    	sub    rsp,0x10
  01719:    	movq   QWORD PTR [rsp],xmm3
  0171e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01724:    	mov    rdx,QWORD PTR [r14-0x38]
  01728:    	mov    rcx,QWORD PTR [r14-0x48]
  0172c:    	mov    r8,QWORD PTR [r14-0x50]
  01730:    	mov    rdi,rbx
  01733:    	mov    rsi,r12
  01736: 92 	movabs r9,0x5592e73f7b18
  01740: 92 	movabs rax,0x5592e6e49180
  0174a:    	call   rax
  0174c:    	movq   xmm3,QWORD PTR [rsp]
  01751:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01757:    	add    rsp,0x10
  0175b:    	test   rax,rax
  0175e:    	je     0x3200e
:00095 %3 = 1: i32
  01764: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  0176c: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  01774:    	mov    rdi,QWORD PTR [r14-0x38]
  01778:    	mov    rsi,QWORD PTR [r14-0x50]
  0177c: 00 	test   rdi,0x7
  01783:    	jne    0x3201d
  01789:    	cmp    DWORD PTR [rdi+0x4],0xb
  0178d:    	jne    0x3201d
  01793: 00 	test   rsi,0x1
  0179a:    	je     0x3201d
  017a0:    	sar    rsi,1
  017a3:    	sub    rsp,0x10
  017a7:    	movq   QWORD PTR [rsp],xmm3
  017ac:    	movq   QWORD PTR [rsp+0x8],xmm4
  017b2: 92 	movabs rax,0x5592e6e49100
  017bc:    	call   rax
  017be:    	movq   xmm3,QWORD PTR [rsp]
  017c3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017c9:    	add    rsp,0x10
  017cd:    	test   rax,rax
  017d0:    	je     0x3202c
  017d6:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  017da:    	mov    rdi,QWORD PTR [r14-0x50]
  017de: 00 	test   rdi,0x7
  017e5:    	jne    0x3203b
  017eb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  017ef:    	jne    0x3203b
  017f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffed2cf],0x26        # 0xfffeeacb
  017fc:    	jne    0x3203b
  01802:    	sub    rsp,0x10
  01806:    	movq   QWORD PTR [rsp],xmm3
  0180b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01811: 00 	cmp    DWORD PTR [rip+0xfffffffffffed2b7],0x0        # 0xfffeeacf
  01818:    	je     0x1830
  0181e:    	mov    rdi,r12
  01821:    	mov    rsi,QWORD PTR [rbx]
  01824: 92 	movabs rax,0x5592e6e3ca90
  0182e:    	call   rax
  01830: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01839:    	mov    rax,QWORD PTR [r14-0x50]
  0183d:    	mov    QWORD PTR [rsp-0x40],rax
  01842: 00 	mov    rdi,0x0
  01849: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01852: 07 	movabs rax,0x1000700000060
  0185c:    	mov    QWORD PTR [rsp-0x30],rax
  01861: 92 	movabs r13,0x5592e73d9f90
  0186b:    	mov    rsi,QWORD PTR [rbx]
  0186e:    	mov    QWORD PTR [rsp-0x18],rsi
  01873:    	lea    rsi,[rsp-0x18]
  01878:    	mov    QWORD PTR [rbx],rsi
  0187b:    	lea    r14,[rsp-0x10]
  01880:    	mov    QWORD PTR [rsp-0x20],r14
  01885:    	call   0xfffef38b
  0188a:    	lea    r14,[rbp-0x8]
  0188e:    	mov    QWORD PTR [rbx],r14
  01891:    	mov    r14,QWORD PTR [rbp-0x10]
  01895:    	movq   xmm3,QWORD PTR [rsp]
  0189a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018a0:    	add    rsp,0x10
  018a4:    	test   rax,rax
  018a7:    	je     0x3204a
  018ad:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  018b1:    	sub    rsp,0x10
  018b5:    	movq   QWORD PTR [rsp],xmm3
  018ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  018c0:    	mov    rdx,QWORD PTR [r14-0x38]
  018c4:    	mov    rcx,QWORD PTR [r14-0x48]
  018c8:    	mov    r8,QWORD PTR [r14-0x50]
  018cc:    	mov    rdi,rbx
  018cf:    	mov    rsi,r12
  018d2: 92 	movabs r9,0x5592e73f7b78
  018dc: 92 	movabs rax,0x5592e6e49180
  018e6:    	call   rax
  018e8:    	movq   xmm3,QWORD PTR [rsp]
  018ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018f3:    	add    rsp,0x10
  018f7:    	test   rax,rax
  018fa:    	je     0x32059
:00101 %3 = %4
  01900:    	mov    rax,QWORD PTR [r14-0x50]
  01904:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  01908:    	mov    rax,QWORD PTR [r14-0x48]
  0190c:    	leave  
  0190d:    	ret    
==> start whole compile: <unnamed> FuncId(111) self_class:Scene start:[00000] bytecode:0x5592e73f7bb0
<== finished compile. elapsed:115.7µs
offset:Pos(95900) code: 6564 bytes  data: 344 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x30633
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x30633
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.inline IntegerTof()         [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x30642
  000e7: 26 	cmp    DWORD PTR [rip+0xfffffffffffecf99],0x26        # 0xfffed087
  000ee:    	jne    0x30642
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.inline IntegerTof()         [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x30651
  00128: 26 	cmp    DWORD PTR [rip+0xfffffffffffecf58],0x26        # 0xfffed087
  0012f:    	jne    0x30651
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.inline IntegerTof()         [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x3066d
  00163: 26 	cmp    DWORD PTR [rip+0xfffffffffffecf1d],0x26        # 0xfffed087
  0016a:    	jne    0x3066d
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.inline IntegerTof()         [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x30696
  001a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffecedf],0x26        # 0xfffed087
  001a8:    	jne    0x30696
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.inline IntegerTof()          [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x306cc
  001c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffeceb9],0x26        # 0xfffed087
  001ce:    	jne    0x306cc
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.inline IntegerTof()         [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x3070f
  001ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffece81],0x26        # 0xfffed087
  00206:    	jne    0x3070f
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x3075f
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xfffe89e1
  00289:    	test   rax,rax
  0028c:    	je     0x3075f
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xfffe89ad
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 16 	movq   xmm9,QWORD PTR [rip+0x16e3]        # 0x19a4
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xfffe89ad
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 16 	movq   xmm9,QWORD PTR [rip+0x16bb]        # 0x19b4
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xfffe89ad
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xfffe89ad
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x307bc
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xfffe89e1
  003b0:    	test   rax,rax
  003b3:    	je     0x307bc
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xfffe89ad
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 15 	movq   xmm9,QWORD PTR [rip+0x15dc]        # 0x19c4
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xfffe89ad
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x15b5]        # 0x19d4
:00034 %15 = literal[2.0]
  0041f: 15 	movq   xmm9,QWORD PTR [rip+0x15bc]        # 0x19e4
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xfffe89ad
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xfffe89ad
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffecc23]        # 0xfffed094
  00471: 00 	cmp    rax,QWORD PTR [rip+0x158c]        # 0x1a04
  00478:    	jne    0x30838
  0047e: 00 	mov    rax,QWORD PTR [rip+0x156f]        # 0x19f4
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 15 	movq   xmm8,QWORD PTR [rip+0x157f]        # 0x1a14
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xfffe8b05
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xfffe8b05
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xfffe8b05
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xfffe8b05
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xfffe8b05
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xfffe8b05
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xfffe8b05
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xfffe8b05
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xfffe8b05
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xfffe8b05
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x308fb
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x308fb
  00550: 26 	cmp    DWORD PTR [rip+0xfffffffffffecb30],0x26        # 0xfffed087
  00557:    	jne    0x308fb
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x3090a
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd:    	test   rax,rax
  005e0:    	je     0x3093c
  005e6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005f4: 00 	test   rdi,0x7
  005fb:    	jne    0x3094b
  00601:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00605:    	jne    0x3094b
  0060b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeca75],0x26        # 0xfffed087
  00612:    	jne    0x3094b
  00618:    	sub    rsp,0x20
  0061c:    	movq   QWORD PTR [rsp],xmm8
  00622: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00629: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  00630: 00 	cmp    DWORD PTR [rip+0xfffffffffffeca54],0x0        # 0xfffed08b
  00637:    	je     0x64f
  0063d:    	mov    rdi,r12
  00640:    	mov    rsi,QWORD PTR [rbx]
  00643: 92 	movabs rax,0x5592e6e3ca90
  0064d:    	call   rax
  0064f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00658: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0065f:    	mov    QWORD PTR [rsp-0x40],rax
  00664: 00 	mov    rdi,0x0
  0066b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00674: 07 	movabs rax,0x1000700000060
  0067e:    	mov    QWORD PTR [rsp-0x30],rax
  00683: 92 	movabs r13,0x5592e73d9f90
  0068d:    	mov    rsi,QWORD PTR [rbx]
  00690:    	mov    QWORD PTR [rsp-0x18],rsi
  00695:    	lea    rsi,[rsp-0x18]
  0069a:    	mov    QWORD PTR [rbx],rsi
  0069d:    	lea    r14,[rsp-0x10]
  006a2:    	mov    QWORD PTR [rsp-0x20],r14
  006a7:    	call   0xfffed947
  006ac:    	lea    r14,[rbp-0x8]
  006b0:    	mov    QWORD PTR [rbx],r14
  006b3:    	mov    r14,QWORD PTR [rbp-0x10]
  006b7:    	movq   xmm8,QWORD PTR [rsp]
  006bd: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006c4: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006cb:    	add    rsp,0x20
  006cf:    	test   rax,rax
  006d2:    	je     0x3095a
  006d8:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006dc: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec9b1]        # 0xfffed094
  006e3: 00 	cmp    rax,QWORD PTR [rip+0x134a]        # 0x1a34
  006ea:    	jne    0x30969
  006f0: 00 	mov    rax,QWORD PTR [rip+0x132d]        # 0x1a24
  006f7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  006fe: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec98f]        # 0xfffed094
  00705: 00 	cmp    rax,QWORD PTR [rip+0x1348]        # 0x1a54
  0070c:    	jne    0x309e4
  00712: 00 	mov    rax,QWORD PTR [rip+0x132b]        # 0x1a44
  00719: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  00720: 00 	movq   xmm2,QWORD PTR [rip+0x133c]        # 0x1a64
  00728: 00 	movabs rax,0x8000000000000002
  00732: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  00739: 00 	movq   xmm3,QWORD PTR [rip+0x1333]        # 0x1a74
  00741: 00 	movabs rax,0x8000000000000002
  0074b: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00752: 00 	movq   xmm4,QWORD PTR [rip+0x132a]        # 0x1a84
  0075a: 00 	movabs rax,0x8000000000000002
  00764: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  0076b: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00772: 00 	test   rdi,0x7
  00779:    	jne    0x30a51
  0077f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00783:    	jne    0x30a51
  00789: 26 	cmp    DWORD PTR [rip+0xfffffffffffec8f7],0x26        # 0xfffed087
  00790:    	jne    0x30a51
  00796: 00 	mov    r9,0x0
  0079d:    	sub    rsp,0x20
  007a1:    	movq   QWORD PTR [rsp],xmm2
  007a6:    	movq   QWORD PTR [rsp+0x8],xmm3
  007ac:    	movq   QWORD PTR [rsp+0x10],xmm4
  007b2:    	mov    rdx,rdi
  007b5:    	mov    QWORD PTR [rsp-0x40],rcx
  007ba: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007c3: ff 	lea    rcx,[r14-0xb0]
  007ca: 00 	mov    r8,0x3
  007d1:    	mov    rsi,QWORD PTR [rbx]
  007d4:    	mov    QWORD PTR [rsp-0x18],rsi
  007d9:    	lea    rsi,[rsp-0x18]
  007de:    	mov    QWORD PTR [rbx],rsi
  007e1:    	lea    r14,[rsp-0x10]
  007e6:    	mov    QWORD PTR [rsp-0x20],r14
  007eb:    	call   0x30a60
  007f0:    	lea    r14,[rbp-0x8]
  007f4:    	mov    QWORD PTR [rbx],r14
  007f7:    	mov    r14,QWORD PTR [rbp-0x10]
  007fb:    	movq   xmm2,QWORD PTR [rsp]
  00800:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00806:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0080c:    	add    rsp,0x20
  00810:    	test   rax,rax
  00813:    	je     0x30a92
  00819: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  00820:    	mov    rax,QWORD PTR [r14-0x80]
  00824: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  0082b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00832: 00 	test   rdi,0x7
  00839:    	jne    0x30aa1
  0083f:    	cmp    DWORD PTR [rdi+0x4],0x32
  00843:    	jne    0x30aa1
  00849: 26 	cmp    DWORD PTR [rip+0xfffffffffffec837],0x26        # 0xfffed087
  00850:    	jne    0x30aa1
  00856: 00 	mov    r9,0x0
  0085d:    	sub    rsp,0x10
  00861:    	movq   QWORD PTR [rsp],xmm3
  00866:    	movq   QWORD PTR [rsp+0x8],xmm4
  0086c:    	mov    rdx,rdi
  0086f:    	mov    QWORD PTR [rsp-0x40],rcx
  00874: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0087d: ff 	lea    rcx,[r14-0xa8]
  00884: 00 	mov    r8,0x2
  0088b:    	mov    rsi,QWORD PTR [rbx]
  0088e:    	mov    QWORD PTR [rsp-0x18],rsi
  00893:    	lea    rsi,[rsp-0x18]
  00898:    	mov    QWORD PTR [rbx],rsi
  0089b:    	lea    r14,[rsp-0x10]
  008a0:    	mov    QWORD PTR [rsp-0x20],r14
  008a5:    	call   0x30ab0
  008aa:    	lea    r14,[rbp-0x8]
  008ae:    	mov    QWORD PTR [rbx],r14
  008b1:    	mov    r14,QWORD PTR [rbp-0x10]
  008b5:    	movq   xmm3,QWORD PTR [rsp]
  008ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008c0:    	add    rsp,0x10
  008c4:    	test   rax,rax
  008c7:    	je     0x30ae2
  008cd: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008d4: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec7b9]        # 0xfffed094
  008db: 00 	cmp    rax,QWORD PTR [rip+0x11c2]        # 0x1aa4
  008e2:    	jne    0x30af1
  008e8: 00 	mov    rax,QWORD PTR [rip+0x11a5]        # 0x1a94
  008ef: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  008f6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008fd: 00 	test   rdi,0x7
  00904:    	jne    0x30b5a
  0090a:    	cmp    DWORD PTR [rdi+0x4],0x34
  0090e:    	jne    0x30b5a
  00914: 26 	cmp    DWORD PTR [rip+0xfffffffffffec76c],0x26        # 0xfffed087
  0091b:    	jne    0x30b5a
  00921: 00 	mov    r9,0x0
  00928:    	sub    rsp,0x10
  0092c:    	movq   QWORD PTR [rsp],xmm3
  00931:    	movq   QWORD PTR [rsp+0x8],xmm4
  00937:    	mov    rdx,rdi
  0093a:    	mov    QWORD PTR [rsp-0x40],rcx
  0093f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00948: ff 	lea    rcx,[r14-0xa8]
  0094f: 00 	mov    r8,0x0
  00956:    	mov    rsi,QWORD PTR [rbx]
  00959:    	mov    QWORD PTR [rsp-0x18],rsi
  0095e:    	lea    rsi,[rsp-0x18]
  00963:    	mov    QWORD PTR [rbx],rsi
  00966:    	lea    r14,[rsp-0x10]
  0096b:    	mov    QWORD PTR [rsp-0x20],r14
  00970:    	call   0x30b69
  00975:    	lea    r14,[rbp-0x8]
  00979:    	mov    QWORD PTR [rbx],r14
  0097c:    	mov    r14,QWORD PTR [rbp-0x10]
  00980:    	movq   xmm3,QWORD PTR [rsp]
  00985:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0098b:    	add    rsp,0x10
  0098f:    	test   rax,rax
  00992:    	je     0x30b9b
  00998: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  0099f:    	mov    rdi,QWORD PTR [r14-0x30]
  009a3:    	mov    rax,QWORD PTR [rdi+0x10]
  009a7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  009ae: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009b9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009c0: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009c7: 00 	test   rdi,0x7
  009ce:    	jne    0x30baa
  009d4:    	cmp    DWORD PTR [rdi+0x4],0xb
  009d8:    	jne    0x30baa
  009de: 00 	test   rsi,0x1
  009e5:    	je     0x30baa
  009eb:    	sar    rsi,1
  009ee:    	sub    rsp,0x10
  009f2:    	movq   QWORD PTR [rsp],xmm3
  009f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  009fd: 92 	movabs rax,0x5592e6e49100
  00a07:    	call   rax
  00a09:    	movq   xmm3,QWORD PTR [rsp]
  00a0e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a14:    	add    rsp,0x10
  00a18:    	test   rax,rax
  00a1b:    	je     0x30bb9
  00a21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a28: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a2f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a36: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a3d: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a44: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a4b: 00 	test   rdi,0x7
  00a52:    	jne    0x30bc8
  00a58:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a5c:    	jne    0x30bc8
  00a62: 26 	cmp    DWORD PTR [rip+0xfffffffffffec61e],0x26        # 0xfffed087
  00a69:    	jne    0x30bc8
  00a6f:    	sub    rsp,0x10
  00a73:    	movq   QWORD PTR [rsp],xmm3
  00a78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a7e: 00 	cmp    DWORD PTR [rip+0xfffffffffffec606],0x0        # 0xfffed08b
  00a85:    	je     0xa9d
  00a8b:    	mov    rdi,r12
  00a8e:    	mov    rsi,QWORD PTR [rbx]
  00a91: 92 	movabs rax,0x5592e6e3ca90
  00a9b:    	call   rax
  00a9d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aa6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00aad:    	mov    QWORD PTR [rsp-0x40],rax
  00ab2: 00 	mov    rdi,0x2
  00ab9: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00ac0:    	mov    QWORD PTR [rsp-0x48],rax
  00ac5: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00acc:    	mov    QWORD PTR [rsp-0x50],rax
  00ad1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ada: 0e 	movabs rax,0x1000e00000062
  00ae4:    	mov    QWORD PTR [rsp-0x30],rax
  00ae9: 92 	movabs r13,0x5592e73e2200
  00af3:    	mov    rsi,QWORD PTR [rbx]
  00af6:    	mov    QWORD PTR [rsp-0x18],rsi
  00afb:    	lea    rsi,[rsp-0x18]
  00b00:    	mov    QWORD PTR [rbx],rsi
  00b03:    	lea    r14,[rsp-0x10]
  00b08:    	mov    QWORD PTR [rsp-0x20],r14
  00b0d:    	call   0xfffedc40
  00b12:    	lea    r14,[rbp-0x8]
  00b16:    	mov    QWORD PTR [rbx],r14
  00b19:    	mov    r14,QWORD PTR [rbp-0x10]
  00b1d:    	movq   xmm3,QWORD PTR [rsp]
  00b22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b28:    	add    rsp,0x10
  00b2c:    	test   rax,rax
  00b2f:    	je     0x30bd7
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b35:    	mov    rdi,QWORD PTR [r14-0x30]
  00b39:    	mov    rax,QWORD PTR [rdi+0x10]
  00b3d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b44: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b4f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b56: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b5d: 00 	test   rdi,0x7
  00b64:    	jne    0x30be6
  00b6a:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b6e:    	jne    0x30be6
  00b74: 00 	test   rsi,0x1
  00b7b:    	je     0x30be6
  00b81:    	sar    rsi,1
  00b84:    	sub    rsp,0x10
  00b88:    	movq   QWORD PTR [rsp],xmm3
  00b8d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b93: 92 	movabs rax,0x5592e6e49100
  00b9d:    	call   rax
  00b9f:    	movq   xmm3,QWORD PTR [rsp]
  00ba4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00baa:    	add    rsp,0x10
  00bae:    	test   rax,rax
  00bb1:    	je     0x30bf5
  00bb7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00bbe: ff 	mov    rax,QWORD PTR [r14-0x88]
  00bc5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00bcc: ff 	mov    rax,QWORD PTR [r14-0x90]
  00bd3: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00bda: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00be1: 00 	test   rdi,0x7
  00be8:    	jne    0x30c04
  00bee:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00bf2:    	jne    0x30c04
  00bf8: 26 	cmp    DWORD PTR [rip+0xfffffffffffec488],0x26        # 0xfffed087
  00bff:    	jne    0x30c04
  00c05:    	sub    rsp,0x10
  00c09:    	movq   QWORD PTR [rsp],xmm3
  00c0e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c14: 00 	cmp    DWORD PTR [rip+0xfffffffffffec470],0x0        # 0xfffed08b
  00c1b:    	je     0xc33
  00c21:    	mov    rdi,r12
  00c24:    	mov    rsi,QWORD PTR [rbx]
  00c27: 92 	movabs rax,0x5592e6e3ca90
  00c31:    	call   rax
  00c33: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c3c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c43:    	mov    QWORD PTR [rsp-0x40],rax
  00c48: 00 	mov    rdi,0x2
  00c4f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00c56:    	mov    QWORD PTR [rsp-0x48],rax
  00c5b: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00c62:    	mov    QWORD PTR [rsp-0x50],rax
  00c67: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c70: 0e 	movabs rax,0x1000e00000062
  00c7a:    	mov    QWORD PTR [rsp-0x30],rax
  00c7f: 92 	movabs r13,0x5592e73e2200
  00c89:    	mov    rsi,QWORD PTR [rbx]
  00c8c:    	mov    QWORD PTR [rsp-0x18],rsi
  00c91:    	lea    rsi,[rsp-0x18]
  00c96:    	mov    QWORD PTR [rbx],rsi
  00c99:    	lea    r14,[rsp-0x10]
  00c9e:    	mov    QWORD PTR [rsp-0x20],r14
  00ca3:    	call   0xfffedc40
  00ca8:    	lea    r14,[rbp-0x8]
  00cac:    	mov    QWORD PTR [rbx],r14
  00caf:    	mov    r14,QWORD PTR [rbp-0x10]
  00cb3:    	movq   xmm3,QWORD PTR [rsp]
  00cb8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cbe:    	add    rsp,0x10
  00cc2:    	test   rax,rax
  00cc5:    	je     0x30c13
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00ccb:    	mov    rdi,QWORD PTR [r14-0x30]
  00ccf:    	mov    rax,QWORD PTR [rdi+0x10]
  00cd3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00cda: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ce5: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cec: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00cf3: 00 	test   rdi,0x7
  00cfa:    	jne    0x30c22
  00d00:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d04:    	jne    0x30c22
  00d0a: 00 	test   rsi,0x1
  00d11:    	je     0x30c22
  00d17:    	sar    rsi,1
  00d1a:    	sub    rsp,0x10
  00d1e:    	movq   QWORD PTR [rsp],xmm3
  00d23:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d29: 92 	movabs rax,0x5592e6e49100
  00d33:    	call   rax
  00d35:    	movq   xmm3,QWORD PTR [rsp]
  00d3a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d40:    	add    rsp,0x10
  00d44:    	test   rax,rax
  00d47:    	je     0x30c31
  00d4d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00d54: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d5b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00d62: ff 	mov    rax,QWORD PTR [r14-0x90]
  00d69: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00d70: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d77: 00 	test   rdi,0x7
  00d7e:    	jne    0x30c40
  00d84:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00d88:    	jne    0x30c40
  00d8e: 26 	cmp    DWORD PTR [rip+0xfffffffffffec2f2],0x26        # 0xfffed087
  00d95:    	jne    0x30c40
  00d9b:    	sub    rsp,0x10
  00d9f:    	movq   QWORD PTR [rsp],xmm3
  00da4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00daa: 00 	cmp    DWORD PTR [rip+0xfffffffffffec2da],0x0        # 0xfffed08b
  00db1:    	je     0xdc9
  00db7:    	mov    rdi,r12
  00dba:    	mov    rsi,QWORD PTR [rbx]
  00dbd: 92 	movabs rax,0x5592e6e3ca90
  00dc7:    	call   rax
  00dc9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00dd2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00dd9:    	mov    QWORD PTR [rsp-0x40],rax
  00dde: 00 	mov    rdi,0x2
  00de5: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00dec:    	mov    QWORD PTR [rsp-0x48],rax
  00df1: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00df8:    	mov    QWORD PTR [rsp-0x50],rax
  00dfd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e06: 0e 	movabs rax,0x1000e00000062
  00e10:    	mov    QWORD PTR [rsp-0x30],rax
  00e15: 92 	movabs r13,0x5592e73e2200
  00e1f:    	mov    rsi,QWORD PTR [rbx]
  00e22:    	mov    QWORD PTR [rsp-0x18],rsi
  00e27:    	lea    rsi,[rsp-0x18]
  00e2c:    	mov    QWORD PTR [rbx],rsi
  00e2f:    	lea    r14,[rsp-0x10]
  00e34:    	mov    QWORD PTR [rsp-0x20],r14
  00e39:    	call   0xfffedc40
  00e3e:    	lea    r14,[rbp-0x8]
  00e42:    	mov    QWORD PTR [rbx],r14
  00e45:    	mov    r14,QWORD PTR [rbp-0x10]
  00e49:    	movq   xmm3,QWORD PTR [rsp]
  00e4e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e54:    	add    rsp,0x10
  00e58:    	test   rax,rax
  00e5b:    	je     0x30c4f
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00e61:    	mov    rdi,QWORD PTR [r14-0x30]
  00e65:    	mov    rax,QWORD PTR [rdi+0x18]
  00e69: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00e70: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e77: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00e7e: ff 	mov    rax,QWORD PTR [r14-0x90]
  00e85: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00e8c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e93: 00 	test   rdi,0x7
  00e9a:    	jne    0x30c5e
  00ea0:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00ea4:    	jne    0x30c5e
  00eaa: 26 	cmp    DWORD PTR [rip+0xfffffffffffec1d6],0x26        # 0xfffed087
  00eb1:    	jne    0x30c5e
  00eb7:    	sub    rsp,0x10
  00ebb:    	movq   QWORD PTR [rsp],xmm3
  00ec0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ec6: 00 	cmp    DWORD PTR [rip+0xfffffffffffec1be],0x0        # 0xfffed08b
  00ecd:    	je     0xee5
  00ed3:    	mov    rdi,r12
  00ed6:    	mov    rsi,QWORD PTR [rbx]
  00ed9: 92 	movabs rax,0x5592e6e3ca90
  00ee3:    	call   rax
  00ee5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00eee: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00ef5:    	mov    QWORD PTR [rsp-0x40],rax
  00efa: 00 	mov    rdi,0x2
  00f01: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00f08:    	mov    QWORD PTR [rsp-0x48],rax
  00f0d: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00f14:    	mov    QWORD PTR [rsp-0x50],rax
  00f19: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f22: 0c 	movabs rax,0x1000c00000064
  00f2c:    	mov    QWORD PTR [rsp-0x30],rax
  00f31: 92 	movabs r13,0x5592e73e8da0
  00f3b:    	mov    rsi,QWORD PTR [rbx]
  00f3e:    	mov    QWORD PTR [rsp-0x18],rsi
  00f43:    	lea    rsi,[rsp-0x18]
  00f48:    	mov    QWORD PTR [rbx],rsi
  00f4b:    	lea    r14,[rsp-0x10]
  00f50:    	mov    QWORD PTR [rsp-0x20],r14
  00f55:    	call   0xfffee20c
  00f5a:    	lea    r14,[rbp-0x8]
  00f5e:    	mov    QWORD PTR [rbx],r14
  00f61:    	mov    r14,QWORD PTR [rbp-0x10]
  00f65:    	movq   xmm3,QWORD PTR [rsp]
  00f6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f70:    	add    rsp,0x10
  00f74:    	test   rax,rax
  00f77:    	je     0x30c6d
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00f7d: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f84: 00 	test   rdi,0x7
  00f8b:    	jne    0x30c7c
  00f91:    	cmp    DWORD PTR [rdi+0x4],0x33
  00f95:    	jne    0x30c7c
  00f9b: 26 	cmp    DWORD PTR [rip+0xfffffffffffec0e5],0x26        # 0xfffed087
  00fa2:    	jne    0x30c7c
  00fa8:    	mov    esi,DWORD PTR [rip+0xb02]        # 0x1ab0
  00fae:    	cmp    esi,0xffffffff
  00fb1:    	je     0x30c8b
  00fb7:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbc:    	jne    0xfd5
  00fc2:    	cmp    esi,0x6
  00fc5:    	jge    0xfd5
  00fcb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd0:    	jmp    0xfff
  00fd5:    	sub    rsp,0x10
  00fd9:    	movq   QWORD PTR [rsp],xmm3
  00fde:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fe4: 92 	movabs rax,0x5592e6dd3800
  00fee:    	call   rax
  00ff0:    	movq   xmm3,QWORD PTR [rsp]
  00ff5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ffb:    	add    rsp,0x10
  00fff: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00119
  01006: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0100d:    	or     rax,0x10
  01011:    	cmp    rax,0x14
  01015:    	je     0x1990
:00087 %14 = %12
  0101b: ff 	mov    rax,QWORD PTR [r14-0x90]
  01022: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  01029:    	mov    rdi,QWORD PTR [r14-0x30]
  0102d: 26 	cmp    DWORD PTR [rip+0xfffffffffffec053],0x26        # 0xfffed087
  01034:    	jne    0x30cd2
  0103a:    	sub    rsp,0x10
  0103e:    	movq   QWORD PTR [rsp],xmm3
  01043:    	movq   QWORD PTR [rsp+0x8],xmm4
  01049: 00 	cmp    DWORD PTR [rip+0xfffffffffffec03b],0x0        # 0xfffed08b
  01050:    	je     0x1068
  01056:    	mov    rdi,r12
  01059:    	mov    rsi,QWORD PTR [rbx]
  0105c: 92 	movabs rax,0x5592e6e3ca90
  01066:    	call   rax
  01068: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01071:    	mov    rax,QWORD PTR [r14-0x30]
  01075:    	mov    QWORD PTR [rsp-0x40],rax
  0107a: 00 	mov    rdi,0x1
  01081: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01088:    	mov    QWORD PTR [rsp-0x48],rax
  0108d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01096: 0d 	movabs rax,0x1000d00000068
  010a0:    	mov    QWORD PTR [rsp-0x30],rax
  010a5: 92 	movabs r13,0x5592e7401830
  010af:    	mov    rsi,QWORD PTR [rbx]
  010b2:    	mov    QWORD PTR [rsp-0x18],rsi
  010b7:    	lea    rsi,[rsp-0x18]
  010bc:    	mov    QWORD PTR [rbx],rsi
  010bf:    	lea    r14,[rsp-0x10]
  010c4:    	mov    QWORD PTR [rsp-0x20],r14
  010c9:    	call   0xffff571f
  010ce:    	lea    r14,[rbp-0x8]
  010d2:    	mov    QWORD PTR [rbx],r14
  010d5:    	mov    r14,QWORD PTR [rbp-0x10]
  010d9:    	movq   xmm3,QWORD PTR [rsp]
  010de:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010e4:    	add    rsp,0x10
  010e8:    	test   rax,rax
  010eb:    	je     0x30ce1
  010f1: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  010f8:    	mov    rax,QWORD PTR [r14-0x18]
  010fc:    	mov    rax,QWORD PTR [rax]
  010ff:    	mov    rax,QWORD PTR [rax-0x28]
  01103: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  0110a:    	mov    rax,QWORD PTR [r14-0x18]
  0110e:    	mov    rax,QWORD PTR [rax]
  01111:    	mov    rax,QWORD PTR [rax-0x28]
  01115: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [Vec]
  0111c: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01123: 00 	test   rdi,0x7
  0112a:    	jne    0x30cf0
  01130:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01134:    	jne    0x30cf0
  0113a: 26 	cmp    DWORD PTR [rip+0xfffffffffffebf46],0x26        # 0xfffed087
  01141:    	jne    0x30cf0
  01147:    	mov    esi,DWORD PTR [rip+0x96b]        # 0x1ab8
  0114d:    	cmp    esi,0xffffffff
  01150:    	je     0x30cff
  01156:    	cmp    WORD PTR [rdi+0x2],0x3
  0115b:    	jne    0x1174
  01161:    	cmp    esi,0x6
  01164:    	jge    0x1174
  0116a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0116f:    	jmp    0x119e
  01174:    	sub    rsp,0x10
  01178:    	movq   QWORD PTR [rsp],xmm3
  0117d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01183: 92 	movabs rax,0x5592e6dd3800
  0118d:    	call   rax
  0118f:    	movq   xmm3,QWORD PTR [rsp]
  01194:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0119a:    	add    rsp,0x10
  0119e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [Vec]
  011a5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  011ac: 00 	test   rdi,0x7
  011b3:    	jne    0x30d46
  011b9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011bd:    	jne    0x30d46
  011c3: 26 	cmp    DWORD PTR [rip+0xfffffffffffebebd],0x26        # 0xfffed087
  011ca:    	jne    0x30d46
  011d0:    	mov    esi,DWORD PTR [rip+0x8ea]        # 0x1ac0
  011d6:    	cmp    esi,0xffffffff
  011d9:    	je     0x30d55
  011df:    	cmp    WORD PTR [rdi+0x2],0x3
  011e4:    	jne    0x11fd
  011ea:    	cmp    esi,0x6
  011ed:    	jge    0x11fd
  011f3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011f8:    	jmp    0x1227
  011fd:    	sub    rsp,0x10
  01201:    	movq   QWORD PTR [rsp],xmm3
  01206:    	movq   QWORD PTR [rsp+0x8],xmm4
  0120c: 92 	movabs rax,0x5592e6dd3800
  01216:    	call   rax
  01218:    	movq   xmm3,QWORD PTR [rsp]
  0121d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01223:    	add    rsp,0x10
  01227: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [Float][Float]
  0122e: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01235: 00 	test   rdi,0x1
  0123c:    	jne    0x30d9c
  01242: 00 	test   rdi,0x2
  01249:    	je     0x1285
  0124f:    	xorps  xmm2,xmm2
  01252: 00 	movabs rax,0x8000000000000002
  0125c:    	cmp    rdi,rax
  0125f:    	je     0x1297
  01265:    	mov    rax,rdi
  01268:    	sar    rax,0x3f
  0126c:    	add    rax,0x2
  01270:    	and    rdi,0xfffffffffffffffc
  01274:    	or     rdi,rax
  01277:    	rol    rdi,0x3d
  0127b:    	movq   xmm2,rdi
  01280:    	jmp    0x1297
  01285:    	call   0xfffe89e1
  0128a:    	test   rax,rax
  0128d:    	je     0x30d9c
  01293:    	movq   xmm2,xmm0
  01297: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  0129e: 00 	test   rdi,0x1
  012a5:    	jne    0x30dab
  012ab: 00 	test   rdi,0x2
  012b2:    	je     0x12ee
  012b8:    	xorps  xmm5,xmm5
  012bb: 00 	movabs rax,0x8000000000000002
  012c5:    	cmp    rdi,rax
  012c8:    	je     0x1300
  012ce:    	mov    rax,rdi
  012d1:    	sar    rax,0x3f
  012d5:    	add    rax,0x2
  012d9:    	and    rdi,0xfffffffffffffffc
  012dd:    	or     rdi,rax
  012e0:    	rol    rdi,0x3d
  012e4:    	movq   xmm5,rdi
  012e9:    	jmp    0x1300
  012ee:    	call   0xfffe89e1
  012f3:    	test   rax,rax
  012f6:    	je     0x30dab
  012fc:    	movq   xmm5,xmm0
  01300:    	addsd  xmm2,xmm5
:00097 _ = %14.call x=(%15; 1)              [Vec]
  01304:    	movq   xmm0,xmm2
  01308:    	call   0xfffe8b05
  0130d: ff 	mov    QWORD PTR [r14-0xa8],rax
  01314: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0131b: 00 	test   rdi,0x7
  01322:    	jne    0x30dba
  01328:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0132c:    	jne    0x30dba
  01332: 26 	cmp    DWORD PTR [rip+0xfffffffffffebd4e],0x26        # 0xfffed087
  01339:    	jne    0x30dba
  0133f:    	mov    esi,DWORD PTR [rip+0x783]        # 0x1ac8
  01345:    	cmp    esi,0xffffffff
  01348:    	je     0x30dd8
  0134e:    	cmp    WORD PTR [rdi+0x2],0x3
  01353:    	jne    0x1373
  01359:    	cmp    esi,0x6
  0135c:    	jge    0x1373
  01362: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01369:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0136e:    	jmp    0x13c5
  01373:    	sub    rsp,0x20
  01377:    	movq   QWORD PTR [rsp],xmm2
  0137c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01382:    	movq   QWORD PTR [rsp+0x10],xmm4
  01388:    	movq   QWORD PTR [rsp+0x18],xmm5
  0138e: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01395: 92 	movabs rax,0x5592e6dd3a80
  0139f:    	call   rax
  013a1:    	movq   xmm2,QWORD PTR [rsp]
  013a6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013ac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013b2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013b8:    	add    rsp,0x20
  013bc:    	test   rax,rax
  013bf:    	je     0x30dc9
:00098 
:00099 %14 = dynvar(2, %2)
  013c5:    	mov    rax,QWORD PTR [r14-0x18]
  013c9:    	mov    rax,QWORD PTR [rax]
  013cc:    	mov    rax,QWORD PTR [rax-0x28]
  013d0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  013d7:    	mov    rax,QWORD PTR [r14-0x18]
  013db:    	mov    rax,QWORD PTR [rax]
  013de:    	mov    rax,QWORD PTR [rax-0x28]
  013e2: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [Vec]
  013e9: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  013f0: 00 	test   rdi,0x7
  013f7:    	jne    0x30e41
  013fd:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01401:    	jne    0x30e41
  01407: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc79],0x26        # 0xfffed087
  0140e:    	jne    0x30e41
  01414:    	mov    esi,DWORD PTR [rip+0x6b6]        # 0x1ad0
  0141a:    	cmp    esi,0xffffffff
  0141d:    	je     0x30e50
  01423:    	cmp    WORD PTR [rdi+0x2],0x3
  01428:    	jne    0x1441
  0142e:    	cmp    esi,0x6
  01431:    	jge    0x1441
  01437:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0143c:    	jmp    0x1477
  01441:    	sub    rsp,0x20
  01445:    	movq   QWORD PTR [rsp],xmm3
  0144a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01450:    	movq   QWORD PTR [rsp+0x10],xmm5
  01456: 92 	movabs rax,0x5592e6dd3800
  01460:    	call   rax
  01462:    	movq   xmm3,QWORD PTR [rsp]
  01467:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0146d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01473:    	add    rsp,0x20
  01477: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [Vec]
  0147e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01485: 00 	test   rdi,0x7
  0148c:    	jne    0x30ea3
  01492:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01496:    	jne    0x30ea3
  0149c: 26 	cmp    DWORD PTR [rip+0xfffffffffffebbe4],0x26        # 0xfffed087
  014a3:    	jne    0x30ea3
  014a9:    	mov    esi,DWORD PTR [rip+0x629]        # 0x1ad8
  014af:    	cmp    esi,0xffffffff
  014b2:    	je     0x30eb2
  014b8:    	cmp    WORD PTR [rdi+0x2],0x3
  014bd:    	jne    0x14d6
  014c3:    	cmp    esi,0x6
  014c6:    	jge    0x14d6
  014cc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014d1:    	jmp    0x1500
  014d6:    	sub    rsp,0x10
  014da:    	movq   QWORD PTR [rsp],xmm3
  014df:    	movq   QWORD PTR [rsp+0x8],xmm4
  014e5: 92 	movabs rax,0x5592e6dd3800
  014ef:    	call   rax
  014f1:    	movq   xmm3,QWORD PTR [rsp]
  014f6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014fc:    	add    rsp,0x10
  01500: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [Float][Float]
  01507: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0150e: 00 	test   rdi,0x1
  01515:    	jne    0x30ef9
  0151b: 00 	test   rdi,0x2
  01522:    	je     0x155e
  01528:    	xorps  xmm2,xmm2
  0152b: 00 	movabs rax,0x8000000000000002
  01535:    	cmp    rdi,rax
  01538:    	je     0x1570
  0153e:    	mov    rax,rdi
  01541:    	sar    rax,0x3f
  01545:    	add    rax,0x2
  01549:    	and    rdi,0xfffffffffffffffc
  0154d:    	or     rdi,rax
  01550:    	rol    rdi,0x3d
  01554:    	movq   xmm2,rdi
  01559:    	jmp    0x1570
  0155e:    	call   0xfffe89e1
  01563:    	test   rax,rax
  01566:    	je     0x30ef9
  0156c:    	movq   xmm2,xmm0
  01570: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01577: 00 	test   rdi,0x1
  0157e:    	jne    0x30f08
  01584: 00 	test   rdi,0x2
  0158b:    	je     0x15c7
  01591:    	xorps  xmm5,xmm5
  01594: 00 	movabs rax,0x8000000000000002
  0159e:    	cmp    rdi,rax
  015a1:    	je     0x15d9
  015a7:    	mov    rax,rdi
  015aa:    	sar    rax,0x3f
  015ae:    	add    rax,0x2
  015b2:    	and    rdi,0xfffffffffffffffc
  015b6:    	or     rdi,rax
  015b9:    	rol    rdi,0x3d
  015bd:    	movq   xmm5,rdi
  015c2:    	jmp    0x15d9
  015c7:    	call   0xfffe89e1
  015cc:    	test   rax,rax
  015cf:    	je     0x30f08
  015d5:    	movq   xmm5,xmm0
  015d9:    	addsd  xmm2,xmm5
:00106 _ = %14.call y=(%15; 1)              [Vec]
  015dd:    	movq   xmm0,xmm2
  015e1:    	call   0xfffe8b05
  015e6: ff 	mov    QWORD PTR [r14-0xa8],rax
  015ed: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  015f4: 00 	test   rdi,0x7
  015fb:    	jne    0x30f17
  01601:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01605:    	jne    0x30f17
  0160b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeba75],0x26        # 0xfffed087
  01612:    	jne    0x30f17
  01618:    	mov    esi,DWORD PTR [rip+0x4c2]        # 0x1ae0
  0161e:    	cmp    esi,0xffffffff
  01621:    	je     0x30f35
  01627:    	cmp    WORD PTR [rdi+0x2],0x3
  0162c:    	jne    0x164c
  01632:    	cmp    esi,0x6
  01635:    	jge    0x164c
  0163b: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01642:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01647:    	jmp    0x169e
  0164c:    	sub    rsp,0x20
  01650:    	movq   QWORD PTR [rsp],xmm2
  01655:    	movq   QWORD PTR [rsp+0x8],xmm3
  0165b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01661:    	movq   QWORD PTR [rsp+0x18],xmm5
  01667: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0166e: 92 	movabs rax,0x5592e6dd3a80
  01678:    	call   rax
  0167a:    	movq   xmm2,QWORD PTR [rsp]
  0167f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01685:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0168b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01691:    	add    rsp,0x20
  01695:    	test   rax,rax
  01698:    	je     0x30f26
:00107 
:00108 %14 = dynvar(2, %2)
  0169e:    	mov    rax,QWORD PTR [r14-0x18]
  016a2:    	mov    rax,QWORD PTR [rax]
  016a5:    	mov    rax,QWORD PTR [rax-0x28]
  016a9: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  016b0:    	mov    rax,QWORD PTR [r14-0x18]
  016b4:    	mov    rax,QWORD PTR [rax]
  016b7:    	mov    rax,QWORD PTR [rax-0x28]
  016bb: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [Vec]
  016c2: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  016c9: 00 	test   rdi,0x7
  016d0:    	jne    0x30f9e
  016d6:    	cmp    DWORD PTR [rdi+0x4],0x2b
  016da:    	jne    0x30f9e
  016e0: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb9a0],0x26        # 0xfffed087
  016e7:    	jne    0x30f9e
  016ed:    	mov    esi,DWORD PTR [rip+0x3f5]        # 0x1ae8
  016f3:    	cmp    esi,0xffffffff
  016f6:    	je     0x30fad
  016fc:    	cmp    WORD PTR [rdi+0x2],0x3
  01701:    	jne    0x171a
  01707:    	cmp    esi,0x6
  0170a:    	jge    0x171a
  01710:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01715:    	jmp    0x1750
  0171a:    	sub    rsp,0x20
  0171e:    	movq   QWORD PTR [rsp],xmm3
  01723:    	movq   QWORD PTR [rsp+0x8],xmm4
  01729:    	movq   QWORD PTR [rsp+0x10],xmm5
  0172f: 92 	movabs rax,0x5592e6dd3800
  01739:    	call   rax
  0173b:    	movq   xmm3,QWORD PTR [rsp]
  01740:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01746:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0174c:    	add    rsp,0x20
  01750: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [Vec]
  01757: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0175e: 00 	test   rdi,0x7
  01765:    	jne    0x31000
  0176b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0176f:    	jne    0x31000
  01775: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb90b],0x26        # 0xfffed087
  0177c:    	jne    0x31000
  01782:    	mov    esi,DWORD PTR [rip+0x368]        # 0x1af0
  01788:    	cmp    esi,0xffffffff
  0178b:    	je     0x3100f
  01791:    	cmp    WORD PTR [rdi+0x2],0x3
  01796:    	jne    0x17af
  0179c:    	cmp    esi,0x6
  0179f:    	jge    0x17af
  017a5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  017aa:    	jmp    0x17d9
  017af:    	sub    rsp,0x10
  017b3:    	movq   QWORD PTR [rsp],xmm3
  017b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  017be: 92 	movabs rax,0x5592e6dd3800
  017c8:    	call   rax
  017ca:    	movq   xmm3,QWORD PTR [rsp]
  017cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017d5:    	add    rsp,0x10
  017d9: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [Float][Float]
  017e0: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  017e7: 00 	test   rdi,0x1
  017ee:    	jne    0x31056
  017f4: 00 	test   rdi,0x2
  017fb:    	je     0x1837
  01801:    	xorps  xmm2,xmm2
  01804: 00 	movabs rax,0x8000000000000002
  0180e:    	cmp    rdi,rax
  01811:    	je     0x1849
  01817:    	mov    rax,rdi
  0181a:    	sar    rax,0x3f
  0181e:    	add    rax,0x2
  01822:    	and    rdi,0xfffffffffffffffc
  01826:    	or     rdi,rax
  01829:    	rol    rdi,0x3d
  0182d:    	movq   xmm2,rdi
  01832:    	jmp    0x1849
  01837:    	call   0xfffe89e1
  0183c:    	test   rax,rax
  0183f:    	je     0x31056
  01845:    	movq   xmm2,xmm0
  01849: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01850: 00 	test   rdi,0x1
  01857:    	jne    0x31065
  0185d: 00 	test   rdi,0x2
  01864:    	je     0x18a0
  0186a:    	xorps  xmm5,xmm5
  0186d: 00 	movabs rax,0x8000000000000002
  01877:    	cmp    rdi,rax
  0187a:    	je     0x18b2
  01880:    	mov    rax,rdi
  01883:    	sar    rax,0x3f
  01887:    	add    rax,0x2
  0188b:    	and    rdi,0xfffffffffffffffc
  0188f:    	or     rdi,rax
  01892:    	rol    rdi,0x3d
  01896:    	movq   xmm5,rdi
  0189b:    	jmp    0x18b2
  018a0:    	call   0xfffe89e1
  018a5:    	test   rax,rax
  018a8:    	je     0x31065
  018ae:    	movq   xmm5,xmm0
  018b2:    	addsd  xmm2,xmm5
:00115 _ = %14.call z=(%15; 1)              [Vec]
  018b6:    	movq   xmm0,xmm2
  018ba:    	call   0xfffe8b05
  018bf: ff 	mov    QWORD PTR [r14-0xa8],rax
  018c6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  018cd: 00 	test   rdi,0x7
  018d4:    	jne    0x31074
  018da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  018de:    	jne    0x31074
  018e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb79c],0x26        # 0xfffed087
  018eb:    	jne    0x31074
  018f1:    	mov    esi,DWORD PTR [rip+0x201]        # 0x1af8
  018f7:    	cmp    esi,0xffffffff
  018fa:    	je     0x31092
  01900:    	cmp    WORD PTR [rdi+0x2],0x3
  01905:    	jne    0x1925
  0190b:    	cmp    esi,0x6
  0190e:    	jge    0x1925
  01914: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0191b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01920:    	jmp    0x1977
  01925:    	sub    rsp,0x20
  01929:    	movq   QWORD PTR [rsp],xmm2
  0192e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01934:    	movq   QWORD PTR [rsp+0x10],xmm4
  0193a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01940: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01947: 92 	movabs rax,0x5592e6dd3a80
  01951:    	call   rax
  01953:    	movq   xmm2,QWORD PTR [rsp]
  01958:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0195e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01964:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0196a:    	add    rsp,0x20
  0196e:    	test   rax,rax
  01971:    	je     0x31083
:00116 
:00117 %14 = %15
:00118 ret %14
  01977:    	movq   xmm0,xmm2
  0197b:    	call   0xfffe8b05
  01980: ff 	mov    QWORD PTR [r14-0xa0],rax
  01987: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0198e:    	leave  
  0198f:    	ret    
:00119 %14 = nil
  01990: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00120 ret %14
  0199b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  019a2:    	leave  
  019a3:    	ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x5592e73f7530
<== finished compile. elapsed:120.8µs
offset:Pos(102808) code: 6288 bytes  data: 308 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x2f5ff
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x2f60e
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x2f60e
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb53f]        # 0xfffeb598
  00059: 00 	cmp    rax,QWORD PTR [rip+0x1848]        # 0x18a8
  00060:    	jne    0x2f61d
  00066: 00 	mov    rax,QWORD PTR [rip+0x182b]        # 0x1898
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x2f668
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x2f668
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb4f8],0x26        # 0xfffeb58b
  00093:    	jne    0x2f668
  00099:    	mov    esi,DWORD PTR [rip+0x1815]        # 0x18b4
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x2f677
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 92 	movabs rax,0x5592e6dd3800
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x2f6a0
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x2f6a0
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb493],0x26        # 0xfffeb58b
  000f8:    	jne    0x2f6a0
  000fe:    	mov    esi,DWORD PTR [rip+0x17b8]        # 0x18bc
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x2f6af
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 92 	movabs rax,0x5592e6dd3800
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x2f6d8
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x2f6d8
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb42e],0x26        # 0xfffeb58b
  0015d:    	jne    0x2f6d8
  00163:    	mov    esi,DWORD PTR [rip+0x175b]        # 0x18c4
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x2f6e7
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 92 	movabs rax,0x5592e6dd3800
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x2f710
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x2f710
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb3c9],0x26        # 0xfffeb58b
  001c2:    	jne    0x2f710
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x2f71f
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x2f751
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdi,QWORD PTR [r14-0x38]
  00226:    	mov    rsi,QWORD PTR [r14-0x48]
  0022a: 00 	test   rdi,0x7
  00231:    	jne    0x2f760
  00237:    	cmp    DWORD PTR [rdi+0x4],0xb
  0023b:    	jne    0x2f760
  00241: 00 	test   rsi,0x1
  00248:    	je     0x2f760
  0024e:    	sar    rsi,1
  00251:    	mov    rdx,r12
  00254:    	mov    rcx,QWORD PTR [r14-0x50]
  00258: 92 	movabs rax,0x5592e6e49290
  00262:    	call   rax
  00264:    	test   rax,rax
  00267:    	je     0x2f76f
:00012 %3 = 1: i32
  0026d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00275: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb31c]        # 0xfffeb598
  0027c: 00 	cmp    rax,QWORD PTR [rip+0x1655]        # 0x18d8
  00283:    	jne    0x2f77e
  00289: 00 	mov    rax,QWORD PTR [rip+0x1638]        # 0x18c8
  00290:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  00294: 00 	movq   xmm2,QWORD PTR [rip+0x164c]        # 0x18e8
  0029c: 00 	movabs rax,0x8000000000000002
  002a6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002aa: 00 	movq   xmm3,QWORD PTR [rip+0x1646]        # 0x18f8
  002b2: 00 	movabs rax,0x8000000000000002
  002bc:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002c0: 00 	movq   xmm4,QWORD PTR [rip+0x1640]        # 0x1908
  002c8: 00 	movabs rax,0x8000000000000002
  002d2:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002d6:    	mov    rdi,QWORD PTR [r14-0x50]
  002da: 00 	test   rdi,0x7
  002e1:    	jne    0x2f7c9
  002e7:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002eb:    	jne    0x2f7c9
  002f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb293],0x26        # 0xfffeb58b
  002f8:    	jne    0x2f7c9
  002fe: 00 	mov    r9,0x0
  00305:    	sub    rsp,0x20
  00309:    	movq   QWORD PTR [rsp],xmm2
  0030e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00314:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031a:    	mov    rdx,rdi
  0031d:    	mov    QWORD PTR [rsp-0x40],rcx
  00322: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0032b:    	lea    rcx,[r14-0x58]
  0032f: 00 	mov    r8,0x3
  00336:    	mov    rsi,QWORD PTR [rbx]
  00339:    	mov    QWORD PTR [rsp-0x18],rsi
  0033e:    	lea    rsi,[rsp-0x18]
  00343:    	mov    QWORD PTR [rbx],rsi
  00346:    	lea    r14,[rsp-0x10]
  0034b:    	mov    QWORD PTR [rsp-0x20],r14
  00350:    	call   0x2f7d8
  00355:    	lea    r14,[rbp-0x8]
  00359:    	mov    QWORD PTR [rbx],r14
  0035c:    	mov    r14,QWORD PTR [rbp-0x10]
  00360:    	movq   xmm2,QWORD PTR [rsp]
  00365:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0036b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00371:    	add    rsp,0x20
  00375:    	test   rax,rax
  00378:    	je     0x2f80a
  0037e:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00382:    	mov    rdi,QWORD PTR [r14-0x38]
  00386:    	mov    rsi,QWORD PTR [r14-0x48]
  0038a: 00 	test   rdi,0x7
  00391:    	jne    0x2f819
  00397:    	cmp    DWORD PTR [rdi+0x4],0xb
  0039b:    	jne    0x2f819
  003a1: 00 	test   rsi,0x1
  003a8:    	je     0x2f819
  003ae:    	sar    rsi,1
  003b1:    	sub    rsp,0x20
  003b5:    	movq   QWORD PTR [rsp],xmm2
  003ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  003c6:    	mov    rdx,r12
  003c9:    	mov    rcx,QWORD PTR [r14-0x50]
  003cd: 92 	movabs rax,0x5592e6e49290
  003d7:    	call   rax
  003d9:    	movq   xmm2,QWORD PTR [rsp]
  003de:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003e4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ea:    	add    rsp,0x20
  003ee:    	test   rax,rax
  003f1:    	je     0x2f828
:00020 %3 = %2.call x()                     [Vec]
  003f7:    	mov    rdi,QWORD PTR [r14-0x40]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x2f837
  00408:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0040c:    	jne    0x2f837
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb172],0x26        # 0xfffeb58b
  00419:    	jne    0x2f837
  0041f:    	mov    esi,DWORD PTR [rip+0x14ef]        # 0x1914
  00425:    	cmp    esi,0xffffffff
  00428:    	je     0x2f846
  0042e:    	cmp    WORD PTR [rdi+0x2],0x3
  00433:    	jne    0x44c
  00439:    	cmp    esi,0x6
  0043c:    	jge    0x44c
  00442:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00447:    	jmp    0x482
  0044c:    	sub    rsp,0x20
  00450:    	movq   QWORD PTR [rsp],xmm2
  00455:    	movq   QWORD PTR [rsp+0x8],xmm3
  0045b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00461: 92 	movabs rax,0x5592e6dd3800
  0046b:    	call   rax
  0046d:    	movq   xmm2,QWORD PTR [rsp]
  00472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0047e:    	add    rsp,0x20
  00482:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00486: 00 	movq   xmm5,QWORD PTR [rip+0x148a]        # 0x1918
  0048e: 99 	movabs rax,0xff1999999999999a
  00498:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  0049c:    	mov    rdi,QWORD PTR [r14-0x48]
  004a0: 00 	test   rdi,0x1
  004a7:    	jne    0x2f899
  004ad: 00 	test   rdi,0x2
  004b4:    	je     0x4f0
  004ba:    	xorps  xmm6,xmm6
  004bd: 00 	movabs rax,0x8000000000000002
  004c7:    	cmp    rdi,rax
  004ca:    	je     0x502
  004d0:    	mov    rax,rdi
  004d3:    	sar    rax,0x3f
  004d7:    	add    rax,0x2
  004db:    	and    rdi,0xfffffffffffffffc
  004df:    	or     rdi,rax
  004e2:    	rol    rdi,0x3d
  004e6:    	movq   xmm6,rdi
  004eb:    	jmp    0x502
  004f0:    	call   0xfffe6ee5
  004f5:    	test   rax,rax
  004f8:    	je     0x2f899
  004fe:    	movq   xmm6,xmm0
  00502:    	ucomisd xmm6,xmm5
  00506:    	jae    0x2f9c7
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  0050c:    	mov    rdi,QWORD PTR [r14-0x40]
  00510: 00 	test   rdi,0x7
  00517:    	jne    0x2f8a8
  0051d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00521:    	jne    0x2f8a8
  00527: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb05d],0x26        # 0xfffeb58b
  0052e:    	jne    0x2f8a8
  00534:    	mov    esi,DWORD PTR [rip+0x13ea]        # 0x1924
  0053a:    	cmp    esi,0xffffffff
  0053d:    	je     0x2f8b7
  00543:    	cmp    WORD PTR [rdi+0x2],0x3
  00548:    	jne    0x561
  0054e:    	cmp    esi,0x6
  00551:    	jge    0x561
  00557:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0055c:    	jmp    0x5a3
  00561:    	sub    rsp,0x20
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm4
  00576:    	movq   QWORD PTR [rsp+0x18],xmm5
  0057c: 92 	movabs rax,0x5592e6dd3800
  00586:    	call   rax
  00588:    	movq   xmm2,QWORD PTR [rsp]
  0058d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00593:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00599:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0059f:    	add    rsp,0x20
  005a3:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005a7: 00 	movq   xmm5,QWORD PTR [rip+0x1379]        # 0x1928
  005af: 99 	movabs rax,0xff1999999999999e
  005b9:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  005bd:    	mov    rdi,QWORD PTR [r14-0x48]
  005c1: 00 	test   rdi,0x1
  005c8:    	jne    0x2f916
  005ce: 00 	test   rdi,0x2
  005d5:    	je     0x611
  005db:    	xorps  xmm6,xmm6
  005de: 00 	movabs rax,0x8000000000000002
  005e8:    	cmp    rdi,rax
  005eb:    	je     0x623
  005f1:    	mov    rax,rdi
  005f4:    	sar    rax,0x3f
  005f8:    	add    rax,0x2
  005fc:    	and    rdi,0xfffffffffffffffc
  00600:    	or     rdi,rax
  00603:    	rol    rdi,0x3d
  00607:    	movq   xmm6,rdi
  0060c:    	jmp    0x623
  00611:    	call   0xfffe6ee5
  00616:    	test   rax,rax
  00619:    	je     0x2f916
  0061f:    	movq   xmm6,xmm0
  00623:    	ucomisd xmm6,xmm5
  00627:    	jbe    0x2f9e0
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  0062d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00635:    	mov    rdi,QWORD PTR [r14-0x38]
  00639:    	mov    rsi,QWORD PTR [r14-0x48]
  0063d: 00 	test   rdi,0x7
  00644:    	jne    0x2f925
  0064a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0064e:    	jne    0x2f925
  00654: 00 	test   rsi,0x1
  0065b:    	je     0x2f925
  00661:    	sar    rsi,1
  00664:    	sub    rsp,0x20
  00668:    	movq   QWORD PTR [rsp],xmm2
  0066d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00673:    	movq   QWORD PTR [rsp+0x10],xmm4
  00679:    	movq   QWORD PTR [rsp+0x18],xmm5
  0067f: 92 	movabs rax,0x5592e6e49100
  00689:    	call   rax
  0068b:    	movq   xmm2,QWORD PTR [rsp]
  00690:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00696:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0069c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006a2:    	add    rsp,0x20
  006a6:    	test   rax,rax
  006a9:    	je     0x2f934
  006af:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006b3: 00 	movq   xmm5,QWORD PTR [rip+0x127d]        # 0x1938
  006bb: 00 	movabs rax,0xff80000000000002
  006c5:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006c9:    	mov    rdi,QWORD PTR [r14-0x48]
  006cd: 00 	test   rdi,0x7
  006d4:    	jne    0x2f943
  006da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006de:    	jne    0x2f943
  006e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaea0],0x26        # 0xfffeb58b
  006eb:    	jne    0x2f943
  006f1:    	mov    esi,DWORD PTR [rip+0x124d]        # 0x1944
  006f7:    	cmp    esi,0xffffffff
  006fa:    	je     0x2f961
  00700:    	cmp    WORD PTR [rdi+0x2],0x3
  00705:    	jne    0x722
  0070b:    	cmp    esi,0x6
  0070e:    	jge    0x722
  00714:    	mov    rax,QWORD PTR [r14-0x50]
  00718:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071d:    	jmp    0x771
  00722:    	sub    rsp,0x20
  00726:    	movq   QWORD PTR [rsp],xmm2
  0072b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00731:    	movq   QWORD PTR [rsp+0x10],xmm4
  00737:    	movq   QWORD PTR [rsp+0x18],xmm5
  0073d:    	mov    rdx,QWORD PTR [r14-0x50]
  00741: 92 	movabs rax,0x5592e6dd3a80
  0074b:    	call   rax
  0074d:    	movq   xmm2,QWORD PTR [rsp]
  00752:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00758:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0075e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00764:    	add    rsp,0x20
  00768:    	test   rax,rax
  0076b:    	je     0x2f952
:00034 
:00035 br =>:00073
  00771:    	jmp    0x2fde9
:00036 %3 = %2.call y()                     [Vec]
  00776:    	mov    rdi,QWORD PTR [r14-0x40]
  0077a: 00 	test   rdi,0x7
  00781:    	jne    0x2f9f9
  00787:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0078b:    	jne    0x2f9f9
  00791: 26 	cmp    DWORD PTR [rip+0xfffffffffffeadf3],0x26        # 0xfffeb58b
  00798:    	jne    0x2f9f9
  0079e:    	mov    esi,DWORD PTR [rip+0x11a8]        # 0x194c
  007a4:    	cmp    esi,0xffffffff
  007a7:    	je     0x2fa08
  007ad:    	cmp    WORD PTR [rdi+0x2],0x3
  007b2:    	jne    0x7cb
  007b8:    	cmp    esi,0x6
  007bb:    	jge    0x7cb
  007c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007c6:    	jmp    0x80d
  007cb:    	sub    rsp,0x20
  007cf:    	movq   QWORD PTR [rsp],xmm2
  007d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  007da:    	movq   QWORD PTR [rsp+0x10],xmm4
  007e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  007e6: 92 	movabs rax,0x5592e6dd3800
  007f0:    	call   rax
  007f2:    	movq   xmm2,QWORD PTR [rsp]
  007f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00803:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00809:    	add    rsp,0x20
  0080d:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00811: 00 	movq   xmm5,QWORD PTR [rip+0x113f]        # 0x1958
  00819: 99 	movabs rax,0xff1999999999999a
  00823:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
  00827:    	mov    rdi,QWORD PTR [r14-0x48]
  0082b: 00 	test   rdi,0x1
  00832:    	jne    0x2fa67
  00838: 00 	test   rdi,0x2
  0083f:    	je     0x87b
  00845:    	xorps  xmm6,xmm6
  00848: 00 	movabs rax,0x8000000000000002
  00852:    	cmp    rdi,rax
  00855:    	je     0x88d
  0085b:    	mov    rax,rdi
  0085e:    	sar    rax,0x3f
  00862:    	add    rax,0x2
  00866:    	and    rdi,0xfffffffffffffffc
  0086a:    	or     rdi,rax
  0086d:    	rol    rdi,0x3d
  00871:    	movq   xmm6,rdi
  00876:    	jmp    0x88d
  0087b:    	call   0xfffe6ee5
  00880:    	test   rax,rax
  00883:    	je     0x2fa67
  00889:    	movq   xmm6,xmm0
  0088d:    	ucomisd xmm6,xmm5
  00891:    	jae    0x2fb5f
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [<INVALID>]
  00897: 00 	cmp    DWORD PTR [rip+0x10c2],0x0        # 0x1960
  0089e:    	jl     0x2fa76
  008a4:    	je     0x2fa85
  008aa: 01 	sub    DWORD PTR [rip+0x10af],0x1        # 0x1960
  008b1:    	xor    rdi,rdi
  008b4:    	jmp    0x2fa76
  008b9:    	sub    rsp,0x20
  008bd:    	movq   QWORD PTR [rsp],xmm2
  008c2:    	movq   QWORD PTR [rsp+0x8],xmm3
  008c8:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ce:    	movq   QWORD PTR [rsp+0x18],xmm5
  008d4:    	mov    rdi,QWORD PTR [r14-0x40]
  008d8: 92 	movabs rax,0x5592e6de1bb0
  008e2:    	call   rax
  008e4:    	mov    r15d,eax
  008e7: 92 	movabs r13,0x5592e73f77d0
  008f1:    	cmp    QWORD PTR [r13+0x8],0x0
  008f6:    	je     0x2faa1
  008fc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00900:    	jne    0x2faa1
  00906:    	mov    eax,DWORD PTR [rip+0xfffffffffffeac7f]        # 0xfffeb58b
  0090c:    	cmp    DWORD PTR [r13-0x4],eax
  00910:    	jne    0x2faa1
  00916: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0091f:    	mov    rax,QWORD PTR [r14-0x40]
  00923:    	mov    QWORD PTR [rsp-0x40],rax
  00928: 00 	mov    rdi,0x0
  0092f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00938:    	mov    r13,QWORD PTR [r13+0x8]
  0093c:    	mov    rax,QWORD PTR [r13+0x8]
  00940:    	mov    QWORD PTR [rsp-0x30],rax
  00945:    	mov    rax,QWORD PTR [r13+0x0]
  00949:    	mov    r13,QWORD PTR [r13+0x10]
  0094d:    	mov    rsi,QWORD PTR [rbx]
  00950:    	mov    QWORD PTR [rsp-0x18],rsi
  00955:    	lea    rsi,[rsp-0x18]
  0095a:    	mov    QWORD PTR [rbx],rsi
  0095d:    	lea    r14,[rsp-0x10]
  00962:    	mov    QWORD PTR [rsp-0x20],r14
  00967:    	call   rax
  00969:    	lea    r14,[rbp-0x8]
  0096d:    	mov    QWORD PTR [rbx],r14
  00970:    	mov    r14,QWORD PTR [rbp-0x10]
  00974:    	movq   xmm2,QWORD PTR [rsp]
  00979:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0097f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00985:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0098b:    	add    rsp,0x20
  0098f:    	test   rax,rax
  00992:    	je     0x2fae2
  00998:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  0099c: 00 	movq   xmm5,QWORD PTR [rip+0xfc4]        # 0x1968
  009a4: 99 	movabs rax,0xff1999999999999e
  009ae:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
  009b2:    	mov    rdi,QWORD PTR [r14-0x48]
  009b6:    	mov    rsi,QWORD PTR [r14-0x50]
  009ba:    	sub    rsp,0x20
  009be:    	movq   QWORD PTR [rsp],xmm2
  009c3:    	movq   QWORD PTR [rsp+0x8],xmm3
  009c9:    	movq   QWORD PTR [rsp+0x10],xmm4
  009cf:    	movq   QWORD PTR [rsp+0x18],xmm5
  009d5:    	mov    rdx,rdi
  009d8:    	mov    rcx,rsi
  009db:    	mov    rdi,rbx
  009de:    	mov    rsi,r12
  009e1: 92 	movabs rax,0x5592e6dec740
  009eb:    	call   rax
  009ed:    	movq   xmm2,QWORD PTR [rsp]
  009f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a04:    	add    rsp,0x20
  00a08:    	test   rax,rax
  00a0b:    	je     0x2faf1
  00a11:    	or     rax,0x10
  00a15:    	cmp    rax,0x14
  00a19:    	je     0x2fb78
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  00a1f: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a27:    	sub    rsp,0x20
  00a2b:    	movq   QWORD PTR [rsp],xmm2
  00a30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a36:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a3c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a42:    	mov    rdi,rbx
  00a45:    	mov    rsi,r12
  00a48:    	mov    rdx,QWORD PTR [r14-0x38]
  00a4c:    	mov    rcx,QWORD PTR [r14-0x48]
  00a50: 92 	movabs r8,0x5592e73f7828
  00a5a: 92 	movabs rax,0x5592e6e48fd0
  00a64:    	call   rax
  00a66:    	movq   xmm2,QWORD PTR [rsp]
  00a6b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a71:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a77:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a7d:    	add    rsp,0x20
  00a81:    	test   rax,rax
  00a84:    	je     0x2fb00
  00a8a:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a8e: 00 	movq   xmm5,QWORD PTR [rip+0xee2]        # 0x1978
  00a96: 00 	movabs rax,0xff80000000000002
  00aa0:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00aa4:    	sub    rsp,0x20
  00aa8:    	movq   QWORD PTR [rsp],xmm2
  00aad:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ab3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ab9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00abf:    	mov    rdi,QWORD PTR [r14-0x48]
  00ac3: 92 	movabs rax,0x5592e6de1bb0
  00acd:    	call   rax
  00acf:    	mov    r15d,eax
  00ad2: 92 	movabs r13,0x5592e73f7850
  00adc:    	cmp    QWORD PTR [r13+0x8],0x0
  00ae1:    	je     0x2fb0f
  00ae7:    	cmp    r15d,DWORD PTR [r13-0x8]
  00aeb:    	jne    0x2fb0f
  00af1:    	mov    eax,DWORD PTR [rip+0xfffffffffffeaa94]        # 0xfffeb58b
  00af7:    	cmp    DWORD PTR [r13-0x4],eax
  00afb:    	jne    0x2fb0f
  00b01: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b0a:    	mov    rax,QWORD PTR [r14-0x48]
  00b0e:    	mov    QWORD PTR [rsp-0x40],rax
  00b13: 00 	mov    rdi,0x1
  00b1a:    	mov    rax,QWORD PTR [r14-0x50]
  00b1e:    	mov    QWORD PTR [rsp-0x48],rax
  00b23: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b2c:    	mov    r13,QWORD PTR [r13+0x8]
  00b30:    	mov    rax,QWORD PTR [r13+0x8]
  00b34:    	mov    QWORD PTR [rsp-0x30],rax
  00b39:    	mov    rax,QWORD PTR [r13+0x0]
  00b3d:    	mov    r13,QWORD PTR [r13+0x10]
  00b41:    	mov    rsi,QWORD PTR [rbx]
  00b44:    	mov    QWORD PTR [rsp-0x18],rsi
  00b49:    	lea    rsi,[rsp-0x18]
  00b4e:    	mov    QWORD PTR [rbx],rsi
  00b51:    	lea    r14,[rsp-0x10]
  00b56:    	mov    QWORD PTR [rsp-0x20],r14
  00b5b:    	call   rax
  00b5d:    	lea    r14,[rbp-0x8]
  00b61:    	mov    QWORD PTR [rbx],r14
  00b64:    	mov    r14,QWORD PTR [rbp-0x10]
  00b68:    	movq   xmm2,QWORD PTR [rsp]
  00b6d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b73:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b79:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b7f:    	add    rsp,0x20
  00b83:    	test   rax,rax
  00b86:    	je     0x2fb50
:00050 
:00051 br =>:00073
  00b8c:    	jmp    0x2fe02
:00052 %3 = %2.call z()                     [Vec]
  00b91:    	mov    rdi,QWORD PTR [r14-0x40]
  00b95: 00 	test   rdi,0x7
  00b9c:    	jne    0x2fb91
  00ba2:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ba6:    	jne    0x2fb91
  00bac: 26 	cmp    DWORD PTR [rip+0xfffffffffffea9d8],0x26        # 0xfffeb58b
  00bb3:    	jne    0x2fb91
  00bb9:    	mov    esi,DWORD PTR [rip+0xdc5]        # 0x1984
  00bbf:    	cmp    esi,0xffffffff
  00bc2:    	je     0x2fba0
  00bc8:    	cmp    WORD PTR [rdi+0x2],0x3
  00bcd:    	jne    0xbe6
  00bd3:    	cmp    esi,0x6
  00bd6:    	jge    0xbe6
  00bdc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be1:    	jmp    0xc28
  00be6:    	sub    rsp,0x20
  00bea:    	movq   QWORD PTR [rsp],xmm2
  00bef:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bf5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bfb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c01: 92 	movabs rax,0x5592e6dd3800
  00c0b:    	call   rax
  00c0d:    	movq   xmm2,QWORD PTR [rsp]
  00c12:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c18:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c1e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c24:    	add    rsp,0x20
  00c28:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00c2c: 00 	movq   xmm5,QWORD PTR [rip+0xd54]        # 0x1988
  00c34: 99 	movabs rax,0xff1999999999999a
  00c3e:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
  00c42:    	mov    rdi,QWORD PTR [r14-0x48]
  00c46: 00 	test   rdi,0x1
  00c4d:    	jne    0x2fbff
  00c53: 00 	test   rdi,0x2
  00c5a:    	je     0xc96
  00c60:    	xorps  xmm6,xmm6
  00c63: 00 	movabs rax,0x8000000000000002
  00c6d:    	cmp    rdi,rax
  00c70:    	je     0xca8
  00c76:    	mov    rax,rdi
  00c79:    	sar    rax,0x3f
  00c7d:    	add    rax,0x2
  00c81:    	and    rdi,0xfffffffffffffffc
  00c85:    	or     rdi,rax
  00c88:    	rol    rdi,0x3d
  00c8c:    	movq   xmm6,rdi
  00c91:    	jmp    0xca8
  00c96:    	call   0xfffe6ee5
  00c9b:    	test   rax,rax
  00c9e:    	je     0x2fbff
  00ca4:    	movq   xmm6,xmm0
  00ca8:    	ucomisd xmm6,xmm5
  00cac:    	jae    0x2fd2d
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [Vec]
  00cb2:    	mov    rdi,QWORD PTR [r14-0x40]
  00cb6: 00 	test   rdi,0x7
  00cbd:    	jne    0x2fc0e
  00cc3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00cc7:    	jne    0x2fc0e
  00ccd: 26 	cmp    DWORD PTR [rip+0xfffffffffffea8b7],0x26        # 0xfffeb58b
  00cd4:    	jne    0x2fc0e
  00cda:    	mov    esi,DWORD PTR [rip+0xcb4]        # 0x1994
  00ce0:    	cmp    esi,0xffffffff
  00ce3:    	je     0x2fc1d
  00ce9:    	cmp    WORD PTR [rdi+0x2],0x3
  00cee:    	jne    0xd07
  00cf4:    	cmp    esi,0x6
  00cf7:    	jge    0xd07
  00cfd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d02:    	jmp    0xd49
  00d07:    	sub    rsp,0x20
  00d0b:    	movq   QWORD PTR [rsp],xmm2
  00d10:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d16:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d22: 92 	movabs rax,0x5592e6dd3800
  00d2c:    	call   rax
  00d2e:    	movq   xmm2,QWORD PTR [rsp]
  00d33:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d39:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d3f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d45:    	add    rsp,0x20
  00d49:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00d4d: 00 	movq   xmm5,QWORD PTR [rip+0xc43]        # 0x1998
  00d55: 99 	movabs rax,0xff1999999999999e
  00d5f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
  00d63:    	mov    rdi,QWORD PTR [r14-0x48]
  00d67: 00 	test   rdi,0x1
  00d6e:    	jne    0x2fc7c
  00d74: 00 	test   rdi,0x2
  00d7b:    	je     0xdb7
  00d81:    	xorps  xmm6,xmm6
  00d84: 00 	movabs rax,0x8000000000000002
  00d8e:    	cmp    rdi,rax
  00d91:    	je     0xdc9
  00d97:    	mov    rax,rdi
  00d9a:    	sar    rax,0x3f
  00d9e:    	add    rax,0x2
  00da2:    	and    rdi,0xfffffffffffffffc
  00da6:    	or     rdi,rax
  00da9:    	rol    rdi,0x3d
  00dad:    	movq   xmm6,rdi
  00db2:    	jmp    0xdc9
  00db7:    	call   0xfffe6ee5
  00dbc:    	test   rax,rax
  00dbf:    	je     0x2fc7c
  00dc5:    	movq   xmm6,xmm0
  00dc9:    	ucomisd xmm6,xmm5
  00dcd:    	jbe    0x2fd46
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00dd3: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00ddb:    	mov    rdi,QWORD PTR [r14-0x38]
  00ddf:    	mov    rsi,QWORD PTR [r14-0x48]
  00de3: 00 	test   rdi,0x7
  00dea:    	jne    0x2fc8b
  00df0:    	cmp    DWORD PTR [rdi+0x4],0xb
  00df4:    	jne    0x2fc8b
  00dfa: 00 	test   rsi,0x1
  00e01:    	je     0x2fc8b
  00e07:    	sar    rsi,1
  00e0a:    	sub    rsp,0x20
  00e0e:    	movq   QWORD PTR [rsp],xmm2
  00e13:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e19:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e1f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e25: 92 	movabs rax,0x5592e6e49100
  00e2f:    	call   rax
  00e31:    	movq   xmm2,QWORD PTR [rsp]
  00e36:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e3c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e42:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e48:    	add    rsp,0x20
  00e4c:    	test   rax,rax
  00e4f:    	je     0x2fc9a
  00e55:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00e59: 00 	movq   xmm5,QWORD PTR [rip+0xb47]        # 0x19a8
  00e61: 00 	movabs rax,0xff80000000000002
  00e6b:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00e6f:    	mov    rdi,QWORD PTR [r14-0x48]
  00e73: 00 	test   rdi,0x7
  00e7a:    	jne    0x2fca9
  00e80:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e84:    	jne    0x2fca9
  00e8a: 26 	cmp    DWORD PTR [rip+0xfffffffffffea6fa],0x26        # 0xfffeb58b
  00e91:    	jne    0x2fca9
  00e97:    	mov    esi,DWORD PTR [rip+0xb17]        # 0x19b4
  00e9d:    	cmp    esi,0xffffffff
  00ea0:    	je     0x2fcc7
  00ea6:    	cmp    WORD PTR [rdi+0x2],0x3
  00eab:    	jne    0xec8
  00eb1:    	cmp    esi,0x6
  00eb4:    	jge    0xec8
  00eba:    	mov    rax,QWORD PTR [r14-0x50]
  00ebe:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00ec3:    	jmp    0xf17
  00ec8:    	sub    rsp,0x20
  00ecc:    	movq   QWORD PTR [rsp],xmm2
  00ed1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ed7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00edd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ee3:    	mov    rdx,QWORD PTR [r14-0x50]
  00ee7: 92 	movabs rax,0x5592e6dd3a80
  00ef1:    	call   rax
  00ef3:    	movq   xmm2,QWORD PTR [rsp]
  00ef8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00efe:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f04:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f0a:    	add    rsp,0x20
  00f0e:    	test   rax,rax
  00f11:    	je     0x2fcb8
:00066 
:00067 br =>:00073
  00f17:    	jmp    0x2fe1b
:00068 %3 = 1: i32
  00f1c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f24:    	sub    rsp,0x20
  00f28:    	movq   QWORD PTR [rsp],xmm2
  00f2d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f33:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f39:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f3f:    	mov    rdi,rbx
  00f42:    	mov    rsi,r12
  00f45:    	mov    rdx,QWORD PTR [r14-0x38]
  00f49:    	mov    rcx,QWORD PTR [r14-0x48]
  00f4d: 92 	movabs r8,0x5592e73f7988
  00f57: 92 	movabs rax,0x5592e6e48fd0
  00f61:    	call   rax
  00f63:    	movq   xmm2,QWORD PTR [rsp]
  00f68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f7a:    	add    rsp,0x20
  00f7e:    	test   rax,rax
  00f81:    	je     0x2fd5f
  00f87:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00f8b: 00 	movq   xmm5,QWORD PTR [rip+0xa25]        # 0x19b8
  00f93: 00 	movabs rax,0xff80000000000002
  00f9d:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fa1: 00 	cmp    DWORD PTR [rip+0xa18],0x0        # 0x19c0
  00fa8:    	jl     0x2fd6e
  00fae:    	je     0x2fd7d
  00fb4: 01 	sub    DWORD PTR [rip+0xa05],0x1        # 0x19c0
  00fbb:    	xor    rdi,rdi
  00fbe:    	jmp    0x2fd6e
  00fc3:    	sub    rsp,0x20
  00fc7:    	movq   QWORD PTR [rsp],xmm2
  00fcc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fd2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fd8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fde:    	mov    rdi,QWORD PTR [r14-0x48]
  00fe2: 92 	movabs rax,0x5592e6de1bb0
  00fec:    	call   rax
  00fee:    	mov    r15d,eax
  00ff1: 92 	movabs r13,0x5592e73f79b0
  00ffb:    	cmp    QWORD PTR [r13+0x8],0x0
  01000:    	je     0x2fd99
  01006:    	cmp    r15d,DWORD PTR [r13-0x8]
  0100a:    	jne    0x2fd99
  01010:    	mov    eax,DWORD PTR [rip+0xfffffffffffea575]        # 0xfffeb58b
  01016:    	cmp    DWORD PTR [r13-0x4],eax
  0101a:    	jne    0x2fd99
  01020: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01029:    	mov    rax,QWORD PTR [r14-0x48]
  0102d:    	mov    QWORD PTR [rsp-0x40],rax
  01032: 00 	mov    rdi,0x1
  01039:    	mov    rax,QWORD PTR [r14-0x50]
  0103d:    	mov    QWORD PTR [rsp-0x48],rax
  01042: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0104b:    	mov    r13,QWORD PTR [r13+0x8]
  0104f:    	mov    rax,QWORD PTR [r13+0x8]
  01053:    	mov    QWORD PTR [rsp-0x30],rax
  01058:    	mov    rax,QWORD PTR [r13+0x0]
  0105c:    	mov    r13,QWORD PTR [r13+0x10]
  01060:    	mov    rsi,QWORD PTR [rbx]
  01063:    	mov    QWORD PTR [rsp-0x18],rsi
  01068:    	lea    rsi,[rsp-0x18]
  0106d:    	mov    QWORD PTR [rbx],rsi
  01070:    	lea    r14,[rsp-0x10]
  01075:    	mov    QWORD PTR [rsp-0x20],r14
  0107a:    	call   rax
  0107c:    	lea    r14,[rbp-0x8]
  01080:    	mov    QWORD PTR [rbx],r14
  01083:    	mov    r14,QWORD PTR [rbp-0x10]
  01087:    	movq   xmm2,QWORD PTR [rsp]
  0108c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01092:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01098:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0109e:    	add    rsp,0x20
  010a2:    	test   rax,rax
  010a5:    	je     0x2fdda
:00072 
  010ab:    	jmp    0x2fe34
:00073 %3 = 0: i32
  010b0: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  010b8: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  010c0:    	mov    rdi,QWORD PTR [r14-0x38]
  010c4:    	mov    rsi,QWORD PTR [r14-0x50]
  010c8: 00 	test   rdi,0x7
  010cf:    	jne    0x2fe4d
  010d5:    	cmp    DWORD PTR [rdi+0x4],0xb
  010d9:    	jne    0x2fe4d
  010df: 00 	test   rsi,0x1
  010e6:    	je     0x2fe4d
  010ec:    	sar    rsi,1
  010ef:    	sub    rsp,0x20
  010f3:    	movq   QWORD PTR [rsp],xmm2
  010f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  010fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01104: 92 	movabs rax,0x5592e6e49100
  0110e:    	call   rax
  01110:    	movq   xmm2,QWORD PTR [rsp]
  01115:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0111b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01121:    	add    rsp,0x20
  01125:    	test   rax,rax
  01128:    	je     0x2fe5c
  0112e:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  01132: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  0113a:    	mov    rdi,QWORD PTR [r14-0x38]
  0113e:    	mov    rsi,QWORD PTR [r14-0x58]
  01142: 00 	test   rdi,0x7
  01149:    	jne    0x2fe6b
  0114f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01153:    	jne    0x2fe6b
  01159: 00 	test   rsi,0x1
  01160:    	je     0x2fe6b
  01166:    	sar    rsi,1
  01169:    	sub    rsp,0x10
  0116d:    	movq   QWORD PTR [rsp],xmm3
  01172:    	movq   QWORD PTR [rsp+0x8],xmm4
  01178: 92 	movabs rax,0x5592e6e49100
  01182:    	call   rax
  01184:    	movq   xmm3,QWORD PTR [rsp]
  01189:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0118f:    	add    rsp,0x10
  01193:    	test   rax,rax
  01196:    	je     0x2fe7a
  0119c:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  011a0:    	mov    rdi,QWORD PTR [r14-0x50]
  011a4: 00 	test   rdi,0x7
  011ab:    	jne    0x2fe89
  011b1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011b5:    	jne    0x2fe89
  011bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffea3c9],0x26        # 0xfffeb58b
  011c2:    	jne    0x2fe89
  011c8:    	sub    rsp,0x10
  011cc:    	movq   QWORD PTR [rsp],xmm3
  011d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  011d7: 00 	cmp    DWORD PTR [rip+0xfffffffffffea3b1],0x0        # 0xfffeb58f
  011de:    	je     0x11f6
  011e4:    	mov    rdi,r12
  011e7:    	mov    rsi,QWORD PTR [rbx]
  011ea: 92 	movabs rax,0x5592e6e3ca90
  011f4:    	call   rax
  011f6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011ff:    	mov    rax,QWORD PTR [r14-0x50]
  01203:    	mov    QWORD PTR [rsp-0x40],rax
  01208: 00 	mov    rdi,0x1
  0120f:    	mov    rax,QWORD PTR [r14-0x58]
  01213:    	mov    QWORD PTR [rsp-0x48],rax
  01218: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01221: 08 	movabs rax,0x100080000005d
  0122b:    	mov    QWORD PTR [rsp-0x30],rax
  01230: 92 	movabs r13,0x5592e73a9470
  0123a:    	mov    rsi,QWORD PTR [rbx]
  0123d:    	mov    QWORD PTR [rsp-0x18],rsi
  01242:    	lea    rsi,[rsp-0x18]
  01247:    	mov    QWORD PTR [rbx],rsi
  0124a:    	lea    r14,[rsp-0x10]
  0124f:    	mov    QWORD PTR [rsp-0x20],r14
  01254:    	call   0xffff3d05
  01259:    	lea    r14,[rbp-0x8]
  0125d:    	mov    QWORD PTR [rbx],r14
  01260:    	mov    r14,QWORD PTR [rbp-0x10]
  01264:    	movq   xmm3,QWORD PTR [rsp]
  01269:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126f:    	add    rsp,0x10
  01273:    	test   rax,rax
  01276:    	je     0x2fe98
  0127c:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  01280:    	mov    rdi,QWORD PTR [r14-0x38]
  01284:    	mov    rsi,QWORD PTR [r14-0x48]
  01288: 00 	test   rdi,0x7
  0128f:    	jne    0x2fea7
  01295:    	cmp    DWORD PTR [rdi+0x4],0xb
  01299:    	jne    0x2fea7
  0129f: 00 	test   rsi,0x1
  012a6:    	je     0x2fea7
  012ac:    	sar    rsi,1
  012af:    	sub    rsp,0x10
  012b3:    	movq   QWORD PTR [rsp],xmm3
  012b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  012be:    	mov    rdx,r12
  012c1:    	mov    rcx,QWORD PTR [r14-0x50]
  012c5: 92 	movabs rax,0x5592e6e49290
  012cf:    	call   rax
  012d1:    	movq   xmm3,QWORD PTR [rsp]
  012d6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012dc:    	add    rsp,0x10
  012e0:    	test   rax,rax
  012e3:    	je     0x2feb6
:00081 %3 = 0: i32
  012e9: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  012f1: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  012f9:    	mov    rdi,QWORD PTR [r14-0x38]
  012fd:    	mov    rsi,QWORD PTR [r14-0x50]
  01301: 00 	test   rdi,0x7
  01308:    	jne    0x2fec5
  0130e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01312:    	jne    0x2fec5
  01318: 00 	test   rsi,0x1
  0131f:    	je     0x2fec5
  01325:    	sar    rsi,1
  01328:    	sub    rsp,0x10
  0132c:    	movq   QWORD PTR [rsp],xmm3
  01331:    	movq   QWORD PTR [rsp+0x8],xmm4
  01337: 92 	movabs rax,0x5592e6e49100
  01341:    	call   rax
  01343:    	movq   xmm3,QWORD PTR [rsp]
  01348:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0134e:    	add    rsp,0x10
  01352:    	test   rax,rax
  01355:    	je     0x2fed4
  0135b:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  0135f:    	mov    rdi,QWORD PTR [r14-0x50]
  01363: 00 	test   rdi,0x7
  0136a:    	jne    0x2fee3
  01370:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01374:    	jne    0x2fee3
  0137a: 26 	cmp    DWORD PTR [rip+0xfffffffffffea20a],0x26        # 0xfffeb58b
  01381:    	jne    0x2fee3
  01387:    	sub    rsp,0x10
  0138b:    	movq   QWORD PTR [rsp],xmm3
  01390:    	movq   QWORD PTR [rsp+0x8],xmm4
  01396: 00 	cmp    DWORD PTR [rip+0xfffffffffffea1f2],0x0        # 0xfffeb58f
  0139d:    	je     0x13b5
  013a3:    	mov    rdi,r12
  013a6:    	mov    rsi,QWORD PTR [rbx]
  013a9: 92 	movabs rax,0x5592e6e3ca90
  013b3:    	call   rax
  013b5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013be:    	mov    rax,QWORD PTR [r14-0x50]
  013c2:    	mov    QWORD PTR [rsp-0x40],rax
  013c7: 00 	mov    rdi,0x0
  013ce: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013d7: 07 	movabs rax,0x1000700000060
  013e1:    	mov    QWORD PTR [rsp-0x30],rax
  013e6: 92 	movabs r13,0x5592e73d9f90
  013f0:    	mov    rsi,QWORD PTR [rbx]
  013f3:    	mov    QWORD PTR [rsp-0x18],rsi
  013f8:    	lea    rsi,[rsp-0x18]
  013fd:    	mov    QWORD PTR [rbx],rsi
  01400:    	lea    r14,[rsp-0x10]
  01405:    	mov    QWORD PTR [rsp-0x20],r14
  0140a:    	call   0xfffebe4b
  0140f:    	lea    r14,[rbp-0x8]
  01413:    	mov    QWORD PTR [rbx],r14
  01416:    	mov    r14,QWORD PTR [rbp-0x10]
  0141a:    	movq   xmm3,QWORD PTR [rsp]
  0141f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01425:    	add    rsp,0x10
  01429:    	test   rax,rax
  0142c:    	je     0x2fef2
  01432:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01436:    	mov    rdi,QWORD PTR [r14-0x38]
  0143a:    	mov    rsi,QWORD PTR [r14-0x48]
  0143e: 00 	test   rdi,0x7
  01445:    	jne    0x2ff01
  0144b:    	cmp    DWORD PTR [rdi+0x4],0xb
  0144f:    	jne    0x2ff01
  01455: 00 	test   rsi,0x1
  0145c:    	je     0x2ff01
  01462:    	sar    rsi,1
  01465:    	sub    rsp,0x10
  01469:    	movq   QWORD PTR [rsp],xmm3
  0146e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01474:    	mov    rdx,r12
  01477:    	mov    rcx,QWORD PTR [r14-0x50]
  0147b: 92 	movabs rax,0x5592e6e49290
  01485:    	call   rax
  01487:    	movq   xmm3,QWORD PTR [rsp]
  0148c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01492:    	add    rsp,0x10
  01496:    	test   rax,rax
  01499:    	je     0x2ff10
:00087 %3 = 1: i32
  0149f: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  014a7: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  014af:    	mov    rdi,QWORD PTR [r14-0x38]
  014b3:    	mov    rsi,QWORD PTR [r14-0x50]
  014b7: 00 	test   rdi,0x7
  014be:    	jne    0x2ff1f
  014c4:    	cmp    DWORD PTR [rdi+0x4],0xb
  014c8:    	jne    0x2ff1f
  014ce: 00 	test   rsi,0x1
  014d5:    	je     0x2ff1f
  014db:    	sar    rsi,1
  014de:    	sub    rsp,0x10
  014e2:    	movq   QWORD PTR [rsp],xmm3
  014e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014ed: 92 	movabs rax,0x5592e6e49100
  014f7:    	call   rax
  014f9:    	movq   xmm3,QWORD PTR [rsp]
  014fe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01504:    	add    rsp,0x10
  01508:    	test   rax,rax
  0150b:    	je     0x2ff2e
  01511:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01515: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  0151d:    	mov    rdi,QWORD PTR [r14-0x38]
  01521:    	mov    rsi,QWORD PTR [r14-0x58]
  01525: 00 	test   rdi,0x7
  0152c:    	jne    0x2ff3d
  01532:    	cmp    DWORD PTR [rdi+0x4],0xb
  01536:    	jne    0x2ff3d
  0153c: 00 	test   rsi,0x1
  01543:    	je     0x2ff3d
  01549:    	sar    rsi,1
  0154c:    	sub    rsp,0x10
  01550:    	movq   QWORD PTR [rsp],xmm3
  01555:    	movq   QWORD PTR [rsp+0x8],xmm4
  0155b: 92 	movabs rax,0x5592e6e49100
  01565:    	call   rax
  01567:    	movq   xmm3,QWORD PTR [rsp]
  0156c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01572:    	add    rsp,0x10
  01576:    	test   rax,rax
  01579:    	je     0x2ff4c
  0157f:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  01583:    	mov    rdi,QWORD PTR [r14-0x50]
  01587: 00 	test   rdi,0x7
  0158e:    	jne    0x2ff5b
  01594:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01598:    	jne    0x2ff5b
  0159e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9fe6],0x26        # 0xfffeb58b
  015a5:    	jne    0x2ff5b
  015ab:    	sub    rsp,0x10
  015af:    	movq   QWORD PTR [rsp],xmm3
  015b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ba: 00 	cmp    DWORD PTR [rip+0xfffffffffffe9fce],0x0        # 0xfffeb58f
  015c1:    	je     0x15d9
  015c7:    	mov    rdi,r12
  015ca:    	mov    rsi,QWORD PTR [rbx]
  015cd: 92 	movabs rax,0x5592e6e3ca90
  015d7:    	call   rax
  015d9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015e2:    	mov    rax,QWORD PTR [r14-0x50]
  015e6:    	mov    QWORD PTR [rsp-0x40],rax
  015eb: 00 	mov    rdi,0x1
  015f2:    	mov    rax,QWORD PTR [r14-0x58]
  015f6:    	mov    QWORD PTR [rsp-0x48],rax
  015fb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01604: 08 	movabs rax,0x100080000005d
  0160e:    	mov    QWORD PTR [rsp-0x30],rax
  01613: 92 	movabs r13,0x5592e73a9470
  0161d:    	mov    rsi,QWORD PTR [rbx]
  01620:    	mov    QWORD PTR [rsp-0x18],rsi
  01625:    	lea    rsi,[rsp-0x18]
  0162a:    	mov    QWORD PTR [rbx],rsi
  0162d:    	lea    r14,[rsp-0x10]
  01632:    	mov    QWORD PTR [rsp-0x20],r14
  01637:    	call   0xffff3d05
  0163c:    	lea    r14,[rbp-0x8]
  01640:    	mov    QWORD PTR [rbx],r14
  01643:    	mov    r14,QWORD PTR [rbp-0x10]
  01647:    	movq   xmm3,QWORD PTR [rsp]
  0164c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01652:    	add    rsp,0x10
  01656:    	test   rax,rax
  01659:    	je     0x2ff6a
  0165f:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  01663:    	mov    rdi,QWORD PTR [r14-0x38]
  01667:    	mov    rsi,QWORD PTR [r14-0x48]
  0166b: 00 	test   rdi,0x7
  01672:    	jne    0x2ff79
  01678:    	cmp    DWORD PTR [rdi+0x4],0xb
  0167c:    	jne    0x2ff79
  01682: 00 	test   rsi,0x1
  01689:    	je     0x2ff79
  0168f:    	sar    rsi,1
  01692:    	sub    rsp,0x10
  01696:    	movq   QWORD PTR [rsp],xmm3
  0169b:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a1:    	mov    rdx,r12
  016a4:    	mov    rcx,QWORD PTR [r14-0x50]
  016a8: 92 	movabs rax,0x5592e6e49290
  016b2:    	call   rax
  016b4:    	movq   xmm3,QWORD PTR [rsp]
  016b9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016bf:    	add    rsp,0x10
  016c3:    	test   rax,rax
  016c6:    	je     0x2ff88
:00095 %3 = 1: i32
  016cc: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  016d4: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  016dc:    	mov    rdi,QWORD PTR [r14-0x38]
  016e0:    	mov    rsi,QWORD PTR [r14-0x50]
  016e4: 00 	test   rdi,0x7
  016eb:    	jne    0x2ff97
  016f1:    	cmp    DWORD PTR [rdi+0x4],0xb
  016f5:    	jne    0x2ff97
  016fb: 00 	test   rsi,0x1
  01702:    	je     0x2ff97
  01708:    	sar    rsi,1
  0170b:    	sub    rsp,0x10
  0170f:    	movq   QWORD PTR [rsp],xmm3
  01714:    	movq   QWORD PTR [rsp+0x8],xmm4
  0171a: 92 	movabs rax,0x5592e6e49100
  01724:    	call   rax
  01726:    	movq   xmm3,QWORD PTR [rsp]
  0172b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01731:    	add    rsp,0x10
  01735:    	test   rax,rax
  01738:    	je     0x2ffa6
  0173e:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  01742:    	mov    rdi,QWORD PTR [r14-0x50]
  01746: 00 	test   rdi,0x7
  0174d:    	jne    0x2ffb5
  01753:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01757:    	jne    0x2ffb5
  0175d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9e27],0x26        # 0xfffeb58b
  01764:    	jne    0x2ffb5
  0176a:    	sub    rsp,0x10
  0176e:    	movq   QWORD PTR [rsp],xmm3
  01773:    	movq   QWORD PTR [rsp+0x8],xmm4
  01779: 00 	cmp    DWORD PTR [rip+0xfffffffffffe9e0f],0x0        # 0xfffeb58f
  01780:    	je     0x1798
  01786:    	mov    rdi,r12
  01789:    	mov    rsi,QWORD PTR [rbx]
  0178c: 92 	movabs rax,0x5592e6e3ca90
  01796:    	call   rax
  01798: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017a1:    	mov    rax,QWORD PTR [r14-0x50]
  017a5:    	mov    QWORD PTR [rsp-0x40],rax
  017aa: 00 	mov    rdi,0x0
  017b1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017ba: 07 	movabs rax,0x1000700000060
  017c4:    	mov    QWORD PTR [rsp-0x30],rax
  017c9: 92 	movabs r13,0x5592e73d9f90
  017d3:    	mov    rsi,QWORD PTR [rbx]
  017d6:    	mov    QWORD PTR [rsp-0x18],rsi
  017db:    	lea    rsi,[rsp-0x18]
  017e0:    	mov    QWORD PTR [rbx],rsi
  017e3:    	lea    r14,[rsp-0x10]
  017e8:    	mov    QWORD PTR [rsp-0x20],r14
  017ed:    	call   0xfffebe4b
  017f2:    	lea    r14,[rbp-0x8]
  017f6:    	mov    QWORD PTR [rbx],r14
  017f9:    	mov    r14,QWORD PTR [rbp-0x10]
  017fd:    	movq   xmm3,QWORD PTR [rsp]
  01802:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01808:    	add    rsp,0x10
  0180c:    	test   rax,rax
  0180f:    	je     0x2ffc4
  01815:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01819:    	mov    rdi,QWORD PTR [r14-0x38]
  0181d:    	mov    rsi,QWORD PTR [r14-0x48]
  01821: 00 	test   rdi,0x7
  01828:    	jne    0x2ffd3
  0182e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01832:    	jne    0x2ffd3
  01838: 00 	test   rsi,0x1
  0183f:    	je     0x2ffd3
  01845:    	sar    rsi,1
  01848:    	sub    rsp,0x10
  0184c:    	movq   QWORD PTR [rsp],xmm3
  01851:    	movq   QWORD PTR [rsp+0x8],xmm4
  01857:    	mov    rdx,r12
  0185a:    	mov    rcx,QWORD PTR [r14-0x50]
  0185e: 92 	movabs rax,0x5592e6e49290
  01868:    	call   rax
  0186a:    	movq   xmm3,QWORD PTR [rsp]
  0186f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01875:    	add    rsp,0x10
  01879:    	test   rax,rax
  0187c:    	je     0x2ffe2
:00101 %3 = %4
  01882:    	mov    rax,QWORD PTR [r14-0x50]
  01886:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  0188a:    	mov    rax,QWORD PTR [r14-0x48]
  0188e:    	leave  
  0188f:    	ret    
==> start whole compile: otherBasis FuncId(88) self_class:Scene start:[00000] bytecode:0x5592e73f7530
<== finished compile. elapsed:148.3µs
offset:Pos(109404) code: 6144 bytes  data: 320 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x2e62d
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x2e63c
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x2e63c
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9b7b]        # 0xfffe9bd4
  00059: 00 	cmp    rax,QWORD PTR [rip+0x17b4]        # 0x1814
  00060:    	jne    0x2e64b
  00066: 00 	mov    rax,QWORD PTR [rip+0x1797]        # 0x1804
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x2e696
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x2e696
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9b34],0x26        # 0xfffe9bc7
  00093:    	jne    0x2e696
  00099:    	mov    esi,DWORD PTR [rip+0x1781]        # 0x1820
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x2e6a5
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 92 	movabs rax,0x5592e6dd3800
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x2e6ce
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x2e6ce
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9acf],0x26        # 0xfffe9bc7
  000f8:    	jne    0x2e6ce
  000fe:    	mov    esi,DWORD PTR [rip+0x1724]        # 0x1828
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x2e6dd
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 92 	movabs rax,0x5592e6dd3800
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x2e706
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x2e706
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9a6a],0x26        # 0xfffe9bc7
  0015d:    	jne    0x2e706
  00163:    	mov    esi,DWORD PTR [rip+0x16c7]        # 0x1830
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x2e715
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 92 	movabs rax,0x5592e6dd3800
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x2e73e
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x2e73e
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9a05],0x26        # 0xfffe9bc7
  001c2:    	jne    0x2e73e
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x2e74d
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215:    	test   rax,rax
  00218:    	je     0x2e77f
  0021e:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  00222:    	mov    rdi,QWORD PTR [r14-0x38]
  00226:    	mov    rsi,QWORD PTR [r14-0x48]
  0022a: 00 	test   rdi,0x7
  00231:    	jne    0x2e78e
  00237:    	cmp    DWORD PTR [rdi+0x4],0xb
  0023b:    	jne    0x2e78e
  00241: 00 	test   rsi,0x1
  00248:    	je     0x2e78e
  0024e:    	sar    rsi,1
  00251:    	mov    rdx,r12
  00254:    	mov    rcx,QWORD PTR [r14-0x50]
  00258: 92 	movabs rax,0x5592e6e49290
  00262:    	call   rax
  00264:    	test   rax,rax
  00267:    	je     0x2e79d
:00012 %3 = 1: i32
  0026d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00275: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9958]        # 0xfffe9bd4
  0027c: 00 	cmp    rax,QWORD PTR [rip+0x15c1]        # 0x1844
  00283:    	jne    0x2e7ac
  00289: 00 	mov    rax,QWORD PTR [rip+0x15a4]        # 0x1834
  00290:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  00294: 00 	movq   xmm2,QWORD PTR [rip+0x15b8]        # 0x1854
  0029c: 00 	movabs rax,0x8000000000000002
  002a6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002aa: 00 	movq   xmm3,QWORD PTR [rip+0x15b2]        # 0x1864
  002b2: 00 	movabs rax,0x8000000000000002
  002bc:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002c0: 00 	movq   xmm4,QWORD PTR [rip+0x15ac]        # 0x1874
  002c8: 00 	movabs rax,0x8000000000000002
  002d2:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002d6:    	mov    rdi,QWORD PTR [r14-0x50]
  002da: 00 	test   rdi,0x7
  002e1:    	jne    0x2e7f7
  002e7:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002eb:    	jne    0x2e7f7
  002f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe98cf],0x26        # 0xfffe9bc7
  002f8:    	jne    0x2e7f7
  002fe: 00 	mov    r9,0x0
  00305:    	sub    rsp,0x20
  00309:    	movq   QWORD PTR [rsp],xmm2
  0030e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00314:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031a:    	mov    rdx,rdi
  0031d:    	mov    QWORD PTR [rsp-0x40],rcx
  00322: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0032b:    	lea    rcx,[r14-0x58]
  0032f: 00 	mov    r8,0x3
  00336:    	mov    rsi,QWORD PTR [rbx]
  00339:    	mov    QWORD PTR [rsp-0x18],rsi
  0033e:    	lea    rsi,[rsp-0x18]
  00343:    	mov    QWORD PTR [rbx],rsi
  00346:    	lea    r14,[rsp-0x10]
  0034b:    	mov    QWORD PTR [rsp-0x20],r14
  00350:    	call   0x2e806
  00355:    	lea    r14,[rbp-0x8]
  00359:    	mov    QWORD PTR [rbx],r14
  0035c:    	mov    r14,QWORD PTR [rbp-0x10]
  00360:    	movq   xmm2,QWORD PTR [rsp]
  00365:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0036b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00371:    	add    rsp,0x20
  00375:    	test   rax,rax
  00378:    	je     0x2e838
  0037e:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00382:    	mov    rdi,QWORD PTR [r14-0x38]
  00386:    	mov    rsi,QWORD PTR [r14-0x48]
  0038a: 00 	test   rdi,0x7
  00391:    	jne    0x2e847
  00397:    	cmp    DWORD PTR [rdi+0x4],0xb
  0039b:    	jne    0x2e847
  003a1: 00 	test   rsi,0x1
  003a8:    	je     0x2e847
  003ae:    	sar    rsi,1
  003b1:    	sub    rsp,0x20
  003b5:    	movq   QWORD PTR [rsp],xmm2
  003ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  003c6:    	mov    rdx,r12
  003c9:    	mov    rcx,QWORD PTR [r14-0x50]
  003cd: 92 	movabs rax,0x5592e6e49290
  003d7:    	call   rax
  003d9:    	movq   xmm2,QWORD PTR [rsp]
  003de:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003e4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ea:    	add    rsp,0x20
  003ee:    	test   rax,rax
  003f1:    	je     0x2e856
:00020 %3 = %2.call x()                     [Vec]
  003f7:    	mov    rdi,QWORD PTR [r14-0x40]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x2e865
  00408:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0040c:    	jne    0x2e865
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffe97ae],0x26        # 0xfffe9bc7
  00419:    	jne    0x2e865
  0041f:    	mov    esi,DWORD PTR [rip+0x145b]        # 0x1880
  00425:    	cmp    esi,0xffffffff
  00428:    	je     0x2e874
  0042e:    	cmp    WORD PTR [rdi+0x2],0x3
  00433:    	jne    0x44c
  00439:    	cmp    esi,0x6
  0043c:    	jge    0x44c
  00442:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00447:    	jmp    0x482
  0044c:    	sub    rsp,0x20
  00450:    	movq   QWORD PTR [rsp],xmm2
  00455:    	movq   QWORD PTR [rsp+0x8],xmm3
  0045b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00461: 92 	movabs rax,0x5592e6dd3800
  0046b:    	call   rax
  0046d:    	movq   xmm2,QWORD PTR [rsp]
  00472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0047e:    	add    rsp,0x20
  00482:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  00486: 00 	movq   xmm5,QWORD PTR [rip+0x13f6]        # 0x1884
  0048e: 99 	movabs rax,0xff1999999999999a
  00498:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
  0049c:    	mov    rdi,QWORD PTR [r14-0x48]
  004a0: 00 	test   rdi,0x1
  004a7:    	jne    0x2e8c7
  004ad: 00 	test   rdi,0x2
  004b4:    	je     0x4f0
  004ba:    	xorps  xmm6,xmm6
  004bd: 00 	movabs rax,0x8000000000000002
  004c7:    	cmp    rdi,rax
  004ca:    	je     0x502
  004d0:    	mov    rax,rdi
  004d3:    	sar    rax,0x3f
  004d7:    	add    rax,0x2
  004db:    	and    rdi,0xfffffffffffffffc
  004df:    	or     rdi,rax
  004e2:    	rol    rdi,0x3d
  004e6:    	movq   xmm6,rdi
  004eb:    	jmp    0x502
  004f0:    	call   0xfffe5521
  004f5:    	test   rax,rax
  004f8:    	je     0x2e8c7
  004fe:    	movq   xmm6,xmm0
  00502:    	ucomisd xmm6,xmm5
  00506:    	jae    0x2e9f5
:00024 condnotbr _%3 =>:00036
:00025 %3 = %2.call x()                     [Vec]
  0050c:    	mov    rdi,QWORD PTR [r14-0x40]
  00510: 00 	test   rdi,0x7
  00517:    	jne    0x2e8d6
  0051d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00521:    	jne    0x2e8d6
  00527: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9699],0x26        # 0xfffe9bc7
  0052e:    	jne    0x2e8d6
  00534:    	mov    esi,DWORD PTR [rip+0x1356]        # 0x1890
  0053a:    	cmp    esi,0xffffffff
  0053d:    	je     0x2e8e5
  00543:    	cmp    WORD PTR [rdi+0x2],0x3
  00548:    	jne    0x561
  0054e:    	cmp    esi,0x6
  00551:    	jge    0x561
  00557:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0055c:    	jmp    0x5a3
  00561:    	sub    rsp,0x20
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm4
  00576:    	movq   QWORD PTR [rsp+0x18],xmm5
  0057c: 92 	movabs rax,0x5592e6dd3800
  00586:    	call   rax
  00588:    	movq   xmm2,QWORD PTR [rsp]
  0058d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00593:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00599:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0059f:    	add    rsp,0x20
  005a3:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005a7: 00 	movq   xmm5,QWORD PTR [rip+0x12e5]        # 0x1894
  005af: 99 	movabs rax,0xff1999999999999e
  005b9:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
  005bd:    	mov    rdi,QWORD PTR [r14-0x48]
  005c1: 00 	test   rdi,0x1
  005c8:    	jne    0x2e944
  005ce: 00 	test   rdi,0x2
  005d5:    	je     0x611
  005db:    	xorps  xmm6,xmm6
  005de: 00 	movabs rax,0x8000000000000002
  005e8:    	cmp    rdi,rax
  005eb:    	je     0x623
  005f1:    	mov    rax,rdi
  005f4:    	sar    rax,0x3f
  005f8:    	add    rax,0x2
  005fc:    	and    rdi,0xfffffffffffffffc
  00600:    	or     rdi,rax
  00603:    	rol    rdi,0x3d
  00607:    	movq   xmm6,rdi
  0060c:    	jmp    0x623
  00611:    	call   0xfffe5521
  00616:    	test   rax,rax
  00619:    	je     0x2e944
  0061f:    	movq   xmm6,xmm0
  00623:    	ucomisd xmm6,xmm5
  00627:    	jbe    0x2ea0e
:00029 condnotbr _%3 =>:00036
:00030 %3 = 1: i32
  0062d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00635:    	mov    rdi,QWORD PTR [r14-0x38]
  00639:    	mov    rsi,QWORD PTR [r14-0x48]
  0063d: 00 	test   rdi,0x7
  00644:    	jne    0x2e953
  0064a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0064e:    	jne    0x2e953
  00654: 00 	test   rsi,0x1
  0065b:    	je     0x2e953
  00661:    	sar    rsi,1
  00664:    	sub    rsp,0x20
  00668:    	movq   QWORD PTR [rsp],xmm2
  0066d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00673:    	movq   QWORD PTR [rsp+0x10],xmm4
  00679:    	movq   QWORD PTR [rsp+0x18],xmm5
  0067f: 92 	movabs rax,0x5592e6e49100
  00689:    	call   rax
  0068b:    	movq   xmm2,QWORD PTR [rsp]
  00690:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00696:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0069c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006a2:    	add    rsp,0x20
  006a6:    	test   rax,rax
  006a9:    	je     0x2e962
  006af:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006b3: 00 	movq   xmm5,QWORD PTR [rip+0x11e9]        # 0x18a4
  006bb: 00 	movabs rax,0xff80000000000002
  006c5:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006c9:    	mov    rdi,QWORD PTR [r14-0x48]
  006cd: 00 	test   rdi,0x7
  006d4:    	jne    0x2e971
  006da:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006de:    	jne    0x2e971
  006e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe94dc],0x26        # 0xfffe9bc7
  006eb:    	jne    0x2e971
  006f1:    	mov    esi,DWORD PTR [rip+0x11b9]        # 0x18b0
  006f7:    	cmp    esi,0xffffffff
  006fa:    	je     0x2e98f
  00700:    	cmp    WORD PTR [rdi+0x2],0x3
  00705:    	jne    0x722
  0070b:    	cmp    esi,0x6
  0070e:    	jge    0x722
  00714:    	mov    rax,QWORD PTR [r14-0x50]
  00718:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071d:    	jmp    0x771
  00722:    	sub    rsp,0x20
  00726:    	movq   QWORD PTR [rsp],xmm2
  0072b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00731:    	movq   QWORD PTR [rsp+0x10],xmm4
  00737:    	movq   QWORD PTR [rsp+0x18],xmm5
  0073d:    	mov    rdx,QWORD PTR [r14-0x50]
  00741: 92 	movabs rax,0x5592e6dd3a80
  0074b:    	call   rax
  0074d:    	movq   xmm2,QWORD PTR [rsp]
  00752:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00758:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0075e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00764:    	add    rsp,0x20
  00768:    	test   rax,rax
  0076b:    	je     0x2e980
:00034 
:00035 br =>:00073
  00771:    	jmp    0x2ee4d
:00036 %3 = %2.call y()                     [Vec]
  00776:    	mov    rdi,QWORD PTR [r14-0x40]
  0077a: 00 	test   rdi,0x7
  00781:    	jne    0x2ea27
  00787:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0078b:    	jne    0x2ea27
  00791: 26 	cmp    DWORD PTR [rip+0xfffffffffffe942f],0x26        # 0xfffe9bc7
  00798:    	jne    0x2ea27
  0079e:    	mov    esi,DWORD PTR [rip+0x1114]        # 0x18b8
  007a4:    	cmp    esi,0xffffffff
  007a7:    	je     0x2ea36
  007ad:    	cmp    WORD PTR [rdi+0x2],0x3
  007b2:    	jne    0x7cb
  007b8:    	cmp    esi,0x6
  007bb:    	jge    0x7cb
  007c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007c6:    	jmp    0x80d
  007cb:    	sub    rsp,0x20
  007cf:    	movq   QWORD PTR [rsp],xmm2
  007d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  007da:    	movq   QWORD PTR [rsp+0x10],xmm4
  007e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  007e6: 92 	movabs rax,0x5592e6dd3800
  007f0:    	call   rax
  007f2:    	movq   xmm2,QWORD PTR [rsp]
  007f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00803:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00809:    	add    rsp,0x20
  0080d:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00811: 00 	movq   xmm5,QWORD PTR [rip+0x10ab]        # 0x18c4
  00819: 99 	movabs rax,0xff1999999999999a
  00823:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
  00827:    	mov    rdi,QWORD PTR [r14-0x48]
  0082b: 00 	test   rdi,0x1
  00832:    	jne    0x2ea95
  00838: 00 	test   rdi,0x2
  0083f:    	je     0x87b
  00845:    	xorps  xmm6,xmm6
  00848: 00 	movabs rax,0x8000000000000002
  00852:    	cmp    rdi,rax
  00855:    	je     0x88d
  0085b:    	mov    rax,rdi
  0085e:    	sar    rax,0x3f
  00862:    	add    rax,0x2
  00866:    	and    rdi,0xfffffffffffffffc
  0086a:    	or     rdi,rax
  0086d:    	rol    rdi,0x3d
  00871:    	movq   xmm6,rdi
  00876:    	jmp    0x88d
  0087b:    	call   0xfffe5521
  00880:    	test   rax,rax
  00883:    	je     0x2ea95
  00889:    	movq   xmm6,xmm0
  0088d:    	ucomisd xmm6,xmm5
  00891:    	jae    0x2ebc3
:00040 condnotbr _%3 =>:00052
:00041 %3 = %2.call y()                     [Vec]
  00897:    	mov    rdi,QWORD PTR [r14-0x40]
  0089b: 00 	test   rdi,0x7
  008a2:    	jne    0x2eaa4
  008a8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  008ac:    	jne    0x2eaa4
  008b2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe930e],0x26        # 0xfffe9bc7
  008b9:    	jne    0x2eaa4
  008bf:    	mov    esi,DWORD PTR [rip+0x100b]        # 0x18d0
  008c5:    	cmp    esi,0xffffffff
  008c8:    	je     0x2eab3
  008ce:    	cmp    WORD PTR [rdi+0x2],0x3
  008d3:    	jne    0x8ec
  008d9:    	cmp    esi,0x6
  008dc:    	jge    0x8ec
  008e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008e7:    	jmp    0x92e
  008ec:    	sub    rsp,0x20
  008f0:    	movq   QWORD PTR [rsp],xmm2
  008f5:    	movq   QWORD PTR [rsp+0x8],xmm3
  008fb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00901:    	movq   QWORD PTR [rsp+0x18],xmm5
  00907: 92 	movabs rax,0x5592e6dd3800
  00911:    	call   rax
  00913:    	movq   xmm2,QWORD PTR [rsp]
  00918:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0091e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00924:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0092a:    	add    rsp,0x20
  0092e:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  00932: 00 	movq   xmm5,QWORD PTR [rip+0xf9a]        # 0x18d4
  0093a: 99 	movabs rax,0xff1999999999999e
  00944:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [Float][Float]
  00948:    	mov    rdi,QWORD PTR [r14-0x48]
  0094c: 00 	test   rdi,0x1
  00953:    	jne    0x2eb12
  00959: 00 	test   rdi,0x2
  00960:    	je     0x99c
  00966:    	xorps  xmm6,xmm6
  00969: 00 	movabs rax,0x8000000000000002
  00973:    	cmp    rdi,rax
  00976:    	je     0x9ae
  0097c:    	mov    rax,rdi
  0097f:    	sar    rax,0x3f
  00983:    	add    rax,0x2
  00987:    	and    rdi,0xfffffffffffffffc
  0098b:    	or     rdi,rax
  0098e:    	rol    rdi,0x3d
  00992:    	movq   xmm6,rdi
  00997:    	jmp    0x9ae
  0099c:    	call   0xfffe5521
  009a1:    	test   rax,rax
  009a4:    	je     0x2eb12
  009aa:    	movq   xmm6,xmm0
  009ae:    	ucomisd xmm6,xmm5
  009b2:    	jbe    0x2ebdc
:00045 condnotbr _%3 =>:00052
:00046 %3 = 1: i32
  009b8: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [Array][Integer]
  009c0:    	mov    rdi,QWORD PTR [r14-0x38]
  009c4:    	mov    rsi,QWORD PTR [r14-0x48]
  009c8: 00 	test   rdi,0x7
  009cf:    	jne    0x2eb21
  009d5:    	cmp    DWORD PTR [rdi+0x4],0xb
  009d9:    	jne    0x2eb21
  009df: 00 	test   rsi,0x1
  009e6:    	je     0x2eb21
  009ec:    	sar    rsi,1
  009ef:    	sub    rsp,0x20
  009f3:    	movq   QWORD PTR [rsp],xmm2
  009f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a04:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a0a: 92 	movabs rax,0x5592e6e49100
  00a14:    	call   rax
  00a16:    	movq   xmm2,QWORD PTR [rsp]
  00a1b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a21:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a27:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a2d:    	add    rsp,0x20
  00a31:    	test   rax,rax
  00a34:    	je     0x2eb30
  00a3a:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a3e: 00 	movq   xmm5,QWORD PTR [rip+0xe9e]        # 0x18e4
  00a46: 00 	movabs rax,0xff80000000000002
  00a50:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [Vec]
  00a54:    	mov    rdi,QWORD PTR [r14-0x48]
  00a58: 00 	test   rdi,0x7
  00a5f:    	jne    0x2eb3f
  00a65:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a69:    	jne    0x2eb3f
  00a6f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9151],0x26        # 0xfffe9bc7
  00a76:    	jne    0x2eb3f
  00a7c:    	mov    esi,DWORD PTR [rip+0xe6e]        # 0x18f0
  00a82:    	cmp    esi,0xffffffff
  00a85:    	je     0x2eb5d
  00a8b:    	cmp    WORD PTR [rdi+0x2],0x3
  00a90:    	jne    0xaad
  00a96:    	cmp    esi,0x6
  00a99:    	jge    0xaad
  00a9f:    	mov    rax,QWORD PTR [r14-0x50]
  00aa3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00aa8:    	jmp    0xafc
  00aad:    	sub    rsp,0x20
  00ab1:    	movq   QWORD PTR [rsp],xmm2
  00ab6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00abc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac8:    	mov    rdx,QWORD PTR [r14-0x50]
  00acc: 92 	movabs rax,0x5592e6dd3a80
  00ad6:    	call   rax
  00ad8:    	movq   xmm2,QWORD PTR [rsp]
  00add:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ae3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ae9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00aef:    	add    rsp,0x20
  00af3:    	test   rax,rax
  00af6:    	je     0x2eb4e
:00050 
:00051 br =>:00073
  00afc:    	jmp    0x2ee66
:00052 %3 = %2.call z()                     [Vec]
  00b01:    	mov    rdi,QWORD PTR [r14-0x40]
  00b05: 00 	test   rdi,0x7
  00b0c:    	jne    0x2ebf5
  00b12:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00b16:    	jne    0x2ebf5
  00b1c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe90a4],0x26        # 0xfffe9bc7
  00b23:    	jne    0x2ebf5
  00b29:    	mov    esi,DWORD PTR [rip+0xdc9]        # 0x18f8
  00b2f:    	cmp    esi,0xffffffff
  00b32:    	je     0x2ec04
  00b38:    	cmp    WORD PTR [rdi+0x2],0x3
  00b3d:    	jne    0xb56
  00b43:    	cmp    esi,0x6
  00b46:    	jge    0xb56
  00b4c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b51:    	jmp    0xb98
  00b56:    	sub    rsp,0x20
  00b5a:    	movq   QWORD PTR [rsp],xmm2
  00b5f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b65:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b6b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b71: 92 	movabs rax,0x5592e6dd3800
  00b7b:    	call   rax
  00b7d:    	movq   xmm2,QWORD PTR [rsp]
  00b82:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b88:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b8e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b94:    	add    rsp,0x20
  00b98:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00b9c: 00 	movq   xmm5,QWORD PTR [rip+0xd60]        # 0x1904
  00ba4: 99 	movabs rax,0xff1999999999999a
  00bae:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
  00bb2:    	mov    rdi,QWORD PTR [r14-0x48]
  00bb6: 00 	test   rdi,0x1
  00bbd:    	jne    0x2ec63
  00bc3: 00 	test   rdi,0x2
  00bca:    	je     0xc06
  00bd0:    	xorps  xmm6,xmm6
  00bd3: 00 	movabs rax,0x8000000000000002
  00bdd:    	cmp    rdi,rax
  00be0:    	je     0xc18
  00be6:    	mov    rax,rdi
  00be9:    	sar    rax,0x3f
  00bed:    	add    rax,0x2
  00bf1:    	and    rdi,0xfffffffffffffffc
  00bf5:    	or     rdi,rax
  00bf8:    	rol    rdi,0x3d
  00bfc:    	movq   xmm6,rdi
  00c01:    	jmp    0xc18
  00c06:    	call   0xfffe5521
  00c0b:    	test   rax,rax
  00c0e:    	je     0x2ec63
  00c14:    	movq   xmm6,xmm0
  00c18:    	ucomisd xmm6,xmm5
  00c1c:    	jae    0x2ed91
:00056 condnotbr _%3 =>:00068
:00057 %3 = %2.call z()                     [Vec]
  00c22:    	mov    rdi,QWORD PTR [r14-0x40]
  00c26: 00 	test   rdi,0x7
  00c2d:    	jne    0x2ec72
  00c33:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c37:    	jne    0x2ec72
  00c3d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8f83],0x26        # 0xfffe9bc7
  00c44:    	jne    0x2ec72
  00c4a:    	mov    esi,DWORD PTR [rip+0xcc0]        # 0x1910
  00c50:    	cmp    esi,0xffffffff
  00c53:    	je     0x2ec81
  00c59:    	cmp    WORD PTR [rdi+0x2],0x3
  00c5e:    	jne    0xc77
  00c64:    	cmp    esi,0x6
  00c67:    	jge    0xc77
  00c6d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c72:    	jmp    0xcb9
  00c77:    	sub    rsp,0x20
  00c7b:    	movq   QWORD PTR [rsp],xmm2
  00c80:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c86:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c8c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c92: 92 	movabs rax,0x5592e6dd3800
  00c9c:    	call   rax
  00c9e:    	movq   xmm2,QWORD PTR [rsp]
  00ca3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ca9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00caf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cb5:    	add    rsp,0x20
  00cb9:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00cbd: 00 	movq   xmm5,QWORD PTR [rip+0xc4f]        # 0x1914
  00cc5: 99 	movabs rax,0xff1999999999999e
  00ccf:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
  00cd3:    	mov    rdi,QWORD PTR [r14-0x48]
  00cd7: 00 	test   rdi,0x1
  00cde:    	jne    0x2ece0
  00ce4: 00 	test   rdi,0x2
  00ceb:    	je     0xd27
  00cf1:    	xorps  xmm6,xmm6
  00cf4: 00 	movabs rax,0x8000000000000002
  00cfe:    	cmp    rdi,rax
  00d01:    	je     0xd39
  00d07:    	mov    rax,rdi
  00d0a:    	sar    rax,0x3f
  00d0e:    	add    rax,0x2
  00d12:    	and    rdi,0xfffffffffffffffc
  00d16:    	or     rdi,rax
  00d19:    	rol    rdi,0x3d
  00d1d:    	movq   xmm6,rdi
  00d22:    	jmp    0xd39
  00d27:    	call   0xfffe5521
  00d2c:    	test   rax,rax
  00d2f:    	je     0x2ece0
  00d35:    	movq   xmm6,xmm0
  00d39:    	ucomisd xmm6,xmm5
  00d3d:    	jbe    0x2edaa
:00061 condnotbr _%3 =>:00068
:00062 %3 = 1: i32
  00d43: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00d4b:    	mov    rdi,QWORD PTR [r14-0x38]
  00d4f:    	mov    rsi,QWORD PTR [r14-0x48]
  00d53: 00 	test   rdi,0x7
  00d5a:    	jne    0x2ecef
  00d60:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d64:    	jne    0x2ecef
  00d6a: 00 	test   rsi,0x1
  00d71:    	je     0x2ecef
  00d77:    	sar    rsi,1
  00d7a:    	sub    rsp,0x20
  00d7e:    	movq   QWORD PTR [rsp],xmm2
  00d83:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d89:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d8f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d95: 92 	movabs rax,0x5592e6e49100
  00d9f:    	call   rax
  00da1:    	movq   xmm2,QWORD PTR [rsp]
  00da6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00db8:    	add    rsp,0x20
  00dbc:    	test   rax,rax
  00dbf:    	je     0x2ecfe
  00dc5:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00dc9: 00 	movq   xmm5,QWORD PTR [rip+0xb53]        # 0x1924
  00dd1: 00 	movabs rax,0xff80000000000002
  00ddb:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00ddf:    	mov    rdi,QWORD PTR [r14-0x48]
  00de3: 00 	test   rdi,0x7
  00dea:    	jne    0x2ed0d
  00df0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00df4:    	jne    0x2ed0d
  00dfa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8dc6],0x26        # 0xfffe9bc7
  00e01:    	jne    0x2ed0d
  00e07:    	mov    esi,DWORD PTR [rip+0xb23]        # 0x1930
  00e0d:    	cmp    esi,0xffffffff
  00e10:    	je     0x2ed2b
  00e16:    	cmp    WORD PTR [rdi+0x2],0x3
  00e1b:    	jne    0xe38
  00e21:    	cmp    esi,0x6
  00e24:    	jge    0xe38
  00e2a:    	mov    rax,QWORD PTR [r14-0x50]
  00e2e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e33:    	jmp    0xe87
  00e38:    	sub    rsp,0x20
  00e3c:    	movq   QWORD PTR [rsp],xmm2
  00e41:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e47:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e4d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e53:    	mov    rdx,QWORD PTR [r14-0x50]
  00e57: 92 	movabs rax,0x5592e6dd3a80
  00e61:    	call   rax
  00e63:    	movq   xmm2,QWORD PTR [rsp]
  00e68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e7a:    	add    rsp,0x20
  00e7e:    	test   rax,rax
  00e81:    	je     0x2ed1c
:00066 
:00067 br =>:00073
  00e87:    	jmp    0x2ee7f
:00068 %3 = 1: i32
  00e8c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e94:    	sub    rsp,0x20
  00e98:    	movq   QWORD PTR [rsp],xmm2
  00e9d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ea9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eaf:    	mov    rdi,rbx
  00eb2:    	mov    rsi,r12
  00eb5:    	mov    rdx,QWORD PTR [r14-0x38]
  00eb9:    	mov    rcx,QWORD PTR [r14-0x48]
  00ebd: 92 	movabs r8,0x5592e73f7988
  00ec7: 92 	movabs rax,0x5592e6e48fd0
  00ed1:    	call   rax
  00ed3:    	movq   xmm2,QWORD PTR [rsp]
  00ed8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ede:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eea:    	add    rsp,0x20
  00eee:    	test   rax,rax
  00ef1:    	je     0x2edc3
  00ef7:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00efb: 00 	movq   xmm5,QWORD PTR [rip+0xa31]        # 0x1934
  00f03: 00 	movabs rax,0xff80000000000002
  00f0d:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f11: 00 	cmp    DWORD PTR [rip+0xa24],0x0        # 0x193c
  00f18:    	jl     0x2edd2
  00f1e:    	je     0x2ede1
  00f24: 01 	sub    DWORD PTR [rip+0xa11],0x1        # 0x193c
  00f2b:    	xor    rdi,rdi
  00f2e:    	jmp    0x2edd2
  00f33:    	sub    rsp,0x20
  00f37:    	movq   QWORD PTR [rsp],xmm2
  00f3c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f42:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f48:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4e:    	mov    rdi,QWORD PTR [r14-0x48]
  00f52: 92 	movabs rax,0x5592e6de1bb0
  00f5c:    	call   rax
  00f5e:    	mov    r15d,eax
  00f61: 92 	movabs r13,0x5592e73f79b0
  00f6b:    	cmp    QWORD PTR [r13+0x8],0x0
  00f70:    	je     0x2edfd
  00f76:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f7a:    	jne    0x2edfd
  00f80:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8c41]        # 0xfffe9bc7
  00f86:    	cmp    DWORD PTR [r13-0x4],eax
  00f8a:    	jne    0x2edfd
  00f90: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f99:    	mov    rax,QWORD PTR [r14-0x48]
  00f9d:    	mov    QWORD PTR [rsp-0x40],rax
  00fa2: 00 	mov    rdi,0x1
  00fa9:    	mov    rax,QWORD PTR [r14-0x50]
  00fad:    	mov    QWORD PTR [rsp-0x48],rax
  00fb2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fbb:    	mov    r13,QWORD PTR [r13+0x8]
  00fbf:    	mov    rax,QWORD PTR [r13+0x8]
  00fc3:    	mov    QWORD PTR [rsp-0x30],rax
  00fc8:    	mov    rax,QWORD PTR [r13+0x0]
  00fcc:    	mov    r13,QWORD PTR [r13+0x10]
  00fd0:    	mov    rsi,QWORD PTR [rbx]
  00fd3:    	mov    QWORD PTR [rsp-0x18],rsi
  00fd8:    	lea    rsi,[rsp-0x18]
  00fdd:    	mov    QWORD PTR [rbx],rsi
  00fe0:    	lea    r14,[rsp-0x10]
  00fe5:    	mov    QWORD PTR [rsp-0x20],r14
  00fea:    	call   rax
  00fec:    	lea    r14,[rbp-0x8]
  00ff0:    	mov    QWORD PTR [rbx],r14
  00ff3:    	mov    r14,QWORD PTR [rbp-0x10]
  00ff7:    	movq   xmm2,QWORD PTR [rsp]
  00ffc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01002:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01008:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0100e:    	add    rsp,0x20
  01012:    	test   rax,rax
  01015:    	je     0x2ee3e
:00072 
  0101b:    	jmp    0x2ee98
:00073 %3 = 0: i32
  01020: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  01028: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  01030:    	mov    rdi,QWORD PTR [r14-0x38]
  01034:    	mov    rsi,QWORD PTR [r14-0x50]
  01038: 00 	test   rdi,0x7
  0103f:    	jne    0x2eeb1
  01045:    	cmp    DWORD PTR [rdi+0x4],0xb
  01049:    	jne    0x2eeb1
  0104f: 00 	test   rsi,0x1
  01056:    	je     0x2eeb1
  0105c:    	sar    rsi,1
  0105f:    	sub    rsp,0x20
  01063:    	movq   QWORD PTR [rsp],xmm2
  01068:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01074: 92 	movabs rax,0x5592e6e49100
  0107e:    	call   rax
  01080:    	movq   xmm2,QWORD PTR [rsp]
  01085:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0108b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01091:    	add    rsp,0x20
  01095:    	test   rax,rax
  01098:    	je     0x2eec0
  0109e:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  010a2: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  010aa:    	mov    rdi,QWORD PTR [r14-0x38]
  010ae:    	mov    rsi,QWORD PTR [r14-0x58]
  010b2: 00 	test   rdi,0x7
  010b9:    	jne    0x2eecf
  010bf:    	cmp    DWORD PTR [rdi+0x4],0xb
  010c3:    	jne    0x2eecf
  010c9: 00 	test   rsi,0x1
  010d0:    	je     0x2eecf
  010d6:    	sar    rsi,1
  010d9:    	sub    rsp,0x10
  010dd:    	movq   QWORD PTR [rsp],xmm3
  010e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e8: 92 	movabs rax,0x5592e6e49100
  010f2:    	call   rax
  010f4:    	movq   xmm3,QWORD PTR [rsp]
  010f9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010ff:    	add    rsp,0x10
  01103:    	test   rax,rax
  01106:    	je     0x2eede
  0110c:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  01110:    	mov    rdi,QWORD PTR [r14-0x50]
  01114: 00 	test   rdi,0x7
  0111b:    	jne    0x2eeed
  01121:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01125:    	jne    0x2eeed
  0112b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8a95],0x26        # 0xfffe9bc7
  01132:    	jne    0x2eeed
  01138:    	sub    rsp,0x10
  0113c:    	movq   QWORD PTR [rsp],xmm3
  01141:    	movq   QWORD PTR [rsp+0x8],xmm4
  01147: 00 	cmp    DWORD PTR [rip+0xfffffffffffe8a7d],0x0        # 0xfffe9bcb
  0114e:    	je     0x1166
  01154:    	mov    rdi,r12
  01157:    	mov    rsi,QWORD PTR [rbx]
  0115a: 92 	movabs rax,0x5592e6e3ca90
  01164:    	call   rax
  01166: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0116f:    	mov    rax,QWORD PTR [r14-0x50]
  01173:    	mov    QWORD PTR [rsp-0x40],rax
  01178: 00 	mov    rdi,0x1
  0117f:    	mov    rax,QWORD PTR [r14-0x58]
  01183:    	mov    QWORD PTR [rsp-0x48],rax
  01188: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01191: 08 	movabs rax,0x100080000005d
  0119b:    	mov    QWORD PTR [rsp-0x30],rax
  011a0: 92 	movabs r13,0x5592e73a9470
  011aa:    	mov    rsi,QWORD PTR [rbx]
  011ad:    	mov    QWORD PTR [rsp-0x18],rsi
  011b2:    	lea    rsi,[rsp-0x18]
  011b7:    	mov    QWORD PTR [rbx],rsi
  011ba:    	lea    r14,[rsp-0x10]
  011bf:    	mov    QWORD PTR [rsp-0x20],r14
  011c4:    	call   0xffff2341
  011c9:    	lea    r14,[rbp-0x8]
  011cd:    	mov    QWORD PTR [rbx],r14
  011d0:    	mov    r14,QWORD PTR [rbp-0x10]
  011d4:    	movq   xmm3,QWORD PTR [rsp]
  011d9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011df:    	add    rsp,0x10
  011e3:    	test   rax,rax
  011e6:    	je     0x2eefc
  011ec:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  011f0:    	mov    rdi,QWORD PTR [r14-0x38]
  011f4:    	mov    rsi,QWORD PTR [r14-0x48]
  011f8: 00 	test   rdi,0x7
  011ff:    	jne    0x2ef0b
  01205:    	cmp    DWORD PTR [rdi+0x4],0xb
  01209:    	jne    0x2ef0b
  0120f: 00 	test   rsi,0x1
  01216:    	je     0x2ef0b
  0121c:    	sar    rsi,1
  0121f:    	sub    rsp,0x10
  01223:    	movq   QWORD PTR [rsp],xmm3
  01228:    	movq   QWORD PTR [rsp+0x8],xmm4
  0122e:    	mov    rdx,r12
  01231:    	mov    rcx,QWORD PTR [r14-0x50]
  01235: 92 	movabs rax,0x5592e6e49290
  0123f:    	call   rax
  01241:    	movq   xmm3,QWORD PTR [rsp]
  01246:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124c:    	add    rsp,0x10
  01250:    	test   rax,rax
  01253:    	je     0x2ef1a
:00081 %3 = 0: i32
  01259: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  01261: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  01269:    	mov    rdi,QWORD PTR [r14-0x38]
  0126d:    	mov    rsi,QWORD PTR [r14-0x50]
  01271: 00 	test   rdi,0x7
  01278:    	jne    0x2ef29
  0127e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01282:    	jne    0x2ef29
  01288: 00 	test   rsi,0x1
  0128f:    	je     0x2ef29
  01295:    	sar    rsi,1
  01298:    	sub    rsp,0x10
  0129c:    	movq   QWORD PTR [rsp],xmm3
  012a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012a7: 92 	movabs rax,0x5592e6e49100
  012b1:    	call   rax
  012b3:    	movq   xmm3,QWORD PTR [rsp]
  012b8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012be:    	add    rsp,0x10
  012c2:    	test   rax,rax
  012c5:    	je     0x2ef38
  012cb:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  012cf:    	mov    rdi,QWORD PTR [r14-0x50]
  012d3: 00 	test   rdi,0x7
  012da:    	jne    0x2ef47
  012e0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  012e4:    	jne    0x2ef47
  012ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffe88d6],0x26        # 0xfffe9bc7
  012f1:    	jne    0x2ef47
  012f7:    	sub    rsp,0x10
  012fb:    	movq   QWORD PTR [rsp],xmm3
  01300:    	movq   QWORD PTR [rsp+0x8],xmm4
  01306: 00 	cmp    DWORD PTR [rip+0xfffffffffffe88be],0x0        # 0xfffe9bcb
  0130d:    	je     0x1325
  01313:    	mov    rdi,r12
  01316:    	mov    rsi,QWORD PTR [rbx]
  01319: 92 	movabs rax,0x5592e6e3ca90
  01323:    	call   rax
  01325: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0132e:    	mov    rax,QWORD PTR [r14-0x50]
  01332:    	mov    QWORD PTR [rsp-0x40],rax
  01337: 00 	mov    rdi,0x0
  0133e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01347: 07 	movabs rax,0x1000700000060
  01351:    	mov    QWORD PTR [rsp-0x30],rax
  01356: 92 	movabs r13,0x5592e73d9f90
  01360:    	mov    rsi,QWORD PTR [rbx]
  01363:    	mov    QWORD PTR [rsp-0x18],rsi
  01368:    	lea    rsi,[rsp-0x18]
  0136d:    	mov    QWORD PTR [rbx],rsi
  01370:    	lea    r14,[rsp-0x10]
  01375:    	mov    QWORD PTR [rsp-0x20],r14
  0137a:    	call   0xfffea487
  0137f:    	lea    r14,[rbp-0x8]
  01383:    	mov    QWORD PTR [rbx],r14
  01386:    	mov    r14,QWORD PTR [rbp-0x10]
  0138a:    	movq   xmm3,QWORD PTR [rsp]
  0138f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01395:    	add    rsp,0x10
  01399:    	test   rax,rax
  0139c:    	je     0x2ef56
  013a2:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  013a6:    	mov    rdi,QWORD PTR [r14-0x38]
  013aa:    	mov    rsi,QWORD PTR [r14-0x48]
  013ae: 00 	test   rdi,0x7
  013b5:    	jne    0x2ef65
  013bb:    	cmp    DWORD PTR [rdi+0x4],0xb
  013bf:    	jne    0x2ef65
  013c5: 00 	test   rsi,0x1
  013cc:    	je     0x2ef65
  013d2:    	sar    rsi,1
  013d5:    	sub    rsp,0x10
  013d9:    	movq   QWORD PTR [rsp],xmm3
  013de:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e4:    	mov    rdx,r12
  013e7:    	mov    rcx,QWORD PTR [r14-0x50]
  013eb: 92 	movabs rax,0x5592e6e49290
  013f5:    	call   rax
  013f7:    	movq   xmm3,QWORD PTR [rsp]
  013fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01402:    	add    rsp,0x10
  01406:    	test   rax,rax
  01409:    	je     0x2ef74
:00087 %3 = 1: i32
  0140f: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  01417: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  0141f:    	mov    rdi,QWORD PTR [r14-0x38]
  01423:    	mov    rsi,QWORD PTR [r14-0x50]
  01427: 00 	test   rdi,0x7
  0142e:    	jne    0x2ef83
  01434:    	cmp    DWORD PTR [rdi+0x4],0xb
  01438:    	jne    0x2ef83
  0143e: 00 	test   rsi,0x1
  01445:    	je     0x2ef83
  0144b:    	sar    rsi,1
  0144e:    	sub    rsp,0x10
  01452:    	movq   QWORD PTR [rsp],xmm3
  01457:    	movq   QWORD PTR [rsp+0x8],xmm4
  0145d: 92 	movabs rax,0x5592e6e49100
  01467:    	call   rax
  01469:    	movq   xmm3,QWORD PTR [rsp]
  0146e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01474:    	add    rsp,0x10
  01478:    	test   rax,rax
  0147b:    	je     0x2ef92
  01481:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01485: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  0148d:    	mov    rdi,QWORD PTR [r14-0x38]
  01491:    	mov    rsi,QWORD PTR [r14-0x58]
  01495: 00 	test   rdi,0x7
  0149c:    	jne    0x2efa1
  014a2:    	cmp    DWORD PTR [rdi+0x4],0xb
  014a6:    	jne    0x2efa1
  014ac: 00 	test   rsi,0x1
  014b3:    	je     0x2efa1
  014b9:    	sar    rsi,1
  014bc:    	sub    rsp,0x10
  014c0:    	movq   QWORD PTR [rsp],xmm3
  014c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  014cb: 92 	movabs rax,0x5592e6e49100
  014d5:    	call   rax
  014d7:    	movq   xmm3,QWORD PTR [rsp]
  014dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014e2:    	add    rsp,0x10
  014e6:    	test   rax,rax
  014e9:    	je     0x2efb0
  014ef:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  014f3:    	mov    rdi,QWORD PTR [r14-0x50]
  014f7: 00 	test   rdi,0x7
  014fe:    	jne    0x2efbf
  01504:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01508:    	jne    0x2efbf
  0150e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe86b2],0x26        # 0xfffe9bc7
  01515:    	jne    0x2efbf
  0151b:    	sub    rsp,0x10
  0151f:    	movq   QWORD PTR [rsp],xmm3
  01524:    	movq   QWORD PTR [rsp+0x8],xmm4
  0152a: 00 	cmp    DWORD PTR [rip+0xfffffffffffe869a],0x0        # 0xfffe9bcb
  01531:    	je     0x1549
  01537:    	mov    rdi,r12
  0153a:    	mov    rsi,QWORD PTR [rbx]
  0153d: 92 	movabs rax,0x5592e6e3ca90
  01547:    	call   rax
  01549: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01552:    	mov    rax,QWORD PTR [r14-0x50]
  01556:    	mov    QWORD PTR [rsp-0x40],rax
  0155b: 00 	mov    rdi,0x1
  01562:    	mov    rax,QWORD PTR [r14-0x58]
  01566:    	mov    QWORD PTR [rsp-0x48],rax
  0156b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01574: 08 	movabs rax,0x100080000005d
  0157e:    	mov    QWORD PTR [rsp-0x30],rax
  01583: 92 	movabs r13,0x5592e73a9470
  0158d:    	mov    rsi,QWORD PTR [rbx]
  01590:    	mov    QWORD PTR [rsp-0x18],rsi
  01595:    	lea    rsi,[rsp-0x18]
  0159a:    	mov    QWORD PTR [rbx],rsi
  0159d:    	lea    r14,[rsp-0x10]
  015a2:    	mov    QWORD PTR [rsp-0x20],r14
  015a7:    	call   0xffff2341
  015ac:    	lea    r14,[rbp-0x8]
  015b0:    	mov    QWORD PTR [rbx],r14
  015b3:    	mov    r14,QWORD PTR [rbp-0x10]
  015b7:    	movq   xmm3,QWORD PTR [rsp]
  015bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c2:    	add    rsp,0x10
  015c6:    	test   rax,rax
  015c9:    	je     0x2efce
  015cf:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  015d3:    	mov    rdi,QWORD PTR [r14-0x38]
  015d7:    	mov    rsi,QWORD PTR [r14-0x48]
  015db: 00 	test   rdi,0x7
  015e2:    	jne    0x2efdd
  015e8:    	cmp    DWORD PTR [rdi+0x4],0xb
  015ec:    	jne    0x2efdd
  015f2: 00 	test   rsi,0x1
  015f9:    	je     0x2efdd
  015ff:    	sar    rsi,1
  01602:    	sub    rsp,0x10
  01606:    	movq   QWORD PTR [rsp],xmm3
  0160b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01611:    	mov    rdx,r12
  01614:    	mov    rcx,QWORD PTR [r14-0x50]
  01618: 92 	movabs rax,0x5592e6e49290
  01622:    	call   rax
  01624:    	movq   xmm3,QWORD PTR [rsp]
  01629:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0162f:    	add    rsp,0x10
  01633:    	test   rax,rax
  01636:    	je     0x2efec
:00095 %3 = 1: i32
  0163c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  01644: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  0164c:    	mov    rdi,QWORD PTR [r14-0x38]
  01650:    	mov    rsi,QWORD PTR [r14-0x50]
  01654: 00 	test   rdi,0x7
  0165b:    	jne    0x2effb
  01661:    	cmp    DWORD PTR [rdi+0x4],0xb
  01665:    	jne    0x2effb
  0166b: 00 	test   rsi,0x1
  01672:    	je     0x2effb
  01678:    	sar    rsi,1
  0167b:    	sub    rsp,0x10
  0167f:    	movq   QWORD PTR [rsp],xmm3
  01684:    	movq   QWORD PTR [rsp+0x8],xmm4
  0168a: 92 	movabs rax,0x5592e6e49100
  01694:    	call   rax
  01696:    	movq   xmm3,QWORD PTR [rsp]
  0169b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016a1:    	add    rsp,0x10
  016a5:    	test   rax,rax
  016a8:    	je     0x2f00a
  016ae:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  016b2:    	mov    rdi,QWORD PTR [r14-0x50]
  016b6: 00 	test   rdi,0x7
  016bd:    	jne    0x2f019
  016c3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  016c7:    	jne    0x2f019
  016cd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe84f3],0x26        # 0xfffe9bc7
  016d4:    	jne    0x2f019
  016da:    	sub    rsp,0x10
  016de:    	movq   QWORD PTR [rsp],xmm3
  016e3:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e9: 00 	cmp    DWORD PTR [rip+0xfffffffffffe84db],0x0        # 0xfffe9bcb
  016f0:    	je     0x1708
  016f6:    	mov    rdi,r12
  016f9:    	mov    rsi,QWORD PTR [rbx]
  016fc: 92 	movabs rax,0x5592e6e3ca90
  01706:    	call   rax
  01708: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01711:    	mov    rax,QWORD PTR [r14-0x50]
  01715:    	mov    QWORD PTR [rsp-0x40],rax
  0171a: 00 	mov    rdi,0x0
  01721: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0172a: 07 	movabs rax,0x1000700000060
  01734:    	mov    QWORD PTR [rsp-0x30],rax
  01739: 92 	movabs r13,0x5592e73d9f90
  01743:    	mov    rsi,QWORD PTR [rbx]
  01746:    	mov    QWORD PTR [rsp-0x18],rsi
  0174b:    	lea    rsi,[rsp-0x18]
  01750:    	mov    QWORD PTR [rbx],rsi
  01753:    	lea    r14,[rsp-0x10]
  01758:    	mov    QWORD PTR [rsp-0x20],r14
  0175d:    	call   0xfffea487
  01762:    	lea    r14,[rbp-0x8]
  01766:    	mov    QWORD PTR [rbx],r14
  01769:    	mov    r14,QWORD PTR [rbp-0x10]
  0176d:    	movq   xmm3,QWORD PTR [rsp]
  01772:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01778:    	add    rsp,0x10
  0177c:    	test   rax,rax
  0177f:    	je     0x2f028
  01785:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01789:    	mov    rdi,QWORD PTR [r14-0x38]
  0178d:    	mov    rsi,QWORD PTR [r14-0x48]
  01791: 00 	test   rdi,0x7
  01798:    	jne    0x2f037
  0179e:    	cmp    DWORD PTR [rdi+0x4],0xb
  017a2:    	jne    0x2f037
  017a8: 00 	test   rsi,0x1
  017af:    	je     0x2f037
  017b5:    	sar    rsi,1
  017b8:    	sub    rsp,0x10
  017bc:    	movq   QWORD PTR [rsp],xmm3
  017c1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017c7:    	mov    rdx,r12
  017ca:    	mov    rcx,QWORD PTR [r14-0x50]
  017ce: 92 	movabs rax,0x5592e6e49290
  017d8:    	call   rax
  017da:    	movq   xmm3,QWORD PTR [rsp]
  017df:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017e5:    	add    rsp,0x10
  017e9:    	test   rax,rax
  017ec:    	je     0x2f046
:00101 %3 = %4
  017f2:    	mov    rax,QWORD PTR [r14-0x50]
  017f6:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  017fa:    	mov    rax,QWORD PTR [r14-0x48]
  017fe:    	leave  
  017ff:    	ret    
