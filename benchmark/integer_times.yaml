prelude: |
  class Integer
    def ruby_times
      if block_given?
        i = 0
        while i < self
          yield i
          i += 1
        end
        self
      else
        self.to_enum(:times)
      end
    end
  end

  class Array
    def ruby_map!
      if block_given?
        i = 0
        while i < self.size
          self[i] = yield(self[i])
          i += 1
        end
        self
      else
        self.to_enum(:ruby_map!)
      end
    end

    def ruby_map
      if block_given?
        ary = Array.new(self)
        ary.ruby_map! do |elem|
          yield elem
        end
      else
        self.to_enum(:ruby_map)
      end
    end
  end

  a = [*(0..999)]
benchmark:
  integer_times: |
    1000.times do end
  integer_ruby_times: |
    1000.ruby_times do end
  array_map: |
    a.map do |elem| elem end
  array_ruby_map: |
    a.ruby_map do |elem| elem end
loop_count: 5000
