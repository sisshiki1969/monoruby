==> start whole compile: initialize FuncId(62) self_class:Vec start:[00000] bytecode:0x55f67b846e50
<== finished compile. elapsed:9.7µs
offset:Pos(14793) code: 105 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x3
  0000e: jne    0x3cc2f
  00014: mov    QWORD PTR [r14-0x50],0x4
  0001c: mov    rdi,QWORD PTR [rbp-0x30]
  00020: test   rdi,0x7
  00027: jne    0x3cc3e
  0002d: cmp    DWORD PTR [rdi+0x4],0x28
  00031: jne    0x3cc3e
:00000 init_method reg:5 arg:3 pos:3 req:3 block:0 stack_offset:6
:00001 @x: Vec[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [rbp-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [rbp-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  0004f: mov    rdi,QWORD PTR [rbp-0x30]
  00053: mov    rax,QWORD PTR [r14-0x48]
  00057: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  0005b: mov    rax,QWORD PTR [r14-0x48]
  0005f: mov    QWORD PTR [r14-0x50],rax
:00005 ret %4
  00063: mov    rax,QWORD PTR [r14-0x50]
  00067: leave  
  00068: ret    
==> start whole compile: vdot FuncId(66) self_class:Vec start:[00000] bytecode:0x55f67b88de50
<== finished compile. elapsed:28.1µs
offset:Pos(16704) code: 1092 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jne    0x3c4d6
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    rdi,QWORD PTR [rbp-0x30]
  0002b: test   rdi,0x7
  00032: jne    0x3c4e5
  00038: cmp    DWORD PTR [rdi+0x4],0x28
  0003c: jne    0x3c4e5
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %2 = @x: Vec[IvarId(0)]
  00042: mov    rdi,QWORD PTR [rbp-0x30]
  00046: mov    rax,QWORD PTR [rdi+0x10]
  0004a: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = %1.call x()                     [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x38]
  00052: test   rdi,0x7
  00059: jne    0x3c4f4
  0005f: cmp    DWORD PTR [rdi+0x4],0x28
  00063: jne    0x3c4f4
  00069: cmp    DWORD PTR [rip+0xfffffffffffff205],0x26        # 0xfffff275
  00070: jne    0x3c4f4
  00076: mov    esi,DWORD PTR [rip+0x3cc]        # 0x448
  0007c: cmp    esi,0xffffffff
  0007f: je     0x3c503
  00085: cmp    WORD PTR [rdi+0x2],0x3
  0008a: jne    0xa3
  00090: cmp    esi,0x6
  00093: jge    0xa3
  00099: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009e: jmp    0xaf
  000a3: movabs rax,0x55f67a69e160
  000ad: call   rax
  000af: mov    QWORD PTR [r14-0x48],rax
:00003 
:00005 %2 = %2 * %3                         [Float][Float]
  000b3: mov    rdi,QWORD PTR [r14-0x40]
  000b7: test   rdi,0x1
  000be: jne    0x3c52c
  000c4: test   rdi,0x2
  000cb: je     0x107
  000d1: xorps  xmm2,xmm2
  000d4: movabs rax,0x8000000000000002
  000de: cmp    rdi,rax
  000e1: je     0x119
  000e7: mov    rax,rdi
  000ea: sar    rax,0x3f
  000ee: add    rax,0x2
  000f2: and    rdi,0xfffffffffffffffc
  000f6: or     rdi,rax
  000f9: rol    rdi,0x3d
  000fd: movq   xmm2,rdi
  00102: jmp    0x119
  00107: call   0xffffbf4c
  0010c: test   rax,rax
  0010f: je     0x3c52c
  00115: movq   xmm2,xmm0
  00119: mov    rdi,QWORD PTR [r14-0x48]
  0011d: test   rdi,0x1
  00124: jne    0x3c53b
  0012a: test   rdi,0x2
  00131: je     0x16d
  00137: xorps  xmm3,xmm3
  0013a: movabs rax,0x8000000000000002
  00144: cmp    rdi,rax
  00147: je     0x17f
  0014d: mov    rax,rdi
  00150: sar    rax,0x3f
  00154: add    rax,0x2
  00158: and    rdi,0xfffffffffffffffc
  0015c: or     rdi,rax
  0015f: rol    rdi,0x3d
  00163: movq   xmm3,rdi
  00168: jmp    0x17f
  0016d: call   0xffffbf4c
  00172: test   rax,rax
  00175: je     0x3c53b
  0017b: movq   xmm3,xmm0
  0017f: mulsd  xmm2,xmm3
:00006 %3 = @y: Vec[IvarId(1)]
  00183: mov    rdi,QWORD PTR [rbp-0x30]
  00187: mov    rax,QWORD PTR [rdi+0x18]
  0018b: mov    QWORD PTR [r14-0x48],rax
:00007 %4 = %1.call y()                     [Vec]
  0018f: mov    rdi,QWORD PTR [r14-0x38]
  00193: test   rdi,0x7
  0019a: jne    0x3c54a
  001a0: cmp    DWORD PTR [rdi+0x4],0x28
  001a4: jne    0x3c54a
  001aa: cmp    DWORD PTR [rip+0xfffffffffffff0c4],0x26        # 0xfffff275
  001b1: jne    0x3c54a
  001b7: mov    esi,DWORD PTR [rip+0x293]        # 0x450
  001bd: cmp    esi,0xffffffff
  001c0: je     0x3c566
  001c6: cmp    WORD PTR [rdi+0x2],0x3
  001cb: jne    0x1e4
  001d1: cmp    esi,0x6
  001d4: jge    0x1e4
  001da: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df: jmp    0x202
  001e4: sub    rsp,0x10
  001e8: movq   QWORD PTR [rsp],xmm2
  001ed: movabs rax,0x55f67a69e160
  001f7: call   rax
  001f9: movq   xmm2,QWORD PTR [rsp]
  001fe: add    rsp,0x10
  00202: mov    QWORD PTR [r14-0x50],rax
:00008 
:00010 %3 = %3 * %4                         [Float][Float]
  00206: mov    rdi,QWORD PTR [r14-0x48]
  0020a: test   rdi,0x1
  00211: jne    0x3c5a1
  00217: test   rdi,0x2
  0021e: je     0x25a
  00224: xorps  xmm3,xmm3
  00227: movabs rax,0x8000000000000002
  00231: cmp    rdi,rax
  00234: je     0x26c
  0023a: mov    rax,rdi
  0023d: sar    rax,0x3f
  00241: add    rax,0x2
  00245: and    rdi,0xfffffffffffffffc
  00249: or     rdi,rax
  0024c: rol    rdi,0x3d
  00250: movq   xmm3,rdi
  00255: jmp    0x26c
  0025a: call   0xffffbf4c
  0025f: test   rax,rax
  00262: je     0x3c5a1
  00268: movq   xmm3,xmm0
  0026c: mov    rdi,QWORD PTR [r14-0x50]
  00270: test   rdi,0x1
  00277: jne    0x3c5bd
  0027d: test   rdi,0x2
  00284: je     0x2c0
  0028a: xorps  xmm4,xmm4
  0028d: movabs rax,0x8000000000000002
  00297: cmp    rdi,rax
  0029a: je     0x2d2
  002a0: mov    rax,rdi
  002a3: sar    rax,0x3f
  002a7: add    rax,0x2
  002ab: and    rdi,0xfffffffffffffffc
  002af: or     rdi,rax
  002b2: rol    rdi,0x3d
  002b6: movq   xmm4,rdi
  002bb: jmp    0x2d2
  002c0: call   0xffffbf4c
  002c5: test   rax,rax
  002c8: je     0x3c5bd
  002ce: movq   xmm4,xmm0
  002d2: mulsd  xmm3,xmm4
:00011 %2 = %2 + %3                         [Float][Float]
  002d6: addsd  xmm2,xmm3
:00012 %3 = @z: Vec[IvarId(2)]
  002da: mov    rdi,QWORD PTR [rbp-0x30]
  002de: mov    rax,QWORD PTR [rdi+0x20]
  002e2: mov    QWORD PTR [r14-0x48],rax
:00013 %4 = %1.call z()                     [Vec]
  002e6: mov    rdi,QWORD PTR [r14-0x38]
  002ea: test   rdi,0x7
  002f1: jne    0x3c5d9
  002f7: cmp    DWORD PTR [rdi+0x4],0x28
  002fb: jne    0x3c5d9
  00301: cmp    DWORD PTR [rip+0xffffffffffffef6d],0x26        # 0xfffff275
  00308: jne    0x3c5d9
  0030e: mov    esi,DWORD PTR [rip+0x144]        # 0x458
  00314: cmp    esi,0xffffffff
  00317: je     0x3c5f5
  0031d: cmp    WORD PTR [rdi+0x2],0x3
  00322: jne    0x33b
  00328: cmp    esi,0x6
  0032b: jge    0x33b
  00331: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00336: jmp    0x359
  0033b: sub    rsp,0x10
  0033f: movq   QWORD PTR [rsp],xmm2
  00344: movabs rax,0x55f67a69e160
  0034e: call   rax
  00350: movq   xmm2,QWORD PTR [rsp]
  00355: add    rsp,0x10
  00359: mov    QWORD PTR [r14-0x50],rax
:00014 
:00016 %3 = %3 * %4                         [Float][Float]
  0035d: mov    rdi,QWORD PTR [r14-0x48]
  00361: test   rdi,0x1
  00368: jne    0x3c630
  0036e: test   rdi,0x2
  00375: je     0x3b1
  0037b: xorps  xmm3,xmm3
  0037e: movabs rax,0x8000000000000002
  00388: cmp    rdi,rax
  0038b: je     0x3c3
  00391: mov    rax,rdi
  00394: sar    rax,0x3f
  00398: add    rax,0x2
  0039c: and    rdi,0xfffffffffffffffc
  003a0: or     rdi,rax
  003a3: rol    rdi,0x3d
  003a7: movq   xmm3,rdi
  003ac: jmp    0x3c3
  003b1: call   0xffffbf4c
  003b6: test   rax,rax
  003b9: je     0x3c630
  003bf: movq   xmm3,xmm0
  003c3: mov    rdi,QWORD PTR [r14-0x50]
  003c7: test   rdi,0x1
  003ce: jne    0x3c64c
  003d4: test   rdi,0x2
  003db: je     0x417
  003e1: xorps  xmm4,xmm4
  003e4: movabs rax,0x8000000000000002
  003ee: cmp    rdi,rax
  003f1: je     0x429
  003f7: mov    rax,rdi
  003fa: sar    rax,0x3f
  003fe: add    rax,0x2
  00402: and    rdi,0xfffffffffffffffc
  00406: or     rdi,rax
  00409: rol    rdi,0x3d
  0040d: movq   xmm4,rdi
  00412: jmp    0x429
  00417: call   0xffffbf4c
  0041c: test   rax,rax
  0041f: je     0x3c64c
  00425: movq   xmm4,xmm0
  00429: mulsd  xmm3,xmm4
:00017 %2 = %2 + %3                         [Float][Float]
  0042d: addsd  xmm2,xmm3
:00018 ret %2
  00431: movq   xmm0,xmm2
  00435: call   0xffffc070
  0043a: mov    QWORD PTR [r14-0x40],rax
  0043e: mov    rax,QWORD PTR [r14-0x40]
  00442: leave  
  00443: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55f67b86e960
load_ivar: no profile
<== finished compile. elapsed:152µs
offset:Pos(17966) code: 7394 bytes  data: 104 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3c17a
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x3c189
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x3c189
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x3c198
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x3c198
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffffece9],0x26        # 0xffffed87
  0009e:    	jne    0x3c198
  000a4:    	mov    esi,DWORD PTR [rip+0x1c3c]        # 0x1ce6
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x3c1a7
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: f6 	movabs rax,0x55f67a69e160
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x3c1d0
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x3c1d0
  00108: 26 	cmp    DWORD PTR [rip+0xffffffffffffec78],0x26        # 0xffffed87
  0010f:    	jne    0x3c1d0
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	lea    r8,[rsp-0x48]
  00133:    	mov    rax,QWORD PTR [r14-0x80]
  00137:    	mov    QWORD PTR [r8],rax
  0013a:    	sub    r8,0x8
  0013e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00147: 08 	movabs rax,0x800000040
  00151:    	mov    QWORD PTR [rsp-0x30],rax
  00156: f6 	movabs r13,0x55f67b855f60
  00160:    	mov    rsi,QWORD PTR [rbx]
  00163:    	mov    QWORD PTR [rsp-0x18],rsi
  00168:    	lea    rsi,[rsp-0x18]
  0016d:    	mov    QWORD PTR [rbx],rsi
  00170:    	lea    r14,[rsp-0x10]
  00175:    	mov    QWORD PTR [rsp-0x20],r14
  0017a:    	call   0xfffffa28
  0017f:    	lea    r14,[rbp-0x8]
  00183:    	mov    QWORD PTR [rbx],r14
  00186:    	mov    r14,QWORD PTR [rbp-0x10]
  0018a: f6 	movabs r13,0x55f67b86e9d0
  00194:    	test   rax,rax
  00197:    	je     0xffffba05
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x3c1df
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b6:    	jne    0x3c1df
  001bc: 26 	cmp    DWORD PTR [rip+0xffffffffffffebc4],0x26        # 0xffffed87
  001c3:    	jne    0x3c1df
  001c9:    	mov    esi,DWORD PTR [rip+0x1b1f]        # 0x1cee
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x3c1ee
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: f6 	movabs rax,0x55f67a69e160
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x3c217
  00217:    	cmp    DWORD PTR [rdi+0x4],0x28
  0021b:    	jne    0x3c217
  00221: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb5f],0x26        # 0xffffed87
  00228:    	jne    0x3c217
  0022e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00237:    	mov    rax,QWORD PTR [r14-0x48]
  0023b:    	mov    QWORD PTR [rsp-0x40],rax
  00240: 00 	mov    rdi,0x1
  00247:    	lea    r8,[rsp-0x48]
  0024c:    	mov    rax,QWORD PTR [r14-0x78]
  00250:    	mov    QWORD PTR [r8],rax
  00253:    	sub    r8,0x8
  00257: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00260: 05 	movabs rax,0x500000042
  0026a:    	mov    QWORD PTR [rsp-0x30],rax
  0026f: f6 	movabs r13,0x55f67b88de50
  00279:    	mov    rsi,QWORD PTR [rbx]
  0027c:    	mov    QWORD PTR [rsp-0x18],rsi
  00281:    	lea    rsi,[rsp-0x18]
  00286:    	mov    QWORD PTR [rbx],rsi
  00289:    	lea    r14,[rsp-0x10]
  0028e:    	mov    QWORD PTR [rsp-0x20],r14
  00293:    	call   0xfffffaba
  00298:    	lea    r14,[rbp-0x8]
  0029c:    	mov    QWORD PTR [rbx],r14
  0029f:    	mov    r14,QWORD PTR [rbp-0x10]
  002a3: f6 	movabs r13,0x55f67b86ea30
  002ad:    	test   rax,rax
  002b0:    	je     0xffffba05
  002b6:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ba:    	mov    rax,QWORD PTR [r14-0x48]
  002be:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002c2:    	mov    rdi,QWORD PTR [r14-0x48]
  002c6: 00 	test   rdi,0x7
  002cd:    	jne    0x3c226
  002d3:    	cmp    DWORD PTR [rdi+0x4],0x28
  002d7:    	jne    0x3c226
  002dd: 26 	cmp    DWORD PTR [rip+0xffffffffffffeaa3],0x26        # 0xffffed87
  002e4:    	jne    0x3c226
  002ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002f3:    	mov    rax,QWORD PTR [r14-0x48]
  002f7:    	mov    QWORD PTR [rsp-0x40],rax
  002fc: 00 	mov    rdi,0x1
  00303:    	lea    r8,[rsp-0x48]
  00308:    	mov    rax,QWORD PTR [r14-0x80]
  0030c:    	mov    QWORD PTR [r8],rax
  0030f:    	sub    r8,0x8
  00313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0031c: 05 	movabs rax,0x500000042
  00326:    	mov    QWORD PTR [rsp-0x30],rax
  0032b: f6 	movabs r13,0x55f67b88de50
  00335:    	mov    rsi,QWORD PTR [rbx]
  00338:    	mov    QWORD PTR [rsp-0x18],rsi
  0033d:    	lea    rsi,[rsp-0x18]
  00342:    	mov    QWORD PTR [rbx],rsi
  00345:    	lea    r14,[rsp-0x10]
  0034a:    	mov    QWORD PTR [rsp-0x20],r14
  0034f:    	call   0xfffffaba
  00354:    	lea    r14,[rbp-0x8]
  00358:    	mov    QWORD PTR [rbx],r14
  0035b:    	mov    r14,QWORD PTR [rbp-0x10]
  0035f: f6 	movabs r13,0x55f67b86ea70
  00369:    	test   rax,rax
  0036c:    	je     0xffffba05
  00372:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00376:    	mov    rdi,QWORD PTR [rbp-0x30]
  0037a:    	mov    rax,QWORD PTR [rdi+0x18]
  0037e:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00382:    	mov    rdi,QWORD PTR [rbp-0x30]
  00386:    	mov    rax,QWORD PTR [rdi+0x18]
  0038a: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00391:    	mov    rdi,QWORD PTR [r14-0x80]
  00395: 00 	test   rdi,0x1
  0039c:    	jne    0x3c235
  003a2: 00 	test   rdi,0x2
  003a9:    	je     0x3e5
  003af:    	xorps  xmm2,xmm2
  003b2: 00 	movabs rax,0x8000000000000002
  003bc:    	cmp    rdi,rax
  003bf:    	je     0x3f7
  003c5:    	mov    rax,rdi
  003c8:    	sar    rax,0x3f
  003cc:    	add    rax,0x2
  003d0:    	and    rdi,0xfffffffffffffffc
  003d4:    	or     rdi,rax
  003d7:    	rol    rdi,0x3d
  003db:    	movq   xmm2,rdi
  003e0:    	jmp    0x3f7
  003e5:    	call   0xffffba5e
  003ea:    	test   rax,rax
  003ed:    	je     0x3c235
  003f3:    	movq   xmm2,xmm0
  003f7: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003fe: 00 	test   rdi,0x1
  00405:    	jne    0x3c244
  0040b: 00 	test   rdi,0x2
  00412:    	je     0x44e
  00418:    	xorps  xmm3,xmm3
  0041b: 00 	movabs rax,0x8000000000000002
  00425:    	cmp    rdi,rax
  00428:    	je     0x460
  0042e:    	mov    rax,rdi
  00431:    	sar    rax,0x3f
  00435:    	add    rax,0x2
  00439:    	and    rdi,0xfffffffffffffffc
  0043d:    	or     rdi,rax
  00440:    	rol    rdi,0x3d
  00444:    	movq   xmm3,rdi
  00449:    	jmp    0x460
  0044e:    	call   0xffffba5e
  00453:    	test   rax,rax
  00456:    	je     0x3c244
  0045c:    	movq   xmm3,xmm0
  00460:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00464:    	mov    rdi,QWORD PTR [r14-0x78]
  00468: 00 	test   rdi,0x1
  0046f:    	jne    0x3c253
  00475: 00 	test   rdi,0x2
  0047c:    	je     0x4b8
  00482:    	xorps  xmm4,xmm4
  00485: 00 	movabs rax,0x8000000000000002
  0048f:    	cmp    rdi,rax
  00492:    	je     0x4ca
  00498:    	mov    rax,rdi
  0049b:    	sar    rax,0x3f
  0049f:    	add    rax,0x2
  004a3:    	and    rdi,0xfffffffffffffffc
  004a7:    	or     rdi,rax
  004aa:    	rol    rdi,0x3d
  004ae:    	movq   xmm4,rdi
  004b3:    	jmp    0x4ca
  004b8:    	call   0xffffba5e
  004bd:    	test   rax,rax
  004c0:    	je     0x3c253
  004c6:    	movq   xmm4,xmm0
  004ca:    	movq   xmm5,xmm4
  004ce:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004d2:    	mov    rdi,QWORD PTR [r14-0x50]
  004d6: 00 	test   rdi,0x1
  004dd:    	jne    0x3c26f
  004e3: 00 	test   rdi,0x2
  004ea:    	je     0x526
  004f0:    	xorps  xmm6,xmm6
  004f3: 00 	movabs rax,0x8000000000000002
  004fd:    	cmp    rdi,rax
  00500:    	je     0x538
  00506:    	mov    rax,rdi
  00509:    	sar    rax,0x3f
  0050d:    	add    rax,0x2
  00511:    	and    rdi,0xfffffffffffffffc
  00515:    	or     rdi,rax
  00518:    	rol    rdi,0x3d
  0051c:    	movq   xmm6,rdi
  00521:    	jmp    0x538
  00526:    	call   0xffffba5e
  0052b:    	test   rax,rax
  0052e:    	je     0x3c26f
  00534:    	movq   xmm6,xmm0
  00538:    	movq   xmm4,xmm6
  0053c:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  00540:    	movq   xmm7,xmm4
  00544:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00548: 00 	movq   xmm4,QWORD PTR [rip+0x17a2]        # 0x1cf2
  00550: 00 	movabs rax,0x8000000000000002
  0055a:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0055e:    	ucomisd xmm7,xmm4
  00562:    	jbe    0x3d051
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00568: 01 	sub    DWORD PTR [rip+0x178b],0x1        # 0x1cfa
  0056f:    	je     0x3c2db
  00575:    	movq   xmm0,xmm6
  00579:    	call   0xffffbb82
  0057e:    	mov    QWORD PTR [r14-0x78],rax
  00582:    	sub    rsp,0x30
  00586:    	movq   QWORD PTR [rsp],xmm2
  0058b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00591:    	movq   QWORD PTR [rsp+0x10],xmm5
  00597:    	movq   QWORD PTR [rsp+0x18],xmm6
  0059d:    	movq   QWORD PTR [rsp+0x20],xmm7
  005a3:    	mov    rdi,QWORD PTR [r14-0x78]
  005a7:    	mov    rdx,rdi
  005aa:    	mov    rdi,rbx
  005ad:    	mov    rsi,r12
  005b0: f6 	movabs rax,0x55f67a6dcb60
  005ba:    	call   rax
  005bc:    	movq   xmm2,QWORD PTR [rsp]
  005c1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005cd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005d3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005d9:    	add    rsp,0x30
  005dd: f6 	movabs r13,0x55f67b86eb30
  005e7:    	test   rax,rax
  005ea:    	je     0xffffba05
  005f0:    	mov    QWORD PTR [r14-0x78],rax
:00029 %11 = const[Math]                    [<INVALID>]
  005f4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe797]        # 0xffffed92
  005fb: 00 	cmp    rax,QWORD PTR [rip+0x1710]        # 0x1d12
  00602:    	jne    0x3c2f9
  00608: 00 	mov    rax,QWORD PTR [rip+0x16f3]        # 0x1d02
  0060f: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  00616:    	movq   xmm0,xmm7
  0061a:    	call   0xffffbb82
  0061f: ff 	mov    QWORD PTR [r14-0x90],rax
  00626:    	sub    rsp,0x20
  0062a:    	movq   QWORD PTR [rsp],xmm5
  0062f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00635:    	movq   QWORD PTR [rsp+0x10],xmm7
  0063b: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00642: f6 	movabs rax,0x55f67a7285d0
  0064c:    	call   rax
  0064e:    	mov    r15d,eax
  00651: f6 	movabs r13,0x55f67b86eb60
  0065b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0065f:    	jne    0x3c375
  00665:    	mov    eax,DWORD PTR [rip+0xffffffffffffe71c]        # 0xffffed87
  0066b:    	cmp    DWORD PTR [r13-0x4],eax
  0066f:    	jne    0x3c375
  00675: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0067e:    	mov    rsi,QWORD PTR [rbx]
  00681:    	mov    QWORD PTR [rsp-0x18],rsi
  00686:    	lea    rsi,[rsp-0x18]
  0068b:    	mov    QWORD PTR [rbx],rsi
  0068e: ff 	mov    rax,QWORD PTR [r14-0x88]
  00695:    	mov    QWORD PTR [rsp-0x40],rax
  0069a: 00 	mov    rdi,0x1
  006a1:    	lea    r8,[rsp-0x48]
  006a6: ff 	mov    rax,QWORD PTR [r14-0x90]
  006ad:    	mov    QWORD PTR [r8],rax
  006b0:    	sub    r8,0x8
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd:    	lea    r14,[rsp-0x10]
  006c2:    	mov    QWORD PTR [rsp-0x20],r14
  006c7: 00 	movabs rax,0x0
  006d1:    	mov    QWORD PTR [rsp-0x30],rax
  006d6: 00 	movabs r13,0x0
  006e0:    	call   0xffffb9d2
  006e5:    	lea    r14,[rbp-0x8]
  006e9:    	mov    QWORD PTR [rbx],r14
  006ec:    	mov    r14,QWORD PTR [rbp-0x10]
  006f0:    	movq   xmm5,QWORD PTR [rsp]
  006f5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006fb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00701:    	add    rsp,0x20
  00705:    	test   rax,rax
  00708:    	je     0x3c3eb
  0070e:    	mov    QWORD PTR [r14-0x80],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00712:    	mov    rdi,QWORD PTR [r14-0x78]
  00716:    	mov    rsi,QWORD PTR [r14-0x80]
  0071a:    	sub    rsp,0x20
  0071e:    	movq   QWORD PTR [rsp],xmm5
  00723:    	movq   QWORD PTR [rsp+0x8],xmm6
  00729:    	movq   QWORD PTR [rsp+0x10],xmm7
  0072f:    	mov    rdx,rdi
  00732:    	mov    rcx,rsi
  00735:    	mov    rdi,rbx
  00738:    	mov    rsi,r12
  0073b: f6 	movabs rax,0x55f67a6deed0
  00745:    	call   rax
  00747:    	movq   xmm5,QWORD PTR [rsp]
  0074c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00752:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00758:    	add    rsp,0x20
  0075c: f6 	movabs r13,0x55f67b86eb90
  00766:    	test   rax,rax
  00769:    	je     0xffffba05
  0076f:    	mov    QWORD PTR [r14-0x68],rax
:00035 %9 = literal[0.0]
  00773: 00 	movq   xmm2,QWORD PTR [rip+0x15a7]        # 0x1d22
  0077b: 00 	movabs rax,0x8000000000000002
  00785:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00789:    	mov    rdi,QWORD PTR [r14-0x68]
  0078d:    	mov    rsi,QWORD PTR [r14-0x78]
  00791: 00 	test   rdi,0x1
  00798:    	je     0x3c3fa
  0079e: 00 	test   rsi,0x1
  007a5:    	je     0x3c3fa
  007ab:    	cmp    rdi,rsi
  007ae:    	jle    0x3cfb8
:00038 %9 = %2.call t()                     [<INVALID>]
  007b4:    	sub    rsp,0x20
  007b8:    	movq   QWORD PTR [rsp],xmm5
  007bd:    	movq   QWORD PTR [rsp+0x8],xmm6
  007c3:    	movq   QWORD PTR [rsp+0x10],xmm7
  007c9:    	mov    rdi,QWORD PTR [r14-0x40]
  007cd: f6 	movabs rax,0x55f67a7285d0
  007d7:    	call   rax
  007d9:    	mov    r15d,eax
  007dc: f6 	movabs r13,0x55f67b86ebd0
  007e6:    	cmp    r15d,DWORD PTR [r13-0x8]
  007ea:    	jne    0x3c443
  007f0:    	mov    eax,DWORD PTR [rip+0xffffffffffffe591]        # 0xffffed87
  007f6:    	cmp    DWORD PTR [r13-0x4],eax
  007fa:    	jne    0x3c443
  00800: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00809:    	mov    rsi,QWORD PTR [rbx]
  0080c:    	mov    QWORD PTR [rsp-0x18],rsi
  00811:    	lea    rsi,[rsp-0x18]
  00816:    	mov    QWORD PTR [rbx],rsi
  00819:    	mov    rax,QWORD PTR [r14-0x40]
  0081d:    	mov    QWORD PTR [rsp-0x40],rax
  00822: 00 	mov    rdi,0x0
  00829: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00832:    	lea    r14,[rsp-0x10]
  00837:    	mov    QWORD PTR [rsp-0x20],r14
  0083c: 00 	movabs rax,0x0
  00846:    	mov    QWORD PTR [rsp-0x30],rax
  0084b: 00 	movabs r13,0x0
  00855:    	call   0xffffb9d2
  0085a:    	lea    r14,[rbp-0x8]
  0085e:    	mov    QWORD PTR [rbx],r14
  00861:    	mov    r14,QWORD PTR [rbp-0x10]
  00865:    	movq   xmm5,QWORD PTR [rsp]
  0086a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00870:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00876:    	add    rsp,0x20
  0087a:    	test   rax,rax
  0087d:    	je     0x3c4b6
  00883:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00887:    	mov    rdi,QWORD PTR [r14-0x68]
  0088b:    	mov    rsi,QWORD PTR [r14-0x78]
  0088f: 00 	test   rdi,0x1
  00896:    	je     0x3c4c5
  0089c: 00 	test   rsi,0x1
  008a3:    	je     0x3c4c5
  008a9:    	cmp    rdi,rsi
  008ac:    	jge    0x3cfeb
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  008b2:    	sub    rsp,0x20
  008b6:    	movq   QWORD PTR [rsp],xmm5
  008bb:    	movq   QWORD PTR [rsp+0x8],xmm6
  008c1:    	movq   QWORD PTR [rsp+0x10],xmm7
  008c7:    	mov    rdi,QWORD PTR [r14-0x40]
  008cb: f6 	movabs rax,0x55f67a7285d0
  008d5:    	call   rax
  008d7:    	mov    r15d,eax
  008da: f6 	movabs r13,0x55f67b86ec20
  008e4:    	cmp    r15d,DWORD PTR [r13-0x8]
  008e8:    	jne    0x3c50e
  008ee:    	mov    eax,DWORD PTR [rip+0xffffffffffffe493]        # 0xffffed87
  008f4:    	cmp    DWORD PTR [r13-0x4],eax
  008f8:    	jne    0x3c50e
  008fe: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00907:    	mov    rsi,QWORD PTR [rbx]
  0090a:    	mov    QWORD PTR [rsp-0x18],rsi
  0090f:    	lea    rsi,[rsp-0x18]
  00914:    	mov    QWORD PTR [rbx],rsi
  00917:    	mov    rax,QWORD PTR [r14-0x40]
  0091b:    	mov    QWORD PTR [rsp-0x40],rax
  00920: 00 	mov    rdi,0x1
  00927:    	lea    r8,[rsp-0x48]
  0092c:    	mov    rax,QWORD PTR [r14-0x68]
  00930:    	mov    QWORD PTR [r8],rax
  00933:    	sub    r8,0x8
  00937: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00940:    	lea    r14,[rsp-0x10]
  00945:    	mov    QWORD PTR [rsp-0x20],r14
  0094a: 00 	movabs rax,0x0
  00954:    	mov    QWORD PTR [rsp-0x30],rax
  00959: 00 	movabs r13,0x0
  00963:    	call   0xffffb9d2
  00968:    	lea    r14,[rbp-0x8]
  0096c:    	mov    QWORD PTR [rbx],r14
  0096f:    	mov    r14,QWORD PTR [rbp-0x10]
  00973:    	movq   xmm5,QWORD PTR [rsp]
  00978:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0097e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00984:    	add    rsp,0x20
  00988:    	test   rax,rax
  0098b:    	je     0x3c581
:00044 
:00046 %9 = literal[true]
  00991: 00 	mov    rax,0x1c
  00998:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  0099c:    	sub    rsp,0x20
  009a0:    	movq   QWORD PTR [rsp],xmm5
  009a5:    	movq   QWORD PTR [rsp+0x8],xmm6
  009ab:    	movq   QWORD PTR [rsp+0x10],xmm7
  009b1:    	mov    rdi,QWORD PTR [r14-0x40]
  009b5: f6 	movabs rax,0x55f67a7285d0
  009bf:    	call   rax
  009c1:    	mov    r15d,eax
  009c4: f6 	movabs r13,0x55f67b86ec60
  009ce:    	cmp    r15d,DWORD PTR [r13-0x8]
  009d2:    	jne    0x3c590
  009d8:    	mov    eax,DWORD PTR [rip+0xffffffffffffe3a9]        # 0xffffed87
  009de:    	cmp    DWORD PTR [r13-0x4],eax
  009e2:    	jne    0x3c590
  009e8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009f1:    	mov    rsi,QWORD PTR [rbx]
  009f4:    	mov    QWORD PTR [rsp-0x18],rsi
  009f9:    	lea    rsi,[rsp-0x18]
  009fe:    	mov    QWORD PTR [rbx],rsi
  00a01:    	mov    rax,QWORD PTR [r14-0x40]
  00a05:    	mov    QWORD PTR [rsp-0x40],rax
  00a0a: 00 	mov    rdi,0x1
  00a11:    	lea    r8,[rsp-0x48]
  00a16:    	mov    rax,QWORD PTR [r14-0x78]
  00a1a:    	mov    QWORD PTR [r8],rax
  00a1d:    	sub    r8,0x8
  00a21: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a2a:    	lea    r14,[rsp-0x10]
  00a2f:    	mov    QWORD PTR [rsp-0x20],r14
  00a34: 00 	movabs rax,0x0
  00a3e:    	mov    QWORD PTR [rsp-0x30],rax
  00a43: 00 	movabs r13,0x0
  00a4d:    	call   0xffffb9d2
  00a52:    	lea    r14,[rbp-0x8]
  00a56:    	mov    QWORD PTR [rbx],r14
  00a59:    	mov    r14,QWORD PTR [rbp-0x10]
  00a5d:    	movq   xmm5,QWORD PTR [rsp]
  00a62:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a68:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a6e:    	add    rsp,0x20
  00a72:    	test   rax,rax
  00a75:    	je     0x3c603
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a7b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe310]        # 0xffffed92
  00a82: 00 	cmp    rax,QWORD PTR [rip+0x12b9]        # 0x1d42
  00a89:    	jne    0x3c612
  00a8f: 00 	mov    rax,QWORD PTR [rip+0x129c]        # 0x1d32
  00a96:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a9a:    	sub    rsp,0x20
  00a9e:    	movq   QWORD PTR [rsp],xmm5
  00aa3:    	movq   QWORD PTR [rsp+0x8],xmm6
  00aa9:    	movq   QWORD PTR [rsp+0x10],xmm7
  00aaf:    	mov    rdi,QWORD PTR [r14-0x38]
  00ab3: f6 	movabs rax,0x55f67a7285d0
  00abd:    	call   rax
  00abf:    	mov    r15d,eax
  00ac2: f6 	movabs r13,0x55f67b86eca0
  00acc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ad0:    	jne    0x3c682
  00ad6:    	mov    eax,DWORD PTR [rip+0xffffffffffffe2ab]        # 0xffffed87
  00adc:    	cmp    DWORD PTR [r13-0x4],eax
  00ae0:    	jne    0x3c682
  00ae6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aef:    	mov    rsi,QWORD PTR [rbx]
  00af2:    	mov    QWORD PTR [rsp-0x18],rsi
  00af7:    	lea    rsi,[rsp-0x18]
  00afc:    	mov    QWORD PTR [rbx],rsi
  00aff:    	mov    rax,QWORD PTR [r14-0x38]
  00b03:    	mov    QWORD PTR [rsp-0x40],rax
  00b08: 00 	mov    rdi,0x0
  00b0f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b18:    	lea    r14,[rsp-0x10]
  00b1d:    	mov    QWORD PTR [rsp-0x20],r14
  00b22: 00 	movabs rax,0x0
  00b2c:    	mov    QWORD PTR [rsp-0x30],rax
  00b31: 00 	movabs r13,0x0
  00b3b:    	call   0xffffb9d2
  00b40:    	lea    r14,[rbp-0x8]
  00b44:    	mov    QWORD PTR [rbx],r14
  00b47:    	mov    r14,QWORD PTR [rbp-0x10]
  00b4b:    	movq   xmm5,QWORD PTR [rsp]
  00b50:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b56:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b5c:    	add    rsp,0x20
  00b60:    	test   rax,rax
  00b63:    	je     0x3c6f5
  00b69: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b70:    	sub    rsp,0x20
  00b74:    	movq   QWORD PTR [rsp],xmm5
  00b79:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b7f:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b85: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00b8c: f6 	movabs rax,0x55f67a7285d0
  00b96:    	call   rax
  00b98:    	mov    r15d,eax
  00b9b: f6 	movabs r13,0x55f67b86ecd0
  00ba5:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ba9:    	jne    0x3c704
  00baf:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1d2]        # 0xffffed87
  00bb5:    	cmp    DWORD PTR [r13-0x4],eax
  00bb9:    	jne    0x3c704
  00bbf: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00bc8:    	mov    rsi,QWORD PTR [rbx]
  00bcb:    	mov    QWORD PTR [rsp-0x18],rsi
  00bd0:    	lea    rsi,[rsp-0x18]
  00bd5:    	mov    QWORD PTR [rbx],rsi
  00bd8: ff 	mov    rax,QWORD PTR [r14-0x90]
  00bdf:    	mov    QWORD PTR [rsp-0x40],rax
  00be4: 00 	mov    rdi,0x0
  00beb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00bf4:    	lea    r14,[rsp-0x10]
  00bf9:    	mov    QWORD PTR [rsp-0x20],r14
  00bfe: 00 	movabs rax,0x0
  00c08:    	mov    QWORD PTR [rsp-0x30],rax
  00c0d: 00 	movabs r13,0x0
  00c17:    	call   0xffffb9d2
  00c1c:    	lea    r14,[rbp-0x8]
  00c20:    	mov    QWORD PTR [rbx],r14
  00c23:    	mov    r14,QWORD PTR [rbp-0x10]
  00c27:    	movq   xmm5,QWORD PTR [rsp]
  00c2c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c32:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c38:    	add    rsp,0x20
  00c3c:    	test   rax,rax
  00c3f:    	je     0x3c77a
  00c45: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c4c:    	sub    rsp,0x20
  00c50:    	movq   QWORD PTR [rsp],xmm5
  00c55:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c5b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c61:    	mov    rdi,QWORD PTR [r14-0x38]
  00c65: f6 	movabs rax,0x55f67a7285d0
  00c6f:    	call   rax
  00c71:    	mov    r15d,eax
  00c74: f6 	movabs r13,0x55f67b86ed00
  00c7e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c82:    	jne    0x3c789
  00c88:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0f9]        # 0xffffed87
  00c8e:    	cmp    DWORD PTR [r13-0x4],eax
  00c92:    	jne    0x3c789
  00c98: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ca1:    	mov    rsi,QWORD PTR [rbx]
  00ca4:    	mov    QWORD PTR [rsp-0x18],rsi
  00ca9:    	lea    rsi,[rsp-0x18]
  00cae:    	mov    QWORD PTR [rbx],rsi
  00cb1:    	mov    rax,QWORD PTR [r14-0x38]
  00cb5:    	mov    QWORD PTR [rsp-0x40],rax
  00cba: 00 	mov    rdi,0x0
  00cc1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cca:    	lea    r14,[rsp-0x10]
  00ccf:    	mov    QWORD PTR [rsp-0x20],r14
  00cd4: 00 	movabs rax,0x0
  00cde:    	mov    QWORD PTR [rsp-0x30],rax
  00ce3: 00 	movabs r13,0x0
  00ced:    	call   0xffffb9d2
  00cf2:    	lea    r14,[rbp-0x8]
  00cf6:    	mov    QWORD PTR [rbx],r14
  00cf9:    	mov    r14,QWORD PTR [rbp-0x10]
  00cfd:    	movq   xmm5,QWORD PTR [rsp]
  00d02:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d08:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d0e:    	add    rsp,0x20
  00d12:    	test   rax,rax
  00d15:    	je     0x3c7fc
  00d1b: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00d22:    	sub    rsp,0x20
  00d26:    	movq   QWORD PTR [rsp],xmm5
  00d2b:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d31:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d37: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00d3e: f6 	movabs rax,0x55f67a7285d0
  00d48:    	call   rax
  00d4a:    	mov    r15d,eax
  00d4d: f6 	movabs r13,0x55f67b86ed30
  00d57:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d5b:    	jne    0x3c80b
  00d61:    	mov    eax,DWORD PTR [rip+0xffffffffffffe020]        # 0xffffed87
  00d67:    	cmp    DWORD PTR [r13-0x4],eax
  00d6b:    	jne    0x3c80b
  00d71: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d7a:    	mov    rsi,QWORD PTR [rbx]
  00d7d:    	mov    QWORD PTR [rsp-0x18],rsi
  00d82:    	lea    rsi,[rsp-0x18]
  00d87:    	mov    QWORD PTR [rbx],rsi
  00d8a: ff 	mov    rax,QWORD PTR [r14-0x98]
  00d91:    	mov    QWORD PTR [rsp-0x40],rax
  00d96: 00 	mov    rdi,0x0
  00d9d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00da6:    	lea    r14,[rsp-0x10]
  00dab:    	mov    QWORD PTR [rsp-0x20],r14
  00db0: 00 	movabs rax,0x0
  00dba:    	mov    QWORD PTR [rsp-0x30],rax
  00dbf: 00 	movabs r13,0x0
  00dc9:    	call   0xffffb9d2
  00dce:    	lea    r14,[rbp-0x8]
  00dd2:    	mov    QWORD PTR [rbx],r14
  00dd5:    	mov    r14,QWORD PTR [rbp-0x10]
  00dd9:    	movq   xmm5,QWORD PTR [rsp]
  00dde:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00de4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00dea:    	add    rsp,0x20
  00dee:    	test   rax,rax
  00df1:    	je     0x3c881
  00df7: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00dfe: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00e05:    	mov    rsi,QWORD PTR [r14-0x68]
  00e09:    	sub    rsp,0x20
  00e0d:    	movq   QWORD PTR [rsp],xmm5
  00e12:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e18:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e1e:    	mov    rdx,rdi
  00e21:    	mov    rcx,rsi
  00e24:    	mov    rdi,rbx
  00e27:    	mov    rsi,r12
  00e2a: f6 	movabs rax,0x55f67a6dfeb0
  00e34:    	call   rax
  00e36:    	movq   xmm5,QWORD PTR [rsp]
  00e3b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e41:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e47:    	add    rsp,0x20
  00e4b: f6 	movabs r13,0x55f67b86ed60
  00e55:    	test   rax,rax
  00e58:    	je     0xffffba05
  00e5e: ff 	mov    QWORD PTR [r14-0x90],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e65: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e6c: ff 	mov    rsi,QWORD PTR [r14-0x90]
  00e73:    	sub    rsp,0x20
  00e77:    	movq   QWORD PTR [rsp],xmm5
  00e7c:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e82:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e88:    	mov    rdx,rdi
  00e8b:    	mov    rcx,rsi
  00e8e:    	mov    rdi,rbx
  00e91:    	mov    rsi,r12
  00e94: f6 	movabs rax,0x55f67a6ddf30
  00e9e:    	call   rax
  00ea0:    	movq   xmm5,QWORD PTR [rsp]
  00ea5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00eab:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00eb1:    	add    rsp,0x20
  00eb5: f6 	movabs r13,0x55f67b86ed70
  00ebf:    	test   rax,rax
  00ec2:    	je     0xffffba05
  00ec8: ff 	mov    QWORD PTR [r14-0x88],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00ecf:    	sub    rsp,0x20
  00ed3:    	movq   QWORD PTR [rsp],xmm5
  00ed8:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ede:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ee4:    	mov    rdi,QWORD PTR [r14-0x38]
  00ee8: f6 	movabs rax,0x55f67a7285d0
  00ef2:    	call   rax
  00ef4:    	mov    r15d,eax
  00ef7: f6 	movabs r13,0x55f67b86ed80
  00f01:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f05:    	jne    0x3c890
  00f0b:    	mov    eax,DWORD PTR [rip+0xffffffffffffde76]        # 0xffffed87
  00f11:    	cmp    DWORD PTR [r13-0x4],eax
  00f15:    	jne    0x3c890
  00f1b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f24:    	mov    rsi,QWORD PTR [rbx]
  00f27:    	mov    QWORD PTR [rsp-0x18],rsi
  00f2c:    	lea    rsi,[rsp-0x18]
  00f31:    	mov    QWORD PTR [rbx],rsi
  00f34:    	mov    rax,QWORD PTR [r14-0x38]
  00f38:    	mov    QWORD PTR [rsp-0x40],rax
  00f3d: 00 	mov    rdi,0x0
  00f44: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f4d:    	lea    r14,[rsp-0x10]
  00f52:    	mov    QWORD PTR [rsp-0x20],r14
  00f57: 00 	movabs rax,0x0
  00f61:    	mov    QWORD PTR [rsp-0x30],rax
  00f66: 00 	movabs r13,0x0
  00f70:    	call   0xffffb9d2
  00f75:    	lea    r14,[rbp-0x8]
  00f79:    	mov    QWORD PTR [rbx],r14
  00f7c:    	mov    r14,QWORD PTR [rbp-0x10]
  00f80:    	movq   xmm5,QWORD PTR [rsp]
  00f85:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f8b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f91:    	add    rsp,0x20
  00f95:    	test   rax,rax
  00f98:    	je     0x3c903
  00f9e: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00fa5:    	sub    rsp,0x20
  00fa9:    	movq   QWORD PTR [rsp],xmm5
  00fae:    	movq   QWORD PTR [rsp+0x8],xmm6
  00fb4:    	movq   QWORD PTR [rsp+0x10],xmm7
  00fba: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00fc1: f6 	movabs rax,0x55f67a7285d0
  00fcb:    	call   rax
  00fcd:    	mov    r15d,eax
  00fd0: f6 	movabs r13,0x55f67b86edb0
  00fda:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fde:    	jne    0x3c912
  00fe4:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd9d]        # 0xffffed87
  00fea:    	cmp    DWORD PTR [r13-0x4],eax
  00fee:    	jne    0x3c912
  00ff4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ffd:    	mov    rsi,QWORD PTR [rbx]
  01000:    	mov    QWORD PTR [rsp-0x18],rsi
  01005:    	lea    rsi,[rsp-0x18]
  0100a:    	mov    QWORD PTR [rbx],rsi
  0100d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01014:    	mov    QWORD PTR [rsp-0x40],rax
  01019: 00 	mov    rdi,0x0
  01020: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01029:    	lea    r14,[rsp-0x10]
  0102e:    	mov    QWORD PTR [rsp-0x20],r14
  01033: 00 	movabs rax,0x0
  0103d:    	mov    QWORD PTR [rsp-0x30],rax
  01042: 00 	movabs r13,0x0
  0104c:    	call   0xffffb9d2
  01051:    	lea    r14,[rbp-0x8]
  01055:    	mov    QWORD PTR [rbx],r14
  01058:    	mov    r14,QWORD PTR [rbp-0x10]
  0105c:    	movq   xmm5,QWORD PTR [rsp]
  01061:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01067:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0106d:    	add    rsp,0x20
  01071:    	test   rax,rax
  01074:    	je     0x3c988
  0107a: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  01081:    	sub    rsp,0x20
  01085:    	movq   QWORD PTR [rsp],xmm5
  0108a:    	movq   QWORD PTR [rsp+0x8],xmm6
  01090:    	movq   QWORD PTR [rsp+0x10],xmm7
  01096:    	mov    rdi,QWORD PTR [r14-0x38]
  0109a: f6 	movabs rax,0x55f67a7285d0
  010a4:    	call   rax
  010a6:    	mov    r15d,eax
  010a9: f6 	movabs r13,0x55f67b86ede0
  010b3:    	cmp    r15d,DWORD PTR [r13-0x8]
  010b7:    	jne    0x3c997
  010bd:    	mov    eax,DWORD PTR [rip+0xffffffffffffdcc4]        # 0xffffed87
  010c3:    	cmp    DWORD PTR [r13-0x4],eax
  010c7:    	jne    0x3c997
  010cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010d6:    	mov    rsi,QWORD PTR [rbx]
  010d9:    	mov    QWORD PTR [rsp-0x18],rsi
  010de:    	lea    rsi,[rsp-0x18]
  010e3:    	mov    QWORD PTR [rbx],rsi
  010e6:    	mov    rax,QWORD PTR [r14-0x38]
  010ea:    	mov    QWORD PTR [rsp-0x40],rax
  010ef: 00 	mov    rdi,0x0
  010f6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010ff:    	lea    r14,[rsp-0x10]
  01104:    	mov    QWORD PTR [rsp-0x20],r14
  01109: 00 	movabs rax,0x0
  01113:    	mov    QWORD PTR [rsp-0x30],rax
  01118: 00 	movabs r13,0x0
  01122:    	call   0xffffb9d2
  01127:    	lea    r14,[rbp-0x8]
  0112b:    	mov    QWORD PTR [rbx],r14
  0112e:    	mov    r14,QWORD PTR [rbp-0x10]
  01132:    	movq   xmm5,QWORD PTR [rsp]
  01137:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0113d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01143:    	add    rsp,0x20
  01147:    	test   rax,rax
  0114a:    	je     0x3ca0a
  01150: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01157:    	sub    rsp,0x20
  0115b:    	movq   QWORD PTR [rsp],xmm5
  01160:    	movq   QWORD PTR [rsp+0x8],xmm6
  01166:    	movq   QWORD PTR [rsp+0x10],xmm7
  0116c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01173: f6 	movabs rax,0x55f67a7285d0
  0117d:    	call   rax
  0117f:    	mov    r15d,eax
  01182: f6 	movabs r13,0x55f67b86ee10
  0118c:    	cmp    r15d,DWORD PTR [r13-0x8]
  01190:    	jne    0x3ca19
  01196:    	mov    eax,DWORD PTR [rip+0xffffffffffffdbeb]        # 0xffffed87
  0119c:    	cmp    DWORD PTR [r13-0x4],eax
  011a0:    	jne    0x3ca19
  011a6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011af:    	mov    rsi,QWORD PTR [rbx]
  011b2:    	mov    QWORD PTR [rsp-0x18],rsi
  011b7:    	lea    rsi,[rsp-0x18]
  011bc:    	mov    QWORD PTR [rbx],rsi
  011bf: ff 	mov    rax,QWORD PTR [r14-0xa0]
  011c6:    	mov    QWORD PTR [rsp-0x40],rax
  011cb: 00 	mov    rdi,0x0
  011d2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011db:    	lea    r14,[rsp-0x10]
  011e0:    	mov    QWORD PTR [rsp-0x20],r14
  011e5: 00 	movabs rax,0x0
  011ef:    	mov    QWORD PTR [rsp-0x30],rax
  011f4: 00 	movabs r13,0x0
  011fe:    	call   0xffffb9d2
  01203:    	lea    r14,[rbp-0x8]
  01207:    	mov    QWORD PTR [rbx],r14
  0120a:    	mov    r14,QWORD PTR [rbp-0x10]
  0120e:    	movq   xmm5,QWORD PTR [rsp]
  01213:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01219:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0121f:    	add    rsp,0x20
  01223:    	test   rax,rax
  01226:    	je     0x3ca8f
  0122c: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  01233: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0123a:    	mov    rsi,QWORD PTR [r14-0x68]
  0123e:    	sub    rsp,0x20
  01242:    	movq   QWORD PTR [rsp],xmm5
  01247:    	movq   QWORD PTR [rsp+0x8],xmm6
  0124d:    	movq   QWORD PTR [rsp+0x10],xmm7
  01253:    	mov    rdx,rdi
  01256:    	mov    rcx,rsi
  01259:    	mov    rdi,rbx
  0125c:    	mov    rsi,r12
  0125f: f6 	movabs rax,0x55f67a6dfeb0
  01269:    	call   rax
  0126b:    	movq   xmm5,QWORD PTR [rsp]
  01270:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01276:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0127c:    	add    rsp,0x20
  01280: f6 	movabs r13,0x55f67b86ee40
  0128a:    	test   rax,rax
  0128d:    	je     0xffffba05
  01293: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  0129a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  012a1: ff 	mov    rsi,QWORD PTR [r14-0x98]
  012a8:    	sub    rsp,0x20
  012ac:    	movq   QWORD PTR [rsp],xmm5
  012b1:    	movq   QWORD PTR [rsp+0x8],xmm6
  012b7:    	movq   QWORD PTR [rsp+0x10],xmm7
  012bd:    	mov    rdx,rdi
  012c0:    	mov    rcx,rsi
  012c3:    	mov    rdi,rbx
  012c6:    	mov    rsi,r12
  012c9: f6 	movabs rax,0x55f67a6ddf30
  012d3:    	call   rax
  012d5:    	movq   xmm5,QWORD PTR [rsp]
  012da:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012e0:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012e6:    	add    rsp,0x20
  012ea: f6 	movabs r13,0x55f67b86ee50
  012f4:    	test   rax,rax
  012f7:    	je     0xffffba05
  012fd: ff 	mov    QWORD PTR [r14-0x90],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  01304:    	sub    rsp,0x20
  01308:    	movq   QWORD PTR [rsp],xmm5
  0130d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01313:    	movq   QWORD PTR [rsp+0x10],xmm7
  01319:    	mov    rdi,QWORD PTR [r14-0x38]
  0131d: f6 	movabs rax,0x55f67a7285d0
  01327:    	call   rax
  01329:    	mov    r15d,eax
  0132c: f6 	movabs r13,0x55f67b86ee60
  01336:    	cmp    r15d,DWORD PTR [r13-0x8]
  0133a:    	jne    0x3ca9e
  01340:    	mov    eax,DWORD PTR [rip+0xffffffffffffda41]        # 0xffffed87
  01346:    	cmp    DWORD PTR [r13-0x4],eax
  0134a:    	jne    0x3ca9e
  01350: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01359:    	mov    rsi,QWORD PTR [rbx]
  0135c:    	mov    QWORD PTR [rsp-0x18],rsi
  01361:    	lea    rsi,[rsp-0x18]
  01366:    	mov    QWORD PTR [rbx],rsi
  01369:    	mov    rax,QWORD PTR [r14-0x38]
  0136d:    	mov    QWORD PTR [rsp-0x40],rax
  01372: 00 	mov    rdi,0x0
  01379: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01382:    	lea    r14,[rsp-0x10]
  01387:    	mov    QWORD PTR [rsp-0x20],r14
  0138c: 00 	movabs rax,0x0
  01396:    	mov    QWORD PTR [rsp-0x30],rax
  0139b: 00 	movabs r13,0x0
  013a5:    	call   0xffffb9d2
  013aa:    	lea    r14,[rbp-0x8]
  013ae:    	mov    QWORD PTR [rbx],r14
  013b1:    	mov    r14,QWORD PTR [rbp-0x10]
  013b5:    	movq   xmm5,QWORD PTR [rsp]
  013ba:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013c0:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013c6:    	add    rsp,0x20
  013ca:    	test   rax,rax
  013cd:    	je     0x3cb11
  013d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013da:    	sub    rsp,0x20
  013de:    	movq   QWORD PTR [rsp],xmm5
  013e3:    	movq   QWORD PTR [rsp+0x8],xmm6
  013e9:    	movq   QWORD PTR [rsp+0x10],xmm7
  013ef: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  013f6: f6 	movabs rax,0x55f67a7285d0
  01400:    	call   rax
  01402:    	mov    r15d,eax
  01405: f6 	movabs r13,0x55f67b86ee90
  0140f:    	cmp    r15d,DWORD PTR [r13-0x8]
  01413:    	jne    0x3cb20
  01419:    	mov    eax,DWORD PTR [rip+0xffffffffffffd968]        # 0xffffed87
  0141f:    	cmp    DWORD PTR [r13-0x4],eax
  01423:    	jne    0x3cb20
  01429: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01432:    	mov    rsi,QWORD PTR [rbx]
  01435:    	mov    QWORD PTR [rsp-0x18],rsi
  0143a:    	lea    rsi,[rsp-0x18]
  0143f:    	mov    QWORD PTR [rbx],rsi
  01442: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01449:    	mov    QWORD PTR [rsp-0x40],rax
  0144e: 00 	mov    rdi,0x0
  01455: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0145e:    	lea    r14,[rsp-0x10]
  01463:    	mov    QWORD PTR [rsp-0x20],r14
  01468: 00 	movabs rax,0x0
  01472:    	mov    QWORD PTR [rsp-0x30],rax
  01477: 00 	movabs r13,0x0
  01481:    	call   0xffffb9d2
  01486:    	lea    r14,[rbp-0x8]
  0148a:    	mov    QWORD PTR [rbx],r14
  0148d:    	mov    r14,QWORD PTR [rbp-0x10]
  01491:    	movq   xmm5,QWORD PTR [rsp]
  01496:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0149c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014a2:    	add    rsp,0x20
  014a6:    	test   rax,rax
  014a9:    	je     0x3cb96
  014af: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  014b6:    	sub    rsp,0x20
  014ba:    	movq   QWORD PTR [rsp],xmm5
  014bf:    	movq   QWORD PTR [rsp+0x8],xmm6
  014c5:    	movq   QWORD PTR [rsp+0x10],xmm7
  014cb:    	mov    rdi,QWORD PTR [r14-0x38]
  014cf: f6 	movabs rax,0x55f67a7285d0
  014d9:    	call   rax
  014db:    	mov    r15d,eax
  014de: f6 	movabs r13,0x55f67b86eec0
  014e8:    	cmp    r15d,DWORD PTR [r13-0x8]
  014ec:    	jne    0x3cba5
  014f2:    	mov    eax,DWORD PTR [rip+0xffffffffffffd88f]        # 0xffffed87
  014f8:    	cmp    DWORD PTR [r13-0x4],eax
  014fc:    	jne    0x3cba5
  01502: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0150b:    	mov    rsi,QWORD PTR [rbx]
  0150e:    	mov    QWORD PTR [rsp-0x18],rsi
  01513:    	lea    rsi,[rsp-0x18]
  01518:    	mov    QWORD PTR [rbx],rsi
  0151b:    	mov    rax,QWORD PTR [r14-0x38]
  0151f:    	mov    QWORD PTR [rsp-0x40],rax
  01524: 00 	mov    rdi,0x0
  0152b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01534:    	lea    r14,[rsp-0x10]
  01539:    	mov    QWORD PTR [rsp-0x20],r14
  0153e: 00 	movabs rax,0x0
  01548:    	mov    QWORD PTR [rsp-0x30],rax
  0154d: 00 	movabs r13,0x0
  01557:    	call   0xffffb9d2
  0155c:    	lea    r14,[rbp-0x8]
  01560:    	mov    QWORD PTR [rbx],r14
  01563:    	mov    r14,QWORD PTR [rbp-0x10]
  01567:    	movq   xmm5,QWORD PTR [rsp]
  0156c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01572:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01578:    	add    rsp,0x20
  0157c:    	test   rax,rax
  0157f:    	je     0x3cc18
  01585: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  0158c:    	sub    rsp,0x20
  01590:    	movq   QWORD PTR [rsp],xmm5
  01595:    	movq   QWORD PTR [rsp+0x8],xmm6
  0159b:    	movq   QWORD PTR [rsp+0x10],xmm7
  015a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015a8: f6 	movabs rax,0x55f67a7285d0
  015b2:    	call   rax
  015b4:    	mov    r15d,eax
  015b7: f6 	movabs r13,0x55f67b86eef0
  015c1:    	cmp    r15d,DWORD PTR [r13-0x8]
  015c5:    	jne    0x3cc27
  015cb:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7b6]        # 0xffffed87
  015d1:    	cmp    DWORD PTR [r13-0x4],eax
  015d5:    	jne    0x3cc27
  015db: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015e4:    	mov    rsi,QWORD PTR [rbx]
  015e7:    	mov    QWORD PTR [rsp-0x18],rsi
  015ec:    	lea    rsi,[rsp-0x18]
  015f1:    	mov    QWORD PTR [rbx],rsi
  015f4: ff 	mov    rax,QWORD PTR [r14-0xa8]
  015fb:    	mov    QWORD PTR [rsp-0x40],rax
  01600: 00 	mov    rdi,0x0
  01607: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01610:    	lea    r14,[rsp-0x10]
  01615:    	mov    QWORD PTR [rsp-0x20],r14
  0161a: 00 	movabs rax,0x0
  01624:    	mov    QWORD PTR [rsp-0x30],rax
  01629: 00 	movabs r13,0x0
  01633:    	call   0xffffb9d2
  01638:    	lea    r14,[rbp-0x8]
  0163c:    	mov    QWORD PTR [rbx],r14
  0163f:    	mov    r14,QWORD PTR [rbp-0x10]
  01643:    	movq   xmm5,QWORD PTR [rsp]
  01648:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0164e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01654:    	add    rsp,0x20
  01658:    	test   rax,rax
  0165b:    	je     0x3cc9d
  01661: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01668: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0166f:    	mov    rsi,QWORD PTR [r14-0x68]
  01673:    	sub    rsp,0x20
  01677:    	movq   QWORD PTR [rsp],xmm5
  0167c:    	movq   QWORD PTR [rsp+0x8],xmm6
  01682:    	movq   QWORD PTR [rsp+0x10],xmm7
  01688:    	mov    rdx,rdi
  0168b:    	mov    rcx,rsi
  0168e:    	mov    rdi,rbx
  01691:    	mov    rsi,r12
  01694: f6 	movabs rax,0x55f67a6dfeb0
  0169e:    	call   rax
  016a0:    	movq   xmm5,QWORD PTR [rsp]
  016a5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016ab:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016b1:    	add    rsp,0x20
  016b5: f6 	movabs r13,0x55f67b86ef20
  016bf:    	test   rax,rax
  016c2:    	je     0xffffba05
  016c8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016cf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016d6: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  016dd:    	sub    rsp,0x20
  016e1:    	movq   QWORD PTR [rsp],xmm5
  016e6:    	movq   QWORD PTR [rsp+0x8],xmm6
  016ec:    	movq   QWORD PTR [rsp+0x10],xmm7
  016f2:    	mov    rdx,rdi
  016f5:    	mov    rcx,rsi
  016f8:    	mov    rdi,rbx
  016fb:    	mov    rsi,r12
  016fe: f6 	movabs rax,0x55f67a6ddf30
  01708:    	call   rax
  0170a:    	movq   xmm5,QWORD PTR [rsp]
  0170f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01715:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0171b:    	add    rsp,0x20
  0171f: f6 	movabs r13,0x55f67b86ef30
  01729:    	test   rax,rax
  0172c:    	je     0xffffba05
  01732: ff 	mov    QWORD PTR [r14-0x98],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  01739:    	sub    rsp,0x20
  0173d:    	movq   QWORD PTR [rsp],xmm5
  01742:    	movq   QWORD PTR [rsp+0x8],xmm6
  01748:    	movq   QWORD PTR [rsp+0x10],xmm7
  0174e:    	mov    rdi,QWORD PTR [r14-0x80]
  01752: f6 	movabs rax,0x55f67a7285d0
  0175c:    	call   rax
  0175e:    	mov    r15d,eax
  01761: f6 	movabs r13,0x55f67b86ef40
  0176b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0176f:    	jne    0x3ccac
  01775:    	mov    eax,DWORD PTR [rip+0xffffffffffffd60c]        # 0xffffed87
  0177b:    	cmp    DWORD PTR [r13-0x4],eax
  0177f:    	jne    0x3ccac
  01785: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0178e:    	mov    rsi,QWORD PTR [rbx]
  01791:    	mov    QWORD PTR [rsp-0x18],rsi
  01796:    	lea    rsi,[rsp-0x18]
  0179b:    	mov    QWORD PTR [rbx],rsi
  0179e:    	mov    rax,QWORD PTR [r14-0x80]
  017a2:    	mov    QWORD PTR [rsp-0x40],rax
  017a7: 00 	mov    rdi,0x3
  017ae:    	lea    r8,[rsp-0x48]
  017b3: ff 	mov    rax,QWORD PTR [r14-0x88]
  017ba:    	mov    QWORD PTR [r8],rax
  017bd:    	sub    r8,0x8
  017c1: ff 	mov    rax,QWORD PTR [r14-0x90]
  017c8:    	mov    QWORD PTR [r8],rax
  017cb:    	sub    r8,0x8
  017cf: ff 	mov    rax,QWORD PTR [r14-0x98]
  017d6:    	mov    QWORD PTR [r8],rax
  017d9:    	sub    r8,0x8
  017dd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017e6:    	lea    r14,[rsp-0x10]
  017eb:    	mov    QWORD PTR [rsp-0x20],r14
  017f0: 00 	movabs rax,0x0
  017fa:    	mov    QWORD PTR [rsp-0x30],rax
  017ff: 00 	movabs r13,0x0
  01809:    	call   0xffffb9d2
  0180e:    	lea    r14,[rbp-0x8]
  01812:    	mov    QWORD PTR [rbx],r14
  01815:    	mov    r14,QWORD PTR [rbp-0x10]
  01819:    	movq   xmm5,QWORD PTR [rsp]
  0181e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01824:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0182a:    	add    rsp,0x20
  0182e:    	test   rax,rax
  01831:    	je     0x3cd1f
  01837:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0183b:    	sub    rsp,0x20
  0183f:    	movq   QWORD PTR [rsp],xmm5
  01844:    	movq   QWORD PTR [rsp+0x8],xmm6
  0184a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01850:    	mov    rdi,QWORD PTR [r14-0x40]
  01854: f6 	movabs rax,0x55f67a7285d0
  0185e:    	call   rax
  01860:    	mov    r15d,eax
  01863: f6 	movabs r13,0x55f67b86ef70
  0186d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01871:    	jne    0x3cd2e
  01877:    	mov    eax,DWORD PTR [rip+0xffffffffffffd50a]        # 0xffffed87
  0187d:    	cmp    DWORD PTR [r13-0x4],eax
  01881:    	jne    0x3cd2e
  01887: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01890:    	mov    rsi,QWORD PTR [rbx]
  01893:    	mov    QWORD PTR [rsp-0x18],rsi
  01898:    	lea    rsi,[rsp-0x18]
  0189d:    	mov    QWORD PTR [rbx],rsi
  018a0:    	mov    rax,QWORD PTR [r14-0x40]
  018a4:    	mov    QWORD PTR [rsp-0x40],rax
  018a9: 00 	mov    rdi,0x1
  018b0:    	lea    r8,[rsp-0x48]
  018b5:    	mov    rax,QWORD PTR [r14-0x78]
  018b9:    	mov    QWORD PTR [r8],rax
  018bc:    	sub    r8,0x8
  018c0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  018c9:    	lea    r14,[rsp-0x10]
  018ce:    	mov    QWORD PTR [rsp-0x20],r14
  018d3: 00 	movabs rax,0x0
  018dd:    	mov    QWORD PTR [rsp-0x30],rax
  018e2: 00 	movabs r13,0x0
  018ec:    	call   0xffffb9d2
  018f1:    	lea    r14,[rbp-0x8]
  018f5:    	mov    QWORD PTR [rbx],r14
  018f8:    	mov    r14,QWORD PTR [rbp-0x10]
  018fc:    	movq   xmm5,QWORD PTR [rsp]
  01901:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01907:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0190d:    	add    rsp,0x20
  01911:    	test   rax,rax
  01914:    	je     0x3cda1
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  0191a:    	sub    rsp,0x20
  0191e:    	movq   QWORD PTR [rsp],xmm5
  01923:    	movq   QWORD PTR [rsp+0x8],xmm6
  01929:    	movq   QWORD PTR [rsp+0x10],xmm7
  0192f:    	mov    rdi,QWORD PTR [r14-0x40]
  01933: f6 	movabs rax,0x55f67a7285d0
  0193d:    	call   rax
  0193f:    	mov    r15d,eax
  01942: f6 	movabs r13,0x55f67b86efa0
  0194c:    	cmp    r15d,DWORD PTR [r13-0x8]
  01950:    	jne    0x3cdb0
  01956:    	mov    eax,DWORD PTR [rip+0xffffffffffffd42b]        # 0xffffed87
  0195c:    	cmp    DWORD PTR [r13-0x4],eax
  01960:    	jne    0x3cdb0
  01966: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0196f:    	mov    rsi,QWORD PTR [rbx]
  01972:    	mov    QWORD PTR [rsp-0x18],rsi
  01977:    	lea    rsi,[rsp-0x18]
  0197c:    	mov    QWORD PTR [rbx],rsi
  0197f:    	mov    rax,QWORD PTR [r14-0x40]
  01983:    	mov    QWORD PTR [rsp-0x40],rax
  01988: 00 	mov    rdi,0x0
  0198f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01998:    	lea    r14,[rsp-0x10]
  0199d:    	mov    QWORD PTR [rsp-0x20],r14
  019a2: 00 	movabs rax,0x0
  019ac:    	mov    QWORD PTR [rsp-0x30],rax
  019b1: 00 	movabs r13,0x0
  019bb:    	call   0xffffb9d2
  019c0:    	lea    r14,[rbp-0x8]
  019c4:    	mov    QWORD PTR [rbx],r14
  019c7:    	mov    r14,QWORD PTR [rbp-0x10]
  019cb:    	movq   xmm5,QWORD PTR [rsp]
  019d0:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019d6:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019dc:    	add    rsp,0x20
  019e0:    	test   rax,rax
  019e3:    	je     0x3ce23
  019e9:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  019ed:    	mov    rdi,QWORD PTR [rbp-0x30]
  019f1:    	sub    rsp,0x20
  019f5:    	movq   QWORD PTR [rsp],xmm5
  019fa:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a00:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a06: 00 	mov    rsi,0x90
  01a0d:    	mov    rdx,r12
  01a10: f6 	movabs rax,0x55f67a71b840
  01a1a:    	call   rax
  01a1c:    	movq   xmm5,QWORD PTR [rsp]
  01a21:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a27:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a2d:    	add    rsp,0x20
  01a31:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  01a35:    	sub    rsp,0x20
  01a39:    	movq   QWORD PTR [rsp],xmm5
  01a3e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a44:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a4a:    	mov    rdi,QWORD PTR [r14-0x78]
  01a4e: f6 	movabs rax,0x55f67a7285d0
  01a58:    	call   rax
  01a5a:    	mov    r15d,eax
  01a5d: f6 	movabs r13,0x55f67b86efe0
  01a67:    	cmp    r15d,DWORD PTR [r13-0x8]
  01a6b:    	jne    0x3ce32
  01a71:    	mov    eax,DWORD PTR [rip+0xffffffffffffd310]        # 0xffffed87
  01a77:    	cmp    DWORD PTR [r13-0x4],eax
  01a7b:    	jne    0x3ce32
  01a81: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a8a:    	mov    rsi,QWORD PTR [rbx]
  01a8d:    	mov    QWORD PTR [rsp-0x18],rsi
  01a92:    	lea    rsi,[rsp-0x18]
  01a97:    	mov    QWORD PTR [rbx],rsi
  01a9a:    	mov    rax,QWORD PTR [r14-0x78]
  01a9e:    	mov    QWORD PTR [rsp-0x40],rax
  01aa3: 00 	mov    rdi,0x1
  01aaa:    	lea    r8,[rsp-0x48]
  01aaf:    	mov    rax,QWORD PTR [r14-0x80]
  01ab3:    	mov    QWORD PTR [r8],rax
  01ab6:    	sub    r8,0x8
  01aba: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01ac3:    	lea    r14,[rsp-0x10]
  01ac8:    	mov    QWORD PTR [rsp-0x20],r14
  01acd: 00 	movabs rax,0x0
  01ad7:    	mov    QWORD PTR [rsp-0x30],rax
  01adc: 00 	movabs r13,0x0
  01ae6:    	call   0xffffb9d2
  01aeb:    	lea    r14,[rbp-0x8]
  01aef:    	mov    QWORD PTR [rbx],r14
  01af2:    	mov    r14,QWORD PTR [rbp-0x10]
  01af6:    	movq   xmm5,QWORD PTR [rsp]
  01afb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b01:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b07:    	add    rsp,0x20
  01b0b:    	test   rax,rax
  01b0e:    	je     0x3cea5
  01b14:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01b18:    	sub    rsp,0x20
  01b1c:    	movq   QWORD PTR [rsp],xmm5
  01b21:    	movq   QWORD PTR [rsp+0x8],xmm6
  01b27:    	movq   QWORD PTR [rsp+0x10],xmm7
  01b2d:    	mov    rdi,QWORD PTR [r14-0x70]
  01b31: f6 	movabs rax,0x55f67a7285d0
  01b3b:    	call   rax
  01b3d:    	mov    r15d,eax
  01b40: f6 	movabs r13,0x55f67b86f010
  01b4a:    	cmp    r15d,DWORD PTR [r13-0x8]
  01b4e:    	jne    0x3ceb4
  01b54:    	mov    eax,DWORD PTR [rip+0xffffffffffffd22d]        # 0xffffed87
  01b5a:    	cmp    DWORD PTR [r13-0x4],eax
  01b5e:    	jne    0x3ceb4
  01b64: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b6d:    	mov    rsi,QWORD PTR [rbx]
  01b70:    	mov    QWORD PTR [rsp-0x18],rsi
  01b75:    	lea    rsi,[rsp-0x18]
  01b7a:    	mov    QWORD PTR [rbx],rsi
  01b7d:    	mov    rax,QWORD PTR [r14-0x70]
  01b81:    	mov    QWORD PTR [rsp-0x40],rax
  01b86: 00 	mov    rdi,0x0
  01b8d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b96:    	lea    r14,[rsp-0x10]
  01b9b:    	mov    QWORD PTR [rsp-0x20],r14
  01ba0: 00 	movabs rax,0x0
  01baa:    	mov    QWORD PTR [rsp-0x30],rax
  01baf: 00 	movabs r13,0x0
  01bb9:    	call   0xffffb9d2
  01bbe:    	lea    r14,[rbp-0x8]
  01bc2:    	mov    QWORD PTR [rbx],r14
  01bc5:    	mov    r14,QWORD PTR [rbp-0x10]
  01bc9:    	movq   xmm5,QWORD PTR [rsp]
  01bce:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01bd4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01bda:    	add    rsp,0x20
  01bde:    	test   rax,rax
  01be1:    	je     0x3cf27
  01be7:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01beb:    	sub    rsp,0x20
  01bef:    	movq   QWORD PTR [rsp],xmm5
  01bf4:    	movq   QWORD PTR [rsp+0x8],xmm6
  01bfa:    	movq   QWORD PTR [rsp+0x10],xmm7
  01c00:    	mov    rdi,QWORD PTR [r14-0x40]
  01c04: f6 	movabs rax,0x55f67a7285d0
  01c0e:    	call   rax
  01c10:    	mov    r15d,eax
  01c13: f6 	movabs r13,0x55f67b86f040
  01c1d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01c21:    	jne    0x3cf36
  01c27:    	mov    eax,DWORD PTR [rip+0xffffffffffffd15a]        # 0xffffed87
  01c2d:    	cmp    DWORD PTR [r13-0x4],eax
  01c31:    	jne    0x3cf36
  01c37: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c40:    	mov    rsi,QWORD PTR [rbx]
  01c43:    	mov    QWORD PTR [rsp-0x18],rsi
  01c48:    	lea    rsi,[rsp-0x18]
  01c4d:    	mov    QWORD PTR [rbx],rsi
  01c50:    	mov    rax,QWORD PTR [r14-0x40]
  01c54:    	mov    QWORD PTR [rsp-0x40],rax
  01c59: 00 	mov    rdi,0x1
  01c60:    	lea    r8,[rsp-0x48]
  01c65:    	mov    rax,QWORD PTR [r14-0x78]
  01c69:    	mov    QWORD PTR [r8],rax
  01c6c:    	sub    r8,0x8
  01c70: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c79:    	lea    r14,[rsp-0x10]
  01c7e:    	mov    QWORD PTR [rsp-0x20],r14
  01c83: 00 	movabs rax,0x0
  01c8d:    	mov    QWORD PTR [rsp-0x30],rax
  01c92: 00 	movabs r13,0x0
  01c9c:    	call   0xffffb9d2
  01ca1:    	lea    r14,[rbp-0x8]
  01ca5:    	mov    QWORD PTR [rbx],r14
  01ca8:    	mov    r14,QWORD PTR [rbp-0x10]
  01cac:    	movq   xmm5,QWORD PTR [rsp]
  01cb1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01cb7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01cbd:    	add    rsp,0x20
  01cc1:    	test   rax,rax
  01cc4:    	je     0x3cfa9
:00110 
:00112 br =>:00113
  01cca:    	jmp    0x3d01e
:00113 br =>:00114
  01ccf:    	jmp    0x3d091
:00114 %9 = nil
  01cd4: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  01cdc:    	mov    rax,QWORD PTR [r14-0x78]
  01ce0:    	leave  
  01ce1:    	ret    
==> start whole compile: vsub FuncId(64) self_class:Vec start:[00000] bytecode:0x55f67b855f60
<== finished compile. elapsed:36.8µs
offset:Pos(25464) code: 1359 bytes  data: 57 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x3b37a
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    QWORD PTR [r14-0x68],rax
  00033: mov    rdi,QWORD PTR [rbp-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x3b389
  00044: cmp    DWORD PTR [rdi+0x4],0x28
  00048: jne    0x3b389
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  0004e: mov    rax,QWORD PTR [rip+0xffffffffffffcff3]        # 0xffffd048
  00055: cmp    rax,QWORD PTR [rip+0x50c]        # 0x568
  0005c: jne    0x3b398
  00062: mov    rax,QWORD PTR [rip+0x4ef]        # 0x558
  00069: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0006d: mov    rdi,QWORD PTR [rbp-0x30]
  00071: mov    rax,QWORD PTR [rdi+0x10]
  00075: mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %1.call x()                     [Vec]
  00079: mov    rdi,QWORD PTR [r14-0x38]
  0007d: test   rdi,0x7
  00084: jne    0x3b3de
  0008a: cmp    DWORD PTR [rdi+0x4],0x28
  0008e: jne    0x3b3de
  00094: cmp    DWORD PTR [rip+0xffffffffffffcfa2],0x26        # 0xffffd03d
  0009b: jne    0x3b3de
  000a1: mov    esi,DWORD PTR [rip+0x4cd]        # 0x574
  000a7: cmp    esi,0xffffffff
  000aa: je     0x3b3ed
  000b0: cmp    WORD PTR [rdi+0x2],0x3
  000b5: jne    0xce
  000bb: cmp    esi,0x6
  000be: jge    0xce
  000c4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c9: jmp    0xda
  000ce: movabs rax,0x55f67a69e160
  000d8: call   rax
  000da: mov    QWORD PTR [r14-0x58],rax
:00004 
:00006 %4 = %4 - %5                         [Float][Float]
  000de: mov    rdi,QWORD PTR [r14-0x50]
  000e2: test   rdi,0x1
  000e9: jne    0x3b416
  000ef: test   rdi,0x2
  000f6: je     0x132
  000fc: xorps  xmm2,xmm2
  000ff: movabs rax,0x8000000000000002
  00109: cmp    rdi,rax
  0010c: je     0x144
  00112: mov    rax,rdi
  00115: sar    rax,0x3f
  00119: add    rax,0x2
  0011d: and    rdi,0xfffffffffffffffc
  00121: or     rdi,rax
  00124: rol    rdi,0x3d
  00128: movq   xmm2,rdi
  0012d: jmp    0x144
  00132: call   0xffff9d14
  00137: test   rax,rax
  0013a: je     0x3b416
  00140: movq   xmm2,xmm0
  00144: mov    rdi,QWORD PTR [r14-0x58]
  00148: test   rdi,0x1
  0014f: jne    0x3b425
  00155: test   rdi,0x2
  0015c: je     0x198
  00162: xorps  xmm3,xmm3
  00165: movabs rax,0x8000000000000002
  0016f: cmp    rdi,rax
  00172: je     0x1aa
  00178: mov    rax,rdi
  0017b: sar    rax,0x3f
  0017f: add    rax,0x2
  00183: and    rdi,0xfffffffffffffffc
  00187: or     rdi,rax
  0018a: rol    rdi,0x3d
  0018e: movq   xmm3,rdi
  00193: jmp    0x1aa
  00198: call   0xffff9d14
  0019d: test   rax,rax
  001a0: je     0x3b425
  001a6: movq   xmm3,xmm0
  001aa: subsd  xmm2,xmm3
:00007 %5 = @y: Vec[IvarId(1)]
  001ae: mov    rdi,QWORD PTR [rbp-0x30]
  001b2: mov    rax,QWORD PTR [rdi+0x18]
  001b6: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = %1.call y()                     [Vec]
  001ba: mov    rdi,QWORD PTR [r14-0x38]
  001be: test   rdi,0x7
  001c5: jne    0x3b434
  001cb: cmp    DWORD PTR [rdi+0x4],0x28
  001cf: jne    0x3b434
  001d5: cmp    DWORD PTR [rip+0xffffffffffffce61],0x26        # 0xffffd03d
  001dc: jne    0x3b434
  001e2: mov    esi,DWORD PTR [rip+0x394]        # 0x57c
  001e8: cmp    esi,0xffffffff
  001eb: je     0x3b450
  001f1: cmp    WORD PTR [rdi+0x2],0x3
  001f6: jne    0x20f
  001fc: cmp    esi,0x6
  001ff: jge    0x20f
  00205: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020a: jmp    0x22d
  0020f: sub    rsp,0x10
  00213: movq   QWORD PTR [rsp],xmm2
  00218: movabs rax,0x55f67a69e160
  00222: call   rax
  00224: movq   xmm2,QWORD PTR [rsp]
  00229: add    rsp,0x10
  0022d: mov    QWORD PTR [r14-0x60],rax
:00009 
:00011 %5 = %5 - %6                         [Float][Float]
  00231: mov    rdi,QWORD PTR [r14-0x58]
  00235: test   rdi,0x1
  0023c: jne    0x3b48b
  00242: test   rdi,0x2
  00249: je     0x285
  0024f: xorps  xmm3,xmm3
  00252: movabs rax,0x8000000000000002
  0025c: cmp    rdi,rax
  0025f: je     0x297
  00265: mov    rax,rdi
  00268: sar    rax,0x3f
  0026c: add    rax,0x2
  00270: and    rdi,0xfffffffffffffffc
  00274: or     rdi,rax
  00277: rol    rdi,0x3d
  0027b: movq   xmm3,rdi
  00280: jmp    0x297
  00285: call   0xffff9d14
  0028a: test   rax,rax
  0028d: je     0x3b48b
  00293: movq   xmm3,xmm0
  00297: mov    rdi,QWORD PTR [r14-0x60]
  0029b: test   rdi,0x1
  002a2: jne    0x3b4a7
  002a8: test   rdi,0x2
  002af: je     0x2eb
  002b5: xorps  xmm4,xmm4
  002b8: movabs rax,0x8000000000000002
  002c2: cmp    rdi,rax
  002c5: je     0x2fd
  002cb: mov    rax,rdi
  002ce: sar    rax,0x3f
  002d2: add    rax,0x2
  002d6: and    rdi,0xfffffffffffffffc
  002da: or     rdi,rax
  002dd: rol    rdi,0x3d
  002e1: movq   xmm4,rdi
  002e6: jmp    0x2fd
  002eb: call   0xffff9d14
  002f0: test   rax,rax
  002f3: je     0x3b4a7
  002f9: movq   xmm4,xmm0
  002fd: subsd  xmm3,xmm4
:00012 %6 = @z: Vec[IvarId(2)]
  00301: mov    rdi,QWORD PTR [rbp-0x30]
  00305: mov    rax,QWORD PTR [rdi+0x20]
  00309: mov    QWORD PTR [r14-0x60],rax
:00013 %7 = %1.call z()                     [Vec]
  0030d: mov    rdi,QWORD PTR [r14-0x38]
  00311: test   rdi,0x7
  00318: jne    0x3b4c3
  0031e: cmp    DWORD PTR [rdi+0x4],0x28
  00322: jne    0x3b4c3
  00328: cmp    DWORD PTR [rip+0xffffffffffffcd0e],0x26        # 0xffffd03d
  0032f: jne    0x3b4c3
  00335: mov    esi,DWORD PTR [rip+0x249]        # 0x584
  0033b: cmp    esi,0xffffffff
  0033e: je     0x3b4ec
  00344: cmp    WORD PTR [rdi+0x2],0x3
  00349: jne    0x362
  0034f: cmp    esi,0x6
  00352: jge    0x362
  00358: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0035d: jmp    0x38c
  00362: sub    rsp,0x10
  00366: movq   QWORD PTR [rsp],xmm2
  0036b: movq   QWORD PTR [rsp+0x8],xmm3
  00371: movabs rax,0x55f67a69e160
  0037b: call   rax
  0037d: movq   xmm2,QWORD PTR [rsp]
  00382: movq   xmm3,QWORD PTR [rsp+0x8]
  00388: add    rsp,0x10
  0038c: mov    QWORD PTR [r14-0x68],rax
:00014 
:00016 %6 = %6 - %7                         [Float][Float]
  00390: mov    rdi,QWORD PTR [r14-0x60]
  00394: test   rdi,0x1
  0039b: jne    0x3b533
  003a1: test   rdi,0x2
  003a8: je     0x3e4
  003ae: xorps  xmm4,xmm4
  003b1: movabs rax,0x8000000000000002
  003bb: cmp    rdi,rax
  003be: je     0x3f6
  003c4: mov    rax,rdi
  003c7: sar    rax,0x3f
  003cb: add    rax,0x2
  003cf: and    rdi,0xfffffffffffffffc
  003d3: or     rdi,rax
  003d6: rol    rdi,0x3d
  003da: movq   xmm4,rdi
  003df: jmp    0x3f6
  003e4: call   0xffff9d14
  003e9: test   rax,rax
  003ec: je     0x3b533
  003f2: movq   xmm4,xmm0
  003f6: mov    rdi,QWORD PTR [r14-0x68]
  003fa: test   rdi,0x1
  00401: jne    0x3b55c
  00407: test   rdi,0x2
  0040e: je     0x44a
  00414: xorps  xmm5,xmm5
  00417: movabs rax,0x8000000000000002
  00421: cmp    rdi,rax
  00424: je     0x45c
  0042a: mov    rax,rdi
  0042d: sar    rax,0x3f
  00431: add    rax,0x2
  00435: and    rdi,0xfffffffffffffffc
  00439: or     rdi,rax
  0043c: rol    rdi,0x3d
  00440: movq   xmm5,rdi
  00445: jmp    0x45c
  0044a: call   0xffff9d14
  0044f: test   rax,rax
  00452: je     0x3b55c
  00458: movq   xmm5,xmm0
  0045c: subsd  xmm4,xmm5
:00017 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00460: movq   xmm0,xmm2
  00464: call   0xffff9e38
  00469: mov    QWORD PTR [r14-0x50],rax
  0046d: movq   xmm0,xmm3
  00471: call   0xffff9e38
  00476: mov    QWORD PTR [r14-0x58],rax
  0047a: movq   xmm0,xmm4
  0047e: call   0xffff9e38
  00483: mov    QWORD PTR [r14-0x60],rax
  00487: mov    rdi,QWORD PTR [r14-0x48]
  0048b: test   rdi,0x7
  00492: jne    0x3b585
  00498: cmp    DWORD PTR [rdi+0x4],0x29
  0049c: jne    0x3b585
  004a2: cmp    DWORD PTR [rip+0xffffffffffffcb94],0x26        # 0xffffd03d
  004a9: jne    0x3b585
  004af: mov    r9,0x0
  004b6: sub    rsp,0x20
  004ba: movq   QWORD PTR [rsp],xmm2
  004bf: movq   QWORD PTR [rsp+0x8],xmm3
  004c5: movq   QWORD PTR [rsp+0x10],xmm4
  004cb: movq   QWORD PTR [rsp+0x18],xmm5
  004d1: mov    rdx,rdi
  004d4: mov    QWORD PTR [rsp-0x40],rcx
  004d9: mov    QWORD PTR [rsp-0x28],0x0
  004e2: lea    rcx,[r14-0x50]
  004e6: mov    r8,0x3
  004ed: mov    rsi,QWORD PTR [rbx]
  004f0: mov    QWORD PTR [rsp-0x18],rsi
  004f5: lea    rsi,[rsp-0x18]
  004fa: mov    QWORD PTR [rbx],rsi
  004fd: lea    r14,[rsp-0x10]
  00502: mov    QWORD PTR [rsp-0x20],r14
  00507: call   0x3b594
  0050c: lea    r14,[rbp-0x8]
  00510: mov    QWORD PTR [rbx],r14
  00513: mov    r14,QWORD PTR [rbp-0x10]
  00517: movq   xmm2,QWORD PTR [rsp]
  0051c: movq   xmm3,QWORD PTR [rsp+0x8]
  00522: movq   xmm4,QWORD PTR [rsp+0x10]
  00528: movq   xmm5,QWORD PTR [rsp+0x18]
  0052e: add    rsp,0x20
  00532: movabs r13,0x55f67b856090
  0053c: test   rax,rax
  0053f: je     0xffff9cbb
  00545: mov    QWORD PTR [r14-0x40],rax
:00018 
:00020 ret %2
  00549: mov    rax,QWORD PTR [r14-0x40]
  0054d: leave  
  0054e: ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55f67b858040
<== finished compile. elapsed:128.7µs
offset:Pos(27151) code: 9584 bytes  data: 277 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0: ff 	mov    QWORD PTR [r14-0xc8],rax
  000a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  000ab: 00 	test   rdi,0x7
  000b2:    	jne    0x3af3e
  000b8:    	cmp    DWORD PTR [rdi+0x4],0x32
  000bc:    	jne    0x3af3e
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000c2:    	mov    rax,QWORD PTR [rbp-0x18]
  000c6:    	mov    rax,QWORD PTR [rax]
  000c9:    	mov    rax,QWORD PTR [rax]
  000cc:    	mov    rax,QWORD PTR [rax]
  000cf:    	mov    rax,QWORD PTR [rax-0x38]
  000d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000e1: 00 	test   rdi,0x1
  000e8:    	je     0x3af4d
  000ee:    	add    rdi,0x2
  000f2:    	jo     0x3af4d
  000f8: ff 	mov    QWORD PTR [r14-0xa0],rdi
:00003 dynvar(4, %4) = %14
  000ff:    	mov    rax,QWORD PTR [rbp-0x18]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax]
  0010c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00113:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  00117:    	mov    rax,QWORD PTR [rbp-0x18]
  0011b:    	mov    rax,QWORD PTR [rax]
  0011e:    	mov    rax,QWORD PTR [rax]
  00121:    	mov    rax,QWORD PTR [rax]
  00124:    	mov    rax,QWORD PTR [rax-0x20]
  00128: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %2 = %14.call to_f()                 [Integer]
  0012f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00136: 00 	test   rdi,0x1
  0013d:    	je     0x3af5c
  00143: 26 	cmp    DWORD PTR [rip+0xffffffffffffc85c],0x26        # 0xffffc9a6
  0014a:    	jne    0x3af5c
  00150:    	sar    rdi,1
  00153:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  00158:    	mov    rax,QWORD PTR [rbp-0x18]
  0015c:    	mov    rax,QWORD PTR [rax]
  0015f:    	mov    rax,QWORD PTR [rax]
  00162:    	mov    rax,QWORD PTR [rax]
  00165:    	mov    rax,QWORD PTR [rax-0x28]
  00169: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00170: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00177: 00 	test   rdi,0x1
  0017e:    	je     0x3af6b
  00184: 26 	cmp    DWORD PTR [rip+0xffffffffffffc81b],0x26        # 0xffffc9a6
  0018b:    	jne    0x3af6b
  00191:    	sar    rdi,1
  00194:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  00199:    	mov    rax,QWORD PTR [rbp-0x18]
  0019d:    	mov    rax,QWORD PTR [rax]
  001a0:    	mov    rax,QWORD PTR [rax-0x20]
  001a4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001ab: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001b2: 00 	test   rdi,0x1
  001b9:    	je     0x3af87
  001bf: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7e0],0x26        # 0xffffc9a6
  001c6:    	jne    0x3af87
  001cc:    	sar    rdi,1
  001cf:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001d4:    	mov    rax,QWORD PTR [rbp-0x18]
  001d8:    	mov    rax,QWORD PTR [rax]
  001db:    	mov    rax,QWORD PTR [rax]
  001de:    	mov    rax,QWORD PTR [rax-0x20]
  001e2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001e9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f0: 00 	test   rdi,0x1
  001f7:    	je     0x3afb0
  001fd: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7a2],0x26        # 0xffffc9a6
  00204:    	jne    0x3afb0
  0020a:    	sar    rdi,1
  0020d:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00212:    	mov    rdi,QWORD PTR [r14-0x38]
  00216: 00 	test   rdi,0x1
  0021d:    	je     0x3afe6
  00223: 26 	cmp    DWORD PTR [rip+0xffffffffffffc77c],0x26        # 0xffffc9a6
  0022a:    	jne    0x3afe6
  00230:    	sar    rdi,1
  00233:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  00238:    	mov    rax,QWORD PTR [rbp-0x18]
  0023c:    	mov    rax,QWORD PTR [rax-0x20]
  00240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00024 %7 = %14.call to_f()                 [Integer]
  00247: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0024e: 00 	test   rdi,0x1
  00255:    	je     0x3b029
  0025b: 26 	cmp    DWORD PTR [rip+0xffffffffffffc744],0x26        # 0xffffc9a6
  00262:    	jne    0x3b029
  00268:    	sar    rdi,1
  0026b:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00270:    	mov    rax,QWORD PTR [rbp-0x18]
  00274:    	mov    rax,QWORD PTR [rax]
  00277:    	mov    rax,QWORD PTR [rax]
  0027a:    	mov    rax,QWORD PTR [rax]
  0027d:    	mov    rax,QWORD PTR [rax-0x40]
  00281: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %6 / %14                       [Float][Float]
  00288: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028f: 00 	test   rdi,0x1
  00296:    	jne    0x3b079
  0029c: 00 	test   rdi,0x2
  002a3:    	je     0x2e0
  002a9:    	xorps  xmm8,xmm8
  002ad: 00 	movabs rax,0x8000000000000002
  002b7:    	cmp    rdi,rax
  002ba:    	je     0x2f3
  002c0:    	mov    rax,rdi
  002c3:    	sar    rax,0x3f
  002c7:    	add    rax,0x2
  002cb:    	and    rdi,0xfffffffffffffffc
  002cf:    	or     rdi,rax
  002d2:    	rol    rdi,0x3d
  002d6:    	movq   xmm8,rdi
  002db:    	jmp    0x2f3
  002e0:    	call   0xffff967d
  002e5:    	test   rax,rax
  002e8:    	je     0x3b079
  002ee:    	movq   xmm8,xmm0
  002f3:    	movq   rax,xmm8
  002f8:    	test   rax,rax
  002fb:    	je     0xffff9649
  00301:    	movq   xmm0,xmm6
  00305:    	divsd  xmm0,xmm8
  0030a:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  0030f:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00314: 22 	movq   xmm9,QWORD PTR [rip+0x2254]        # 0x2571
  0031d: 00 	mov    rax,0x2
  00324: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0032b:    	movq   rax,xmm9
  00330:    	test   rax,rax
  00333:    	je     0xffff9649
  00339:    	movq   xmm0,xmm2
  0033d:    	divsd  xmm0,xmm9
  00342:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00347:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0034c: 22 	movq   xmm9,QWORD PTR [rip+0x222c]        # 0x2581
  00355: 00 	mov    rax,0x2
  0035c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00363:    	movq   rax,xmm9
  00368:    	test   rax,rax
  0036b:    	je     0xffff9649
  00371:    	movq   xmm0,xmm2
  00375:    	divsd  xmm0,xmm9
  0037a:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  0037f:    	movq   xmm10,xmm8
  00384:    	movq   rax,xmm9
  00389:    	test   rax,rax
  0038c:    	je     0xffff9649
  00392:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  00397:    	mov    rax,QWORD PTR [rbp-0x18]
  0039b:    	mov    rax,QWORD PTR [rax]
  0039e:    	mov    rax,QWORD PTR [rax]
  003a1:    	mov    rax,QWORD PTR [rax]
  003a4:    	mov    rax,QWORD PTR [rax-0x40]
  003a8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003af: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x3b0d6
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x407
  003d0:    	xorps  xmm8,xmm8
  003d4: 00 	movabs rax,0x8000000000000002
  003de:    	cmp    rdi,rax
  003e1:    	je     0x41a
  003e7:    	mov    rax,rdi
  003ea:    	sar    rax,0x3f
  003ee:    	add    rax,0x2
  003f2:    	and    rdi,0xfffffffffffffffc
  003f6:    	or     rdi,rax
  003f9:    	rol    rdi,0x3d
  003fd:    	movq   xmm8,rdi
  00402:    	jmp    0x41a
  00407:    	call   0xffff967d
  0040c:    	test   rax,rax
  0040f:    	je     0x3b0d6
  00415:    	movq   xmm8,xmm0
  0041a:    	movq   rax,xmm8
  0041f:    	test   rax,rax
  00422:    	je     0xffff9649
  00428:    	movq   xmm0,xmm7
  0042c:    	divsd  xmm0,xmm8
  00431:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00436:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0043b: 21 	movq   xmm9,QWORD PTR [rip+0x214d]        # 0x2591
  00444: 00 	mov    rax,0x2
  0044b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00452:    	movq   rax,xmm9
  00457:    	test   rax,rax
  0045a:    	je     0xffff9649
  00460:    	movq   xmm0,xmm3
  00464:    	divsd  xmm0,xmm9
  00469:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  0046e:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00473: 00 	xorps  xmm8,XMMWORD PTR [rip+0x2126]        # 0x25a1
:00043 %15 = literal[2.0]
  0047b: 21 	movq   xmm9,QWORD PTR [rip+0x212d]        # 0x25b1
  00484: 00 	mov    rax,0x2
  0048b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00492:    	movq   rax,xmm9
  00497:    	test   rax,rax
  0049a:    	je     0xffff9649
  004a0:    	movq   xmm0,xmm3
  004a4:    	divsd  xmm0,xmm9
  004a9:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004ae:    	movq   xmm11,xmm8
  004b3:    	movq   rax,xmm9
  004b8:    	test   rax,rax
  004bb:    	je     0xffff9649
  004c1:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc4e4]        # 0xffffc9b1
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x20fd]        # 0x25d1
  004d4:    	jne    0x3b152
  004da: 00 	mov    rax,QWORD PTR [rip+0x20e0]        # 0x25c1
  004e1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004e8: 20 	movq   xmm9,QWORD PTR [rip+0x20f0]        # 0x25e1
  004f1: 00 	movabs rax,0xff80000000000006
  004fb: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00502:    	movq   xmm0,xmm10
  00507:    	call   0xffff97a1
  0050c: ff 	mov    QWORD PTR [r14-0xb0],rax
  00513:    	movq   xmm0,xmm11
  00518:    	call   0xffff97a1
  0051d: ff 	mov    QWORD PTR [r14-0xb8],rax
  00524: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0052b: 00 	test   rdi,0x7
  00532:    	jne    0x3b210
  00538:    	cmp    DWORD PTR [rdi+0x4],0x29
  0053c:    	jne    0x3b210
  00542: 26 	cmp    DWORD PTR [rip+0xffffffffffffc45d],0x26        # 0xffffc9a6
  00549:    	jne    0x3b210
  0054f: 00 	mov    r9,0x0
  00556:    	sub    rsp,0x50
  0055a:    	movq   QWORD PTR [rsp],xmm2
  0055f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00565:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00571:    	movq   QWORD PTR [rsp+0x20],xmm6
  00577:    	movq   QWORD PTR [rsp+0x28],xmm7
  0057d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00584: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0058b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00592:    	mov    rdx,rdi
  00595:    	mov    QWORD PTR [rsp-0x40],rcx
  0059a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  005a3: ff 	lea    rcx,[r14-0xb0]
  005aa: 00 	mov    r8,0x3
  005b1:    	mov    rsi,QWORD PTR [rbx]
  005b4:    	mov    QWORD PTR [rsp-0x18],rsi
  005b9:    	lea    rsi,[rsp-0x18]
  005be:    	mov    QWORD PTR [rbx],rsi
  005c1:    	lea    r14,[rsp-0x10]
  005c6:    	mov    QWORD PTR [rsp-0x20],r14
  005cb:    	call   0x3b289
  005d0:    	lea    r14,[rbp-0x8]
  005d4:    	mov    QWORD PTR [rbx],r14
  005d7:    	mov    r14,QWORD PTR [rbp-0x10]
  005db:    	movq   xmm2,QWORD PTR [rsp]
  005e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005fe: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00605: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0060c: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00613:    	add    rsp,0x50
  00617: f6 	movabs r13,0x55f67b858380
  00621:    	test   rax,rax
  00624:    	je     0xffff9624
  0062a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00631: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x3b2bb
  00645:    	cmp    DWORD PTR [rdi+0x4],0x28
  00649:    	jne    0x3b2bb
  0064f: 26 	cmp    DWORD PTR [rip+0xffffffffffffc350],0x26        # 0xffffc9a6
  00656:    	jne    0x3b2bb
  0065c:    	sub    rsp,0x50
  00660:    	movq   QWORD PTR [rsp],xmm2
  00665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00671:    	movq   QWORD PTR [rsp+0x18],xmm5
  00677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0067d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00683: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0068a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00691: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00698: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006a1: ff 	mov    rax,QWORD PTR [r14-0xa0]
  006a8:    	mov    QWORD PTR [rsp-0x40],rax
  006ad: 00 	mov    rdi,0x0
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd: 07 	movabs rax,0x700000044
  006c7:    	mov    QWORD PTR [rsp-0x30],rax
  006cc: f6 	movabs r13,0x55f67b84eec0
  006d6:    	mov    rsi,QWORD PTR [rbx]
  006d9:    	mov    QWORD PTR [rsp-0x18],rsi
  006de:    	lea    rsi,[rsp-0x18]
  006e3:    	mov    QWORD PTR [rbx],rsi
  006e6:    	lea    r14,[rsp-0x10]
  006eb:    	mov    QWORD PTR [rsp-0x20],r14
  006f0:    	call   0xffffd2ad
  006f5:    	lea    r14,[rbp-0x8]
  006f9:    	mov    QWORD PTR [rbx],r14
  006fc:    	mov    r14,QWORD PTR [rbp-0x10]
  00700:    	movq   xmm2,QWORD PTR [rsp]
  00705:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00711:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00717:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00723: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00731: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00738:    	add    rsp,0x50
  0073c: f6 	movabs r13,0x55f67b8583b0
  00746:    	test   rax,rax
  00749:    	je     0xffff9624
  0074f:    	mov    QWORD PTR [r14-0x80],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  00753: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc257]        # 0xffffc9b1
  0075a: 00 	cmp    rax,QWORD PTR [rip+0x1ea0]        # 0x2601
  00761:    	jne    0x3b334
  00767: 00 	mov    rax,QWORD PTR [rip+0x1e83]        # 0x25f1
  0076e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00057 %16 = const[Vec]                     [Vec]
  00775: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc235]        # 0xffffc9b1
  0077c: 00 	cmp    rax,QWORD PTR [rip+0x1e9e]        # 0x2621
  00783:    	jne    0x3b3f2
  00789: 00 	mov    rax,QWORD PTR [rip+0x1e81]        # 0x2611
  00790: ff 	mov    QWORD PTR [r14-0xb0],rax
:00058 %17 = literal[0.0]
  00797: 1e 	movq   xmm8,QWORD PTR [rip+0x1e91]        # 0x2631
  007a0: 00 	movabs rax,0x8000000000000002
  007aa: ff 	mov    QWORD PTR [r14-0xb8],rax
:00059 %18 = literal[0.0]
  007b1: 1e 	movq   xmm9,QWORD PTR [rip+0x1e87]        # 0x2641
  007ba: 00 	movabs rax,0x8000000000000002
  007c4: ff 	mov    QWORD PTR [r14-0xc0],rax
:00060 %19 = literal[0.0]
  007cb: 1e 	movq   xmm12,QWORD PTR [rip+0x1e7d]        # 0x2651
  007d4: 00 	movabs rax,0x8000000000000002
  007de: ff 	mov    QWORD PTR [r14-0xc8],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  007ec: 00 	test   rdi,0x7
  007f3:    	jne    0x3b4b0
  007f9:    	cmp    DWORD PTR [rdi+0x4],0x29
  007fd:    	jne    0x3b4b0
  00803: 26 	cmp    DWORD PTR [rip+0xffffffffffffc19c],0x26        # 0xffffc9a6
  0080a:    	jne    0x3b4b0
  00810: 00 	mov    r9,0x0
  00817:    	sub    rsp,0x60
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	movq   QWORD PTR [rsp+0x20],xmm6
  00838:    	movq   QWORD PTR [rsp+0x28],xmm7
  0083e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00845: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00853: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00861:    	mov    rdx,rdi
  00864:    	mov    QWORD PTR [rsp-0x40],rcx
  00869: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00872: ff 	lea    rcx,[r14-0xb8]
  00879: 00 	mov    r8,0x3
  00880:    	mov    rsi,QWORD PTR [rbx]
  00883:    	mov    QWORD PTR [rsp-0x18],rsi
  00888:    	lea    rsi,[rsp-0x18]
  0088d:    	mov    QWORD PTR [rbx],rsi
  00890:    	lea    r14,[rsp-0x10]
  00895:    	mov    QWORD PTR [rsp-0x20],r14
  0089a:    	call   0x3b529
  0089f:    	lea    r14,[rbp-0x8]
  008a3:    	mov    QWORD PTR [rbx],r14
  008a6:    	mov    r14,QWORD PTR [rbp-0x10]
  008aa:    	movq   xmm2,QWORD PTR [rsp]
  008af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f0:    	add    rsp,0x60
  008f4: f6 	movabs r13,0x55f67b858430
  008fe:    	test   rax,rax
  00901:    	je     0xffff9624
  00907: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 
:00064 %16 = %10
  0090e:    	mov    rax,QWORD PTR [r14-0x80]
  00912: ff 	mov    QWORD PTR [r14-0xb0],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00919: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00920: 00 	test   rdi,0x7
  00927:    	jne    0x3b55b
  0092d:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00931:    	jne    0x3b55b
  00937: 26 	cmp    DWORD PTR [rip+0xffffffffffffc068],0x26        # 0xffffc9a6
  0093e:    	jne    0x3b55b
  00944: 00 	mov    r9,0x0
  0094b:    	sub    rsp,0x60
  0094f:    	movq   QWORD PTR [rsp],xmm2
  00954:    	movq   QWORD PTR [rsp+0x8],xmm3
  0095a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00960:    	movq   QWORD PTR [rsp+0x18],xmm5
  00966:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00972: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00979: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00980: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00987: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0098e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00995:    	mov    rdx,rdi
  00998:    	mov    QWORD PTR [rsp-0x40],rcx
  0099d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009a6: ff 	lea    rcx,[r14-0xa8]
  009ad: 00 	mov    r8,0x2
  009b4:    	mov    rsi,QWORD PTR [rbx]
  009b7:    	mov    QWORD PTR [rsp-0x18],rsi
  009bc:    	lea    rsi,[rsp-0x18]
  009c1:    	mov    QWORD PTR [rbx],rsi
  009c4:    	lea    r14,[rsp-0x10]
  009c9:    	mov    QWORD PTR [rsp-0x20],r14
  009ce:    	call   0x3b5d4
  009d3:    	lea    r14,[rbp-0x8]
  009d7:    	mov    QWORD PTR [rbx],r14
  009da:    	mov    r14,QWORD PTR [rbp-0x10]
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009fb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a01: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a08: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a0f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a16: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a1d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a24:    	add    rsp,0x60
  00a28: f6 	movabs r13,0x55f67b858470
  00a32:    	test   rax,rax
  00a35:    	je     0xffff9624
  00a3b: ff 	mov    QWORD PTR [r14-0x88],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a42: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbf68]        # 0xffffc9b1
  00a49: 00 	cmp    rax,QWORD PTR [rip+0x1c21]        # 0x2671
  00a50:    	jne    0x3b606
  00a56: 00 	mov    rax,QWORD PTR [rip+0x1c04]        # 0x2661
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a6b: 00 	test   rdi,0x7
  00a72:    	jne    0x3b6e0
  00a78:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a7c:    	jne    0x3b6e0
  00a82: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf1d],0x26        # 0xffffc9a6
  00a89:    	jne    0x3b6e0
  00a8f: 00 	mov    r9,0x0
  00a96:    	sub    rsp,0x60
  00a9a:    	movq   QWORD PTR [rsp],xmm2
  00a9f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aab:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ab7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00abd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ac4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00acb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ad2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ad9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ae0:    	mov    rdx,rdi
  00ae3:    	mov    QWORD PTR [rsp-0x40],rcx
  00ae8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00af1: ff 	lea    rcx,[r14-0xa8]
  00af8: 00 	mov    r8,0x0
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   0x3b759
  00b1e:    	lea    r14,[rbp-0x8]
  00b22:    	mov    QWORD PTR [rbx],r14
  00b25:    	mov    r14,QWORD PTR [rbp-0x10]
  00b29:    	movq   xmm2,QWORD PTR [rsp]
  00b2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b6f:    	add    rsp,0x60
  00b73: f6 	movabs r13,0x55f67b8584b0
  00b7d:    	test   rax,rax
  00b80:    	je     0xffff9624
  00b86: ff 	mov    QWORD PTR [r14-0x90],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b8d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b91:    	mov    rax,QWORD PTR [rdi+0x10]
  00b95: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 0: i32
  00b9c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ba7:    	sub    rsp,0x60
  00bab:    	movq   QWORD PTR [rsp],xmm2
  00bb0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bb6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bbc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bc2:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bc8:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bce: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bd5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bdc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00be3: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bea: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bf1: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00bf8: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00bff:    	mov    rdi,rbx
  00c02:    	mov    rsi,r12
  00c05: f6 	movabs r8,0x55f67b8584e8
  00c0f: f6 	movabs rax,0x55f67a71b620
  00c19:    	call   rax
  00c1b:    	movq   xmm2,QWORD PTR [rsp]
  00c20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c32:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c38:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c3e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c45: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c4c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c53: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c5a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c61:    	add    rsp,0x60
  00c65: f6 	movabs r13,0x55f67b8584f0
  00c6f:    	test   rax,rax
  00c72:    	je     0xffff9624
  00c78: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00c7f: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c86: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00c8d: ff 	mov    rax,QWORD PTR [r14-0x90]
  00c94: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c9b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ca2: 00 	test   rdi,0x7
  00ca9:    	jne    0x3b78b
  00caf:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00cb3:    	jne    0x3b78b
  00cb9: 26 	cmp    DWORD PTR [rip+0xffffffffffffbce6],0x26        # 0xffffc9a6
  00cc0:    	jne    0x3b78b
  00cc6:    	sub    rsp,0x60
  00cca:    	movq   QWORD PTR [rsp],xmm2
  00ccf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cdb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ce7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ced: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cf4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cfb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d02: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d09: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d10: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d19: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d20:    	mov    QWORD PTR [rsp-0x40],rax
  00d25: 00 	mov    rdi,0x2
  00d2c:    	lea    r8,[rsp-0x48]
  00d31: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00d38:    	mov    QWORD PTR [r8],rax
  00d3b:    	sub    r8,0x8
  00d3f: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00d46:    	mov    QWORD PTR [r8],rax
  00d49:    	sub    r8,0x8
  00d4d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d56: 10 	movabs rax,0x1000000046
  00d60:    	mov    QWORD PTR [rsp-0x30],rax
  00d65: f6 	movabs r13,0x55f67b86e960
  00d6f:    	mov    rsi,QWORD PTR [rbx]
  00d72:    	mov    QWORD PTR [rsp-0x18],rsi
  00d77:    	lea    rsi,[rsp-0x18]
  00d7c:    	mov    QWORD PTR [rbx],rsi
  00d7f:    	lea    r14,[rsp-0x10]
  00d84:    	mov    QWORD PTR [rsp-0x20],r14
  00d89:    	call   0xffffd5b5
  00d8e:    	lea    r14,[rbp-0x8]
  00d92:    	mov    QWORD PTR [rbx],r14
  00d95:    	mov    r14,QWORD PTR [rbp-0x10]
  00d99:    	movq   xmm2,QWORD PTR [rsp]
  00d9e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00da4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00daa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00db0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00db6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dbc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00dc3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00dd1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00dd8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ddf:    	add    rsp,0x60
  00de3: f6 	movabs r13,0x55f67b858530
  00ded:    	test   rax,rax
  00df0:    	je     0xffff9624
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00df6:    	mov    rdi,QWORD PTR [rbp-0x30]
  00dfa:    	mov    rax,QWORD PTR [rdi+0x10]
  00dfe: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  00e05: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00e10:    	sub    rsp,0x60
  00e14:    	movq   QWORD PTR [rsp],xmm2
  00e19:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e25:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e2b:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e31:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e37: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e3e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e45: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e4c: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e53: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e5a: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00e61: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00e68:    	mov    rdi,rbx
  00e6b:    	mov    rsi,r12
  00e6e: f6 	movabs r8,0x55f67b858568
  00e78: f6 	movabs rax,0x55f67a71b620
  00e82:    	call   rax
  00e84:    	movq   xmm2,QWORD PTR [rsp]
  00e89:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e8f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e95:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e9b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ea1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ea7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00eae: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00eb5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ebc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00ec3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00eca:    	add    rsp,0x60
  00ece: f6 	movabs r13,0x55f67b858570
  00ed8:    	test   rax,rax
  00edb:    	je     0xffff9624
  00ee1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %15 = %11
  00ee8: ff 	mov    rax,QWORD PTR [r14-0x88]
  00eef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00084 %16 = %12
  00ef6: ff 	mov    rax,QWORD PTR [r14-0x90]
  00efd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00f04: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f0b: 00 	test   rdi,0x7
  00f12:    	jne    0x3b804
  00f18:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00f1c:    	jne    0x3b804
  00f22: 26 	cmp    DWORD PTR [rip+0xffffffffffffba7d],0x26        # 0xffffc9a6
  00f29:    	jne    0x3b804
  00f2f:    	sub    rsp,0x60
  00f33:    	movq   QWORD PTR [rsp],xmm2
  00f38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f50:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f56: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f5d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f64: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f6b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f72: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f79: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f82: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00f89:    	mov    QWORD PTR [rsp-0x40],rax
  00f8e: 00 	mov    rdi,0x2
  00f95:    	lea    r8,[rsp-0x48]
  00f9a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00fa1:    	mov    QWORD PTR [r8],rax
  00fa4:    	sub    r8,0x8
  00fa8: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00faf:    	mov    QWORD PTR [r8],rax
  00fb2:    	sub    r8,0x8
  00fb6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fbf: 10 	movabs rax,0x1000000046
  00fc9:    	mov    QWORD PTR [rsp-0x30],rax
  00fce: f6 	movabs r13,0x55f67b86e960
  00fd8:    	mov    rsi,QWORD PTR [rbx]
  00fdb:    	mov    QWORD PTR [rsp-0x18],rsi
  00fe0:    	lea    rsi,[rsp-0x18]
  00fe5:    	mov    QWORD PTR [rbx],rsi
  00fe8:    	lea    r14,[rsp-0x10]
  00fed:    	mov    QWORD PTR [rsp-0x20],r14
  00ff2:    	call   0xffffd5b5
  00ff7:    	lea    r14,[rbp-0x8]
  00ffb:    	mov    QWORD PTR [rbx],r14
  00ffe:    	mov    r14,QWORD PTR [rbp-0x10]
  01002:    	movq   xmm2,QWORD PTR [rsp]
  01007:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01013:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01019:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0101f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01025: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0102c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01033: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0103a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01041: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01048:    	add    rsp,0x60
  0104c: f6 	movabs r13,0x55f67b8585b0
  01056:    	test   rax,rax
  01059:    	je     0xffff9624
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  0105f:    	mov    rdi,QWORD PTR [rbp-0x30]
  01063:    	mov    rax,QWORD PTR [rdi+0x10]
  01067: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 %15 = 2: i32
  0106e: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01079:    	sub    rsp,0x60
  0107d:    	movq   QWORD PTR [rsp],xmm2
  01082:    	movq   QWORD PTR [rsp+0x8],xmm3
  01088:    	movq   QWORD PTR [rsp+0x10],xmm4
  0108e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01094:    	movq   QWORD PTR [rsp+0x20],xmm6
  0109a:    	movq   QWORD PTR [rsp+0x28],xmm7
  010a0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010a7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010ae: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  010b5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010bc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010c3: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  010ca: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  010d1:    	mov    rdi,rbx
  010d4:    	mov    rsi,r12
  010d7: f6 	movabs r8,0x55f67b8585e8
  010e1: f6 	movabs rax,0x55f67a71b620
  010eb:    	call   rax
  010ed:    	movq   xmm2,QWORD PTR [rsp]
  010f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01104:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0110a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01110: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01117: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0111e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01125: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0112c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01133:    	add    rsp,0x60
  01137: f6 	movabs r13,0x55f67b8585f0
  01141:    	test   rax,rax
  01144:    	je     0xffff9624
  0114a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = %11
  01151: ff 	mov    rax,QWORD PTR [r14-0x88]
  01158: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %16 = %12
  0115f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01166: ff 	mov    QWORD PTR [r14-0xb0],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  0116d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01174: 00 	test   rdi,0x7
  0117b:    	jne    0x3b87d
  01181:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01185:    	jne    0x3b87d
  0118b: 26 	cmp    DWORD PTR [rip+0xffffffffffffb814],0x26        # 0xffffc9a6
  01192:    	jne    0x3b87d
  01198:    	sub    rsp,0x60
  0119c:    	movq   QWORD PTR [rsp],xmm2
  011a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  011a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ad:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b3:    	movq   QWORD PTR [rsp+0x20],xmm6
  011b9:    	movq   QWORD PTR [rsp+0x28],xmm7
  011bf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  011c6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  011cd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  011d4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011db: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011e2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011eb: ff 	mov    rax,QWORD PTR [r14-0xa0]
  011f2:    	mov    QWORD PTR [rsp-0x40],rax
  011f7: 00 	mov    rdi,0x2
  011fe:    	lea    r8,[rsp-0x48]
  01203: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0120a:    	mov    QWORD PTR [r8],rax
  0120d:    	sub    r8,0x8
  01211: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01218:    	mov    QWORD PTR [r8],rax
  0121b:    	sub    r8,0x8
  0121f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01228: 10 	movabs rax,0x1000000046
  01232:    	mov    QWORD PTR [rsp-0x30],rax
  01237: f6 	movabs r13,0x55f67b86e960
  01241:    	mov    rsi,QWORD PTR [rbx]
  01244:    	mov    QWORD PTR [rsp-0x18],rsi
  01249:    	lea    rsi,[rsp-0x18]
  0124e:    	mov    QWORD PTR [rbx],rsi
  01251:    	lea    r14,[rsp-0x10]
  01256:    	mov    QWORD PTR [rsp-0x20],r14
  0125b:    	call   0xffffd5b5
  01260:    	lea    r14,[rbp-0x8]
  01264:    	mov    QWORD PTR [rbx],r14
  01267:    	mov    r14,QWORD PTR [rbp-0x10]
  0126b:    	movq   xmm2,QWORD PTR [rsp]
  01270:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01276:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0127c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01282:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01288:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0128e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01295: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0129c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012a3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012aa: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012b1:    	add    rsp,0x60
  012b5: f6 	movabs r13,0x55f67b858630
  012bf:    	test   rax,rax
  012c2:    	je     0xffff9624
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  012c8:    	mov    rdi,QWORD PTR [rbp-0x30]
  012cc:    	mov    rax,QWORD PTR [rdi+0x18]
  012d0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00097 %15 = %11
  012d7: ff 	mov    rax,QWORD PTR [r14-0x88]
  012de: ff 	mov    QWORD PTR [r14-0xa8],rax
:00098 %16 = %12
  012e5: ff 	mov    rax,QWORD PTR [r14-0x90]
  012ec: ff 	mov    QWORD PTR [r14-0xb0],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012fa: 00 	test   rdi,0x7
  01301:    	jne    0x3b8f6
  01307:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0130b:    	jne    0x3b8f6
  01311: 26 	cmp    DWORD PTR [rip+0xffffffffffffb68e],0x26        # 0xffffc9a6
  01318:    	jne    0x3b8f6
  0131e:    	sub    rsp,0x60
  01322:    	movq   QWORD PTR [rsp],xmm2
  01327:    	movq   QWORD PTR [rsp+0x8],xmm3
  0132d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01333:    	movq   QWORD PTR [rsp+0x18],xmm5
  01339:    	movq   QWORD PTR [rsp+0x20],xmm6
  0133f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01345: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0134c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01353: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0135a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01361: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01368: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01371: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01378:    	mov    QWORD PTR [rsp-0x40],rax
  0137d: 00 	mov    rdi,0x2
  01384:    	lea    r8,[rsp-0x48]
  01389: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01390:    	mov    QWORD PTR [r8],rax
  01393:    	sub    r8,0x8
  01397: ff 	mov    rax,QWORD PTR [r14-0xb0]
  0139e:    	mov    QWORD PTR [r8],rax
  013a1:    	sub    r8,0x8
  013a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013ae: 0e 	movabs rax,0xe00000048
  013b8:    	mov    QWORD PTR [rsp-0x30],rax
  013bd: f6 	movabs r13,0x55f67b870800
  013c7:    	mov    rsi,QWORD PTR [rbx]
  013ca:    	mov    QWORD PTR [rsp-0x18],rsi
  013cf:    	lea    rsi,[rsp-0x18]
  013d4:    	mov    QWORD PTR [rbx],rsi
  013d7:    	lea    r14,[rsp-0x10]
  013dc:    	mov    QWORD PTR [rsp-0x20],r14
  013e1:    	call   0xffffdb8d
  013e6:    	lea    r14,[rbp-0x8]
  013ea:    	mov    QWORD PTR [rbx],r14
  013ed:    	mov    r14,QWORD PTR [rbp-0x10]
  013f1:    	movq   xmm2,QWORD PTR [rsp]
  013f6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013fc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01402:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01408:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0140e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01414: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0141b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01422: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01429: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01430: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01437:    	add    rsp,0x60
  0143b: f6 	movabs r13,0x55f67b858690
  01445:    	test   rax,rax
  01448:    	je     0xffff9624
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  0144e: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01455: 00 	test   rdi,0x7
  0145c:    	jne    0x3b96f
  01462:    	cmp    DWORD PTR [rdi+0x4],0x30
  01466:    	jne    0x3b96f
  0146c: 26 	cmp    DWORD PTR [rip+0xffffffffffffb533],0x26        # 0xffffc9a6
  01473:    	jne    0x3b96f
  01479:    	mov    esi,DWORD PTR [rip+0x11fe]        # 0x267d
  0147f:    	cmp    esi,0xffffffff
  01482:    	je     0x3b9e8
  01488:    	cmp    WORD PTR [rdi+0x2],0x3
  0148d:    	jne    0x14a6
  01493:    	cmp    esi,0x6
  01496:    	jge    0x14a6
  0149c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014a1:    	jmp    0x1546
  014a6:    	sub    rsp,0x60
  014aa:    	movq   QWORD PTR [rsp],xmm2
  014af:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b5:    	movq   QWORD PTR [rsp+0x10],xmm4
  014bb:    	movq   QWORD PTR [rsp+0x18],xmm5
  014c1:    	movq   QWORD PTR [rsp+0x20],xmm6
  014c7:    	movq   QWORD PTR [rsp+0x28],xmm7
  014cd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014d4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014db: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  014e2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014e9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014f0: f6 	movabs rax,0x55f67a69e160
  014fa:    	call   rax
  014fc:    	movq   xmm2,QWORD PTR [rsp]
  01501:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01507:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0150d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01513:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01519:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0151f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01526: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0152d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01534: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0153b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01542:    	add    rsp,0x60
  01546: ff 	mov    QWORD PTR [r14-0xa0],rax
:00103 
:00105 condnotbr %14 =>:00148
  0154d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01554:    	or     rax,0x10
  01558:    	cmp    rax,0x14
  0155c:    	je     0x255c
:00106 %14 = %12
  01562: ff 	mov    rax,QWORD PTR [r14-0x90]
  01569: ff 	mov    QWORD PTR [r14-0xa0],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  01570: 01 	sub    DWORD PTR [rip+0x110a],0x1        # 0x2681
  01577:    	je     0x3bb1e
  0157d:    	sub    rsp,0x60
  01581:    	movq   QWORD PTR [rsp],xmm2
  01586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0158c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01592:    	movq   QWORD PTR [rsp+0x18],xmm5
  01598:    	movq   QWORD PTR [rsp+0x20],xmm6
  0159e:    	movq   QWORD PTR [rsp+0x28],xmm7
  015a4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015ab: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015b2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015b9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015c0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015c7:    	mov    r15d,0x32
  015cd: f6 	movabs r13,0x55f67b858700
  015d7:    	cmp    r15d,DWORD PTR [r13-0x8]
  015db:    	jne    0x3bb3c
  015e1:    	mov    eax,DWORD PTR [rip+0xffffffffffffb3bf]        # 0xffffc9a6
  015e7:    	cmp    DWORD PTR [r13-0x4],eax
  015eb:    	jne    0x3bb3c
  015f1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015fa:    	mov    rsi,QWORD PTR [rbx]
  015fd:    	mov    QWORD PTR [rsp-0x18],rsi
  01602:    	lea    rsi,[rsp-0x18]
  01607:    	mov    QWORD PTR [rbx],rsi
  0160a:    	mov    rax,QWORD PTR [r14-0x30]
  0160e:    	mov    QWORD PTR [rsp-0x40],rax
  01613: 00 	mov    rdi,0x1
  0161a:    	lea    r8,[rsp-0x48]
  0161f: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01626:    	mov    QWORD PTR [r8],rax
  01629:    	sub    r8,0x8
  0162d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01636:    	lea    r14,[rsp-0x10]
  0163b:    	mov    QWORD PTR [rsp-0x20],r14
  01640: 00 	movabs rax,0x0
  0164a:    	mov    QWORD PTR [rsp-0x30],rax
  0164f: 00 	movabs r13,0x0
  01659:    	call   0xffff95f1
  0165e:    	lea    r14,[rbp-0x8]
  01662:    	mov    QWORD PTR [rbx],r14
  01665:    	mov    r14,QWORD PTR [rbp-0x10]
  01669:    	movq   xmm2,QWORD PTR [rsp]
  0166e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01674:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0167a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01680:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01686:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0168c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01693: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0169a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  016a1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  016a8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  016af:    	add    rsp,0x60
  016b3:    	test   rax,rax
  016b6:    	je     0x3bbaf
  016bc: ff 	mov    QWORD PTR [r14-0x98],rax
:00108 
:00110 %14 = dynvar(2, %2)
  016c3:    	mov    rax,QWORD PTR [rbp-0x18]
  016c7:    	mov    rax,QWORD PTR [rax]
  016ca:    	mov    rax,QWORD PTR [rax-0x28]
  016ce: ff 	mov    QWORD PTR [r14-0xa0],rax
:00111 %16 = dynvar(2, %2)
  016d5:    	mov    rax,QWORD PTR [rbp-0x18]
  016d9:    	mov    rax,QWORD PTR [rax]
  016dc:    	mov    rax,QWORD PTR [rax-0x28]
  016e0: ff 	mov    QWORD PTR [r14-0xb0],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  016e7:    	sub    rsp,0x60
  016eb:    	movq   QWORD PTR [rsp],xmm2
  016f0:    	movq   QWORD PTR [rsp+0x8],xmm3
  016f6:    	movq   QWORD PTR [rsp+0x10],xmm4
  016fc:    	movq   QWORD PTR [rsp+0x18],xmm5
  01702:    	movq   QWORD PTR [rsp+0x20],xmm6
  01708:    	movq   QWORD PTR [rsp+0x28],xmm7
  0170e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01715: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0171c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01723: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0172a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01731: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01738: f6 	movabs rax,0x55f67a7285d0
  01742:    	call   rax
  01744:    	mov    r15d,eax
  01747: f6 	movabs r13,0x55f67b858750
  01751:    	cmp    r15d,DWORD PTR [r13-0x8]
  01755:    	jne    0x3bbbe
  0175b:    	mov    eax,DWORD PTR [rip+0xffffffffffffb245]        # 0xffffc9a6
  01761:    	cmp    DWORD PTR [r13-0x4],eax
  01765:    	jne    0x3bbbe
  0176b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01774:    	mov    rsi,QWORD PTR [rbx]
  01777:    	mov    QWORD PTR [rsp-0x18],rsi
  0177c:    	lea    rsi,[rsp-0x18]
  01781:    	mov    QWORD PTR [rbx],rsi
  01784: ff 	mov    rax,QWORD PTR [r14-0xb0]
  0178b:    	mov    QWORD PTR [rsp-0x40],rax
  01790: 00 	mov    rdi,0x0
  01797: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017a0:    	lea    r14,[rsp-0x10]
  017a5:    	mov    QWORD PTR [rsp-0x20],r14
  017aa: 00 	movabs rax,0x0
  017b4:    	mov    QWORD PTR [rsp-0x30],rax
  017b9: 00 	movabs r13,0x0
  017c3:    	call   0xffff95f1
  017c8:    	lea    r14,[rbp-0x8]
  017cc:    	mov    QWORD PTR [rbx],r14
  017cf:    	mov    r14,QWORD PTR [rbp-0x10]
  017d3:    	movq   xmm2,QWORD PTR [rsp]
  017d8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017de:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017e4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017ea:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017f0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017f6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017fd: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01804: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0180b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01812: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01819:    	add    rsp,0x60
  0181d:    	test   rax,rax
  01820:    	je     0x3bc34
  01826: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  0182d:    	sub    rsp,0x60
  01831:    	movq   QWORD PTR [rsp],xmm2
  01836:    	movq   QWORD PTR [rsp+0x8],xmm3
  0183c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01842:    	movq   QWORD PTR [rsp+0x18],xmm5
  01848:    	movq   QWORD PTR [rsp+0x20],xmm6
  0184e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01854: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0185b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01862: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01869: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01870: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01877: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0187e: f6 	movabs rax,0x55f67a7285d0
  01888:    	call   rax
  0188a:    	mov    r15d,eax
  0188d: f6 	movabs r13,0x55f67b858780
  01897:    	cmp    r15d,DWORD PTR [r13-0x8]
  0189b:    	jne    0x3bc43
  018a1:    	mov    eax,DWORD PTR [rip+0xffffffffffffb0ff]        # 0xffffc9a6
  018a7:    	cmp    DWORD PTR [r13-0x4],eax
  018ab:    	jne    0x3bc43
  018b1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018ba:    	mov    rsi,QWORD PTR [rbx]
  018bd:    	mov    QWORD PTR [rsp-0x18],rsi
  018c2:    	lea    rsi,[rsp-0x18]
  018c7:    	mov    QWORD PTR [rbx],rsi
  018ca: ff 	mov    rax,QWORD PTR [r14-0x98]
  018d1:    	mov    QWORD PTR [rsp-0x40],rax
  018d6: 00 	mov    rdi,0x0
  018dd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  018e6:    	lea    r14,[rsp-0x10]
  018eb:    	mov    QWORD PTR [rsp-0x20],r14
  018f0: 00 	movabs rax,0x0
  018fa:    	mov    QWORD PTR [rsp-0x30],rax
  018ff: 00 	movabs r13,0x0
  01909:    	call   0xffff95f1
  0190e:    	lea    r14,[rbp-0x8]
  01912:    	mov    QWORD PTR [rbx],r14
  01915:    	mov    r14,QWORD PTR [rbp-0x10]
  01919:    	movq   xmm2,QWORD PTR [rsp]
  0191e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01924:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0192a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01930:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01936:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0193c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01943: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0194a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01951: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01958: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0195f:    	add    rsp,0x60
  01963:    	test   rax,rax
  01966:    	je     0x3bcb9
  0196c: ff 	mov    QWORD PTR [r14-0xb0],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01973: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0197a: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01981:    	sub    rsp,0x60
  01985:    	movq   QWORD PTR [rsp],xmm2
  0198a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01990:    	movq   QWORD PTR [rsp+0x10],xmm4
  01996:    	movq   QWORD PTR [rsp+0x18],xmm5
  0199c:    	movq   QWORD PTR [rsp+0x20],xmm6
  019a2:    	movq   QWORD PTR [rsp+0x28],xmm7
  019a8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019af: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019b6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019bd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019c4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019cb:    	mov    rdx,rdi
  019ce:    	mov    rcx,rsi
  019d1:    	mov    rdi,rbx
  019d4:    	mov    rsi,r12
  019d7: f6 	movabs rax,0x55f67a6ddf30
  019e1:    	call   rax
  019e3:    	movq   xmm2,QWORD PTR [rsp]
  019e8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  019ee:    	movq   xmm4,QWORD PTR [rsp+0x10]
  019f4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  019fa:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a00:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a06: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a0d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a14: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a1b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a22: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a29:    	add    rsp,0x60
  01a2d: f6 	movabs r13,0x55f67b8587b0
  01a37:    	test   rax,rax
  01a3a:    	je     0xffff9624
  01a40: ff 	mov    QWORD PTR [r14-0xa8],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  01a47:    	sub    rsp,0x60
  01a4b:    	movq   QWORD PTR [rsp],xmm2
  01a50:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a56:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a5c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a62:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a68:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a6e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a75: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a7c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a83: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a8a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a91: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01a98: f6 	movabs rax,0x55f67a7285d0
  01aa2:    	call   rax
  01aa4:    	mov    r15d,eax
  01aa7: f6 	movabs r13,0x55f67b8587c0
  01ab1:    	cmp    r15d,DWORD PTR [r13-0x8]
  01ab5:    	jne    0x3bcc8
  01abb:    	mov    eax,DWORD PTR [rip+0xffffffffffffaee5]        # 0xffffc9a6
  01ac1:    	cmp    DWORD PTR [r13-0x4],eax
  01ac5:    	jne    0x3bcc8
  01acb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ad4:    	mov    rsi,QWORD PTR [rbx]
  01ad7:    	mov    QWORD PTR [rsp-0x18],rsi
  01adc:    	lea    rsi,[rsp-0x18]
  01ae1:    	mov    QWORD PTR [rbx],rsi
  01ae4: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01aeb:    	mov    QWORD PTR [rsp-0x40],rax
  01af0: 00 	mov    rdi,0x1
  01af7:    	lea    r8,[rsp-0x48]
  01afc: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01b03:    	mov    QWORD PTR [r8],rax
  01b06:    	sub    r8,0x8
  01b0a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b13:    	lea    r14,[rsp-0x10]
  01b18:    	mov    QWORD PTR [rsp-0x20],r14
  01b1d: 00 	movabs rax,0x0
  01b27:    	mov    QWORD PTR [rsp-0x30],rax
  01b2c: 00 	movabs r13,0x0
  01b36:    	call   0xffff95f1
  01b3b:    	lea    r14,[rbp-0x8]
  01b3f:    	mov    QWORD PTR [rbx],r14
  01b42:    	mov    r14,QWORD PTR [rbp-0x10]
  01b46:    	movq   xmm2,QWORD PTR [rsp]
  01b4b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b51:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b57:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b5d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b63:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b69: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b70: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b77: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b7e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b85: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b8c:    	add    rsp,0x60
  01b90:    	test   rax,rax
  01b93:    	je     0x3bd3e
:00120 
:00122 %14 = dynvar(2, %2)
  01b99:    	mov    rax,QWORD PTR [rbp-0x18]
  01b9d:    	mov    rax,QWORD PTR [rax]
  01ba0:    	mov    rax,QWORD PTR [rax-0x28]
  01ba4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00123 %16 = dynvar(2, %2)
  01bab:    	mov    rax,QWORD PTR [rbp-0x18]
  01baf:    	mov    rax,QWORD PTR [rax]
  01bb2:    	mov    rax,QWORD PTR [rax-0x28]
  01bb6: ff 	mov    QWORD PTR [r14-0xb0],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01bbd:    	sub    rsp,0x60
  01bc1:    	movq   QWORD PTR [rsp],xmm2
  01bc6:    	movq   QWORD PTR [rsp+0x8],xmm3
  01bcc:    	movq   QWORD PTR [rsp+0x10],xmm4
  01bd2:    	movq   QWORD PTR [rsp+0x18],xmm5
  01bd8:    	movq   QWORD PTR [rsp+0x20],xmm6
  01bde:    	movq   QWORD PTR [rsp+0x28],xmm7
  01be4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01beb: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01bf2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01bf9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c00: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c07: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01c0e: f6 	movabs rax,0x55f67a7285d0
  01c18:    	call   rax
  01c1a:    	mov    r15d,eax
  01c1d: f6 	movabs r13,0x55f67b858810
  01c27:    	cmp    r15d,DWORD PTR [r13-0x8]
  01c2b:    	jne    0x3bd4d
  01c31:    	mov    eax,DWORD PTR [rip+0xffffffffffffad6f]        # 0xffffc9a6
  01c37:    	cmp    DWORD PTR [r13-0x4],eax
  01c3b:    	jne    0x3bd4d
  01c41: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c4a:    	mov    rsi,QWORD PTR [rbx]
  01c4d:    	mov    QWORD PTR [rsp-0x18],rsi
  01c52:    	lea    rsi,[rsp-0x18]
  01c57:    	mov    QWORD PTR [rbx],rsi
  01c5a: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01c61:    	mov    QWORD PTR [rsp-0x40],rax
  01c66: 00 	mov    rdi,0x0
  01c6d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c76:    	lea    r14,[rsp-0x10]
  01c7b:    	mov    QWORD PTR [rsp-0x20],r14
  01c80: 00 	movabs rax,0x0
  01c8a:    	mov    QWORD PTR [rsp-0x30],rax
  01c8f: 00 	movabs r13,0x0
  01c99:    	call   0xffff95f1
  01c9e:    	lea    r14,[rbp-0x8]
  01ca2:    	mov    QWORD PTR [rbx],r14
  01ca5:    	mov    r14,QWORD PTR [rbp-0x10]
  01ca9:    	movq   xmm2,QWORD PTR [rsp]
  01cae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cb4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01cba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01cc0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cc6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01ccc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cd3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01cda: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ce1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ce8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01cef:    	add    rsp,0x60
  01cf3:    	test   rax,rax
  01cf6:    	je     0x3bdc3
  01cfc: ff 	mov    QWORD PTR [r14-0xa8],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01d03:    	sub    rsp,0x60
  01d07:    	movq   QWORD PTR [rsp],xmm2
  01d0c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d12:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d18:    	movq   QWORD PTR [rsp+0x18],xmm5
  01d1e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01d24:    	movq   QWORD PTR [rsp+0x28],xmm7
  01d2a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01d31: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01d38: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01d3f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01d46: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01d4d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d54: f6 	movabs rax,0x55f67a7285d0
  01d5e:    	call   rax
  01d60:    	mov    r15d,eax
  01d63: f6 	movabs r13,0x55f67b858840
  01d6d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01d71:    	jne    0x3bdd2
  01d77:    	mov    eax,DWORD PTR [rip+0xffffffffffffac29]        # 0xffffc9a6
  01d7d:    	cmp    DWORD PTR [r13-0x4],eax
  01d81:    	jne    0x3bdd2
  01d87: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d90:    	mov    rsi,QWORD PTR [rbx]
  01d93:    	mov    QWORD PTR [rsp-0x18],rsi
  01d98:    	lea    rsi,[rsp-0x18]
  01d9d:    	mov    QWORD PTR [rbx],rsi
  01da0: ff 	mov    rax,QWORD PTR [r14-0x98]
  01da7:    	mov    QWORD PTR [rsp-0x40],rax
  01dac: 00 	mov    rdi,0x0
  01db3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dbc:    	lea    r14,[rsp-0x10]
  01dc1:    	mov    QWORD PTR [rsp-0x20],r14
  01dc6: 00 	movabs rax,0x0
  01dd0:    	mov    QWORD PTR [rsp-0x30],rax
  01dd5: 00 	movabs r13,0x0
  01ddf:    	call   0xffff95f1
  01de4:    	lea    r14,[rbp-0x8]
  01de8:    	mov    QWORD PTR [rbx],r14
  01deb:    	mov    r14,QWORD PTR [rbp-0x10]
  01def:    	movq   xmm2,QWORD PTR [rsp]
  01df4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01dfa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e00:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e06:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e0c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e12: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e19: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e20: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e27: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e2e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e35:    	add    rsp,0x60
  01e39:    	test   rax,rax
  01e3c:    	je     0x3be48
  01e42: ff 	mov    QWORD PTR [r14-0xb0],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01e49: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01e50: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01e57:    	sub    rsp,0x60
  01e5b:    	movq   QWORD PTR [rsp],xmm2
  01e60:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e66:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e6c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e72:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e78:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e7e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e85: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e8c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e93: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e9a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ea1:    	mov    rdx,rdi
  01ea4:    	mov    rcx,rsi
  01ea7:    	mov    rdi,rbx
  01eaa:    	mov    rsi,r12
  01ead: f6 	movabs rax,0x55f67a6ddf30
  01eb7:    	call   rax
  01eb9:    	movq   xmm2,QWORD PTR [rsp]
  01ebe:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ec4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01eca:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ed0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01ed6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01edc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01ee3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01eea: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ef1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ef8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01eff:    	add    rsp,0x60
  01f03: f6 	movabs r13,0x55f67b858870
  01f0d:    	test   rax,rax
  01f10:    	je     0xffff9624
  01f16: ff 	mov    QWORD PTR [r14-0xa8],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01f1d:    	sub    rsp,0x60
  01f21:    	movq   QWORD PTR [rsp],xmm2
  01f26:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f2c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f32:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f38:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f3e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f44: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f4b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f52: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f59: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f60: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f67: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01f6e: f6 	movabs rax,0x55f67a7285d0
  01f78:    	call   rax
  01f7a:    	mov    r15d,eax
  01f7d: f6 	movabs r13,0x55f67b858880
  01f87:    	cmp    r15d,DWORD PTR [r13-0x8]
  01f8b:    	jne    0x3be57
  01f91:    	mov    eax,DWORD PTR [rip+0xffffffffffffaa0f]        # 0xffffc9a6
  01f97:    	cmp    DWORD PTR [r13-0x4],eax
  01f9b:    	jne    0x3be57
  01fa1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01faa:    	mov    rsi,QWORD PTR [rbx]
  01fad:    	mov    QWORD PTR [rsp-0x18],rsi
  01fb2:    	lea    rsi,[rsp-0x18]
  01fb7:    	mov    QWORD PTR [rbx],rsi
  01fba: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01fc1:    	mov    QWORD PTR [rsp-0x40],rax
  01fc6: 00 	mov    rdi,0x1
  01fcd:    	lea    r8,[rsp-0x48]
  01fd2: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01fd9:    	mov    QWORD PTR [r8],rax
  01fdc:    	sub    r8,0x8
  01fe0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01fe9:    	lea    r14,[rsp-0x10]
  01fee:    	mov    QWORD PTR [rsp-0x20],r14
  01ff3: 00 	movabs rax,0x0
  01ffd:    	mov    QWORD PTR [rsp-0x30],rax
  02002: 00 	movabs r13,0x0
  0200c:    	call   0xffff95f1
  02011:    	lea    r14,[rbp-0x8]
  02015:    	mov    QWORD PTR [rbx],r14
  02018:    	mov    r14,QWORD PTR [rbp-0x10]
  0201c:    	movq   xmm2,QWORD PTR [rsp]
  02021:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02027:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0202d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02033:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02039:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0203f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02046: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0204d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02054: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0205b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02062:    	add    rsp,0x60
  02066:    	test   rax,rax
  02069:    	je     0x3becd
:00132 
:00134 %14 = dynvar(2, %2)
  0206f:    	mov    rax,QWORD PTR [rbp-0x18]
  02073:    	mov    rax,QWORD PTR [rax]
  02076:    	mov    rax,QWORD PTR [rax-0x28]
  0207a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00135 %16 = dynvar(2, %2)
  02081:    	mov    rax,QWORD PTR [rbp-0x18]
  02085:    	mov    rax,QWORD PTR [rax]
  02088:    	mov    rax,QWORD PTR [rax-0x28]
  0208c: ff 	mov    QWORD PTR [r14-0xb0],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  02093:    	sub    rsp,0x60
  02097:    	movq   QWORD PTR [rsp],xmm2
  0209c:    	movq   QWORD PTR [rsp+0x8],xmm3
  020a2:    	movq   QWORD PTR [rsp+0x10],xmm4
  020a8:    	movq   QWORD PTR [rsp+0x18],xmm5
  020ae:    	movq   QWORD PTR [rsp+0x20],xmm6
  020b4:    	movq   QWORD PTR [rsp+0x28],xmm7
  020ba: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  020c1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  020c8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  020cf: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  020d6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  020dd: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  020e4: f6 	movabs rax,0x55f67a7285d0
  020ee:    	call   rax
  020f0:    	mov    r15d,eax
  020f3: f6 	movabs r13,0x55f67b8588d0
  020fd:    	cmp    r15d,DWORD PTR [r13-0x8]
  02101:    	jne    0x3bedc
  02107:    	mov    eax,DWORD PTR [rip+0xffffffffffffa899]        # 0xffffc9a6
  0210d:    	cmp    DWORD PTR [r13-0x4],eax
  02111:    	jne    0x3bedc
  02117: 00 	mov    QWORD PTR [rsp-0x28],0x0
  02120:    	mov    rsi,QWORD PTR [rbx]
  02123:    	mov    QWORD PTR [rsp-0x18],rsi
  02128:    	lea    rsi,[rsp-0x18]
  0212d:    	mov    QWORD PTR [rbx],rsi
  02130: ff 	mov    rax,QWORD PTR [r14-0xb0]
  02137:    	mov    QWORD PTR [rsp-0x40],rax
  0213c: 00 	mov    rdi,0x0
  02143: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0214c:    	lea    r14,[rsp-0x10]
  02151:    	mov    QWORD PTR [rsp-0x20],r14
  02156: 00 	movabs rax,0x0
  02160:    	mov    QWORD PTR [rsp-0x30],rax
  02165: 00 	movabs r13,0x0
  0216f:    	call   0xffff95f1
  02174:    	lea    r14,[rbp-0x8]
  02178:    	mov    QWORD PTR [rbx],r14
  0217b:    	mov    r14,QWORD PTR [rbp-0x10]
  0217f:    	movq   xmm2,QWORD PTR [rsp]
  02184:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0218a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02190:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02196:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0219c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  021a2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  021a9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  021b0: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  021b7: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  021be: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  021c5:    	add    rsp,0x60
  021c9:    	test   rax,rax
  021cc:    	je     0x3bf52
  021d2: ff 	mov    QWORD PTR [r14-0xa8],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  021d9:    	sub    rsp,0x60
  021dd:    	movq   QWORD PTR [rsp],xmm2
  021e2:    	movq   QWORD PTR [rsp+0x8],xmm3
  021e8:    	movq   QWORD PTR [rsp+0x10],xmm4
  021ee:    	movq   QWORD PTR [rsp+0x18],xmm5
  021f4:    	movq   QWORD PTR [rsp+0x20],xmm6
  021fa:    	movq   QWORD PTR [rsp+0x28],xmm7
  02200: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02207: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0220e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02215: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0221c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02223: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0222a: f6 	movabs rax,0x55f67a7285d0
  02234:    	call   rax
  02236:    	mov    r15d,eax
  02239: f6 	movabs r13,0x55f67b858900
  02243:    	cmp    r15d,DWORD PTR [r13-0x8]
  02247:    	jne    0x3bf61
  0224d:    	mov    eax,DWORD PTR [rip+0xffffffffffffa753]        # 0xffffc9a6
  02253:    	cmp    DWORD PTR [r13-0x4],eax
  02257:    	jne    0x3bf61
  0225d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  02266:    	mov    rsi,QWORD PTR [rbx]
  02269:    	mov    QWORD PTR [rsp-0x18],rsi
  0226e:    	lea    rsi,[rsp-0x18]
  02273:    	mov    QWORD PTR [rbx],rsi
  02276: ff 	mov    rax,QWORD PTR [r14-0x98]
  0227d:    	mov    QWORD PTR [rsp-0x40],rax
  02282: 00 	mov    rdi,0x0
  02289: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02292:    	lea    r14,[rsp-0x10]
  02297:    	mov    QWORD PTR [rsp-0x20],r14
  0229c: 00 	movabs rax,0x0
  022a6:    	mov    QWORD PTR [rsp-0x30],rax
  022ab: 00 	movabs r13,0x0
  022b5:    	call   0xffff95f1
  022ba:    	lea    r14,[rbp-0x8]
  022be:    	mov    QWORD PTR [rbx],r14
  022c1:    	mov    r14,QWORD PTR [rbp-0x10]
  022c5:    	movq   xmm2,QWORD PTR [rsp]
  022ca:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022d0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022d6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022dc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022e2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022e8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022ef: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022f6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022fd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02304: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0230b:    	add    rsp,0x60
  0230f:    	test   rax,rax
  02312:    	je     0x3bfd7
  02318: ff 	mov    QWORD PTR [r14-0xb0],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0231f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  02326: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0232d:    	sub    rsp,0x60
  02331:    	movq   QWORD PTR [rsp],xmm2
  02336:    	movq   QWORD PTR [rsp+0x8],xmm3
  0233c:    	movq   QWORD PTR [rsp+0x10],xmm4
  02342:    	movq   QWORD PTR [rsp+0x18],xmm5
  02348:    	movq   QWORD PTR [rsp+0x20],xmm6
  0234e:    	movq   QWORD PTR [rsp+0x28],xmm7
  02354: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0235b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02362: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02369: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02370: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02377:    	mov    rdx,rdi
  0237a:    	mov    rcx,rsi
  0237d:    	mov    rdi,rbx
  02380:    	mov    rsi,r12
  02383: f6 	movabs rax,0x55f67a6ddf30
  0238d:    	call   rax
  0238f:    	movq   xmm2,QWORD PTR [rsp]
  02394:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0239a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  023a0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  023a6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  023ac:    	movq   xmm7,QWORD PTR [rsp+0x28]
  023b2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  023b9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  023c0: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  023c7: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  023ce: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  023d5:    	add    rsp,0x60
  023d9: f6 	movabs r13,0x55f67b858930
  023e3:    	test   rax,rax
  023e6:    	je     0xffff9624
  023ec: ff 	mov    QWORD PTR [r14-0xa8],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  023f3:    	sub    rsp,0x60
  023f7:    	movq   QWORD PTR [rsp],xmm2
  023fc:    	movq   QWORD PTR [rsp+0x8],xmm3
  02402:    	movq   QWORD PTR [rsp+0x10],xmm4
  02408:    	movq   QWORD PTR [rsp+0x18],xmm5
  0240e:    	movq   QWORD PTR [rsp+0x20],xmm6
  02414:    	movq   QWORD PTR [rsp+0x28],xmm7
  0241a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02421: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02428: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0242f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02436: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0243d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  02444: f6 	movabs rax,0x55f67a7285d0
  0244e:    	call   rax
  02450:    	mov    r15d,eax
  02453: f6 	movabs r13,0x55f67b858940
  0245d:    	cmp    r15d,DWORD PTR [r13-0x8]
  02461:    	jne    0x3bfe6
  02467:    	mov    eax,DWORD PTR [rip+0xffffffffffffa539]        # 0xffffc9a6
  0246d:    	cmp    DWORD PTR [r13-0x4],eax
  02471:    	jne    0x3bfe6
  02477: 00 	mov    QWORD PTR [rsp-0x28],0x0
  02480:    	mov    rsi,QWORD PTR [rbx]
  02483:    	mov    QWORD PTR [rsp-0x18],rsi
  02488:    	lea    rsi,[rsp-0x18]
  0248d:    	mov    QWORD PTR [rbx],rsi
  02490: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02497:    	mov    QWORD PTR [rsp-0x40],rax
  0249c: 00 	mov    rdi,0x1
  024a3:    	lea    r8,[rsp-0x48]
  024a8: ff 	mov    rax,QWORD PTR [r14-0xa8]
  024af:    	mov    QWORD PTR [r8],rax
  024b2:    	sub    r8,0x8
  024b6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  024bf:    	lea    r14,[rsp-0x10]
  024c4:    	mov    QWORD PTR [rsp-0x20],r14
  024c9: 00 	movabs rax,0x0
  024d3:    	mov    QWORD PTR [rsp-0x30],rax
  024d8: 00 	movabs r13,0x0
  024e2:    	call   0xffff95f1
  024e7:    	lea    r14,[rbp-0x8]
  024eb:    	mov    QWORD PTR [rbx],r14
  024ee:    	mov    r14,QWORD PTR [rbp-0x10]
  024f2:    	movq   xmm2,QWORD PTR [rsp]
  024f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  024fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02503:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02509:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0250f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02515: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0251c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02523: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0252a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02531: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02538:    	add    rsp,0x60
  0253c:    	test   rax,rax
  0253f:    	je     0x3c05c
:00144 
:00146 %14 = %15
  02545: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0254c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 ret %14
  02553: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0255a:    	leave  
  0255b:    	ret    
:00148 %14 = nil
  0255c: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00149 ret %14
  02567: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0256e:    	leave  
  0256f:    	ret    
==> start whole compile: vnormalize FuncId(68) self_class:Vec start:[00000] bytecode:0x55f67b84eec0
<== finished compile. elapsed:50.8µs
offset:Pos(37012) code: 1797 bytes  data: 95 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x0
  0000e: jne    0x399e6
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    QWORD PTR [r14-0x60],rax
  00033: mov    rdi,QWORD PTR [rbp-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x399f5
  00044: cmp    DWORD PTR [rdi+0x4],0x28
  00048: jne    0x399f5
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:7
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x30]
  00052: cmp    DWORD PTR [rip+0xffffffffffffa2c8],0x26        # 0xffffa321
  00059: jne    0x39a04
  0005f: mov    QWORD PTR [rsp-0x28],0x0
  00068: mov    rax,QWORD PTR [r14-0x30]
  0006c: mov    QWORD PTR [rsp-0x40],rax
  00071: mov    rdi,0x0
  00078: mov    QWORD PTR [rsp-0x38],0x0
  00081: movabs rax,0x600000043
  0008b: mov    QWORD PTR [rsp-0x30],rax
  00090: movabs r13,0x55f67b846260
  0009a: mov    rsi,QWORD PTR [rbx]
  0009d: mov    QWORD PTR [rsp-0x18],rsi
  000a2: lea    rsi,[rsp-0x18]
  000a7: mov    QWORD PTR [rbx],rsi
  000aa: lea    r14,[rsp-0x10]
  000af: mov    QWORD PTR [rsp-0x20],r14
  000b4: call   0xffffac80
  000b9: lea    r14,[rbp-0x8]
  000bd: mov    QWORD PTR [rbx],r14
  000c0: mov    r14,QWORD PTR [rbp-0x10]
  000c4: movabs r13,0x55f67b84eef0
  000ce: test   rax,rax
  000d1: je     0xffff6f9f
  000d7: mov    QWORD PTR [r14-0x48],rax
:00002 
:00004 %1 = %3
  000db: mov    rax,QWORD PTR [r14-0x48]
  000df: mov    QWORD PTR [r14-0x38],rax
:00005 %3 = const[Vec]                      [Vec]
  000e3: mov    rax,QWORD PTR [rip+0xffffffffffffa242]        # 0xffffa32c
  000ea: cmp    rax,QWORD PTR [rip+0x62b]        # 0x71c
  000f1: jne    0x39a13
  000f7: mov    rax,QWORD PTR [rip+0x60e]        # 0x70c
  000fe: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = @x: Vec[IvarId(0)]
  00102: mov    rdi,QWORD PTR [rbp-0x30]
  00106: mov    rax,QWORD PTR [rdi+0x10]
  0010a: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = @y: Vec[IvarId(1)]
  0010e: mov    rdi,QWORD PTR [rbp-0x30]
  00112: mov    rax,QWORD PTR [rdi+0x18]
  00116: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = @z: Vec[IvarId(2)]
  0011a: mov    rdi,QWORD PTR [rbp-0x30]
  0011e: mov    rax,QWORD PTR [rdi+0x20]
  00122: mov    QWORD PTR [r14-0x60],rax
:00009 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00126: mov    rdi,QWORD PTR [r14-0x48]
  0012a: test   rdi,0x7
  00131: jne    0x39a59
  00137: cmp    DWORD PTR [rdi+0x4],0x29
  0013b: jne    0x39a59
  00141: cmp    DWORD PTR [rip+0xffffffffffffa1d9],0x26        # 0xffffa321
  00148: jne    0x39a59
  0014e: mov    r9,0x0
  00155: mov    rdx,rdi
  00158: mov    QWORD PTR [rsp-0x40],rcx
  0015d: mov    QWORD PTR [rsp-0x28],0x0
  00166: lea    rcx,[r14-0x50]
  0016a: mov    r8,0x3
  00171: mov    rsi,QWORD PTR [rbx]
  00174: mov    QWORD PTR [rsp-0x18],rsi
  00179: lea    rsi,[rsp-0x18]
  0017e: mov    QWORD PTR [rbx],rsi
  00181: lea    r14,[rsp-0x10]
  00186: mov    QWORD PTR [rsp-0x20],r14
  0018b: call   0x39a68
  00190: lea    r14,[rbp-0x8]
  00194: mov    QWORD PTR [rbx],r14
  00197: mov    r14,QWORD PTR [rbp-0x10]
  0019b: movabs r13,0x55f67b84ef70
  001a5: test   rax,rax
  001a8: je     0xffff6f9f
  001ae: mov    QWORD PTR [r14-0x40],rax
:00010 
:00012 %3 = literal[1e-17]
  001b2: movq   xmm2,QWORD PTR [rip+0x572]        # 0x72c
  001ba: movabs rax,0xe33877aa3236a4ba
  001c4: mov    QWORD PTR [r14-0x48],rax
:00013 _%3 = %1 > %3                        [Float][Float]
:00014 condnotbr _%3 =>:00037
  001c8: mov    rdi,QWORD PTR [r14-0x38]
  001cc: test   rdi,0x1
  001d3: jne    0x39a9a
  001d9: test   rdi,0x2
  001e0: je     0x21c
  001e6: xorps  xmm3,xmm3
  001e9: movabs rax,0x8000000000000002
  001f3: cmp    rdi,rax
  001f6: je     0x22e
  001fc: mov    rax,rdi
  001ff: sar    rax,0x3f
  00203: add    rax,0x2
  00207: and    rdi,0xfffffffffffffffc
  0020b: or     rdi,rax
  0020e: rol    rdi,0x3d
  00212: movq   xmm3,rdi
  00217: jmp    0x22e
  0021c: call   0xffff6ff8
  00221: test   rax,rax
  00224: je     0x39a9a
  0022a: movq   xmm3,xmm0
  0022e: ucomisd xmm3,xmm2
  00232: jbe    0x39ccb
:00015 %3 = %2.call x()                     [Vec]
  00238: mov    rdi,QWORD PTR [r14-0x40]
  0023c: test   rdi,0x7
  00243: jne    0x39aa9
  00249: cmp    DWORD PTR [rdi+0x4],0x28
  0024d: jne    0x39aa9
  00253: cmp    DWORD PTR [rip+0xffffffffffffa0c7],0x26        # 0xffffa321
  0025a: jne    0x39aa9
  00260: mov    esi,DWORD PTR [rip+0x4d2]        # 0x738
  00266: cmp    esi,0xffffffff
  00269: je     0x39ab8
  0026f: cmp    WORD PTR [rdi+0x2],0x3
  00274: jne    0x28d
  0027a: cmp    esi,0x6
  0027d: jge    0x28d
  00283: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00288: jmp    0x2ab
  0028d: sub    rsp,0x10
  00291: movq   QWORD PTR [rsp],xmm3
  00296: movabs rax,0x55f67a69e160
  002a0: call   rax
  002a2: movq   xmm3,QWORD PTR [rsp]
  002a7: add    rsp,0x10
  002ab: mov    QWORD PTR [r14-0x48],rax
:00016 
:00018 %3 = %3 / %1                         [Float][Float]
  002af: mov    rdi,QWORD PTR [r14-0x48]
  002b3: test   rdi,0x1
  002ba: jne    0x39af3
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm2,xmm2
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm2,rdi
  002fe: jmp    0x315
  00303: call   0xffff6ff8
  00308: test   rax,rax
  0030b: je     0x39af3
  00311: movq   xmm2,xmm0
  00315: movq   rax,xmm3
  0031a: test   rax,rax
  0031d: je     0xffff6fc4
  00323: divsd  xmm2,xmm3
:00019 _ = %2.call x=(%3; 1)                [Vec]
  00327: movq   xmm0,xmm2
  0032b: call   0xffff711c
  00330: mov    QWORD PTR [r14-0x48],rax
  00334: mov    rdi,QWORD PTR [r14-0x40]
  00338: test   rdi,0x7
  0033f: jne    0x39b02
  00345: cmp    DWORD PTR [rdi+0x4],0x28
  00349: jne    0x39b02
  0034f: cmp    DWORD PTR [rip+0xffffffffffff9fcb],0x26        # 0xffffa321
  00356: jne    0x39b02
  0035c: mov    esi,DWORD PTR [rip+0x3de]        # 0x740
  00362: cmp    esi,0xffffffff
  00365: je     0x39b11
  0036b: cmp    WORD PTR [rdi+0x2],0x3
  00370: jne    0x38d
  00376: cmp    esi,0x6
  00379: jge    0x38d
  0037f: mov    rax,QWORD PTR [r14-0x48]
  00383: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00388: jmp    0x3ce
  0038d: sub    rsp,0x10
  00391: movq   QWORD PTR [rsp],xmm2
  00396: movq   QWORD PTR [rsp+0x8],xmm3
  0039c: mov    rdx,QWORD PTR [r14-0x48]
  003a0: movabs rax,0x55f67a69e3e0
  003aa: call   rax
  003ac: movq   xmm2,QWORD PTR [rsp]
  003b1: movq   xmm3,QWORD PTR [rsp+0x8]
  003b7: add    rsp,0x10
  003bb: movabs r13,0x55f67b84f010
  003c5: test   rax,rax
  003c8: je     0xffff6f9f
:00020 
:00022 %3 = %2.call y()                     [Vec]
  003ce: mov    rdi,QWORD PTR [r14-0x40]
  003d2: test   rdi,0x7
  003d9: jne    0x39b5f
  003df: cmp    DWORD PTR [rdi+0x4],0x28
  003e3: jne    0x39b5f
  003e9: cmp    DWORD PTR [rip+0xffffffffffff9f31],0x26        # 0xffffa321
  003f0: jne    0x39b5f
  003f6: mov    esi,DWORD PTR [rip+0x34c]        # 0x748
  003fc: cmp    esi,0xffffffff
  003ff: je     0x39b6e
  00405: cmp    WORD PTR [rdi+0x2],0x3
  0040a: jne    0x423
  00410: cmp    esi,0x6
  00413: jge    0x423
  00419: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0041e: jmp    0x441
  00423: sub    rsp,0x10
  00427: movq   QWORD PTR [rsp],xmm3
  0042c: movabs rax,0x55f67a69e160
  00436: call   rax
  00438: movq   xmm3,QWORD PTR [rsp]
  0043d: add    rsp,0x10
  00441: mov    QWORD PTR [r14-0x48],rax
:00023 
:00025 %3 = %3 / %1                         [Float][Float]
  00445: mov    rdi,QWORD PTR [r14-0x48]
  00449: test   rdi,0x1
  00450: jne    0x39ba9
  00456: test   rdi,0x2
  0045d: je     0x499
  00463: xorps  xmm2,xmm2
  00466: movabs rax,0x8000000000000002
  00470: cmp    rdi,rax
  00473: je     0x4ab
  00479: mov    rax,rdi
  0047c: sar    rax,0x3f
  00480: add    rax,0x2
  00484: and    rdi,0xfffffffffffffffc
  00488: or     rdi,rax
  0048b: rol    rdi,0x3d
  0048f: movq   xmm2,rdi
  00494: jmp    0x4ab
  00499: call   0xffff6ff8
  0049e: test   rax,rax
  004a1: je     0x39ba9
  004a7: movq   xmm2,xmm0
  004ab: movq   rax,xmm3
  004b0: test   rax,rax
  004b3: je     0xffff6fc4
  004b9: divsd  xmm2,xmm3
:00026 _ = %2.call y=(%3; 1)                [Vec]
  004bd: movq   xmm0,xmm2
  004c1: call   0xffff711c
  004c6: mov    QWORD PTR [r14-0x48],rax
  004ca: mov    rdi,QWORD PTR [r14-0x40]
  004ce: test   rdi,0x7
  004d5: jne    0x39bb8
  004db: cmp    DWORD PTR [rdi+0x4],0x28
  004df: jne    0x39bb8
  004e5: cmp    DWORD PTR [rip+0xffffffffffff9e35],0x26        # 0xffffa321
  004ec: jne    0x39bb8
  004f2: mov    esi,DWORD PTR [rip+0x258]        # 0x750
  004f8: cmp    esi,0xffffffff
  004fb: je     0x39bc7
  00501: cmp    WORD PTR [rdi+0x2],0x3
  00506: jne    0x523
  0050c: cmp    esi,0x6
  0050f: jge    0x523
  00515: mov    rax,QWORD PTR [r14-0x48]
  00519: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0051e: jmp    0x564
  00523: sub    rsp,0x10
  00527: movq   QWORD PTR [rsp],xmm2
  0052c: movq   QWORD PTR [rsp+0x8],xmm3
  00532: mov    rdx,QWORD PTR [r14-0x48]
  00536: movabs rax,0x55f67a69e3e0
  00540: call   rax
  00542: movq   xmm2,QWORD PTR [rsp]
  00547: movq   xmm3,QWORD PTR [rsp+0x8]
  0054d: add    rsp,0x10
  00551: movabs r13,0x55f67b84f080
  0055b: test   rax,rax
  0055e: je     0xffff6f9f
:00027 
:00029 %3 = %2.call z()                     [Vec]
  00564: mov    rdi,QWORD PTR [r14-0x40]
  00568: test   rdi,0x7
  0056f: jne    0x39c15
  00575: cmp    DWORD PTR [rdi+0x4],0x28
  00579: jne    0x39c15
  0057f: cmp    DWORD PTR [rip+0xffffffffffff9d9b],0x26        # 0xffffa321
  00586: jne    0x39c15
  0058c: mov    esi,DWORD PTR [rip+0x1c6]        # 0x758
  00592: cmp    esi,0xffffffff
  00595: je     0x39c24
  0059b: cmp    WORD PTR [rdi+0x2],0x3
  005a0: jne    0x5b9
  005a6: cmp    esi,0x6
  005a9: jge    0x5b9
  005af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005b4: jmp    0x5d7
  005b9: sub    rsp,0x10
  005bd: movq   QWORD PTR [rsp],xmm3
  005c2: movabs rax,0x55f67a69e160
  005cc: call   rax
  005ce: movq   xmm3,QWORD PTR [rsp]
  005d3: add    rsp,0x10
  005d7: mov    QWORD PTR [r14-0x48],rax
:00030 
:00032 %3 = %3 / %1                         [Float][Float]
  005db: mov    rdi,QWORD PTR [r14-0x48]
  005df: test   rdi,0x1
  005e6: jne    0x39c5f
  005ec: test   rdi,0x2
  005f3: je     0x62f
  005f9: xorps  xmm2,xmm2
  005fc: movabs rax,0x8000000000000002
  00606: cmp    rdi,rax
  00609: je     0x641
  0060f: mov    rax,rdi
  00612: sar    rax,0x3f
  00616: add    rax,0x2
  0061a: and    rdi,0xfffffffffffffffc
  0061e: or     rdi,rax
  00621: rol    rdi,0x3d
  00625: movq   xmm2,rdi
  0062a: jmp    0x641
  0062f: call   0xffff6ff8
  00634: test   rax,rax
  00637: je     0x39c5f
  0063d: movq   xmm2,xmm0
  00641: movq   rax,xmm3
  00646: test   rax,rax
  00649: je     0xffff6fc4
  0064f: divsd  xmm2,xmm3
:00033 _ = %2.call z=(%3; 1)                [Vec]
  00653: movq   xmm0,xmm2
  00657: call   0xffff711c
  0065c: mov    QWORD PTR [r14-0x48],rax
  00660: mov    rdi,QWORD PTR [r14-0x40]
  00664: test   rdi,0x7
  0066b: jne    0x39c6e
  00671: cmp    DWORD PTR [rdi+0x4],0x28
  00675: jne    0x39c6e
  0067b: cmp    DWORD PTR [rip+0xffffffffffff9c9f],0x26        # 0xffffa321
  00682: jne    0x39c6e
  00688: mov    esi,DWORD PTR [rip+0xd2]        # 0x760
  0068e: cmp    esi,0xffffffff
  00691: je     0x39c7d
  00697: cmp    WORD PTR [rdi+0x2],0x3
  0069c: jne    0x6b9
  006a2: cmp    esi,0x6
  006a5: jge    0x6b9
  006ab: mov    rax,QWORD PTR [r14-0x48]
  006af: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006b4: jmp    0x6fa
  006b9: sub    rsp,0x10
  006bd: movq   QWORD PTR [rsp],xmm2
  006c2: movq   QWORD PTR [rsp+0x8],xmm3
  006c8: mov    rdx,QWORD PTR [r14-0x48]
  006cc: movabs rax,0x55f67a69e3e0
  006d6: call   rax
  006d8: movq   xmm2,QWORD PTR [rsp]
  006dd: movq   xmm3,QWORD PTR [rsp+0x8]
  006e3: add    rsp,0x10
  006e7: movabs r13,0x55f67b84f0f0
  006f1: test   rax,rax
  006f4: je     0xffff6f9f
:00034 
:00036 br =>:00037
  006fa: jmp    0x39ce4
:00037 ret %2
  006ff: mov    rax,QWORD PTR [r14-0x40]
  00703: leave  
  00704: ret    
==> start whole compile: vlength FuncId(67) self_class:Vec start:[00000] bytecode:0x55f67b846260
<== finished compile. elapsed:21.5µs
offset:Pos(38904) code: 872 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x39599
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x395a8
  00040: cmp    DWORD PTR [rdi+0x4],0x28
  00044: jne    0x395a8
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %2 = const[Math]                     [Math]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffff9b77]        # 0xffff9bc8
  00051: cmp    rax,QWORD PTR [rip+0x320]        # 0x378
  00058: jne    0x395b7
  0005e: mov    rax,QWORD PTR [rip+0x303]        # 0x368
  00065: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [rbp-0x30]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = @x: Vec[IvarId(0)]
  00075: mov    rdi,QWORD PTR [rbp-0x30]
  00079: mov    rax,QWORD PTR [rdi+0x10]
  0007d: mov    QWORD PTR [r14-0x50],rax
:00004 %3 = %3 * %4                         [Float][Float]
  00081: mov    rdi,QWORD PTR [r14-0x48]
  00085: test   rdi,0x1
  0008c: jne    0x395fd
  00092: test   rdi,0x2
  00099: je     0xd5
  0009f: xorps  xmm2,xmm2
  000a2: movabs rax,0x8000000000000002
  000ac: cmp    rdi,rax
  000af: je     0xe7
  000b5: mov    rax,rdi
  000b8: sar    rax,0x3f
  000bc: add    rax,0x2
  000c0: and    rdi,0xfffffffffffffffc
  000c4: or     rdi,rax
  000c7: rol    rdi,0x3d
  000cb: movq   xmm2,rdi
  000d0: jmp    0xe7
  000d5: call   0xffff6894
  000da: test   rax,rax
  000dd: je     0x395fd
  000e3: movq   xmm2,xmm0
  000e7: mov    rdi,QWORD PTR [r14-0x50]
  000eb: test   rdi,0x1
  000f2: jne    0x3960c
  000f8: test   rdi,0x2
  000ff: je     0x13b
  00105: xorps  xmm3,xmm3
  00108: movabs rax,0x8000000000000002
  00112: cmp    rdi,rax
  00115: je     0x14d
  0011b: mov    rax,rdi
  0011e: sar    rax,0x3f
  00122: add    rax,0x2
  00126: and    rdi,0xfffffffffffffffc
  0012a: or     rdi,rax
  0012d: rol    rdi,0x3d
  00131: movq   xmm3,rdi
  00136: jmp    0x14d
  0013b: call   0xffff6894
  00140: test   rax,rax
  00143: je     0x3960c
  00149: movq   xmm3,xmm0
  0014d: mulsd  xmm2,xmm3
:00005 %4 = @y: Vec[IvarId(1)]
  00151: mov    rdi,QWORD PTR [rbp-0x30]
  00155: mov    rax,QWORD PTR [rdi+0x18]
  00159: mov    QWORD PTR [r14-0x50],rax
:00006 %5 = @y: Vec[IvarId(1)]
  0015d: mov    rdi,QWORD PTR [rbp-0x30]
  00161: mov    rax,QWORD PTR [rdi+0x18]
  00165: mov    QWORD PTR [r14-0x58],rax
:00007 %4 = %4 * %5                         [Float][Float]
  00169: mov    rdi,QWORD PTR [r14-0x50]
  0016d: test   rdi,0x1
  00174: jne    0x3961b
  0017a: test   rdi,0x2
  00181: je     0x1bd
  00187: xorps  xmm3,xmm3
  0018a: movabs rax,0x8000000000000002
  00194: cmp    rdi,rax
  00197: je     0x1cf
  0019d: mov    rax,rdi
  001a0: sar    rax,0x3f
  001a4: add    rax,0x2
  001a8: and    rdi,0xfffffffffffffffc
  001ac: or     rdi,rax
  001af: rol    rdi,0x3d
  001b3: movq   xmm3,rdi
  001b8: jmp    0x1cf
  001bd: call   0xffff6894
  001c2: test   rax,rax
  001c5: je     0x3961b
  001cb: movq   xmm3,xmm0
  001cf: mov    rdi,QWORD PTR [r14-0x58]
  001d3: test   rdi,0x1
  001da: jne    0x39637
  001e0: test   rdi,0x2
  001e7: je     0x223
  001ed: xorps  xmm4,xmm4
  001f0: movabs rax,0x8000000000000002
  001fa: cmp    rdi,rax
  001fd: je     0x235
  00203: mov    rax,rdi
  00206: sar    rax,0x3f
  0020a: add    rax,0x2
  0020e: and    rdi,0xfffffffffffffffc
  00212: or     rdi,rax
  00215: rol    rdi,0x3d
  00219: movq   xmm4,rdi
  0021e: jmp    0x235
  00223: call   0xffff6894
  00228: test   rax,rax
  0022b: je     0x39637
  00231: movq   xmm4,xmm0
  00235: mulsd  xmm3,xmm4
:00008 %3 = %3 + %4                         [Float][Float]
  00239: addsd  xmm2,xmm3
:00009 %4 = @z: Vec[IvarId(2)]
  0023d: mov    rdi,QWORD PTR [rbp-0x30]
  00241: mov    rax,QWORD PTR [rdi+0x20]
  00245: mov    QWORD PTR [r14-0x50],rax
:00010 %5 = @z: Vec[IvarId(2)]
  00249: mov    rdi,QWORD PTR [rbp-0x30]
  0024d: mov    rax,QWORD PTR [rdi+0x20]
  00251: mov    QWORD PTR [r14-0x58],rax
:00011 %4 = %4 * %5                         [Float][Float]
  00255: mov    rdi,QWORD PTR [r14-0x50]
  00259: test   rdi,0x1
  00260: jne    0x39653
  00266: test   rdi,0x2
  0026d: je     0x2a9
  00273: xorps  xmm3,xmm3
  00276: movabs rax,0x8000000000000002
  00280: cmp    rdi,rax
  00283: je     0x2bb
  00289: mov    rax,rdi
  0028c: sar    rax,0x3f
  00290: add    rax,0x2
  00294: and    rdi,0xfffffffffffffffc
  00298: or     rdi,rax
  0029b: rol    rdi,0x3d
  0029f: movq   xmm3,rdi
  002a4: jmp    0x2bb
  002a9: call   0xffff6894
  002ae: test   rax,rax
  002b1: je     0x39653
  002b7: movq   xmm3,xmm0
  002bb: mov    rdi,QWORD PTR [r14-0x58]
  002bf: test   rdi,0x1
  002c6: jne    0x3966f
  002cc: test   rdi,0x2
  002d3: je     0x30f
  002d9: xorps  xmm4,xmm4
  002dc: movabs rax,0x8000000000000002
  002e6: cmp    rdi,rax
  002e9: je     0x321
  002ef: mov    rax,rdi
  002f2: sar    rax,0x3f
  002f6: add    rax,0x2
  002fa: and    rdi,0xfffffffffffffffc
  002fe: or     rdi,rax
  00301: rol    rdi,0x3d
  00305: movq   xmm4,rdi
  0030a: jmp    0x321
  0030f: call   0xffff6894
  00314: test   rax,rax
  00317: je     0x3966f
  0031d: movq   xmm4,xmm0
  00321: mulsd  xmm3,xmm4
:00012 %3 = %3 + %4                         [Float][Float]
  00325: addsd  xmm2,xmm3
:00013 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
  00329: mov    rdi,QWORD PTR [r14-0x40]
  0032d: test   rdi,0x7
  00334: jne    0x3968b
  0033a: cmp    DWORD PTR [rdi+0x4],0x21
  0033e: jne    0x3968b
  00344: cmp    DWORD PTR [rip+0xffffffffffff9872],0x26        # 0xffff9bbd
  0034b: jne    0x3968b
  00351: sqrtsd xmm5,xmm2
:00014 
:00016 ret %1
  00355: movq   xmm0,xmm5
  00359: call   0xffff69b8
  0035e: mov    QWORD PTR [r14-0x38],rax
  00362: mov    rax,QWORD PTR [r14-0x38]
  00366: leave  
  00367: ret    
==> start whole compile: initialize FuncId(73) self_class:Ray start:[00000] bytecode:0x55f67b86b0f0
<== finished compile. elapsed:9.5µs
offset:Pos(39800) code: 93 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: jne    0x39334
  00014: mov    QWORD PTR [r14-0x48],0x4
  0001c: mov    rdi,QWORD PTR [rbp-0x30]
  00020: test   rdi,0x7
  00027: jne    0x39343
  0002d: cmp    DWORD PTR [rdi+0x4],0x2e
  00031: jne    0x39343
:00000 init_method reg:4 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [rbp-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [rbp-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  0004f: mov    rax,QWORD PTR [r14-0x40]
  00053: mov    QWORD PTR [r14-0x48],rax
:00004 ret %3
  00057: mov    rax,QWORD PTR [r14-0x48]
  0005b: leave  
  0005c: ret    
==> start whole compile: initialize FuncId(74) self_class:Isect start:[00000] bytecode:0x55f67b86f100
<== finished compile. elapsed:36.8µs
offset:Pos(39893) code: 719 bytes  data: 180 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x392f5
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x39304
  00040: cmp    DWORD PTR [rdi+0x4],0x30
  00044: jne    0x39304
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  0004a: movq   xmm2,QWORD PTR [rip+0x289]        # 0x2db
  00052: movabs rax,0xb18968000000002
  0005c: mov    QWORD PTR [r14-0x38],rax
:00002 @t: Isect[IvarId(0)] = %1
  00060: mov    rdi,QWORD PTR [rbp-0x30]
  00064: mov    rax,QWORD PTR [r14-0x38]
  00068: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  0006c: mov    rax,0x14
  00073: mov    QWORD PTR [r14-0x38],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00077: mov    rdi,QWORD PTR [rbp-0x30]
  0007b: mov    rax,QWORD PTR [r14-0x38]
  0007f: mov    QWORD PTR [rdi+0x18],rax
:00005 %2 = const[Vec]                      [Vec]
  00083: mov    rax,QWORD PTR [rip+0xffffffffffff9761]        # 0xffff97eb
  0008a: cmp    rax,QWORD PTR [rip+0x26a]        # 0x2fb
  00091: jne    0x39313
  00097: mov    rax,QWORD PTR [rip+0x24d]        # 0x2eb
  0009e: mov    QWORD PTR [r14-0x40],rax
:00006 %3 = literal[0.0]
  000a2: movq   xmm2,QWORD PTR [rip+0x261]        # 0x30b
  000aa: movabs rax,0x8000000000000002
  000b4: mov    QWORD PTR [r14-0x48],rax
:00007 %4 = literal[0.0]
  000b8: movq   xmm3,QWORD PTR [rip+0x25b]        # 0x31b
  000c0: movabs rax,0x8000000000000002
  000ca: mov    QWORD PTR [r14-0x50],rax
:00008 %5 = literal[0.0]
  000ce: movq   xmm4,QWORD PTR [rip+0x255]        # 0x32b
  000d6: movabs rax,0x8000000000000002
  000e0: mov    QWORD PTR [r14-0x58],rax
:00009 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  000e4: mov    rdi,QWORD PTR [r14-0x40]
  000e8: test   rdi,0x7
  000ef: jne    0x39359
  000f5: cmp    DWORD PTR [rdi+0x4],0x29
  000f9: jne    0x39359
  000ff: cmp    DWORD PTR [rip+0xffffffffffff96da],0x26        # 0xffff97e0
  00106: jne    0x39359
  0010c: mov    r9,0x0
  00113: sub    rsp,0x20
  00117: movq   QWORD PTR [rsp],xmm2
  0011c: movq   QWORD PTR [rsp+0x8],xmm3
  00122: movq   QWORD PTR [rsp+0x10],xmm4
  00128: mov    rdx,rdi
  0012b: mov    QWORD PTR [rsp-0x40],rcx
  00130: mov    QWORD PTR [rsp-0x28],0x0
  00139: lea    rcx,[r14-0x48]
  0013d: mov    r8,0x3
  00144: mov    rsi,QWORD PTR [rbx]
  00147: mov    QWORD PTR [rsp-0x18],rsi
  0014c: lea    rsi,[rsp-0x18]
  00151: mov    QWORD PTR [rbx],rsi
  00154: lea    r14,[rsp-0x10]
  00159: mov    QWORD PTR [rsp-0x20],r14
  0015e: call   0x39368
  00163: lea    r14,[rbp-0x8]
  00167: mov    QWORD PTR [rbx],r14
  0016a: mov    r14,QWORD PTR [rbp-0x10]
  0016e: movq   xmm2,QWORD PTR [rsp]
  00173: movq   xmm3,QWORD PTR [rsp+0x8]
  00179: movq   xmm4,QWORD PTR [rsp+0x10]
  0017f: add    rsp,0x20
  00183: movabs r13,0x55f67b86f1b0
  0018d: test   rax,rax
  00190: je     0xffff645e
  00196: mov    QWORD PTR [r14-0x38],rax
:00010 
:00012 @pl: Isect[IvarId(2)] = %1
  0019a: mov    rdi,QWORD PTR [rbp-0x30]
  0019e: mov    rax,QWORD PTR [r14-0x38]
  001a2: mov    QWORD PTR [rdi+0x20],rax
:00013 %2 = const[Vec]                      [Vec]
  001a6: mov    rax,QWORD PTR [rip+0xffffffffffff963e]        # 0xffff97eb
  001ad: cmp    rax,QWORD PTR [rip+0x197]        # 0x34b
  001b4: jne    0x3939a
  001ba: mov    rax,QWORD PTR [rip+0x17a]        # 0x33b
  001c1: mov    QWORD PTR [r14-0x40],rax
:00014 %3 = literal[0.0]
  001c5: movq   xmm2,QWORD PTR [rip+0x18e]        # 0x35b
  001cd: movabs rax,0x8000000000000002
  001d7: mov    QWORD PTR [r14-0x48],rax
:00015 %4 = literal[0.0]
  001db: movq   xmm3,QWORD PTR [rip+0x188]        # 0x36b
  001e3: movabs rax,0x8000000000000002
  001ed: mov    QWORD PTR [r14-0x50],rax
:00016 %5 = literal[0.0]
  001f1: movq   xmm4,QWORD PTR [rip+0x182]        # 0x37b
  001f9: movabs rax,0x8000000000000002
  00203: mov    QWORD PTR [r14-0x58],rax
:00017 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  00207: mov    rdi,QWORD PTR [r14-0x40]
  0020b: test   rdi,0x7
  00212: jne    0x3940a
  00218: cmp    DWORD PTR [rdi+0x4],0x29
  0021c: jne    0x3940a
  00222: cmp    DWORD PTR [rip+0xffffffffffff95b7],0x26        # 0xffff97e0
  00229: jne    0x3940a
  0022f: mov    r9,0x0
  00236: sub    rsp,0x20
  0023a: movq   QWORD PTR [rsp],xmm2
  0023f: movq   QWORD PTR [rsp+0x8],xmm3
  00245: movq   QWORD PTR [rsp+0x10],xmm4
  0024b: mov    rdx,rdi
  0024e: mov    QWORD PTR [rsp-0x40],rcx
  00253: mov    QWORD PTR [rsp-0x28],0x0
  0025c: lea    rcx,[r14-0x48]
  00260: mov    r8,0x3
  00267: mov    rsi,QWORD PTR [rbx]
  0026a: mov    QWORD PTR [rsp-0x18],rsi
  0026f: lea    rsi,[rsp-0x18]
  00274: mov    QWORD PTR [rbx],rsi
  00277: lea    r14,[rsp-0x10]
  0027c: mov    QWORD PTR [rsp-0x20],r14
  00281: call   0x39419
  00286: lea    r14,[rbp-0x8]
  0028a: mov    QWORD PTR [rbx],r14
  0028d: mov    r14,QWORD PTR [rbp-0x10]
  00291: movq   xmm2,QWORD PTR [rsp]
  00296: movq   xmm3,QWORD PTR [rsp+0x8]
  0029c: movq   xmm4,QWORD PTR [rsp+0x10]
  002a2: add    rsp,0x20
  002a6: movabs r13,0x55f67b86f230
  002b0: test   rax,rax
  002b3: je     0xffff645e
  002b9: mov    QWORD PTR [r14-0x38],rax
:00018 
:00020 @n: Isect[IvarId(3)] = %1
  002bd: mov    rdi,QWORD PTR [rbp-0x30]
  002c1: mov    rax,QWORD PTR [r14-0x38]
  002c5: mov    QWORD PTR [rdi+0x28],rax
:00021 ret %1
  002c9: mov    rax,QWORD PTR [r14-0x38]
  002cd: leave  
  002ce: ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55f67b870800
load_ivar: no profile
<== finished compile. elapsed:134.6µs
offset:Pos(40792) code: 6768 bytes  data: 112 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x390c8
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x390d7
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x390d7
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x390e6
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x390e6
  000a1: 26 	cmp    DWORD PTR [rip+0xffffffffffff93b5],0x26        # 0xffff945d
  000a8:    	jne    0x390e6
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	lea    r8,[rsp-0x48]
  000cc:    	mov    rax,QWORD PTR [r14-0x70]
  000d0:    	mov    QWORD PTR [r8],rax
  000d3:    	sub    r8,0x8
  000d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000e0: 05 	movabs rax,0x1000500000042
  000ea:    	mov    QWORD PTR [rsp-0x30],rax
  000ef: f6 	movabs r13,0x55f67b88de50
  000f9:    	mov    rsi,QWORD PTR [rbx]
  000fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00101:    	lea    rsi,[rsp-0x18]
  00106:    	mov    QWORD PTR [rbx],rsi
  00109:    	lea    r14,[rsp-0x10]
  0010e:    	mov    QWORD PTR [rsp-0x20],r14
  00113:    	call   0xffffa190
  00118:    	lea    r14,[rbp-0x8]
  0011c:    	mov    QWORD PTR [rbx],r14
  0011f:    	mov    r14,QWORD PTR [rbp-0x10]
  00123: f6 	movabs r13,0x55f67b870850
  0012d:    	test   rax,rax
  00130:    	je     0xffff60db
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x390f5
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xffff6134
  00193:    	test   rax,rax
  00196:    	je     0x390f5
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x18d1]        # 0x1a78
:00007 %7 = %1.call dir()                   [Ray]
  001a7:    	mov    rdi,QWORD PTR [r14-0x38]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x39104
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bc:    	jne    0x39104
  001c2: 26 	cmp    DWORD PTR [rip+0xffffffffffff9294],0x26        # 0xffff945d
  001c9:    	jne    0x39104
  001cf:    	mov    esi,DWORD PTR [rip+0x18af]        # 0x1a84
  001d5:    	cmp    esi,0xffffffff
  001d8:    	je     0x39120
  001de:    	cmp    WORD PTR [rdi+0x2],0x3
  001e3:    	jne    0x1fc
  001e9:    	cmp    esi,0x6
  001ec:    	jge    0x1fc
  001f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f7:    	jmp    0x21a
  001fc:    	sub    rsp,0x10
  00200:    	movq   QWORD PTR [rsp],xmm2
  00205: f6 	movabs rax,0x55f67a69e160
  0020f:    	call   rax
  00211:    	movq   xmm2,QWORD PTR [rsp]
  00216:    	add    rsp,0x10
  0021a:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  0021e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  0022a:    	mov    rdi,QWORD PTR [r14-0x68]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x3915b
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0023f:    	jne    0x3915b
  00245: 26 	cmp    DWORD PTR [rip+0xffffffffffff9211],0x26        # 0xffff945d
  0024c:    	jne    0x3915b
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00264:    	mov    rax,QWORD PTR [r14-0x68]
  00268:    	mov    QWORD PTR [rsp-0x40],rax
  0026d: 00 	mov    rdi,0x1
  00274:    	lea    r8,[rsp-0x48]
  00279:    	mov    rax,QWORD PTR [r14-0x70]
  0027d:    	mov    QWORD PTR [r8],rax
  00280:    	sub    r8,0x8
  00284: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0028d: 05 	movabs rax,0x1000500000042
  00297:    	mov    QWORD PTR [rsp-0x30],rax
  0029c: f6 	movabs r13,0x55f67b88de50
  002a6:    	mov    rsi,QWORD PTR [rbx]
  002a9:    	mov    QWORD PTR [rsp-0x18],rsi
  002ae:    	lea    rsi,[rsp-0x18]
  002b3:    	mov    QWORD PTR [rbx],rsi
  002b6:    	lea    r14,[rsp-0x10]
  002bb:    	mov    QWORD PTR [rsp-0x20],r14
  002c0:    	call   0xffffa190
  002c5:    	lea    r14,[rbp-0x8]
  002c9:    	mov    QWORD PTR [rbx],r14
  002cc:    	mov    r14,QWORD PTR [rbp-0x10]
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	add    rsp,0x10
  002d9: f6 	movabs r13,0x55f67b8708d0
  002e3:    	test   rax,rax
  002e6:    	je     0xffff60db
  002ec:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002f0:    	mov    rax,QWORD PTR [r14-0x50]
  002f4:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002f8: 00 	movq   xmm3,QWORD PTR [rip+0x1788]        # 0x1a88
  00300: 00 	movabs rax,0x8000000000000002
  0030a:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0030e:    	mov    rdi,QWORD PTR [r14-0x50]
  00312: 00 	test   rdi,0x1
  00319:    	jne    0x39177
  0031f: 00 	test   rdi,0x2
  00326:    	je     0x362
  0032c:    	xorps  xmm4,xmm4
  0032f: 00 	movabs rax,0x8000000000000002
  00339:    	cmp    rdi,rax
  0033c:    	je     0x374
  00342:    	mov    rax,rdi
  00345:    	sar    rax,0x3f
  00349:    	add    rax,0x2
  0034d:    	and    rdi,0xfffffffffffffffc
  00351:    	or     rdi,rax
  00354:    	rol    rdi,0x3d
  00358:    	movq   xmm4,rdi
  0035d:    	jmp    0x374
  00362:    	call   0xffff6134
  00367:    	test   rax,rax
  0036a:    	je     0x39177
  00370:    	movq   xmm4,xmm0
  00374:    	ucomisd xmm4,xmm3
  00378:    	jae    0x391da
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  0037e: 01 	sub    DWORD PTR [rip+0x170b],0x1        # 0x1a90
  00385:    	je     0x391bc
  0038b:    	movq   xmm0,xmm4
  0038f:    	call   0xffff6258
  00394:    	mov    QWORD PTR [r14-0x58],rax
  00398:    	sub    rsp,0x20
  0039c:    	movq   QWORD PTR [rsp],xmm2
  003a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ad:    	mov    rdi,QWORD PTR [r14-0x58]
  003b1:    	mov    rdx,rdi
  003b4:    	mov    rdi,rbx
  003b7:    	mov    rsi,r12
  003ba: f6 	movabs rax,0x55f67a6dcb60
  003c4:    	call   rax
  003c6:    	movq   xmm2,QWORD PTR [rsp]
  003cb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003d7:    	add    rsp,0x20
  003db: f6 	movabs r13,0x55f67b870940
  003e5:    	test   rax,rax
  003e8:    	je     0xffff60db
  003ee:    	mov    QWORD PTR [r14-0x58],rax
:00020 br =>:00021
  003f2:    	jmp    0x39200
:00021 %7 = literal[1e-17]
  003f7: 00 	movq   xmm3,QWORD PTR [rip+0x1699]        # 0x1a98
  003ff: aa 	movabs rax,0xe33877aa3236a4ba
  00409:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0040d:    	mov    rdi,QWORD PTR [r14-0x58]
  00411: 00 	test   rdi,0x1
  00418:    	jne    0x39226
  0041e: 00 	test   rdi,0x2
  00425:    	je     0x461
  0042b:    	xorps  xmm5,xmm5
  0042e: 00 	movabs rax,0x8000000000000002
  00438:    	cmp    rdi,rax
  0043b:    	je     0x473
  00441:    	mov    rax,rdi
  00444:    	sar    rax,0x3f
  00448:    	add    rax,0x2
  0044c:    	and    rdi,0xfffffffffffffffc
  00450:    	or     rdi,rax
  00453:    	rol    rdi,0x3d
  00457:    	movq   xmm5,rdi
  0045c:    	jmp    0x473
  00461:    	call   0xffff6134
  00466:    	test   rax,rax
  00469:    	je     0x39226
  0046f:    	movq   xmm5,xmm0
  00473:    	ucomisd xmm5,xmm3
  00477:    	jae    0x48b
:00024 %7 = nil
  0047d: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  00485:    	mov    rax,QWORD PTR [r14-0x68]
  00489:    	leave  
  0048a:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  0048b:    	mov    rdi,QWORD PTR [r14-0x38]
  0048f: 00 	test   rdi,0x7
  00496:    	jne    0x39242
  0049c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  004a0:    	jne    0x39242
  004a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff8fb0],0x26        # 0xffff945d
  004ad:    	jne    0x39242
  004b3:    	mov    esi,DWORD PTR [rip+0x15eb]        # 0x1aa4
  004b9:    	cmp    esi,0xffffffff
  004bc:    	je     0x3925e
  004c2:    	cmp    WORD PTR [rdi+0x2],0x3
  004c7:    	jne    0x4e0
  004cd:    	cmp    esi,0x6
  004d0:    	jge    0x4e0
  004d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004db:    	jmp    0x522
  004e0:    	sub    rsp,0x20
  004e4:    	movq   QWORD PTR [rsp],xmm2
  004e9:    	movq   QWORD PTR [rsp+0x8],xmm3
  004ef:    	movq   QWORD PTR [rsp+0x10],xmm4
  004f5:    	movq   QWORD PTR [rsp+0x18],xmm5
  004fb: f6 	movabs rax,0x55f67a69e160
  00505:    	call   rax
  00507:    	movq   xmm2,QWORD PTR [rsp]
  0050c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00512:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00518:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0051e:    	add    rsp,0x20
  00522:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  00526:    	mov    rdi,QWORD PTR [rbp-0x30]
  0052a:    	mov    rax,QWORD PTR [rdi+0x18]
  0052e:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  00532:    	mov    rdi,QWORD PTR [r14-0x70]
  00536: 00 	test   rdi,0x7
  0053d:    	jne    0x392bd
  00543:    	cmp    DWORD PTR [rdi+0x4],0x28
  00547:    	jne    0x392bd
  0054d: 26 	cmp    DWORD PTR [rip+0xffffffffffff8f09],0x26        # 0xffff945d
  00554:    	jne    0x392bd
  0055a:    	sub    rsp,0x20
  0055e:    	movq   QWORD PTR [rsp],xmm2
  00563:    	movq   QWORD PTR [rsp+0x8],xmm4
  00569:    	movq   QWORD PTR [rsp+0x10],xmm5
  0056f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00578:    	mov    rax,QWORD PTR [r14-0x70]
  0057c:    	mov    QWORD PTR [rsp-0x40],rax
  00581: 00 	mov    rdi,0x1
  00588:    	lea    r8,[rsp-0x48]
  0058d:    	mov    rax,QWORD PTR [r14-0x78]
  00591:    	mov    QWORD PTR [r8],rax
  00594:    	sub    r8,0x8
  00598: 00 	mov    QWORD PTR [rsp-0x38],0x0
  005a1: 05 	movabs rax,0x1000500000042
  005ab:    	mov    QWORD PTR [rsp-0x30],rax
  005b0: f6 	movabs r13,0x55f67b88de50
  005ba:    	mov    rsi,QWORD PTR [rbx]
  005bd:    	mov    QWORD PTR [rsp-0x18],rsi
  005c2:    	lea    rsi,[rsp-0x18]
  005c7:    	mov    QWORD PTR [rbx],rsi
  005ca:    	lea    r14,[rsp-0x10]
  005cf:    	mov    QWORD PTR [rsp-0x20],r14
  005d4:    	call   0xffffa190
  005d9:    	lea    r14,[rbp-0x8]
  005dd:    	mov    QWORD PTR [rbx],r14
  005e0:    	mov    r14,QWORD PTR [rbp-0x10]
  005e4:    	movq   xmm2,QWORD PTR [rsp]
  005e9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005ef:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005f5:    	add    rsp,0x20
  005f9: f6 	movabs r13,0x55f67b870a10
  00603:    	test   rax,rax
  00606:    	je     0xffff60db
  0060c:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00610:    	mov    rdi,QWORD PTR [r14-0x68]
  00614: 00 	test   rdi,0x1
  0061b:    	jne    0x392d9
  00621: 00 	test   rdi,0x2
  00628:    	je     0x664
  0062e:    	xorps  xmm3,xmm3
  00631: 00 	movabs rax,0x8000000000000002
  0063b:    	cmp    rdi,rax
  0063e:    	je     0x676
  00644:    	mov    rax,rdi
  00647:    	sar    rax,0x3f
  0064b:    	add    rax,0x2
  0064f:    	and    rdi,0xfffffffffffffffc
  00653:    	or     rdi,rax
  00656:    	rol    rdi,0x3d
  0065a:    	movq   xmm3,rdi
  0065f:    	jmp    0x676
  00664:    	call   0xffff6134
  00669:    	test   rax,rax
  0066c:    	je     0x392d9
  00672:    	movq   xmm3,xmm0
  00676:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0067a: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1427]        # 0x1aa8
:00036 %6 = %7 / %4                         [Float][Float]
  00681:    	movq   xmm6,xmm3
  00685:    	movq   rax,xmm4
  0068a:    	test   rax,rax
  0068d:    	je     0xffff6100
  00693:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00697: 00 	movq   xmm3,QWORD PTR [rip+0x1419]        # 0x1ab8
  0069f: 00 	movabs rax,0x8000000000000002
  006a9:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  006ad:    	ucomisd xmm6,xmm3
  006b1:    	jbe    0x39d40
:00040 %7 = %2.call t()                     [<INVALID>]
  006b7: 01 	sub    DWORD PTR [rip+0x1402],0x1        # 0x1ac0
  006be:    	je     0x3931e
  006c4:    	sub    rsp,0x20
  006c8:    	movq   QWORD PTR [rsp],xmm2
  006cd:    	movq   QWORD PTR [rsp+0x8],xmm4
  006d3:    	movq   QWORD PTR [rsp+0x10],xmm5
  006d9:    	movq   QWORD PTR [rsp+0x18],xmm6
  006df:    	mov    rdi,QWORD PTR [r14-0x40]
  006e3: f6 	movabs rax,0x55f67a7285d0
  006ed:    	call   rax
  006ef:    	mov    r15d,eax
  006f2: f6 	movabs r13,0x55f67b870a90
  006fc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00700:    	jne    0x3933c
  00706:    	mov    eax,DWORD PTR [rip+0xffffffffffff8d51]        # 0xffff945d
  0070c:    	cmp    DWORD PTR [r13-0x4],eax
  00710:    	jne    0x3933c
  00716: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0071f:    	mov    rsi,QWORD PTR [rbx]
  00722:    	mov    QWORD PTR [rsp-0x18],rsi
  00727:    	lea    rsi,[rsp-0x18]
  0072c:    	mov    QWORD PTR [rbx],rsi
  0072f:    	mov    rax,QWORD PTR [r14-0x40]
  00733:    	mov    QWORD PTR [rsp-0x40],rax
  00738: 00 	mov    rdi,0x0
  0073f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00748:    	lea    r14,[rsp-0x10]
  0074d:    	mov    QWORD PTR [rsp-0x20],r14
  00752: 00 	movabs rax,0x0
  0075c:    	mov    QWORD PTR [rsp-0x30],rax
  00761: 00 	movabs r13,0x0
  0076b:    	call   0xffff60a8
  00770:    	lea    r14,[rbp-0x8]
  00774:    	mov    QWORD PTR [rbx],r14
  00777:    	mov    r14,QWORD PTR [rbp-0x10]
  0077b:    	movq   xmm2,QWORD PTR [rsp]
  00780:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00786:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0078c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00792:    	add    rsp,0x20
  00796:    	test   rax,rax
  00799:    	je     0x393af
  0079f:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  007a3:    	movq   xmm0,xmm6
  007a7:    	call   0xffff6258
  007ac:    	mov    QWORD PTR [r14-0x60],rax
  007b0:    	mov    rdi,QWORD PTR [r14-0x60]
  007b4:    	mov    rsi,QWORD PTR [r14-0x68]
  007b8: 00 	test   rdi,0x1
  007bf:    	je     0x393be
  007c5: 00 	test   rsi,0x1
  007cc:    	je     0x393be
  007d2:    	cmp    rdi,rsi
  007d5:    	jge    0x39d73
:00045 %7 = literal[true]
  007db: 00 	mov    rax,0x1c
  007e2:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007e6:    	sub    rsp,0x20
  007ea:    	movq   QWORD PTR [rsp],xmm2
  007ef:    	movq   QWORD PTR [rsp+0x8],xmm4
  007f5:    	movq   QWORD PTR [rsp+0x10],xmm5
  007fb:    	movq   QWORD PTR [rsp+0x18],xmm6
  00801:    	mov    rdi,QWORD PTR [r14-0x40]
  00805: f6 	movabs rax,0x55f67a7285d0
  0080f:    	call   rax
  00811:    	mov    r15d,eax
  00814: f6 	movabs r13,0x55f67b870af0
  0081e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00822:    	jne    0x39413
  00828:    	mov    eax,DWORD PTR [rip+0xffffffffffff8c2f]        # 0xffff945d
  0082e:    	cmp    DWORD PTR [r13-0x4],eax
  00832:    	jne    0x39413
  00838: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00841:    	mov    rsi,QWORD PTR [rbx]
  00844:    	mov    QWORD PTR [rsp-0x18],rsi
  00849:    	lea    rsi,[rsp-0x18]
  0084e:    	mov    QWORD PTR [rbx],rsi
  00851:    	mov    rax,QWORD PTR [r14-0x40]
  00855:    	mov    QWORD PTR [rsp-0x40],rax
  0085a: 00 	mov    rdi,0x1
  00861:    	lea    r8,[rsp-0x48]
  00866:    	mov    rax,QWORD PTR [r14-0x68]
  0086a:    	mov    QWORD PTR [r8],rax
  0086d:    	sub    r8,0x8
  00871: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0087a:    	lea    r14,[rsp-0x10]
  0087f:    	mov    QWORD PTR [rsp-0x20],r14
  00884: 00 	movabs rax,0x0
  0088e:    	mov    QWORD PTR [rsp-0x30],rax
  00893: 00 	movabs r13,0x0
  0089d:    	call   0xffff60a8
  008a2:    	lea    r14,[rbp-0x8]
  008a6:    	mov    QWORD PTR [rbx],r14
  008a9:    	mov    r14,QWORD PTR [rbp-0x10]
  008ad:    	movq   xmm2,QWORD PTR [rsp]
  008b2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008b8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008be:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008c4:    	add    rsp,0x20
  008c8:    	test   rax,rax
  008cb:    	je     0x39486
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  008d1:    	sub    rsp,0x20
  008d5:    	movq   QWORD PTR [rsp],xmm2
  008da:    	movq   QWORD PTR [rsp+0x8],xmm4
  008e0:    	movq   QWORD PTR [rsp+0x10],xmm5
  008e6:    	movq   QWORD PTR [rsp+0x18],xmm6
  008ec:    	mov    rdi,QWORD PTR [r14-0x40]
  008f0: f6 	movabs rax,0x55f67a7285d0
  008fa:    	call   rax
  008fc:    	mov    r15d,eax
  008ff: f6 	movabs r13,0x55f67b870b20
  00909:    	cmp    r15d,DWORD PTR [r13-0x8]
  0090d:    	jne    0x39495
  00913:    	mov    eax,DWORD PTR [rip+0xffffffffffff8b44]        # 0xffff945d
  00919:    	cmp    DWORD PTR [r13-0x4],eax
  0091d:    	jne    0x39495
  00923: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0092c:    	mov    rsi,QWORD PTR [rbx]
  0092f:    	mov    QWORD PTR [rsp-0x18],rsi
  00934:    	lea    rsi,[rsp-0x18]
  00939:    	mov    QWORD PTR [rbx],rsi
  0093c:    	mov    rax,QWORD PTR [r14-0x40]
  00940:    	mov    QWORD PTR [rsp-0x40],rax
  00945: 00 	mov    rdi,0x1
  0094c:    	lea    r8,[rsp-0x48]
  00951:    	mov    rax,QWORD PTR [r14-0x60]
  00955:    	mov    QWORD PTR [r8],rax
  00958:    	sub    r8,0x8
  0095c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00965:    	lea    r14,[rsp-0x10]
  0096a:    	mov    QWORD PTR [rsp-0x20],r14
  0096f: 00 	movabs rax,0x0
  00979:    	mov    QWORD PTR [rsp-0x30],rax
  0097e: 00 	movabs r13,0x0
  00988:    	call   0xffff60a8
  0098d:    	lea    r14,[rbp-0x8]
  00991:    	mov    QWORD PTR [rbx],r14
  00994:    	mov    r14,QWORD PTR [rbp-0x10]
  00998:    	movq   xmm2,QWORD PTR [rsp]
  0099d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009a3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009a9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009af:    	add    rsp,0x20
  009b3:    	test   rax,rax
  009b6:    	je     0x39508
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  009bc:    	mov    rdi,QWORD PTR [rbp-0x30]
  009c0:    	sub    rsp,0x20
  009c4:    	movq   QWORD PTR [rsp],xmm2
  009c9:    	movq   QWORD PTR [rsp+0x8],xmm4
  009cf:    	movq   QWORD PTR [rsp+0x10],xmm5
  009d5:    	movq   QWORD PTR [rsp+0x18],xmm6
  009db: 00 	mov    rsi,0x97
  009e2:    	mov    rdx,r12
  009e5: f6 	movabs rax,0x55f67a71b840
  009ef:    	call   rax
  009f1:    	movq   xmm2,QWORD PTR [rsp]
  009f6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009fc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a02:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a08:    	add    rsp,0x20
  00a0c:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00a10:    	sub    rsp,0x20
  00a14:    	movq   QWORD PTR [rsp],xmm2
  00a19:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a1f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a25:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a2b:    	mov    rdi,QWORD PTR [r14-0x40]
  00a2f: f6 	movabs rax,0x55f67a7285d0
  00a39:    	call   rax
  00a3b:    	mov    r15d,eax
  00a3e: f6 	movabs r13,0x55f67b870b60
  00a48:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a4c:    	jne    0x39517
  00a52:    	mov    eax,DWORD PTR [rip+0xffffffffffff8a05]        # 0xffff945d
  00a58:    	cmp    DWORD PTR [r13-0x4],eax
  00a5c:    	jne    0x39517
  00a62: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a6b:    	mov    rsi,QWORD PTR [rbx]
  00a6e:    	mov    QWORD PTR [rsp-0x18],rsi
  00a73:    	lea    rsi,[rsp-0x18]
  00a78:    	mov    QWORD PTR [rbx],rsi
  00a7b:    	mov    rax,QWORD PTR [r14-0x40]
  00a7f:    	mov    QWORD PTR [rsp-0x40],rax
  00a84: 00 	mov    rdi,0x1
  00a8b:    	lea    r8,[rsp-0x48]
  00a90:    	mov    rax,QWORD PTR [r14-0x68]
  00a94:    	mov    QWORD PTR [r8],rax
  00a97:    	sub    r8,0x8
  00a9b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00aa4:    	lea    r14,[rsp-0x10]
  00aa9:    	mov    QWORD PTR [rsp-0x20],r14
  00aae: 00 	movabs rax,0x0
  00ab8:    	mov    QWORD PTR [rsp-0x30],rax
  00abd: 00 	movabs r13,0x0
  00ac7:    	call   0xffff60a8
  00acc:    	lea    r14,[rbp-0x8]
  00ad0:    	mov    QWORD PTR [rbx],r14
  00ad3:    	mov    r14,QWORD PTR [rbp-0x10]
  00ad7:    	movq   xmm2,QWORD PTR [rsp]
  00adc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ae2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ae8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aee:    	add    rsp,0x20
  00af2:    	test   rax,rax
  00af5:    	je     0x3958a
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00afb: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff8966]        # 0xffff9468
  00b02: 00 	cmp    rax,QWORD PTR [rip+0xfcf]        # 0x1ad8
  00b09:    	jne    0x39599
  00b0f: 00 	mov    rax,QWORD PTR [rip+0xfb2]        # 0x1ac8
  00b16:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00b1a:    	sub    rsp,0x20
  00b1e:    	movq   QWORD PTR [rsp],xmm2
  00b23:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b29:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b2f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b35:    	mov    rdi,QWORD PTR [r14-0x38]
  00b39: f6 	movabs rax,0x55f67a7285d0
  00b43:    	call   rax
  00b45:    	mov    r15d,eax
  00b48: f6 	movabs r13,0x55f67b870ba0
  00b52:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b56:    	jne    0x39615
  00b5c:    	mov    eax,DWORD PTR [rip+0xffffffffffff88fb]        # 0xffff945d
  00b62:    	cmp    DWORD PTR [r13-0x4],eax
  00b66:    	jne    0x39615
  00b6c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b75:    	mov    rsi,QWORD PTR [rbx]
  00b78:    	mov    QWORD PTR [rsp-0x18],rsi
  00b7d:    	lea    rsi,[rsp-0x18]
  00b82:    	mov    QWORD PTR [rbx],rsi
  00b85:    	mov    rax,QWORD PTR [r14-0x38]
  00b89:    	mov    QWORD PTR [rsp-0x40],rax
  00b8e: 00 	mov    rdi,0x0
  00b95: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b9e:    	lea    r14,[rsp-0x10]
  00ba3:    	mov    QWORD PTR [rsp-0x20],r14
  00ba8: 00 	movabs rax,0x0
  00bb2:    	mov    QWORD PTR [rsp-0x30],rax
  00bb7: 00 	movabs r13,0x0
  00bc1:    	call   0xffff60a8
  00bc6:    	lea    r14,[rbp-0x8]
  00bca:    	mov    QWORD PTR [rbx],r14
  00bcd:    	mov    r14,QWORD PTR [rbp-0x10]
  00bd1:    	movq   xmm2,QWORD PTR [rsp]
  00bd6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bdc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00be2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00be8:    	add    rsp,0x20
  00bec:    	test   rax,rax
  00bef:    	je     0x39688
  00bf5:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bf9:    	sub    rsp,0x20
  00bfd:    	movq   QWORD PTR [rsp],xmm2
  00c02:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c08:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c0e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c14:    	mov    rdi,QWORD PTR [r14-0x80]
  00c18: f6 	movabs rax,0x55f67a7285d0
  00c22:    	call   rax
  00c24:    	mov    r15d,eax
  00c27: f6 	movabs r13,0x55f67b870bd0
  00c31:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c35:    	jne    0x39697
  00c3b:    	mov    eax,DWORD PTR [rip+0xffffffffffff881c]        # 0xffff945d
  00c41:    	cmp    DWORD PTR [r13-0x4],eax
  00c45:    	jne    0x39697
  00c4b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c54:    	mov    rsi,QWORD PTR [rbx]
  00c57:    	mov    QWORD PTR [rsp-0x18],rsi
  00c5c:    	lea    rsi,[rsp-0x18]
  00c61:    	mov    QWORD PTR [rbx],rsi
  00c64:    	mov    rax,QWORD PTR [r14-0x80]
  00c68:    	mov    QWORD PTR [rsp-0x40],rax
  00c6d: 00 	mov    rdi,0x0
  00c74: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c7d:    	lea    r14,[rsp-0x10]
  00c82:    	mov    QWORD PTR [rsp-0x20],r14
  00c87: 00 	movabs rax,0x0
  00c91:    	mov    QWORD PTR [rsp-0x30],rax
  00c96: 00 	movabs r13,0x0
  00ca0:    	call   0xffff60a8
  00ca5:    	lea    r14,[rbp-0x8]
  00ca9:    	mov    QWORD PTR [rbx],r14
  00cac:    	mov    r14,QWORD PTR [rbp-0x10]
  00cb0:    	movq   xmm2,QWORD PTR [rsp]
  00cb5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cbb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00cc1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cc7:    	add    rsp,0x20
  00ccb:    	test   rax,rax
  00cce:    	je     0x3970a
  00cd4:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00cd8:    	sub    rsp,0x20
  00cdc:    	movq   QWORD PTR [rsp],xmm2
  00ce1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ced:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf3:    	mov    rdi,QWORD PTR [r14-0x38]
  00cf7: f6 	movabs rax,0x55f67a7285d0
  00d01:    	call   rax
  00d03:    	mov    r15d,eax
  00d06: f6 	movabs r13,0x55f67b870c00
  00d10:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d14:    	jne    0x39719
  00d1a:    	mov    eax,DWORD PTR [rip+0xffffffffffff873d]        # 0xffff945d
  00d20:    	cmp    DWORD PTR [r13-0x4],eax
  00d24:    	jne    0x39719
  00d2a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d33:    	mov    rsi,QWORD PTR [rbx]
  00d36:    	mov    QWORD PTR [rsp-0x18],rsi
  00d3b:    	lea    rsi,[rsp-0x18]
  00d40:    	mov    QWORD PTR [rbx],rsi
  00d43:    	mov    rax,QWORD PTR [r14-0x38]
  00d47:    	mov    QWORD PTR [rsp-0x40],rax
  00d4c: 00 	mov    rdi,0x0
  00d53: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d5c:    	lea    r14,[rsp-0x10]
  00d61:    	mov    QWORD PTR [rsp-0x20],r14
  00d66: 00 	movabs rax,0x0
  00d70:    	mov    QWORD PTR [rsp-0x30],rax
  00d75: 00 	movabs r13,0x0
  00d7f:    	call   0xffff60a8
  00d84:    	lea    r14,[rbp-0x8]
  00d88:    	mov    QWORD PTR [rbx],r14
  00d8b:    	mov    r14,QWORD PTR [rbp-0x10]
  00d8f:    	movq   xmm2,QWORD PTR [rsp]
  00d94:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d9a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00da0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00da6:    	add    rsp,0x20
  00daa:    	test   rax,rax
  00dad:    	je     0x3978c
  00db3: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00dba:    	sub    rsp,0x20
  00dbe:    	movq   QWORD PTR [rsp],xmm2
  00dc3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dc9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dcf:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dd5: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00ddc: f6 	movabs rax,0x55f67a7285d0
  00de6:    	call   rax
  00de8:    	mov    r15d,eax
  00deb: f6 	movabs r13,0x55f67b870c30
  00df5:    	cmp    r15d,DWORD PTR [r13-0x8]
  00df9:    	jne    0x3979b
  00dff:    	mov    eax,DWORD PTR [rip+0xffffffffffff8658]        # 0xffff945d
  00e05:    	cmp    DWORD PTR [r13-0x4],eax
  00e09:    	jne    0x3979b
  00e0f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e18:    	mov    rsi,QWORD PTR [rbx]
  00e1b:    	mov    QWORD PTR [rsp-0x18],rsi
  00e20:    	lea    rsi,[rsp-0x18]
  00e25:    	mov    QWORD PTR [rbx],rsi
  00e28: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e2f:    	mov    QWORD PTR [rsp-0x40],rax
  00e34: 00 	mov    rdi,0x0
  00e3b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e44:    	lea    r14,[rsp-0x10]
  00e49:    	mov    QWORD PTR [rsp-0x20],r14
  00e4e: 00 	movabs rax,0x0
  00e58:    	mov    QWORD PTR [rsp-0x30],rax
  00e5d: 00 	movabs r13,0x0
  00e67:    	call   0xffff60a8
  00e6c:    	lea    r14,[rbp-0x8]
  00e70:    	mov    QWORD PTR [rbx],r14
  00e73:    	mov    r14,QWORD PTR [rbp-0x10]
  00e77:    	movq   xmm2,QWORD PTR [rsp]
  00e7c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e82:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e88:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e8e:    	add    rsp,0x20
  00e92:    	test   rax,rax
  00e95:    	je     0x39811
  00e9b:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e9f:    	mov    rdi,QWORD PTR [r14-0x60]
  00ea3:    	mov    rsi,QWORD PTR [r14-0x80]
  00ea7:    	sub    rsp,0x20
  00eab:    	movq   QWORD PTR [rsp],xmm2
  00eb0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eb6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ebc:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec2:    	mov    rdx,rdi
  00ec5:    	mov    rcx,rsi
  00ec8:    	mov    rdi,rbx
  00ecb:    	mov    rsi,r12
  00ece: f6 	movabs rax,0x55f67a6dfeb0
  00ed8:    	call   rax
  00eda:    	movq   xmm2,QWORD PTR [rsp]
  00edf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ee5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eeb:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef1:    	add    rsp,0x20
  00ef5: f6 	movabs r13,0x55f67b870c60
  00eff:    	test   rax,rax
  00f02:    	je     0xffff60db
  00f08:    	mov    QWORD PTR [r14-0x80],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00f0c:    	mov    rdi,QWORD PTR [r14-0x78]
  00f10:    	mov    rsi,QWORD PTR [r14-0x80]
  00f14:    	sub    rsp,0x20
  00f18:    	movq   QWORD PTR [rsp],xmm2
  00f1d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f23:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f29:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f2f:    	mov    rdx,rdi
  00f32:    	mov    rcx,rsi
  00f35:    	mov    rdi,rbx
  00f38:    	mov    rsi,r12
  00f3b: f6 	movabs rax,0x55f67a6ddf30
  00f45:    	call   rax
  00f47:    	movq   xmm2,QWORD PTR [rsp]
  00f4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f58:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f5e:    	add    rsp,0x20
  00f62: f6 	movabs r13,0x55f67b870c70
  00f6c:    	test   rax,rax
  00f6f:    	je     0xffff60db
  00f75:    	mov    QWORD PTR [r14-0x78],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f79:    	sub    rsp,0x20
  00f7d:    	movq   QWORD PTR [rsp],xmm2
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f8e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f94:    	mov    rdi,QWORD PTR [r14-0x38]
  00f98: f6 	movabs rax,0x55f67a7285d0
  00fa2:    	call   rax
  00fa4:    	mov    r15d,eax
  00fa7: f6 	movabs r13,0x55f67b870c80
  00fb1:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fb5:    	jne    0x39820
  00fbb:    	mov    eax,DWORD PTR [rip+0xffffffffffff849c]        # 0xffff945d
  00fc1:    	cmp    DWORD PTR [r13-0x4],eax
  00fc5:    	jne    0x39820
  00fcb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fd4:    	mov    rsi,QWORD PTR [rbx]
  00fd7:    	mov    QWORD PTR [rsp-0x18],rsi
  00fdc:    	lea    rsi,[rsp-0x18]
  00fe1:    	mov    QWORD PTR [rbx],rsi
  00fe4:    	mov    rax,QWORD PTR [r14-0x38]
  00fe8:    	mov    QWORD PTR [rsp-0x40],rax
  00fed: 00 	mov    rdi,0x0
  00ff4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ffd:    	lea    r14,[rsp-0x10]
  01002:    	mov    QWORD PTR [rsp-0x20],r14
  01007: 00 	movabs rax,0x0
  01011:    	mov    QWORD PTR [rsp-0x30],rax
  01016: 00 	movabs r13,0x0
  01020:    	call   0xffff60a8
  01025:    	lea    r14,[rbp-0x8]
  01029:    	mov    QWORD PTR [rbx],r14
  0102c:    	mov    r14,QWORD PTR [rbp-0x10]
  01030:    	movq   xmm2,QWORD PTR [rsp]
  01035:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0103b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01041:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01047:    	add    rsp,0x20
  0104b:    	test   rax,rax
  0104e:    	je     0x39893
  01054: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  0105b:    	sub    rsp,0x20
  0105f:    	movq   QWORD PTR [rsp],xmm2
  01064:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01070:    	movq   QWORD PTR [rsp+0x18],xmm6
  01076: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0107d: f6 	movabs rax,0x55f67a7285d0
  01087:    	call   rax
  01089:    	mov    r15d,eax
  0108c: f6 	movabs r13,0x55f67b870cb0
  01096:    	cmp    r15d,DWORD PTR [r13-0x8]
  0109a:    	jne    0x398a2
  010a0:    	mov    eax,DWORD PTR [rip+0xffffffffffff83b7]        # 0xffff945d
  010a6:    	cmp    DWORD PTR [r13-0x4],eax
  010aa:    	jne    0x398a2
  010b0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010b9:    	mov    rsi,QWORD PTR [rbx]
  010bc:    	mov    QWORD PTR [rsp-0x18],rsi
  010c1:    	lea    rsi,[rsp-0x18]
  010c6:    	mov    QWORD PTR [rbx],rsi
  010c9: ff 	mov    rax,QWORD PTR [r14-0x88]
  010d0:    	mov    QWORD PTR [rsp-0x40],rax
  010d5: 00 	mov    rdi,0x0
  010dc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010e5:    	lea    r14,[rsp-0x10]
  010ea:    	mov    QWORD PTR [rsp-0x20],r14
  010ef: 00 	movabs rax,0x0
  010f9:    	mov    QWORD PTR [rsp-0x30],rax
  010fe: 00 	movabs r13,0x0
  01108:    	call   0xffff60a8
  0110d:    	lea    r14,[rbp-0x8]
  01111:    	mov    QWORD PTR [rbx],r14
  01114:    	mov    r14,QWORD PTR [rbp-0x10]
  01118:    	movq   xmm2,QWORD PTR [rsp]
  0111d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01123:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01129:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0112f:    	add    rsp,0x20
  01133:    	test   rax,rax
  01136:    	je     0x39918
  0113c:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  01140:    	sub    rsp,0x20
  01144:    	movq   QWORD PTR [rsp],xmm2
  01149:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01155:    	movq   QWORD PTR [rsp+0x18],xmm6
  0115b:    	mov    rdi,QWORD PTR [r14-0x38]
  0115f: f6 	movabs rax,0x55f67a7285d0
  01169:    	call   rax
  0116b:    	mov    r15d,eax
  0116e: f6 	movabs r13,0x55f67b870ce0
  01178:    	cmp    r15d,DWORD PTR [r13-0x8]
  0117c:    	jne    0x39927
  01182:    	mov    eax,DWORD PTR [rip+0xffffffffffff82d5]        # 0xffff945d
  01188:    	cmp    DWORD PTR [r13-0x4],eax
  0118c:    	jne    0x39927
  01192: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0119b:    	mov    rsi,QWORD PTR [rbx]
  0119e:    	mov    QWORD PTR [rsp-0x18],rsi
  011a3:    	lea    rsi,[rsp-0x18]
  011a8:    	mov    QWORD PTR [rbx],rsi
  011ab:    	mov    rax,QWORD PTR [r14-0x38]
  011af:    	mov    QWORD PTR [rsp-0x40],rax
  011b4: 00 	mov    rdi,0x0
  011bb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011c4:    	lea    r14,[rsp-0x10]
  011c9:    	mov    QWORD PTR [rsp-0x20],r14
  011ce: 00 	movabs rax,0x0
  011d8:    	mov    QWORD PTR [rsp-0x30],rax
  011dd: 00 	movabs r13,0x0
  011e7:    	call   0xffff60a8
  011ec:    	lea    r14,[rbp-0x8]
  011f0:    	mov    QWORD PTR [rbx],r14
  011f3:    	mov    r14,QWORD PTR [rbp-0x10]
  011f7:    	movq   xmm2,QWORD PTR [rsp]
  011fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01202:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01208:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0120e:    	add    rsp,0x20
  01212:    	test   rax,rax
  01215:    	je     0x3999a
  0121b: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  01222:    	sub    rsp,0x20
  01226:    	movq   QWORD PTR [rsp],xmm2
  0122b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01231:    	movq   QWORD PTR [rsp+0x10],xmm5
  01237:    	movq   QWORD PTR [rsp+0x18],xmm6
  0123d: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01244: f6 	movabs rax,0x55f67a7285d0
  0124e:    	call   rax
  01250:    	mov    r15d,eax
  01253: f6 	movabs r13,0x55f67b870d10
  0125d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01261:    	jne    0x399a9
  01267:    	mov    eax,DWORD PTR [rip+0xffffffffffff81f0]        # 0xffff945d
  0126d:    	cmp    DWORD PTR [r13-0x4],eax
  01271:    	jne    0x399a9
  01277: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01280:    	mov    rsi,QWORD PTR [rbx]
  01283:    	mov    QWORD PTR [rsp-0x18],rsi
  01288:    	lea    rsi,[rsp-0x18]
  0128d:    	mov    QWORD PTR [rbx],rsi
  01290: ff 	mov    rax,QWORD PTR [r14-0x90]
  01297:    	mov    QWORD PTR [rsp-0x40],rax
  0129c: 00 	mov    rdi,0x0
  012a3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012ac:    	lea    r14,[rsp-0x10]
  012b1:    	mov    QWORD PTR [rsp-0x20],r14
  012b6: 00 	movabs rax,0x0
  012c0:    	mov    QWORD PTR [rsp-0x30],rax
  012c5: 00 	movabs r13,0x0
  012cf:    	call   0xffff60a8
  012d4:    	lea    r14,[rbp-0x8]
  012d8:    	mov    QWORD PTR [rbx],r14
  012db:    	mov    r14,QWORD PTR [rbp-0x10]
  012df:    	movq   xmm2,QWORD PTR [rsp]
  012e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ea:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012f0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012f6:    	add    rsp,0x20
  012fa:    	test   rax,rax
  012fd:    	je     0x39a1f
  01303: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  0130a:    	mov    rdi,QWORD PTR [r14-0x60]
  0130e: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01315:    	sub    rsp,0x20
  01319:    	movq   QWORD PTR [rsp],xmm2
  0131e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01324:    	movq   QWORD PTR [rsp+0x10],xmm5
  0132a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01330:    	mov    rdx,rdi
  01333:    	mov    rcx,rsi
  01336:    	mov    rdi,rbx
  01339:    	mov    rsi,r12
  0133c: f6 	movabs rax,0x55f67a6dfeb0
  01346:    	call   rax
  01348:    	movq   xmm2,QWORD PTR [rsp]
  0134d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01353:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01359:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0135f:    	add    rsp,0x20
  01363: f6 	movabs r13,0x55f67b870d40
  0136d:    	test   rax,rax
  01370:    	je     0xffff60db
  01376: ff 	mov    QWORD PTR [r14-0x88],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  0137d:    	mov    rdi,QWORD PTR [r14-0x80]
  01381: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01388:    	sub    rsp,0x20
  0138c:    	movq   QWORD PTR [rsp],xmm2
  01391:    	movq   QWORD PTR [rsp+0x8],xmm4
  01397:    	movq   QWORD PTR [rsp+0x10],xmm5
  0139d:    	movq   QWORD PTR [rsp+0x18],xmm6
  013a3:    	mov    rdx,rdi
  013a6:    	mov    rcx,rsi
  013a9:    	mov    rdi,rbx
  013ac:    	mov    rsi,r12
  013af: f6 	movabs rax,0x55f67a6ddf30
  013b9:    	call   rax
  013bb:    	movq   xmm2,QWORD PTR [rsp]
  013c0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013c6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013cc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013d2:    	add    rsp,0x20
  013d6: f6 	movabs r13,0x55f67b870d50
  013e0:    	test   rax,rax
  013e3:    	je     0xffff60db
  013e9:    	mov    QWORD PTR [r14-0x80],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013ed:    	sub    rsp,0x20
  013f1:    	movq   QWORD PTR [rsp],xmm2
  013f6:    	movq   QWORD PTR [rsp+0x8],xmm4
  013fc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01402:    	movq   QWORD PTR [rsp+0x18],xmm6
  01408:    	mov    rdi,QWORD PTR [r14-0x38]
  0140c: f6 	movabs rax,0x55f67a7285d0
  01416:    	call   rax
  01418:    	mov    r15d,eax
  0141b: f6 	movabs r13,0x55f67b870d60
  01425:    	cmp    r15d,DWORD PTR [r13-0x8]
  01429:    	jne    0x39a2e
  0142f:    	mov    eax,DWORD PTR [rip+0xffffffffffff8028]        # 0xffff945d
  01435:    	cmp    DWORD PTR [r13-0x4],eax
  01439:    	jne    0x39a2e
  0143f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01448:    	mov    rsi,QWORD PTR [rbx]
  0144b:    	mov    QWORD PTR [rsp-0x18],rsi
  01450:    	lea    rsi,[rsp-0x18]
  01455:    	mov    QWORD PTR [rbx],rsi
  01458:    	mov    rax,QWORD PTR [r14-0x38]
  0145c:    	mov    QWORD PTR [rsp-0x40],rax
  01461: 00 	mov    rdi,0x0
  01468: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01471:    	lea    r14,[rsp-0x10]
  01476:    	mov    QWORD PTR [rsp-0x20],r14
  0147b: 00 	movabs rax,0x0
  01485:    	mov    QWORD PTR [rsp-0x30],rax
  0148a: 00 	movabs r13,0x0
  01494:    	call   0xffff60a8
  01499:    	lea    r14,[rbp-0x8]
  0149d:    	mov    QWORD PTR [rbx],r14
  014a0:    	mov    r14,QWORD PTR [rbp-0x10]
  014a4:    	movq   xmm2,QWORD PTR [rsp]
  014a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014af:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014b5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014bb:    	add    rsp,0x20
  014bf:    	test   rax,rax
  014c2:    	je     0x39aa1
  014c8: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  014cf:    	sub    rsp,0x20
  014d3:    	movq   QWORD PTR [rsp],xmm2
  014d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  014de:    	movq   QWORD PTR [rsp+0x10],xmm5
  014e4:    	movq   QWORD PTR [rsp+0x18],xmm6
  014ea: ff 	mov    rdi,QWORD PTR [r14-0x90]
  014f1: f6 	movabs rax,0x55f67a7285d0
  014fb:    	call   rax
  014fd:    	mov    r15d,eax
  01500: f6 	movabs r13,0x55f67b870d90
  0150a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0150e:    	jne    0x39ab0
  01514:    	mov    eax,DWORD PTR [rip+0xffffffffffff7f43]        # 0xffff945d
  0151a:    	cmp    DWORD PTR [r13-0x4],eax
  0151e:    	jne    0x39ab0
  01524: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0152d:    	mov    rsi,QWORD PTR [rbx]
  01530:    	mov    QWORD PTR [rsp-0x18],rsi
  01535:    	lea    rsi,[rsp-0x18]
  0153a:    	mov    QWORD PTR [rbx],rsi
  0153d: ff 	mov    rax,QWORD PTR [r14-0x90]
  01544:    	mov    QWORD PTR [rsp-0x40],rax
  01549: 00 	mov    rdi,0x0
  01550: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01559:    	lea    r14,[rsp-0x10]
  0155e:    	mov    QWORD PTR [rsp-0x20],r14
  01563: 00 	movabs rax,0x0
  0156d:    	mov    QWORD PTR [rsp-0x30],rax
  01572: 00 	movabs r13,0x0
  0157c:    	call   0xffff60a8
  01581:    	lea    r14,[rbp-0x8]
  01585:    	mov    QWORD PTR [rbx],r14
  01588:    	mov    r14,QWORD PTR [rbp-0x10]
  0158c:    	movq   xmm2,QWORD PTR [rsp]
  01591:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01597:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0159d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015a3:    	add    rsp,0x20
  015a7:    	test   rax,rax
  015aa:    	je     0x39b26
  015b0: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  015b7:    	sub    rsp,0x20
  015bb:    	movq   QWORD PTR [rsp],xmm2
  015c0:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c6:    	movq   QWORD PTR [rsp+0x10],xmm5
  015cc:    	movq   QWORD PTR [rsp+0x18],xmm6
  015d2:    	mov    rdi,QWORD PTR [r14-0x38]
  015d6: f6 	movabs rax,0x55f67a7285d0
  015e0:    	call   rax
  015e2:    	mov    r15d,eax
  015e5: f6 	movabs r13,0x55f67b870dc0
  015ef:    	cmp    r15d,DWORD PTR [r13-0x8]
  015f3:    	jne    0x39b35
  015f9:    	mov    eax,DWORD PTR [rip+0xffffffffffff7e5e]        # 0xffff945d
  015ff:    	cmp    DWORD PTR [r13-0x4],eax
  01603:    	jne    0x39b35
  01609: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01612:    	mov    rsi,QWORD PTR [rbx]
  01615:    	mov    QWORD PTR [rsp-0x18],rsi
  0161a:    	lea    rsi,[rsp-0x18]
  0161f:    	mov    QWORD PTR [rbx],rsi
  01622:    	mov    rax,QWORD PTR [r14-0x38]
  01626:    	mov    QWORD PTR [rsp-0x40],rax
  0162b: 00 	mov    rdi,0x0
  01632: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0163b:    	lea    r14,[rsp-0x10]
  01640:    	mov    QWORD PTR [rsp-0x20],r14
  01645: 00 	movabs rax,0x0
  0164f:    	mov    QWORD PTR [rsp-0x30],rax
  01654: 00 	movabs r13,0x0
  0165e:    	call   0xffff60a8
  01663:    	lea    r14,[rbp-0x8]
  01667:    	mov    QWORD PTR [rbx],r14
  0166a:    	mov    r14,QWORD PTR [rbp-0x10]
  0166e:    	movq   xmm2,QWORD PTR [rsp]
  01673:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01679:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0167f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01685:    	add    rsp,0x20
  01689:    	test   rax,rax
  0168c:    	je     0x39ba8
  01692: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01699:    	sub    rsp,0x20
  0169d:    	movq   QWORD PTR [rsp],xmm2
  016a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a8:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ae:    	movq   QWORD PTR [rsp+0x18],xmm6
  016b4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016bb: f6 	movabs rax,0x55f67a7285d0
  016c5:    	call   rax
  016c7:    	mov    r15d,eax
  016ca: f6 	movabs r13,0x55f67b870df0
  016d4:    	cmp    r15d,DWORD PTR [r13-0x8]
  016d8:    	jne    0x39bb7
  016de:    	mov    eax,DWORD PTR [rip+0xffffffffffff7d79]        # 0xffff945d
  016e4:    	cmp    DWORD PTR [r13-0x4],eax
  016e8:    	jne    0x39bb7
  016ee: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016f7:    	mov    rsi,QWORD PTR [rbx]
  016fa:    	mov    QWORD PTR [rsp-0x18],rsi
  016ff:    	lea    rsi,[rsp-0x18]
  01704:    	mov    QWORD PTR [rbx],rsi
  01707: ff 	mov    rax,QWORD PTR [r14-0x98]
  0170e:    	mov    QWORD PTR [rsp-0x40],rax
  01713: 00 	mov    rdi,0x0
  0171a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01723:    	lea    r14,[rsp-0x10]
  01728:    	mov    QWORD PTR [rsp-0x20],r14
  0172d: 00 	movabs rax,0x0
  01737:    	mov    QWORD PTR [rsp-0x30],rax
  0173c: 00 	movabs r13,0x0
  01746:    	call   0xffff60a8
  0174b:    	lea    r14,[rbp-0x8]
  0174f:    	mov    QWORD PTR [rbx],r14
  01752:    	mov    r14,QWORD PTR [rbp-0x10]
  01756:    	movq   xmm2,QWORD PTR [rsp]
  0175b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01761:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01767:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0176d:    	add    rsp,0x20
  01771:    	test   rax,rax
  01774:    	je     0x39c2d
  0177a: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01781:    	mov    rdi,QWORD PTR [r14-0x60]
  01785: ff 	mov    rsi,QWORD PTR [r14-0x90]
  0178c:    	sub    rsp,0x20
  01790:    	movq   QWORD PTR [rsp],xmm2
  01795:    	movq   QWORD PTR [rsp+0x8],xmm4
  0179b:    	movq   QWORD PTR [rsp+0x10],xmm5
  017a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  017a7:    	mov    rdx,rdi
  017aa:    	mov    rcx,rsi
  017ad:    	mov    rdi,rbx
  017b0:    	mov    rsi,r12
  017b3: f6 	movabs rax,0x55f67a6dfeb0
  017bd:    	call   rax
  017bf:    	movq   xmm2,QWORD PTR [rsp]
  017c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ca:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017d0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017d6:    	add    rsp,0x20
  017da: f6 	movabs r13,0x55f67b870e20
  017e4:    	test   rax,rax
  017e7:    	je     0xffff60db
  017ed: ff 	mov    QWORD PTR [r14-0x90],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017f4: ff 	mov    rdi,QWORD PTR [r14-0x88]
  017fb: ff 	mov    rsi,QWORD PTR [r14-0x90]
  01802:    	sub    rsp,0x20
  01806:    	movq   QWORD PTR [rsp],xmm2
  0180b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01811:    	movq   QWORD PTR [rsp+0x10],xmm5
  01817:    	movq   QWORD PTR [rsp+0x18],xmm6
  0181d:    	mov    rdx,rdi
  01820:    	mov    rcx,rsi
  01823:    	mov    rdi,rbx
  01826:    	mov    rsi,r12
  01829: f6 	movabs rax,0x55f67a6ddf30
  01833:    	call   rax
  01835:    	movq   xmm2,QWORD PTR [rsp]
  0183a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01840:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01846:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0184c:    	add    rsp,0x20
  01850: f6 	movabs r13,0x55f67b870e30
  0185a:    	test   rax,rax
  0185d:    	je     0xffff60db
  01863: ff 	mov    QWORD PTR [r14-0x88],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  0186a:    	sub    rsp,0x20
  0186e:    	movq   QWORD PTR [rsp],xmm2
  01873:    	movq   QWORD PTR [rsp+0x8],xmm4
  01879:    	movq   QWORD PTR [rsp+0x10],xmm5
  0187f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01885:    	mov    rdi,QWORD PTR [r14-0x70]
  01889: f6 	movabs rax,0x55f67a7285d0
  01893:    	call   rax
  01895:    	mov    r15d,eax
  01898: f6 	movabs r13,0x55f67b870e40
  018a2:    	cmp    r15d,DWORD PTR [r13-0x8]
  018a6:    	jne    0x39c3c
  018ac:    	mov    eax,DWORD PTR [rip+0xffffffffffff7bab]        # 0xffff945d
  018b2:    	cmp    DWORD PTR [r13-0x4],eax
  018b6:    	jne    0x39c3c
  018bc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018c5:    	mov    rsi,QWORD PTR [rbx]
  018c8:    	mov    QWORD PTR [rsp-0x18],rsi
  018cd:    	lea    rsi,[rsp-0x18]
  018d2:    	mov    QWORD PTR [rbx],rsi
  018d5:    	mov    rax,QWORD PTR [r14-0x70]
  018d9:    	mov    QWORD PTR [rsp-0x40],rax
  018de: 00 	mov    rdi,0x3
  018e5:    	lea    r8,[rsp-0x48]
  018ea:    	mov    rax,QWORD PTR [r14-0x78]
  018ee:    	mov    QWORD PTR [r8],rax
  018f1:    	sub    r8,0x8
  018f5:    	mov    rax,QWORD PTR [r14-0x80]
  018f9:    	mov    QWORD PTR [r8],rax
  018fc:    	sub    r8,0x8
  01900: ff 	mov    rax,QWORD PTR [r14-0x88]
  01907:    	mov    QWORD PTR [r8],rax
  0190a:    	sub    r8,0x8
  0190e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01917:    	lea    r14,[rsp-0x10]
  0191c:    	mov    QWORD PTR [rsp-0x20],r14
  01921: 00 	movabs rax,0x0
  0192b:    	mov    QWORD PTR [rsp-0x30],rax
  01930: 00 	movabs r13,0x0
  0193a:    	call   0xffff60a8
  0193f:    	lea    r14,[rbp-0x8]
  01943:    	mov    QWORD PTR [rbx],r14
  01946:    	mov    r14,QWORD PTR [rbp-0x10]
  0194a:    	movq   xmm2,QWORD PTR [rsp]
  0194f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01955:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0195b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01961:    	add    rsp,0x20
  01965:    	test   rax,rax
  01968:    	je     0x39caf
  0196e:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  01972:    	sub    rsp,0x20
  01976:    	movq   QWORD PTR [rsp],xmm2
  0197b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01981:    	movq   QWORD PTR [rsp+0x10],xmm5
  01987:    	movq   QWORD PTR [rsp+0x18],xmm6
  0198d:    	mov    rdi,QWORD PTR [r14-0x40]
  01991: f6 	movabs rax,0x55f67a7285d0
  0199b:    	call   rax
  0199d:    	mov    r15d,eax
  019a0: f6 	movabs r13,0x55f67b870e70
  019aa:    	cmp    r15d,DWORD PTR [r13-0x8]
  019ae:    	jne    0x39cbe
  019b4:    	mov    eax,DWORD PTR [rip+0xffffffffffff7aa3]        # 0xffff945d
  019ba:    	cmp    DWORD PTR [r13-0x4],eax
  019be:    	jne    0x39cbe
  019c4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019cd:    	mov    rsi,QWORD PTR [rbx]
  019d0:    	mov    QWORD PTR [rsp-0x18],rsi
  019d5:    	lea    rsi,[rsp-0x18]
  019da:    	mov    QWORD PTR [rbx],rsi
  019dd:    	mov    rax,QWORD PTR [r14-0x40]
  019e1:    	mov    QWORD PTR [rsp-0x40],rax
  019e6: 00 	mov    rdi,0x1
  019ed:    	lea    r8,[rsp-0x48]
  019f2:    	mov    rax,QWORD PTR [r14-0x68]
  019f6:    	mov    QWORD PTR [r8],rax
  019f9:    	sub    r8,0x8
  019fd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a06:    	lea    r14,[rsp-0x10]
  01a0b:    	mov    QWORD PTR [rsp-0x20],r14
  01a10: 00 	movabs rax,0x0
  01a1a:    	mov    QWORD PTR [rsp-0x30],rax
  01a1f: 00 	movabs r13,0x0
  01a29:    	call   0xffff60a8
  01a2e:    	lea    r14,[rbp-0x8]
  01a32:    	mov    QWORD PTR [rbx],r14
  01a35:    	mov    r14,QWORD PTR [rbp-0x10]
  01a39:    	movq   xmm2,QWORD PTR [rsp]
  01a3e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a44:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a4a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01a50:    	add    rsp,0x20
  01a54:    	test   rax,rax
  01a57:    	je     0x39d31
:00103 
:00105 br =>:00106
  01a5d:    	jmp    0x39d99
:00106 %7 = nil
  01a62: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01a6a:    	mov    rax,QWORD PTR [r14-0x68]
  01a6e:    	leave  
  01a6f:    	ret    
==> start whole compile: clamp FuncId(59) self_class:Scene start:[00000] bytecode:0x55f67b8ba890
<== finished compile. elapsed:35.3µs
offset:Pos(47672) code: 515 bytes  data: 77 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x382df
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [rbp-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x382ee
  00035: cmp    DWORD PTR [rdi+0x4],0x32
  00039: jne    0x382ee
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  0003f: movq   xmm2,QWORD PTR [rip+0x1c1]        # 0x208
  00047: movabs rax,0x37f800000000002
  00051: mov    QWORD PTR [r14-0x48],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00055: mov    rdi,QWORD PTR [r14-0x38]
  00059: test   rdi,0x1
  00060: jne    0x382fd
  00066: test   rdi,0x2
  0006d: je     0xa9
  00073: xorps  xmm3,xmm3
  00076: movabs rax,0x8000000000000002
  00080: cmp    rdi,rax
  00083: je     0xbb
  00089: mov    rax,rdi
  0008c: sar    rax,0x3f
  00090: add    rax,0x2
  00094: and    rdi,0xfffffffffffffffc
  00098: or     rdi,rax
  0009b: rol    rdi,0x3d
  0009f: movq   xmm3,rdi
  000a4: jmp    0xbb
  000a9: call   0xffff4654
  000ae: test   rax,rax
  000b1: je     0x382fd
  000b7: movq   xmm3,xmm0
  000bb: movq   xmm4,xmm3
  000bf: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000c3: movq   xmm2,QWORD PTR [rip+0x14d]        # 0x218
  000cb: movabs rax,0x37f000000000002
  000d5: mov    QWORD PTR [r14-0x48],rax
:00004 _%3 = %2 > %3                        [Float][Float]
:00005 condnotbr _%3 =>:00008
  000d9: ucomisd xmm4,xmm2
  000dd: jbe    0x3830c
:00006 %2 = literal[255.0]
  000e3: movq   xmm4,QWORD PTR [rip+0x13d]        # 0x228
  000eb: movabs rax,0x37f000000000002
  000f5: mov    QWORD PTR [r14-0x40],rax
:00007 br =>:00008
  000f9: jmp    0x38332
:00008 %3 = literal[0.0]
  000fe: movq   xmm2,QWORD PTR [rip+0x132]        # 0x238
  00106: movabs rax,0x8000000000000002
  00110: mov    QWORD PTR [r14-0x48],rax
:00009 _%3 = %2 < %3                        [Float][Float]
:00010 condnotbr _%3 =>:00013
  00114: ucomisd xmm4,xmm2
  00118: jae    0x3834b
:00011 %2 = literal[0.0]
  0011e: movq   xmm4,QWORD PTR [rip+0x122]        # 0x248
  00126: movabs rax,0x8000000000000002
  00130: mov    QWORD PTR [r14-0x40],rax
:00012 br =>:00013
  00134: jmp    0x38364
:00013 %3 = %2.call to_i()                  [Float]
  00139: mov    rdi,QWORD PTR [r14-0x40]
  0013d: test   rdi,0x1
  00144: jne    0x3837d
  0014a: test   rdi,0x2
  00151: jne    0x16e
  00157: test   rdi,0x7
  0015e: jne    0x3837d
  00164: cmp    DWORD PTR [rdi+0x4],0x7
  00168: jne    0x3837d
  0016e: cmp    DWORD PTR [rip+0xffffffffffff7808],0x26        # 0xffff797d
  00175: jne    0x3837d
  0017b: mov    r9,0x0
  00182: sub    rsp,0x10
  00186: movq   QWORD PTR [rsp],xmm3
  0018b: movq   QWORD PTR [rsp+0x8],xmm4
  00191: mov    rdx,rdi
  00194: mov    QWORD PTR [rsp-0x40],rcx
  00199: mov    QWORD PTR [rsp-0x28],0x0
  001a2: lea    rcx,[r14-0x50]
  001a6: mov    r8,0x0
  001ad: mov    rsi,QWORD PTR [rbx]
  001b0: mov    QWORD PTR [rsp-0x18],rsi
  001b5: lea    rsi,[rsp-0x18]
  001ba: mov    QWORD PTR [rbx],rsi
  001bd: lea    r14,[rsp-0x10]
  001c2: mov    QWORD PTR [rsp-0x20],r14
  001c7: call   0x3838c
  001cc: lea    r14,[rbp-0x8]
  001d0: mov    QWORD PTR [rbx],r14
  001d3: mov    r14,QWORD PTR [rbp-0x10]
  001d7: movq   xmm3,QWORD PTR [rsp]
  001dc: movq   xmm4,QWORD PTR [rsp+0x8]
  001e2: add    rsp,0x10
  001e6: movabs r13,0x55f67b8ba980
  001f0: test   rax,rax
  001f3: je     0xffff45fb
  001f9: mov    QWORD PTR [r14-0x48],rax
:00014 
:00016 ret %3
  001fd: mov    rax,QWORD PTR [r14-0x48]
  00201: leave  
  00202: ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x55f67b8ba810
<== finished compile. elapsed:15.2µs
offset:Pos(48264) code: 266 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    rax,0x4
  00041: mov    QWORD PTR [r14-0x40],rax
  00045: mov    QWORD PTR [r14-0x48],rax
  00049: mov    QWORD PTR [r14-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x3817d
  0005e: cmp    DWORD PTR [rdi+0x4],0x32
  00062: jne    0x3817d
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %3 = dynvar(3, %3)
  00068: mov    rax,QWORD PTR [rbp-0x18]
  0006c: mov    rax,QWORD PTR [rax]
  0006f: mov    rax,QWORD PTR [rax]
  00072: mov    rax,QWORD PTR [rax-0x30]
  00076: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = literal[5439489]
  0007a: mov    rax,0xa60003
  00081: mov    QWORD PTR [r14-0x50],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  00085: mov    rdi,QWORD PTR [r14-0x48]
  00089: test   rdi,0x1
  00090: je     0x3818c
  00096: cmp    DWORD PTR [rip+0xffffffffffff7690],0x26        # 0xffff772d
  0009d: jne    0x3818c
  000a3: mov    r9,QWORD PTR [r14-0x50]
  000a7: mov    rdx,rdi
  000aa: mov    QWORD PTR [rsp-0x40],rcx
  000af: mov    QWORD PTR [rsp-0x28],0x0
  000b8: lea    rcx,[r14-0x58]
  000bc: mov    r8,0x0
  000c3: mov    rsi,QWORD PTR [rbx]
  000c6: mov    QWORD PTR [rsp-0x18],rsi
  000cb: lea    rsi,[rsp-0x18]
  000d0: mov    QWORD PTR [rbx],rsi
  000d3: lea    r14,[rsp-0x10]
  000d8: mov    QWORD PTR [rsp-0x20],r14
  000dd: call   0x3819b
  000e2: lea    r14,[rbp-0x8]
  000e6: mov    QWORD PTR [rbx],r14
  000e9: mov    r14,QWORD PTR [rbp-0x10]
  000ed: movabs r13,0x55f67b8ba860
  000f7: test   rax,rax
  000fa: je     0xffff43ab
  00100: mov    QWORD PTR [r14-0x40],rax
:00004 
:00006 ret %2
  00104: mov    rax,QWORD PTR [r14-0x40]
  00108: leave  
  00109: ret    
==> start whole compile: <unnamed> FuncId(81) self_class:Scene start:[00000] bytecode:0x55f67b857090
<== finished compile. elapsed:63.2µs
offset:Pos(48530) code: 3856 bytes  data: 110 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jge    0x3d
  00017: mov    eax,0x1
  0001c: sub    eax,edx
  0001e: test   rax,rax
  00021: je     0x3d
  00027: lea    rdi,[r14-0x40]
  0002b: mov    QWORD PTR [rdi+rax*8],0x4
  00033: sub    rax,0x1
  00037: jne    0x2b
  0003d: mov    rax,0x4
  00044: mov    QWORD PTR [r14-0x40],rax
  00048: mov    QWORD PTR [r14-0x48],rax
  0004c: mov    QWORD PTR [r14-0x50],rax
  00050: mov    QWORD PTR [r14-0x58],rax
  00054: mov    QWORD PTR [r14-0x60],rax
  00058: mov    QWORD PTR [r14-0x68],rax
  0005c: mov    QWORD PTR [r14-0x70],rax
  00060: mov    QWORD PTR [r14-0x78],rax
  00064: mov    rdi,QWORD PTR [rbp-0x30]
  00068: test   rdi,0x7
  0006f: jne    0x380d2
  00075: cmp    DWORD PTR [rdi+0x4],0x32
  00079: jne    0x380d2
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffff75a8]        # 0xffff762e
  00086: cmp    rax,QWORD PTR [rip+0xea1]        # 0xf2e
  0008d: jne    0x380e1
  00093: mov    rax,QWORD PTR [rip+0xe84]        # 0xf1e
  0009a: mov    QWORD PTR [r14-0x60],rax
:00002 %7 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0xe98]        # 0xf3e
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x68],rax
:00003 %8 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0xe92]        # 0xf4e
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x70],rax
:00004 %9 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0xe8c]        # 0xf5e
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x78],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x60]
  000e4: test   rdi,0x7
  000eb: jne    0x38127
  000f1: cmp    DWORD PTR [rdi+0x4],0x29
  000f5: jne    0x38127
  000fb: cmp    DWORD PTR [rip+0xffffffffffff7521],0x26        # 0xffff7623
  00102: jne    0x38127
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x68]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x38136
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: movabs r13,0x55f67b857100
  00189: test   rax,rax
  0018c: je     0xffff42a1
  00192: mov    QWORD PTR [r14-0x40],rax
:00006 
:00008 %6 = dynvar(2, %3)
  00196: mov    rax,QWORD PTR [rbp-0x18]
  0019a: mov    rax,QWORD PTR [rax]
  0019d: mov    rax,QWORD PTR [rax-0x30]
  001a1: mov    QWORD PTR [r14-0x60],rax
:00009 %7 = literal[5373953]
  001a5: mov    rax,0xa40003
  001ac: mov    QWORD PTR [r14-0x68],rax
:00010 _ = %6.call times(&%7)               [Integer]
  001b0: mov    rdi,QWORD PTR [r14-0x60]
  001b4: test   rdi,0x1
  001bb: je     0x38168
  001c1: cmp    DWORD PTR [rip+0xffffffffffff745b],0x26        # 0xffff7623
  001c8: jne    0x38168
  001ce: mov    r9,QWORD PTR [r14-0x68]
  001d2: sub    rsp,0x10
  001d6: movq   QWORD PTR [rsp],xmm3
  001db: movq   QWORD PTR [rsp+0x8],xmm4
  001e1: mov    rdx,rdi
  001e4: mov    QWORD PTR [rsp-0x40],rcx
  001e9: mov    QWORD PTR [rsp-0x28],0x0
  001f2: lea    rcx,[r14-0x70]
  001f6: mov    r8,0x0
  001fd: mov    rsi,QWORD PTR [rbx]
  00200: mov    QWORD PTR [rsp-0x18],rsi
  00205: lea    rsi,[rsp-0x18]
  0020a: mov    QWORD PTR [rbx],rsi
  0020d: lea    r14,[rsp-0x10]
  00212: mov    QWORD PTR [rsp-0x20],r14
  00217: call   0x38177
  0021c: lea    r14,[rbp-0x8]
  00220: mov    QWORD PTR [rbx],r14
  00223: mov    r14,QWORD PTR [rbp-0x10]
  00227: movq   xmm3,QWORD PTR [rsp]
  0022c: movq   xmm4,QWORD PTR [rsp+0x8]
  00232: add    rsp,0x10
  00236: movabs r13,0x55f67b857150
  00240: test   rax,rax
  00243: je     0xffff42a1
:00011 
:00013 %6 = %2.call x()                     [Vec]
  00249: mov    rdi,QWORD PTR [r14-0x40]
  0024d: test   rdi,0x7
  00254: jne    0x381a9
  0025a: cmp    DWORD PTR [rdi+0x4],0x28
  0025e: jne    0x381a9
  00264: cmp    DWORD PTR [rip+0xffffffffffff73b8],0x26        # 0xffff7623
  0026b: jne    0x381a9
  00271: mov    esi,DWORD PTR [rip+0xcf3]        # 0xf6a
  00277: cmp    esi,0xffffffff
  0027a: je     0x381b8
  00280: cmp    WORD PTR [rdi+0x2],0x3
  00285: jne    0x29e
  0028b: cmp    esi,0x6
  0028e: jge    0x29e
  00294: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00299: jmp    0x2c8
  0029e: sub    rsp,0x10
  002a2: movq   QWORD PTR [rsp],xmm3
  002a7: movq   QWORD PTR [rsp+0x8],xmm4
  002ad: movabs rax,0x55f67a69e160
  002b7: call   rax
  002b9: movq   xmm3,QWORD PTR [rsp]
  002be: movq   xmm4,QWORD PTR [rsp+0x8]
  002c4: add    rsp,0x10
  002c8: mov    QWORD PTR [r14-0x60],rax
:00014 
:00016 %7 = dynvar(2, %5)
  002cc: mov    rax,QWORD PTR [rbp-0x18]
  002d0: mov    rax,QWORD PTR [rax]
  002d3: mov    rax,QWORD PTR [rax-0x40]
  002d7: mov    QWORD PTR [r14-0x68],rax
:00017 %8 = dynvar(2, %5)
  002db: mov    rax,QWORD PTR [rbp-0x18]
  002df: mov    rax,QWORD PTR [rax]
  002e2: mov    rax,QWORD PTR [rax-0x40]
  002e6: mov    QWORD PTR [r14-0x70],rax
:00018 %7 = %7 * %8                         [Float][Float]
  002ea: mov    rdi,QWORD PTR [r14-0x68]
  002ee: test   rdi,0x1
  002f5: jne    0x381ff
  002fb: test   rdi,0x2
  00302: je     0x33e
  00308: xorps  xmm2,xmm2
  0030b: movabs rax,0x8000000000000002
  00315: cmp    rdi,rax
  00318: je     0x350
  0031e: mov    rax,rdi
  00321: sar    rax,0x3f
  00325: add    rax,0x2
  00329: and    rdi,0xfffffffffffffffc
  0032d: or     rdi,rax
  00330: rol    rdi,0x3d
  00334: movq   xmm2,rdi
  00339: jmp    0x350
  0033e: call   0xffff42fa
  00343: test   rax,rax
  00346: je     0x381ff
  0034c: movq   xmm2,xmm0
  00350: mov    rdi,QWORD PTR [r14-0x70]
  00354: test   rdi,0x1
  0035b: jne    0x3820e
  00361: test   rdi,0x2
  00368: je     0x3a4
  0036e: xorps  xmm3,xmm3
  00371: movabs rax,0x8000000000000002
  0037b: cmp    rdi,rax
  0037e: je     0x3b6
  00384: mov    rax,rdi
  00387: sar    rax,0x3f
  0038b: add    rax,0x2
  0038f: and    rdi,0xfffffffffffffffc
  00393: or     rdi,rax
  00396: rol    rdi,0x3d
  0039a: movq   xmm3,rdi
  0039f: jmp    0x3b6
  003a4: call   0xffff42fa
  003a9: test   rax,rax
  003ac: je     0x3820e
  003b2: movq   xmm3,xmm0
  003b6: mulsd  xmm2,xmm3
:00019 %3 = %6 / %7                         [Float][Float]
  003ba: mov    rdi,QWORD PTR [r14-0x60]
  003be: test   rdi,0x1
  003c5: jne    0x3821d
  003cb: test   rdi,0x2
  003d2: je     0x40e
  003d8: xorps  xmm5,xmm5
  003db: movabs rax,0x8000000000000002
  003e5: cmp    rdi,rax
  003e8: je     0x420
  003ee: mov    rax,rdi
  003f1: sar    rax,0x3f
  003f5: add    rax,0x2
  003f9: and    rdi,0xfffffffffffffffc
  003fd: or     rdi,rax
  00400: rol    rdi,0x3d
  00404: movq   xmm5,rdi
  00409: jmp    0x420
  0040e: call   0xffff42fa
  00413: test   rax,rax
  00416: je     0x3821d
  0041c: movq   xmm5,xmm0
  00420: movq   xmm6,xmm5
  00424: movq   rax,xmm2
  00429: test   rax,rax
  0042c: je     0xffff42c6
  00432: divsd  xmm6,xmm2
:00020 %6 = %2.call y()                     [Vec]
  00436: mov    rdi,QWORD PTR [r14-0x40]
  0043a: test   rdi,0x7
  00441: jne    0x38239
  00447: cmp    DWORD PTR [rdi+0x4],0x28
  0044b: jne    0x38239
  00451: cmp    DWORD PTR [rip+0xffffffffffff71cb],0x26        # 0xffff7623
  00458: jne    0x38239
  0045e: mov    esi,DWORD PTR [rip+0xb0e]        # 0xf72
  00464: cmp    esi,0xffffffff
  00467: je     0x38262
  0046d: cmp    WORD PTR [rdi+0x2],0x3
  00472: jne    0x48b
  00478: cmp    esi,0x6
  0047b: jge    0x48b
  00481: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00486: jmp    0x4cd
  0048b: sub    rsp,0x20
  0048f: movq   QWORD PTR [rsp],xmm2
  00494: movq   QWORD PTR [rsp+0x8],xmm3
  0049a: movq   QWORD PTR [rsp+0x10],xmm4
  004a0: movq   QWORD PTR [rsp+0x18],xmm6
  004a6: movabs rax,0x55f67a69e160
  004b0: call   rax
  004b2: movq   xmm2,QWORD PTR [rsp]
  004b7: movq   xmm3,QWORD PTR [rsp+0x8]
  004bd: movq   xmm4,QWORD PTR [rsp+0x10]
  004c3: movq   xmm6,QWORD PTR [rsp+0x18]
  004c9: add    rsp,0x20
  004cd: mov    QWORD PTR [r14-0x60],rax
:00021 
:00023 %7 = dynvar(2, %5)
  004d1: mov    rax,QWORD PTR [rbp-0x18]
  004d5: mov    rax,QWORD PTR [rax]
  004d8: mov    rax,QWORD PTR [rax-0x40]
  004dc: mov    QWORD PTR [r14-0x68],rax
:00024 %8 = dynvar(2, %5)
  004e0: mov    rax,QWORD PTR [rbp-0x18]
  004e4: mov    rax,QWORD PTR [rax]
  004e7: mov    rax,QWORD PTR [rax-0x40]
  004eb: mov    QWORD PTR [r14-0x70],rax
:00025 %7 = %7 * %8                         [Float][Float]
  004ef: mov    rdi,QWORD PTR [r14-0x68]
  004f3: test   rdi,0x1
  004fa: jne    0x382c1
  00500: test   rdi,0x2
  00507: je     0x543
  0050d: xorps  xmm2,xmm2
  00510: movabs rax,0x8000000000000002
  0051a: cmp    rdi,rax
  0051d: je     0x555
  00523: mov    rax,rdi
  00526: sar    rax,0x3f
  0052a: add    rax,0x2
  0052e: and    rdi,0xfffffffffffffffc
  00532: or     rdi,rax
  00535: rol    rdi,0x3d
  00539: movq   xmm2,rdi
  0053e: jmp    0x555
  00543: call   0xffff42fa
  00548: test   rax,rax
  0054b: je     0x382c1
  00551: movq   xmm2,xmm0
  00555: mov    rdi,QWORD PTR [r14-0x70]
  00559: test   rdi,0x1
  00560: jne    0x382dd
  00566: test   rdi,0x2
  0056d: je     0x5a9
  00573: xorps  xmm3,xmm3
  00576: movabs rax,0x8000000000000002
  00580: cmp    rdi,rax
  00583: je     0x5bb
  00589: mov    rax,rdi
  0058c: sar    rax,0x3f
  00590: add    rax,0x2
  00594: and    rdi,0xfffffffffffffffc
  00598: or     rdi,rax
  0059b: rol    rdi,0x3d
  0059f: movq   xmm3,rdi
  005a4: jmp    0x5bb
  005a9: call   0xffff42fa
  005ae: test   rax,rax
  005b1: je     0x382dd
  005b7: movq   xmm3,xmm0
  005bb: mulsd  xmm2,xmm3
:00026 %4 = %6 / %7                         [Float][Float]
  005bf: mov    rdi,QWORD PTR [r14-0x60]
  005c3: test   rdi,0x1
  005ca: jne    0x382f9
  005d0: test   rdi,0x2
  005d7: je     0x613
  005dd: xorps  xmm5,xmm5
  005e0: movabs rax,0x8000000000000002
  005ea: cmp    rdi,rax
  005ed: je     0x625
  005f3: mov    rax,rdi
  005f6: sar    rax,0x3f
  005fa: add    rax,0x2
  005fe: and    rdi,0xfffffffffffffffc
  00602: or     rdi,rax
  00605: rol    rdi,0x3d
  00609: movq   xmm5,rdi
  0060e: jmp    0x625
  00613: call   0xffff42fa
  00618: test   rax,rax
  0061b: je     0x382f9
  00621: movq   xmm5,xmm0
  00625: movq   xmm7,xmm5
  00629: movq   rax,xmm2
  0062e: test   rax,rax
  00631: je     0xffff42c6
  00637: divsd  xmm7,xmm2
:00027 %6 = %2.call z()                     [Vec]
  0063b: mov    rdi,QWORD PTR [r14-0x40]
  0063f: test   rdi,0x7
  00646: jne    0x38322
  0064c: cmp    DWORD PTR [rdi+0x4],0x28
  00650: jne    0x38322
  00656: cmp    DWORD PTR [rip+0xffffffffffff6fc6],0x26        # 0xffff7623
  0065d: jne    0x38322
  00663: mov    esi,DWORD PTR [rip+0x911]        # 0xf7a
  00669: cmp    esi,0xffffffff
  0066c: je     0x38358
  00672: cmp    WORD PTR [rdi+0x2],0x3
  00677: jne    0x690
  0067d: cmp    esi,0x6
  00680: jge    0x690
  00686: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0068b: jmp    0x6de
  00690: sub    rsp,0x30
  00694: movq   QWORD PTR [rsp],xmm2
  00699: movq   QWORD PTR [rsp+0x8],xmm3
  0069f: movq   QWORD PTR [rsp+0x10],xmm4
  006a5: movq   QWORD PTR [rsp+0x18],xmm6
  006ab: movq   QWORD PTR [rsp+0x20],xmm7
  006b1: movabs rax,0x55f67a69e160
  006bb: call   rax
  006bd: movq   xmm2,QWORD PTR [rsp]
  006c2: movq   xmm3,QWORD PTR [rsp+0x8]
  006c8: movq   xmm4,QWORD PTR [rsp+0x10]
  006ce: movq   xmm6,QWORD PTR [rsp+0x18]
  006d4: movq   xmm7,QWORD PTR [rsp+0x20]
  006da: add    rsp,0x30
  006de: mov    QWORD PTR [r14-0x60],rax
:00028 
:00030 %7 = dynvar(2, %5)
  006e2: mov    rax,QWORD PTR [rbp-0x18]
  006e6: mov    rax,QWORD PTR [rax]
  006e9: mov    rax,QWORD PTR [rax-0x40]
  006ed: mov    QWORD PTR [r14-0x68],rax
:00031 %8 = dynvar(2, %5)
  006f1: mov    rax,QWORD PTR [rbp-0x18]
  006f5: mov    rax,QWORD PTR [rax]
  006f8: mov    rax,QWORD PTR [rax-0x40]
  006fc: mov    QWORD PTR [r14-0x70],rax
:00032 %7 = %7 * %8                         [Float][Float]
  00700: mov    rdi,QWORD PTR [r14-0x68]
  00704: test   rdi,0x1
  0070b: jne    0x383c3
  00711: test   rdi,0x2
  00718: je     0x754
  0071e: xorps  xmm2,xmm2
  00721: movabs rax,0x8000000000000002
  0072b: cmp    rdi,rax
  0072e: je     0x766
  00734: mov    rax,rdi
  00737: sar    rax,0x3f
  0073b: add    rax,0x2
  0073f: and    rdi,0xfffffffffffffffc
  00743: or     rdi,rax
  00746: rol    rdi,0x3d
  0074a: movq   xmm2,rdi
  0074f: jmp    0x766
  00754: call   0xffff42fa
  00759: test   rax,rax
  0075c: je     0x383c3
  00762: movq   xmm2,xmm0
  00766: mov    rdi,QWORD PTR [r14-0x70]
  0076a: test   rdi,0x1
  00771: jne    0x383ec
  00777: test   rdi,0x2
  0077e: je     0x7ba
  00784: xorps  xmm3,xmm3
  00787: movabs rax,0x8000000000000002
  00791: cmp    rdi,rax
  00794: je     0x7cc
  0079a: mov    rax,rdi
  0079d: sar    rax,0x3f
  007a1: add    rax,0x2
  007a5: and    rdi,0xfffffffffffffffc
  007a9: or     rdi,rax
  007ac: rol    rdi,0x3d
  007b0: movq   xmm3,rdi
  007b5: jmp    0x7cc
  007ba: call   0xffff42fa
  007bf: test   rax,rax
  007c2: je     0x383ec
  007c8: movq   xmm3,xmm0
  007cc: mulsd  xmm2,xmm3
:00033 %5 = %6 / %7                         [Float][Float]
  007d0: mov    rdi,QWORD PTR [r14-0x60]
  007d4: test   rdi,0x1
  007db: jne    0x38415
  007e1: test   rdi,0x2
  007e8: je     0x824
  007ee: xorps  xmm5,xmm5
  007f1: movabs rax,0x8000000000000002
  007fb: cmp    rdi,rax
  007fe: je     0x836
  00804: mov    rax,rdi
  00807: sar    rax,0x3f
  0080b: add    rax,0x2
  0080f: and    rdi,0xfffffffffffffffc
  00813: or     rdi,rax
  00816: rol    rdi,0x3d
  0081a: movq   xmm5,rdi
  0081f: jmp    0x836
  00824: call   0xffff42fa
  00829: test   rax,rax
  0082c: je     0x38415
  00832: movq   xmm5,xmm0
  00836: movq   xmm8,xmm5
  0083b: movq   rax,xmm2
  00840: test   rax,rax
  00843: je     0xffff42c6
  00849: divsd  xmm8,xmm2
:00034 %8 = %4
:00035 %7 = %0.call clamp(%8; 1)            [Scene]
  0084e: movq   xmm0,xmm7
  00852: call   0xffff441e
  00857: mov    QWORD PTR [r14-0x70],rax
  0085b: mov    rdi,QWORD PTR [r14-0x30]
  0085f: cmp    DWORD PTR [rip+0xffffffffffff6dbd],0x26        # 0xffff7623
  00866: jne    0x3844b
  0086c: sub    rsp,0x30
  00870: movq   QWORD PTR [rsp],xmm4
  00875: movq   QWORD PTR [rsp+0x8],xmm5
  0087b: movq   QWORD PTR [rsp+0x10],xmm6
  00881: movq   QWORD PTR [rsp+0x18],xmm7
  00887: movq   QWORD PTR [rsp+0x20],xmm8
  0088e: mov    QWORD PTR [rsp-0x28],0x0
  00897: mov    rax,QWORD PTR [r14-0x30]
  0089b: mov    QWORD PTR [rsp-0x40],rax
  008a0: mov    rdi,0x1
  008a7: lea    r8,[rsp-0x48]
  008ac: mov    rax,QWORD PTR [r14-0x70]
  008b0: mov    QWORD PTR [r8],rax
  008b3: sub    r8,0x8
  008b7: mov    QWORD PTR [rsp-0x38],0x0
  008c0: movabs rax,0x40000003b
  008ca: mov    QWORD PTR [rsp-0x30],rax
  008cf: movabs r13,0x55f67b8ba890
  008d9: mov    rsi,QWORD PTR [rbx]
  008dc: mov    QWORD PTR [rsp-0x18],rsi
  008e1: lea    rsi,[rsp-0x18]
  008e6: mov    QWORD PTR [rbx],rsi
  008e9: lea    r14,[rsp-0x10]
  008ee: mov    QWORD PTR [rsp-0x20],r14
  008f3: call   0xffffab6e
  008f8: lea    r14,[rbp-0x8]
  008fc: mov    QWORD PTR [rbx],r14
  008ff: mov    r14,QWORD PTR [rbp-0x10]
  00903: movq   xmm4,QWORD PTR [rsp]
  00908: movq   xmm5,QWORD PTR [rsp+0x8]
  0090e: movq   xmm6,QWORD PTR [rsp+0x10]
  00914: movq   xmm7,QWORD PTR [rsp+0x18]
  0091a: movq   xmm8,QWORD PTR [rsp+0x20]
  00921: add    rsp,0x30
  00925: movabs r13,0x55f67b8572e0
  0092f: test   rax,rax
  00932: je     0xffff42a1
  00938: mov    QWORD PTR [r14-0x68],rax
:00036 
:00038 %6 = %7.call chr()                   [Integer]
  0093c: mov    rdi,QWORD PTR [r14-0x68]
  00940: test   rdi,0x1
  00947: je     0x38482
  0094d: cmp    DWORD PTR [rip+0xffffffffffff6ccf],0x26        # 0xffff7623
  00954: jne    0x38482
  0095a: mov    r9,0x0
  00961: sub    rsp,0x20
  00965: movq   QWORD PTR [rsp],xmm4
  0096a: movq   QWORD PTR [rsp+0x8],xmm6
  00970: movq   QWORD PTR [rsp+0x10],xmm7
  00976: movq   QWORD PTR [rsp+0x18],xmm8
  0097d: mov    rdx,rdi
  00980: mov    QWORD PTR [rsp-0x40],rcx
  00985: mov    QWORD PTR [rsp-0x28],0x0
  0098e: lea    rcx,[r14-0x70]
  00992: mov    r8,0x0
  00999: mov    rsi,QWORD PTR [rbx]
  0099c: mov    QWORD PTR [rsp-0x18],rsi
  009a1: lea    rsi,[rsp-0x18]
  009a6: mov    QWORD PTR [rbx],rsi
  009a9: lea    r14,[rsp-0x10]
  009ae: mov    QWORD PTR [rsp-0x20],r14
  009b3: call   0x384b9
  009b8: lea    r14,[rbp-0x8]
  009bc: mov    QWORD PTR [rbx],r14
  009bf: mov    r14,QWORD PTR [rbp-0x10]
  009c3: movq   xmm4,QWORD PTR [rsp]
  009c8: movq   xmm6,QWORD PTR [rsp+0x8]
  009ce: movq   xmm7,QWORD PTR [rsp+0x10]
  009d4: movq   xmm8,QWORD PTR [rsp+0x18]
  009db: add    rsp,0x20
  009df: movabs r13,0x55f67b857310
  009e9: test   rax,rax
  009ec: je     0xffff42a1
  009f2: mov    QWORD PTR [r14-0x60],rax
:00039 
:00041 _ = %0.call print(%6; 1)             [Scene]
  009f6: mov    rdi,QWORD PTR [r14-0x30]
  009fa: cmp    DWORD PTR [rip+0xffffffffffff6c22],0x26        # 0xffff7623
  00a01: jne    0x384eb
  00a07: mov    r9,0x0
  00a0e: sub    rsp,0x20
  00a12: movq   QWORD PTR [rsp],xmm4
  00a17: movq   QWORD PTR [rsp+0x8],xmm6
  00a1d: movq   QWORD PTR [rsp+0x10],xmm7
  00a23: movq   QWORD PTR [rsp+0x18],xmm8
  00a2a: mov    rdx,rdi
  00a2d: mov    QWORD PTR [rsp-0x40],rcx
  00a32: mov    QWORD PTR [rsp-0x28],0x0
  00a3b: lea    rcx,[r14-0x60]
  00a3f: mov    r8,0x1
  00a46: mov    rsi,QWORD PTR [rbx]
  00a49: mov    QWORD PTR [rsp-0x18],rsi
  00a4e: lea    rsi,[rsp-0x18]
  00a53: mov    QWORD PTR [rbx],rsi
  00a56: lea    r14,[rsp-0x10]
  00a5b: mov    QWORD PTR [rsp-0x20],r14
  00a60: call   0x38522
  00a65: lea    r14,[rbp-0x8]
  00a69: mov    QWORD PTR [rbx],r14
  00a6c: mov    r14,QWORD PTR [rbp-0x10]
  00a70: movq   xmm4,QWORD PTR [rsp]
  00a75: movq   xmm6,QWORD PTR [rsp+0x8]
  00a7b: movq   xmm7,QWORD PTR [rsp+0x10]
  00a81: movq   xmm8,QWORD PTR [rsp+0x18]
  00a88: add    rsp,0x20
  00a8c: movabs r13,0x55f67b857340
  00a96: test   rax,rax
  00a99: je     0xffff42a1
:00042 
:00044 %8 = %3
:00045 %7 = %0.call clamp(%8; 1)            [Scene]
  00a9f: movq   xmm0,xmm6
  00aa3: call   0xffff441e
  00aa8: mov    QWORD PTR [r14-0x70],rax
  00aac: mov    rdi,QWORD PTR [r14-0x30]
  00ab0: cmp    DWORD PTR [rip+0xffffffffffff6b6c],0x26        # 0xffff7623
  00ab7: jne    0x38554
  00abd: sub    rsp,0x20
  00ac1: movq   QWORD PTR [rsp],xmm4
  00ac6: movq   QWORD PTR [rsp+0x8],xmm6
  00acc: movq   QWORD PTR [rsp+0x10],xmm7
  00ad2: movq   QWORD PTR [rsp+0x18],xmm8
  00ad9: mov    QWORD PTR [rsp-0x28],0x0
  00ae2: mov    rax,QWORD PTR [r14-0x30]
  00ae6: mov    QWORD PTR [rsp-0x40],rax
  00aeb: mov    rdi,0x1
  00af2: lea    r8,[rsp-0x48]
  00af7: mov    rax,QWORD PTR [r14-0x70]
  00afb: mov    QWORD PTR [r8],rax
  00afe: sub    r8,0x8
  00b02: mov    QWORD PTR [rsp-0x38],0x0
  00b0b: movabs rax,0x40000003b
  00b15: mov    QWORD PTR [rsp-0x30],rax
  00b1a: movabs r13,0x55f67b8ba890
  00b24: mov    rsi,QWORD PTR [rbx]
  00b27: mov    QWORD PTR [rsp-0x18],rsi
  00b2c: lea    rsi,[rsp-0x18]
  00b31: mov    QWORD PTR [rbx],rsi
  00b34: lea    r14,[rsp-0x10]
  00b39: mov    QWORD PTR [rsp-0x20],r14
  00b3e: call   0xffffab6e
  00b43: lea    r14,[rbp-0x8]
  00b47: mov    QWORD PTR [rbx],r14
  00b4a: mov    r14,QWORD PTR [rbp-0x10]
  00b4e: movq   xmm4,QWORD PTR [rsp]
  00b53: movq   xmm6,QWORD PTR [rsp+0x8]
  00b59: movq   xmm7,QWORD PTR [rsp+0x10]
  00b5f: movq   xmm8,QWORD PTR [rsp+0x18]
  00b66: add    rsp,0x20
  00b6a: movabs r13,0x55f67b857380
  00b74: test   rax,rax
  00b77: je     0xffff42a1
  00b7d: mov    QWORD PTR [r14-0x68],rax
:00046 
:00048 %6 = %7.call chr()                   [Integer]
  00b81: mov    rdi,QWORD PTR [r14-0x68]
  00b85: test   rdi,0x1
  00b8c: je     0x3858b
  00b92: cmp    DWORD PTR [rip+0xffffffffffff6a8a],0x26        # 0xffff7623
  00b99: jne    0x3858b
  00b9f: mov    r9,0x0
  00ba6: sub    rsp,0x20
  00baa: movq   QWORD PTR [rsp],xmm4
  00baf: movq   QWORD PTR [rsp+0x8],xmm6
  00bb5: movq   QWORD PTR [rsp+0x10],xmm7
  00bbb: movq   QWORD PTR [rsp+0x18],xmm8
  00bc2: mov    rdx,rdi
  00bc5: mov    QWORD PTR [rsp-0x40],rcx
  00bca: mov    QWORD PTR [rsp-0x28],0x0
  00bd3: lea    rcx,[r14-0x70]
  00bd7: mov    r8,0x0
  00bde: mov    rsi,QWORD PTR [rbx]
  00be1: mov    QWORD PTR [rsp-0x18],rsi
  00be6: lea    rsi,[rsp-0x18]
  00beb: mov    QWORD PTR [rbx],rsi
  00bee: lea    r14,[rsp-0x10]
  00bf3: mov    QWORD PTR [rsp-0x20],r14
  00bf8: call   0x385c2
  00bfd: lea    r14,[rbp-0x8]
  00c01: mov    QWORD PTR [rbx],r14
  00c04: mov    r14,QWORD PTR [rbp-0x10]
  00c08: movq   xmm4,QWORD PTR [rsp]
  00c0d: movq   xmm6,QWORD PTR [rsp+0x8]
  00c13: movq   xmm7,QWORD PTR [rsp+0x10]
  00c19: movq   xmm8,QWORD PTR [rsp+0x18]
  00c20: add    rsp,0x20
  00c24: movabs r13,0x55f67b8573b0
  00c2e: test   rax,rax
  00c31: je     0xffff42a1
  00c37: mov    QWORD PTR [r14-0x60],rax
:00049 
:00051 _ = %0.call print(%6; 1)             [Scene]
  00c3b: mov    rdi,QWORD PTR [r14-0x30]
  00c3f: cmp    DWORD PTR [rip+0xffffffffffff69dd],0x26        # 0xffff7623
  00c46: jne    0x385f4
  00c4c: mov    r9,0x0
  00c53: sub    rsp,0x20
  00c57: movq   QWORD PTR [rsp],xmm4
  00c5c: movq   QWORD PTR [rsp+0x8],xmm6
  00c62: movq   QWORD PTR [rsp+0x10],xmm7
  00c68: movq   QWORD PTR [rsp+0x18],xmm8
  00c6f: mov    rdx,rdi
  00c72: mov    QWORD PTR [rsp-0x40],rcx
  00c77: mov    QWORD PTR [rsp-0x28],0x0
  00c80: lea    rcx,[r14-0x60]
  00c84: mov    r8,0x1
  00c8b: mov    rsi,QWORD PTR [rbx]
  00c8e: mov    QWORD PTR [rsp-0x18],rsi
  00c93: lea    rsi,[rsp-0x18]
  00c98: mov    QWORD PTR [rbx],rsi
  00c9b: lea    r14,[rsp-0x10]
  00ca0: mov    QWORD PTR [rsp-0x20],r14
  00ca5: call   0x3862b
  00caa: lea    r14,[rbp-0x8]
  00cae: mov    QWORD PTR [rbx],r14
  00cb1: mov    r14,QWORD PTR [rbp-0x10]
  00cb5: movq   xmm4,QWORD PTR [rsp]
  00cba: movq   xmm6,QWORD PTR [rsp+0x8]
  00cc0: movq   xmm7,QWORD PTR [rsp+0x10]
  00cc6: movq   xmm8,QWORD PTR [rsp+0x18]
  00ccd: add    rsp,0x20
  00cd1: movabs r13,0x55f67b8573e0
  00cdb: test   rax,rax
  00cde: je     0xffff42a1
:00052 
:00054 %9 = %5
:00055 %8 = %0.call clamp(%9; 1)            [Scene]
  00ce4: movq   xmm0,xmm8
  00ce9: call   0xffff441e
  00cee: mov    QWORD PTR [r14-0x78],rax
  00cf2: mov    rdi,QWORD PTR [r14-0x30]
  00cf6: cmp    DWORD PTR [rip+0xffffffffffff6926],0x26        # 0xffff7623
  00cfd: jne    0x3865d
  00d03: sub    rsp,0x20
  00d07: movq   QWORD PTR [rsp],xmm6
  00d0c: movq   QWORD PTR [rsp+0x8],xmm7
  00d12: movq   QWORD PTR [rsp+0x10],xmm8
  00d19: mov    QWORD PTR [rsp-0x28],0x0
  00d22: mov    rax,QWORD PTR [r14-0x30]
  00d26: mov    QWORD PTR [rsp-0x40],rax
  00d2b: mov    rdi,0x1
  00d32: lea    r8,[rsp-0x48]
  00d37: mov    rax,QWORD PTR [r14-0x78]
  00d3b: mov    QWORD PTR [r8],rax
  00d3e: sub    r8,0x8
  00d42: mov    QWORD PTR [rsp-0x38],0x0
  00d4b: movabs rax,0x40000003b
  00d55: mov    QWORD PTR [rsp-0x30],rax
  00d5a: movabs r13,0x55f67b8ba890
  00d64: mov    rsi,QWORD PTR [rbx]
  00d67: mov    QWORD PTR [rsp-0x18],rsi
  00d6c: lea    rsi,[rsp-0x18]
  00d71: mov    QWORD PTR [rbx],rsi
  00d74: lea    r14,[rsp-0x10]
  00d79: mov    QWORD PTR [rsp-0x20],r14
  00d7e: call   0xffffab6e
  00d83: lea    r14,[rbp-0x8]
  00d87: mov    QWORD PTR [rbx],r14
  00d8a: mov    r14,QWORD PTR [rbp-0x10]
  00d8e: movq   xmm6,QWORD PTR [rsp]
  00d93: movq   xmm7,QWORD PTR [rsp+0x8]
  00d99: movq   xmm8,QWORD PTR [rsp+0x10]
  00da0: add    rsp,0x20
  00da4: movabs r13,0x55f67b857420
  00dae: test   rax,rax
  00db1: je     0xffff42a1
  00db7: mov    QWORD PTR [r14-0x70],rax
:00056 
:00058 %7 = %8.call chr()                   [Integer]
  00dbb: mov    rdi,QWORD PTR [r14-0x70]
  00dbf: test   rdi,0x1
  00dc6: je     0x38694
  00dcc: cmp    DWORD PTR [rip+0xffffffffffff6850],0x26        # 0xffff7623
  00dd3: jne    0x38694
  00dd9: mov    r9,0x0
  00de0: sub    rsp,0x20
  00de4: movq   QWORD PTR [rsp],xmm6
  00de9: movq   QWORD PTR [rsp+0x8],xmm7
  00def: movq   QWORD PTR [rsp+0x10],xmm8
  00df6: mov    rdx,rdi
  00df9: mov    QWORD PTR [rsp-0x40],rcx
  00dfe: mov    QWORD PTR [rsp-0x28],0x0
  00e07: lea    rcx,[r14-0x78]
  00e0b: mov    r8,0x0
  00e12: mov    rsi,QWORD PTR [rbx]
  00e15: mov    QWORD PTR [rsp-0x18],rsi
  00e1a: lea    rsi,[rsp-0x18]
  00e1f: mov    QWORD PTR [rbx],rsi
  00e22: lea    r14,[rsp-0x10]
  00e27: mov    QWORD PTR [rsp-0x20],r14
  00e2c: call   0x386cb
  00e31: lea    r14,[rbp-0x8]
  00e35: mov    QWORD PTR [rbx],r14
  00e38: mov    r14,QWORD PTR [rbp-0x10]
  00e3c: movq   xmm6,QWORD PTR [rsp]
  00e41: movq   xmm7,QWORD PTR [rsp+0x8]
  00e47: movq   xmm8,QWORD PTR [rsp+0x10]
  00e4e: add    rsp,0x20
  00e52: movabs r13,0x55f67b857450
  00e5c: test   rax,rax
  00e5f: je     0xffff42a1
  00e65: mov    QWORD PTR [r14-0x68],rax
:00059 
:00061 %6 = %0.call print(%7; 1)            [Scene]
  00e69: mov    rdi,QWORD PTR [r14-0x30]
  00e6d: cmp    DWORD PTR [rip+0xffffffffffff67af],0x26        # 0xffff7623
  00e74: jne    0x386fd
  00e7a: mov    r9,0x0
  00e81: sub    rsp,0x20
  00e85: movq   QWORD PTR [rsp],xmm6
  00e8a: movq   QWORD PTR [rsp+0x8],xmm7
  00e90: movq   QWORD PTR [rsp+0x10],xmm8
  00e97: mov    rdx,rdi
  00e9a: mov    QWORD PTR [rsp-0x40],rcx
  00e9f: mov    QWORD PTR [rsp-0x28],0x0
  00ea8: lea    rcx,[r14-0x68]
  00eac: mov    r8,0x1
  00eb3: mov    rsi,QWORD PTR [rbx]
  00eb6: mov    QWORD PTR [rsp-0x18],rsi
  00ebb: lea    rsi,[rsp-0x18]
  00ec0: mov    QWORD PTR [rbx],rsi
  00ec3: lea    r14,[rsp-0x10]
  00ec8: mov    QWORD PTR [rsp-0x20],r14
  00ecd: call   0x38734
  00ed2: lea    r14,[rbp-0x8]
  00ed6: mov    QWORD PTR [rbx],r14
  00ed9: mov    r14,QWORD PTR [rbp-0x10]
  00edd: movq   xmm6,QWORD PTR [rsp]
  00ee2: movq   xmm7,QWORD PTR [rsp+0x8]
  00ee8: movq   xmm8,QWORD PTR [rsp+0x10]
  00eef: add    rsp,0x20
  00ef3: movabs r13,0x55f67b857480
  00efd: test   rax,rax
  00f00: je     0xffff42a1
  00f06: mov    QWORD PTR [r14-0x60],rax
:00062 
:00064 ret %6
  00f0a: mov    rax,QWORD PTR [r14-0x60]
  00f0e: leave  
  00f0f: ret    
==> start whole compile: <unnamed> FuncId(79) self_class:Scene start:[00000] bytecode:0x55f67b846830
<== finished compile. elapsed:23µs
offset:Pos(52496) code: 261 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [rbp-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x377f7
  0005b: cmp    DWORD PTR [rdi+0x4],0x32
  0005f: jne    0x377f7
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  00065: mov    rax,QWORD PTR [rbp-0x18]
  00069: mov    rax,QWORD PTR [rax-0x20]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[5308417]
  00071: mov    rax,0xa20003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 _ = %2.call times(&%3)               [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x37806
  0008d: cmp    DWORD PTR [rip+0xffffffffffff6611],0x26        # 0xffff66a5
  00094: jne    0x37806
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x37815
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: movabs r13,0x55f67b846880
  000ee: test   rax,rax
  000f1: je     0xffff3323
:00004 
:00006 %2 = nil
  000f7: mov    QWORD PTR [r14-0x40],0x4
:00007 ret %2
  000ff: mov    rax,QWORD PTR [r14-0x40]
  00103: leave  
  00104: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55f67b86e960
load_ivar: no profile
<== finished compile. elapsed:132.4µs
offset:Pos(53806) code: 5969 bytes  data: 241 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x37329
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x37338
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x37338
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x37347
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x37347
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffff60e9],0x26        # 0xffff6187
  0009e:    	jne    0x37347
  000a4:    	mov    esi,DWORD PTR [rip+0x16ab]        # 0x1755
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x37356
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: f6 	movabs rax,0x55f67a69e160
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x3737f
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x3737f
  00108: 26 	cmp    DWORD PTR [rip+0xffffffffffff6078],0x26        # 0xffff6187
  0010f:    	jne    0x3737f
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	lea    r8,[rsp-0x48]
  00133:    	mov    rax,QWORD PTR [r14-0x80]
  00137:    	mov    QWORD PTR [r8],rax
  0013a:    	sub    r8,0x8
  0013e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00147: 08 	movabs rax,0x800000040
  00151:    	mov    QWORD PTR [rsp-0x30],rax
  00156: f6 	movabs r13,0x55f67b855f60
  00160:    	mov    rsi,QWORD PTR [rbx]
  00163:    	mov    QWORD PTR [rsp-0x18],rsi
  00168:    	lea    rsi,[rsp-0x18]
  0016d:    	mov    QWORD PTR [rbx],rsi
  00170:    	lea    r14,[rsp-0x10]
  00175:    	mov    QWORD PTR [rsp-0x20],r14
  0017a:    	call   0xffff6e28
  0017f:    	lea    r14,[rbp-0x8]
  00183:    	mov    QWORD PTR [rbx],r14
  00186:    	mov    r14,QWORD PTR [rbp-0x10]
  0018a: f6 	movabs r13,0x55f67b86e9d0
  00194:    	test   rax,rax
  00197:    	je     0xffff2e05
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x3738e
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b6:    	jne    0x3738e
  001bc: 26 	cmp    DWORD PTR [rip+0xffffffffffff5fc4],0x26        # 0xffff6187
  001c3:    	jne    0x3738e
  001c9:    	mov    esi,DWORD PTR [rip+0x158e]        # 0x175d
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x3739d
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: f6 	movabs rax,0x55f67a69e160
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x373c6
  00217:    	cmp    DWORD PTR [rdi+0x4],0x28
  0021b:    	jne    0x373c6
  00221: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f5f],0x26        # 0xffff6187
  00228:    	jne    0x373c6
  0022e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00237:    	mov    rax,QWORD PTR [r14-0x48]
  0023b:    	mov    QWORD PTR [rsp-0x40],rax
  00240: 00 	mov    rdi,0x1
  00247:    	lea    r8,[rsp-0x48]
  0024c:    	mov    rax,QWORD PTR [r14-0x78]
  00250:    	mov    QWORD PTR [r8],rax
  00253:    	sub    r8,0x8
  00257: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00260: 05 	movabs rax,0x500000042
  0026a:    	mov    QWORD PTR [rsp-0x30],rax
  0026f: f6 	movabs r13,0x55f67b88de50
  00279:    	mov    rsi,QWORD PTR [rbx]
  0027c:    	mov    QWORD PTR [rsp-0x18],rsi
  00281:    	lea    rsi,[rsp-0x18]
  00286:    	mov    QWORD PTR [rbx],rsi
  00289:    	lea    r14,[rsp-0x10]
  0028e:    	mov    QWORD PTR [rsp-0x20],r14
  00293:    	call   0xffff6eba
  00298:    	lea    r14,[rbp-0x8]
  0029c:    	mov    QWORD PTR [rbx],r14
  0029f:    	mov    r14,QWORD PTR [rbp-0x10]
  002a3: f6 	movabs r13,0x55f67b86ea30
  002ad:    	test   rax,rax
  002b0:    	je     0xffff2e05
  002b6:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ba:    	mov    rax,QWORD PTR [r14-0x48]
  002be:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002c2:    	mov    rdi,QWORD PTR [r14-0x48]
  002c6: 00 	test   rdi,0x7
  002cd:    	jne    0x373d5
  002d3:    	cmp    DWORD PTR [rdi+0x4],0x28
  002d7:    	jne    0x373d5
  002dd: 26 	cmp    DWORD PTR [rip+0xffffffffffff5ea3],0x26        # 0xffff6187
  002e4:    	jne    0x373d5
  002ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002f3:    	mov    rax,QWORD PTR [r14-0x48]
  002f7:    	mov    QWORD PTR [rsp-0x40],rax
  002fc: 00 	mov    rdi,0x1
  00303:    	lea    r8,[rsp-0x48]
  00308:    	mov    rax,QWORD PTR [r14-0x80]
  0030c:    	mov    QWORD PTR [r8],rax
  0030f:    	sub    r8,0x8
  00313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0031c: 05 	movabs rax,0x500000042
  00326:    	mov    QWORD PTR [rsp-0x30],rax
  0032b: f6 	movabs r13,0x55f67b88de50
  00335:    	mov    rsi,QWORD PTR [rbx]
  00338:    	mov    QWORD PTR [rsp-0x18],rsi
  0033d:    	lea    rsi,[rsp-0x18]
  00342:    	mov    QWORD PTR [rbx],rsi
  00345:    	lea    r14,[rsp-0x10]
  0034a:    	mov    QWORD PTR [rsp-0x20],r14
  0034f:    	call   0xffff6eba
  00354:    	lea    r14,[rbp-0x8]
  00358:    	mov    QWORD PTR [rbx],r14
  0035b:    	mov    r14,QWORD PTR [rbp-0x10]
  0035f: f6 	movabs r13,0x55f67b86ea70
  00369:    	test   rax,rax
  0036c:    	je     0xffff2e05
  00372:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00376:    	mov    rdi,QWORD PTR [rbp-0x30]
  0037a:    	mov    rax,QWORD PTR [rdi+0x18]
  0037e:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00382:    	mov    rdi,QWORD PTR [rbp-0x30]
  00386:    	mov    rax,QWORD PTR [rdi+0x18]
  0038a: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00391:    	mov    rdi,QWORD PTR [r14-0x80]
  00395: 00 	test   rdi,0x1
  0039c:    	jne    0x373e4
  003a2: 00 	test   rdi,0x2
  003a9:    	je     0x3e5
  003af:    	xorps  xmm2,xmm2
  003b2: 00 	movabs rax,0x8000000000000002
  003bc:    	cmp    rdi,rax
  003bf:    	je     0x3f7
  003c5:    	mov    rax,rdi
  003c8:    	sar    rax,0x3f
  003cc:    	add    rax,0x2
  003d0:    	and    rdi,0xfffffffffffffffc
  003d4:    	or     rdi,rax
  003d7:    	rol    rdi,0x3d
  003db:    	movq   xmm2,rdi
  003e0:    	jmp    0x3f7
  003e5:    	call   0xffff2e5e
  003ea:    	test   rax,rax
  003ed:    	je     0x373e4
  003f3:    	movq   xmm2,xmm0
  003f7: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003fe: 00 	test   rdi,0x1
  00405:    	jne    0x373f3
  0040b: 00 	test   rdi,0x2
  00412:    	je     0x44e
  00418:    	xorps  xmm3,xmm3
  0041b: 00 	movabs rax,0x8000000000000002
  00425:    	cmp    rdi,rax
  00428:    	je     0x460
  0042e:    	mov    rax,rdi
  00431:    	sar    rax,0x3f
  00435:    	add    rax,0x2
  00439:    	and    rdi,0xfffffffffffffffc
  0043d:    	or     rdi,rax
  00440:    	rol    rdi,0x3d
  00444:    	movq   xmm3,rdi
  00449:    	jmp    0x460
  0044e:    	call   0xffff2e5e
  00453:    	test   rax,rax
  00456:    	je     0x373f3
  0045c:    	movq   xmm3,xmm0
  00460:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00464:    	mov    rdi,QWORD PTR [r14-0x78]
  00468: 00 	test   rdi,0x1
  0046f:    	jne    0x37402
  00475: 00 	test   rdi,0x2
  0047c:    	je     0x4b8
  00482:    	xorps  xmm4,xmm4
  00485: 00 	movabs rax,0x8000000000000002
  0048f:    	cmp    rdi,rax
  00492:    	je     0x4ca
  00498:    	mov    rax,rdi
  0049b:    	sar    rax,0x3f
  0049f:    	add    rax,0x2
  004a3:    	and    rdi,0xfffffffffffffffc
  004a7:    	or     rdi,rax
  004aa:    	rol    rdi,0x3d
  004ae:    	movq   xmm4,rdi
  004b3:    	jmp    0x4ca
  004b8:    	call   0xffff2e5e
  004bd:    	test   rax,rax
  004c0:    	je     0x37402
  004c6:    	movq   xmm4,xmm0
  004ca:    	movq   xmm5,xmm4
  004ce:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004d2:    	mov    rdi,QWORD PTR [r14-0x50]
  004d6: 00 	test   rdi,0x1
  004dd:    	jne    0x3741e
  004e3: 00 	test   rdi,0x2
  004ea:    	je     0x526
  004f0:    	xorps  xmm6,xmm6
  004f3: 00 	movabs rax,0x8000000000000002
  004fd:    	cmp    rdi,rax
  00500:    	je     0x538
  00506:    	mov    rax,rdi
  00509:    	sar    rax,0x3f
  0050d:    	add    rax,0x2
  00511:    	and    rdi,0xfffffffffffffffc
  00515:    	or     rdi,rax
  00518:    	rol    rdi,0x3d
  0051c:    	movq   xmm6,rdi
  00521:    	jmp    0x538
  00526:    	call   0xffff2e5e
  0052b:    	test   rax,rax
  0052e:    	je     0x3741e
  00534:    	movq   xmm6,xmm0
  00538:    	movq   xmm4,xmm6
  0053c:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  00540:    	movq   xmm7,xmm4
  00544:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00548: 00 	movq   xmm4,QWORD PTR [rip+0x1212]        # 0x1762
  00550: 00 	movabs rax,0x8000000000000002
  0055a:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0055e:    	ucomisd xmm7,xmm4
  00562:    	jbe    0x38141
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00568: 01 	sub    DWORD PTR [rip+0x11fb],0x1        # 0x176a
  0056f:    	je     0x3748a
  00575:    	movq   xmm0,xmm6
  00579:    	call   0xffff2f82
  0057e:    	mov    QWORD PTR [r14-0x78],rax
  00582:    	sub    rsp,0x30
  00586:    	movq   QWORD PTR [rsp],xmm2
  0058b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00591:    	movq   QWORD PTR [rsp+0x10],xmm5
  00597:    	movq   QWORD PTR [rsp+0x18],xmm6
  0059d:    	movq   QWORD PTR [rsp+0x20],xmm7
  005a3:    	mov    rdi,QWORD PTR [r14-0x78]
  005a7:    	mov    rdx,rdi
  005aa:    	mov    rdi,rbx
  005ad:    	mov    rsi,r12
  005b0: f6 	movabs rax,0x55f67a6dcb60
  005ba:    	call   rax
  005bc:    	movq   xmm2,QWORD PTR [rsp]
  005c1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005cd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005d3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005d9:    	add    rsp,0x30
  005dd: f6 	movabs r13,0x55f67b86eb30
  005e7:    	test   rax,rax
  005ea:    	je     0xffff2e05
  005f0:    	mov    QWORD PTR [r14-0x78],rax
:00029 %11 = const[Math]                    [<INVALID>]
  005f4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5b97]        # 0xffff6192
  005fb: 00 	cmp    rax,QWORD PTR [rip+0x1180]        # 0x1782
  00602:    	jne    0x374a8
  00608: 00 	mov    rax,QWORD PTR [rip+0x1163]        # 0x1772
  0060f: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00616: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0061d: 00 	test   rdi,0x7
  00624:    	jne    0x37524
  0062a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0062e:    	jne    0x37524
  00634: 26 	cmp    DWORD PTR [rip+0xffffffffffff5b4c],0x26        # 0xffff6187
  0063b:    	jne    0x37524
  00641:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00645:    	movq   xmm0,xmm2
  00649:    	call   0xffff2f82
  0064e:    	mov    QWORD PTR [r14-0x80],rax
  00652:    	mov    rdi,QWORD PTR [r14-0x78]
  00656:    	mov    rsi,QWORD PTR [r14-0x80]
  0065a:    	sub    rsp,0x20
  0065e:    	movq   QWORD PTR [rsp],xmm2
  00663:    	movq   QWORD PTR [rsp+0x8],xmm5
  00669:    	movq   QWORD PTR [rsp+0x10],xmm6
  0066f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00675:    	mov    rdx,rdi
  00678:    	mov    rcx,rsi
  0067b:    	mov    rdi,rbx
  0067e:    	mov    rsi,r12
  00681: f6 	movabs rax,0x55f67a6deed0
  0068b:    	call   rax
  0068d:    	movq   xmm2,QWORD PTR [rsp]
  00692:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00698:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0069e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  006a4:    	add    rsp,0x20
  006a8: f6 	movabs r13,0x55f67b86eb90
  006b2:    	test   rax,rax
  006b5:    	je     0xffff2e05
  006bb:    	mov    QWORD PTR [r14-0x68],rax
:00035 %9 = literal[0.0]
  006bf: 00 	movq   xmm3,QWORD PTR [rip+0x10cb]        # 0x1792
  006c7: 00 	movabs rax,0x8000000000000002
  006d1:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  006d5:    	mov    rdi,QWORD PTR [r14-0x68]
  006d9:    	mov    rsi,QWORD PTR [r14-0x78]
  006dd: 00 	test   rdi,0x1
  006e4:    	je     0x37554
  006ea: 00 	test   rsi,0x1
  006f1:    	je     0x37554
  006f7:    	cmp    rdi,rsi
  006fa:    	jle    0x38028
:00038 %9 = %2.call t()                     [Isect]
  00700:    	mov    rdi,QWORD PTR [r14-0x40]
  00704: 00 	test   rdi,0x7
  0070b:    	jne    0x375a9
  00711:    	cmp    DWORD PTR [rdi+0x4],0x30
  00715:    	jne    0x375a9
  0071b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a65],0x26        # 0xffff6187
  00722:    	jne    0x375a9
  00728:    	mov    esi,DWORD PTR [rip+0x1070]        # 0x179e
  0072e:    	cmp    esi,0xffffffff
  00731:    	je     0x375d9
  00737:    	cmp    WORD PTR [rdi+0x2],0x3
  0073c:    	jne    0x755
  00742:    	cmp    esi,0x6
  00745:    	jge    0x755
  0074b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00750:    	jmp    0x797
  00755:    	sub    rsp,0x20
  00759:    	movq   QWORD PTR [rsp],xmm2
  0075e:    	movq   QWORD PTR [rsp+0x8],xmm5
  00764:    	movq   QWORD PTR [rsp+0x10],xmm6
  0076a:    	movq   QWORD PTR [rsp+0x18],xmm7
  00770: f6 	movabs rax,0x55f67a69e160
  0077a:    	call   rax
  0077c:    	movq   xmm2,QWORD PTR [rsp]
  00781:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00787:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0078d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00793:    	add    rsp,0x20
  00797:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  0079b:    	mov    rdi,QWORD PTR [r14-0x68]
  0079f:    	mov    rsi,QWORD PTR [r14-0x78]
  007a3: 00 	test   rdi,0x1
  007aa:    	je     0x37638
  007b0: 00 	test   rsi,0x1
  007b7:    	je     0x37638
  007bd:    	cmp    rdi,rsi
  007c0:    	jge    0x3809b
:00043 _ = %2.call t=(%7; 1)                [Isect]
  007c6:    	mov    rdi,QWORD PTR [r14-0x40]
  007ca: 00 	test   rdi,0x7
  007d1:    	jne    0x3768d
  007d7:    	cmp    DWORD PTR [rdi+0x4],0x30
  007db:    	jne    0x3768d
  007e1: 26 	cmp    DWORD PTR [rip+0xffffffffffff599f],0x26        # 0xffff6187
  007e8:    	jne    0x3768d
  007ee:    	mov    esi,DWORD PTR [rip+0xfb2]        # 0x17a6
  007f4:    	cmp    esi,0xffffffff
  007f7:    	je     0x376bd
  007fd:    	cmp    WORD PTR [rdi+0x2],0x3
  00802:    	jne    0x81f
  00808:    	cmp    esi,0x6
  0080b:    	jge    0x81f
  00811:    	mov    rax,QWORD PTR [r14-0x68]
  00815:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0081a:    	jmp    0x878
  0081f:    	sub    rsp,0x20
  00823:    	movq   QWORD PTR [rsp],xmm2
  00828:    	movq   QWORD PTR [rsp+0x8],xmm5
  0082e:    	movq   QWORD PTR [rsp+0x10],xmm6
  00834:    	movq   QWORD PTR [rsp+0x18],xmm7
  0083a:    	mov    rdx,QWORD PTR [r14-0x68]
  0083e: f6 	movabs rax,0x55f67a69e3e0
  00848:    	call   rax
  0084a:    	movq   xmm2,QWORD PTR [rsp]
  0084f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00855:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0085b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00861:    	add    rsp,0x20
  00865: f6 	movabs r13,0x55f67b86ec30
  0086f:    	test   rax,rax
  00872:    	je     0xffff2e05
:00044 
:00046 %9 = literal[true]
  00878: 00 	mov    rax,0x1c
  0087f:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  00883:    	mov    rdi,QWORD PTR [r14-0x40]
  00887: 00 	test   rdi,0x7
  0088e:    	jne    0x37723
  00894:    	cmp    DWORD PTR [rdi+0x4],0x30
  00898:    	jne    0x37723
  0089e: 26 	cmp    DWORD PTR [rip+0xffffffffffff58e2],0x26        # 0xffff6187
  008a5:    	jne    0x37723
  008ab:    	mov    esi,DWORD PTR [rip+0xefd]        # 0x17ae
  008b1:    	cmp    esi,0xffffffff
  008b4:    	je     0x37753
  008ba:    	cmp    WORD PTR [rdi+0x2],0x3
  008bf:    	jne    0x8dc
  008c5:    	cmp    esi,0x6
  008c8:    	jge    0x8dc
  008ce:    	mov    rax,QWORD PTR [r14-0x78]
  008d2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  008d7:    	jmp    0x935
  008dc:    	sub    rsp,0x20
  008e0:    	movq   QWORD PTR [rsp],xmm2
  008e5:    	movq   QWORD PTR [rsp+0x8],xmm5
  008eb:    	movq   QWORD PTR [rsp+0x10],xmm6
  008f1:    	movq   QWORD PTR [rsp+0x18],xmm7
  008f7:    	mov    rdx,QWORD PTR [r14-0x78]
  008fb: f6 	movabs rax,0x55f67a69e3e0
  00905:    	call   rax
  00907:    	movq   xmm2,QWORD PTR [rsp]
  0090c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00912:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00918:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0091e:    	add    rsp,0x20
  00922: f6 	movabs r13,0x55f67b86ec70
  0092c:    	test   rax,rax
  0092f:    	je     0xffff2e05
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00935: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5856]        # 0xffff6192
  0093c: 00 	cmp    rax,QWORD PTR [rip+0xe7f]        # 0x17c2
  00943:    	jne    0x377b9
  00949: 00 	mov    rax,QWORD PTR [rip+0xe62]        # 0x17b2
  00950:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [Ray]
  00954:    	mov    rdi,QWORD PTR [r14-0x38]
  00958: 00 	test   rdi,0x7
  0095f:    	jne    0x37829
  00965:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00969:    	jne    0x37829
  0096f: 26 	cmp    DWORD PTR [rip+0xffffffffffff5811],0x26        # 0xffff6187
  00976:    	jne    0x37829
  0097c:    	mov    esi,DWORD PTR [rip+0xe4c]        # 0x17ce
  00982:    	cmp    esi,0xffffffff
  00985:    	je     0x37852
  0098b:    	cmp    WORD PTR [rdi+0x2],0x3
  00990:    	jne    0x9a9
  00996:    	cmp    esi,0x6
  00999:    	jge    0x9a9
  0099f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009a4:    	jmp    0x9df
  009a9:    	sub    rsp,0x20
  009ad:    	movq   QWORD PTR [rsp],xmm5
  009b2:    	movq   QWORD PTR [rsp+0x8],xmm6
  009b8:    	movq   QWORD PTR [rsp+0x10],xmm7
  009be: f6 	movabs rax,0x55f67a69e160
  009c8:    	call   rax
  009ca:    	movq   xmm5,QWORD PTR [rsp]
  009cf:    	movq   xmm6,QWORD PTR [rsp+0x8]
  009d5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  009db:    	add    rsp,0x20
  009df: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  009e6: ff 	mov    rdi,QWORD PTR [r14-0x90]
  009ed: 00 	test   rdi,0x7
  009f4:    	jne    0x378a5
  009fa:    	cmp    DWORD PTR [rdi+0x4],0x28
  009fe:    	jne    0x378a5
  00a04: 26 	cmp    DWORD PTR [rip+0xffffffffffff577c],0x26        # 0xffff6187
  00a0b:    	jne    0x378a5
  00a11:    	mov    esi,DWORD PTR [rip+0xdbf]        # 0x17d6
  00a17:    	cmp    esi,0xffffffff
  00a1a:    	je     0x378ce
  00a20:    	cmp    WORD PTR [rdi+0x2],0x3
  00a25:    	jne    0xa3e
  00a2b:    	cmp    esi,0x6
  00a2e:    	jge    0xa3e
  00a34:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a39:    	jmp    0xa74
  00a3e:    	sub    rsp,0x20
  00a42:    	movq   QWORD PTR [rsp],xmm5
  00a47:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a4d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a53: f6 	movabs rax,0x55f67a69e160
  00a5d:    	call   rax
  00a5f:    	movq   xmm5,QWORD PTR [rsp]
  00a64:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a6a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a70:    	add    rsp,0x20
  00a74: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  00a7b:    	mov    rdi,QWORD PTR [r14-0x38]
  00a7f: 00 	test   rdi,0x7
  00a86:    	jne    0x37921
  00a8c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a90:    	jne    0x37921
  00a96: 26 	cmp    DWORD PTR [rip+0xffffffffffff56ea],0x26        # 0xffff6187
  00a9d:    	jne    0x37921
  00aa3:    	mov    esi,DWORD PTR [rip+0xd35]        # 0x17de
  00aa9:    	cmp    esi,0xffffffff
  00aac:    	je     0x3794a
  00ab2:    	cmp    WORD PTR [rdi+0x2],0x3
  00ab7:    	jne    0xad0
  00abd:    	cmp    esi,0x6
  00ac0:    	jge    0xad0
  00ac6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00acb:    	jmp    0xb06
  00ad0:    	sub    rsp,0x20
  00ad4:    	movq   QWORD PTR [rsp],xmm5
  00ad9:    	movq   QWORD PTR [rsp+0x8],xmm6
  00adf:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ae5: f6 	movabs rax,0x55f67a69e160
  00aef:    	call   rax
  00af1:    	movq   xmm5,QWORD PTR [rsp]
  00af6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00afc:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b02:    	add    rsp,0x20
  00b06: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00b0d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b14: 00 	test   rdi,0x7
  00b1b:    	jne    0x3799d
  00b21:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b25:    	jne    0x3799d
  00b2b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5655],0x26        # 0xffff6187
  00b32:    	jne    0x3799d
  00b38:    	mov    esi,DWORD PTR [rip+0xca8]        # 0x17e6
  00b3e:    	cmp    esi,0xffffffff
  00b41:    	je     0x379c6
  00b47:    	cmp    WORD PTR [rdi+0x2],0x3
  00b4c:    	jne    0xb65
  00b52:    	cmp    esi,0x6
  00b55:    	jge    0xb65
  00b5b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b60:    	jmp    0xb9b
  00b65:    	sub    rsp,0x20
  00b69:    	movq   QWORD PTR [rsp],xmm5
  00b6e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b74:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b7a: f6 	movabs rax,0x55f67a69e160
  00b84:    	call   rax
  00b86:    	movq   xmm5,QWORD PTR [rsp]
  00b8b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b91:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b97:    	add    rsp,0x20
  00b9b: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00ba2: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ba9:    	mov    rsi,QWORD PTR [r14-0x68]
  00bad:    	sub    rsp,0x20
  00bb1:    	movq   QWORD PTR [rsp],xmm5
  00bb6:    	movq   QWORD PTR [rsp+0x8],xmm6
  00bbc:    	movq   QWORD PTR [rsp+0x10],xmm7
  00bc2:    	mov    rdx,rdi
  00bc5:    	mov    rcx,rsi
  00bc8:    	mov    rdi,rbx
  00bcb:    	mov    rsi,r12
  00bce: f6 	movabs rax,0x55f67a6dfeb0
  00bd8:    	call   rax
  00bda:    	movq   xmm5,QWORD PTR [rsp]
  00bdf:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00be5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00beb:    	add    rsp,0x20
  00bef: f6 	movabs r13,0x55f67b86ed60
  00bf9:    	test   rax,rax
  00bfc:    	je     0xffff2e05
  00c02: ff 	mov    QWORD PTR [r14-0x90],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00c09: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00c10: ff 	mov    rsi,QWORD PTR [r14-0x90]
  00c17:    	sub    rsp,0x20
  00c1b:    	movq   QWORD PTR [rsp],xmm5
  00c20:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c26:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c2c:    	mov    rdx,rdi
  00c2f:    	mov    rcx,rsi
  00c32:    	mov    rdi,rbx
  00c35:    	mov    rsi,r12
  00c38: f6 	movabs rax,0x55f67a6ddf30
  00c42:    	call   rax
  00c44:    	movq   xmm5,QWORD PTR [rsp]
  00c49:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c4f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c55:    	add    rsp,0x20
  00c59: f6 	movabs r13,0x55f67b86ed70
  00c63:    	test   rax,rax
  00c66:    	je     0xffff2e05
  00c6c: ff 	mov    QWORD PTR [r14-0x88],rax
:00065 %13 = %1.call org()                  [Ray]
  00c73:    	mov    rdi,QWORD PTR [r14-0x38]
  00c77: 00 	test   rdi,0x7
  00c7e:    	jne    0x37a19
  00c84:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00c88:    	jne    0x37a19
  00c8e: 26 	cmp    DWORD PTR [rip+0xffffffffffff54f2],0x26        # 0xffff6187
  00c95:    	jne    0x37a19
  00c9b:    	mov    esi,DWORD PTR [rip+0xb4d]        # 0x17ee
  00ca1:    	cmp    esi,0xffffffff
  00ca4:    	je     0x37a42
  00caa:    	cmp    WORD PTR [rdi+0x2],0x3
  00caf:    	jne    0xcc8
  00cb5:    	cmp    esi,0x6
  00cb8:    	jge    0xcc8
  00cbe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cc3:    	jmp    0xcfe
  00cc8:    	sub    rsp,0x20
  00ccc:    	movq   QWORD PTR [rsp],xmm5
  00cd1:    	movq   QWORD PTR [rsp+0x8],xmm6
  00cd7:    	movq   QWORD PTR [rsp+0x10],xmm7
  00cdd: f6 	movabs rax,0x55f67a69e160
  00ce7:    	call   rax
  00ce9:    	movq   xmm5,QWORD PTR [rsp]
  00cee:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00cf4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00cfa:    	add    rsp,0x20
  00cfe: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00d05: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00d0c: 00 	test   rdi,0x7
  00d13:    	jne    0x37a95
  00d19:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d1d:    	jne    0x37a95
  00d23: 26 	cmp    DWORD PTR [rip+0xffffffffffff545d],0x26        # 0xffff6187
  00d2a:    	jne    0x37a95
  00d30:    	mov    esi,DWORD PTR [rip+0xac0]        # 0x17f6
  00d36:    	cmp    esi,0xffffffff
  00d39:    	je     0x37abe
  00d3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00d44:    	jne    0xd5d
  00d4a:    	cmp    esi,0x6
  00d4d:    	jge    0xd5d
  00d53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d58:    	jmp    0xd93
  00d5d:    	sub    rsp,0x20
  00d61:    	movq   QWORD PTR [rsp],xmm5
  00d66:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d6c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d72: f6 	movabs rax,0x55f67a69e160
  00d7c:    	call   rax
  00d7e:    	movq   xmm5,QWORD PTR [rsp]
  00d83:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d89:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d8f:    	add    rsp,0x20
  00d93: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d9a:    	mov    rdi,QWORD PTR [r14-0x38]
  00d9e: 00 	test   rdi,0x7
  00da5:    	jne    0x37b11
  00dab:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00daf:    	jne    0x37b11
  00db5: 26 	cmp    DWORD PTR [rip+0xffffffffffff53cb],0x26        # 0xffff6187
  00dbc:    	jne    0x37b11
  00dc2:    	mov    esi,DWORD PTR [rip+0xa36]        # 0x17fe
  00dc8:    	cmp    esi,0xffffffff
  00dcb:    	je     0x37b3a
  00dd1:    	cmp    WORD PTR [rdi+0x2],0x3
  00dd6:    	jne    0xdef
  00ddc:    	cmp    esi,0x6
  00ddf:    	jge    0xdef
  00de5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dea:    	jmp    0xe25
  00def:    	sub    rsp,0x20
  00df3:    	movq   QWORD PTR [rsp],xmm5
  00df8:    	movq   QWORD PTR [rsp+0x8],xmm6
  00dfe:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e04: f6 	movabs rax,0x55f67a69e160
  00e0e:    	call   rax
  00e10:    	movq   xmm5,QWORD PTR [rsp]
  00e15:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e1b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e21:    	add    rsp,0x20
  00e25: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00e2c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e33: 00 	test   rdi,0x7
  00e3a:    	jne    0x37b8d
  00e40:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e44:    	jne    0x37b8d
  00e4a: 26 	cmp    DWORD PTR [rip+0xffffffffffff5336],0x26        # 0xffff6187
  00e51:    	jne    0x37b8d
  00e57:    	mov    esi,DWORD PTR [rip+0x9a9]        # 0x1806
  00e5d:    	cmp    esi,0xffffffff
  00e60:    	je     0x37bb6
  00e66:    	cmp    WORD PTR [rdi+0x2],0x3
  00e6b:    	jne    0xe84
  00e71:    	cmp    esi,0x6
  00e74:    	jge    0xe84
  00e7a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e7f:    	jmp    0xeba
  00e84:    	sub    rsp,0x20
  00e88:    	movq   QWORD PTR [rsp],xmm5
  00e8d:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e93:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e99: f6 	movabs rax,0x55f67a69e160
  00ea3:    	call   rax
  00ea5:    	movq   xmm5,QWORD PTR [rsp]
  00eaa:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00eb0:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00eb6:    	add    rsp,0x20
  00eba: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  00ec1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00ec8:    	mov    rsi,QWORD PTR [r14-0x68]
  00ecc:    	sub    rsp,0x20
  00ed0:    	movq   QWORD PTR [rsp],xmm5
  00ed5:    	movq   QWORD PTR [rsp+0x8],xmm6
  00edb:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ee1:    	mov    rdx,rdi
  00ee4:    	mov    rcx,rsi
  00ee7:    	mov    rdi,rbx
  00eea:    	mov    rsi,r12
  00eed: f6 	movabs rax,0x55f67a6dfeb0
  00ef7:    	call   rax
  00ef9:    	movq   xmm5,QWORD PTR [rsp]
  00efe:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f04:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f0a:    	add    rsp,0x20
  00f0e: f6 	movabs r13,0x55f67b86ee40
  00f18:    	test   rax,rax
  00f1b:    	je     0xffff2e05
  00f21: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  00f28: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f2f: ff 	mov    rsi,QWORD PTR [r14-0x98]
  00f36:    	sub    rsp,0x20
  00f3a:    	movq   QWORD PTR [rsp],xmm5
  00f3f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f45:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f4b:    	mov    rdx,rdi
  00f4e:    	mov    rcx,rsi
  00f51:    	mov    rdi,rbx
  00f54:    	mov    rsi,r12
  00f57: f6 	movabs rax,0x55f67a6ddf30
  00f61:    	call   rax
  00f63:    	movq   xmm5,QWORD PTR [rsp]
  00f68:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f6e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f74:    	add    rsp,0x20
  00f78: f6 	movabs r13,0x55f67b86ee50
  00f82:    	test   rax,rax
  00f85:    	je     0xffff2e05
  00f8b: ff 	mov    QWORD PTR [r14-0x90],rax
:00079 %14 = %1.call org()                  [Ray]
  00f92:    	mov    rdi,QWORD PTR [r14-0x38]
  00f96: 00 	test   rdi,0x7
  00f9d:    	jne    0x37c09
  00fa3:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00fa7:    	jne    0x37c09
  00fad: 26 	cmp    DWORD PTR [rip+0xffffffffffff51d3],0x26        # 0xffff6187
  00fb4:    	jne    0x37c09
  00fba:    	mov    esi,DWORD PTR [rip+0x84e]        # 0x180e
  00fc0:    	cmp    esi,0xffffffff
  00fc3:    	je     0x37c32
  00fc9:    	cmp    WORD PTR [rdi+0x2],0x3
  00fce:    	jne    0xfe7
  00fd4:    	cmp    esi,0x6
  00fd7:    	jge    0xfe7
  00fdd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fe2:    	jmp    0x101d
  00fe7:    	sub    rsp,0x20
  00feb:    	movq   QWORD PTR [rsp],xmm5
  00ff0:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ff6:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ffc: f6 	movabs rax,0x55f67a69e160
  01006:    	call   rax
  01008:    	movq   xmm5,QWORD PTR [rsp]
  0100d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01013:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01019:    	add    rsp,0x20
  0101d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  01024: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0102b: 00 	test   rdi,0x7
  01032:    	jne    0x37c85
  01038:    	cmp    DWORD PTR [rdi+0x4],0x28
  0103c:    	jne    0x37c85
  01042: 26 	cmp    DWORD PTR [rip+0xffffffffffff513e],0x26        # 0xffff6187
  01049:    	jne    0x37c85
  0104f:    	mov    esi,DWORD PTR [rip+0x7c1]        # 0x1816
  01055:    	cmp    esi,0xffffffff
  01058:    	je     0x37cae
  0105e:    	cmp    WORD PTR [rdi+0x2],0x3
  01063:    	jne    0x107c
  01069:    	cmp    esi,0x6
  0106c:    	jge    0x107c
  01072:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01077:    	jmp    0x10b2
  0107c:    	sub    rsp,0x20
  01080:    	movq   QWORD PTR [rsp],xmm5
  01085:    	movq   QWORD PTR [rsp+0x8],xmm6
  0108b:    	movq   QWORD PTR [rsp+0x10],xmm7
  01091: f6 	movabs rax,0x55f67a69e160
  0109b:    	call   rax
  0109d:    	movq   xmm5,QWORD PTR [rsp]
  010a2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010a8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  010ae:    	add    rsp,0x20
  010b2: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  010b9:    	mov    rdi,QWORD PTR [r14-0x38]
  010bd: 00 	test   rdi,0x7
  010c4:    	jne    0x37d01
  010ca:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010ce:    	jne    0x37d01
  010d4: 26 	cmp    DWORD PTR [rip+0xffffffffffff50ac],0x26        # 0xffff6187
  010db:    	jne    0x37d01
  010e1:    	mov    esi,DWORD PTR [rip+0x737]        # 0x181e
  010e7:    	cmp    esi,0xffffffff
  010ea:    	je     0x37d2a
  010f0:    	cmp    WORD PTR [rdi+0x2],0x3
  010f5:    	jne    0x110e
  010fb:    	cmp    esi,0x6
  010fe:    	jge    0x110e
  01104:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01109:    	jmp    0x1144
  0110e:    	sub    rsp,0x20
  01112:    	movq   QWORD PTR [rsp],xmm5
  01117:    	movq   QWORD PTR [rsp+0x8],xmm6
  0111d:    	movq   QWORD PTR [rsp+0x10],xmm7
  01123: f6 	movabs rax,0x55f67a69e160
  0112d:    	call   rax
  0112f:    	movq   xmm5,QWORD PTR [rsp]
  01134:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0113a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01140:    	add    rsp,0x20
  01144: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  0114b: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01152: 00 	test   rdi,0x7
  01159:    	jne    0x37d7d
  0115f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01163:    	jne    0x37d7d
  01169: 26 	cmp    DWORD PTR [rip+0xffffffffffff5017],0x26        # 0xffff6187
  01170:    	jne    0x37d7d
  01176:    	mov    esi,DWORD PTR [rip+0x6aa]        # 0x1826
  0117c:    	cmp    esi,0xffffffff
  0117f:    	je     0x37da6
  01185:    	cmp    WORD PTR [rdi+0x2],0x3
  0118a:    	jne    0x11a3
  01190:    	cmp    esi,0x6
  01193:    	jge    0x11a3
  01199:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0119e:    	jmp    0x11d9
  011a3:    	sub    rsp,0x20
  011a7:    	movq   QWORD PTR [rsp],xmm5
  011ac:    	movq   QWORD PTR [rsp+0x8],xmm6
  011b2:    	movq   QWORD PTR [rsp+0x10],xmm7
  011b8: f6 	movabs rax,0x55f67a69e160
  011c2:    	call   rax
  011c4:    	movq   xmm5,QWORD PTR [rsp]
  011c9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  011cf:    	movq   xmm7,QWORD PTR [rsp+0x10]
  011d5:    	add    rsp,0x20
  011d9: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  011e0: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  011e7:    	mov    rsi,QWORD PTR [r14-0x68]
  011eb:    	sub    rsp,0x20
  011ef:    	movq   QWORD PTR [rsp],xmm5
  011f4:    	movq   QWORD PTR [rsp+0x8],xmm6
  011fa:    	movq   QWORD PTR [rsp+0x10],xmm7
  01200:    	mov    rdx,rdi
  01203:    	mov    rcx,rsi
  01206:    	mov    rdi,rbx
  01209:    	mov    rsi,r12
  0120c: f6 	movabs rax,0x55f67a6dfeb0
  01216:    	call   rax
  01218:    	movq   xmm5,QWORD PTR [rsp]
  0121d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01223:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01229:    	add    rsp,0x20
  0122d: f6 	movabs r13,0x55f67b86ef20
  01237:    	test   rax,rax
  0123a:    	je     0xffff2e05
  01240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  01247: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0124e: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01255:    	sub    rsp,0x20
  01259:    	movq   QWORD PTR [rsp],xmm5
  0125e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01264:    	movq   QWORD PTR [rsp+0x10],xmm7
  0126a:    	mov    rdx,rdi
  0126d:    	mov    rcx,rsi
  01270:    	mov    rdi,rbx
  01273:    	mov    rsi,r12
  01276: f6 	movabs rax,0x55f67a6ddf30
  01280:    	call   rax
  01282:    	movq   xmm5,QWORD PTR [rsp]
  01287:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0128d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01293:    	add    rsp,0x20
  01297: f6 	movabs r13,0x55f67b86ef30
  012a1:    	test   rax,rax
  012a4:    	je     0xffff2e05
  012aa: ff 	mov    QWORD PTR [r14-0x98],rax
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  012b1:    	mov    rdi,QWORD PTR [r14-0x80]
  012b5: 00 	test   rdi,0x7
  012bc:    	jne    0x37df9
  012c2:    	cmp    DWORD PTR [rdi+0x4],0x29
  012c6:    	jne    0x37df9
  012cc: 26 	cmp    DWORD PTR [rip+0xffffffffffff4eb4],0x26        # 0xffff6187
  012d3:    	jne    0x37df9
  012d9: 00 	mov    r9,0x0
  012e0:    	sub    rsp,0x20
  012e4:    	movq   QWORD PTR [rsp],xmm5
  012e9:    	movq   QWORD PTR [rsp+0x8],xmm6
  012ef:    	movq   QWORD PTR [rsp+0x10],xmm7
  012f5:    	mov    rdx,rdi
  012f8:    	mov    QWORD PTR [rsp-0x40],rcx
  012fd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01306: ff 	lea    rcx,[r14-0x88]
  0130d: 00 	mov    r8,0x3
  01314:    	mov    rsi,QWORD PTR [rbx]
  01317:    	mov    QWORD PTR [rsp-0x18],rsi
  0131c:    	lea    rsi,[rsp-0x18]
  01321:    	mov    QWORD PTR [rbx],rsi
  01324:    	lea    r14,[rsp-0x10]
  01329:    	mov    QWORD PTR [rsp-0x20],r14
  0132e:    	call   0x37e22
  01333:    	lea    r14,[rbp-0x8]
  01337:    	mov    QWORD PTR [rbx],r14
  0133a:    	mov    r14,QWORD PTR [rbp-0x10]
  0133e:    	movq   xmm5,QWORD PTR [rsp]
  01343:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01349:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0134f:    	add    rsp,0x20
  01353: f6 	movabs r13,0x55f67b86ef50
  0135d:    	test   rax,rax
  01360:    	je     0xffff2e05
  01366:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  0136a:    	mov    rdi,QWORD PTR [r14-0x40]
  0136e: 00 	test   rdi,0x7
  01375:    	jne    0x37e54
  0137b:    	cmp    DWORD PTR [rdi+0x4],0x30
  0137f:    	jne    0x37e54
  01385: 26 	cmp    DWORD PTR [rip+0xffffffffffff4dfb],0x26        # 0xffff6187
  0138c:    	jne    0x37e54
  01392:    	mov    esi,DWORD PTR [rip+0x496]        # 0x182e
  01398:    	cmp    esi,0xffffffff
  0139b:    	je     0x37e7d
  013a1:    	cmp    WORD PTR [rdi+0x2],0x3
  013a6:    	jne    0x13c3
  013ac:    	cmp    esi,0x6
  013af:    	jge    0x13c3
  013b5:    	mov    rax,QWORD PTR [r14-0x78]
  013b9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013be:    	jmp    0x1410
  013c3:    	sub    rsp,0x20
  013c7:    	movq   QWORD PTR [rsp],xmm5
  013cc:    	movq   QWORD PTR [rsp+0x8],xmm6
  013d2:    	movq   QWORD PTR [rsp+0x10],xmm7
  013d8:    	mov    rdx,QWORD PTR [r14-0x78]
  013dc: f6 	movabs rax,0x55f67a69e3e0
  013e6:    	call   rax
  013e8:    	movq   xmm5,QWORD PTR [rsp]
  013ed:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013f3:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013f9:    	add    rsp,0x20
  013fd: f6 	movabs r13,0x55f67b86ef80
  01407:    	test   rax,rax
  0140a:    	je     0xffff2e05
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  01410:    	mov    rdi,QWORD PTR [r14-0x40]
  01414: 00 	test   rdi,0x7
  0141b:    	jne    0x37ed7
  01421:    	cmp    DWORD PTR [rdi+0x4],0x30
  01425:    	jne    0x37ed7
  0142b: 26 	cmp    DWORD PTR [rip+0xffffffffffff4d55],0x26        # 0xffff6187
  01432:    	jne    0x37ed7
  01438:    	mov    esi,DWORD PTR [rip+0x3f8]        # 0x1836
  0143e:    	cmp    esi,0xffffffff
  01441:    	je     0x37f00
  01447:    	cmp    WORD PTR [rdi+0x2],0x3
  0144c:    	jne    0x1465
  01452:    	cmp    esi,0x6
  01455:    	jge    0x1465
  0145b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01460:    	jmp    0x149b
  01465:    	sub    rsp,0x20
  01469:    	movq   QWORD PTR [rsp],xmm5
  0146e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01474:    	movq   QWORD PTR [rsp+0x10],xmm7
  0147a: f6 	movabs rax,0x55f67a69e160
  01484:    	call   rax
  01486:    	movq   xmm5,QWORD PTR [rsp]
  0148b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01491:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01497:    	add    rsp,0x20
  0149b:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  0149f:    	mov    rdi,QWORD PTR [rbp-0x30]
  014a3:    	sub    rsp,0x20
  014a7:    	movq   QWORD PTR [rsp],xmm5
  014ac:    	movq   QWORD PTR [rsp+0x8],xmm6
  014b2:    	movq   QWORD PTR [rsp+0x10],xmm7
  014b8: 00 	mov    rsi,0x90
  014bf:    	mov    rdx,r12
  014c2: f6 	movabs rax,0x55f67a71b840
  014cc:    	call   rax
  014ce:    	movq   xmm5,QWORD PTR [rsp]
  014d3:    	movq   xmm6,QWORD PTR [rsp+0x8]
  014d9:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014df:    	add    rsp,0x20
  014e3:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  014e7:    	mov    rdi,QWORD PTR [r14-0x78]
  014eb: 00 	test   rdi,0x7
  014f2:    	jne    0x37f53
  014f8:    	cmp    DWORD PTR [rdi+0x4],0x28
  014fc:    	jne    0x37f53
  01502: 26 	cmp    DWORD PTR [rip+0xffffffffffff4c7e],0x26        # 0xffff6187
  01509:    	jne    0x37f53
  0150f:    	sub    rsp,0x20
  01513:    	movq   QWORD PTR [rsp],xmm5
  01518:    	movq   QWORD PTR [rsp+0x8],xmm6
  0151e:    	movq   QWORD PTR [rsp+0x10],xmm7
  01524: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0152d:    	mov    rax,QWORD PTR [r14-0x78]
  01531:    	mov    QWORD PTR [rsp-0x40],rax
  01536: 00 	mov    rdi,0x1
  0153d:    	lea    r8,[rsp-0x48]
  01542:    	mov    rax,QWORD PTR [r14-0x80]
  01546:    	mov    QWORD PTR [r8],rax
  01549:    	sub    r8,0x8
  0154d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01556: 08 	movabs rax,0x1000800000040
  01560:    	mov    QWORD PTR [rsp-0x30],rax
  01565: f6 	movabs r13,0x55f67b855f60
  0156f:    	mov    rsi,QWORD PTR [rbx]
  01572:    	mov    QWORD PTR [rsp-0x18],rsi
  01577:    	lea    rsi,[rsp-0x18]
  0157c:    	mov    QWORD PTR [rbx],rsi
  0157f:    	lea    r14,[rsp-0x10]
  01584:    	mov    QWORD PTR [rsp-0x20],r14
  01589:    	call   0xffff6e28
  0158e:    	lea    r14,[rbp-0x8]
  01592:    	mov    QWORD PTR [rbx],r14
  01595:    	mov    r14,QWORD PTR [rbp-0x10]
  01599:    	movq   xmm5,QWORD PTR [rsp]
  0159e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  015a4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  015aa:    	add    rsp,0x20
  015ae: f6 	movabs r13,0x55f67b86eff0
  015b8:    	test   rax,rax
  015bb:    	je     0xffff2e05
  015c1:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  015c5:    	mov    rdi,QWORD PTR [r14-0x70]
  015c9: 00 	test   rdi,0x7
  015d0:    	jne    0x37f7c
  015d6:    	cmp    DWORD PTR [rdi+0x4],0x28
  015da:    	jne    0x37f7c
  015e0: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ba0],0x26        # 0xffff6187
  015e7:    	jne    0x37f7c
  015ed:    	sub    rsp,0x20
  015f1:    	movq   QWORD PTR [rsp],xmm5
  015f6:    	movq   QWORD PTR [rsp+0x8],xmm6
  015fc:    	movq   QWORD PTR [rsp+0x10],xmm7
  01602: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0160b:    	mov    rax,QWORD PTR [r14-0x70]
  0160f:    	mov    QWORD PTR [rsp-0x40],rax
  01614: 00 	mov    rdi,0x0
  0161b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01624: 07 	movabs rax,0x1000700000044
  0162e:    	mov    QWORD PTR [rsp-0x30],rax
  01633: f6 	movabs r13,0x55f67b84eec0
  0163d:    	mov    rsi,QWORD PTR [rbx]
  01640:    	mov    QWORD PTR [rsp-0x18],rsi
  01645:    	lea    rsi,[rsp-0x18]
  0164a:    	mov    QWORD PTR [rbx],rsi
  0164d:    	lea    r14,[rsp-0x10]
  01652:    	mov    QWORD PTR [rsp-0x20],r14
  01657:    	call   0xffff6a8e
  0165c:    	lea    r14,[rbp-0x8]
  01660:    	mov    QWORD PTR [rbx],r14
  01663:    	mov    r14,QWORD PTR [rbp-0x10]
  01667:    	movq   xmm5,QWORD PTR [rsp]
  0166c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01672:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01678:    	add    rsp,0x20
  0167c: f6 	movabs r13,0x55f67b86f020
  01686:    	test   rax,rax
  01689:    	je     0xffff2e05
  0168f:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  01693:    	mov    rdi,QWORD PTR [r14-0x40]
  01697: 00 	test   rdi,0x7
  0169e:    	jne    0x37fa5
  016a4:    	cmp    DWORD PTR [rdi+0x4],0x30
  016a8:    	jne    0x37fa5
  016ae: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ad2],0x26        # 0xffff6187
  016b5:    	jne    0x37fa5
  016bb:    	mov    esi,DWORD PTR [rip+0x17d]        # 0x183e
  016c1:    	cmp    esi,0xffffffff
  016c4:    	je     0x37fce
  016ca:    	cmp    WORD PTR [rdi+0x2],0x3
  016cf:    	jne    0x16ec
  016d5:    	cmp    esi,0x6
  016d8:    	jge    0x16ec
  016de:    	mov    rax,QWORD PTR [r14-0x78]
  016e2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  016e7:    	jmp    0x1739
  016ec:    	sub    rsp,0x20
  016f0:    	movq   QWORD PTR [rsp],xmm5
  016f5:    	movq   QWORD PTR [rsp+0x8],xmm6
  016fb:    	movq   QWORD PTR [rsp+0x10],xmm7
  01701:    	mov    rdx,QWORD PTR [r14-0x78]
  01705: f6 	movabs rax,0x55f67a69e3e0
  0170f:    	call   rax
  01711:    	movq   xmm5,QWORD PTR [rsp]
  01716:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0171c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01722:    	add    rsp,0x20
  01726: f6 	movabs r13,0x55f67b86f050
  01730:    	test   rax,rax
  01733:    	je     0xffff2e05
:00110 
:00112 br =>:00113
  01739:    	jmp    0x3810e
:00113 br =>:00114
  0173e:    	jmp    0x38181
:00114 %9 = nil
  01743: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  0174b:    	mov    rax,QWORD PTR [r14-0x78]
  0174f:    	leave  
  01750:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55f67b867230
<== finished compile. elapsed:143.1µs
offset:Pos(60016) code: 9361 bytes  data: 423 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [rbp-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x36981
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x32
  000a7:    	jne    0x36981
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff488d],0x26        # 0xffff4945
  000b8:    	jne    0x36990
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0xa0]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x3699f
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: f6 	movabs r13,0x55f67b867260
  00118:    	test   rax,rax
  0011b:    	je     0xffff15c3
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00004 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00005 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x2365]        # 0x24a0
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00006 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x235f]        # 0x24b0
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xffffffffffff47d4],0x26        # 0xffff4945
  00171:    	jne    0x369d1
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa8]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x369f0
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: f6 	movabs r13,0x55f67b8672d0
  001e3:    	test   rax,rax
  001e6:    	je     0xffff15c3
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x36a22
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xffff161c
  0024f:    	test   rax,rax
  00252:    	je     0x36a22
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff46e5]        # 0xffff4950
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x225e]        # 0x24d0
  00272:    	jne    0x36a41
  00278: 00 	mov    rax,QWORD PTR [rip+0x2241]        # 0x24c0
  0027f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x36aa5
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0029e:    	jne    0x36aa5
  002a4: 26 	cmp    DWORD PTR [rip+0xffffffffffff469a],0x26        # 0xffff4945
  002ab:    	jne    0x36aa5
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: f6 	movabs rax,0x55f67a6f91a0
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4666]        # 0xffff4950
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x21ff]        # 0x24f0
  002f1:    	jne    0x36ac8
  002f7: 00 	mov    rax,QWORD PTR [rip+0x21e2]        # 0x24e0
  002fe: ff 	mov    QWORD PTR [r14-0xa8],rax
:00018 %16 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x21f3]        # 0x2500
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xb0],rax
:00019 %16 = %16 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x36b2c
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xffff161c
  00377:    	test   rax,rax
  0037a:    	je     0x36b2c
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x36b58
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x21
  003a0:    	jne    0x36b58
  003a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff4598],0x26        # 0xffff4945
  003ad:    	jne    0x36b58
  003b3:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff458a]        # 0xffff4950
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x2153]        # 0x2520
  003cd:    	jne    0x36b94
  003d3: 00 	mov    rax,QWORD PTR [rip+0x2136]        # 0x2510
  003da: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x36c1c
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x21
  003f9:    	jne    0x36c1c
  003ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff453f],0x26        # 0xffff4945
  00406:    	jne    0x36c1c
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: f6 	movabs rax,0x55f67a6f91b0
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff44e7]        # 0xffff4950
  00469: 00 	cmp    rax,QWORD PTR [rip+0x20d0]        # 0x2540
  00470:    	jne    0x36c5c
  00476: 00 	mov    rax,QWORD PTR [rip+0x20b3]        # 0x2530
  0047d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00030 %16 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x20c4]        # 0x2550
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xb0],rax
:00031 %16 = %16 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x36ce4
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004b9:    	jne    0x36ce4
  004bf: 26 	cmp    DWORD PTR [rip+0xffffffffffff447f],0x26        # 0xffff4945
  004c6:    	jne    0x36ce4
  004cc:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff446f]        # 0xffff4950
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x2088]        # 0x2570
  004e8:    	jne    0x36d2d
  004ee: 00 	mov    rax,QWORD PTR [rip+0x206b]        # 0x2560
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x36dc3
  00510:    	cmp    DWORD PTR [rdi+0x4],0x21
  00514:    	jne    0x36dc3
  0051a: 26 	cmp    DWORD PTR [rip+0xffffffffffff4424],0x26        # 0xffff4945
  00521:    	jne    0x36dc3
  00527:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [rbp-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 %15 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  00548:    	sub    rsp,0x30
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563:    	movq   QWORD PTR [rsp+0x20],xmm7
  00569: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00570: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00577: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  0057e:    	mov    rdi,rbx
  00581:    	mov    rsi,r12
  00584: f6 	movabs r8,0x55f67b8674e8
  0058e: f6 	movabs rax,0x55f67a71b620
  00598:    	call   rax
  0059a:    	movq   xmm2,QWORD PTR [rsp]
  0059f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ab:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b7: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005be:    	add    rsp,0x30
  005c2: f6 	movabs r13,0x55f67b8674f0
  005cc:    	test   rax,rax
  005cf:    	je     0xffff15c3
  005d5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 %13 = %14.call x()                   [Vec]
  005dc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005e3: 00 	test   rdi,0x7
  005ea:    	jne    0x36e1a
  005f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  005f4:    	jne    0x36e1a
  005fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff4344],0x26        # 0xffff4945
  00601:    	jne    0x36e1a
  00607:    	mov    esi,DWORD PTR [rip+0x1f6f]        # 0x257c
  0060d:    	cmp    esi,0xffffffff
  00610:    	je     0x36e6e
  00616:    	cmp    WORD PTR [rdi+0x2],0x3
  0061b:    	jne    0x634
  00621:    	cmp    esi,0x6
  00624:    	jge    0x634
  0062a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0062f:    	jmp    0x690
  00634:    	sub    rsp,0x30
  00638:    	movq   QWORD PTR [rsp],xmm2
  0063d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00643:    	movq   QWORD PTR [rsp+0x10],xmm4
  00649:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00655: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0065c: f6 	movabs rax,0x55f67a69e160
  00666:    	call   rax
  00668:    	movq   xmm2,QWORD PTR [rsp]
  0066d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00673:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0067f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00685: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0068c:    	add    rsp,0x30
  00690: ff 	mov    QWORD PTR [r14-0x98],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  00697: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0069e: 00 	test   rdi,0x1
  006a5:    	jne    0x36ee7
  006ab: 00 	test   rdi,0x2
  006b2:    	je     0x6ee
  006b8:    	xorps  xmm6,xmm6
  006bb: 00 	movabs rax,0x8000000000000002
  006c5:    	cmp    rdi,rax
  006c8:    	je     0x700
  006ce:    	mov    rax,rdi
  006d1:    	sar    rax,0x3f
  006d5:    	add    rax,0x2
  006d9:    	and    rdi,0xfffffffffffffffc
  006dd:    	or     rdi,rax
  006e0:    	rol    rdi,0x3d
  006e4:    	movq   xmm6,rdi
  006e9:    	jmp    0x700
  006ee:    	call   0xffff161c
  006f3:    	test   rax,rax
  006f6:    	je     0x36ee7
  006fc:    	movq   xmm6,xmm0
  00700:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00704:    	mov    rax,QWORD PTR [rbp-0x18]
  00708:    	mov    rax,QWORD PTR [rax]
  0070b:    	mov    rax,QWORD PTR [rax-0x28]
  0070f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00049 %16 = 1: i32
  00716: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00721:    	sub    rsp,0x30
  00725:    	movq   QWORD PTR [rsp],xmm2
  0072a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00730:    	movq   QWORD PTR [rsp+0x10],xmm5
  00736:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00742: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00749: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00750: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00757:    	mov    rdi,rbx
  0075a:    	mov    rsi,r12
  0075d: f6 	movabs r8,0x55f67b867558
  00767: f6 	movabs rax,0x55f67a71b620
  00771:    	call   rax
  00773:    	movq   xmm2,QWORD PTR [rsp]
  00778:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0077e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00784:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0078a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00790: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00797:    	add    rsp,0x30
  0079b: f6 	movabs r13,0x55f67b867560
  007a5:    	test   rax,rax
  007a8:    	je     0xffff15c3
  007ae: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 %14 = %15.call x()                   [Vec]
  007b5: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  007bc: 00 	test   rdi,0x7
  007c3:    	jne    0x36f3b
  007c9:    	cmp    DWORD PTR [rdi+0x4],0x28
  007cd:    	jne    0x36f3b
  007d3: 26 	cmp    DWORD PTR [rip+0xffffffffffff416b],0x26        # 0xffff4945
  007da:    	jne    0x36f3b
  007e0:    	mov    esi,DWORD PTR [rip+0x1d9e]        # 0x2584
  007e6:    	cmp    esi,0xffffffff
  007e9:    	je     0x36f8f
  007ef:    	cmp    WORD PTR [rdi+0x2],0x3
  007f4:    	jne    0x80d
  007fa:    	cmp    esi,0x6
  007fd:    	jge    0x80d
  00803:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00808:    	jmp    0x869
  0080d:    	sub    rsp,0x30
  00811:    	movq   QWORD PTR [rsp],xmm2
  00816:    	movq   QWORD PTR [rsp+0x8],xmm4
  0081c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00822:    	movq   QWORD PTR [rsp+0x18],xmm6
  00828:    	movq   QWORD PTR [rsp+0x20],xmm7
  0082e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00835: f6 	movabs rax,0x55f67a69e160
  0083f:    	call   rax
  00841:    	movq   xmm2,QWORD PTR [rsp]
  00846:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0084c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00852:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00858:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0085e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00865:    	add    rsp,0x30
  00869: ff 	mov    QWORD PTR [r14-0xa0],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00870: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00877: 00 	test   rdi,0x1
  0087e:    	jne    0x37008
  00884: 00 	test   rdi,0x2
  0088b:    	je     0x8c7
  00891:    	xorps  xmm3,xmm3
  00894: 00 	movabs rax,0x8000000000000002
  0089e:    	cmp    rdi,rax
  008a1:    	je     0x8d9
  008a7:    	mov    rax,rdi
  008aa:    	sar    rax,0x3f
  008ae:    	add    rax,0x2
  008b2:    	and    rdi,0xfffffffffffffffc
  008b6:    	or     rdi,rax
  008b9:    	rol    rdi,0x3d
  008bd:    	movq   xmm3,rdi
  008c2:    	jmp    0x8d9
  008c7:    	call   0xffff161c
  008cc:    	test   rax,rax
  008cf:    	je     0x37008
  008d5:    	movq   xmm3,xmm0
  008d9:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008de:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008e2:    	mov    rax,QWORD PTR [rbp-0x18]
  008e6:    	mov    rax,QWORD PTR [rax]
  008e9:    	mov    rax,QWORD PTR [rax-0x28]
  008ed: ff 	mov    QWORD PTR [r14-0xa8],rax
:00057 %16 = 2: i32
  008f4: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  008ff:    	sub    rsp,0x40
  00903:    	movq   QWORD PTR [rsp],xmm2
  00908:    	movq   QWORD PTR [rsp+0x8],xmm3
  0090e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00914:    	movq   QWORD PTR [rsp+0x18],xmm5
  0091a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00920:    	movq   QWORD PTR [rsp+0x28],xmm7
  00926: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0092d: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00934: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  0093b:    	mov    rdi,rbx
  0093e:    	mov    rsi,r12
  00941: f6 	movabs r8,0x55f67b8675d8
  0094b: f6 	movabs rax,0x55f67a71b620
  00955:    	call   rax
  00957:    	movq   xmm2,QWORD PTR [rsp]
  0095c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00962:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00968:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00974:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0097a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00981:    	add    rsp,0x40
  00985: f6 	movabs r13,0x55f67b8675e0
  0098f:    	test   rax,rax
  00992:    	je     0xffff15c3
  00998: ff 	mov    QWORD PTR [r14-0xa8],rax
:00059 %14 = %15.call x()                   [Vec]
  0099f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  009a6: 00 	test   rdi,0x7
  009ad:    	jne    0x3705c
  009b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  009b7:    	jne    0x3705c
  009bd: 26 	cmp    DWORD PTR [rip+0xffffffffffff3f81],0x26        # 0xffff4945
  009c4:    	jne    0x3705c
  009ca:    	mov    esi,DWORD PTR [rip+0x1bbc]        # 0x258c
  009d0:    	cmp    esi,0xffffffff
  009d3:    	je     0x370b0
  009d9:    	cmp    WORD PTR [rdi+0x2],0x3
  009de:    	jne    0x9f7
  009e4:    	cmp    esi,0x6
  009e7:    	jge    0x9f7
  009ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009f2:    	jmp    0xa53
  009f7:    	sub    rsp,0x30
  009fb:    	movq   QWORD PTR [rsp],xmm2
  00a00:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a06:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a0c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a12:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a18: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a1f: f6 	movabs rax,0x55f67a69e160
  00a29:    	call   rax
  00a2b:    	movq   xmm2,QWORD PTR [rsp]
  00a30:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a36:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a3c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a42:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a48: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a4f:    	add    rsp,0x30
  00a53: ff 	mov    QWORD PTR [r14-0xa0],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a5a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a61: 00 	test   rdi,0x1
  00a68:    	jne    0x37129
  00a6e: 00 	test   rdi,0x2
  00a75:    	je     0xab1
  00a7b:    	xorps  xmm3,xmm3
  00a7e: 00 	movabs rax,0x8000000000000002
  00a88:    	cmp    rdi,rax
  00a8b:    	je     0xac3
  00a91:    	mov    rax,rdi
  00a94:    	sar    rax,0x3f
  00a98:    	add    rax,0x2
  00a9c:    	and    rdi,0xfffffffffffffffc
  00aa0:    	or     rdi,rax
  00aa3:    	rol    rdi,0x3d
  00aa7:    	movq   xmm3,rdi
  00aac:    	jmp    0xac3
  00ab1:    	call   0xffff161c
  00ab6:    	test   rax,rax
  00ab9:    	je     0x37129
  00abf:    	movq   xmm3,xmm0
  00ac3:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ac7:    	movq   xmm9,xmm6
  00acc:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ad1:    	mov    rax,QWORD PTR [rbp-0x18]
  00ad5:    	mov    rax,QWORD PTR [rax]
  00ad8:    	mov    rax,QWORD PTR [rax-0x28]
  00adc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00065 %15 = 0: i32
  00ae3: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00aee:    	sub    rsp,0x40
  00af2:    	movq   QWORD PTR [rsp],xmm2
  00af7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00afd:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b03:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b09:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b0f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b16: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b1d: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00b24: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00b2b:    	mov    rdi,rbx
  00b2e:    	mov    rsi,r12
  00b31: f6 	movabs r8,0x55f67b867658
  00b3b: f6 	movabs rax,0x55f67a71b620
  00b45:    	call   rax
  00b47:    	movq   xmm2,QWORD PTR [rsp]
  00b4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b58:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b5e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b64: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b6b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b72:    	add    rsp,0x40
  00b76: f6 	movabs r13,0x55f67b867660
  00b80:    	test   rax,rax
  00b83:    	je     0xffff15c3
  00b89: ff 	mov    QWORD PTR [r14-0xa0],rax
:00067 %13 = %14.call y()                   [Vec]
  00b90: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b97: 00 	test   rdi,0x7
  00b9e:    	jne    0x3717d
  00ba4:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba8:    	jne    0x3717d
  00bae: 26 	cmp    DWORD PTR [rip+0xffffffffffff3d90],0x26        # 0xffff4945
  00bb5:    	jne    0x3717d
  00bbb:    	mov    esi,DWORD PTR [rip+0x19d3]        # 0x2594
  00bc1:    	cmp    esi,0xffffffff
  00bc4:    	je     0x371cf
  00bca:    	cmp    WORD PTR [rdi+0x2],0x3
  00bcf:    	jne    0xbe8
  00bd5:    	cmp    esi,0x6
  00bd8:    	jge    0xbe8
  00bde:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be3:    	jmp    0xc46
  00be8:    	sub    rsp,0x30
  00bec:    	movq   QWORD PTR [rsp],xmm2
  00bf1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bfd:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c03: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c0a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c11: f6 	movabs rax,0x55f67a69e160
  00c1b:    	call   rax
  00c1d:    	movq   xmm2,QWORD PTR [rsp]
  00c22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c2e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c34: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c3b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c42:    	add    rsp,0x30
  00c46: ff 	mov    QWORD PTR [r14-0x98],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c4d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c54: 00 	test   rdi,0x1
  00c5b:    	jne    0x3724a
  00c61: 00 	test   rdi,0x2
  00c68:    	je     0xca4
  00c6e:    	xorps  xmm3,xmm3
  00c71: 00 	movabs rax,0x8000000000000002
  00c7b:    	cmp    rdi,rax
  00c7e:    	je     0xcb6
  00c84:    	mov    rax,rdi
  00c87:    	sar    rax,0x3f
  00c8b:    	add    rax,0x2
  00c8f:    	and    rdi,0xfffffffffffffffc
  00c93:    	or     rdi,rax
  00c96:    	rol    rdi,0x3d
  00c9a:    	movq   xmm3,rdi
  00c9f:    	jmp    0xcb6
  00ca4:    	call   0xffff161c
  00ca9:    	test   rax,rax
  00cac:    	je     0x3724a
  00cb2:    	movq   xmm3,xmm0
  00cb6:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00cba:    	mov    rax,QWORD PTR [rbp-0x18]
  00cbe:    	mov    rax,QWORD PTR [rax]
  00cc1:    	mov    rax,QWORD PTR [rax-0x28]
  00cc5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00072 %16 = 1: i32
  00ccc: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cd7:    	sub    rsp,0x40
  00cdb:    	movq   QWORD PTR [rsp],xmm2
  00ce0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ce6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cf2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00cf8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00cff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00d0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00d14:    	mov    rdi,rbx
  00d17:    	mov    rsi,r12
  00d1a: f6 	movabs r8,0x55f67b8676c8
  00d24: f6 	movabs rax,0x55f67a71b620
  00d2e:    	call   rax
  00d30:    	movq   xmm2,QWORD PTR [rsp]
  00d35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d47:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d4d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d54: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d5b:    	add    rsp,0x40
  00d5f: f6 	movabs r13,0x55f67b8676d0
  00d69:    	test   rax,rax
  00d6c:    	je     0xffff15c3
  00d72: ff 	mov    QWORD PTR [r14-0xa8],rax
:00074 %14 = %15.call y()                   [Vec]
  00d79: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00d80: 00 	test   rdi,0x7
  00d87:    	jne    0x3729c
  00d8d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d91:    	jne    0x3729c
  00d97: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ba7],0x26        # 0xffff4945
  00d9e:    	jne    0x3729c
  00da4:    	mov    esi,DWORD PTR [rip+0x17f2]        # 0x259c
  00daa:    	cmp    esi,0xffffffff
  00dad:    	je     0x372fe
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0xdd1
  00dbe:    	cmp    esi,0x6
  00dc1:    	jge    0xdd1
  00dc7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dcc:    	jmp    0xe3b
  00dd1:    	sub    rsp,0x40
  00dd5:    	movq   QWORD PTR [rsp],xmm2
  00dda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dec:    	movq   QWORD PTR [rsp+0x20],xmm7
  00df2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00df9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e00: f6 	movabs rax,0x55f67a69e160
  00e0a:    	call   rax
  00e0c:    	movq   xmm2,QWORD PTR [rsp]
  00e11:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e17:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e1d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e23:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e29: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e30: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e37:    	add    rsp,0x40
  00e3b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e42: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e49: 00 	test   rdi,0x1
  00e50:    	jne    0x37385
  00e56: 00 	test   rdi,0x2
  00e5d:    	je     0xe99
  00e63:    	xorps  xmm6,xmm6
  00e66: 00 	movabs rax,0x8000000000000002
  00e70:    	cmp    rdi,rax
  00e73:    	je     0xeab
  00e79:    	mov    rax,rdi
  00e7c:    	sar    rax,0x3f
  00e80:    	add    rax,0x2
  00e84:    	and    rdi,0xfffffffffffffffc
  00e88:    	or     rdi,rax
  00e8b:    	rol    rdi,0x3d
  00e8f:    	movq   xmm6,rdi
  00e94:    	jmp    0xeab
  00e99:    	call   0xffff161c
  00e9e:    	test   rax,rax
  00ea1:    	je     0x37385
  00ea7:    	movq   xmm6,xmm0
  00eab:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00eb0:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00eb4:    	mov    rax,QWORD PTR [rbp-0x18]
  00eb8:    	mov    rax,QWORD PTR [rax]
  00ebb:    	mov    rax,QWORD PTR [rax-0x28]
  00ebf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00080 %16 = 2: i32
  00ec6: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ed1:    	sub    rsp,0x40
  00ed5:    	movq   QWORD PTR [rsp],xmm2
  00eda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ee0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ee6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eec:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ef2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ef8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eff: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00f0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00f14:    	mov    rdi,rbx
  00f17:    	mov    rsi,r12
  00f1a: f6 	movabs r8,0x55f67b867748
  00f24: f6 	movabs rax,0x55f67a71b620
  00f2e:    	call   rax
  00f30:    	movq   xmm2,QWORD PTR [rsp]
  00f35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f47:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f4d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f53: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f5a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f61:    	add    rsp,0x40
  00f65: f6 	movabs r13,0x55f67b867750
  00f6f:    	test   rax,rax
  00f72:    	je     0xffff15c3
  00f78: ff 	mov    QWORD PTR [r14-0xa8],rax
:00082 %14 = %15.call y()                   [Vec]
  00f7f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00f86: 00 	test   rdi,0x7
  00f8d:    	jne    0x373e7
  00f93:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f97:    	jne    0x373e7
  00f9d: 26 	cmp    DWORD PTR [rip+0xffffffffffff39a1],0x26        # 0xffff4945
  00fa4:    	jne    0x373e7
  00faa:    	mov    esi,DWORD PTR [rip+0x15f4]        # 0x25a4
  00fb0:    	cmp    esi,0xffffffff
  00fb3:    	je     0x37449
  00fb9:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbe:    	jne    0xfd7
  00fc4:    	cmp    esi,0x6
  00fc7:    	jge    0xfd7
  00fcd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd2:    	jmp    0x1041
  00fd7:    	sub    rsp,0x40
  00fdb:    	movq   QWORD PTR [rsp],xmm2
  00fe0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fe6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ff2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ff8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00fff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01006: f6 	movabs rax,0x55f67a69e160
  01010:    	call   rax
  01012:    	movq   xmm2,QWORD PTR [rsp]
  01017:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0101d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01023:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01029:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0102f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01036: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0103d:    	add    rsp,0x40
  01041: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  01048: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104f: 00 	test   rdi,0x1
  01056:    	jne    0x374d0
  0105c: 00 	test   rdi,0x2
  01063:    	je     0x109f
  01069:    	xorps  xmm6,xmm6
  0106c: 00 	movabs rax,0x8000000000000002
  01076:    	cmp    rdi,rax
  01079:    	je     0x10b1
  0107f:    	mov    rax,rdi
  01082:    	sar    rax,0x3f
  01086:    	add    rax,0x2
  0108a:    	and    rdi,0xfffffffffffffffc
  0108e:    	or     rdi,rax
  01091:    	rol    rdi,0x3d
  01095:    	movq   xmm6,rdi
  0109a:    	jmp    0x10b1
  0109f:    	call   0xffff161c
  010a4:    	test   rax,rax
  010a7:    	je     0x374d0
  010ad:    	movq   xmm6,xmm0
  010b1:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010b5:    	movq   xmm10,xmm3
  010ba:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010bf:    	mov    rax,QWORD PTR [rbp-0x18]
  010c3:    	mov    rax,QWORD PTR [rax]
  010c6:    	mov    rax,QWORD PTR [rax-0x28]
  010ca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 0: i32
  010d1: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010dc:    	sub    rsp,0x40
  010e0:    	movq   QWORD PTR [rsp],xmm2
  010e5:    	movq   QWORD PTR [rsp+0x8],xmm3
  010eb:    	movq   QWORD PTR [rsp+0x10],xmm4
  010f1:    	movq   QWORD PTR [rsp+0x18],xmm5
  010f7:    	movq   QWORD PTR [rsp+0x20],xmm7
  010fd: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01104: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0110b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01112: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  01119: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  01120:    	mov    rdi,rbx
  01123:    	mov    rsi,r12
  01126: f6 	movabs r8,0x55f67b8677c8
  01130: f6 	movabs rax,0x55f67a71b620
  0113a:    	call   rax
  0113c:    	movq   xmm2,QWORD PTR [rsp]
  01141:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01147:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0114d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01153:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01159: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01160: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01167: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0116e:    	add    rsp,0x40
  01172: f6 	movabs r13,0x55f67b8677d0
  0117c:    	test   rax,rax
  0117f:    	je     0xffff15c3
  01185: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %13 = %14.call z()                   [Vec]
  0118c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01193: 00 	test   rdi,0x7
  0119a:    	jne    0x37532
  011a0:    	cmp    DWORD PTR [rdi+0x4],0x28
  011a4:    	jne    0x37532
  011aa: 26 	cmp    DWORD PTR [rip+0xffffffffffff3794],0x26        # 0xffff4945
  011b1:    	jne    0x37532
  011b7:    	mov    esi,DWORD PTR [rip+0x13ef]        # 0x25ac
  011bd:    	cmp    esi,0xffffffff
  011c0:    	je     0x37592
  011c6:    	cmp    WORD PTR [rdi+0x2],0x3
  011cb:    	jne    0x11e4
  011d1:    	cmp    esi,0x6
  011d4:    	jge    0x11e4
  011da:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011df:    	jmp    0x1250
  011e4:    	sub    rsp,0x40
  011e8:    	movq   QWORD PTR [rsp],xmm2
  011ed:    	movq   QWORD PTR [rsp+0x8],xmm4
  011f3:    	movq   QWORD PTR [rsp+0x10],xmm5
  011f9:    	movq   QWORD PTR [rsp+0x18],xmm7
  011ff: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01206: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0120d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01214: f6 	movabs rax,0x55f67a69e160
  0121e:    	call   rax
  01220:    	movq   xmm2,QWORD PTR [rsp]
  01225:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0122b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01231:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01237: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0123e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01245: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0124c:    	add    rsp,0x40
  01250: ff 	mov    QWORD PTR [r14-0x98],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  01257: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0125e: 00 	test   rdi,0x1
  01265:    	jne    0x3761b
  0126b: 00 	test   rdi,0x2
  01272:    	je     0x12ae
  01278:    	xorps  xmm3,xmm3
  0127b: 00 	movabs rax,0x8000000000000002
  01285:    	cmp    rdi,rax
  01288:    	je     0x12c0
  0128e:    	mov    rax,rdi
  01291:    	sar    rax,0x3f
  01295:    	add    rax,0x2
  01299:    	and    rdi,0xfffffffffffffffc
  0129d:    	or     rdi,rax
  012a0:    	rol    rdi,0x3d
  012a4:    	movq   xmm3,rdi
  012a9:    	jmp    0x12c0
  012ae:    	call   0xffff161c
  012b3:    	test   rax,rax
  012b6:    	je     0x3761b
  012bc:    	movq   xmm3,xmm0
  012c0:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012c4:    	mov    rax,QWORD PTR [rbp-0x18]
  012c8:    	mov    rax,QWORD PTR [rax]
  012cb:    	mov    rax,QWORD PTR [rax-0x28]
  012cf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00095 %16 = 1: i32
  012d6: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012e1:    	sub    rsp,0x40
  012e5:    	movq   QWORD PTR [rsp],xmm2
  012ea:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f0:    	movq   QWORD PTR [rsp+0x10],xmm4
  012f6:    	movq   QWORD PTR [rsp+0x18],xmm5
  012fc:    	movq   QWORD PTR [rsp+0x20],xmm7
  01302: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01309: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01310: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01317: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0131e: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01325:    	mov    rdi,rbx
  01328:    	mov    rsi,r12
  0132b: f6 	movabs r8,0x55f67b867838
  01335: f6 	movabs rax,0x55f67a71b620
  0133f:    	call   rax
  01341:    	movq   xmm2,QWORD PTR [rsp]
  01346:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0134c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01352:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01358:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0135e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01365: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0136c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01373:    	add    rsp,0x40
  01377: f6 	movabs r13,0x55f67b867840
  01381:    	test   rax,rax
  01384:    	je     0xffff15c3
  0138a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %14 = %15.call z()                   [Vec]
  01391: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01398: 00 	test   rdi,0x7
  0139f:    	jne    0x3767b
  013a5:    	cmp    DWORD PTR [rdi+0x4],0x28
  013a9:    	jne    0x3767b
  013af: 26 	cmp    DWORD PTR [rip+0xffffffffffff358f],0x26        # 0xffff4945
  013b6:    	jne    0x3767b
  013bc:    	mov    esi,DWORD PTR [rip+0x11f2]        # 0x25b4
  013c2:    	cmp    esi,0xffffffff
  013c5:    	je     0x376eb
  013cb:    	cmp    WORD PTR [rdi+0x2],0x3
  013d0:    	jne    0x13e9
  013d6:    	cmp    esi,0x6
  013d9:    	jge    0x13e9
  013df:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013e4:    	jmp    0x1461
  013e9:    	sub    rsp,0x40
  013ed:    	movq   QWORD PTR [rsp],xmm2
  013f2:    	movq   QWORD PTR [rsp+0x8],xmm3
  013f8:    	movq   QWORD PTR [rsp+0x10],xmm4
  013fe:    	movq   QWORD PTR [rsp+0x18],xmm5
  01404:    	movq   QWORD PTR [rsp+0x20],xmm7
  0140a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01411: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01418: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0141f: f6 	movabs rax,0x55f67a69e160
  01429:    	call   rax
  0142b:    	movq   xmm2,QWORD PTR [rsp]
  01430:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01436:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0143c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01442:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01448: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0144f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01456: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0145d:    	add    rsp,0x40
  01461: ff 	mov    QWORD PTR [r14-0xa0],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  01468: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0146f: 00 	test   rdi,0x1
  01476:    	jne    0x37780
  0147c: 00 	test   rdi,0x2
  01483:    	je     0x14bf
  01489:    	xorps  xmm6,xmm6
  0148c: 00 	movabs rax,0x8000000000000002
  01496:    	cmp    rdi,rax
  01499:    	je     0x14d1
  0149f:    	mov    rax,rdi
  014a2:    	sar    rax,0x3f
  014a6:    	add    rax,0x2
  014aa:    	and    rdi,0xfffffffffffffffc
  014ae:    	or     rdi,rax
  014b1:    	rol    rdi,0x3d
  014b5:    	movq   xmm6,rdi
  014ba:    	jmp    0x14d1
  014bf:    	call   0xffff161c
  014c4:    	test   rax,rax
  014c7:    	je     0x37780
  014cd:    	movq   xmm6,xmm0
  014d1:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014d6:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014da:    	mov    rax,QWORD PTR [rbp-0x18]
  014de:    	mov    rax,QWORD PTR [rax]
  014e1:    	mov    rax,QWORD PTR [rax-0x28]
  014e5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %16 = 2: i32
  014ec: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  014f7:    	sub    rsp,0x50
  014fb:    	movq   QWORD PTR [rsp],xmm2
  01500:    	movq   QWORD PTR [rsp+0x8],xmm3
  01506:    	movq   QWORD PTR [rsp+0x10],xmm4
  0150c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01512:    	movq   QWORD PTR [rsp+0x20],xmm6
  01518:    	movq   QWORD PTR [rsp+0x28],xmm7
  0151e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01525: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0152c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01533: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0153a: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01541:    	mov    rdi,rbx
  01544:    	mov    rsi,r12
  01547: f6 	movabs r8,0x55f67b8678b8
  01551: f6 	movabs rax,0x55f67a71b620
  0155b:    	call   rax
  0155d:    	movq   xmm2,QWORD PTR [rsp]
  01562:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0156e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01574:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0157a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01580: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01587: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0158e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01595:    	add    rsp,0x50
  01599: f6 	movabs r13,0x55f67b8678c0
  015a3:    	test   rax,rax
  015a6:    	je     0xffff15c3
  015ac: ff 	mov    QWORD PTR [r14-0xa8],rax
:00105 %14 = %15.call z()                   [Vec]
  015b3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015ba: 00 	test   rdi,0x7
  015c1:    	jne    0x377f0
  015c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  015cb:    	jne    0x377f0
  015d1: 26 	cmp    DWORD PTR [rip+0xffffffffffff336d],0x26        # 0xffff4945
  015d8:    	jne    0x377f0
  015de:    	mov    esi,DWORD PTR [rip+0xfd8]        # 0x25bc
  015e4:    	cmp    esi,0xffffffff
  015e7:    	je     0x37860
  015ed:    	cmp    WORD PTR [rdi+0x2],0x3
  015f2:    	jne    0x160b
  015f8:    	cmp    esi,0x6
  015fb:    	jge    0x160b
  01601:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01606:    	jmp    0x1683
  0160b:    	sub    rsp,0x40
  0160f:    	movq   QWORD PTR [rsp],xmm2
  01614:    	movq   QWORD PTR [rsp+0x8],xmm3
  0161a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01620:    	movq   QWORD PTR [rsp+0x18],xmm5
  01626:    	movq   QWORD PTR [rsp+0x20],xmm7
  0162c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01633: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0163a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01641: f6 	movabs rax,0x55f67a69e160
  0164b:    	call   rax
  0164d:    	movq   xmm2,QWORD PTR [rsp]
  01652:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01658:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0165e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01664:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0166a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01671: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01678: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0167f:    	add    rsp,0x40
  01683: ff 	mov    QWORD PTR [r14-0xa0],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0168a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01691: 00 	test   rdi,0x1
  01698:    	jne    0x378f5
  0169e: 00 	test   rdi,0x2
  016a5:    	je     0x16e1
  016ab:    	xorps  xmm6,xmm6
  016ae: 00 	movabs rax,0x8000000000000002
  016b8:    	cmp    rdi,rax
  016bb:    	je     0x16f3
  016c1:    	mov    rax,rdi
  016c4:    	sar    rax,0x3f
  016c8:    	add    rax,0x2
  016cc:    	and    rdi,0xfffffffffffffffc
  016d0:    	or     rdi,rax
  016d3:    	rol    rdi,0x3d
  016d7:    	movq   xmm6,rdi
  016dc:    	jmp    0x16f3
  016e1:    	call   0xffff161c
  016e6:    	test   rax,rax
  016e9:    	je     0x378f5
  016ef:    	movq   xmm6,xmm0
  016f3:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  016f7:    	movq   xmm11,xmm3
  016fc:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01701: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3248]        # 0xffff4950
  01708: 00 	cmp    rax,QWORD PTR [rip+0xec1]        # 0x25d0
  0170f:    	jne    0x37965
  01715: 00 	mov    rax,QWORD PTR [rip+0xea4]        # 0x25c0
  0171c: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01723:    	movq   xmm0,xmm9
  01728:    	call   0xffff1740
  0172d: ff 	mov    QWORD PTR [r14-0xa0],rax
  01734:    	movq   xmm0,xmm10
  01739:    	call   0xffff1740
  0173e: ff 	mov    QWORD PTR [r14-0xa8],rax
  01745:    	movq   xmm0,xmm11
  0174a:    	call   0xffff1740
  0174f: ff 	mov    QWORD PTR [r14-0xb0],rax
  01756: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0175d: 00 	test   rdi,0x7
  01764:    	jne    0x37a25
  0176a:    	cmp    DWORD PTR [rdi+0x4],0x29
  0176e:    	jne    0x37a25
  01774: 26 	cmp    DWORD PTR [rip+0xffffffffffff31ca],0x26        # 0xffff4945
  0177b:    	jne    0x37a25
  01781: 00 	mov    r9,0x0
  01788:    	sub    rsp,0x40
  0178c:    	movq   QWORD PTR [rsp],xmm2
  01791:    	movq   QWORD PTR [rsp+0x8],xmm4
  01797:    	movq   QWORD PTR [rsp+0x10],xmm5
  0179d:    	movq   QWORD PTR [rsp+0x18],xmm7
  017a3: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017aa: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017b1: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017b8: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017bf:    	mov    rdx,rdi
  017c2:    	mov    QWORD PTR [rsp-0x40],rcx
  017c7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017d0: ff 	lea    rcx,[r14-0xa0]
  017d7: 00 	mov    r8,0x3
  017de:    	mov    rsi,QWORD PTR [rbx]
  017e1:    	mov    QWORD PTR [rsp-0x18],rsi
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rbx],rsi
  017ee:    	lea    r14,[rsp-0x10]
  017f3:    	mov    QWORD PTR [rsp-0x20],r14
  017f8:    	call   0x37a93
  017fd:    	lea    r14,[rbp-0x8]
  01801:    	mov    QWORD PTR [rbx],r14
  01804:    	mov    r14,QWORD PTR [rbp-0x10]
  01808:    	movq   xmm2,QWORD PTR [rsp]
  0180d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01813:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01819:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0181f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01826: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0182d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01834: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183b:    	add    rsp,0x40
  0183f: f6 	movabs r13,0x55f67b867970
  01849:    	test   rax,rax
  0184c:    	je     0xffff15c3
  01852:    	mov    QWORD PTR [r14-0x80],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01856: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff30f3]        # 0xffff4950
  0185d: 00 	cmp    rax,QWORD PTR [rip+0xd8c]        # 0x25f0
  01864:    	jne    0x37ac5
  0186a: 00 	mov    rax,QWORD PTR [rip+0xd6f]        # 0x25e0
  01871: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = dynvar(2, %7)
  01878:    	mov    rax,QWORD PTR [rbp-0x18]
  0187c:    	mov    rax,QWORD PTR [rax]
  0187f:    	mov    rax,QWORD PTR [rax-0x50]
  01883: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %10
  0188a:    	mov    rax,QWORD PTR [r14-0x80]
  0188e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01895: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0189c: 00 	test   rdi,0x7
  018a3:    	jne    0x37b79
  018a9:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018ad:    	jne    0x37b79
  018b3: 26 	cmp    DWORD PTR [rip+0xffffffffffff308b],0x26        # 0xffff4945
  018ba:    	jne    0x37b79
  018c0: 00 	mov    r9,0x0
  018c7:    	sub    rsp,0x40
  018cb:    	movq   QWORD PTR [rsp],xmm2
  018d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  018dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018e9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018f7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  018fe:    	mov    rdx,rdi
  01901:    	mov    QWORD PTR [rsp-0x40],rcx
  01906: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0190f: ff 	lea    rcx,[r14-0xa0]
  01916: 00 	mov    r8,0x2
  0191d:    	mov    rsi,QWORD PTR [rbx]
  01920:    	mov    QWORD PTR [rsp-0x18],rsi
  01925:    	lea    rsi,[rsp-0x18]
  0192a:    	mov    QWORD PTR [rbx],rsi
  0192d:    	lea    r14,[rsp-0x10]
  01932:    	mov    QWORD PTR [rsp-0x20],r14
  01937:    	call   0x37be7
  0193c:    	lea    r14,[rbp-0x8]
  01940:    	mov    QWORD PTR [rbx],r14
  01943:    	mov    r14,QWORD PTR [rbp-0x10]
  01947:    	movq   xmm2,QWORD PTR [rsp]
  0194c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01952:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01958:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0195e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01965: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0196c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01973: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0197a:    	add    rsp,0x40
  0197e: f6 	movabs r13,0x55f67b8679d0
  01988:    	test   rax,rax
  0198b:    	je     0xffff15c3
  01991: ff 	mov    QWORD PTR [r14-0x88],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01998: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2fb1]        # 0xffff4950
  0199f: 00 	cmp    rax,QWORD PTR [rip+0xc6a]        # 0x2610
  019a6:    	jne    0x37c19
  019ac: 00 	mov    rax,QWORD PTR [rip+0xc4d]        # 0x2600
  019b3: ff 	mov    QWORD PTR [r14-0x98],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019ba: ff 	mov    rdi,QWORD PTR [r14-0x98]
  019c1: 00 	test   rdi,0x7
  019c8:    	jne    0x37ccd
  019ce:    	cmp    DWORD PTR [rdi+0x4],0x31
  019d2:    	jne    0x37ccd
  019d8: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f66],0x26        # 0xffff4945
  019df:    	jne    0x37ccd
  019e5: 00 	mov    r9,0x0
  019ec:    	sub    rsp,0x40
  019f0:    	movq   QWORD PTR [rsp],xmm2
  019f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a01:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a07: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a0e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a15: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a1c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a23:    	mov    rdx,rdi
  01a26:    	mov    QWORD PTR [rsp-0x40],rcx
  01a2b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a34: ff 	lea    rcx,[r14-0xa0]
  01a3b: 00 	mov    r8,0x0
  01a42:    	mov    rsi,QWORD PTR [rbx]
  01a45:    	mov    QWORD PTR [rsp-0x18],rsi
  01a4a:    	lea    rsi,[rsp-0x18]
  01a4f:    	mov    QWORD PTR [rbx],rsi
  01a52:    	lea    r14,[rsp-0x10]
  01a57:    	mov    QWORD PTR [rsp-0x20],r14
  01a5c:    	call   0x37d3b
  01a61:    	lea    r14,[rbp-0x8]
  01a65:    	mov    QWORD PTR [rbx],r14
  01a68:    	mov    r14,QWORD PTR [rbp-0x10]
  01a6c:    	movq   xmm2,QWORD PTR [rsp]
  01a71:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a77:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a7d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a83: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a8a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a91: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a98: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a9f:    	add    rsp,0x40
  01aa3: f6 	movabs r13,0x55f67b867a10
  01aad:    	test   rax,rax
  01ab0:    	je     0xffff15c3
  01ab6: ff 	mov    QWORD PTR [r14-0x90],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01abd:    	mov    rdi,QWORD PTR [rbp-0x30]
  01ac1:    	mov    rax,QWORD PTR [rdi+0x10]
  01ac5: ff 	mov    QWORD PTR [r14-0x98],rax
:00128 %14 = 0: i32
  01acc: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ad7:    	sub    rsp,0x40
  01adb:    	movq   QWORD PTR [rsp],xmm2
  01ae0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ae6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01aec:    	movq   QWORD PTR [rsp+0x18],xmm7
  01af2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01af9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b00: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b07: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b0e: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01b15: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01b1c:    	mov    rdi,rbx
  01b1f:    	mov    rsi,r12
  01b22: f6 	movabs r8,0x55f67b867a48
  01b2c: f6 	movabs rax,0x55f67a71b620
  01b36:    	call   rax
  01b38:    	movq   xmm2,QWORD PTR [rsp]
  01b3d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b43:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b49:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b4f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b56: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b5d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b64: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6b:    	add    rsp,0x40
  01b6f: f6 	movabs r13,0x55f67b867a50
  01b79:    	test   rax,rax
  01b7c:    	je     0xffff15c3
  01b82: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01b89: ff 	mov    rax,QWORD PTR [r14-0x88]
  01b90: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01b97: ff 	mov    rax,QWORD PTR [r14-0x90]
  01b9e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01ba5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bac: 00 	test   rdi,0x7
  01bb3:    	jne    0x37d6d
  01bb9:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01bbd:    	jne    0x37d6d
  01bc3: 26 	cmp    DWORD PTR [rip+0xffffffffffff2d7b],0x26        # 0xffff4945
  01bca:    	jne    0x37d6d
  01bd0:    	sub    rsp,0x40
  01bd4:    	movq   QWORD PTR [rsp],xmm2
  01bd9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bdf:    	movq   QWORD PTR [rsp+0x10],xmm5
  01be5:    	movq   QWORD PTR [rsp+0x18],xmm7
  01beb: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bf2: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bf9: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c00: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c07: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c10: ff 	mov    rax,QWORD PTR [r14-0x98]
  01c17:    	mov    QWORD PTR [rsp-0x40],rax
  01c1c: 00 	mov    rdi,0x2
  01c23:    	lea    r8,[rsp-0x48]
  01c28: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01c2f:    	mov    QWORD PTR [r8],rax
  01c32:    	sub    r8,0x8
  01c36: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01c3d:    	mov    QWORD PTR [r8],rax
  01c40:    	sub    r8,0x8
  01c44: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c4d: 10 	movabs rax,0x1001000000046
  01c57:    	mov    QWORD PTR [rsp-0x30],rax
  01c5c: f6 	movabs r13,0x55f67b86e960
  01c66:    	mov    rsi,QWORD PTR [rbx]
  01c69:    	mov    QWORD PTR [rsp-0x18],rsi
  01c6e:    	lea    rsi,[rsp-0x18]
  01c73:    	mov    QWORD PTR [rbx],rsi
  01c76:    	lea    r14,[rsp-0x10]
  01c7b:    	mov    QWORD PTR [rsp-0x20],r14
  01c80:    	call   0xffff5554
  01c85:    	lea    r14,[rbp-0x8]
  01c89:    	mov    QWORD PTR [rbx],r14
  01c8c:    	mov    r14,QWORD PTR [rbp-0x10]
  01c90:    	movq   xmm2,QWORD PTR [rsp]
  01c95:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c9b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ca1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ca7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01cae: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01cb5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01cbc: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01cc3:    	add    rsp,0x40
  01cc7: f6 	movabs r13,0x55f67b867a90
  01cd1:    	test   rax,rax
  01cd4:    	je     0xffff15c3
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cda:    	mov    rdi,QWORD PTR [rbp-0x30]
  01cde:    	mov    rax,QWORD PTR [rdi+0x10]
  01ce2: ff 	mov    QWORD PTR [r14-0x98],rax
:00136 %14 = 1: i32
  01ce9: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cf4:    	sub    rsp,0x40
  01cf8:    	movq   QWORD PTR [rsp],xmm2
  01cfd:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d03:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d09:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d16: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d1d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d24: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d2b: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01d32: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01d39:    	mov    rdi,rbx
  01d3c:    	mov    rsi,r12
  01d3f: f6 	movabs r8,0x55f67b867ac8
  01d49: f6 	movabs rax,0x55f67a71b620
  01d53:    	call   rax
  01d55:    	movq   xmm2,QWORD PTR [rsp]
  01d5a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d60:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d66:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d6c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d73: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d7a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d81: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d88:    	add    rsp,0x40
  01d8c: f6 	movabs r13,0x55f67b867ad0
  01d96:    	test   rax,rax
  01d99:    	je     0xffff15c3
  01d9f: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = %11
  01da6: ff 	mov    rax,QWORD PTR [r14-0x88]
  01dad: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %15 = %12
  01db4: ff 	mov    rax,QWORD PTR [r14-0x90]
  01dbb: ff 	mov    QWORD PTR [r14-0xa8],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01dc2: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01dc9: 00 	test   rdi,0x7
  01dd0:    	jne    0x37ddb
  01dd6:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01dda:    	jne    0x37ddb
  01de0: 26 	cmp    DWORD PTR [rip+0xffffffffffff2b5e],0x26        # 0xffff4945
  01de7:    	jne    0x37ddb
  01ded:    	sub    rsp,0x40
  01df1:    	movq   QWORD PTR [rsp],xmm2
  01df6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dfc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e02:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e08: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e0f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e16: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e1d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e24: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01e2d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01e34:    	mov    QWORD PTR [rsp-0x40],rax
  01e39: 00 	mov    rdi,0x2
  01e40:    	lea    r8,[rsp-0x48]
  01e45: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01e4c:    	mov    QWORD PTR [r8],rax
  01e4f:    	sub    r8,0x8
  01e53: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e5a:    	mov    QWORD PTR [r8],rax
  01e5d:    	sub    r8,0x8
  01e61: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e6a: 10 	movabs rax,0x1001000000046
  01e74:    	mov    QWORD PTR [rsp-0x30],rax
  01e79: f6 	movabs r13,0x55f67b86e960
  01e83:    	mov    rsi,QWORD PTR [rbx]
  01e86:    	mov    QWORD PTR [rsp-0x18],rsi
  01e8b:    	lea    rsi,[rsp-0x18]
  01e90:    	mov    QWORD PTR [rbx],rsi
  01e93:    	lea    r14,[rsp-0x10]
  01e98:    	mov    QWORD PTR [rsp-0x20],r14
  01e9d:    	call   0xffff5554
  01ea2:    	lea    r14,[rbp-0x8]
  01ea6:    	mov    QWORD PTR [rbx],r14
  01ea9:    	mov    r14,QWORD PTR [rbp-0x10]
  01ead:    	movq   xmm2,QWORD PTR [rsp]
  01eb2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01eb8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ebe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ec4: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ecb: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ed2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01ed9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ee0:    	add    rsp,0x40
  01ee4: f6 	movabs r13,0x55f67b867b10
  01eee:    	test   rax,rax
  01ef1:    	je     0xffff15c3
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ef7:    	mov    rdi,QWORD PTR [rbp-0x30]
  01efb:    	mov    rax,QWORD PTR [rdi+0x10]
  01eff: ff 	mov    QWORD PTR [r14-0x98],rax
:00144 %14 = 2: i32
  01f06: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01f11:    	sub    rsp,0x40
  01f15:    	movq   QWORD PTR [rsp],xmm2
  01f1a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f20:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f26:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f2c: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f33: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f3a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f41: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f48: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01f4f: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01f56:    	mov    rdi,rbx
  01f59:    	mov    rsi,r12
  01f5c: f6 	movabs r8,0x55f67b867b48
  01f66: f6 	movabs rax,0x55f67a71b620
  01f70:    	call   rax
  01f72:    	movq   xmm2,QWORD PTR [rsp]
  01f77:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f7d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f83:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f89: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f90: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f97: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f9e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fa5:    	add    rsp,0x40
  01fa9: f6 	movabs r13,0x55f67b867b50
  01fb3:    	test   rax,rax
  01fb6:    	je     0xffff15c3
  01fbc: ff 	mov    QWORD PTR [r14-0x98],rax
:00146 %14 = %11
  01fc3: ff 	mov    rax,QWORD PTR [r14-0x88]
  01fca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 %15 = %12
  01fd1: ff 	mov    rax,QWORD PTR [r14-0x90]
  01fd8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fdf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01fe6: 00 	test   rdi,0x7
  01fed:    	jne    0x37e49
  01ff3:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ff7:    	jne    0x37e49
  01ffd: 26 	cmp    DWORD PTR [rip+0xffffffffffff2941],0x26        # 0xffff4945
  02004:    	jne    0x37e49
  0200a:    	sub    rsp,0x40
  0200e:    	movq   QWORD PTR [rsp],xmm2
  02013:    	movq   QWORD PTR [rsp+0x8],xmm4
  02019:    	movq   QWORD PTR [rsp+0x10],xmm5
  0201f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02025: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0202c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02033: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0203a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02041: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0204a: ff 	mov    rax,QWORD PTR [r14-0x98]
  02051:    	mov    QWORD PTR [rsp-0x40],rax
  02056: 00 	mov    rdi,0x2
  0205d:    	lea    r8,[rsp-0x48]
  02062: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02069:    	mov    QWORD PTR [r8],rax
  0206c:    	sub    r8,0x8
  02070: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02077:    	mov    QWORD PTR [r8],rax
  0207a:    	sub    r8,0x8
  0207e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02087: 10 	movabs rax,0x1001000000046
  02091:    	mov    QWORD PTR [rsp-0x30],rax
  02096: f6 	movabs r13,0x55f67b86e960
  020a0:    	mov    rsi,QWORD PTR [rbx]
  020a3:    	mov    QWORD PTR [rsp-0x18],rsi
  020a8:    	lea    rsi,[rsp-0x18]
  020ad:    	mov    QWORD PTR [rbx],rsi
  020b0:    	lea    r14,[rsp-0x10]
  020b5:    	mov    QWORD PTR [rsp-0x20],r14
  020ba:    	call   0xffff5554
  020bf:    	lea    r14,[rbp-0x8]
  020c3:    	mov    QWORD PTR [rbx],r14
  020c6:    	mov    r14,QWORD PTR [rbp-0x10]
  020ca:    	movq   xmm2,QWORD PTR [rsp]
  020cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020e1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020e8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020ef: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020f6: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020fd:    	add    rsp,0x40
  02101: f6 	movabs r13,0x55f67b867b90
  0210b:    	test   rax,rax
  0210e:    	je     0xffff15c3
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  02114:    	mov    rdi,QWORD PTR [rbp-0x30]
  02118:    	mov    rax,QWORD PTR [rdi+0x18]
  0211c: ff 	mov    QWORD PTR [r14-0x98],rax
:00152 %14 = %11
  02123: ff 	mov    rax,QWORD PTR [r14-0x88]
  0212a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00153 %15 = %12
  02131: ff 	mov    rax,QWORD PTR [r14-0x90]
  02138: ff 	mov    QWORD PTR [r14-0xa8],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  0213f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02146: 00 	test   rdi,0x7
  0214d:    	jne    0x37eb7
  02153:    	cmp    DWORD PTR [rdi+0x4],0x2c
  02157:    	jne    0x37eb7
  0215d: 26 	cmp    DWORD PTR [rip+0xffffffffffff27e1],0x26        # 0xffff4945
  02164:    	jne    0x37eb7
  0216a:    	sub    rsp,0x40
  0216e:    	movq   QWORD PTR [rsp],xmm2
  02173:    	movq   QWORD PTR [rsp+0x8],xmm4
  02179:    	movq   QWORD PTR [rsp+0x10],xmm5
  0217f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02185: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0218c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02193: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0219a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  021a1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  021aa: ff 	mov    rax,QWORD PTR [r14-0x98]
  021b1:    	mov    QWORD PTR [rsp-0x40],rax
  021b6: 00 	mov    rdi,0x2
  021bd:    	lea    r8,[rsp-0x48]
  021c2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  021c9:    	mov    QWORD PTR [r8],rax
  021cc:    	sub    r8,0x8
  021d0: ff 	mov    rax,QWORD PTR [r14-0xa8]
  021d7:    	mov    QWORD PTR [r8],rax
  021da:    	sub    r8,0x8
  021de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  021e7: 0e 	movabs rax,0x1000e00000048
  021f1:    	mov    QWORD PTR [rsp-0x30],rax
  021f6: f6 	movabs r13,0x55f67b870800
  02200:    	mov    rsi,QWORD PTR [rbx]
  02203:    	mov    QWORD PTR [rsp-0x18],rsi
  02208:    	lea    rsi,[rsp-0x18]
  0220d:    	mov    QWORD PTR [rbx],rsi
  02210:    	lea    r14,[rsp-0x10]
  02215:    	mov    QWORD PTR [rsp-0x20],r14
  0221a:    	call   0xffff5b2c
  0221f:    	lea    r14,[rbp-0x8]
  02223:    	mov    QWORD PTR [rbx],r14
  02226:    	mov    r14,QWORD PTR [rbp-0x10]
  0222a:    	movq   xmm2,QWORD PTR [rsp]
  0222f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02235:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0223b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02241: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02248: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0224f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02256: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0225d:    	add    rsp,0x40
  02261: f6 	movabs r13,0x55f67b867bf0
  0226b:    	test   rax,rax
  0226e:    	je     0xffff15c3
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  02274: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0227b: 00 	test   rdi,0x7
  02282:    	jne    0x37f25
  02288:    	cmp    DWORD PTR [rdi+0x4],0x30
  0228c:    	jne    0x37f25
  02292: 26 	cmp    DWORD PTR [rip+0xffffffffffff26ac],0x26        # 0xffff4945
  02299:    	jne    0x37f25
  0229f:    	mov    esi,DWORD PTR [rip+0x377]        # 0x261c
  022a5:    	cmp    esi,0xffffffff
  022a8:    	je     0x37f93
  022ae:    	cmp    WORD PTR [rdi+0x2],0x3
  022b3:    	jne    0x22cc
  022b9:    	cmp    esi,0x6
  022bc:    	jge    0x22cc
  022c2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  022c7:    	jmp    0x2346
  022cc:    	sub    rsp,0x40
  022d0:    	movq   QWORD PTR [rsp],xmm2
  022d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  022db:    	movq   QWORD PTR [rsp+0x10],xmm5
  022e1:    	movq   QWORD PTR [rsp+0x18],xmm7
  022e7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  022ee: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  022f5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022fc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02303: f6 	movabs rax,0x55f67a69e160
  0230d:    	call   rax
  0230f:    	movq   xmm2,QWORD PTR [rsp]
  02314:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0231a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02320:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02326: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0232d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02334: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0233b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02342:    	add    rsp,0x40
  02346: ff 	mov    QWORD PTR [r14-0x98],rax
:00158 
:00160 condnotbr %13 =>:00166
  0234d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02354:    	or     rax,0x10
  02358:    	cmp    rax,0x14
  0235c:    	je     0x246f
:00161 %13 = dynvar(2, %6)
  02362:    	mov    rax,QWORD PTR [rbp-0x18]
  02366:    	mov    rax,QWORD PTR [rax]
  02369:    	mov    rax,QWORD PTR [rax-0x48]
  0236d: ff 	mov    QWORD PTR [r14-0x98],rax
:00162 %14 = literal[1.0]
  02374: 00 	movq   xmm3,QWORD PTR [rip+0x2a4]        # 0x2620
  0237c: 00 	movabs rax,0xff80000000000002
  02386: ff 	mov    QWORD PTR [r14-0xa0],rax
:00163 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0238d: 01 	sub    DWORD PTR [rip+0x294],0x1        # 0x2628
  02394:    	je     0x38098
  0239a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  023a1: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  023a8:    	sub    rsp,0x50
  023ac:    	movq   QWORD PTR [rsp],xmm2
  023b1:    	movq   QWORD PTR [rsp+0x8],xmm3
  023b7:    	movq   QWORD PTR [rsp+0x10],xmm4
  023bd:    	movq   QWORD PTR [rsp+0x18],xmm5
  023c3:    	movq   QWORD PTR [rsp+0x20],xmm7
  023c9: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  023d0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  023d7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  023de: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  023e5:    	mov    rdx,rdi
  023e8:    	mov    rcx,rsi
  023eb:    	mov    rdi,rbx
  023ee:    	mov    rsi,r12
  023f1: f6 	movabs rax,0x55f67a6ddf30
  023fb:    	call   rax
  023fd:    	movq   xmm2,QWORD PTR [rsp]
  02402:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02408:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0240e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02414:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0241a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  02421: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  02428: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0242f: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  02436:    	add    rsp,0x50
  0243a: f6 	movabs r13,0x55f67b867c70
  02444:    	test   rax,rax
  02447:    	je     0xffff15c3
  0244d: ff 	mov    QWORD PTR [r14-0x98],rax
:00164 dynvar(2, %6) = %13
  02454:    	mov    rax,QWORD PTR [rbp-0x18]
  02458:    	mov    rax,QWORD PTR [rax]
  0245b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02462:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  02466: ff 	mov    rax,QWORD PTR [r14-0x98]
  0246d:    	leave  
  0246e:    	ret    
:00166 %13 = literal[0.0]
  0246f: 00 	movq   xmm3,QWORD PTR [rip+0x1b9]        # 0x2630
  02477: 00 	movabs rax,0x8000000000000002
  02481: ff 	mov    QWORD PTR [r14-0x98],rax
:00167 ret %13
  02488: ff 	mov    rax,QWORD PTR [r14-0x98]
  0248f:    	leave  
  02490:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55f67b86e960
load_ivar: no profile
<== finished compile. elapsed:135.9µs
offset:Pos(69800) code: 6055 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x35a7e
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x35a8d
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x35a8d
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x35a9c
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x35a9c
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffff226f],0x26        # 0xffff230d
  0009e:    	jne    0x35a9c
  000a4:    	mov    esi,DWORD PTR [rip+0x1701]        # 0x17ab
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x35aab
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: f6 	movabs rax,0x55f67a69e160
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x35ad4
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x35ad4
  00108: 26 	cmp    DWORD PTR [rip+0xffffffffffff21fe],0x26        # 0xffff230d
  0010f:    	jne    0x35ad4
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	lea    r8,[rsp-0x48]
  00133:    	mov    rax,QWORD PTR [r14-0x80]
  00137:    	mov    QWORD PTR [r8],rax
  0013a:    	sub    r8,0x8
  0013e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00147: 08 	movabs rax,0x800000040
  00151:    	mov    QWORD PTR [rsp-0x30],rax
  00156: f6 	movabs r13,0x55f67b855f60
  00160:    	mov    rsi,QWORD PTR [rbx]
  00163:    	mov    QWORD PTR [rsp-0x18],rsi
  00168:    	lea    rsi,[rsp-0x18]
  0016d:    	mov    QWORD PTR [rbx],rsi
  00170:    	lea    r14,[rsp-0x10]
  00175:    	mov    QWORD PTR [rsp-0x20],r14
  0017a:    	call   0xffff2fae
  0017f:    	lea    r14,[rbp-0x8]
  00183:    	mov    QWORD PTR [rbx],r14
  00186:    	mov    r14,QWORD PTR [rbp-0x10]
  0018a: f6 	movabs r13,0x55f67b86e9d0
  00194:    	test   rax,rax
  00197:    	je     0xfffeef8b
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x35ae3
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b6:    	jne    0x35ae3
  001bc: 26 	cmp    DWORD PTR [rip+0xffffffffffff214a],0x26        # 0xffff230d
  001c3:    	jne    0x35ae3
  001c9:    	mov    esi,DWORD PTR [rip+0x15e4]        # 0x17b3
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x35af2
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: f6 	movabs rax,0x55f67a69e160
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x35b1b
  00217:    	cmp    DWORD PTR [rdi+0x4],0x28
  0021b:    	jne    0x35b1b
  00221: 26 	cmp    DWORD PTR [rip+0xffffffffffff20e5],0x26        # 0xffff230d
  00228:    	jne    0x35b1b
  0022e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00237:    	mov    rax,QWORD PTR [r14-0x48]
  0023b:    	mov    QWORD PTR [rsp-0x40],rax
  00240: 00 	mov    rdi,0x1
  00247:    	lea    r8,[rsp-0x48]
  0024c:    	mov    rax,QWORD PTR [r14-0x78]
  00250:    	mov    QWORD PTR [r8],rax
  00253:    	sub    r8,0x8
  00257: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00260: 05 	movabs rax,0x500000042
  0026a:    	mov    QWORD PTR [rsp-0x30],rax
  0026f: f6 	movabs r13,0x55f67b88de50
  00279:    	mov    rsi,QWORD PTR [rbx]
  0027c:    	mov    QWORD PTR [rsp-0x18],rsi
  00281:    	lea    rsi,[rsp-0x18]
  00286:    	mov    QWORD PTR [rbx],rsi
  00289:    	lea    r14,[rsp-0x10]
  0028e:    	mov    QWORD PTR [rsp-0x20],r14
  00293:    	call   0xffff3040
  00298:    	lea    r14,[rbp-0x8]
  0029c:    	mov    QWORD PTR [rbx],r14
  0029f:    	mov    r14,QWORD PTR [rbp-0x10]
  002a3: f6 	movabs r13,0x55f67b86ea30
  002ad:    	test   rax,rax
  002b0:    	je     0xfffeef8b
  002b6:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ba:    	mov    rax,QWORD PTR [r14-0x48]
  002be:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002c2:    	mov    rdi,QWORD PTR [r14-0x48]
  002c6: 00 	test   rdi,0x7
  002cd:    	jne    0x35b2a
  002d3:    	cmp    DWORD PTR [rdi+0x4],0x28
  002d7:    	jne    0x35b2a
  002dd: 26 	cmp    DWORD PTR [rip+0xffffffffffff2029],0x26        # 0xffff230d
  002e4:    	jne    0x35b2a
  002ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002f3:    	mov    rax,QWORD PTR [r14-0x48]
  002f7:    	mov    QWORD PTR [rsp-0x40],rax
  002fc: 00 	mov    rdi,0x1
  00303:    	lea    r8,[rsp-0x48]
  00308:    	mov    rax,QWORD PTR [r14-0x80]
  0030c:    	mov    QWORD PTR [r8],rax
  0030f:    	sub    r8,0x8
  00313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0031c: 05 	movabs rax,0x500000042
  00326:    	mov    QWORD PTR [rsp-0x30],rax
  0032b: f6 	movabs r13,0x55f67b88de50
  00335:    	mov    rsi,QWORD PTR [rbx]
  00338:    	mov    QWORD PTR [rsp-0x18],rsi
  0033d:    	lea    rsi,[rsp-0x18]
  00342:    	mov    QWORD PTR [rbx],rsi
  00345:    	lea    r14,[rsp-0x10]
  0034a:    	mov    QWORD PTR [rsp-0x20],r14
  0034f:    	call   0xffff3040
  00354:    	lea    r14,[rbp-0x8]
  00358:    	mov    QWORD PTR [rbx],r14
  0035b:    	mov    r14,QWORD PTR [rbp-0x10]
  0035f: f6 	movabs r13,0x55f67b86ea70
  00369:    	test   rax,rax
  0036c:    	je     0xfffeef8b
  00372:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00376:    	mov    rdi,QWORD PTR [rbp-0x30]
  0037a:    	mov    rax,QWORD PTR [rdi+0x18]
  0037e:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00382:    	mov    rdi,QWORD PTR [rbp-0x30]
  00386:    	mov    rax,QWORD PTR [rdi+0x18]
  0038a: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00391:    	mov    rdi,QWORD PTR [r14-0x80]
  00395: 00 	test   rdi,0x1
  0039c:    	jne    0x35b39
  003a2: 00 	test   rdi,0x2
  003a9:    	je     0x3e5
  003af:    	xorps  xmm2,xmm2
  003b2: 00 	movabs rax,0x8000000000000002
  003bc:    	cmp    rdi,rax
  003bf:    	je     0x3f7
  003c5:    	mov    rax,rdi
  003c8:    	sar    rax,0x3f
  003cc:    	add    rax,0x2
  003d0:    	and    rdi,0xfffffffffffffffc
  003d4:    	or     rdi,rax
  003d7:    	rol    rdi,0x3d
  003db:    	movq   xmm2,rdi
  003e0:    	jmp    0x3f7
  003e5:    	call   0xfffeefe4
  003ea:    	test   rax,rax
  003ed:    	je     0x35b39
  003f3:    	movq   xmm2,xmm0
  003f7: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003fe: 00 	test   rdi,0x1
  00405:    	jne    0x35b48
  0040b: 00 	test   rdi,0x2
  00412:    	je     0x44e
  00418:    	xorps  xmm3,xmm3
  0041b: 00 	movabs rax,0x8000000000000002
  00425:    	cmp    rdi,rax
  00428:    	je     0x460
  0042e:    	mov    rax,rdi
  00431:    	sar    rax,0x3f
  00435:    	add    rax,0x2
  00439:    	and    rdi,0xfffffffffffffffc
  0043d:    	or     rdi,rax
  00440:    	rol    rdi,0x3d
  00444:    	movq   xmm3,rdi
  00449:    	jmp    0x460
  0044e:    	call   0xfffeefe4
  00453:    	test   rax,rax
  00456:    	je     0x35b48
  0045c:    	movq   xmm3,xmm0
  00460:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00464:    	mov    rdi,QWORD PTR [r14-0x78]
  00468: 00 	test   rdi,0x1
  0046f:    	jne    0x35b57
  00475: 00 	test   rdi,0x2
  0047c:    	je     0x4b8
  00482:    	xorps  xmm4,xmm4
  00485: 00 	movabs rax,0x8000000000000002
  0048f:    	cmp    rdi,rax
  00492:    	je     0x4ca
  00498:    	mov    rax,rdi
  0049b:    	sar    rax,0x3f
  0049f:    	add    rax,0x2
  004a3:    	and    rdi,0xfffffffffffffffc
  004a7:    	or     rdi,rax
  004aa:    	rol    rdi,0x3d
  004ae:    	movq   xmm4,rdi
  004b3:    	jmp    0x4ca
  004b8:    	call   0xfffeefe4
  004bd:    	test   rax,rax
  004c0:    	je     0x35b57
  004c6:    	movq   xmm4,xmm0
  004ca:    	movq   xmm5,xmm4
  004ce:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004d2:    	mov    rdi,QWORD PTR [r14-0x50]
  004d6: 00 	test   rdi,0x1
  004dd:    	jne    0x35b73
  004e3: 00 	test   rdi,0x2
  004ea:    	je     0x526
  004f0:    	xorps  xmm6,xmm6
  004f3: 00 	movabs rax,0x8000000000000002
  004fd:    	cmp    rdi,rax
  00500:    	je     0x538
  00506:    	mov    rax,rdi
  00509:    	sar    rax,0x3f
  0050d:    	add    rax,0x2
  00511:    	and    rdi,0xfffffffffffffffc
  00515:    	or     rdi,rax
  00518:    	rol    rdi,0x3d
  0051c:    	movq   xmm6,rdi
  00521:    	jmp    0x538
  00526:    	call   0xfffeefe4
  0052b:    	test   rax,rax
  0052e:    	je     0x35b73
  00534:    	movq   xmm6,xmm0
  00538:    	movq   xmm4,xmm6
  0053c:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  00540:    	movq   xmm7,xmm4
  00544:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00548: 00 	movq   xmm4,QWORD PTR [rip+0x1268]        # 0x17b8
  00550: 00 	movabs rax,0x8000000000000002
  0055a:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0055e:    	ucomisd xmm7,xmm4
  00562:    	jbe    0x3698b
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00568:    	movq   xmm4,xmm6
  0056c: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1255]        # 0x17c8
:00029 %11 = const[Math]                    [Math]
  00573: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1d9e]        # 0xffff2318
  0057a: 00 	cmp    rax,QWORD PTR [rip+0x1267]        # 0x17e8
  00581:    	jne    0x35b9c
  00587: 00 	mov    rax,QWORD PTR [rip+0x124a]        # 0x17d8
  0058e: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00595: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0059c: 00 	test   rdi,0x7
  005a3:    	jne    0x35c24
  005a9:    	cmp    DWORD PTR [rdi+0x4],0x21
  005ad:    	jne    0x35c24
  005b3: 26 	cmp    DWORD PTR [rip+0xffffffffffff1d53],0x26        # 0xffff230d
  005ba:    	jne    0x35c24
  005c0:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005c4:    	movq   xmm3,xmm4
  005c8:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005cc: 00 	movq   xmm4,QWORD PTR [rip+0x1224]        # 0x17f8
  005d4: 00 	movabs rax,0x8000000000000002
  005de:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e2:    	ucomisd xmm3,xmm4
  005e6:    	jbe    0x3684b
:00038 %9 = %2.call t()                     [Isect]
  005ec:    	mov    rdi,QWORD PTR [r14-0x40]
  005f0: 00 	test   rdi,0x7
  005f7:    	jne    0x35c61
  005fd:    	cmp    DWORD PTR [rdi+0x4],0x30
  00601:    	jne    0x35c61
  00607: 26 	cmp    DWORD PTR [rip+0xffffffffffff1cff],0x26        # 0xffff230d
  0060e:    	jne    0x35c61
  00614:    	mov    esi,DWORD PTR [rip+0x11ea]        # 0x1804
  0061a:    	cmp    esi,0xffffffff
  0061d:    	je     0x35cab
  00623:    	cmp    WORD PTR [rdi+0x2],0x3
  00628:    	jne    0x641
  0062e:    	cmp    esi,0x6
  00631:    	jge    0x641
  00637:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0063c:    	jmp    0x68f
  00641:    	sub    rsp,0x30
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm5
  00656:    	movq   QWORD PTR [rsp+0x18],xmm6
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00662: f6 	movabs rax,0x55f67a69e160
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00685:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0068b:    	add    rsp,0x30
  0068f:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00693:    	movq   xmm0,xmm3
  00697:    	call   0xfffef108
  0069c:    	mov    QWORD PTR [r14-0x68],rax
  006a0:    	mov    rdi,QWORD PTR [r14-0x68]
  006a4:    	mov    rsi,QWORD PTR [r14-0x78]
  006a8: 00 	test   rdi,0x1
  006af:    	je     0x35d16
  006b5: 00 	test   rsi,0x1
  006bc:    	je     0x35d16
  006c2:    	cmp    rdi,rsi
  006c5:    	jge    0x368d8
:00043 _ = %2.call t=(%7; 1)                [Isect]
  006cb:    	mov    rdi,QWORD PTR [r14-0x40]
  006cf: 00 	test   rdi,0x7
  006d6:    	jne    0x35d77
  006dc:    	cmp    DWORD PTR [rdi+0x4],0x30
  006e0:    	jne    0x35d77
  006e6: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c20],0x26        # 0xffff230d
  006ed:    	jne    0x35d77
  006f3:    	mov    esi,DWORD PTR [rip+0x1113]        # 0x180c
  006f9:    	cmp    esi,0xffffffff
  006fc:    	je     0x35db4
  00702:    	cmp    WORD PTR [rdi+0x2],0x3
  00707:    	jne    0x724
  0070d:    	cmp    esi,0x6
  00710:    	jge    0x724
  00716:    	mov    rax,QWORD PTR [r14-0x68]
  0071a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071f:    	jmp    0x789
  00724:    	sub    rsp,0x30
  00728:    	movq   QWORD PTR [rsp],xmm2
  0072d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00733:    	movq   QWORD PTR [rsp+0x10],xmm5
  00739:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00745:    	mov    rdx,QWORD PTR [r14-0x68]
  00749: f6 	movabs rax,0x55f67a69e3e0
  00753:    	call   rax
  00755:    	movq   xmm2,QWORD PTR [rsp]
  0075a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00760:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00766:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0076c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00772:    	add    rsp,0x30
  00776: f6 	movabs r13,0x55f67b86ec30
  00780:    	test   rax,rax
  00783:    	je     0xfffeef8b
:00044 
:00046 %9 = literal[true]
  00789: 00 	mov    rax,0x1c
  00790:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  00794:    	mov    rdi,QWORD PTR [r14-0x40]
  00798: 00 	test   rdi,0x7
  0079f:    	jne    0x35e26
  007a5:    	cmp    DWORD PTR [rdi+0x4],0x30
  007a9:    	jne    0x35e26
  007af: 26 	cmp    DWORD PTR [rip+0xffffffffffff1b57],0x26        # 0xffff230d
  007b6:    	jne    0x35e26
  007bc:    	mov    esi,DWORD PTR [rip+0x1052]        # 0x1814
  007c2:    	cmp    esi,0xffffffff
  007c5:    	je     0x35e63
  007cb:    	cmp    WORD PTR [rdi+0x2],0x3
  007d0:    	jne    0x7ed
  007d6:    	cmp    esi,0x6
  007d9:    	jge    0x7ed
  007df:    	mov    rax,QWORD PTR [r14-0x78]
  007e3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007e8:    	jmp    0x852
  007ed:    	sub    rsp,0x30
  007f1:    	movq   QWORD PTR [rsp],xmm2
  007f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  007fc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00802:    	movq   QWORD PTR [rsp+0x18],xmm6
  00808:    	movq   QWORD PTR [rsp+0x20],xmm7
  0080e:    	mov    rdx,QWORD PTR [r14-0x78]
  00812: f6 	movabs rax,0x55f67a69e3e0
  0081c:    	call   rax
  0081e:    	movq   xmm2,QWORD PTR [rsp]
  00823:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00829:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0082f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00835:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0083b:    	add    rsp,0x30
  0083f: f6 	movabs r13,0x55f67b86ec70
  00849:    	test   rax,rax
  0084c:    	je     0xfffeef8b
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00852: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1abf]        # 0xffff2318
  00859: 00 	cmp    rax,QWORD PTR [rip+0xfc8]        # 0x1828
  00860:    	jne    0x35ed5
  00866: 00 	mov    rax,QWORD PTR [rip+0xfab]        # 0x1818
  0086d:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [Ray]
  00871:    	mov    rdi,QWORD PTR [r14-0x38]
  00875: 00 	test   rdi,0x7
  0087c:    	jne    0x35f51
  00882:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00886:    	jne    0x35f51
  0088c: 26 	cmp    DWORD PTR [rip+0xffffffffffff1a7a],0x26        # 0xffff230d
  00893:    	jne    0x35f51
  00899:    	mov    esi,DWORD PTR [rip+0xf95]        # 0x1834
  0089f:    	cmp    esi,0xffffffff
  008a2:    	je     0x35f7a
  008a8:    	cmp    WORD PTR [rdi+0x2],0x3
  008ad:    	jne    0x8c6
  008b3:    	cmp    esi,0x6
  008b6:    	jge    0x8c6
  008bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008c1:    	jmp    0x908
  008c6:    	sub    rsp,0x20
  008ca:    	movq   QWORD PTR [rsp],xmm3
  008cf:    	movq   QWORD PTR [rsp+0x8],xmm5
  008d5:    	movq   QWORD PTR [rsp+0x10],xmm6
  008db:    	movq   QWORD PTR [rsp+0x18],xmm7
  008e1: f6 	movabs rax,0x55f67a69e160
  008eb:    	call   rax
  008ed:    	movq   xmm3,QWORD PTR [rsp]
  008f2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  008f8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  008fe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00904:    	add    rsp,0x20
  00908: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  0090f: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00916: 00 	test   rdi,0x7
  0091d:    	jne    0x35fd9
  00923:    	cmp    DWORD PTR [rdi+0x4],0x28
  00927:    	jne    0x35fd9
  0092d: 26 	cmp    DWORD PTR [rip+0xffffffffffff19d9],0x26        # 0xffff230d
  00934:    	jne    0x35fd9
  0093a:    	mov    esi,DWORD PTR [rip+0xefc]        # 0x183c
  00940:    	cmp    esi,0xffffffff
  00943:    	je     0x36002
  00949:    	cmp    WORD PTR [rdi+0x2],0x3
  0094e:    	jne    0x967
  00954:    	cmp    esi,0x6
  00957:    	jge    0x967
  0095d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00962:    	jmp    0x9a9
  00967:    	sub    rsp,0x20
  0096b:    	movq   QWORD PTR [rsp],xmm3
  00970:    	movq   QWORD PTR [rsp+0x8],xmm5
  00976:    	movq   QWORD PTR [rsp+0x10],xmm6
  0097c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00982: f6 	movabs rax,0x55f67a69e160
  0098c:    	call   rax
  0098e:    	movq   xmm3,QWORD PTR [rsp]
  00993:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00999:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0099f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009a5:    	add    rsp,0x20
  009a9: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  009b0:    	mov    rdi,QWORD PTR [r14-0x38]
  009b4: 00 	test   rdi,0x7
  009bb:    	jne    0x36061
  009c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009c5:    	jne    0x36061
  009cb: 26 	cmp    DWORD PTR [rip+0xffffffffffff193b],0x26        # 0xffff230d
  009d2:    	jne    0x36061
  009d8:    	mov    esi,DWORD PTR [rip+0xe66]        # 0x1844
  009de:    	cmp    esi,0xffffffff
  009e1:    	je     0x3608a
  009e7:    	cmp    WORD PTR [rdi+0x2],0x3
  009ec:    	jne    0xa05
  009f2:    	cmp    esi,0x6
  009f5:    	jge    0xa05
  009fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a00:    	jmp    0xa47
  00a05:    	sub    rsp,0x20
  00a09:    	movq   QWORD PTR [rsp],xmm3
  00a0e:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a14:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a1a:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a20: f6 	movabs rax,0x55f67a69e160
  00a2a:    	call   rax
  00a2c:    	movq   xmm3,QWORD PTR [rsp]
  00a31:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a37:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a3d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a43:    	add    rsp,0x20
  00a47: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00a4e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00a55: 00 	test   rdi,0x7
  00a5c:    	jne    0x360e9
  00a62:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a66:    	jne    0x360e9
  00a6c: 26 	cmp    DWORD PTR [rip+0xffffffffffff189a],0x26        # 0xffff230d
  00a73:    	jne    0x360e9
  00a79:    	mov    esi,DWORD PTR [rip+0xdcd]        # 0x184c
  00a7f:    	cmp    esi,0xffffffff
  00a82:    	je     0x36112
  00a88:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8d:    	jne    0xaa6
  00a93:    	cmp    esi,0x6
  00a96:    	jge    0xaa6
  00a9c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa1:    	jmp    0xae8
  00aa6:    	sub    rsp,0x20
  00aaa:    	movq   QWORD PTR [rsp],xmm3
  00aaf:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ab5:    	movq   QWORD PTR [rsp+0x10],xmm6
  00abb:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ac1: f6 	movabs rax,0x55f67a69e160
  00acb:    	call   rax
  00acd:    	movq   xmm3,QWORD PTR [rsp]
  00ad2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ad8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ade:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ae4:    	add    rsp,0x20
  00ae8: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00aef: 01 	sub    DWORD PTR [rip+0xd5a],0x1        # 0x1850
  00af6:    	je     0x3619a
  00afc: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00b03:    	mov    rsi,QWORD PTR [r14-0x68]
  00b07:    	sub    rsp,0x20
  00b0b:    	movq   QWORD PTR [rsp],xmm3
  00b10:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b16:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b1c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b22:    	mov    rdx,rdi
  00b25:    	mov    rcx,rsi
  00b28:    	mov    rdi,rbx
  00b2b:    	mov    rsi,r12
  00b2e: f6 	movabs rax,0x55f67a6dfeb0
  00b38:    	call   rax
  00b3a:    	movq   xmm3,QWORD PTR [rsp]
  00b3f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b45:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b4b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b51:    	add    rsp,0x20
  00b55: f6 	movabs r13,0x55f67b86ed60
  00b5f:    	test   rax,rax
  00b62:    	je     0xfffeef8b
  00b68: ff 	mov    QWORD PTR [r14-0x90],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00b6f: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b76: ff 	mov    rsi,QWORD PTR [r14-0x90]
  00b7d:    	sub    rsp,0x20
  00b81:    	movq   QWORD PTR [rsp],xmm3
  00b86:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b8c:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b92:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b98:    	mov    rdx,rdi
  00b9b:    	mov    rcx,rsi
  00b9e:    	mov    rdi,rbx
  00ba1:    	mov    rsi,r12
  00ba4: f6 	movabs rax,0x55f67a6ddf30
  00bae:    	call   rax
  00bb0:    	movq   xmm3,QWORD PTR [rsp]
  00bb5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00bbb:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00bc1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bc7:    	add    rsp,0x20
  00bcb: f6 	movabs r13,0x55f67b86ed70
  00bd5:    	test   rax,rax
  00bd8:    	je     0xfffeef8b
  00bde: ff 	mov    QWORD PTR [r14-0x88],rax
:00065 %13 = %1.call org()                  [Ray]
  00be5:    	mov    rdi,QWORD PTR [r14-0x38]
  00be9: 00 	test   rdi,0x7
  00bf0:    	jne    0x361b8
  00bf6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00bfa:    	jne    0x361b8
  00c00: 26 	cmp    DWORD PTR [rip+0xffffffffffff1706],0x26        # 0xffff230d
  00c07:    	jne    0x361b8
  00c0d:    	mov    esi,DWORD PTR [rip+0xc45]        # 0x1858
  00c13:    	cmp    esi,0xffffffff
  00c16:    	je     0x361e1
  00c1c:    	cmp    WORD PTR [rdi+0x2],0x3
  00c21:    	jne    0xc3a
  00c27:    	cmp    esi,0x6
  00c2a:    	jge    0xc3a
  00c30:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c35:    	jmp    0xc7c
  00c3a:    	sub    rsp,0x20
  00c3e:    	movq   QWORD PTR [rsp],xmm3
  00c43:    	movq   QWORD PTR [rsp+0x8],xmm5
  00c49:    	movq   QWORD PTR [rsp+0x10],xmm6
  00c4f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c55: f6 	movabs rax,0x55f67a69e160
  00c5f:    	call   rax
  00c61:    	movq   xmm3,QWORD PTR [rsp]
  00c66:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c6c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c72:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c78:    	add    rsp,0x20
  00c7c: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00c83: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c8a: 00 	test   rdi,0x7
  00c91:    	jne    0x36240
  00c97:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c9b:    	jne    0x36240
  00ca1: 26 	cmp    DWORD PTR [rip+0xffffffffffff1665],0x26        # 0xffff230d
  00ca8:    	jne    0x36240
  00cae:    	mov    esi,DWORD PTR [rip+0xbac]        # 0x1860
  00cb4:    	cmp    esi,0xffffffff
  00cb7:    	je     0x36269
  00cbd:    	cmp    WORD PTR [rdi+0x2],0x3
  00cc2:    	jne    0xcdb
  00cc8:    	cmp    esi,0x6
  00ccb:    	jge    0xcdb
  00cd1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cd6:    	jmp    0xd1d
  00cdb:    	sub    rsp,0x20
  00cdf:    	movq   QWORD PTR [rsp],xmm3
  00ce4:    	movq   QWORD PTR [rsp+0x8],xmm5
  00cea:    	movq   QWORD PTR [rsp+0x10],xmm6
  00cf0:    	movq   QWORD PTR [rsp+0x18],xmm7
  00cf6: f6 	movabs rax,0x55f67a69e160
  00d00:    	call   rax
  00d02:    	movq   xmm3,QWORD PTR [rsp]
  00d07:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d0d:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d13:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d19:    	add    rsp,0x20
  00d1d: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d24:    	mov    rdi,QWORD PTR [r14-0x38]
  00d28: 00 	test   rdi,0x7
  00d2f:    	jne    0x362c8
  00d35:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d39:    	jne    0x362c8
  00d3f: 26 	cmp    DWORD PTR [rip+0xffffffffffff15c7],0x26        # 0xffff230d
  00d46:    	jne    0x362c8
  00d4c:    	mov    esi,DWORD PTR [rip+0xb16]        # 0x1868
  00d52:    	cmp    esi,0xffffffff
  00d55:    	je     0x362f1
  00d5b:    	cmp    WORD PTR [rdi+0x2],0x3
  00d60:    	jne    0xd79
  00d66:    	cmp    esi,0x6
  00d69:    	jge    0xd79
  00d6f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d74:    	jmp    0xdbb
  00d79:    	sub    rsp,0x20
  00d7d:    	movq   QWORD PTR [rsp],xmm3
  00d82:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d88:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d8e:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d94: f6 	movabs rax,0x55f67a69e160
  00d9e:    	call   rax
  00da0:    	movq   xmm3,QWORD PTR [rsp]
  00da5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00dab:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00db1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00db7:    	add    rsp,0x20
  00dbb: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00dc2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00dc9: 00 	test   rdi,0x7
  00dd0:    	jne    0x36350
  00dd6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dda:    	jne    0x36350
  00de0: 26 	cmp    DWORD PTR [rip+0xffffffffffff1526],0x26        # 0xffff230d
  00de7:    	jne    0x36350
  00ded:    	mov    esi,DWORD PTR [rip+0xa7d]        # 0x1870
  00df3:    	cmp    esi,0xffffffff
  00df6:    	je     0x36379
  00dfc:    	cmp    WORD PTR [rdi+0x2],0x3
  00e01:    	jne    0xe1a
  00e07:    	cmp    esi,0x6
  00e0a:    	jge    0xe1a
  00e10:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e15:    	jmp    0xe5c
  00e1a:    	sub    rsp,0x20
  00e1e:    	movq   QWORD PTR [rsp],xmm3
  00e23:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e29:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e2f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e35: f6 	movabs rax,0x55f67a69e160
  00e3f:    	call   rax
  00e41:    	movq   xmm3,QWORD PTR [rsp]
  00e46:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e4c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e52:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e58:    	add    rsp,0x20
  00e5c: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  00e63: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00e6a:    	mov    rsi,QWORD PTR [r14-0x68]
  00e6e:    	sub    rsp,0x20
  00e72:    	movq   QWORD PTR [rsp],xmm3
  00e77:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e7d:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e83:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e89:    	mov    rdx,rdi
  00e8c:    	mov    rcx,rsi
  00e8f:    	mov    rdi,rbx
  00e92:    	mov    rsi,r12
  00e95: f6 	movabs rax,0x55f67a6dfeb0
  00e9f:    	call   rax
  00ea1:    	movq   xmm3,QWORD PTR [rsp]
  00ea6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00eac:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00eb2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00eb8:    	add    rsp,0x20
  00ebc: f6 	movabs r13,0x55f67b86ee40
  00ec6:    	test   rax,rax
  00ec9:    	je     0xfffeef8b
  00ecf: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  00ed6: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00edd: ff 	mov    rsi,QWORD PTR [r14-0x98]
  00ee4:    	sub    rsp,0x20
  00ee8:    	movq   QWORD PTR [rsp],xmm3
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ef3:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ef9:    	movq   QWORD PTR [rsp+0x18],xmm7
  00eff:    	mov    rdx,rdi
  00f02:    	mov    rcx,rsi
  00f05:    	mov    rdi,rbx
  00f08:    	mov    rsi,r12
  00f0b: f6 	movabs rax,0x55f67a6ddf30
  00f15:    	call   rax
  00f17:    	movq   xmm3,QWORD PTR [rsp]
  00f1c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f22:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f28:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f2e:    	add    rsp,0x20
  00f32: f6 	movabs r13,0x55f67b86ee50
  00f3c:    	test   rax,rax
  00f3f:    	je     0xfffeef8b
  00f45: ff 	mov    QWORD PTR [r14-0x90],rax
:00079 %14 = %1.call org()                  [Ray]
  00f4c:    	mov    rdi,QWORD PTR [r14-0x38]
  00f50: 00 	test   rdi,0x7
  00f57:    	jne    0x363d8
  00f5d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00f61:    	jne    0x363d8
  00f67: 26 	cmp    DWORD PTR [rip+0xffffffffffff139f],0x26        # 0xffff230d
  00f6e:    	jne    0x363d8
  00f74:    	mov    esi,DWORD PTR [rip+0x8fe]        # 0x1878
  00f7a:    	cmp    esi,0xffffffff
  00f7d:    	je     0x36401
  00f83:    	cmp    WORD PTR [rdi+0x2],0x3
  00f88:    	jne    0xfa1
  00f8e:    	cmp    esi,0x6
  00f91:    	jge    0xfa1
  00f97:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f9c:    	jmp    0xfe3
  00fa1:    	sub    rsp,0x20
  00fa5:    	movq   QWORD PTR [rsp],xmm3
  00faa:    	movq   QWORD PTR [rsp+0x8],xmm5
  00fb0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00fb6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00fbc: f6 	movabs rax,0x55f67a69e160
  00fc6:    	call   rax
  00fc8:    	movq   xmm3,QWORD PTR [rsp]
  00fcd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fd3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00fd9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00fdf:    	add    rsp,0x20
  00fe3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  00fea: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ff1: 00 	test   rdi,0x7
  00ff8:    	jne    0x36460
  00ffe:    	cmp    DWORD PTR [rdi+0x4],0x28
  01002:    	jne    0x36460
  01008: 26 	cmp    DWORD PTR [rip+0xffffffffffff12fe],0x26        # 0xffff230d
  0100f:    	jne    0x36460
  01015:    	mov    esi,DWORD PTR [rip+0x865]        # 0x1880
  0101b:    	cmp    esi,0xffffffff
  0101e:    	je     0x36489
  01024:    	cmp    WORD PTR [rdi+0x2],0x3
  01029:    	jne    0x1042
  0102f:    	cmp    esi,0x6
  01032:    	jge    0x1042
  01038:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0103d:    	jmp    0x1084
  01042:    	sub    rsp,0x20
  01046:    	movq   QWORD PTR [rsp],xmm3
  0104b:    	movq   QWORD PTR [rsp+0x8],xmm5
  01051:    	movq   QWORD PTR [rsp+0x10],xmm6
  01057:    	movq   QWORD PTR [rsp+0x18],xmm7
  0105d: f6 	movabs rax,0x55f67a69e160
  01067:    	call   rax
  01069:    	movq   xmm3,QWORD PTR [rsp]
  0106e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01074:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0107a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01080:    	add    rsp,0x20
  01084: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  0108b:    	mov    rdi,QWORD PTR [r14-0x38]
  0108f: 00 	test   rdi,0x7
  01096:    	jne    0x364e8
  0109c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010a0:    	jne    0x364e8
  010a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff1260],0x26        # 0xffff230d
  010ad:    	jne    0x364e8
  010b3:    	mov    esi,DWORD PTR [rip+0x7cf]        # 0x1888
  010b9:    	cmp    esi,0xffffffff
  010bc:    	je     0x36511
  010c2:    	cmp    WORD PTR [rdi+0x2],0x3
  010c7:    	jne    0x10e0
  010cd:    	cmp    esi,0x6
  010d0:    	jge    0x10e0
  010d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010db:    	jmp    0x1122
  010e0:    	sub    rsp,0x20
  010e4:    	movq   QWORD PTR [rsp],xmm3
  010e9:    	movq   QWORD PTR [rsp+0x8],xmm5
  010ef:    	movq   QWORD PTR [rsp+0x10],xmm6
  010f5:    	movq   QWORD PTR [rsp+0x18],xmm7
  010fb: f6 	movabs rax,0x55f67a69e160
  01105:    	call   rax
  01107:    	movq   xmm3,QWORD PTR [rsp]
  0110c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01112:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01118:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0111e:    	add    rsp,0x20
  01122: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  01129: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01130: 00 	test   rdi,0x7
  01137:    	jne    0x36570
  0113d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01141:    	jne    0x36570
  01147: 26 	cmp    DWORD PTR [rip+0xffffffffffff11bf],0x26        # 0xffff230d
  0114e:    	jne    0x36570
  01154:    	mov    esi,DWORD PTR [rip+0x736]        # 0x1890
  0115a:    	cmp    esi,0xffffffff
  0115d:    	je     0x36599
  01163:    	cmp    WORD PTR [rdi+0x2],0x3
  01168:    	jne    0x1181
  0116e:    	cmp    esi,0x6
  01171:    	jge    0x1181
  01177:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0117c:    	jmp    0x11c3
  01181:    	sub    rsp,0x20
  01185:    	movq   QWORD PTR [rsp],xmm3
  0118a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01190:    	movq   QWORD PTR [rsp+0x10],xmm6
  01196:    	movq   QWORD PTR [rsp+0x18],xmm7
  0119c: f6 	movabs rax,0x55f67a69e160
  011a6:    	call   rax
  011a8:    	movq   xmm3,QWORD PTR [rsp]
  011ad:    	movq   xmm5,QWORD PTR [rsp+0x8]
  011b3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  011b9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  011bf:    	add    rsp,0x20
  011c3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  011ca: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  011d1:    	mov    rsi,QWORD PTR [r14-0x68]
  011d5:    	sub    rsp,0x20
  011d9:    	movq   QWORD PTR [rsp],xmm3
  011de:    	movq   QWORD PTR [rsp+0x8],xmm5
  011e4:    	movq   QWORD PTR [rsp+0x10],xmm6
  011ea:    	movq   QWORD PTR [rsp+0x18],xmm7
  011f0:    	mov    rdx,rdi
  011f3:    	mov    rcx,rsi
  011f6:    	mov    rdi,rbx
  011f9:    	mov    rsi,r12
  011fc: f6 	movabs rax,0x55f67a6dfeb0
  01206:    	call   rax
  01208:    	movq   xmm3,QWORD PTR [rsp]
  0120d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01213:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01219:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0121f:    	add    rsp,0x20
  01223: f6 	movabs r13,0x55f67b86ef20
  0122d:    	test   rax,rax
  01230:    	je     0xfffeef8b
  01236: ff 	mov    QWORD PTR [r14-0xa0],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0123d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01244: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  0124b:    	sub    rsp,0x20
  0124f:    	movq   QWORD PTR [rsp],xmm3
  01254:    	movq   QWORD PTR [rsp+0x8],xmm5
  0125a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01260:    	movq   QWORD PTR [rsp+0x18],xmm7
  01266:    	mov    rdx,rdi
  01269:    	mov    rcx,rsi
  0126c:    	mov    rdi,rbx
  0126f:    	mov    rsi,r12
  01272: f6 	movabs rax,0x55f67a6ddf30
  0127c:    	call   rax
  0127e:    	movq   xmm3,QWORD PTR [rsp]
  01283:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01289:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0128f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01295:    	add    rsp,0x20
  01299: f6 	movabs r13,0x55f67b86ef30
  012a3:    	test   rax,rax
  012a6:    	je     0xfffeef8b
  012ac: ff 	mov    QWORD PTR [r14-0x98],rax
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  012b3:    	mov    rdi,QWORD PTR [r14-0x80]
  012b7: 00 	test   rdi,0x7
  012be:    	jne    0x365f8
  012c4:    	cmp    DWORD PTR [rdi+0x4],0x29
  012c8:    	jne    0x365f8
  012ce: 26 	cmp    DWORD PTR [rip+0xffffffffffff1038],0x26        # 0xffff230d
  012d5:    	jne    0x365f8
  012db: 00 	mov    r9,0x0
  012e2:    	sub    rsp,0x20
  012e6:    	movq   QWORD PTR [rsp],xmm3
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x10],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x18],xmm7
  012fd:    	mov    rdx,rdi
  01300:    	mov    QWORD PTR [rsp-0x40],rcx
  01305: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0130e: ff 	lea    rcx,[r14-0x88]
  01315: 00 	mov    r8,0x3
  0131c:    	mov    rsi,QWORD PTR [rbx]
  0131f:    	mov    QWORD PTR [rsp-0x18],rsi
  01324:    	lea    rsi,[rsp-0x18]
  01329:    	mov    QWORD PTR [rbx],rsi
  0132c:    	lea    r14,[rsp-0x10]
  01331:    	mov    QWORD PTR [rsp-0x20],r14
  01336:    	call   0x36621
  0133b:    	lea    r14,[rbp-0x8]
  0133f:    	mov    QWORD PTR [rbx],r14
  01342:    	mov    r14,QWORD PTR [rbp-0x10]
  01346:    	movq   xmm3,QWORD PTR [rsp]
  0134b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01351:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01357:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0135d:    	add    rsp,0x20
  01361: f6 	movabs r13,0x55f67b86ef50
  0136b:    	test   rax,rax
  0136e:    	je     0xfffeef8b
  01374:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  01378:    	mov    rdi,QWORD PTR [r14-0x40]
  0137c: 00 	test   rdi,0x7
  01383:    	jne    0x36653
  01389:    	cmp    DWORD PTR [rdi+0x4],0x30
  0138d:    	jne    0x36653
  01393: 26 	cmp    DWORD PTR [rip+0xffffffffffff0f73],0x26        # 0xffff230d
  0139a:    	jne    0x36653
  013a0:    	mov    esi,DWORD PTR [rip+0x4f2]        # 0x1898
  013a6:    	cmp    esi,0xffffffff
  013a9:    	je     0x3667c
  013af:    	cmp    WORD PTR [rdi+0x2],0x3
  013b4:    	jne    0x13d1
  013ba:    	cmp    esi,0x6
  013bd:    	jge    0x13d1
  013c3:    	mov    rax,QWORD PTR [r14-0x78]
  013c7:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013cc:    	jmp    0x142a
  013d1:    	sub    rsp,0x20
  013d5:    	movq   QWORD PTR [rsp],xmm3
  013da:    	movq   QWORD PTR [rsp+0x8],xmm5
  013e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  013e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  013ec:    	mov    rdx,QWORD PTR [r14-0x78]
  013f0: f6 	movabs rax,0x55f67a69e3e0
  013fa:    	call   rax
  013fc:    	movq   xmm3,QWORD PTR [rsp]
  01401:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01407:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0140d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01413:    	add    rsp,0x20
  01417: f6 	movabs r13,0x55f67b86ef80
  01421:    	test   rax,rax
  01424:    	je     0xfffeef8b
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  0142a:    	mov    rdi,QWORD PTR [r14-0x40]
  0142e: 00 	test   rdi,0x7
  01435:    	jne    0x366e2
  0143b:    	cmp    DWORD PTR [rdi+0x4],0x30
  0143f:    	jne    0x366e2
  01445: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ec1],0x26        # 0xffff230d
  0144c:    	jne    0x366e2
  01452:    	mov    esi,DWORD PTR [rip+0x448]        # 0x18a0
  01458:    	cmp    esi,0xffffffff
  0145b:    	je     0x3670b
  01461:    	cmp    WORD PTR [rdi+0x2],0x3
  01466:    	jne    0x147f
  0146c:    	cmp    esi,0x6
  0146f:    	jge    0x147f
  01475:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0147a:    	jmp    0x14c1
  0147f:    	sub    rsp,0x20
  01483:    	movq   QWORD PTR [rsp],xmm3
  01488:    	movq   QWORD PTR [rsp+0x8],xmm5
  0148e:    	movq   QWORD PTR [rsp+0x10],xmm6
  01494:    	movq   QWORD PTR [rsp+0x18],xmm7
  0149a: f6 	movabs rax,0x55f67a69e160
  014a4:    	call   rax
  014a6:    	movq   xmm3,QWORD PTR [rsp]
  014ab:    	movq   xmm5,QWORD PTR [rsp+0x8]
  014b1:    	movq   xmm6,QWORD PTR [rsp+0x10]
  014b7:    	movq   xmm7,QWORD PTR [rsp+0x18]
  014bd:    	add    rsp,0x20
  014c1:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  014c5:    	mov    rdi,QWORD PTR [rbp-0x30]
  014c9:    	sub    rsp,0x20
  014cd:    	movq   QWORD PTR [rsp],xmm3
  014d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  014d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  014de:    	movq   QWORD PTR [rsp+0x18],xmm7
  014e4: 00 	mov    rsi,0x90
  014eb:    	mov    rdx,r12
  014ee: f6 	movabs rax,0x55f67a71b840
  014f8:    	call   rax
  014fa:    	movq   xmm3,QWORD PTR [rsp]
  014ff:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01505:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0150b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01511:    	add    rsp,0x20
  01515:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  01519:    	mov    rdi,QWORD PTR [r14-0x78]
  0151d: 00 	test   rdi,0x7
  01524:    	jne    0x3676a
  0152a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0152e:    	jne    0x3676a
  01534: 26 	cmp    DWORD PTR [rip+0xffffffffffff0dd2],0x26        # 0xffff230d
  0153b:    	jne    0x3676a
  01541:    	sub    rsp,0x20
  01545:    	movq   QWORD PTR [rsp],xmm3
  0154a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01550:    	movq   QWORD PTR [rsp+0x10],xmm6
  01556:    	movq   QWORD PTR [rsp+0x18],xmm7
  0155c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01565:    	mov    rax,QWORD PTR [r14-0x78]
  01569:    	mov    QWORD PTR [rsp-0x40],rax
  0156e: 00 	mov    rdi,0x1
  01575:    	lea    r8,[rsp-0x48]
  0157a:    	mov    rax,QWORD PTR [r14-0x80]
  0157e:    	mov    QWORD PTR [r8],rax
  01581:    	sub    r8,0x8
  01585: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0158e: 08 	movabs rax,0x1000800000040
  01598:    	mov    QWORD PTR [rsp-0x30],rax
  0159d: f6 	movabs r13,0x55f67b855f60
  015a7:    	mov    rsi,QWORD PTR [rbx]
  015aa:    	mov    QWORD PTR [rsp-0x18],rsi
  015af:    	lea    rsi,[rsp-0x18]
  015b4:    	mov    QWORD PTR [rbx],rsi
  015b7:    	lea    r14,[rsp-0x10]
  015bc:    	mov    QWORD PTR [rsp-0x20],r14
  015c1:    	call   0xffff2fae
  015c6:    	lea    r14,[rbp-0x8]
  015ca:    	mov    QWORD PTR [rbx],r14
  015cd:    	mov    r14,QWORD PTR [rbp-0x10]
  015d1:    	movq   xmm3,QWORD PTR [rsp]
  015d6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015dc:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015e2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015e8:    	add    rsp,0x20
  015ec: f6 	movabs r13,0x55f67b86eff0
  015f6:    	test   rax,rax
  015f9:    	je     0xfffeef8b
  015ff:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  01603:    	mov    rdi,QWORD PTR [r14-0x70]
  01607: 00 	test   rdi,0x7
  0160e:    	jne    0x36793
  01614:    	cmp    DWORD PTR [rdi+0x4],0x28
  01618:    	jne    0x36793
  0161e: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ce8],0x26        # 0xffff230d
  01625:    	jne    0x36793
  0162b:    	sub    rsp,0x20
  0162f:    	movq   QWORD PTR [rsp],xmm3
  01634:    	movq   QWORD PTR [rsp+0x8],xmm5
  0163a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01640:    	movq   QWORD PTR [rsp+0x18],xmm7
  01646: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0164f:    	mov    rax,QWORD PTR [r14-0x70]
  01653:    	mov    QWORD PTR [rsp-0x40],rax
  01658: 00 	mov    rdi,0x0
  0165f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01668: 07 	movabs rax,0x1000700000044
  01672:    	mov    QWORD PTR [rsp-0x30],rax
  01677: f6 	movabs r13,0x55f67b84eec0
  01681:    	mov    rsi,QWORD PTR [rbx]
  01684:    	mov    QWORD PTR [rsp-0x18],rsi
  01689:    	lea    rsi,[rsp-0x18]
  0168e:    	mov    QWORD PTR [rbx],rsi
  01691:    	lea    r14,[rsp-0x10]
  01696:    	mov    QWORD PTR [rsp-0x20],r14
  0169b:    	call   0xffff2c14
  016a0:    	lea    r14,[rbp-0x8]
  016a4:    	mov    QWORD PTR [rbx],r14
  016a7:    	mov    r14,QWORD PTR [rbp-0x10]
  016ab:    	movq   xmm3,QWORD PTR [rsp]
  016b0:    	movq   xmm5,QWORD PTR [rsp+0x8]
  016b6:    	movq   xmm6,QWORD PTR [rsp+0x10]
  016bc:    	movq   xmm7,QWORD PTR [rsp+0x18]
  016c2:    	add    rsp,0x20
  016c6: f6 	movabs r13,0x55f67b86f020
  016d0:    	test   rax,rax
  016d3:    	je     0xfffeef8b
  016d9:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  016dd:    	mov    rdi,QWORD PTR [r14-0x40]
  016e1: 00 	test   rdi,0x7
  016e8:    	jne    0x367bc
  016ee:    	cmp    DWORD PTR [rdi+0x4],0x30
  016f2:    	jne    0x367bc
  016f8: 26 	cmp    DWORD PTR [rip+0xffffffffffff0c0e],0x26        # 0xffff230d
  016ff:    	jne    0x367bc
  01705:    	mov    esi,DWORD PTR [rip+0x19d]        # 0x18a8
  0170b:    	cmp    esi,0xffffffff
  0170e:    	je     0x367e5
  01714:    	cmp    WORD PTR [rdi+0x2],0x3
  01719:    	jne    0x1736
  0171f:    	cmp    esi,0x6
  01722:    	jge    0x1736
  01728:    	mov    rax,QWORD PTR [r14-0x78]
  0172c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01731:    	jmp    0x178f
  01736:    	sub    rsp,0x20
  0173a:    	movq   QWORD PTR [rsp],xmm3
  0173f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01745:    	movq   QWORD PTR [rsp+0x10],xmm6
  0174b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01751:    	mov    rdx,QWORD PTR [r14-0x78]
  01755: f6 	movabs rax,0x55f67a69e3e0
  0175f:    	call   rax
  01761:    	movq   xmm3,QWORD PTR [rsp]
  01766:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0176c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01772:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01778:    	add    rsp,0x20
  0177c: f6 	movabs r13,0x55f67b86f050
  01786:    	test   rax,rax
  01789:    	je     0xfffeef8b
:00110 
:00112 br =>:00113
  0178f:    	jmp    0x36958
:00113 br =>:00114
  01794:    	jmp    0x369cb
:00114 %9 = nil
  01799: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  017a1:    	mov    rax,QWORD PTR [r14-0x78]
  017a5:    	leave  
  017a6:    	ret    
==> start whole compile: <unnamed> FuncId(78) self_class:Scene start:[00000] bytecode:0x55f67b843480
<== finished compile. elapsed:19.4µs
offset:Pos(76116) code: 260 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    rax,0x4
  00041: mov    QWORD PTR [r14-0x40],rax
  00045: mov    QWORD PTR [r14-0x48],rax
  00049: mov    QWORD PTR [r14-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x35161
  0005e: cmp    DWORD PTR [rdi+0x4],0x32
  00062: jne    0x35161
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %3 = dynvar(1, %3)
  00068: mov    rax,QWORD PTR [rbp-0x18]
  0006c: mov    rax,QWORD PTR [rax-0x30]
  00070: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = literal[5242881]
  00074: mov    rax,0xa00003
  0007b: mov    QWORD PTR [r14-0x50],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  0007f: mov    rdi,QWORD PTR [r14-0x48]
  00083: test   rdi,0x1
  0008a: je     0x35170
  00090: cmp    DWORD PTR [rip+0xffffffffffff09ca],0x26        # 0xffff0a61
  00097: jne    0x35170
  0009d: mov    r9,QWORD PTR [r14-0x50]
  000a1: mov    rdx,rdi
  000a4: mov    QWORD PTR [rsp-0x40],rcx
  000a9: mov    QWORD PTR [rsp-0x28],0x0
  000b2: lea    rcx,[r14-0x58]
  000b6: mov    r8,0x0
  000bd: mov    rsi,QWORD PTR [rbx]
  000c0: mov    QWORD PTR [rsp-0x18],rsi
  000c5: lea    rsi,[rsp-0x18]
  000ca: mov    QWORD PTR [rbx],rsi
  000cd: lea    r14,[rsp-0x10]
  000d2: mov    QWORD PTR [rsp-0x20],r14
  000d7: call   0x3517f
  000dc: lea    r14,[rbp-0x8]
  000e0: mov    QWORD PTR [rbx],r14
  000e3: mov    r14,QWORD PTR [rbp-0x10]
  000e7: movabs r13,0x55f67b8434d0
  000f1: test   rax,rax
  000f4: je     0xfffed6df
  000fa: mov    QWORD PTR [r14-0x40],rax
:00004 
:00006 ret %2
  000fe: mov    rax,QWORD PTR [r14-0x40]
  00102: leave  
  00103: ret    
==> start whole compile: vcross FuncId(65) self_class:Vec start:[00000] bytecode:0x55f67b86c170
<== finished compile. elapsed:53.5µs
offset:Pos(76376) code: 2443 bytes  data: 85 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jne    0x350ad
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    rdi,QWORD PTR [rbp-0x30]
  0003e: test   rdi,0x7
  00045: jne    0x350bc
  0004b: cmp    DWORD PTR [rdi+0x4],0x28
  0004f: jne    0x350bc
:00000 init_method reg:9 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %3 = const[Vec]                      [Vec]
  00055: mov    rax,QWORD PTR [rip+0xffffffffffff090c]        # 0xffff0968
  0005c: cmp    rax,QWORD PTR [rip+0x945]        # 0x9a8
  00063: jne    0x350cb
  00069: mov    rax,QWORD PTR [rip+0x928]        # 0x998
  00070: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = @y: Vec[IvarId(1)]
  00074: mov    rdi,QWORD PTR [rbp-0x30]
  00078: mov    rax,QWORD PTR [rdi+0x18]
  0007c: mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %1.call z()                     [Vec]
  00080: mov    rdi,QWORD PTR [r14-0x38]
  00084: test   rdi,0x7
  0008b: jne    0x35111
  00091: cmp    DWORD PTR [rdi+0x4],0x28
  00095: jne    0x35111
  0009b: cmp    DWORD PTR [rip+0xffffffffffff08bb],0x26        # 0xffff095d
  000a2: jne    0x35111
  000a8: mov    esi,DWORD PTR [rip+0x906]        # 0x9b4
  000ae: cmp    esi,0xffffffff
  000b1: je     0x35120
  000b7: cmp    WORD PTR [rdi+0x2],0x3
  000bc: jne    0xd5
  000c2: cmp    esi,0x6
  000c5: jge    0xd5
  000cb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d0: jmp    0xe1
  000d5: movabs rax,0x55f67a69e160
  000df: call   rax
  000e1: mov    QWORD PTR [r14-0x58],rax
:00004 
:00006 %4 = %4 * %5                         [Float][Float]
  000e5: mov    rdi,QWORD PTR [r14-0x50]
  000e9: test   rdi,0x1
  000f0: jne    0x35149
  000f6: test   rdi,0x2
  000fd: je     0x139
  00103: xorps  xmm2,xmm2
  00106: movabs rax,0x8000000000000002
  00110: cmp    rdi,rax
  00113: je     0x14b
  00119: mov    rax,rdi
  0011c: sar    rax,0x3f
  00120: add    rax,0x2
  00124: and    rdi,0xfffffffffffffffc
  00128: or     rdi,rax
  0012b: rol    rdi,0x3d
  0012f: movq   xmm2,rdi
  00134: jmp    0x14b
  00139: call   0xfffed634
  0013e: test   rax,rax
  00141: je     0x35149
  00147: movq   xmm2,xmm0
  0014b: mov    rdi,QWORD PTR [r14-0x58]
  0014f: test   rdi,0x1
  00156: jne    0x35158
  0015c: test   rdi,0x2
  00163: je     0x19f
  00169: xorps  xmm3,xmm3
  0016c: movabs rax,0x8000000000000002
  00176: cmp    rdi,rax
  00179: je     0x1b1
  0017f: mov    rax,rdi
  00182: sar    rax,0x3f
  00186: add    rax,0x2
  0018a: and    rdi,0xfffffffffffffffc
  0018e: or     rdi,rax
  00191: rol    rdi,0x3d
  00195: movq   xmm3,rdi
  0019a: jmp    0x1b1
  0019f: call   0xfffed634
  001a4: test   rax,rax
  001a7: je     0x35158
  001ad: movq   xmm3,xmm0
  001b1: mulsd  xmm2,xmm3
:00007 %5 = @z: Vec[IvarId(2)]
  001b5: mov    rdi,QWORD PTR [rbp-0x30]
  001b9: mov    rax,QWORD PTR [rdi+0x20]
  001bd: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = %1.call y()                     [Vec]
  001c1: mov    rdi,QWORD PTR [r14-0x38]
  001c5: test   rdi,0x7
  001cc: jne    0x35167
  001d2: cmp    DWORD PTR [rdi+0x4],0x28
  001d6: jne    0x35167
  001dc: cmp    DWORD PTR [rip+0xffffffffffff077a],0x26        # 0xffff095d
  001e3: jne    0x35167
  001e9: mov    esi,DWORD PTR [rip+0x7cd]        # 0x9bc
  001ef: cmp    esi,0xffffffff
  001f2: je     0x35183
  001f8: cmp    WORD PTR [rdi+0x2],0x3
  001fd: jne    0x216
  00203: cmp    esi,0x6
  00206: jge    0x216
  0020c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00211: jmp    0x234
  00216: sub    rsp,0x10
  0021a: movq   QWORD PTR [rsp],xmm2
  0021f: movabs rax,0x55f67a69e160
  00229: call   rax
  0022b: movq   xmm2,QWORD PTR [rsp]
  00230: add    rsp,0x10
  00234: mov    QWORD PTR [r14-0x60],rax
:00009 
:00011 %5 = %5 * %6                         [Float][Float]
  00238: mov    rdi,QWORD PTR [r14-0x58]
  0023c: test   rdi,0x1
  00243: jne    0x351be
  00249: test   rdi,0x2
  00250: je     0x28c
  00256: xorps  xmm3,xmm3
  00259: movabs rax,0x8000000000000002
  00263: cmp    rdi,rax
  00266: je     0x29e
  0026c: mov    rax,rdi
  0026f: sar    rax,0x3f
  00273: add    rax,0x2
  00277: and    rdi,0xfffffffffffffffc
  0027b: or     rdi,rax
  0027e: rol    rdi,0x3d
  00282: movq   xmm3,rdi
  00287: jmp    0x29e
  0028c: call   0xfffed634
  00291: test   rax,rax
  00294: je     0x351be
  0029a: movq   xmm3,xmm0
  0029e: mov    rdi,QWORD PTR [r14-0x60]
  002a2: test   rdi,0x1
  002a9: jne    0x351da
  002af: test   rdi,0x2
  002b6: je     0x2f2
  002bc: xorps  xmm4,xmm4
  002bf: movabs rax,0x8000000000000002
  002c9: cmp    rdi,rax
  002cc: je     0x304
  002d2: mov    rax,rdi
  002d5: sar    rax,0x3f
  002d9: add    rax,0x2
  002dd: and    rdi,0xfffffffffffffffc
  002e1: or     rdi,rax
  002e4: rol    rdi,0x3d
  002e8: movq   xmm4,rdi
  002ed: jmp    0x304
  002f2: call   0xfffed634
  002f7: test   rax,rax
  002fa: je     0x351da
  00300: movq   xmm4,xmm0
  00304: mulsd  xmm3,xmm4
:00012 %4 = %4 - %5                         [Float][Float]
  00308: subsd  xmm2,xmm3
:00013 %5 = @z: Vec[IvarId(2)]
  0030c: mov    rdi,QWORD PTR [rbp-0x30]
  00310: mov    rax,QWORD PTR [rdi+0x20]
  00314: mov    QWORD PTR [r14-0x58],rax
:00014 %6 = %1.call x()                     [Vec]
  00318: mov    rdi,QWORD PTR [r14-0x38]
  0031c: test   rdi,0x7
  00323: jne    0x351f6
  00329: cmp    DWORD PTR [rdi+0x4],0x28
  0032d: jne    0x351f6
  00333: cmp    DWORD PTR [rip+0xffffffffffff0623],0x26        # 0xffff095d
  0033a: jne    0x351f6
  00340: mov    esi,DWORD PTR [rip+0x67e]        # 0x9c4
  00346: cmp    esi,0xffffffff
  00349: je     0x35212
  0034f: cmp    WORD PTR [rdi+0x2],0x3
  00354: jne    0x36d
  0035a: cmp    esi,0x6
  0035d: jge    0x36d
  00363: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00368: jmp    0x38b
  0036d: sub    rsp,0x10
  00371: movq   QWORD PTR [rsp],xmm2
  00376: movabs rax,0x55f67a69e160
  00380: call   rax
  00382: movq   xmm2,QWORD PTR [rsp]
  00387: add    rsp,0x10
  0038b: mov    QWORD PTR [r14-0x60],rax
:00015 
:00017 %5 = %5 * %6                         [Float][Float]
  0038f: mov    rdi,QWORD PTR [r14-0x58]
  00393: test   rdi,0x1
  0039a: jne    0x3524d
  003a0: test   rdi,0x2
  003a7: je     0x3e3
  003ad: xorps  xmm3,xmm3
  003b0: movabs rax,0x8000000000000002
  003ba: cmp    rdi,rax
  003bd: je     0x3f5
  003c3: mov    rax,rdi
  003c6: sar    rax,0x3f
  003ca: add    rax,0x2
  003ce: and    rdi,0xfffffffffffffffc
  003d2: or     rdi,rax
  003d5: rol    rdi,0x3d
  003d9: movq   xmm3,rdi
  003de: jmp    0x3f5
  003e3: call   0xfffed634
  003e8: test   rax,rax
  003eb: je     0x3524d
  003f1: movq   xmm3,xmm0
  003f5: mov    rdi,QWORD PTR [r14-0x60]
  003f9: test   rdi,0x1
  00400: jne    0x35269
  00406: test   rdi,0x2
  0040d: je     0x449
  00413: xorps  xmm4,xmm4
  00416: movabs rax,0x8000000000000002
  00420: cmp    rdi,rax
  00423: je     0x45b
  00429: mov    rax,rdi
  0042c: sar    rax,0x3f
  00430: add    rax,0x2
  00434: and    rdi,0xfffffffffffffffc
  00438: or     rdi,rax
  0043b: rol    rdi,0x3d
  0043f: movq   xmm4,rdi
  00444: jmp    0x45b
  00449: call   0xfffed634
  0044e: test   rax,rax
  00451: je     0x35269
  00457: movq   xmm4,xmm0
  0045b: mulsd  xmm3,xmm4
:00018 %6 = @x: Vec[IvarId(0)]
  0045f: mov    rdi,QWORD PTR [rbp-0x30]
  00463: mov    rax,QWORD PTR [rdi+0x10]
  00467: mov    QWORD PTR [r14-0x60],rax
:00019 %7 = %1.call z()                     [Vec]
  0046b: mov    rdi,QWORD PTR [r14-0x38]
  0046f: test   rdi,0x7
  00476: jne    0x35285
  0047c: cmp    DWORD PTR [rdi+0x4],0x28
  00480: jne    0x35285
  00486: cmp    DWORD PTR [rip+0xffffffffffff04d0],0x26        # 0xffff095d
  0048d: jne    0x35285
  00493: mov    esi,DWORD PTR [rip+0x533]        # 0x9cc
  00499: cmp    esi,0xffffffff
  0049c: je     0x352ae
  004a2: cmp    WORD PTR [rdi+0x2],0x3
  004a7: jne    0x4c0
  004ad: cmp    esi,0x6
  004b0: jge    0x4c0
  004b6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004bb: jmp    0x4ea
  004c0: sub    rsp,0x10
  004c4: movq   QWORD PTR [rsp],xmm2
  004c9: movq   QWORD PTR [rsp+0x8],xmm3
  004cf: movabs rax,0x55f67a69e160
  004d9: call   rax
  004db: movq   xmm2,QWORD PTR [rsp]
  004e0: movq   xmm3,QWORD PTR [rsp+0x8]
  004e6: add    rsp,0x10
  004ea: mov    QWORD PTR [r14-0x68],rax
:00020 
:00022 %6 = %6 * %7                         [Float][Float]
  004ee: mov    rdi,QWORD PTR [r14-0x60]
  004f2: test   rdi,0x1
  004f9: jne    0x352f5
  004ff: test   rdi,0x2
  00506: je     0x542
  0050c: xorps  xmm4,xmm4
  0050f: movabs rax,0x8000000000000002
  00519: cmp    rdi,rax
  0051c: je     0x554
  00522: mov    rax,rdi
  00525: sar    rax,0x3f
  00529: add    rax,0x2
  0052d: and    rdi,0xfffffffffffffffc
  00531: or     rdi,rax
  00534: rol    rdi,0x3d
  00538: movq   xmm4,rdi
  0053d: jmp    0x554
  00542: call   0xfffed634
  00547: test   rax,rax
  0054a: je     0x352f5
  00550: movq   xmm4,xmm0
  00554: mov    rdi,QWORD PTR [r14-0x68]
  00558: test   rdi,0x1
  0055f: jne    0x3531e
  00565: test   rdi,0x2
  0056c: je     0x5a8
  00572: xorps  xmm5,xmm5
  00575: movabs rax,0x8000000000000002
  0057f: cmp    rdi,rax
  00582: je     0x5ba
  00588: mov    rax,rdi
  0058b: sar    rax,0x3f
  0058f: add    rax,0x2
  00593: and    rdi,0xfffffffffffffffc
  00597: or     rdi,rax
  0059a: rol    rdi,0x3d
  0059e: movq   xmm5,rdi
  005a3: jmp    0x5ba
  005a8: call   0xfffed634
  005ad: test   rax,rax
  005b0: je     0x3531e
  005b6: movq   xmm5,xmm0
  005ba: mulsd  xmm4,xmm5
:00023 %5 = %5 - %6                         [Float][Float]
  005be: subsd  xmm3,xmm4
:00024 %6 = @x: Vec[IvarId(0)]
  005c2: mov    rdi,QWORD PTR [rbp-0x30]
  005c6: mov    rax,QWORD PTR [rdi+0x10]
  005ca: mov    QWORD PTR [r14-0x60],rax
:00025 %7 = %1.call y()                     [Vec]
  005ce: mov    rdi,QWORD PTR [r14-0x38]
  005d2: test   rdi,0x7
  005d9: jne    0x35347
  005df: cmp    DWORD PTR [rdi+0x4],0x28
  005e3: jne    0x35347
  005e9: cmp    DWORD PTR [rip+0xffffffffffff036d],0x26        # 0xffff095d
  005f0: jne    0x35347
  005f6: mov    esi,DWORD PTR [rip+0x3d8]        # 0x9d4
  005fc: cmp    esi,0xffffffff
  005ff: je     0x35370
  00605: cmp    WORD PTR [rdi+0x2],0x3
  0060a: jne    0x623
  00610: cmp    esi,0x6
  00613: jge    0x623
  00619: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0061e: jmp    0x64d
  00623: sub    rsp,0x10
  00627: movq   QWORD PTR [rsp],xmm2
  0062c: movq   QWORD PTR [rsp+0x8],xmm3
  00632: movabs rax,0x55f67a69e160
  0063c: call   rax
  0063e: movq   xmm2,QWORD PTR [rsp]
  00643: movq   xmm3,QWORD PTR [rsp+0x8]
  00649: add    rsp,0x10
  0064d: mov    QWORD PTR [r14-0x68],rax
:00026 
:00028 %6 = %6 * %7                         [Float][Float]
  00651: mov    rdi,QWORD PTR [r14-0x60]
  00655: test   rdi,0x1
  0065c: jne    0x353b7
  00662: test   rdi,0x2
  00669: je     0x6a5
  0066f: xorps  xmm4,xmm4
  00672: movabs rax,0x8000000000000002
  0067c: cmp    rdi,rax
  0067f: je     0x6b7
  00685: mov    rax,rdi
  00688: sar    rax,0x3f
  0068c: add    rax,0x2
  00690: and    rdi,0xfffffffffffffffc
  00694: or     rdi,rax
  00697: rol    rdi,0x3d
  0069b: movq   xmm4,rdi
  006a0: jmp    0x6b7
  006a5: call   0xfffed634
  006aa: test   rax,rax
  006ad: je     0x353b7
  006b3: movq   xmm4,xmm0
  006b7: mov    rdi,QWORD PTR [r14-0x68]
  006bb: test   rdi,0x1
  006c2: jne    0x353e0
  006c8: test   rdi,0x2
  006cf: je     0x70b
  006d5: xorps  xmm5,xmm5
  006d8: movabs rax,0x8000000000000002
  006e2: cmp    rdi,rax
  006e5: je     0x71d
  006eb: mov    rax,rdi
  006ee: sar    rax,0x3f
  006f2: add    rax,0x2
  006f6: and    rdi,0xfffffffffffffffc
  006fa: or     rdi,rax
  006fd: rol    rdi,0x3d
  00701: movq   xmm5,rdi
  00706: jmp    0x71d
  0070b: call   0xfffed634
  00710: test   rax,rax
  00713: je     0x353e0
  00719: movq   xmm5,xmm0
  0071d: mulsd  xmm4,xmm5
:00029 %7 = @y: Vec[IvarId(1)]
  00721: mov    rdi,QWORD PTR [rbp-0x30]
  00725: mov    rax,QWORD PTR [rdi+0x18]
  00729: mov    QWORD PTR [r14-0x68],rax
:00030 %8 = %1.call x()                     [Vec]
  0072d: mov    rdi,QWORD PTR [r14-0x38]
  00731: test   rdi,0x7
  00738: jne    0x35409
  0073e: cmp    DWORD PTR [rdi+0x4],0x28
  00742: jne    0x35409
  00748: cmp    DWORD PTR [rip+0xffffffffffff020e],0x26        # 0xffff095d
  0074f: jne    0x35409
  00755: mov    esi,DWORD PTR [rip+0x281]        # 0x9dc
  0075b: cmp    esi,0xffffffff
  0075e: je     0x3543f
  00764: cmp    WORD PTR [rdi+0x2],0x3
  00769: jne    0x782
  0076f: cmp    esi,0x6
  00772: jge    0x782
  00778: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0077d: jmp    0x7b8
  00782: sub    rsp,0x20
  00786: movq   QWORD PTR [rsp],xmm2
  0078b: movq   QWORD PTR [rsp+0x8],xmm3
  00791: movq   QWORD PTR [rsp+0x10],xmm4
  00797: movabs rax,0x55f67a69e160
  007a1: call   rax
  007a3: movq   xmm2,QWORD PTR [rsp]
  007a8: movq   xmm3,QWORD PTR [rsp+0x8]
  007ae: movq   xmm4,QWORD PTR [rsp+0x10]
  007b4: add    rsp,0x20
  007b8: mov    QWORD PTR [r14-0x70],rax
:00031 
:00033 %7 = %7 * %8                         [Float][Float]
  007bc: mov    rdi,QWORD PTR [r14-0x68]
  007c0: test   rdi,0x1
  007c7: jne    0x35492
  007cd: test   rdi,0x2
  007d4: je     0x810
  007da: xorps  xmm5,xmm5
  007dd: movabs rax,0x8000000000000002
  007e7: cmp    rdi,rax
  007ea: je     0x822
  007f0: mov    rax,rdi
  007f3: sar    rax,0x3f
  007f7: add    rax,0x2
  007fb: and    rdi,0xfffffffffffffffc
  007ff: or     rdi,rax
  00802: rol    rdi,0x3d
  00806: movq   xmm5,rdi
  0080b: jmp    0x822
  00810: call   0xfffed634
  00815: test   rax,rax
  00818: je     0x35492
  0081e: movq   xmm5,xmm0
  00822: mov    rdi,QWORD PTR [r14-0x70]
  00826: test   rdi,0x1
  0082d: jne    0x354c8
  00833: test   rdi,0x2
  0083a: je     0x876
  00840: xorps  xmm6,xmm6
  00843: movabs rax,0x8000000000000002
  0084d: cmp    rdi,rax
  00850: je     0x888
  00856: mov    rax,rdi
  00859: sar    rax,0x3f
  0085d: add    rax,0x2
  00861: and    rdi,0xfffffffffffffffc
  00865: or     rdi,rax
  00868: rol    rdi,0x3d
  0086c: movq   xmm6,rdi
  00871: jmp    0x888
  00876: call   0xfffed634
  0087b: test   rax,rax
  0087e: je     0x354c8
  00884: movq   xmm6,xmm0
  00888: mulsd  xmm5,xmm6
:00034 %6 = %6 - %7                         [Float][Float]
  0088c: subsd  xmm4,xmm5
:00035 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00890: movq   xmm0,xmm2
  00894: call   0xfffed758
  00899: mov    QWORD PTR [r14-0x50],rax
  0089d: movq   xmm0,xmm3
  008a1: call   0xfffed758
  008a6: mov    QWORD PTR [r14-0x58],rax
  008aa: movq   xmm0,xmm4
  008ae: call   0xfffed758
  008b3: mov    QWORD PTR [r14-0x60],rax
  008b7: mov    rdi,QWORD PTR [r14-0x48]
  008bb: test   rdi,0x7
  008c2: jne    0x354fe
  008c8: cmp    DWORD PTR [rdi+0x4],0x29
  008cc: jne    0x354fe
  008d2: cmp    DWORD PTR [rip+0xffffffffffff0084],0x26        # 0xffff095d
  008d9: jne    0x354fe
  008df: mov    r9,0x0
  008e6: sub    rsp,0x30
  008ea: movq   QWORD PTR [rsp],xmm2
  008ef: movq   QWORD PTR [rsp+0x8],xmm3
  008f5: movq   QWORD PTR [rsp+0x10],xmm4
  008fb: movq   QWORD PTR [rsp+0x18],xmm5
  00901: movq   QWORD PTR [rsp+0x20],xmm6
  00907: mov    rdx,rdi
  0090a: mov    QWORD PTR [rsp-0x40],rcx
  0090f: mov    QWORD PTR [rsp-0x28],0x0
  00918: lea    rcx,[r14-0x50]
  0091c: mov    r8,0x3
  00923: mov    rsi,QWORD PTR [rbx]
  00926: mov    QWORD PTR [rsp-0x18],rsi
  0092b: lea    rsi,[rsp-0x18]
  00930: mov    QWORD PTR [rbx],rsi
  00933: lea    r14,[rsp-0x10]
  00938: mov    QWORD PTR [rsp-0x20],r14
  0093d: call   0x3551a
  00942: lea    r14,[rbp-0x8]
  00946: mov    QWORD PTR [rbx],r14
  00949: mov    r14,QWORD PTR [rbp-0x10]
  0094d: movq   xmm2,QWORD PTR [rsp]
  00952: movq   xmm3,QWORD PTR [rsp+0x8]
  00958: movq   xmm4,QWORD PTR [rsp+0x10]
  0095e: movq   xmm5,QWORD PTR [rsp+0x18]
  00964: movq   xmm6,QWORD PTR [rsp+0x20]
  0096a: add    rsp,0x30
  0096e: movabs r13,0x55f67b86c3c0
  00978: test   rax,rax
  0097b: je     0xfffed5db
  00981: mov    QWORD PTR [r14-0x40],rax
:00036 
:00038 ret %2
  00985: mov    rax,QWORD PTR [r14-0x40]
  00989: leave  
  0098a: ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55f67b870800
load_ivar: no profile
<== finished compile. elapsed:155µs
offset:Pos(78904) code: 5571 bytes  data: 249 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x34b6c
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x34b7b
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x34b7b
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x34b8a
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x34b8a
  000a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffefed5],0x26        # 0xfffeff7d
  000a8:    	jne    0x34b8a
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	lea    r8,[rsp-0x48]
  000cc:    	mov    rax,QWORD PTR [r14-0x70]
  000d0:    	mov    QWORD PTR [r8],rax
  000d3:    	sub    r8,0x8
  000d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000e0: 05 	movabs rax,0x1000500000042
  000ea:    	mov    QWORD PTR [rsp-0x30],rax
  000ef: f6 	movabs r13,0x55f67b88de50
  000f9:    	mov    rsi,QWORD PTR [rbx]
  000fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00101:    	lea    rsi,[rsp-0x18]
  00106:    	mov    QWORD PTR [rbx],rsi
  00109:    	lea    r14,[rsp-0x10]
  0010e:    	mov    QWORD PTR [rsp-0x20],r14
  00113:    	call   0xffff0cb0
  00118:    	lea    r14,[rbp-0x8]
  0011c:    	mov    QWORD PTR [rbx],r14
  0011f:    	mov    r14,QWORD PTR [rbp-0x10]
  00123: f6 	movabs r13,0x55f67b870850
  0012d:    	test   rax,rax
  00130:    	je     0xfffecbfb
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x34b99
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xfffecc54
  00193:    	test   rax,rax
  00196:    	je     0x34b99
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1421]        # 0x15c8
:00007 %7 = %1.call dir()                   [Ray]
  001a7:    	mov    rdi,QWORD PTR [r14-0x38]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x34ba8
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bc:    	jne    0x34ba8
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffefdb4],0x26        # 0xfffeff7d
  001c9:    	jne    0x34ba8
  001cf:    	mov    esi,DWORD PTR [rip+0x13ff]        # 0x15d4
  001d5:    	cmp    esi,0xffffffff
  001d8:    	je     0x34bc4
  001de:    	cmp    WORD PTR [rdi+0x2],0x3
  001e3:    	jne    0x1fc
  001e9:    	cmp    esi,0x6
  001ec:    	jge    0x1fc
  001f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f7:    	jmp    0x21a
  001fc:    	sub    rsp,0x10
  00200:    	movq   QWORD PTR [rsp],xmm2
  00205: f6 	movabs rax,0x55f67a69e160
  0020f:    	call   rax
  00211:    	movq   xmm2,QWORD PTR [rsp]
  00216:    	add    rsp,0x10
  0021a:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  0021e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  0022a:    	mov    rdi,QWORD PTR [r14-0x68]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x34bff
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0023f:    	jne    0x34bff
  00245: 26 	cmp    DWORD PTR [rip+0xfffffffffffefd31],0x26        # 0xfffeff7d
  0024c:    	jne    0x34bff
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00264:    	mov    rax,QWORD PTR [r14-0x68]
  00268:    	mov    QWORD PTR [rsp-0x40],rax
  0026d: 00 	mov    rdi,0x1
  00274:    	lea    r8,[rsp-0x48]
  00279:    	mov    rax,QWORD PTR [r14-0x70]
  0027d:    	mov    QWORD PTR [r8],rax
  00280:    	sub    r8,0x8
  00284: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0028d: 05 	movabs rax,0x1000500000042
  00297:    	mov    QWORD PTR [rsp-0x30],rax
  0029c: f6 	movabs r13,0x55f67b88de50
  002a6:    	mov    rsi,QWORD PTR [rbx]
  002a9:    	mov    QWORD PTR [rsp-0x18],rsi
  002ae:    	lea    rsi,[rsp-0x18]
  002b3:    	mov    QWORD PTR [rbx],rsi
  002b6:    	lea    r14,[rsp-0x10]
  002bb:    	mov    QWORD PTR [rsp-0x20],r14
  002c0:    	call   0xffff0cb0
  002c5:    	lea    r14,[rbp-0x8]
  002c9:    	mov    QWORD PTR [rbx],r14
  002cc:    	mov    r14,QWORD PTR [rbp-0x10]
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	add    rsp,0x10
  002d9: f6 	movabs r13,0x55f67b8708d0
  002e3:    	test   rax,rax
  002e6:    	je     0xfffecbfb
  002ec:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002f0:    	mov    rax,QWORD PTR [r14-0x50]
  002f4:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002f8: 00 	movq   xmm3,QWORD PTR [rip+0x12d8]        # 0x15d8
  00300: 00 	movabs rax,0x8000000000000002
  0030a:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0030e:    	mov    rdi,QWORD PTR [r14-0x50]
  00312: 00 	test   rdi,0x1
  00319:    	jne    0x34c1b
  0031f: 00 	test   rdi,0x2
  00326:    	je     0x362
  0032c:    	xorps  xmm4,xmm4
  0032f: 00 	movabs rax,0x8000000000000002
  00339:    	cmp    rdi,rax
  0033c:    	je     0x374
  00342:    	mov    rax,rdi
  00345:    	sar    rax,0x3f
  00349:    	add    rax,0x2
  0034d:    	and    rdi,0xfffffffffffffffc
  00351:    	or     rdi,rax
  00354:    	rol    rdi,0x3d
  00358:    	movq   xmm4,rdi
  0035d:    	jmp    0x374
  00362:    	call   0xfffecc54
  00367:    	test   rax,rax
  0036a:    	je     0x34c1b
  00370:    	movq   xmm4,xmm0
  00374:    	ucomisd xmm4,xmm3
  00378:    	jae    0x34c7e
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  0037e: 01 	sub    DWORD PTR [rip+0x125b],0x1        # 0x15e0
  00385:    	je     0x34c60
  0038b:    	movq   xmm0,xmm4
  0038f:    	call   0xfffecd78
  00394:    	mov    QWORD PTR [r14-0x58],rax
  00398:    	sub    rsp,0x20
  0039c:    	movq   QWORD PTR [rsp],xmm2
  003a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ad:    	mov    rdi,QWORD PTR [r14-0x58]
  003b1:    	mov    rdx,rdi
  003b4:    	mov    rdi,rbx
  003b7:    	mov    rsi,r12
  003ba: f6 	movabs rax,0x55f67a6dcb60
  003c4:    	call   rax
  003c6:    	movq   xmm2,QWORD PTR [rsp]
  003cb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003d7:    	add    rsp,0x20
  003db: f6 	movabs r13,0x55f67b870940
  003e5:    	test   rax,rax
  003e8:    	je     0xfffecbfb
  003ee:    	mov    QWORD PTR [r14-0x58],rax
:00020 br =>:00021
  003f2:    	jmp    0x34ca4
:00021 %7 = literal[1e-17]
  003f7: 00 	movq   xmm3,QWORD PTR [rip+0x11e9]        # 0x15e8
  003ff: aa 	movabs rax,0xe33877aa3236a4ba
  00409:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0040d:    	mov    rdi,QWORD PTR [r14-0x58]
  00411: 00 	test   rdi,0x1
  00418:    	jne    0x34cca
  0041e: 00 	test   rdi,0x2
  00425:    	je     0x461
  0042b:    	xorps  xmm5,xmm5
  0042e: 00 	movabs rax,0x8000000000000002
  00438:    	cmp    rdi,rax
  0043b:    	je     0x473
  00441:    	mov    rax,rdi
  00444:    	sar    rax,0x3f
  00448:    	add    rax,0x2
  0044c:    	and    rdi,0xfffffffffffffffc
  00450:    	or     rdi,rax
  00453:    	rol    rdi,0x3d
  00457:    	movq   xmm5,rdi
  0045c:    	jmp    0x473
  00461:    	call   0xfffecc54
  00466:    	test   rax,rax
  00469:    	je     0x34cca
  0046f:    	movq   xmm5,xmm0
  00473:    	ucomisd xmm5,xmm3
  00477:    	jae    0x48b
:00024 %7 = nil
  0047d: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  00485:    	mov    rax,QWORD PTR [r14-0x68]
  00489:    	leave  
  0048a:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  0048b:    	mov    rdi,QWORD PTR [r14-0x38]
  0048f: 00 	test   rdi,0x7
  00496:    	jne    0x34ce6
  0049c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  004a0:    	jne    0x34ce6
  004a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffefad0],0x26        # 0xfffeff7d
  004ad:    	jne    0x34ce6
  004b3:    	mov    esi,DWORD PTR [rip+0x113b]        # 0x15f4
  004b9:    	cmp    esi,0xffffffff
  004bc:    	je     0x34d02
  004c2:    	cmp    WORD PTR [rdi+0x2],0x3
  004c7:    	jne    0x4e0
  004cd:    	cmp    esi,0x6
  004d0:    	jge    0x4e0
  004d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004db:    	jmp    0x522
  004e0:    	sub    rsp,0x20
  004e4:    	movq   QWORD PTR [rsp],xmm2
  004e9:    	movq   QWORD PTR [rsp+0x8],xmm3
  004ef:    	movq   QWORD PTR [rsp+0x10],xmm4
  004f5:    	movq   QWORD PTR [rsp+0x18],xmm5
  004fb: f6 	movabs rax,0x55f67a69e160
  00505:    	call   rax
  00507:    	movq   xmm2,QWORD PTR [rsp]
  0050c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00512:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00518:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0051e:    	add    rsp,0x20
  00522:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  00526:    	mov    rdi,QWORD PTR [rbp-0x30]
  0052a:    	mov    rax,QWORD PTR [rdi+0x18]
  0052e:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  00532:    	mov    rdi,QWORD PTR [r14-0x70]
  00536: 00 	test   rdi,0x7
  0053d:    	jne    0x34d61
  00543:    	cmp    DWORD PTR [rdi+0x4],0x28
  00547:    	jne    0x34d61
  0054d: 26 	cmp    DWORD PTR [rip+0xfffffffffffefa29],0x26        # 0xfffeff7d
  00554:    	jne    0x34d61
  0055a:    	sub    rsp,0x20
  0055e:    	movq   QWORD PTR [rsp],xmm2
  00563:    	movq   QWORD PTR [rsp+0x8],xmm4
  00569:    	movq   QWORD PTR [rsp+0x10],xmm5
  0056f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00578:    	mov    rax,QWORD PTR [r14-0x70]
  0057c:    	mov    QWORD PTR [rsp-0x40],rax
  00581: 00 	mov    rdi,0x1
  00588:    	lea    r8,[rsp-0x48]
  0058d:    	mov    rax,QWORD PTR [r14-0x78]
  00591:    	mov    QWORD PTR [r8],rax
  00594:    	sub    r8,0x8
  00598: 00 	mov    QWORD PTR [rsp-0x38],0x0
  005a1: 05 	movabs rax,0x1000500000042
  005ab:    	mov    QWORD PTR [rsp-0x30],rax
  005b0: f6 	movabs r13,0x55f67b88de50
  005ba:    	mov    rsi,QWORD PTR [rbx]
  005bd:    	mov    QWORD PTR [rsp-0x18],rsi
  005c2:    	lea    rsi,[rsp-0x18]
  005c7:    	mov    QWORD PTR [rbx],rsi
  005ca:    	lea    r14,[rsp-0x10]
  005cf:    	mov    QWORD PTR [rsp-0x20],r14
  005d4:    	call   0xffff0cb0
  005d9:    	lea    r14,[rbp-0x8]
  005dd:    	mov    QWORD PTR [rbx],r14
  005e0:    	mov    r14,QWORD PTR [rbp-0x10]
  005e4:    	movq   xmm2,QWORD PTR [rsp]
  005e9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005ef:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005f5:    	add    rsp,0x20
  005f9: f6 	movabs r13,0x55f67b870a10
  00603:    	test   rax,rax
  00606:    	je     0xfffecbfb
  0060c:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00610:    	mov    rdi,QWORD PTR [r14-0x68]
  00614: 00 	test   rdi,0x1
  0061b:    	jne    0x34d7d
  00621: 00 	test   rdi,0x2
  00628:    	je     0x664
  0062e:    	xorps  xmm3,xmm3
  00631: 00 	movabs rax,0x8000000000000002
  0063b:    	cmp    rdi,rax
  0063e:    	je     0x676
  00644:    	mov    rax,rdi
  00647:    	sar    rax,0x3f
  0064b:    	add    rax,0x2
  0064f:    	and    rdi,0xfffffffffffffffc
  00653:    	or     rdi,rax
  00656:    	rol    rdi,0x3d
  0065a:    	movq   xmm3,rdi
  0065f:    	jmp    0x676
  00664:    	call   0xfffecc54
  00669:    	test   rax,rax
  0066c:    	je     0x34d7d
  00672:    	movq   xmm3,xmm0
  00676:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0067a: 00 	xorps  xmm3,XMMWORD PTR [rip+0xf77]        # 0x15f8
:00036 %6 = %7 / %4                         [Float][Float]
  00681:    	movq   xmm6,xmm3
  00685:    	movq   rax,xmm4
  0068a:    	test   rax,rax
  0068d:    	je     0xfffecc20
  00693:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00697: 00 	movq   xmm3,QWORD PTR [rip+0xf69]        # 0x1608
  0069f: 00 	movabs rax,0x8000000000000002
  006a9:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  006ad:    	ucomisd xmm6,xmm3
  006b1:    	jbe    0x35746
:00040 %7 = %2.call t()                     [Isect]
  006b7:    	mov    rdi,QWORD PTR [r14-0x40]
  006bb: 00 	test   rdi,0x7
  006c2:    	jne    0x34d99
  006c8:    	cmp    DWORD PTR [rdi+0x4],0x30
  006cc:    	jne    0x34d99
  006d2: 26 	cmp    DWORD PTR [rip+0xfffffffffffef8a4],0x26        # 0xfffeff7d
  006d9:    	jne    0x34d99
  006df:    	mov    esi,DWORD PTR [rip+0xf2f]        # 0x1614
  006e5:    	cmp    esi,0xffffffff
  006e8:    	je     0x34dc2
  006ee:    	cmp    WORD PTR [rdi+0x2],0x3
  006f3:    	jne    0x70c
  006f9:    	cmp    esi,0x6
  006fc:    	jge    0x70c
  00702:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00707:    	jmp    0x74e
  0070c:    	sub    rsp,0x20
  00710:    	movq   QWORD PTR [rsp],xmm2
  00715:    	movq   QWORD PTR [rsp+0x8],xmm4
  0071b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00721:    	movq   QWORD PTR [rsp+0x18],xmm6
  00727: f6 	movabs rax,0x55f67a69e160
  00731:    	call   rax
  00733:    	movq   xmm2,QWORD PTR [rsp]
  00738:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0073e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00744:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0074a:    	add    rsp,0x20
  0074e:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  00752:    	movq   xmm0,xmm6
  00756:    	call   0xfffecd78
  0075b:    	mov    QWORD PTR [r14-0x60],rax
  0075f:    	mov    rdi,QWORD PTR [r14-0x60]
  00763:    	mov    rsi,QWORD PTR [r14-0x68]
  00767: 00 	test   rdi,0x1
  0076e:    	je     0x34e21
  00774: 00 	test   rsi,0x1
  0077b:    	je     0x34e21
  00781:    	cmp    rdi,rsi
  00784:    	jge    0x35779
:00045 %7 = literal[true]
  0078a: 00 	mov    rax,0x1c
  00791:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  00795:    	mov    rdi,QWORD PTR [r14-0x40]
  00799: 00 	test   rdi,0x7
  007a0:    	jne    0x34e76
  007a6:    	cmp    DWORD PTR [rdi+0x4],0x30
  007aa:    	jne    0x34e76
  007b0: 26 	cmp    DWORD PTR [rip+0xfffffffffffef7c6],0x26        # 0xfffeff7d
  007b7:    	jne    0x34e76
  007bd:    	mov    esi,DWORD PTR [rip+0xe59]        # 0x161c
  007c3:    	cmp    esi,0xffffffff
  007c6:    	je     0x34e92
  007cc:    	cmp    WORD PTR [rdi+0x2],0x3
  007d1:    	jne    0x7ee
  007d7:    	cmp    esi,0x6
  007da:    	jge    0x7ee
  007e0:    	mov    rax,QWORD PTR [r14-0x68]
  007e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007e9:    	jmp    0x847
  007ee:    	sub    rsp,0x20
  007f2:    	movq   QWORD PTR [rsp],xmm2
  007f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  007fd:    	movq   QWORD PTR [rsp+0x10],xmm5
  00803:    	movq   QWORD PTR [rsp+0x18],xmm6
  00809:    	mov    rdx,QWORD PTR [r14-0x68]
  0080d: f6 	movabs rax,0x55f67a69e3e0
  00817:    	call   rax
  00819:    	movq   xmm2,QWORD PTR [rsp]
  0081e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00824:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0082a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00830:    	add    rsp,0x20
  00834: f6 	movabs r13,0x55f67b870b00
  0083e:    	test   rax,rax
  00841:    	je     0xfffecbfb
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  00847:    	mov    rdi,QWORD PTR [r14-0x40]
  0084b: 00 	test   rdi,0x7
  00852:    	jne    0x34ef8
  00858:    	cmp    DWORD PTR [rdi+0x4],0x30
  0085c:    	jne    0x34ef8
  00862: 26 	cmp    DWORD PTR [rip+0xfffffffffffef714],0x26        # 0xfffeff7d
  00869:    	jne    0x34ef8
  0086f:    	mov    esi,DWORD PTR [rip+0xdaf]        # 0x1624
  00875:    	cmp    esi,0xffffffff
  00878:    	je     0x34f14
  0087e:    	cmp    WORD PTR [rdi+0x2],0x3
  00883:    	jne    0x8a0
  00889:    	cmp    esi,0x6
  0088c:    	jge    0x8a0
  00892:    	mov    rax,QWORD PTR [r14-0x60]
  00896:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0089b:    	jmp    0x8f9
  008a0:    	sub    rsp,0x20
  008a4:    	movq   QWORD PTR [rsp],xmm2
  008a9:    	movq   QWORD PTR [rsp+0x8],xmm4
  008af:    	movq   QWORD PTR [rsp+0x10],xmm5
  008b5:    	movq   QWORD PTR [rsp+0x18],xmm6
  008bb:    	mov    rdx,QWORD PTR [r14-0x60]
  008bf: f6 	movabs rax,0x55f67a69e3e0
  008c9:    	call   rax
  008cb:    	movq   xmm2,QWORD PTR [rsp]
  008d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008d6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008dc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008e2:    	add    rsp,0x20
  008e6: f6 	movabs r13,0x55f67b870b30
  008f0:    	test   rax,rax
  008f3:    	je     0xfffecbfb
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  008f9:    	mov    rdi,QWORD PTR [rbp-0x30]
  008fd:    	sub    rsp,0x20
  00901:    	movq   QWORD PTR [rsp],xmm2
  00906:    	movq   QWORD PTR [rsp+0x8],xmm4
  0090c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00912:    	movq   QWORD PTR [rsp+0x18],xmm6
  00918: 00 	mov    rsi,0x97
  0091f:    	mov    rdx,r12
  00922: f6 	movabs rax,0x55f67a71b840
  0092c:    	call   rax
  0092e:    	movq   xmm2,QWORD PTR [rsp]
  00933:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00939:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0093f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00945:    	add    rsp,0x20
  00949:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  0094d:    	mov    rdi,QWORD PTR [r14-0x40]
  00951: 00 	test   rdi,0x7
  00958:    	jne    0x34f7a
  0095e:    	cmp    DWORD PTR [rdi+0x4],0x30
  00962:    	jne    0x34f7a
  00968: 26 	cmp    DWORD PTR [rip+0xfffffffffffef60e],0x26        # 0xfffeff7d
  0096f:    	jne    0x34f7a
  00975:    	mov    esi,DWORD PTR [rip+0xcb1]        # 0x162c
  0097b:    	cmp    esi,0xffffffff
  0097e:    	je     0x34f96
  00984:    	cmp    WORD PTR [rdi+0x2],0x3
  00989:    	jne    0x9a6
  0098f:    	cmp    esi,0x6
  00992:    	jge    0x9a6
  00998:    	mov    rax,QWORD PTR [r14-0x68]
  0099c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  009a1:    	jmp    0x9ff
  009a6:    	sub    rsp,0x20
  009aa:    	movq   QWORD PTR [rsp],xmm2
  009af:    	movq   QWORD PTR [rsp+0x8],xmm4
  009b5:    	movq   QWORD PTR [rsp+0x10],xmm5
  009bb:    	movq   QWORD PTR [rsp+0x18],xmm6
  009c1:    	mov    rdx,QWORD PTR [r14-0x68]
  009c5: f6 	movabs rax,0x55f67a69e3e0
  009cf:    	call   rax
  009d1:    	movq   xmm2,QWORD PTR [rsp]
  009d6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009dc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009e2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009e8:    	add    rsp,0x20
  009ec: f6 	movabs r13,0x55f67b870b70
  009f6:    	test   rax,rax
  009f9:    	je     0xfffecbfb
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  009ff: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffef582]        # 0xfffeff88
  00a06: 00 	cmp    rax,QWORD PTR [rip+0xc3b]        # 0x1648
  00a0d:    	jne    0x34ffc
  00a13: 00 	mov    rax,QWORD PTR [rip+0xc1e]        # 0x1638
  00a1a:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [Ray]
  00a1e:    	mov    rdi,QWORD PTR [r14-0x38]
  00a22: 00 	test   rdi,0x7
  00a29:    	jne    0x35078
  00a2f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a33:    	jne    0x35078
  00a39: 26 	cmp    DWORD PTR [rip+0xfffffffffffef53d],0x26        # 0xfffeff7d
  00a40:    	jne    0x35078
  00a46:    	mov    esi,DWORD PTR [rip+0xc08]        # 0x1654
  00a4c:    	cmp    esi,0xffffffff
  00a4f:    	je     0x35094
  00a55:    	cmp    WORD PTR [rdi+0x2],0x3
  00a5a:    	jne    0xa73
  00a60:    	cmp    esi,0x6
  00a63:    	jge    0xa73
  00a69:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a6e:    	jmp    0xab5
  00a73:    	sub    rsp,0x20
  00a77:    	movq   QWORD PTR [rsp],xmm2
  00a7c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a82:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a88:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a8e: f6 	movabs rax,0x55f67a69e160
  00a98:    	call   rax
  00a9a:    	movq   xmm2,QWORD PTR [rsp]
  00a9f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00aa5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00aab:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ab1:    	add    rsp,0x20
  00ab5:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00ab9:    	mov    rdi,QWORD PTR [r14-0x80]
  00abd: 00 	test   rdi,0x7
  00ac4:    	jne    0x350f3
  00aca:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ace:    	jne    0x350f3
  00ad4: 26 	cmp    DWORD PTR [rip+0xfffffffffffef4a2],0x26        # 0xfffeff7d
  00adb:    	jne    0x350f3
  00ae1:    	mov    esi,DWORD PTR [rip+0xb75]        # 0x165c
  00ae7:    	cmp    esi,0xffffffff
  00aea:    	je     0x3510f
  00af0:    	cmp    WORD PTR [rdi+0x2],0x3
  00af5:    	jne    0xb0e
  00afb:    	cmp    esi,0x6
  00afe:    	jge    0xb0e
  00b04:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b09:    	jmp    0xb50
  00b0e:    	sub    rsp,0x20
  00b12:    	movq   QWORD PTR [rsp],xmm2
  00b17:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b1d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b23:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b29: f6 	movabs rax,0x55f67a69e160
  00b33:    	call   rax
  00b35:    	movq   xmm2,QWORD PTR [rsp]
  00b3a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b40:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b46:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b4c:    	add    rsp,0x20
  00b50:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00b54:    	mov    rdi,QWORD PTR [r14-0x38]
  00b58: 00 	test   rdi,0x7
  00b5f:    	jne    0x3516e
  00b65:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b69:    	jne    0x3516e
  00b6f: 26 	cmp    DWORD PTR [rip+0xfffffffffffef407],0x26        # 0xfffeff7d
  00b76:    	jne    0x3516e
  00b7c:    	mov    esi,DWORD PTR [rip+0xae2]        # 0x1664
  00b82:    	cmp    esi,0xffffffff
  00b85:    	je     0x3518a
  00b8b:    	cmp    WORD PTR [rdi+0x2],0x3
  00b90:    	jne    0xba9
  00b96:    	cmp    esi,0x6
  00b99:    	jge    0xba9
  00b9f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ba4:    	jmp    0xbeb
  00ba9:    	sub    rsp,0x20
  00bad:    	movq   QWORD PTR [rsp],xmm2
  00bb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bbe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bc4: f6 	movabs rax,0x55f67a69e160
  00bce:    	call   rax
  00bd0:    	movq   xmm2,QWORD PTR [rsp]
  00bd5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bdb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00be1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00be7:    	add    rsp,0x20
  00beb: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00bf2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00bf9: 00 	test   rdi,0x7
  00c00:    	jne    0x351e9
  00c06:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c0a:    	jne    0x351e9
  00c10: 26 	cmp    DWORD PTR [rip+0xfffffffffffef366],0x26        # 0xfffeff7d
  00c17:    	jne    0x351e9
  00c1d:    	mov    esi,DWORD PTR [rip+0xa49]        # 0x166c
  00c23:    	cmp    esi,0xffffffff
  00c26:    	je     0x35205
  00c2c:    	cmp    WORD PTR [rdi+0x2],0x3
  00c31:    	jne    0xc4a
  00c37:    	cmp    esi,0x6
  00c3a:    	jge    0xc4a
  00c40:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c45:    	jmp    0xc8c
  00c4a:    	sub    rsp,0x20
  00c4e:    	movq   QWORD PTR [rsp],xmm2
  00c53:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c59:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c5f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c65: f6 	movabs rax,0x55f67a69e160
  00c6f:    	call   rax
  00c71:    	movq   xmm2,QWORD PTR [rsp]
  00c76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c7c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c82:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c88:    	add    rsp,0x20
  00c8c:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00c90: 01 	sub    DWORD PTR [rip+0x9d9],0x1        # 0x1670
  00c97:    	je     0x35280
  00c9d:    	mov    rdi,QWORD PTR [r14-0x60]
  00ca1:    	mov    rsi,QWORD PTR [r14-0x80]
  00ca5:    	sub    rsp,0x20
  00ca9:    	movq   QWORD PTR [rsp],xmm2
  00cae:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cb4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cba:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cc0:    	mov    rdx,rdi
  00cc3:    	mov    rcx,rsi
  00cc6:    	mov    rdi,rbx
  00cc9:    	mov    rsi,r12
  00ccc: f6 	movabs rax,0x55f67a6dfeb0
  00cd6:    	call   rax
  00cd8:    	movq   xmm2,QWORD PTR [rsp]
  00cdd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ce3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ce9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cef:    	add    rsp,0x20
  00cf3: f6 	movabs r13,0x55f67b870c60
  00cfd:    	test   rax,rax
  00d00:    	je     0xfffecbfb
  00d06:    	mov    QWORD PTR [r14-0x80],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00d0a:    	mov    rdi,QWORD PTR [r14-0x78]
  00d0e:    	mov    rsi,QWORD PTR [r14-0x80]
  00d12:    	sub    rsp,0x20
  00d16:    	movq   QWORD PTR [rsp],xmm2
  00d1b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d21:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d27:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d2d:    	mov    rdx,rdi
  00d30:    	mov    rcx,rsi
  00d33:    	mov    rdi,rbx
  00d36:    	mov    rsi,r12
  00d39: f6 	movabs rax,0x55f67a6ddf30
  00d43:    	call   rax
  00d45:    	movq   xmm2,QWORD PTR [rsp]
  00d4a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d50:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d56:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d5c:    	add    rsp,0x20
  00d60: f6 	movabs r13,0x55f67b870c70
  00d6a:    	test   rax,rax
  00d6d:    	je     0xfffecbfb
  00d73:    	mov    QWORD PTR [r14-0x78],rax
:00071 %11 = %1.call org()                  [Ray]
  00d77:    	mov    rdi,QWORD PTR [r14-0x38]
  00d7b: 00 	test   rdi,0x7
  00d82:    	jne    0x3529e
  00d88:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d8c:    	jne    0x3529e
  00d92: 26 	cmp    DWORD PTR [rip+0xfffffffffffef1e4],0x26        # 0xfffeff7d
  00d99:    	jne    0x3529e
  00d9f:    	mov    esi,DWORD PTR [rip+0x8d3]        # 0x1678
  00da5:    	cmp    esi,0xffffffff
  00da8:    	je     0x352ba
  00dae:    	cmp    WORD PTR [rdi+0x2],0x3
  00db3:    	jne    0xdcc
  00db9:    	cmp    esi,0x6
  00dbc:    	jge    0xdcc
  00dc2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dc7:    	jmp    0xe0e
  00dcc:    	sub    rsp,0x20
  00dd0:    	movq   QWORD PTR [rsp],xmm2
  00dd5:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ddb:    	movq   QWORD PTR [rsp+0x10],xmm5
  00de1:    	movq   QWORD PTR [rsp+0x18],xmm6
  00de7: f6 	movabs rax,0x55f67a69e160
  00df1:    	call   rax
  00df3:    	movq   xmm2,QWORD PTR [rsp]
  00df8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dfe:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e04:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e0a:    	add    rsp,0x20
  00e0e: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00e15: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e1c: 00 	test   rdi,0x7
  00e23:    	jne    0x35319
  00e29:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e2d:    	jne    0x35319
  00e33: 26 	cmp    DWORD PTR [rip+0xfffffffffffef143],0x26        # 0xfffeff7d
  00e3a:    	jne    0x35319
  00e40:    	mov    esi,DWORD PTR [rip+0x83a]        # 0x1680
  00e46:    	cmp    esi,0xffffffff
  00e49:    	je     0x35335
  00e4f:    	cmp    WORD PTR [rdi+0x2],0x3
  00e54:    	jne    0xe6d
  00e5a:    	cmp    esi,0x6
  00e5d:    	jge    0xe6d
  00e63:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e68:    	jmp    0xeaf
  00e6d:    	sub    rsp,0x20
  00e71:    	movq   QWORD PTR [rsp],xmm2
  00e76:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e7c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e82:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e88: f6 	movabs rax,0x55f67a69e160
  00e92:    	call   rax
  00e94:    	movq   xmm2,QWORD PTR [rsp]
  00e99:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e9f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ea5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00eab:    	add    rsp,0x20
  00eaf:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00eb3:    	mov    rdi,QWORD PTR [r14-0x38]
  00eb7: 00 	test   rdi,0x7
  00ebe:    	jne    0x35394
  00ec4:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00ec8:    	jne    0x35394
  00ece: 26 	cmp    DWORD PTR [rip+0xfffffffffffef0a8],0x26        # 0xfffeff7d
  00ed5:    	jne    0x35394
  00edb:    	mov    esi,DWORD PTR [rip+0x7a7]        # 0x1688
  00ee1:    	cmp    esi,0xffffffff
  00ee4:    	je     0x353b0
  00eea:    	cmp    WORD PTR [rdi+0x2],0x3
  00eef:    	jne    0xf08
  00ef5:    	cmp    esi,0x6
  00ef8:    	jge    0xf08
  00efe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f03:    	jmp    0xf4a
  00f08:    	sub    rsp,0x20
  00f0c:    	movq   QWORD PTR [rsp],xmm2
  00f11:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f17:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f1d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f23: f6 	movabs rax,0x55f67a69e160
  00f2d:    	call   rax
  00f2f:    	movq   xmm2,QWORD PTR [rsp]
  00f34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f3a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f40:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f46:    	add    rsp,0x20
  00f4a: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00f51: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f58: 00 	test   rdi,0x7
  00f5f:    	jne    0x3540f
  00f65:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f69:    	jne    0x3540f
  00f6f: 26 	cmp    DWORD PTR [rip+0xfffffffffffef007],0x26        # 0xfffeff7d
  00f76:    	jne    0x3540f
  00f7c:    	mov    esi,DWORD PTR [rip+0x70e]        # 0x1690
  00f82:    	cmp    esi,0xffffffff
  00f85:    	je     0x3542b
  00f8b:    	cmp    WORD PTR [rdi+0x2],0x3
  00f90:    	jne    0xfa9
  00f96:    	cmp    esi,0x6
  00f99:    	jge    0xfa9
  00f9f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fa4:    	jmp    0xfeb
  00fa9:    	sub    rsp,0x20
  00fad:    	movq   QWORD PTR [rsp],xmm2
  00fb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fbe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00fc4: f6 	movabs rax,0x55f67a69e160
  00fce:    	call   rax
  00fd0:    	movq   xmm2,QWORD PTR [rsp]
  00fd5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fdb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fe1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fe7:    	add    rsp,0x20
  00feb: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  00ff2:    	mov    rdi,QWORD PTR [r14-0x60]
  00ff6: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00ffd:    	sub    rsp,0x20
  01001:    	movq   QWORD PTR [rsp],xmm2
  01006:    	movq   QWORD PTR [rsp+0x8],xmm4
  0100c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01012:    	movq   QWORD PTR [rsp+0x18],xmm6
  01018:    	mov    rdx,rdi
  0101b:    	mov    rcx,rsi
  0101e:    	mov    rdi,rbx
  01021:    	mov    rsi,r12
  01024: f6 	movabs rax,0x55f67a6dfeb0
  0102e:    	call   rax
  01030:    	movq   xmm2,QWORD PTR [rsp]
  01035:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0103b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01041:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01047:    	add    rsp,0x20
  0104b: f6 	movabs r13,0x55f67b870d40
  01055:    	test   rax,rax
  01058:    	je     0xfffecbfb
  0105e: ff 	mov    QWORD PTR [r14-0x88],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01065:    	mov    rdi,QWORD PTR [r14-0x80]
  01069: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01070:    	sub    rsp,0x20
  01074:    	movq   QWORD PTR [rsp],xmm2
  01079:    	movq   QWORD PTR [rsp+0x8],xmm4
  0107f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01085:    	movq   QWORD PTR [rsp+0x18],xmm6
  0108b:    	mov    rdx,rdi
  0108e:    	mov    rcx,rsi
  01091:    	mov    rdi,rbx
  01094:    	mov    rsi,r12
  01097: f6 	movabs rax,0x55f67a6ddf30
  010a1:    	call   rax
  010a3:    	movq   xmm2,QWORD PTR [rsp]
  010a8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010ae:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010b4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010ba:    	add    rsp,0x20
  010be: f6 	movabs r13,0x55f67b870d50
  010c8:    	test   rax,rax
  010cb:    	je     0xfffecbfb
  010d1:    	mov    QWORD PTR [r14-0x80],rax
:00085 %12 = %1.call org()                  [Ray]
  010d5:    	mov    rdi,QWORD PTR [r14-0x38]
  010d9: 00 	test   rdi,0x7
  010e0:    	jne    0x3548a
  010e6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010ea:    	jne    0x3548a
  010f0: 26 	cmp    DWORD PTR [rip+0xfffffffffffeee86],0x26        # 0xfffeff7d
  010f7:    	jne    0x3548a
  010fd:    	mov    esi,DWORD PTR [rip+0x595]        # 0x1698
  01103:    	cmp    esi,0xffffffff
  01106:    	je     0x354a6
  0110c:    	cmp    WORD PTR [rdi+0x2],0x3
  01111:    	jne    0x112a
  01117:    	cmp    esi,0x6
  0111a:    	jge    0x112a
  01120:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01125:    	jmp    0x116c
  0112a:    	sub    rsp,0x20
  0112e:    	movq   QWORD PTR [rsp],xmm2
  01133:    	movq   QWORD PTR [rsp+0x8],xmm4
  01139:    	movq   QWORD PTR [rsp+0x10],xmm5
  0113f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01145: f6 	movabs rax,0x55f67a69e160
  0114f:    	call   rax
  01151:    	movq   xmm2,QWORD PTR [rsp]
  01156:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0115c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01162:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01168:    	add    rsp,0x20
  0116c: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  01173: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0117a: 00 	test   rdi,0x7
  01181:    	jne    0x35505
  01187:    	cmp    DWORD PTR [rdi+0x4],0x28
  0118b:    	jne    0x35505
  01191: 26 	cmp    DWORD PTR [rip+0xfffffffffffeede5],0x26        # 0xfffeff7d
  01198:    	jne    0x35505
  0119e:    	mov    esi,DWORD PTR [rip+0x4fc]        # 0x16a0
  011a4:    	cmp    esi,0xffffffff
  011a7:    	je     0x35521
  011ad:    	cmp    WORD PTR [rdi+0x2],0x3
  011b2:    	jne    0x11cb
  011b8:    	cmp    esi,0x6
  011bb:    	jge    0x11cb
  011c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011c6:    	jmp    0x120d
  011cb:    	sub    rsp,0x20
  011cf:    	movq   QWORD PTR [rsp],xmm2
  011d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  011da:    	movq   QWORD PTR [rsp+0x10],xmm5
  011e0:    	movq   QWORD PTR [rsp+0x18],xmm6
  011e6: f6 	movabs rax,0x55f67a69e160
  011f0:    	call   rax
  011f2:    	movq   xmm2,QWORD PTR [rsp]
  011f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011fd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01203:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01209:    	add    rsp,0x20
  0120d: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  01214:    	mov    rdi,QWORD PTR [r14-0x38]
  01218: 00 	test   rdi,0x7
  0121f:    	jne    0x35580
  01225:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01229:    	jne    0x35580
  0122f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeed47],0x26        # 0xfffeff7d
  01236:    	jne    0x35580
  0123c:    	mov    esi,DWORD PTR [rip+0x466]        # 0x16a8
  01242:    	cmp    esi,0xffffffff
  01245:    	je     0x3559c
  0124b:    	cmp    WORD PTR [rdi+0x2],0x3
  01250:    	jne    0x1269
  01256:    	cmp    esi,0x6
  01259:    	jge    0x1269
  0125f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01264:    	jmp    0x12ab
  01269:    	sub    rsp,0x20
  0126d:    	movq   QWORD PTR [rsp],xmm2
  01272:    	movq   QWORD PTR [rsp+0x8],xmm4
  01278:    	movq   QWORD PTR [rsp+0x10],xmm5
  0127e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01284: f6 	movabs rax,0x55f67a69e160
  0128e:    	call   rax
  01290:    	movq   xmm2,QWORD PTR [rsp]
  01295:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0129b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012a1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012a7:    	add    rsp,0x20
  012ab: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  012b2: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012b9: 00 	test   rdi,0x7
  012c0:    	jne    0x355fb
  012c6:    	cmp    DWORD PTR [rdi+0x4],0x28
  012ca:    	jne    0x355fb
  012d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeca6],0x26        # 0xfffeff7d
  012d7:    	jne    0x355fb
  012dd:    	mov    esi,DWORD PTR [rip+0x3cd]        # 0x16b0
  012e3:    	cmp    esi,0xffffffff
  012e6:    	je     0x35617
  012ec:    	cmp    WORD PTR [rdi+0x2],0x3
  012f1:    	jne    0x130a
  012f7:    	cmp    esi,0x6
  012fa:    	jge    0x130a
  01300:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01305:    	jmp    0x134c
  0130a:    	sub    rsp,0x20
  0130e:    	movq   QWORD PTR [rsp],xmm2
  01313:    	movq   QWORD PTR [rsp+0x8],xmm4
  01319:    	movq   QWORD PTR [rsp+0x10],xmm5
  0131f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01325: f6 	movabs rax,0x55f67a69e160
  0132f:    	call   rax
  01331:    	movq   xmm2,QWORD PTR [rsp]
  01336:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0133c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01342:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01348:    	add    rsp,0x20
  0134c: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01353:    	mov    rdi,QWORD PTR [r14-0x60]
  01357: ff 	mov    rsi,QWORD PTR [r14-0x90]
  0135e:    	sub    rsp,0x20
  01362:    	movq   QWORD PTR [rsp],xmm2
  01367:    	movq   QWORD PTR [rsp+0x8],xmm4
  0136d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01373:    	movq   QWORD PTR [rsp+0x18],xmm6
  01379:    	mov    rdx,rdi
  0137c:    	mov    rcx,rsi
  0137f:    	mov    rdi,rbx
  01382:    	mov    rsi,r12
  01385: f6 	movabs rax,0x55f67a6dfeb0
  0138f:    	call   rax
  01391:    	movq   xmm2,QWORD PTR [rsp]
  01396:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0139c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013a2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013a8:    	add    rsp,0x20
  013ac: f6 	movabs r13,0x55f67b870e20
  013b6:    	test   rax,rax
  013b9:    	je     0xfffecbfb
  013bf: ff 	mov    QWORD PTR [r14-0x90],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  013c6: ff 	mov    rdi,QWORD PTR [r14-0x88]
  013cd: ff 	mov    rsi,QWORD PTR [r14-0x90]
  013d4:    	sub    rsp,0x20
  013d8:    	movq   QWORD PTR [rsp],xmm2
  013dd:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e3:    	movq   QWORD PTR [rsp+0x10],xmm5
  013e9:    	movq   QWORD PTR [rsp+0x18],xmm6
  013ef:    	mov    rdx,rdi
  013f2:    	mov    rcx,rsi
  013f5:    	mov    rdi,rbx
  013f8:    	mov    rsi,r12
  013fb: f6 	movabs rax,0x55f67a6ddf30
  01405:    	call   rax
  01407:    	movq   xmm2,QWORD PTR [rsp]
  0140c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01412:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01418:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0141e:    	add    rsp,0x20
  01422: f6 	movabs r13,0x55f67b870e30
  0142c:    	test   rax,rax
  0142f:    	je     0xfffecbfb
  01435: ff 	mov    QWORD PTR [r14-0x88],rax
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  0143c:    	mov    rdi,QWORD PTR [r14-0x70]
  01440: 00 	test   rdi,0x7
  01447:    	jne    0x35676
  0144d:    	cmp    DWORD PTR [rdi+0x4],0x29
  01451:    	jne    0x35676
  01457: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeb1f],0x26        # 0xfffeff7d
  0145e:    	jne    0x35676
  01464: 00 	mov    r9,0x0
  0146b:    	sub    rsp,0x20
  0146f:    	movq   QWORD PTR [rsp],xmm2
  01474:    	movq   QWORD PTR [rsp+0x8],xmm4
  0147a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01480:    	movq   QWORD PTR [rsp+0x18],xmm6
  01486:    	mov    rdx,rdi
  01489:    	mov    QWORD PTR [rsp-0x40],rcx
  0148e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01497:    	lea    rcx,[r14-0x78]
  0149b: 00 	mov    r8,0x3
  014a2:    	mov    rsi,QWORD PTR [rbx]
  014a5:    	mov    QWORD PTR [rsp-0x18],rsi
  014aa:    	lea    rsi,[rsp-0x18]
  014af:    	mov    QWORD PTR [rbx],rsi
  014b2:    	lea    r14,[rsp-0x10]
  014b7:    	mov    QWORD PTR [rsp-0x20],r14
  014bc:    	call   0x35692
  014c1:    	lea    r14,[rbp-0x8]
  014c5:    	mov    QWORD PTR [rbx],r14
  014c8:    	mov    r14,QWORD PTR [rbp-0x10]
  014cc:    	movq   xmm2,QWORD PTR [rsp]
  014d1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014d7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014dd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014e3:    	add    rsp,0x20
  014e7: f6 	movabs r13,0x55f67b870e50
  014f1:    	test   rax,rax
  014f4:    	je     0xfffecbfb
  014fa:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  014fe:    	mov    rdi,QWORD PTR [r14-0x40]
  01502: 00 	test   rdi,0x7
  01509:    	jne    0x356c4
  0150f:    	cmp    DWORD PTR [rdi+0x4],0x30
  01513:    	jne    0x356c4
  01519: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea5d],0x26        # 0xfffeff7d
  01520:    	jne    0x356c4
  01526:    	mov    esi,DWORD PTR [rip+0x18c]        # 0x16b8
  0152c:    	cmp    esi,0xffffffff
  0152f:    	je     0x356e0
  01535:    	cmp    WORD PTR [rdi+0x2],0x3
  0153a:    	jne    0x1557
  01540:    	cmp    esi,0x6
  01543:    	jge    0x1557
  01549:    	mov    rax,QWORD PTR [r14-0x68]
  0154d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01552:    	jmp    0x15b0
  01557:    	sub    rsp,0x20
  0155b:    	movq   QWORD PTR [rsp],xmm2
  01560:    	movq   QWORD PTR [rsp+0x8],xmm4
  01566:    	movq   QWORD PTR [rsp+0x10],xmm5
  0156c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01572:    	mov    rdx,QWORD PTR [r14-0x68]
  01576: f6 	movabs rax,0x55f67a69e3e0
  01580:    	call   rax
  01582:    	movq   xmm2,QWORD PTR [rsp]
  01587:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0158d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01593:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01599:    	add    rsp,0x20
  0159d: f6 	movabs r13,0x55f67b870e80
  015a7:    	test   rax,rax
  015aa:    	je     0xfffecbfb
:00103 
:00105 br =>:00106
  015b0:    	jmp    0x3579f
:00106 %7 = nil
  015b5: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  015bd:    	mov    rax,QWORD PTR [r14-0x68]
  015c1:    	leave  
  015c2:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55f67b867230
<== finished compile. elapsed:145.1µs
offset:Pos(84724) code: 9361 bytes  data: 419 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [rbp-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x34118
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x32
  000a7:    	jne    0x34118
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xfffffffffffee809],0x26        # 0xfffee8c1
  000b8:    	jne    0x34127
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0xa0]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x34136
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: f6 	movabs r13,0x55f67b867260
  00118:    	test   rax,rax
  0011b:    	je     0xfffeb53f
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00004 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00005 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x2361]        # 0x249c
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00006 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x235b]        # 0x24ac
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xfffffffffffee750],0x26        # 0xfffee8c1
  00171:    	jne    0x34168
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa8]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x34187
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: f6 	movabs r13,0x55f67b8672d0
  001e3:    	test   rax,rax
  001e6:    	je     0xfffeb53f
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x341b9
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xfffeb598
  0024f:    	test   rax,rax
  00252:    	je     0x341b9
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee661]        # 0xfffee8cc
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x225a]        # 0x24cc
  00272:    	jne    0x341d8
  00278: 00 	mov    rax,QWORD PTR [rip+0x223d]        # 0x24bc
  0027f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x3423c
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0029e:    	jne    0x3423c
  002a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffee616],0x26        # 0xfffee8c1
  002ab:    	jne    0x3423c
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: f6 	movabs rax,0x55f67a6f91a0
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee5e2]        # 0xfffee8cc
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x21fb]        # 0x24ec
  002f1:    	jne    0x3425f
  002f7: 00 	mov    rax,QWORD PTR [rip+0x21de]        # 0x24dc
  002fe: ff 	mov    QWORD PTR [r14-0xa8],rax
:00018 %16 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x21ef]        # 0x24fc
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xb0],rax
:00019 %16 = %16 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x342c3
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xfffeb598
  00377:    	test   rax,rax
  0037a:    	je     0x342c3
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x342ef
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x21
  003a0:    	jne    0x342ef
  003a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffee514],0x26        # 0xfffee8c1
  003ad:    	jne    0x342ef
  003b3:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee506]        # 0xfffee8cc
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x214f]        # 0x251c
  003cd:    	jne    0x3432b
  003d3: 00 	mov    rax,QWORD PTR [rip+0x2132]        # 0x250c
  003da: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x343b3
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x21
  003f9:    	jne    0x343b3
  003ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffee4bb],0x26        # 0xfffee8c1
  00406:    	jne    0x343b3
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: f6 	movabs rax,0x55f67a6f91b0
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee463]        # 0xfffee8cc
  00469: 00 	cmp    rax,QWORD PTR [rip+0x20cc]        # 0x253c
  00470:    	jne    0x343f3
  00476: 00 	mov    rax,QWORD PTR [rip+0x20af]        # 0x252c
  0047d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00030 %16 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x20c0]        # 0x254c
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xb0],rax
:00031 %16 = %16 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x3447b
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004b9:    	jne    0x3447b
  004bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffee3fb],0x26        # 0xfffee8c1
  004c6:    	jne    0x3447b
  004cc:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee3eb]        # 0xfffee8cc
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x2084]        # 0x256c
  004e8:    	jne    0x344c4
  004ee: 00 	mov    rax,QWORD PTR [rip+0x2067]        # 0x255c
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x3455a
  00510:    	cmp    DWORD PTR [rdi+0x4],0x21
  00514:    	jne    0x3455a
  0051a: 26 	cmp    DWORD PTR [rip+0xfffffffffffee3a0],0x26        # 0xfffee8c1
  00521:    	jne    0x3455a
  00527:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [rbp-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 %15 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  00548:    	sub    rsp,0x30
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563:    	movq   QWORD PTR [rsp+0x20],xmm7
  00569: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00570: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00577: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  0057e:    	mov    rdi,rbx
  00581:    	mov    rsi,r12
  00584: f6 	movabs r8,0x55f67b8674e8
  0058e: f6 	movabs rax,0x55f67a71b620
  00598:    	call   rax
  0059a:    	movq   xmm2,QWORD PTR [rsp]
  0059f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ab:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b7: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005be:    	add    rsp,0x30
  005c2: f6 	movabs r13,0x55f67b8674f0
  005cc:    	test   rax,rax
  005cf:    	je     0xfffeb53f
  005d5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 %13 = %14.call x()                   [Vec]
  005dc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005e3: 00 	test   rdi,0x7
  005ea:    	jne    0x345b1
  005f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  005f4:    	jne    0x345b1
  005fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffee2c0],0x26        # 0xfffee8c1
  00601:    	jne    0x345b1
  00607:    	mov    esi,DWORD PTR [rip+0x1f6b]        # 0x2578
  0060d:    	cmp    esi,0xffffffff
  00610:    	je     0x34605
  00616:    	cmp    WORD PTR [rdi+0x2],0x3
  0061b:    	jne    0x634
  00621:    	cmp    esi,0x6
  00624:    	jge    0x634
  0062a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0062f:    	jmp    0x690
  00634:    	sub    rsp,0x30
  00638:    	movq   QWORD PTR [rsp],xmm2
  0063d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00643:    	movq   QWORD PTR [rsp+0x10],xmm4
  00649:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00655: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0065c: f6 	movabs rax,0x55f67a69e160
  00666:    	call   rax
  00668:    	movq   xmm2,QWORD PTR [rsp]
  0066d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00673:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0067f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00685: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0068c:    	add    rsp,0x30
  00690: ff 	mov    QWORD PTR [r14-0x98],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  00697: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0069e: 00 	test   rdi,0x1
  006a5:    	jne    0x3467e
  006ab: 00 	test   rdi,0x2
  006b2:    	je     0x6ee
  006b8:    	xorps  xmm6,xmm6
  006bb: 00 	movabs rax,0x8000000000000002
  006c5:    	cmp    rdi,rax
  006c8:    	je     0x700
  006ce:    	mov    rax,rdi
  006d1:    	sar    rax,0x3f
  006d5:    	add    rax,0x2
  006d9:    	and    rdi,0xfffffffffffffffc
  006dd:    	or     rdi,rax
  006e0:    	rol    rdi,0x3d
  006e4:    	movq   xmm6,rdi
  006e9:    	jmp    0x700
  006ee:    	call   0xfffeb598
  006f3:    	test   rax,rax
  006f6:    	je     0x3467e
  006fc:    	movq   xmm6,xmm0
  00700:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00704:    	mov    rax,QWORD PTR [rbp-0x18]
  00708:    	mov    rax,QWORD PTR [rax]
  0070b:    	mov    rax,QWORD PTR [rax-0x28]
  0070f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00049 %16 = 1: i32
  00716: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00721:    	sub    rsp,0x30
  00725:    	movq   QWORD PTR [rsp],xmm2
  0072a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00730:    	movq   QWORD PTR [rsp+0x10],xmm5
  00736:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00742: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00749: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00750: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00757:    	mov    rdi,rbx
  0075a:    	mov    rsi,r12
  0075d: f6 	movabs r8,0x55f67b867558
  00767: f6 	movabs rax,0x55f67a71b620
  00771:    	call   rax
  00773:    	movq   xmm2,QWORD PTR [rsp]
  00778:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0077e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00784:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0078a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00790: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00797:    	add    rsp,0x30
  0079b: f6 	movabs r13,0x55f67b867560
  007a5:    	test   rax,rax
  007a8:    	je     0xfffeb53f
  007ae: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 %14 = %15.call x()                   [Vec]
  007b5: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  007bc: 00 	test   rdi,0x7
  007c3:    	jne    0x346d2
  007c9:    	cmp    DWORD PTR [rdi+0x4],0x28
  007cd:    	jne    0x346d2
  007d3: 26 	cmp    DWORD PTR [rip+0xfffffffffffee0e7],0x26        # 0xfffee8c1
  007da:    	jne    0x346d2
  007e0:    	mov    esi,DWORD PTR [rip+0x1d9a]        # 0x2580
  007e6:    	cmp    esi,0xffffffff
  007e9:    	je     0x34726
  007ef:    	cmp    WORD PTR [rdi+0x2],0x3
  007f4:    	jne    0x80d
  007fa:    	cmp    esi,0x6
  007fd:    	jge    0x80d
  00803:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00808:    	jmp    0x869
  0080d:    	sub    rsp,0x30
  00811:    	movq   QWORD PTR [rsp],xmm2
  00816:    	movq   QWORD PTR [rsp+0x8],xmm4
  0081c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00822:    	movq   QWORD PTR [rsp+0x18],xmm6
  00828:    	movq   QWORD PTR [rsp+0x20],xmm7
  0082e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00835: f6 	movabs rax,0x55f67a69e160
  0083f:    	call   rax
  00841:    	movq   xmm2,QWORD PTR [rsp]
  00846:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0084c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00852:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00858:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0085e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00865:    	add    rsp,0x30
  00869: ff 	mov    QWORD PTR [r14-0xa0],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00870: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00877: 00 	test   rdi,0x1
  0087e:    	jne    0x3479f
  00884: 00 	test   rdi,0x2
  0088b:    	je     0x8c7
  00891:    	xorps  xmm3,xmm3
  00894: 00 	movabs rax,0x8000000000000002
  0089e:    	cmp    rdi,rax
  008a1:    	je     0x8d9
  008a7:    	mov    rax,rdi
  008aa:    	sar    rax,0x3f
  008ae:    	add    rax,0x2
  008b2:    	and    rdi,0xfffffffffffffffc
  008b6:    	or     rdi,rax
  008b9:    	rol    rdi,0x3d
  008bd:    	movq   xmm3,rdi
  008c2:    	jmp    0x8d9
  008c7:    	call   0xfffeb598
  008cc:    	test   rax,rax
  008cf:    	je     0x3479f
  008d5:    	movq   xmm3,xmm0
  008d9:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008de:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008e2:    	mov    rax,QWORD PTR [rbp-0x18]
  008e6:    	mov    rax,QWORD PTR [rax]
  008e9:    	mov    rax,QWORD PTR [rax-0x28]
  008ed: ff 	mov    QWORD PTR [r14-0xa8],rax
:00057 %16 = 2: i32
  008f4: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  008ff:    	sub    rsp,0x40
  00903:    	movq   QWORD PTR [rsp],xmm2
  00908:    	movq   QWORD PTR [rsp+0x8],xmm3
  0090e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00914:    	movq   QWORD PTR [rsp+0x18],xmm5
  0091a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00920:    	movq   QWORD PTR [rsp+0x28],xmm7
  00926: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0092d: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00934: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  0093b:    	mov    rdi,rbx
  0093e:    	mov    rsi,r12
  00941: f6 	movabs r8,0x55f67b8675d8
  0094b: f6 	movabs rax,0x55f67a71b620
  00955:    	call   rax
  00957:    	movq   xmm2,QWORD PTR [rsp]
  0095c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00962:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00968:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00974:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0097a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00981:    	add    rsp,0x40
  00985: f6 	movabs r13,0x55f67b8675e0
  0098f:    	test   rax,rax
  00992:    	je     0xfffeb53f
  00998: ff 	mov    QWORD PTR [r14-0xa8],rax
:00059 %14 = %15.call x()                   [Vec]
  0099f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  009a6: 00 	test   rdi,0x7
  009ad:    	jne    0x347f3
  009b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  009b7:    	jne    0x347f3
  009bd: 26 	cmp    DWORD PTR [rip+0xfffffffffffedefd],0x26        # 0xfffee8c1
  009c4:    	jne    0x347f3
  009ca:    	mov    esi,DWORD PTR [rip+0x1bb8]        # 0x2588
  009d0:    	cmp    esi,0xffffffff
  009d3:    	je     0x34847
  009d9:    	cmp    WORD PTR [rdi+0x2],0x3
  009de:    	jne    0x9f7
  009e4:    	cmp    esi,0x6
  009e7:    	jge    0x9f7
  009ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009f2:    	jmp    0xa53
  009f7:    	sub    rsp,0x30
  009fb:    	movq   QWORD PTR [rsp],xmm2
  00a00:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a06:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a0c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a12:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a18: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a1f: f6 	movabs rax,0x55f67a69e160
  00a29:    	call   rax
  00a2b:    	movq   xmm2,QWORD PTR [rsp]
  00a30:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a36:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a3c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a42:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a48: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a4f:    	add    rsp,0x30
  00a53: ff 	mov    QWORD PTR [r14-0xa0],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a5a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a61: 00 	test   rdi,0x1
  00a68:    	jne    0x348c0
  00a6e: 00 	test   rdi,0x2
  00a75:    	je     0xab1
  00a7b:    	xorps  xmm3,xmm3
  00a7e: 00 	movabs rax,0x8000000000000002
  00a88:    	cmp    rdi,rax
  00a8b:    	je     0xac3
  00a91:    	mov    rax,rdi
  00a94:    	sar    rax,0x3f
  00a98:    	add    rax,0x2
  00a9c:    	and    rdi,0xfffffffffffffffc
  00aa0:    	or     rdi,rax
  00aa3:    	rol    rdi,0x3d
  00aa7:    	movq   xmm3,rdi
  00aac:    	jmp    0xac3
  00ab1:    	call   0xfffeb598
  00ab6:    	test   rax,rax
  00ab9:    	je     0x348c0
  00abf:    	movq   xmm3,xmm0
  00ac3:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ac7:    	movq   xmm9,xmm6
  00acc:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ad1:    	mov    rax,QWORD PTR [rbp-0x18]
  00ad5:    	mov    rax,QWORD PTR [rax]
  00ad8:    	mov    rax,QWORD PTR [rax-0x28]
  00adc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00065 %15 = 0: i32
  00ae3: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00aee:    	sub    rsp,0x40
  00af2:    	movq   QWORD PTR [rsp],xmm2
  00af7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00afd:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b03:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b09:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b0f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b16: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b1d: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00b24: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00b2b:    	mov    rdi,rbx
  00b2e:    	mov    rsi,r12
  00b31: f6 	movabs r8,0x55f67b867658
  00b3b: f6 	movabs rax,0x55f67a71b620
  00b45:    	call   rax
  00b47:    	movq   xmm2,QWORD PTR [rsp]
  00b4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b58:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b5e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b64: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b6b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b72:    	add    rsp,0x40
  00b76: f6 	movabs r13,0x55f67b867660
  00b80:    	test   rax,rax
  00b83:    	je     0xfffeb53f
  00b89: ff 	mov    QWORD PTR [r14-0xa0],rax
:00067 %13 = %14.call y()                   [Vec]
  00b90: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b97: 00 	test   rdi,0x7
  00b9e:    	jne    0x34914
  00ba4:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba8:    	jne    0x34914
  00bae: 26 	cmp    DWORD PTR [rip+0xfffffffffffedd0c],0x26        # 0xfffee8c1
  00bb5:    	jne    0x34914
  00bbb:    	mov    esi,DWORD PTR [rip+0x19cf]        # 0x2590
  00bc1:    	cmp    esi,0xffffffff
  00bc4:    	je     0x34966
  00bca:    	cmp    WORD PTR [rdi+0x2],0x3
  00bcf:    	jne    0xbe8
  00bd5:    	cmp    esi,0x6
  00bd8:    	jge    0xbe8
  00bde:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be3:    	jmp    0xc46
  00be8:    	sub    rsp,0x30
  00bec:    	movq   QWORD PTR [rsp],xmm2
  00bf1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bfd:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c03: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c0a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c11: f6 	movabs rax,0x55f67a69e160
  00c1b:    	call   rax
  00c1d:    	movq   xmm2,QWORD PTR [rsp]
  00c22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c2e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c34: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c3b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c42:    	add    rsp,0x30
  00c46: ff 	mov    QWORD PTR [r14-0x98],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c4d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c54: 00 	test   rdi,0x1
  00c5b:    	jne    0x349e1
  00c61: 00 	test   rdi,0x2
  00c68:    	je     0xca4
  00c6e:    	xorps  xmm3,xmm3
  00c71: 00 	movabs rax,0x8000000000000002
  00c7b:    	cmp    rdi,rax
  00c7e:    	je     0xcb6
  00c84:    	mov    rax,rdi
  00c87:    	sar    rax,0x3f
  00c8b:    	add    rax,0x2
  00c8f:    	and    rdi,0xfffffffffffffffc
  00c93:    	or     rdi,rax
  00c96:    	rol    rdi,0x3d
  00c9a:    	movq   xmm3,rdi
  00c9f:    	jmp    0xcb6
  00ca4:    	call   0xfffeb598
  00ca9:    	test   rax,rax
  00cac:    	je     0x349e1
  00cb2:    	movq   xmm3,xmm0
  00cb6:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00cba:    	mov    rax,QWORD PTR [rbp-0x18]
  00cbe:    	mov    rax,QWORD PTR [rax]
  00cc1:    	mov    rax,QWORD PTR [rax-0x28]
  00cc5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00072 %16 = 1: i32
  00ccc: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cd7:    	sub    rsp,0x40
  00cdb:    	movq   QWORD PTR [rsp],xmm2
  00ce0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ce6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cf2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00cf8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00cff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00d0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00d14:    	mov    rdi,rbx
  00d17:    	mov    rsi,r12
  00d1a: f6 	movabs r8,0x55f67b8676c8
  00d24: f6 	movabs rax,0x55f67a71b620
  00d2e:    	call   rax
  00d30:    	movq   xmm2,QWORD PTR [rsp]
  00d35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d47:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d4d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d54: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d5b:    	add    rsp,0x40
  00d5f: f6 	movabs r13,0x55f67b8676d0
  00d69:    	test   rax,rax
  00d6c:    	je     0xfffeb53f
  00d72: ff 	mov    QWORD PTR [r14-0xa8],rax
:00074 %14 = %15.call y()                   [Vec]
  00d79: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00d80: 00 	test   rdi,0x7
  00d87:    	jne    0x34a33
  00d8d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d91:    	jne    0x34a33
  00d97: 26 	cmp    DWORD PTR [rip+0xfffffffffffedb23],0x26        # 0xfffee8c1
  00d9e:    	jne    0x34a33
  00da4:    	mov    esi,DWORD PTR [rip+0x17ee]        # 0x2598
  00daa:    	cmp    esi,0xffffffff
  00dad:    	je     0x34a95
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0xdd1
  00dbe:    	cmp    esi,0x6
  00dc1:    	jge    0xdd1
  00dc7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dcc:    	jmp    0xe3b
  00dd1:    	sub    rsp,0x40
  00dd5:    	movq   QWORD PTR [rsp],xmm2
  00dda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dec:    	movq   QWORD PTR [rsp+0x20],xmm7
  00df2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00df9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e00: f6 	movabs rax,0x55f67a69e160
  00e0a:    	call   rax
  00e0c:    	movq   xmm2,QWORD PTR [rsp]
  00e11:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e17:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e1d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e23:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e29: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e30: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e37:    	add    rsp,0x40
  00e3b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e42: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e49: 00 	test   rdi,0x1
  00e50:    	jne    0x34b1c
  00e56: 00 	test   rdi,0x2
  00e5d:    	je     0xe99
  00e63:    	xorps  xmm6,xmm6
  00e66: 00 	movabs rax,0x8000000000000002
  00e70:    	cmp    rdi,rax
  00e73:    	je     0xeab
  00e79:    	mov    rax,rdi
  00e7c:    	sar    rax,0x3f
  00e80:    	add    rax,0x2
  00e84:    	and    rdi,0xfffffffffffffffc
  00e88:    	or     rdi,rax
  00e8b:    	rol    rdi,0x3d
  00e8f:    	movq   xmm6,rdi
  00e94:    	jmp    0xeab
  00e99:    	call   0xfffeb598
  00e9e:    	test   rax,rax
  00ea1:    	je     0x34b1c
  00ea7:    	movq   xmm6,xmm0
  00eab:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00eb0:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00eb4:    	mov    rax,QWORD PTR [rbp-0x18]
  00eb8:    	mov    rax,QWORD PTR [rax]
  00ebb:    	mov    rax,QWORD PTR [rax-0x28]
  00ebf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00080 %16 = 2: i32
  00ec6: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ed1:    	sub    rsp,0x40
  00ed5:    	movq   QWORD PTR [rsp],xmm2
  00eda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ee0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ee6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eec:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ef2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ef8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eff: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00f0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00f14:    	mov    rdi,rbx
  00f17:    	mov    rsi,r12
  00f1a: f6 	movabs r8,0x55f67b867748
  00f24: f6 	movabs rax,0x55f67a71b620
  00f2e:    	call   rax
  00f30:    	movq   xmm2,QWORD PTR [rsp]
  00f35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f47:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f4d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f53: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f5a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f61:    	add    rsp,0x40
  00f65: f6 	movabs r13,0x55f67b867750
  00f6f:    	test   rax,rax
  00f72:    	je     0xfffeb53f
  00f78: ff 	mov    QWORD PTR [r14-0xa8],rax
:00082 %14 = %15.call y()                   [Vec]
  00f7f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00f86: 00 	test   rdi,0x7
  00f8d:    	jne    0x34b7e
  00f93:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f97:    	jne    0x34b7e
  00f9d: 26 	cmp    DWORD PTR [rip+0xfffffffffffed91d],0x26        # 0xfffee8c1
  00fa4:    	jne    0x34b7e
  00faa:    	mov    esi,DWORD PTR [rip+0x15f0]        # 0x25a0
  00fb0:    	cmp    esi,0xffffffff
  00fb3:    	je     0x34be0
  00fb9:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbe:    	jne    0xfd7
  00fc4:    	cmp    esi,0x6
  00fc7:    	jge    0xfd7
  00fcd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd2:    	jmp    0x1041
  00fd7:    	sub    rsp,0x40
  00fdb:    	movq   QWORD PTR [rsp],xmm2
  00fe0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fe6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ff2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ff8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00fff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01006: f6 	movabs rax,0x55f67a69e160
  01010:    	call   rax
  01012:    	movq   xmm2,QWORD PTR [rsp]
  01017:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0101d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01023:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01029:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0102f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01036: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0103d:    	add    rsp,0x40
  01041: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  01048: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104f: 00 	test   rdi,0x1
  01056:    	jne    0x34c67
  0105c: 00 	test   rdi,0x2
  01063:    	je     0x109f
  01069:    	xorps  xmm6,xmm6
  0106c: 00 	movabs rax,0x8000000000000002
  01076:    	cmp    rdi,rax
  01079:    	je     0x10b1
  0107f:    	mov    rax,rdi
  01082:    	sar    rax,0x3f
  01086:    	add    rax,0x2
  0108a:    	and    rdi,0xfffffffffffffffc
  0108e:    	or     rdi,rax
  01091:    	rol    rdi,0x3d
  01095:    	movq   xmm6,rdi
  0109a:    	jmp    0x10b1
  0109f:    	call   0xfffeb598
  010a4:    	test   rax,rax
  010a7:    	je     0x34c67
  010ad:    	movq   xmm6,xmm0
  010b1:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010b5:    	movq   xmm10,xmm3
  010ba:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010bf:    	mov    rax,QWORD PTR [rbp-0x18]
  010c3:    	mov    rax,QWORD PTR [rax]
  010c6:    	mov    rax,QWORD PTR [rax-0x28]
  010ca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 0: i32
  010d1: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010dc:    	sub    rsp,0x40
  010e0:    	movq   QWORD PTR [rsp],xmm2
  010e5:    	movq   QWORD PTR [rsp+0x8],xmm3
  010eb:    	movq   QWORD PTR [rsp+0x10],xmm4
  010f1:    	movq   QWORD PTR [rsp+0x18],xmm5
  010f7:    	movq   QWORD PTR [rsp+0x20],xmm7
  010fd: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01104: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0110b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01112: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  01119: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  01120:    	mov    rdi,rbx
  01123:    	mov    rsi,r12
  01126: f6 	movabs r8,0x55f67b8677c8
  01130: f6 	movabs rax,0x55f67a71b620
  0113a:    	call   rax
  0113c:    	movq   xmm2,QWORD PTR [rsp]
  01141:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01147:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0114d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01153:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01159: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01160: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01167: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0116e:    	add    rsp,0x40
  01172: f6 	movabs r13,0x55f67b8677d0
  0117c:    	test   rax,rax
  0117f:    	je     0xfffeb53f
  01185: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %13 = %14.call z()                   [Vec]
  0118c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01193: 00 	test   rdi,0x7
  0119a:    	jne    0x34cc9
  011a0:    	cmp    DWORD PTR [rdi+0x4],0x28
  011a4:    	jne    0x34cc9
  011aa: 26 	cmp    DWORD PTR [rip+0xfffffffffffed710],0x26        # 0xfffee8c1
  011b1:    	jne    0x34cc9
  011b7:    	mov    esi,DWORD PTR [rip+0x13eb]        # 0x25a8
  011bd:    	cmp    esi,0xffffffff
  011c0:    	je     0x34d29
  011c6:    	cmp    WORD PTR [rdi+0x2],0x3
  011cb:    	jne    0x11e4
  011d1:    	cmp    esi,0x6
  011d4:    	jge    0x11e4
  011da:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011df:    	jmp    0x1250
  011e4:    	sub    rsp,0x40
  011e8:    	movq   QWORD PTR [rsp],xmm2
  011ed:    	movq   QWORD PTR [rsp+0x8],xmm4
  011f3:    	movq   QWORD PTR [rsp+0x10],xmm5
  011f9:    	movq   QWORD PTR [rsp+0x18],xmm7
  011ff: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01206: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0120d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01214: f6 	movabs rax,0x55f67a69e160
  0121e:    	call   rax
  01220:    	movq   xmm2,QWORD PTR [rsp]
  01225:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0122b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01231:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01237: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0123e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01245: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0124c:    	add    rsp,0x40
  01250: ff 	mov    QWORD PTR [r14-0x98],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  01257: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0125e: 00 	test   rdi,0x1
  01265:    	jne    0x34db2
  0126b: 00 	test   rdi,0x2
  01272:    	je     0x12ae
  01278:    	xorps  xmm3,xmm3
  0127b: 00 	movabs rax,0x8000000000000002
  01285:    	cmp    rdi,rax
  01288:    	je     0x12c0
  0128e:    	mov    rax,rdi
  01291:    	sar    rax,0x3f
  01295:    	add    rax,0x2
  01299:    	and    rdi,0xfffffffffffffffc
  0129d:    	or     rdi,rax
  012a0:    	rol    rdi,0x3d
  012a4:    	movq   xmm3,rdi
  012a9:    	jmp    0x12c0
  012ae:    	call   0xfffeb598
  012b3:    	test   rax,rax
  012b6:    	je     0x34db2
  012bc:    	movq   xmm3,xmm0
  012c0:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012c4:    	mov    rax,QWORD PTR [rbp-0x18]
  012c8:    	mov    rax,QWORD PTR [rax]
  012cb:    	mov    rax,QWORD PTR [rax-0x28]
  012cf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00095 %16 = 1: i32
  012d6: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012e1:    	sub    rsp,0x40
  012e5:    	movq   QWORD PTR [rsp],xmm2
  012ea:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f0:    	movq   QWORD PTR [rsp+0x10],xmm4
  012f6:    	movq   QWORD PTR [rsp+0x18],xmm5
  012fc:    	movq   QWORD PTR [rsp+0x20],xmm7
  01302: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01309: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01310: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01317: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0131e: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01325:    	mov    rdi,rbx
  01328:    	mov    rsi,r12
  0132b: f6 	movabs r8,0x55f67b867838
  01335: f6 	movabs rax,0x55f67a71b620
  0133f:    	call   rax
  01341:    	movq   xmm2,QWORD PTR [rsp]
  01346:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0134c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01352:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01358:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0135e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01365: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0136c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01373:    	add    rsp,0x40
  01377: f6 	movabs r13,0x55f67b867840
  01381:    	test   rax,rax
  01384:    	je     0xfffeb53f
  0138a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %14 = %15.call z()                   [Vec]
  01391: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01398: 00 	test   rdi,0x7
  0139f:    	jne    0x34e12
  013a5:    	cmp    DWORD PTR [rdi+0x4],0x28
  013a9:    	jne    0x34e12
  013af: 26 	cmp    DWORD PTR [rip+0xfffffffffffed50b],0x26        # 0xfffee8c1
  013b6:    	jne    0x34e12
  013bc:    	mov    esi,DWORD PTR [rip+0x11ee]        # 0x25b0
  013c2:    	cmp    esi,0xffffffff
  013c5:    	je     0x34e82
  013cb:    	cmp    WORD PTR [rdi+0x2],0x3
  013d0:    	jne    0x13e9
  013d6:    	cmp    esi,0x6
  013d9:    	jge    0x13e9
  013df:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013e4:    	jmp    0x1461
  013e9:    	sub    rsp,0x40
  013ed:    	movq   QWORD PTR [rsp],xmm2
  013f2:    	movq   QWORD PTR [rsp+0x8],xmm3
  013f8:    	movq   QWORD PTR [rsp+0x10],xmm4
  013fe:    	movq   QWORD PTR [rsp+0x18],xmm5
  01404:    	movq   QWORD PTR [rsp+0x20],xmm7
  0140a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01411: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01418: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0141f: f6 	movabs rax,0x55f67a69e160
  01429:    	call   rax
  0142b:    	movq   xmm2,QWORD PTR [rsp]
  01430:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01436:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0143c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01442:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01448: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0144f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01456: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0145d:    	add    rsp,0x40
  01461: ff 	mov    QWORD PTR [r14-0xa0],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  01468: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0146f: 00 	test   rdi,0x1
  01476:    	jne    0x34f17
  0147c: 00 	test   rdi,0x2
  01483:    	je     0x14bf
  01489:    	xorps  xmm6,xmm6
  0148c: 00 	movabs rax,0x8000000000000002
  01496:    	cmp    rdi,rax
  01499:    	je     0x14d1
  0149f:    	mov    rax,rdi
  014a2:    	sar    rax,0x3f
  014a6:    	add    rax,0x2
  014aa:    	and    rdi,0xfffffffffffffffc
  014ae:    	or     rdi,rax
  014b1:    	rol    rdi,0x3d
  014b5:    	movq   xmm6,rdi
  014ba:    	jmp    0x14d1
  014bf:    	call   0xfffeb598
  014c4:    	test   rax,rax
  014c7:    	je     0x34f17
  014cd:    	movq   xmm6,xmm0
  014d1:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014d6:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014da:    	mov    rax,QWORD PTR [rbp-0x18]
  014de:    	mov    rax,QWORD PTR [rax]
  014e1:    	mov    rax,QWORD PTR [rax-0x28]
  014e5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %16 = 2: i32
  014ec: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  014f7:    	sub    rsp,0x50
  014fb:    	movq   QWORD PTR [rsp],xmm2
  01500:    	movq   QWORD PTR [rsp+0x8],xmm3
  01506:    	movq   QWORD PTR [rsp+0x10],xmm4
  0150c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01512:    	movq   QWORD PTR [rsp+0x20],xmm6
  01518:    	movq   QWORD PTR [rsp+0x28],xmm7
  0151e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01525: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0152c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01533: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0153a: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01541:    	mov    rdi,rbx
  01544:    	mov    rsi,r12
  01547: f6 	movabs r8,0x55f67b8678b8
  01551: f6 	movabs rax,0x55f67a71b620
  0155b:    	call   rax
  0155d:    	movq   xmm2,QWORD PTR [rsp]
  01562:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0156e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01574:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0157a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01580: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01587: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0158e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01595:    	add    rsp,0x50
  01599: f6 	movabs r13,0x55f67b8678c0
  015a3:    	test   rax,rax
  015a6:    	je     0xfffeb53f
  015ac: ff 	mov    QWORD PTR [r14-0xa8],rax
:00105 %14 = %15.call z()                   [Vec]
  015b3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015ba: 00 	test   rdi,0x7
  015c1:    	jne    0x34f87
  015c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  015cb:    	jne    0x34f87
  015d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffed2e9],0x26        # 0xfffee8c1
  015d8:    	jne    0x34f87
  015de:    	mov    esi,DWORD PTR [rip+0xfd4]        # 0x25b8
  015e4:    	cmp    esi,0xffffffff
  015e7:    	je     0x34ff7
  015ed:    	cmp    WORD PTR [rdi+0x2],0x3
  015f2:    	jne    0x160b
  015f8:    	cmp    esi,0x6
  015fb:    	jge    0x160b
  01601:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01606:    	jmp    0x1683
  0160b:    	sub    rsp,0x40
  0160f:    	movq   QWORD PTR [rsp],xmm2
  01614:    	movq   QWORD PTR [rsp+0x8],xmm3
  0161a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01620:    	movq   QWORD PTR [rsp+0x18],xmm5
  01626:    	movq   QWORD PTR [rsp+0x20],xmm7
  0162c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01633: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0163a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01641: f6 	movabs rax,0x55f67a69e160
  0164b:    	call   rax
  0164d:    	movq   xmm2,QWORD PTR [rsp]
  01652:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01658:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0165e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01664:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0166a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01671: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01678: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0167f:    	add    rsp,0x40
  01683: ff 	mov    QWORD PTR [r14-0xa0],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0168a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01691: 00 	test   rdi,0x1
  01698:    	jne    0x3508c
  0169e: 00 	test   rdi,0x2
  016a5:    	je     0x16e1
  016ab:    	xorps  xmm6,xmm6
  016ae: 00 	movabs rax,0x8000000000000002
  016b8:    	cmp    rdi,rax
  016bb:    	je     0x16f3
  016c1:    	mov    rax,rdi
  016c4:    	sar    rax,0x3f
  016c8:    	add    rax,0x2
  016cc:    	and    rdi,0xfffffffffffffffc
  016d0:    	or     rdi,rax
  016d3:    	rol    rdi,0x3d
  016d7:    	movq   xmm6,rdi
  016dc:    	jmp    0x16f3
  016e1:    	call   0xfffeb598
  016e6:    	test   rax,rax
  016e9:    	je     0x3508c
  016ef:    	movq   xmm6,xmm0
  016f3:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  016f7:    	movq   xmm11,xmm3
  016fc:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01701: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed1c4]        # 0xfffee8cc
  01708: 00 	cmp    rax,QWORD PTR [rip+0xebd]        # 0x25cc
  0170f:    	jne    0x350fc
  01715: 00 	mov    rax,QWORD PTR [rip+0xea0]        # 0x25bc
  0171c: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01723:    	movq   xmm0,xmm9
  01728:    	call   0xfffeb6bc
  0172d: ff 	mov    QWORD PTR [r14-0xa0],rax
  01734:    	movq   xmm0,xmm10
  01739:    	call   0xfffeb6bc
  0173e: ff 	mov    QWORD PTR [r14-0xa8],rax
  01745:    	movq   xmm0,xmm11
  0174a:    	call   0xfffeb6bc
  0174f: ff 	mov    QWORD PTR [r14-0xb0],rax
  01756: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0175d: 00 	test   rdi,0x7
  01764:    	jne    0x351bc
  0176a:    	cmp    DWORD PTR [rdi+0x4],0x29
  0176e:    	jne    0x351bc
  01774: 26 	cmp    DWORD PTR [rip+0xfffffffffffed146],0x26        # 0xfffee8c1
  0177b:    	jne    0x351bc
  01781: 00 	mov    r9,0x0
  01788:    	sub    rsp,0x40
  0178c:    	movq   QWORD PTR [rsp],xmm2
  01791:    	movq   QWORD PTR [rsp+0x8],xmm4
  01797:    	movq   QWORD PTR [rsp+0x10],xmm5
  0179d:    	movq   QWORD PTR [rsp+0x18],xmm7
  017a3: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017aa: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017b1: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017b8: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017bf:    	mov    rdx,rdi
  017c2:    	mov    QWORD PTR [rsp-0x40],rcx
  017c7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017d0: ff 	lea    rcx,[r14-0xa0]
  017d7: 00 	mov    r8,0x3
  017de:    	mov    rsi,QWORD PTR [rbx]
  017e1:    	mov    QWORD PTR [rsp-0x18],rsi
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rbx],rsi
  017ee:    	lea    r14,[rsp-0x10]
  017f3:    	mov    QWORD PTR [rsp-0x20],r14
  017f8:    	call   0x3522a
  017fd:    	lea    r14,[rbp-0x8]
  01801:    	mov    QWORD PTR [rbx],r14
  01804:    	mov    r14,QWORD PTR [rbp-0x10]
  01808:    	movq   xmm2,QWORD PTR [rsp]
  0180d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01813:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01819:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0181f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01826: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0182d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01834: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183b:    	add    rsp,0x40
  0183f: f6 	movabs r13,0x55f67b867970
  01849:    	test   rax,rax
  0184c:    	je     0xfffeb53f
  01852:    	mov    QWORD PTR [r14-0x80],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01856: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed06f]        # 0xfffee8cc
  0185d: 00 	cmp    rax,QWORD PTR [rip+0xd88]        # 0x25ec
  01864:    	jne    0x3525c
  0186a: 00 	mov    rax,QWORD PTR [rip+0xd6b]        # 0x25dc
  01871: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = dynvar(2, %7)
  01878:    	mov    rax,QWORD PTR [rbp-0x18]
  0187c:    	mov    rax,QWORD PTR [rax]
  0187f:    	mov    rax,QWORD PTR [rax-0x50]
  01883: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %10
  0188a:    	mov    rax,QWORD PTR [r14-0x80]
  0188e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01895: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0189c: 00 	test   rdi,0x7
  018a3:    	jne    0x35310
  018a9:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018ad:    	jne    0x35310
  018b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffed007],0x26        # 0xfffee8c1
  018ba:    	jne    0x35310
  018c0: 00 	mov    r9,0x0
  018c7:    	sub    rsp,0x40
  018cb:    	movq   QWORD PTR [rsp],xmm2
  018d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  018dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018e9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018f7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  018fe:    	mov    rdx,rdi
  01901:    	mov    QWORD PTR [rsp-0x40],rcx
  01906: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0190f: ff 	lea    rcx,[r14-0xa0]
  01916: 00 	mov    r8,0x2
  0191d:    	mov    rsi,QWORD PTR [rbx]
  01920:    	mov    QWORD PTR [rsp-0x18],rsi
  01925:    	lea    rsi,[rsp-0x18]
  0192a:    	mov    QWORD PTR [rbx],rsi
  0192d:    	lea    r14,[rsp-0x10]
  01932:    	mov    QWORD PTR [rsp-0x20],r14
  01937:    	call   0x3537e
  0193c:    	lea    r14,[rbp-0x8]
  01940:    	mov    QWORD PTR [rbx],r14
  01943:    	mov    r14,QWORD PTR [rbp-0x10]
  01947:    	movq   xmm2,QWORD PTR [rsp]
  0194c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01952:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01958:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0195e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01965: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0196c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01973: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0197a:    	add    rsp,0x40
  0197e: f6 	movabs r13,0x55f67b8679d0
  01988:    	test   rax,rax
  0198b:    	je     0xfffeb53f
  01991: ff 	mov    QWORD PTR [r14-0x88],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01998: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffecf2d]        # 0xfffee8cc
  0199f: 00 	cmp    rax,QWORD PTR [rip+0xc66]        # 0x260c
  019a6:    	jne    0x353b0
  019ac: 00 	mov    rax,QWORD PTR [rip+0xc49]        # 0x25fc
  019b3: ff 	mov    QWORD PTR [r14-0x98],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019ba: ff 	mov    rdi,QWORD PTR [r14-0x98]
  019c1: 00 	test   rdi,0x7
  019c8:    	jne    0x35464
  019ce:    	cmp    DWORD PTR [rdi+0x4],0x31
  019d2:    	jne    0x35464
  019d8: 26 	cmp    DWORD PTR [rip+0xfffffffffffecee2],0x26        # 0xfffee8c1
  019df:    	jne    0x35464
  019e5: 00 	mov    r9,0x0
  019ec:    	sub    rsp,0x40
  019f0:    	movq   QWORD PTR [rsp],xmm2
  019f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a01:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a07: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a0e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a15: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a1c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a23:    	mov    rdx,rdi
  01a26:    	mov    QWORD PTR [rsp-0x40],rcx
  01a2b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a34: ff 	lea    rcx,[r14-0xa0]
  01a3b: 00 	mov    r8,0x0
  01a42:    	mov    rsi,QWORD PTR [rbx]
  01a45:    	mov    QWORD PTR [rsp-0x18],rsi
  01a4a:    	lea    rsi,[rsp-0x18]
  01a4f:    	mov    QWORD PTR [rbx],rsi
  01a52:    	lea    r14,[rsp-0x10]
  01a57:    	mov    QWORD PTR [rsp-0x20],r14
  01a5c:    	call   0x354d2
  01a61:    	lea    r14,[rbp-0x8]
  01a65:    	mov    QWORD PTR [rbx],r14
  01a68:    	mov    r14,QWORD PTR [rbp-0x10]
  01a6c:    	movq   xmm2,QWORD PTR [rsp]
  01a71:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a77:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a7d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a83: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a8a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a91: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a98: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a9f:    	add    rsp,0x40
  01aa3: f6 	movabs r13,0x55f67b867a10
  01aad:    	test   rax,rax
  01ab0:    	je     0xfffeb53f
  01ab6: ff 	mov    QWORD PTR [r14-0x90],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01abd:    	mov    rdi,QWORD PTR [rbp-0x30]
  01ac1:    	mov    rax,QWORD PTR [rdi+0x10]
  01ac5: ff 	mov    QWORD PTR [r14-0x98],rax
:00128 %14 = 0: i32
  01acc: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ad7:    	sub    rsp,0x40
  01adb:    	movq   QWORD PTR [rsp],xmm2
  01ae0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ae6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01aec:    	movq   QWORD PTR [rsp+0x18],xmm7
  01af2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01af9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b00: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b07: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b0e: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01b15: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01b1c:    	mov    rdi,rbx
  01b1f:    	mov    rsi,r12
  01b22: f6 	movabs r8,0x55f67b867a48
  01b2c: f6 	movabs rax,0x55f67a71b620
  01b36:    	call   rax
  01b38:    	movq   xmm2,QWORD PTR [rsp]
  01b3d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b43:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b49:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b4f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b56: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b5d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b64: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6b:    	add    rsp,0x40
  01b6f: f6 	movabs r13,0x55f67b867a50
  01b79:    	test   rax,rax
  01b7c:    	je     0xfffeb53f
  01b82: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01b89: ff 	mov    rax,QWORD PTR [r14-0x88]
  01b90: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01b97: ff 	mov    rax,QWORD PTR [r14-0x90]
  01b9e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01ba5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bac: 00 	test   rdi,0x7
  01bb3:    	jne    0x35504
  01bb9:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01bbd:    	jne    0x35504
  01bc3: 26 	cmp    DWORD PTR [rip+0xfffffffffffeccf7],0x26        # 0xfffee8c1
  01bca:    	jne    0x35504
  01bd0:    	sub    rsp,0x40
  01bd4:    	movq   QWORD PTR [rsp],xmm2
  01bd9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bdf:    	movq   QWORD PTR [rsp+0x10],xmm5
  01be5:    	movq   QWORD PTR [rsp+0x18],xmm7
  01beb: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bf2: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bf9: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c00: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c07: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c10: ff 	mov    rax,QWORD PTR [r14-0x98]
  01c17:    	mov    QWORD PTR [rsp-0x40],rax
  01c1c: 00 	mov    rdi,0x2
  01c23:    	lea    r8,[rsp-0x48]
  01c28: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01c2f:    	mov    QWORD PTR [r8],rax
  01c32:    	sub    r8,0x8
  01c36: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01c3d:    	mov    QWORD PTR [r8],rax
  01c40:    	sub    r8,0x8
  01c44: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c4d: 10 	movabs rax,0x1001000000046
  01c57:    	mov    QWORD PTR [rsp-0x30],rax
  01c5c: f6 	movabs r13,0x55f67b86e960
  01c66:    	mov    rsi,QWORD PTR [rbx]
  01c69:    	mov    QWORD PTR [rsp-0x18],rsi
  01c6e:    	lea    rsi,[rsp-0x18]
  01c73:    	mov    QWORD PTR [rbx],rsi
  01c76:    	lea    r14,[rsp-0x10]
  01c7b:    	mov    QWORD PTR [rsp-0x20],r14
  01c80:    	call   0xfffef4d0
  01c85:    	lea    r14,[rbp-0x8]
  01c89:    	mov    QWORD PTR [rbx],r14
  01c8c:    	mov    r14,QWORD PTR [rbp-0x10]
  01c90:    	movq   xmm2,QWORD PTR [rsp]
  01c95:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c9b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ca1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ca7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01cae: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01cb5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01cbc: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01cc3:    	add    rsp,0x40
  01cc7: f6 	movabs r13,0x55f67b867a90
  01cd1:    	test   rax,rax
  01cd4:    	je     0xfffeb53f
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cda:    	mov    rdi,QWORD PTR [rbp-0x30]
  01cde:    	mov    rax,QWORD PTR [rdi+0x10]
  01ce2: ff 	mov    QWORD PTR [r14-0x98],rax
:00136 %14 = 1: i32
  01ce9: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cf4:    	sub    rsp,0x40
  01cf8:    	movq   QWORD PTR [rsp],xmm2
  01cfd:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d03:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d09:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d16: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d1d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d24: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d2b: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01d32: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01d39:    	mov    rdi,rbx
  01d3c:    	mov    rsi,r12
  01d3f: f6 	movabs r8,0x55f67b867ac8
  01d49: f6 	movabs rax,0x55f67a71b620
  01d53:    	call   rax
  01d55:    	movq   xmm2,QWORD PTR [rsp]
  01d5a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d60:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d66:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d6c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d73: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d7a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d81: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d88:    	add    rsp,0x40
  01d8c: f6 	movabs r13,0x55f67b867ad0
  01d96:    	test   rax,rax
  01d99:    	je     0xfffeb53f
  01d9f: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = %11
  01da6: ff 	mov    rax,QWORD PTR [r14-0x88]
  01dad: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %15 = %12
  01db4: ff 	mov    rax,QWORD PTR [r14-0x90]
  01dbb: ff 	mov    QWORD PTR [r14-0xa8],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01dc2: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01dc9: 00 	test   rdi,0x7
  01dd0:    	jne    0x35572
  01dd6:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01dda:    	jne    0x35572
  01de0: 26 	cmp    DWORD PTR [rip+0xfffffffffffecada],0x26        # 0xfffee8c1
  01de7:    	jne    0x35572
  01ded:    	sub    rsp,0x40
  01df1:    	movq   QWORD PTR [rsp],xmm2
  01df6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dfc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e02:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e08: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e0f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e16: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e1d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e24: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01e2d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01e34:    	mov    QWORD PTR [rsp-0x40],rax
  01e39: 00 	mov    rdi,0x2
  01e40:    	lea    r8,[rsp-0x48]
  01e45: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01e4c:    	mov    QWORD PTR [r8],rax
  01e4f:    	sub    r8,0x8
  01e53: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e5a:    	mov    QWORD PTR [r8],rax
  01e5d:    	sub    r8,0x8
  01e61: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e6a: 10 	movabs rax,0x1001000000046
  01e74:    	mov    QWORD PTR [rsp-0x30],rax
  01e79: f6 	movabs r13,0x55f67b86e960
  01e83:    	mov    rsi,QWORD PTR [rbx]
  01e86:    	mov    QWORD PTR [rsp-0x18],rsi
  01e8b:    	lea    rsi,[rsp-0x18]
  01e90:    	mov    QWORD PTR [rbx],rsi
  01e93:    	lea    r14,[rsp-0x10]
  01e98:    	mov    QWORD PTR [rsp-0x20],r14
  01e9d:    	call   0xfffef4d0
  01ea2:    	lea    r14,[rbp-0x8]
  01ea6:    	mov    QWORD PTR [rbx],r14
  01ea9:    	mov    r14,QWORD PTR [rbp-0x10]
  01ead:    	movq   xmm2,QWORD PTR [rsp]
  01eb2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01eb8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ebe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ec4: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ecb: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ed2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01ed9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ee0:    	add    rsp,0x40
  01ee4: f6 	movabs r13,0x55f67b867b10
  01eee:    	test   rax,rax
  01ef1:    	je     0xfffeb53f
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ef7:    	mov    rdi,QWORD PTR [rbp-0x30]
  01efb:    	mov    rax,QWORD PTR [rdi+0x10]
  01eff: ff 	mov    QWORD PTR [r14-0x98],rax
:00144 %14 = 2: i32
  01f06: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01f11:    	sub    rsp,0x40
  01f15:    	movq   QWORD PTR [rsp],xmm2
  01f1a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f20:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f26:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f2c: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f33: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f3a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f41: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f48: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01f4f: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01f56:    	mov    rdi,rbx
  01f59:    	mov    rsi,r12
  01f5c: f6 	movabs r8,0x55f67b867b48
  01f66: f6 	movabs rax,0x55f67a71b620
  01f70:    	call   rax
  01f72:    	movq   xmm2,QWORD PTR [rsp]
  01f77:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f7d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f83:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f89: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f90: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f97: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f9e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fa5:    	add    rsp,0x40
  01fa9: f6 	movabs r13,0x55f67b867b50
  01fb3:    	test   rax,rax
  01fb6:    	je     0xfffeb53f
  01fbc: ff 	mov    QWORD PTR [r14-0x98],rax
:00146 %14 = %11
  01fc3: ff 	mov    rax,QWORD PTR [r14-0x88]
  01fca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 %15 = %12
  01fd1: ff 	mov    rax,QWORD PTR [r14-0x90]
  01fd8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fdf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01fe6: 00 	test   rdi,0x7
  01fed:    	jne    0x355e0
  01ff3:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ff7:    	jne    0x355e0
  01ffd: 26 	cmp    DWORD PTR [rip+0xfffffffffffec8bd],0x26        # 0xfffee8c1
  02004:    	jne    0x355e0
  0200a:    	sub    rsp,0x40
  0200e:    	movq   QWORD PTR [rsp],xmm2
  02013:    	movq   QWORD PTR [rsp+0x8],xmm4
  02019:    	movq   QWORD PTR [rsp+0x10],xmm5
  0201f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02025: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0202c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02033: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0203a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02041: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0204a: ff 	mov    rax,QWORD PTR [r14-0x98]
  02051:    	mov    QWORD PTR [rsp-0x40],rax
  02056: 00 	mov    rdi,0x2
  0205d:    	lea    r8,[rsp-0x48]
  02062: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02069:    	mov    QWORD PTR [r8],rax
  0206c:    	sub    r8,0x8
  02070: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02077:    	mov    QWORD PTR [r8],rax
  0207a:    	sub    r8,0x8
  0207e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02087: 10 	movabs rax,0x1001000000046
  02091:    	mov    QWORD PTR [rsp-0x30],rax
  02096: f6 	movabs r13,0x55f67b86e960
  020a0:    	mov    rsi,QWORD PTR [rbx]
  020a3:    	mov    QWORD PTR [rsp-0x18],rsi
  020a8:    	lea    rsi,[rsp-0x18]
  020ad:    	mov    QWORD PTR [rbx],rsi
  020b0:    	lea    r14,[rsp-0x10]
  020b5:    	mov    QWORD PTR [rsp-0x20],r14
  020ba:    	call   0xfffef4d0
  020bf:    	lea    r14,[rbp-0x8]
  020c3:    	mov    QWORD PTR [rbx],r14
  020c6:    	mov    r14,QWORD PTR [rbp-0x10]
  020ca:    	movq   xmm2,QWORD PTR [rsp]
  020cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020e1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020e8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020ef: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020f6: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020fd:    	add    rsp,0x40
  02101: f6 	movabs r13,0x55f67b867b90
  0210b:    	test   rax,rax
  0210e:    	je     0xfffeb53f
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  02114:    	mov    rdi,QWORD PTR [rbp-0x30]
  02118:    	mov    rax,QWORD PTR [rdi+0x18]
  0211c: ff 	mov    QWORD PTR [r14-0x98],rax
:00152 %14 = %11
  02123: ff 	mov    rax,QWORD PTR [r14-0x88]
  0212a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00153 %15 = %12
  02131: ff 	mov    rax,QWORD PTR [r14-0x90]
  02138: ff 	mov    QWORD PTR [r14-0xa8],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  0213f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02146: 00 	test   rdi,0x7
  0214d:    	jne    0x3564e
  02153:    	cmp    DWORD PTR [rdi+0x4],0x2c
  02157:    	jne    0x3564e
  0215d: 26 	cmp    DWORD PTR [rip+0xfffffffffffec75d],0x26        # 0xfffee8c1
  02164:    	jne    0x3564e
  0216a:    	sub    rsp,0x40
  0216e:    	movq   QWORD PTR [rsp],xmm2
  02173:    	movq   QWORD PTR [rsp+0x8],xmm4
  02179:    	movq   QWORD PTR [rsp+0x10],xmm5
  0217f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02185: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0218c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02193: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0219a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  021a1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  021aa: ff 	mov    rax,QWORD PTR [r14-0x98]
  021b1:    	mov    QWORD PTR [rsp-0x40],rax
  021b6: 00 	mov    rdi,0x2
  021bd:    	lea    r8,[rsp-0x48]
  021c2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  021c9:    	mov    QWORD PTR [r8],rax
  021cc:    	sub    r8,0x8
  021d0: ff 	mov    rax,QWORD PTR [r14-0xa8]
  021d7:    	mov    QWORD PTR [r8],rax
  021da:    	sub    r8,0x8
  021de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  021e7: 0e 	movabs rax,0x1000e00000048
  021f1:    	mov    QWORD PTR [rsp-0x30],rax
  021f6: f6 	movabs r13,0x55f67b870800
  02200:    	mov    rsi,QWORD PTR [rbx]
  02203:    	mov    QWORD PTR [rsp-0x18],rsi
  02208:    	lea    rsi,[rsp-0x18]
  0220d:    	mov    QWORD PTR [rbx],rsi
  02210:    	lea    r14,[rsp-0x10]
  02215:    	mov    QWORD PTR [rsp-0x20],r14
  0221a:    	call   0xfffefaa8
  0221f:    	lea    r14,[rbp-0x8]
  02223:    	mov    QWORD PTR [rbx],r14
  02226:    	mov    r14,QWORD PTR [rbp-0x10]
  0222a:    	movq   xmm2,QWORD PTR [rsp]
  0222f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02235:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0223b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02241: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02248: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0224f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02256: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0225d:    	add    rsp,0x40
  02261: f6 	movabs r13,0x55f67b867bf0
  0226b:    	test   rax,rax
  0226e:    	je     0xfffeb53f
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  02274: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0227b: 00 	test   rdi,0x7
  02282:    	jne    0x356bc
  02288:    	cmp    DWORD PTR [rdi+0x4],0x30
  0228c:    	jne    0x356bc
  02292: 26 	cmp    DWORD PTR [rip+0xfffffffffffec628],0x26        # 0xfffee8c1
  02299:    	jne    0x356bc
  0229f:    	mov    esi,DWORD PTR [rip+0x373]        # 0x2618
  022a5:    	cmp    esi,0xffffffff
  022a8:    	je     0x3572a
  022ae:    	cmp    WORD PTR [rdi+0x2],0x3
  022b3:    	jne    0x22cc
  022b9:    	cmp    esi,0x6
  022bc:    	jge    0x22cc
  022c2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  022c7:    	jmp    0x2346
  022cc:    	sub    rsp,0x40
  022d0:    	movq   QWORD PTR [rsp],xmm2
  022d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  022db:    	movq   QWORD PTR [rsp+0x10],xmm5
  022e1:    	movq   QWORD PTR [rsp+0x18],xmm7
  022e7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  022ee: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  022f5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022fc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02303: f6 	movabs rax,0x55f67a69e160
  0230d:    	call   rax
  0230f:    	movq   xmm2,QWORD PTR [rsp]
  02314:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0231a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02320:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02326: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0232d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02334: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0233b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02342:    	add    rsp,0x40
  02346: ff 	mov    QWORD PTR [r14-0x98],rax
:00158 
:00160 condnotbr %13 =>:00166
  0234d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02354:    	or     rax,0x10
  02358:    	cmp    rax,0x14
  0235c:    	je     0x246f
:00161 %13 = dynvar(2, %6)
  02362:    	mov    rax,QWORD PTR [rbp-0x18]
  02366:    	mov    rax,QWORD PTR [rax]
  02369:    	mov    rax,QWORD PTR [rax-0x48]
  0236d: ff 	mov    QWORD PTR [r14-0x98],rax
:00162 %14 = literal[1.0]
  02374: 00 	movq   xmm3,QWORD PTR [rip+0x2a0]        # 0x261c
  0237c: 00 	movabs rax,0xff80000000000002
  02386: ff 	mov    QWORD PTR [r14-0xa0],rax
:00163 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0238d: 01 	sub    DWORD PTR [rip+0x290],0x1        # 0x2624
  02394:    	je     0x3582f
  0239a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  023a1: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  023a8:    	sub    rsp,0x50
  023ac:    	movq   QWORD PTR [rsp],xmm2
  023b1:    	movq   QWORD PTR [rsp+0x8],xmm3
  023b7:    	movq   QWORD PTR [rsp+0x10],xmm4
  023bd:    	movq   QWORD PTR [rsp+0x18],xmm5
  023c3:    	movq   QWORD PTR [rsp+0x20],xmm7
  023c9: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  023d0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  023d7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  023de: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  023e5:    	mov    rdx,rdi
  023e8:    	mov    rcx,rsi
  023eb:    	mov    rdi,rbx
  023ee:    	mov    rsi,r12
  023f1: f6 	movabs rax,0x55f67a6ddf30
  023fb:    	call   rax
  023fd:    	movq   xmm2,QWORD PTR [rsp]
  02402:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02408:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0240e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02414:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0241a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  02421: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  02428: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0242f: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  02436:    	add    rsp,0x50
  0243a: f6 	movabs r13,0x55f67b867c70
  02444:    	test   rax,rax
  02447:    	je     0xfffeb53f
  0244d: ff 	mov    QWORD PTR [r14-0x98],rax
:00164 dynvar(2, %6) = %13
  02454:    	mov    rax,QWORD PTR [rbp-0x18]
  02458:    	mov    rax,QWORD PTR [rax]
  0245b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02462:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  02466: ff 	mov    rax,QWORD PTR [r14-0x98]
  0246d:    	leave  
  0246e:    	ret    
:00166 %13 = literal[0.0]
  0246f: 00 	movq   xmm3,QWORD PTR [rip+0x1b5]        # 0x262c
  02477: 00 	movabs rax,0x8000000000000002
  02481: ff 	mov    QWORD PTR [r14-0x98],rax
:00167 ret %13
  02488: ff 	mov    rax,QWORD PTR [r14-0x98]
  0248f:    	leave  
  02490:    	ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55f67b858040
<== finished compile. elapsed:157.6µs
offset:Pos(94504) code: 8972 bytes  data: 360 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0: ff 	mov    QWORD PTR [r14-0xc8],rax
  000a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  000ab: 00 	test   rdi,0x7
  000b2:    	jne    0x33228
  000b8:    	cmp    DWORD PTR [rdi+0x4],0x32
  000bc:    	jne    0x33228
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000c2:    	mov    rax,QWORD PTR [rbp-0x18]
  000c6:    	mov    rax,QWORD PTR [rax]
  000c9:    	mov    rax,QWORD PTR [rax]
  000cc:    	mov    rax,QWORD PTR [rax]
  000cf:    	mov    rax,QWORD PTR [rax-0x38]
  000d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000e1: 00 	test   rdi,0x1
  000e8:    	je     0x33237
  000ee:    	add    rdi,0x2
  000f2:    	jo     0x33237
  000f8: ff 	mov    QWORD PTR [r14-0xa0],rdi
:00003 dynvar(4, %4) = %14
  000ff:    	mov    rax,QWORD PTR [rbp-0x18]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax]
  0010c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00113:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  00117:    	mov    rax,QWORD PTR [rbp-0x18]
  0011b:    	mov    rax,QWORD PTR [rax]
  0011e:    	mov    rax,QWORD PTR [rax]
  00121:    	mov    rax,QWORD PTR [rax]
  00124:    	mov    rax,QWORD PTR [rax-0x20]
  00128: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %2 = %14.call to_f()                 [Integer]
  0012f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00136: 00 	test   rdi,0x1
  0013d:    	je     0x33246
  00143: 26 	cmp    DWORD PTR [rip+0xfffffffffffec143],0x26        # 0xfffec28d
  0014a:    	jne    0x33246
  00150:    	sar    rdi,1
  00153:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  00158:    	mov    rax,QWORD PTR [rbp-0x18]
  0015c:    	mov    rax,QWORD PTR [rax]
  0015f:    	mov    rax,QWORD PTR [rax]
  00162:    	mov    rax,QWORD PTR [rax]
  00165:    	mov    rax,QWORD PTR [rax-0x28]
  00169: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00170: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00177: 00 	test   rdi,0x1
  0017e:    	je     0x33255
  00184: 26 	cmp    DWORD PTR [rip+0xfffffffffffec102],0x26        # 0xfffec28d
  0018b:    	jne    0x33255
  00191:    	sar    rdi,1
  00194:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  00199:    	mov    rax,QWORD PTR [rbp-0x18]
  0019d:    	mov    rax,QWORD PTR [rax]
  001a0:    	mov    rax,QWORD PTR [rax-0x20]
  001a4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001ab: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001b2: 00 	test   rdi,0x1
  001b9:    	je     0x33271
  001bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffec0c7],0x26        # 0xfffec28d
  001c6:    	jne    0x33271
  001cc:    	sar    rdi,1
  001cf:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001d4:    	mov    rax,QWORD PTR [rbp-0x18]
  001d8:    	mov    rax,QWORD PTR [rax]
  001db:    	mov    rax,QWORD PTR [rax]
  001de:    	mov    rax,QWORD PTR [rax-0x20]
  001e2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001e9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f0: 00 	test   rdi,0x1
  001f7:    	je     0x3329a
  001fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffec089],0x26        # 0xfffec28d
  00204:    	jne    0x3329a
  0020a:    	sar    rdi,1
  0020d:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00212:    	mov    rdi,QWORD PTR [r14-0x38]
  00216: 00 	test   rdi,0x1
  0021d:    	je     0x332d0
  00223: 26 	cmp    DWORD PTR [rip+0xfffffffffffec063],0x26        # 0xfffec28d
  0022a:    	jne    0x332d0
  00230:    	sar    rdi,1
  00233:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  00238:    	mov    rax,QWORD PTR [rbp-0x18]
  0023c:    	mov    rax,QWORD PTR [rax-0x20]
  00240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00024 %7 = %14.call to_f()                 [Integer]
  00247: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0024e: 00 	test   rdi,0x1
  00255:    	je     0x33313
  0025b: 26 	cmp    DWORD PTR [rip+0xfffffffffffec02b],0x26        # 0xfffec28d
  00262:    	jne    0x33313
  00268:    	sar    rdi,1
  0026b:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00270:    	mov    rax,QWORD PTR [rbp-0x18]
  00274:    	mov    rax,QWORD PTR [rax]
  00277:    	mov    rax,QWORD PTR [rax]
  0027a:    	mov    rax,QWORD PTR [rax]
  0027d:    	mov    rax,QWORD PTR [rax-0x40]
  00281: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %6 / %14                       [Float][Float]
  00288: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028f: 00 	test   rdi,0x1
  00296:    	jne    0x33363
  0029c: 00 	test   rdi,0x2
  002a3:    	je     0x2e0
  002a9:    	xorps  xmm8,xmm8
  002ad: 00 	movabs rax,0x8000000000000002
  002b7:    	cmp    rdi,rax
  002ba:    	je     0x2f3
  002c0:    	mov    rax,rdi
  002c3:    	sar    rax,0x3f
  002c7:    	add    rax,0x2
  002cb:    	and    rdi,0xfffffffffffffffc
  002cf:    	or     rdi,rax
  002d2:    	rol    rdi,0x3d
  002d6:    	movq   xmm8,rdi
  002db:    	jmp    0x2f3
  002e0:    	call   0xfffe8f64
  002e5:    	test   rax,rax
  002e8:    	je     0x33363
  002ee:    	movq   xmm8,xmm0
  002f3:    	movq   rax,xmm8
  002f8:    	test   rax,rax
  002fb:    	je     0xfffe8f30
  00301:    	movq   xmm0,xmm6
  00305:    	divsd  xmm0,xmm8
  0030a:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  0030f:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00314: 1f 	movq   xmm9,QWORD PTR [rip+0x1ffb]        # 0x2318
  0031d: 00 	mov    rax,0x2
  00324: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0032b:    	movq   rax,xmm9
  00330:    	test   rax,rax
  00333:    	je     0xfffe8f30
  00339:    	movq   xmm0,xmm2
  0033d:    	divsd  xmm0,xmm9
  00342:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00347:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0034c: 1f 	movq   xmm9,QWORD PTR [rip+0x1fd3]        # 0x2328
  00355: 00 	mov    rax,0x2
  0035c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00363:    	movq   rax,xmm9
  00368:    	test   rax,rax
  0036b:    	je     0xfffe8f30
  00371:    	movq   xmm0,xmm2
  00375:    	divsd  xmm0,xmm9
  0037a:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  0037f:    	movq   xmm10,xmm8
  00384:    	movq   rax,xmm9
  00389:    	test   rax,rax
  0038c:    	je     0xfffe8f30
  00392:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  00397:    	mov    rax,QWORD PTR [rbp-0x18]
  0039b:    	mov    rax,QWORD PTR [rax]
  0039e:    	mov    rax,QWORD PTR [rax]
  003a1:    	mov    rax,QWORD PTR [rax]
  003a4:    	mov    rax,QWORD PTR [rax-0x40]
  003a8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003af: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x333c0
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x407
  003d0:    	xorps  xmm8,xmm8
  003d4: 00 	movabs rax,0x8000000000000002
  003de:    	cmp    rdi,rax
  003e1:    	je     0x41a
  003e7:    	mov    rax,rdi
  003ea:    	sar    rax,0x3f
  003ee:    	add    rax,0x2
  003f2:    	and    rdi,0xfffffffffffffffc
  003f6:    	or     rdi,rax
  003f9:    	rol    rdi,0x3d
  003fd:    	movq   xmm8,rdi
  00402:    	jmp    0x41a
  00407:    	call   0xfffe8f64
  0040c:    	test   rax,rax
  0040f:    	je     0x333c0
  00415:    	movq   xmm8,xmm0
  0041a:    	movq   rax,xmm8
  0041f:    	test   rax,rax
  00422:    	je     0xfffe8f30
  00428:    	movq   xmm0,xmm7
  0042c:    	divsd  xmm0,xmm8
  00431:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00436:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0043b: 1e 	movq   xmm9,QWORD PTR [rip+0x1ef4]        # 0x2338
  00444: 00 	mov    rax,0x2
  0044b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00452:    	movq   rax,xmm9
  00457:    	test   rax,rax
  0045a:    	je     0xfffe8f30
  00460:    	movq   xmm0,xmm3
  00464:    	divsd  xmm0,xmm9
  00469:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  0046e:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00473: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1ecd]        # 0x2348
:00043 %15 = literal[2.0]
  0047b: 1e 	movq   xmm9,QWORD PTR [rip+0x1ed4]        # 0x2358
  00484: 00 	mov    rax,0x2
  0048b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00492:    	movq   rax,xmm9
  00497:    	test   rax,rax
  0049a:    	je     0xfffe8f30
  004a0:    	movq   xmm0,xmm3
  004a4:    	divsd  xmm0,xmm9
  004a9:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004ae:    	movq   xmm11,xmm8
  004b3:    	movq   rax,xmm9
  004b8:    	test   rax,rax
  004bb:    	je     0xfffe8f30
  004c1:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebdcb]        # 0xfffec298
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1ea4]        # 0x2378
  004d4:    	jne    0x3343c
  004da: 00 	mov    rax,QWORD PTR [rip+0x1e87]        # 0x2368
  004e1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004e8: 1e 	movq   xmm9,QWORD PTR [rip+0x1e97]        # 0x2388
  004f1: 00 	movabs rax,0xff80000000000006
  004fb: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00502:    	movq   xmm0,xmm10
  00507:    	call   0xfffe9088
  0050c: ff 	mov    QWORD PTR [r14-0xb0],rax
  00513:    	movq   xmm0,xmm11
  00518:    	call   0xfffe9088
  0051d: ff 	mov    QWORD PTR [r14-0xb8],rax
  00524: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0052b: 00 	test   rdi,0x7
  00532:    	jne    0x334fa
  00538:    	cmp    DWORD PTR [rdi+0x4],0x29
  0053c:    	jne    0x334fa
  00542: 26 	cmp    DWORD PTR [rip+0xfffffffffffebd44],0x26        # 0xfffec28d
  00549:    	jne    0x334fa
  0054f: 00 	mov    r9,0x0
  00556:    	sub    rsp,0x50
  0055a:    	movq   QWORD PTR [rsp],xmm2
  0055f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00565:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00571:    	movq   QWORD PTR [rsp+0x20],xmm6
  00577:    	movq   QWORD PTR [rsp+0x28],xmm7
  0057d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00584: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0058b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00592:    	mov    rdx,rdi
  00595:    	mov    QWORD PTR [rsp-0x40],rcx
  0059a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  005a3: ff 	lea    rcx,[r14-0xb0]
  005aa: 00 	mov    r8,0x3
  005b1:    	mov    rsi,QWORD PTR [rbx]
  005b4:    	mov    QWORD PTR [rsp-0x18],rsi
  005b9:    	lea    rsi,[rsp-0x18]
  005be:    	mov    QWORD PTR [rbx],rsi
  005c1:    	lea    r14,[rsp-0x10]
  005c6:    	mov    QWORD PTR [rsp-0x20],r14
  005cb:    	call   0x33573
  005d0:    	lea    r14,[rbp-0x8]
  005d4:    	mov    QWORD PTR [rbx],r14
  005d7:    	mov    r14,QWORD PTR [rbp-0x10]
  005db:    	movq   xmm2,QWORD PTR [rsp]
  005e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005fe: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00605: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0060c: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00613:    	add    rsp,0x50
  00617: f6 	movabs r13,0x55f67b858380
  00621:    	test   rax,rax
  00624:    	je     0xfffe8f0b
  0062a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00631: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x335a5
  00645:    	cmp    DWORD PTR [rdi+0x4],0x28
  00649:    	jne    0x335a5
  0064f: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc37],0x26        # 0xfffec28d
  00656:    	jne    0x335a5
  0065c:    	sub    rsp,0x50
  00660:    	movq   QWORD PTR [rsp],xmm2
  00665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00671:    	movq   QWORD PTR [rsp+0x18],xmm5
  00677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0067d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00683: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0068a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00691: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00698: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006a1: ff 	mov    rax,QWORD PTR [r14-0xa0]
  006a8:    	mov    QWORD PTR [rsp-0x40],rax
  006ad: 00 	mov    rdi,0x0
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd: 07 	movabs rax,0x700000044
  006c7:    	mov    QWORD PTR [rsp-0x30],rax
  006cc: f6 	movabs r13,0x55f67b84eec0
  006d6:    	mov    rsi,QWORD PTR [rbx]
  006d9:    	mov    QWORD PTR [rsp-0x18],rsi
  006de:    	lea    rsi,[rsp-0x18]
  006e3:    	mov    QWORD PTR [rbx],rsi
  006e6:    	lea    r14,[rsp-0x10]
  006eb:    	mov    QWORD PTR [rsp-0x20],r14
  006f0:    	call   0xfffecb94
  006f5:    	lea    r14,[rbp-0x8]
  006f9:    	mov    QWORD PTR [rbx],r14
  006fc:    	mov    r14,QWORD PTR [rbp-0x10]
  00700:    	movq   xmm2,QWORD PTR [rsp]
  00705:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00711:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00717:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00723: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00731: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00738:    	add    rsp,0x50
  0073c: f6 	movabs r13,0x55f67b8583b0
  00746:    	test   rax,rax
  00749:    	je     0xfffe8f0b
  0074f:    	mov    QWORD PTR [r14-0x80],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  00753: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebb3e]        # 0xfffec298
  0075a: 00 	cmp    rax,QWORD PTR [rip+0x1c47]        # 0x23a8
  00761:    	jne    0x3361e
  00767: 00 	mov    rax,QWORD PTR [rip+0x1c2a]        # 0x2398
  0076e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00057 %16 = const[Vec]                     [Vec]
  00775: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebb1c]        # 0xfffec298
  0077c: 00 	cmp    rax,QWORD PTR [rip+0x1c45]        # 0x23c8
  00783:    	jne    0x336dc
  00789: 00 	mov    rax,QWORD PTR [rip+0x1c28]        # 0x23b8
  00790: ff 	mov    QWORD PTR [r14-0xb0],rax
:00058 %17 = literal[0.0]
  00797: 1c 	movq   xmm8,QWORD PTR [rip+0x1c38]        # 0x23d8
  007a0: 00 	movabs rax,0x8000000000000002
  007aa: ff 	mov    QWORD PTR [r14-0xb8],rax
:00059 %18 = literal[0.0]
  007b1: 1c 	movq   xmm9,QWORD PTR [rip+0x1c2e]        # 0x23e8
  007ba: 00 	movabs rax,0x8000000000000002
  007c4: ff 	mov    QWORD PTR [r14-0xc0],rax
:00060 %19 = literal[0.0]
  007cb: 1c 	movq   xmm12,QWORD PTR [rip+0x1c24]        # 0x23f8
  007d4: 00 	movabs rax,0x8000000000000002
  007de: ff 	mov    QWORD PTR [r14-0xc8],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  007ec: 00 	test   rdi,0x7
  007f3:    	jne    0x3379a
  007f9:    	cmp    DWORD PTR [rdi+0x4],0x29
  007fd:    	jne    0x3379a
  00803: 26 	cmp    DWORD PTR [rip+0xfffffffffffeba83],0x26        # 0xfffec28d
  0080a:    	jne    0x3379a
  00810: 00 	mov    r9,0x0
  00817:    	sub    rsp,0x60
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	movq   QWORD PTR [rsp+0x20],xmm6
  00838:    	movq   QWORD PTR [rsp+0x28],xmm7
  0083e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00845: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00853: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00861:    	mov    rdx,rdi
  00864:    	mov    QWORD PTR [rsp-0x40],rcx
  00869: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00872: ff 	lea    rcx,[r14-0xb8]
  00879: 00 	mov    r8,0x3
  00880:    	mov    rsi,QWORD PTR [rbx]
  00883:    	mov    QWORD PTR [rsp-0x18],rsi
  00888:    	lea    rsi,[rsp-0x18]
  0088d:    	mov    QWORD PTR [rbx],rsi
  00890:    	lea    r14,[rsp-0x10]
  00895:    	mov    QWORD PTR [rsp-0x20],r14
  0089a:    	call   0x33813
  0089f:    	lea    r14,[rbp-0x8]
  008a3:    	mov    QWORD PTR [rbx],r14
  008a6:    	mov    r14,QWORD PTR [rbp-0x10]
  008aa:    	movq   xmm2,QWORD PTR [rsp]
  008af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f0:    	add    rsp,0x60
  008f4: f6 	movabs r13,0x55f67b858430
  008fe:    	test   rax,rax
  00901:    	je     0xfffe8f0b
  00907: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 
:00064 %16 = %10
  0090e:    	mov    rax,QWORD PTR [r14-0x80]
  00912: ff 	mov    QWORD PTR [r14-0xb0],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00919: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00920: 00 	test   rdi,0x7
  00927:    	jne    0x33845
  0092d:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00931:    	jne    0x33845
  00937: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb94f],0x26        # 0xfffec28d
  0093e:    	jne    0x33845
  00944: 00 	mov    r9,0x0
  0094b:    	sub    rsp,0x60
  0094f:    	movq   QWORD PTR [rsp],xmm2
  00954:    	movq   QWORD PTR [rsp+0x8],xmm3
  0095a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00960:    	movq   QWORD PTR [rsp+0x18],xmm5
  00966:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00972: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00979: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00980: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00987: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0098e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00995:    	mov    rdx,rdi
  00998:    	mov    QWORD PTR [rsp-0x40],rcx
  0099d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009a6: ff 	lea    rcx,[r14-0xa8]
  009ad: 00 	mov    r8,0x2
  009b4:    	mov    rsi,QWORD PTR [rbx]
  009b7:    	mov    QWORD PTR [rsp-0x18],rsi
  009bc:    	lea    rsi,[rsp-0x18]
  009c1:    	mov    QWORD PTR [rbx],rsi
  009c4:    	lea    r14,[rsp-0x10]
  009c9:    	mov    QWORD PTR [rsp-0x20],r14
  009ce:    	call   0x338be
  009d3:    	lea    r14,[rbp-0x8]
  009d7:    	mov    QWORD PTR [rbx],r14
  009da:    	mov    r14,QWORD PTR [rbp-0x10]
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009fb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a01: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a08: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a0f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a16: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a1d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a24:    	add    rsp,0x60
  00a28: f6 	movabs r13,0x55f67b858470
  00a32:    	test   rax,rax
  00a35:    	je     0xfffe8f0b
  00a3b: ff 	mov    QWORD PTR [r14-0x88],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a42: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb84f]        # 0xfffec298
  00a49: 00 	cmp    rax,QWORD PTR [rip+0x19c8]        # 0x2418
  00a50:    	jne    0x338f0
  00a56: 00 	mov    rax,QWORD PTR [rip+0x19ab]        # 0x2408
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a6b: 00 	test   rdi,0x7
  00a72:    	jne    0x339ca
  00a78:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a7c:    	jne    0x339ca
  00a82: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb804],0x26        # 0xfffec28d
  00a89:    	jne    0x339ca
  00a8f: 00 	mov    r9,0x0
  00a96:    	sub    rsp,0x60
  00a9a:    	movq   QWORD PTR [rsp],xmm2
  00a9f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aab:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ab7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00abd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ac4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00acb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ad2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ad9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ae0:    	mov    rdx,rdi
  00ae3:    	mov    QWORD PTR [rsp-0x40],rcx
  00ae8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00af1: ff 	lea    rcx,[r14-0xa8]
  00af8: 00 	mov    r8,0x0
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   0x33a43
  00b1e:    	lea    r14,[rbp-0x8]
  00b22:    	mov    QWORD PTR [rbx],r14
  00b25:    	mov    r14,QWORD PTR [rbp-0x10]
  00b29:    	movq   xmm2,QWORD PTR [rsp]
  00b2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b6f:    	add    rsp,0x60
  00b73: f6 	movabs r13,0x55f67b8584b0
  00b7d:    	test   rax,rax
  00b80:    	je     0xfffe8f0b
  00b86: ff 	mov    QWORD PTR [r14-0x90],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b8d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b91:    	mov    rax,QWORD PTR [rdi+0x10]
  00b95: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 0: i32
  00b9c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ba7:    	sub    rsp,0x60
  00bab:    	movq   QWORD PTR [rsp],xmm2
  00bb0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bb6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bbc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bc2:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bc8:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bce: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bd5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bdc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00be3: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bea: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bf1: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00bf8: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00bff:    	mov    rdi,rbx
  00c02:    	mov    rsi,r12
  00c05: f6 	movabs r8,0x55f67b8584e8
  00c0f: f6 	movabs rax,0x55f67a71b620
  00c19:    	call   rax
  00c1b:    	movq   xmm2,QWORD PTR [rsp]
  00c20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c32:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c38:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c3e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c45: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c4c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c53: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c5a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c61:    	add    rsp,0x60
  00c65: f6 	movabs r13,0x55f67b8584f0
  00c6f:    	test   rax,rax
  00c72:    	je     0xfffe8f0b
  00c78: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00c7f: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c86: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00c8d: ff 	mov    rax,QWORD PTR [r14-0x90]
  00c94: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c9b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ca2: 00 	test   rdi,0x7
  00ca9:    	jne    0x33a75
  00caf:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00cb3:    	jne    0x33a75
  00cb9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb5cd],0x26        # 0xfffec28d
  00cc0:    	jne    0x33a75
  00cc6:    	sub    rsp,0x60
  00cca:    	movq   QWORD PTR [rsp],xmm2
  00ccf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cdb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ce7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ced: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cf4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cfb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d02: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d09: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d10: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d19: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d20:    	mov    QWORD PTR [rsp-0x40],rax
  00d25: 00 	mov    rdi,0x2
  00d2c:    	lea    r8,[rsp-0x48]
  00d31: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00d38:    	mov    QWORD PTR [r8],rax
  00d3b:    	sub    r8,0x8
  00d3f: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00d46:    	mov    QWORD PTR [r8],rax
  00d49:    	sub    r8,0x8
  00d4d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d56: 10 	movabs rax,0x1000000046
  00d60:    	mov    QWORD PTR [rsp-0x30],rax
  00d65: f6 	movabs r13,0x55f67b86e960
  00d6f:    	mov    rsi,QWORD PTR [rbx]
  00d72:    	mov    QWORD PTR [rsp-0x18],rsi
  00d77:    	lea    rsi,[rsp-0x18]
  00d7c:    	mov    QWORD PTR [rbx],rsi
  00d7f:    	lea    r14,[rsp-0x10]
  00d84:    	mov    QWORD PTR [rsp-0x20],r14
  00d89:    	call   0xfffece9c
  00d8e:    	lea    r14,[rbp-0x8]
  00d92:    	mov    QWORD PTR [rbx],r14
  00d95:    	mov    r14,QWORD PTR [rbp-0x10]
  00d99:    	movq   xmm2,QWORD PTR [rsp]
  00d9e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00da4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00daa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00db0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00db6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dbc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00dc3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00dd1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00dd8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ddf:    	add    rsp,0x60
  00de3: f6 	movabs r13,0x55f67b858530
  00ded:    	test   rax,rax
  00df0:    	je     0xfffe8f0b
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00df6:    	mov    rdi,QWORD PTR [rbp-0x30]
  00dfa:    	mov    rax,QWORD PTR [rdi+0x10]
  00dfe: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  00e05: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00e10:    	sub    rsp,0x60
  00e14:    	movq   QWORD PTR [rsp],xmm2
  00e19:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e25:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e2b:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e31:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e37: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e3e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e45: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e4c: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e53: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e5a: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00e61: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00e68:    	mov    rdi,rbx
  00e6b:    	mov    rsi,r12
  00e6e: f6 	movabs r8,0x55f67b858568
  00e78: f6 	movabs rax,0x55f67a71b620
  00e82:    	call   rax
  00e84:    	movq   xmm2,QWORD PTR [rsp]
  00e89:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e8f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e95:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e9b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ea1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ea7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00eae: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00eb5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ebc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00ec3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00eca:    	add    rsp,0x60
  00ece: f6 	movabs r13,0x55f67b858570
  00ed8:    	test   rax,rax
  00edb:    	je     0xfffe8f0b
  00ee1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %15 = %11
  00ee8: ff 	mov    rax,QWORD PTR [r14-0x88]
  00eef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00084 %16 = %12
  00ef6: ff 	mov    rax,QWORD PTR [r14-0x90]
  00efd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00f04: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f0b: 00 	test   rdi,0x7
  00f12:    	jne    0x33aee
  00f18:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00f1c:    	jne    0x33aee
  00f22: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb364],0x26        # 0xfffec28d
  00f29:    	jne    0x33aee
  00f2f:    	sub    rsp,0x60
  00f33:    	movq   QWORD PTR [rsp],xmm2
  00f38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f50:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f56: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f5d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f64: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f6b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f72: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f79: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f82: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00f89:    	mov    QWORD PTR [rsp-0x40],rax
  00f8e: 00 	mov    rdi,0x2
  00f95:    	lea    r8,[rsp-0x48]
  00f9a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00fa1:    	mov    QWORD PTR [r8],rax
  00fa4:    	sub    r8,0x8
  00fa8: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00faf:    	mov    QWORD PTR [r8],rax
  00fb2:    	sub    r8,0x8
  00fb6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fbf: 10 	movabs rax,0x1000000046
  00fc9:    	mov    QWORD PTR [rsp-0x30],rax
  00fce: f6 	movabs r13,0x55f67b86e960
  00fd8:    	mov    rsi,QWORD PTR [rbx]
  00fdb:    	mov    QWORD PTR [rsp-0x18],rsi
  00fe0:    	lea    rsi,[rsp-0x18]
  00fe5:    	mov    QWORD PTR [rbx],rsi
  00fe8:    	lea    r14,[rsp-0x10]
  00fed:    	mov    QWORD PTR [rsp-0x20],r14
  00ff2:    	call   0xfffece9c
  00ff7:    	lea    r14,[rbp-0x8]
  00ffb:    	mov    QWORD PTR [rbx],r14
  00ffe:    	mov    r14,QWORD PTR [rbp-0x10]
  01002:    	movq   xmm2,QWORD PTR [rsp]
  01007:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01013:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01019:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0101f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01025: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0102c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01033: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0103a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01041: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01048:    	add    rsp,0x60
  0104c: f6 	movabs r13,0x55f67b8585b0
  01056:    	test   rax,rax
  01059:    	je     0xfffe8f0b
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  0105f:    	mov    rdi,QWORD PTR [rbp-0x30]
  01063:    	mov    rax,QWORD PTR [rdi+0x10]
  01067: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 %15 = 2: i32
  0106e: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01079:    	sub    rsp,0x60
  0107d:    	movq   QWORD PTR [rsp],xmm2
  01082:    	movq   QWORD PTR [rsp+0x8],xmm3
  01088:    	movq   QWORD PTR [rsp+0x10],xmm4
  0108e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01094:    	movq   QWORD PTR [rsp+0x20],xmm6
  0109a:    	movq   QWORD PTR [rsp+0x28],xmm7
  010a0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010a7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010ae: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  010b5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010bc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010c3: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  010ca: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  010d1:    	mov    rdi,rbx
  010d4:    	mov    rsi,r12
  010d7: f6 	movabs r8,0x55f67b8585e8
  010e1: f6 	movabs rax,0x55f67a71b620
  010eb:    	call   rax
  010ed:    	movq   xmm2,QWORD PTR [rsp]
  010f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01104:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0110a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01110: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01117: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0111e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01125: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0112c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01133:    	add    rsp,0x60
  01137: f6 	movabs r13,0x55f67b8585f0
  01141:    	test   rax,rax
  01144:    	je     0xfffe8f0b
  0114a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = %11
  01151: ff 	mov    rax,QWORD PTR [r14-0x88]
  01158: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %16 = %12
  0115f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01166: ff 	mov    QWORD PTR [r14-0xb0],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  0116d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01174: 00 	test   rdi,0x7
  0117b:    	jne    0x33b67
  01181:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01185:    	jne    0x33b67
  0118b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb0fb],0x26        # 0xfffec28d
  01192:    	jne    0x33b67
  01198:    	sub    rsp,0x60
  0119c:    	movq   QWORD PTR [rsp],xmm2
  011a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  011a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ad:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b3:    	movq   QWORD PTR [rsp+0x20],xmm6
  011b9:    	movq   QWORD PTR [rsp+0x28],xmm7
  011bf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  011c6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  011cd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  011d4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011db: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011e2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011eb: ff 	mov    rax,QWORD PTR [r14-0xa0]
  011f2:    	mov    QWORD PTR [rsp-0x40],rax
  011f7: 00 	mov    rdi,0x2
  011fe:    	lea    r8,[rsp-0x48]
  01203: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0120a:    	mov    QWORD PTR [r8],rax
  0120d:    	sub    r8,0x8
  01211: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01218:    	mov    QWORD PTR [r8],rax
  0121b:    	sub    r8,0x8
  0121f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01228: 10 	movabs rax,0x1000000046
  01232:    	mov    QWORD PTR [rsp-0x30],rax
  01237: f6 	movabs r13,0x55f67b86e960
  01241:    	mov    rsi,QWORD PTR [rbx]
  01244:    	mov    QWORD PTR [rsp-0x18],rsi
  01249:    	lea    rsi,[rsp-0x18]
  0124e:    	mov    QWORD PTR [rbx],rsi
  01251:    	lea    r14,[rsp-0x10]
  01256:    	mov    QWORD PTR [rsp-0x20],r14
  0125b:    	call   0xfffece9c
  01260:    	lea    r14,[rbp-0x8]
  01264:    	mov    QWORD PTR [rbx],r14
  01267:    	mov    r14,QWORD PTR [rbp-0x10]
  0126b:    	movq   xmm2,QWORD PTR [rsp]
  01270:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01276:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0127c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01282:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01288:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0128e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01295: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0129c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012a3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012aa: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012b1:    	add    rsp,0x60
  012b5: f6 	movabs r13,0x55f67b858630
  012bf:    	test   rax,rax
  012c2:    	je     0xfffe8f0b
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  012c8:    	mov    rdi,QWORD PTR [rbp-0x30]
  012cc:    	mov    rax,QWORD PTR [rdi+0x18]
  012d0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00097 %15 = %11
  012d7: ff 	mov    rax,QWORD PTR [r14-0x88]
  012de: ff 	mov    QWORD PTR [r14-0xa8],rax
:00098 %16 = %12
  012e5: ff 	mov    rax,QWORD PTR [r14-0x90]
  012ec: ff 	mov    QWORD PTR [r14-0xb0],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012fa: 00 	test   rdi,0x7
  01301:    	jne    0x33be0
  01307:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0130b:    	jne    0x33be0
  01311: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaf75],0x26        # 0xfffec28d
  01318:    	jne    0x33be0
  0131e:    	sub    rsp,0x60
  01322:    	movq   QWORD PTR [rsp],xmm2
  01327:    	movq   QWORD PTR [rsp+0x8],xmm3
  0132d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01333:    	movq   QWORD PTR [rsp+0x18],xmm5
  01339:    	movq   QWORD PTR [rsp+0x20],xmm6
  0133f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01345: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0134c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01353: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0135a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01361: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01368: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01371: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01378:    	mov    QWORD PTR [rsp-0x40],rax
  0137d: 00 	mov    rdi,0x2
  01384:    	lea    r8,[rsp-0x48]
  01389: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01390:    	mov    QWORD PTR [r8],rax
  01393:    	sub    r8,0x8
  01397: ff 	mov    rax,QWORD PTR [r14-0xb0]
  0139e:    	mov    QWORD PTR [r8],rax
  013a1:    	sub    r8,0x8
  013a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013ae: 0e 	movabs rax,0xe00000048
  013b8:    	mov    QWORD PTR [rsp-0x30],rax
  013bd: f6 	movabs r13,0x55f67b870800
  013c7:    	mov    rsi,QWORD PTR [rbx]
  013ca:    	mov    QWORD PTR [rsp-0x18],rsi
  013cf:    	lea    rsi,[rsp-0x18]
  013d4:    	mov    QWORD PTR [rbx],rsi
  013d7:    	lea    r14,[rsp-0x10]
  013dc:    	mov    QWORD PTR [rsp-0x20],r14
  013e1:    	call   0xfffed474
  013e6:    	lea    r14,[rbp-0x8]
  013ea:    	mov    QWORD PTR [rbx],r14
  013ed:    	mov    r14,QWORD PTR [rbp-0x10]
  013f1:    	movq   xmm2,QWORD PTR [rsp]
  013f6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013fc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01402:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01408:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0140e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01414: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0141b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01422: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01429: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01430: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01437:    	add    rsp,0x60
  0143b: f6 	movabs r13,0x55f67b858690
  01445:    	test   rax,rax
  01448:    	je     0xfffe8f0b
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  0144e: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01455: 00 	test   rdi,0x7
  0145c:    	jne    0x33c59
  01462:    	cmp    DWORD PTR [rdi+0x4],0x30
  01466:    	jne    0x33c59
  0146c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeae1a],0x26        # 0xfffec28d
  01473:    	jne    0x33c59
  01479:    	mov    esi,DWORD PTR [rip+0xfa5]        # 0x2424
  0147f:    	cmp    esi,0xffffffff
  01482:    	je     0x33cd2
  01488:    	cmp    WORD PTR [rdi+0x2],0x3
  0148d:    	jne    0x14a6
  01493:    	cmp    esi,0x6
  01496:    	jge    0x14a6
  0149c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014a1:    	jmp    0x1546
  014a6:    	sub    rsp,0x60
  014aa:    	movq   QWORD PTR [rsp],xmm2
  014af:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b5:    	movq   QWORD PTR [rsp+0x10],xmm4
  014bb:    	movq   QWORD PTR [rsp+0x18],xmm5
  014c1:    	movq   QWORD PTR [rsp+0x20],xmm6
  014c7:    	movq   QWORD PTR [rsp+0x28],xmm7
  014cd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014d4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014db: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  014e2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014e9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014f0: f6 	movabs rax,0x55f67a69e160
  014fa:    	call   rax
  014fc:    	movq   xmm2,QWORD PTR [rsp]
  01501:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01507:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0150d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01513:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01519:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0151f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01526: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0152d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01534: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0153b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01542:    	add    rsp,0x60
  01546: ff 	mov    QWORD PTR [r14-0xa0],rax
:00103 
:00105 condnotbr %14 =>:00148
  0154d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01554:    	or     rax,0x10
  01558:    	cmp    rax,0x14
  0155c:    	je     0x22f8
:00106 %14 = %12
  01562: ff 	mov    rax,QWORD PTR [r14-0x90]
  01569: ff 	mov    QWORD PTR [r14-0xa0],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  01570:    	mov    rdi,QWORD PTR [r14-0x30]
  01574: 26 	cmp    DWORD PTR [rip+0xfffffffffffead12],0x26        # 0xfffec28d
  0157b:    	jne    0x33d8f
  01581:    	sub    rsp,0x60
  01585:    	movq   QWORD PTR [rsp],xmm2
  0158a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01590:    	movq   QWORD PTR [rsp+0x10],xmm4
  01596:    	movq   QWORD PTR [rsp+0x18],xmm5
  0159c:    	movq   QWORD PTR [rsp+0x20],xmm6
  015a2:    	movq   QWORD PTR [rsp+0x28],xmm7
  015a8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015af: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015b6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015bd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015c4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015cb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015d4:    	mov    rax,QWORD PTR [r14-0x30]
  015d8:    	mov    QWORD PTR [rsp-0x40],rax
  015dd: 00 	mov    rdi,0x1
  015e4:    	lea    r8,[rsp-0x48]
  015e9: ff 	mov    rax,QWORD PTR [r14-0xa0]
  015f0:    	mov    QWORD PTR [r8],rax
  015f3:    	sub    r8,0x8
  015f7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01600: 0e 	movabs rax,0xe0000004c
  0160a:    	mov    QWORD PTR [rsp-0x30],rax
  0160f: f6 	movabs r13,0x55f67b877ad0
  01619:    	mov    rsi,QWORD PTR [rbx]
  0161c:    	mov    QWORD PTR [rsp-0x18],rsi
  01621:    	lea    rsi,[rsp-0x18]
  01626:    	mov    QWORD PTR [rbx],rsi
  01629:    	lea    r14,[rsp-0x10]
  0162e:    	mov    QWORD PTR [rsp-0x20],r14
  01633:    	call   0xffff5e5d
  01638:    	lea    r14,[rbp-0x8]
  0163c:    	mov    QWORD PTR [rbx],r14
  0163f:    	mov    r14,QWORD PTR [rbp-0x10]
  01643:    	movq   xmm2,QWORD PTR [rsp]
  01648:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0164e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01654:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0165a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01660:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01666: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0166d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01674: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0167b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01682: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01689:    	add    rsp,0x60
  0168d: f6 	movabs r13,0x55f67b858710
  01697:    	test   rax,rax
  0169a:    	je     0xfffe8f0b
  016a0: ff 	mov    QWORD PTR [r14-0x98],rax
:00108 
:00110 %14 = dynvar(2, %2)
  016a7:    	mov    rax,QWORD PTR [rbp-0x18]
  016ab:    	mov    rax,QWORD PTR [rax]
  016ae:    	mov    rax,QWORD PTR [rax-0x28]
  016b2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00111 %16 = dynvar(2, %2)
  016b9:    	mov    rax,QWORD PTR [rbp-0x18]
  016bd:    	mov    rax,QWORD PTR [rax]
  016c0:    	mov    rax,QWORD PTR [rax-0x28]
  016c4: ff 	mov    QWORD PTR [r14-0xb0],rax
:00112 %15 = %16.call x()                   [Vec]
  016cb: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  016d2: 00 	test   rdi,0x7
  016d9:    	jne    0x33e08
  016df:    	cmp    DWORD PTR [rdi+0x4],0x28
  016e3:    	jne    0x33e08
  016e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeab9d],0x26        # 0xfffec28d
  016f0:    	jne    0x33e08
  016f6:    	mov    esi,DWORD PTR [rip+0xd30]        # 0x242c
  016fc:    	cmp    esi,0xffffffff
  016ff:    	je     0x33e81
  01705:    	cmp    WORD PTR [rdi+0x2],0x3
  0170a:    	jne    0x1723
  01710:    	cmp    esi,0x6
  01713:    	jge    0x1723
  01719:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0171e:    	jmp    0x17c3
  01723:    	sub    rsp,0x60
  01727:    	movq   QWORD PTR [rsp],xmm2
  0172c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01732:    	movq   QWORD PTR [rsp+0x10],xmm4
  01738:    	movq   QWORD PTR [rsp+0x18],xmm5
  0173e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01744:    	movq   QWORD PTR [rsp+0x28],xmm7
  0174a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01751: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01758: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0175f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01766: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0176d: f6 	movabs rax,0x55f67a69e160
  01777:    	call   rax
  01779:    	movq   xmm2,QWORD PTR [rsp]
  0177e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01784:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0178a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01790:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01796:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0179c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017a3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  017aa: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017b1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017b8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017bf:    	add    rsp,0x60
  017c3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 
:00115 %16 = %13.call x()                   [Vec]
  017ca: ff 	mov    rdi,QWORD PTR [r14-0x98]
  017d1: 00 	test   rdi,0x7
  017d8:    	jne    0x33f3e
  017de:    	cmp    DWORD PTR [rdi+0x4],0x28
  017e2:    	jne    0x33f3e
  017e8: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaa9e],0x26        # 0xfffec28d
  017ef:    	jne    0x33f3e
  017f5:    	mov    esi,DWORD PTR [rip+0xc39]        # 0x2434
  017fb:    	cmp    esi,0xffffffff
  017fe:    	je     0x33fb7
  01804:    	cmp    WORD PTR [rdi+0x2],0x3
  01809:    	jne    0x1822
  0180f:    	cmp    esi,0x6
  01812:    	jge    0x1822
  01818:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0181d:    	jmp    0x18c2
  01822:    	sub    rsp,0x60
  01826:    	movq   QWORD PTR [rsp],xmm2
  0182b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01831:    	movq   QWORD PTR [rsp+0x10],xmm4
  01837:    	movq   QWORD PTR [rsp+0x18],xmm5
  0183d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01843:    	movq   QWORD PTR [rsp+0x28],xmm7
  01849: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01850: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01857: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0185e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01865: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0186c: f6 	movabs rax,0x55f67a69e160
  01876:    	call   rax
  01878:    	movq   xmm2,QWORD PTR [rsp]
  0187d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01883:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01889:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0188f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01895:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0189b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018a2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018a9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  018b0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  018b7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  018be:    	add    rsp,0x60
  018c2: ff 	mov    QWORD PTR [r14-0xb0],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  018c9: 01 	sub    DWORD PTR [rip+0xb68],0x1        # 0x2438
  018d0:    	je     0x340ed
  018d6: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  018dd: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  018e4:    	sub    rsp,0x60
  018e8:    	movq   QWORD PTR [rsp],xmm2
  018ed:    	movq   QWORD PTR [rsp+0x8],xmm3
  018f3:    	movq   QWORD PTR [rsp+0x10],xmm4
  018f9:    	movq   QWORD PTR [rsp+0x18],xmm5
  018ff:    	movq   QWORD PTR [rsp+0x20],xmm6
  01905:    	movq   QWORD PTR [rsp+0x28],xmm7
  0190b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01912: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01919: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01920: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01927: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0192e:    	mov    rdx,rdi
  01931:    	mov    rcx,rsi
  01934:    	mov    rdi,rbx
  01937:    	mov    rsi,r12
  0193a: f6 	movabs rax,0x55f67a6ddf30
  01944:    	call   rax
  01946:    	movq   xmm2,QWORD PTR [rsp]
  0194b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01951:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01957:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0195d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01963:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01969: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01970: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01977: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0197e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01985: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0198c:    	add    rsp,0x60
  01990: f6 	movabs r13,0x55f67b8587b0
  0199a:    	test   rax,rax
  0199d:    	je     0xfffe8f0b
  019a3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00119 _ = %14.call x=(%15; 1)              [Vec]
  019aa: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  019b1: 00 	test   rdi,0x7
  019b8:    	jne    0x3410b
  019be:    	cmp    DWORD PTR [rdi+0x4],0x28
  019c2:    	jne    0x3410b
  019c8: 26 	cmp    DWORD PTR [rip+0xfffffffffffea8be],0x26        # 0xfffec28d
  019cf:    	jne    0x3410b
  019d5:    	mov    esi,DWORD PTR [rip+0xa65]        # 0x2440
  019db:    	cmp    esi,0xffffffff
  019de:    	je     0x34184
  019e4:    	cmp    WORD PTR [rdi+0x2],0x3
  019e9:    	jne    0x1a09
  019ef:    	cmp    esi,0x6
  019f2:    	jge    0x1a09
  019f8: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019ff:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01a04:    	jmp    0x1ac3
  01a09:    	sub    rsp,0x60
  01a0d:    	movq   QWORD PTR [rsp],xmm2
  01a12:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a18:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a1e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a24:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a2a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a30: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a37: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a3e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a45: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a4c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a53: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01a5a: f6 	movabs rax,0x55f67a69e3e0
  01a64:    	call   rax
  01a66:    	movq   xmm2,QWORD PTR [rsp]
  01a6b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a71:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a77:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a7d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a83:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a89: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a90: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a97: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a9e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01aa5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01aac:    	add    rsp,0x60
  01ab0: f6 	movabs r13,0x55f67b8587d0
  01aba:    	test   rax,rax
  01abd:    	je     0xfffe8f0b
:00120 
:00122 %14 = dynvar(2, %2)
  01ac3:    	mov    rax,QWORD PTR [rbp-0x18]
  01ac7:    	mov    rax,QWORD PTR [rax]
  01aca:    	mov    rax,QWORD PTR [rax-0x28]
  01ace: ff 	mov    QWORD PTR [r14-0xa0],rax
:00123 %16 = dynvar(2, %2)
  01ad5:    	mov    rax,QWORD PTR [rbp-0x18]
  01ad9:    	mov    rax,QWORD PTR [rax]
  01adc:    	mov    rax,QWORD PTR [rax-0x28]
  01ae0: ff 	mov    QWORD PTR [r14-0xb0],rax
:00124 %15 = %16.call y()                   [Vec]
  01ae7: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01aee: 00 	test   rdi,0x7
  01af5:    	jne    0x3424b
  01afb:    	cmp    DWORD PTR [rdi+0x4],0x28
  01aff:    	jne    0x3424b
  01b05: 26 	cmp    DWORD PTR [rip+0xfffffffffffea781],0x26        # 0xfffec28d
  01b0c:    	jne    0x3424b
  01b12:    	mov    esi,DWORD PTR [rip+0x930]        # 0x2448
  01b18:    	cmp    esi,0xffffffff
  01b1b:    	je     0x342c4
  01b21:    	cmp    WORD PTR [rdi+0x2],0x3
  01b26:    	jne    0x1b3f
  01b2c:    	cmp    esi,0x6
  01b2f:    	jge    0x1b3f
  01b35:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b3a:    	jmp    0x1bdf
  01b3f:    	sub    rsp,0x60
  01b43:    	movq   QWORD PTR [rsp],xmm2
  01b48:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b4e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b54:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b5a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b60:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b66: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b6d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b74: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b7b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b82: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b89: f6 	movabs rax,0x55f67a69e160
  01b93:    	call   rax
  01b95:    	movq   xmm2,QWORD PTR [rsp]
  01b9a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ba0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ba6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bac:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bb2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bb8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01bbf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01bc6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01bcd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01bd4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01bdb:    	add    rsp,0x60
  01bdf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00125 
:00127 %16 = %13.call y()                   [Vec]
  01be6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bed: 00 	test   rdi,0x7
  01bf4:    	jne    0x34381
  01bfa:    	cmp    DWORD PTR [rdi+0x4],0x28
  01bfe:    	jne    0x34381
  01c04: 26 	cmp    DWORD PTR [rip+0xfffffffffffea682],0x26        # 0xfffec28d
  01c0b:    	jne    0x34381
  01c11:    	mov    esi,DWORD PTR [rip+0x839]        # 0x2450
  01c17:    	cmp    esi,0xffffffff
  01c1a:    	je     0x343fa
  01c20:    	cmp    WORD PTR [rdi+0x2],0x3
  01c25:    	jne    0x1c3e
  01c2b:    	cmp    esi,0x6
  01c2e:    	jge    0x1c3e
  01c34:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01c39:    	jmp    0x1cde
  01c3e:    	sub    rsp,0x60
  01c42:    	movq   QWORD PTR [rsp],xmm2
  01c47:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c4d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c53:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c59:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c5f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c65: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c6c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c73: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c7a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c81: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c88: f6 	movabs rax,0x55f67a69e160
  01c92:    	call   rax
  01c94:    	movq   xmm2,QWORD PTR [rsp]
  01c99:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c9f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ca5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01cab:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cb1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01cb7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cbe: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01cc5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ccc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01cd3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01cda:    	add    rsp,0x60
  01cde: ff 	mov    QWORD PTR [r14-0xb0],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01ce5: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01cec: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01cf3:    	sub    rsp,0x60
  01cf7:    	movq   QWORD PTR [rsp],xmm2
  01cfc:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d02:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d08:    	movq   QWORD PTR [rsp+0x18],xmm5
  01d0e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01d14:    	movq   QWORD PTR [rsp+0x28],xmm7
  01d1a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01d21: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01d28: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01d2f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01d36: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01d3d:    	mov    rdx,rdi
  01d40:    	mov    rcx,rsi
  01d43:    	mov    rdi,rbx
  01d46:    	mov    rsi,r12
  01d49: f6 	movabs rax,0x55f67a6ddf30
  01d53:    	call   rax
  01d55:    	movq   xmm2,QWORD PTR [rsp]
  01d5a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d60:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d66:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01d6c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01d72:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01d78: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01d7f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d86: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d8d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d94: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d9b:    	add    rsp,0x60
  01d9f: f6 	movabs r13,0x55f67b858870
  01da9:    	test   rax,rax
  01dac:    	je     0xfffe8f0b
  01db2: ff 	mov    QWORD PTR [r14-0xa8],rax
:00131 _ = %14.call y=(%15; 1)              [Vec]
  01db9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01dc0: 00 	test   rdi,0x7
  01dc7:    	jne    0x344b7
  01dcd:    	cmp    DWORD PTR [rdi+0x4],0x28
  01dd1:    	jne    0x344b7
  01dd7: 26 	cmp    DWORD PTR [rip+0xfffffffffffea4af],0x26        # 0xfffec28d
  01dde:    	jne    0x344b7
  01de4:    	mov    esi,DWORD PTR [rip+0x66e]        # 0x2458
  01dea:    	cmp    esi,0xffffffff
  01ded:    	je     0x34530
  01df3:    	cmp    WORD PTR [rdi+0x2],0x3
  01df8:    	jne    0x1e18
  01dfe:    	cmp    esi,0x6
  01e01:    	jge    0x1e18
  01e07: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e0e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01e13:    	jmp    0x1ed2
  01e18:    	sub    rsp,0x60
  01e1c:    	movq   QWORD PTR [rsp],xmm2
  01e21:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e27:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e2d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e33:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e39:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e3f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e46: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e4d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e54: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e5b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e62: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01e69: f6 	movabs rax,0x55f67a69e3e0
  01e73:    	call   rax
  01e75:    	movq   xmm2,QWORD PTR [rsp]
  01e7a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e80:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e86:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e8c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e92:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e98: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e9f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ea6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ead: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01eb4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ebb:    	add    rsp,0x60
  01ebf: f6 	movabs r13,0x55f67b858890
  01ec9:    	test   rax,rax
  01ecc:    	je     0xfffe8f0b
:00132 
:00134 %14 = dynvar(2, %2)
  01ed2:    	mov    rax,QWORD PTR [rbp-0x18]
  01ed6:    	mov    rax,QWORD PTR [rax]
  01ed9:    	mov    rax,QWORD PTR [rax-0x28]
  01edd: ff 	mov    QWORD PTR [r14-0xa0],rax
:00135 %16 = dynvar(2, %2)
  01ee4:    	mov    rax,QWORD PTR [rbp-0x18]
  01ee8:    	mov    rax,QWORD PTR [rax]
  01eeb:    	mov    rax,QWORD PTR [rax-0x28]
  01eef: ff 	mov    QWORD PTR [r14-0xb0],rax
:00136 %15 = %16.call z()                   [Vec]
  01ef6: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01efd: 00 	test   rdi,0x7
  01f04:    	jne    0x345f7
  01f0a:    	cmp    DWORD PTR [rdi+0x4],0x28
  01f0e:    	jne    0x345f7
  01f14: 26 	cmp    DWORD PTR [rip+0xfffffffffffea372],0x26        # 0xfffec28d
  01f1b:    	jne    0x345f7
  01f21:    	mov    esi,DWORD PTR [rip+0x539]        # 0x2460
  01f27:    	cmp    esi,0xffffffff
  01f2a:    	je     0x34670
  01f30:    	cmp    WORD PTR [rdi+0x2],0x3
  01f35:    	jne    0x1f4e
  01f3b:    	cmp    esi,0x6
  01f3e:    	jge    0x1f4e
  01f44:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f49:    	jmp    0x1fee
  01f4e:    	sub    rsp,0x60
  01f52:    	movq   QWORD PTR [rsp],xmm2
  01f57:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f5d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f63:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f69:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f6f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f75: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f7c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f83: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f8a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f91: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f98: f6 	movabs rax,0x55f67a69e160
  01fa2:    	call   rax
  01fa4:    	movq   xmm2,QWORD PTR [rsp]
  01fa9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01faf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fb5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fbb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fc1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fc7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01fce: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01fd5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fdc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fe3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01fea:    	add    rsp,0x60
  01fee: ff 	mov    QWORD PTR [r14-0xa8],rax
:00137 
:00139 %16 = %13.call z()                   [Vec]
  01ff5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ffc: 00 	test   rdi,0x7
  02003:    	jne    0x3472d
  02009:    	cmp    DWORD PTR [rdi+0x4],0x28
  0200d:    	jne    0x3472d
  02013: 26 	cmp    DWORD PTR [rip+0xfffffffffffea273],0x26        # 0xfffec28d
  0201a:    	jne    0x3472d
  02020:    	mov    esi,DWORD PTR [rip+0x442]        # 0x2468
  02026:    	cmp    esi,0xffffffff
  02029:    	je     0x347a6
  0202f:    	cmp    WORD PTR [rdi+0x2],0x3
  02034:    	jne    0x204d
  0203a:    	cmp    esi,0x6
  0203d:    	jge    0x204d
  02043:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02048:    	jmp    0x20ed
  0204d:    	sub    rsp,0x60
  02051:    	movq   QWORD PTR [rsp],xmm2
  02056:    	movq   QWORD PTR [rsp+0x8],xmm3
  0205c:    	movq   QWORD PTR [rsp+0x10],xmm4
  02062:    	movq   QWORD PTR [rsp+0x18],xmm5
  02068:    	movq   QWORD PTR [rsp+0x20],xmm6
  0206e:    	movq   QWORD PTR [rsp+0x28],xmm7
  02074: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0207b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02082: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02089: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02090: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02097: f6 	movabs rax,0x55f67a69e160
  020a1:    	call   rax
  020a3:    	movq   xmm2,QWORD PTR [rsp]
  020a8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020ae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020b4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020ba:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020c0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020c6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  020cd: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  020d4: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020db: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020e2: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020e9:    	add    rsp,0x60
  020ed: ff 	mov    QWORD PTR [r14-0xb0],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  020f4: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  020fb: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  02102:    	sub    rsp,0x60
  02106:    	movq   QWORD PTR [rsp],xmm2
  0210b:    	movq   QWORD PTR [rsp+0x8],xmm3
  02111:    	movq   QWORD PTR [rsp+0x10],xmm4
  02117:    	movq   QWORD PTR [rsp+0x18],xmm5
  0211d:    	movq   QWORD PTR [rsp+0x20],xmm6
  02123:    	movq   QWORD PTR [rsp+0x28],xmm7
  02129: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02130: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02137: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0213e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02145: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0214c:    	mov    rdx,rdi
  0214f:    	mov    rcx,rsi
  02152:    	mov    rdi,rbx
  02155:    	mov    rsi,r12
  02158: f6 	movabs rax,0x55f67a6ddf30
  02162:    	call   rax
  02164:    	movq   xmm2,QWORD PTR [rsp]
  02169:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0216f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02175:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0217b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02181:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02187: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0218e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02195: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0219c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  021a3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  021aa:    	add    rsp,0x60
  021ae: f6 	movabs r13,0x55f67b858930
  021b8:    	test   rax,rax
  021bb:    	je     0xfffe8f0b
  021c1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00143 _ = %14.call z=(%15; 1)              [Vec]
  021c8: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  021cf: 00 	test   rdi,0x7
  021d6:    	jne    0x34863
  021dc:    	cmp    DWORD PTR [rdi+0x4],0x28
  021e0:    	jne    0x34863
  021e6: 26 	cmp    DWORD PTR [rip+0xfffffffffffea0a0],0x26        # 0xfffec28d
  021ed:    	jne    0x34863
  021f3:    	mov    esi,DWORD PTR [rip+0x277]        # 0x2470
  021f9:    	cmp    esi,0xffffffff
  021fc:    	je     0x348dc
  02202:    	cmp    WORD PTR [rdi+0x2],0x3
  02207:    	jne    0x2227
  0220d:    	cmp    esi,0x6
  02210:    	jge    0x2227
  02216: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0221d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  02222:    	jmp    0x22e1
  02227:    	sub    rsp,0x60
  0222b:    	movq   QWORD PTR [rsp],xmm2
  02230:    	movq   QWORD PTR [rsp+0x8],xmm3
  02236:    	movq   QWORD PTR [rsp+0x10],xmm4
  0223c:    	movq   QWORD PTR [rsp+0x18],xmm5
  02242:    	movq   QWORD PTR [rsp+0x20],xmm6
  02248:    	movq   QWORD PTR [rsp+0x28],xmm7
  0224e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02255: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0225c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02263: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0226a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02271: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  02278: f6 	movabs rax,0x55f67a69e3e0
  02282:    	call   rax
  02284:    	movq   xmm2,QWORD PTR [rsp]
  02289:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0228f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02295:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0229b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022a1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022a7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022ae: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022b5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022bc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022c3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022ca:    	add    rsp,0x60
  022ce: f6 	movabs r13,0x55f67b858950
  022d8:    	test   rax,rax
  022db:    	je     0xfffe8f0b
:00144 
:00146 %14 = %15
  022e1: ff 	mov    rax,QWORD PTR [r14-0xa8]
  022e8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 ret %14
  022ef: ff 	mov    rax,QWORD PTR [r14-0xa0]
  022f6:    	leave  
  022f7:    	ret    
:00148 %14 = nil
  022f8: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00149 ret %14
  02303: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0230a:    	leave  
  0230b:    	ret    
==> start whole compile: ambient_occlusion FuncId(76) self_class:Scene start:[00000] bytecode:0x55f67b877ad0
<== finished compile. elapsed:88µs
offset:Pos(103836) code: 4095 bytes  data: 285 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: jne    0x3252f
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    QWORD PTR [r14-0x78],rax
  0003e: mov    QWORD PTR [r14-0x80],rax
  00042: mov    QWORD PTR [r14-0x88],rax
  00049: mov    QWORD PTR [r14-0x90],rax
  00050: mov    QWORD PTR [r14-0x98],rax
  00057: mov    rdi,QWORD PTR [rbp-0x30]
  0005b: test   rdi,0x7
  00062: jne    0x3253e
  00068: cmp    DWORD PTR [rdi+0x4],0x32
  0006c: jne    0x3253e
:00000 init_method reg:14 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  00072: mov    rax,QWORD PTR [rip+0xfffffffffffe9dab]        # 0xfffe9e24
  00079: cmp    rax,QWORD PTR [rip+0xf94]        # 0x1014
  00080: jne    0x3254d
  00086: mov    rax,QWORD PTR [rip+0xf77]        # 0x1004
  0008d: mov    QWORD PTR [r14-0x70],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  00091: mov    rdi,QWORD PTR [r14-0x70]
  00095: test   rdi,0x7
  0009c: jne    0x32593
  000a2: cmp    DWORD PTR [rdi+0x4],0x1e
  000a6: jne    0x32593
  000ac: cmp    DWORD PTR [rip+0xfffffffffffe9d66],0x26        # 0xfffe9e19
  000b3: jne    0x32593
  000b9: mov    r9,0x0
  000c0: mov    rdx,rdi
  000c3: mov    QWORD PTR [rsp-0x40],rcx
  000c8: mov    QWORD PTR [rsp-0x28],0x0
  000d1: lea    rcx,[r14-0x78]
  000d5: mov    r8,0x0
  000dc: mov    rsi,QWORD PTR [rbx]
  000df: mov    QWORD PTR [rsp-0x18],rsi
  000e4: lea    rsi,[rsp-0x18]
  000e9: mov    QWORD PTR [rbx],rsi
  000ec: lea    r14,[rsp-0x10]
  000f1: mov    QWORD PTR [rsp-0x20],r14
  000f6: call   0x325a2
  000fb: lea    r14,[rbp-0x8]
  000ff: mov    QWORD PTR [rbx],r14
  00102: mov    r14,QWORD PTR [rbp-0x10]
  00106: movabs r13,0x55f67b877b10
  00110: test   rax,rax
  00113: je     0xfffe6a97
  00119: mov    QWORD PTR [r14-0x40],rax
:00003 
:00005 %8 = %2
  0011d: mov    rax,QWORD PTR [r14-0x40]
  00121: mov    QWORD PTR [r14-0x70],rax
:00006 %9 = %1.call n()                     [Isect]
  00125: mov    rdi,QWORD PTR [r14-0x38]
  00129: test   rdi,0x7
  00130: jne    0x325d4
  00136: cmp    DWORD PTR [rdi+0x4],0x30
  0013a: jne    0x325d4
  00140: cmp    DWORD PTR [rip+0xfffffffffffe9cd2],0x26        # 0xfffe9e19
  00147: jne    0x325d4
  0014d: mov    esi,DWORD PTR [rip+0xecd]        # 0x1020
  00153: cmp    esi,0xffffffff
  00156: je     0x325e3
  0015c: cmp    WORD PTR [rdi+0x2],0x3
  00161: jne    0x17a
  00167: cmp    esi,0x6
  0016a: jge    0x17a
  00170: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00175: jmp    0x186
  0017a: movabs rax,0x55f67a69e160
  00184: call   rax
  00186: mov    QWORD PTR [r14-0x78],rax
:00007 
:00009 _ = %0.call otherBasis(%8; 2)        [Scene]
  0018a: mov    rdi,QWORD PTR [r14-0x30]
  0018e: cmp    DWORD PTR [rip+0xfffffffffffe9c84],0x26        # 0xfffe9e19
  00195: jne    0x3260c
  0019b: mov    QWORD PTR [rsp-0x28],0x0
  001a4: mov    rax,QWORD PTR [r14-0x30]
  001a8: mov    QWORD PTR [rsp-0x40],rax
  001ad: mov    rdi,0x2
  001b4: lea    r8,[rsp-0x48]
  001b9: mov    rax,QWORD PTR [r14-0x70]
  001bd: mov    QWORD PTR [r8],rax
  001c0: sub    r8,0x8
  001c4: mov    rax,QWORD PTR [r14-0x78]
  001c8: mov    QWORD PTR [r8],rax
  001cb: sub    r8,0x8
  001cf: mov    QWORD PTR [rsp-0x38],0x0
  001d8: movabs rax,0x90000003c
  001e2: mov    QWORD PTR [rsp-0x30],rax
  001e7: movabs r13,0x55f67b88d6a0
  001f1: mov    rsi,QWORD PTR [rbx]
  001f4: mov    QWORD PTR [rsp-0x18],rsi
  001f9: lea    rsi,[rsp-0x18]
  001fe: mov    QWORD PTR [rbx],rsi
  00201: lea    r14,[rsp-0x10]
  00206: mov    QWORD PTR [rsp-0x20],r14
  0020b: call   0xffff3a7b
  00210: lea    r14,[rbp-0x8]
  00214: mov    QWORD PTR [rbx],r14
  00217: mov    r14,QWORD PTR [rbp-0x10]
  0021b: movabs r13,0x55f67b877b80
  00225: test   rax,rax
  00228: je     0xfffe6a97
:00010 
:00012 %3 = const[NAO_SAMPLES]              [8]
  0022e: mov    rax,QWORD PTR [rip+0xfffffffffffe9bef]        # 0xfffe9e24
  00235: cmp    rax,QWORD PTR [rip+0xdf8]        # 0x1034
  0023c: jne    0x3261b
  00242: mov    rax,QWORD PTR [rip+0xddb]        # 0x1024
  00249: mov    QWORD PTR [r14-0x48],rax
:00013 %4 = const[NAO_SAMPLES]              [8]
  0024d: mov    rax,QWORD PTR [rip+0xfffffffffffe9bd0]        # 0xfffe9e24
  00254: cmp    rax,QWORD PTR [rip+0xdf9]        # 0x1054
  0025b: jne    0x32661
  00261: mov    rax,QWORD PTR [rip+0xddc]        # 0x1044
  00268: mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0001]
  0026c: movq   xmm2,QWORD PTR [rip+0xdf0]        # 0x1064
  00274: movabs rax,0xf8d1b71758e2196a
  0027e: mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  00282: movq   xmm3,QWORD PTR [rip+0xdea]        # 0x1074
  0028a: movabs rax,0x8000000000000002
  00294: mov    QWORD PTR [r14-0x60],rax
:00016 %8 = const[Vec]                      [Vec]
  00298: mov    rax,QWORD PTR [rip+0xfffffffffffe9b85]        # 0xfffe9e24
  0029f: cmp    rax,QWORD PTR [rip+0xdee]        # 0x1094
  002a6: jne    0x326a7
  002ac: mov    rax,QWORD PTR [rip+0xdd1]        # 0x1084
  002b3: mov    QWORD PTR [r14-0x70],rax
:00017 %10 = %1.call pl()                   [Isect]
  002b7: mov    rdi,QWORD PTR [r14-0x38]
  002bb: test   rdi,0x7
  002c2: jne    0x3270b
  002c8: cmp    DWORD PTR [rdi+0x4],0x30
  002cc: jne    0x3270b
  002d2: cmp    DWORD PTR [rip+0xfffffffffffe9b40],0x26        # 0xfffe9e19
  002d9: jne    0x3270b
  002df: mov    esi,DWORD PTR [rip+0xdbb]        # 0x10a0
  002e5: cmp    esi,0xffffffff
  002e8: je     0x3271a
  002ee: cmp    WORD PTR [rdi+0x2],0x3
  002f3: jne    0x30c
  002f9: cmp    esi,0x6
  002fc: jge    0x30c
  00302: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00307: jmp    0x336
  0030c: sub    rsp,0x10
  00310: movq   QWORD PTR [rsp],xmm2
  00315: movq   QWORD PTR [rsp+0x8],xmm3
  0031b: movabs rax,0x55f67a69e160
  00325: call   rax
  00327: movq   xmm2,QWORD PTR [rsp]
  0032c: movq   xmm3,QWORD PTR [rsp+0x8]
  00332: add    rsp,0x10
  00336: mov    QWORD PTR [r14-0x80],rax
:00018 
:00020 %9 = %10.call x()                    [Vec]
  0033a: mov    rdi,QWORD PTR [r14-0x80]
  0033e: test   rdi,0x7
  00345: jne    0x32761
  0034b: cmp    DWORD PTR [rdi+0x4],0x28
  0034f: jne    0x32761
  00355: cmp    DWORD PTR [rip+0xfffffffffffe9abd],0x26        # 0xfffe9e19
  0035c: jne    0x32761
  00362: mov    esi,DWORD PTR [rip+0xd40]        # 0x10a8
  00368: cmp    esi,0xffffffff
  0036b: je     0x32770
  00371: cmp    WORD PTR [rdi+0x2],0x3
  00376: jne    0x38f
  0037c: cmp    esi,0x6
  0037f: jge    0x38f
  00385: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0038a: jmp    0x3b9
  0038f: sub    rsp,0x10
  00393: movq   QWORD PTR [rsp],xmm2
  00398: movq   QWORD PTR [rsp+0x8],xmm3
  0039e: movabs rax,0x55f67a69e160
  003a8: call   rax
  003aa: movq   xmm2,QWORD PTR [rsp]
  003af: movq   xmm3,QWORD PTR [rsp+0x8]
  003b5: add    rsp,0x10
  003b9: mov    QWORD PTR [r14-0x78],rax
:00021 
:00023 %11 = %1.call n()                    [Isect]
  003bd: mov    rdi,QWORD PTR [r14-0x38]
  003c1: test   rdi,0x7
  003c8: jne    0x327b7
  003ce: cmp    DWORD PTR [rdi+0x4],0x30
  003d2: jne    0x327b7
  003d8: cmp    DWORD PTR [rip+0xfffffffffffe9a3a],0x26        # 0xfffe9e19
  003df: jne    0x327b7
  003e5: mov    esi,DWORD PTR [rip+0xcc5]        # 0x10b0
  003eb: cmp    esi,0xffffffff
  003ee: je     0x327c6
  003f4: cmp    WORD PTR [rdi+0x2],0x3
  003f9: jne    0x412
  003ff: cmp    esi,0x6
  00402: jge    0x412
  00408: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0040d: jmp    0x43c
  00412: sub    rsp,0x10
  00416: movq   QWORD PTR [rsp],xmm2
  0041b: movq   QWORD PTR [rsp+0x8],xmm3
  00421: movabs rax,0x55f67a69e160
  0042b: call   rax
  0042d: movq   xmm2,QWORD PTR [rsp]
  00432: movq   xmm3,QWORD PTR [rsp+0x8]
  00438: add    rsp,0x10
  0043c: mov    QWORD PTR [r14-0x88],rax
:00024 
:00026 %10 = %11.call x()                   [Vec]
  00443: mov    rdi,QWORD PTR [r14-0x88]
  0044a: test   rdi,0x7
  00451: jne    0x3280d
  00457: cmp    DWORD PTR [rdi+0x4],0x28
  0045b: jne    0x3280d
  00461: cmp    DWORD PTR [rip+0xfffffffffffe99b1],0x26        # 0xfffe9e19
  00468: jne    0x3280d
  0046e: mov    esi,DWORD PTR [rip+0xc44]        # 0x10b8
  00474: cmp    esi,0xffffffff
  00477: je     0x3281c
  0047d: cmp    WORD PTR [rdi+0x2],0x3
  00482: jne    0x49b
  00488: cmp    esi,0x6
  0048b: jge    0x49b
  00491: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00496: jmp    0x4c5
  0049b: sub    rsp,0x10
  0049f: movq   QWORD PTR [rsp],xmm2
  004a4: movq   QWORD PTR [rsp+0x8],xmm3
  004aa: movabs rax,0x55f67a69e160
  004b4: call   rax
  004b6: movq   xmm2,QWORD PTR [rsp]
  004bb: movq   xmm3,QWORD PTR [rsp+0x8]
  004c1: add    rsp,0x10
  004c5: mov    QWORD PTR [r14-0x80],rax
:00027 
:00029 %10 = %5 * %10                       [Float][Float]
  004c9: mov    rdi,QWORD PTR [r14-0x80]
  004cd: test   rdi,0x1
  004d4: jne    0x32863
  004da: test   rdi,0x2
  004e1: je     0x51d
  004e7: xorps  xmm4,xmm4
  004ea: movabs rax,0x8000000000000002
  004f4: cmp    rdi,rax
  004f7: je     0x52f
  004fd: mov    rax,rdi
  00500: sar    rax,0x3f
  00504: add    rax,0x2
  00508: and    rdi,0xfffffffffffffffc
  0050c: or     rdi,rax
  0050f: rol    rdi,0x3d
  00513: movq   xmm4,rdi
  00518: jmp    0x52f
  0051d: call   0xfffe6af0
  00522: test   rax,rax
  00525: je     0x32863
  0052b: movq   xmm4,xmm0
  0052f: mulsd  xmm4,xmm2
:00030 %9 = %9 + %10                        [Float][Float]
  00533: mov    rdi,QWORD PTR [r14-0x78]
  00537: test   rdi,0x1
  0053e: jne    0x32872
  00544: test   rdi,0x2
  0054b: je     0x587
  00551: xorps  xmm5,xmm5
  00554: movabs rax,0x8000000000000002
  0055e: cmp    rdi,rax
  00561: je     0x599
  00567: mov    rax,rdi
  0056a: sar    rax,0x3f
  0056e: add    rax,0x2
  00572: and    rdi,0xfffffffffffffffc
  00576: or     rdi,rax
  00579: rol    rdi,0x3d
  0057d: movq   xmm5,rdi
  00582: jmp    0x599
  00587: call   0xfffe6af0
  0058c: test   rax,rax
  0058f: je     0x32872
  00595: movq   xmm5,xmm0
  00599: addsd  xmm5,xmm4
:00031 %11 = %1.call pl()                   [Isect]
  0059d: mov    rdi,QWORD PTR [r14-0x38]
  005a1: test   rdi,0x7
  005a8: jne    0x3288e
  005ae: cmp    DWORD PTR [rdi+0x4],0x30
  005b2: jne    0x3288e
  005b8: cmp    DWORD PTR [rip+0xfffffffffffe985a],0x26        # 0xfffe9e19
  005bf: jne    0x3288e
  005c5: mov    esi,DWORD PTR [rip+0xaf5]        # 0x10c0
  005cb: cmp    esi,0xffffffff
  005ce: je     0x328b7
  005d4: cmp    WORD PTR [rdi+0x2],0x3
  005d9: jne    0x5f2
  005df: cmp    esi,0x6
  005e2: jge    0x5f2
  005e8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005ed: jmp    0x634
  005f2: sub    rsp,0x20
  005f6: movq   QWORD PTR [rsp],xmm2
  005fb: movq   QWORD PTR [rsp+0x8],xmm3
  00601: movq   QWORD PTR [rsp+0x10],xmm4
  00607: movq   QWORD PTR [rsp+0x18],xmm5
  0060d: movabs rax,0x55f67a69e160
  00617: call   rax
  00619: movq   xmm2,QWORD PTR [rsp]
  0061e: movq   xmm3,QWORD PTR [rsp+0x8]
  00624: movq   xmm4,QWORD PTR [rsp+0x10]
  0062a: movq   xmm5,QWORD PTR [rsp+0x18]
  00630: add    rsp,0x20
  00634: mov    QWORD PTR [r14-0x88],rax
:00032 
:00034 %10 = %11.call y()                   [Vec]
  0063b: mov    rdi,QWORD PTR [r14-0x88]
  00642: test   rdi,0x7
  00649: jne    0x32916
  0064f: cmp    DWORD PTR [rdi+0x4],0x28
  00653: jne    0x32916
  00659: cmp    DWORD PTR [rip+0xfffffffffffe97b9],0x26        # 0xfffe9e19
  00660: jne    0x32916
  00666: mov    esi,DWORD PTR [rip+0xa5c]        # 0x10c8
  0066c: cmp    esi,0xffffffff
  0066f: je     0x32932
  00675: cmp    WORD PTR [rdi+0x2],0x3
  0067a: jne    0x693
  00680: cmp    esi,0x6
  00683: jge    0x693
  00689: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0068e: jmp    0x6c9
  00693: sub    rsp,0x20
  00697: movq   QWORD PTR [rsp],xmm2
  0069c: movq   QWORD PTR [rsp+0x8],xmm3
  006a2: movq   QWORD PTR [rsp+0x10],xmm5
  006a8: movabs rax,0x55f67a69e160
  006b2: call   rax
  006b4: movq   xmm2,QWORD PTR [rsp]
  006b9: movq   xmm3,QWORD PTR [rsp+0x8]
  006bf: movq   xmm5,QWORD PTR [rsp+0x10]
  006c5: add    rsp,0x20
  006c9: mov    QWORD PTR [r14-0x80],rax
:00035 
:00037 %12 = %1.call n()                    [Isect]
  006cd: mov    rdi,QWORD PTR [r14-0x38]
  006d1: test   rdi,0x7
  006d8: jne    0x32985
  006de: cmp    DWORD PTR [rdi+0x4],0x30
  006e2: jne    0x32985
  006e8: cmp    DWORD PTR [rip+0xfffffffffffe972a],0x26        # 0xfffe9e19
  006ef: jne    0x32985
  006f5: mov    esi,DWORD PTR [rip+0x9d5]        # 0x10d0
  006fb: cmp    esi,0xffffffff
  006fe: je     0x329a1
  00704: cmp    WORD PTR [rdi+0x2],0x3
  00709: jne    0x722
  0070f: cmp    esi,0x6
  00712: jge    0x722
  00718: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0071d: jmp    0x758
  00722: sub    rsp,0x20
  00726: movq   QWORD PTR [rsp],xmm2
  0072b: movq   QWORD PTR [rsp+0x8],xmm3
  00731: movq   QWORD PTR [rsp+0x10],xmm5
  00737: movabs rax,0x55f67a69e160
  00741: call   rax
  00743: movq   xmm2,QWORD PTR [rsp]
  00748: movq   xmm3,QWORD PTR [rsp+0x8]
  0074e: movq   xmm5,QWORD PTR [rsp+0x10]
  00754: add    rsp,0x20
  00758: mov    QWORD PTR [r14-0x90],rax
:00038 
:00040 %11 = %12.call y()                   [Vec]
  0075f: mov    rdi,QWORD PTR [r14-0x90]
  00766: test   rdi,0x7
  0076d: jne    0x329f4
  00773: cmp    DWORD PTR [rdi+0x4],0x28
  00777: jne    0x329f4
  0077d: cmp    DWORD PTR [rip+0xfffffffffffe9695],0x26        # 0xfffe9e19
  00784: jne    0x329f4
  0078a: mov    esi,DWORD PTR [rip+0x948]        # 0x10d8
  00790: cmp    esi,0xffffffff
  00793: je     0x32a10
  00799: cmp    WORD PTR [rdi+0x2],0x3
  0079e: jne    0x7b7
  007a4: cmp    esi,0x6
  007a7: jge    0x7b7
  007ad: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007b2: jmp    0x7ed
  007b7: sub    rsp,0x20
  007bb: movq   QWORD PTR [rsp],xmm2
  007c0: movq   QWORD PTR [rsp+0x8],xmm3
  007c6: movq   QWORD PTR [rsp+0x10],xmm5
  007cc: movabs rax,0x55f67a69e160
  007d6: call   rax
  007d8: movq   xmm2,QWORD PTR [rsp]
  007dd: movq   xmm3,QWORD PTR [rsp+0x8]
  007e3: movq   xmm5,QWORD PTR [rsp+0x10]
  007e9: add    rsp,0x20
  007ed: mov    QWORD PTR [r14-0x88],rax
:00041 
:00043 %11 = %5 * %11                       [Float][Float]
  007f4: mov    rdi,QWORD PTR [r14-0x88]
  007fb: test   rdi,0x1
  00802: jne    0x32a63
  00808: test   rdi,0x2
  0080f: je     0x84b
  00815: xorps  xmm4,xmm4
  00818: movabs rax,0x8000000000000002
  00822: cmp    rdi,rax
  00825: je     0x85d
  0082b: mov    rax,rdi
  0082e: sar    rax,0x3f
  00832: add    rax,0x2
  00836: and    rdi,0xfffffffffffffffc
  0083a: or     rdi,rax
  0083d: rol    rdi,0x3d
  00841: movq   xmm4,rdi
  00846: jmp    0x85d
  0084b: call   0xfffe6af0
  00850: test   rax,rax
  00853: je     0x32a63
  00859: movq   xmm4,xmm0
  0085d: mulsd  xmm4,xmm2
:00044 %10 = %10 + %11                      [Float][Float]
  00861: mov    rdi,QWORD PTR [r14-0x80]
  00865: test   rdi,0x1
  0086c: jne    0x32a7f
  00872: test   rdi,0x2
  00879: je     0x8b5
  0087f: xorps  xmm6,xmm6
  00882: movabs rax,0x8000000000000002
  0088c: cmp    rdi,rax
  0088f: je     0x8c7
  00895: mov    rax,rdi
  00898: sar    rax,0x3f
  0089c: add    rax,0x2
  008a0: and    rdi,0xfffffffffffffffc
  008a4: or     rdi,rax
  008a7: rol    rdi,0x3d
  008ab: movq   xmm6,rdi
  008b0: jmp    0x8c7
  008b5: call   0xfffe6af0
  008ba: test   rax,rax
  008bd: je     0x32a7f
  008c3: movq   xmm6,xmm0
  008c7: addsd  xmm6,xmm4
:00045 %12 = %1.call pl()                   [Isect]
  008cb: mov    rdi,QWORD PTR [r14-0x38]
  008cf: test   rdi,0x7
  008d6: jne    0x32aab
  008dc: cmp    DWORD PTR [rdi+0x4],0x30
  008e0: jne    0x32aab
  008e6: cmp    DWORD PTR [rip+0xfffffffffffe952c],0x26        # 0xfffe9e19
  008ed: jne    0x32aab
  008f3: mov    esi,DWORD PTR [rip+0x7e7]        # 0x10e0
  008f9: cmp    esi,0xffffffff
  008fc: je     0x32ae4
  00902: cmp    WORD PTR [rdi+0x2],0x3
  00907: jne    0x920
  0090d: cmp    esi,0x6
  00910: jge    0x920
  00916: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0091b: jmp    0x96e
  00920: sub    rsp,0x30
  00924: movq   QWORD PTR [rsp],xmm2
  00929: movq   QWORD PTR [rsp+0x8],xmm3
  0092f: movq   QWORD PTR [rsp+0x10],xmm4
  00935: movq   QWORD PTR [rsp+0x18],xmm5
  0093b: movq   QWORD PTR [rsp+0x20],xmm6
  00941: movabs rax,0x55f67a69e160
  0094b: call   rax
  0094d: movq   xmm2,QWORD PTR [rsp]
  00952: movq   xmm3,QWORD PTR [rsp+0x8]
  00958: movq   xmm4,QWORD PTR [rsp+0x10]
  0095e: movq   xmm5,QWORD PTR [rsp+0x18]
  00964: movq   xmm6,QWORD PTR [rsp+0x20]
  0096a: add    rsp,0x30
  0096e: mov    QWORD PTR [r14-0x90],rax
:00046 
:00048 %11 = %12.call z()                   [Vec]
  00975: mov    rdi,QWORD PTR [r14-0x90]
  0097c: test   rdi,0x7
  00983: jne    0x32b4f
  00989: cmp    DWORD PTR [rdi+0x4],0x28
  0098d: jne    0x32b4f
  00993: cmp    DWORD PTR [rip+0xfffffffffffe947f],0x26        # 0xfffe9e19
  0099a: jne    0x32b4f
  009a0: mov    esi,DWORD PTR [rip+0x742]        # 0x10e8
  009a6: cmp    esi,0xffffffff
  009a9: je     0x32b78
  009af: cmp    WORD PTR [rdi+0x2],0x3
  009b4: jne    0x9cd
  009ba: cmp    esi,0x6
  009bd: jge    0x9cd
  009c3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009c8: jmp    0xa0f
  009cd: sub    rsp,0x20
  009d1: movq   QWORD PTR [rsp],xmm2
  009d6: movq   QWORD PTR [rsp+0x8],xmm3
  009dc: movq   QWORD PTR [rsp+0x10],xmm5
  009e2: movq   QWORD PTR [rsp+0x18],xmm6
  009e8: movabs rax,0x55f67a69e160
  009f2: call   rax
  009f4: movq   xmm2,QWORD PTR [rsp]
  009f9: movq   xmm3,QWORD PTR [rsp+0x8]
  009ff: movq   xmm5,QWORD PTR [rsp+0x10]
  00a05: movq   xmm6,QWORD PTR [rsp+0x18]
  00a0b: add    rsp,0x20
  00a0f: mov    QWORD PTR [r14-0x88],rax
:00049 
:00051 %13 = %1.call n()                    [Isect]
  00a16: mov    rdi,QWORD PTR [r14-0x38]
  00a1a: test   rdi,0x7
  00a21: jne    0x32bd7
  00a27: cmp    DWORD PTR [rdi+0x4],0x30
  00a2b: jne    0x32bd7
  00a31: cmp    DWORD PTR [rip+0xfffffffffffe93e1],0x26        # 0xfffe9e19
  00a38: jne    0x32bd7
  00a3e: mov    esi,DWORD PTR [rip+0x6ac]        # 0x10f0
  00a44: cmp    esi,0xffffffff
  00a47: je     0x32c00
  00a4d: cmp    WORD PTR [rdi+0x2],0x3
  00a52: jne    0xa6b
  00a58: cmp    esi,0x6
  00a5b: jge    0xa6b
  00a61: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a66: jmp    0xaad
  00a6b: sub    rsp,0x20
  00a6f: movq   QWORD PTR [rsp],xmm2
  00a74: movq   QWORD PTR [rsp+0x8],xmm3
  00a7a: movq   QWORD PTR [rsp+0x10],xmm5
  00a80: movq   QWORD PTR [rsp+0x18],xmm6
  00a86: movabs rax,0x55f67a69e160
  00a90: call   rax
  00a92: movq   xmm2,QWORD PTR [rsp]
  00a97: movq   xmm3,QWORD PTR [rsp+0x8]
  00a9d: movq   xmm5,QWORD PTR [rsp+0x10]
  00aa3: movq   xmm6,QWORD PTR [rsp+0x18]
  00aa9: add    rsp,0x20
  00aad: mov    QWORD PTR [r14-0x98],rax
:00052 
:00054 %12 = %13.call z()                   [Vec]
  00ab4: mov    rdi,QWORD PTR [r14-0x98]
  00abb: test   rdi,0x7
  00ac2: jne    0x32c5f
  00ac8: cmp    DWORD PTR [rdi+0x4],0x28
  00acc: jne    0x32c5f
  00ad2: cmp    DWORD PTR [rip+0xfffffffffffe9340],0x26        # 0xfffe9e19
  00ad9: jne    0x32c5f
  00adf: mov    esi,DWORD PTR [rip+0x613]        # 0x10f8
  00ae5: cmp    esi,0xffffffff
  00ae8: je     0x32c88
  00aee: cmp    WORD PTR [rdi+0x2],0x3
  00af3: jne    0xb0c
  00af9: cmp    esi,0x6
  00afc: jge    0xb0c
  00b02: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b07: jmp    0xb4e
  00b0c: sub    rsp,0x20
  00b10: movq   QWORD PTR [rsp],xmm2
  00b15: movq   QWORD PTR [rsp+0x8],xmm3
  00b1b: movq   QWORD PTR [rsp+0x10],xmm5
  00b21: movq   QWORD PTR [rsp+0x18],xmm6
  00b27: movabs rax,0x55f67a69e160
  00b31: call   rax
  00b33: movq   xmm2,QWORD PTR [rsp]
  00b38: movq   xmm3,QWORD PTR [rsp+0x8]
  00b3e: movq   xmm5,QWORD PTR [rsp+0x10]
  00b44: movq   xmm6,QWORD PTR [rsp+0x18]
  00b4a: add    rsp,0x20
  00b4e: mov    QWORD PTR [r14-0x90],rax
:00055 
:00057 %12 = %5 * %12                       [Float][Float]
  00b55: mov    rdi,QWORD PTR [r14-0x90]
  00b5c: test   rdi,0x1
  00b63: jne    0x32ce7
  00b69: test   rdi,0x2
  00b70: je     0xbac
  00b76: xorps  xmm4,xmm4
  00b79: movabs rax,0x8000000000000002
  00b83: cmp    rdi,rax
  00b86: je     0xbbe
  00b8c: mov    rax,rdi
  00b8f: sar    rax,0x3f
  00b93: add    rax,0x2
  00b97: and    rdi,0xfffffffffffffffc
  00b9b: or     rdi,rax
  00b9e: rol    rdi,0x3d
  00ba2: movq   xmm4,rdi
  00ba7: jmp    0xbbe
  00bac: call   0xfffe6af0
  00bb1: test   rax,rax
  00bb4: je     0x32ce7
  00bba: movq   xmm4,xmm0
  00bbe: mulsd  xmm4,xmm2
:00058 %11 = %11 + %12                      [Float][Float]
  00bc2: mov    rdi,QWORD PTR [r14-0x88]
  00bc9: test   rdi,0x1
  00bd0: jne    0x32d10
  00bd6: test   rdi,0x2
  00bdd: je     0xc19
  00be3: xorps  xmm7,xmm7
  00be6: movabs rax,0x8000000000000002
  00bf0: cmp    rdi,rax
  00bf3: je     0xc2b
  00bf9: mov    rax,rdi
  00bfc: sar    rax,0x3f
  00c00: add    rax,0x2
  00c04: and    rdi,0xfffffffffffffffc
  00c08: or     rdi,rax
  00c0b: rol    rdi,0x3d
  00c0f: movq   xmm7,rdi
  00c14: jmp    0xc2b
  00c19: call   0xfffe6af0
  00c1e: test   rax,rax
  00c21: je     0x32d10
  00c27: movq   xmm7,xmm0
  00c2b: addsd  xmm7,xmm4
:00059 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c2f: movq   xmm0,xmm5
  00c33: call   0xfffe6c14
  00c38: mov    QWORD PTR [r14-0x78],rax
  00c3c: movq   xmm0,xmm6
  00c40: call   0xfffe6c14
  00c45: mov    QWORD PTR [r14-0x80],rax
  00c49: movq   xmm0,xmm7
  00c4d: call   0xfffe6c14
  00c52: mov    QWORD PTR [r14-0x88],rax
  00c59: mov    rdi,QWORD PTR [r14-0x70]
  00c5d: test   rdi,0x7
  00c64: jne    0x32d49
  00c6a: cmp    DWORD PTR [rdi+0x4],0x29
  00c6e: jne    0x32d49
  00c74: cmp    DWORD PTR [rip+0xfffffffffffe919e],0x26        # 0xfffe9e19
  00c7b: jne    0x32d49
  00c81: mov    r9,0x0
  00c88: sub    rsp,0x30
  00c8c: movq   QWORD PTR [rsp],xmm2
  00c91: movq   QWORD PTR [rsp+0x8],xmm3
  00c97: movq   QWORD PTR [rsp+0x10],xmm4
  00c9d: movq   QWORD PTR [rsp+0x18],xmm5
  00ca3: movq   QWORD PTR [rsp+0x20],xmm6
  00ca9: movq   QWORD PTR [rsp+0x28],xmm7
  00caf: mov    rdx,rdi
  00cb2: mov    QWORD PTR [rsp-0x40],rcx
  00cb7: mov    QWORD PTR [rsp-0x28],0x0
  00cc0: lea    rcx,[r14-0x78]
  00cc4: mov    r8,0x3
  00ccb: mov    rsi,QWORD PTR [rbx]
  00cce: mov    QWORD PTR [rsp-0x18],rsi
  00cd3: lea    rsi,[rsp-0x18]
  00cd8: mov    QWORD PTR [rbx],rsi
  00cdb: lea    r14,[rsp-0x10]
  00ce0: mov    QWORD PTR [rsp-0x20],r14
  00ce5: call   0x32d68
  00cea: lea    r14,[rbp-0x8]
  00cee: mov    QWORD PTR [rbx],r14
  00cf1: mov    r14,QWORD PTR [rbp-0x10]
  00cf5: movq   xmm2,QWORD PTR [rsp]
  00cfa: movq   xmm3,QWORD PTR [rsp+0x8]
  00d00: movq   xmm4,QWORD PTR [rsp+0x10]
  00d06: movq   xmm5,QWORD PTR [rsp+0x18]
  00d0c: movq   xmm6,QWORD PTR [rsp+0x20]
  00d12: movq   xmm7,QWORD PTR [rsp+0x28]
  00d18: add    rsp,0x30
  00d1c: movabs r13,0x55f67b877ea0
  00d26: test   rax,rax
  00d29: je     0xfffe6a97
  00d2f: mov    QWORD PTR [r14-0x68],rax
:00060 
:00062 %8 = literal[5111809]
  00d33: mov    rax,0x9c0003
  00d3a: mov    QWORD PTR [r14-0x70],rax
:00063 _ = %4.call times(&%8)               [Integer]
  00d3e: mov    rdi,QWORD PTR [r14-0x50]
  00d42: test   rdi,0x1
  00d49: je     0x32d9a
  00d4f: cmp    DWORD PTR [rip+0xfffffffffffe90c3],0x26        # 0xfffe9e19
  00d56: jne    0x32d9a
  00d5c: mov    r9,QWORD PTR [r14-0x70]
  00d60: sub    rsp,0x20
  00d64: movq   QWORD PTR [rsp],xmm4
  00d69: movq   QWORD PTR [rsp+0x8],xmm5
  00d6f: movq   QWORD PTR [rsp+0x10],xmm6
  00d75: movq   QWORD PTR [rsp+0x18],xmm7
  00d7b: mov    rdx,rdi
  00d7e: mov    QWORD PTR [rsp-0x40],rcx
  00d83: mov    QWORD PTR [rsp-0x28],0x0
  00d8c: lea    rcx,[r14-0x78]
  00d90: mov    r8,0x0
  00d97: mov    rsi,QWORD PTR [rbx]
  00d9a: mov    QWORD PTR [rsp-0x18],rsi
  00d9f: lea    rsi,[rsp-0x18]
  00da4: mov    QWORD PTR [rbx],rsi
  00da7: lea    r14,[rsp-0x10]
  00dac: mov    QWORD PTR [rsp-0x20],r14
  00db1: call   0x32db9
  00db6: lea    r14,[rbp-0x8]
  00dba: mov    QWORD PTR [rbx],r14
  00dbd: mov    r14,QWORD PTR [rbp-0x10]
  00dc1: movq   xmm4,QWORD PTR [rsp]
  00dc6: movq   xmm5,QWORD PTR [rsp+0x8]
  00dcc: movq   xmm6,QWORD PTR [rsp+0x10]
  00dd2: movq   xmm7,QWORD PTR [rsp+0x18]
  00dd8: add    rsp,0x20
  00ddc: movabs r13,0x55f67b877ee0
  00de6: test   rax,rax
  00de9: je     0xfffe6a97
:00064 
:00066 %8 = %3.call to_f()                  [Integer]
  00def: mov    rdi,QWORD PTR [r14-0x48]
  00df3: test   rdi,0x1
  00dfa: je     0x32deb
  00e00: cmp    DWORD PTR [rip+0xfffffffffffe9012],0x26        # 0xfffe9e19
  00e07: jne    0x32deb
  00e0d: sar    rdi,1
  00e10: cvtsi2sd xmm2,rdi
:00067 
:00069 %9 = %4.call to_f()                  [Integer]
  00e15: mov    rdi,QWORD PTR [r14-0x50]
  00e19: test   rdi,0x1
  00e20: je     0x32e0a
  00e26: cmp    DWORD PTR [rip+0xfffffffffffe8fec],0x26        # 0xfffe9e19
  00e2d: jne    0x32e0a
  00e33: sar    rdi,1
  00e36: cvtsi2sd xmm3,rdi
:00070 
:00072 %8 = %8 * %9                         [Float][Float]
  00e3b: mulsd  xmm2,xmm3
:00073 %8 = %8 - %6                         [Float][Float]
  00e3f: mov    rdi,QWORD PTR [r14-0x60]
  00e43: test   rdi,0x1
  00e4a: jne    0x32e36
  00e50: test   rdi,0x2
  00e57: je     0xe93
  00e5d: xorps  xmm5,xmm5
  00e60: movabs rax,0x8000000000000002
  00e6a: cmp    rdi,rax
  00e6d: je     0xea5
  00e73: mov    rax,rdi
  00e76: sar    rax,0x3f
  00e7a: add    rax,0x2
  00e7e: and    rdi,0xfffffffffffffffc
  00e82: or     rdi,rax
  00e85: rol    rdi,0x3d
  00e89: movq   xmm5,rdi
  00e8e: jmp    0xea5
  00e93: call   0xfffe6af0
  00e98: test   rax,rax
  00e9b: je     0x32e36
  00ea1: movq   xmm5,xmm0
  00ea5: subsd  xmm2,xmm5
:00074 %9 = %3.call to_f()                  [Integer]
  00ea9: mov    rdi,QWORD PTR [r14-0x48]
  00ead: test   rdi,0x1
  00eb4: je     0x32e6f
  00eba: cmp    DWORD PTR [rip+0xfffffffffffe8f58],0x26        # 0xfffe9e19
  00ec1: jne    0x32e6f
  00ec7: sar    rdi,1
  00eca: cvtsi2sd xmm3,rdi
:00075 
:00077 %10 = %4.call to_f()                 [Integer]
  00ecf: mov    rdi,QWORD PTR [r14-0x50]
  00ed3: test   rdi,0x1
  00eda: je     0x32e9b
  00ee0: cmp    DWORD PTR [rip+0xfffffffffffe8f32],0x26        # 0xfffe9e19
  00ee7: jne    0x32e9b
  00eed: sar    rdi,1
  00ef0: cvtsi2sd xmm6,rdi
:00078 
:00080 %9 = %9 * %10                        [Float][Float]
  00ef5: mulsd  xmm3,xmm6
:00081 %6 = %8 / %9                         [Float][Float]
  00ef9: movq   xmm5,xmm2
  00efd: movq   rax,xmm3
  00f02: test   rax,rax
  00f05: je     0xfffe6abc
  00f0b: divsd  xmm5,xmm3
:00082 %9 = const[Vec]                      [Vec]
  00f0f: mov    rax,QWORD PTR [rip+0xfffffffffffe8f0e]        # 0xfffe9e24
  00f16: cmp    rax,QWORD PTR [rip+0x1f7]        # 0x1114
  00f1d: jne    0x32ed4
  00f23: mov    rax,QWORD PTR [rip+0x1da]        # 0x1104
  00f2a: mov    QWORD PTR [r14-0x78],rax
:00083 %10 = %6
:00084 %11 = %6
:00085 %12 = %6
:00086 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
  00f2e: movq   xmm0,xmm5
  00f32: call   0xfffe6c14
  00f37: mov    QWORD PTR [r14-0x80],rax
  00f3b: movq   xmm0,xmm5
  00f3f: call   0xfffe6c14
  00f44: mov    QWORD PTR [r14-0x88],rax
  00f4b: movq   xmm0,xmm5
  00f4f: call   0xfffe6c14
  00f54: mov    QWORD PTR [r14-0x90],rax
  00f5b: mov    rdi,QWORD PTR [r14-0x78]
  00f5f: test   rdi,0x7
  00f66: jne    0x32f5c
  00f6c: cmp    DWORD PTR [rdi+0x4],0x29
  00f70: jne    0x32f5c
  00f76: cmp    DWORD PTR [rip+0xfffffffffffe8e9c],0x26        # 0xfffe9e19
  00f7d: jne    0x32f5c
  00f83: mov    r9,0x0
  00f8a: sub    rsp,0x10
  00f8e: movq   QWORD PTR [rsp],xmm5
  00f93: mov    rdx,rdi
  00f96: mov    QWORD PTR [rsp-0x40],rcx
  00f9b: mov    QWORD PTR [rsp-0x28],0x0
  00fa4: lea    rcx,[r14-0x80]
  00fa8: mov    r8,0x3
  00faf: mov    rsi,QWORD PTR [rbx]
  00fb2: mov    QWORD PTR [rsp-0x18],rsi
  00fb7: lea    rsi,[rsp-0x18]
  00fbc: mov    QWORD PTR [rbx],rsi
  00fbf: lea    r14,[rsp-0x10]
  00fc4: mov    QWORD PTR [rsp-0x20],r14
  00fc9: call   0x32f78
  00fce: lea    r14,[rbp-0x8]
  00fd2: mov    QWORD PTR [rbx],r14
  00fd5: mov    r14,QWORD PTR [rbp-0x10]
  00fd9: movq   xmm5,QWORD PTR [rsp]
  00fde: add    rsp,0x10
  00fe2: movabs r13,0x55f67b878050
  00fec: test   rax,rax
  00fef: je     0xfffe6a97
  00ff5: mov    QWORD PTR [r14-0x70],rax
:00087 
:00089 ret %8
  00ff9: mov    rax,QWORD PTR [r14-0x70]
  00ffd: leave  
  00ffe: ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55f67b88d6a0
<== finished compile. elapsed:111.9µs
offset:Pos(108216) code: 7793 bytes  data: 307 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x31e8e
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x31e9d
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x31e9d
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8ca8]        # 0xfffe8d08
  00060: 00 	cmp    rax,QWORD PTR [rip+0x1e21]        # 0x1e88
  00067:    	jne    0x31eac
  0006d: 00 	mov    rax,QWORD PTR [rip+0x1e04]        # 0x1e78
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x31ef2
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x31ef2
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8c63],0x26        # 0xfffe8cfd
  0009a:    	jne    0x31ef2
  000a0:    	mov    esi,DWORD PTR [rip+0x1dee]        # 0x1e94
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x31f01
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: f6 	movabs rax,0x55f67a69e160
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x31f2a
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x31f2a
  000f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8bfe],0x26        # 0xfffe8cfd
  000ff:    	jne    0x31f2a
  00105:    	mov    esi,DWORD PTR [rip+0x1d91]        # 0x1e9c
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x31f39
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: f6 	movabs rax,0x55f67a69e160
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x31f62
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x31f62
  0015d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8b99],0x26        # 0xfffe8cfd
  00164:    	jne    0x31f62
  0016a:    	mov    esi,DWORD PTR [rip+0x1d34]        # 0x1ea4
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x31f71
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: f6 	movabs rax,0x55f67a69e160
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x31f9a
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x31f9a
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8b34],0x26        # 0xfffe8cfd
  001c9:    	jne    0x31f9a
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x31fa9
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: f6 	movabs r13,0x55f67b88d780
  00226:    	test   rax,rax
  00229:    	je     0xfffe597b
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdx,QWORD PTR [r14-0x38]
  00237:    	mov    rcx,QWORD PTR [r14-0x48]
  0023b:    	mov    r8,QWORD PTR [r14-0x50]
  0023f:    	mov    rdi,rbx
  00242:    	mov    rsi,r12
  00245: f6 	movabs rax,0x55f67a71b750
  0024f:    	call   rax
  00251: f6 	movabs r13,0x55f67b88d7a0
  0025b:    	test   rax,rax
  0025e:    	je     0xfffe597b
:00016 %3 = 1: i32
  00264: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  0026c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8a95]        # 0xfffe8d08
  00273: 00 	cmp    rax,QWORD PTR [rip+0x1c3e]        # 0x1eb8
  0027a:    	jne    0x31fdb
  00280: 00 	mov    rax,QWORD PTR [rip+0x1c21]        # 0x1ea8
  00287:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  0028b: 00 	movq   xmm2,QWORD PTR [rip+0x1c35]        # 0x1ec8
  00293: 00 	movabs rax,0x8000000000000002
  0029d:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002a1: 00 	movq   xmm3,QWORD PTR [rip+0x1c2f]        # 0x1ed8
  002a9: 00 	movabs rax,0x8000000000000002
  002b3:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002b7: 00 	movq   xmm4,QWORD PTR [rip+0x1c29]        # 0x1ee8
  002bf: 00 	movabs rax,0x8000000000000002
  002c9:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002cd:    	mov    rdi,QWORD PTR [r14-0x58]
  002d1: 00 	test   rdi,0x7
  002d8:    	jne    0x32021
  002de:    	cmp    DWORD PTR [rdi+0x4],0x29
  002e2:    	jne    0x32021
  002e8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8a0e],0x26        # 0xfffe8cfd
  002ef:    	jne    0x32021
  002f5: 00 	mov    r9,0x0
  002fc:    	sub    rsp,0x20
  00300:    	movq   QWORD PTR [rsp],xmm2
  00305:    	movq   QWORD PTR [rsp+0x8],xmm3
  0030b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00311:    	mov    rdx,rdi
  00314:    	mov    QWORD PTR [rsp-0x40],rcx
  00319: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00322:    	lea    rcx,[r14-0x60]
  00326: 00 	mov    r8,0x3
  0032d:    	mov    rsi,QWORD PTR [rbx]
  00330:    	mov    QWORD PTR [rsp-0x18],rsi
  00335:    	lea    rsi,[rsp-0x18]
  0033a:    	mov    QWORD PTR [rbx],rsi
  0033d:    	lea    r14,[rsp-0x10]
  00342:    	mov    QWORD PTR [rsp-0x20],r14
  00347:    	call   0x32030
  0034c:    	lea    r14,[rbp-0x8]
  00350:    	mov    QWORD PTR [rbx],r14
  00353:    	mov    r14,QWORD PTR [rbp-0x10]
  00357:    	movq   xmm2,QWORD PTR [rsp]
  0035c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00362:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00368:    	add    rsp,0x20
  0036c: f6 	movabs r13,0x55f67b88d810
  00376:    	test   rax,rax
  00379:    	je     0xfffe597b
  0037f:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  00383:    	sub    rsp,0x20
  00387:    	movq   QWORD PTR [rsp],xmm2
  0038c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00392:    	movq   QWORD PTR [rsp+0x10],xmm4
  00398:    	mov    rdx,QWORD PTR [r14-0x38]
  0039c:    	mov    rcx,QWORD PTR [r14-0x48]
  003a0:    	mov    r8,QWORD PTR [r14-0x50]
  003a4:    	mov    rdi,rbx
  003a7:    	mov    rsi,r12
  003aa: f6 	movabs rax,0x55f67a71b750
  003b4:    	call   rax
  003b6:    	movq   xmm2,QWORD PTR [rsp]
  003bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c7:    	add    rsp,0x20
  003cb: f6 	movabs r13,0x55f67b88d830
  003d5:    	test   rax,rax
  003d8:    	je     0xfffe597b
:00025 %3 = %2.call x()                     [Vec]
  003de:    	mov    rdi,QWORD PTR [r14-0x40]
  003e2: 00 	test   rdi,0x7
  003e9:    	jne    0x32062
  003ef:    	cmp    DWORD PTR [rdi+0x4],0x28
  003f3:    	jne    0x32062
  003f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe88fd],0x26        # 0xfffe8cfd
  00400:    	jne    0x32062
  00406:    	mov    esi,DWORD PTR [rip+0x1ae8]        # 0x1ef4
  0040c:    	cmp    esi,0xffffffff
  0040f:    	je     0x32071
  00415:    	cmp    WORD PTR [rdi+0x2],0x3
  0041a:    	jne    0x433
  00420:    	cmp    esi,0x6
  00423:    	jge    0x433
  00429:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0042e:    	jmp    0x469
  00433:    	sub    rsp,0x20
  00437:    	movq   QWORD PTR [rsp],xmm2
  0043c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00442:    	movq   QWORD PTR [rsp+0x10],xmm4
  00448: f6 	movabs rax,0x55f67a69e160
  00452:    	call   rax
  00454:    	movq   xmm2,QWORD PTR [rsp]
  00459:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00465:    	add    rsp,0x20
  00469:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  0046d: 00 	movq   xmm5,QWORD PTR [rip+0x1a83]        # 0x1ef8
  00475: 99 	movabs rax,0xff1999999999999a
  0047f:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00483:    	mov    rdi,QWORD PTR [r14-0x48]
  00487: 00 	test   rdi,0x1
  0048e:    	jne    0x320c4
  00494: 00 	test   rdi,0x2
  0049b:    	je     0x4d7
  004a1:    	xorps  xmm6,xmm6
  004a4: 00 	movabs rax,0x8000000000000002
  004ae:    	cmp    rdi,rax
  004b1:    	je     0x4e9
  004b7:    	mov    rax,rdi
  004ba:    	sar    rax,0x3f
  004be:    	add    rax,0x2
  004c2:    	and    rdi,0xfffffffffffffffc
  004c6:    	or     rdi,rax
  004c9:    	rol    rdi,0x3d
  004cd:    	movq   xmm6,rdi
  004d2:    	jmp    0x4e9
  004d7:    	call   0xfffe59d4
  004dc:    	test   rax,rax
  004df:    	je     0x320c4
  004e5:    	movq   xmm6,xmm0
  004e9:    	ucomisd xmm6,xmm5
  004ed:    	jae    0x321c5
:00031 %3 = %2.call x()                     [Vec]
  004f3:    	mov    rdi,QWORD PTR [r14-0x40]
  004f7: 00 	test   rdi,0x7
  004fe:    	jne    0x320d3
  00504:    	cmp    DWORD PTR [rdi+0x4],0x28
  00508:    	jne    0x320d3
  0050e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe87e8],0x26        # 0xfffe8cfd
  00515:    	jne    0x320d3
  0051b:    	mov    esi,DWORD PTR [rip+0x19e3]        # 0x1f04
  00521:    	cmp    esi,0xffffffff
  00524:    	je     0x320e2
  0052a:    	cmp    WORD PTR [rdi+0x2],0x3
  0052f:    	jne    0x548
  00535:    	cmp    esi,0x6
  00538:    	jge    0x548
  0053e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00543:    	jmp    0x58a
  00548:    	sub    rsp,0x20
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563: f6 	movabs rax,0x55f67a69e160
  0056d:    	call   rax
  0056f:    	movq   xmm2,QWORD PTR [rsp]
  00574:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0057a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00580:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00586:    	add    rsp,0x20
  0058a:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  0058e: 00 	movq   xmm5,QWORD PTR [rip+0x1972]        # 0x1f08
  00596: 99 	movabs rax,0xff1999999999999e
  005a0:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005a4:    	mov    rdi,QWORD PTR [r14-0x48]
  005a8: 00 	test   rdi,0x1
  005af:    	jne    0x32141
  005b5: 00 	test   rdi,0x2
  005bc:    	je     0x5f8
  005c2:    	xorps  xmm6,xmm6
  005c5: 00 	movabs rax,0x8000000000000002
  005cf:    	cmp    rdi,rax
  005d2:    	je     0x60a
  005d8:    	mov    rax,rdi
  005db:    	sar    rax,0x3f
  005df:    	add    rax,0x2
  005e3:    	and    rdi,0xfffffffffffffffc
  005e7:    	or     rdi,rax
  005ea:    	rol    rdi,0x3d
  005ee:    	movq   xmm6,rdi
  005f3:    	jmp    0x60a
  005f8:    	call   0xfffe59d4
  005fd:    	test   rax,rax
  00600:    	je     0x32141
  00606:    	movq   xmm6,xmm0
  0060a:    	ucomisd xmm6,xmm5
  0060e:    	jbe    0x321de
:00037 %3 = 1: i32
  00614: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0061c:    	sub    rsp,0x20
  00620:    	movq   QWORD PTR [rsp],xmm2
  00625:    	movq   QWORD PTR [rsp+0x8],xmm3
  0062b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00631:    	movq   QWORD PTR [rsp+0x18],xmm5
  00637:    	mov    rdx,QWORD PTR [r14-0x38]
  0063b:    	mov    rcx,QWORD PTR [r14-0x48]
  0063f:    	mov    rdi,rbx
  00642:    	mov    rsi,r12
  00645: f6 	movabs r8,0x55f67b88d908
  0064f: f6 	movabs rax,0x55f67a71b620
  00659:    	call   rax
  0065b:    	movq   xmm2,QWORD PTR [rsp]
  00660:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00666:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0066c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00672:    	add    rsp,0x20
  00676: f6 	movabs r13,0x55f67b88d910
  00680:    	test   rax,rax
  00683:    	je     0xfffe597b
  00689:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  0068d: 00 	movq   xmm5,QWORD PTR [rip+0x1883]        # 0x1f18
  00695: 00 	movabs rax,0xff80000000000002
  0069f:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006a3:    	mov    rdi,QWORD PTR [r14-0x48]
  006a7: 00 	test   rdi,0x7
  006ae:    	jne    0x32150
  006b4:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b8:    	jne    0x32150
  006be: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8638],0x26        # 0xfffe8cfd
  006c5:    	jne    0x32150
  006cb:    	mov    esi,DWORD PTR [rip+0x1853]        # 0x1f24
  006d1:    	cmp    esi,0xffffffff
  006d4:    	je     0x3215f
  006da:    	cmp    WORD PTR [rdi+0x2],0x3
  006df:    	jne    0x6fc
  006e5:    	cmp    esi,0x6
  006e8:    	jge    0x6fc
  006ee:    	mov    rax,QWORD PTR [r14-0x50]
  006f2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f7:    	jmp    0x755
  006fc:    	sub    rsp,0x20
  00700:    	movq   QWORD PTR [rsp],xmm2
  00705:    	movq   QWORD PTR [rsp+0x8],xmm3
  0070b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00711:    	movq   QWORD PTR [rsp+0x18],xmm5
  00717:    	mov    rdx,QWORD PTR [r14-0x50]
  0071b: f6 	movabs rax,0x55f67a69e3e0
  00725:    	call   rax
  00727:    	movq   xmm2,QWORD PTR [rsp]
  0072c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00732:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00738:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0073e:    	add    rsp,0x20
  00742: f6 	movabs r13,0x55f67b88d940
  0074c:    	test   rax,rax
  0074f:    	je     0xfffe597b
:00041 
:00043 br =>:00088
  00755:    	jmp    0x32800
:00044 %3 = %2.call y()                     [<INVALID>]
  0075a: 01 	sub    DWORD PTR [rip+0x17c7],0x1        # 0x1f28
  00761:    	je     0x32206
  00767:    	sub    rsp,0x20
  0076b:    	movq   QWORD PTR [rsp],xmm2
  00770:    	movq   QWORD PTR [rsp+0x8],xmm3
  00776:    	movq   QWORD PTR [rsp+0x10],xmm4
  0077c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00782:    	mov    rdi,QWORD PTR [r14-0x40]
  00786: f6 	movabs rax,0x55f67a7285d0
  00790:    	call   rax
  00792:    	mov    r15d,eax
  00795: f6 	movabs r13,0x55f67b88d970
  0079f:    	cmp    r15d,DWORD PTR [r13-0x8]
  007a3:    	jne    0x32224
  007a9:    	mov    eax,DWORD PTR [rip+0xfffffffffffe854e]        # 0xfffe8cfd
  007af:    	cmp    DWORD PTR [r13-0x4],eax
  007b3:    	jne    0x32224
  007b9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007c2:    	mov    rsi,QWORD PTR [rbx]
  007c5:    	mov    QWORD PTR [rsp-0x18],rsi
  007ca:    	lea    rsi,[rsp-0x18]
  007cf:    	mov    QWORD PTR [rbx],rsi
  007d2:    	mov    rax,QWORD PTR [r14-0x40]
  007d6:    	mov    QWORD PTR [rsp-0x40],rax
  007db: 00 	mov    rdi,0x0
  007e2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  007eb:    	lea    r14,[rsp-0x10]
  007f0:    	mov    QWORD PTR [rsp-0x20],r14
  007f5: 00 	movabs rax,0x0
  007ff:    	mov    QWORD PTR [rsp-0x30],rax
  00804: 00 	movabs r13,0x0
  0080e:    	call   0xfffe5948
  00813:    	lea    r14,[rbp-0x8]
  00817:    	mov    QWORD PTR [rbx],r14
  0081a:    	mov    r14,QWORD PTR [rbp-0x10]
  0081e:    	movq   xmm2,QWORD PTR [rsp]
  00823:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00829:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0082f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00835:    	add    rsp,0x20
  00839:    	test   rax,rax
  0083c:    	je     0x32297
  00842:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  00846: 00 	movq   xmm5,QWORD PTR [rip+0x16ea]        # 0x1f38
  0084e: 99 	movabs rax,0xff1999999999999a
  00858:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  0085c:    	mov    rdi,QWORD PTR [r14-0x48]
  00860:    	mov    rsi,QWORD PTR [r14-0x50]
  00864: 00 	test   rdi,0x1
  0086b:    	je     0x322a6
  00871: 00 	test   rsi,0x1
  00878:    	je     0x322a6
  0087e:    	cmp    rdi,rsi
  00881:    	jge    0x32454
:00050 %3 = %2.call y()                     [<INVALID>]
  00887:    	sub    rsp,0x20
  0088b:    	movq   QWORD PTR [rsp],xmm2
  00890:    	movq   QWORD PTR [rsp+0x8],xmm3
  00896:    	movq   QWORD PTR [rsp+0x10],xmm4
  0089c:    	movq   QWORD PTR [rsp+0x18],xmm5
  008a2:    	mov    rdi,QWORD PTR [r14-0x40]
  008a6: f6 	movabs rax,0x55f67a7285d0
  008b0:    	call   rax
  008b2:    	mov    r15d,eax
  008b5: f6 	movabs r13,0x55f67b88d9d0
  008bf:    	cmp    r15d,DWORD PTR [r13-0x8]
  008c3:    	jne    0x322fb
  008c9:    	mov    eax,DWORD PTR [rip+0xfffffffffffe842e]        # 0xfffe8cfd
  008cf:    	cmp    DWORD PTR [r13-0x4],eax
  008d3:    	jne    0x322fb
  008d9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  008e2:    	mov    rsi,QWORD PTR [rbx]
  008e5:    	mov    QWORD PTR [rsp-0x18],rsi
  008ea:    	lea    rsi,[rsp-0x18]
  008ef:    	mov    QWORD PTR [rbx],rsi
  008f2:    	mov    rax,QWORD PTR [r14-0x40]
  008f6:    	mov    QWORD PTR [rsp-0x40],rax
  008fb: 00 	mov    rdi,0x0
  00902: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0090b:    	lea    r14,[rsp-0x10]
  00910:    	mov    QWORD PTR [rsp-0x20],r14
  00915: 00 	movabs rax,0x0
  0091f:    	mov    QWORD PTR [rsp-0x30],rax
  00924: 00 	movabs r13,0x0
  0092e:    	call   0xfffe5948
  00933:    	lea    r14,[rbp-0x8]
  00937:    	mov    QWORD PTR [rbx],r14
  0093a:    	mov    r14,QWORD PTR [rbp-0x10]
  0093e:    	movq   xmm2,QWORD PTR [rsp]
  00943:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00949:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0094f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00955:    	add    rsp,0x20
  00959:    	test   rax,rax
  0095c:    	je     0x3236e
  00962:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  00966: 00 	movq   xmm5,QWORD PTR [rip+0x15da]        # 0x1f48
  0096e: 99 	movabs rax,0xff1999999999999e
  00978:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  0097c:    	mov    rdi,QWORD PTR [r14-0x48]
  00980:    	mov    rsi,QWORD PTR [r14-0x50]
  00984: 00 	test   rdi,0x1
  0098b:    	je     0x3237d
  00991: 00 	test   rsi,0x1
  00998:    	je     0x3237d
  0099e:    	cmp    rdi,rsi
  009a1:    	jle    0x3246d
:00056 %3 = 1: i32
  009a7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009af:    	sub    rsp,0x20
  009b3:    	movq   QWORD PTR [rsp],xmm2
  009b8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009be:    	movq   QWORD PTR [rsp+0x10],xmm4
  009c4:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ca:    	mov    rdx,QWORD PTR [r14-0x38]
  009ce:    	mov    rcx,QWORD PTR [r14-0x48]
  009d2:    	mov    rdi,rbx
  009d5:    	mov    rsi,r12
  009d8: f6 	movabs r8,0x55f67b88da38
  009e2: f6 	movabs rax,0x55f67a71b620
  009ec:    	call   rax
  009ee:    	movq   xmm2,QWORD PTR [rsp]
  009f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a05:    	add    rsp,0x20
  00a09: f6 	movabs r13,0x55f67b88da40
  00a13:    	test   rax,rax
  00a16:    	je     0xfffe597b
  00a1c:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  00a20: 00 	movq   xmm5,QWORD PTR [rip+0x1530]        # 0x1f58
  00a28: 00 	movabs rax,0xff80000000000002
  00a32:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a36:    	sub    rsp,0x20
  00a3a:    	movq   QWORD PTR [rsp],xmm2
  00a3f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a45:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a4b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a51:    	mov    rdi,QWORD PTR [r14-0x48]
  00a55: f6 	movabs rax,0x55f67a7285d0
  00a5f:    	call   rax
  00a61:    	mov    r15d,eax
  00a64: f6 	movabs r13,0x55f67b88da60
  00a6e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a72:    	jne    0x323d2
  00a78:    	mov    eax,DWORD PTR [rip+0xfffffffffffe827f]        # 0xfffe8cfd
  00a7e:    	cmp    DWORD PTR [r13-0x4],eax
  00a82:    	jne    0x323d2
  00a88: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a91:    	mov    rsi,QWORD PTR [rbx]
  00a94:    	mov    QWORD PTR [rsp-0x18],rsi
  00a99:    	lea    rsi,[rsp-0x18]
  00a9e:    	mov    QWORD PTR [rbx],rsi
  00aa1:    	mov    rax,QWORD PTR [r14-0x48]
  00aa5:    	mov    QWORD PTR [rsp-0x40],rax
  00aaa: 00 	mov    rdi,0x1
  00ab1:    	lea    r8,[rsp-0x48]
  00ab6:    	mov    rax,QWORD PTR [r14-0x50]
  00aba:    	mov    QWORD PTR [r8],rax
  00abd:    	sub    r8,0x8
  00ac1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00aca:    	lea    r14,[rsp-0x10]
  00acf:    	mov    QWORD PTR [rsp-0x20],r14
  00ad4: 00 	movabs rax,0x0
  00ade:    	mov    QWORD PTR [rsp-0x30],rax
  00ae3: 00 	movabs r13,0x0
  00aed:    	call   0xfffe5948
  00af2:    	lea    r14,[rbp-0x8]
  00af6:    	mov    QWORD PTR [rbx],r14
  00af9:    	mov    r14,QWORD PTR [rbp-0x10]
  00afd:    	movq   xmm2,QWORD PTR [rsp]
  00b02:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b08:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b0e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b14:    	add    rsp,0x20
  00b18:    	test   rax,rax
  00b1b:    	je     0x32445
:00060 
:00062 br =>:00088
  00b21:    	jmp    0x32819
:00063 %3 = %2.call z()                     [<INVALID>]
  00b26: 01 	sub    DWORD PTR [rip+0x1433],0x1        # 0x1f60
  00b2d:    	je     0x32495
  00b33:    	sub    rsp,0x20
  00b37:    	movq   QWORD PTR [rsp],xmm2
  00b3c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b42:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b48:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b4e:    	mov    rdi,QWORD PTR [r14-0x40]
  00b52: f6 	movabs rax,0x55f67a7285d0
  00b5c:    	call   rax
  00b5e:    	mov    r15d,eax
  00b61: f6 	movabs r13,0x55f67b88daa0
  00b6b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b6f:    	jne    0x324b3
  00b75:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8182]        # 0xfffe8cfd
  00b7b:    	cmp    DWORD PTR [r13-0x4],eax
  00b7f:    	jne    0x324b3
  00b85: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b8e:    	mov    rsi,QWORD PTR [rbx]
  00b91:    	mov    QWORD PTR [rsp-0x18],rsi
  00b96:    	lea    rsi,[rsp-0x18]
  00b9b:    	mov    QWORD PTR [rbx],rsi
  00b9e:    	mov    rax,QWORD PTR [r14-0x40]
  00ba2:    	mov    QWORD PTR [rsp-0x40],rax
  00ba7: 00 	mov    rdi,0x0
  00bae: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00bb7:    	lea    r14,[rsp-0x10]
  00bbc:    	mov    QWORD PTR [rsp-0x20],r14
  00bc1: 00 	movabs rax,0x0
  00bcb:    	mov    QWORD PTR [rsp-0x30],rax
  00bd0: 00 	movabs r13,0x0
  00bda:    	call   0xfffe5948
  00bdf:    	lea    r14,[rbp-0x8]
  00be3:    	mov    QWORD PTR [rbx],r14
  00be6:    	mov    r14,QWORD PTR [rbp-0x10]
  00bea:    	movq   xmm2,QWORD PTR [rsp]
  00bef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bf5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bfb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c01:    	add    rsp,0x20
  00c05:    	test   rax,rax
  00c08:    	je     0x32526
  00c0e:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00c12: 00 	movq   xmm5,QWORD PTR [rip+0x134e]        # 0x1f68
  00c1a: 99 	movabs rax,0xff1999999999999a
  00c24:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00c28:    	mov    rdi,QWORD PTR [r14-0x48]
  00c2c:    	mov    rsi,QWORD PTR [r14-0x50]
  00c30: 00 	test   rdi,0x1
  00c37:    	je     0x32535
  00c3d: 00 	test   rsi,0x1
  00c44:    	je     0x32535
  00c4a:    	cmp    rdi,rsi
  00c4d:    	jge    0x326e3
:00069 %3 = %2.call z()                     [<INVALID>]
  00c53:    	sub    rsp,0x20
  00c57:    	movq   QWORD PTR [rsp],xmm2
  00c5c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c62:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c68:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c6e:    	mov    rdi,QWORD PTR [r14-0x40]
  00c72: f6 	movabs rax,0x55f67a7285d0
  00c7c:    	call   rax
  00c7e:    	mov    r15d,eax
  00c81: f6 	movabs r13,0x55f67b88db00
  00c8b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c8f:    	jne    0x3258a
  00c95:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8062]        # 0xfffe8cfd
  00c9b:    	cmp    DWORD PTR [r13-0x4],eax
  00c9f:    	jne    0x3258a
  00ca5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00cae:    	mov    rsi,QWORD PTR [rbx]
  00cb1:    	mov    QWORD PTR [rsp-0x18],rsi
  00cb6:    	lea    rsi,[rsp-0x18]
  00cbb:    	mov    QWORD PTR [rbx],rsi
  00cbe:    	mov    rax,QWORD PTR [r14-0x40]
  00cc2:    	mov    QWORD PTR [rsp-0x40],rax
  00cc7: 00 	mov    rdi,0x0
  00cce: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cd7:    	lea    r14,[rsp-0x10]
  00cdc:    	mov    QWORD PTR [rsp-0x20],r14
  00ce1: 00 	movabs rax,0x0
  00ceb:    	mov    QWORD PTR [rsp-0x30],rax
  00cf0: 00 	movabs r13,0x0
  00cfa:    	call   0xfffe5948
  00cff:    	lea    r14,[rbp-0x8]
  00d03:    	mov    QWORD PTR [rbx],r14
  00d06:    	mov    r14,QWORD PTR [rbp-0x10]
  00d0a:    	movq   xmm2,QWORD PTR [rsp]
  00d0f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d15:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d1b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d21:    	add    rsp,0x20
  00d25:    	test   rax,rax
  00d28:    	je     0x325fd
  00d2e:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00d32: 00 	movq   xmm5,QWORD PTR [rip+0x123e]        # 0x1f78
  00d3a: 99 	movabs rax,0xff1999999999999e
  00d44:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d48:    	mov    rdi,QWORD PTR [r14-0x48]
  00d4c:    	mov    rsi,QWORD PTR [r14-0x50]
  00d50: 00 	test   rdi,0x1
  00d57:    	je     0x3260c
  00d5d: 00 	test   rsi,0x1
  00d64:    	je     0x3260c
  00d6a:    	cmp    rdi,rsi
  00d6d:    	jle    0x326fc
:00075 %3 = 1: i32
  00d73: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00d7b:    	sub    rsp,0x20
  00d7f:    	movq   QWORD PTR [rsp],xmm2
  00d84:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d8a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d90:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d96:    	mov    rdx,QWORD PTR [r14-0x38]
  00d9a:    	mov    rcx,QWORD PTR [r14-0x48]
  00d9e:    	mov    rdi,rbx
  00da1:    	mov    rsi,r12
  00da4: f6 	movabs r8,0x55f67b88db68
  00dae: f6 	movabs rax,0x55f67a71b620
  00db8:    	call   rax
  00dba:    	movq   xmm2,QWORD PTR [rsp]
  00dbf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dc5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dcb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dd1:    	add    rsp,0x20
  00dd5: f6 	movabs r13,0x55f67b88db70
  00ddf:    	test   rax,rax
  00de2:    	je     0xfffe597b
  00de8:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00dec: 00 	movq   xmm5,QWORD PTR [rip+0x1194]        # 0x1f88
  00df4: 00 	movabs rax,0xff80000000000002
  00dfe:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00e02:    	sub    rsp,0x20
  00e06:    	movq   QWORD PTR [rsp],xmm2
  00e0b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e11:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e17:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e1d:    	mov    rdi,QWORD PTR [r14-0x48]
  00e21: f6 	movabs rax,0x55f67a7285d0
  00e2b:    	call   rax
  00e2d:    	mov    r15d,eax
  00e30: f6 	movabs r13,0x55f67b88db90
  00e3a:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e3e:    	jne    0x32661
  00e44:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7eb3]        # 0xfffe8cfd
  00e4a:    	cmp    DWORD PTR [r13-0x4],eax
  00e4e:    	jne    0x32661
  00e54: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e5d:    	mov    rsi,QWORD PTR [rbx]
  00e60:    	mov    QWORD PTR [rsp-0x18],rsi
  00e65:    	lea    rsi,[rsp-0x18]
  00e6a:    	mov    QWORD PTR [rbx],rsi
  00e6d:    	mov    rax,QWORD PTR [r14-0x48]
  00e71:    	mov    QWORD PTR [rsp-0x40],rax
  00e76: 00 	mov    rdi,0x1
  00e7d:    	lea    r8,[rsp-0x48]
  00e82:    	mov    rax,QWORD PTR [r14-0x50]
  00e86:    	mov    QWORD PTR [r8],rax
  00e89:    	sub    r8,0x8
  00e8d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e96:    	lea    r14,[rsp-0x10]
  00e9b:    	mov    QWORD PTR [rsp-0x20],r14
  00ea0: 00 	movabs rax,0x0
  00eaa:    	mov    QWORD PTR [rsp-0x30],rax
  00eaf: 00 	movabs r13,0x0
  00eb9:    	call   0xfffe5948
  00ebe:    	lea    r14,[rbp-0x8]
  00ec2:    	mov    QWORD PTR [rbx],r14
  00ec5:    	mov    r14,QWORD PTR [rbp-0x10]
  00ec9:    	movq   xmm2,QWORD PTR [rsp]
  00ece:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ed4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eda:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ee0:    	add    rsp,0x20
  00ee4:    	test   rax,rax
  00ee7:    	je     0x326d4
:00079 
:00081 br =>:00088
  00eed:    	jmp    0x32832
:00082 %3 = 1: i32
  00ef2: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00efa:    	sub    rsp,0x20
  00efe:    	movq   QWORD PTR [rsp],xmm2
  00f03:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f09:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f0f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f15:    	mov    rdx,QWORD PTR [r14-0x38]
  00f19:    	mov    rcx,QWORD PTR [r14-0x48]
  00f1d:    	mov    rdi,rbx
  00f20:    	mov    rsi,r12
  00f23: f6 	movabs r8,0x55f67b88dbd8
  00f2d: f6 	movabs rax,0x55f67a71b620
  00f37:    	call   rax
  00f39:    	movq   xmm2,QWORD PTR [rsp]
  00f3e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f44:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f4a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f50:    	add    rsp,0x20
  00f54: f6 	movabs r13,0x55f67b88dbe0
  00f5e:    	test   rax,rax
  00f61:    	je     0xfffe597b
  00f67:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00f6b: 00 	movq   xmm5,QWORD PTR [rip+0x1025]        # 0x1f98
  00f73: 00 	movabs rax,0xff80000000000002
  00f7d:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f81: 01 	sub    DWORD PTR [rip+0x1018],0x1        # 0x1fa0
  00f88:    	je     0x32724
  00f8e:    	sub    rsp,0x20
  00f92:    	movq   QWORD PTR [rsp],xmm2
  00f97:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f9d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fa3:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fa9:    	mov    rdi,QWORD PTR [r14-0x48]
  00fad: f6 	movabs rax,0x55f67a7285d0
  00fb7:    	call   rax
  00fb9:    	mov    r15d,eax
  00fbc: f6 	movabs r13,0x55f67b88dc00
  00fc6:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fca:    	jne    0x32742
  00fd0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7d27]        # 0xfffe8cfd
  00fd6:    	cmp    DWORD PTR [r13-0x4],eax
  00fda:    	jne    0x32742
  00fe0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fe9:    	mov    rsi,QWORD PTR [rbx]
  00fec:    	mov    QWORD PTR [rsp-0x18],rsi
  00ff1:    	lea    rsi,[rsp-0x18]
  00ff6:    	mov    QWORD PTR [rbx],rsi
  00ff9:    	mov    rax,QWORD PTR [r14-0x48]
  00ffd:    	mov    QWORD PTR [rsp-0x40],rax
  01002: 00 	mov    rdi,0x1
  01009:    	lea    r8,[rsp-0x48]
  0100e:    	mov    rax,QWORD PTR [r14-0x50]
  01012:    	mov    QWORD PTR [r8],rax
  01015:    	sub    r8,0x8
  01019: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01022:    	lea    r14,[rsp-0x10]
  01027:    	mov    QWORD PTR [rsp-0x20],r14
  0102c: 00 	movabs rax,0x0
  01036:    	mov    QWORD PTR [rsp-0x30],rax
  0103b: 00 	movabs r13,0x0
  01045:    	call   0xfffe5948
  0104a:    	lea    r14,[rbp-0x8]
  0104e:    	mov    QWORD PTR [rbx],r14
  01051:    	mov    r14,QWORD PTR [rbp-0x10]
  01055:    	movq   xmm2,QWORD PTR [rsp]
  0105a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01060:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01066:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0106c:    	add    rsp,0x20
  01070:    	test   rax,rax
  01073:    	je     0x327b5
:00086 
:00088 %3 = 0: i32
  01079: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  01081: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01089:    	sub    rsp,0x20
  0108d:    	movq   QWORD PTR [rsp],xmm2
  01092:    	movq   QWORD PTR [rsp+0x8],xmm3
  01098:    	movq   QWORD PTR [rsp+0x10],xmm4
  0109e:    	movq   QWORD PTR [rsp+0x18],xmm5
  010a4:    	mov    rdx,QWORD PTR [r14-0x38]
  010a8:    	mov    rcx,QWORD PTR [r14-0x58]
  010ac:    	mov    rdi,rbx
  010af:    	mov    rsi,r12
  010b2: f6 	movabs r8,0x55f67b88dc48
  010bc: f6 	movabs rax,0x55f67a71b620
  010c6:    	call   rax
  010c8:    	movq   xmm2,QWORD PTR [rsp]
  010cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010d3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010d9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010df:    	add    rsp,0x20
  010e3: f6 	movabs r13,0x55f67b88dc50
  010ed:    	test   rax,rax
  010f0:    	je     0xfffe597b
  010f6:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  010fa: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01102:    	sub    rsp,0x20
  01106:    	movq   QWORD PTR [rsp],xmm3
  0110b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01111:    	movq   QWORD PTR [rsp+0x10],xmm5
  01117:    	mov    rdx,QWORD PTR [r14-0x38]
  0111b:    	mov    rcx,QWORD PTR [r14-0x60]
  0111f:    	mov    rdi,rbx
  01122:    	mov    rsi,r12
  01125: f6 	movabs r8,0x55f67b88dc68
  0112f: f6 	movabs rax,0x55f67a71b620
  01139:    	call   rax
  0113b:    	movq   xmm3,QWORD PTR [rsp]
  01140:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01146:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0114c:    	add    rsp,0x20
  01150: f6 	movabs r13,0x55f67b88dc70
  0115a:    	test   rax,rax
  0115d:    	je     0xfffe597b
  01163:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01167:    	mov    rdi,QWORD PTR [r14-0x58]
  0116b: 00 	test   rdi,0x7
  01172:    	jne    0x327c4
  01178:    	cmp    DWORD PTR [rdi+0x4],0x28
  0117c:    	jne    0x327c4
  01182: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7b74],0x26        # 0xfffe8cfd
  01189:    	jne    0x327c4
  0118f:    	sub    rsp,0x10
  01193:    	movq   QWORD PTR [rsp],xmm3
  01198:    	movq   QWORD PTR [rsp+0x8],xmm4
  0119e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011a7:    	mov    rax,QWORD PTR [r14-0x58]
  011ab:    	mov    QWORD PTR [rsp-0x40],rax
  011b0: 00 	mov    rdi,0x1
  011b7:    	lea    r8,[rsp-0x48]
  011bc:    	mov    rax,QWORD PTR [r14-0x60]
  011c0:    	mov    QWORD PTR [r8],rax
  011c3:    	sub    r8,0x8
  011c7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011d0: 09 	movabs rax,0x900000041
  011da:    	mov    QWORD PTR [rsp-0x30],rax
  011df: f6 	movabs r13,0x55f67b86c170
  011e9:    	mov    rsi,QWORD PTR [rbx]
  011ec:    	mov    QWORD PTR [rsp-0x18],rsi
  011f1:    	lea    rsi,[rsp-0x18]
  011f6:    	mov    QWORD PTR [rbx],rsi
  011f9:    	lea    r14,[rsp-0x10]
  011fe:    	mov    QWORD PTR [rsp-0x20],r14
  01203:    	call   0xffff29b7
  01208:    	lea    r14,[rbp-0x8]
  0120c:    	mov    QWORD PTR [rbx],r14
  0120f:    	mov    r14,QWORD PTR [rbp-0x10]
  01213:    	movq   xmm3,QWORD PTR [rsp]
  01218:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0121e:    	add    rsp,0x10
  01222: f6 	movabs r13,0x55f67b88dc90
  0122c:    	test   rax,rax
  0122f:    	je     0xfffe597b
  01235:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01239:    	sub    rsp,0x10
  0123d:    	movq   QWORD PTR [rsp],xmm3
  01242:    	movq   QWORD PTR [rsp+0x8],xmm4
  01248:    	mov    rdx,QWORD PTR [r14-0x38]
  0124c:    	mov    rcx,QWORD PTR [r14-0x48]
  01250:    	mov    r8,QWORD PTR [r14-0x50]
  01254:    	mov    rdi,rbx
  01257:    	mov    rsi,r12
  0125a: f6 	movabs rax,0x55f67a71b750
  01264:    	call   rax
  01266:    	movq   xmm3,QWORD PTR [rsp]
  0126b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01271:    	add    rsp,0x10
  01275: f6 	movabs r13,0x55f67b88dcb0
  0127f:    	test   rax,rax
  01282:    	je     0xfffe597b
:00097 %3 = 0: i32
  01288: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  01290: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01298:    	sub    rsp,0x10
  0129c:    	movq   QWORD PTR [rsp],xmm3
  012a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012a7:    	mov    rdx,QWORD PTR [r14-0x38]
  012ab:    	mov    rcx,QWORD PTR [r14-0x58]
  012af:    	mov    rdi,rbx
  012b2:    	mov    rsi,r12
  012b5: f6 	movabs r8,0x55f67b88dcd8
  012bf: f6 	movabs rax,0x55f67a71b620
  012c9:    	call   rax
  012cb:    	movq   xmm3,QWORD PTR [rsp]
  012d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d6:    	add    rsp,0x10
  012da: f6 	movabs r13,0x55f67b88dce0
  012e4:    	test   rax,rax
  012e7:    	je     0xfffe597b
  012ed:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  012f1:    	mov    rdi,QWORD PTR [r14-0x58]
  012f5: 00 	test   rdi,0x7
  012fc:    	jne    0x327d3
  01302:    	cmp    DWORD PTR [rdi+0x4],0x28
  01306:    	jne    0x327d3
  0130c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe79ea],0x26        # 0xfffe8cfd
  01313:    	jne    0x327d3
  01319:    	sub    rsp,0x10
  0131d:    	movq   QWORD PTR [rsp],xmm3
  01322:    	movq   QWORD PTR [rsp+0x8],xmm4
  01328: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01331:    	mov    rax,QWORD PTR [r14-0x58]
  01335:    	mov    QWORD PTR [rsp-0x40],rax
  0133a: 00 	mov    rdi,0x0
  01341: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0134a: 07 	movabs rax,0x1000700000044
  01354:    	mov    QWORD PTR [rsp-0x30],rax
  01359: f6 	movabs r13,0x55f67b84eec0
  01363:    	mov    rsi,QWORD PTR [rbx]
  01366:    	mov    QWORD PTR [rsp-0x18],rsi
  0136b:    	lea    rsi,[rsp-0x18]
  01370:    	mov    QWORD PTR [rbx],rsi
  01373:    	lea    r14,[rsp-0x10]
  01378:    	mov    QWORD PTR [rsp-0x20],r14
  0137d:    	call   0xfffe9604
  01382:    	lea    r14,[rbp-0x8]
  01386:    	mov    QWORD PTR [rbx],r14
  01389:    	mov    r14,QWORD PTR [rbp-0x10]
  0138d:    	movq   xmm3,QWORD PTR [rsp]
  01392:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01398:    	add    rsp,0x10
  0139c: f6 	movabs r13,0x55f67b88dd00
  013a6:    	test   rax,rax
  013a9:    	je     0xfffe597b
  013af:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  013b3:    	sub    rsp,0x10
  013b7:    	movq   QWORD PTR [rsp],xmm3
  013bc:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c2:    	mov    rdx,QWORD PTR [r14-0x38]
  013c6:    	mov    rcx,QWORD PTR [r14-0x48]
  013ca:    	mov    r8,QWORD PTR [r14-0x50]
  013ce:    	mov    rdi,rbx
  013d1:    	mov    rsi,r12
  013d4: f6 	movabs rax,0x55f67a71b750
  013de:    	call   rax
  013e0:    	movq   xmm3,QWORD PTR [rsp]
  013e5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013eb:    	add    rsp,0x10
  013ef: f6 	movabs r13,0x55f67b88dd20
  013f9:    	test   rax,rax
  013fc:    	je     0xfffe597b
:00104 %3 = 1: i32
  01402: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  0140a: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01412:    	sub    rsp,0x10
  01416:    	movq   QWORD PTR [rsp],xmm3
  0141b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01421:    	mov    rdx,QWORD PTR [r14-0x38]
  01425:    	mov    rcx,QWORD PTR [r14-0x58]
  01429:    	mov    rdi,rbx
  0142c:    	mov    rsi,r12
  0142f: f6 	movabs r8,0x55f67b88dd48
  01439: f6 	movabs rax,0x55f67a71b620
  01443:    	call   rax
  01445:    	movq   xmm3,QWORD PTR [rsp]
  0144a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01450:    	add    rsp,0x10
  01454: f6 	movabs r13,0x55f67b88dd50
  0145e:    	test   rax,rax
  01461:    	je     0xfffe597b
  01467:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  0146b: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01473:    	sub    rsp,0x10
  01477:    	movq   QWORD PTR [rsp],xmm3
  0147c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01482:    	mov    rdx,QWORD PTR [r14-0x38]
  01486:    	mov    rcx,QWORD PTR [r14-0x60]
  0148a:    	mov    rdi,rbx
  0148d:    	mov    rsi,r12
  01490: f6 	movabs r8,0x55f67b88dd68
  0149a: f6 	movabs rax,0x55f67a71b620
  014a4:    	call   rax
  014a6:    	movq   xmm3,QWORD PTR [rsp]
  014ab:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014b1:    	add    rsp,0x10
  014b5: f6 	movabs r13,0x55f67b88dd70
  014bf:    	test   rax,rax
  014c2:    	je     0xfffe597b
  014c8:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  014cc:    	mov    rdi,QWORD PTR [r14-0x58]
  014d0: 00 	test   rdi,0x7
  014d7:    	jne    0x327e2
  014dd:    	cmp    DWORD PTR [rdi+0x4],0x28
  014e1:    	jne    0x327e2
  014e7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe780f],0x26        # 0xfffe8cfd
  014ee:    	jne    0x327e2
  014f4:    	sub    rsp,0x10
  014f8:    	movq   QWORD PTR [rsp],xmm3
  014fd:    	movq   QWORD PTR [rsp+0x8],xmm4
  01503: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0150c:    	mov    rax,QWORD PTR [r14-0x58]
  01510:    	mov    QWORD PTR [rsp-0x40],rax
  01515: 00 	mov    rdi,0x1
  0151c:    	lea    r8,[rsp-0x48]
  01521:    	mov    rax,QWORD PTR [r14-0x60]
  01525:    	mov    QWORD PTR [r8],rax
  01528:    	sub    r8,0x8
  0152c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01535: 09 	movabs rax,0x900000041
  0153f:    	mov    QWORD PTR [rsp-0x30],rax
  01544: f6 	movabs r13,0x55f67b86c170
  0154e:    	mov    rsi,QWORD PTR [rbx]
  01551:    	mov    QWORD PTR [rsp-0x18],rsi
  01556:    	lea    rsi,[rsp-0x18]
  0155b:    	mov    QWORD PTR [rbx],rsi
  0155e:    	lea    r14,[rsp-0x10]
  01563:    	mov    QWORD PTR [rsp-0x20],r14
  01568:    	call   0xffff29b7
  0156d:    	lea    r14,[rbp-0x8]
  01571:    	mov    QWORD PTR [rbx],r14
  01574:    	mov    r14,QWORD PTR [rbp-0x10]
  01578:    	movq   xmm3,QWORD PTR [rsp]
  0157d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01583:    	add    rsp,0x10
  01587: f6 	movabs r13,0x55f67b88dd90
  01591:    	test   rax,rax
  01594:    	je     0xfffe597b
  0159a:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  0159e:    	sub    rsp,0x10
  015a2:    	movq   QWORD PTR [rsp],xmm3
  015a7:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ad:    	mov    rdx,QWORD PTR [r14-0x38]
  015b1:    	mov    rcx,QWORD PTR [r14-0x48]
  015b5:    	mov    r8,QWORD PTR [r14-0x50]
  015b9:    	mov    rdi,rbx
  015bc:    	mov    rsi,r12
  015bf: f6 	movabs rax,0x55f67a71b750
  015c9:    	call   rax
  015cb:    	movq   xmm3,QWORD PTR [rsp]
  015d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015d6:    	add    rsp,0x10
  015da: f6 	movabs r13,0x55f67b88ddb0
  015e4:    	test   rax,rax
  015e7:    	je     0xfffe597b
:00113 %3 = 1: i32
  015ed: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  015f5: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  015fd:    	sub    rsp,0x10
  01601:    	movq   QWORD PTR [rsp],xmm3
  01606:    	movq   QWORD PTR [rsp+0x8],xmm4
  0160c:    	mov    rdx,QWORD PTR [r14-0x38]
  01610:    	mov    rcx,QWORD PTR [r14-0x58]
  01614:    	mov    rdi,rbx
  01617:    	mov    rsi,r12
  0161a: f6 	movabs r8,0x55f67b88ddd8
  01624: f6 	movabs rax,0x55f67a71b620
  0162e:    	call   rax
  01630:    	movq   xmm3,QWORD PTR [rsp]
  01635:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0163b:    	add    rsp,0x10
  0163f: f6 	movabs r13,0x55f67b88dde0
  01649:    	test   rax,rax
  0164c:    	je     0xfffe597b
  01652:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01656:    	mov    rdi,QWORD PTR [r14-0x58]
  0165a: 00 	test   rdi,0x7
  01661:    	jne    0x327f1
  01667:    	cmp    DWORD PTR [rdi+0x4],0x28
  0166b:    	jne    0x327f1
  01671: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7685],0x26        # 0xfffe8cfd
  01678:    	jne    0x327f1
  0167e:    	sub    rsp,0x10
  01682:    	movq   QWORD PTR [rsp],xmm3
  01687:    	movq   QWORD PTR [rsp+0x8],xmm4
  0168d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01696:    	mov    rax,QWORD PTR [r14-0x58]
  0169a:    	mov    QWORD PTR [rsp-0x40],rax
  0169f: 00 	mov    rdi,0x0
  016a6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016af: 07 	movabs rax,0x1000700000044
  016b9:    	mov    QWORD PTR [rsp-0x30],rax
  016be: f6 	movabs r13,0x55f67b84eec0
  016c8:    	mov    rsi,QWORD PTR [rbx]
  016cb:    	mov    QWORD PTR [rsp-0x18],rsi
  016d0:    	lea    rsi,[rsp-0x18]
  016d5:    	mov    QWORD PTR [rbx],rsi
  016d8:    	lea    r14,[rsp-0x10]
  016dd:    	mov    QWORD PTR [rsp-0x20],r14
  016e2:    	call   0xfffe9604
  016e7:    	lea    r14,[rbp-0x8]
  016eb:    	mov    QWORD PTR [rbx],r14
  016ee:    	mov    r14,QWORD PTR [rbp-0x10]
  016f2:    	movq   xmm3,QWORD PTR [rsp]
  016f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016fd:    	add    rsp,0x10
  01701: f6 	movabs r13,0x55f67b88de00
  0170b:    	test   rax,rax
  0170e:    	je     0xfffe597b
  01714:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01718:    	sub    rsp,0x10
  0171c:    	movq   QWORD PTR [rsp],xmm3
  01721:    	movq   QWORD PTR [rsp+0x8],xmm4
  01727:    	mov    rdx,QWORD PTR [r14-0x38]
  0172b:    	mov    rcx,QWORD PTR [r14-0x48]
  0172f:    	mov    r8,QWORD PTR [r14-0x50]
  01733:    	mov    rdi,rbx
  01736:    	mov    rsi,r12
  01739: f6 	movabs rax,0x55f67a71b750
  01743:    	call   rax
  01745:    	movq   xmm3,QWORD PTR [rsp]
  0174a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01750:    	add    rsp,0x10
  01754: f6 	movabs r13,0x55f67b88de20
  0175e:    	test   rax,rax
  01761:    	je     0xfffe597b
:00120 %3 = %4
  01767:    	mov    rax,QWORD PTR [r14-0x50]
  0176b:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  0176f:    	mov    rax,QWORD PTR [r14-0x48]
  01773:    	leave  
  01774:    	ret    
:00088 %3 = 0: i32
  01775: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  0177d: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01785:    	sub    rsp,0x20
  01789:    	movq   QWORD PTR [rsp],xmm2
  0178e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01794:    	movq   QWORD PTR [rsp+0x10],xmm4
  0179a:    	movq   QWORD PTR [rsp+0x18],xmm5
  017a0:    	mov    rdx,QWORD PTR [r14-0x38]
  017a4:    	mov    rcx,QWORD PTR [r14-0x58]
  017a8:    	mov    rdi,rbx
  017ab:    	mov    rsi,r12
  017ae: f6 	movabs r8,0x55f67b88dc48
  017b8: f6 	movabs rax,0x55f67a71b620
  017c2:    	call   rax
  017c4:    	movq   xmm2,QWORD PTR [rsp]
  017c9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017cf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017d5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017db:    	add    rsp,0x20
  017df: f6 	movabs r13,0x55f67b88dc50
  017e9:    	test   rax,rax
  017ec:    	je     0xfffe597b
  017f2:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  017f6: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  017fe:    	sub    rsp,0x20
  01802:    	movq   QWORD PTR [rsp],xmm3
  01807:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01813:    	mov    rdx,QWORD PTR [r14-0x38]
  01817:    	mov    rcx,QWORD PTR [r14-0x60]
  0181b:    	mov    rdi,rbx
  0181e:    	mov    rsi,r12
  01821: f6 	movabs r8,0x55f67b88dc68
  0182b: f6 	movabs rax,0x55f67a71b620
  01835:    	call   rax
  01837:    	movq   xmm3,QWORD PTR [rsp]
  0183c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01842:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01848:    	add    rsp,0x20
  0184c: f6 	movabs r13,0x55f67b88dc70
  01856:    	test   rax,rax
  01859:    	je     0xfffe597b
  0185f:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01863:    	mov    rdi,QWORD PTR [r14-0x58]
  01867: 00 	test   rdi,0x7
  0186e:    	jne    0x3284b
  01874:    	cmp    DWORD PTR [rdi+0x4],0x28
  01878:    	jne    0x3284b
  0187e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7478],0x26        # 0xfffe8cfd
  01885:    	jne    0x3284b
  0188b:    	sub    rsp,0x10
  0188f:    	movq   QWORD PTR [rsp],xmm3
  01894:    	movq   QWORD PTR [rsp+0x8],xmm4
  0189a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018a3:    	mov    rax,QWORD PTR [r14-0x58]
  018a7:    	mov    QWORD PTR [rsp-0x40],rax
  018ac: 00 	mov    rdi,0x1
  018b3:    	lea    r8,[rsp-0x48]
  018b8:    	mov    rax,QWORD PTR [r14-0x60]
  018bc:    	mov    QWORD PTR [r8],rax
  018bf:    	sub    r8,0x8
  018c3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  018cc: 09 	movabs rax,0x900000041
  018d6:    	mov    QWORD PTR [rsp-0x30],rax
  018db: f6 	movabs r13,0x55f67b86c170
  018e5:    	mov    rsi,QWORD PTR [rbx]
  018e8:    	mov    QWORD PTR [rsp-0x18],rsi
  018ed:    	lea    rsi,[rsp-0x18]
  018f2:    	mov    QWORD PTR [rbx],rsi
  018f5:    	lea    r14,[rsp-0x10]
  018fa:    	mov    QWORD PTR [rsp-0x20],r14
  018ff:    	call   0xffff29b7
  01904:    	lea    r14,[rbp-0x8]
  01908:    	mov    QWORD PTR [rbx],r14
  0190b:    	mov    r14,QWORD PTR [rbp-0x10]
  0190f:    	movq   xmm3,QWORD PTR [rsp]
  01914:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0191a:    	add    rsp,0x10
  0191e: f6 	movabs r13,0x55f67b88dc90
  01928:    	test   rax,rax
  0192b:    	je     0xfffe597b
  01931:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01935:    	sub    rsp,0x10
  01939:    	movq   QWORD PTR [rsp],xmm3
  0193e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01944:    	mov    rdx,QWORD PTR [r14-0x38]
  01948:    	mov    rcx,QWORD PTR [r14-0x48]
  0194c:    	mov    r8,QWORD PTR [r14-0x50]
  01950:    	mov    rdi,rbx
  01953:    	mov    rsi,r12
  01956: f6 	movabs rax,0x55f67a71b750
  01960:    	call   rax
  01962:    	movq   xmm3,QWORD PTR [rsp]
  01967:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0196d:    	add    rsp,0x10
  01971: f6 	movabs r13,0x55f67b88dcb0
  0197b:    	test   rax,rax
  0197e:    	je     0xfffe597b
:00097 %3 = 0: i32
  01984: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  0198c: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01994:    	sub    rsp,0x10
  01998:    	movq   QWORD PTR [rsp],xmm3
  0199d:    	movq   QWORD PTR [rsp+0x8],xmm4
  019a3:    	mov    rdx,QWORD PTR [r14-0x38]
  019a7:    	mov    rcx,QWORD PTR [r14-0x58]
  019ab:    	mov    rdi,rbx
  019ae:    	mov    rsi,r12
  019b1: f6 	movabs r8,0x55f67b88dcd8
  019bb: f6 	movabs rax,0x55f67a71b620
  019c5:    	call   rax
  019c7:    	movq   xmm3,QWORD PTR [rsp]
  019cc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019d2:    	add    rsp,0x10
  019d6: f6 	movabs r13,0x55f67b88dce0
  019e0:    	test   rax,rax
  019e3:    	je     0xfffe597b
  019e9:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  019ed:    	mov    rdi,QWORD PTR [r14-0x58]
  019f1: 00 	test   rdi,0x7
  019f8:    	jne    0x3285a
  019fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  01a02:    	jne    0x3285a
  01a08: 26 	cmp    DWORD PTR [rip+0xfffffffffffe72ee],0x26        # 0xfffe8cfd
  01a0f:    	jne    0x3285a
  01a15:    	sub    rsp,0x10
  01a19:    	movq   QWORD PTR [rsp],xmm3
  01a1e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a24: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a2d:    	mov    rax,QWORD PTR [r14-0x58]
  01a31:    	mov    QWORD PTR [rsp-0x40],rax
  01a36: 00 	mov    rdi,0x0
  01a3d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a46: 07 	movabs rax,0x1000700000044
  01a50:    	mov    QWORD PTR [rsp-0x30],rax
  01a55: f6 	movabs r13,0x55f67b84eec0
  01a5f:    	mov    rsi,QWORD PTR [rbx]
  01a62:    	mov    QWORD PTR [rsp-0x18],rsi
  01a67:    	lea    rsi,[rsp-0x18]
  01a6c:    	mov    QWORD PTR [rbx],rsi
  01a6f:    	lea    r14,[rsp-0x10]
  01a74:    	mov    QWORD PTR [rsp-0x20],r14
  01a79:    	call   0xfffe9604
  01a7e:    	lea    r14,[rbp-0x8]
  01a82:    	mov    QWORD PTR [rbx],r14
  01a85:    	mov    r14,QWORD PTR [rbp-0x10]
  01a89:    	movq   xmm3,QWORD PTR [rsp]
  01a8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a94:    	add    rsp,0x10
  01a98: f6 	movabs r13,0x55f67b88dd00
  01aa2:    	test   rax,rax
  01aa5:    	je     0xfffe597b
  01aab:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01aaf:    	sub    rsp,0x10
  01ab3:    	movq   QWORD PTR [rsp],xmm3
  01ab8:    	movq   QWORD PTR [rsp+0x8],xmm4
  01abe:    	mov    rdx,QWORD PTR [r14-0x38]
  01ac2:    	mov    rcx,QWORD PTR [r14-0x48]
  01ac6:    	mov    r8,QWORD PTR [r14-0x50]
  01aca:    	mov    rdi,rbx
  01acd:    	mov    rsi,r12
  01ad0: f6 	movabs rax,0x55f67a71b750
  01ada:    	call   rax
  01adc:    	movq   xmm3,QWORD PTR [rsp]
  01ae1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae7:    	add    rsp,0x10
  01aeb: f6 	movabs r13,0x55f67b88dd20
  01af5:    	test   rax,rax
  01af8:    	je     0xfffe597b
:00104 %3 = 1: i32
  01afe: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  01b06: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01b0e:    	sub    rsp,0x10
  01b12:    	movq   QWORD PTR [rsp],xmm3
  01b17:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b1d:    	mov    rdx,QWORD PTR [r14-0x38]
  01b21:    	mov    rcx,QWORD PTR [r14-0x58]
  01b25:    	mov    rdi,rbx
  01b28:    	mov    rsi,r12
  01b2b: f6 	movabs r8,0x55f67b88dd48
  01b35: f6 	movabs rax,0x55f67a71b620
  01b3f:    	call   rax
  01b41:    	movq   xmm3,QWORD PTR [rsp]
  01b46:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b4c:    	add    rsp,0x10
  01b50: f6 	movabs r13,0x55f67b88dd50
  01b5a:    	test   rax,rax
  01b5d:    	je     0xfffe597b
  01b63:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01b67: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01b6f:    	sub    rsp,0x10
  01b73:    	movq   QWORD PTR [rsp],xmm3
  01b78:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b7e:    	mov    rdx,QWORD PTR [r14-0x38]
  01b82:    	mov    rcx,QWORD PTR [r14-0x60]
  01b86:    	mov    rdi,rbx
  01b89:    	mov    rsi,r12
  01b8c: f6 	movabs r8,0x55f67b88dd68
  01b96: f6 	movabs rax,0x55f67a71b620
  01ba0:    	call   rax
  01ba2:    	movq   xmm3,QWORD PTR [rsp]
  01ba7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bad:    	add    rsp,0x10
  01bb1: f6 	movabs r13,0x55f67b88dd70
  01bbb:    	test   rax,rax
  01bbe:    	je     0xfffe597b
  01bc4:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01bc8:    	mov    rdi,QWORD PTR [r14-0x58]
  01bcc: 00 	test   rdi,0x7
  01bd3:    	jne    0x32869
  01bd9:    	cmp    DWORD PTR [rdi+0x4],0x28
  01bdd:    	jne    0x32869
  01be3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7113],0x26        # 0xfffe8cfd
  01bea:    	jne    0x32869
  01bf0:    	sub    rsp,0x10
  01bf4:    	movq   QWORD PTR [rsp],xmm3
  01bf9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bff: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c08:    	mov    rax,QWORD PTR [r14-0x58]
  01c0c:    	mov    QWORD PTR [rsp-0x40],rax
  01c11: 00 	mov    rdi,0x1
  01c18:    	lea    r8,[rsp-0x48]
  01c1d:    	mov    rax,QWORD PTR [r14-0x60]
  01c21:    	mov    QWORD PTR [r8],rax
  01c24:    	sub    r8,0x8
  01c28: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c31: 09 	movabs rax,0x900000041
  01c3b:    	mov    QWORD PTR [rsp-0x30],rax
  01c40: f6 	movabs r13,0x55f67b86c170
  01c4a:    	mov    rsi,QWORD PTR [rbx]
  01c4d:    	mov    QWORD PTR [rsp-0x18],rsi
  01c52:    	lea    rsi,[rsp-0x18]
  01c57:    	mov    QWORD PTR [rbx],rsi
  01c5a:    	lea    r14,[rsp-0x10]
  01c5f:    	mov    QWORD PTR [rsp-0x20],r14
  01c64:    	call   0xffff29b7
  01c69:    	lea    r14,[rbp-0x8]
  01c6d:    	mov    QWORD PTR [rbx],r14
  01c70:    	mov    r14,QWORD PTR [rbp-0x10]
  01c74:    	movq   xmm3,QWORD PTR [rsp]
  01c79:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c7f:    	add    rsp,0x10
  01c83: f6 	movabs r13,0x55f67b88dd90
  01c8d:    	test   rax,rax
  01c90:    	je     0xfffe597b
  01c96:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01c9a:    	sub    rsp,0x10
  01c9e:    	movq   QWORD PTR [rsp],xmm3
  01ca3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ca9:    	mov    rdx,QWORD PTR [r14-0x38]
  01cad:    	mov    rcx,QWORD PTR [r14-0x48]
  01cb1:    	mov    r8,QWORD PTR [r14-0x50]
  01cb5:    	mov    rdi,rbx
  01cb8:    	mov    rsi,r12
  01cbb: f6 	movabs rax,0x55f67a71b750
  01cc5:    	call   rax
  01cc7:    	movq   xmm3,QWORD PTR [rsp]
  01ccc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01cd2:    	add    rsp,0x10
  01cd6: f6 	movabs r13,0x55f67b88ddb0
  01ce0:    	test   rax,rax
  01ce3:    	je     0xfffe597b
:00113 %3 = 1: i32
  01ce9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01cf1: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01cf9:    	sub    rsp,0x10
  01cfd:    	movq   QWORD PTR [rsp],xmm3
  01d02:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d08:    	mov    rdx,QWORD PTR [r14-0x38]
  01d0c:    	mov    rcx,QWORD PTR [r14-0x58]
  01d10:    	mov    rdi,rbx
  01d13:    	mov    rsi,r12
  01d16: f6 	movabs r8,0x55f67b88ddd8
  01d20: f6 	movabs rax,0x55f67a71b620
  01d2a:    	call   rax
  01d2c:    	movq   xmm3,QWORD PTR [rsp]
  01d31:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d37:    	add    rsp,0x10
  01d3b: f6 	movabs r13,0x55f67b88dde0
  01d45:    	test   rax,rax
  01d48:    	je     0xfffe597b
  01d4e:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01d52:    	mov    rdi,QWORD PTR [r14-0x58]
  01d56: 00 	test   rdi,0x7
  01d5d:    	jne    0x32878
  01d63:    	cmp    DWORD PTR [rdi+0x4],0x28
  01d67:    	jne    0x32878
  01d6d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6f89],0x26        # 0xfffe8cfd
  01d74:    	jne    0x32878
  01d7a:    	sub    rsp,0x10
  01d7e:    	movq   QWORD PTR [rsp],xmm3
  01d83:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d89: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d92:    	mov    rax,QWORD PTR [r14-0x58]
  01d96:    	mov    QWORD PTR [rsp-0x40],rax
  01d9b: 00 	mov    rdi,0x0
  01da2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dab: 07 	movabs rax,0x1000700000044
  01db5:    	mov    QWORD PTR [rsp-0x30],rax
  01dba: f6 	movabs r13,0x55f67b84eec0
  01dc4:    	mov    rsi,QWORD PTR [rbx]
  01dc7:    	mov    QWORD PTR [rsp-0x18],rsi
  01dcc:    	lea    rsi,[rsp-0x18]
  01dd1:    	mov    QWORD PTR [rbx],rsi
  01dd4:    	lea    r14,[rsp-0x10]
  01dd9:    	mov    QWORD PTR [rsp-0x20],r14
  01dde:    	call   0xfffe9604
  01de3:    	lea    r14,[rbp-0x8]
  01de7:    	mov    QWORD PTR [rbx],r14
  01dea:    	mov    r14,QWORD PTR [rbp-0x10]
  01dee:    	movq   xmm3,QWORD PTR [rsp]
  01df3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01df9:    	add    rsp,0x10
  01dfd: f6 	movabs r13,0x55f67b88de00
  01e07:    	test   rax,rax
  01e0a:    	je     0xfffe597b
  01e10:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01e14:    	sub    rsp,0x10
  01e18:    	movq   QWORD PTR [rsp],xmm3
  01e1d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e23:    	mov    rdx,QWORD PTR [r14-0x38]
  01e27:    	mov    rcx,QWORD PTR [r14-0x48]
  01e2b:    	mov    r8,QWORD PTR [r14-0x50]
  01e2f:    	mov    rdi,rbx
  01e32:    	mov    rsi,r12
  01e35: f6 	movabs rax,0x55f67a71b750
  01e3f:    	call   rax
  01e41:    	movq   xmm3,QWORD PTR [rsp]
  01e46:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e4c:    	add    rsp,0x10
  01e50: f6 	movabs r13,0x55f67b88de20
  01e5a:    	test   rax,rax
  01e5d:    	je     0xfffe597b
:00120 %3 = %4
  01e63:    	mov    rax,QWORD PTR [r14-0x50]
  01e67:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  01e6b:    	mov    rax,QWORD PTR [r14-0x48]
  01e6f:    	leave  
  01e70:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55f67b86e960
load_ivar: no profile
<== finished compile. elapsed:142µs
offset:Pos(116316) code: 6055 bytes  data: 273 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x308e3
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x308f2
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x308f2
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x30901
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x30901
  00097: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6cbb],0x26        # 0xfffe6d59
  0009e:    	jne    0x30901
  000a4:    	mov    esi,DWORD PTR [rip+0x1701]        # 0x17ab
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x30910
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: f6 	movabs rax,0x55f67a69e160
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x30939
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x30939
  00108: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6c4a],0x26        # 0xfffe6d59
  0010f:    	jne    0x30939
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	lea    r8,[rsp-0x48]
  00133:    	mov    rax,QWORD PTR [r14-0x80]
  00137:    	mov    QWORD PTR [r8],rax
  0013a:    	sub    r8,0x8
  0013e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00147: 08 	movabs rax,0x800000040
  00151:    	mov    QWORD PTR [rsp-0x30],rax
  00156: f6 	movabs r13,0x55f67b855f60
  00160:    	mov    rsi,QWORD PTR [rbx]
  00163:    	mov    QWORD PTR [rsp-0x18],rsi
  00168:    	lea    rsi,[rsp-0x18]
  0016d:    	mov    QWORD PTR [rbx],rsi
  00170:    	lea    r14,[rsp-0x10]
  00175:    	mov    QWORD PTR [rsp-0x20],r14
  0017a:    	call   0xfffe79fa
  0017f:    	lea    r14,[rbp-0x8]
  00183:    	mov    QWORD PTR [rbx],r14
  00186:    	mov    r14,QWORD PTR [rbp-0x10]
  0018a: f6 	movabs r13,0x55f67b86e9d0
  00194:    	test   rax,rax
  00197:    	je     0xfffe39d7
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x30948
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b6:    	jne    0x30948
  001bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6b96],0x26        # 0xfffe6d59
  001c3:    	jne    0x30948
  001c9:    	mov    esi,DWORD PTR [rip+0x15e4]        # 0x17b3
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x30957
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: f6 	movabs rax,0x55f67a69e160
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x30980
  00217:    	cmp    DWORD PTR [rdi+0x4],0x28
  0021b:    	jne    0x30980
  00221: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6b31],0x26        # 0xfffe6d59
  00228:    	jne    0x30980
  0022e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00237:    	mov    rax,QWORD PTR [r14-0x48]
  0023b:    	mov    QWORD PTR [rsp-0x40],rax
  00240: 00 	mov    rdi,0x1
  00247:    	lea    r8,[rsp-0x48]
  0024c:    	mov    rax,QWORD PTR [r14-0x78]
  00250:    	mov    QWORD PTR [r8],rax
  00253:    	sub    r8,0x8
  00257: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00260: 05 	movabs rax,0x500000042
  0026a:    	mov    QWORD PTR [rsp-0x30],rax
  0026f: f6 	movabs r13,0x55f67b88de50
  00279:    	mov    rsi,QWORD PTR [rbx]
  0027c:    	mov    QWORD PTR [rsp-0x18],rsi
  00281:    	lea    rsi,[rsp-0x18]
  00286:    	mov    QWORD PTR [rbx],rsi
  00289:    	lea    r14,[rsp-0x10]
  0028e:    	mov    QWORD PTR [rsp-0x20],r14
  00293:    	call   0xfffe7a8c
  00298:    	lea    r14,[rbp-0x8]
  0029c:    	mov    QWORD PTR [rbx],r14
  0029f:    	mov    r14,QWORD PTR [rbp-0x10]
  002a3: f6 	movabs r13,0x55f67b86ea30
  002ad:    	test   rax,rax
  002b0:    	je     0xfffe39d7
  002b6:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ba:    	mov    rax,QWORD PTR [r14-0x48]
  002be:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002c2:    	mov    rdi,QWORD PTR [r14-0x48]
  002c6: 00 	test   rdi,0x7
  002cd:    	jne    0x3098f
  002d3:    	cmp    DWORD PTR [rdi+0x4],0x28
  002d7:    	jne    0x3098f
  002dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6a75],0x26        # 0xfffe6d59
  002e4:    	jne    0x3098f
  002ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002f3:    	mov    rax,QWORD PTR [r14-0x48]
  002f7:    	mov    QWORD PTR [rsp-0x40],rax
  002fc: 00 	mov    rdi,0x1
  00303:    	lea    r8,[rsp-0x48]
  00308:    	mov    rax,QWORD PTR [r14-0x80]
  0030c:    	mov    QWORD PTR [r8],rax
  0030f:    	sub    r8,0x8
  00313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0031c: 05 	movabs rax,0x500000042
  00326:    	mov    QWORD PTR [rsp-0x30],rax
  0032b: f6 	movabs r13,0x55f67b88de50
  00335:    	mov    rsi,QWORD PTR [rbx]
  00338:    	mov    QWORD PTR [rsp-0x18],rsi
  0033d:    	lea    rsi,[rsp-0x18]
  00342:    	mov    QWORD PTR [rbx],rsi
  00345:    	lea    r14,[rsp-0x10]
  0034a:    	mov    QWORD PTR [rsp-0x20],r14
  0034f:    	call   0xfffe7a8c
  00354:    	lea    r14,[rbp-0x8]
  00358:    	mov    QWORD PTR [rbx],r14
  0035b:    	mov    r14,QWORD PTR [rbp-0x10]
  0035f: f6 	movabs r13,0x55f67b86ea70
  00369:    	test   rax,rax
  0036c:    	je     0xfffe39d7
  00372:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00376:    	mov    rdi,QWORD PTR [rbp-0x30]
  0037a:    	mov    rax,QWORD PTR [rdi+0x18]
  0037e:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00382:    	mov    rdi,QWORD PTR [rbp-0x30]
  00386:    	mov    rax,QWORD PTR [rdi+0x18]
  0038a: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00391:    	mov    rdi,QWORD PTR [r14-0x80]
  00395: 00 	test   rdi,0x1
  0039c:    	jne    0x3099e
  003a2: 00 	test   rdi,0x2
  003a9:    	je     0x3e5
  003af:    	xorps  xmm2,xmm2
  003b2: 00 	movabs rax,0x8000000000000002
  003bc:    	cmp    rdi,rax
  003bf:    	je     0x3f7
  003c5:    	mov    rax,rdi
  003c8:    	sar    rax,0x3f
  003cc:    	add    rax,0x2
  003d0:    	and    rdi,0xfffffffffffffffc
  003d4:    	or     rdi,rax
  003d7:    	rol    rdi,0x3d
  003db:    	movq   xmm2,rdi
  003e0:    	jmp    0x3f7
  003e5:    	call   0xfffe3a30
  003ea:    	test   rax,rax
  003ed:    	je     0x3099e
  003f3:    	movq   xmm2,xmm0
  003f7: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003fe: 00 	test   rdi,0x1
  00405:    	jne    0x309ad
  0040b: 00 	test   rdi,0x2
  00412:    	je     0x44e
  00418:    	xorps  xmm3,xmm3
  0041b: 00 	movabs rax,0x8000000000000002
  00425:    	cmp    rdi,rax
  00428:    	je     0x460
  0042e:    	mov    rax,rdi
  00431:    	sar    rax,0x3f
  00435:    	add    rax,0x2
  00439:    	and    rdi,0xfffffffffffffffc
  0043d:    	or     rdi,rax
  00440:    	rol    rdi,0x3d
  00444:    	movq   xmm3,rdi
  00449:    	jmp    0x460
  0044e:    	call   0xfffe3a30
  00453:    	test   rax,rax
  00456:    	je     0x309ad
  0045c:    	movq   xmm3,xmm0
  00460:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00464:    	mov    rdi,QWORD PTR [r14-0x78]
  00468: 00 	test   rdi,0x1
  0046f:    	jne    0x309bc
  00475: 00 	test   rdi,0x2
  0047c:    	je     0x4b8
  00482:    	xorps  xmm4,xmm4
  00485: 00 	movabs rax,0x8000000000000002
  0048f:    	cmp    rdi,rax
  00492:    	je     0x4ca
  00498:    	mov    rax,rdi
  0049b:    	sar    rax,0x3f
  0049f:    	add    rax,0x2
  004a3:    	and    rdi,0xfffffffffffffffc
  004a7:    	or     rdi,rax
  004aa:    	rol    rdi,0x3d
  004ae:    	movq   xmm4,rdi
  004b3:    	jmp    0x4ca
  004b8:    	call   0xfffe3a30
  004bd:    	test   rax,rax
  004c0:    	je     0x309bc
  004c6:    	movq   xmm4,xmm0
  004ca:    	movq   xmm5,xmm4
  004ce:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004d2:    	mov    rdi,QWORD PTR [r14-0x50]
  004d6: 00 	test   rdi,0x1
  004dd:    	jne    0x309d8
  004e3: 00 	test   rdi,0x2
  004ea:    	je     0x526
  004f0:    	xorps  xmm6,xmm6
  004f3: 00 	movabs rax,0x8000000000000002
  004fd:    	cmp    rdi,rax
  00500:    	je     0x538
  00506:    	mov    rax,rdi
  00509:    	sar    rax,0x3f
  0050d:    	add    rax,0x2
  00511:    	and    rdi,0xfffffffffffffffc
  00515:    	or     rdi,rax
  00518:    	rol    rdi,0x3d
  0051c:    	movq   xmm6,rdi
  00521:    	jmp    0x538
  00526:    	call   0xfffe3a30
  0052b:    	test   rax,rax
  0052e:    	je     0x309d8
  00534:    	movq   xmm6,xmm0
  00538:    	movq   xmm4,xmm6
  0053c:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  00540:    	movq   xmm7,xmm4
  00544:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00548: 00 	movq   xmm4,QWORD PTR [rip+0x1274]        # 0x17c4
  00550: 00 	movabs rax,0x8000000000000002
  0055a:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0055e:    	ucomisd xmm7,xmm4
  00562:    	jbe    0x317f0
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00568:    	movq   xmm4,xmm6
  0056c: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1261]        # 0x17d4
:00029 %11 = const[Math]                    [Math]
  00573: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe67ea]        # 0xfffe6d64
  0057a: 00 	cmp    rax,QWORD PTR [rip+0x1273]        # 0x17f4
  00581:    	jne    0x30a01
  00587: 00 	mov    rax,QWORD PTR [rip+0x1256]        # 0x17e4
  0058e: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00595: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0059c: 00 	test   rdi,0x7
  005a3:    	jne    0x30a89
  005a9:    	cmp    DWORD PTR [rdi+0x4],0x21
  005ad:    	jne    0x30a89
  005b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe679f],0x26        # 0xfffe6d59
  005ba:    	jne    0x30a89
  005c0:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005c4:    	movq   xmm3,xmm4
  005c8:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005cc: 00 	movq   xmm4,QWORD PTR [rip+0x1230]        # 0x1804
  005d4: 00 	movabs rax,0x8000000000000002
  005de:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e2:    	ucomisd xmm3,xmm4
  005e6:    	jbe    0x316b0
:00038 %9 = %2.call t()                     [Isect]
  005ec:    	mov    rdi,QWORD PTR [r14-0x40]
  005f0: 00 	test   rdi,0x7
  005f7:    	jne    0x30ac6
  005fd:    	cmp    DWORD PTR [rdi+0x4],0x30
  00601:    	jne    0x30ac6
  00607: 26 	cmp    DWORD PTR [rip+0xfffffffffffe674b],0x26        # 0xfffe6d59
  0060e:    	jne    0x30ac6
  00614:    	mov    esi,DWORD PTR [rip+0x11f6]        # 0x1810
  0061a:    	cmp    esi,0xffffffff
  0061d:    	je     0x30b10
  00623:    	cmp    WORD PTR [rdi+0x2],0x3
  00628:    	jne    0x641
  0062e:    	cmp    esi,0x6
  00631:    	jge    0x641
  00637:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0063c:    	jmp    0x68f
  00641:    	sub    rsp,0x30
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm5
  00656:    	movq   QWORD PTR [rsp+0x18],xmm6
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00662: f6 	movabs rax,0x55f67a69e160
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00685:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0068b:    	add    rsp,0x30
  0068f:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00693:    	movq   xmm0,xmm3
  00697:    	call   0xfffe3b54
  0069c:    	mov    QWORD PTR [r14-0x68],rax
  006a0:    	mov    rdi,QWORD PTR [r14-0x68]
  006a4:    	mov    rsi,QWORD PTR [r14-0x78]
  006a8: 00 	test   rdi,0x1
  006af:    	je     0x30b7b
  006b5: 00 	test   rsi,0x1
  006bc:    	je     0x30b7b
  006c2:    	cmp    rdi,rsi
  006c5:    	jge    0x3173d
:00043 _ = %2.call t=(%7; 1)                [Isect]
  006cb:    	mov    rdi,QWORD PTR [r14-0x40]
  006cf: 00 	test   rdi,0x7
  006d6:    	jne    0x30bdc
  006dc:    	cmp    DWORD PTR [rdi+0x4],0x30
  006e0:    	jne    0x30bdc
  006e6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe666c],0x26        # 0xfffe6d59
  006ed:    	jne    0x30bdc
  006f3:    	mov    esi,DWORD PTR [rip+0x111f]        # 0x1818
  006f9:    	cmp    esi,0xffffffff
  006fc:    	je     0x30c19
  00702:    	cmp    WORD PTR [rdi+0x2],0x3
  00707:    	jne    0x724
  0070d:    	cmp    esi,0x6
  00710:    	jge    0x724
  00716:    	mov    rax,QWORD PTR [r14-0x68]
  0071a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071f:    	jmp    0x789
  00724:    	sub    rsp,0x30
  00728:    	movq   QWORD PTR [rsp],xmm2
  0072d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00733:    	movq   QWORD PTR [rsp+0x10],xmm5
  00739:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00745:    	mov    rdx,QWORD PTR [r14-0x68]
  00749: f6 	movabs rax,0x55f67a69e3e0
  00753:    	call   rax
  00755:    	movq   xmm2,QWORD PTR [rsp]
  0075a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00760:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00766:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0076c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00772:    	add    rsp,0x30
  00776: f6 	movabs r13,0x55f67b86ec30
  00780:    	test   rax,rax
  00783:    	je     0xfffe39d7
:00044 
:00046 %9 = literal[true]
  00789: 00 	mov    rax,0x1c
  00790:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  00794:    	mov    rdi,QWORD PTR [r14-0x40]
  00798: 00 	test   rdi,0x7
  0079f:    	jne    0x30c8b
  007a5:    	cmp    DWORD PTR [rdi+0x4],0x30
  007a9:    	jne    0x30c8b
  007af: 26 	cmp    DWORD PTR [rip+0xfffffffffffe65a3],0x26        # 0xfffe6d59
  007b6:    	jne    0x30c8b
  007bc:    	mov    esi,DWORD PTR [rip+0x105e]        # 0x1820
  007c2:    	cmp    esi,0xffffffff
  007c5:    	je     0x30cc8
  007cb:    	cmp    WORD PTR [rdi+0x2],0x3
  007d0:    	jne    0x7ed
  007d6:    	cmp    esi,0x6
  007d9:    	jge    0x7ed
  007df:    	mov    rax,QWORD PTR [r14-0x78]
  007e3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007e8:    	jmp    0x852
  007ed:    	sub    rsp,0x30
  007f1:    	movq   QWORD PTR [rsp],xmm2
  007f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  007fc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00802:    	movq   QWORD PTR [rsp+0x18],xmm6
  00808:    	movq   QWORD PTR [rsp+0x20],xmm7
  0080e:    	mov    rdx,QWORD PTR [r14-0x78]
  00812: f6 	movabs rax,0x55f67a69e3e0
  0081c:    	call   rax
  0081e:    	movq   xmm2,QWORD PTR [rsp]
  00823:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00829:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0082f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00835:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0083b:    	add    rsp,0x30
  0083f: f6 	movabs r13,0x55f67b86ec70
  00849:    	test   rax,rax
  0084c:    	je     0xfffe39d7
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00852: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe650b]        # 0xfffe6d64
  00859: 00 	cmp    rax,QWORD PTR [rip+0xfd4]        # 0x1834
  00860:    	jne    0x30d3a
  00866: 00 	mov    rax,QWORD PTR [rip+0xfb7]        # 0x1824
  0086d:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [Ray]
  00871:    	mov    rdi,QWORD PTR [r14-0x38]
  00875: 00 	test   rdi,0x7
  0087c:    	jne    0x30db6
  00882:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00886:    	jne    0x30db6
  0088c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe64c6],0x26        # 0xfffe6d59
  00893:    	jne    0x30db6
  00899:    	mov    esi,DWORD PTR [rip+0xfa1]        # 0x1840
  0089f:    	cmp    esi,0xffffffff
  008a2:    	je     0x30ddf
  008a8:    	cmp    WORD PTR [rdi+0x2],0x3
  008ad:    	jne    0x8c6
  008b3:    	cmp    esi,0x6
  008b6:    	jge    0x8c6
  008bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008c1:    	jmp    0x908
  008c6:    	sub    rsp,0x20
  008ca:    	movq   QWORD PTR [rsp],xmm3
  008cf:    	movq   QWORD PTR [rsp+0x8],xmm5
  008d5:    	movq   QWORD PTR [rsp+0x10],xmm6
  008db:    	movq   QWORD PTR [rsp+0x18],xmm7
  008e1: f6 	movabs rax,0x55f67a69e160
  008eb:    	call   rax
  008ed:    	movq   xmm3,QWORD PTR [rsp]
  008f2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  008f8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  008fe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00904:    	add    rsp,0x20
  00908: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  0090f: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00916: 00 	test   rdi,0x7
  0091d:    	jne    0x30e3e
  00923:    	cmp    DWORD PTR [rdi+0x4],0x28
  00927:    	jne    0x30e3e
  0092d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6425],0x26        # 0xfffe6d59
  00934:    	jne    0x30e3e
  0093a:    	mov    esi,DWORD PTR [rip+0xf08]        # 0x1848
  00940:    	cmp    esi,0xffffffff
  00943:    	je     0x30e67
  00949:    	cmp    WORD PTR [rdi+0x2],0x3
  0094e:    	jne    0x967
  00954:    	cmp    esi,0x6
  00957:    	jge    0x967
  0095d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00962:    	jmp    0x9a9
  00967:    	sub    rsp,0x20
  0096b:    	movq   QWORD PTR [rsp],xmm3
  00970:    	movq   QWORD PTR [rsp+0x8],xmm5
  00976:    	movq   QWORD PTR [rsp+0x10],xmm6
  0097c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00982: f6 	movabs rax,0x55f67a69e160
  0098c:    	call   rax
  0098e:    	movq   xmm3,QWORD PTR [rsp]
  00993:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00999:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0099f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009a5:    	add    rsp,0x20
  009a9: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  009b0:    	mov    rdi,QWORD PTR [r14-0x38]
  009b4: 00 	test   rdi,0x7
  009bb:    	jne    0x30ec6
  009c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009c5:    	jne    0x30ec6
  009cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6387],0x26        # 0xfffe6d59
  009d2:    	jne    0x30ec6
  009d8:    	mov    esi,DWORD PTR [rip+0xe72]        # 0x1850
  009de:    	cmp    esi,0xffffffff
  009e1:    	je     0x30eef
  009e7:    	cmp    WORD PTR [rdi+0x2],0x3
  009ec:    	jne    0xa05
  009f2:    	cmp    esi,0x6
  009f5:    	jge    0xa05
  009fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a00:    	jmp    0xa47
  00a05:    	sub    rsp,0x20
  00a09:    	movq   QWORD PTR [rsp],xmm3
  00a0e:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a14:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a1a:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a20: f6 	movabs rax,0x55f67a69e160
  00a2a:    	call   rax
  00a2c:    	movq   xmm3,QWORD PTR [rsp]
  00a31:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a37:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a3d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a43:    	add    rsp,0x20
  00a47: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00a4e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00a55: 00 	test   rdi,0x7
  00a5c:    	jne    0x30f4e
  00a62:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a66:    	jne    0x30f4e
  00a6c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe62e6],0x26        # 0xfffe6d59
  00a73:    	jne    0x30f4e
  00a79:    	mov    esi,DWORD PTR [rip+0xdd9]        # 0x1858
  00a7f:    	cmp    esi,0xffffffff
  00a82:    	je     0x30f77
  00a88:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8d:    	jne    0xaa6
  00a93:    	cmp    esi,0x6
  00a96:    	jge    0xaa6
  00a9c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa1:    	jmp    0xae8
  00aa6:    	sub    rsp,0x20
  00aaa:    	movq   QWORD PTR [rsp],xmm3
  00aaf:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ab5:    	movq   QWORD PTR [rsp+0x10],xmm6
  00abb:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ac1: f6 	movabs rax,0x55f67a69e160
  00acb:    	call   rax
  00acd:    	movq   xmm3,QWORD PTR [rsp]
  00ad2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ad8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ade:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ae4:    	add    rsp,0x20
  00ae8: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00aef: 01 	sub    DWORD PTR [rip+0xd66],0x1        # 0x185c
  00af6:    	je     0x30fff
  00afc: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00b03:    	mov    rsi,QWORD PTR [r14-0x68]
  00b07:    	sub    rsp,0x20
  00b0b:    	movq   QWORD PTR [rsp],xmm3
  00b10:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b16:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b1c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b22:    	mov    rdx,rdi
  00b25:    	mov    rcx,rsi
  00b28:    	mov    rdi,rbx
  00b2b:    	mov    rsi,r12
  00b2e: f6 	movabs rax,0x55f67a6dfeb0
  00b38:    	call   rax
  00b3a:    	movq   xmm3,QWORD PTR [rsp]
  00b3f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b45:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b4b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b51:    	add    rsp,0x20
  00b55: f6 	movabs r13,0x55f67b86ed60
  00b5f:    	test   rax,rax
  00b62:    	je     0xfffe39d7
  00b68: ff 	mov    QWORD PTR [r14-0x90],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00b6f: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b76: ff 	mov    rsi,QWORD PTR [r14-0x90]
  00b7d:    	sub    rsp,0x20
  00b81:    	movq   QWORD PTR [rsp],xmm3
  00b86:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b8c:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b92:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b98:    	mov    rdx,rdi
  00b9b:    	mov    rcx,rsi
  00b9e:    	mov    rdi,rbx
  00ba1:    	mov    rsi,r12
  00ba4: f6 	movabs rax,0x55f67a6ddf30
  00bae:    	call   rax
  00bb0:    	movq   xmm3,QWORD PTR [rsp]
  00bb5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00bbb:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00bc1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bc7:    	add    rsp,0x20
  00bcb: f6 	movabs r13,0x55f67b86ed70
  00bd5:    	test   rax,rax
  00bd8:    	je     0xfffe39d7
  00bde: ff 	mov    QWORD PTR [r14-0x88],rax
:00065 %13 = %1.call org()                  [Ray]
  00be5:    	mov    rdi,QWORD PTR [r14-0x38]
  00be9: 00 	test   rdi,0x7
  00bf0:    	jne    0x3101d
  00bf6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00bfa:    	jne    0x3101d
  00c00: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6152],0x26        # 0xfffe6d59
  00c07:    	jne    0x3101d
  00c0d:    	mov    esi,DWORD PTR [rip+0xc51]        # 0x1864
  00c13:    	cmp    esi,0xffffffff
  00c16:    	je     0x31046
  00c1c:    	cmp    WORD PTR [rdi+0x2],0x3
  00c21:    	jne    0xc3a
  00c27:    	cmp    esi,0x6
  00c2a:    	jge    0xc3a
  00c30:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c35:    	jmp    0xc7c
  00c3a:    	sub    rsp,0x20
  00c3e:    	movq   QWORD PTR [rsp],xmm3
  00c43:    	movq   QWORD PTR [rsp+0x8],xmm5
  00c49:    	movq   QWORD PTR [rsp+0x10],xmm6
  00c4f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c55: f6 	movabs rax,0x55f67a69e160
  00c5f:    	call   rax
  00c61:    	movq   xmm3,QWORD PTR [rsp]
  00c66:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c6c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c72:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c78:    	add    rsp,0x20
  00c7c: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00c83: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c8a: 00 	test   rdi,0x7
  00c91:    	jne    0x310a5
  00c97:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c9b:    	jne    0x310a5
  00ca1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe60b1],0x26        # 0xfffe6d59
  00ca8:    	jne    0x310a5
  00cae:    	mov    esi,DWORD PTR [rip+0xbb8]        # 0x186c
  00cb4:    	cmp    esi,0xffffffff
  00cb7:    	je     0x310ce
  00cbd:    	cmp    WORD PTR [rdi+0x2],0x3
  00cc2:    	jne    0xcdb
  00cc8:    	cmp    esi,0x6
  00ccb:    	jge    0xcdb
  00cd1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cd6:    	jmp    0xd1d
  00cdb:    	sub    rsp,0x20
  00cdf:    	movq   QWORD PTR [rsp],xmm3
  00ce4:    	movq   QWORD PTR [rsp+0x8],xmm5
  00cea:    	movq   QWORD PTR [rsp+0x10],xmm6
  00cf0:    	movq   QWORD PTR [rsp+0x18],xmm7
  00cf6: f6 	movabs rax,0x55f67a69e160
  00d00:    	call   rax
  00d02:    	movq   xmm3,QWORD PTR [rsp]
  00d07:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d0d:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d13:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d19:    	add    rsp,0x20
  00d1d: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d24:    	mov    rdi,QWORD PTR [r14-0x38]
  00d28: 00 	test   rdi,0x7
  00d2f:    	jne    0x3112d
  00d35:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d39:    	jne    0x3112d
  00d3f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6013],0x26        # 0xfffe6d59
  00d46:    	jne    0x3112d
  00d4c:    	mov    esi,DWORD PTR [rip+0xb22]        # 0x1874
  00d52:    	cmp    esi,0xffffffff
  00d55:    	je     0x31156
  00d5b:    	cmp    WORD PTR [rdi+0x2],0x3
  00d60:    	jne    0xd79
  00d66:    	cmp    esi,0x6
  00d69:    	jge    0xd79
  00d6f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d74:    	jmp    0xdbb
  00d79:    	sub    rsp,0x20
  00d7d:    	movq   QWORD PTR [rsp],xmm3
  00d82:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d88:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d8e:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d94: f6 	movabs rax,0x55f67a69e160
  00d9e:    	call   rax
  00da0:    	movq   xmm3,QWORD PTR [rsp]
  00da5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00dab:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00db1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00db7:    	add    rsp,0x20
  00dbb: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00dc2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00dc9: 00 	test   rdi,0x7
  00dd0:    	jne    0x311b5
  00dd6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dda:    	jne    0x311b5
  00de0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5f72],0x26        # 0xfffe6d59
  00de7:    	jne    0x311b5
  00ded:    	mov    esi,DWORD PTR [rip+0xa89]        # 0x187c
  00df3:    	cmp    esi,0xffffffff
  00df6:    	je     0x311de
  00dfc:    	cmp    WORD PTR [rdi+0x2],0x3
  00e01:    	jne    0xe1a
  00e07:    	cmp    esi,0x6
  00e0a:    	jge    0xe1a
  00e10:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e15:    	jmp    0xe5c
  00e1a:    	sub    rsp,0x20
  00e1e:    	movq   QWORD PTR [rsp],xmm3
  00e23:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e29:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e2f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e35: f6 	movabs rax,0x55f67a69e160
  00e3f:    	call   rax
  00e41:    	movq   xmm3,QWORD PTR [rsp]
  00e46:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e4c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e52:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e58:    	add    rsp,0x20
  00e5c: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  00e63: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00e6a:    	mov    rsi,QWORD PTR [r14-0x68]
  00e6e:    	sub    rsp,0x20
  00e72:    	movq   QWORD PTR [rsp],xmm3
  00e77:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e7d:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e83:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e89:    	mov    rdx,rdi
  00e8c:    	mov    rcx,rsi
  00e8f:    	mov    rdi,rbx
  00e92:    	mov    rsi,r12
  00e95: f6 	movabs rax,0x55f67a6dfeb0
  00e9f:    	call   rax
  00ea1:    	movq   xmm3,QWORD PTR [rsp]
  00ea6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00eac:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00eb2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00eb8:    	add    rsp,0x20
  00ebc: f6 	movabs r13,0x55f67b86ee40
  00ec6:    	test   rax,rax
  00ec9:    	je     0xfffe39d7
  00ecf: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  00ed6: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00edd: ff 	mov    rsi,QWORD PTR [r14-0x98]
  00ee4:    	sub    rsp,0x20
  00ee8:    	movq   QWORD PTR [rsp],xmm3
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ef3:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ef9:    	movq   QWORD PTR [rsp+0x18],xmm7
  00eff:    	mov    rdx,rdi
  00f02:    	mov    rcx,rsi
  00f05:    	mov    rdi,rbx
  00f08:    	mov    rsi,r12
  00f0b: f6 	movabs rax,0x55f67a6ddf30
  00f15:    	call   rax
  00f17:    	movq   xmm3,QWORD PTR [rsp]
  00f1c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f22:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f28:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f2e:    	add    rsp,0x20
  00f32: f6 	movabs r13,0x55f67b86ee50
  00f3c:    	test   rax,rax
  00f3f:    	je     0xfffe39d7
  00f45: ff 	mov    QWORD PTR [r14-0x90],rax
:00079 %14 = %1.call org()                  [Ray]
  00f4c:    	mov    rdi,QWORD PTR [r14-0x38]
  00f50: 00 	test   rdi,0x7
  00f57:    	jne    0x3123d
  00f5d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00f61:    	jne    0x3123d
  00f67: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5deb],0x26        # 0xfffe6d59
  00f6e:    	jne    0x3123d
  00f74:    	mov    esi,DWORD PTR [rip+0x90a]        # 0x1884
  00f7a:    	cmp    esi,0xffffffff
  00f7d:    	je     0x31266
  00f83:    	cmp    WORD PTR [rdi+0x2],0x3
  00f88:    	jne    0xfa1
  00f8e:    	cmp    esi,0x6
  00f91:    	jge    0xfa1
  00f97:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f9c:    	jmp    0xfe3
  00fa1:    	sub    rsp,0x20
  00fa5:    	movq   QWORD PTR [rsp],xmm3
  00faa:    	movq   QWORD PTR [rsp+0x8],xmm5
  00fb0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00fb6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00fbc: f6 	movabs rax,0x55f67a69e160
  00fc6:    	call   rax
  00fc8:    	movq   xmm3,QWORD PTR [rsp]
  00fcd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fd3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00fd9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00fdf:    	add    rsp,0x20
  00fe3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  00fea: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ff1: 00 	test   rdi,0x7
  00ff8:    	jne    0x312c5
  00ffe:    	cmp    DWORD PTR [rdi+0x4],0x28
  01002:    	jne    0x312c5
  01008: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5d4a],0x26        # 0xfffe6d59
  0100f:    	jne    0x312c5
  01015:    	mov    esi,DWORD PTR [rip+0x871]        # 0x188c
  0101b:    	cmp    esi,0xffffffff
  0101e:    	je     0x312ee
  01024:    	cmp    WORD PTR [rdi+0x2],0x3
  01029:    	jne    0x1042
  0102f:    	cmp    esi,0x6
  01032:    	jge    0x1042
  01038:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0103d:    	jmp    0x1084
  01042:    	sub    rsp,0x20
  01046:    	movq   QWORD PTR [rsp],xmm3
  0104b:    	movq   QWORD PTR [rsp+0x8],xmm5
  01051:    	movq   QWORD PTR [rsp+0x10],xmm6
  01057:    	movq   QWORD PTR [rsp+0x18],xmm7
  0105d: f6 	movabs rax,0x55f67a69e160
  01067:    	call   rax
  01069:    	movq   xmm3,QWORD PTR [rsp]
  0106e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01074:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0107a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01080:    	add    rsp,0x20
  01084: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  0108b:    	mov    rdi,QWORD PTR [r14-0x38]
  0108f: 00 	test   rdi,0x7
  01096:    	jne    0x3134d
  0109c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010a0:    	jne    0x3134d
  010a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5cac],0x26        # 0xfffe6d59
  010ad:    	jne    0x3134d
  010b3:    	mov    esi,DWORD PTR [rip+0x7db]        # 0x1894
  010b9:    	cmp    esi,0xffffffff
  010bc:    	je     0x31376
  010c2:    	cmp    WORD PTR [rdi+0x2],0x3
  010c7:    	jne    0x10e0
  010cd:    	cmp    esi,0x6
  010d0:    	jge    0x10e0
  010d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010db:    	jmp    0x1122
  010e0:    	sub    rsp,0x20
  010e4:    	movq   QWORD PTR [rsp],xmm3
  010e9:    	movq   QWORD PTR [rsp+0x8],xmm5
  010ef:    	movq   QWORD PTR [rsp+0x10],xmm6
  010f5:    	movq   QWORD PTR [rsp+0x18],xmm7
  010fb: f6 	movabs rax,0x55f67a69e160
  01105:    	call   rax
  01107:    	movq   xmm3,QWORD PTR [rsp]
  0110c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01112:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01118:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0111e:    	add    rsp,0x20
  01122: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  01129: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01130: 00 	test   rdi,0x7
  01137:    	jne    0x313d5
  0113d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01141:    	jne    0x313d5
  01147: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5c0b],0x26        # 0xfffe6d59
  0114e:    	jne    0x313d5
  01154:    	mov    esi,DWORD PTR [rip+0x742]        # 0x189c
  0115a:    	cmp    esi,0xffffffff
  0115d:    	je     0x313fe
  01163:    	cmp    WORD PTR [rdi+0x2],0x3
  01168:    	jne    0x1181
  0116e:    	cmp    esi,0x6
  01171:    	jge    0x1181
  01177:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0117c:    	jmp    0x11c3
  01181:    	sub    rsp,0x20
  01185:    	movq   QWORD PTR [rsp],xmm3
  0118a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01190:    	movq   QWORD PTR [rsp+0x10],xmm6
  01196:    	movq   QWORD PTR [rsp+0x18],xmm7
  0119c: f6 	movabs rax,0x55f67a69e160
  011a6:    	call   rax
  011a8:    	movq   xmm3,QWORD PTR [rsp]
  011ad:    	movq   xmm5,QWORD PTR [rsp+0x8]
  011b3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  011b9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  011bf:    	add    rsp,0x20
  011c3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  011ca: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  011d1:    	mov    rsi,QWORD PTR [r14-0x68]
  011d5:    	sub    rsp,0x20
  011d9:    	movq   QWORD PTR [rsp],xmm3
  011de:    	movq   QWORD PTR [rsp+0x8],xmm5
  011e4:    	movq   QWORD PTR [rsp+0x10],xmm6
  011ea:    	movq   QWORD PTR [rsp+0x18],xmm7
  011f0:    	mov    rdx,rdi
  011f3:    	mov    rcx,rsi
  011f6:    	mov    rdi,rbx
  011f9:    	mov    rsi,r12
  011fc: f6 	movabs rax,0x55f67a6dfeb0
  01206:    	call   rax
  01208:    	movq   xmm3,QWORD PTR [rsp]
  0120d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01213:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01219:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0121f:    	add    rsp,0x20
  01223: f6 	movabs r13,0x55f67b86ef20
  0122d:    	test   rax,rax
  01230:    	je     0xfffe39d7
  01236: ff 	mov    QWORD PTR [r14-0xa0],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0123d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01244: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  0124b:    	sub    rsp,0x20
  0124f:    	movq   QWORD PTR [rsp],xmm3
  01254:    	movq   QWORD PTR [rsp+0x8],xmm5
  0125a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01260:    	movq   QWORD PTR [rsp+0x18],xmm7
  01266:    	mov    rdx,rdi
  01269:    	mov    rcx,rsi
  0126c:    	mov    rdi,rbx
  0126f:    	mov    rsi,r12
  01272: f6 	movabs rax,0x55f67a6ddf30
  0127c:    	call   rax
  0127e:    	movq   xmm3,QWORD PTR [rsp]
  01283:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01289:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0128f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01295:    	add    rsp,0x20
  01299: f6 	movabs r13,0x55f67b86ef30
  012a3:    	test   rax,rax
  012a6:    	je     0xfffe39d7
  012ac: ff 	mov    QWORD PTR [r14-0x98],rax
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  012b3:    	mov    rdi,QWORD PTR [r14-0x80]
  012b7: 00 	test   rdi,0x7
  012be:    	jne    0x3145d
  012c4:    	cmp    DWORD PTR [rdi+0x4],0x29
  012c8:    	jne    0x3145d
  012ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5a84],0x26        # 0xfffe6d59
  012d5:    	jne    0x3145d
  012db: 00 	mov    r9,0x0
  012e2:    	sub    rsp,0x20
  012e6:    	movq   QWORD PTR [rsp],xmm3
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x10],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x18],xmm7
  012fd:    	mov    rdx,rdi
  01300:    	mov    QWORD PTR [rsp-0x40],rcx
  01305: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0130e: ff 	lea    rcx,[r14-0x88]
  01315: 00 	mov    r8,0x3
  0131c:    	mov    rsi,QWORD PTR [rbx]
  0131f:    	mov    QWORD PTR [rsp-0x18],rsi
  01324:    	lea    rsi,[rsp-0x18]
  01329:    	mov    QWORD PTR [rbx],rsi
  0132c:    	lea    r14,[rsp-0x10]
  01331:    	mov    QWORD PTR [rsp-0x20],r14
  01336:    	call   0x31486
  0133b:    	lea    r14,[rbp-0x8]
  0133f:    	mov    QWORD PTR [rbx],r14
  01342:    	mov    r14,QWORD PTR [rbp-0x10]
  01346:    	movq   xmm3,QWORD PTR [rsp]
  0134b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01351:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01357:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0135d:    	add    rsp,0x20
  01361: f6 	movabs r13,0x55f67b86ef50
  0136b:    	test   rax,rax
  0136e:    	je     0xfffe39d7
  01374:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  01378:    	mov    rdi,QWORD PTR [r14-0x40]
  0137c: 00 	test   rdi,0x7
  01383:    	jne    0x314b8
  01389:    	cmp    DWORD PTR [rdi+0x4],0x30
  0138d:    	jne    0x314b8
  01393: 26 	cmp    DWORD PTR [rip+0xfffffffffffe59bf],0x26        # 0xfffe6d59
  0139a:    	jne    0x314b8
  013a0:    	mov    esi,DWORD PTR [rip+0x4fe]        # 0x18a4
  013a6:    	cmp    esi,0xffffffff
  013a9:    	je     0x314e1
  013af:    	cmp    WORD PTR [rdi+0x2],0x3
  013b4:    	jne    0x13d1
  013ba:    	cmp    esi,0x6
  013bd:    	jge    0x13d1
  013c3:    	mov    rax,QWORD PTR [r14-0x78]
  013c7:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013cc:    	jmp    0x142a
  013d1:    	sub    rsp,0x20
  013d5:    	movq   QWORD PTR [rsp],xmm3
  013da:    	movq   QWORD PTR [rsp+0x8],xmm5
  013e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  013e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  013ec:    	mov    rdx,QWORD PTR [r14-0x78]
  013f0: f6 	movabs rax,0x55f67a69e3e0
  013fa:    	call   rax
  013fc:    	movq   xmm3,QWORD PTR [rsp]
  01401:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01407:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0140d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01413:    	add    rsp,0x20
  01417: f6 	movabs r13,0x55f67b86ef80
  01421:    	test   rax,rax
  01424:    	je     0xfffe39d7
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  0142a:    	mov    rdi,QWORD PTR [r14-0x40]
  0142e: 00 	test   rdi,0x7
  01435:    	jne    0x31547
  0143b:    	cmp    DWORD PTR [rdi+0x4],0x30
  0143f:    	jne    0x31547
  01445: 26 	cmp    DWORD PTR [rip+0xfffffffffffe590d],0x26        # 0xfffe6d59
  0144c:    	jne    0x31547
  01452:    	mov    esi,DWORD PTR [rip+0x454]        # 0x18ac
  01458:    	cmp    esi,0xffffffff
  0145b:    	je     0x31570
  01461:    	cmp    WORD PTR [rdi+0x2],0x3
  01466:    	jne    0x147f
  0146c:    	cmp    esi,0x6
  0146f:    	jge    0x147f
  01475:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0147a:    	jmp    0x14c1
  0147f:    	sub    rsp,0x20
  01483:    	movq   QWORD PTR [rsp],xmm3
  01488:    	movq   QWORD PTR [rsp+0x8],xmm5
  0148e:    	movq   QWORD PTR [rsp+0x10],xmm6
  01494:    	movq   QWORD PTR [rsp+0x18],xmm7
  0149a: f6 	movabs rax,0x55f67a69e160
  014a4:    	call   rax
  014a6:    	movq   xmm3,QWORD PTR [rsp]
  014ab:    	movq   xmm5,QWORD PTR [rsp+0x8]
  014b1:    	movq   xmm6,QWORD PTR [rsp+0x10]
  014b7:    	movq   xmm7,QWORD PTR [rsp+0x18]
  014bd:    	add    rsp,0x20
  014c1:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  014c5:    	mov    rdi,QWORD PTR [rbp-0x30]
  014c9:    	sub    rsp,0x20
  014cd:    	movq   QWORD PTR [rsp],xmm3
  014d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  014d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  014de:    	movq   QWORD PTR [rsp+0x18],xmm7
  014e4: 00 	mov    rsi,0x90
  014eb:    	mov    rdx,r12
  014ee: f6 	movabs rax,0x55f67a71b840
  014f8:    	call   rax
  014fa:    	movq   xmm3,QWORD PTR [rsp]
  014ff:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01505:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0150b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01511:    	add    rsp,0x20
  01515:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  01519:    	mov    rdi,QWORD PTR [r14-0x78]
  0151d: 00 	test   rdi,0x7
  01524:    	jne    0x315cf
  0152a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0152e:    	jne    0x315cf
  01534: 26 	cmp    DWORD PTR [rip+0xfffffffffffe581e],0x26        # 0xfffe6d59
  0153b:    	jne    0x315cf
  01541:    	sub    rsp,0x20
  01545:    	movq   QWORD PTR [rsp],xmm3
  0154a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01550:    	movq   QWORD PTR [rsp+0x10],xmm6
  01556:    	movq   QWORD PTR [rsp+0x18],xmm7
  0155c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01565:    	mov    rax,QWORD PTR [r14-0x78]
  01569:    	mov    QWORD PTR [rsp-0x40],rax
  0156e: 00 	mov    rdi,0x1
  01575:    	lea    r8,[rsp-0x48]
  0157a:    	mov    rax,QWORD PTR [r14-0x80]
  0157e:    	mov    QWORD PTR [r8],rax
  01581:    	sub    r8,0x8
  01585: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0158e: 08 	movabs rax,0x1000800000040
  01598:    	mov    QWORD PTR [rsp-0x30],rax
  0159d: f6 	movabs r13,0x55f67b855f60
  015a7:    	mov    rsi,QWORD PTR [rbx]
  015aa:    	mov    QWORD PTR [rsp-0x18],rsi
  015af:    	lea    rsi,[rsp-0x18]
  015b4:    	mov    QWORD PTR [rbx],rsi
  015b7:    	lea    r14,[rsp-0x10]
  015bc:    	mov    QWORD PTR [rsp-0x20],r14
  015c1:    	call   0xfffe79fa
  015c6:    	lea    r14,[rbp-0x8]
  015ca:    	mov    QWORD PTR [rbx],r14
  015cd:    	mov    r14,QWORD PTR [rbp-0x10]
  015d1:    	movq   xmm3,QWORD PTR [rsp]
  015d6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015dc:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015e2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015e8:    	add    rsp,0x20
  015ec: f6 	movabs r13,0x55f67b86eff0
  015f6:    	test   rax,rax
  015f9:    	je     0xfffe39d7
  015ff:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  01603:    	mov    rdi,QWORD PTR [r14-0x70]
  01607: 00 	test   rdi,0x7
  0160e:    	jne    0x315f8
  01614:    	cmp    DWORD PTR [rdi+0x4],0x28
  01618:    	jne    0x315f8
  0161e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5734],0x26        # 0xfffe6d59
  01625:    	jne    0x315f8
  0162b:    	sub    rsp,0x20
  0162f:    	movq   QWORD PTR [rsp],xmm3
  01634:    	movq   QWORD PTR [rsp+0x8],xmm5
  0163a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01640:    	movq   QWORD PTR [rsp+0x18],xmm7
  01646: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0164f:    	mov    rax,QWORD PTR [r14-0x70]
  01653:    	mov    QWORD PTR [rsp-0x40],rax
  01658: 00 	mov    rdi,0x0
  0165f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01668: 07 	movabs rax,0x1000700000044
  01672:    	mov    QWORD PTR [rsp-0x30],rax
  01677: f6 	movabs r13,0x55f67b84eec0
  01681:    	mov    rsi,QWORD PTR [rbx]
  01684:    	mov    QWORD PTR [rsp-0x18],rsi
  01689:    	lea    rsi,[rsp-0x18]
  0168e:    	mov    QWORD PTR [rbx],rsi
  01691:    	lea    r14,[rsp-0x10]
  01696:    	mov    QWORD PTR [rsp-0x20],r14
  0169b:    	call   0xfffe7660
  016a0:    	lea    r14,[rbp-0x8]
  016a4:    	mov    QWORD PTR [rbx],r14
  016a7:    	mov    r14,QWORD PTR [rbp-0x10]
  016ab:    	movq   xmm3,QWORD PTR [rsp]
  016b0:    	movq   xmm5,QWORD PTR [rsp+0x8]
  016b6:    	movq   xmm6,QWORD PTR [rsp+0x10]
  016bc:    	movq   xmm7,QWORD PTR [rsp+0x18]
  016c2:    	add    rsp,0x20
  016c6: f6 	movabs r13,0x55f67b86f020
  016d0:    	test   rax,rax
  016d3:    	je     0xfffe39d7
  016d9:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  016dd:    	mov    rdi,QWORD PTR [r14-0x40]
  016e1: 00 	test   rdi,0x7
  016e8:    	jne    0x31621
  016ee:    	cmp    DWORD PTR [rdi+0x4],0x30
  016f2:    	jne    0x31621
  016f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe565a],0x26        # 0xfffe6d59
  016ff:    	jne    0x31621
  01705:    	mov    esi,DWORD PTR [rip+0x1a9]        # 0x18b4
  0170b:    	cmp    esi,0xffffffff
  0170e:    	je     0x3164a
  01714:    	cmp    WORD PTR [rdi+0x2],0x3
  01719:    	jne    0x1736
  0171f:    	cmp    esi,0x6
  01722:    	jge    0x1736
  01728:    	mov    rax,QWORD PTR [r14-0x78]
  0172c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01731:    	jmp    0x178f
  01736:    	sub    rsp,0x20
  0173a:    	movq   QWORD PTR [rsp],xmm3
  0173f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01745:    	movq   QWORD PTR [rsp+0x10],xmm6
  0174b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01751:    	mov    rdx,QWORD PTR [r14-0x78]
  01755: f6 	movabs rax,0x55f67a69e3e0
  0175f:    	call   rax
  01761:    	movq   xmm3,QWORD PTR [rsp]
  01766:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0176c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01772:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01778:    	add    rsp,0x20
  0177c: f6 	movabs r13,0x55f67b86f050
  01786:    	test   rax,rax
  01789:    	je     0xfffe39d7
:00110 
:00112 br =>:00113
  0178f:    	jmp    0x317bd
:00113 br =>:00114
  01794:    	jmp    0x31830
:00114 %9 = nil
  01799: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  017a1:    	mov    rax,QWORD PTR [r14-0x78]
  017a5:    	leave  
  017a6:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55f67b870800
load_ivar: no profile
<== finished compile. elapsed:266.7µs
offset:Pos(122644) code: 5466 bytes  data: 262 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2ffab
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x2ffba
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x2ffba
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x2ffc9
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x2ffc9
  000a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe53f9],0x26        # 0xfffe54a1
  000a8:    	jne    0x2ffc9
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	lea    r8,[rsp-0x48]
  000cc:    	mov    rax,QWORD PTR [r14-0x70]
  000d0:    	mov    QWORD PTR [r8],rax
  000d3:    	sub    r8,0x8
  000d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000e0: 05 	movabs rax,0x1000500000042
  000ea:    	mov    QWORD PTR [rsp-0x30],rax
  000ef: f6 	movabs r13,0x55f67b88de50
  000f9:    	mov    rsi,QWORD PTR [rbx]
  000fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00101:    	lea    rsi,[rsp-0x18]
  00106:    	mov    QWORD PTR [rbx],rsi
  00109:    	lea    r14,[rsp-0x10]
  0010e:    	mov    QWORD PTR [rsp-0x20],r14
  00113:    	call   0xfffe61d4
  00118:    	lea    r14,[rbp-0x8]
  0011c:    	mov    QWORD PTR [rbx],r14
  0011f:    	mov    r14,QWORD PTR [rbp-0x10]
  00123: f6 	movabs r13,0x55f67b870850
  0012d:    	test   rax,rax
  00130:    	je     0xfffe211f
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x2ffd8
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xfffe2178
  00193:    	test   rax,rax
  00196:    	je     0x2ffd8
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x13b5]        # 0x155c
:00007 %7 = %1.call dir()                   [Ray]
  001a7:    	mov    rdi,QWORD PTR [r14-0x38]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x2ffe7
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bc:    	jne    0x2ffe7
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe52d8],0x26        # 0xfffe54a1
  001c9:    	jne    0x2ffe7
  001cf:    	mov    esi,DWORD PTR [rip+0x1393]        # 0x1568
  001d5:    	cmp    esi,0xffffffff
  001d8:    	je     0x30003
  001de:    	cmp    WORD PTR [rdi+0x2],0x3
  001e3:    	jne    0x1fc
  001e9:    	cmp    esi,0x6
  001ec:    	jge    0x1fc
  001f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f7:    	jmp    0x21a
  001fc:    	sub    rsp,0x10
  00200:    	movq   QWORD PTR [rsp],xmm2
  00205: f6 	movabs rax,0x55f67a69e160
  0020f:    	call   rax
  00211:    	movq   xmm2,QWORD PTR [rsp]
  00216:    	add    rsp,0x10
  0021a:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  0021e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  0022a:    	mov    rdi,QWORD PTR [r14-0x68]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x3003e
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0023f:    	jne    0x3003e
  00245: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5255],0x26        # 0xfffe54a1
  0024c:    	jne    0x3003e
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00264:    	mov    rax,QWORD PTR [r14-0x68]
  00268:    	mov    QWORD PTR [rsp-0x40],rax
  0026d: 00 	mov    rdi,0x1
  00274:    	lea    r8,[rsp-0x48]
  00279:    	mov    rax,QWORD PTR [r14-0x70]
  0027d:    	mov    QWORD PTR [r8],rax
  00280:    	sub    r8,0x8
  00284: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0028d: 05 	movabs rax,0x1000500000042
  00297:    	mov    QWORD PTR [rsp-0x30],rax
  0029c: f6 	movabs r13,0x55f67b88de50
  002a6:    	mov    rsi,QWORD PTR [rbx]
  002a9:    	mov    QWORD PTR [rsp-0x18],rsi
  002ae:    	lea    rsi,[rsp-0x18]
  002b3:    	mov    QWORD PTR [rbx],rsi
  002b6:    	lea    r14,[rsp-0x10]
  002bb:    	mov    QWORD PTR [rsp-0x20],r14
  002c0:    	call   0xfffe61d4
  002c5:    	lea    r14,[rbp-0x8]
  002c9:    	mov    QWORD PTR [rbx],r14
  002cc:    	mov    r14,QWORD PTR [rbp-0x10]
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	add    rsp,0x10
  002d9: f6 	movabs r13,0x55f67b8708d0
  002e3:    	test   rax,rax
  002e6:    	je     0xfffe211f
  002ec:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002f0:    	mov    rax,QWORD PTR [r14-0x50]
  002f4:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002f8: 00 	movq   xmm3,QWORD PTR [rip+0x126c]        # 0x156c
  00300: 00 	movabs rax,0x8000000000000002
  0030a:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0030e:    	mov    rdi,QWORD PTR [r14-0x50]
  00312: 00 	test   rdi,0x1
  00319:    	jne    0x3005a
  0031f: 00 	test   rdi,0x2
  00326:    	je     0x362
  0032c:    	xorps  xmm4,xmm4
  0032f: 00 	movabs rax,0x8000000000000002
  00339:    	cmp    rdi,rax
  0033c:    	je     0x374
  00342:    	mov    rax,rdi
  00345:    	sar    rax,0x3f
  00349:    	add    rax,0x2
  0034d:    	and    rdi,0xfffffffffffffffc
  00351:    	or     rdi,rax
  00354:    	rol    rdi,0x3d
  00358:    	movq   xmm4,rdi
  0035d:    	jmp    0x374
  00362:    	call   0xfffe2178
  00367:    	test   rax,rax
  0036a:    	je     0x3005a
  00370:    	movq   xmm4,xmm0
  00374:    	ucomisd xmm4,xmm3
  00378:    	jae    0x30076
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0037e:    	movq   xmm5,xmm4
  00382: 00 	xorps  xmm5,XMMWORD PTR [rip+0x11f3]        # 0x157c
:00020 br =>:00021
  00389:    	jmp    0x3009c
:00021 %7 = literal[1e-17]
  0038e: 00 	movq   xmm3,QWORD PTR [rip+0x11f6]        # 0x158c
  00396: aa 	movabs rax,0xe33877aa3236a4ba
  003a0:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003a4:    	mov    rdi,QWORD PTR [r14-0x58]
  003a8: 00 	test   rdi,0x1
  003af:    	jne    0x300cf
  003b5: 00 	test   rdi,0x2
  003bc:    	je     0x3f8
  003c2:    	xorps  xmm5,xmm5
  003c5: 00 	movabs rax,0x8000000000000002
  003cf:    	cmp    rdi,rax
  003d2:    	je     0x40a
  003d8:    	mov    rax,rdi
  003db:    	sar    rax,0x3f
  003df:    	add    rax,0x2
  003e3:    	and    rdi,0xfffffffffffffffc
  003e7:    	or     rdi,rax
  003ea:    	rol    rdi,0x3d
  003ee:    	movq   xmm5,rdi
  003f3:    	jmp    0x40a
  003f8:    	call   0xfffe2178
  003fd:    	test   rax,rax
  00400:    	je     0x300cf
  00406:    	movq   xmm5,xmm0
  0040a:    	ucomisd xmm5,xmm3
  0040e:    	jae    0x422
:00024 %7 = nil
  00414: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  0041c:    	mov    rax,QWORD PTR [r14-0x68]
  00420:    	leave  
  00421:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00422:    	mov    rdi,QWORD PTR [r14-0x38]
  00426: 00 	test   rdi,0x7
  0042d:    	jne    0x300eb
  00433:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00437:    	jne    0x300eb
  0043d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe505d],0x26        # 0xfffe54a1
  00444:    	jne    0x300eb
  0044a:    	mov    esi,DWORD PTR [rip+0x1148]        # 0x1598
  00450:    	cmp    esi,0xffffffff
  00453:    	je     0x30107
  00459:    	cmp    WORD PTR [rdi+0x2],0x3
  0045e:    	jne    0x477
  00464:    	cmp    esi,0x6
  00467:    	jge    0x477
  0046d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00472:    	jmp    0x4b9
  00477:    	sub    rsp,0x20
  0047b:    	movq   QWORD PTR [rsp],xmm2
  00480:    	movq   QWORD PTR [rsp+0x8],xmm3
  00486:    	movq   QWORD PTR [rsp+0x10],xmm4
  0048c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00492: f6 	movabs rax,0x55f67a69e160
  0049c:    	call   rax
  0049e:    	movq   xmm2,QWORD PTR [rsp]
  004a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004b5:    	add    rsp,0x20
  004b9:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004bd:    	mov    rdi,QWORD PTR [rbp-0x30]
  004c1:    	mov    rax,QWORD PTR [rdi+0x18]
  004c5:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c9:    	mov    rdi,QWORD PTR [r14-0x70]
  004cd: 00 	test   rdi,0x7
  004d4:    	jne    0x30166
  004da:    	cmp    DWORD PTR [rdi+0x4],0x28
  004de:    	jne    0x30166
  004e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4fb6],0x26        # 0xfffe54a1
  004eb:    	jne    0x30166
  004f1:    	sub    rsp,0x20
  004f5:    	movq   QWORD PTR [rsp],xmm2
  004fa:    	movq   QWORD PTR [rsp+0x8],xmm4
  00500:    	movq   QWORD PTR [rsp+0x10],xmm5
  00506: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0050f:    	mov    rax,QWORD PTR [r14-0x70]
  00513:    	mov    QWORD PTR [rsp-0x40],rax
  00518: 00 	mov    rdi,0x1
  0051f:    	lea    r8,[rsp-0x48]
  00524:    	mov    rax,QWORD PTR [r14-0x78]
  00528:    	mov    QWORD PTR [r8],rax
  0052b:    	sub    r8,0x8
  0052f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00538: 05 	movabs rax,0x1000500000042
  00542:    	mov    QWORD PTR [rsp-0x30],rax
  00547: f6 	movabs r13,0x55f67b88de50
  00551:    	mov    rsi,QWORD PTR [rbx]
  00554:    	mov    QWORD PTR [rsp-0x18],rsi
  00559:    	lea    rsi,[rsp-0x18]
  0055e:    	mov    QWORD PTR [rbx],rsi
  00561:    	lea    r14,[rsp-0x10]
  00566:    	mov    QWORD PTR [rsp-0x20],r14
  0056b:    	call   0xfffe61d4
  00570:    	lea    r14,[rbp-0x8]
  00574:    	mov    QWORD PTR [rbx],r14
  00577:    	mov    r14,QWORD PTR [rbp-0x10]
  0057b:    	movq   xmm2,QWORD PTR [rsp]
  00580:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00586:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0058c:    	add    rsp,0x20
  00590: f6 	movabs r13,0x55f67b870a10
  0059a:    	test   rax,rax
  0059d:    	je     0xfffe211f
  005a3:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005a7:    	mov    rdi,QWORD PTR [r14-0x68]
  005ab: 00 	test   rdi,0x1
  005b2:    	jne    0x30182
  005b8: 00 	test   rdi,0x2
  005bf:    	je     0x5fb
  005c5:    	xorps  xmm3,xmm3
  005c8: 00 	movabs rax,0x8000000000000002
  005d2:    	cmp    rdi,rax
  005d5:    	je     0x60d
  005db:    	mov    rax,rdi
  005de:    	sar    rax,0x3f
  005e2:    	add    rax,0x2
  005e6:    	and    rdi,0xfffffffffffffffc
  005ea:    	or     rdi,rax
  005ed:    	rol    rdi,0x3d
  005f1:    	movq   xmm3,rdi
  005f6:    	jmp    0x60d
  005fb:    	call   0xfffe2178
  00600:    	test   rax,rax
  00603:    	je     0x30182
  00609:    	movq   xmm3,xmm0
  0060d:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00611: 00 	xorps  xmm3,XMMWORD PTR [rip+0xf84]        # 0x159c
:00036 %6 = %7 / %4                         [Float][Float]
  00618:    	movq   xmm6,xmm3
  0061c:    	movq   rax,xmm4
  00621:    	test   rax,rax
  00624:    	je     0xfffe2144
  0062a:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  0062e: 00 	movq   xmm3,QWORD PTR [rip+0xf76]        # 0x15ac
  00636: 00 	movabs rax,0x8000000000000002
  00640:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00644:    	ucomisd xmm6,xmm3
  00648:    	jbe    0x30b4b
:00040 %7 = %2.call t()                     [Isect]
  0064e:    	mov    rdi,QWORD PTR [r14-0x40]
  00652: 00 	test   rdi,0x7
  00659:    	jne    0x3019e
  0065f:    	cmp    DWORD PTR [rdi+0x4],0x30
  00663:    	jne    0x3019e
  00669: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4e31],0x26        # 0xfffe54a1
  00670:    	jne    0x3019e
  00676:    	mov    esi,DWORD PTR [rip+0xf3c]        # 0x15b8
  0067c:    	cmp    esi,0xffffffff
  0067f:    	je     0x301c7
  00685:    	cmp    WORD PTR [rdi+0x2],0x3
  0068a:    	jne    0x6a3
  00690:    	cmp    esi,0x6
  00693:    	jge    0x6a3
  00699:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0069e:    	jmp    0x6e5
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm5
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm6
  006be: f6 	movabs rax,0x55f67a69e160
  006c8:    	call   rax
  006ca:    	movq   xmm2,QWORD PTR [rsp]
  006cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006db:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006e1:    	add    rsp,0x20
  006e5:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  006e9:    	movq   xmm0,xmm6
  006ed:    	call   0xfffe229c
  006f2:    	mov    QWORD PTR [r14-0x60],rax
  006f6:    	mov    rdi,QWORD PTR [r14-0x60]
  006fa:    	mov    rsi,QWORD PTR [r14-0x68]
  006fe: 00 	test   rdi,0x1
  00705:    	je     0x30226
  0070b: 00 	test   rsi,0x1
  00712:    	je     0x30226
  00718:    	cmp    rdi,rsi
  0071b:    	jge    0x30b7e
:00045 %7 = literal[true]
  00721: 00 	mov    rax,0x1c
  00728:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  0072c:    	mov    rdi,QWORD PTR [r14-0x40]
  00730: 00 	test   rdi,0x7
  00737:    	jne    0x3027b
  0073d:    	cmp    DWORD PTR [rdi+0x4],0x30
  00741:    	jne    0x3027b
  00747: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4d53],0x26        # 0xfffe54a1
  0074e:    	jne    0x3027b
  00754:    	mov    esi,DWORD PTR [rip+0xe66]        # 0x15c0
  0075a:    	cmp    esi,0xffffffff
  0075d:    	je     0x30297
  00763:    	cmp    WORD PTR [rdi+0x2],0x3
  00768:    	jne    0x785
  0076e:    	cmp    esi,0x6
  00771:    	jge    0x785
  00777:    	mov    rax,QWORD PTR [r14-0x68]
  0077b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00780:    	jmp    0x7de
  00785:    	sub    rsp,0x20
  00789:    	movq   QWORD PTR [rsp],xmm2
  0078e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00794:    	movq   QWORD PTR [rsp+0x10],xmm5
  0079a:    	movq   QWORD PTR [rsp+0x18],xmm6
  007a0:    	mov    rdx,QWORD PTR [r14-0x68]
  007a4: f6 	movabs rax,0x55f67a69e3e0
  007ae:    	call   rax
  007b0:    	movq   xmm2,QWORD PTR [rsp]
  007b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007bb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007c1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007c7:    	add    rsp,0x20
  007cb: f6 	movabs r13,0x55f67b870b00
  007d5:    	test   rax,rax
  007d8:    	je     0xfffe211f
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  007de:    	mov    rdi,QWORD PTR [r14-0x40]
  007e2: 00 	test   rdi,0x7
  007e9:    	jne    0x302fd
  007ef:    	cmp    DWORD PTR [rdi+0x4],0x30
  007f3:    	jne    0x302fd
  007f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4ca1],0x26        # 0xfffe54a1
  00800:    	jne    0x302fd
  00806:    	mov    esi,DWORD PTR [rip+0xdbc]        # 0x15c8
  0080c:    	cmp    esi,0xffffffff
  0080f:    	je     0x30319
  00815:    	cmp    WORD PTR [rdi+0x2],0x3
  0081a:    	jne    0x837
  00820:    	cmp    esi,0x6
  00823:    	jge    0x837
  00829:    	mov    rax,QWORD PTR [r14-0x60]
  0082d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00832:    	jmp    0x890
  00837:    	sub    rsp,0x20
  0083b:    	movq   QWORD PTR [rsp],xmm2
  00840:    	movq   QWORD PTR [rsp+0x8],xmm4
  00846:    	movq   QWORD PTR [rsp+0x10],xmm5
  0084c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00852:    	mov    rdx,QWORD PTR [r14-0x60]
  00856: f6 	movabs rax,0x55f67a69e3e0
  00860:    	call   rax
  00862:    	movq   xmm2,QWORD PTR [rsp]
  00867:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0086d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00873:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00879:    	add    rsp,0x20
  0087d: f6 	movabs r13,0x55f67b870b30
  00887:    	test   rax,rax
  0088a:    	je     0xfffe211f
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  00890:    	mov    rdi,QWORD PTR [rbp-0x30]
  00894:    	sub    rsp,0x20
  00898:    	movq   QWORD PTR [rsp],xmm2
  0089d:    	movq   QWORD PTR [rsp+0x8],xmm4
  008a3:    	movq   QWORD PTR [rsp+0x10],xmm5
  008a9:    	movq   QWORD PTR [rsp+0x18],xmm6
  008af: 00 	mov    rsi,0x97
  008b6:    	mov    rdx,r12
  008b9: f6 	movabs rax,0x55f67a71b840
  008c3:    	call   rax
  008c5:    	movq   xmm2,QWORD PTR [rsp]
  008ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008d0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008d6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008dc:    	add    rsp,0x20
  008e0:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008e4:    	mov    rdi,QWORD PTR [r14-0x40]
  008e8: 00 	test   rdi,0x7
  008ef:    	jne    0x3037f
  008f5:    	cmp    DWORD PTR [rdi+0x4],0x30
  008f9:    	jne    0x3037f
  008ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4b9b],0x26        # 0xfffe54a1
  00906:    	jne    0x3037f
  0090c:    	mov    esi,DWORD PTR [rip+0xcbe]        # 0x15d0
  00912:    	cmp    esi,0xffffffff
  00915:    	je     0x3039b
  0091b:    	cmp    WORD PTR [rdi+0x2],0x3
  00920:    	jne    0x93d
  00926:    	cmp    esi,0x6
  00929:    	jge    0x93d
  0092f:    	mov    rax,QWORD PTR [r14-0x68]
  00933:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00938:    	jmp    0x996
  0093d:    	sub    rsp,0x20
  00941:    	movq   QWORD PTR [rsp],xmm2
  00946:    	movq   QWORD PTR [rsp+0x8],xmm4
  0094c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00952:    	movq   QWORD PTR [rsp+0x18],xmm6
  00958:    	mov    rdx,QWORD PTR [r14-0x68]
  0095c: f6 	movabs rax,0x55f67a69e3e0
  00966:    	call   rax
  00968:    	movq   xmm2,QWORD PTR [rsp]
  0096d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00973:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00979:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0097f:    	add    rsp,0x20
  00983: f6 	movabs r13,0x55f67b870b70
  0098d:    	test   rax,rax
  00990:    	je     0xfffe211f
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00996: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4b0f]        # 0xfffe54ac
  0099d: 00 	cmp    rax,QWORD PTR [rip+0xc48]        # 0x15ec
  009a4:    	jne    0x30401
  009aa: 00 	mov    rax,QWORD PTR [rip+0xc2b]        # 0x15dc
  009b1:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [Ray]
  009b5:    	mov    rdi,QWORD PTR [r14-0x38]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x3047d
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009ca:    	jne    0x3047d
  009d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4aca],0x26        # 0xfffe54a1
  009d7:    	jne    0x3047d
  009dd:    	mov    esi,DWORD PTR [rip+0xc15]        # 0x15f8
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x30499
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa4c
  00a0a:    	sub    rsp,0x20
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25: f6 	movabs rax,0x55f67a69e160
  00a2f:    	call   rax
  00a31:    	movq   xmm2,QWORD PTR [rsp]
  00a36:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a3c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a42:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a48:    	add    rsp,0x20
  00a4c:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a50:    	mov    rdi,QWORD PTR [r14-0x80]
  00a54: 00 	test   rdi,0x7
  00a5b:    	jne    0x304f8
  00a61:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a65:    	jne    0x304f8
  00a6b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4a2f],0x26        # 0xfffe54a1
  00a72:    	jne    0x304f8
  00a78:    	mov    esi,DWORD PTR [rip+0xb82]        # 0x1600
  00a7e:    	cmp    esi,0xffffffff
  00a81:    	je     0x30514
  00a87:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8c:    	jne    0xaa5
  00a92:    	cmp    esi,0x6
  00a95:    	jge    0xaa5
  00a9b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa0:    	jmp    0xae7
  00aa5:    	sub    rsp,0x20
  00aa9:    	movq   QWORD PTR [rsp],xmm2
  00aae:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ab4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00aba:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ac0: f6 	movabs rax,0x55f67a69e160
  00aca:    	call   rax
  00acc:    	movq   xmm2,QWORD PTR [rsp]
  00ad1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ad7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00add:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae3:    	add    rsp,0x20
  00ae7:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00aeb:    	mov    rdi,QWORD PTR [r14-0x38]
  00aef: 00 	test   rdi,0x7
  00af6:    	jne    0x30573
  00afc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b00:    	jne    0x30573
  00b06: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4994],0x26        # 0xfffe54a1
  00b0d:    	jne    0x30573
  00b13:    	mov    esi,DWORD PTR [rip+0xaef]        # 0x1608
  00b19:    	cmp    esi,0xffffffff
  00b1c:    	je     0x3058f
  00b22:    	cmp    WORD PTR [rdi+0x2],0x3
  00b27:    	jne    0xb40
  00b2d:    	cmp    esi,0x6
  00b30:    	jge    0xb40
  00b36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b3b:    	jmp    0xb82
  00b40:    	sub    rsp,0x20
  00b44:    	movq   QWORD PTR [rsp],xmm2
  00b49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b5b: f6 	movabs rax,0x55f67a69e160
  00b65:    	call   rax
  00b67:    	movq   xmm2,QWORD PTR [rsp]
  00b6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b7e:    	add    rsp,0x20
  00b82: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b89: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b90: 00 	test   rdi,0x7
  00b97:    	jne    0x305ee
  00b9d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba1:    	jne    0x305ee
  00ba7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe48f3],0x26        # 0xfffe54a1
  00bae:    	jne    0x305ee
  00bb4:    	mov    esi,DWORD PTR [rip+0xa56]        # 0x1610
  00bba:    	cmp    esi,0xffffffff
  00bbd:    	je     0x3060a
  00bc3:    	cmp    WORD PTR [rdi+0x2],0x3
  00bc8:    	jne    0xbe1
  00bce:    	cmp    esi,0x6
  00bd1:    	jge    0xbe1
  00bd7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bdc:    	jmp    0xc23
  00be1:    	sub    rsp,0x20
  00be5:    	movq   QWORD PTR [rsp],xmm2
  00bea:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf0:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bf6:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bfc: f6 	movabs rax,0x55f67a69e160
  00c06:    	call   rax
  00c08:    	movq   xmm2,QWORD PTR [rsp]
  00c0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c13:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c19:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c1f:    	add    rsp,0x20
  00c23:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00c27: 01 	sub    DWORD PTR [rip+0x9e6],0x1        # 0x1614
  00c2e:    	je     0x30685
  00c34:    	mov    rdi,QWORD PTR [r14-0x60]
  00c38:    	mov    rsi,QWORD PTR [r14-0x80]
  00c3c:    	sub    rsp,0x20
  00c40:    	movq   QWORD PTR [rsp],xmm2
  00c45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c57:    	mov    rdx,rdi
  00c5a:    	mov    rcx,rsi
  00c5d:    	mov    rdi,rbx
  00c60:    	mov    rsi,r12
  00c63: f6 	movabs rax,0x55f67a6dfeb0
  00c6d:    	call   rax
  00c6f:    	movq   xmm2,QWORD PTR [rsp]
  00c74:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c7a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c80:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c86:    	add    rsp,0x20
  00c8a: f6 	movabs r13,0x55f67b870c60
  00c94:    	test   rax,rax
  00c97:    	je     0xfffe211f
  00c9d:    	mov    QWORD PTR [r14-0x80],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00ca1:    	mov    rdi,QWORD PTR [r14-0x78]
  00ca5:    	mov    rsi,QWORD PTR [r14-0x80]
  00ca9:    	sub    rsp,0x20
  00cad:    	movq   QWORD PTR [rsp],xmm2
  00cb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cbe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cc4:    	mov    rdx,rdi
  00cc7:    	mov    rcx,rsi
  00cca:    	mov    rdi,rbx
  00ccd:    	mov    rsi,r12
  00cd0: f6 	movabs rax,0x55f67a6ddf30
  00cda:    	call   rax
  00cdc:    	movq   xmm2,QWORD PTR [rsp]
  00ce1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ce7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ced:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cf3:    	add    rsp,0x20
  00cf7: f6 	movabs r13,0x55f67b870c70
  00d01:    	test   rax,rax
  00d04:    	je     0xfffe211f
  00d0a:    	mov    QWORD PTR [r14-0x78],rax
:00071 %11 = %1.call org()                  [Ray]
  00d0e:    	mov    rdi,QWORD PTR [r14-0x38]
  00d12: 00 	test   rdi,0x7
  00d19:    	jne    0x306a3
  00d1f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d23:    	jne    0x306a3
  00d29: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4771],0x26        # 0xfffe54a1
  00d30:    	jne    0x306a3
  00d36:    	mov    esi,DWORD PTR [rip+0x8e0]        # 0x161c
  00d3c:    	cmp    esi,0xffffffff
  00d3f:    	je     0x306bf
  00d45:    	cmp    WORD PTR [rdi+0x2],0x3
  00d4a:    	jne    0xd63
  00d50:    	cmp    esi,0x6
  00d53:    	jge    0xd63
  00d59:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d5e:    	jmp    0xda5
  00d63:    	sub    rsp,0x20
  00d67:    	movq   QWORD PTR [rsp],xmm2
  00d6c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d72:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d78:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d7e: f6 	movabs rax,0x55f67a69e160
  00d88:    	call   rax
  00d8a:    	movq   xmm2,QWORD PTR [rsp]
  00d8f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d95:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d9b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00da1:    	add    rsp,0x20
  00da5: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00dac: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00db3: 00 	test   rdi,0x7
  00dba:    	jne    0x3071e
  00dc0:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dc4:    	jne    0x3071e
  00dca: 26 	cmp    DWORD PTR [rip+0xfffffffffffe46d0],0x26        # 0xfffe54a1
  00dd1:    	jne    0x3071e
  00dd7:    	mov    esi,DWORD PTR [rip+0x847]        # 0x1624
  00ddd:    	cmp    esi,0xffffffff
  00de0:    	je     0x3073a
  00de6:    	cmp    WORD PTR [rdi+0x2],0x3
  00deb:    	jne    0xe04
  00df1:    	cmp    esi,0x6
  00df4:    	jge    0xe04
  00dfa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dff:    	jmp    0xe46
  00e04:    	sub    rsp,0x20
  00e08:    	movq   QWORD PTR [rsp],xmm2
  00e0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e13:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e19:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e1f: f6 	movabs rax,0x55f67a69e160
  00e29:    	call   rax
  00e2b:    	movq   xmm2,QWORD PTR [rsp]
  00e30:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e36:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e3c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e42:    	add    rsp,0x20
  00e46:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e4a:    	mov    rdi,QWORD PTR [r14-0x38]
  00e4e: 00 	test   rdi,0x7
  00e55:    	jne    0x30799
  00e5b:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e5f:    	jne    0x30799
  00e65: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4635],0x26        # 0xfffe54a1
  00e6c:    	jne    0x30799
  00e72:    	mov    esi,DWORD PTR [rip+0x7b4]        # 0x162c
  00e78:    	cmp    esi,0xffffffff
  00e7b:    	je     0x307b5
  00e81:    	cmp    WORD PTR [rdi+0x2],0x3
  00e86:    	jne    0xe9f
  00e8c:    	cmp    esi,0x6
  00e8f:    	jge    0xe9f
  00e95:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e9a:    	jmp    0xee1
  00e9f:    	sub    rsp,0x20
  00ea3:    	movq   QWORD PTR [rsp],xmm2
  00ea8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eae:    	movq   QWORD PTR [rsp+0x10],xmm5
  00eb4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eba: f6 	movabs rax,0x55f67a69e160
  00ec4:    	call   rax
  00ec6:    	movq   xmm2,QWORD PTR [rsp]
  00ecb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ed7:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00edd:    	add    rsp,0x20
  00ee1: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00ee8: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00eef: 00 	test   rdi,0x7
  00ef6:    	jne    0x30814
  00efc:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f00:    	jne    0x30814
  00f06: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4594],0x26        # 0xfffe54a1
  00f0d:    	jne    0x30814
  00f13:    	mov    esi,DWORD PTR [rip+0x71b]        # 0x1634
  00f19:    	cmp    esi,0xffffffff
  00f1c:    	je     0x30830
  00f22:    	cmp    WORD PTR [rdi+0x2],0x3
  00f27:    	jne    0xf40
  00f2d:    	cmp    esi,0x6
  00f30:    	jge    0xf40
  00f36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f3b:    	jmp    0xf82
  00f40:    	sub    rsp,0x20
  00f44:    	movq   QWORD PTR [rsp],xmm2
  00f49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f5b: f6 	movabs rax,0x55f67a69e160
  00f65:    	call   rax
  00f67:    	movq   xmm2,QWORD PTR [rsp]
  00f6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f7e:    	add    rsp,0x20
  00f82: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  00f89:    	mov    rdi,QWORD PTR [r14-0x60]
  00f8d: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00f94:    	sub    rsp,0x20
  00f98:    	movq   QWORD PTR [rsp],xmm2
  00f9d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fa3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fa9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00faf:    	mov    rdx,rdi
  00fb2:    	mov    rcx,rsi
  00fb5:    	mov    rdi,rbx
  00fb8:    	mov    rsi,r12
  00fbb: f6 	movabs rax,0x55f67a6dfeb0
  00fc5:    	call   rax
  00fc7:    	movq   xmm2,QWORD PTR [rsp]
  00fcc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fd2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fd8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fde:    	add    rsp,0x20
  00fe2: f6 	movabs r13,0x55f67b870d40
  00fec:    	test   rax,rax
  00fef:    	je     0xfffe211f
  00ff5: ff 	mov    QWORD PTR [r14-0x88],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00ffc:    	mov    rdi,QWORD PTR [r14-0x80]
  01000: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01007:    	sub    rsp,0x20
  0100b:    	movq   QWORD PTR [rsp],xmm2
  01010:    	movq   QWORD PTR [rsp+0x8],xmm4
  01016:    	movq   QWORD PTR [rsp+0x10],xmm5
  0101c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01022:    	mov    rdx,rdi
  01025:    	mov    rcx,rsi
  01028:    	mov    rdi,rbx
  0102b:    	mov    rsi,r12
  0102e: f6 	movabs rax,0x55f67a6ddf30
  01038:    	call   rax
  0103a:    	movq   xmm2,QWORD PTR [rsp]
  0103f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01045:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0104b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01051:    	add    rsp,0x20
  01055: f6 	movabs r13,0x55f67b870d50
  0105f:    	test   rax,rax
  01062:    	je     0xfffe211f
  01068:    	mov    QWORD PTR [r14-0x80],rax
:00085 %12 = %1.call org()                  [Ray]
  0106c:    	mov    rdi,QWORD PTR [r14-0x38]
  01070: 00 	test   rdi,0x7
  01077:    	jne    0x3088f
  0107d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01081:    	jne    0x3088f
  01087: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4413],0x26        # 0xfffe54a1
  0108e:    	jne    0x3088f
  01094:    	mov    esi,DWORD PTR [rip+0x5a2]        # 0x163c
  0109a:    	cmp    esi,0xffffffff
  0109d:    	je     0x308ab
  010a3:    	cmp    WORD PTR [rdi+0x2],0x3
  010a8:    	jne    0x10c1
  010ae:    	cmp    esi,0x6
  010b1:    	jge    0x10c1
  010b7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010bc:    	jmp    0x1103
  010c1:    	sub    rsp,0x20
  010c5:    	movq   QWORD PTR [rsp],xmm2
  010ca:    	movq   QWORD PTR [rsp+0x8],xmm4
  010d0:    	movq   QWORD PTR [rsp+0x10],xmm5
  010d6:    	movq   QWORD PTR [rsp+0x18],xmm6
  010dc: f6 	movabs rax,0x55f67a69e160
  010e6:    	call   rax
  010e8:    	movq   xmm2,QWORD PTR [rsp]
  010ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010ff:    	add    rsp,0x20
  01103: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  0110a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01111: 00 	test   rdi,0x7
  01118:    	jne    0x3090a
  0111e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01122:    	jne    0x3090a
  01128: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4372],0x26        # 0xfffe54a1
  0112f:    	jne    0x3090a
  01135:    	mov    esi,DWORD PTR [rip+0x509]        # 0x1644
  0113b:    	cmp    esi,0xffffffff
  0113e:    	je     0x30926
  01144:    	cmp    WORD PTR [rdi+0x2],0x3
  01149:    	jne    0x1162
  0114f:    	cmp    esi,0x6
  01152:    	jge    0x1162
  01158:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0115d:    	jmp    0x11a4
  01162:    	sub    rsp,0x20
  01166:    	movq   QWORD PTR [rsp],xmm2
  0116b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01171:    	movq   QWORD PTR [rsp+0x10],xmm5
  01177:    	movq   QWORD PTR [rsp+0x18],xmm6
  0117d: f6 	movabs rax,0x55f67a69e160
  01187:    	call   rax
  01189:    	movq   xmm2,QWORD PTR [rsp]
  0118e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01194:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0119a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011a0:    	add    rsp,0x20
  011a4: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  011ab:    	mov    rdi,QWORD PTR [r14-0x38]
  011af: 00 	test   rdi,0x7
  011b6:    	jne    0x30985
  011bc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  011c0:    	jne    0x30985
  011c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe42d4],0x26        # 0xfffe54a1
  011cd:    	jne    0x30985
  011d3:    	mov    esi,DWORD PTR [rip+0x473]        # 0x164c
  011d9:    	cmp    esi,0xffffffff
  011dc:    	je     0x309a1
  011e2:    	cmp    WORD PTR [rdi+0x2],0x3
  011e7:    	jne    0x1200
  011ed:    	cmp    esi,0x6
  011f0:    	jge    0x1200
  011f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011fb:    	jmp    0x1242
  01200:    	sub    rsp,0x20
  01204:    	movq   QWORD PTR [rsp],xmm2
  01209:    	movq   QWORD PTR [rsp+0x8],xmm4
  0120f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01215:    	movq   QWORD PTR [rsp+0x18],xmm6
  0121b: f6 	movabs rax,0x55f67a69e160
  01225:    	call   rax
  01227:    	movq   xmm2,QWORD PTR [rsp]
  0122c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01232:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01238:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0123e:    	add    rsp,0x20
  01242: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  01249: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01250: 00 	test   rdi,0x7
  01257:    	jne    0x30a00
  0125d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01261:    	jne    0x30a00
  01267: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4233],0x26        # 0xfffe54a1
  0126e:    	jne    0x30a00
  01274:    	mov    esi,DWORD PTR [rip+0x3da]        # 0x1654
  0127a:    	cmp    esi,0xffffffff
  0127d:    	je     0x30a1c
  01283:    	cmp    WORD PTR [rdi+0x2],0x3
  01288:    	jne    0x12a1
  0128e:    	cmp    esi,0x6
  01291:    	jge    0x12a1
  01297:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0129c:    	jmp    0x12e3
  012a1:    	sub    rsp,0x20
  012a5:    	movq   QWORD PTR [rsp],xmm2
  012aa:    	movq   QWORD PTR [rsp+0x8],xmm4
  012b0:    	movq   QWORD PTR [rsp+0x10],xmm5
  012b6:    	movq   QWORD PTR [rsp+0x18],xmm6
  012bc: f6 	movabs rax,0x55f67a69e160
  012c6:    	call   rax
  012c8:    	movq   xmm2,QWORD PTR [rsp]
  012cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012df:    	add    rsp,0x20
  012e3: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  012ea:    	mov    rdi,QWORD PTR [r14-0x60]
  012ee: ff 	mov    rsi,QWORD PTR [r14-0x90]
  012f5:    	sub    rsp,0x20
  012f9:    	movq   QWORD PTR [rsp],xmm2
  012fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  01304:    	movq   QWORD PTR [rsp+0x10],xmm5
  0130a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01310:    	mov    rdx,rdi
  01313:    	mov    rcx,rsi
  01316:    	mov    rdi,rbx
  01319:    	mov    rsi,r12
  0131c: f6 	movabs rax,0x55f67a6dfeb0
  01326:    	call   rax
  01328:    	movq   xmm2,QWORD PTR [rsp]
  0132d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01333:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01339:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0133f:    	add    rsp,0x20
  01343: f6 	movabs r13,0x55f67b870e20
  0134d:    	test   rax,rax
  01350:    	je     0xfffe211f
  01356: ff 	mov    QWORD PTR [r14-0x90],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  0135d: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01364: ff 	mov    rsi,QWORD PTR [r14-0x90]
  0136b:    	sub    rsp,0x20
  0136f:    	movq   QWORD PTR [rsp],xmm2
  01374:    	movq   QWORD PTR [rsp+0x8],xmm4
  0137a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01380:    	movq   QWORD PTR [rsp+0x18],xmm6
  01386:    	mov    rdx,rdi
  01389:    	mov    rcx,rsi
  0138c:    	mov    rdi,rbx
  0138f:    	mov    rsi,r12
  01392: f6 	movabs rax,0x55f67a6ddf30
  0139c:    	call   rax
  0139e:    	movq   xmm2,QWORD PTR [rsp]
  013a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013af:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013b5:    	add    rsp,0x20
  013b9: f6 	movabs r13,0x55f67b870e30
  013c3:    	test   rax,rax
  013c6:    	je     0xfffe211f
  013cc: ff 	mov    QWORD PTR [r14-0x88],rax
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  013d3:    	mov    rdi,QWORD PTR [r14-0x70]
  013d7: 00 	test   rdi,0x7
  013de:    	jne    0x30a7b
  013e4:    	cmp    DWORD PTR [rdi+0x4],0x29
  013e8:    	jne    0x30a7b
  013ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffe40ac],0x26        # 0xfffe54a1
  013f5:    	jne    0x30a7b
  013fb: 00 	mov    r9,0x0
  01402:    	sub    rsp,0x20
  01406:    	movq   QWORD PTR [rsp],xmm2
  0140b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01411:    	movq   QWORD PTR [rsp+0x10],xmm5
  01417:    	movq   QWORD PTR [rsp+0x18],xmm6
  0141d:    	mov    rdx,rdi
  01420:    	mov    QWORD PTR [rsp-0x40],rcx
  01425: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0142e:    	lea    rcx,[r14-0x78]
  01432: 00 	mov    r8,0x3
  01439:    	mov    rsi,QWORD PTR [rbx]
  0143c:    	mov    QWORD PTR [rsp-0x18],rsi
  01441:    	lea    rsi,[rsp-0x18]
  01446:    	mov    QWORD PTR [rbx],rsi
  01449:    	lea    r14,[rsp-0x10]
  0144e:    	mov    QWORD PTR [rsp-0x20],r14
  01453:    	call   0x30a97
  01458:    	lea    r14,[rbp-0x8]
  0145c:    	mov    QWORD PTR [rbx],r14
  0145f:    	mov    r14,QWORD PTR [rbp-0x10]
  01463:    	movq   xmm2,QWORD PTR [rsp]
  01468:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0146e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01474:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0147a:    	add    rsp,0x20
  0147e: f6 	movabs r13,0x55f67b870e50
  01488:    	test   rax,rax
  0148b:    	je     0xfffe211f
  01491:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  01495:    	mov    rdi,QWORD PTR [r14-0x40]
  01499: 00 	test   rdi,0x7
  014a0:    	jne    0x30ac9
  014a6:    	cmp    DWORD PTR [rdi+0x4],0x30
  014aa:    	jne    0x30ac9
  014b0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3fea],0x26        # 0xfffe54a1
  014b7:    	jne    0x30ac9
  014bd:    	mov    esi,DWORD PTR [rip+0x199]        # 0x165c
  014c3:    	cmp    esi,0xffffffff
  014c6:    	je     0x30ae5
  014cc:    	cmp    WORD PTR [rdi+0x2],0x3
  014d1:    	jne    0x14ee
  014d7:    	cmp    esi,0x6
  014da:    	jge    0x14ee
  014e0:    	mov    rax,QWORD PTR [r14-0x68]
  014e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014e9:    	jmp    0x1547
  014ee:    	sub    rsp,0x20
  014f2:    	movq   QWORD PTR [rsp],xmm2
  014f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014fd:    	movq   QWORD PTR [rsp+0x10],xmm5
  01503:    	movq   QWORD PTR [rsp+0x18],xmm6
  01509:    	mov    rdx,QWORD PTR [r14-0x68]
  0150d: f6 	movabs rax,0x55f67a69e3e0
  01517:    	call   rax
  01519:    	movq   xmm2,QWORD PTR [rsp]
  0151e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01524:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0152a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01530:    	add    rsp,0x20
  01534: f6 	movabs r13,0x55f67b870e80
  0153e:    	test   rax,rax
  01541:    	je     0xfffe211f
:00103 
:00105 br =>:00106
  01547:    	jmp    0x30ba4
:00106 %7 = nil
  0154c: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01554:    	mov    rax,QWORD PTR [r14-0x68]
  01558:    	leave  
  01559:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55f67b867230
<== finished compile. elapsed:143.9µs
offset:Pos(128372) code: 9287 bytes  data: 413 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [rbp-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x2f579
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x32
  000a7:    	jne    0x2f579
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3d89],0x26        # 0xfffe3e41
  000b8:    	jne    0x2f588
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0xa0]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x2f597
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: f6 	movabs r13,0x55f67b867260
  00118:    	test   rax,rax
  0011b:    	je     0xfffe0abf
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00004 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00005 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x2311]        # 0x244c
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00006 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x230b]        # 0x245c
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3cd0],0x26        # 0xfffe3e41
  00171:    	jne    0x2f5c9
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa8]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x2f5e8
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: f6 	movabs r13,0x55f67b8672d0
  001e3:    	test   rax,rax
  001e6:    	je     0xfffe0abf
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x2f61a
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xfffe0b18
  0024f:    	test   rax,rax
  00252:    	je     0x2f61a
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3be1]        # 0xfffe3e4c
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x220a]        # 0x247c
  00272:    	jne    0x2f639
  00278: 00 	mov    rax,QWORD PTR [rip+0x21ed]        # 0x246c
  0027f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x2f69d
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0029e:    	jne    0x2f69d
  002a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3b96],0x26        # 0xfffe3e41
  002ab:    	jne    0x2f69d
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: f6 	movabs rax,0x55f67a6f91a0
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3b62]        # 0xfffe3e4c
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x21ab]        # 0x249c
  002f1:    	jne    0x2f6c0
  002f7: 00 	mov    rax,QWORD PTR [rip+0x218e]        # 0x248c
  002fe: ff 	mov    QWORD PTR [r14-0xa8],rax
:00018 %16 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x219f]        # 0x24ac
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xb0],rax
:00019 %16 = %16 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x2f724
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xfffe0b18
  00377:    	test   rax,rax
  0037a:    	je     0x2f724
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x2f750
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x21
  003a0:    	jne    0x2f750
  003a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3a94],0x26        # 0xfffe3e41
  003ad:    	jne    0x2f750
  003b3:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe3a86]        # 0xfffe3e4c
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x20ff]        # 0x24cc
  003cd:    	jne    0x2f78c
  003d3: 00 	mov    rax,QWORD PTR [rip+0x20e2]        # 0x24bc
  003da: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x2f814
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x21
  003f9:    	jne    0x2f814
  003ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3a3b],0x26        # 0xfffe3e41
  00406:    	jne    0x2f814
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: f6 	movabs rax,0x55f67a6f91b0
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe39e3]        # 0xfffe3e4c
  00469: 00 	cmp    rax,QWORD PTR [rip+0x207c]        # 0x24ec
  00470:    	jne    0x2f854
  00476: 00 	mov    rax,QWORD PTR [rip+0x205f]        # 0x24dc
  0047d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00030 %16 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x2070]        # 0x24fc
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xb0],rax
:00031 %16 = %16 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x2f8dc
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004b9:    	jne    0x2f8dc
  004bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe397b],0x26        # 0xfffe3e41
  004c6:    	jne    0x2f8dc
  004cc:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe396b]        # 0xfffe3e4c
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x2034]        # 0x251c
  004e8:    	jne    0x2f925
  004ee: 00 	mov    rax,QWORD PTR [rip+0x2017]        # 0x250c
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x2f9bb
  00510:    	cmp    DWORD PTR [rdi+0x4],0x21
  00514:    	jne    0x2f9bb
  0051a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3920],0x26        # 0xfffe3e41
  00521:    	jne    0x2f9bb
  00527:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [rbp-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 %15 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  00548:    	sub    rsp,0x30
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563:    	movq   QWORD PTR [rsp+0x20],xmm7
  00569: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00570: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00577: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  0057e:    	mov    rdi,rbx
  00581:    	mov    rsi,r12
  00584: f6 	movabs r8,0x55f67b8674e8
  0058e: f6 	movabs rax,0x55f67a71b620
  00598:    	call   rax
  0059a:    	movq   xmm2,QWORD PTR [rsp]
  0059f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ab:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005b1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b7: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005be:    	add    rsp,0x30
  005c2: f6 	movabs r13,0x55f67b8674f0
  005cc:    	test   rax,rax
  005cf:    	je     0xfffe0abf
  005d5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 %13 = %14.call x()                   [Vec]
  005dc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005e3: 00 	test   rdi,0x7
  005ea:    	jne    0x2fa12
  005f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  005f4:    	jne    0x2fa12
  005fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3840],0x26        # 0xfffe3e41
  00601:    	jne    0x2fa12
  00607:    	mov    esi,DWORD PTR [rip+0x1f1b]        # 0x2528
  0060d:    	cmp    esi,0xffffffff
  00610:    	je     0x2fa66
  00616:    	cmp    WORD PTR [rdi+0x2],0x3
  0061b:    	jne    0x634
  00621:    	cmp    esi,0x6
  00624:    	jge    0x634
  0062a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0062f:    	jmp    0x690
  00634:    	sub    rsp,0x30
  00638:    	movq   QWORD PTR [rsp],xmm2
  0063d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00643:    	movq   QWORD PTR [rsp+0x10],xmm4
  00649:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00655: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0065c: f6 	movabs rax,0x55f67a69e160
  00666:    	call   rax
  00668:    	movq   xmm2,QWORD PTR [rsp]
  0066d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00673:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0067f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00685: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0068c:    	add    rsp,0x30
  00690: ff 	mov    QWORD PTR [r14-0x98],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  00697: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0069e: 00 	test   rdi,0x1
  006a5:    	jne    0x2fadf
  006ab: 00 	test   rdi,0x2
  006b2:    	je     0x6ee
  006b8:    	xorps  xmm6,xmm6
  006bb: 00 	movabs rax,0x8000000000000002
  006c5:    	cmp    rdi,rax
  006c8:    	je     0x700
  006ce:    	mov    rax,rdi
  006d1:    	sar    rax,0x3f
  006d5:    	add    rax,0x2
  006d9:    	and    rdi,0xfffffffffffffffc
  006dd:    	or     rdi,rax
  006e0:    	rol    rdi,0x3d
  006e4:    	movq   xmm6,rdi
  006e9:    	jmp    0x700
  006ee:    	call   0xfffe0b18
  006f3:    	test   rax,rax
  006f6:    	je     0x2fadf
  006fc:    	movq   xmm6,xmm0
  00700:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00704:    	mov    rax,QWORD PTR [rbp-0x18]
  00708:    	mov    rax,QWORD PTR [rax]
  0070b:    	mov    rax,QWORD PTR [rax-0x28]
  0070f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00049 %16 = 1: i32
  00716: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00721:    	sub    rsp,0x30
  00725:    	movq   QWORD PTR [rsp],xmm2
  0072a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00730:    	movq   QWORD PTR [rsp+0x10],xmm5
  00736:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00742: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00749: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00750: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00757:    	mov    rdi,rbx
  0075a:    	mov    rsi,r12
  0075d: f6 	movabs r8,0x55f67b867558
  00767: f6 	movabs rax,0x55f67a71b620
  00771:    	call   rax
  00773:    	movq   xmm2,QWORD PTR [rsp]
  00778:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0077e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00784:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0078a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00790: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00797:    	add    rsp,0x30
  0079b: f6 	movabs r13,0x55f67b867560
  007a5:    	test   rax,rax
  007a8:    	je     0xfffe0abf
  007ae: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 %14 = %15.call x()                   [Vec]
  007b5: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  007bc: 00 	test   rdi,0x7
  007c3:    	jne    0x2fb33
  007c9:    	cmp    DWORD PTR [rdi+0x4],0x28
  007cd:    	jne    0x2fb33
  007d3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3667],0x26        # 0xfffe3e41
  007da:    	jne    0x2fb33
  007e0:    	mov    esi,DWORD PTR [rip+0x1d4a]        # 0x2530
  007e6:    	cmp    esi,0xffffffff
  007e9:    	je     0x2fb87
  007ef:    	cmp    WORD PTR [rdi+0x2],0x3
  007f4:    	jne    0x80d
  007fa:    	cmp    esi,0x6
  007fd:    	jge    0x80d
  00803:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00808:    	jmp    0x869
  0080d:    	sub    rsp,0x30
  00811:    	movq   QWORD PTR [rsp],xmm2
  00816:    	movq   QWORD PTR [rsp+0x8],xmm4
  0081c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00822:    	movq   QWORD PTR [rsp+0x18],xmm6
  00828:    	movq   QWORD PTR [rsp+0x20],xmm7
  0082e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00835: f6 	movabs rax,0x55f67a69e160
  0083f:    	call   rax
  00841:    	movq   xmm2,QWORD PTR [rsp]
  00846:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0084c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00852:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00858:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0085e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00865:    	add    rsp,0x30
  00869: ff 	mov    QWORD PTR [r14-0xa0],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00870: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00877: 00 	test   rdi,0x1
  0087e:    	jne    0x2fc00
  00884: 00 	test   rdi,0x2
  0088b:    	je     0x8c7
  00891:    	xorps  xmm3,xmm3
  00894: 00 	movabs rax,0x8000000000000002
  0089e:    	cmp    rdi,rax
  008a1:    	je     0x8d9
  008a7:    	mov    rax,rdi
  008aa:    	sar    rax,0x3f
  008ae:    	add    rax,0x2
  008b2:    	and    rdi,0xfffffffffffffffc
  008b6:    	or     rdi,rax
  008b9:    	rol    rdi,0x3d
  008bd:    	movq   xmm3,rdi
  008c2:    	jmp    0x8d9
  008c7:    	call   0xfffe0b18
  008cc:    	test   rax,rax
  008cf:    	je     0x2fc00
  008d5:    	movq   xmm3,xmm0
  008d9:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008de:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008e2:    	mov    rax,QWORD PTR [rbp-0x18]
  008e6:    	mov    rax,QWORD PTR [rax]
  008e9:    	mov    rax,QWORD PTR [rax-0x28]
  008ed: ff 	mov    QWORD PTR [r14-0xa8],rax
:00057 %16 = 2: i32
  008f4: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  008ff:    	sub    rsp,0x40
  00903:    	movq   QWORD PTR [rsp],xmm2
  00908:    	movq   QWORD PTR [rsp+0x8],xmm3
  0090e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00914:    	movq   QWORD PTR [rsp+0x18],xmm5
  0091a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00920:    	movq   QWORD PTR [rsp+0x28],xmm7
  00926: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0092d: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00934: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  0093b:    	mov    rdi,rbx
  0093e:    	mov    rsi,r12
  00941: f6 	movabs r8,0x55f67b8675d8
  0094b: f6 	movabs rax,0x55f67a71b620
  00955:    	call   rax
  00957:    	movq   xmm2,QWORD PTR [rsp]
  0095c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00962:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00968:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00974:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0097a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00981:    	add    rsp,0x40
  00985: f6 	movabs r13,0x55f67b8675e0
  0098f:    	test   rax,rax
  00992:    	je     0xfffe0abf
  00998: ff 	mov    QWORD PTR [r14-0xa8],rax
:00059 %14 = %15.call x()                   [Vec]
  0099f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  009a6: 00 	test   rdi,0x7
  009ad:    	jne    0x2fc54
  009b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  009b7:    	jne    0x2fc54
  009bd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe347d],0x26        # 0xfffe3e41
  009c4:    	jne    0x2fc54
  009ca:    	mov    esi,DWORD PTR [rip+0x1b68]        # 0x2538
  009d0:    	cmp    esi,0xffffffff
  009d3:    	je     0x2fca8
  009d9:    	cmp    WORD PTR [rdi+0x2],0x3
  009de:    	jne    0x9f7
  009e4:    	cmp    esi,0x6
  009e7:    	jge    0x9f7
  009ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009f2:    	jmp    0xa53
  009f7:    	sub    rsp,0x30
  009fb:    	movq   QWORD PTR [rsp],xmm2
  00a00:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a06:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a0c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a12:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a18: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a1f: f6 	movabs rax,0x55f67a69e160
  00a29:    	call   rax
  00a2b:    	movq   xmm2,QWORD PTR [rsp]
  00a30:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a36:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a3c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a42:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a48: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a4f:    	add    rsp,0x30
  00a53: ff 	mov    QWORD PTR [r14-0xa0],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a5a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a61: 00 	test   rdi,0x1
  00a68:    	jne    0x2fd21
  00a6e: 00 	test   rdi,0x2
  00a75:    	je     0xab1
  00a7b:    	xorps  xmm3,xmm3
  00a7e: 00 	movabs rax,0x8000000000000002
  00a88:    	cmp    rdi,rax
  00a8b:    	je     0xac3
  00a91:    	mov    rax,rdi
  00a94:    	sar    rax,0x3f
  00a98:    	add    rax,0x2
  00a9c:    	and    rdi,0xfffffffffffffffc
  00aa0:    	or     rdi,rax
  00aa3:    	rol    rdi,0x3d
  00aa7:    	movq   xmm3,rdi
  00aac:    	jmp    0xac3
  00ab1:    	call   0xfffe0b18
  00ab6:    	test   rax,rax
  00ab9:    	je     0x2fd21
  00abf:    	movq   xmm3,xmm0
  00ac3:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ac7:    	movq   xmm9,xmm6
  00acc:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ad1:    	mov    rax,QWORD PTR [rbp-0x18]
  00ad5:    	mov    rax,QWORD PTR [rax]
  00ad8:    	mov    rax,QWORD PTR [rax-0x28]
  00adc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00065 %15 = 0: i32
  00ae3: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00aee:    	sub    rsp,0x40
  00af2:    	movq   QWORD PTR [rsp],xmm2
  00af7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00afd:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b03:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b09:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b0f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b16: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b1d: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00b24: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00b2b:    	mov    rdi,rbx
  00b2e:    	mov    rsi,r12
  00b31: f6 	movabs r8,0x55f67b867658
  00b3b: f6 	movabs rax,0x55f67a71b620
  00b45:    	call   rax
  00b47:    	movq   xmm2,QWORD PTR [rsp]
  00b4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b58:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b5e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b64: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b6b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b72:    	add    rsp,0x40
  00b76: f6 	movabs r13,0x55f67b867660
  00b80:    	test   rax,rax
  00b83:    	je     0xfffe0abf
  00b89: ff 	mov    QWORD PTR [r14-0xa0],rax
:00067 %13 = %14.call y()                   [Vec]
  00b90: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b97: 00 	test   rdi,0x7
  00b9e:    	jne    0x2fd75
  00ba4:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba8:    	jne    0x2fd75
  00bae: 26 	cmp    DWORD PTR [rip+0xfffffffffffe328c],0x26        # 0xfffe3e41
  00bb5:    	jne    0x2fd75
  00bbb:    	mov    esi,DWORD PTR [rip+0x197f]        # 0x2540
  00bc1:    	cmp    esi,0xffffffff
  00bc4:    	je     0x2fdc7
  00bca:    	cmp    WORD PTR [rdi+0x2],0x3
  00bcf:    	jne    0xbe8
  00bd5:    	cmp    esi,0x6
  00bd8:    	jge    0xbe8
  00bde:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be3:    	jmp    0xc46
  00be8:    	sub    rsp,0x30
  00bec:    	movq   QWORD PTR [rsp],xmm2
  00bf1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bfd:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c03: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c0a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c11: f6 	movabs rax,0x55f67a69e160
  00c1b:    	call   rax
  00c1d:    	movq   xmm2,QWORD PTR [rsp]
  00c22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c2e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c34: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c3b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c42:    	add    rsp,0x30
  00c46: ff 	mov    QWORD PTR [r14-0x98],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c4d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c54: 00 	test   rdi,0x1
  00c5b:    	jne    0x2fe42
  00c61: 00 	test   rdi,0x2
  00c68:    	je     0xca4
  00c6e:    	xorps  xmm3,xmm3
  00c71: 00 	movabs rax,0x8000000000000002
  00c7b:    	cmp    rdi,rax
  00c7e:    	je     0xcb6
  00c84:    	mov    rax,rdi
  00c87:    	sar    rax,0x3f
  00c8b:    	add    rax,0x2
  00c8f:    	and    rdi,0xfffffffffffffffc
  00c93:    	or     rdi,rax
  00c96:    	rol    rdi,0x3d
  00c9a:    	movq   xmm3,rdi
  00c9f:    	jmp    0xcb6
  00ca4:    	call   0xfffe0b18
  00ca9:    	test   rax,rax
  00cac:    	je     0x2fe42
  00cb2:    	movq   xmm3,xmm0
  00cb6:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00cba:    	mov    rax,QWORD PTR [rbp-0x18]
  00cbe:    	mov    rax,QWORD PTR [rax]
  00cc1:    	mov    rax,QWORD PTR [rax-0x28]
  00cc5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00072 %16 = 1: i32
  00ccc: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cd7:    	sub    rsp,0x40
  00cdb:    	movq   QWORD PTR [rsp],xmm2
  00ce0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ce6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cf2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00cf8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00cff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00d0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00d14:    	mov    rdi,rbx
  00d17:    	mov    rsi,r12
  00d1a: f6 	movabs r8,0x55f67b8676c8
  00d24: f6 	movabs rax,0x55f67a71b620
  00d2e:    	call   rax
  00d30:    	movq   xmm2,QWORD PTR [rsp]
  00d35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d47:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d4d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d54: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d5b:    	add    rsp,0x40
  00d5f: f6 	movabs r13,0x55f67b8676d0
  00d69:    	test   rax,rax
  00d6c:    	je     0xfffe0abf
  00d72: ff 	mov    QWORD PTR [r14-0xa8],rax
:00074 %14 = %15.call y()                   [Vec]
  00d79: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00d80: 00 	test   rdi,0x7
  00d87:    	jne    0x2fe94
  00d8d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d91:    	jne    0x2fe94
  00d97: 26 	cmp    DWORD PTR [rip+0xfffffffffffe30a3],0x26        # 0xfffe3e41
  00d9e:    	jne    0x2fe94
  00da4:    	mov    esi,DWORD PTR [rip+0x179e]        # 0x2548
  00daa:    	cmp    esi,0xffffffff
  00dad:    	je     0x2fef6
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0xdd1
  00dbe:    	cmp    esi,0x6
  00dc1:    	jge    0xdd1
  00dc7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dcc:    	jmp    0xe3b
  00dd1:    	sub    rsp,0x40
  00dd5:    	movq   QWORD PTR [rsp],xmm2
  00dda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dec:    	movq   QWORD PTR [rsp+0x20],xmm7
  00df2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00df9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e00: f6 	movabs rax,0x55f67a69e160
  00e0a:    	call   rax
  00e0c:    	movq   xmm2,QWORD PTR [rsp]
  00e11:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e17:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e1d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e23:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e29: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e30: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e37:    	add    rsp,0x40
  00e3b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e42: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e49: 00 	test   rdi,0x1
  00e50:    	jne    0x2ff7d
  00e56: 00 	test   rdi,0x2
  00e5d:    	je     0xe99
  00e63:    	xorps  xmm6,xmm6
  00e66: 00 	movabs rax,0x8000000000000002
  00e70:    	cmp    rdi,rax
  00e73:    	je     0xeab
  00e79:    	mov    rax,rdi
  00e7c:    	sar    rax,0x3f
  00e80:    	add    rax,0x2
  00e84:    	and    rdi,0xfffffffffffffffc
  00e88:    	or     rdi,rax
  00e8b:    	rol    rdi,0x3d
  00e8f:    	movq   xmm6,rdi
  00e94:    	jmp    0xeab
  00e99:    	call   0xfffe0b18
  00e9e:    	test   rax,rax
  00ea1:    	je     0x2ff7d
  00ea7:    	movq   xmm6,xmm0
  00eab:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00eb0:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00eb4:    	mov    rax,QWORD PTR [rbp-0x18]
  00eb8:    	mov    rax,QWORD PTR [rax]
  00ebb:    	mov    rax,QWORD PTR [rax-0x28]
  00ebf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00080 %16 = 2: i32
  00ec6: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ed1:    	sub    rsp,0x40
  00ed5:    	movq   QWORD PTR [rsp],xmm2
  00eda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ee0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ee6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eec:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ef2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ef8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eff: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f06: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  00f0d: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  00f14:    	mov    rdi,rbx
  00f17:    	mov    rsi,r12
  00f1a: f6 	movabs r8,0x55f67b867748
  00f24: f6 	movabs rax,0x55f67a71b620
  00f2e:    	call   rax
  00f30:    	movq   xmm2,QWORD PTR [rsp]
  00f35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f47:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f4d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f53: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f5a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f61:    	add    rsp,0x40
  00f65: f6 	movabs r13,0x55f67b867750
  00f6f:    	test   rax,rax
  00f72:    	je     0xfffe0abf
  00f78: ff 	mov    QWORD PTR [r14-0xa8],rax
:00082 %14 = %15.call y()                   [Vec]
  00f7f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00f86: 00 	test   rdi,0x7
  00f8d:    	jne    0x2ffdf
  00f93:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f97:    	jne    0x2ffdf
  00f9d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2e9d],0x26        # 0xfffe3e41
  00fa4:    	jne    0x2ffdf
  00faa:    	mov    esi,DWORD PTR [rip+0x15a0]        # 0x2550
  00fb0:    	cmp    esi,0xffffffff
  00fb3:    	je     0x30041
  00fb9:    	cmp    WORD PTR [rdi+0x2],0x3
  00fbe:    	jne    0xfd7
  00fc4:    	cmp    esi,0x6
  00fc7:    	jge    0xfd7
  00fcd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd2:    	jmp    0x1041
  00fd7:    	sub    rsp,0x40
  00fdb:    	movq   QWORD PTR [rsp],xmm2
  00fe0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fe6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fec:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ff2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ff8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00fff: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01006: f6 	movabs rax,0x55f67a69e160
  01010:    	call   rax
  01012:    	movq   xmm2,QWORD PTR [rsp]
  01017:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0101d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01023:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01029:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0102f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01036: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0103d:    	add    rsp,0x40
  01041: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  01048: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0104f: 00 	test   rdi,0x1
  01056:    	jne    0x300c8
  0105c: 00 	test   rdi,0x2
  01063:    	je     0x109f
  01069:    	xorps  xmm6,xmm6
  0106c: 00 	movabs rax,0x8000000000000002
  01076:    	cmp    rdi,rax
  01079:    	je     0x10b1
  0107f:    	mov    rax,rdi
  01082:    	sar    rax,0x3f
  01086:    	add    rax,0x2
  0108a:    	and    rdi,0xfffffffffffffffc
  0108e:    	or     rdi,rax
  01091:    	rol    rdi,0x3d
  01095:    	movq   xmm6,rdi
  0109a:    	jmp    0x10b1
  0109f:    	call   0xfffe0b18
  010a4:    	test   rax,rax
  010a7:    	je     0x300c8
  010ad:    	movq   xmm6,xmm0
  010b1:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010b5:    	movq   xmm10,xmm3
  010ba:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010bf:    	mov    rax,QWORD PTR [rbp-0x18]
  010c3:    	mov    rax,QWORD PTR [rax]
  010c6:    	mov    rax,QWORD PTR [rax-0x28]
  010ca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 0: i32
  010d1: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010dc:    	sub    rsp,0x40
  010e0:    	movq   QWORD PTR [rsp],xmm2
  010e5:    	movq   QWORD PTR [rsp+0x8],xmm3
  010eb:    	movq   QWORD PTR [rsp+0x10],xmm4
  010f1:    	movq   QWORD PTR [rsp+0x18],xmm5
  010f7:    	movq   QWORD PTR [rsp+0x20],xmm7
  010fd: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01104: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0110b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01112: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  01119: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  01120:    	mov    rdi,rbx
  01123:    	mov    rsi,r12
  01126: f6 	movabs r8,0x55f67b8677c8
  01130: f6 	movabs rax,0x55f67a71b620
  0113a:    	call   rax
  0113c:    	movq   xmm2,QWORD PTR [rsp]
  01141:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01147:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0114d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01153:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01159: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01160: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01167: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0116e:    	add    rsp,0x40
  01172: f6 	movabs r13,0x55f67b8677d0
  0117c:    	test   rax,rax
  0117f:    	je     0xfffe0abf
  01185: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %13 = %14.call z()                   [Vec]
  0118c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01193: 00 	test   rdi,0x7
  0119a:    	jne    0x3012a
  011a0:    	cmp    DWORD PTR [rdi+0x4],0x28
  011a4:    	jne    0x3012a
  011aa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2c90],0x26        # 0xfffe3e41
  011b1:    	jne    0x3012a
  011b7:    	mov    esi,DWORD PTR [rip+0x139b]        # 0x2558
  011bd:    	cmp    esi,0xffffffff
  011c0:    	je     0x3018a
  011c6:    	cmp    WORD PTR [rdi+0x2],0x3
  011cb:    	jne    0x11e4
  011d1:    	cmp    esi,0x6
  011d4:    	jge    0x11e4
  011da:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011df:    	jmp    0x1250
  011e4:    	sub    rsp,0x40
  011e8:    	movq   QWORD PTR [rsp],xmm2
  011ed:    	movq   QWORD PTR [rsp+0x8],xmm4
  011f3:    	movq   QWORD PTR [rsp+0x10],xmm5
  011f9:    	movq   QWORD PTR [rsp+0x18],xmm7
  011ff: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01206: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0120d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01214: f6 	movabs rax,0x55f67a69e160
  0121e:    	call   rax
  01220:    	movq   xmm2,QWORD PTR [rsp]
  01225:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0122b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01231:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01237: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0123e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01245: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0124c:    	add    rsp,0x40
  01250: ff 	mov    QWORD PTR [r14-0x98],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  01257: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0125e: 00 	test   rdi,0x1
  01265:    	jne    0x30213
  0126b: 00 	test   rdi,0x2
  01272:    	je     0x12ae
  01278:    	xorps  xmm3,xmm3
  0127b: 00 	movabs rax,0x8000000000000002
  01285:    	cmp    rdi,rax
  01288:    	je     0x12c0
  0128e:    	mov    rax,rdi
  01291:    	sar    rax,0x3f
  01295:    	add    rax,0x2
  01299:    	and    rdi,0xfffffffffffffffc
  0129d:    	or     rdi,rax
  012a0:    	rol    rdi,0x3d
  012a4:    	movq   xmm3,rdi
  012a9:    	jmp    0x12c0
  012ae:    	call   0xfffe0b18
  012b3:    	test   rax,rax
  012b6:    	je     0x30213
  012bc:    	movq   xmm3,xmm0
  012c0:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012c4:    	mov    rax,QWORD PTR [rbp-0x18]
  012c8:    	mov    rax,QWORD PTR [rax]
  012cb:    	mov    rax,QWORD PTR [rax-0x28]
  012cf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00095 %16 = 1: i32
  012d6: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012e1:    	sub    rsp,0x40
  012e5:    	movq   QWORD PTR [rsp],xmm2
  012ea:    	movq   QWORD PTR [rsp+0x8],xmm3
  012f0:    	movq   QWORD PTR [rsp+0x10],xmm4
  012f6:    	movq   QWORD PTR [rsp+0x18],xmm5
  012fc:    	movq   QWORD PTR [rsp+0x20],xmm7
  01302: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01309: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01310: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01317: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0131e: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01325:    	mov    rdi,rbx
  01328:    	mov    rsi,r12
  0132b: f6 	movabs r8,0x55f67b867838
  01335: f6 	movabs rax,0x55f67a71b620
  0133f:    	call   rax
  01341:    	movq   xmm2,QWORD PTR [rsp]
  01346:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0134c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01352:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01358:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0135e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01365: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0136c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01373:    	add    rsp,0x40
  01377: f6 	movabs r13,0x55f67b867840
  01381:    	test   rax,rax
  01384:    	je     0xfffe0abf
  0138a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %14 = %15.call z()                   [Vec]
  01391: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01398: 00 	test   rdi,0x7
  0139f:    	jne    0x30273
  013a5:    	cmp    DWORD PTR [rdi+0x4],0x28
  013a9:    	jne    0x30273
  013af: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2a8b],0x26        # 0xfffe3e41
  013b6:    	jne    0x30273
  013bc:    	mov    esi,DWORD PTR [rip+0x119e]        # 0x2560
  013c2:    	cmp    esi,0xffffffff
  013c5:    	je     0x302e3
  013cb:    	cmp    WORD PTR [rdi+0x2],0x3
  013d0:    	jne    0x13e9
  013d6:    	cmp    esi,0x6
  013d9:    	jge    0x13e9
  013df:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013e4:    	jmp    0x1461
  013e9:    	sub    rsp,0x40
  013ed:    	movq   QWORD PTR [rsp],xmm2
  013f2:    	movq   QWORD PTR [rsp+0x8],xmm3
  013f8:    	movq   QWORD PTR [rsp+0x10],xmm4
  013fe:    	movq   QWORD PTR [rsp+0x18],xmm5
  01404:    	movq   QWORD PTR [rsp+0x20],xmm7
  0140a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01411: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01418: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0141f: f6 	movabs rax,0x55f67a69e160
  01429:    	call   rax
  0142b:    	movq   xmm2,QWORD PTR [rsp]
  01430:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01436:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0143c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01442:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01448: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0144f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01456: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0145d:    	add    rsp,0x40
  01461: ff 	mov    QWORD PTR [r14-0xa0],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  01468: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0146f: 00 	test   rdi,0x1
  01476:    	jne    0x30378
  0147c: 00 	test   rdi,0x2
  01483:    	je     0x14bf
  01489:    	xorps  xmm6,xmm6
  0148c: 00 	movabs rax,0x8000000000000002
  01496:    	cmp    rdi,rax
  01499:    	je     0x14d1
  0149f:    	mov    rax,rdi
  014a2:    	sar    rax,0x3f
  014a6:    	add    rax,0x2
  014aa:    	and    rdi,0xfffffffffffffffc
  014ae:    	or     rdi,rax
  014b1:    	rol    rdi,0x3d
  014b5:    	movq   xmm6,rdi
  014ba:    	jmp    0x14d1
  014bf:    	call   0xfffe0b18
  014c4:    	test   rax,rax
  014c7:    	je     0x30378
  014cd:    	movq   xmm6,xmm0
  014d1:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014d6:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014da:    	mov    rax,QWORD PTR [rbp-0x18]
  014de:    	mov    rax,QWORD PTR [rax]
  014e1:    	mov    rax,QWORD PTR [rax-0x28]
  014e5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %16 = 2: i32
  014ec: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  014f7:    	sub    rsp,0x50
  014fb:    	movq   QWORD PTR [rsp],xmm2
  01500:    	movq   QWORD PTR [rsp+0x8],xmm3
  01506:    	movq   QWORD PTR [rsp+0x10],xmm4
  0150c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01512:    	movq   QWORD PTR [rsp+0x20],xmm6
  01518:    	movq   QWORD PTR [rsp+0x28],xmm7
  0151e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01525: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0152c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01533: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  0153a: ff 	mov    rcx,QWORD PTR [r14-0xb0]
  01541:    	mov    rdi,rbx
  01544:    	mov    rsi,r12
  01547: f6 	movabs r8,0x55f67b8678b8
  01551: f6 	movabs rax,0x55f67a71b620
  0155b:    	call   rax
  0155d:    	movq   xmm2,QWORD PTR [rsp]
  01562:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0156e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01574:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0157a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01580: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01587: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0158e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01595:    	add    rsp,0x50
  01599: f6 	movabs r13,0x55f67b8678c0
  015a3:    	test   rax,rax
  015a6:    	je     0xfffe0abf
  015ac: ff 	mov    QWORD PTR [r14-0xa8],rax
:00105 %14 = %15.call z()                   [Vec]
  015b3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015ba: 00 	test   rdi,0x7
  015c1:    	jne    0x303e8
  015c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  015cb:    	jne    0x303e8
  015d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2869],0x26        # 0xfffe3e41
  015d8:    	jne    0x303e8
  015de:    	mov    esi,DWORD PTR [rip+0xf84]        # 0x2568
  015e4:    	cmp    esi,0xffffffff
  015e7:    	je     0x30458
  015ed:    	cmp    WORD PTR [rdi+0x2],0x3
  015f2:    	jne    0x160b
  015f8:    	cmp    esi,0x6
  015fb:    	jge    0x160b
  01601:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01606:    	jmp    0x1683
  0160b:    	sub    rsp,0x40
  0160f:    	movq   QWORD PTR [rsp],xmm2
  01614:    	movq   QWORD PTR [rsp+0x8],xmm3
  0161a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01620:    	movq   QWORD PTR [rsp+0x18],xmm5
  01626:    	movq   QWORD PTR [rsp+0x20],xmm7
  0162c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01633: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0163a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01641: f6 	movabs rax,0x55f67a69e160
  0164b:    	call   rax
  0164d:    	movq   xmm2,QWORD PTR [rsp]
  01652:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01658:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0165e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01664:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0166a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01671: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01678: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0167f:    	add    rsp,0x40
  01683: ff 	mov    QWORD PTR [r14-0xa0],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0168a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01691: 00 	test   rdi,0x1
  01698:    	jne    0x304ed
  0169e: 00 	test   rdi,0x2
  016a5:    	je     0x16e1
  016ab:    	xorps  xmm6,xmm6
  016ae: 00 	movabs rax,0x8000000000000002
  016b8:    	cmp    rdi,rax
  016bb:    	je     0x16f3
  016c1:    	mov    rax,rdi
  016c4:    	sar    rax,0x3f
  016c8:    	add    rax,0x2
  016cc:    	and    rdi,0xfffffffffffffffc
  016d0:    	or     rdi,rax
  016d3:    	rol    rdi,0x3d
  016d7:    	movq   xmm6,rdi
  016dc:    	jmp    0x16f3
  016e1:    	call   0xfffe0b18
  016e6:    	test   rax,rax
  016e9:    	je     0x304ed
  016ef:    	movq   xmm6,xmm0
  016f3:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  016f7:    	movq   xmm11,xmm3
  016fc:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01701: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2744]        # 0xfffe3e4c
  01708: 00 	cmp    rax,QWORD PTR [rip+0xe6d]        # 0x257c
  0170f:    	jne    0x3055d
  01715: 00 	mov    rax,QWORD PTR [rip+0xe50]        # 0x256c
  0171c: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01723:    	movq   xmm0,xmm9
  01728:    	call   0xfffe0c3c
  0172d: ff 	mov    QWORD PTR [r14-0xa0],rax
  01734:    	movq   xmm0,xmm10
  01739:    	call   0xfffe0c3c
  0173e: ff 	mov    QWORD PTR [r14-0xa8],rax
  01745:    	movq   xmm0,xmm11
  0174a:    	call   0xfffe0c3c
  0174f: ff 	mov    QWORD PTR [r14-0xb0],rax
  01756: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0175d: 00 	test   rdi,0x7
  01764:    	jne    0x3061d
  0176a:    	cmp    DWORD PTR [rdi+0x4],0x29
  0176e:    	jne    0x3061d
  01774: 26 	cmp    DWORD PTR [rip+0xfffffffffffe26c6],0x26        # 0xfffe3e41
  0177b:    	jne    0x3061d
  01781: 00 	mov    r9,0x0
  01788:    	sub    rsp,0x40
  0178c:    	movq   QWORD PTR [rsp],xmm2
  01791:    	movq   QWORD PTR [rsp+0x8],xmm4
  01797:    	movq   QWORD PTR [rsp+0x10],xmm5
  0179d:    	movq   QWORD PTR [rsp+0x18],xmm7
  017a3: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017aa: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017b1: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017b8: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017bf:    	mov    rdx,rdi
  017c2:    	mov    QWORD PTR [rsp-0x40],rcx
  017c7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017d0: ff 	lea    rcx,[r14-0xa0]
  017d7: 00 	mov    r8,0x3
  017de:    	mov    rsi,QWORD PTR [rbx]
  017e1:    	mov    QWORD PTR [rsp-0x18],rsi
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rbx],rsi
  017ee:    	lea    r14,[rsp-0x10]
  017f3:    	mov    QWORD PTR [rsp-0x20],r14
  017f8:    	call   0x3068b
  017fd:    	lea    r14,[rbp-0x8]
  01801:    	mov    QWORD PTR [rbx],r14
  01804:    	mov    r14,QWORD PTR [rbp-0x10]
  01808:    	movq   xmm2,QWORD PTR [rsp]
  0180d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01813:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01819:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0181f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01826: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0182d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01834: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183b:    	add    rsp,0x40
  0183f: f6 	movabs r13,0x55f67b867970
  01849:    	test   rax,rax
  0184c:    	je     0xfffe0abf
  01852:    	mov    QWORD PTR [r14-0x80],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01856: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe25ef]        # 0xfffe3e4c
  0185d: 00 	cmp    rax,QWORD PTR [rip+0xd38]        # 0x259c
  01864:    	jne    0x306bd
  0186a: 00 	mov    rax,QWORD PTR [rip+0xd1b]        # 0x258c
  01871: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = dynvar(2, %7)
  01878:    	mov    rax,QWORD PTR [rbp-0x18]
  0187c:    	mov    rax,QWORD PTR [rax]
  0187f:    	mov    rax,QWORD PTR [rax-0x50]
  01883: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %10
  0188a:    	mov    rax,QWORD PTR [r14-0x80]
  0188e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01895: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0189c: 00 	test   rdi,0x7
  018a3:    	jne    0x30771
  018a9:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018ad:    	jne    0x30771
  018b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2587],0x26        # 0xfffe3e41
  018ba:    	jne    0x30771
  018c0: 00 	mov    r9,0x0
  018c7:    	sub    rsp,0x40
  018cb:    	movq   QWORD PTR [rsp],xmm2
  018d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  018dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018e9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018f7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  018fe:    	mov    rdx,rdi
  01901:    	mov    QWORD PTR [rsp-0x40],rcx
  01906: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0190f: ff 	lea    rcx,[r14-0xa0]
  01916: 00 	mov    r8,0x2
  0191d:    	mov    rsi,QWORD PTR [rbx]
  01920:    	mov    QWORD PTR [rsp-0x18],rsi
  01925:    	lea    rsi,[rsp-0x18]
  0192a:    	mov    QWORD PTR [rbx],rsi
  0192d:    	lea    r14,[rsp-0x10]
  01932:    	mov    QWORD PTR [rsp-0x20],r14
  01937:    	call   0x307df
  0193c:    	lea    r14,[rbp-0x8]
  01940:    	mov    QWORD PTR [rbx],r14
  01943:    	mov    r14,QWORD PTR [rbp-0x10]
  01947:    	movq   xmm2,QWORD PTR [rsp]
  0194c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01952:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01958:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0195e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01965: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0196c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01973: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0197a:    	add    rsp,0x40
  0197e: f6 	movabs r13,0x55f67b8679d0
  01988:    	test   rax,rax
  0198b:    	je     0xfffe0abf
  01991: ff 	mov    QWORD PTR [r14-0x88],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01998: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe24ad]        # 0xfffe3e4c
  0199f: 00 	cmp    rax,QWORD PTR [rip+0xc16]        # 0x25bc
  019a6:    	jne    0x30811
  019ac: 00 	mov    rax,QWORD PTR [rip+0xbf9]        # 0x25ac
  019b3: ff 	mov    QWORD PTR [r14-0x98],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019ba: ff 	mov    rdi,QWORD PTR [r14-0x98]
  019c1: 00 	test   rdi,0x7
  019c8:    	jne    0x308c5
  019ce:    	cmp    DWORD PTR [rdi+0x4],0x31
  019d2:    	jne    0x308c5
  019d8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2462],0x26        # 0xfffe3e41
  019df:    	jne    0x308c5
  019e5: 00 	mov    r9,0x0
  019ec:    	sub    rsp,0x40
  019f0:    	movq   QWORD PTR [rsp],xmm2
  019f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a01:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a07: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a0e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a15: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a1c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a23:    	mov    rdx,rdi
  01a26:    	mov    QWORD PTR [rsp-0x40],rcx
  01a2b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a34: ff 	lea    rcx,[r14-0xa0]
  01a3b: 00 	mov    r8,0x0
  01a42:    	mov    rsi,QWORD PTR [rbx]
  01a45:    	mov    QWORD PTR [rsp-0x18],rsi
  01a4a:    	lea    rsi,[rsp-0x18]
  01a4f:    	mov    QWORD PTR [rbx],rsi
  01a52:    	lea    r14,[rsp-0x10]
  01a57:    	mov    QWORD PTR [rsp-0x20],r14
  01a5c:    	call   0x30933
  01a61:    	lea    r14,[rbp-0x8]
  01a65:    	mov    QWORD PTR [rbx],r14
  01a68:    	mov    r14,QWORD PTR [rbp-0x10]
  01a6c:    	movq   xmm2,QWORD PTR [rsp]
  01a71:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a77:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a7d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a83: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a8a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a91: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a98: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a9f:    	add    rsp,0x40
  01aa3: f6 	movabs r13,0x55f67b867a10
  01aad:    	test   rax,rax
  01ab0:    	je     0xfffe0abf
  01ab6: ff 	mov    QWORD PTR [r14-0x90],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01abd:    	mov    rdi,QWORD PTR [rbp-0x30]
  01ac1:    	mov    rax,QWORD PTR [rdi+0x10]
  01ac5: ff 	mov    QWORD PTR [r14-0x98],rax
:00128 %14 = 0: i32
  01acc: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ad7:    	sub    rsp,0x40
  01adb:    	movq   QWORD PTR [rsp],xmm2
  01ae0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ae6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01aec:    	movq   QWORD PTR [rsp+0x18],xmm7
  01af2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01af9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b00: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b07: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b0e: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01b15: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01b1c:    	mov    rdi,rbx
  01b1f:    	mov    rsi,r12
  01b22: f6 	movabs r8,0x55f67b867a48
  01b2c: f6 	movabs rax,0x55f67a71b620
  01b36:    	call   rax
  01b38:    	movq   xmm2,QWORD PTR [rsp]
  01b3d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b43:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b49:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b4f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b56: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b5d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b64: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6b:    	add    rsp,0x40
  01b6f: f6 	movabs r13,0x55f67b867a50
  01b79:    	test   rax,rax
  01b7c:    	je     0xfffe0abf
  01b82: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01b89: ff 	mov    rax,QWORD PTR [r14-0x88]
  01b90: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01b97: ff 	mov    rax,QWORD PTR [r14-0x90]
  01b9e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01ba5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bac: 00 	test   rdi,0x7
  01bb3:    	jne    0x30965
  01bb9:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01bbd:    	jne    0x30965
  01bc3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2277],0x26        # 0xfffe3e41
  01bca:    	jne    0x30965
  01bd0:    	sub    rsp,0x40
  01bd4:    	movq   QWORD PTR [rsp],xmm2
  01bd9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bdf:    	movq   QWORD PTR [rsp+0x10],xmm5
  01be5:    	movq   QWORD PTR [rsp+0x18],xmm7
  01beb: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bf2: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bf9: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c00: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c07: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c10: ff 	mov    rax,QWORD PTR [r14-0x98]
  01c17:    	mov    QWORD PTR [rsp-0x40],rax
  01c1c: 00 	mov    rdi,0x2
  01c23:    	lea    r8,[rsp-0x48]
  01c28: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01c2f:    	mov    QWORD PTR [r8],rax
  01c32:    	sub    r8,0x8
  01c36: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01c3d:    	mov    QWORD PTR [r8],rax
  01c40:    	sub    r8,0x8
  01c44: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c4d: 10 	movabs rax,0x1001000000046
  01c57:    	mov    QWORD PTR [rsp-0x30],rax
  01c5c: f6 	movabs r13,0x55f67b86e960
  01c66:    	mov    rsi,QWORD PTR [rbx]
  01c69:    	mov    QWORD PTR [rsp-0x18],rsi
  01c6e:    	lea    rsi,[rsp-0x18]
  01c73:    	mov    QWORD PTR [rbx],rsi
  01c76:    	lea    r14,[rsp-0x10]
  01c7b:    	mov    QWORD PTR [rsp-0x20],r14
  01c80:    	call   0xfffe4a50
  01c85:    	lea    r14,[rbp-0x8]
  01c89:    	mov    QWORD PTR [rbx],r14
  01c8c:    	mov    r14,QWORD PTR [rbp-0x10]
  01c90:    	movq   xmm2,QWORD PTR [rsp]
  01c95:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c9b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ca1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ca7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01cae: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01cb5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01cbc: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01cc3:    	add    rsp,0x40
  01cc7: f6 	movabs r13,0x55f67b867a90
  01cd1:    	test   rax,rax
  01cd4:    	je     0xfffe0abf
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cda:    	mov    rdi,QWORD PTR [rbp-0x30]
  01cde:    	mov    rax,QWORD PTR [rdi+0x10]
  01ce2: ff 	mov    QWORD PTR [r14-0x98],rax
:00136 %14 = 1: i32
  01ce9: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cf4:    	sub    rsp,0x40
  01cf8:    	movq   QWORD PTR [rsp],xmm2
  01cfd:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d03:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d09:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d16: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d1d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d24: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d2b: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01d32: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01d39:    	mov    rdi,rbx
  01d3c:    	mov    rsi,r12
  01d3f: f6 	movabs r8,0x55f67b867ac8
  01d49: f6 	movabs rax,0x55f67a71b620
  01d53:    	call   rax
  01d55:    	movq   xmm2,QWORD PTR [rsp]
  01d5a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d60:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d66:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d6c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d73: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d7a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d81: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d88:    	add    rsp,0x40
  01d8c: f6 	movabs r13,0x55f67b867ad0
  01d96:    	test   rax,rax
  01d99:    	je     0xfffe0abf
  01d9f: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = %11
  01da6: ff 	mov    rax,QWORD PTR [r14-0x88]
  01dad: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %15 = %12
  01db4: ff 	mov    rax,QWORD PTR [r14-0x90]
  01dbb: ff 	mov    QWORD PTR [r14-0xa8],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01dc2: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01dc9: 00 	test   rdi,0x7
  01dd0:    	jne    0x309d3
  01dd6:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01dda:    	jne    0x309d3
  01de0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe205a],0x26        # 0xfffe3e41
  01de7:    	jne    0x309d3
  01ded:    	sub    rsp,0x40
  01df1:    	movq   QWORD PTR [rsp],xmm2
  01df6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dfc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e02:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e08: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e0f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e16: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e1d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e24: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01e2d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01e34:    	mov    QWORD PTR [rsp-0x40],rax
  01e39: 00 	mov    rdi,0x2
  01e40:    	lea    r8,[rsp-0x48]
  01e45: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01e4c:    	mov    QWORD PTR [r8],rax
  01e4f:    	sub    r8,0x8
  01e53: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e5a:    	mov    QWORD PTR [r8],rax
  01e5d:    	sub    r8,0x8
  01e61: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e6a: 10 	movabs rax,0x1001000000046
  01e74:    	mov    QWORD PTR [rsp-0x30],rax
  01e79: f6 	movabs r13,0x55f67b86e960
  01e83:    	mov    rsi,QWORD PTR [rbx]
  01e86:    	mov    QWORD PTR [rsp-0x18],rsi
  01e8b:    	lea    rsi,[rsp-0x18]
  01e90:    	mov    QWORD PTR [rbx],rsi
  01e93:    	lea    r14,[rsp-0x10]
  01e98:    	mov    QWORD PTR [rsp-0x20],r14
  01e9d:    	call   0xfffe4a50
  01ea2:    	lea    r14,[rbp-0x8]
  01ea6:    	mov    QWORD PTR [rbx],r14
  01ea9:    	mov    r14,QWORD PTR [rbp-0x10]
  01ead:    	movq   xmm2,QWORD PTR [rsp]
  01eb2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01eb8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ebe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ec4: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ecb: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ed2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01ed9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ee0:    	add    rsp,0x40
  01ee4: f6 	movabs r13,0x55f67b867b10
  01eee:    	test   rax,rax
  01ef1:    	je     0xfffe0abf
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ef7:    	mov    rdi,QWORD PTR [rbp-0x30]
  01efb:    	mov    rax,QWORD PTR [rdi+0x10]
  01eff: ff 	mov    QWORD PTR [r14-0x98],rax
:00144 %14 = 2: i32
  01f06: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01f11:    	sub    rsp,0x40
  01f15:    	movq   QWORD PTR [rsp],xmm2
  01f1a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f20:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f26:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f2c: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f33: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f3a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f41: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f48: ff 	mov    rdx,QWORD PTR [r14-0x98]
  01f4f: ff 	mov    rcx,QWORD PTR [r14-0xa0]
  01f56:    	mov    rdi,rbx
  01f59:    	mov    rsi,r12
  01f5c: f6 	movabs r8,0x55f67b867b48
  01f66: f6 	movabs rax,0x55f67a71b620
  01f70:    	call   rax
  01f72:    	movq   xmm2,QWORD PTR [rsp]
  01f77:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f7d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f83:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f89: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f90: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f97: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f9e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fa5:    	add    rsp,0x40
  01fa9: f6 	movabs r13,0x55f67b867b50
  01fb3:    	test   rax,rax
  01fb6:    	je     0xfffe0abf
  01fbc: ff 	mov    QWORD PTR [r14-0x98],rax
:00146 %14 = %11
  01fc3: ff 	mov    rax,QWORD PTR [r14-0x88]
  01fca: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 %15 = %12
  01fd1: ff 	mov    rax,QWORD PTR [r14-0x90]
  01fd8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fdf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01fe6: 00 	test   rdi,0x7
  01fed:    	jne    0x30a41
  01ff3:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ff7:    	jne    0x30a41
  01ffd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1e3d],0x26        # 0xfffe3e41
  02004:    	jne    0x30a41
  0200a:    	sub    rsp,0x40
  0200e:    	movq   QWORD PTR [rsp],xmm2
  02013:    	movq   QWORD PTR [rsp+0x8],xmm4
  02019:    	movq   QWORD PTR [rsp+0x10],xmm5
  0201f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02025: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0202c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02033: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0203a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02041: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0204a: ff 	mov    rax,QWORD PTR [r14-0x98]
  02051:    	mov    QWORD PTR [rsp-0x40],rax
  02056: 00 	mov    rdi,0x2
  0205d:    	lea    r8,[rsp-0x48]
  02062: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02069:    	mov    QWORD PTR [r8],rax
  0206c:    	sub    r8,0x8
  02070: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02077:    	mov    QWORD PTR [r8],rax
  0207a:    	sub    r8,0x8
  0207e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02087: 10 	movabs rax,0x1001000000046
  02091:    	mov    QWORD PTR [rsp-0x30],rax
  02096: f6 	movabs r13,0x55f67b86e960
  020a0:    	mov    rsi,QWORD PTR [rbx]
  020a3:    	mov    QWORD PTR [rsp-0x18],rsi
  020a8:    	lea    rsi,[rsp-0x18]
  020ad:    	mov    QWORD PTR [rbx],rsi
  020b0:    	lea    r14,[rsp-0x10]
  020b5:    	mov    QWORD PTR [rsp-0x20],r14
  020ba:    	call   0xfffe4a50
  020bf:    	lea    r14,[rbp-0x8]
  020c3:    	mov    QWORD PTR [rbx],r14
  020c6:    	mov    r14,QWORD PTR [rbp-0x10]
  020ca:    	movq   xmm2,QWORD PTR [rsp]
  020cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020e1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020e8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020ef: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020f6: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020fd:    	add    rsp,0x40
  02101: f6 	movabs r13,0x55f67b867b90
  0210b:    	test   rax,rax
  0210e:    	je     0xfffe0abf
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  02114:    	mov    rdi,QWORD PTR [rbp-0x30]
  02118:    	mov    rax,QWORD PTR [rdi+0x18]
  0211c: ff 	mov    QWORD PTR [r14-0x98],rax
:00152 %14 = %11
  02123: ff 	mov    rax,QWORD PTR [r14-0x88]
  0212a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00153 %15 = %12
  02131: ff 	mov    rax,QWORD PTR [r14-0x90]
  02138: ff 	mov    QWORD PTR [r14-0xa8],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  0213f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02146: 00 	test   rdi,0x7
  0214d:    	jne    0x30aaf
  02153:    	cmp    DWORD PTR [rdi+0x4],0x2c
  02157:    	jne    0x30aaf
  0215d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1cdd],0x26        # 0xfffe3e41
  02164:    	jne    0x30aaf
  0216a:    	sub    rsp,0x40
  0216e:    	movq   QWORD PTR [rsp],xmm2
  02173:    	movq   QWORD PTR [rsp+0x8],xmm4
  02179:    	movq   QWORD PTR [rsp+0x10],xmm5
  0217f:    	movq   QWORD PTR [rsp+0x18],xmm7
  02185: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0218c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02193: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0219a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  021a1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  021aa: ff 	mov    rax,QWORD PTR [r14-0x98]
  021b1:    	mov    QWORD PTR [rsp-0x40],rax
  021b6: 00 	mov    rdi,0x2
  021bd:    	lea    r8,[rsp-0x48]
  021c2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  021c9:    	mov    QWORD PTR [r8],rax
  021cc:    	sub    r8,0x8
  021d0: ff 	mov    rax,QWORD PTR [r14-0xa8]
  021d7:    	mov    QWORD PTR [r8],rax
  021da:    	sub    r8,0x8
  021de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  021e7: 0e 	movabs rax,0x1000e00000048
  021f1:    	mov    QWORD PTR [rsp-0x30],rax
  021f6: f6 	movabs r13,0x55f67b870800
  02200:    	mov    rsi,QWORD PTR [rbx]
  02203:    	mov    QWORD PTR [rsp-0x18],rsi
  02208:    	lea    rsi,[rsp-0x18]
  0220d:    	mov    QWORD PTR [rbx],rsi
  02210:    	lea    r14,[rsp-0x10]
  02215:    	mov    QWORD PTR [rsp-0x20],r14
  0221a:    	call   0xfffe5028
  0221f:    	lea    r14,[rbp-0x8]
  02223:    	mov    QWORD PTR [rbx],r14
  02226:    	mov    r14,QWORD PTR [rbp-0x10]
  0222a:    	movq   xmm2,QWORD PTR [rsp]
  0222f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02235:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0223b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02241: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02248: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0224f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02256: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0225d:    	add    rsp,0x40
  02261: f6 	movabs r13,0x55f67b867bf0
  0226b:    	test   rax,rax
  0226e:    	je     0xfffe0abf
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  02274: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0227b: 00 	test   rdi,0x7
  02282:    	jne    0x30b1d
  02288:    	cmp    DWORD PTR [rdi+0x4],0x30
  0228c:    	jne    0x30b1d
  02292: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1ba8],0x26        # 0xfffe3e41
  02299:    	jne    0x30b1d
  0229f:    	mov    esi,DWORD PTR [rip+0x323]        # 0x25c8
  022a5:    	cmp    esi,0xffffffff
  022a8:    	je     0x30b8b
  022ae:    	cmp    WORD PTR [rdi+0x2],0x3
  022b3:    	jne    0x22cc
  022b9:    	cmp    esi,0x6
  022bc:    	jge    0x22cc
  022c2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  022c7:    	jmp    0x2346
  022cc:    	sub    rsp,0x40
  022d0:    	movq   QWORD PTR [rsp],xmm2
  022d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  022db:    	movq   QWORD PTR [rsp+0x10],xmm5
  022e1:    	movq   QWORD PTR [rsp+0x18],xmm7
  022e7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  022ee: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  022f5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022fc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02303: f6 	movabs rax,0x55f67a69e160
  0230d:    	call   rax
  0230f:    	movq   xmm2,QWORD PTR [rsp]
  02314:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0231a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02320:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02326: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0232d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02334: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0233b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02342:    	add    rsp,0x40
  02346: ff 	mov    QWORD PTR [r14-0x98],rax
:00158 
:00160 condnotbr %13 =>:00166
  0234d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02354:    	or     rax,0x10
  02358:    	cmp    rax,0x14
  0235c:    	je     0x2425
:00161 %13 = dynvar(2, %6)
  02362:    	mov    rax,QWORD PTR [rbp-0x18]
  02366:    	mov    rax,QWORD PTR [rax]
  02369:    	mov    rax,QWORD PTR [rax-0x48]
  0236d: ff 	mov    QWORD PTR [r14-0x98],rax
:00162 %14 = literal[1.0]
  02374: 00 	movq   xmm3,QWORD PTR [rip+0x250]        # 0x25cc
  0237c: 00 	movabs rax,0xff80000000000002
  02386: ff 	mov    QWORD PTR [r14-0xa0],rax
:00163 %13 = %13 + %14                      [Float][Float]
  0238d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02394: 00 	test   rdi,0x1
  0239b:    	jne    0x30c22
  023a1: 00 	test   rdi,0x2
  023a8:    	je     0x23e4
  023ae:    	xorps  xmm6,xmm6
  023b1: 00 	movabs rax,0x8000000000000002
  023bb:    	cmp    rdi,rax
  023be:    	je     0x23f6
  023c4:    	mov    rax,rdi
  023c7:    	sar    rax,0x3f
  023cb:    	add    rax,0x2
  023cf:    	and    rdi,0xfffffffffffffffc
  023d3:    	or     rdi,rax
  023d6:    	rol    rdi,0x3d
  023da:    	movq   xmm6,rdi
  023df:    	jmp    0x23f6
  023e4:    	call   0xfffe0b18
  023e9:    	test   rax,rax
  023ec:    	je     0x30c22
  023f2:    	movq   xmm6,xmm0
  023f6:    	addsd  xmm6,xmm3
:00164 dynvar(2, %6) = %13
  023fa:    	movq   xmm0,xmm6
  023fe:    	call   0xfffe0c3c
  02403: ff 	mov    QWORD PTR [r14-0x98],rax
  0240a:    	mov    rax,QWORD PTR [rbp-0x18]
  0240e:    	mov    rax,QWORD PTR [rax]
  02411: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02418:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  0241c: ff 	mov    rax,QWORD PTR [r14-0x98]
  02423:    	leave  
  02424:    	ret    
:00166 %13 = literal[0.0]
  02425: 00 	movq   xmm3,QWORD PTR [rip+0x1af]        # 0x25dc
  0242d: 00 	movabs rax,0x8000000000000002
  02437: ff 	mov    QWORD PTR [r14-0x98],rax
:00167 ret %13
  0243e: ff 	mov    rax,QWORD PTR [r14-0x98]
  02445:    	leave  
  02446:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55f67b870800
load_ivar: no profile
<== finished compile. elapsed:131.7µs
offset:Pos(138072) code: 5466 bytes  data: 274 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2e6ac
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x2e6bb
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x2e6bb
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x2e6ca
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x2e6ca
  000a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe17b5],0x26        # 0xfffe185d
  000a8:    	jne    0x2e6ca
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	lea    r8,[rsp-0x48]
  000cc:    	mov    rax,QWORD PTR [r14-0x70]
  000d0:    	mov    QWORD PTR [r8],rax
  000d3:    	sub    r8,0x8
  000d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000e0: 05 	movabs rax,0x1000500000042
  000ea:    	mov    QWORD PTR [rsp-0x30],rax
  000ef: f6 	movabs r13,0x55f67b88de50
  000f9:    	mov    rsi,QWORD PTR [rbx]
  000fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00101:    	lea    rsi,[rsp-0x18]
  00106:    	mov    QWORD PTR [rbx],rsi
  00109:    	lea    r14,[rsp-0x10]
  0010e:    	mov    QWORD PTR [rsp-0x20],r14
  00113:    	call   0xfffe2590
  00118:    	lea    r14,[rbp-0x8]
  0011c:    	mov    QWORD PTR [rbx],r14
  0011f:    	mov    r14,QWORD PTR [rbp-0x10]
  00123: f6 	movabs r13,0x55f67b870850
  0012d:    	test   rax,rax
  00130:    	je     0xfffde4db
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x2e6d9
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xfffde534
  00193:    	test   rax,rax
  00196:    	je     0x2e6d9
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x13c1]        # 0x1568
:00007 %7 = %1.call dir()                   [Ray]
  001a7:    	mov    rdi,QWORD PTR [r14-0x38]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x2e6e8
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bc:    	jne    0x2e6e8
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1694],0x26        # 0xfffe185d
  001c9:    	jne    0x2e6e8
  001cf:    	mov    esi,DWORD PTR [rip+0x139f]        # 0x1574
  001d5:    	cmp    esi,0xffffffff
  001d8:    	je     0x2e704
  001de:    	cmp    WORD PTR [rdi+0x2],0x3
  001e3:    	jne    0x1fc
  001e9:    	cmp    esi,0x6
  001ec:    	jge    0x1fc
  001f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f7:    	jmp    0x21a
  001fc:    	sub    rsp,0x10
  00200:    	movq   QWORD PTR [rsp],xmm2
  00205: f6 	movabs rax,0x55f67a69e160
  0020f:    	call   rax
  00211:    	movq   xmm2,QWORD PTR [rsp]
  00216:    	add    rsp,0x10
  0021a:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  0021e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  0022a:    	mov    rdi,QWORD PTR [r14-0x68]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x2e73f
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0023f:    	jne    0x2e73f
  00245: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1611],0x26        # 0xfffe185d
  0024c:    	jne    0x2e73f
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00264:    	mov    rax,QWORD PTR [r14-0x68]
  00268:    	mov    QWORD PTR [rsp-0x40],rax
  0026d: 00 	mov    rdi,0x1
  00274:    	lea    r8,[rsp-0x48]
  00279:    	mov    rax,QWORD PTR [r14-0x70]
  0027d:    	mov    QWORD PTR [r8],rax
  00280:    	sub    r8,0x8
  00284: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0028d: 05 	movabs rax,0x1000500000042
  00297:    	mov    QWORD PTR [rsp-0x30],rax
  0029c: f6 	movabs r13,0x55f67b88de50
  002a6:    	mov    rsi,QWORD PTR [rbx]
  002a9:    	mov    QWORD PTR [rsp-0x18],rsi
  002ae:    	lea    rsi,[rsp-0x18]
  002b3:    	mov    QWORD PTR [rbx],rsi
  002b6:    	lea    r14,[rsp-0x10]
  002bb:    	mov    QWORD PTR [rsp-0x20],r14
  002c0:    	call   0xfffe2590
  002c5:    	lea    r14,[rbp-0x8]
  002c9:    	mov    QWORD PTR [rbx],r14
  002cc:    	mov    r14,QWORD PTR [rbp-0x10]
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	add    rsp,0x10
  002d9: f6 	movabs r13,0x55f67b8708d0
  002e3:    	test   rax,rax
  002e6:    	je     0xfffde4db
  002ec:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002f0:    	mov    rax,QWORD PTR [r14-0x50]
  002f4:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002f8: 00 	movq   xmm3,QWORD PTR [rip+0x1278]        # 0x1578
  00300: 00 	movabs rax,0x8000000000000002
  0030a:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0030e:    	mov    rdi,QWORD PTR [r14-0x50]
  00312: 00 	test   rdi,0x1
  00319:    	jne    0x2e75b
  0031f: 00 	test   rdi,0x2
  00326:    	je     0x362
  0032c:    	xorps  xmm4,xmm4
  0032f: 00 	movabs rax,0x8000000000000002
  00339:    	cmp    rdi,rax
  0033c:    	je     0x374
  00342:    	mov    rax,rdi
  00345:    	sar    rax,0x3f
  00349:    	add    rax,0x2
  0034d:    	and    rdi,0xfffffffffffffffc
  00351:    	or     rdi,rax
  00354:    	rol    rdi,0x3d
  00358:    	movq   xmm4,rdi
  0035d:    	jmp    0x374
  00362:    	call   0xfffde534
  00367:    	test   rax,rax
  0036a:    	je     0x2e75b
  00370:    	movq   xmm4,xmm0
  00374:    	ucomisd xmm4,xmm3
  00378:    	jae    0x2e777
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0037e:    	movq   xmm5,xmm4
  00382: 00 	xorps  xmm5,XMMWORD PTR [rip+0x11ff]        # 0x1588
:00020 br =>:00021
  00389:    	jmp    0x2e79d
:00021 %7 = literal[1e-17]
  0038e: 00 	movq   xmm3,QWORD PTR [rip+0x1202]        # 0x1598
  00396: aa 	movabs rax,0xe33877aa3236a4ba
  003a0:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003a4:    	mov    rdi,QWORD PTR [r14-0x58]
  003a8: 00 	test   rdi,0x1
  003af:    	jne    0x2e7d0
  003b5: 00 	test   rdi,0x2
  003bc:    	je     0x3f8
  003c2:    	xorps  xmm5,xmm5
  003c5: 00 	movabs rax,0x8000000000000002
  003cf:    	cmp    rdi,rax
  003d2:    	je     0x40a
  003d8:    	mov    rax,rdi
  003db:    	sar    rax,0x3f
  003df:    	add    rax,0x2
  003e3:    	and    rdi,0xfffffffffffffffc
  003e7:    	or     rdi,rax
  003ea:    	rol    rdi,0x3d
  003ee:    	movq   xmm5,rdi
  003f3:    	jmp    0x40a
  003f8:    	call   0xfffde534
  003fd:    	test   rax,rax
  00400:    	je     0x2e7d0
  00406:    	movq   xmm5,xmm0
  0040a:    	ucomisd xmm5,xmm3
  0040e:    	jae    0x422
:00024 %7 = nil
  00414: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  0041c:    	mov    rax,QWORD PTR [r14-0x68]
  00420:    	leave  
  00421:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00422:    	mov    rdi,QWORD PTR [r14-0x38]
  00426: 00 	test   rdi,0x7
  0042d:    	jne    0x2e7ec
  00433:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00437:    	jne    0x2e7ec
  0043d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1419],0x26        # 0xfffe185d
  00444:    	jne    0x2e7ec
  0044a:    	mov    esi,DWORD PTR [rip+0x1154]        # 0x15a4
  00450:    	cmp    esi,0xffffffff
  00453:    	je     0x2e808
  00459:    	cmp    WORD PTR [rdi+0x2],0x3
  0045e:    	jne    0x477
  00464:    	cmp    esi,0x6
  00467:    	jge    0x477
  0046d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00472:    	jmp    0x4b9
  00477:    	sub    rsp,0x20
  0047b:    	movq   QWORD PTR [rsp],xmm2
  00480:    	movq   QWORD PTR [rsp+0x8],xmm3
  00486:    	movq   QWORD PTR [rsp+0x10],xmm4
  0048c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00492: f6 	movabs rax,0x55f67a69e160
  0049c:    	call   rax
  0049e:    	movq   xmm2,QWORD PTR [rsp]
  004a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004b5:    	add    rsp,0x20
  004b9:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004bd:    	mov    rdi,QWORD PTR [rbp-0x30]
  004c1:    	mov    rax,QWORD PTR [rdi+0x18]
  004c5:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c9:    	mov    rdi,QWORD PTR [r14-0x70]
  004cd: 00 	test   rdi,0x7
  004d4:    	jne    0x2e867
  004da:    	cmp    DWORD PTR [rdi+0x4],0x28
  004de:    	jne    0x2e867
  004e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1372],0x26        # 0xfffe185d
  004eb:    	jne    0x2e867
  004f1:    	sub    rsp,0x20
  004f5:    	movq   QWORD PTR [rsp],xmm2
  004fa:    	movq   QWORD PTR [rsp+0x8],xmm4
  00500:    	movq   QWORD PTR [rsp+0x10],xmm5
  00506: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0050f:    	mov    rax,QWORD PTR [r14-0x70]
  00513:    	mov    QWORD PTR [rsp-0x40],rax
  00518: 00 	mov    rdi,0x1
  0051f:    	lea    r8,[rsp-0x48]
  00524:    	mov    rax,QWORD PTR [r14-0x78]
  00528:    	mov    QWORD PTR [r8],rax
  0052b:    	sub    r8,0x8
  0052f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00538: 05 	movabs rax,0x1000500000042
  00542:    	mov    QWORD PTR [rsp-0x30],rax
  00547: f6 	movabs r13,0x55f67b88de50
  00551:    	mov    rsi,QWORD PTR [rbx]
  00554:    	mov    QWORD PTR [rsp-0x18],rsi
  00559:    	lea    rsi,[rsp-0x18]
  0055e:    	mov    QWORD PTR [rbx],rsi
  00561:    	lea    r14,[rsp-0x10]
  00566:    	mov    QWORD PTR [rsp-0x20],r14
  0056b:    	call   0xfffe2590
  00570:    	lea    r14,[rbp-0x8]
  00574:    	mov    QWORD PTR [rbx],r14
  00577:    	mov    r14,QWORD PTR [rbp-0x10]
  0057b:    	movq   xmm2,QWORD PTR [rsp]
  00580:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00586:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0058c:    	add    rsp,0x20
  00590: f6 	movabs r13,0x55f67b870a10
  0059a:    	test   rax,rax
  0059d:    	je     0xfffde4db
  005a3:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005a7:    	mov    rdi,QWORD PTR [r14-0x68]
  005ab: 00 	test   rdi,0x1
  005b2:    	jne    0x2e883
  005b8: 00 	test   rdi,0x2
  005bf:    	je     0x5fb
  005c5:    	xorps  xmm3,xmm3
  005c8: 00 	movabs rax,0x8000000000000002
  005d2:    	cmp    rdi,rax
  005d5:    	je     0x60d
  005db:    	mov    rax,rdi
  005de:    	sar    rax,0x3f
  005e2:    	add    rax,0x2
  005e6:    	and    rdi,0xfffffffffffffffc
  005ea:    	or     rdi,rax
  005ed:    	rol    rdi,0x3d
  005f1:    	movq   xmm3,rdi
  005f6:    	jmp    0x60d
  005fb:    	call   0xfffde534
  00600:    	test   rax,rax
  00603:    	je     0x2e883
  00609:    	movq   xmm3,xmm0
  0060d:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00611: 00 	xorps  xmm3,XMMWORD PTR [rip+0xf90]        # 0x15a8
:00036 %6 = %7 / %4                         [Float][Float]
  00618:    	movq   xmm6,xmm3
  0061c:    	movq   rax,xmm4
  00621:    	test   rax,rax
  00624:    	je     0xfffde500
  0062a:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  0062e: 00 	movq   xmm3,QWORD PTR [rip+0xf82]        # 0x15b8
  00636: 00 	movabs rax,0x8000000000000002
  00640:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00644:    	ucomisd xmm6,xmm3
  00648:    	jbe    0x2f24c
:00040 %7 = %2.call t()                     [Isect]
  0064e:    	mov    rdi,QWORD PTR [r14-0x40]
  00652: 00 	test   rdi,0x7
  00659:    	jne    0x2e89f
  0065f:    	cmp    DWORD PTR [rdi+0x4],0x30
  00663:    	jne    0x2e89f
  00669: 26 	cmp    DWORD PTR [rip+0xfffffffffffe11ed],0x26        # 0xfffe185d
  00670:    	jne    0x2e89f
  00676:    	mov    esi,DWORD PTR [rip+0xf48]        # 0x15c4
  0067c:    	cmp    esi,0xffffffff
  0067f:    	je     0x2e8c8
  00685:    	cmp    WORD PTR [rdi+0x2],0x3
  0068a:    	jne    0x6a3
  00690:    	cmp    esi,0x6
  00693:    	jge    0x6a3
  00699:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0069e:    	jmp    0x6e5
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm5
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm6
  006be: f6 	movabs rax,0x55f67a69e160
  006c8:    	call   rax
  006ca:    	movq   xmm2,QWORD PTR [rsp]
  006cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006db:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006e1:    	add    rsp,0x20
  006e5:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  006e9:    	movq   xmm0,xmm6
  006ed:    	call   0xfffde658
  006f2:    	mov    QWORD PTR [r14-0x60],rax
  006f6:    	mov    rdi,QWORD PTR [r14-0x60]
  006fa:    	mov    rsi,QWORD PTR [r14-0x68]
  006fe: 00 	test   rdi,0x1
  00705:    	je     0x2e927
  0070b: 00 	test   rsi,0x1
  00712:    	je     0x2e927
  00718:    	cmp    rdi,rsi
  0071b:    	jge    0x2f27f
:00045 %7 = literal[true]
  00721: 00 	mov    rax,0x1c
  00728:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  0072c:    	mov    rdi,QWORD PTR [r14-0x40]
  00730: 00 	test   rdi,0x7
  00737:    	jne    0x2e97c
  0073d:    	cmp    DWORD PTR [rdi+0x4],0x30
  00741:    	jne    0x2e97c
  00747: 26 	cmp    DWORD PTR [rip+0xfffffffffffe110f],0x26        # 0xfffe185d
  0074e:    	jne    0x2e97c
  00754:    	mov    esi,DWORD PTR [rip+0xe72]        # 0x15cc
  0075a:    	cmp    esi,0xffffffff
  0075d:    	je     0x2e998
  00763:    	cmp    WORD PTR [rdi+0x2],0x3
  00768:    	jne    0x785
  0076e:    	cmp    esi,0x6
  00771:    	jge    0x785
  00777:    	mov    rax,QWORD PTR [r14-0x68]
  0077b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00780:    	jmp    0x7de
  00785:    	sub    rsp,0x20
  00789:    	movq   QWORD PTR [rsp],xmm2
  0078e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00794:    	movq   QWORD PTR [rsp+0x10],xmm5
  0079a:    	movq   QWORD PTR [rsp+0x18],xmm6
  007a0:    	mov    rdx,QWORD PTR [r14-0x68]
  007a4: f6 	movabs rax,0x55f67a69e3e0
  007ae:    	call   rax
  007b0:    	movq   xmm2,QWORD PTR [rsp]
  007b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007bb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007c1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007c7:    	add    rsp,0x20
  007cb: f6 	movabs r13,0x55f67b870b00
  007d5:    	test   rax,rax
  007d8:    	je     0xfffde4db
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  007de:    	mov    rdi,QWORD PTR [r14-0x40]
  007e2: 00 	test   rdi,0x7
  007e9:    	jne    0x2e9fe
  007ef:    	cmp    DWORD PTR [rdi+0x4],0x30
  007f3:    	jne    0x2e9fe
  007f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe105d],0x26        # 0xfffe185d
  00800:    	jne    0x2e9fe
  00806:    	mov    esi,DWORD PTR [rip+0xdc8]        # 0x15d4
  0080c:    	cmp    esi,0xffffffff
  0080f:    	je     0x2ea1a
  00815:    	cmp    WORD PTR [rdi+0x2],0x3
  0081a:    	jne    0x837
  00820:    	cmp    esi,0x6
  00823:    	jge    0x837
  00829:    	mov    rax,QWORD PTR [r14-0x60]
  0082d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00832:    	jmp    0x890
  00837:    	sub    rsp,0x20
  0083b:    	movq   QWORD PTR [rsp],xmm2
  00840:    	movq   QWORD PTR [rsp+0x8],xmm4
  00846:    	movq   QWORD PTR [rsp+0x10],xmm5
  0084c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00852:    	mov    rdx,QWORD PTR [r14-0x60]
  00856: f6 	movabs rax,0x55f67a69e3e0
  00860:    	call   rax
  00862:    	movq   xmm2,QWORD PTR [rsp]
  00867:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0086d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00873:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00879:    	add    rsp,0x20
  0087d: f6 	movabs r13,0x55f67b870b30
  00887:    	test   rax,rax
  0088a:    	je     0xfffde4db
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  00890:    	mov    rdi,QWORD PTR [rbp-0x30]
  00894:    	sub    rsp,0x20
  00898:    	movq   QWORD PTR [rsp],xmm2
  0089d:    	movq   QWORD PTR [rsp+0x8],xmm4
  008a3:    	movq   QWORD PTR [rsp+0x10],xmm5
  008a9:    	movq   QWORD PTR [rsp+0x18],xmm6
  008af: 00 	mov    rsi,0x97
  008b6:    	mov    rdx,r12
  008b9: f6 	movabs rax,0x55f67a71b840
  008c3:    	call   rax
  008c5:    	movq   xmm2,QWORD PTR [rsp]
  008ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008d0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008d6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008dc:    	add    rsp,0x20
  008e0:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008e4:    	mov    rdi,QWORD PTR [r14-0x40]
  008e8: 00 	test   rdi,0x7
  008ef:    	jne    0x2ea80
  008f5:    	cmp    DWORD PTR [rdi+0x4],0x30
  008f9:    	jne    0x2ea80
  008ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0f57],0x26        # 0xfffe185d
  00906:    	jne    0x2ea80
  0090c:    	mov    esi,DWORD PTR [rip+0xcca]        # 0x15dc
  00912:    	cmp    esi,0xffffffff
  00915:    	je     0x2ea9c
  0091b:    	cmp    WORD PTR [rdi+0x2],0x3
  00920:    	jne    0x93d
  00926:    	cmp    esi,0x6
  00929:    	jge    0x93d
  0092f:    	mov    rax,QWORD PTR [r14-0x68]
  00933:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00938:    	jmp    0x996
  0093d:    	sub    rsp,0x20
  00941:    	movq   QWORD PTR [rsp],xmm2
  00946:    	movq   QWORD PTR [rsp+0x8],xmm4
  0094c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00952:    	movq   QWORD PTR [rsp+0x18],xmm6
  00958:    	mov    rdx,QWORD PTR [r14-0x68]
  0095c: f6 	movabs rax,0x55f67a69e3e0
  00966:    	call   rax
  00968:    	movq   xmm2,QWORD PTR [rsp]
  0096d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00973:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00979:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0097f:    	add    rsp,0x20
  00983: f6 	movabs r13,0x55f67b870b70
  0098d:    	test   rax,rax
  00990:    	je     0xfffde4db
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00996: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe0ecb]        # 0xfffe1868
  0099d: 00 	cmp    rax,QWORD PTR [rip+0xc54]        # 0x15f8
  009a4:    	jne    0x2eb02
  009aa: 00 	mov    rax,QWORD PTR [rip+0xc37]        # 0x15e8
  009b1:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [Ray]
  009b5:    	mov    rdi,QWORD PTR [r14-0x38]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x2eb7e
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009ca:    	jne    0x2eb7e
  009d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0e86],0x26        # 0xfffe185d
  009d7:    	jne    0x2eb7e
  009dd:    	mov    esi,DWORD PTR [rip+0xc21]        # 0x1604
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x2eb9a
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa4c
  00a0a:    	sub    rsp,0x20
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25: f6 	movabs rax,0x55f67a69e160
  00a2f:    	call   rax
  00a31:    	movq   xmm2,QWORD PTR [rsp]
  00a36:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a3c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a42:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a48:    	add    rsp,0x20
  00a4c:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a50:    	mov    rdi,QWORD PTR [r14-0x80]
  00a54: 00 	test   rdi,0x7
  00a5b:    	jne    0x2ebf9
  00a61:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a65:    	jne    0x2ebf9
  00a6b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0deb],0x26        # 0xfffe185d
  00a72:    	jne    0x2ebf9
  00a78:    	mov    esi,DWORD PTR [rip+0xb8e]        # 0x160c
  00a7e:    	cmp    esi,0xffffffff
  00a81:    	je     0x2ec15
  00a87:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8c:    	jne    0xaa5
  00a92:    	cmp    esi,0x6
  00a95:    	jge    0xaa5
  00a9b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa0:    	jmp    0xae7
  00aa5:    	sub    rsp,0x20
  00aa9:    	movq   QWORD PTR [rsp],xmm2
  00aae:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ab4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00aba:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ac0: f6 	movabs rax,0x55f67a69e160
  00aca:    	call   rax
  00acc:    	movq   xmm2,QWORD PTR [rsp]
  00ad1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ad7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00add:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae3:    	add    rsp,0x20
  00ae7:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00aeb:    	mov    rdi,QWORD PTR [r14-0x38]
  00aef: 00 	test   rdi,0x7
  00af6:    	jne    0x2ec74
  00afc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b00:    	jne    0x2ec74
  00b06: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0d50],0x26        # 0xfffe185d
  00b0d:    	jne    0x2ec74
  00b13:    	mov    esi,DWORD PTR [rip+0xafb]        # 0x1614
  00b19:    	cmp    esi,0xffffffff
  00b1c:    	je     0x2ec90
  00b22:    	cmp    WORD PTR [rdi+0x2],0x3
  00b27:    	jne    0xb40
  00b2d:    	cmp    esi,0x6
  00b30:    	jge    0xb40
  00b36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b3b:    	jmp    0xb82
  00b40:    	sub    rsp,0x20
  00b44:    	movq   QWORD PTR [rsp],xmm2
  00b49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b5b: f6 	movabs rax,0x55f67a69e160
  00b65:    	call   rax
  00b67:    	movq   xmm2,QWORD PTR [rsp]
  00b6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b7e:    	add    rsp,0x20
  00b82: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b89: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b90: 00 	test   rdi,0x7
  00b97:    	jne    0x2ecef
  00b9d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba1:    	jne    0x2ecef
  00ba7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0caf],0x26        # 0xfffe185d
  00bae:    	jne    0x2ecef
  00bb4:    	mov    esi,DWORD PTR [rip+0xa62]        # 0x161c
  00bba:    	cmp    esi,0xffffffff
  00bbd:    	je     0x2ed0b
  00bc3:    	cmp    WORD PTR [rdi+0x2],0x3
  00bc8:    	jne    0xbe1
  00bce:    	cmp    esi,0x6
  00bd1:    	jge    0xbe1
  00bd7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bdc:    	jmp    0xc23
  00be1:    	sub    rsp,0x20
  00be5:    	movq   QWORD PTR [rsp],xmm2
  00bea:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf0:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bf6:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bfc: f6 	movabs rax,0x55f67a69e160
  00c06:    	call   rax
  00c08:    	movq   xmm2,QWORD PTR [rsp]
  00c0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c13:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c19:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c1f:    	add    rsp,0x20
  00c23:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00c27: 01 	sub    DWORD PTR [rip+0x9f2],0x1        # 0x1620
  00c2e:    	je     0x2ed86
  00c34:    	mov    rdi,QWORD PTR [r14-0x60]
  00c38:    	mov    rsi,QWORD PTR [r14-0x80]
  00c3c:    	sub    rsp,0x20
  00c40:    	movq   QWORD PTR [rsp],xmm2
  00c45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c57:    	mov    rdx,rdi
  00c5a:    	mov    rcx,rsi
  00c5d:    	mov    rdi,rbx
  00c60:    	mov    rsi,r12
  00c63: f6 	movabs rax,0x55f67a6dfeb0
  00c6d:    	call   rax
  00c6f:    	movq   xmm2,QWORD PTR [rsp]
  00c74:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c7a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c80:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c86:    	add    rsp,0x20
  00c8a: f6 	movabs r13,0x55f67b870c60
  00c94:    	test   rax,rax
  00c97:    	je     0xfffde4db
  00c9d:    	mov    QWORD PTR [r14-0x80],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00ca1:    	mov    rdi,QWORD PTR [r14-0x78]
  00ca5:    	mov    rsi,QWORD PTR [r14-0x80]
  00ca9:    	sub    rsp,0x20
  00cad:    	movq   QWORD PTR [rsp],xmm2
  00cb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cbe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cc4:    	mov    rdx,rdi
  00cc7:    	mov    rcx,rsi
  00cca:    	mov    rdi,rbx
  00ccd:    	mov    rsi,r12
  00cd0: f6 	movabs rax,0x55f67a6ddf30
  00cda:    	call   rax
  00cdc:    	movq   xmm2,QWORD PTR [rsp]
  00ce1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ce7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ced:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cf3:    	add    rsp,0x20
  00cf7: f6 	movabs r13,0x55f67b870c70
  00d01:    	test   rax,rax
  00d04:    	je     0xfffde4db
  00d0a:    	mov    QWORD PTR [r14-0x78],rax
:00071 %11 = %1.call org()                  [Ray]
  00d0e:    	mov    rdi,QWORD PTR [r14-0x38]
  00d12: 00 	test   rdi,0x7
  00d19:    	jne    0x2eda4
  00d1f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d23:    	jne    0x2eda4
  00d29: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0b2d],0x26        # 0xfffe185d
  00d30:    	jne    0x2eda4
  00d36:    	mov    esi,DWORD PTR [rip+0x8ec]        # 0x1628
  00d3c:    	cmp    esi,0xffffffff
  00d3f:    	je     0x2edc0
  00d45:    	cmp    WORD PTR [rdi+0x2],0x3
  00d4a:    	jne    0xd63
  00d50:    	cmp    esi,0x6
  00d53:    	jge    0xd63
  00d59:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d5e:    	jmp    0xda5
  00d63:    	sub    rsp,0x20
  00d67:    	movq   QWORD PTR [rsp],xmm2
  00d6c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d72:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d78:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d7e: f6 	movabs rax,0x55f67a69e160
  00d88:    	call   rax
  00d8a:    	movq   xmm2,QWORD PTR [rsp]
  00d8f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d95:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d9b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00da1:    	add    rsp,0x20
  00da5: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00dac: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00db3: 00 	test   rdi,0x7
  00dba:    	jne    0x2ee1f
  00dc0:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dc4:    	jne    0x2ee1f
  00dca: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0a8c],0x26        # 0xfffe185d
  00dd1:    	jne    0x2ee1f
  00dd7:    	mov    esi,DWORD PTR [rip+0x853]        # 0x1630
  00ddd:    	cmp    esi,0xffffffff
  00de0:    	je     0x2ee3b
  00de6:    	cmp    WORD PTR [rdi+0x2],0x3
  00deb:    	jne    0xe04
  00df1:    	cmp    esi,0x6
  00df4:    	jge    0xe04
  00dfa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dff:    	jmp    0xe46
  00e04:    	sub    rsp,0x20
  00e08:    	movq   QWORD PTR [rsp],xmm2
  00e0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e13:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e19:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e1f: f6 	movabs rax,0x55f67a69e160
  00e29:    	call   rax
  00e2b:    	movq   xmm2,QWORD PTR [rsp]
  00e30:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e36:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e3c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e42:    	add    rsp,0x20
  00e46:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e4a:    	mov    rdi,QWORD PTR [r14-0x38]
  00e4e: 00 	test   rdi,0x7
  00e55:    	jne    0x2ee9a
  00e5b:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e5f:    	jne    0x2ee9a
  00e65: 26 	cmp    DWORD PTR [rip+0xfffffffffffe09f1],0x26        # 0xfffe185d
  00e6c:    	jne    0x2ee9a
  00e72:    	mov    esi,DWORD PTR [rip+0x7c0]        # 0x1638
  00e78:    	cmp    esi,0xffffffff
  00e7b:    	je     0x2eeb6
  00e81:    	cmp    WORD PTR [rdi+0x2],0x3
  00e86:    	jne    0xe9f
  00e8c:    	cmp    esi,0x6
  00e8f:    	jge    0xe9f
  00e95:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e9a:    	jmp    0xee1
  00e9f:    	sub    rsp,0x20
  00ea3:    	movq   QWORD PTR [rsp],xmm2
  00ea8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eae:    	movq   QWORD PTR [rsp+0x10],xmm5
  00eb4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eba: f6 	movabs rax,0x55f67a69e160
  00ec4:    	call   rax
  00ec6:    	movq   xmm2,QWORD PTR [rsp]
  00ecb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ed7:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00edd:    	add    rsp,0x20
  00ee1: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00ee8: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00eef: 00 	test   rdi,0x7
  00ef6:    	jne    0x2ef15
  00efc:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f00:    	jne    0x2ef15
  00f06: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0950],0x26        # 0xfffe185d
  00f0d:    	jne    0x2ef15
  00f13:    	mov    esi,DWORD PTR [rip+0x727]        # 0x1640
  00f19:    	cmp    esi,0xffffffff
  00f1c:    	je     0x2ef31
  00f22:    	cmp    WORD PTR [rdi+0x2],0x3
  00f27:    	jne    0xf40
  00f2d:    	cmp    esi,0x6
  00f30:    	jge    0xf40
  00f36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f3b:    	jmp    0xf82
  00f40:    	sub    rsp,0x20
  00f44:    	movq   QWORD PTR [rsp],xmm2
  00f49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f5b: f6 	movabs rax,0x55f67a69e160
  00f65:    	call   rax
  00f67:    	movq   xmm2,QWORD PTR [rsp]
  00f6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f7e:    	add    rsp,0x20
  00f82: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  00f89:    	mov    rdi,QWORD PTR [r14-0x60]
  00f8d: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00f94:    	sub    rsp,0x20
  00f98:    	movq   QWORD PTR [rsp],xmm2
  00f9d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fa3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fa9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00faf:    	mov    rdx,rdi
  00fb2:    	mov    rcx,rsi
  00fb5:    	mov    rdi,rbx
  00fb8:    	mov    rsi,r12
  00fbb: f6 	movabs rax,0x55f67a6dfeb0
  00fc5:    	call   rax
  00fc7:    	movq   xmm2,QWORD PTR [rsp]
  00fcc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fd2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fd8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fde:    	add    rsp,0x20
  00fe2: f6 	movabs r13,0x55f67b870d40
  00fec:    	test   rax,rax
  00fef:    	je     0xfffde4db
  00ff5: ff 	mov    QWORD PTR [r14-0x88],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00ffc:    	mov    rdi,QWORD PTR [r14-0x80]
  01000: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01007:    	sub    rsp,0x20
  0100b:    	movq   QWORD PTR [rsp],xmm2
  01010:    	movq   QWORD PTR [rsp+0x8],xmm4
  01016:    	movq   QWORD PTR [rsp+0x10],xmm5
  0101c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01022:    	mov    rdx,rdi
  01025:    	mov    rcx,rsi
  01028:    	mov    rdi,rbx
  0102b:    	mov    rsi,r12
  0102e: f6 	movabs rax,0x55f67a6ddf30
  01038:    	call   rax
  0103a:    	movq   xmm2,QWORD PTR [rsp]
  0103f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01045:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0104b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01051:    	add    rsp,0x20
  01055: f6 	movabs r13,0x55f67b870d50
  0105f:    	test   rax,rax
  01062:    	je     0xfffde4db
  01068:    	mov    QWORD PTR [r14-0x80],rax
:00085 %12 = %1.call org()                  [Ray]
  0106c:    	mov    rdi,QWORD PTR [r14-0x38]
  01070: 00 	test   rdi,0x7
  01077:    	jne    0x2ef90
  0107d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01081:    	jne    0x2ef90
  01087: 26 	cmp    DWORD PTR [rip+0xfffffffffffe07cf],0x26        # 0xfffe185d
  0108e:    	jne    0x2ef90
  01094:    	mov    esi,DWORD PTR [rip+0x5ae]        # 0x1648
  0109a:    	cmp    esi,0xffffffff
  0109d:    	je     0x2efac
  010a3:    	cmp    WORD PTR [rdi+0x2],0x3
  010a8:    	jne    0x10c1
  010ae:    	cmp    esi,0x6
  010b1:    	jge    0x10c1
  010b7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010bc:    	jmp    0x1103
  010c1:    	sub    rsp,0x20
  010c5:    	movq   QWORD PTR [rsp],xmm2
  010ca:    	movq   QWORD PTR [rsp+0x8],xmm4
  010d0:    	movq   QWORD PTR [rsp+0x10],xmm5
  010d6:    	movq   QWORD PTR [rsp+0x18],xmm6
  010dc: f6 	movabs rax,0x55f67a69e160
  010e6:    	call   rax
  010e8:    	movq   xmm2,QWORD PTR [rsp]
  010ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010ff:    	add    rsp,0x20
  01103: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  0110a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01111: 00 	test   rdi,0x7
  01118:    	jne    0x2f00b
  0111e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01122:    	jne    0x2f00b
  01128: 26 	cmp    DWORD PTR [rip+0xfffffffffffe072e],0x26        # 0xfffe185d
  0112f:    	jne    0x2f00b
  01135:    	mov    esi,DWORD PTR [rip+0x515]        # 0x1650
  0113b:    	cmp    esi,0xffffffff
  0113e:    	je     0x2f027
  01144:    	cmp    WORD PTR [rdi+0x2],0x3
  01149:    	jne    0x1162
  0114f:    	cmp    esi,0x6
  01152:    	jge    0x1162
  01158:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0115d:    	jmp    0x11a4
  01162:    	sub    rsp,0x20
  01166:    	movq   QWORD PTR [rsp],xmm2
  0116b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01171:    	movq   QWORD PTR [rsp+0x10],xmm5
  01177:    	movq   QWORD PTR [rsp+0x18],xmm6
  0117d: f6 	movabs rax,0x55f67a69e160
  01187:    	call   rax
  01189:    	movq   xmm2,QWORD PTR [rsp]
  0118e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01194:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0119a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011a0:    	add    rsp,0x20
  011a4: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  011ab:    	mov    rdi,QWORD PTR [r14-0x38]
  011af: 00 	test   rdi,0x7
  011b6:    	jne    0x2f086
  011bc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  011c0:    	jne    0x2f086
  011c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0690],0x26        # 0xfffe185d
  011cd:    	jne    0x2f086
  011d3:    	mov    esi,DWORD PTR [rip+0x47f]        # 0x1658
  011d9:    	cmp    esi,0xffffffff
  011dc:    	je     0x2f0a2
  011e2:    	cmp    WORD PTR [rdi+0x2],0x3
  011e7:    	jne    0x1200
  011ed:    	cmp    esi,0x6
  011f0:    	jge    0x1200
  011f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011fb:    	jmp    0x1242
  01200:    	sub    rsp,0x20
  01204:    	movq   QWORD PTR [rsp],xmm2
  01209:    	movq   QWORD PTR [rsp+0x8],xmm4
  0120f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01215:    	movq   QWORD PTR [rsp+0x18],xmm6
  0121b: f6 	movabs rax,0x55f67a69e160
  01225:    	call   rax
  01227:    	movq   xmm2,QWORD PTR [rsp]
  0122c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01232:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01238:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0123e:    	add    rsp,0x20
  01242: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  01249: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01250: 00 	test   rdi,0x7
  01257:    	jne    0x2f101
  0125d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01261:    	jne    0x2f101
  01267: 26 	cmp    DWORD PTR [rip+0xfffffffffffe05ef],0x26        # 0xfffe185d
  0126e:    	jne    0x2f101
  01274:    	mov    esi,DWORD PTR [rip+0x3e6]        # 0x1660
  0127a:    	cmp    esi,0xffffffff
  0127d:    	je     0x2f11d
  01283:    	cmp    WORD PTR [rdi+0x2],0x3
  01288:    	jne    0x12a1
  0128e:    	cmp    esi,0x6
  01291:    	jge    0x12a1
  01297:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0129c:    	jmp    0x12e3
  012a1:    	sub    rsp,0x20
  012a5:    	movq   QWORD PTR [rsp],xmm2
  012aa:    	movq   QWORD PTR [rsp+0x8],xmm4
  012b0:    	movq   QWORD PTR [rsp+0x10],xmm5
  012b6:    	movq   QWORD PTR [rsp+0x18],xmm6
  012bc: f6 	movabs rax,0x55f67a69e160
  012c6:    	call   rax
  012c8:    	movq   xmm2,QWORD PTR [rsp]
  012cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012df:    	add    rsp,0x20
  012e3: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  012ea:    	mov    rdi,QWORD PTR [r14-0x60]
  012ee: ff 	mov    rsi,QWORD PTR [r14-0x90]
  012f5:    	sub    rsp,0x20
  012f9:    	movq   QWORD PTR [rsp],xmm2
  012fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  01304:    	movq   QWORD PTR [rsp+0x10],xmm5
  0130a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01310:    	mov    rdx,rdi
  01313:    	mov    rcx,rsi
  01316:    	mov    rdi,rbx
  01319:    	mov    rsi,r12
  0131c: f6 	movabs rax,0x55f67a6dfeb0
  01326:    	call   rax
  01328:    	movq   xmm2,QWORD PTR [rsp]
  0132d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01333:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01339:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0133f:    	add    rsp,0x20
  01343: f6 	movabs r13,0x55f67b870e20
  0134d:    	test   rax,rax
  01350:    	je     0xfffde4db
  01356: ff 	mov    QWORD PTR [r14-0x90],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  0135d: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01364: ff 	mov    rsi,QWORD PTR [r14-0x90]
  0136b:    	sub    rsp,0x20
  0136f:    	movq   QWORD PTR [rsp],xmm2
  01374:    	movq   QWORD PTR [rsp+0x8],xmm4
  0137a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01380:    	movq   QWORD PTR [rsp+0x18],xmm6
  01386:    	mov    rdx,rdi
  01389:    	mov    rcx,rsi
  0138c:    	mov    rdi,rbx
  0138f:    	mov    rsi,r12
  01392: f6 	movabs rax,0x55f67a6ddf30
  0139c:    	call   rax
  0139e:    	movq   xmm2,QWORD PTR [rsp]
  013a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013af:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013b5:    	add    rsp,0x20
  013b9: f6 	movabs r13,0x55f67b870e30
  013c3:    	test   rax,rax
  013c6:    	je     0xfffde4db
  013cc: ff 	mov    QWORD PTR [r14-0x88],rax
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  013d3:    	mov    rdi,QWORD PTR [r14-0x70]
  013d7: 00 	test   rdi,0x7
  013de:    	jne    0x2f17c
  013e4:    	cmp    DWORD PTR [rdi+0x4],0x29
  013e8:    	jne    0x2f17c
  013ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0468],0x26        # 0xfffe185d
  013f5:    	jne    0x2f17c
  013fb: 00 	mov    r9,0x0
  01402:    	sub    rsp,0x20
  01406:    	movq   QWORD PTR [rsp],xmm2
  0140b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01411:    	movq   QWORD PTR [rsp+0x10],xmm5
  01417:    	movq   QWORD PTR [rsp+0x18],xmm6
  0141d:    	mov    rdx,rdi
  01420:    	mov    QWORD PTR [rsp-0x40],rcx
  01425: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0142e:    	lea    rcx,[r14-0x78]
  01432: 00 	mov    r8,0x3
  01439:    	mov    rsi,QWORD PTR [rbx]
  0143c:    	mov    QWORD PTR [rsp-0x18],rsi
  01441:    	lea    rsi,[rsp-0x18]
  01446:    	mov    QWORD PTR [rbx],rsi
  01449:    	lea    r14,[rsp-0x10]
  0144e:    	mov    QWORD PTR [rsp-0x20],r14
  01453:    	call   0x2f198
  01458:    	lea    r14,[rbp-0x8]
  0145c:    	mov    QWORD PTR [rbx],r14
  0145f:    	mov    r14,QWORD PTR [rbp-0x10]
  01463:    	movq   xmm2,QWORD PTR [rsp]
  01468:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0146e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01474:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0147a:    	add    rsp,0x20
  0147e: f6 	movabs r13,0x55f67b870e50
  01488:    	test   rax,rax
  0148b:    	je     0xfffde4db
  01491:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  01495:    	mov    rdi,QWORD PTR [r14-0x40]
  01499: 00 	test   rdi,0x7
  014a0:    	jne    0x2f1ca
  014a6:    	cmp    DWORD PTR [rdi+0x4],0x30
  014aa:    	jne    0x2f1ca
  014b0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe03a6],0x26        # 0xfffe185d
  014b7:    	jne    0x2f1ca
  014bd:    	mov    esi,DWORD PTR [rip+0x1a5]        # 0x1668
  014c3:    	cmp    esi,0xffffffff
  014c6:    	je     0x2f1e6
  014cc:    	cmp    WORD PTR [rdi+0x2],0x3
  014d1:    	jne    0x14ee
  014d7:    	cmp    esi,0x6
  014da:    	jge    0x14ee
  014e0:    	mov    rax,QWORD PTR [r14-0x68]
  014e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014e9:    	jmp    0x1547
  014ee:    	sub    rsp,0x20
  014f2:    	movq   QWORD PTR [rsp],xmm2
  014f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014fd:    	movq   QWORD PTR [rsp+0x10],xmm5
  01503:    	movq   QWORD PTR [rsp+0x18],xmm6
  01509:    	mov    rdx,QWORD PTR [r14-0x68]
  0150d: f6 	movabs rax,0x55f67a69e3e0
  01517:    	call   rax
  01519:    	movq   xmm2,QWORD PTR [rsp]
  0151e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01524:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0152a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01530:    	add    rsp,0x20
  01534: f6 	movabs r13,0x55f67b870e80
  0153e:    	test   rax,rax
  01541:    	je     0xfffde4db
:00103 
:00105 br =>:00106
  01547:    	jmp    0x2f2a5
:00106 %7 = nil
  0154c: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01554:    	mov    rax,QWORD PTR [r14-0x68]
  01558:    	leave  
  01559:    	ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55f67b858040
<== finished compile. elapsed:191.3µs
offset:Pos(143812) code: 9118 bytes  data: 358 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0: ff 	mov    QWORD PTR [r14-0xc8],rax
  000a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  000ab: 00 	test   rdi,0x7
  000b2:    	jne    0x2dc6e
  000b8:    	cmp    DWORD PTR [rdi+0x4],0x32
  000bc:    	jne    0x2dc6e
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000c2:    	mov    rax,QWORD PTR [rbp-0x18]
  000c6:    	mov    rax,QWORD PTR [rax]
  000c9:    	mov    rax,QWORD PTR [rax]
  000cc:    	mov    rax,QWORD PTR [rax]
  000cf:    	mov    rax,QWORD PTR [rax-0x38]
  000d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000e1: 00 	test   rdi,0x1
  000e8:    	je     0x2dc7d
  000ee:    	add    rdi,0x2
  000f2:    	jo     0x2dc7d
  000f8: ff 	mov    QWORD PTR [r14-0xa0],rdi
:00003 dynvar(4, %4) = %14
  000ff:    	mov    rax,QWORD PTR [rbp-0x18]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax]
  0010c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00113:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  00117:    	mov    rax,QWORD PTR [rbp-0x18]
  0011b:    	mov    rax,QWORD PTR [rax]
  0011e:    	mov    rax,QWORD PTR [rax]
  00121:    	mov    rax,QWORD PTR [rax]
  00124:    	mov    rax,QWORD PTR [rax-0x20]
  00128: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %2 = %14.call to_f()                 [Integer]
  0012f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00136: 00 	test   rdi,0x1
  0013d:    	je     0x2dc8c
  00143: 26 	cmp    DWORD PTR [rip+0xfffffffffffe00a7],0x26        # 0xfffe01f1
  0014a:    	jne    0x2dc8c
  00150:    	sar    rdi,1
  00153:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  00158:    	mov    rax,QWORD PTR [rbp-0x18]
  0015c:    	mov    rax,QWORD PTR [rax]
  0015f:    	mov    rax,QWORD PTR [rax]
  00162:    	mov    rax,QWORD PTR [rax]
  00165:    	mov    rax,QWORD PTR [rax-0x28]
  00169: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00170: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00177: 00 	test   rdi,0x1
  0017e:    	je     0x2dc9b
  00184: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0066],0x26        # 0xfffe01f1
  0018b:    	jne    0x2dc9b
  00191:    	sar    rdi,1
  00194:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  00199:    	mov    rax,QWORD PTR [rbp-0x18]
  0019d:    	mov    rax,QWORD PTR [rax]
  001a0:    	mov    rax,QWORD PTR [rax-0x20]
  001a4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001ab: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001b2: 00 	test   rdi,0x1
  001b9:    	je     0x2dcb7
  001bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe002b],0x26        # 0xfffe01f1
  001c6:    	jne    0x2dcb7
  001cc:    	sar    rdi,1
  001cf:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001d4:    	mov    rax,QWORD PTR [rbp-0x18]
  001d8:    	mov    rax,QWORD PTR [rax]
  001db:    	mov    rax,QWORD PTR [rax]
  001de:    	mov    rax,QWORD PTR [rax-0x20]
  001e2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001e9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f0: 00 	test   rdi,0x1
  001f7:    	je     0x2dce0
  001fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffdffed],0x26        # 0xfffe01f1
  00204:    	jne    0x2dce0
  0020a:    	sar    rdi,1
  0020d:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00212:    	mov    rdi,QWORD PTR [r14-0x38]
  00216: 00 	test   rdi,0x1
  0021d:    	je     0x2dd16
  00223: 26 	cmp    DWORD PTR [rip+0xfffffffffffdffc7],0x26        # 0xfffe01f1
  0022a:    	jne    0x2dd16
  00230:    	sar    rdi,1
  00233:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  00238:    	mov    rax,QWORD PTR [rbp-0x18]
  0023c:    	mov    rax,QWORD PTR [rax-0x20]
  00240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00024 %7 = %14.call to_f()                 [Integer]
  00247: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0024e: 00 	test   rdi,0x1
  00255:    	je     0x2dd59
  0025b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdff8f],0x26        # 0xfffe01f1
  00262:    	jne    0x2dd59
  00268:    	sar    rdi,1
  0026b:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00270:    	mov    rax,QWORD PTR [rbp-0x18]
  00274:    	mov    rax,QWORD PTR [rax]
  00277:    	mov    rax,QWORD PTR [rax]
  0027a:    	mov    rax,QWORD PTR [rax]
  0027d:    	mov    rax,QWORD PTR [rax-0x40]
  00281: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %6 / %14                       [Float][Float]
  00288: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028f: 00 	test   rdi,0x1
  00296:    	jne    0x2dda9
  0029c: 00 	test   rdi,0x2
  002a3:    	je     0x2e0
  002a9:    	xorps  xmm8,xmm8
  002ad: 00 	movabs rax,0x8000000000000002
  002b7:    	cmp    rdi,rax
  002ba:    	je     0x2f3
  002c0:    	mov    rax,rdi
  002c3:    	sar    rax,0x3f
  002c7:    	add    rax,0x2
  002cb:    	and    rdi,0xfffffffffffffffc
  002cf:    	or     rdi,rax
  002d2:    	rol    rdi,0x3d
  002d6:    	movq   xmm8,rdi
  002db:    	jmp    0x2f3
  002e0:    	call   0xfffdcec8
  002e5:    	test   rax,rax
  002e8:    	je     0x2dda9
  002ee:    	movq   xmm8,xmm0
  002f3:    	movq   rax,xmm8
  002f8:    	test   rax,rax
  002fb:    	je     0xfffdce94
  00301:    	movq   xmm0,xmm6
  00305:    	divsd  xmm0,xmm8
  0030a:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  0030f:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00314: 20 	movq   xmm9,QWORD PTR [rip+0x208f]        # 0x23ac
  0031d: 00 	mov    rax,0x2
  00324: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0032b:    	movq   rax,xmm9
  00330:    	test   rax,rax
  00333:    	je     0xfffdce94
  00339:    	movq   xmm0,xmm2
  0033d:    	divsd  xmm0,xmm9
  00342:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00347:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0034c: 20 	movq   xmm9,QWORD PTR [rip+0x2067]        # 0x23bc
  00355: 00 	mov    rax,0x2
  0035c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00363:    	movq   rax,xmm9
  00368:    	test   rax,rax
  0036b:    	je     0xfffdce94
  00371:    	movq   xmm0,xmm2
  00375:    	divsd  xmm0,xmm9
  0037a:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  0037f:    	movq   xmm10,xmm8
  00384:    	movq   rax,xmm9
  00389:    	test   rax,rax
  0038c:    	je     0xfffdce94
  00392:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  00397:    	mov    rax,QWORD PTR [rbp-0x18]
  0039b:    	mov    rax,QWORD PTR [rax]
  0039e:    	mov    rax,QWORD PTR [rax]
  003a1:    	mov    rax,QWORD PTR [rax]
  003a4:    	mov    rax,QWORD PTR [rax-0x40]
  003a8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003af: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x2de06
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x407
  003d0:    	xorps  xmm8,xmm8
  003d4: 00 	movabs rax,0x8000000000000002
  003de:    	cmp    rdi,rax
  003e1:    	je     0x41a
  003e7:    	mov    rax,rdi
  003ea:    	sar    rax,0x3f
  003ee:    	add    rax,0x2
  003f2:    	and    rdi,0xfffffffffffffffc
  003f6:    	or     rdi,rax
  003f9:    	rol    rdi,0x3d
  003fd:    	movq   xmm8,rdi
  00402:    	jmp    0x41a
  00407:    	call   0xfffdcec8
  0040c:    	test   rax,rax
  0040f:    	je     0x2de06
  00415:    	movq   xmm8,xmm0
  0041a:    	movq   rax,xmm8
  0041f:    	test   rax,rax
  00422:    	je     0xfffdce94
  00428:    	movq   xmm0,xmm7
  0042c:    	divsd  xmm0,xmm8
  00431:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00436:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0043b: 1f 	movq   xmm9,QWORD PTR [rip+0x1f88]        # 0x23cc
  00444: 00 	mov    rax,0x2
  0044b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00452:    	movq   rax,xmm9
  00457:    	test   rax,rax
  0045a:    	je     0xfffdce94
  00460:    	movq   xmm0,xmm3
  00464:    	divsd  xmm0,xmm9
  00469:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  0046e:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00473: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1f61]        # 0x23dc
:00043 %15 = literal[2.0]
  0047b: 1f 	movq   xmm9,QWORD PTR [rip+0x1f68]        # 0x23ec
  00484: 00 	mov    rax,0x2
  0048b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00492:    	movq   rax,xmm9
  00497:    	test   rax,rax
  0049a:    	je     0xfffdce94
  004a0:    	movq   xmm0,xmm3
  004a4:    	divsd  xmm0,xmm9
  004a9:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004ae:    	movq   xmm11,xmm8
  004b3:    	movq   rax,xmm9
  004b8:    	test   rax,rax
  004bb:    	je     0xfffdce94
  004c1:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdfd2f]        # 0xfffe01fc
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1f38]        # 0x240c
  004d4:    	jne    0x2de82
  004da: 00 	mov    rax,QWORD PTR [rip+0x1f1b]        # 0x23fc
  004e1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004e8: 1f 	movq   xmm9,QWORD PTR [rip+0x1f2b]        # 0x241c
  004f1: 00 	movabs rax,0xff80000000000006
  004fb: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00502:    	movq   xmm0,xmm10
  00507:    	call   0xfffdcfec
  0050c: ff 	mov    QWORD PTR [r14-0xb0],rax
  00513:    	movq   xmm0,xmm11
  00518:    	call   0xfffdcfec
  0051d: ff 	mov    QWORD PTR [r14-0xb8],rax
  00524: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0052b: 00 	test   rdi,0x7
  00532:    	jne    0x2df40
  00538:    	cmp    DWORD PTR [rdi+0x4],0x29
  0053c:    	jne    0x2df40
  00542: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfca8],0x26        # 0xfffe01f1
  00549:    	jne    0x2df40
  0054f: 00 	mov    r9,0x0
  00556:    	sub    rsp,0x50
  0055a:    	movq   QWORD PTR [rsp],xmm2
  0055f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00565:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00571:    	movq   QWORD PTR [rsp+0x20],xmm6
  00577:    	movq   QWORD PTR [rsp+0x28],xmm7
  0057d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00584: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0058b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00592:    	mov    rdx,rdi
  00595:    	mov    QWORD PTR [rsp-0x40],rcx
  0059a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  005a3: ff 	lea    rcx,[r14-0xb0]
  005aa: 00 	mov    r8,0x3
  005b1:    	mov    rsi,QWORD PTR [rbx]
  005b4:    	mov    QWORD PTR [rsp-0x18],rsi
  005b9:    	lea    rsi,[rsp-0x18]
  005be:    	mov    QWORD PTR [rbx],rsi
  005c1:    	lea    r14,[rsp-0x10]
  005c6:    	mov    QWORD PTR [rsp-0x20],r14
  005cb:    	call   0x2dfb9
  005d0:    	lea    r14,[rbp-0x8]
  005d4:    	mov    QWORD PTR [rbx],r14
  005d7:    	mov    r14,QWORD PTR [rbp-0x10]
  005db:    	movq   xmm2,QWORD PTR [rsp]
  005e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005fe: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00605: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0060c: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00613:    	add    rsp,0x50
  00617: f6 	movabs r13,0x55f67b858380
  00621:    	test   rax,rax
  00624:    	je     0xfffdce6f
  0062a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00631: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x2dfeb
  00645:    	cmp    DWORD PTR [rdi+0x4],0x28
  00649:    	jne    0x2dfeb
  0064f: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfb9b],0x26        # 0xfffe01f1
  00656:    	jne    0x2dfeb
  0065c:    	sub    rsp,0x50
  00660:    	movq   QWORD PTR [rsp],xmm2
  00665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00671:    	movq   QWORD PTR [rsp+0x18],xmm5
  00677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0067d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00683: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0068a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00691: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00698: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006a1: ff 	mov    rax,QWORD PTR [r14-0xa0]
  006a8:    	mov    QWORD PTR [rsp-0x40],rax
  006ad: 00 	mov    rdi,0x0
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd: 07 	movabs rax,0x700000044
  006c7:    	mov    QWORD PTR [rsp-0x30],rax
  006cc: f6 	movabs r13,0x55f67b84eec0
  006d6:    	mov    rsi,QWORD PTR [rbx]
  006d9:    	mov    QWORD PTR [rsp-0x18],rsi
  006de:    	lea    rsi,[rsp-0x18]
  006e3:    	mov    QWORD PTR [rbx],rsi
  006e6:    	lea    r14,[rsp-0x10]
  006eb:    	mov    QWORD PTR [rsp-0x20],r14
  006f0:    	call   0xfffe0af8
  006f5:    	lea    r14,[rbp-0x8]
  006f9:    	mov    QWORD PTR [rbx],r14
  006fc:    	mov    r14,QWORD PTR [rbp-0x10]
  00700:    	movq   xmm2,QWORD PTR [rsp]
  00705:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00711:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00717:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00723: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00731: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00738:    	add    rsp,0x50
  0073c: f6 	movabs r13,0x55f67b8583b0
  00746:    	test   rax,rax
  00749:    	je     0xfffdce6f
  0074f:    	mov    QWORD PTR [r14-0x80],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  00753: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdfaa2]        # 0xfffe01fc
  0075a: 00 	cmp    rax,QWORD PTR [rip+0x1cdb]        # 0x243c
  00761:    	jne    0x2e064
  00767: 00 	mov    rax,QWORD PTR [rip+0x1cbe]        # 0x242c
  0076e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00057 %16 = const[Vec]                     [Vec]
  00775: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdfa80]        # 0xfffe01fc
  0077c: 00 	cmp    rax,QWORD PTR [rip+0x1cd9]        # 0x245c
  00783:    	jne    0x2e122
  00789: 00 	mov    rax,QWORD PTR [rip+0x1cbc]        # 0x244c
  00790: ff 	mov    QWORD PTR [r14-0xb0],rax
:00058 %17 = literal[0.0]
  00797: 1c 	movq   xmm8,QWORD PTR [rip+0x1ccc]        # 0x246c
  007a0: 00 	movabs rax,0x8000000000000002
  007aa: ff 	mov    QWORD PTR [r14-0xb8],rax
:00059 %18 = literal[0.0]
  007b1: 1c 	movq   xmm9,QWORD PTR [rip+0x1cc2]        # 0x247c
  007ba: 00 	movabs rax,0x8000000000000002
  007c4: ff 	mov    QWORD PTR [r14-0xc0],rax
:00060 %19 = literal[0.0]
  007cb: 1c 	movq   xmm12,QWORD PTR [rip+0x1cb8]        # 0x248c
  007d4: 00 	movabs rax,0x8000000000000002
  007de: ff 	mov    QWORD PTR [r14-0xc8],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  007ec: 00 	test   rdi,0x7
  007f3:    	jne    0x2e1e0
  007f9:    	cmp    DWORD PTR [rdi+0x4],0x29
  007fd:    	jne    0x2e1e0
  00803: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf9e7],0x26        # 0xfffe01f1
  0080a:    	jne    0x2e1e0
  00810: 00 	mov    r9,0x0
  00817:    	sub    rsp,0x60
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	movq   QWORD PTR [rsp+0x20],xmm6
  00838:    	movq   QWORD PTR [rsp+0x28],xmm7
  0083e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00845: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00853: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00861:    	mov    rdx,rdi
  00864:    	mov    QWORD PTR [rsp-0x40],rcx
  00869: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00872: ff 	lea    rcx,[r14-0xb8]
  00879: 00 	mov    r8,0x3
  00880:    	mov    rsi,QWORD PTR [rbx]
  00883:    	mov    QWORD PTR [rsp-0x18],rsi
  00888:    	lea    rsi,[rsp-0x18]
  0088d:    	mov    QWORD PTR [rbx],rsi
  00890:    	lea    r14,[rsp-0x10]
  00895:    	mov    QWORD PTR [rsp-0x20],r14
  0089a:    	call   0x2e259
  0089f:    	lea    r14,[rbp-0x8]
  008a3:    	mov    QWORD PTR [rbx],r14
  008a6:    	mov    r14,QWORD PTR [rbp-0x10]
  008aa:    	movq   xmm2,QWORD PTR [rsp]
  008af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f0:    	add    rsp,0x60
  008f4: f6 	movabs r13,0x55f67b858430
  008fe:    	test   rax,rax
  00901:    	je     0xfffdce6f
  00907: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 
:00064 %16 = %10
  0090e:    	mov    rax,QWORD PTR [r14-0x80]
  00912: ff 	mov    QWORD PTR [r14-0xb0],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00919: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00920: 00 	test   rdi,0x7
  00927:    	jne    0x2e28b
  0092d:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00931:    	jne    0x2e28b
  00937: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf8b3],0x26        # 0xfffe01f1
  0093e:    	jne    0x2e28b
  00944: 00 	mov    r9,0x0
  0094b:    	sub    rsp,0x60
  0094f:    	movq   QWORD PTR [rsp],xmm2
  00954:    	movq   QWORD PTR [rsp+0x8],xmm3
  0095a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00960:    	movq   QWORD PTR [rsp+0x18],xmm5
  00966:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00972: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00979: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00980: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00987: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0098e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00995:    	mov    rdx,rdi
  00998:    	mov    QWORD PTR [rsp-0x40],rcx
  0099d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009a6: ff 	lea    rcx,[r14-0xa8]
  009ad: 00 	mov    r8,0x2
  009b4:    	mov    rsi,QWORD PTR [rbx]
  009b7:    	mov    QWORD PTR [rsp-0x18],rsi
  009bc:    	lea    rsi,[rsp-0x18]
  009c1:    	mov    QWORD PTR [rbx],rsi
  009c4:    	lea    r14,[rsp-0x10]
  009c9:    	mov    QWORD PTR [rsp-0x20],r14
  009ce:    	call   0x2e304
  009d3:    	lea    r14,[rbp-0x8]
  009d7:    	mov    QWORD PTR [rbx],r14
  009da:    	mov    r14,QWORD PTR [rbp-0x10]
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009fb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a01: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a08: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a0f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a16: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a1d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a24:    	add    rsp,0x60
  00a28: f6 	movabs r13,0x55f67b858470
  00a32:    	test   rax,rax
  00a35:    	je     0xfffdce6f
  00a3b: ff 	mov    QWORD PTR [r14-0x88],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a42: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdf7b3]        # 0xfffe01fc
  00a49: 00 	cmp    rax,QWORD PTR [rip+0x1a5c]        # 0x24ac
  00a50:    	jne    0x2e336
  00a56: 00 	mov    rax,QWORD PTR [rip+0x1a3f]        # 0x249c
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a6b: 00 	test   rdi,0x7
  00a72:    	jne    0x2e410
  00a78:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a7c:    	jne    0x2e410
  00a82: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf768],0x26        # 0xfffe01f1
  00a89:    	jne    0x2e410
  00a8f: 00 	mov    r9,0x0
  00a96:    	sub    rsp,0x60
  00a9a:    	movq   QWORD PTR [rsp],xmm2
  00a9f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aab:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ab7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00abd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ac4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00acb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ad2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ad9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ae0:    	mov    rdx,rdi
  00ae3:    	mov    QWORD PTR [rsp-0x40],rcx
  00ae8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00af1: ff 	lea    rcx,[r14-0xa8]
  00af8: 00 	mov    r8,0x0
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   0x2e489
  00b1e:    	lea    r14,[rbp-0x8]
  00b22:    	mov    QWORD PTR [rbx],r14
  00b25:    	mov    r14,QWORD PTR [rbp-0x10]
  00b29:    	movq   xmm2,QWORD PTR [rsp]
  00b2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b6f:    	add    rsp,0x60
  00b73: f6 	movabs r13,0x55f67b8584b0
  00b7d:    	test   rax,rax
  00b80:    	je     0xfffdce6f
  00b86: ff 	mov    QWORD PTR [r14-0x90],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b8d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b91:    	mov    rax,QWORD PTR [rdi+0x10]
  00b95: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 0: i32
  00b9c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ba7:    	sub    rsp,0x60
  00bab:    	movq   QWORD PTR [rsp],xmm2
  00bb0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bb6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bbc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bc2:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bc8:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bce: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bd5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bdc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00be3: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bea: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bf1: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00bf8: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00bff:    	mov    rdi,rbx
  00c02:    	mov    rsi,r12
  00c05: f6 	movabs r8,0x55f67b8584e8
  00c0f: f6 	movabs rax,0x55f67a71b620
  00c19:    	call   rax
  00c1b:    	movq   xmm2,QWORD PTR [rsp]
  00c20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c32:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c38:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c3e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c45: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c4c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c53: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c5a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c61:    	add    rsp,0x60
  00c65: f6 	movabs r13,0x55f67b8584f0
  00c6f:    	test   rax,rax
  00c72:    	je     0xfffdce6f
  00c78: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00c7f: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c86: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00c8d: ff 	mov    rax,QWORD PTR [r14-0x90]
  00c94: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c9b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ca2: 00 	test   rdi,0x7
  00ca9:    	jne    0x2e4bb
  00caf:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00cb3:    	jne    0x2e4bb
  00cb9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf531],0x26        # 0xfffe01f1
  00cc0:    	jne    0x2e4bb
  00cc6:    	sub    rsp,0x60
  00cca:    	movq   QWORD PTR [rsp],xmm2
  00ccf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cdb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ce7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ced: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cf4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cfb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d02: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d09: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d10: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d19: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d20:    	mov    QWORD PTR [rsp-0x40],rax
  00d25: 00 	mov    rdi,0x2
  00d2c:    	lea    r8,[rsp-0x48]
  00d31: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00d38:    	mov    QWORD PTR [r8],rax
  00d3b:    	sub    r8,0x8
  00d3f: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00d46:    	mov    QWORD PTR [r8],rax
  00d49:    	sub    r8,0x8
  00d4d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d56: 10 	movabs rax,0x1000000046
  00d60:    	mov    QWORD PTR [rsp-0x30],rax
  00d65: f6 	movabs r13,0x55f67b86e960
  00d6f:    	mov    rsi,QWORD PTR [rbx]
  00d72:    	mov    QWORD PTR [rsp-0x18],rsi
  00d77:    	lea    rsi,[rsp-0x18]
  00d7c:    	mov    QWORD PTR [rbx],rsi
  00d7f:    	lea    r14,[rsp-0x10]
  00d84:    	mov    QWORD PTR [rsp-0x20],r14
  00d89:    	call   0xfffe0e00
  00d8e:    	lea    r14,[rbp-0x8]
  00d92:    	mov    QWORD PTR [rbx],r14
  00d95:    	mov    r14,QWORD PTR [rbp-0x10]
  00d99:    	movq   xmm2,QWORD PTR [rsp]
  00d9e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00da4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00daa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00db0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00db6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dbc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00dc3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00dd1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00dd8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ddf:    	add    rsp,0x60
  00de3: f6 	movabs r13,0x55f67b858530
  00ded:    	test   rax,rax
  00df0:    	je     0xfffdce6f
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00df6:    	mov    rdi,QWORD PTR [rbp-0x30]
  00dfa:    	mov    rax,QWORD PTR [rdi+0x10]
  00dfe: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  00e05: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00e10:    	sub    rsp,0x60
  00e14:    	movq   QWORD PTR [rsp],xmm2
  00e19:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e25:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e2b:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e31:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e37: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e3e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e45: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e4c: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e53: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e5a: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  00e61: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  00e68:    	mov    rdi,rbx
  00e6b:    	mov    rsi,r12
  00e6e: f6 	movabs r8,0x55f67b858568
  00e78: f6 	movabs rax,0x55f67a71b620
  00e82:    	call   rax
  00e84:    	movq   xmm2,QWORD PTR [rsp]
  00e89:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e8f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e95:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e9b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ea1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ea7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00eae: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00eb5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ebc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00ec3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00eca:    	add    rsp,0x60
  00ece: f6 	movabs r13,0x55f67b858570
  00ed8:    	test   rax,rax
  00edb:    	je     0xfffdce6f
  00ee1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %15 = %11
  00ee8: ff 	mov    rax,QWORD PTR [r14-0x88]
  00eef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00084 %16 = %12
  00ef6: ff 	mov    rax,QWORD PTR [r14-0x90]
  00efd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00f04: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f0b: 00 	test   rdi,0x7
  00f12:    	jne    0x2e534
  00f18:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00f1c:    	jne    0x2e534
  00f22: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf2c8],0x26        # 0xfffe01f1
  00f29:    	jne    0x2e534
  00f2f:    	sub    rsp,0x60
  00f33:    	movq   QWORD PTR [rsp],xmm2
  00f38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f50:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f56: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f5d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f64: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f6b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f72: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f79: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f82: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00f89:    	mov    QWORD PTR [rsp-0x40],rax
  00f8e: 00 	mov    rdi,0x2
  00f95:    	lea    r8,[rsp-0x48]
  00f9a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00fa1:    	mov    QWORD PTR [r8],rax
  00fa4:    	sub    r8,0x8
  00fa8: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00faf:    	mov    QWORD PTR [r8],rax
  00fb2:    	sub    r8,0x8
  00fb6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fbf: 10 	movabs rax,0x1000000046
  00fc9:    	mov    QWORD PTR [rsp-0x30],rax
  00fce: f6 	movabs r13,0x55f67b86e960
  00fd8:    	mov    rsi,QWORD PTR [rbx]
  00fdb:    	mov    QWORD PTR [rsp-0x18],rsi
  00fe0:    	lea    rsi,[rsp-0x18]
  00fe5:    	mov    QWORD PTR [rbx],rsi
  00fe8:    	lea    r14,[rsp-0x10]
  00fed:    	mov    QWORD PTR [rsp-0x20],r14
  00ff2:    	call   0xfffe0e00
  00ff7:    	lea    r14,[rbp-0x8]
  00ffb:    	mov    QWORD PTR [rbx],r14
  00ffe:    	mov    r14,QWORD PTR [rbp-0x10]
  01002:    	movq   xmm2,QWORD PTR [rsp]
  01007:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01013:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01019:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0101f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01025: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0102c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01033: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0103a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01041: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01048:    	add    rsp,0x60
  0104c: f6 	movabs r13,0x55f67b8585b0
  01056:    	test   rax,rax
  01059:    	je     0xfffdce6f
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  0105f:    	mov    rdi,QWORD PTR [rbp-0x30]
  01063:    	mov    rax,QWORD PTR [rdi+0x10]
  01067: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 %15 = 2: i32
  0106e: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01079:    	sub    rsp,0x60
  0107d:    	movq   QWORD PTR [rsp],xmm2
  01082:    	movq   QWORD PTR [rsp+0x8],xmm3
  01088:    	movq   QWORD PTR [rsp+0x10],xmm4
  0108e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01094:    	movq   QWORD PTR [rsp+0x20],xmm6
  0109a:    	movq   QWORD PTR [rsp+0x28],xmm7
  010a0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010a7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010ae: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  010b5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010bc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010c3: ff 	mov    rdx,QWORD PTR [r14-0xa0]
  010ca: ff 	mov    rcx,QWORD PTR [r14-0xa8]
  010d1:    	mov    rdi,rbx
  010d4:    	mov    rsi,r12
  010d7: f6 	movabs r8,0x55f67b8585e8
  010e1: f6 	movabs rax,0x55f67a71b620
  010eb:    	call   rax
  010ed:    	movq   xmm2,QWORD PTR [rsp]
  010f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01104:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0110a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01110: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01117: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0111e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01125: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0112c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01133:    	add    rsp,0x60
  01137: f6 	movabs r13,0x55f67b8585f0
  01141:    	test   rax,rax
  01144:    	je     0xfffdce6f
  0114a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = %11
  01151: ff 	mov    rax,QWORD PTR [r14-0x88]
  01158: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %16 = %12
  0115f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01166: ff 	mov    QWORD PTR [r14-0xb0],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  0116d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01174: 00 	test   rdi,0x7
  0117b:    	jne    0x2e5ad
  01181:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01185:    	jne    0x2e5ad
  0118b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf05f],0x26        # 0xfffe01f1
  01192:    	jne    0x2e5ad
  01198:    	sub    rsp,0x60
  0119c:    	movq   QWORD PTR [rsp],xmm2
  011a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  011a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ad:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b3:    	movq   QWORD PTR [rsp+0x20],xmm6
  011b9:    	movq   QWORD PTR [rsp+0x28],xmm7
  011bf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  011c6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  011cd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  011d4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011db: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011e2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011eb: ff 	mov    rax,QWORD PTR [r14-0xa0]
  011f2:    	mov    QWORD PTR [rsp-0x40],rax
  011f7: 00 	mov    rdi,0x2
  011fe:    	lea    r8,[rsp-0x48]
  01203: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0120a:    	mov    QWORD PTR [r8],rax
  0120d:    	sub    r8,0x8
  01211: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01218:    	mov    QWORD PTR [r8],rax
  0121b:    	sub    r8,0x8
  0121f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01228: 10 	movabs rax,0x1000000046
  01232:    	mov    QWORD PTR [rsp-0x30],rax
  01237: f6 	movabs r13,0x55f67b86e960
  01241:    	mov    rsi,QWORD PTR [rbx]
  01244:    	mov    QWORD PTR [rsp-0x18],rsi
  01249:    	lea    rsi,[rsp-0x18]
  0124e:    	mov    QWORD PTR [rbx],rsi
  01251:    	lea    r14,[rsp-0x10]
  01256:    	mov    QWORD PTR [rsp-0x20],r14
  0125b:    	call   0xfffe0e00
  01260:    	lea    r14,[rbp-0x8]
  01264:    	mov    QWORD PTR [rbx],r14
  01267:    	mov    r14,QWORD PTR [rbp-0x10]
  0126b:    	movq   xmm2,QWORD PTR [rsp]
  01270:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01276:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0127c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01282:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01288:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0128e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01295: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0129c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012a3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012aa: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012b1:    	add    rsp,0x60
  012b5: f6 	movabs r13,0x55f67b858630
  012bf:    	test   rax,rax
  012c2:    	je     0xfffdce6f
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  012c8:    	mov    rdi,QWORD PTR [rbp-0x30]
  012cc:    	mov    rax,QWORD PTR [rdi+0x18]
  012d0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00097 %15 = %11
  012d7: ff 	mov    rax,QWORD PTR [r14-0x88]
  012de: ff 	mov    QWORD PTR [r14-0xa8],rax
:00098 %16 = %12
  012e5: ff 	mov    rax,QWORD PTR [r14-0x90]
  012ec: ff 	mov    QWORD PTR [r14-0xb0],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  012fa: 00 	test   rdi,0x7
  01301:    	jne    0x2e626
  01307:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0130b:    	jne    0x2e626
  01311: 26 	cmp    DWORD PTR [rip+0xfffffffffffdeed9],0x26        # 0xfffe01f1
  01318:    	jne    0x2e626
  0131e:    	sub    rsp,0x60
  01322:    	movq   QWORD PTR [rsp],xmm2
  01327:    	movq   QWORD PTR [rsp+0x8],xmm3
  0132d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01333:    	movq   QWORD PTR [rsp+0x18],xmm5
  01339:    	movq   QWORD PTR [rsp+0x20],xmm6
  0133f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01345: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0134c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01353: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0135a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01361: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01368: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01371: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01378:    	mov    QWORD PTR [rsp-0x40],rax
  0137d: 00 	mov    rdi,0x2
  01384:    	lea    r8,[rsp-0x48]
  01389: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01390:    	mov    QWORD PTR [r8],rax
  01393:    	sub    r8,0x8
  01397: ff 	mov    rax,QWORD PTR [r14-0xb0]
  0139e:    	mov    QWORD PTR [r8],rax
  013a1:    	sub    r8,0x8
  013a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013ae: 0e 	movabs rax,0xe00000048
  013b8:    	mov    QWORD PTR [rsp-0x30],rax
  013bd: f6 	movabs r13,0x55f67b870800
  013c7:    	mov    rsi,QWORD PTR [rbx]
  013ca:    	mov    QWORD PTR [rsp-0x18],rsi
  013cf:    	lea    rsi,[rsp-0x18]
  013d4:    	mov    QWORD PTR [rbx],rsi
  013d7:    	lea    r14,[rsp-0x10]
  013dc:    	mov    QWORD PTR [rsp-0x20],r14
  013e1:    	call   0xfffe13d8
  013e6:    	lea    r14,[rbp-0x8]
  013ea:    	mov    QWORD PTR [rbx],r14
  013ed:    	mov    r14,QWORD PTR [rbp-0x10]
  013f1:    	movq   xmm2,QWORD PTR [rsp]
  013f6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013fc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01402:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01408:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0140e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01414: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0141b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01422: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01429: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01430: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01437:    	add    rsp,0x60
  0143b: f6 	movabs r13,0x55f67b858690
  01445:    	test   rax,rax
  01448:    	je     0xfffdce6f
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  0144e: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01455: 00 	test   rdi,0x7
  0145c:    	jne    0x2e69f
  01462:    	cmp    DWORD PTR [rdi+0x4],0x30
  01466:    	jne    0x2e69f
  0146c: 26 	cmp    DWORD PTR [rip+0xfffffffffffded7e],0x26        # 0xfffe01f1
  01473:    	jne    0x2e69f
  01479:    	mov    esi,DWORD PTR [rip+0x1039]        # 0x24b8
  0147f:    	cmp    esi,0xffffffff
  01482:    	je     0x2e718
  01488:    	cmp    WORD PTR [rdi+0x2],0x3
  0148d:    	jne    0x14a6
  01493:    	cmp    esi,0x6
  01496:    	jge    0x14a6
  0149c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014a1:    	jmp    0x1546
  014a6:    	sub    rsp,0x60
  014aa:    	movq   QWORD PTR [rsp],xmm2
  014af:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b5:    	movq   QWORD PTR [rsp+0x10],xmm4
  014bb:    	movq   QWORD PTR [rsp+0x18],xmm5
  014c1:    	movq   QWORD PTR [rsp+0x20],xmm6
  014c7:    	movq   QWORD PTR [rsp+0x28],xmm7
  014cd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014d4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014db: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  014e2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014e9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014f0: f6 	movabs rax,0x55f67a69e160
  014fa:    	call   rax
  014fc:    	movq   xmm2,QWORD PTR [rsp]
  01501:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01507:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0150d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01513:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01519:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0151f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01526: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0152d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01534: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0153b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01542:    	add    rsp,0x60
  01546: ff 	mov    QWORD PTR [r14-0xa0],rax
:00103 
:00105 condnotbr %14 =>:00148
  0154d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01554:    	or     rax,0x10
  01558:    	cmp    rax,0x14
  0155c:    	je     0x238a
:00106 %14 = %12
  01562: ff 	mov    rax,QWORD PTR [r14-0x90]
  01569: ff 	mov    QWORD PTR [r14-0xa0],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  01570:    	mov    rdi,QWORD PTR [r14-0x30]
  01574: 26 	cmp    DWORD PTR [rip+0xfffffffffffdec76],0x26        # 0xfffe01f1
  0157b:    	jne    0x2e7d5
  01581:    	sub    rsp,0x60
  01585:    	movq   QWORD PTR [rsp],xmm2
  0158a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01590:    	movq   QWORD PTR [rsp+0x10],xmm4
  01596:    	movq   QWORD PTR [rsp+0x18],xmm5
  0159c:    	movq   QWORD PTR [rsp+0x20],xmm6
  015a2:    	movq   QWORD PTR [rsp+0x28],xmm7
  015a8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015af: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015b6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015bd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015c4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015cb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015d4:    	mov    rax,QWORD PTR [r14-0x30]
  015d8:    	mov    QWORD PTR [rsp-0x40],rax
  015dd: 00 	mov    rdi,0x1
  015e4:    	lea    r8,[rsp-0x48]
  015e9: ff 	mov    rax,QWORD PTR [r14-0xa0]
  015f0:    	mov    QWORD PTR [r8],rax
  015f3:    	sub    r8,0x8
  015f7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01600: 0e 	movabs rax,0xe0000004c
  0160a:    	mov    QWORD PTR [rsp-0x30],rax
  0160f: f6 	movabs r13,0x55f67b877ad0
  01619:    	mov    rsi,QWORD PTR [rbx]
  0161c:    	mov    QWORD PTR [rsp-0x18],rsi
  01621:    	lea    rsi,[rsp-0x18]
  01626:    	mov    QWORD PTR [rbx],rsi
  01629:    	lea    r14,[rsp-0x10]
  0162e:    	mov    QWORD PTR [rsp-0x20],r14
  01633:    	call   0xfffe9dc1
  01638:    	lea    r14,[rbp-0x8]
  0163c:    	mov    QWORD PTR [rbx],r14
  0163f:    	mov    r14,QWORD PTR [rbp-0x10]
  01643:    	movq   xmm2,QWORD PTR [rsp]
  01648:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0164e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01654:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0165a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01660:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01666: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0166d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01674: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0167b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01682: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01689:    	add    rsp,0x60
  0168d: f6 	movabs r13,0x55f67b858710
  01697:    	test   rax,rax
  0169a:    	je     0xfffdce6f
  016a0: ff 	mov    QWORD PTR [r14-0x98],rax
:00108 
:00110 %14 = dynvar(2, %2)
  016a7:    	mov    rax,QWORD PTR [rbp-0x18]
  016ab:    	mov    rax,QWORD PTR [rax]
  016ae:    	mov    rax,QWORD PTR [rax-0x28]
  016b2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00111 %16 = dynvar(2, %2)
  016b9:    	mov    rax,QWORD PTR [rbp-0x18]
  016bd:    	mov    rax,QWORD PTR [rax]
  016c0:    	mov    rax,QWORD PTR [rax-0x28]
  016c4: ff 	mov    QWORD PTR [r14-0xb0],rax
:00112 %15 = %16.call x()                   [Vec]
  016cb: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  016d2: 00 	test   rdi,0x7
  016d9:    	jne    0x2e84e
  016df:    	cmp    DWORD PTR [rdi+0x4],0x28
  016e3:    	jne    0x2e84e
  016e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdeb01],0x26        # 0xfffe01f1
  016f0:    	jne    0x2e84e
  016f6:    	mov    esi,DWORD PTR [rip+0xdc4]        # 0x24c0
  016fc:    	cmp    esi,0xffffffff
  016ff:    	je     0x2e8c7
  01705:    	cmp    WORD PTR [rdi+0x2],0x3
  0170a:    	jne    0x1723
  01710:    	cmp    esi,0x6
  01713:    	jge    0x1723
  01719:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0171e:    	jmp    0x17c3
  01723:    	sub    rsp,0x60
  01727:    	movq   QWORD PTR [rsp],xmm2
  0172c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01732:    	movq   QWORD PTR [rsp+0x10],xmm4
  01738:    	movq   QWORD PTR [rsp+0x18],xmm5
  0173e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01744:    	movq   QWORD PTR [rsp+0x28],xmm7
  0174a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01751: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01758: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0175f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01766: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0176d: f6 	movabs rax,0x55f67a69e160
  01777:    	call   rax
  01779:    	movq   xmm2,QWORD PTR [rsp]
  0177e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01784:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0178a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01790:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01796:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0179c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017a3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  017aa: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017b1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017b8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017bf:    	add    rsp,0x60
  017c3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 
:00115 %16 = %13.call x()                   [Vec]
  017ca: ff 	mov    rdi,QWORD PTR [r14-0x98]
  017d1: 00 	test   rdi,0x7
  017d8:    	jne    0x2e984
  017de:    	cmp    DWORD PTR [rdi+0x4],0x28
  017e2:    	jne    0x2e984
  017e8: 26 	cmp    DWORD PTR [rip+0xfffffffffffdea02],0x26        # 0xfffe01f1
  017ef:    	jne    0x2e984
  017f5:    	mov    esi,DWORD PTR [rip+0xccd]        # 0x24c8
  017fb:    	cmp    esi,0xffffffff
  017fe:    	je     0x2e9fd
  01804:    	cmp    WORD PTR [rdi+0x2],0x3
  01809:    	jne    0x1822
  0180f:    	cmp    esi,0x6
  01812:    	jge    0x1822
  01818:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0181d:    	jmp    0x18c2
  01822:    	sub    rsp,0x60
  01826:    	movq   QWORD PTR [rsp],xmm2
  0182b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01831:    	movq   QWORD PTR [rsp+0x10],xmm4
  01837:    	movq   QWORD PTR [rsp+0x18],xmm5
  0183d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01843:    	movq   QWORD PTR [rsp+0x28],xmm7
  01849: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01850: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01857: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0185e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01865: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0186c: f6 	movabs rax,0x55f67a69e160
  01876:    	call   rax
  01878:    	movq   xmm2,QWORD PTR [rsp]
  0187d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01883:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01889:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0188f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01895:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0189b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018a2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018a9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  018b0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  018b7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  018be:    	add    rsp,0x60
  018c2: ff 	mov    QWORD PTR [r14-0xb0],rax
:00116 
:00118 %15 = %15 + %16                      [Float][Float]
  018c9: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  018d0: 00 	test   rdi,0x1
  018d7:    	jne    0x2eaba
  018dd: 00 	test   rdi,0x2
  018e4:    	je     0x1921
  018ea:    	xorps  xmm13,xmm13
  018ee: 00 	movabs rax,0x8000000000000002
  018f8:    	cmp    rdi,rax
  018fb:    	je     0x1934
  01901:    	mov    rax,rdi
  01904:    	sar    rax,0x3f
  01908:    	add    rax,0x2
  0190c:    	and    rdi,0xfffffffffffffffc
  01910:    	or     rdi,rax
  01913:    	rol    rdi,0x3d
  01917:    	movq   xmm13,rdi
  0191c:    	jmp    0x1934
  01921:    	call   0xfffdcec8
  01926:    	test   rax,rax
  01929:    	je     0x2eaba
  0192f:    	movq   xmm13,xmm0
  01934: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  0193b: 00 	test   rdi,0x1
  01942:    	jne    0x2eb33
  01948: 00 	test   rdi,0x2
  0194f:    	je     0x198c
  01955:    	xorps  xmm14,xmm14
  01959: 00 	movabs rax,0x8000000000000002
  01963:    	cmp    rdi,rax
  01966:    	je     0x199f
  0196c:    	mov    rax,rdi
  0196f:    	sar    rax,0x3f
  01973:    	add    rax,0x2
  01977:    	and    rdi,0xfffffffffffffffc
  0197b:    	or     rdi,rax
  0197e:    	rol    rdi,0x3d
  01982:    	movq   xmm14,rdi
  01987:    	jmp    0x199f
  0198c:    	call   0xfffdcec8
  01991:    	test   rax,rax
  01994:    	je     0x2eb33
  0199a:    	movq   xmm14,xmm0
  0199f:    	addsd  xmm13,xmm14
:00119 _ = %14.call x=(%15; 1)              [Vec]
  019a4:    	movq   xmm0,xmm13
  019a9:    	call   0xfffdcfec
  019ae: ff 	mov    QWORD PTR [r14-0xa8],rax
  019b5: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  019bc: 00 	test   rdi,0x7
  019c3:    	jne    0x2ebac
  019c9:    	cmp    DWORD PTR [rdi+0x4],0x28
  019cd:    	jne    0x2ebac
  019d3: 26 	cmp    DWORD PTR [rip+0xfffffffffffde817],0x26        # 0xfffe01f1
  019da:    	jne    0x2ebac
  019e0:    	mov    esi,DWORD PTR [rip+0xaea]        # 0x24d0
  019e6:    	cmp    esi,0xffffffff
  019e9:    	je     0x2ec25
  019ef:    	cmp    WORD PTR [rdi+0x2],0x3
  019f4:    	jne    0x1a14
  019fa:    	cmp    esi,0x6
  019fd:    	jge    0x1a14
  01a03: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a0a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01a0f:    	jmp    0x1aea
  01a14:    	sub    rsp,0x70
  01a18:    	movq   QWORD PTR [rsp],xmm2
  01a1d:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a23:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a29:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a2f:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a35:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a3b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a42: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a49: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a50: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a57: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a5e: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01a65: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01a6c: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01a73: f6 	movabs rax,0x55f67a69e3e0
  01a7d:    	call   rax
  01a7f:    	movq   xmm2,QWORD PTR [rsp]
  01a84:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a8a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a90:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a96:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a9c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01aa2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01aa9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ab0: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ab7: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01abe: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ac5: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01acc: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01ad3:    	add    rsp,0x70
  01ad7: f6 	movabs r13,0x55f67b8587d0
  01ae1:    	test   rax,rax
  01ae4:    	je     0xfffdce6f
:00120 
:00122 %14 = dynvar(2, %2)
  01aea:    	mov    rax,QWORD PTR [rbp-0x18]
  01aee:    	mov    rax,QWORD PTR [rax]
  01af1:    	mov    rax,QWORD PTR [rax-0x28]
  01af5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00123 %16 = dynvar(2, %2)
  01afc:    	mov    rax,QWORD PTR [rbp-0x18]
  01b00:    	mov    rax,QWORD PTR [rax]
  01b03:    	mov    rax,QWORD PTR [rax-0x28]
  01b07: ff 	mov    QWORD PTR [r14-0xb0],rax
:00124 %15 = %16.call y()                   [Vec]
  01b0e: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01b15: 00 	test   rdi,0x7
  01b1c:    	jne    0x2ed08
  01b22:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b26:    	jne    0x2ed08
  01b2c: 26 	cmp    DWORD PTR [rip+0xfffffffffffde6be],0x26        # 0xfffe01f1
  01b33:    	jne    0x2ed08
  01b39:    	mov    esi,DWORD PTR [rip+0x999]        # 0x24d8
  01b3f:    	cmp    esi,0xffffffff
  01b42:    	je     0x2ed81
  01b48:    	cmp    WORD PTR [rdi+0x2],0x3
  01b4d:    	jne    0x1b66
  01b53:    	cmp    esi,0x6
  01b56:    	jge    0x1b66
  01b5c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b61:    	jmp    0x1c06
  01b66:    	sub    rsp,0x60
  01b6a:    	movq   QWORD PTR [rsp],xmm2
  01b6f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b75:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b7b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b81:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b87:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b8d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b94: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b9b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ba2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ba9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01bb0: f6 	movabs rax,0x55f67a69e160
  01bba:    	call   rax
  01bbc:    	movq   xmm2,QWORD PTR [rsp]
  01bc1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01bc7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01bcd:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bd3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bd9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bdf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01be6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01bed: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01bf4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01bfb: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c02:    	add    rsp,0x60
  01c06: ff 	mov    QWORD PTR [r14-0xa8],rax
:00125 
:00127 %16 = %13.call y()                   [Vec]
  01c0d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c14: 00 	test   rdi,0x7
  01c1b:    	jne    0x2ee3e
  01c21:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c25:    	jne    0x2ee3e
  01c2b: 26 	cmp    DWORD PTR [rip+0xfffffffffffde5bf],0x26        # 0xfffe01f1
  01c32:    	jne    0x2ee3e
  01c38:    	mov    esi,DWORD PTR [rip+0x8a2]        # 0x24e0
  01c3e:    	cmp    esi,0xffffffff
  01c41:    	je     0x2eeb7
  01c47:    	cmp    WORD PTR [rdi+0x2],0x3
  01c4c:    	jne    0x1c65
  01c52:    	cmp    esi,0x6
  01c55:    	jge    0x1c65
  01c5b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01c60:    	jmp    0x1d05
  01c65:    	sub    rsp,0x60
  01c69:    	movq   QWORD PTR [rsp],xmm2
  01c6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c74:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c80:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c86:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c8c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c93: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c9a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ca1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ca8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01caf: f6 	movabs rax,0x55f67a69e160
  01cb9:    	call   rax
  01cbb:    	movq   xmm2,QWORD PTR [rsp]
  01cc0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cc6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ccc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01cd2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cd8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01cde: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01ce5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01cec: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01cf3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01cfa: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d01:    	add    rsp,0x60
  01d05: ff 	mov    QWORD PTR [r14-0xb0],rax
:00128 
:00130 %15 = %15 + %16                      [Float][Float]
  01d0c: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01d13: 00 	test   rdi,0x1
  01d1a:    	jne    0x2ef74
  01d20: 00 	test   rdi,0x2
  01d27:    	je     0x1d64
  01d2d:    	xorps  xmm13,xmm13
  01d31: 00 	movabs rax,0x8000000000000002
  01d3b:    	cmp    rdi,rax
  01d3e:    	je     0x1d77
  01d44:    	mov    rax,rdi
  01d47:    	sar    rax,0x3f
  01d4b:    	add    rax,0x2
  01d4f:    	and    rdi,0xfffffffffffffffc
  01d53:    	or     rdi,rax
  01d56:    	rol    rdi,0x3d
  01d5a:    	movq   xmm13,rdi
  01d5f:    	jmp    0x1d77
  01d64:    	call   0xfffdcec8
  01d69:    	test   rax,rax
  01d6c:    	je     0x2ef74
  01d72:    	movq   xmm13,xmm0
  01d77: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01d7e: 00 	test   rdi,0x1
  01d85:    	jne    0x2efed
  01d8b: 00 	test   rdi,0x2
  01d92:    	je     0x1dcf
  01d98:    	xorps  xmm14,xmm14
  01d9c: 00 	movabs rax,0x8000000000000002
  01da6:    	cmp    rdi,rax
  01da9:    	je     0x1de2
  01daf:    	mov    rax,rdi
  01db2:    	sar    rax,0x3f
  01db6:    	add    rax,0x2
  01dba:    	and    rdi,0xfffffffffffffffc
  01dbe:    	or     rdi,rax
  01dc1:    	rol    rdi,0x3d
  01dc5:    	movq   xmm14,rdi
  01dca:    	jmp    0x1de2
  01dcf:    	call   0xfffdcec8
  01dd4:    	test   rax,rax
  01dd7:    	je     0x2efed
  01ddd:    	movq   xmm14,xmm0
  01de2:    	addsd  xmm13,xmm14
:00131 _ = %14.call y=(%15; 1)              [Vec]
  01de7:    	movq   xmm0,xmm13
  01dec:    	call   0xfffdcfec
  01df1: ff 	mov    QWORD PTR [r14-0xa8],rax
  01df8: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01dff: 00 	test   rdi,0x7
  01e06:    	jne    0x2f066
  01e0c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01e10:    	jne    0x2f066
  01e16: 26 	cmp    DWORD PTR [rip+0xfffffffffffde3d4],0x26        # 0xfffe01f1
  01e1d:    	jne    0x2f066
  01e23:    	mov    esi,DWORD PTR [rip+0x6bf]        # 0x24e8
  01e29:    	cmp    esi,0xffffffff
  01e2c:    	je     0x2f0df
  01e32:    	cmp    WORD PTR [rdi+0x2],0x3
  01e37:    	jne    0x1e57
  01e3d:    	cmp    esi,0x6
  01e40:    	jge    0x1e57
  01e46: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e4d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01e52:    	jmp    0x1f2d
  01e57:    	sub    rsp,0x70
  01e5b:    	movq   QWORD PTR [rsp],xmm2
  01e60:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e66:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e6c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e72:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e78:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e7e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e85: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e8c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e93: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e9a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ea1: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01ea8: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01eaf: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01eb6: f6 	movabs rax,0x55f67a69e3e0
  01ec0:    	call   rax
  01ec2:    	movq   xmm2,QWORD PTR [rsp]
  01ec7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ecd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ed3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ed9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01edf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01ee5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01eec: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ef3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01efa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f01: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f08: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01f0f: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01f16:    	add    rsp,0x70
  01f1a: f6 	movabs r13,0x55f67b858890
  01f24:    	test   rax,rax
  01f27:    	je     0xfffdce6f
:00132 
:00134 %14 = dynvar(2, %2)
  01f2d:    	mov    rax,QWORD PTR [rbp-0x18]
  01f31:    	mov    rax,QWORD PTR [rax]
  01f34:    	mov    rax,QWORD PTR [rax-0x28]
  01f38: ff 	mov    QWORD PTR [r14-0xa0],rax
:00135 %16 = dynvar(2, %2)
  01f3f:    	mov    rax,QWORD PTR [rbp-0x18]
  01f43:    	mov    rax,QWORD PTR [rax]
  01f46:    	mov    rax,QWORD PTR [rax-0x28]
  01f4a: ff 	mov    QWORD PTR [r14-0xb0],rax
:00136 %15 = %16.call z()                   [Vec]
  01f51: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01f58: 00 	test   rdi,0x7
  01f5f:    	jne    0x2f1c2
  01f65:    	cmp    DWORD PTR [rdi+0x4],0x28
  01f69:    	jne    0x2f1c2
  01f6f: 26 	cmp    DWORD PTR [rip+0xfffffffffffde27b],0x26        # 0xfffe01f1
  01f76:    	jne    0x2f1c2
  01f7c:    	mov    esi,DWORD PTR [rip+0x56e]        # 0x24f0
  01f82:    	cmp    esi,0xffffffff
  01f85:    	je     0x2f23b
  01f8b:    	cmp    WORD PTR [rdi+0x2],0x3
  01f90:    	jne    0x1fa9
  01f96:    	cmp    esi,0x6
  01f99:    	jge    0x1fa9
  01f9f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01fa4:    	jmp    0x2049
  01fa9:    	sub    rsp,0x60
  01fad:    	movq   QWORD PTR [rsp],xmm2
  01fb2:    	movq   QWORD PTR [rsp+0x8],xmm3
  01fb8:    	movq   QWORD PTR [rsp+0x10],xmm4
  01fbe:    	movq   QWORD PTR [rsp+0x18],xmm5
  01fc4:    	movq   QWORD PTR [rsp+0x20],xmm6
  01fca:    	movq   QWORD PTR [rsp+0x28],xmm7
  01fd0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01fd7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01fde: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01fe5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01fec: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ff3: f6 	movabs rax,0x55f67a69e160
  01ffd:    	call   rax
  01fff:    	movq   xmm2,QWORD PTR [rsp]
  02004:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0200a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02010:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02016:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0201c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02022: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02029: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02030: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02037: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0203e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02045:    	add    rsp,0x60
  02049: ff 	mov    QWORD PTR [r14-0xa8],rax
:00137 
:00139 %16 = %13.call z()                   [Vec]
  02050: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02057: 00 	test   rdi,0x7
  0205e:    	jne    0x2f2f8
  02064:    	cmp    DWORD PTR [rdi+0x4],0x28
  02068:    	jne    0x2f2f8
  0206e: 26 	cmp    DWORD PTR [rip+0xfffffffffffde17c],0x26        # 0xfffe01f1
  02075:    	jne    0x2f2f8
  0207b:    	mov    esi,DWORD PTR [rip+0x477]        # 0x24f8
  02081:    	cmp    esi,0xffffffff
  02084:    	je     0x2f371
  0208a:    	cmp    WORD PTR [rdi+0x2],0x3
  0208f:    	jne    0x20a8
  02095:    	cmp    esi,0x6
  02098:    	jge    0x20a8
  0209e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  020a3:    	jmp    0x2148
  020a8:    	sub    rsp,0x60
  020ac:    	movq   QWORD PTR [rsp],xmm2
  020b1:    	movq   QWORD PTR [rsp+0x8],xmm3
  020b7:    	movq   QWORD PTR [rsp+0x10],xmm4
  020bd:    	movq   QWORD PTR [rsp+0x18],xmm5
  020c3:    	movq   QWORD PTR [rsp+0x20],xmm6
  020c9:    	movq   QWORD PTR [rsp+0x28],xmm7
  020cf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  020d6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  020dd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  020e4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  020eb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  020f2: f6 	movabs rax,0x55f67a69e160
  020fc:    	call   rax
  020fe:    	movq   xmm2,QWORD PTR [rsp]
  02103:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02109:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0210f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02115:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0211b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02121: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02128: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0212f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02136: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0213d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02144:    	add    rsp,0x60
  02148: ff 	mov    QWORD PTR [r14-0xb0],rax
:00140 
:00142 %15 = %15 + %16                      [Float][Float]
  0214f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  02156: 00 	test   rdi,0x1
  0215d:    	jne    0x2f42e
  02163: 00 	test   rdi,0x2
  0216a:    	je     0x21a7
  02170:    	xorps  xmm13,xmm13
  02174: 00 	movabs rax,0x8000000000000002
  0217e:    	cmp    rdi,rax
  02181:    	je     0x21ba
  02187:    	mov    rax,rdi
  0218a:    	sar    rax,0x3f
  0218e:    	add    rax,0x2
  02192:    	and    rdi,0xfffffffffffffffc
  02196:    	or     rdi,rax
  02199:    	rol    rdi,0x3d
  0219d:    	movq   xmm13,rdi
  021a2:    	jmp    0x21ba
  021a7:    	call   0xfffdcec8
  021ac:    	test   rax,rax
  021af:    	je     0x2f42e
  021b5:    	movq   xmm13,xmm0
  021ba: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  021c1: 00 	test   rdi,0x1
  021c8:    	jne    0x2f4a7
  021ce: 00 	test   rdi,0x2
  021d5:    	je     0x2212
  021db:    	xorps  xmm14,xmm14
  021df: 00 	movabs rax,0x8000000000000002
  021e9:    	cmp    rdi,rax
  021ec:    	je     0x2225
  021f2:    	mov    rax,rdi
  021f5:    	sar    rax,0x3f
  021f9:    	add    rax,0x2
  021fd:    	and    rdi,0xfffffffffffffffc
  02201:    	or     rdi,rax
  02204:    	rol    rdi,0x3d
  02208:    	movq   xmm14,rdi
  0220d:    	jmp    0x2225
  02212:    	call   0xfffdcec8
  02217:    	test   rax,rax
  0221a:    	je     0x2f4a7
  02220:    	movq   xmm14,xmm0
  02225:    	addsd  xmm13,xmm14
:00143 _ = %14.call z=(%15; 1)              [Vec]
  0222a:    	movq   xmm0,xmm13
  0222f:    	call   0xfffdcfec
  02234: ff 	mov    QWORD PTR [r14-0xa8],rax
  0223b: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  02242: 00 	test   rdi,0x7
  02249:    	jne    0x2f520
  0224f:    	cmp    DWORD PTR [rdi+0x4],0x28
  02253:    	jne    0x2f520
  02259: 26 	cmp    DWORD PTR [rip+0xfffffffffffddf91],0x26        # 0xfffe01f1
  02260:    	jne    0x2f520
  02266:    	mov    esi,DWORD PTR [rip+0x294]        # 0x2500
  0226c:    	cmp    esi,0xffffffff
  0226f:    	je     0x2f599
  02275:    	cmp    WORD PTR [rdi+0x2],0x3
  0227a:    	jne    0x229a
  02280:    	cmp    esi,0x6
  02283:    	jge    0x229a
  02289: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02290:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  02295:    	jmp    0x2370
  0229a:    	sub    rsp,0x70
  0229e:    	movq   QWORD PTR [rsp],xmm2
  022a3:    	movq   QWORD PTR [rsp+0x8],xmm3
  022a9:    	movq   QWORD PTR [rsp+0x10],xmm4
  022af:    	movq   QWORD PTR [rsp+0x18],xmm5
  022b5:    	movq   QWORD PTR [rsp+0x20],xmm6
  022bb:    	movq   QWORD PTR [rsp+0x28],xmm7
  022c1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  022c8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  022cf: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  022d6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  022dd: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  022e4: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  022eb: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  022f2: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  022f9: f6 	movabs rax,0x55f67a69e3e0
  02303:    	call   rax
  02305:    	movq   xmm2,QWORD PTR [rsp]
  0230a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02310:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02316:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0231c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02322:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02328: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0232f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02336: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0233d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02344: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0234b: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  02352: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  02359:    	add    rsp,0x70
  0235d: f6 	movabs r13,0x55f67b858950
  02367:    	test   rax,rax
  0236a:    	je     0xfffdce6f
:00144 
:00146 %14 = %15
:00147 ret %14
  02370:    	movq   xmm0,xmm13
  02375:    	call   0xfffdcfec
  0237a: ff 	mov    QWORD PTR [r14-0xa0],rax
  02381: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02388:    	leave  
  02389:    	ret    
:00148 %14 = nil
  0238a: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00149 ret %14
  02395: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0239c:    	leave  
  0239d:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55f67b86e960
<== finished compile. elapsed:139.2µs
offset:Pos(153288) code: 6469 bytes  data: 259 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2d178
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x2d187
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x2d187
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x2d196
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x2d196
  00097: 26 	cmp    DWORD PTR [rip+0xfffffffffffddc4f],0x26        # 0xfffddced
  0009e:    	jne    0x2d196
  000a4:    	mov    esi,DWORD PTR [rip+0x189f]        # 0x1949
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x2d1a5
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: f6 	movabs rax,0x55f67a69e160
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x2d1ce
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x2d1ce
  00108: 26 	cmp    DWORD PTR [rip+0xfffffffffffddbde],0x26        # 0xfffddced
  0010f:    	jne    0x2d1ce
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	lea    r8,[rsp-0x48]
  00133:    	mov    rax,QWORD PTR [r14-0x80]
  00137:    	mov    QWORD PTR [r8],rax
  0013a:    	sub    r8,0x8
  0013e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00147: 08 	movabs rax,0x800000040
  00151:    	mov    QWORD PTR [rsp-0x30],rax
  00156: f6 	movabs r13,0x55f67b855f60
  00160:    	mov    rsi,QWORD PTR [rbx]
  00163:    	mov    QWORD PTR [rsp-0x18],rsi
  00168:    	lea    rsi,[rsp-0x18]
  0016d:    	mov    QWORD PTR [rbx],rsi
  00170:    	lea    r14,[rsp-0x10]
  00175:    	mov    QWORD PTR [rsp-0x20],r14
  0017a:    	call   0xfffde98e
  0017f:    	lea    r14,[rbp-0x8]
  00183:    	mov    QWORD PTR [rbx],r14
  00186:    	mov    r14,QWORD PTR [rbp-0x10]
  0018a: f6 	movabs r13,0x55f67b86e9d0
  00194:    	test   rax,rax
  00197:    	je     0xfffda96b
  0019d:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001a1:    	mov    rdi,QWORD PTR [r14-0x38]
  001a5: 00 	test   rdi,0x7
  001ac:    	jne    0x2d1dd
  001b2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b6:    	jne    0x2d1dd
  001bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffddb2a],0x26        # 0xfffddced
  001c3:    	jne    0x2d1dd
  001c9:    	mov    esi,DWORD PTR [rip+0x1782]        # 0x1951
  001cf:    	cmp    esi,0xffffffff
  001d2:    	je     0x2d1ec
  001d8:    	cmp    WORD PTR [rdi+0x2],0x3
  001dd:    	jne    0x1f6
  001e3:    	cmp    esi,0x6
  001e6:    	jge    0x1f6
  001ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f1:    	jmp    0x202
  001f6: f6 	movabs rax,0x55f67a69e160
  00200:    	call   rax
  00202:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  00206:    	mov    rdi,QWORD PTR [r14-0x48]
  0020a: 00 	test   rdi,0x7
  00211:    	jne    0x2d215
  00217:    	cmp    DWORD PTR [rdi+0x4],0x28
  0021b:    	jne    0x2d215
  00221: 26 	cmp    DWORD PTR [rip+0xfffffffffffddac5],0x26        # 0xfffddced
  00228:    	jne    0x2d215
  0022e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00237:    	mov    rax,QWORD PTR [r14-0x48]
  0023b:    	mov    QWORD PTR [rsp-0x40],rax
  00240: 00 	mov    rdi,0x1
  00247:    	lea    r8,[rsp-0x48]
  0024c:    	mov    rax,QWORD PTR [r14-0x78]
  00250:    	mov    QWORD PTR [r8],rax
  00253:    	sub    r8,0x8
  00257: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00260: 05 	movabs rax,0x500000042
  0026a:    	mov    QWORD PTR [rsp-0x30],rax
  0026f: f6 	movabs r13,0x55f67b88de50
  00279:    	mov    rsi,QWORD PTR [rbx]
  0027c:    	mov    QWORD PTR [rsp-0x18],rsi
  00281:    	lea    rsi,[rsp-0x18]
  00286:    	mov    QWORD PTR [rbx],rsi
  00289:    	lea    r14,[rsp-0x10]
  0028e:    	mov    QWORD PTR [rsp-0x20],r14
  00293:    	call   0xfffdea20
  00298:    	lea    r14,[rbp-0x8]
  0029c:    	mov    QWORD PTR [rbx],r14
  0029f:    	mov    r14,QWORD PTR [rbp-0x10]
  002a3: f6 	movabs r13,0x55f67b86ea30
  002ad:    	test   rax,rax
  002b0:    	je     0xfffda96b
  002b6:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ba:    	mov    rax,QWORD PTR [r14-0x48]
  002be:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002c2:    	mov    rdi,QWORD PTR [r14-0x48]
  002c6: 00 	test   rdi,0x7
  002cd:    	jne    0x2d224
  002d3:    	cmp    DWORD PTR [rdi+0x4],0x28
  002d7:    	jne    0x2d224
  002dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffdda09],0x26        # 0xfffddced
  002e4:    	jne    0x2d224
  002ea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002f3:    	mov    rax,QWORD PTR [r14-0x48]
  002f7:    	mov    QWORD PTR [rsp-0x40],rax
  002fc: 00 	mov    rdi,0x1
  00303:    	lea    r8,[rsp-0x48]
  00308:    	mov    rax,QWORD PTR [r14-0x80]
  0030c:    	mov    QWORD PTR [r8],rax
  0030f:    	sub    r8,0x8
  00313: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0031c: 05 	movabs rax,0x500000042
  00326:    	mov    QWORD PTR [rsp-0x30],rax
  0032b: f6 	movabs r13,0x55f67b88de50
  00335:    	mov    rsi,QWORD PTR [rbx]
  00338:    	mov    QWORD PTR [rsp-0x18],rsi
  0033d:    	lea    rsi,[rsp-0x18]
  00342:    	mov    QWORD PTR [rbx],rsi
  00345:    	lea    r14,[rsp-0x10]
  0034a:    	mov    QWORD PTR [rsp-0x20],r14
  0034f:    	call   0xfffdea20
  00354:    	lea    r14,[rbp-0x8]
  00358:    	mov    QWORD PTR [rbx],r14
  0035b:    	mov    r14,QWORD PTR [rbp-0x10]
  0035f: f6 	movabs r13,0x55f67b86ea70
  00369:    	test   rax,rax
  0036c:    	je     0xfffda96b
  00372:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00376:    	mov    rdi,QWORD PTR [rbp-0x30]
  0037a:    	mov    rax,QWORD PTR [rdi+0x18]
  0037e:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00382:    	mov    rdi,QWORD PTR [rbp-0x30]
  00386:    	mov    rax,QWORD PTR [rdi+0x18]
  0038a: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00391:    	mov    rdi,QWORD PTR [r14-0x80]
  00395: 00 	test   rdi,0x1
  0039c:    	jne    0x2d233
  003a2: 00 	test   rdi,0x2
  003a9:    	je     0x3e5
  003af:    	xorps  xmm2,xmm2
  003b2: 00 	movabs rax,0x8000000000000002
  003bc:    	cmp    rdi,rax
  003bf:    	je     0x3f7
  003c5:    	mov    rax,rdi
  003c8:    	sar    rax,0x3f
  003cc:    	add    rax,0x2
  003d0:    	and    rdi,0xfffffffffffffffc
  003d4:    	or     rdi,rax
  003d7:    	rol    rdi,0x3d
  003db:    	movq   xmm2,rdi
  003e0:    	jmp    0x3f7
  003e5:    	call   0xfffda9c4
  003ea:    	test   rax,rax
  003ed:    	je     0x2d233
  003f3:    	movq   xmm2,xmm0
  003f7: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003fe: 00 	test   rdi,0x1
  00405:    	jne    0x2d242
  0040b: 00 	test   rdi,0x2
  00412:    	je     0x44e
  00418:    	xorps  xmm3,xmm3
  0041b: 00 	movabs rax,0x8000000000000002
  00425:    	cmp    rdi,rax
  00428:    	je     0x460
  0042e:    	mov    rax,rdi
  00431:    	sar    rax,0x3f
  00435:    	add    rax,0x2
  00439:    	and    rdi,0xfffffffffffffffc
  0043d:    	or     rdi,rax
  00440:    	rol    rdi,0x3d
  00444:    	movq   xmm3,rdi
  00449:    	jmp    0x460
  0044e:    	call   0xfffda9c4
  00453:    	test   rax,rax
  00456:    	je     0x2d242
  0045c:    	movq   xmm3,xmm0
  00460:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00464:    	mov    rdi,QWORD PTR [r14-0x78]
  00468: 00 	test   rdi,0x1
  0046f:    	jne    0x2d251
  00475: 00 	test   rdi,0x2
  0047c:    	je     0x4b8
  00482:    	xorps  xmm4,xmm4
  00485: 00 	movabs rax,0x8000000000000002
  0048f:    	cmp    rdi,rax
  00492:    	je     0x4ca
  00498:    	mov    rax,rdi
  0049b:    	sar    rax,0x3f
  0049f:    	add    rax,0x2
  004a3:    	and    rdi,0xfffffffffffffffc
  004a7:    	or     rdi,rax
  004aa:    	rol    rdi,0x3d
  004ae:    	movq   xmm4,rdi
  004b3:    	jmp    0x4ca
  004b8:    	call   0xfffda9c4
  004bd:    	test   rax,rax
  004c0:    	je     0x2d251
  004c6:    	movq   xmm4,xmm0
  004ca:    	movq   xmm5,xmm4
  004ce:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004d2:    	mov    rdi,QWORD PTR [r14-0x50]
  004d6: 00 	test   rdi,0x1
  004dd:    	jne    0x2d26d
  004e3: 00 	test   rdi,0x2
  004ea:    	je     0x526
  004f0:    	xorps  xmm6,xmm6
  004f3: 00 	movabs rax,0x8000000000000002
  004fd:    	cmp    rdi,rax
  00500:    	je     0x538
  00506:    	mov    rax,rdi
  00509:    	sar    rax,0x3f
  0050d:    	add    rax,0x2
  00511:    	and    rdi,0xfffffffffffffffc
  00515:    	or     rdi,rax
  00518:    	rol    rdi,0x3d
  0051c:    	movq   xmm6,rdi
  00521:    	jmp    0x538
  00526:    	call   0xfffda9c4
  0052b:    	test   rax,rax
  0052e:    	je     0x2d26d
  00534:    	movq   xmm6,xmm0
  00538:    	movq   xmm4,xmm6
  0053c:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  00540:    	movq   xmm7,xmm4
  00544:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00548: 00 	movq   xmm4,QWORD PTR [rip+0x1408]        # 0x1958
  00550: 00 	movabs rax,0x8000000000000002
  0055a:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0055e:    	ucomisd xmm7,xmm4
  00562:    	jbe    0x2e415
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00568:    	movq   xmm4,xmm6
  0056c: 00 	xorps  xmm4,XMMWORD PTR [rip+0x13f5]        # 0x1968
:00029 %11 = const[Math]                    [Math]
  00573: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdd77e]        # 0xfffddcf8
  0057a: 00 	cmp    rax,QWORD PTR [rip+0x1407]        # 0x1988
  00581:    	jne    0x2d296
  00587: 00 	mov    rax,QWORD PTR [rip+0x13ea]        # 0x1978
  0058e: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00595: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0059c: 00 	test   rdi,0x7
  005a3:    	jne    0x2d31e
  005a9:    	cmp    DWORD PTR [rdi+0x4],0x21
  005ad:    	jne    0x2d31e
  005b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd733],0x26        # 0xfffddced
  005ba:    	jne    0x2d31e
  005c0:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005c4:    	movq   xmm3,xmm4
  005c8:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005cc: 00 	movq   xmm4,QWORD PTR [rip+0x13c4]        # 0x1998
  005d4: 00 	movabs rax,0x8000000000000002
  005de:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e2:    	ucomisd xmm3,xmm4
  005e6:    	jbe    0x2e316
:00038 %9 = %2.call t()                     [Isect]
  005ec:    	mov    rdi,QWORD PTR [r14-0x40]
  005f0: 00 	test   rdi,0x7
  005f7:    	jne    0x2d35b
  005fd:    	cmp    DWORD PTR [rdi+0x4],0x30
  00601:    	jne    0x2d35b
  00607: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd6df],0x26        # 0xfffddced
  0060e:    	jne    0x2d35b
  00614:    	mov    esi,DWORD PTR [rip+0x138a]        # 0x19a4
  0061a:    	cmp    esi,0xffffffff
  0061d:    	je     0x2d3a5
  00623:    	cmp    WORD PTR [rdi+0x2],0x3
  00628:    	jne    0x641
  0062e:    	cmp    esi,0x6
  00631:    	jge    0x641
  00637:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0063c:    	jmp    0x68f
  00641:    	sub    rsp,0x30
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm5
  00656:    	movq   QWORD PTR [rsp+0x18],xmm6
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00662: f6 	movabs rax,0x55f67a69e160
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00685:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0068b:    	add    rsp,0x30
  0068f:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00693:    	movq   xmm0,xmm3
  00697:    	call   0xfffdaae8
  0069c:    	mov    QWORD PTR [r14-0x68],rax
  006a0:    	mov    rdi,QWORD PTR [r14-0x68]
  006a4:    	mov    rsi,QWORD PTR [r14-0x78]
  006a8: 00 	test   rdi,0x1
  006af:    	je     0x2d410
  006b5: 00 	test   rsi,0x1
  006bc:    	je     0x2d410
  006c2:    	cmp    rdi,rsi
  006c5:    	jge    0x2e373
:00043 _ = %2.call t=(%7; 1)                [Isect]
  006cb:    	mov    rdi,QWORD PTR [r14-0x40]
  006cf: 00 	test   rdi,0x7
  006d6:    	jne    0x2d471
  006dc:    	cmp    DWORD PTR [rdi+0x4],0x30
  006e0:    	jne    0x2d471
  006e6: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd600],0x26        # 0xfffddced
  006ed:    	jne    0x2d471
  006f3:    	mov    esi,DWORD PTR [rip+0x12b3]        # 0x19ac
  006f9:    	cmp    esi,0xffffffff
  006fc:    	je     0x2d4ae
  00702:    	cmp    WORD PTR [rdi+0x2],0x3
  00707:    	jne    0x724
  0070d:    	cmp    esi,0x6
  00710:    	jge    0x724
  00716:    	mov    rax,QWORD PTR [r14-0x68]
  0071a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071f:    	jmp    0x789
  00724:    	sub    rsp,0x30
  00728:    	movq   QWORD PTR [rsp],xmm2
  0072d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00733:    	movq   QWORD PTR [rsp+0x10],xmm5
  00739:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00745:    	mov    rdx,QWORD PTR [r14-0x68]
  00749: f6 	movabs rax,0x55f67a69e3e0
  00753:    	call   rax
  00755:    	movq   xmm2,QWORD PTR [rsp]
  0075a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00760:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00766:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0076c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00772:    	add    rsp,0x30
  00776: f6 	movabs r13,0x55f67b86ec30
  00780:    	test   rax,rax
  00783:    	je     0xfffda96b
:00044 
:00046 %9 = literal[true]
  00789: 00 	mov    rax,0x1c
  00790:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  00794:    	mov    rdi,QWORD PTR [r14-0x40]
  00798: 00 	test   rdi,0x7
  0079f:    	jne    0x2d520
  007a5:    	cmp    DWORD PTR [rdi+0x4],0x30
  007a9:    	jne    0x2d520
  007af: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd537],0x26        # 0xfffddced
  007b6:    	jne    0x2d520
  007bc:    	mov    esi,DWORD PTR [rip+0x11f2]        # 0x19b4
  007c2:    	cmp    esi,0xffffffff
  007c5:    	je     0x2d55d
  007cb:    	cmp    WORD PTR [rdi+0x2],0x3
  007d0:    	jne    0x7ed
  007d6:    	cmp    esi,0x6
  007d9:    	jge    0x7ed
  007df:    	mov    rax,QWORD PTR [r14-0x78]
  007e3:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007e8:    	jmp    0x852
  007ed:    	sub    rsp,0x30
  007f1:    	movq   QWORD PTR [rsp],xmm2
  007f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  007fc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00802:    	movq   QWORD PTR [rsp+0x18],xmm6
  00808:    	movq   QWORD PTR [rsp+0x20],xmm7
  0080e:    	mov    rdx,QWORD PTR [r14-0x78]
  00812: f6 	movabs rax,0x55f67a69e3e0
  0081c:    	call   rax
  0081e:    	movq   xmm2,QWORD PTR [rsp]
  00823:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00829:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0082f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00835:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0083b:    	add    rsp,0x30
  0083f: f6 	movabs r13,0x55f67b86ec70
  00849:    	test   rax,rax
  0084c:    	je     0xfffda96b
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00852: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdd49f]        # 0xfffddcf8
  00859: 00 	cmp    rax,QWORD PTR [rip+0x1168]        # 0x19c8
  00860:    	jne    0x2d5cf
  00866: 00 	mov    rax,QWORD PTR [rip+0x114b]        # 0x19b8
  0086d:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [Ray]
  00871:    	mov    rdi,QWORD PTR [r14-0x38]
  00875: 00 	test   rdi,0x7
  0087c:    	jne    0x2d64b
  00882:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00886:    	jne    0x2d64b
  0088c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd45a],0x26        # 0xfffddced
  00893:    	jne    0x2d64b
  00899:    	mov    esi,DWORD PTR [rip+0x1135]        # 0x19d4
  0089f:    	cmp    esi,0xffffffff
  008a2:    	je     0x2d674
  008a8:    	cmp    WORD PTR [rdi+0x2],0x3
  008ad:    	jne    0x8c6
  008b3:    	cmp    esi,0x6
  008b6:    	jge    0x8c6
  008bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008c1:    	jmp    0x908
  008c6:    	sub    rsp,0x20
  008ca:    	movq   QWORD PTR [rsp],xmm3
  008cf:    	movq   QWORD PTR [rsp+0x8],xmm5
  008d5:    	movq   QWORD PTR [rsp+0x10],xmm6
  008db:    	movq   QWORD PTR [rsp+0x18],xmm7
  008e1: f6 	movabs rax,0x55f67a69e160
  008eb:    	call   rax
  008ed:    	movq   xmm3,QWORD PTR [rsp]
  008f2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  008f8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  008fe:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00904:    	add    rsp,0x20
  00908: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  0090f: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00916: 00 	test   rdi,0x7
  0091d:    	jne    0x2d6d3
  00923:    	cmp    DWORD PTR [rdi+0x4],0x28
  00927:    	jne    0x2d6d3
  0092d: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd3b9],0x26        # 0xfffddced
  00934:    	jne    0x2d6d3
  0093a:    	mov    esi,DWORD PTR [rip+0x109c]        # 0x19dc
  00940:    	cmp    esi,0xffffffff
  00943:    	je     0x2d6fc
  00949:    	cmp    WORD PTR [rdi+0x2],0x3
  0094e:    	jne    0x967
  00954:    	cmp    esi,0x6
  00957:    	jge    0x967
  0095d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00962:    	jmp    0x9a9
  00967:    	sub    rsp,0x20
  0096b:    	movq   QWORD PTR [rsp],xmm3
  00970:    	movq   QWORD PTR [rsp+0x8],xmm5
  00976:    	movq   QWORD PTR [rsp+0x10],xmm6
  0097c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00982: f6 	movabs rax,0x55f67a69e160
  0098c:    	call   rax
  0098e:    	movq   xmm3,QWORD PTR [rsp]
  00993:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00999:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0099f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009a5:    	add    rsp,0x20
  009a9: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  009b0:    	mov    rdi,QWORD PTR [r14-0x38]
  009b4: 00 	test   rdi,0x7
  009bb:    	jne    0x2d75b
  009c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009c5:    	jne    0x2d75b
  009cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd31b],0x26        # 0xfffddced
  009d2:    	jne    0x2d75b
  009d8:    	mov    esi,DWORD PTR [rip+0x1006]        # 0x19e4
  009de:    	cmp    esi,0xffffffff
  009e1:    	je     0x2d784
  009e7:    	cmp    WORD PTR [rdi+0x2],0x3
  009ec:    	jne    0xa05
  009f2:    	cmp    esi,0x6
  009f5:    	jge    0xa05
  009fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a00:    	jmp    0xa47
  00a05:    	sub    rsp,0x20
  00a09:    	movq   QWORD PTR [rsp],xmm3
  00a0e:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a14:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a1a:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a20: f6 	movabs rax,0x55f67a69e160
  00a2a:    	call   rax
  00a2c:    	movq   xmm3,QWORD PTR [rsp]
  00a31:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a37:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a3d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a43:    	add    rsp,0x20
  00a47: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00a4e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00a55: 00 	test   rdi,0x7
  00a5c:    	jne    0x2d7e3
  00a62:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a66:    	jne    0x2d7e3
  00a6c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd27a],0x26        # 0xfffddced
  00a73:    	jne    0x2d7e3
  00a79:    	mov    esi,DWORD PTR [rip+0xf6d]        # 0x19ec
  00a7f:    	cmp    esi,0xffffffff
  00a82:    	je     0x2d80c
  00a88:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8d:    	jne    0xaa6
  00a93:    	cmp    esi,0x6
  00a96:    	jge    0xaa6
  00a9c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa1:    	jmp    0xae8
  00aa6:    	sub    rsp,0x20
  00aaa:    	movq   QWORD PTR [rsp],xmm3
  00aaf:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ab5:    	movq   QWORD PTR [rsp+0x10],xmm6
  00abb:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ac1: f6 	movabs rax,0x55f67a69e160
  00acb:    	call   rax
  00acd:    	movq   xmm3,QWORD PTR [rsp]
  00ad2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ad8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ade:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ae4:    	add    rsp,0x20
  00ae8: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [Float][Float]
  00aef: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00af6: 00 	test   rdi,0x1
  00afd:    	jne    0x2d86b
  00b03: 00 	test   rdi,0x2
  00b0a:    	je     0xb46
  00b10:    	xorps  xmm2,xmm2
  00b13: 00 	movabs rax,0x8000000000000002
  00b1d:    	cmp    rdi,rax
  00b20:    	je     0xb58
  00b26:    	mov    rax,rdi
  00b29:    	sar    rax,0x3f
  00b2d:    	add    rax,0x2
  00b31:    	and    rdi,0xfffffffffffffffc
  00b35:    	or     rdi,rax
  00b38:    	rol    rdi,0x3d
  00b3c:    	movq   xmm2,rdi
  00b41:    	jmp    0xb58
  00b46:    	call   0xfffda9c4
  00b4b:    	test   rax,rax
  00b4e:    	je     0x2d86b
  00b54:    	movq   xmm2,xmm0
  00b58:    	mulsd  xmm2,xmm3
:00064 %11 = %11 + %12                      [Float][Float]
  00b5c: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b63: 00 	test   rdi,0x1
  00b6a:    	jne    0x2d894
  00b70: 00 	test   rdi,0x2
  00b77:    	je     0xbb3
  00b7d:    	xorps  xmm4,xmm4
  00b80: 00 	movabs rax,0x8000000000000002
  00b8a:    	cmp    rdi,rax
  00b8d:    	je     0xbc5
  00b93:    	mov    rax,rdi
  00b96:    	sar    rax,0x3f
  00b9a:    	add    rax,0x2
  00b9e:    	and    rdi,0xfffffffffffffffc
  00ba2:    	or     rdi,rax
  00ba5:    	rol    rdi,0x3d
  00ba9:    	movq   xmm4,rdi
  00bae:    	jmp    0xbc5
  00bb3:    	call   0xfffda9c4
  00bb8:    	test   rax,rax
  00bbb:    	je     0x2d894
  00bc1:    	movq   xmm4,xmm0
  00bc5:    	addsd  xmm4,xmm2
:00065 %13 = %1.call org()                  [Ray]
  00bc9:    	mov    rdi,QWORD PTR [r14-0x38]
  00bcd: 00 	test   rdi,0x7
  00bd4:    	jne    0x2d8cd
  00bda:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00bde:    	jne    0x2d8cd
  00be4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd102],0x26        # 0xfffddced
  00beb:    	jne    0x2d8cd
  00bf1:    	mov    esi,DWORD PTR [rip+0xdfd]        # 0x19f4
  00bf7:    	cmp    esi,0xffffffff
  00bfa:    	je     0x2d916
  00c00:    	cmp    WORD PTR [rdi+0x2],0x3
  00c05:    	jne    0xc1e
  00c0b:    	cmp    esi,0x6
  00c0e:    	jge    0xc1e
  00c14:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c19:    	jmp    0xc78
  00c1e:    	sub    rsp,0x30
  00c22:    	movq   QWORD PTR [rsp],xmm2
  00c27:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c2d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c33:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c39:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c3f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c45: f6 	movabs rax,0x55f67a69e160
  00c4f:    	call   rax
  00c51:    	movq   xmm2,QWORD PTR [rsp]
  00c56:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c5c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c62:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c68:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c6e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c74:    	add    rsp,0x30
  00c78: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00c7f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00c86: 00 	test   rdi,0x7
  00c8d:    	jne    0x2d98d
  00c93:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c97:    	jne    0x2d98d
  00c9d: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd049],0x26        # 0xfffddced
  00ca4:    	jne    0x2d98d
  00caa:    	mov    esi,DWORD PTR [rip+0xd4c]        # 0x19fc
  00cb0:    	cmp    esi,0xffffffff
  00cb3:    	je     0x2d9c6
  00cb9:    	cmp    WORD PTR [rdi+0x2],0x3
  00cbe:    	jne    0xcd7
  00cc4:    	cmp    esi,0x6
  00cc7:    	jge    0xcd7
  00ccd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cd2:    	jmp    0xd25
  00cd7:    	sub    rsp,0x30
  00cdb:    	movq   QWORD PTR [rsp],xmm3
  00ce0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cec:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf2:    	movq   QWORD PTR [rsp+0x20],xmm7
  00cf8: f6 	movabs rax,0x55f67a69e160
  00d02:    	call   rax
  00d04:    	movq   xmm3,QWORD PTR [rsp]
  00d09:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d15:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d1b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d21:    	add    rsp,0x30
  00d25: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d2c:    	mov    rdi,QWORD PTR [r14-0x38]
  00d30: 00 	test   rdi,0x7
  00d37:    	jne    0x2da31
  00d3d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d41:    	jne    0x2da31
  00d47: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcf9f],0x26        # 0xfffddced
  00d4e:    	jne    0x2da31
  00d54:    	mov    esi,DWORD PTR [rip+0xcaa]        # 0x1a04
  00d5a:    	cmp    esi,0xffffffff
  00d5d:    	je     0x2da6a
  00d63:    	cmp    WORD PTR [rdi+0x2],0x3
  00d68:    	jne    0xd81
  00d6e:    	cmp    esi,0x6
  00d71:    	jge    0xd81
  00d77:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d7c:    	jmp    0xdcf
  00d81:    	sub    rsp,0x30
  00d85:    	movq   QWORD PTR [rsp],xmm3
  00d8a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d90:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d96:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d9c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00da2: f6 	movabs rax,0x55f67a69e160
  00dac:    	call   rax
  00dae:    	movq   xmm3,QWORD PTR [rsp]
  00db3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00db9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dbf:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dc5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00dcb:    	add    rsp,0x30
  00dcf: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00dd6: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ddd: 00 	test   rdi,0x7
  00de4:    	jne    0x2dad5
  00dea:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dee:    	jne    0x2dad5
  00df4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcef2],0x26        # 0xfffddced
  00dfb:    	jne    0x2dad5
  00e01:    	mov    esi,DWORD PTR [rip+0xc05]        # 0x1a0c
  00e07:    	cmp    esi,0xffffffff
  00e0a:    	je     0x2db0e
  00e10:    	cmp    WORD PTR [rdi+0x2],0x3
  00e15:    	jne    0xe2e
  00e1b:    	cmp    esi,0x6
  00e1e:    	jge    0xe2e
  00e24:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e29:    	jmp    0xe7c
  00e2e:    	sub    rsp,0x30
  00e32:    	movq   QWORD PTR [rsp],xmm3
  00e37:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e3d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e43:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e49:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e4f: f6 	movabs rax,0x55f67a69e160
  00e59:    	call   rax
  00e5b:    	movq   xmm3,QWORD PTR [rsp]
  00e60:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e72:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e78:    	add    rsp,0x30
  00e7c: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [Float][Float]
  00e83: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00e8a: 00 	test   rdi,0x1
  00e91:    	jne    0x2db79
  00e97: 00 	test   rdi,0x2
  00e9e:    	je     0xeda
  00ea4:    	xorps  xmm2,xmm2
  00ea7: 00 	movabs rax,0x8000000000000002
  00eb1:    	cmp    rdi,rax
  00eb4:    	je     0xeec
  00eba:    	mov    rax,rdi
  00ebd:    	sar    rax,0x3f
  00ec1:    	add    rax,0x2
  00ec5:    	and    rdi,0xfffffffffffffffc
  00ec9:    	or     rdi,rax
  00ecc:    	rol    rdi,0x3d
  00ed0:    	movq   xmm2,rdi
  00ed5:    	jmp    0xeec
  00eda:    	call   0xfffda9c4
  00edf:    	test   rax,rax
  00ee2:    	je     0x2db79
  00ee8:    	movq   xmm2,xmm0
  00eec:    	mulsd  xmm2,xmm3
:00078 %12 = %12 + %13                      [Float][Float]
  00ef0: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ef7: 00 	test   rdi,0x1
  00efe:    	jne    0x2dbb2
  00f04: 00 	test   rdi,0x2
  00f0b:    	je     0xf48
  00f11:    	xorps  xmm8,xmm8
  00f15: 00 	movabs rax,0x8000000000000002
  00f1f:    	cmp    rdi,rax
  00f22:    	je     0xf5b
  00f28:    	mov    rax,rdi
  00f2b:    	sar    rax,0x3f
  00f2f:    	add    rax,0x2
  00f33:    	and    rdi,0xfffffffffffffffc
  00f37:    	or     rdi,rax
  00f3a:    	rol    rdi,0x3d
  00f3e:    	movq   xmm8,rdi
  00f43:    	jmp    0xf5b
  00f48:    	call   0xfffda9c4
  00f4d:    	test   rax,rax
  00f50:    	je     0x2dbb2
  00f56:    	movq   xmm8,xmm0
  00f5b:    	addsd  xmm8,xmm2
:00079 %14 = %1.call org()                  [Ray]
  00f60:    	mov    rdi,QWORD PTR [r14-0x38]
  00f64: 00 	test   rdi,0x7
  00f6b:    	jne    0x2dbfb
  00f71:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00f75:    	jne    0x2dbfb
  00f7b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcd6b],0x26        # 0xfffddced
  00f82:    	jne    0x2dbfb
  00f88:    	mov    esi,DWORD PTR [rip+0xa86]        # 0x1a14
  00f8e:    	cmp    esi,0xffffffff
  00f91:    	je     0x2dc55
  00f97:    	cmp    WORD PTR [rdi+0x2],0x3
  00f9c:    	jne    0xfb5
  00fa2:    	cmp    esi,0x6
  00fa5:    	jge    0xfb5
  00fab:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fb0:    	jmp    0x101d
  00fb5:    	sub    rsp,0x40
  00fb9:    	movq   QWORD PTR [rsp],xmm2
  00fbe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fc4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fca:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fd0:    	movq   QWORD PTR [rsp+0x20],xmm6
  00fd6:    	movq   QWORD PTR [rsp+0x28],xmm7
  00fdc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00fe3: f6 	movabs rax,0x55f67a69e160
  00fed:    	call   rax
  00fef:    	movq   xmm2,QWORD PTR [rsp]
  00ff4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ffa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01000:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01006:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0100c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01012: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01019:    	add    rsp,0x40
  0101d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  01024: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0102b: 00 	test   rdi,0x7
  01032:    	jne    0x2dcda
  01038:    	cmp    DWORD PTR [rdi+0x4],0x28
  0103c:    	jne    0x2dcda
  01042: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcca4],0x26        # 0xfffddced
  01049:    	jne    0x2dcda
  0104f:    	mov    esi,DWORD PTR [rip+0x9c7]        # 0x1a1c
  01055:    	cmp    esi,0xffffffff
  01058:    	je     0x2dd24
  0105e:    	cmp    WORD PTR [rdi+0x2],0x3
  01063:    	jne    0x107c
  01069:    	cmp    esi,0x6
  0106c:    	jge    0x107c
  01072:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01077:    	jmp    0x10d8
  0107c:    	sub    rsp,0x30
  01080:    	movq   QWORD PTR [rsp],xmm3
  01085:    	movq   QWORD PTR [rsp+0x8],xmm4
  0108b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01091:    	movq   QWORD PTR [rsp+0x18],xmm6
  01097:    	movq   QWORD PTR [rsp+0x20],xmm7
  0109d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010a4: f6 	movabs rax,0x55f67a69e160
  010ae:    	call   rax
  010b0:    	movq   xmm3,QWORD PTR [rsp]
  010b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010bb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010c1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010c7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010cd: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010d4:    	add    rsp,0x30
  010d8: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  010df:    	mov    rdi,QWORD PTR [r14-0x38]
  010e3: 00 	test   rdi,0x7
  010ea:    	jne    0x2dd9d
  010f0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010f4:    	jne    0x2dd9d
  010fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcbec],0x26        # 0xfffddced
  01101:    	jne    0x2dd9d
  01107:    	mov    esi,DWORD PTR [rip+0x917]        # 0x1a24
  0110d:    	cmp    esi,0xffffffff
  01110:    	je     0x2dde7
  01116:    	cmp    WORD PTR [rdi+0x2],0x3
  0111b:    	jne    0x1134
  01121:    	cmp    esi,0x6
  01124:    	jge    0x1134
  0112a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0112f:    	jmp    0x1190
  01134:    	sub    rsp,0x30
  01138:    	movq   QWORD PTR [rsp],xmm3
  0113d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01143:    	movq   QWORD PTR [rsp+0x10],xmm5
  01149:    	movq   QWORD PTR [rsp+0x18],xmm6
  0114f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01155: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0115c: f6 	movabs rax,0x55f67a69e160
  01166:    	call   rax
  01168:    	movq   xmm3,QWORD PTR [rsp]
  0116d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01173:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01179:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0117f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01185: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0118c:    	add    rsp,0x30
  01190: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  01197: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0119e: 00 	test   rdi,0x7
  011a5:    	jne    0x2de60
  011ab:    	cmp    DWORD PTR [rdi+0x4],0x28
  011af:    	jne    0x2de60
  011b5: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcb31],0x26        # 0xfffddced
  011bc:    	jne    0x2de60
  011c2:    	mov    esi,DWORD PTR [rip+0x864]        # 0x1a2c
  011c8:    	cmp    esi,0xffffffff
  011cb:    	je     0x2deaa
  011d1:    	cmp    WORD PTR [rdi+0x2],0x3
  011d6:    	jne    0x11ef
  011dc:    	cmp    esi,0x6
  011df:    	jge    0x11ef
  011e5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011ea:    	jmp    0x124b
  011ef:    	sub    rsp,0x30
  011f3:    	movq   QWORD PTR [rsp],xmm3
  011f8:    	movq   QWORD PTR [rsp+0x8],xmm4
  011fe:    	movq   QWORD PTR [rsp+0x10],xmm5
  01204:    	movq   QWORD PTR [rsp+0x18],xmm6
  0120a:    	movq   QWORD PTR [rsp+0x20],xmm7
  01210: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01217: f6 	movabs rax,0x55f67a69e160
  01221:    	call   rax
  01223:    	movq   xmm3,QWORD PTR [rsp]
  01228:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0122e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01234:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0123a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01240: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01247:    	add    rsp,0x30
  0124b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [Float][Float]
  01252: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01259: 00 	test   rdi,0x1
  01260:    	jne    0x2df23
  01266: 00 	test   rdi,0x2
  0126d:    	je     0x12a9
  01273:    	xorps  xmm2,xmm2
  01276: 00 	movabs rax,0x8000000000000002
  01280:    	cmp    rdi,rax
  01283:    	je     0x12bb
  01289:    	mov    rax,rdi
  0128c:    	sar    rax,0x3f
  01290:    	add    rax,0x2
  01294:    	and    rdi,0xfffffffffffffffc
  01298:    	or     rdi,rax
  0129b:    	rol    rdi,0x3d
  0129f:    	movq   xmm2,rdi
  012a4:    	jmp    0x12bb
  012a9:    	call   0xfffda9c4
  012ae:    	test   rax,rax
  012b1:    	je     0x2df23
  012b7:    	movq   xmm2,xmm0
  012bb:    	mulsd  xmm2,xmm3
:00092 %13 = %13 + %14                      [Float][Float]
  012bf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012c6: 00 	test   rdi,0x1
  012cd:    	jne    0x2df6d
  012d3: 00 	test   rdi,0x2
  012da:    	je     0x1317
  012e0:    	xorps  xmm9,xmm9
  012e4: 00 	movabs rax,0x8000000000000002
  012ee:    	cmp    rdi,rax
  012f1:    	je     0x132a
  012f7:    	mov    rax,rdi
  012fa:    	sar    rax,0x3f
  012fe:    	add    rax,0x2
  01302:    	and    rdi,0xfffffffffffffffc
  01306:    	or     rdi,rax
  01309:    	rol    rdi,0x3d
  0130d:    	movq   xmm9,rdi
  01312:    	jmp    0x132a
  01317:    	call   0xfffda9c4
  0131c:    	test   rax,rax
  0131f:    	je     0x2df6d
  01325:    	movq   xmm9,xmm0
  0132a:    	addsd  xmm9,xmm2
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  0132f:    	movq   xmm0,xmm4
  01333:    	call   0xfffdaae8
  01338: ff 	mov    QWORD PTR [r14-0x88],rax
  0133f:    	movq   xmm0,xmm8
  01344:    	call   0xfffdaae8
  01349: ff 	mov    QWORD PTR [r14-0x90],rax
  01350:    	movq   xmm0,xmm9
  01355:    	call   0xfffdaae8
  0135a: ff 	mov    QWORD PTR [r14-0x98],rax
  01361:    	mov    rdi,QWORD PTR [r14-0x80]
  01365: 00 	test   rdi,0x7
  0136c:    	jne    0x2dfc7
  01372:    	cmp    DWORD PTR [rdi+0x4],0x29
  01376:    	jne    0x2dfc7
  0137c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc96a],0x26        # 0xfffddced
  01383:    	jne    0x2dfc7
  01389: 00 	mov    r9,0x0
  01390:    	sub    rsp,0x40
  01394:    	movq   QWORD PTR [rsp],xmm2
  01399:    	movq   QWORD PTR [rsp+0x8],xmm3
  0139f:    	movq   QWORD PTR [rsp+0x10],xmm4
  013a5:    	movq   QWORD PTR [rsp+0x18],xmm5
  013ab:    	movq   QWORD PTR [rsp+0x20],xmm6
  013b1:    	movq   QWORD PTR [rsp+0x28],xmm7
  013b7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  013be: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  013c5:    	mov    rdx,rdi
  013c8:    	mov    QWORD PTR [rsp-0x40],rcx
  013cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013d6: ff 	lea    rcx,[r14-0x88]
  013dd: 00 	mov    r8,0x3
  013e4:    	mov    rsi,QWORD PTR [rbx]
  013e7:    	mov    QWORD PTR [rsp-0x18],rsi
  013ec:    	lea    rsi,[rsp-0x18]
  013f1:    	mov    QWORD PTR [rbx],rsi
  013f4:    	lea    r14,[rsp-0x10]
  013f9:    	mov    QWORD PTR [rsp-0x20],r14
  013fe:    	call   0x2e000
  01403:    	lea    r14,[rbp-0x8]
  01407:    	mov    QWORD PTR [rbx],r14
  0140a:    	mov    r14,QWORD PTR [rbp-0x10]
  0140e:    	movq   xmm2,QWORD PTR [rsp]
  01413:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01419:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0141f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01425:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0142b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01431: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01438: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0143f:    	add    rsp,0x40
  01443: f6 	movabs r13,0x55f67b86ef50
  0144d:    	test   rax,rax
  01450:    	je     0xfffda96b
  01456:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  0145a:    	mov    rdi,QWORD PTR [r14-0x40]
  0145e: 00 	test   rdi,0x7
  01465:    	jne    0x2e032
  0146b:    	cmp    DWORD PTR [rdi+0x4],0x30
  0146f:    	jne    0x2e032
  01475: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc871],0x26        # 0xfffddced
  0147c:    	jne    0x2e032
  01482:    	mov    esi,DWORD PTR [rip+0x5ac]        # 0x1a34
  01488:    	cmp    esi,0xffffffff
  0148b:    	je     0x2e06b
  01491:    	cmp    WORD PTR [rdi+0x2],0x3
  01496:    	jne    0x14b3
  0149c:    	cmp    esi,0x6
  0149f:    	jge    0x14b3
  014a5:    	mov    rax,QWORD PTR [r14-0x78]
  014a9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014ae:    	jmp    0x1540
  014b3:    	sub    rsp,0x40
  014b7:    	movq   QWORD PTR [rsp],xmm2
  014bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  014c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  014c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  014ce:    	movq   QWORD PTR [rsp+0x20],xmm6
  014d4:    	movq   QWORD PTR [rsp+0x28],xmm7
  014da: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014e1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014e8:    	mov    rdx,QWORD PTR [r14-0x78]
  014ec: f6 	movabs rax,0x55f67a69e3e0
  014f6:    	call   rax
  014f8:    	movq   xmm2,QWORD PTR [rsp]
  014fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01503:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01509:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0150f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01515:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0151b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01522: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01529:    	add    rsp,0x40
  0152d: f6 	movabs r13,0x55f67b86ef80
  01537:    	test   rax,rax
  0153a:    	je     0xfffda96b
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  01540:    	mov    rdi,QWORD PTR [r14-0x40]
  01544: 00 	test   rdi,0x7
  0154b:    	jne    0x2e105
  01551:    	cmp    DWORD PTR [rdi+0x4],0x30
  01555:    	jne    0x2e105
  0155b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc78b],0x26        # 0xfffddced
  01562:    	jne    0x2e105
  01568:    	mov    esi,DWORD PTR [rip+0x4ce]        # 0x1a3c
  0156e:    	cmp    esi,0xffffffff
  01571:    	je     0x2e13e
  01577:    	cmp    WORD PTR [rdi+0x2],0x3
  0157c:    	jne    0x1595
  01582:    	cmp    esi,0x6
  01585:    	jge    0x1595
  0158b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01590:    	jmp    0x160b
  01595:    	sub    rsp,0x40
  01599:    	movq   QWORD PTR [rsp],xmm2
  0159e:    	movq   QWORD PTR [rsp+0x8],xmm3
  015a4:    	movq   QWORD PTR [rsp+0x10],xmm4
  015aa:    	movq   QWORD PTR [rsp+0x18],xmm5
  015b0:    	movq   QWORD PTR [rsp+0x20],xmm6
  015b6:    	movq   QWORD PTR [rsp+0x28],xmm7
  015bc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015c3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015ca: f6 	movabs rax,0x55f67a69e160
  015d4:    	call   rax
  015d6:    	movq   xmm2,QWORD PTR [rsp]
  015db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015ed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015f3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015f9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01600: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01607:    	add    rsp,0x40
  0160b:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: Sphere[IvarId(0)]
  0160f:    	mov    rdi,QWORD PTR [rbp-0x30]
  01613:    	mov    rax,QWORD PTR [rdi+0x10]
  01617:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  0161b:    	mov    rdi,QWORD PTR [r14-0x78]
  0161f: 00 	test   rdi,0x7
  01626:    	jne    0x2e1d1
  0162c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01630:    	jne    0x2e1d1
  01636: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc6b0],0x26        # 0xfffddced
  0163d:    	jne    0x2e1d1
  01643:    	sub    rsp,0x40
  01647:    	movq   QWORD PTR [rsp],xmm2
  0164c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01652:    	movq   QWORD PTR [rsp+0x10],xmm4
  01658:    	movq   QWORD PTR [rsp+0x18],xmm5
  0165e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01664:    	movq   QWORD PTR [rsp+0x28],xmm7
  0166a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01671: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01678: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01681:    	mov    rax,QWORD PTR [r14-0x78]
  01685:    	mov    QWORD PTR [rsp-0x40],rax
  0168a: 00 	mov    rdi,0x1
  01691:    	lea    r8,[rsp-0x48]
  01696:    	mov    rax,QWORD PTR [r14-0x80]
  0169a:    	mov    QWORD PTR [r8],rax
  0169d:    	sub    r8,0x8
  016a1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016aa: 08 	movabs rax,0x1000800000040
  016b4:    	mov    QWORD PTR [rsp-0x30],rax
  016b9: f6 	movabs r13,0x55f67b855f60
  016c3:    	mov    rsi,QWORD PTR [rbx]
  016c6:    	mov    QWORD PTR [rsp-0x18],rsi
  016cb:    	lea    rsi,[rsp-0x18]
  016d0:    	mov    QWORD PTR [rbx],rsi
  016d3:    	lea    r14,[rsp-0x10]
  016d8:    	mov    QWORD PTR [rsp-0x20],r14
  016dd:    	call   0xfffde98e
  016e2:    	lea    r14,[rbp-0x8]
  016e6:    	mov    QWORD PTR [rbx],r14
  016e9:    	mov    r14,QWORD PTR [rbp-0x10]
  016ed:    	movq   xmm2,QWORD PTR [rsp]
  016f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01704:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0170a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01710: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01717: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0171e:    	add    rsp,0x40
  01722: f6 	movabs r13,0x55f67b86eff0
  0172c:    	test   rax,rax
  0172f:    	je     0xfffda96b
  01735:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  01739:    	mov    rdi,QWORD PTR [r14-0x70]
  0173d: 00 	test   rdi,0x7
  01744:    	jne    0x2e20a
  0174a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0174e:    	jne    0x2e20a
  01754: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc592],0x26        # 0xfffddced
  0175b:    	jne    0x2e20a
  01761:    	sub    rsp,0x40
  01765:    	movq   QWORD PTR [rsp],xmm2
  0176a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01770:    	movq   QWORD PTR [rsp+0x10],xmm4
  01776:    	movq   QWORD PTR [rsp+0x18],xmm5
  0177c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01782:    	movq   QWORD PTR [rsp+0x28],xmm7
  01788: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0178f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01796: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0179f:    	mov    rax,QWORD PTR [r14-0x70]
  017a3:    	mov    QWORD PTR [rsp-0x40],rax
  017a8: 00 	mov    rdi,0x0
  017af: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017b8: 07 	movabs rax,0x1000700000044
  017c2:    	mov    QWORD PTR [rsp-0x30],rax
  017c7: f6 	movabs r13,0x55f67b84eec0
  017d1:    	mov    rsi,QWORD PTR [rbx]
  017d4:    	mov    QWORD PTR [rsp-0x18],rsi
  017d9:    	lea    rsi,[rsp-0x18]
  017de:    	mov    QWORD PTR [rbx],rsi
  017e1:    	lea    r14,[rsp-0x10]
  017e6:    	mov    QWORD PTR [rsp-0x20],r14
  017eb:    	call   0xfffde5f4
  017f0:    	lea    r14,[rbp-0x8]
  017f4:    	mov    QWORD PTR [rbx],r14
  017f7:    	mov    r14,QWORD PTR [rbp-0x10]
  017fb:    	movq   xmm2,QWORD PTR [rsp]
  01800:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01806:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0180c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01812:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01818:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0181e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01825: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0182c:    	add    rsp,0x40
  01830: f6 	movabs r13,0x55f67b86f020
  0183a:    	test   rax,rax
  0183d:    	je     0xfffda96b
  01843:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  01847:    	mov    rdi,QWORD PTR [r14-0x40]
  0184b: 00 	test   rdi,0x7
  01852:    	jne    0x2e243
  01858:    	cmp    DWORD PTR [rdi+0x4],0x30
  0185c:    	jne    0x2e243
  01862: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc484],0x26        # 0xfffddced
  01869:    	jne    0x2e243
  0186f:    	mov    esi,DWORD PTR [rip+0x1cf]        # 0x1a44
  01875:    	cmp    esi,0xffffffff
  01878:    	je     0x2e27c
  0187e:    	cmp    WORD PTR [rdi+0x2],0x3
  01883:    	jne    0x18a0
  01889:    	cmp    esi,0x6
  0188c:    	jge    0x18a0
  01892:    	mov    rax,QWORD PTR [r14-0x78]
  01896:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0189b:    	jmp    0x192d
  018a0:    	sub    rsp,0x40
  018a4:    	movq   QWORD PTR [rsp],xmm2
  018a9:    	movq   QWORD PTR [rsp+0x8],xmm3
  018af:    	movq   QWORD PTR [rsp+0x10],xmm4
  018b5:    	movq   QWORD PTR [rsp+0x18],xmm5
  018bb:    	movq   QWORD PTR [rsp+0x20],xmm6
  018c1:    	movq   QWORD PTR [rsp+0x28],xmm7
  018c7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018ce: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018d5:    	mov    rdx,QWORD PTR [r14-0x78]
  018d9: f6 	movabs rax,0x55f67a69e3e0
  018e3:    	call   rax
  018e5:    	movq   xmm2,QWORD PTR [rsp]
  018ea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018f0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018f6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018fc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01902:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01908: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0190f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01916:    	add    rsp,0x40
  0191a: f6 	movabs r13,0x55f67b86f050
  01924:    	test   rax,rax
  01927:    	je     0xfffda96b
:00110 
:00112 br =>:00113
  0192d:    	jmp    0x2e3c3
:00113 br =>:00114
  01932:    	jmp    0x2e455
:00114 %9 = nil
  01937: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  0193f:    	mov    rax,QWORD PTR [r14-0x78]
  01943:    	leave  
  01944:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55f67b870800
load_ivar: no profile
<== finished compile. elapsed:231.4µs
offset:Pos(160016) code: 5750 bytes  data: 266 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2ca40
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x2ca4f
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x2ca4f
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x2ca5e
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x2ca5e
  000a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc1fd],0x26        # 0xfffdc2a5
  000a8:    	jne    0x2ca5e
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	lea    r8,[rsp-0x48]
  000cc:    	mov    rax,QWORD PTR [r14-0x70]
  000d0:    	mov    QWORD PTR [r8],rax
  000d3:    	sub    r8,0x8
  000d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000e0: 05 	movabs rax,0x1000500000042
  000ea:    	mov    QWORD PTR [rsp-0x30],rax
  000ef: f6 	movabs r13,0x55f67b88de50
  000f9:    	mov    rsi,QWORD PTR [rbx]
  000fc:    	mov    QWORD PTR [rsp-0x18],rsi
  00101:    	lea    rsi,[rsp-0x18]
  00106:    	mov    QWORD PTR [rbx],rsi
  00109:    	lea    r14,[rsp-0x10]
  0010e:    	mov    QWORD PTR [rsp-0x20],r14
  00113:    	call   0xfffdcfd8
  00118:    	lea    r14,[rbp-0x8]
  0011c:    	mov    QWORD PTR [rbx],r14
  0011f:    	mov    r14,QWORD PTR [rbp-0x10]
  00123: f6 	movabs r13,0x55f67b870850
  0012d:    	test   rax,rax
  00130:    	je     0xfffd8f23
  00136:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  0013a:    	mov    rdi,QWORD PTR [r14-0x48]
  0013e: 00 	test   rdi,0x1
  00145:    	jne    0x2ca6d
  0014b: 00 	test   rdi,0x2
  00152:    	je     0x18e
  00158:    	xorps  xmm2,xmm2
  0015b: 00 	movabs rax,0x8000000000000002
  00165:    	cmp    rdi,rax
  00168:    	je     0x1a0
  0016e:    	mov    rax,rdi
  00171:    	sar    rax,0x3f
  00175:    	add    rax,0x2
  00179:    	and    rdi,0xfffffffffffffffc
  0017d:    	or     rdi,rax
  00180:    	rol    rdi,0x3d
  00184:    	movq   xmm2,rdi
  00189:    	jmp    0x1a0
  0018e:    	call   0xfffd8f7c
  00193:    	test   rax,rax
  00196:    	je     0x2ca6d
  0019c:    	movq   xmm2,xmm0
  001a0: 00 	xorps  xmm2,XMMWORD PTR [rip+0x14d9]        # 0x1680
:00007 %7 = %1.call dir()                   [Ray]
  001a7:    	mov    rdi,QWORD PTR [r14-0x38]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x2ca7c
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bc:    	jne    0x2ca7c
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc0dc],0x26        # 0xfffdc2a5
  001c9:    	jne    0x2ca7c
  001cf:    	mov    esi,DWORD PTR [rip+0x14b7]        # 0x168c
  001d5:    	cmp    esi,0xffffffff
  001d8:    	je     0x2ca98
  001de:    	cmp    WORD PTR [rdi+0x2],0x3
  001e3:    	jne    0x1fc
  001e9:    	cmp    esi,0x6
  001ec:    	jge    0x1fc
  001f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f7:    	jmp    0x21a
  001fc:    	sub    rsp,0x10
  00200:    	movq   QWORD PTR [rsp],xmm2
  00205: f6 	movabs rax,0x55f67a69e160
  0020f:    	call   rax
  00211:    	movq   xmm2,QWORD PTR [rsp]
  00216:    	add    rsp,0x10
  0021a:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  0021e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  0022a:    	mov    rdi,QWORD PTR [r14-0x68]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x2cad3
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0023f:    	jne    0x2cad3
  00245: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc059],0x26        # 0xfffdc2a5
  0024c:    	jne    0x2cad3
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00264:    	mov    rax,QWORD PTR [r14-0x68]
  00268:    	mov    QWORD PTR [rsp-0x40],rax
  0026d: 00 	mov    rdi,0x1
  00274:    	lea    r8,[rsp-0x48]
  00279:    	mov    rax,QWORD PTR [r14-0x70]
  0027d:    	mov    QWORD PTR [r8],rax
  00280:    	sub    r8,0x8
  00284: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0028d: 05 	movabs rax,0x1000500000042
  00297:    	mov    QWORD PTR [rsp-0x30],rax
  0029c: f6 	movabs r13,0x55f67b88de50
  002a6:    	mov    rsi,QWORD PTR [rbx]
  002a9:    	mov    QWORD PTR [rsp-0x18],rsi
  002ae:    	lea    rsi,[rsp-0x18]
  002b3:    	mov    QWORD PTR [rbx],rsi
  002b6:    	lea    r14,[rsp-0x10]
  002bb:    	mov    QWORD PTR [rsp-0x20],r14
  002c0:    	call   0xfffdcfd8
  002c5:    	lea    r14,[rbp-0x8]
  002c9:    	mov    QWORD PTR [rbx],r14
  002cc:    	mov    r14,QWORD PTR [rbp-0x10]
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	add    rsp,0x10
  002d9: f6 	movabs r13,0x55f67b8708d0
  002e3:    	test   rax,rax
  002e6:    	je     0xfffd8f23
  002ec:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002f0:    	mov    rax,QWORD PTR [r14-0x50]
  002f4:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002f8: 00 	movq   xmm3,QWORD PTR [rip+0x1390]        # 0x1690
  00300: 00 	movabs rax,0x8000000000000002
  0030a:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0030e:    	mov    rdi,QWORD PTR [r14-0x50]
  00312: 00 	test   rdi,0x1
  00319:    	jne    0x2caef
  0031f: 00 	test   rdi,0x2
  00326:    	je     0x362
  0032c:    	xorps  xmm4,xmm4
  0032f: 00 	movabs rax,0x8000000000000002
  00339:    	cmp    rdi,rax
  0033c:    	je     0x374
  00342:    	mov    rax,rdi
  00345:    	sar    rax,0x3f
  00349:    	add    rax,0x2
  0034d:    	and    rdi,0xfffffffffffffffc
  00351:    	or     rdi,rax
  00354:    	rol    rdi,0x3d
  00358:    	movq   xmm4,rdi
  0035d:    	jmp    0x374
  00362:    	call   0xfffd8f7c
  00367:    	test   rax,rax
  0036a:    	je     0x2caef
  00370:    	movq   xmm4,xmm0
  00374:    	ucomisd xmm4,xmm3
  00378:    	jae    0x2cb0b
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0037e:    	movq   xmm5,xmm4
  00382: 00 	xorps  xmm5,XMMWORD PTR [rip+0x1317]        # 0x16a0
:00020 br =>:00021
  00389:    	jmp    0x2cb31
:00021 %7 = literal[1e-17]
  0038e: 00 	movq   xmm3,QWORD PTR [rip+0x131a]        # 0x16b0
  00396: aa 	movabs rax,0xe33877aa3236a4ba
  003a0:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003a4:    	mov    rdi,QWORD PTR [r14-0x58]
  003a8: 00 	test   rdi,0x1
  003af:    	jne    0x2cb64
  003b5: 00 	test   rdi,0x2
  003bc:    	je     0x3f8
  003c2:    	xorps  xmm5,xmm5
  003c5: 00 	movabs rax,0x8000000000000002
  003cf:    	cmp    rdi,rax
  003d2:    	je     0x40a
  003d8:    	mov    rax,rdi
  003db:    	sar    rax,0x3f
  003df:    	add    rax,0x2
  003e3:    	and    rdi,0xfffffffffffffffc
  003e7:    	or     rdi,rax
  003ea:    	rol    rdi,0x3d
  003ee:    	movq   xmm5,rdi
  003f3:    	jmp    0x40a
  003f8:    	call   0xfffd8f7c
  003fd:    	test   rax,rax
  00400:    	je     0x2cb64
  00406:    	movq   xmm5,xmm0
  0040a:    	ucomisd xmm5,xmm3
  0040e:    	jae    0x422
:00024 %7 = nil
  00414: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  0041c:    	mov    rax,QWORD PTR [r14-0x68]
  00420:    	leave  
  00421:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00422:    	mov    rdi,QWORD PTR [r14-0x38]
  00426: 00 	test   rdi,0x7
  0042d:    	jne    0x2cb80
  00433:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00437:    	jne    0x2cb80
  0043d: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbe61],0x26        # 0xfffdc2a5
  00444:    	jne    0x2cb80
  0044a:    	mov    esi,DWORD PTR [rip+0x126c]        # 0x16bc
  00450:    	cmp    esi,0xffffffff
  00453:    	je     0x2cb9c
  00459:    	cmp    WORD PTR [rdi+0x2],0x3
  0045e:    	jne    0x477
  00464:    	cmp    esi,0x6
  00467:    	jge    0x477
  0046d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00472:    	jmp    0x4b9
  00477:    	sub    rsp,0x20
  0047b:    	movq   QWORD PTR [rsp],xmm2
  00480:    	movq   QWORD PTR [rsp+0x8],xmm3
  00486:    	movq   QWORD PTR [rsp+0x10],xmm4
  0048c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00492: f6 	movabs rax,0x55f67a69e160
  0049c:    	call   rax
  0049e:    	movq   xmm2,QWORD PTR [rsp]
  004a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004b5:    	add    rsp,0x20
  004b9:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004bd:    	mov    rdi,QWORD PTR [rbp-0x30]
  004c1:    	mov    rax,QWORD PTR [rdi+0x18]
  004c5:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c9:    	mov    rdi,QWORD PTR [r14-0x70]
  004cd: 00 	test   rdi,0x7
  004d4:    	jne    0x2cbfb
  004da:    	cmp    DWORD PTR [rdi+0x4],0x28
  004de:    	jne    0x2cbfb
  004e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbdba],0x26        # 0xfffdc2a5
  004eb:    	jne    0x2cbfb
  004f1:    	sub    rsp,0x20
  004f5:    	movq   QWORD PTR [rsp],xmm2
  004fa:    	movq   QWORD PTR [rsp+0x8],xmm4
  00500:    	movq   QWORD PTR [rsp+0x10],xmm5
  00506: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0050f:    	mov    rax,QWORD PTR [r14-0x70]
  00513:    	mov    QWORD PTR [rsp-0x40],rax
  00518: 00 	mov    rdi,0x1
  0051f:    	lea    r8,[rsp-0x48]
  00524:    	mov    rax,QWORD PTR [r14-0x78]
  00528:    	mov    QWORD PTR [r8],rax
  0052b:    	sub    r8,0x8
  0052f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00538: 05 	movabs rax,0x1000500000042
  00542:    	mov    QWORD PTR [rsp-0x30],rax
  00547: f6 	movabs r13,0x55f67b88de50
  00551:    	mov    rsi,QWORD PTR [rbx]
  00554:    	mov    QWORD PTR [rsp-0x18],rsi
  00559:    	lea    rsi,[rsp-0x18]
  0055e:    	mov    QWORD PTR [rbx],rsi
  00561:    	lea    r14,[rsp-0x10]
  00566:    	mov    QWORD PTR [rsp-0x20],r14
  0056b:    	call   0xfffdcfd8
  00570:    	lea    r14,[rbp-0x8]
  00574:    	mov    QWORD PTR [rbx],r14
  00577:    	mov    r14,QWORD PTR [rbp-0x10]
  0057b:    	movq   xmm2,QWORD PTR [rsp]
  00580:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00586:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0058c:    	add    rsp,0x20
  00590: f6 	movabs r13,0x55f67b870a10
  0059a:    	test   rax,rax
  0059d:    	je     0xfffd8f23
  005a3:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005a7:    	mov    rdi,QWORD PTR [r14-0x68]
  005ab: 00 	test   rdi,0x1
  005b2:    	jne    0x2cc17
  005b8: 00 	test   rdi,0x2
  005bf:    	je     0x5fb
  005c5:    	xorps  xmm3,xmm3
  005c8: 00 	movabs rax,0x8000000000000002
  005d2:    	cmp    rdi,rax
  005d5:    	je     0x60d
  005db:    	mov    rax,rdi
  005de:    	sar    rax,0x3f
  005e2:    	add    rax,0x2
  005e6:    	and    rdi,0xfffffffffffffffc
  005ea:    	or     rdi,rax
  005ed:    	rol    rdi,0x3d
  005f1:    	movq   xmm3,rdi
  005f6:    	jmp    0x60d
  005fb:    	call   0xfffd8f7c
  00600:    	test   rax,rax
  00603:    	je     0x2cc17
  00609:    	movq   xmm3,xmm0
  0060d:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00611: 00 	xorps  xmm3,XMMWORD PTR [rip+0x10a8]        # 0x16c0
:00036 %6 = %7 / %4                         [Float][Float]
  00618:    	movq   xmm6,xmm3
  0061c:    	movq   rax,xmm4
  00621:    	test   rax,rax
  00624:    	je     0xfffd8f48
  0062a:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  0062e: 00 	movq   xmm3,QWORD PTR [rip+0x109a]        # 0x16d0
  00636: 00 	movabs rax,0x8000000000000002
  00640:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00644:    	ucomisd xmm6,xmm3
  00648:    	jbe    0x2d88c
:00040 %7 = %2.call t()                     [Isect]
  0064e:    	mov    rdi,QWORD PTR [r14-0x40]
  00652: 00 	test   rdi,0x7
  00659:    	jne    0x2cc33
  0065f:    	cmp    DWORD PTR [rdi+0x4],0x30
  00663:    	jne    0x2cc33
  00669: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbc35],0x26        # 0xfffdc2a5
  00670:    	jne    0x2cc33
  00676:    	mov    esi,DWORD PTR [rip+0x1060]        # 0x16dc
  0067c:    	cmp    esi,0xffffffff
  0067f:    	je     0x2cc5c
  00685:    	cmp    WORD PTR [rdi+0x2],0x3
  0068a:    	jne    0x6a3
  00690:    	cmp    esi,0x6
  00693:    	jge    0x6a3
  00699:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0069e:    	jmp    0x6e5
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm5
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm6
  006be: f6 	movabs rax,0x55f67a69e160
  006c8:    	call   rax
  006ca:    	movq   xmm2,QWORD PTR [rsp]
  006cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006d5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006db:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006e1:    	add    rsp,0x20
  006e5:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  006e9:    	movq   xmm0,xmm6
  006ed:    	call   0xfffd90a0
  006f2:    	mov    QWORD PTR [r14-0x60],rax
  006f6:    	mov    rdi,QWORD PTR [r14-0x60]
  006fa:    	mov    rsi,QWORD PTR [r14-0x68]
  006fe: 00 	test   rdi,0x1
  00705:    	je     0x2ccbb
  0070b: 00 	test   rsi,0x1
  00712:    	je     0x2ccbb
  00718:    	cmp    rdi,rsi
  0071b:    	jge    0x2d8bf
:00045 %7 = literal[true]
  00721: 00 	mov    rax,0x1c
  00728:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  0072c:    	mov    rdi,QWORD PTR [r14-0x40]
  00730: 00 	test   rdi,0x7
  00737:    	jne    0x2cd10
  0073d:    	cmp    DWORD PTR [rdi+0x4],0x30
  00741:    	jne    0x2cd10
  00747: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbb57],0x26        # 0xfffdc2a5
  0074e:    	jne    0x2cd10
  00754:    	mov    esi,DWORD PTR [rip+0xf8a]        # 0x16e4
  0075a:    	cmp    esi,0xffffffff
  0075d:    	je     0x2cd2c
  00763:    	cmp    WORD PTR [rdi+0x2],0x3
  00768:    	jne    0x785
  0076e:    	cmp    esi,0x6
  00771:    	jge    0x785
  00777:    	mov    rax,QWORD PTR [r14-0x68]
  0077b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00780:    	jmp    0x7de
  00785:    	sub    rsp,0x20
  00789:    	movq   QWORD PTR [rsp],xmm2
  0078e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00794:    	movq   QWORD PTR [rsp+0x10],xmm5
  0079a:    	movq   QWORD PTR [rsp+0x18],xmm6
  007a0:    	mov    rdx,QWORD PTR [r14-0x68]
  007a4: f6 	movabs rax,0x55f67a69e3e0
  007ae:    	call   rax
  007b0:    	movq   xmm2,QWORD PTR [rsp]
  007b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007bb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007c1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007c7:    	add    rsp,0x20
  007cb: f6 	movabs r13,0x55f67b870b00
  007d5:    	test   rax,rax
  007d8:    	je     0xfffd8f23
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  007de:    	mov    rdi,QWORD PTR [r14-0x40]
  007e2: 00 	test   rdi,0x7
  007e9:    	jne    0x2cd92
  007ef:    	cmp    DWORD PTR [rdi+0x4],0x30
  007f3:    	jne    0x2cd92
  007f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbaa5],0x26        # 0xfffdc2a5
  00800:    	jne    0x2cd92
  00806:    	mov    esi,DWORD PTR [rip+0xee0]        # 0x16ec
  0080c:    	cmp    esi,0xffffffff
  0080f:    	je     0x2cdae
  00815:    	cmp    WORD PTR [rdi+0x2],0x3
  0081a:    	jne    0x837
  00820:    	cmp    esi,0x6
  00823:    	jge    0x837
  00829:    	mov    rax,QWORD PTR [r14-0x60]
  0082d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00832:    	jmp    0x890
  00837:    	sub    rsp,0x20
  0083b:    	movq   QWORD PTR [rsp],xmm2
  00840:    	movq   QWORD PTR [rsp+0x8],xmm4
  00846:    	movq   QWORD PTR [rsp+0x10],xmm5
  0084c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00852:    	mov    rdx,QWORD PTR [r14-0x60]
  00856: f6 	movabs rax,0x55f67a69e3e0
  00860:    	call   rax
  00862:    	movq   xmm2,QWORD PTR [rsp]
  00867:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0086d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00873:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00879:    	add    rsp,0x20
  0087d: f6 	movabs r13,0x55f67b870b30
  00887:    	test   rax,rax
  0088a:    	je     0xfffd8f23
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  00890:    	mov    rdi,QWORD PTR [rbp-0x30]
  00894:    	sub    rsp,0x20
  00898:    	movq   QWORD PTR [rsp],xmm2
  0089d:    	movq   QWORD PTR [rsp+0x8],xmm4
  008a3:    	movq   QWORD PTR [rsp+0x10],xmm5
  008a9:    	movq   QWORD PTR [rsp+0x18],xmm6
  008af: 00 	mov    rsi,0x97
  008b6:    	mov    rdx,r12
  008b9: f6 	movabs rax,0x55f67a71b840
  008c3:    	call   rax
  008c5:    	movq   xmm2,QWORD PTR [rsp]
  008ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008d0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008d6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008dc:    	add    rsp,0x20
  008e0:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008e4:    	mov    rdi,QWORD PTR [r14-0x40]
  008e8: 00 	test   rdi,0x7
  008ef:    	jne    0x2ce14
  008f5:    	cmp    DWORD PTR [rdi+0x4],0x30
  008f9:    	jne    0x2ce14
  008ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb99f],0x26        # 0xfffdc2a5
  00906:    	jne    0x2ce14
  0090c:    	mov    esi,DWORD PTR [rip+0xde2]        # 0x16f4
  00912:    	cmp    esi,0xffffffff
  00915:    	je     0x2ce30
  0091b:    	cmp    WORD PTR [rdi+0x2],0x3
  00920:    	jne    0x93d
  00926:    	cmp    esi,0x6
  00929:    	jge    0x93d
  0092f:    	mov    rax,QWORD PTR [r14-0x68]
  00933:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00938:    	jmp    0x996
  0093d:    	sub    rsp,0x20
  00941:    	movq   QWORD PTR [rsp],xmm2
  00946:    	movq   QWORD PTR [rsp+0x8],xmm4
  0094c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00952:    	movq   QWORD PTR [rsp+0x18],xmm6
  00958:    	mov    rdx,QWORD PTR [r14-0x68]
  0095c: f6 	movabs rax,0x55f67a69e3e0
  00966:    	call   rax
  00968:    	movq   xmm2,QWORD PTR [rsp]
  0096d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00973:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00979:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0097f:    	add    rsp,0x20
  00983: f6 	movabs r13,0x55f67b870b70
  0098d:    	test   rax,rax
  00990:    	je     0xfffd8f23
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00996: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdb913]        # 0xfffdc2b0
  0099d: 00 	cmp    rax,QWORD PTR [rip+0xd6c]        # 0x1710
  009a4:    	jne    0x2ce96
  009aa: 00 	mov    rax,QWORD PTR [rip+0xd4f]        # 0x1700
  009b1:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [Ray]
  009b5:    	mov    rdi,QWORD PTR [r14-0x38]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x2cf12
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009ca:    	jne    0x2cf12
  009d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb8ce],0x26        # 0xfffdc2a5
  009d7:    	jne    0x2cf12
  009dd:    	mov    esi,DWORD PTR [rip+0xd39]        # 0x171c
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x2cf2e
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa4c
  00a0a:    	sub    rsp,0x20
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25: f6 	movabs rax,0x55f67a69e160
  00a2f:    	call   rax
  00a31:    	movq   xmm2,QWORD PTR [rsp]
  00a36:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a3c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a42:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a48:    	add    rsp,0x20
  00a4c:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a50:    	mov    rdi,QWORD PTR [r14-0x80]
  00a54: 00 	test   rdi,0x7
  00a5b:    	jne    0x2cf8d
  00a61:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a65:    	jne    0x2cf8d
  00a6b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb833],0x26        # 0xfffdc2a5
  00a72:    	jne    0x2cf8d
  00a78:    	mov    esi,DWORD PTR [rip+0xca6]        # 0x1724
  00a7e:    	cmp    esi,0xffffffff
  00a81:    	je     0x2cfa9
  00a87:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8c:    	jne    0xaa5
  00a92:    	cmp    esi,0x6
  00a95:    	jge    0xaa5
  00a9b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa0:    	jmp    0xae7
  00aa5:    	sub    rsp,0x20
  00aa9:    	movq   QWORD PTR [rsp],xmm2
  00aae:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ab4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00aba:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ac0: f6 	movabs rax,0x55f67a69e160
  00aca:    	call   rax
  00acc:    	movq   xmm2,QWORD PTR [rsp]
  00ad1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ad7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00add:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae3:    	add    rsp,0x20
  00ae7:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00aeb:    	mov    rdi,QWORD PTR [r14-0x38]
  00aef: 00 	test   rdi,0x7
  00af6:    	jne    0x2d008
  00afc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b00:    	jne    0x2d008
  00b06: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb798],0x26        # 0xfffdc2a5
  00b0d:    	jne    0x2d008
  00b13:    	mov    esi,DWORD PTR [rip+0xc13]        # 0x172c
  00b19:    	cmp    esi,0xffffffff
  00b1c:    	je     0x2d024
  00b22:    	cmp    WORD PTR [rdi+0x2],0x3
  00b27:    	jne    0xb40
  00b2d:    	cmp    esi,0x6
  00b30:    	jge    0xb40
  00b36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b3b:    	jmp    0xb82
  00b40:    	sub    rsp,0x20
  00b44:    	movq   QWORD PTR [rsp],xmm2
  00b49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b5b: f6 	movabs rax,0x55f67a69e160
  00b65:    	call   rax
  00b67:    	movq   xmm2,QWORD PTR [rsp]
  00b6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b7e:    	add    rsp,0x20
  00b82: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b89: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b90: 00 	test   rdi,0x7
  00b97:    	jne    0x2d083
  00b9d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba1:    	jne    0x2d083
  00ba7: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb6f7],0x26        # 0xfffdc2a5
  00bae:    	jne    0x2d083
  00bb4:    	mov    esi,DWORD PTR [rip+0xb7a]        # 0x1734
  00bba:    	cmp    esi,0xffffffff
  00bbd:    	je     0x2d09f
  00bc3:    	cmp    WORD PTR [rdi+0x2],0x3
  00bc8:    	jne    0xbe1
  00bce:    	cmp    esi,0x6
  00bd1:    	jge    0xbe1
  00bd7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bdc:    	jmp    0xc23
  00be1:    	sub    rsp,0x20
  00be5:    	movq   QWORD PTR [rsp],xmm2
  00bea:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf0:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bf6:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bfc: f6 	movabs rax,0x55f67a69e160
  00c06:    	call   rax
  00c08:    	movq   xmm2,QWORD PTR [rsp]
  00c0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c13:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c19:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c1f:    	add    rsp,0x20
  00c23:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [Float][Float]
  00c27:    	mov    rdi,QWORD PTR [r14-0x80]
  00c2b: 00 	test   rdi,0x1
  00c32:    	jne    0x2d0fe
  00c38: 00 	test   rdi,0x2
  00c3f:    	je     0xc7b
  00c45:    	xorps  xmm3,xmm3
  00c48: 00 	movabs rax,0x8000000000000002
  00c52:    	cmp    rdi,rax
  00c55:    	je     0xc8d
  00c5b:    	mov    rax,rdi
  00c5e:    	sar    rax,0x3f
  00c62:    	add    rax,0x2
  00c66:    	and    rdi,0xfffffffffffffffc
  00c6a:    	or     rdi,rax
  00c6d:    	rol    rdi,0x3d
  00c71:    	movq   xmm3,rdi
  00c76:    	jmp    0xc8d
  00c7b:    	call   0xfffd8f7c
  00c80:    	test   rax,rax
  00c83:    	je     0x2d0fe
  00c89:    	movq   xmm3,xmm0
  00c8d:    	mulsd  xmm3,xmm6
:00070 %9 = %9 + %10                        [Float][Float]
  00c91:    	mov    rdi,QWORD PTR [r14-0x78]
  00c95: 00 	test   rdi,0x1
  00c9c:    	jne    0x2d11a
  00ca2: 00 	test   rdi,0x2
  00ca9:    	je     0xce5
  00caf:    	xorps  xmm7,xmm7
  00cb2: 00 	movabs rax,0x8000000000000002
  00cbc:    	cmp    rdi,rax
  00cbf:    	je     0xcf7
  00cc5:    	mov    rax,rdi
  00cc8:    	sar    rax,0x3f
  00ccc:    	add    rax,0x2
  00cd0:    	and    rdi,0xfffffffffffffffc
  00cd4:    	or     rdi,rax
  00cd7:    	rol    rdi,0x3d
  00cdb:    	movq   xmm7,rdi
  00ce0:    	jmp    0xcf7
  00ce5:    	call   0xfffd8f7c
  00cea:    	test   rax,rax
  00ced:    	je     0x2d11a
  00cf3:    	movq   xmm7,xmm0
  00cf7:    	addsd  xmm7,xmm3
:00071 %11 = %1.call org()                  [Ray]
  00cfb:    	mov    rdi,QWORD PTR [r14-0x38]
  00cff: 00 	test   rdi,0x7
  00d06:    	jne    0x2d143
  00d0c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d10:    	jne    0x2d143
  00d16: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb588],0x26        # 0xfffdc2a5
  00d1d:    	jne    0x2d143
  00d23:    	mov    esi,DWORD PTR [rip+0xa13]        # 0x173c
  00d29:    	cmp    esi,0xffffffff
  00d2c:    	je     0x2d179
  00d32:    	cmp    WORD PTR [rdi+0x2],0x3
  00d37:    	jne    0xd50
  00d3d:    	cmp    esi,0x6
  00d40:    	jge    0xd50
  00d46:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d4b:    	jmp    0xdaa
  00d50:    	sub    rsp,0x30
  00d54:    	movq   QWORD PTR [rsp],xmm2
  00d59:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d5f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d65:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d6b:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d71:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d77: f6 	movabs rax,0x55f67a69e160
  00d81:    	call   rax
  00d83:    	movq   xmm2,QWORD PTR [rsp]
  00d88:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d8e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d94:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d9a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00da0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00da6:    	add    rsp,0x30
  00daa: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00db1: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00db8: 00 	test   rdi,0x7
  00dbf:    	jne    0x2d1f0
  00dc5:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dc9:    	jne    0x2d1f0
  00dcf: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb4cf],0x26        # 0xfffdc2a5
  00dd6:    	jne    0x2d1f0
  00ddc:    	mov    esi,DWORD PTR [rip+0x962]        # 0x1744
  00de2:    	cmp    esi,0xffffffff
  00de5:    	je     0x2d219
  00deb:    	cmp    WORD PTR [rdi+0x2],0x3
  00df0:    	jne    0xe09
  00df6:    	cmp    esi,0x6
  00df9:    	jge    0xe09
  00dff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e04:    	jmp    0xe57
  00e09:    	sub    rsp,0x30
  00e0d:    	movq   QWORD PTR [rsp],xmm2
  00e12:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e18:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e1e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e24:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e2a: f6 	movabs rax,0x55f67a69e160
  00e34:    	call   rax
  00e36:    	movq   xmm2,QWORD PTR [rsp]
  00e3b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e41:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e47:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e4d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e53:    	add    rsp,0x30
  00e57:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e5b:    	mov    rdi,QWORD PTR [r14-0x38]
  00e5f: 00 	test   rdi,0x7
  00e66:    	jne    0x2d284
  00e6c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e70:    	jne    0x2d284
  00e76: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb428],0x26        # 0xfffdc2a5
  00e7d:    	jne    0x2d284
  00e83:    	mov    esi,DWORD PTR [rip+0x8c3]        # 0x174c
  00e89:    	cmp    esi,0xffffffff
  00e8c:    	je     0x2d2ad
  00e92:    	cmp    WORD PTR [rdi+0x2],0x3
  00e97:    	jne    0xeb0
  00e9d:    	cmp    esi,0x6
  00ea0:    	jge    0xeb0
  00ea6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00eab:    	jmp    0xefe
  00eb0:    	sub    rsp,0x30
  00eb4:    	movq   QWORD PTR [rsp],xmm2
  00eb9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ebf:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ec5:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ecb:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ed1: f6 	movabs rax,0x55f67a69e160
  00edb:    	call   rax
  00edd:    	movq   xmm2,QWORD PTR [rsp]
  00ee2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ee8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eee:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00efa:    	add    rsp,0x30
  00efe: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00f05: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f0c: 00 	test   rdi,0x7
  00f13:    	jne    0x2d318
  00f19:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f1d:    	jne    0x2d318
  00f23: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb37b],0x26        # 0xfffdc2a5
  00f2a:    	jne    0x2d318
  00f30:    	mov    esi,DWORD PTR [rip+0x81e]        # 0x1754
  00f36:    	cmp    esi,0xffffffff
  00f39:    	je     0x2d341
  00f3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00f44:    	jne    0xf5d
  00f4a:    	cmp    esi,0x6
  00f4d:    	jge    0xf5d
  00f53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f58:    	jmp    0xfab
  00f5d:    	sub    rsp,0x30
  00f61:    	movq   QWORD PTR [rsp],xmm2
  00f66:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f6c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f72:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f78:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f7e: f6 	movabs rax,0x55f67a69e160
  00f88:    	call   rax
  00f8a:    	movq   xmm2,QWORD PTR [rsp]
  00f8f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f95:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f9b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fa1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00fa7:    	add    rsp,0x30
  00fab: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [Float][Float]
  00fb2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00fb9: 00 	test   rdi,0x1
  00fc0:    	jne    0x2d3ac
  00fc6: 00 	test   rdi,0x2
  00fcd:    	je     0x1009
  00fd3:    	xorps  xmm3,xmm3
  00fd6: 00 	movabs rax,0x8000000000000002
  00fe0:    	cmp    rdi,rax
  00fe3:    	je     0x101b
  00fe9:    	mov    rax,rdi
  00fec:    	sar    rax,0x3f
  00ff0:    	add    rax,0x2
  00ff4:    	and    rdi,0xfffffffffffffffc
  00ff8:    	or     rdi,rax
  00ffb:    	rol    rdi,0x3d
  00fff:    	movq   xmm3,rdi
  01004:    	jmp    0x101b
  01009:    	call   0xfffd8f7c
  0100e:    	test   rax,rax
  01011:    	je     0x2d3ac
  01017:    	movq   xmm3,xmm0
  0101b:    	mulsd  xmm3,xmm6
:00084 %10 = %10 + %11                      [Float][Float]
  0101f:    	mov    rdi,QWORD PTR [r14-0x80]
  01023: 00 	test   rdi,0x1
  0102a:    	jne    0x2d3d5
  01030: 00 	test   rdi,0x2
  01037:    	je     0x1074
  0103d:    	xorps  xmm8,xmm8
  01041: 00 	movabs rax,0x8000000000000002
  0104b:    	cmp    rdi,rax
  0104e:    	je     0x1087
  01054:    	mov    rax,rdi
  01057:    	sar    rax,0x3f
  0105b:    	add    rax,0x2
  0105f:    	and    rdi,0xfffffffffffffffc
  01063:    	or     rdi,rax
  01066:    	rol    rdi,0x3d
  0106a:    	movq   xmm8,rdi
  0106f:    	jmp    0x1087
  01074:    	call   0xfffd8f7c
  01079:    	test   rax,rax
  0107c:    	je     0x2d3d5
  01082:    	movq   xmm8,xmm0
  01087:    	addsd  xmm8,xmm3
:00085 %12 = %1.call org()                  [Ray]
  0108c:    	mov    rdi,QWORD PTR [r14-0x38]
  01090: 00 	test   rdi,0x7
  01097:    	jne    0x2d40e
  0109d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  010a1:    	jne    0x2d40e
  010a7: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb1f7],0x26        # 0xfffdc2a5
  010ae:    	jne    0x2d40e
  010b4:    	mov    esi,DWORD PTR [rip+0x6a2]        # 0x175c
  010ba:    	cmp    esi,0xffffffff
  010bd:    	je     0x2d455
  010c3:    	cmp    WORD PTR [rdi+0x2],0x3
  010c8:    	jne    0x10e1
  010ce:    	cmp    esi,0x6
  010d1:    	jge    0x10e1
  010d7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010dc:    	jmp    0x1149
  010e1:    	sub    rsp,0x40
  010e5:    	movq   QWORD PTR [rsp],xmm2
  010ea:    	movq   QWORD PTR [rsp+0x8],xmm3
  010f0:    	movq   QWORD PTR [rsp+0x10],xmm4
  010f6:    	movq   QWORD PTR [rsp+0x18],xmm5
  010fc:    	movq   QWORD PTR [rsp+0x20],xmm6
  01102:    	movq   QWORD PTR [rsp+0x28],xmm7
  01108: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0110f: f6 	movabs rax,0x55f67a69e160
  01119:    	call   rax
  0111b:    	movq   xmm2,QWORD PTR [rsp]
  01120:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01126:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0112c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01132:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01138:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0113e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01145:    	add    rsp,0x40
  01149: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  01150: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01157: 00 	test   rdi,0x7
  0115e:    	jne    0x2d4da
  01164:    	cmp    DWORD PTR [rdi+0x4],0x28
  01168:    	jne    0x2d4da
  0116e: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb130],0x26        # 0xfffdc2a5
  01175:    	jne    0x2d4da
  0117b:    	mov    esi,DWORD PTR [rip+0x5e3]        # 0x1764
  01181:    	cmp    esi,0xffffffff
  01184:    	je     0x2d511
  0118a:    	cmp    WORD PTR [rdi+0x2],0x3
  0118f:    	jne    0x11a8
  01195:    	cmp    esi,0x6
  01198:    	jge    0x11a8
  0119e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011a3:    	jmp    0x1204
  011a8:    	sub    rsp,0x30
  011ac:    	movq   QWORD PTR [rsp],xmm2
  011b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  011b7:    	movq   QWORD PTR [rsp+0x10],xmm5
  011bd:    	movq   QWORD PTR [rsp+0x18],xmm6
  011c3:    	movq   QWORD PTR [rsp+0x20],xmm7
  011c9: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011d0: f6 	movabs rax,0x55f67a69e160
  011da:    	call   rax
  011dc:    	movq   xmm2,QWORD PTR [rsp]
  011e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011e7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011ed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011f3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011f9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01200:    	add    rsp,0x30
  01204: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  0120b:    	mov    rdi,QWORD PTR [r14-0x38]
  0120f: 00 	test   rdi,0x7
  01216:    	jne    0x2d58a
  0121c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01220:    	jne    0x2d58a
  01226: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb078],0x26        # 0xfffdc2a5
  0122d:    	jne    0x2d58a
  01233:    	mov    esi,DWORD PTR [rip+0x533]        # 0x176c
  01239:    	cmp    esi,0xffffffff
  0123c:    	je     0x2d5c1
  01242:    	cmp    WORD PTR [rdi+0x2],0x3
  01247:    	jne    0x1260
  0124d:    	cmp    esi,0x6
  01250:    	jge    0x1260
  01256:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0125b:    	jmp    0x12bc
  01260:    	sub    rsp,0x30
  01264:    	movq   QWORD PTR [rsp],xmm2
  01269:    	movq   QWORD PTR [rsp+0x8],xmm4
  0126f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01275:    	movq   QWORD PTR [rsp+0x18],xmm6
  0127b:    	movq   QWORD PTR [rsp+0x20],xmm7
  01281: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01288: f6 	movabs rax,0x55f67a69e160
  01292:    	call   rax
  01294:    	movq   xmm2,QWORD PTR [rsp]
  01299:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0129f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012a5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012ab:    	movq   xmm7,QWORD PTR [rsp+0x20]
  012b1: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  012b8:    	add    rsp,0x30
  012bc: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  012c3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012ca: 00 	test   rdi,0x7
  012d1:    	jne    0x2d63a
  012d7:    	cmp    DWORD PTR [rdi+0x4],0x28
  012db:    	jne    0x2d63a
  012e1: 26 	cmp    DWORD PTR [rip+0xfffffffffffdafbd],0x26        # 0xfffdc2a5
  012e8:    	jne    0x2d63a
  012ee:    	mov    esi,DWORD PTR [rip+0x480]        # 0x1774
  012f4:    	cmp    esi,0xffffffff
  012f7:    	je     0x2d671
  012fd:    	cmp    WORD PTR [rdi+0x2],0x3
  01302:    	jne    0x131b
  01308:    	cmp    esi,0x6
  0130b:    	jge    0x131b
  01311:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01316:    	jmp    0x1377
  0131b:    	sub    rsp,0x30
  0131f:    	movq   QWORD PTR [rsp],xmm2
  01324:    	movq   QWORD PTR [rsp+0x8],xmm4
  0132a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01330:    	movq   QWORD PTR [rsp+0x18],xmm6
  01336:    	movq   QWORD PTR [rsp+0x20],xmm7
  0133c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01343: f6 	movabs rax,0x55f67a69e160
  0134d:    	call   rax
  0134f:    	movq   xmm2,QWORD PTR [rsp]
  01354:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0135a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01360:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01366:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0136c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01373:    	add    rsp,0x30
  01377: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [Float][Float]
  0137e: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01385: 00 	test   rdi,0x1
  0138c:    	jne    0x2d6ea
  01392: 00 	test   rdi,0x2
  01399:    	je     0x13d5
  0139f:    	xorps  xmm3,xmm3
  013a2: 00 	movabs rax,0x8000000000000002
  013ac:    	cmp    rdi,rax
  013af:    	je     0x13e7
  013b5:    	mov    rax,rdi
  013b8:    	sar    rax,0x3f
  013bc:    	add    rax,0x2
  013c0:    	and    rdi,0xfffffffffffffffc
  013c4:    	or     rdi,rax
  013c7:    	rol    rdi,0x3d
  013cb:    	movq   xmm3,rdi
  013d0:    	jmp    0x13e7
  013d5:    	call   0xfffd8f7c
  013da:    	test   rax,rax
  013dd:    	je     0x2d6ea
  013e3:    	movq   xmm3,xmm0
  013e7:    	mulsd  xmm3,xmm6
:00098 %11 = %11 + %12                      [Float][Float]
  013eb: ff 	mov    rdi,QWORD PTR [r14-0x88]
  013f2: 00 	test   rdi,0x1
  013f9:    	jne    0x2d721
  013ff: 00 	test   rdi,0x2
  01406:    	je     0x1443
  0140c:    	xorps  xmm9,xmm9
  01410: 00 	movabs rax,0x8000000000000002
  0141a:    	cmp    rdi,rax
  0141d:    	je     0x1456
  01423:    	mov    rax,rdi
  01426:    	sar    rax,0x3f
  0142a:    	add    rax,0x2
  0142e:    	and    rdi,0xfffffffffffffffc
  01432:    	or     rdi,rax
  01435:    	rol    rdi,0x3d
  01439:    	movq   xmm9,rdi
  0143e:    	jmp    0x1456
  01443:    	call   0xfffd8f7c
  01448:    	test   rax,rax
  0144b:    	je     0x2d721
  01451:    	movq   xmm9,xmm0
  01456:    	addsd  xmm9,xmm3
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  0145b:    	movq   xmm0,xmm7
  0145f:    	call   0xfffd90a0
  01464:    	mov    QWORD PTR [r14-0x78],rax
  01468:    	movq   xmm0,xmm8
  0146d:    	call   0xfffd90a0
  01472:    	mov    QWORD PTR [r14-0x80],rax
  01476:    	movq   xmm0,xmm9
  0147b:    	call   0xfffd90a0
  01480: ff 	mov    QWORD PTR [r14-0x88],rax
  01487:    	mov    rdi,QWORD PTR [r14-0x70]
  0148b: 00 	test   rdi,0x7
  01492:    	jne    0x2d768
  01498:    	cmp    DWORD PTR [rdi+0x4],0x29
  0149c:    	jne    0x2d768
  014a2: 26 	cmp    DWORD PTR [rip+0xfffffffffffdadfc],0x26        # 0xfffdc2a5
  014a9:    	jne    0x2d768
  014af: 00 	mov    r9,0x0
  014b6:    	sub    rsp,0x40
  014ba:    	movq   QWORD PTR [rsp],xmm2
  014bf:    	movq   QWORD PTR [rsp+0x8],xmm3
  014c5:    	movq   QWORD PTR [rsp+0x10],xmm4
  014cb:    	movq   QWORD PTR [rsp+0x18],xmm5
  014d1:    	movq   QWORD PTR [rsp+0x20],xmm6
  014d7:    	movq   QWORD PTR [rsp+0x28],xmm7
  014dd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014e4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014eb:    	mov    rdx,rdi
  014ee:    	mov    QWORD PTR [rsp-0x40],rcx
  014f3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014fc:    	lea    rcx,[r14-0x78]
  01500: 00 	mov    r8,0x3
  01507:    	mov    rsi,QWORD PTR [rbx]
  0150a:    	mov    QWORD PTR [rsp-0x18],rsi
  0150f:    	lea    rsi,[rsp-0x18]
  01514:    	mov    QWORD PTR [rbx],rsi
  01517:    	lea    r14,[rsp-0x10]
  0151c:    	mov    QWORD PTR [rsp-0x20],r14
  01521:    	call   0x2d794
  01526:    	lea    r14,[rbp-0x8]
  0152a:    	mov    QWORD PTR [rbx],r14
  0152d:    	mov    r14,QWORD PTR [rbp-0x10]
  01531:    	movq   xmm2,QWORD PTR [rsp]
  01536:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0153c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01542:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01548:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0154e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01554: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0155b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01562:    	add    rsp,0x40
  01566: f6 	movabs r13,0x55f67b870e50
  01570:    	test   rax,rax
  01573:    	je     0xfffd8f23
  01579:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  0157d:    	mov    rdi,QWORD PTR [r14-0x40]
  01581: 00 	test   rdi,0x7
  01588:    	jne    0x2d7c6
  0158e:    	cmp    DWORD PTR [rdi+0x4],0x30
  01592:    	jne    0x2d7c6
  01598: 26 	cmp    DWORD PTR [rip+0xfffffffffffdad06],0x26        # 0xfffdc2a5
  0159f:    	jne    0x2d7c6
  015a5:    	mov    esi,DWORD PTR [rip+0x1d1]        # 0x177c
  015ab:    	cmp    esi,0xffffffff
  015ae:    	je     0x2d7f2
  015b4:    	cmp    WORD PTR [rdi+0x2],0x3
  015b9:    	jne    0x15d6
  015bf:    	cmp    esi,0x6
  015c2:    	jge    0x15d6
  015c8:    	mov    rax,QWORD PTR [r14-0x68]
  015cc:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  015d1:    	jmp    0x1663
  015d6:    	sub    rsp,0x40
  015da:    	movq   QWORD PTR [rsp],xmm2
  015df:    	movq   QWORD PTR [rsp+0x8],xmm3
  015e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  015eb:    	movq   QWORD PTR [rsp+0x18],xmm5
  015f1:    	movq   QWORD PTR [rsp+0x20],xmm6
  015f7:    	movq   QWORD PTR [rsp+0x28],xmm7
  015fd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01604: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0160b:    	mov    rdx,QWORD PTR [r14-0x68]
  0160f: f6 	movabs rax,0x55f67a69e3e0
  01619:    	call   rax
  0161b:    	movq   xmm2,QWORD PTR [rsp]
  01620:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01626:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0162c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01632:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01638:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0163e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01645: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0164c:    	add    rsp,0x40
  01650: f6 	movabs r13,0x55f67b870e80
  0165a:    	test   rax,rax
  0165d:    	je     0xfffd8f23
:00103 
:00105 br =>:00106
  01663:    	jmp    0x2d8e5
:00106 %7 = nil
  01668: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01670:    	mov    rax,QWORD PTR [r14-0x68]
  01674:    	leave  
  01675:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55f67b88d6a0
<== finished compile. elapsed:129.6µs
offset:Pos(166032) code: 7519 bytes  data: 301 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2c19b
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x2c1aa
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x2c1aa
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdaad0]        # 0xfffdab30
  00060: 00 	cmp    rax,QWORD PTR [rip+0x1d09]        # 0x1d70
  00067:    	jne    0x2c1b9
  0006d: 00 	mov    rax,QWORD PTR [rip+0x1cec]        # 0x1d60
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x2c1ff
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x2c1ff
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffdaa8b],0x26        # 0xfffdab25
  0009a:    	jne    0x2c1ff
  000a0:    	mov    esi,DWORD PTR [rip+0x1cd6]        # 0x1d7c
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x2c20e
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: f6 	movabs rax,0x55f67a69e160
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x2c237
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x2c237
  000f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffdaa26],0x26        # 0xfffdab25
  000ff:    	jne    0x2c237
  00105:    	mov    esi,DWORD PTR [rip+0x1c79]        # 0x1d84
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x2c246
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: f6 	movabs rax,0x55f67a69e160
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x2c26f
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x2c26f
  0015d: 26 	cmp    DWORD PTR [rip+0xfffffffffffda9c1],0x26        # 0xfffdab25
  00164:    	jne    0x2c26f
  0016a:    	mov    esi,DWORD PTR [rip+0x1c1c]        # 0x1d8c
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x2c27e
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: f6 	movabs rax,0x55f67a69e160
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x2c2a7
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x2c2a7
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffda95c],0x26        # 0xfffdab25
  001c9:    	jne    0x2c2a7
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x2c2b6
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: f6 	movabs r13,0x55f67b88d780
  00226:    	test   rax,rax
  00229:    	je     0xfffd77a3
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdx,QWORD PTR [r14-0x38]
  00237:    	mov    rcx,QWORD PTR [r14-0x48]
  0023b:    	mov    r8,QWORD PTR [r14-0x50]
  0023f:    	mov    rdi,rbx
  00242:    	mov    rsi,r12
  00245: f6 	movabs rax,0x55f67a71b750
  0024f:    	call   rax
  00251: f6 	movabs r13,0x55f67b88d7a0
  0025b:    	test   rax,rax
  0025e:    	je     0xfffd77a3
:00016 %3 = 1: i32
  00264: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  0026c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffda8bd]        # 0xfffdab30
  00273: 00 	cmp    rax,QWORD PTR [rip+0x1b26]        # 0x1da0
  0027a:    	jne    0x2c2e8
  00280: 00 	mov    rax,QWORD PTR [rip+0x1b09]        # 0x1d90
  00287:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  0028b: 00 	movq   xmm2,QWORD PTR [rip+0x1b1d]        # 0x1db0
  00293: 00 	movabs rax,0x8000000000000002
  0029d:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002a1: 00 	movq   xmm3,QWORD PTR [rip+0x1b17]        # 0x1dc0
  002a9: 00 	movabs rax,0x8000000000000002
  002b3:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002b7: 00 	movq   xmm4,QWORD PTR [rip+0x1b11]        # 0x1dd0
  002bf: 00 	movabs rax,0x8000000000000002
  002c9:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002cd:    	mov    rdi,QWORD PTR [r14-0x58]
  002d1: 00 	test   rdi,0x7
  002d8:    	jne    0x2c32e
  002de:    	cmp    DWORD PTR [rdi+0x4],0x29
  002e2:    	jne    0x2c32e
  002e8: 26 	cmp    DWORD PTR [rip+0xfffffffffffda836],0x26        # 0xfffdab25
  002ef:    	jne    0x2c32e
  002f5: 00 	mov    r9,0x0
  002fc:    	sub    rsp,0x20
  00300:    	movq   QWORD PTR [rsp],xmm2
  00305:    	movq   QWORD PTR [rsp+0x8],xmm3
  0030b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00311:    	mov    rdx,rdi
  00314:    	mov    QWORD PTR [rsp-0x40],rcx
  00319: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00322:    	lea    rcx,[r14-0x60]
  00326: 00 	mov    r8,0x3
  0032d:    	mov    rsi,QWORD PTR [rbx]
  00330:    	mov    QWORD PTR [rsp-0x18],rsi
  00335:    	lea    rsi,[rsp-0x18]
  0033a:    	mov    QWORD PTR [rbx],rsi
  0033d:    	lea    r14,[rsp-0x10]
  00342:    	mov    QWORD PTR [rsp-0x20],r14
  00347:    	call   0x2c33d
  0034c:    	lea    r14,[rbp-0x8]
  00350:    	mov    QWORD PTR [rbx],r14
  00353:    	mov    r14,QWORD PTR [rbp-0x10]
  00357:    	movq   xmm2,QWORD PTR [rsp]
  0035c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00362:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00368:    	add    rsp,0x20
  0036c: f6 	movabs r13,0x55f67b88d810
  00376:    	test   rax,rax
  00379:    	je     0xfffd77a3
  0037f:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  00383:    	sub    rsp,0x20
  00387:    	movq   QWORD PTR [rsp],xmm2
  0038c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00392:    	movq   QWORD PTR [rsp+0x10],xmm4
  00398:    	mov    rdx,QWORD PTR [r14-0x38]
  0039c:    	mov    rcx,QWORD PTR [r14-0x48]
  003a0:    	mov    r8,QWORD PTR [r14-0x50]
  003a4:    	mov    rdi,rbx
  003a7:    	mov    rsi,r12
  003aa: f6 	movabs rax,0x55f67a71b750
  003b4:    	call   rax
  003b6:    	movq   xmm2,QWORD PTR [rsp]
  003bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c7:    	add    rsp,0x20
  003cb: f6 	movabs r13,0x55f67b88d830
  003d5:    	test   rax,rax
  003d8:    	je     0xfffd77a3
:00025 %3 = %2.call x()                     [Vec]
  003de:    	mov    rdi,QWORD PTR [r14-0x40]
  003e2: 00 	test   rdi,0x7
  003e9:    	jne    0x2c36f
  003ef:    	cmp    DWORD PTR [rdi+0x4],0x28
  003f3:    	jne    0x2c36f
  003f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffda725],0x26        # 0xfffdab25
  00400:    	jne    0x2c36f
  00406:    	mov    esi,DWORD PTR [rip+0x19d0]        # 0x1ddc
  0040c:    	cmp    esi,0xffffffff
  0040f:    	je     0x2c37e
  00415:    	cmp    WORD PTR [rdi+0x2],0x3
  0041a:    	jne    0x433
  00420:    	cmp    esi,0x6
  00423:    	jge    0x433
  00429:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0042e:    	jmp    0x469
  00433:    	sub    rsp,0x20
  00437:    	movq   QWORD PTR [rsp],xmm2
  0043c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00442:    	movq   QWORD PTR [rsp+0x10],xmm4
  00448: f6 	movabs rax,0x55f67a69e160
  00452:    	call   rax
  00454:    	movq   xmm2,QWORD PTR [rsp]
  00459:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00465:    	add    rsp,0x20
  00469:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  0046d: 00 	movq   xmm5,QWORD PTR [rip+0x196b]        # 0x1de0
  00475: 99 	movabs rax,0xff1999999999999a
  0047f:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00483:    	mov    rdi,QWORD PTR [r14-0x48]
  00487: 00 	test   rdi,0x1
  0048e:    	jne    0x2c3d1
  00494: 00 	test   rdi,0x2
  0049b:    	je     0x4d7
  004a1:    	xorps  xmm6,xmm6
  004a4: 00 	movabs rax,0x8000000000000002
  004ae:    	cmp    rdi,rax
  004b1:    	je     0x4e9
  004b7:    	mov    rax,rdi
  004ba:    	sar    rax,0x3f
  004be:    	add    rax,0x2
  004c2:    	and    rdi,0xfffffffffffffffc
  004c6:    	or     rdi,rax
  004c9:    	rol    rdi,0x3d
  004cd:    	movq   xmm6,rdi
  004d2:    	jmp    0x4e9
  004d7:    	call   0xfffd77fc
  004dc:    	test   rax,rax
  004df:    	je     0x2c3d1
  004e5:    	movq   xmm6,xmm0
  004e9:    	ucomisd xmm6,xmm5
  004ed:    	jae    0x2c4d2
:00031 %3 = %2.call x()                     [Vec]
  004f3:    	mov    rdi,QWORD PTR [r14-0x40]
  004f7: 00 	test   rdi,0x7
  004fe:    	jne    0x2c3e0
  00504:    	cmp    DWORD PTR [rdi+0x4],0x28
  00508:    	jne    0x2c3e0
  0050e: 26 	cmp    DWORD PTR [rip+0xfffffffffffda610],0x26        # 0xfffdab25
  00515:    	jne    0x2c3e0
  0051b:    	mov    esi,DWORD PTR [rip+0x18cb]        # 0x1dec
  00521:    	cmp    esi,0xffffffff
  00524:    	je     0x2c3ef
  0052a:    	cmp    WORD PTR [rdi+0x2],0x3
  0052f:    	jne    0x548
  00535:    	cmp    esi,0x6
  00538:    	jge    0x548
  0053e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00543:    	jmp    0x58a
  00548:    	sub    rsp,0x20
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563: f6 	movabs rax,0x55f67a69e160
  0056d:    	call   rax
  0056f:    	movq   xmm2,QWORD PTR [rsp]
  00574:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0057a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00580:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00586:    	add    rsp,0x20
  0058a:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  0058e: 00 	movq   xmm5,QWORD PTR [rip+0x185a]        # 0x1df0
  00596: 99 	movabs rax,0xff1999999999999e
  005a0:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005a4:    	mov    rdi,QWORD PTR [r14-0x48]
  005a8: 00 	test   rdi,0x1
  005af:    	jne    0x2c44e
  005b5: 00 	test   rdi,0x2
  005bc:    	je     0x5f8
  005c2:    	xorps  xmm6,xmm6
  005c5: 00 	movabs rax,0x8000000000000002
  005cf:    	cmp    rdi,rax
  005d2:    	je     0x60a
  005d8:    	mov    rax,rdi
  005db:    	sar    rax,0x3f
  005df:    	add    rax,0x2
  005e3:    	and    rdi,0xfffffffffffffffc
  005e7:    	or     rdi,rax
  005ea:    	rol    rdi,0x3d
  005ee:    	movq   xmm6,rdi
  005f3:    	jmp    0x60a
  005f8:    	call   0xfffd77fc
  005fd:    	test   rax,rax
  00600:    	je     0x2c44e
  00606:    	movq   xmm6,xmm0
  0060a:    	ucomisd xmm6,xmm5
  0060e:    	jbe    0x2c4eb
:00037 %3 = 1: i32
  00614: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0061c:    	sub    rsp,0x20
  00620:    	movq   QWORD PTR [rsp],xmm2
  00625:    	movq   QWORD PTR [rsp+0x8],xmm3
  0062b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00631:    	movq   QWORD PTR [rsp+0x18],xmm5
  00637:    	mov    rdx,QWORD PTR [r14-0x38]
  0063b:    	mov    rcx,QWORD PTR [r14-0x48]
  0063f:    	mov    rdi,rbx
  00642:    	mov    rsi,r12
  00645: f6 	movabs r8,0x55f67b88d908
  0064f: f6 	movabs rax,0x55f67a71b620
  00659:    	call   rax
  0065b:    	movq   xmm2,QWORD PTR [rsp]
  00660:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00666:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0066c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00672:    	add    rsp,0x20
  00676: f6 	movabs r13,0x55f67b88d910
  00680:    	test   rax,rax
  00683:    	je     0xfffd77a3
  00689:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  0068d: 00 	movq   xmm5,QWORD PTR [rip+0x176b]        # 0x1e00
  00695: 00 	movabs rax,0xff80000000000002
  0069f:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006a3:    	mov    rdi,QWORD PTR [r14-0x48]
  006a7: 00 	test   rdi,0x7
  006ae:    	jne    0x2c45d
  006b4:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b8:    	jne    0x2c45d
  006be: 26 	cmp    DWORD PTR [rip+0xfffffffffffda460],0x26        # 0xfffdab25
  006c5:    	jne    0x2c45d
  006cb:    	mov    esi,DWORD PTR [rip+0x173b]        # 0x1e0c
  006d1:    	cmp    esi,0xffffffff
  006d4:    	je     0x2c46c
  006da:    	cmp    WORD PTR [rdi+0x2],0x3
  006df:    	jne    0x6fc
  006e5:    	cmp    esi,0x6
  006e8:    	jge    0x6fc
  006ee:    	mov    rax,QWORD PTR [r14-0x50]
  006f2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f7:    	jmp    0x755
  006fc:    	sub    rsp,0x20
  00700:    	movq   QWORD PTR [rsp],xmm2
  00705:    	movq   QWORD PTR [rsp+0x8],xmm3
  0070b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00711:    	movq   QWORD PTR [rsp+0x18],xmm5
  00717:    	mov    rdx,QWORD PTR [r14-0x50]
  0071b: f6 	movabs rax,0x55f67a69e3e0
  00725:    	call   rax
  00727:    	movq   xmm2,QWORD PTR [rsp]
  0072c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00732:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00738:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0073e:    	add    rsp,0x20
  00742: f6 	movabs r13,0x55f67b88d940
  0074c:    	test   rax,rax
  0074f:    	je     0xfffd77a3
:00041 
:00043 br =>:00088
  00755:    	jmp    0x2ca97
:00044 %3 = %2.call y()                     [Vec]
  0075a:    	mov    rdi,QWORD PTR [r14-0x40]
  0075e: 00 	test   rdi,0x7
  00765:    	jne    0x2c504
  0076b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0076f:    	jne    0x2c504
  00775: 26 	cmp    DWORD PTR [rip+0xfffffffffffda3a9],0x26        # 0xfffdab25
  0077c:    	jne    0x2c504
  00782:    	mov    esi,DWORD PTR [rip+0x168c]        # 0x1e14
  00788:    	cmp    esi,0xffffffff
  0078b:    	je     0x2c513
  00791:    	cmp    WORD PTR [rdi+0x2],0x3
  00796:    	jne    0x7af
  0079c:    	cmp    esi,0x6
  0079f:    	jge    0x7af
  007a5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007aa:    	jmp    0x7f1
  007af:    	sub    rsp,0x20
  007b3:    	movq   QWORD PTR [rsp],xmm2
  007b8:    	movq   QWORD PTR [rsp+0x8],xmm3
  007be:    	movq   QWORD PTR [rsp+0x10],xmm4
  007c4:    	movq   QWORD PTR [rsp+0x18],xmm5
  007ca: f6 	movabs rax,0x55f67a69e160
  007d4:    	call   rax
  007d6:    	movq   xmm2,QWORD PTR [rsp]
  007db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007ed:    	add    rsp,0x20
  007f1:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  007f5: 00 	movq   xmm5,QWORD PTR [rip+0x1623]        # 0x1e20
  007fd: 99 	movabs rax,0xff1999999999999a
  00807:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  0080b:    	mov    rdi,QWORD PTR [r14-0x48]
  0080f:    	mov    rsi,QWORD PTR [r14-0x50]
  00813: 00 	test   rdi,0x1
  0081a:    	je     0x2c572
  00820: 00 	test   rsi,0x1
  00827:    	je     0x2c572
  0082d:    	cmp    rdi,rsi
  00830:    	jge    0x2c74d
:00050 %3 = %2.call y()                     [<INVALID>]
  00836: 01 	sub    DWORD PTR [rip+0x15eb],0x1        # 0x1e28
  0083d:    	je     0x2c5d6
  00843:    	sub    rsp,0x20
  00847:    	movq   QWORD PTR [rsp],xmm2
  0084c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00852:    	movq   QWORD PTR [rsp+0x10],xmm4
  00858:    	movq   QWORD PTR [rsp+0x18],xmm5
  0085e:    	mov    rdi,QWORD PTR [r14-0x40]
  00862: f6 	movabs rax,0x55f67a7285d0
  0086c:    	call   rax
  0086e:    	mov    r15d,eax
  00871: f6 	movabs r13,0x55f67b88d9d0
  0087b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0087f:    	jne    0x2c5f4
  00885:    	mov    eax,DWORD PTR [rip+0xfffffffffffda29a]        # 0xfffdab25
  0088b:    	cmp    DWORD PTR [r13-0x4],eax
  0088f:    	jne    0x2c5f4
  00895: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0089e:    	mov    rsi,QWORD PTR [rbx]
  008a1:    	mov    QWORD PTR [rsp-0x18],rsi
  008a6:    	lea    rsi,[rsp-0x18]
  008ab:    	mov    QWORD PTR [rbx],rsi
  008ae:    	mov    rax,QWORD PTR [r14-0x40]
  008b2:    	mov    QWORD PTR [rsp-0x40],rax
  008b7: 00 	mov    rdi,0x0
  008be: 00 	mov    QWORD PTR [rsp-0x38],0x0
  008c7:    	lea    r14,[rsp-0x10]
  008cc:    	mov    QWORD PTR [rsp-0x20],r14
  008d1: 00 	movabs rax,0x0
  008db:    	mov    QWORD PTR [rsp-0x30],rax
  008e0: 00 	movabs r13,0x0
  008ea:    	call   0xfffd7770
  008ef:    	lea    r14,[rbp-0x8]
  008f3:    	mov    QWORD PTR [rbx],r14
  008f6:    	mov    r14,QWORD PTR [rbp-0x10]
  008fa:    	movq   xmm2,QWORD PTR [rsp]
  008ff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00905:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0090b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00911:    	add    rsp,0x20
  00915:    	test   rax,rax
  00918:    	je     0x2c667
  0091e:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  00922: 00 	movq   xmm5,QWORD PTR [rip+0x1506]        # 0x1e30
  0092a: 99 	movabs rax,0xff1999999999999e
  00934:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00938:    	mov    rdi,QWORD PTR [r14-0x48]
  0093c:    	mov    rsi,QWORD PTR [r14-0x50]
  00940: 00 	test   rdi,0x1
  00947:    	je     0x2c676
  0094d: 00 	test   rsi,0x1
  00954:    	je     0x2c676
  0095a:    	cmp    rdi,rsi
  0095d:    	jle    0x2c766
:00056 %3 = 1: i32
  00963: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  0096b:    	sub    rsp,0x20
  0096f:    	movq   QWORD PTR [rsp],xmm2
  00974:    	movq   QWORD PTR [rsp+0x8],xmm3
  0097a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00980:    	movq   QWORD PTR [rsp+0x18],xmm5
  00986:    	mov    rdx,QWORD PTR [r14-0x38]
  0098a:    	mov    rcx,QWORD PTR [r14-0x48]
  0098e:    	mov    rdi,rbx
  00991:    	mov    rsi,r12
  00994: f6 	movabs r8,0x55f67b88da38
  0099e: f6 	movabs rax,0x55f67a71b620
  009a8:    	call   rax
  009aa:    	movq   xmm2,QWORD PTR [rsp]
  009af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009c1:    	add    rsp,0x20
  009c5: f6 	movabs r13,0x55f67b88da40
  009cf:    	test   rax,rax
  009d2:    	je     0xfffd77a3
  009d8:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  009dc: 00 	movq   xmm5,QWORD PTR [rip+0x145c]        # 0x1e40
  009e4: 00 	movabs rax,0xff80000000000002
  009ee:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  009f2:    	sub    rsp,0x20
  009f6:    	movq   QWORD PTR [rsp],xmm2
  009fb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a01:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a07:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a0d:    	mov    rdi,QWORD PTR [r14-0x48]
  00a11: f6 	movabs rax,0x55f67a7285d0
  00a1b:    	call   rax
  00a1d:    	mov    r15d,eax
  00a20: f6 	movabs r13,0x55f67b88da60
  00a2a:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a2e:    	jne    0x2c6cb
  00a34:    	mov    eax,DWORD PTR [rip+0xfffffffffffda0eb]        # 0xfffdab25
  00a3a:    	cmp    DWORD PTR [r13-0x4],eax
  00a3e:    	jne    0x2c6cb
  00a44: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a4d:    	mov    rsi,QWORD PTR [rbx]
  00a50:    	mov    QWORD PTR [rsp-0x18],rsi
  00a55:    	lea    rsi,[rsp-0x18]
  00a5a:    	mov    QWORD PTR [rbx],rsi
  00a5d:    	mov    rax,QWORD PTR [r14-0x48]
  00a61:    	mov    QWORD PTR [rsp-0x40],rax
  00a66: 00 	mov    rdi,0x1
  00a6d:    	lea    r8,[rsp-0x48]
  00a72:    	mov    rax,QWORD PTR [r14-0x50]
  00a76:    	mov    QWORD PTR [r8],rax
  00a79:    	sub    r8,0x8
  00a7d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a86:    	lea    r14,[rsp-0x10]
  00a8b:    	mov    QWORD PTR [rsp-0x20],r14
  00a90: 00 	movabs rax,0x0
  00a9a:    	mov    QWORD PTR [rsp-0x30],rax
  00a9f: 00 	movabs r13,0x0
  00aa9:    	call   0xfffd7770
  00aae:    	lea    r14,[rbp-0x8]
  00ab2:    	mov    QWORD PTR [rbx],r14
  00ab5:    	mov    r14,QWORD PTR [rbp-0x10]
  00ab9:    	movq   xmm2,QWORD PTR [rsp]
  00abe:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ac4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00aca:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ad0:    	add    rsp,0x20
  00ad4:    	test   rax,rax
  00ad7:    	je     0x2c73e
:00060 
:00062 br =>:00088
  00add:    	jmp    0x2cab0
:00063 %3 = %2.call z()                     [Vec]
  00ae2:    	mov    rdi,QWORD PTR [r14-0x40]
  00ae6: 00 	test   rdi,0x7
  00aed:    	jne    0x2c77f
  00af3:    	cmp    DWORD PTR [rdi+0x4],0x28
  00af7:    	jne    0x2c77f
  00afd: 26 	cmp    DWORD PTR [rip+0xfffffffffffda021],0x26        # 0xfffdab25
  00b04:    	jne    0x2c77f
  00b0a:    	mov    esi,DWORD PTR [rip+0x133c]        # 0x1e4c
  00b10:    	cmp    esi,0xffffffff
  00b13:    	je     0x2c78e
  00b19:    	cmp    WORD PTR [rdi+0x2],0x3
  00b1e:    	jne    0xb37
  00b24:    	cmp    esi,0x6
  00b27:    	jge    0xb37
  00b2d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b32:    	jmp    0xb79
  00b37:    	sub    rsp,0x20
  00b3b:    	movq   QWORD PTR [rsp],xmm2
  00b40:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b46:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b4c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b52: f6 	movabs rax,0x55f67a69e160
  00b5c:    	call   rax
  00b5e:    	movq   xmm2,QWORD PTR [rsp]
  00b63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b75:    	add    rsp,0x20
  00b79:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00b7d: 00 	movq   xmm5,QWORD PTR [rip+0x12cb]        # 0x1e50
  00b85: 99 	movabs rax,0xff1999999999999a
  00b8f:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00b93:    	mov    rdi,QWORD PTR [r14-0x48]
  00b97:    	mov    rsi,QWORD PTR [r14-0x50]
  00b9b: 00 	test   rdi,0x1
  00ba2:    	je     0x2c7ed
  00ba8: 00 	test   rsi,0x1
  00baf:    	je     0x2c7ed
  00bb5:    	cmp    rdi,rsi
  00bb8:    	jge    0x2c97a
:00069 %3 = %2.call z()                     [Vec]
  00bbe:    	mov    rdi,QWORD PTR [r14-0x40]
  00bc2: 00 	test   rdi,0x7
  00bc9:    	jne    0x2c842
  00bcf:    	cmp    DWORD PTR [rdi+0x4],0x28
  00bd3:    	jne    0x2c842
  00bd9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9f45],0x26        # 0xfffdab25
  00be0:    	jne    0x2c842
  00be6:    	mov    esi,DWORD PTR [rip+0x1270]        # 0x1e5c
  00bec:    	cmp    esi,0xffffffff
  00bef:    	je     0x2c851
  00bf5:    	cmp    WORD PTR [rdi+0x2],0x3
  00bfa:    	jne    0xc13
  00c00:    	cmp    esi,0x6
  00c03:    	jge    0xc13
  00c09:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c0e:    	jmp    0xc55
  00c13:    	sub    rsp,0x20
  00c17:    	movq   QWORD PTR [rsp],xmm2
  00c1c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c22:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c28:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c2e: f6 	movabs rax,0x55f67a69e160
  00c38:    	call   rax
  00c3a:    	movq   xmm2,QWORD PTR [rsp]
  00c3f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c45:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c4b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c51:    	add    rsp,0x20
  00c55:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00c59: 00 	movq   xmm5,QWORD PTR [rip+0x11ff]        # 0x1e60
  00c61: 99 	movabs rax,0xff1999999999999e
  00c6b:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00c6f:    	mov    rdi,QWORD PTR [r14-0x48]
  00c73:    	mov    rsi,QWORD PTR [r14-0x50]
  00c77: 00 	test   rdi,0x1
  00c7e:    	je     0x2c8b0
  00c84: 00 	test   rsi,0x1
  00c8b:    	je     0x2c8b0
  00c91:    	cmp    rdi,rsi
  00c94:    	jle    0x2c993
:00075 %3 = 1: i32
  00c9a: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00ca2:    	sub    rsp,0x20
  00ca6:    	movq   QWORD PTR [rsp],xmm2
  00cab:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb1:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cb7:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cbd:    	mov    rdx,QWORD PTR [r14-0x38]
  00cc1:    	mov    rcx,QWORD PTR [r14-0x48]
  00cc5:    	mov    rdi,rbx
  00cc8:    	mov    rsi,r12
  00ccb: f6 	movabs r8,0x55f67b88db68
  00cd5: f6 	movabs rax,0x55f67a71b620
  00cdf:    	call   rax
  00ce1:    	movq   xmm2,QWORD PTR [rsp]
  00ce6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cec:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cf2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cf8:    	add    rsp,0x20
  00cfc: f6 	movabs r13,0x55f67b88db70
  00d06:    	test   rax,rax
  00d09:    	je     0xfffd77a3
  00d0f:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00d13: 00 	movq   xmm5,QWORD PTR [rip+0x1155]        # 0x1e70
  00d1b: 00 	movabs rax,0xff80000000000002
  00d25:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00d29:    	mov    rdi,QWORD PTR [r14-0x48]
  00d2d: 00 	test   rdi,0x7
  00d34:    	jne    0x2c905
  00d3a:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d3e:    	jne    0x2c905
  00d44: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9dda],0x26        # 0xfffdab25
  00d4b:    	jne    0x2c905
  00d51:    	mov    esi,DWORD PTR [rip+0x1125]        # 0x1e7c
  00d57:    	cmp    esi,0xffffffff
  00d5a:    	je     0x2c914
  00d60:    	cmp    WORD PTR [rdi+0x2],0x3
  00d65:    	jne    0xd82
  00d6b:    	cmp    esi,0x6
  00d6e:    	jge    0xd82
  00d74:    	mov    rax,QWORD PTR [r14-0x50]
  00d78:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00d7d:    	jmp    0xddb
  00d82:    	sub    rsp,0x20
  00d86:    	movq   QWORD PTR [rsp],xmm2
  00d8b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d91:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d97:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d9d:    	mov    rdx,QWORD PTR [r14-0x50]
  00da1: f6 	movabs rax,0x55f67a69e3e0
  00dab:    	call   rax
  00dad:    	movq   xmm2,QWORD PTR [rsp]
  00db2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00db8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dbe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dc4:    	add    rsp,0x20
  00dc8: f6 	movabs r13,0x55f67b88dba0
  00dd2:    	test   rax,rax
  00dd5:    	je     0xfffd77a3
:00079 
:00081 br =>:00088
  00ddb:    	jmp    0x2cac9
:00082 %3 = 1: i32
  00de0: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00de8:    	sub    rsp,0x20
  00dec:    	movq   QWORD PTR [rsp],xmm2
  00df1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dfd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e03:    	mov    rdx,QWORD PTR [r14-0x38]
  00e07:    	mov    rcx,QWORD PTR [r14-0x48]
  00e0b:    	mov    rdi,rbx
  00e0e:    	mov    rsi,r12
  00e11: f6 	movabs r8,0x55f67b88dbd8
  00e1b: f6 	movabs rax,0x55f67a71b620
  00e25:    	call   rax
  00e27:    	movq   xmm2,QWORD PTR [rsp]
  00e2c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e32:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e38:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e3e:    	add    rsp,0x20
  00e42: f6 	movabs r13,0x55f67b88dbe0
  00e4c:    	test   rax,rax
  00e4f:    	je     0xfffd77a3
  00e55:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00e59: 00 	movq   xmm5,QWORD PTR [rip+0x101f]        # 0x1e80
  00e61: 00 	movabs rax,0xff80000000000002
  00e6b:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00e6f: 01 	sub    DWORD PTR [rip+0x1012],0x1        # 0x1e88
  00e76:    	je     0x2c9bb
  00e7c:    	sub    rsp,0x20
  00e80:    	movq   QWORD PTR [rsp],xmm2
  00e85:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e8b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e91:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e97:    	mov    rdi,QWORD PTR [r14-0x48]
  00e9b: f6 	movabs rax,0x55f67a7285d0
  00ea5:    	call   rax
  00ea7:    	mov    r15d,eax
  00eaa: f6 	movabs r13,0x55f67b88dc00
  00eb4:    	cmp    r15d,DWORD PTR [r13-0x8]
  00eb8:    	jne    0x2c9d9
  00ebe:    	mov    eax,DWORD PTR [rip+0xfffffffffffd9c61]        # 0xfffdab25
  00ec4:    	cmp    DWORD PTR [r13-0x4],eax
  00ec8:    	jne    0x2c9d9
  00ece: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ed7:    	mov    rsi,QWORD PTR [rbx]
  00eda:    	mov    QWORD PTR [rsp-0x18],rsi
  00edf:    	lea    rsi,[rsp-0x18]
  00ee4:    	mov    QWORD PTR [rbx],rsi
  00ee7:    	mov    rax,QWORD PTR [r14-0x48]
  00eeb:    	mov    QWORD PTR [rsp-0x40],rax
  00ef0: 00 	mov    rdi,0x1
  00ef7:    	lea    r8,[rsp-0x48]
  00efc:    	mov    rax,QWORD PTR [r14-0x50]
  00f00:    	mov    QWORD PTR [r8],rax
  00f03:    	sub    r8,0x8
  00f07: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f10:    	lea    r14,[rsp-0x10]
  00f15:    	mov    QWORD PTR [rsp-0x20],r14
  00f1a: 00 	movabs rax,0x0
  00f24:    	mov    QWORD PTR [rsp-0x30],rax
  00f29: 00 	movabs r13,0x0
  00f33:    	call   0xfffd7770
  00f38:    	lea    r14,[rbp-0x8]
  00f3c:    	mov    QWORD PTR [rbx],r14
  00f3f:    	mov    r14,QWORD PTR [rbp-0x10]
  00f43:    	movq   xmm2,QWORD PTR [rsp]
  00f48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f5a:    	add    rsp,0x20
  00f5e:    	test   rax,rax
  00f61:    	je     0x2ca4c
:00086 
:00088 %3 = 0: i32
  00f67: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  00f6f: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  00f77:    	sub    rsp,0x20
  00f7b:    	movq   QWORD PTR [rsp],xmm2
  00f80:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f86:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f8c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f92:    	mov    rdx,QWORD PTR [r14-0x38]
  00f96:    	mov    rcx,QWORD PTR [r14-0x58]
  00f9a:    	mov    rdi,rbx
  00f9d:    	mov    rsi,r12
  00fa0: f6 	movabs r8,0x55f67b88dc48
  00faa: f6 	movabs rax,0x55f67a71b620
  00fb4:    	call   rax
  00fb6:    	movq   xmm2,QWORD PTR [rsp]
  00fbb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fc1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fc7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fcd:    	add    rsp,0x20
  00fd1: f6 	movabs r13,0x55f67b88dc50
  00fdb:    	test   rax,rax
  00fde:    	je     0xfffd77a3
  00fe4:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  00fe8: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  00ff0:    	sub    rsp,0x20
  00ff4:    	movq   QWORD PTR [rsp],xmm3
  00ff9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fff:    	movq   QWORD PTR [rsp+0x10],xmm5
  01005:    	mov    rdx,QWORD PTR [r14-0x38]
  01009:    	mov    rcx,QWORD PTR [r14-0x60]
  0100d:    	mov    rdi,rbx
  01010:    	mov    rsi,r12
  01013: f6 	movabs r8,0x55f67b88dc68
  0101d: f6 	movabs rax,0x55f67a71b620
  01027:    	call   rax
  01029:    	movq   xmm3,QWORD PTR [rsp]
  0102e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01034:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0103a:    	add    rsp,0x20
  0103e: f6 	movabs r13,0x55f67b88dc70
  01048:    	test   rax,rax
  0104b:    	je     0xfffd77a3
  01051:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01055:    	mov    rdi,QWORD PTR [r14-0x58]
  01059: 00 	test   rdi,0x7
  01060:    	jne    0x2ca5b
  01066:    	cmp    DWORD PTR [rdi+0x4],0x28
  0106a:    	jne    0x2ca5b
  01070: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9aae],0x26        # 0xfffdab25
  01077:    	jne    0x2ca5b
  0107d:    	sub    rsp,0x10
  01081:    	movq   QWORD PTR [rsp],xmm3
  01086:    	movq   QWORD PTR [rsp+0x8],xmm4
  0108c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01095:    	mov    rax,QWORD PTR [r14-0x58]
  01099:    	mov    QWORD PTR [rsp-0x40],rax
  0109e: 00 	mov    rdi,0x1
  010a5:    	lea    r8,[rsp-0x48]
  010aa:    	mov    rax,QWORD PTR [r14-0x60]
  010ae:    	mov    QWORD PTR [r8],rax
  010b1:    	sub    r8,0x8
  010b5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010be: 09 	movabs rax,0x900000041
  010c8:    	mov    QWORD PTR [rsp-0x30],rax
  010cd: f6 	movabs r13,0x55f67b86c170
  010d7:    	mov    rsi,QWORD PTR [rbx]
  010da:    	mov    QWORD PTR [rsp-0x18],rsi
  010df:    	lea    rsi,[rsp-0x18]
  010e4:    	mov    QWORD PTR [rbx],rsi
  010e7:    	lea    r14,[rsp-0x10]
  010ec:    	mov    QWORD PTR [rsp-0x20],r14
  010f1:    	call   0xfffe47df
  010f6:    	lea    r14,[rbp-0x8]
  010fa:    	mov    QWORD PTR [rbx],r14
  010fd:    	mov    r14,QWORD PTR [rbp-0x10]
  01101:    	movq   xmm3,QWORD PTR [rsp]
  01106:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0110c:    	add    rsp,0x10
  01110: f6 	movabs r13,0x55f67b88dc90
  0111a:    	test   rax,rax
  0111d:    	je     0xfffd77a3
  01123:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01127:    	sub    rsp,0x10
  0112b:    	movq   QWORD PTR [rsp],xmm3
  01130:    	movq   QWORD PTR [rsp+0x8],xmm4
  01136:    	mov    rdx,QWORD PTR [r14-0x38]
  0113a:    	mov    rcx,QWORD PTR [r14-0x48]
  0113e:    	mov    r8,QWORD PTR [r14-0x50]
  01142:    	mov    rdi,rbx
  01145:    	mov    rsi,r12
  01148: f6 	movabs rax,0x55f67a71b750
  01152:    	call   rax
  01154:    	movq   xmm3,QWORD PTR [rsp]
  01159:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0115f:    	add    rsp,0x10
  01163: f6 	movabs r13,0x55f67b88dcb0
  0116d:    	test   rax,rax
  01170:    	je     0xfffd77a3
:00097 %3 = 0: i32
  01176: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  0117e: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01186:    	sub    rsp,0x10
  0118a:    	movq   QWORD PTR [rsp],xmm3
  0118f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01195:    	mov    rdx,QWORD PTR [r14-0x38]
  01199:    	mov    rcx,QWORD PTR [r14-0x58]
  0119d:    	mov    rdi,rbx
  011a0:    	mov    rsi,r12
  011a3: f6 	movabs r8,0x55f67b88dcd8
  011ad: f6 	movabs rax,0x55f67a71b620
  011b7:    	call   rax
  011b9:    	movq   xmm3,QWORD PTR [rsp]
  011be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c4:    	add    rsp,0x10
  011c8: f6 	movabs r13,0x55f67b88dce0
  011d2:    	test   rax,rax
  011d5:    	je     0xfffd77a3
  011db:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  011df:    	mov    rdi,QWORD PTR [r14-0x58]
  011e3: 00 	test   rdi,0x7
  011ea:    	jne    0x2ca6a
  011f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  011f4:    	jne    0x2ca6a
  011fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9924],0x26        # 0xfffdab25
  01201:    	jne    0x2ca6a
  01207:    	sub    rsp,0x10
  0120b:    	movq   QWORD PTR [rsp],xmm3
  01210:    	movq   QWORD PTR [rsp+0x8],xmm4
  01216: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0121f:    	mov    rax,QWORD PTR [r14-0x58]
  01223:    	mov    QWORD PTR [rsp-0x40],rax
  01228: 00 	mov    rdi,0x0
  0122f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01238: 07 	movabs rax,0x1000700000044
  01242:    	mov    QWORD PTR [rsp-0x30],rax
  01247: f6 	movabs r13,0x55f67b84eec0
  01251:    	mov    rsi,QWORD PTR [rbx]
  01254:    	mov    QWORD PTR [rsp-0x18],rsi
  01259:    	lea    rsi,[rsp-0x18]
  0125e:    	mov    QWORD PTR [rbx],rsi
  01261:    	lea    r14,[rsp-0x10]
  01266:    	mov    QWORD PTR [rsp-0x20],r14
  0126b:    	call   0xfffdb42c
  01270:    	lea    r14,[rbp-0x8]
  01274:    	mov    QWORD PTR [rbx],r14
  01277:    	mov    r14,QWORD PTR [rbp-0x10]
  0127b:    	movq   xmm3,QWORD PTR [rsp]
  01280:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01286:    	add    rsp,0x10
  0128a: f6 	movabs r13,0x55f67b88dd00
  01294:    	test   rax,rax
  01297:    	je     0xfffd77a3
  0129d:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  012a1:    	sub    rsp,0x10
  012a5:    	movq   QWORD PTR [rsp],xmm3
  012aa:    	movq   QWORD PTR [rsp+0x8],xmm4
  012b0:    	mov    rdx,QWORD PTR [r14-0x38]
  012b4:    	mov    rcx,QWORD PTR [r14-0x48]
  012b8:    	mov    r8,QWORD PTR [r14-0x50]
  012bc:    	mov    rdi,rbx
  012bf:    	mov    rsi,r12
  012c2: f6 	movabs rax,0x55f67a71b750
  012cc:    	call   rax
  012ce:    	movq   xmm3,QWORD PTR [rsp]
  012d3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d9:    	add    rsp,0x10
  012dd: f6 	movabs r13,0x55f67b88dd20
  012e7:    	test   rax,rax
  012ea:    	je     0xfffd77a3
:00104 %3 = 1: i32
  012f0: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  012f8: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01300:    	sub    rsp,0x10
  01304:    	movq   QWORD PTR [rsp],xmm3
  01309:    	movq   QWORD PTR [rsp+0x8],xmm4
  0130f:    	mov    rdx,QWORD PTR [r14-0x38]
  01313:    	mov    rcx,QWORD PTR [r14-0x58]
  01317:    	mov    rdi,rbx
  0131a:    	mov    rsi,r12
  0131d: f6 	movabs r8,0x55f67b88dd48
  01327: f6 	movabs rax,0x55f67a71b620
  01331:    	call   rax
  01333:    	movq   xmm3,QWORD PTR [rsp]
  01338:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0133e:    	add    rsp,0x10
  01342: f6 	movabs r13,0x55f67b88dd50
  0134c:    	test   rax,rax
  0134f:    	je     0xfffd77a3
  01355:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01359: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01361:    	sub    rsp,0x10
  01365:    	movq   QWORD PTR [rsp],xmm3
  0136a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01370:    	mov    rdx,QWORD PTR [r14-0x38]
  01374:    	mov    rcx,QWORD PTR [r14-0x60]
  01378:    	mov    rdi,rbx
  0137b:    	mov    rsi,r12
  0137e: f6 	movabs r8,0x55f67b88dd68
  01388: f6 	movabs rax,0x55f67a71b620
  01392:    	call   rax
  01394:    	movq   xmm3,QWORD PTR [rsp]
  01399:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0139f:    	add    rsp,0x10
  013a3: f6 	movabs r13,0x55f67b88dd70
  013ad:    	test   rax,rax
  013b0:    	je     0xfffd77a3
  013b6:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  013ba:    	mov    rdi,QWORD PTR [r14-0x58]
  013be: 00 	test   rdi,0x7
  013c5:    	jne    0x2ca79
  013cb:    	cmp    DWORD PTR [rdi+0x4],0x28
  013cf:    	jne    0x2ca79
  013d5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9749],0x26        # 0xfffdab25
  013dc:    	jne    0x2ca79
  013e2:    	sub    rsp,0x10
  013e6:    	movq   QWORD PTR [rsp],xmm3
  013eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  013f1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013fa:    	mov    rax,QWORD PTR [r14-0x58]
  013fe:    	mov    QWORD PTR [rsp-0x40],rax
  01403: 00 	mov    rdi,0x1
  0140a:    	lea    r8,[rsp-0x48]
  0140f:    	mov    rax,QWORD PTR [r14-0x60]
  01413:    	mov    QWORD PTR [r8],rax
  01416:    	sub    r8,0x8
  0141a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01423: 09 	movabs rax,0x900000041
  0142d:    	mov    QWORD PTR [rsp-0x30],rax
  01432: f6 	movabs r13,0x55f67b86c170
  0143c:    	mov    rsi,QWORD PTR [rbx]
  0143f:    	mov    QWORD PTR [rsp-0x18],rsi
  01444:    	lea    rsi,[rsp-0x18]
  01449:    	mov    QWORD PTR [rbx],rsi
  0144c:    	lea    r14,[rsp-0x10]
  01451:    	mov    QWORD PTR [rsp-0x20],r14
  01456:    	call   0xfffe47df
  0145b:    	lea    r14,[rbp-0x8]
  0145f:    	mov    QWORD PTR [rbx],r14
  01462:    	mov    r14,QWORD PTR [rbp-0x10]
  01466:    	movq   xmm3,QWORD PTR [rsp]
  0146b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01471:    	add    rsp,0x10
  01475: f6 	movabs r13,0x55f67b88dd90
  0147f:    	test   rax,rax
  01482:    	je     0xfffd77a3
  01488:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  0148c:    	sub    rsp,0x10
  01490:    	movq   QWORD PTR [rsp],xmm3
  01495:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149b:    	mov    rdx,QWORD PTR [r14-0x38]
  0149f:    	mov    rcx,QWORD PTR [r14-0x48]
  014a3:    	mov    r8,QWORD PTR [r14-0x50]
  014a7:    	mov    rdi,rbx
  014aa:    	mov    rsi,r12
  014ad: f6 	movabs rax,0x55f67a71b750
  014b7:    	call   rax
  014b9:    	movq   xmm3,QWORD PTR [rsp]
  014be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014c4:    	add    rsp,0x10
  014c8: f6 	movabs r13,0x55f67b88ddb0
  014d2:    	test   rax,rax
  014d5:    	je     0xfffd77a3
:00113 %3 = 1: i32
  014db: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  014e3: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  014eb:    	sub    rsp,0x10
  014ef:    	movq   QWORD PTR [rsp],xmm3
  014f4:    	movq   QWORD PTR [rsp+0x8],xmm4
  014fa:    	mov    rdx,QWORD PTR [r14-0x38]
  014fe:    	mov    rcx,QWORD PTR [r14-0x58]
  01502:    	mov    rdi,rbx
  01505:    	mov    rsi,r12
  01508: f6 	movabs r8,0x55f67b88ddd8
  01512: f6 	movabs rax,0x55f67a71b620
  0151c:    	call   rax
  0151e:    	movq   xmm3,QWORD PTR [rsp]
  01523:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01529:    	add    rsp,0x10
  0152d: f6 	movabs r13,0x55f67b88dde0
  01537:    	test   rax,rax
  0153a:    	je     0xfffd77a3
  01540:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01544:    	mov    rdi,QWORD PTR [r14-0x58]
  01548: 00 	test   rdi,0x7
  0154f:    	jne    0x2ca88
  01555:    	cmp    DWORD PTR [rdi+0x4],0x28
  01559:    	jne    0x2ca88
  0155f: 26 	cmp    DWORD PTR [rip+0xfffffffffffd95bf],0x26        # 0xfffdab25
  01566:    	jne    0x2ca88
  0156c:    	sub    rsp,0x10
  01570:    	movq   QWORD PTR [rsp],xmm3
  01575:    	movq   QWORD PTR [rsp+0x8],xmm4
  0157b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01584:    	mov    rax,QWORD PTR [r14-0x58]
  01588:    	mov    QWORD PTR [rsp-0x40],rax
  0158d: 00 	mov    rdi,0x0
  01594: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0159d: 07 	movabs rax,0x1000700000044
  015a7:    	mov    QWORD PTR [rsp-0x30],rax
  015ac: f6 	movabs r13,0x55f67b84eec0
  015b6:    	mov    rsi,QWORD PTR [rbx]
  015b9:    	mov    QWORD PTR [rsp-0x18],rsi
  015be:    	lea    rsi,[rsp-0x18]
  015c3:    	mov    QWORD PTR [rbx],rsi
  015c6:    	lea    r14,[rsp-0x10]
  015cb:    	mov    QWORD PTR [rsp-0x20],r14
  015d0:    	call   0xfffdb42c
  015d5:    	lea    r14,[rbp-0x8]
  015d9:    	mov    QWORD PTR [rbx],r14
  015dc:    	mov    r14,QWORD PTR [rbp-0x10]
  015e0:    	movq   xmm3,QWORD PTR [rsp]
  015e5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015eb:    	add    rsp,0x10
  015ef: f6 	movabs r13,0x55f67b88de00
  015f9:    	test   rax,rax
  015fc:    	je     0xfffd77a3
  01602:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01606:    	sub    rsp,0x10
  0160a:    	movq   QWORD PTR [rsp],xmm3
  0160f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01615:    	mov    rdx,QWORD PTR [r14-0x38]
  01619:    	mov    rcx,QWORD PTR [r14-0x48]
  0161d:    	mov    r8,QWORD PTR [r14-0x50]
  01621:    	mov    rdi,rbx
  01624:    	mov    rsi,r12
  01627: f6 	movabs rax,0x55f67a71b750
  01631:    	call   rax
  01633:    	movq   xmm3,QWORD PTR [rsp]
  01638:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0163e:    	add    rsp,0x10
  01642: f6 	movabs r13,0x55f67b88de20
  0164c:    	test   rax,rax
  0164f:    	je     0xfffd77a3
:00120 %3 = %4
  01655:    	mov    rax,QWORD PTR [r14-0x50]
  01659:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  0165d:    	mov    rax,QWORD PTR [r14-0x48]
  01661:    	leave  
  01662:    	ret    
:00088 %3 = 0: i32
  01663: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  0166b: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01673:    	sub    rsp,0x20
  01677:    	movq   QWORD PTR [rsp],xmm2
  0167c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01682:    	movq   QWORD PTR [rsp+0x10],xmm4
  01688:    	movq   QWORD PTR [rsp+0x18],xmm5
  0168e:    	mov    rdx,QWORD PTR [r14-0x38]
  01692:    	mov    rcx,QWORD PTR [r14-0x58]
  01696:    	mov    rdi,rbx
  01699:    	mov    rsi,r12
  0169c: f6 	movabs r8,0x55f67b88dc48
  016a6: f6 	movabs rax,0x55f67a71b620
  016b0:    	call   rax
  016b2:    	movq   xmm2,QWORD PTR [rsp]
  016b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016c9:    	add    rsp,0x20
  016cd: f6 	movabs r13,0x55f67b88dc50
  016d7:    	test   rax,rax
  016da:    	je     0xfffd77a3
  016e0:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  016e4: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  016ec:    	sub    rsp,0x20
  016f0:    	movq   QWORD PTR [rsp],xmm3
  016f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  016fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01701:    	mov    rdx,QWORD PTR [r14-0x38]
  01705:    	mov    rcx,QWORD PTR [r14-0x60]
  01709:    	mov    rdi,rbx
  0170c:    	mov    rsi,r12
  0170f: f6 	movabs r8,0x55f67b88dc68
  01719: f6 	movabs rax,0x55f67a71b620
  01723:    	call   rax
  01725:    	movq   xmm3,QWORD PTR [rsp]
  0172a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01730:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01736:    	add    rsp,0x20
  0173a: f6 	movabs r13,0x55f67b88dc70
  01744:    	test   rax,rax
  01747:    	je     0xfffd77a3
  0174d:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01751:    	mov    rdi,QWORD PTR [r14-0x58]
  01755: 00 	test   rdi,0x7
  0175c:    	jne    0x2cae2
  01762:    	cmp    DWORD PTR [rdi+0x4],0x28
  01766:    	jne    0x2cae2
  0176c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd93b2],0x26        # 0xfffdab25
  01773:    	jne    0x2cae2
  01779:    	sub    rsp,0x10
  0177d:    	movq   QWORD PTR [rsp],xmm3
  01782:    	movq   QWORD PTR [rsp+0x8],xmm4
  01788: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01791:    	mov    rax,QWORD PTR [r14-0x58]
  01795:    	mov    QWORD PTR [rsp-0x40],rax
  0179a: 00 	mov    rdi,0x1
  017a1:    	lea    r8,[rsp-0x48]
  017a6:    	mov    rax,QWORD PTR [r14-0x60]
  017aa:    	mov    QWORD PTR [r8],rax
  017ad:    	sub    r8,0x8
  017b1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017ba: 09 	movabs rax,0x900000041
  017c4:    	mov    QWORD PTR [rsp-0x30],rax
  017c9: f6 	movabs r13,0x55f67b86c170
  017d3:    	mov    rsi,QWORD PTR [rbx]
  017d6:    	mov    QWORD PTR [rsp-0x18],rsi
  017db:    	lea    rsi,[rsp-0x18]
  017e0:    	mov    QWORD PTR [rbx],rsi
  017e3:    	lea    r14,[rsp-0x10]
  017e8:    	mov    QWORD PTR [rsp-0x20],r14
  017ed:    	call   0xfffe47df
  017f2:    	lea    r14,[rbp-0x8]
  017f6:    	mov    QWORD PTR [rbx],r14
  017f9:    	mov    r14,QWORD PTR [rbp-0x10]
  017fd:    	movq   xmm3,QWORD PTR [rsp]
  01802:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01808:    	add    rsp,0x10
  0180c: f6 	movabs r13,0x55f67b88dc90
  01816:    	test   rax,rax
  01819:    	je     0xfffd77a3
  0181f:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01823:    	sub    rsp,0x10
  01827:    	movq   QWORD PTR [rsp],xmm3
  0182c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01832:    	mov    rdx,QWORD PTR [r14-0x38]
  01836:    	mov    rcx,QWORD PTR [r14-0x48]
  0183a:    	mov    r8,QWORD PTR [r14-0x50]
  0183e:    	mov    rdi,rbx
  01841:    	mov    rsi,r12
  01844: f6 	movabs rax,0x55f67a71b750
  0184e:    	call   rax
  01850:    	movq   xmm3,QWORD PTR [rsp]
  01855:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0185b:    	add    rsp,0x10
  0185f: f6 	movabs r13,0x55f67b88dcb0
  01869:    	test   rax,rax
  0186c:    	je     0xfffd77a3
:00097 %3 = 0: i32
  01872: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  0187a: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01882:    	sub    rsp,0x10
  01886:    	movq   QWORD PTR [rsp],xmm3
  0188b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01891:    	mov    rdx,QWORD PTR [r14-0x38]
  01895:    	mov    rcx,QWORD PTR [r14-0x58]
  01899:    	mov    rdi,rbx
  0189c:    	mov    rsi,r12
  0189f: f6 	movabs r8,0x55f67b88dcd8
  018a9: f6 	movabs rax,0x55f67a71b620
  018b3:    	call   rax
  018b5:    	movq   xmm3,QWORD PTR [rsp]
  018ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018c0:    	add    rsp,0x10
  018c4: f6 	movabs r13,0x55f67b88dce0
  018ce:    	test   rax,rax
  018d1:    	je     0xfffd77a3
  018d7:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  018db:    	mov    rdi,QWORD PTR [r14-0x58]
  018df: 00 	test   rdi,0x7
  018e6:    	jne    0x2caf1
  018ec:    	cmp    DWORD PTR [rdi+0x4],0x28
  018f0:    	jne    0x2caf1
  018f6: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9228],0x26        # 0xfffdab25
  018fd:    	jne    0x2caf1
  01903:    	sub    rsp,0x10
  01907:    	movq   QWORD PTR [rsp],xmm3
  0190c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01912: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0191b:    	mov    rax,QWORD PTR [r14-0x58]
  0191f:    	mov    QWORD PTR [rsp-0x40],rax
  01924: 00 	mov    rdi,0x0
  0192b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01934: 07 	movabs rax,0x1000700000044
  0193e:    	mov    QWORD PTR [rsp-0x30],rax
  01943: f6 	movabs r13,0x55f67b84eec0
  0194d:    	mov    rsi,QWORD PTR [rbx]
  01950:    	mov    QWORD PTR [rsp-0x18],rsi
  01955:    	lea    rsi,[rsp-0x18]
  0195a:    	mov    QWORD PTR [rbx],rsi
  0195d:    	lea    r14,[rsp-0x10]
  01962:    	mov    QWORD PTR [rsp-0x20],r14
  01967:    	call   0xfffdb42c
  0196c:    	lea    r14,[rbp-0x8]
  01970:    	mov    QWORD PTR [rbx],r14
  01973:    	mov    r14,QWORD PTR [rbp-0x10]
  01977:    	movq   xmm3,QWORD PTR [rsp]
  0197c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01982:    	add    rsp,0x10
  01986: f6 	movabs r13,0x55f67b88dd00
  01990:    	test   rax,rax
  01993:    	je     0xfffd77a3
  01999:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  0199d:    	sub    rsp,0x10
  019a1:    	movq   QWORD PTR [rsp],xmm3
  019a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ac:    	mov    rdx,QWORD PTR [r14-0x38]
  019b0:    	mov    rcx,QWORD PTR [r14-0x48]
  019b4:    	mov    r8,QWORD PTR [r14-0x50]
  019b8:    	mov    rdi,rbx
  019bb:    	mov    rsi,r12
  019be: f6 	movabs rax,0x55f67a71b750
  019c8:    	call   rax
  019ca:    	movq   xmm3,QWORD PTR [rsp]
  019cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019d5:    	add    rsp,0x10
  019d9: f6 	movabs r13,0x55f67b88dd20
  019e3:    	test   rax,rax
  019e6:    	je     0xfffd77a3
:00104 %3 = 1: i32
  019ec: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  019f4: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  019fc:    	sub    rsp,0x10
  01a00:    	movq   QWORD PTR [rsp],xmm3
  01a05:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a0b:    	mov    rdx,QWORD PTR [r14-0x38]
  01a0f:    	mov    rcx,QWORD PTR [r14-0x58]
  01a13:    	mov    rdi,rbx
  01a16:    	mov    rsi,r12
  01a19: f6 	movabs r8,0x55f67b88dd48
  01a23: f6 	movabs rax,0x55f67a71b620
  01a2d:    	call   rax
  01a2f:    	movq   xmm3,QWORD PTR [rsp]
  01a34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a3a:    	add    rsp,0x10
  01a3e: f6 	movabs r13,0x55f67b88dd50
  01a48:    	test   rax,rax
  01a4b:    	je     0xfffd77a3
  01a51:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01a55: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01a5d:    	sub    rsp,0x10
  01a61:    	movq   QWORD PTR [rsp],xmm3
  01a66:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a6c:    	mov    rdx,QWORD PTR [r14-0x38]
  01a70:    	mov    rcx,QWORD PTR [r14-0x60]
  01a74:    	mov    rdi,rbx
  01a77:    	mov    rsi,r12
  01a7a: f6 	movabs r8,0x55f67b88dd68
  01a84: f6 	movabs rax,0x55f67a71b620
  01a8e:    	call   rax
  01a90:    	movq   xmm3,QWORD PTR [rsp]
  01a95:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a9b:    	add    rsp,0x10
  01a9f: f6 	movabs r13,0x55f67b88dd70
  01aa9:    	test   rax,rax
  01aac:    	je     0xfffd77a3
  01ab2:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01ab6:    	mov    rdi,QWORD PTR [r14-0x58]
  01aba: 00 	test   rdi,0x7
  01ac1:    	jne    0x2cb00
  01ac7:    	cmp    DWORD PTR [rdi+0x4],0x28
  01acb:    	jne    0x2cb00
  01ad1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd904d],0x26        # 0xfffdab25
  01ad8:    	jne    0x2cb00
  01ade:    	sub    rsp,0x10
  01ae2:    	movq   QWORD PTR [rsp],xmm3
  01ae7:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aed: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01af6:    	mov    rax,QWORD PTR [r14-0x58]
  01afa:    	mov    QWORD PTR [rsp-0x40],rax
  01aff: 00 	mov    rdi,0x1
  01b06:    	lea    r8,[rsp-0x48]
  01b0b:    	mov    rax,QWORD PTR [r14-0x60]
  01b0f:    	mov    QWORD PTR [r8],rax
  01b12:    	sub    r8,0x8
  01b16: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b1f: 09 	movabs rax,0x900000041
  01b29:    	mov    QWORD PTR [rsp-0x30],rax
  01b2e: f6 	movabs r13,0x55f67b86c170
  01b38:    	mov    rsi,QWORD PTR [rbx]
  01b3b:    	mov    QWORD PTR [rsp-0x18],rsi
  01b40:    	lea    rsi,[rsp-0x18]
  01b45:    	mov    QWORD PTR [rbx],rsi
  01b48:    	lea    r14,[rsp-0x10]
  01b4d:    	mov    QWORD PTR [rsp-0x20],r14
  01b52:    	call   0xfffe47df
  01b57:    	lea    r14,[rbp-0x8]
  01b5b:    	mov    QWORD PTR [rbx],r14
  01b5e:    	mov    r14,QWORD PTR [rbp-0x10]
  01b62:    	movq   xmm3,QWORD PTR [rsp]
  01b67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b6d:    	add    rsp,0x10
  01b71: f6 	movabs r13,0x55f67b88dd90
  01b7b:    	test   rax,rax
  01b7e:    	je     0xfffd77a3
  01b84:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01b88:    	sub    rsp,0x10
  01b8c:    	movq   QWORD PTR [rsp],xmm3
  01b91:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b97:    	mov    rdx,QWORD PTR [r14-0x38]
  01b9b:    	mov    rcx,QWORD PTR [r14-0x48]
  01b9f:    	mov    r8,QWORD PTR [r14-0x50]
  01ba3:    	mov    rdi,rbx
  01ba6:    	mov    rsi,r12
  01ba9: f6 	movabs rax,0x55f67a71b750
  01bb3:    	call   rax
  01bb5:    	movq   xmm3,QWORD PTR [rsp]
  01bba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bc0:    	add    rsp,0x10
  01bc4: f6 	movabs r13,0x55f67b88ddb0
  01bce:    	test   rax,rax
  01bd1:    	je     0xfffd77a3
:00113 %3 = 1: i32
  01bd7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01bdf: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01be7:    	sub    rsp,0x10
  01beb:    	movq   QWORD PTR [rsp],xmm3
  01bf0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bf6:    	mov    rdx,QWORD PTR [r14-0x38]
  01bfa:    	mov    rcx,QWORD PTR [r14-0x58]
  01bfe:    	mov    rdi,rbx
  01c01:    	mov    rsi,r12
  01c04: f6 	movabs r8,0x55f67b88ddd8
  01c0e: f6 	movabs rax,0x55f67a71b620
  01c18:    	call   rax
  01c1a:    	movq   xmm3,QWORD PTR [rsp]
  01c1f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c25:    	add    rsp,0x10
  01c29: f6 	movabs r13,0x55f67b88dde0
  01c33:    	test   rax,rax
  01c36:    	je     0xfffd77a3
  01c3c:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c40:    	mov    rdi,QWORD PTR [r14-0x58]
  01c44: 00 	test   rdi,0x7
  01c4b:    	jne    0x2cb0f
  01c51:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c55:    	jne    0x2cb0f
  01c5b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8ec3],0x26        # 0xfffdab25
  01c62:    	jne    0x2cb0f
  01c68:    	sub    rsp,0x10
  01c6c:    	movq   QWORD PTR [rsp],xmm3
  01c71:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c77: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c80:    	mov    rax,QWORD PTR [r14-0x58]
  01c84:    	mov    QWORD PTR [rsp-0x40],rax
  01c89: 00 	mov    rdi,0x0
  01c90: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c99: 07 	movabs rax,0x1000700000044
  01ca3:    	mov    QWORD PTR [rsp-0x30],rax
  01ca8: f6 	movabs r13,0x55f67b84eec0
  01cb2:    	mov    rsi,QWORD PTR [rbx]
  01cb5:    	mov    QWORD PTR [rsp-0x18],rsi
  01cba:    	lea    rsi,[rsp-0x18]
  01cbf:    	mov    QWORD PTR [rbx],rsi
  01cc2:    	lea    r14,[rsp-0x10]
  01cc7:    	mov    QWORD PTR [rsp-0x20],r14
  01ccc:    	call   0xfffdb42c
  01cd1:    	lea    r14,[rbp-0x8]
  01cd5:    	mov    QWORD PTR [rbx],r14
  01cd8:    	mov    r14,QWORD PTR [rbp-0x10]
  01cdc:    	movq   xmm3,QWORD PTR [rsp]
  01ce1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ce7:    	add    rsp,0x10
  01ceb: f6 	movabs r13,0x55f67b88de00
  01cf5:    	test   rax,rax
  01cf8:    	je     0xfffd77a3
  01cfe:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01d02:    	sub    rsp,0x10
  01d06:    	movq   QWORD PTR [rsp],xmm3
  01d0b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d11:    	mov    rdx,QWORD PTR [r14-0x38]
  01d15:    	mov    rcx,QWORD PTR [r14-0x48]
  01d19:    	mov    r8,QWORD PTR [r14-0x50]
  01d1d:    	mov    rdi,rbx
  01d20:    	mov    rsi,r12
  01d23: f6 	movabs rax,0x55f67a71b750
  01d2d:    	call   rax
  01d2f:    	movq   xmm3,QWORD PTR [rsp]
  01d34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d3a:    	add    rsp,0x10
  01d3e: f6 	movabs r13,0x55f67b88de20
  01d48:    	test   rax,rax
  01d4b:    	je     0xfffd77a3
:00120 %3 = %4
  01d51:    	mov    rax,QWORD PTR [r14-0x50]
  01d55:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  01d59:    	mov    rax,QWORD PTR [r14-0x48]
  01d5d:    	leave  
  01d5e:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55f67b88d6a0
<== finished compile. elapsed:129.1µs
offset:Pos(173852) code: 7588 bytes  data: 316 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x2ac92
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x2aca1
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x2aca1
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd8c44]        # 0xfffd8ca4
  00060: 00 	cmp    rax,QWORD PTR [rip+0x1d4d]        # 0x1db4
  00067:    	jne    0x2acb0
  0006d: 00 	mov    rax,QWORD PTR [rip+0x1d30]        # 0x1da4
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x2acf6
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x2acf6
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8bff],0x26        # 0xfffd8c99
  0009a:    	jne    0x2acf6
  000a0:    	mov    esi,DWORD PTR [rip+0x1d1a]        # 0x1dc0
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x2ad05
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: f6 	movabs rax,0x55f67a69e160
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x2ad2e
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x2ad2e
  000f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8b9a],0x26        # 0xfffd8c99
  000ff:    	jne    0x2ad2e
  00105:    	mov    esi,DWORD PTR [rip+0x1cbd]        # 0x1dc8
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x2ad3d
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: f6 	movabs rax,0x55f67a69e160
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x2ad66
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x2ad66
  0015d: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8b35],0x26        # 0xfffd8c99
  00164:    	jne    0x2ad66
  0016a:    	mov    esi,DWORD PTR [rip+0x1c60]        # 0x1dd0
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x2ad75
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: f6 	movabs rax,0x55f67a69e160
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x2ad9e
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x2ad9e
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8ad0],0x26        # 0xfffd8c99
  001c9:    	jne    0x2ad9e
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x2adad
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: f6 	movabs r13,0x55f67b88d780
  00226:    	test   rax,rax
  00229:    	je     0xfffd5917
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdx,QWORD PTR [r14-0x38]
  00237:    	mov    rcx,QWORD PTR [r14-0x48]
  0023b:    	mov    r8,QWORD PTR [r14-0x50]
  0023f:    	mov    rdi,rbx
  00242:    	mov    rsi,r12
  00245: f6 	movabs rax,0x55f67a71b750
  0024f:    	call   rax
  00251: f6 	movabs r13,0x55f67b88d7a0
  0025b:    	test   rax,rax
  0025e:    	je     0xfffd5917
:00016 %3 = 1: i32
  00264: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  0026c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd8a31]        # 0xfffd8ca4
  00273: 00 	cmp    rax,QWORD PTR [rip+0x1b6a]        # 0x1de4
  0027a:    	jne    0x2addf
  00280: 00 	mov    rax,QWORD PTR [rip+0x1b4d]        # 0x1dd4
  00287:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  0028b: 00 	movq   xmm2,QWORD PTR [rip+0x1b61]        # 0x1df4
  00293: 00 	movabs rax,0x8000000000000002
  0029d:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002a1: 00 	movq   xmm3,QWORD PTR [rip+0x1b5b]        # 0x1e04
  002a9: 00 	movabs rax,0x8000000000000002
  002b3:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002b7: 00 	movq   xmm4,QWORD PTR [rip+0x1b55]        # 0x1e14
  002bf: 00 	movabs rax,0x8000000000000002
  002c9:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002cd:    	mov    rdi,QWORD PTR [r14-0x58]
  002d1: 00 	test   rdi,0x7
  002d8:    	jne    0x2ae25
  002de:    	cmp    DWORD PTR [rdi+0x4],0x29
  002e2:    	jne    0x2ae25
  002e8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd89aa],0x26        # 0xfffd8c99
  002ef:    	jne    0x2ae25
  002f5: 00 	mov    r9,0x0
  002fc:    	sub    rsp,0x20
  00300:    	movq   QWORD PTR [rsp],xmm2
  00305:    	movq   QWORD PTR [rsp+0x8],xmm3
  0030b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00311:    	mov    rdx,rdi
  00314:    	mov    QWORD PTR [rsp-0x40],rcx
  00319: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00322:    	lea    rcx,[r14-0x60]
  00326: 00 	mov    r8,0x3
  0032d:    	mov    rsi,QWORD PTR [rbx]
  00330:    	mov    QWORD PTR [rsp-0x18],rsi
  00335:    	lea    rsi,[rsp-0x18]
  0033a:    	mov    QWORD PTR [rbx],rsi
  0033d:    	lea    r14,[rsp-0x10]
  00342:    	mov    QWORD PTR [rsp-0x20],r14
  00347:    	call   0x2ae34
  0034c:    	lea    r14,[rbp-0x8]
  00350:    	mov    QWORD PTR [rbx],r14
  00353:    	mov    r14,QWORD PTR [rbp-0x10]
  00357:    	movq   xmm2,QWORD PTR [rsp]
  0035c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00362:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00368:    	add    rsp,0x20
  0036c: f6 	movabs r13,0x55f67b88d810
  00376:    	test   rax,rax
  00379:    	je     0xfffd5917
  0037f:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  00383:    	sub    rsp,0x20
  00387:    	movq   QWORD PTR [rsp],xmm2
  0038c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00392:    	movq   QWORD PTR [rsp+0x10],xmm4
  00398:    	mov    rdx,QWORD PTR [r14-0x38]
  0039c:    	mov    rcx,QWORD PTR [r14-0x48]
  003a0:    	mov    r8,QWORD PTR [r14-0x50]
  003a4:    	mov    rdi,rbx
  003a7:    	mov    rsi,r12
  003aa: f6 	movabs rax,0x55f67a71b750
  003b4:    	call   rax
  003b6:    	movq   xmm2,QWORD PTR [rsp]
  003bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c7:    	add    rsp,0x20
  003cb: f6 	movabs r13,0x55f67b88d830
  003d5:    	test   rax,rax
  003d8:    	je     0xfffd5917
:00025 %3 = %2.call x()                     [Vec]
  003de:    	mov    rdi,QWORD PTR [r14-0x40]
  003e2: 00 	test   rdi,0x7
  003e9:    	jne    0x2ae66
  003ef:    	cmp    DWORD PTR [rdi+0x4],0x28
  003f3:    	jne    0x2ae66
  003f9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8899],0x26        # 0xfffd8c99
  00400:    	jne    0x2ae66
  00406:    	mov    esi,DWORD PTR [rip+0x1a14]        # 0x1e20
  0040c:    	cmp    esi,0xffffffff
  0040f:    	je     0x2ae75
  00415:    	cmp    WORD PTR [rdi+0x2],0x3
  0041a:    	jne    0x433
  00420:    	cmp    esi,0x6
  00423:    	jge    0x433
  00429:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0042e:    	jmp    0x469
  00433:    	sub    rsp,0x20
  00437:    	movq   QWORD PTR [rsp],xmm2
  0043c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00442:    	movq   QWORD PTR [rsp+0x10],xmm4
  00448: f6 	movabs rax,0x55f67a69e160
  00452:    	call   rax
  00454:    	movq   xmm2,QWORD PTR [rsp]
  00459:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00465:    	add    rsp,0x20
  00469:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  0046d: 00 	movq   xmm5,QWORD PTR [rip+0x19af]        # 0x1e24
  00475: 99 	movabs rax,0xff1999999999999a
  0047f:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00483:    	mov    rdi,QWORD PTR [r14-0x48]
  00487: 00 	test   rdi,0x1
  0048e:    	jne    0x2aec8
  00494: 00 	test   rdi,0x2
  0049b:    	je     0x4d7
  004a1:    	xorps  xmm6,xmm6
  004a4: 00 	movabs rax,0x8000000000000002
  004ae:    	cmp    rdi,rax
  004b1:    	je     0x4e9
  004b7:    	mov    rax,rdi
  004ba:    	sar    rax,0x3f
  004be:    	add    rax,0x2
  004c2:    	and    rdi,0xfffffffffffffffc
  004c6:    	or     rdi,rax
  004c9:    	rol    rdi,0x3d
  004cd:    	movq   xmm6,rdi
  004d2:    	jmp    0x4e9
  004d7:    	call   0xfffd5970
  004dc:    	test   rax,rax
  004df:    	je     0x2aec8
  004e5:    	movq   xmm6,xmm0
  004e9:    	ucomisd xmm6,xmm5
  004ed:    	jae    0x2afc9
:00031 %3 = %2.call x()                     [Vec]
  004f3:    	mov    rdi,QWORD PTR [r14-0x40]
  004f7: 00 	test   rdi,0x7
  004fe:    	jne    0x2aed7
  00504:    	cmp    DWORD PTR [rdi+0x4],0x28
  00508:    	jne    0x2aed7
  0050e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8784],0x26        # 0xfffd8c99
  00515:    	jne    0x2aed7
  0051b:    	mov    esi,DWORD PTR [rip+0x190f]        # 0x1e30
  00521:    	cmp    esi,0xffffffff
  00524:    	je     0x2aee6
  0052a:    	cmp    WORD PTR [rdi+0x2],0x3
  0052f:    	jne    0x548
  00535:    	cmp    esi,0x6
  00538:    	jge    0x548
  0053e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00543:    	jmp    0x58a
  00548:    	sub    rsp,0x20
  0054c:    	movq   QWORD PTR [rsp],xmm2
  00551:    	movq   QWORD PTR [rsp+0x8],xmm3
  00557:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00563: f6 	movabs rax,0x55f67a69e160
  0056d:    	call   rax
  0056f:    	movq   xmm2,QWORD PTR [rsp]
  00574:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0057a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00580:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00586:    	add    rsp,0x20
  0058a:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  0058e: 00 	movq   xmm5,QWORD PTR [rip+0x189e]        # 0x1e34
  00596: 99 	movabs rax,0xff1999999999999e
  005a0:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005a4:    	mov    rdi,QWORD PTR [r14-0x48]
  005a8: 00 	test   rdi,0x1
  005af:    	jne    0x2af45
  005b5: 00 	test   rdi,0x2
  005bc:    	je     0x5f8
  005c2:    	xorps  xmm6,xmm6
  005c5: 00 	movabs rax,0x8000000000000002
  005cf:    	cmp    rdi,rax
  005d2:    	je     0x60a
  005d8:    	mov    rax,rdi
  005db:    	sar    rax,0x3f
  005df:    	add    rax,0x2
  005e3:    	and    rdi,0xfffffffffffffffc
  005e7:    	or     rdi,rax
  005ea:    	rol    rdi,0x3d
  005ee:    	movq   xmm6,rdi
  005f3:    	jmp    0x60a
  005f8:    	call   0xfffd5970
  005fd:    	test   rax,rax
  00600:    	je     0x2af45
  00606:    	movq   xmm6,xmm0
  0060a:    	ucomisd xmm6,xmm5
  0060e:    	jbe    0x2afe2
:00037 %3 = 1: i32
  00614: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0061c:    	sub    rsp,0x20
  00620:    	movq   QWORD PTR [rsp],xmm2
  00625:    	movq   QWORD PTR [rsp+0x8],xmm3
  0062b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00631:    	movq   QWORD PTR [rsp+0x18],xmm5
  00637:    	mov    rdx,QWORD PTR [r14-0x38]
  0063b:    	mov    rcx,QWORD PTR [r14-0x48]
  0063f:    	mov    rdi,rbx
  00642:    	mov    rsi,r12
  00645: f6 	movabs r8,0x55f67b88d908
  0064f: f6 	movabs rax,0x55f67a71b620
  00659:    	call   rax
  0065b:    	movq   xmm2,QWORD PTR [rsp]
  00660:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00666:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0066c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00672:    	add    rsp,0x20
  00676: f6 	movabs r13,0x55f67b88d910
  00680:    	test   rax,rax
  00683:    	je     0xfffd5917
  00689:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  0068d: 00 	movq   xmm5,QWORD PTR [rip+0x17af]        # 0x1e44
  00695: 00 	movabs rax,0xff80000000000002
  0069f:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006a3:    	mov    rdi,QWORD PTR [r14-0x48]
  006a7: 00 	test   rdi,0x7
  006ae:    	jne    0x2af54
  006b4:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b8:    	jne    0x2af54
  006be: 26 	cmp    DWORD PTR [rip+0xfffffffffffd85d4],0x26        # 0xfffd8c99
  006c5:    	jne    0x2af54
  006cb:    	mov    esi,DWORD PTR [rip+0x177f]        # 0x1e50
  006d1:    	cmp    esi,0xffffffff
  006d4:    	je     0x2af63
  006da:    	cmp    WORD PTR [rdi+0x2],0x3
  006df:    	jne    0x6fc
  006e5:    	cmp    esi,0x6
  006e8:    	jge    0x6fc
  006ee:    	mov    rax,QWORD PTR [r14-0x50]
  006f2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f7:    	jmp    0x755
  006fc:    	sub    rsp,0x20
  00700:    	movq   QWORD PTR [rsp],xmm2
  00705:    	movq   QWORD PTR [rsp+0x8],xmm3
  0070b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00711:    	movq   QWORD PTR [rsp+0x18],xmm5
  00717:    	mov    rdx,QWORD PTR [r14-0x50]
  0071b: f6 	movabs rax,0x55f67a69e3e0
  00725:    	call   rax
  00727:    	movq   xmm2,QWORD PTR [rsp]
  0072c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00732:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00738:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0073e:    	add    rsp,0x20
  00742: f6 	movabs r13,0x55f67b88d940
  0074c:    	test   rax,rax
  0074f:    	je     0xfffd5917
:00041 
:00043 br =>:00088
  00755:    	jmp    0x2b46e
:00044 %3 = %2.call y()                     [Vec]
  0075a:    	mov    rdi,QWORD PTR [r14-0x40]
  0075e: 00 	test   rdi,0x7
  00765:    	jne    0x2affb
  0076b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0076f:    	jne    0x2affb
  00775: 26 	cmp    DWORD PTR [rip+0xfffffffffffd851d],0x26        # 0xfffd8c99
  0077c:    	jne    0x2affb
  00782:    	mov    esi,DWORD PTR [rip+0x16d0]        # 0x1e58
  00788:    	cmp    esi,0xffffffff
  0078b:    	je     0x2b00a
  00791:    	cmp    WORD PTR [rdi+0x2],0x3
  00796:    	jne    0x7af
  0079c:    	cmp    esi,0x6
  0079f:    	jge    0x7af
  007a5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007aa:    	jmp    0x7f1
  007af:    	sub    rsp,0x20
  007b3:    	movq   QWORD PTR [rsp],xmm2
  007b8:    	movq   QWORD PTR [rsp+0x8],xmm3
  007be:    	movq   QWORD PTR [rsp+0x10],xmm4
  007c4:    	movq   QWORD PTR [rsp+0x18],xmm5
  007ca: f6 	movabs rax,0x55f67a69e160
  007d4:    	call   rax
  007d6:    	movq   xmm2,QWORD PTR [rsp]
  007db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007ed:    	add    rsp,0x20
  007f1:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  007f5: 00 	movq   xmm5,QWORD PTR [rip+0x1667]        # 0x1e64
  007fd: 99 	movabs rax,0xff1999999999999a
  00807:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0080b:    	mov    rdi,QWORD PTR [r14-0x48]
  0080f: 00 	test   rdi,0x1
  00816:    	jne    0x2b069
  0081c: 00 	test   rdi,0x2
  00823:    	je     0x85f
  00829:    	xorps  xmm6,xmm6
  0082c: 00 	movabs rax,0x8000000000000002
  00836:    	cmp    rdi,rax
  00839:    	je     0x871
  0083f:    	mov    rax,rdi
  00842:    	sar    rax,0x3f
  00846:    	add    rax,0x2
  0084a:    	and    rdi,0xfffffffffffffffc
  0084e:    	or     rdi,rax
  00851:    	rol    rdi,0x3d
  00855:    	movq   xmm6,rdi
  0085a:    	jmp    0x871
  0085f:    	call   0xfffd5970
  00864:    	test   rax,rax
  00867:    	je     0x2b069
  0086d:    	movq   xmm6,xmm0
  00871:    	ucomisd xmm6,xmm5
  00875:    	jae    0x2b1b0
:00050 %3 = %2.call y()                     [Vec]
  0087b:    	mov    rdi,QWORD PTR [r14-0x40]
  0087f: 00 	test   rdi,0x7
  00886:    	jne    0x2b078
  0088c:    	cmp    DWORD PTR [rdi+0x4],0x28
  00890:    	jne    0x2b078
  00896: 26 	cmp    DWORD PTR [rip+0xfffffffffffd83fc],0x26        # 0xfffd8c99
  0089d:    	jne    0x2b078
  008a3:    	mov    esi,DWORD PTR [rip+0x15c7]        # 0x1e70
  008a9:    	cmp    esi,0xffffffff
  008ac:    	je     0x2b087
  008b2:    	cmp    WORD PTR [rdi+0x2],0x3
  008b7:    	jne    0x8d0
  008bd:    	cmp    esi,0x6
  008c0:    	jge    0x8d0
  008c6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008cb:    	jmp    0x912
  008d0:    	sub    rsp,0x20
  008d4:    	movq   QWORD PTR [rsp],xmm2
  008d9:    	movq   QWORD PTR [rsp+0x8],xmm3
  008df:    	movq   QWORD PTR [rsp+0x10],xmm4
  008e5:    	movq   QWORD PTR [rsp+0x18],xmm5
  008eb: f6 	movabs rax,0x55f67a69e160
  008f5:    	call   rax
  008f7:    	movq   xmm2,QWORD PTR [rsp]
  008fc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00902:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00908:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0090e:    	add    rsp,0x20
  00912:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  00916: 00 	movq   xmm5,QWORD PTR [rip+0x1556]        # 0x1e74
  0091e: 99 	movabs rax,0xff1999999999999e
  00928:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  0092c:    	mov    rdi,QWORD PTR [r14-0x48]
  00930:    	mov    rsi,QWORD PTR [r14-0x50]
  00934: 00 	test   rdi,0x1
  0093b:    	je     0x2b0e6
  00941: 00 	test   rsi,0x1
  00948:    	je     0x2b0e6
  0094e:    	cmp    rdi,rsi
  00951:    	jle    0x2b1c9
:00056 %3 = 1: i32
  00957: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  0095f:    	sub    rsp,0x20
  00963:    	movq   QWORD PTR [rsp],xmm2
  00968:    	movq   QWORD PTR [rsp+0x8],xmm3
  0096e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00974:    	movq   QWORD PTR [rsp+0x18],xmm5
  0097a:    	mov    rdx,QWORD PTR [r14-0x38]
  0097e:    	mov    rcx,QWORD PTR [r14-0x48]
  00982:    	mov    rdi,rbx
  00985:    	mov    rsi,r12
  00988: f6 	movabs r8,0x55f67b88da38
  00992: f6 	movabs rax,0x55f67a71b620
  0099c:    	call   rax
  0099e:    	movq   xmm2,QWORD PTR [rsp]
  009a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009b5:    	add    rsp,0x20
  009b9: f6 	movabs r13,0x55f67b88da40
  009c3:    	test   rax,rax
  009c6:    	je     0xfffd5917
  009cc:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  009d0: 00 	movq   xmm5,QWORD PTR [rip+0x14ac]        # 0x1e84
  009d8: 00 	movabs rax,0xff80000000000002
  009e2:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [Vec]
  009e6:    	mov    rdi,QWORD PTR [r14-0x48]
  009ea: 00 	test   rdi,0x7
  009f1:    	jne    0x2b13b
  009f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  009fb:    	jne    0x2b13b
  00a01: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8291],0x26        # 0xfffd8c99
  00a08:    	jne    0x2b13b
  00a0e:    	mov    esi,DWORD PTR [rip+0x147c]        # 0x1e90
  00a14:    	cmp    esi,0xffffffff
  00a17:    	je     0x2b14a
  00a1d:    	cmp    WORD PTR [rdi+0x2],0x3
  00a22:    	jne    0xa3f
  00a28:    	cmp    esi,0x6
  00a2b:    	jge    0xa3f
  00a31:    	mov    rax,QWORD PTR [r14-0x50]
  00a35:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00a3a:    	jmp    0xa98
  00a3f:    	sub    rsp,0x20
  00a43:    	movq   QWORD PTR [rsp],xmm2
  00a48:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a4e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a54:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a5a:    	mov    rdx,QWORD PTR [r14-0x50]
  00a5e: f6 	movabs rax,0x55f67a69e3e0
  00a68:    	call   rax
  00a6a:    	movq   xmm2,QWORD PTR [rsp]
  00a6f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a75:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a7b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a81:    	add    rsp,0x20
  00a85: f6 	movabs r13,0x55f67b88da70
  00a8f:    	test   rax,rax
  00a92:    	je     0xfffd5917
:00060 
:00062 br =>:00088
  00a98:    	jmp    0x2b487
:00063 %3 = %2.call z()                     [Vec]
  00a9d:    	mov    rdi,QWORD PTR [r14-0x40]
  00aa1: 00 	test   rdi,0x7
  00aa8:    	jne    0x2b1e2
  00aae:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ab2:    	jne    0x2b1e2
  00ab8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd81da],0x26        # 0xfffd8c99
  00abf:    	jne    0x2b1e2
  00ac5:    	mov    esi,DWORD PTR [rip+0x13cd]        # 0x1e98
  00acb:    	cmp    esi,0xffffffff
  00ace:    	je     0x2b1f1
  00ad4:    	cmp    WORD PTR [rdi+0x2],0x3
  00ad9:    	jne    0xaf2
  00adf:    	cmp    esi,0x6
  00ae2:    	jge    0xaf2
  00ae8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aed:    	jmp    0xb34
  00af2:    	sub    rsp,0x20
  00af6:    	movq   QWORD PTR [rsp],xmm2
  00afb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b01:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b07:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b0d: f6 	movabs rax,0x55f67a69e160
  00b17:    	call   rax
  00b19:    	movq   xmm2,QWORD PTR [rsp]
  00b1e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b24:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b30:    	add    rsp,0x20
  00b34:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00b38: 00 	movq   xmm5,QWORD PTR [rip+0x1364]        # 0x1ea4
  00b40: 99 	movabs rax,0xff1999999999999a
  00b4a:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00b4e:    	mov    rdi,QWORD PTR [r14-0x48]
  00b52: 00 	test   rdi,0x1
  00b59:    	jne    0x2b250
  00b5f: 00 	test   rdi,0x2
  00b66:    	je     0xba2
  00b6c:    	xorps  xmm6,xmm6
  00b6f: 00 	movabs rax,0x8000000000000002
  00b79:    	cmp    rdi,rax
  00b7c:    	je     0xbb4
  00b82:    	mov    rax,rdi
  00b85:    	sar    rax,0x3f
  00b89:    	add    rax,0x2
  00b8d:    	and    rdi,0xfffffffffffffffc
  00b91:    	or     rdi,rax
  00b94:    	rol    rdi,0x3d
  00b98:    	movq   xmm6,rdi
  00b9d:    	jmp    0xbb4
  00ba2:    	call   0xfffd5970
  00ba7:    	test   rax,rax
  00baa:    	je     0x2b250
  00bb0:    	movq   xmm6,xmm0
  00bb4:    	ucomisd xmm6,xmm5
  00bb8:    	jae    0x2b351
:00069 %3 = %2.call z()                     [Vec]
  00bbe:    	mov    rdi,QWORD PTR [r14-0x40]
  00bc2: 00 	test   rdi,0x7
  00bc9:    	jne    0x2b25f
  00bcf:    	cmp    DWORD PTR [rdi+0x4],0x28
  00bd3:    	jne    0x2b25f
  00bd9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd80b9],0x26        # 0xfffd8c99
  00be0:    	jne    0x2b25f
  00be6:    	mov    esi,DWORD PTR [rip+0x12c4]        # 0x1eb0
  00bec:    	cmp    esi,0xffffffff
  00bef:    	je     0x2b26e
  00bf5:    	cmp    WORD PTR [rdi+0x2],0x3
  00bfa:    	jne    0xc13
  00c00:    	cmp    esi,0x6
  00c03:    	jge    0xc13
  00c09:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c0e:    	jmp    0xc55
  00c13:    	sub    rsp,0x20
  00c17:    	movq   QWORD PTR [rsp],xmm2
  00c1c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c22:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c28:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c2e: f6 	movabs rax,0x55f67a69e160
  00c38:    	call   rax
  00c3a:    	movq   xmm2,QWORD PTR [rsp]
  00c3f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c45:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c4b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c51:    	add    rsp,0x20
  00c55:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00c59: 00 	movq   xmm5,QWORD PTR [rip+0x1253]        # 0x1eb4
  00c61: 99 	movabs rax,0xff1999999999999e
  00c6b:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00c6f:    	mov    rdi,QWORD PTR [r14-0x48]
  00c73: 00 	test   rdi,0x1
  00c7a:    	jne    0x2b2cd
  00c80: 00 	test   rdi,0x2
  00c87:    	je     0xcc3
  00c8d:    	xorps  xmm6,xmm6
  00c90: 00 	movabs rax,0x8000000000000002
  00c9a:    	cmp    rdi,rax
  00c9d:    	je     0xcd5
  00ca3:    	mov    rax,rdi
  00ca6:    	sar    rax,0x3f
  00caa:    	add    rax,0x2
  00cae:    	and    rdi,0xfffffffffffffffc
  00cb2:    	or     rdi,rax
  00cb5:    	rol    rdi,0x3d
  00cb9:    	movq   xmm6,rdi
  00cbe:    	jmp    0xcd5
  00cc3:    	call   0xfffd5970
  00cc8:    	test   rax,rax
  00ccb:    	je     0x2b2cd
  00cd1:    	movq   xmm6,xmm0
  00cd5:    	ucomisd xmm6,xmm5
  00cd9:    	jbe    0x2b36a
:00075 %3 = 1: i32
  00cdf: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00ce7:    	sub    rsp,0x20
  00ceb:    	movq   QWORD PTR [rsp],xmm2
  00cf0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cf6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cfc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d02:    	mov    rdx,QWORD PTR [r14-0x38]
  00d06:    	mov    rcx,QWORD PTR [r14-0x48]
  00d0a:    	mov    rdi,rbx
  00d0d:    	mov    rsi,r12
  00d10: f6 	movabs r8,0x55f67b88db68
  00d1a: f6 	movabs rax,0x55f67a71b620
  00d24:    	call   rax
  00d26:    	movq   xmm2,QWORD PTR [rsp]
  00d2b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d31:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d37:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d3d:    	add    rsp,0x20
  00d41: f6 	movabs r13,0x55f67b88db70
  00d4b:    	test   rax,rax
  00d4e:    	je     0xfffd5917
  00d54:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00d58: 00 	movq   xmm5,QWORD PTR [rip+0x1164]        # 0x1ec4
  00d60: 00 	movabs rax,0xff80000000000002
  00d6a:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00d6e:    	mov    rdi,QWORD PTR [r14-0x48]
  00d72: 00 	test   rdi,0x7
  00d79:    	jne    0x2b2dc
  00d7f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d83:    	jne    0x2b2dc
  00d89: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7f09],0x26        # 0xfffd8c99
  00d90:    	jne    0x2b2dc
  00d96:    	mov    esi,DWORD PTR [rip+0x1134]        # 0x1ed0
  00d9c:    	cmp    esi,0xffffffff
  00d9f:    	je     0x2b2eb
  00da5:    	cmp    WORD PTR [rdi+0x2],0x3
  00daa:    	jne    0xdc7
  00db0:    	cmp    esi,0x6
  00db3:    	jge    0xdc7
  00db9:    	mov    rax,QWORD PTR [r14-0x50]
  00dbd:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00dc2:    	jmp    0xe20
  00dc7:    	sub    rsp,0x20
  00dcb:    	movq   QWORD PTR [rsp],xmm2
  00dd0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dd6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ddc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00de2:    	mov    rdx,QWORD PTR [r14-0x50]
  00de6: f6 	movabs rax,0x55f67a69e3e0
  00df0:    	call   rax
  00df2:    	movq   xmm2,QWORD PTR [rsp]
  00df7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dfd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e03:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e09:    	add    rsp,0x20
  00e0d: f6 	movabs r13,0x55f67b88dba0
  00e17:    	test   rax,rax
  00e1a:    	je     0xfffd5917
:00079 
:00081 br =>:00088
  00e20:    	jmp    0x2b4a0
:00082 %3 = 1: i32
  00e25: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e2d:    	sub    rsp,0x20
  00e31:    	movq   QWORD PTR [rsp],xmm2
  00e36:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e3c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e42:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e48:    	mov    rdx,QWORD PTR [r14-0x38]
  00e4c:    	mov    rcx,QWORD PTR [r14-0x48]
  00e50:    	mov    rdi,rbx
  00e53:    	mov    rsi,r12
  00e56: f6 	movabs r8,0x55f67b88dbd8
  00e60: f6 	movabs rax,0x55f67a71b620
  00e6a:    	call   rax
  00e6c:    	movq   xmm2,QWORD PTR [rsp]
  00e71:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e77:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e7d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e83:    	add    rsp,0x20
  00e87: f6 	movabs r13,0x55f67b88dbe0
  00e91:    	test   rax,rax
  00e94:    	je     0xfffd5917
  00e9a:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00e9e: 00 	movq   xmm5,QWORD PTR [rip+0x102e]        # 0x1ed4
  00ea6: 00 	movabs rax,0xff80000000000002
  00eb0:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00eb4: 01 	sub    DWORD PTR [rip+0x1021],0x1        # 0x1edc
  00ebb:    	je     0x2b392
  00ec1:    	sub    rsp,0x20
  00ec5:    	movq   QWORD PTR [rsp],xmm2
  00eca:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ed0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00edc:    	mov    rdi,QWORD PTR [r14-0x48]
  00ee0: f6 	movabs rax,0x55f67a7285d0
  00eea:    	call   rax
  00eec:    	mov    r15d,eax
  00eef: f6 	movabs r13,0x55f67b88dc00
  00ef9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00efd:    	jne    0x2b3b0
  00f03:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7d90]        # 0xfffd8c99
  00f09:    	cmp    DWORD PTR [r13-0x4],eax
  00f0d:    	jne    0x2b3b0
  00f13: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f1c:    	mov    rsi,QWORD PTR [rbx]
  00f1f:    	mov    QWORD PTR [rsp-0x18],rsi
  00f24:    	lea    rsi,[rsp-0x18]
  00f29:    	mov    QWORD PTR [rbx],rsi
  00f2c:    	mov    rax,QWORD PTR [r14-0x48]
  00f30:    	mov    QWORD PTR [rsp-0x40],rax
  00f35: 00 	mov    rdi,0x1
  00f3c:    	lea    r8,[rsp-0x48]
  00f41:    	mov    rax,QWORD PTR [r14-0x50]
  00f45:    	mov    QWORD PTR [r8],rax
  00f48:    	sub    r8,0x8
  00f4c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f55:    	lea    r14,[rsp-0x10]
  00f5a:    	mov    QWORD PTR [rsp-0x20],r14
  00f5f: 00 	movabs rax,0x0
  00f69:    	mov    QWORD PTR [rsp-0x30],rax
  00f6e: 00 	movabs r13,0x0
  00f78:    	call   0xfffd58e4
  00f7d:    	lea    r14,[rbp-0x8]
  00f81:    	mov    QWORD PTR [rbx],r14
  00f84:    	mov    r14,QWORD PTR [rbp-0x10]
  00f88:    	movq   xmm2,QWORD PTR [rsp]
  00f8d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f93:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f99:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f9f:    	add    rsp,0x20
  00fa3:    	test   rax,rax
  00fa6:    	je     0x2b423
:00086 
:00088 %3 = 0: i32
  00fac: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  00fb4: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  00fbc:    	sub    rsp,0x20
  00fc0:    	movq   QWORD PTR [rsp],xmm2
  00fc5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fcb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fd1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fd7:    	mov    rdx,QWORD PTR [r14-0x38]
  00fdb:    	mov    rcx,QWORD PTR [r14-0x58]
  00fdf:    	mov    rdi,rbx
  00fe2:    	mov    rsi,r12
  00fe5: f6 	movabs r8,0x55f67b88dc48
  00fef: f6 	movabs rax,0x55f67a71b620
  00ff9:    	call   rax
  00ffb:    	movq   xmm2,QWORD PTR [rsp]
  01000:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01006:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0100c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01012:    	add    rsp,0x20
  01016: f6 	movabs r13,0x55f67b88dc50
  01020:    	test   rax,rax
  01023:    	je     0xfffd5917
  01029:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  0102d: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01035:    	sub    rsp,0x20
  01039:    	movq   QWORD PTR [rsp],xmm3
  0103e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01044:    	movq   QWORD PTR [rsp+0x10],xmm5
  0104a:    	mov    rdx,QWORD PTR [r14-0x38]
  0104e:    	mov    rcx,QWORD PTR [r14-0x60]
  01052:    	mov    rdi,rbx
  01055:    	mov    rsi,r12
  01058: f6 	movabs r8,0x55f67b88dc68
  01062: f6 	movabs rax,0x55f67a71b620
  0106c:    	call   rax
  0106e:    	movq   xmm3,QWORD PTR [rsp]
  01073:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01079:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0107f:    	add    rsp,0x20
  01083: f6 	movabs r13,0x55f67b88dc70
  0108d:    	test   rax,rax
  01090:    	je     0xfffd5917
  01096:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0109a:    	mov    rdi,QWORD PTR [r14-0x58]
  0109e: 00 	test   rdi,0x7
  010a5:    	jne    0x2b432
  010ab:    	cmp    DWORD PTR [rdi+0x4],0x28
  010af:    	jne    0x2b432
  010b5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7bdd],0x26        # 0xfffd8c99
  010bc:    	jne    0x2b432
  010c2:    	sub    rsp,0x10
  010c6:    	movq   QWORD PTR [rsp],xmm3
  010cb:    	movq   QWORD PTR [rsp+0x8],xmm4
  010d1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010da:    	mov    rax,QWORD PTR [r14-0x58]
  010de:    	mov    QWORD PTR [rsp-0x40],rax
  010e3: 00 	mov    rdi,0x1
  010ea:    	lea    r8,[rsp-0x48]
  010ef:    	mov    rax,QWORD PTR [r14-0x60]
  010f3:    	mov    QWORD PTR [r8],rax
  010f6:    	sub    r8,0x8
  010fa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01103: 09 	movabs rax,0x900000041
  0110d:    	mov    QWORD PTR [rsp-0x30],rax
  01112: f6 	movabs r13,0x55f67b86c170
  0111c:    	mov    rsi,QWORD PTR [rbx]
  0111f:    	mov    QWORD PTR [rsp-0x18],rsi
  01124:    	lea    rsi,[rsp-0x18]
  01129:    	mov    QWORD PTR [rbx],rsi
  0112c:    	lea    r14,[rsp-0x10]
  01131:    	mov    QWORD PTR [rsp-0x20],r14
  01136:    	call   0xfffe2953
  0113b:    	lea    r14,[rbp-0x8]
  0113f:    	mov    QWORD PTR [rbx],r14
  01142:    	mov    r14,QWORD PTR [rbp-0x10]
  01146:    	movq   xmm3,QWORD PTR [rsp]
  0114b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01151:    	add    rsp,0x10
  01155: f6 	movabs r13,0x55f67b88dc90
  0115f:    	test   rax,rax
  01162:    	je     0xfffd5917
  01168:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  0116c:    	sub    rsp,0x10
  01170:    	movq   QWORD PTR [rsp],xmm3
  01175:    	movq   QWORD PTR [rsp+0x8],xmm4
  0117b:    	mov    rdx,QWORD PTR [r14-0x38]
  0117f:    	mov    rcx,QWORD PTR [r14-0x48]
  01183:    	mov    r8,QWORD PTR [r14-0x50]
  01187:    	mov    rdi,rbx
  0118a:    	mov    rsi,r12
  0118d: f6 	movabs rax,0x55f67a71b750
  01197:    	call   rax
  01199:    	movq   xmm3,QWORD PTR [rsp]
  0119e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011a4:    	add    rsp,0x10
  011a8: f6 	movabs r13,0x55f67b88dcb0
  011b2:    	test   rax,rax
  011b5:    	je     0xfffd5917
:00097 %3 = 0: i32
  011bb: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  011c3: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  011cb:    	sub    rsp,0x10
  011cf:    	movq   QWORD PTR [rsp],xmm3
  011d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  011da:    	mov    rdx,QWORD PTR [r14-0x38]
  011de:    	mov    rcx,QWORD PTR [r14-0x58]
  011e2:    	mov    rdi,rbx
  011e5:    	mov    rsi,r12
  011e8: f6 	movabs r8,0x55f67b88dcd8
  011f2: f6 	movabs rax,0x55f67a71b620
  011fc:    	call   rax
  011fe:    	movq   xmm3,QWORD PTR [rsp]
  01203:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01209:    	add    rsp,0x10
  0120d: f6 	movabs r13,0x55f67b88dce0
  01217:    	test   rax,rax
  0121a:    	je     0xfffd5917
  01220:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01224:    	mov    rdi,QWORD PTR [r14-0x58]
  01228: 00 	test   rdi,0x7
  0122f:    	jne    0x2b441
  01235:    	cmp    DWORD PTR [rdi+0x4],0x28
  01239:    	jne    0x2b441
  0123f: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7a53],0x26        # 0xfffd8c99
  01246:    	jne    0x2b441
  0124c:    	sub    rsp,0x10
  01250:    	movq   QWORD PTR [rsp],xmm3
  01255:    	movq   QWORD PTR [rsp+0x8],xmm4
  0125b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01264:    	mov    rax,QWORD PTR [r14-0x58]
  01268:    	mov    QWORD PTR [rsp-0x40],rax
  0126d: 00 	mov    rdi,0x0
  01274: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0127d: 07 	movabs rax,0x1000700000044
  01287:    	mov    QWORD PTR [rsp-0x30],rax
  0128c: f6 	movabs r13,0x55f67b84eec0
  01296:    	mov    rsi,QWORD PTR [rbx]
  01299:    	mov    QWORD PTR [rsp-0x18],rsi
  0129e:    	lea    rsi,[rsp-0x18]
  012a3:    	mov    QWORD PTR [rbx],rsi
  012a6:    	lea    r14,[rsp-0x10]
  012ab:    	mov    QWORD PTR [rsp-0x20],r14
  012b0:    	call   0xfffd95a0
  012b5:    	lea    r14,[rbp-0x8]
  012b9:    	mov    QWORD PTR [rbx],r14
  012bc:    	mov    r14,QWORD PTR [rbp-0x10]
  012c0:    	movq   xmm3,QWORD PTR [rsp]
  012c5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012cb:    	add    rsp,0x10
  012cf: f6 	movabs r13,0x55f67b88dd00
  012d9:    	test   rax,rax
  012dc:    	je     0xfffd5917
  012e2:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  012e6:    	sub    rsp,0x10
  012ea:    	movq   QWORD PTR [rsp],xmm3
  012ef:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f5:    	mov    rdx,QWORD PTR [r14-0x38]
  012f9:    	mov    rcx,QWORD PTR [r14-0x48]
  012fd:    	mov    r8,QWORD PTR [r14-0x50]
  01301:    	mov    rdi,rbx
  01304:    	mov    rsi,r12
  01307: f6 	movabs rax,0x55f67a71b750
  01311:    	call   rax
  01313:    	movq   xmm3,QWORD PTR [rsp]
  01318:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0131e:    	add    rsp,0x10
  01322: f6 	movabs r13,0x55f67b88dd20
  0132c:    	test   rax,rax
  0132f:    	je     0xfffd5917
:00104 %3 = 1: i32
  01335: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  0133d: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01345:    	sub    rsp,0x10
  01349:    	movq   QWORD PTR [rsp],xmm3
  0134e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01354:    	mov    rdx,QWORD PTR [r14-0x38]
  01358:    	mov    rcx,QWORD PTR [r14-0x58]
  0135c:    	mov    rdi,rbx
  0135f:    	mov    rsi,r12
  01362: f6 	movabs r8,0x55f67b88dd48
  0136c: f6 	movabs rax,0x55f67a71b620
  01376:    	call   rax
  01378:    	movq   xmm3,QWORD PTR [rsp]
  0137d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01383:    	add    rsp,0x10
  01387: f6 	movabs r13,0x55f67b88dd50
  01391:    	test   rax,rax
  01394:    	je     0xfffd5917
  0139a:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  0139e: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  013a6:    	sub    rsp,0x10
  013aa:    	movq   QWORD PTR [rsp],xmm3
  013af:    	movq   QWORD PTR [rsp+0x8],xmm4
  013b5:    	mov    rdx,QWORD PTR [r14-0x38]
  013b9:    	mov    rcx,QWORD PTR [r14-0x60]
  013bd:    	mov    rdi,rbx
  013c0:    	mov    rsi,r12
  013c3: f6 	movabs r8,0x55f67b88dd68
  013cd: f6 	movabs rax,0x55f67a71b620
  013d7:    	call   rax
  013d9:    	movq   xmm3,QWORD PTR [rsp]
  013de:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013e4:    	add    rsp,0x10
  013e8: f6 	movabs r13,0x55f67b88dd70
  013f2:    	test   rax,rax
  013f5:    	je     0xfffd5917
  013fb:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  013ff:    	mov    rdi,QWORD PTR [r14-0x58]
  01403: 00 	test   rdi,0x7
  0140a:    	jne    0x2b450
  01410:    	cmp    DWORD PTR [rdi+0x4],0x28
  01414:    	jne    0x2b450
  0141a: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7878],0x26        # 0xfffd8c99
  01421:    	jne    0x2b450
  01427:    	sub    rsp,0x10
  0142b:    	movq   QWORD PTR [rsp],xmm3
  01430:    	movq   QWORD PTR [rsp+0x8],xmm4
  01436: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0143f:    	mov    rax,QWORD PTR [r14-0x58]
  01443:    	mov    QWORD PTR [rsp-0x40],rax
  01448: 00 	mov    rdi,0x1
  0144f:    	lea    r8,[rsp-0x48]
  01454:    	mov    rax,QWORD PTR [r14-0x60]
  01458:    	mov    QWORD PTR [r8],rax
  0145b:    	sub    r8,0x8
  0145f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01468: 09 	movabs rax,0x900000041
  01472:    	mov    QWORD PTR [rsp-0x30],rax
  01477: f6 	movabs r13,0x55f67b86c170
  01481:    	mov    rsi,QWORD PTR [rbx]
  01484:    	mov    QWORD PTR [rsp-0x18],rsi
  01489:    	lea    rsi,[rsp-0x18]
  0148e:    	mov    QWORD PTR [rbx],rsi
  01491:    	lea    r14,[rsp-0x10]
  01496:    	mov    QWORD PTR [rsp-0x20],r14
  0149b:    	call   0xfffe2953
  014a0:    	lea    r14,[rbp-0x8]
  014a4:    	mov    QWORD PTR [rbx],r14
  014a7:    	mov    r14,QWORD PTR [rbp-0x10]
  014ab:    	movq   xmm3,QWORD PTR [rsp]
  014b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014b6:    	add    rsp,0x10
  014ba: f6 	movabs r13,0x55f67b88dd90
  014c4:    	test   rax,rax
  014c7:    	je     0xfffd5917
  014cd:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  014d1:    	sub    rsp,0x10
  014d5:    	movq   QWORD PTR [rsp],xmm3
  014da:    	movq   QWORD PTR [rsp+0x8],xmm4
  014e0:    	mov    rdx,QWORD PTR [r14-0x38]
  014e4:    	mov    rcx,QWORD PTR [r14-0x48]
  014e8:    	mov    r8,QWORD PTR [r14-0x50]
  014ec:    	mov    rdi,rbx
  014ef:    	mov    rsi,r12
  014f2: f6 	movabs rax,0x55f67a71b750
  014fc:    	call   rax
  014fe:    	movq   xmm3,QWORD PTR [rsp]
  01503:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01509:    	add    rsp,0x10
  0150d: f6 	movabs r13,0x55f67b88ddb0
  01517:    	test   rax,rax
  0151a:    	je     0xfffd5917
:00113 %3 = 1: i32
  01520: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01528: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01530:    	sub    rsp,0x10
  01534:    	movq   QWORD PTR [rsp],xmm3
  01539:    	movq   QWORD PTR [rsp+0x8],xmm4
  0153f:    	mov    rdx,QWORD PTR [r14-0x38]
  01543:    	mov    rcx,QWORD PTR [r14-0x58]
  01547:    	mov    rdi,rbx
  0154a:    	mov    rsi,r12
  0154d: f6 	movabs r8,0x55f67b88ddd8
  01557: f6 	movabs rax,0x55f67a71b620
  01561:    	call   rax
  01563:    	movq   xmm3,QWORD PTR [rsp]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0156e:    	add    rsp,0x10
  01572: f6 	movabs r13,0x55f67b88dde0
  0157c:    	test   rax,rax
  0157f:    	je     0xfffd5917
  01585:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01589:    	mov    rdi,QWORD PTR [r14-0x58]
  0158d: 00 	test   rdi,0x7
  01594:    	jne    0x2b45f
  0159a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0159e:    	jne    0x2b45f
  015a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffd76ee],0x26        # 0xfffd8c99
  015ab:    	jne    0x2b45f
  015b1:    	sub    rsp,0x10
  015b5:    	movq   QWORD PTR [rsp],xmm3
  015ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015c9:    	mov    rax,QWORD PTR [r14-0x58]
  015cd:    	mov    QWORD PTR [rsp-0x40],rax
  015d2: 00 	mov    rdi,0x0
  015d9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015e2: 07 	movabs rax,0x1000700000044
  015ec:    	mov    QWORD PTR [rsp-0x30],rax
  015f1: f6 	movabs r13,0x55f67b84eec0
  015fb:    	mov    rsi,QWORD PTR [rbx]
  015fe:    	mov    QWORD PTR [rsp-0x18],rsi
  01603:    	lea    rsi,[rsp-0x18]
  01608:    	mov    QWORD PTR [rbx],rsi
  0160b:    	lea    r14,[rsp-0x10]
  01610:    	mov    QWORD PTR [rsp-0x20],r14
  01615:    	call   0xfffd95a0
  0161a:    	lea    r14,[rbp-0x8]
  0161e:    	mov    QWORD PTR [rbx],r14
  01621:    	mov    r14,QWORD PTR [rbp-0x10]
  01625:    	movq   xmm3,QWORD PTR [rsp]
  0162a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01630:    	add    rsp,0x10
  01634: f6 	movabs r13,0x55f67b88de00
  0163e:    	test   rax,rax
  01641:    	je     0xfffd5917
  01647:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  0164b:    	sub    rsp,0x10
  0164f:    	movq   QWORD PTR [rsp],xmm3
  01654:    	movq   QWORD PTR [rsp+0x8],xmm4
  0165a:    	mov    rdx,QWORD PTR [r14-0x38]
  0165e:    	mov    rcx,QWORD PTR [r14-0x48]
  01662:    	mov    r8,QWORD PTR [r14-0x50]
  01666:    	mov    rdi,rbx
  01669:    	mov    rsi,r12
  0166c: f6 	movabs rax,0x55f67a71b750
  01676:    	call   rax
  01678:    	movq   xmm3,QWORD PTR [rsp]
  0167d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01683:    	add    rsp,0x10
  01687: f6 	movabs r13,0x55f67b88de20
  01691:    	test   rax,rax
  01694:    	je     0xfffd5917
:00120 %3 = %4
  0169a:    	mov    rax,QWORD PTR [r14-0x50]
  0169e:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  016a2:    	mov    rax,QWORD PTR [r14-0x48]
  016a6:    	leave  
  016a7:    	ret    
:00088 %3 = 0: i32
  016a8: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  016b0: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016b8:    	sub    rsp,0x20
  016bc:    	movq   QWORD PTR [rsp],xmm2
  016c1:    	movq   QWORD PTR [rsp+0x8],xmm3
  016c7:    	movq   QWORD PTR [rsp+0x10],xmm4
  016cd:    	movq   QWORD PTR [rsp+0x18],xmm5
  016d3:    	mov    rdx,QWORD PTR [r14-0x38]
  016d7:    	mov    rcx,QWORD PTR [r14-0x58]
  016db:    	mov    rdi,rbx
  016de:    	mov    rsi,r12
  016e1: f6 	movabs r8,0x55f67b88dc48
  016eb: f6 	movabs rax,0x55f67a71b620
  016f5:    	call   rax
  016f7:    	movq   xmm2,QWORD PTR [rsp]
  016fc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01702:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01708:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0170e:    	add    rsp,0x20
  01712: f6 	movabs r13,0x55f67b88dc50
  0171c:    	test   rax,rax
  0171f:    	je     0xfffd5917
  01725:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01729: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01731:    	sub    rsp,0x20
  01735:    	movq   QWORD PTR [rsp],xmm3
  0173a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01740:    	movq   QWORD PTR [rsp+0x10],xmm5
  01746:    	mov    rdx,QWORD PTR [r14-0x38]
  0174a:    	mov    rcx,QWORD PTR [r14-0x60]
  0174e:    	mov    rdi,rbx
  01751:    	mov    rsi,r12
  01754: f6 	movabs r8,0x55f67b88dc68
  0175e: f6 	movabs rax,0x55f67a71b620
  01768:    	call   rax
  0176a:    	movq   xmm3,QWORD PTR [rsp]
  0176f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01775:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0177b:    	add    rsp,0x20
  0177f: f6 	movabs r13,0x55f67b88dc70
  01789:    	test   rax,rax
  0178c:    	je     0xfffd5917
  01792:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01796:    	mov    rdi,QWORD PTR [r14-0x58]
  0179a: 00 	test   rdi,0x7
  017a1:    	jne    0x2b4b9
  017a7:    	cmp    DWORD PTR [rdi+0x4],0x28
  017ab:    	jne    0x2b4b9
  017b1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd74e1],0x26        # 0xfffd8c99
  017b8:    	jne    0x2b4b9
  017be:    	sub    rsp,0x10
  017c2:    	movq   QWORD PTR [rsp],xmm3
  017c7:    	movq   QWORD PTR [rsp+0x8],xmm4
  017cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017d6:    	mov    rax,QWORD PTR [r14-0x58]
  017da:    	mov    QWORD PTR [rsp-0x40],rax
  017df: 00 	mov    rdi,0x1
  017e6:    	lea    r8,[rsp-0x48]
  017eb:    	mov    rax,QWORD PTR [r14-0x60]
  017ef:    	mov    QWORD PTR [r8],rax
  017f2:    	sub    r8,0x8
  017f6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017ff: 09 	movabs rax,0x900000041
  01809:    	mov    QWORD PTR [rsp-0x30],rax
  0180e: f6 	movabs r13,0x55f67b86c170
  01818:    	mov    rsi,QWORD PTR [rbx]
  0181b:    	mov    QWORD PTR [rsp-0x18],rsi
  01820:    	lea    rsi,[rsp-0x18]
  01825:    	mov    QWORD PTR [rbx],rsi
  01828:    	lea    r14,[rsp-0x10]
  0182d:    	mov    QWORD PTR [rsp-0x20],r14
  01832:    	call   0xfffe2953
  01837:    	lea    r14,[rbp-0x8]
  0183b:    	mov    QWORD PTR [rbx],r14
  0183e:    	mov    r14,QWORD PTR [rbp-0x10]
  01842:    	movq   xmm3,QWORD PTR [rsp]
  01847:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0184d:    	add    rsp,0x10
  01851: f6 	movabs r13,0x55f67b88dc90
  0185b:    	test   rax,rax
  0185e:    	je     0xfffd5917
  01864:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01868:    	sub    rsp,0x10
  0186c:    	movq   QWORD PTR [rsp],xmm3
  01871:    	movq   QWORD PTR [rsp+0x8],xmm4
  01877:    	mov    rdx,QWORD PTR [r14-0x38]
  0187b:    	mov    rcx,QWORD PTR [r14-0x48]
  0187f:    	mov    r8,QWORD PTR [r14-0x50]
  01883:    	mov    rdi,rbx
  01886:    	mov    rsi,r12
  01889: f6 	movabs rax,0x55f67a71b750
  01893:    	call   rax
  01895:    	movq   xmm3,QWORD PTR [rsp]
  0189a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018a0:    	add    rsp,0x10
  018a4: f6 	movabs r13,0x55f67b88dcb0
  018ae:    	test   rax,rax
  018b1:    	je     0xfffd5917
:00097 %3 = 0: i32
  018b7: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  018bf: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018c7:    	sub    rsp,0x10
  018cb:    	movq   QWORD PTR [rsp],xmm3
  018d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d6:    	mov    rdx,QWORD PTR [r14-0x38]
  018da:    	mov    rcx,QWORD PTR [r14-0x58]
  018de:    	mov    rdi,rbx
  018e1:    	mov    rsi,r12
  018e4: f6 	movabs r8,0x55f67b88dcd8
  018ee: f6 	movabs rax,0x55f67a71b620
  018f8:    	call   rax
  018fa:    	movq   xmm3,QWORD PTR [rsp]
  018ff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01905:    	add    rsp,0x10
  01909: f6 	movabs r13,0x55f67b88dce0
  01913:    	test   rax,rax
  01916:    	je     0xfffd5917
  0191c:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01920:    	mov    rdi,QWORD PTR [r14-0x58]
  01924: 00 	test   rdi,0x7
  0192b:    	jne    0x2b4c8
  01931:    	cmp    DWORD PTR [rdi+0x4],0x28
  01935:    	jne    0x2b4c8
  0193b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7357],0x26        # 0xfffd8c99
  01942:    	jne    0x2b4c8
  01948:    	sub    rsp,0x10
  0194c:    	movq   QWORD PTR [rsp],xmm3
  01951:    	movq   QWORD PTR [rsp+0x8],xmm4
  01957: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01960:    	mov    rax,QWORD PTR [r14-0x58]
  01964:    	mov    QWORD PTR [rsp-0x40],rax
  01969: 00 	mov    rdi,0x0
  01970: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01979: 07 	movabs rax,0x1000700000044
  01983:    	mov    QWORD PTR [rsp-0x30],rax
  01988: f6 	movabs r13,0x55f67b84eec0
  01992:    	mov    rsi,QWORD PTR [rbx]
  01995:    	mov    QWORD PTR [rsp-0x18],rsi
  0199a:    	lea    rsi,[rsp-0x18]
  0199f:    	mov    QWORD PTR [rbx],rsi
  019a2:    	lea    r14,[rsp-0x10]
  019a7:    	mov    QWORD PTR [rsp-0x20],r14
  019ac:    	call   0xfffd95a0
  019b1:    	lea    r14,[rbp-0x8]
  019b5:    	mov    QWORD PTR [rbx],r14
  019b8:    	mov    r14,QWORD PTR [rbp-0x10]
  019bc:    	movq   xmm3,QWORD PTR [rsp]
  019c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019c7:    	add    rsp,0x10
  019cb: f6 	movabs r13,0x55f67b88dd00
  019d5:    	test   rax,rax
  019d8:    	je     0xfffd5917
  019de:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  019e2:    	sub    rsp,0x10
  019e6:    	movq   QWORD PTR [rsp],xmm3
  019eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  019f1:    	mov    rdx,QWORD PTR [r14-0x38]
  019f5:    	mov    rcx,QWORD PTR [r14-0x48]
  019f9:    	mov    r8,QWORD PTR [r14-0x50]
  019fd:    	mov    rdi,rbx
  01a00:    	mov    rsi,r12
  01a03: f6 	movabs rax,0x55f67a71b750
  01a0d:    	call   rax
  01a0f:    	movq   xmm3,QWORD PTR [rsp]
  01a14:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a1a:    	add    rsp,0x10
  01a1e: f6 	movabs r13,0x55f67b88dd20
  01a28:    	test   rax,rax
  01a2b:    	je     0xfffd5917
:00104 %3 = 1: i32
  01a31: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  01a39: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a41:    	sub    rsp,0x10
  01a45:    	movq   QWORD PTR [rsp],xmm3
  01a4a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a50:    	mov    rdx,QWORD PTR [r14-0x38]
  01a54:    	mov    rcx,QWORD PTR [r14-0x58]
  01a58:    	mov    rdi,rbx
  01a5b:    	mov    rsi,r12
  01a5e: f6 	movabs r8,0x55f67b88dd48
  01a68: f6 	movabs rax,0x55f67a71b620
  01a72:    	call   rax
  01a74:    	movq   xmm3,QWORD PTR [rsp]
  01a79:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a7f:    	add    rsp,0x10
  01a83: f6 	movabs r13,0x55f67b88dd50
  01a8d:    	test   rax,rax
  01a90:    	je     0xfffd5917
  01a96:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01a9a: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01aa2:    	sub    rsp,0x10
  01aa6:    	movq   QWORD PTR [rsp],xmm3
  01aab:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ab1:    	mov    rdx,QWORD PTR [r14-0x38]
  01ab5:    	mov    rcx,QWORD PTR [r14-0x60]
  01ab9:    	mov    rdi,rbx
  01abc:    	mov    rsi,r12
  01abf: f6 	movabs r8,0x55f67b88dd68
  01ac9: f6 	movabs rax,0x55f67a71b620
  01ad3:    	call   rax
  01ad5:    	movq   xmm3,QWORD PTR [rsp]
  01ada:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae0:    	add    rsp,0x10
  01ae4: f6 	movabs r13,0x55f67b88dd70
  01aee:    	test   rax,rax
  01af1:    	je     0xfffd5917
  01af7:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01afb:    	mov    rdi,QWORD PTR [r14-0x58]
  01aff: 00 	test   rdi,0x7
  01b06:    	jne    0x2b4d7
  01b0c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b10:    	jne    0x2b4d7
  01b16: 26 	cmp    DWORD PTR [rip+0xfffffffffffd717c],0x26        # 0xfffd8c99
  01b1d:    	jne    0x2b4d7
  01b23:    	sub    rsp,0x10
  01b27:    	movq   QWORD PTR [rsp],xmm3
  01b2c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b32: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b3b:    	mov    rax,QWORD PTR [r14-0x58]
  01b3f:    	mov    QWORD PTR [rsp-0x40],rax
  01b44: 00 	mov    rdi,0x1
  01b4b:    	lea    r8,[rsp-0x48]
  01b50:    	mov    rax,QWORD PTR [r14-0x60]
  01b54:    	mov    QWORD PTR [r8],rax
  01b57:    	sub    r8,0x8
  01b5b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b64: 09 	movabs rax,0x900000041
  01b6e:    	mov    QWORD PTR [rsp-0x30],rax
  01b73: f6 	movabs r13,0x55f67b86c170
  01b7d:    	mov    rsi,QWORD PTR [rbx]
  01b80:    	mov    QWORD PTR [rsp-0x18],rsi
  01b85:    	lea    rsi,[rsp-0x18]
  01b8a:    	mov    QWORD PTR [rbx],rsi
  01b8d:    	lea    r14,[rsp-0x10]
  01b92:    	mov    QWORD PTR [rsp-0x20],r14
  01b97:    	call   0xfffe2953
  01b9c:    	lea    r14,[rbp-0x8]
  01ba0:    	mov    QWORD PTR [rbx],r14
  01ba3:    	mov    r14,QWORD PTR [rbp-0x10]
  01ba7:    	movq   xmm3,QWORD PTR [rsp]
  01bac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bb2:    	add    rsp,0x10
  01bb6: f6 	movabs r13,0x55f67b88dd90
  01bc0:    	test   rax,rax
  01bc3:    	je     0xfffd5917
  01bc9:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01bcd:    	sub    rsp,0x10
  01bd1:    	movq   QWORD PTR [rsp],xmm3
  01bd6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bdc:    	mov    rdx,QWORD PTR [r14-0x38]
  01be0:    	mov    rcx,QWORD PTR [r14-0x48]
  01be4:    	mov    r8,QWORD PTR [r14-0x50]
  01be8:    	mov    rdi,rbx
  01beb:    	mov    rsi,r12
  01bee: f6 	movabs rax,0x55f67a71b750
  01bf8:    	call   rax
  01bfa:    	movq   xmm3,QWORD PTR [rsp]
  01bff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c05:    	add    rsp,0x10
  01c09: f6 	movabs r13,0x55f67b88ddb0
  01c13:    	test   rax,rax
  01c16:    	je     0xfffd5917
:00113 %3 = 1: i32
  01c1c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01c24: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c2c:    	sub    rsp,0x10
  01c30:    	movq   QWORD PTR [rsp],xmm3
  01c35:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c3b:    	mov    rdx,QWORD PTR [r14-0x38]
  01c3f:    	mov    rcx,QWORD PTR [r14-0x58]
  01c43:    	mov    rdi,rbx
  01c46:    	mov    rsi,r12
  01c49: f6 	movabs r8,0x55f67b88ddd8
  01c53: f6 	movabs rax,0x55f67a71b620
  01c5d:    	call   rax
  01c5f:    	movq   xmm3,QWORD PTR [rsp]
  01c64:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c6a:    	add    rsp,0x10
  01c6e: f6 	movabs r13,0x55f67b88dde0
  01c78:    	test   rax,rax
  01c7b:    	je     0xfffd5917
  01c81:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c85:    	mov    rdi,QWORD PTR [r14-0x58]
  01c89: 00 	test   rdi,0x7
  01c90:    	jne    0x2b4e6
  01c96:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c9a:    	jne    0x2b4e6
  01ca0: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6ff2],0x26        # 0xfffd8c99
  01ca7:    	jne    0x2b4e6
  01cad:    	sub    rsp,0x10
  01cb1:    	movq   QWORD PTR [rsp],xmm3
  01cb6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cbc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01cc5:    	mov    rax,QWORD PTR [r14-0x58]
  01cc9:    	mov    QWORD PTR [rsp-0x40],rax
  01cce: 00 	mov    rdi,0x0
  01cd5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01cde: 07 	movabs rax,0x1000700000044
  01ce8:    	mov    QWORD PTR [rsp-0x30],rax
  01ced: f6 	movabs r13,0x55f67b84eec0
  01cf7:    	mov    rsi,QWORD PTR [rbx]
  01cfa:    	mov    QWORD PTR [rsp-0x18],rsi
  01cff:    	lea    rsi,[rsp-0x18]
  01d04:    	mov    QWORD PTR [rbx],rsi
  01d07:    	lea    r14,[rsp-0x10]
  01d0c:    	mov    QWORD PTR [rsp-0x20],r14
  01d11:    	call   0xfffd95a0
  01d16:    	lea    r14,[rbp-0x8]
  01d1a:    	mov    QWORD PTR [rbx],r14
  01d1d:    	mov    r14,QWORD PTR [rbp-0x10]
  01d21:    	movq   xmm3,QWORD PTR [rsp]
  01d26:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d2c:    	add    rsp,0x10
  01d30: f6 	movabs r13,0x55f67b88de00
  01d3a:    	test   rax,rax
  01d3d:    	je     0xfffd5917
  01d43:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01d47:    	sub    rsp,0x10
  01d4b:    	movq   QWORD PTR [rsp],xmm3
  01d50:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d56:    	mov    rdx,QWORD PTR [r14-0x38]
  01d5a:    	mov    rcx,QWORD PTR [r14-0x48]
  01d5e:    	mov    r8,QWORD PTR [r14-0x50]
  01d62:    	mov    rdi,rbx
  01d65:    	mov    rsi,r12
  01d68: f6 	movabs rax,0x55f67a71b750
  01d72:    	call   rax
  01d74:    	movq   xmm3,QWORD PTR [rsp]
  01d79:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d7f:    	add    rsp,0x10
  01d83: f6 	movabs r13,0x55f67b88de20
  01d8d:    	test   rax,rax
  01d90:    	je     0xfffd5917
:00120 %3 = %4
  01d96:    	mov    rax,QWORD PTR [r14-0x50]
  01d9a:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  01d9e:    	mov    rax,QWORD PTR [r14-0x48]
  01da2:    	leave  
  01da3:    	ret    
