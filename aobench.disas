==> start whole compile: initialize FuncId(62) self_class:Vec start:[00000] bytecode:0x55b5b0796e50
<== finished compile. elapsed:13.5µs
offset:Pos(14137) code: 159 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x3
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x3cebf
  0001f: jmp    0x3cebf
  00024: mov    eax,0x3
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x48]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    QWORD PTR [rbp-0x48],0x4
  00052: mov    rdi,QWORD PTR [rbp-0x28]
  00056: test   rdi,0x7
  0005d: jne    0x3cece
  00063: cmp    DWORD PTR [rdi+0x4],0x28
  00067: jne    0x3cece
:00000 init_method reg:5 arg:3 pos:3 req:3 block:0 stack_offset:5
:00001 @x: Vec[IvarId(0)] = %1
  0006d: mov    rdi,QWORD PTR [rbp-0x28]
  00071: mov    rax,QWORD PTR [rbp-0x30]
  00075: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00079: mov    rdi,QWORD PTR [rbp-0x28]
  0007d: mov    rax,QWORD PTR [rbp-0x38]
  00081: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  00085: mov    rdi,QWORD PTR [rbp-0x28]
  00089: mov    rax,QWORD PTR [rbp-0x40]
  0008d: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  00091: mov    rax,QWORD PTR [rbp-0x40]
  00095: mov    QWORD PTR [rbp-0x48],rax
:00005 ret %4
  00099: mov    rax,QWORD PTR [rbp-0x48]
  0009d: leave  
  0009e: ret    
==> start whole compile: vdot FuncId(66) self_class:Vec start:[00000] bytecode:0x55b5b07ddec0
<== finished compile. elapsed:34.9µs
offset:Pos(16102) code: 1146 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x3c730
  0001f: jmp    0x3c730
  00024: mov    eax,0x1
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x38]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    rax,0x4
  00051: mov    QWORD PTR [rbp-0x38],rax
  00055: mov    QWORD PTR [rbp-0x40],rax
  00059: mov    QWORD PTR [rbp-0x48],rax
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: test   rdi,0x7
  00068: jne    0x3c73f
  0006e: cmp    DWORD PTR [rdi+0x4],0x28
  00072: jne    0x3c73f
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = @x: Vec[IvarId(0)]
  00078: mov    rdi,QWORD PTR [rbp-0x28]
  0007c: mov    rax,QWORD PTR [rdi+0x10]
  00080: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = %1.call x()                     [Vec]
  00084: mov    rdi,QWORD PTR [rbp-0x30]
  00088: test   rdi,0x7
  0008f: jne    0x3c74e
  00095: cmp    DWORD PTR [rdi+0x4],0x28
  00099: jne    0x3c74e
  0009f: cmp    DWORD PTR [rip+0xfffffffffffff191],0x26        # 0xfffff237
  000a6: jne    0x3c74e
  000ac: mov    esi,DWORD PTR [rip+0x3cc]        # 0x47e
  000b2: cmp    esi,0xffffffff
  000b5: je     0x3c75d
  000bb: cmp    WORD PTR [rdi+0x2],0x3
  000c0: jne    0xd9
  000c6: cmp    esi,0x6
  000c9: jge    0xd9
  000cf: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d4: jmp    0xe5
  000d9: movabs rax,0x55b5b00a3ef0
  000e3: call   rax
  000e5: mov    QWORD PTR [rbp-0x40],rax
:00003 
:00005 %2 = %2 * %3                         [Float][Float]
  000e9: mov    rdi,QWORD PTR [rbp-0x38]
  000ed: test   rdi,0x1
  000f4: jne    0x3c786
  000fa: test   rdi,0x2
  00101: je     0x13d
  00107: xorps  xmm2,xmm2
  0010a: movabs rax,0x8000000000000002
  00114: cmp    rdi,rax
  00117: je     0x14f
  0011d: mov    rax,rdi
  00120: sar    rax,0x3f
  00124: add    rax,0x2
  00128: and    rdi,0xfffffffffffffffc
  0012c: or     rdi,rax
  0012f: rol    rdi,0x3d
  00133: movq   xmm2,rdi
  00138: jmp    0x14f
  0013d: call   0xffffc1a6
  00142: test   rax,rax
  00145: je     0x3c786
  0014b: movq   xmm2,xmm0
  0014f: mov    rdi,QWORD PTR [rbp-0x40]
  00153: test   rdi,0x1
  0015a: jne    0x3c795
  00160: test   rdi,0x2
  00167: je     0x1a3
  0016d: xorps  xmm3,xmm3
  00170: movabs rax,0x8000000000000002
  0017a: cmp    rdi,rax
  0017d: je     0x1b5
  00183: mov    rax,rdi
  00186: sar    rax,0x3f
  0018a: add    rax,0x2
  0018e: and    rdi,0xfffffffffffffffc
  00192: or     rdi,rax
  00195: rol    rdi,0x3d
  00199: movq   xmm3,rdi
  0019e: jmp    0x1b5
  001a3: call   0xffffc1a6
  001a8: test   rax,rax
  001ab: je     0x3c795
  001b1: movq   xmm3,xmm0
  001b5: mulsd  xmm2,xmm3
:00006 %3 = @y: Vec[IvarId(1)]
  001b9: mov    rdi,QWORD PTR [rbp-0x28]
  001bd: mov    rax,QWORD PTR [rdi+0x18]
  001c1: mov    QWORD PTR [rbp-0x40],rax
:00007 %4 = %1.call y()                     [Vec]
  001c5: mov    rdi,QWORD PTR [rbp-0x30]
  001c9: test   rdi,0x7
  001d0: jne    0x3c7a4
  001d6: cmp    DWORD PTR [rdi+0x4],0x28
  001da: jne    0x3c7a4
  001e0: cmp    DWORD PTR [rip+0xfffffffffffff050],0x26        # 0xfffff237
  001e7: jne    0x3c7a4
  001ed: mov    esi,DWORD PTR [rip+0x293]        # 0x486
  001f3: cmp    esi,0xffffffff
  001f6: je     0x3c7c0
  001fc: cmp    WORD PTR [rdi+0x2],0x3
  00201: jne    0x21a
  00207: cmp    esi,0x6
  0020a: jge    0x21a
  00210: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00215: jmp    0x238
  0021a: sub    rsp,0x10
  0021e: movq   QWORD PTR [rsp],xmm2
  00223: movabs rax,0x55b5b00a3ef0
  0022d: call   rax
  0022f: movq   xmm2,QWORD PTR [rsp]
  00234: add    rsp,0x10
  00238: mov    QWORD PTR [rbp-0x48],rax
:00008 
:00010 %3 = %3 * %4                         [Float][Float]
  0023c: mov    rdi,QWORD PTR [rbp-0x40]
  00240: test   rdi,0x1
  00247: jne    0x3c7fb
  0024d: test   rdi,0x2
  00254: je     0x290
  0025a: xorps  xmm3,xmm3
  0025d: movabs rax,0x8000000000000002
  00267: cmp    rdi,rax
  0026a: je     0x2a2
  00270: mov    rax,rdi
  00273: sar    rax,0x3f
  00277: add    rax,0x2
  0027b: and    rdi,0xfffffffffffffffc
  0027f: or     rdi,rax
  00282: rol    rdi,0x3d
  00286: movq   xmm3,rdi
  0028b: jmp    0x2a2
  00290: call   0xffffc1a6
  00295: test   rax,rax
  00298: je     0x3c7fb
  0029e: movq   xmm3,xmm0
  002a2: mov    rdi,QWORD PTR [rbp-0x48]
  002a6: test   rdi,0x1
  002ad: jne    0x3c817
  002b3: test   rdi,0x2
  002ba: je     0x2f6
  002c0: xorps  xmm4,xmm4
  002c3: movabs rax,0x8000000000000002
  002cd: cmp    rdi,rax
  002d0: je     0x308
  002d6: mov    rax,rdi
  002d9: sar    rax,0x3f
  002dd: add    rax,0x2
  002e1: and    rdi,0xfffffffffffffffc
  002e5: or     rdi,rax
  002e8: rol    rdi,0x3d
  002ec: movq   xmm4,rdi
  002f1: jmp    0x308
  002f6: call   0xffffc1a6
  002fb: test   rax,rax
  002fe: je     0x3c817
  00304: movq   xmm4,xmm0
  00308: mulsd  xmm3,xmm4
:00011 %2 = %2 + %3                         [Float][Float]
  0030c: addsd  xmm2,xmm3
:00012 %3 = @z: Vec[IvarId(2)]
  00310: mov    rdi,QWORD PTR [rbp-0x28]
  00314: mov    rax,QWORD PTR [rdi+0x20]
  00318: mov    QWORD PTR [rbp-0x40],rax
:00013 %4 = %1.call z()                     [Vec]
  0031c: mov    rdi,QWORD PTR [rbp-0x30]
  00320: test   rdi,0x7
  00327: jne    0x3c833
  0032d: cmp    DWORD PTR [rdi+0x4],0x28
  00331: jne    0x3c833
  00337: cmp    DWORD PTR [rip+0xffffffffffffeef9],0x26        # 0xfffff237
  0033e: jne    0x3c833
  00344: mov    esi,DWORD PTR [rip+0x144]        # 0x48e
  0034a: cmp    esi,0xffffffff
  0034d: je     0x3c84f
  00353: cmp    WORD PTR [rdi+0x2],0x3
  00358: jne    0x371
  0035e: cmp    esi,0x6
  00361: jge    0x371
  00367: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0036c: jmp    0x38f
  00371: sub    rsp,0x10
  00375: movq   QWORD PTR [rsp],xmm2
  0037a: movabs rax,0x55b5b00a3ef0
  00384: call   rax
  00386: movq   xmm2,QWORD PTR [rsp]
  0038b: add    rsp,0x10
  0038f: mov    QWORD PTR [rbp-0x48],rax
:00014 
:00016 %3 = %3 * %4                         [Float][Float]
  00393: mov    rdi,QWORD PTR [rbp-0x40]
  00397: test   rdi,0x1
  0039e: jne    0x3c88a
  003a4: test   rdi,0x2
  003ab: je     0x3e7
  003b1: xorps  xmm3,xmm3
  003b4: movabs rax,0x8000000000000002
  003be: cmp    rdi,rax
  003c1: je     0x3f9
  003c7: mov    rax,rdi
  003ca: sar    rax,0x3f
  003ce: add    rax,0x2
  003d2: and    rdi,0xfffffffffffffffc
  003d6: or     rdi,rax
  003d9: rol    rdi,0x3d
  003dd: movq   xmm3,rdi
  003e2: jmp    0x3f9
  003e7: call   0xffffc1a6
  003ec: test   rax,rax
  003ef: je     0x3c88a
  003f5: movq   xmm3,xmm0
  003f9: mov    rdi,QWORD PTR [rbp-0x48]
  003fd: test   rdi,0x1
  00404: jne    0x3c8a6
  0040a: test   rdi,0x2
  00411: je     0x44d
  00417: xorps  xmm4,xmm4
  0041a: movabs rax,0x8000000000000002
  00424: cmp    rdi,rax
  00427: je     0x45f
  0042d: mov    rax,rdi
  00430: sar    rax,0x3f
  00434: add    rax,0x2
  00438: and    rdi,0xfffffffffffffffc
  0043c: or     rdi,rax
  0043f: rol    rdi,0x3d
  00443: movq   xmm4,rdi
  00448: jmp    0x45f
  0044d: call   0xffffc1a6
  00452: test   rax,rax
  00455: je     0x3c8a6
  0045b: movq   xmm4,xmm0
  0045f: mulsd  xmm3,xmm4
:00017 %2 = %2 + %3                         [Float][Float]
  00463: addsd  xmm2,xmm3
:00018 ret %2
  00467: movq   xmm0,xmm2
  0046b: call   0xffffc2ca
  00470: mov    QWORD PTR [rbp-0x38],rax
  00474: mov    rax,QWORD PTR [rbp-0x38]
  00478: leave  
  00479: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55b5b07be970
<== finished compile. elapsed:178.2µs
offset:Pos(17418) code: 7410 bytes  data: 396 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x3c39e
  00022:    	jmp    0x3c39e
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086: ff 	mov    QWORD PTR [rbp-0x98],rax
  0008d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00094:    	mov    rdi,QWORD PTR [rbp-0x28]
  00098: 00 	test   rdi,0x7
  0009f:    	jne    0x3c3ad
  000a5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  000a9:    	jne    0x3c3ad
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  000af:    	mov    rdi,QWORD PTR [rbp-0x30]
  000b3: 00 	test   rdi,0x7
  000ba:    	jne    0x3c3bc
  000c0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000c4:    	jne    0x3c3bc
  000ca: 26 	cmp    DWORD PTR [rip+0xffffffffffffec42],0x26        # 0xffffed13
  000d1:    	jne    0x3c3bc
  000d7:    	mov    esi,DWORD PTR [rip+0x1c19]        # 0x1cf6
  000dd:    	cmp    esi,0xffffffff
  000e0:    	je     0x3c3cb
  000e6:    	cmp    WORD PTR [rdi+0x2],0x3
  000eb:    	jne    0x104
  000f1:    	cmp    esi,0x6
  000f4:    	jge    0x104
  000fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff:    	jmp    0x110
  00104: b5 	movabs rax,0x55b5b00a3ef0
  0010e:    	call   rax
  00110:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  00114:    	mov    rdi,QWORD PTR [rbp-0x28]
  00118:    	mov    rax,QWORD PTR [rdi+0x10]
  0011c:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00120:    	mov    rdi,QWORD PTR [rbp-0x70]
  00124: 00 	test   rdi,0x7
  0012b:    	jne    0x3c3f4
  00131:    	cmp    DWORD PTR [rdi+0x4],0x28
  00135:    	jne    0x3c3f4
  0013b: 26 	cmp    DWORD PTR [rip+0xffffffffffffebd1],0x26        # 0xffffed13
  00142:    	jne    0x3c3f4
  00148: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00151:    	mov    QWORD PTR [rsp-0x38],rcx
  00156:    	mov    rax,QWORD PTR [rbx]
  00159:    	lea    rsi,[rsp-0x18]
  0015e:    	mov    QWORD PTR [rsi],rax
  00161:    	mov    QWORD PTR [rbx],rsi
  00164:    	mov    rax,QWORD PTR [rbp-0x70]
  00168:    	mov    QWORD PTR [rsp-0x38],rax
  0016d: 00 	mov    rdi,0x1
  00174:    	lea    r8,[rsp-0x40]
  00179:    	mov    rax,QWORD PTR [rbp-0x78]
  0017d:    	mov    QWORD PTR [r8],rax
  00180:    	sub    r8,0x8
  00184: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0018d: 08 	movabs rax,0x800000040
  00197:    	mov    QWORD PTR [rsp-0x28],rax
  0019c: b5 	movabs r13,0x55b5b08082c0
  001a6:    	call   0xfffff9f2
  001ab:    	lea    rdi,[rbp-0x8]
  001af:    	mov    QWORD PTR [rbx],rdi
  001b2: b5 	movabs r13,0x55b5b07be9e0
  001bc:    	test   rax,rax
  001bf:    	je     0xffffbc29
  001c5:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001c9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001cd: 00 	test   rdi,0x7
  001d4:    	jne    0x3c403
  001da:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001de:    	jne    0x3c403
  001e4: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb28],0x26        # 0xffffed13
  001eb:    	jne    0x3c403
  001f1:    	mov    esi,DWORD PTR [rip+0x1b07]        # 0x1cfe
  001f7:    	cmp    esi,0xffffffff
  001fa:    	je     0x3c412
  00200:    	cmp    WORD PTR [rdi+0x2],0x3
  00205:    	jne    0x21e
  0020b:    	cmp    esi,0x6
  0020e:    	jge    0x21e
  00214:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00219:    	jmp    0x22a
  0021e: b5 	movabs rax,0x55b5b00a3ef0
  00228:    	call   rax
  0022a:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0022e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00232: 00 	test   rdi,0x7
  00239:    	jne    0x3c43b
  0023f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00243:    	jne    0x3c43b
  00249: 26 	cmp    DWORD PTR [rip+0xffffffffffffeac3],0x26        # 0xffffed13
  00250:    	jne    0x3c43b
  00256: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0025f:    	mov    QWORD PTR [rsp-0x38],rcx
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rsi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rsi],rax
  0026f:    	mov    QWORD PTR [rbx],rsi
  00272:    	mov    rax,QWORD PTR [rbp-0x40]
  00276:    	mov    QWORD PTR [rsp-0x38],rax
  0027b: 00 	mov    rdi,0x1
  00282:    	lea    r8,[rsp-0x40]
  00287:    	mov    rax,QWORD PTR [rbp-0x70]
  0028b:    	mov    QWORD PTR [r8],rax
  0028e:    	sub    r8,0x8
  00292: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0029b: 05 	movabs rax,0x500000042
  002a5:    	mov    QWORD PTR [rsp-0x28],rax
  002aa: b5 	movabs r13,0x55b5b07ddec0
  002b4:    	call   0xfffffa84
  002b9:    	lea    rdi,[rbp-0x8]
  002bd:    	mov    QWORD PTR [rbx],rdi
  002c0: b5 	movabs r13,0x55b5b07bea40
  002ca:    	test   rax,rax
  002cd:    	je     0xffffbc29
  002d3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002d7:    	mov    rax,QWORD PTR [rbp-0x40]
  002db:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002df:    	mov    rdi,QWORD PTR [rbp-0x40]
  002e3: 00 	test   rdi,0x7
  002ea:    	jne    0x3c44a
  002f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  002f4:    	jne    0x3c44a
  002fa: 26 	cmp    DWORD PTR [rip+0xffffffffffffea12],0x26        # 0xffffed13
  00301:    	jne    0x3c44a
  00307: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00310:    	mov    QWORD PTR [rsp-0x38],rcx
  00315:    	mov    rax,QWORD PTR [rbx]
  00318:    	lea    rsi,[rsp-0x18]
  0031d:    	mov    QWORD PTR [rsi],rax
  00320:    	mov    QWORD PTR [rbx],rsi
  00323:    	mov    rax,QWORD PTR [rbp-0x40]
  00327:    	mov    QWORD PTR [rsp-0x38],rax
  0032c: 00 	mov    rdi,0x1
  00333:    	lea    r8,[rsp-0x40]
  00338:    	mov    rax,QWORD PTR [rbp-0x78]
  0033c:    	mov    QWORD PTR [r8],rax
  0033f:    	sub    r8,0x8
  00343: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0034c: 05 	movabs rax,0x500000042
  00356:    	mov    QWORD PTR [rsp-0x28],rax
  0035b: b5 	movabs r13,0x55b5b07ddec0
  00365:    	call   0xfffffa84
  0036a:    	lea    rdi,[rbp-0x8]
  0036e:    	mov    QWORD PTR [rbx],rdi
  00371: b5 	movabs r13,0x55b5b07bea80
  0037b:    	test   rax,rax
  0037e:    	je     0xffffbc29
  00384:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00388:    	mov    rdi,QWORD PTR [rbp-0x28]
  0038c:    	mov    rax,QWORD PTR [rdi+0x18]
  00390:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00394:    	mov    rdi,QWORD PTR [rbp-0x28]
  00398:    	mov    rax,QWORD PTR [rdi+0x18]
  0039c:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  003a0:    	mov    rdi,QWORD PTR [rbp-0x78]
  003a4: 00 	test   rdi,0x1
  003ab:    	jne    0x3c459
  003b1: 00 	test   rdi,0x2
  003b8:    	je     0x3f4
  003be:    	xorps  xmm2,xmm2
  003c1: 00 	movabs rax,0x8000000000000002
  003cb:    	cmp    rdi,rax
  003ce:    	je     0x406
  003d4:    	mov    rax,rdi
  003d7:    	sar    rax,0x3f
  003db:    	add    rax,0x2
  003df:    	and    rdi,0xfffffffffffffffc
  003e3:    	or     rdi,rax
  003e6:    	rol    rdi,0x3d
  003ea:    	movq   xmm2,rdi
  003ef:    	jmp    0x406
  003f4:    	call   0xffffbc82
  003f9:    	test   rax,rax
  003fc:    	je     0x3c459
  00402:    	movq   xmm2,xmm0
  00406:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040a: 00 	test   rdi,0x1
  00411:    	jne    0x3c468
  00417: 00 	test   rdi,0x2
  0041e:    	je     0x45a
  00424:    	xorps  xmm3,xmm3
  00427: 00 	movabs rax,0x8000000000000002
  00431:    	cmp    rdi,rax
  00434:    	je     0x46c
  0043a:    	mov    rax,rdi
  0043d:    	sar    rax,0x3f
  00441:    	add    rax,0x2
  00445:    	and    rdi,0xfffffffffffffffc
  00449:    	or     rdi,rax
  0044c:    	rol    rdi,0x3d
  00450:    	movq   xmm3,rdi
  00455:    	jmp    0x46c
  0045a:    	call   0xffffbc82
  0045f:    	test   rax,rax
  00462:    	je     0x3c468
  00468:    	movq   xmm3,xmm0
  0046c:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00470:    	mov    rdi,QWORD PTR [rbp-0x70]
  00474: 00 	test   rdi,0x1
  0047b:    	jne    0x3c477
  00481: 00 	test   rdi,0x2
  00488:    	je     0x4c4
  0048e:    	xorps  xmm4,xmm4
  00491: 00 	movabs rax,0x8000000000000002
  0049b:    	cmp    rdi,rax
  0049e:    	je     0x4d6
  004a4:    	mov    rax,rdi
  004a7:    	sar    rax,0x3f
  004ab:    	add    rax,0x2
  004af:    	and    rdi,0xfffffffffffffffc
  004b3:    	or     rdi,rax
  004b6:    	rol    rdi,0x3d
  004ba:    	movq   xmm4,rdi
  004bf:    	jmp    0x4d6
  004c4:    	call   0xffffbc82
  004c9:    	test   rax,rax
  004cc:    	je     0x3c477
  004d2:    	movq   xmm4,xmm0
  004d6:    	movq   xmm5,xmm4
  004da:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004de:    	mov    rdi,QWORD PTR [rbp-0x48]
  004e2: 00 	test   rdi,0x1
  004e9:    	jne    0x3c493
  004ef: 00 	test   rdi,0x2
  004f6:    	je     0x532
  004fc:    	xorps  xmm6,xmm6
  004ff: 00 	movabs rax,0x8000000000000002
  00509:    	cmp    rdi,rax
  0050c:    	je     0x544
  00512:    	mov    rax,rdi
  00515:    	sar    rax,0x3f
  00519:    	add    rax,0x2
  0051d:    	and    rdi,0xfffffffffffffffc
  00521:    	or     rdi,rax
  00524:    	rol    rdi,0x3d
  00528:    	movq   xmm6,rdi
  0052d:    	jmp    0x544
  00532:    	call   0xffffbc82
  00537:    	test   rax,rax
  0053a:    	je     0x3c493
  00540:    	movq   xmm6,xmm0
  00544:    	movq   xmm4,xmm6
  00548:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0054c:    	movq   xmm7,xmm4
  00550:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00554: 00 	movq   xmm4,QWORD PTR [rip+0x17aa]        # 0x1d06
  0055c: 00 	movabs rax,0x8000000000000002
  00566:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0056a:    	ucomisd xmm7,xmm4
  0056e:    	jbe    0x3da6f
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00574: 01 	sub    DWORD PTR [rip+0x1793],0x1        # 0x1d0e
  0057b:    	je     0x3c4ff
  00581:    	movq   xmm0,xmm6
  00585:    	call   0xffffbda6
  0058a:    	mov    QWORD PTR [rbp-0x70],rax
  0058e:    	sub    rsp,0x30
  00592:    	movq   QWORD PTR [rsp],xmm2
  00597:    	movq   QWORD PTR [rsp+0x8],xmm3
  0059d:    	movq   QWORD PTR [rsp+0x10],xmm5
  005a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  005a9:    	movq   QWORD PTR [rsp+0x20],xmm7
  005af:    	mov    rdi,QWORD PTR [rbp-0x70]
  005b3:    	mov    rdx,rdi
  005b6:    	mov    rdi,rbx
  005b9:    	mov    rsi,r12
  005bc: b5 	movabs rax,0x55b5b00e59e0
  005c6:    	call   rax
  005c8:    	movq   xmm2,QWORD PTR [rsp]
  005cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005df:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005e5:    	add    rsp,0x30
  005e9: b5 	movabs r13,0x55b5b07beb40
  005f3:    	test   rax,rax
  005f6:    	je     0xffffbc29
  005fc:    	mov    QWORD PTR [rbp-0x70],rax
:00029 %11 = const[Math]                    [<INVALID>]
  00600: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe71f]        # 0xffffed26
  00607: 00 	cmp    rax,QWORD PTR [rip+0x1718]        # 0x1d26
  0060e:    	jne    0x3c521
  00614: 00 	mov    rax,QWORD PTR [rip+0x16fb]        # 0x1d16
  0061b:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  0061f: 01 	sub    DWORD PTR [rip+0x1708],0x1        # 0x1d2e
  00626:    	je     0x3c5da
  0062c:    	movq   xmm0,xmm7
  00630:    	call   0xffffbda6
  00635: ff 	mov    QWORD PTR [rbp-0x88],rax
  0063c:    	sub    rsp,0x20
  00640:    	movq   QWORD PTR [rsp],xmm5
  00645:    	movq   QWORD PTR [rsp+0x8],xmm6
  0064b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00651:    	mov    rdi,QWORD PTR [rbp-0x80]
  00655: b5 	movabs rax,0x55b5b009e670
  0065f:    	call   rax
  00661:    	mov    r15d,eax
  00664: 00 	cmp    r15d,DWORD PTR [rip+0x16cb]        # 0x1d36
  0066b:    	jne    0x3c5fc
  00671:    	mov    eax,DWORD PTR [rip+0xffffffffffffe69c]        # 0xffffed13
  00677:    	cmp    DWORD PTR [rip+0x16b5],eax        # 0x1d32
  0067d:    	jne    0x3c5fc
  00683: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0068c:    	mov    QWORD PTR [rsp-0x38],rcx
  00691:    	mov    rax,QWORD PTR [rbx]
  00694:    	lea    rsi,[rsp-0x18]
  00699:    	mov    QWORD PTR [rsi],rax
  0069c:    	mov    QWORD PTR [rbx],rsi
  0069f:    	mov    rax,QWORD PTR [rbp-0x80]
  006a3:    	mov    QWORD PTR [rsp-0x38],rax
  006a8: 00 	mov    rdi,0x1
  006af:    	lea    r8,[rsp-0x40]
  006b4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  006bb:    	mov    QWORD PTR [r8],rax
  006be:    	sub    r8,0x8
  006c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006cb: 00 	movabs rax,0x0
  006d5:    	mov    QWORD PTR [rsp-0x28],rax
  006da: 00 	movabs r13,0x0
  006e4:    	call   0xffffbbf6
  006e9:    	lea    rdi,[rbp-0x8]
  006ed:    	mov    QWORD PTR [rbx],rdi
  006f0:    	movq   xmm5,QWORD PTR [rsp]
  006f5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006fb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00701:    	add    rsp,0x20
  00705:    	test   rax,rax
  00708:    	je     0x3c668
  0070e:    	mov    QWORD PTR [rbp-0x78],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00712: 01 	sub    DWORD PTR [rip+0x1621],0x1        # 0x1d3a
  00719:    	je     0x3c6a0
  0071f:    	mov    rdi,QWORD PTR [rbp-0x70]
  00723:    	mov    rsi,QWORD PTR [rbp-0x78]
  00727:    	sub    rsp,0x20
  0072b:    	movq   QWORD PTR [rsp],xmm5
  00730:    	movq   QWORD PTR [rsp+0x8],xmm6
  00736:    	movq   QWORD PTR [rsp+0x10],xmm7
  0073c:    	mov    rdx,rdi
  0073f:    	mov    rcx,rsi
  00742:    	mov    rdi,rbx
  00745:    	mov    rsi,r12
  00748: b5 	movabs rax,0x55b5b00e7bd0
  00752:    	call   rax
  00754:    	movq   xmm5,QWORD PTR [rsp]
  00759:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0075f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00765:    	add    rsp,0x20
  00769: b5 	movabs r13,0x55b5b07beba0
  00773:    	test   rax,rax
  00776:    	je     0xffffbc29
  0077c:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %9 = literal[0.0]
  00780: 00 	movq   xmm2,QWORD PTR [rip+0x15be]        # 0x1d46
  00788: 00 	movabs rax,0x8000000000000002
  00792:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00796:    	mov    rdi,QWORD PTR [rbp-0x60]
  0079a:    	mov    rsi,QWORD PTR [rbp-0x70]
  0079e: 00 	test   rdi,0x1
  007a5:    	je     0x3c6c2
  007ab: 00 	test   rsi,0x1
  007b2:    	je     0x3c6c2
  007b8:    	cmp    rdi,rsi
  007bb:    	jle    0x3d9d6
:00038 %9 = %2.call t()                     [<INVALID>]
  007c1: 01 	sub    DWORD PTR [rip+0x1586],0x1        # 0x1d4e
  007c8:    	je     0x3c734
  007ce:    	sub    rsp,0x20
  007d2:    	movq   QWORD PTR [rsp],xmm5
  007d7:    	movq   QWORD PTR [rsp+0x8],xmm6
  007dd:    	movq   QWORD PTR [rsp+0x10],xmm7
  007e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  007e7: b5 	movabs rax,0x55b5b009e670
  007f1:    	call   rax
  007f3:    	mov    r15d,eax
  007f6: 00 	cmp    r15d,DWORD PTR [rip+0x1559]        # 0x1d56
  007fd:    	jne    0x3c756
  00803:    	mov    eax,DWORD PTR [rip+0xffffffffffffe50a]        # 0xffffed13
  00809:    	cmp    DWORD PTR [rip+0x1543],eax        # 0x1d52
  0080f:    	jne    0x3c756
  00815: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0081e:    	mov    QWORD PTR [rsp-0x38],rcx
  00823:    	mov    rax,QWORD PTR [rbx]
  00826:    	lea    rsi,[rsp-0x18]
  0082b:    	mov    QWORD PTR [rsi],rax
  0082e:    	mov    QWORD PTR [rbx],rsi
  00831:    	mov    rax,QWORD PTR [rbp-0x38]
  00835:    	mov    QWORD PTR [rsp-0x38],rax
  0083a: 00 	mov    rdi,0x0
  00841: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0084a: 00 	movabs rax,0x0
  00854:    	mov    QWORD PTR [rsp-0x28],rax
  00859: 00 	movabs r13,0x0
  00863:    	call   0xffffbbf6
  00868:    	lea    rdi,[rbp-0x8]
  0086c:    	mov    QWORD PTR [rbx],rdi
  0086f:    	movq   xmm5,QWORD PTR [rsp]
  00874:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0087a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00880:    	add    rsp,0x20
  00884:    	test   rax,rax
  00887:    	je     0x3c7c2
  0088d:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00891:    	mov    rdi,QWORD PTR [rbp-0x60]
  00895:    	mov    rsi,QWORD PTR [rbp-0x70]
  00899: 00 	test   rdi,0x1
  008a0:    	je     0x3c7d1
  008a6: 00 	test   rsi,0x1
  008ad:    	je     0x3c7d1
  008b3:    	cmp    rdi,rsi
  008b6:    	jge    0x3da09
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  008bc: 01 	sub    DWORD PTR [rip+0x1497],0x1        # 0x1d5a
  008c3:    	je     0x3c843
  008c9:    	sub    rsp,0x20
  008cd:    	movq   QWORD PTR [rsp],xmm5
  008d2:    	movq   QWORD PTR [rsp+0x8],xmm6
  008d8:    	movq   QWORD PTR [rsp+0x10],xmm7
  008de:    	mov    rdi,QWORD PTR [rbp-0x38]
  008e2: b5 	movabs rax,0x55b5b009e670
  008ec:    	call   rax
  008ee:    	mov    r15d,eax
  008f1: 00 	cmp    r15d,DWORD PTR [rip+0x146a]        # 0x1d62
  008f8:    	jne    0x3c865
  008fe:    	mov    eax,DWORD PTR [rip+0xffffffffffffe40f]        # 0xffffed13
  00904:    	cmp    DWORD PTR [rip+0x1454],eax        # 0x1d5e
  0090a:    	jne    0x3c865
  00910: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00919:    	mov    QWORD PTR [rsp-0x38],rcx
  0091e:    	mov    rax,QWORD PTR [rbx]
  00921:    	lea    rsi,[rsp-0x18]
  00926:    	mov    QWORD PTR [rsi],rax
  00929:    	mov    QWORD PTR [rbx],rsi
  0092c:    	mov    rax,QWORD PTR [rbp-0x38]
  00930:    	mov    QWORD PTR [rsp-0x38],rax
  00935: 00 	mov    rdi,0x1
  0093c:    	lea    r8,[rsp-0x40]
  00941:    	mov    rax,QWORD PTR [rbp-0x60]
  00945:    	mov    QWORD PTR [r8],rax
  00948:    	sub    r8,0x8
  0094c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00955: 00 	movabs rax,0x0
  0095f:    	mov    QWORD PTR [rsp-0x28],rax
  00964: 00 	movabs r13,0x0
  0096e:    	call   0xffffbbf6
  00973:    	lea    rdi,[rbp-0x8]
  00977:    	mov    QWORD PTR [rbx],rdi
  0097a:    	movq   xmm5,QWORD PTR [rsp]
  0097f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00985:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0098b:    	add    rsp,0x20
  0098f:    	test   rax,rax
  00992:    	je     0x3c8d1
:00044 
:00046 %9 = literal[true]
  00998: 00 	mov    rax,0x1c
  0099f:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  009a3: 01 	sub    DWORD PTR [rip+0x13bc],0x1        # 0x1d66
  009aa:    	je     0x3c909
  009b0:    	sub    rsp,0x20
  009b4:    	movq   QWORD PTR [rsp],xmm5
  009b9:    	movq   QWORD PTR [rsp+0x8],xmm6
  009bf:    	movq   QWORD PTR [rsp+0x10],xmm7
  009c5:    	mov    rdi,QWORD PTR [rbp-0x38]
  009c9: b5 	movabs rax,0x55b5b009e670
  009d3:    	call   rax
  009d5:    	mov    r15d,eax
  009d8: 00 	cmp    r15d,DWORD PTR [rip+0x138f]        # 0x1d6e
  009df:    	jne    0x3c92b
  009e5:    	mov    eax,DWORD PTR [rip+0xffffffffffffe328]        # 0xffffed13
  009eb:    	cmp    DWORD PTR [rip+0x1379],eax        # 0x1d6a
  009f1:    	jne    0x3c92b
  009f7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a00:    	mov    QWORD PTR [rsp-0x38],rcx
  00a05:    	mov    rax,QWORD PTR [rbx]
  00a08:    	lea    rsi,[rsp-0x18]
  00a0d:    	mov    QWORD PTR [rsi],rax
  00a10:    	mov    QWORD PTR [rbx],rsi
  00a13:    	mov    rax,QWORD PTR [rbp-0x38]
  00a17:    	mov    QWORD PTR [rsp-0x38],rax
  00a1c: 00 	mov    rdi,0x1
  00a23:    	lea    r8,[rsp-0x40]
  00a28:    	mov    rax,QWORD PTR [rbp-0x70]
  00a2c:    	mov    QWORD PTR [r8],rax
  00a2f:    	sub    r8,0x8
  00a33: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a3c: 00 	movabs rax,0x0
  00a46:    	mov    QWORD PTR [rsp-0x28],rax
  00a4b: 00 	movabs r13,0x0
  00a55:    	call   0xffffbbf6
  00a5a:    	lea    rdi,[rbp-0x8]
  00a5e:    	mov    QWORD PTR [rbx],rdi
  00a61:    	movq   xmm5,QWORD PTR [rsp]
  00a66:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a6c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a72:    	add    rsp,0x20
  00a76:    	test   rax,rax
  00a79:    	je     0x3c997
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a7f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe2a0]        # 0xffffed26
  00a86: 00 	cmp    rax,QWORD PTR [rip+0x12f9]        # 0x1d86
  00a8d:    	jne    0x3c9a6
  00a93: 00 	mov    rax,QWORD PTR [rip+0x12dc]        # 0x1d76
  00a9a:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a9e: 01 	sub    DWORD PTR [rip+0x12e9],0x1        # 0x1d8e
  00aa5:    	je     0x3ca3f
  00aab:    	sub    rsp,0x20
  00aaf:    	movq   QWORD PTR [rsp],xmm5
  00ab4:    	movq   QWORD PTR [rsp+0x8],xmm6
  00aba:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ac0:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ac4: b5 	movabs rax,0x55b5b009e670
  00ace:    	call   rax
  00ad0:    	mov    r15d,eax
  00ad3: 00 	cmp    r15d,DWORD PTR [rip+0x12bc]        # 0x1d96
  00ada:    	jne    0x3ca61
  00ae0:    	mov    eax,DWORD PTR [rip+0xffffffffffffe22d]        # 0xffffed13
  00ae6:    	cmp    DWORD PTR [rip+0x12a6],eax        # 0x1d92
  00aec:    	jne    0x3ca61
  00af2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00afb:    	mov    QWORD PTR [rsp-0x38],rcx
  00b00:    	mov    rax,QWORD PTR [rbx]
  00b03:    	lea    rsi,[rsp-0x18]
  00b08:    	mov    QWORD PTR [rsi],rax
  00b0b:    	mov    QWORD PTR [rbx],rsi
  00b0e:    	mov    rax,QWORD PTR [rbp-0x30]
  00b12:    	mov    QWORD PTR [rsp-0x38],rax
  00b17: 00 	mov    rdi,0x0
  00b1e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b27: 00 	movabs rax,0x0
  00b31:    	mov    QWORD PTR [rsp-0x28],rax
  00b36: 00 	movabs r13,0x0
  00b40:    	call   0xffffbbf6
  00b45:    	lea    rdi,[rbp-0x8]
  00b49:    	mov    QWORD PTR [rbx],rdi
  00b4c:    	movq   xmm5,QWORD PTR [rsp]
  00b51:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b57:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b5d:    	add    rsp,0x20
  00b61:    	test   rax,rax
  00b64:    	je     0x3cacd
  00b6a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b71: 01 	sub    DWORD PTR [rip+0x1222],0x1        # 0x1d9a
  00b78:    	je     0x3cb05
  00b7e:    	sub    rsp,0x20
  00b82:    	movq   QWORD PTR [rsp],xmm5
  00b87:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b8d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b93: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b9a: b5 	movabs rax,0x55b5b009e670
  00ba4:    	call   rax
  00ba6:    	mov    r15d,eax
  00ba9: 00 	cmp    r15d,DWORD PTR [rip+0x11f2]        # 0x1da2
  00bb0:    	jne    0x3cb27
  00bb6:    	mov    eax,DWORD PTR [rip+0xffffffffffffe157]        # 0xffffed13
  00bbc:    	cmp    DWORD PTR [rip+0x11dc],eax        # 0x1d9e
  00bc2:    	jne    0x3cb27
  00bc8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bd1:    	mov    QWORD PTR [rsp-0x38],rcx
  00bd6:    	mov    rax,QWORD PTR [rbx]
  00bd9:    	lea    rsi,[rsp-0x18]
  00bde:    	mov    QWORD PTR [rsi],rax
  00be1:    	mov    QWORD PTR [rbx],rsi
  00be4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00beb:    	mov    QWORD PTR [rsp-0x38],rax
  00bf0: 00 	mov    rdi,0x0
  00bf7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c00: 00 	movabs rax,0x0
  00c0a:    	mov    QWORD PTR [rsp-0x28],rax
  00c0f: 00 	movabs r13,0x0
  00c19:    	call   0xffffbbf6
  00c1e:    	lea    rdi,[rbp-0x8]
  00c22:    	mov    QWORD PTR [rbx],rdi
  00c25:    	movq   xmm5,QWORD PTR [rsp]
  00c2a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c30:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c36:    	add    rsp,0x20
  00c3a:    	test   rax,rax
  00c3d:    	je     0x3cb96
  00c43:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c47: 01 	sub    DWORD PTR [rip+0x1158],0x1        # 0x1da6
  00c4e:    	je     0x3cbce
  00c54:    	sub    rsp,0x20
  00c58:    	movq   QWORD PTR [rsp],xmm5
  00c5d:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c63:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c69:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c6d: b5 	movabs rax,0x55b5b009e670
  00c77:    	call   rax
  00c79:    	mov    r15d,eax
  00c7c: 00 	cmp    r15d,DWORD PTR [rip+0x112b]        # 0x1dae
  00c83:    	jne    0x3cbf0
  00c89:    	mov    eax,DWORD PTR [rip+0xffffffffffffe084]        # 0xffffed13
  00c8f:    	cmp    DWORD PTR [rip+0x1115],eax        # 0x1daa
  00c95:    	jne    0x3cbf0
  00c9b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ca4:    	mov    QWORD PTR [rsp-0x38],rcx
  00ca9:    	mov    rax,QWORD PTR [rbx]
  00cac:    	lea    rsi,[rsp-0x18]
  00cb1:    	mov    QWORD PTR [rsi],rax
  00cb4:    	mov    QWORD PTR [rbx],rsi
  00cb7:    	mov    rax,QWORD PTR [rbp-0x30]
  00cbb:    	mov    QWORD PTR [rsp-0x38],rax
  00cc0: 00 	mov    rdi,0x0
  00cc7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cd0: 00 	movabs rax,0x0
  00cda:    	mov    QWORD PTR [rsp-0x28],rax
  00cdf: 00 	movabs r13,0x0
  00ce9:    	call   0xffffbbf6
  00cee:    	lea    rdi,[rbp-0x8]
  00cf2:    	mov    QWORD PTR [rbx],rdi
  00cf5:    	movq   xmm5,QWORD PTR [rsp]
  00cfa:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d00:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d06:    	add    rsp,0x20
  00d0a:    	test   rax,rax
  00d0d:    	je     0x3cc5c
  00d13: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00d1a: 01 	sub    DWORD PTR [rip+0x1091],0x1        # 0x1db2
  00d21:    	je     0x3cc94
  00d27:    	sub    rsp,0x20
  00d2b:    	movq   QWORD PTR [rsp],xmm5
  00d30:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d36:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d3c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00d43: b5 	movabs rax,0x55b5b009e670
  00d4d:    	call   rax
  00d4f:    	mov    r15d,eax
  00d52: 00 	cmp    r15d,DWORD PTR [rip+0x1061]        # 0x1dba
  00d59:    	jne    0x3ccb6
  00d5f:    	mov    eax,DWORD PTR [rip+0xffffffffffffdfae]        # 0xffffed13
  00d65:    	cmp    DWORD PTR [rip+0x104b],eax        # 0x1db6
  00d6b:    	jne    0x3ccb6
  00d71: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d7a:    	mov    QWORD PTR [rsp-0x38],rcx
  00d7f:    	mov    rax,QWORD PTR [rbx]
  00d82:    	lea    rsi,[rsp-0x18]
  00d87:    	mov    QWORD PTR [rsi],rax
  00d8a:    	mov    QWORD PTR [rbx],rsi
  00d8d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00d94:    	mov    QWORD PTR [rsp-0x38],rax
  00d99: 00 	mov    rdi,0x0
  00da0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00da9: 00 	movabs rax,0x0
  00db3:    	mov    QWORD PTR [rsp-0x28],rax
  00db8: 00 	movabs r13,0x0
  00dc2:    	call   0xffffbbf6
  00dc7:    	lea    rdi,[rbp-0x8]
  00dcb:    	mov    QWORD PTR [rbx],rdi
  00dce:    	movq   xmm5,QWORD PTR [rsp]
  00dd3:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00dd9:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ddf:    	add    rsp,0x20
  00de3:    	test   rax,rax
  00de6:    	je     0x3cd25
  00dec: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00df3: 01 	sub    DWORD PTR [rip+0xfc4],0x1        # 0x1dbe
  00dfa:    	je     0x3cd5d
  00e00: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00e07:    	mov    rsi,QWORD PTR [rbp-0x60]
  00e0b:    	sub    rsp,0x20
  00e0f:    	movq   QWORD PTR [rsp],xmm5
  00e14:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e1a:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e20:    	mov    rdx,rdi
  00e23:    	mov    rcx,rsi
  00e26:    	mov    rdi,rbx
  00e29:    	mov    rsi,r12
  00e2c: b5 	movabs rax,0x55b5b00e8b30
  00e36:    	call   rax
  00e38:    	movq   xmm5,QWORD PTR [rsp]
  00e3d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e43:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e49:    	add    rsp,0x20
  00e4d: b5 	movabs r13,0x55b5b07bed70
  00e57:    	test   rax,rax
  00e5a:    	je     0xffffbc29
  00e60: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e67: 01 	sub    DWORD PTR [rip+0xf54],0x1        # 0x1dc2
  00e6e:    	je     0x3cda8
  00e74:    	mov    rdi,QWORD PTR [rbp-0x80]
  00e78: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00e7f:    	sub    rsp,0x20
  00e83:    	movq   QWORD PTR [rsp],xmm5
  00e88:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e8e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e94:    	mov    rdx,rdi
  00e97:    	mov    rcx,rsi
  00e9a:    	mov    rdi,rbx
  00e9d:    	mov    rsi,r12
  00ea0: b5 	movabs rax,0x55b5b00e6cb0
  00eaa:    	call   rax
  00eac:    	movq   xmm5,QWORD PTR [rsp]
  00eb1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00eb7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ebd:    	add    rsp,0x20
  00ec1: b5 	movabs r13,0x55b5b07bed80
  00ecb:    	test   rax,rax
  00ece:    	je     0xffffbc29
  00ed4:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00ed8: 01 	sub    DWORD PTR [rip+0xee7],0x1        # 0x1dc6
  00edf:    	je     0x3cdf3
  00ee5:    	sub    rsp,0x20
  00ee9:    	movq   QWORD PTR [rsp],xmm5
  00eee:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ef4:    	movq   QWORD PTR [rsp+0x10],xmm7
  00efa:    	mov    rdi,QWORD PTR [rbp-0x30]
  00efe: b5 	movabs rax,0x55b5b009e670
  00f08:    	call   rax
  00f0a:    	mov    r15d,eax
  00f0d: 00 	cmp    r15d,DWORD PTR [rip+0xeba]        # 0x1dce
  00f14:    	jne    0x3ce15
  00f1a:    	mov    eax,DWORD PTR [rip+0xffffffffffffddf3]        # 0xffffed13
  00f20:    	cmp    DWORD PTR [rip+0xea4],eax        # 0x1dca
  00f26:    	jne    0x3ce15
  00f2c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f35:    	mov    QWORD PTR [rsp-0x38],rcx
  00f3a:    	mov    rax,QWORD PTR [rbx]
  00f3d:    	lea    rsi,[rsp-0x18]
  00f42:    	mov    QWORD PTR [rsi],rax
  00f45:    	mov    QWORD PTR [rbx],rsi
  00f48:    	mov    rax,QWORD PTR [rbp-0x30]
  00f4c:    	mov    QWORD PTR [rsp-0x38],rax
  00f51: 00 	mov    rdi,0x0
  00f58: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f61: 00 	movabs rax,0x0
  00f6b:    	mov    QWORD PTR [rsp-0x28],rax
  00f70: 00 	movabs r13,0x0
  00f7a:    	call   0xffffbbf6
  00f7f:    	lea    rdi,[rbp-0x8]
  00f83:    	mov    QWORD PTR [rbx],rdi
  00f86:    	movq   xmm5,QWORD PTR [rsp]
  00f8b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f91:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f97:    	add    rsp,0x20
  00f9b:    	test   rax,rax
  00f9e:    	je     0x3ce81
  00fa4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00fab: 01 	sub    DWORD PTR [rip+0xe20],0x1        # 0x1dd2
  00fb2:    	je     0x3ceb9
  00fb8:    	sub    rsp,0x20
  00fbc:    	movq   QWORD PTR [rsp],xmm5
  00fc1:    	movq   QWORD PTR [rsp+0x8],xmm6
  00fc7:    	movq   QWORD PTR [rsp+0x10],xmm7
  00fcd: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00fd4: b5 	movabs rax,0x55b5b009e670
  00fde:    	call   rax
  00fe0:    	mov    r15d,eax
  00fe3: 00 	cmp    r15d,DWORD PTR [rip+0xdf0]        # 0x1dda
  00fea:    	jne    0x3cedb
  00ff0:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd1d]        # 0xffffed13
  00ff6:    	cmp    DWORD PTR [rip+0xdda],eax        # 0x1dd6
  00ffc:    	jne    0x3cedb
  01002: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0100b:    	mov    QWORD PTR [rsp-0x38],rcx
  01010:    	mov    rax,QWORD PTR [rbx]
  01013:    	lea    rsi,[rsp-0x18]
  01018:    	mov    QWORD PTR [rsi],rax
  0101b:    	mov    QWORD PTR [rbx],rsi
  0101e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01025:    	mov    QWORD PTR [rsp-0x38],rax
  0102a: 00 	mov    rdi,0x0
  01031: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0103a: 00 	movabs rax,0x0
  01044:    	mov    QWORD PTR [rsp-0x28],rax
  01049: 00 	movabs r13,0x0
  01053:    	call   0xffffbbf6
  01058:    	lea    rdi,[rbp-0x8]
  0105c:    	mov    QWORD PTR [rbx],rdi
  0105f:    	movq   xmm5,QWORD PTR [rsp]
  01064:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0106a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01070:    	add    rsp,0x20
  01074:    	test   rax,rax
  01077:    	je     0x3cf4a
  0107d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  01084: 01 	sub    DWORD PTR [rip+0xd53],0x1        # 0x1dde
  0108b:    	je     0x3cf82
  01091:    	sub    rsp,0x20
  01095:    	movq   QWORD PTR [rsp],xmm5
  0109a:    	movq   QWORD PTR [rsp+0x8],xmm6
  010a0:    	movq   QWORD PTR [rsp+0x10],xmm7
  010a6:    	mov    rdi,QWORD PTR [rbp-0x30]
  010aa: b5 	movabs rax,0x55b5b009e670
  010b4:    	call   rax
  010b6:    	mov    r15d,eax
  010b9: 00 	cmp    r15d,DWORD PTR [rip+0xd26]        # 0x1de6
  010c0:    	jne    0x3cfa4
  010c6:    	mov    eax,DWORD PTR [rip+0xffffffffffffdc47]        # 0xffffed13
  010cc:    	cmp    DWORD PTR [rip+0xd10],eax        # 0x1de2
  010d2:    	jne    0x3cfa4
  010d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010e1:    	mov    QWORD PTR [rsp-0x38],rcx
  010e6:    	mov    rax,QWORD PTR [rbx]
  010e9:    	lea    rsi,[rsp-0x18]
  010ee:    	mov    QWORD PTR [rsi],rax
  010f1:    	mov    QWORD PTR [rbx],rsi
  010f4:    	mov    rax,QWORD PTR [rbp-0x30]
  010f8:    	mov    QWORD PTR [rsp-0x38],rax
  010fd: 00 	mov    rdi,0x0
  01104: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0110d: 00 	movabs rax,0x0
  01117:    	mov    QWORD PTR [rsp-0x28],rax
  0111c: 00 	movabs r13,0x0
  01126:    	call   0xffffbbf6
  0112b:    	lea    rdi,[rbp-0x8]
  0112f:    	mov    QWORD PTR [rbx],rdi
  01132:    	movq   xmm5,QWORD PTR [rsp]
  01137:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0113d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01143:    	add    rsp,0x20
  01147:    	test   rax,rax
  0114a:    	je     0x3d010
  01150: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01157: 01 	sub    DWORD PTR [rip+0xc8c],0x1        # 0x1dea
  0115e:    	je     0x3d048
  01164:    	sub    rsp,0x20
  01168:    	movq   QWORD PTR [rsp],xmm5
  0116d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01173:    	movq   QWORD PTR [rsp+0x10],xmm7
  01179: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01180: b5 	movabs rax,0x55b5b009e670
  0118a:    	call   rax
  0118c:    	mov    r15d,eax
  0118f: 00 	cmp    r15d,DWORD PTR [rip+0xc5c]        # 0x1df2
  01196:    	jne    0x3d06a
  0119c:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb71]        # 0xffffed13
  011a2:    	cmp    DWORD PTR [rip+0xc46],eax        # 0x1dee
  011a8:    	jne    0x3d06a
  011ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011b7:    	mov    QWORD PTR [rsp-0x38],rcx
  011bc:    	mov    rax,QWORD PTR [rbx]
  011bf:    	lea    rsi,[rsp-0x18]
  011c4:    	mov    QWORD PTR [rsi],rax
  011c7:    	mov    QWORD PTR [rbx],rsi
  011ca: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011d1:    	mov    QWORD PTR [rsp-0x38],rax
  011d6: 00 	mov    rdi,0x0
  011dd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011e6: 00 	movabs rax,0x0
  011f0:    	mov    QWORD PTR [rsp-0x28],rax
  011f5: 00 	movabs r13,0x0
  011ff:    	call   0xffffbbf6
  01204:    	lea    rdi,[rbp-0x8]
  01208:    	mov    QWORD PTR [rbx],rdi
  0120b:    	movq   xmm5,QWORD PTR [rsp]
  01210:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01216:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0121c:    	add    rsp,0x20
  01220:    	test   rax,rax
  01223:    	je     0x3d0d9
  01229: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  01230: 01 	sub    DWORD PTR [rip+0xbbf],0x1        # 0x1df6
  01237:    	je     0x3d111
  0123d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01244:    	mov    rsi,QWORD PTR [rbp-0x60]
  01248:    	sub    rsp,0x20
  0124c:    	movq   QWORD PTR [rsp],xmm5
  01251:    	movq   QWORD PTR [rsp+0x8],xmm6
  01257:    	movq   QWORD PTR [rsp+0x10],xmm7
  0125d:    	mov    rdx,rdi
  01260:    	mov    rcx,rsi
  01263:    	mov    rdi,rbx
  01266:    	mov    rsi,r12
  01269: b5 	movabs rax,0x55b5b00e8b30
  01273:    	call   rax
  01275:    	movq   xmm5,QWORD PTR [rsp]
  0127a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01280:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01286:    	add    rsp,0x20
  0128a: b5 	movabs r13,0x55b5b07bee50
  01294:    	test   rax,rax
  01297:    	je     0xffffbc29
  0129d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  012a4: 01 	sub    DWORD PTR [rip+0xb4f],0x1        # 0x1dfa
  012ab:    	je     0x3d15c
  012b1: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  012b8: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  012bf:    	sub    rsp,0x20
  012c3:    	movq   QWORD PTR [rsp],xmm5
  012c8:    	movq   QWORD PTR [rsp+0x8],xmm6
  012ce:    	movq   QWORD PTR [rsp+0x10],xmm7
  012d4:    	mov    rdx,rdi
  012d7:    	mov    rcx,rsi
  012da:    	mov    rdi,rbx
  012dd:    	mov    rsi,r12
  012e0: b5 	movabs rax,0x55b5b00e6cb0
  012ea:    	call   rax
  012ec:    	movq   xmm5,QWORD PTR [rsp]
  012f1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012f7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012fd:    	add    rsp,0x20
  01301: b5 	movabs r13,0x55b5b07bee60
  0130b:    	test   rax,rax
  0130e:    	je     0xffffbc29
  01314: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  0131b: 01 	sub    DWORD PTR [rip+0xadc],0x1        # 0x1dfe
  01322:    	je     0x3d1a7
  01328:    	sub    rsp,0x20
  0132c:    	movq   QWORD PTR [rsp],xmm5
  01331:    	movq   QWORD PTR [rsp+0x8],xmm6
  01337:    	movq   QWORD PTR [rsp+0x10],xmm7
  0133d:    	mov    rdi,QWORD PTR [rbp-0x30]
  01341: b5 	movabs rax,0x55b5b009e670
  0134b:    	call   rax
  0134d:    	mov    r15d,eax
  01350: 00 	cmp    r15d,DWORD PTR [rip+0xaaf]        # 0x1e06
  01357:    	jne    0x3d1c9
  0135d:    	mov    eax,DWORD PTR [rip+0xffffffffffffd9b0]        # 0xffffed13
  01363:    	cmp    DWORD PTR [rip+0xa99],eax        # 0x1e02
  01369:    	jne    0x3d1c9
  0136f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01378:    	mov    QWORD PTR [rsp-0x38],rcx
  0137d:    	mov    rax,QWORD PTR [rbx]
  01380:    	lea    rsi,[rsp-0x18]
  01385:    	mov    QWORD PTR [rsi],rax
  01388:    	mov    QWORD PTR [rbx],rsi
  0138b:    	mov    rax,QWORD PTR [rbp-0x30]
  0138f:    	mov    QWORD PTR [rsp-0x38],rax
  01394: 00 	mov    rdi,0x0
  0139b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013a4: 00 	movabs rax,0x0
  013ae:    	mov    QWORD PTR [rsp-0x28],rax
  013b3: 00 	movabs r13,0x0
  013bd:    	call   0xffffbbf6
  013c2:    	lea    rdi,[rbp-0x8]
  013c6:    	mov    QWORD PTR [rbx],rdi
  013c9:    	movq   xmm5,QWORD PTR [rsp]
  013ce:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013d4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013da:    	add    rsp,0x20
  013de:    	test   rax,rax
  013e1:    	je     0x3d235
  013e7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013ee: 01 	sub    DWORD PTR [rip+0xa15],0x1        # 0x1e0a
  013f5:    	je     0x3d26d
  013fb:    	sub    rsp,0x20
  013ff:    	movq   QWORD PTR [rsp],xmm5
  01404:    	movq   QWORD PTR [rsp+0x8],xmm6
  0140a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01410: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01417: b5 	movabs rax,0x55b5b009e670
  01421:    	call   rax
  01423:    	mov    r15d,eax
  01426: 00 	cmp    r15d,DWORD PTR [rip+0x9e5]        # 0x1e12
  0142d:    	jne    0x3d28f
  01433:    	mov    eax,DWORD PTR [rip+0xffffffffffffd8da]        # 0xffffed13
  01439:    	cmp    DWORD PTR [rip+0x9cf],eax        # 0x1e0e
  0143f:    	jne    0x3d28f
  01445: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0144e:    	mov    QWORD PTR [rsp-0x38],rcx
  01453:    	mov    rax,QWORD PTR [rbx]
  01456:    	lea    rsi,[rsp-0x18]
  0145b:    	mov    QWORD PTR [rsi],rax
  0145e:    	mov    QWORD PTR [rbx],rsi
  01461: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01468:    	mov    QWORD PTR [rsp-0x38],rax
  0146d: 00 	mov    rdi,0x0
  01474: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0147d: 00 	movabs rax,0x0
  01487:    	mov    QWORD PTR [rsp-0x28],rax
  0148c: 00 	movabs r13,0x0
  01496:    	call   0xffffbbf6
  0149b:    	lea    rdi,[rbp-0x8]
  0149f:    	mov    QWORD PTR [rbx],rdi
  014a2:    	movq   xmm5,QWORD PTR [rsp]
  014a7:    	movq   xmm6,QWORD PTR [rsp+0x8]
  014ad:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014b3:    	add    rsp,0x20
  014b7:    	test   rax,rax
  014ba:    	je     0x3d2fe
  014c0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  014c7: 01 	sub    DWORD PTR [rip+0x948],0x1        # 0x1e16
  014ce:    	je     0x3d336
  014d4:    	sub    rsp,0x20
  014d8:    	movq   QWORD PTR [rsp],xmm5
  014dd:    	movq   QWORD PTR [rsp+0x8],xmm6
  014e3:    	movq   QWORD PTR [rsp+0x10],xmm7
  014e9:    	mov    rdi,QWORD PTR [rbp-0x30]
  014ed: b5 	movabs rax,0x55b5b009e670
  014f7:    	call   rax
  014f9:    	mov    r15d,eax
  014fc: 00 	cmp    r15d,DWORD PTR [rip+0x91b]        # 0x1e1e
  01503:    	jne    0x3d358
  01509:    	mov    eax,DWORD PTR [rip+0xffffffffffffd804]        # 0xffffed13
  0150f:    	cmp    DWORD PTR [rip+0x905],eax        # 0x1e1a
  01515:    	jne    0x3d358
  0151b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01524:    	mov    QWORD PTR [rsp-0x38],rcx
  01529:    	mov    rax,QWORD PTR [rbx]
  0152c:    	lea    rsi,[rsp-0x18]
  01531:    	mov    QWORD PTR [rsi],rax
  01534:    	mov    QWORD PTR [rbx],rsi
  01537:    	mov    rax,QWORD PTR [rbp-0x30]
  0153b:    	mov    QWORD PTR [rsp-0x38],rax
  01540: 00 	mov    rdi,0x0
  01547: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01550: 00 	movabs rax,0x0
  0155a:    	mov    QWORD PTR [rsp-0x28],rax
  0155f: 00 	movabs r13,0x0
  01569:    	call   0xffffbbf6
  0156e:    	lea    rdi,[rbp-0x8]
  01572:    	mov    QWORD PTR [rbx],rdi
  01575:    	movq   xmm5,QWORD PTR [rsp]
  0157a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01580:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01586:    	add    rsp,0x20
  0158a:    	test   rax,rax
  0158d:    	je     0x3d3c4
  01593: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  0159a: 01 	sub    DWORD PTR [rip+0x881],0x1        # 0x1e22
  015a1:    	je     0x3d3fc
  015a7:    	sub    rsp,0x20
  015ab:    	movq   QWORD PTR [rsp],xmm5
  015b0:    	movq   QWORD PTR [rsp+0x8],xmm6
  015b6:    	movq   QWORD PTR [rsp+0x10],xmm7
  015bc: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015c3: b5 	movabs rax,0x55b5b009e670
  015cd:    	call   rax
  015cf:    	mov    r15d,eax
  015d2: 00 	cmp    r15d,DWORD PTR [rip+0x851]        # 0x1e2a
  015d9:    	jne    0x3d41e
  015df:    	mov    eax,DWORD PTR [rip+0xffffffffffffd72e]        # 0xffffed13
  015e5:    	cmp    DWORD PTR [rip+0x83b],eax        # 0x1e26
  015eb:    	jne    0x3d41e
  015f1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fa:    	mov    QWORD PTR [rsp-0x38],rcx
  015ff:    	mov    rax,QWORD PTR [rbx]
  01602:    	lea    rsi,[rsp-0x18]
  01607:    	mov    QWORD PTR [rsi],rax
  0160a:    	mov    QWORD PTR [rbx],rsi
  0160d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01614:    	mov    QWORD PTR [rsp-0x38],rax
  01619: 00 	mov    rdi,0x0
  01620: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01629: 00 	movabs rax,0x0
  01633:    	mov    QWORD PTR [rsp-0x28],rax
  01638: 00 	movabs r13,0x0
  01642:    	call   0xffffbbf6
  01647:    	lea    rdi,[rbp-0x8]
  0164b:    	mov    QWORD PTR [rbx],rdi
  0164e:    	movq   xmm5,QWORD PTR [rsp]
  01653:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01659:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0165f:    	add    rsp,0x20
  01663:    	test   rax,rax
  01666:    	je     0x3d48d
  0166c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01673: 01 	sub    DWORD PTR [rip+0x7b4],0x1        # 0x1e2e
  0167a:    	je     0x3d4c5
  01680: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01687:    	mov    rsi,QWORD PTR [rbp-0x60]
  0168b:    	sub    rsp,0x20
  0168f:    	movq   QWORD PTR [rsp],xmm5
  01694:    	movq   QWORD PTR [rsp+0x8],xmm6
  0169a:    	movq   QWORD PTR [rsp+0x10],xmm7
  016a0:    	mov    rdx,rdi
  016a3:    	mov    rcx,rsi
  016a6:    	mov    rdi,rbx
  016a9:    	mov    rsi,r12
  016ac: b5 	movabs rax,0x55b5b00e8b30
  016b6:    	call   rax
  016b8:    	movq   xmm5,QWORD PTR [rsp]
  016bd:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016c3:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016c9:    	add    rsp,0x20
  016cd: b5 	movabs r13,0x55b5b07bef30
  016d7:    	test   rax,rax
  016da:    	je     0xffffbc29
  016e0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016e7: 01 	sub    DWORD PTR [rip+0x744],0x1        # 0x1e32
  016ee:    	je     0x3d510
  016f4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016fb: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01702:    	sub    rsp,0x20
  01706:    	movq   QWORD PTR [rsp],xmm5
  0170b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01711:    	movq   QWORD PTR [rsp+0x10],xmm7
  01717:    	mov    rdx,rdi
  0171a:    	mov    rcx,rsi
  0171d:    	mov    rdi,rbx
  01720:    	mov    rsi,r12
  01723: b5 	movabs rax,0x55b5b00e6cb0
  0172d:    	call   rax
  0172f:    	movq   xmm5,QWORD PTR [rsp]
  01734:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0173a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01740:    	add    rsp,0x20
  01744: b5 	movabs r13,0x55b5b07bef40
  0174e:    	test   rax,rax
  01751:    	je     0xffffbc29
  01757: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  0175e: 01 	sub    DWORD PTR [rip+0x6d1],0x1        # 0x1e36
  01765:    	je     0x3d55b
  0176b:    	sub    rsp,0x20
  0176f:    	movq   QWORD PTR [rsp],xmm5
  01774:    	movq   QWORD PTR [rsp+0x8],xmm6
  0177a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01780:    	mov    rdi,QWORD PTR [rbp-0x78]
  01784: b5 	movabs rax,0x55b5b009e670
  0178e:    	call   rax
  01790:    	mov    r15d,eax
  01793: 00 	cmp    r15d,DWORD PTR [rip+0x6a4]        # 0x1e3e
  0179a:    	jne    0x3d57d
  017a0:    	mov    eax,DWORD PTR [rip+0xffffffffffffd56d]        # 0xffffed13
  017a6:    	cmp    DWORD PTR [rip+0x68e],eax        # 0x1e3a
  017ac:    	jne    0x3d57d
  017b2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017bb:    	mov    QWORD PTR [rsp-0x38],rcx
  017c0:    	mov    rax,QWORD PTR [rbx]
  017c3:    	lea    rsi,[rsp-0x18]
  017c8:    	mov    QWORD PTR [rsi],rax
  017cb:    	mov    QWORD PTR [rbx],rsi
  017ce:    	mov    rax,QWORD PTR [rbp-0x78]
  017d2:    	mov    QWORD PTR [rsp-0x38],rax
  017d7: 00 	mov    rdi,0x3
  017de:    	lea    r8,[rsp-0x40]
  017e3:    	mov    rax,QWORD PTR [rbp-0x80]
  017e7:    	mov    QWORD PTR [r8],rax
  017ea:    	sub    r8,0x8
  017ee: ff 	mov    rax,QWORD PTR [rbp-0x88]
  017f5:    	mov    QWORD PTR [r8],rax
  017f8:    	sub    r8,0x8
  017fc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01803:    	mov    QWORD PTR [r8],rax
  01806:    	sub    r8,0x8
  0180a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01813: 00 	movabs rax,0x0
  0181d:    	mov    QWORD PTR [rsp-0x28],rax
  01822: 00 	movabs r13,0x0
  0182c:    	call   0xffffbbf6
  01831:    	lea    rdi,[rbp-0x8]
  01835:    	mov    QWORD PTR [rbx],rdi
  01838:    	movq   xmm5,QWORD PTR [rsp]
  0183d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01843:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01849:    	add    rsp,0x20
  0184d:    	test   rax,rax
  01850:    	je     0x3d5e9
  01856:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0185a: 01 	sub    DWORD PTR [rip+0x5e1],0x1        # 0x1e42
  01861:    	je     0x3d621
  01867:    	sub    rsp,0x20
  0186b:    	movq   QWORD PTR [rsp],xmm5
  01870:    	movq   QWORD PTR [rsp+0x8],xmm6
  01876:    	movq   QWORD PTR [rsp+0x10],xmm7
  0187c:    	mov    rdi,QWORD PTR [rbp-0x38]
  01880: b5 	movabs rax,0x55b5b009e670
  0188a:    	call   rax
  0188c:    	mov    r15d,eax
  0188f: 00 	cmp    r15d,DWORD PTR [rip+0x5b4]        # 0x1e4a
  01896:    	jne    0x3d643
  0189c:    	mov    eax,DWORD PTR [rip+0xffffffffffffd471]        # 0xffffed13
  018a2:    	cmp    DWORD PTR [rip+0x59e],eax        # 0x1e46
  018a8:    	jne    0x3d643
  018ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018b7:    	mov    QWORD PTR [rsp-0x38],rcx
  018bc:    	mov    rax,QWORD PTR [rbx]
  018bf:    	lea    rsi,[rsp-0x18]
  018c4:    	mov    QWORD PTR [rsi],rax
  018c7:    	mov    QWORD PTR [rbx],rsi
  018ca:    	mov    rax,QWORD PTR [rbp-0x38]
  018ce:    	mov    QWORD PTR [rsp-0x38],rax
  018d3: 00 	mov    rdi,0x1
  018da:    	lea    r8,[rsp-0x40]
  018df:    	mov    rax,QWORD PTR [rbp-0x70]
  018e3:    	mov    QWORD PTR [r8],rax
  018e6:    	sub    r8,0x8
  018ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018f3: 00 	movabs rax,0x0
  018fd:    	mov    QWORD PTR [rsp-0x28],rax
  01902: 00 	movabs r13,0x0
  0190c:    	call   0xffffbbf6
  01911:    	lea    rdi,[rbp-0x8]
  01915:    	mov    QWORD PTR [rbx],rdi
  01918:    	movq   xmm5,QWORD PTR [rsp]
  0191d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01923:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01929:    	add    rsp,0x20
  0192d:    	test   rax,rax
  01930:    	je     0x3d6af
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  01936: 01 	sub    DWORD PTR [rip+0x511],0x1        # 0x1e4e
  0193d:    	je     0x3d6e7
  01943:    	sub    rsp,0x20
  01947:    	movq   QWORD PTR [rsp],xmm5
  0194c:    	movq   QWORD PTR [rsp+0x8],xmm6
  01952:    	movq   QWORD PTR [rsp+0x10],xmm7
  01958:    	mov    rdi,QWORD PTR [rbp-0x38]
  0195c: b5 	movabs rax,0x55b5b009e670
  01966:    	call   rax
  01968:    	mov    r15d,eax
  0196b: 00 	cmp    r15d,DWORD PTR [rip+0x4e4]        # 0x1e56
  01972:    	jne    0x3d709
  01978:    	mov    eax,DWORD PTR [rip+0xffffffffffffd395]        # 0xffffed13
  0197e:    	cmp    DWORD PTR [rip+0x4ce],eax        # 0x1e52
  01984:    	jne    0x3d709
  0198a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01993:    	mov    QWORD PTR [rsp-0x38],rcx
  01998:    	mov    rax,QWORD PTR [rbx]
  0199b:    	lea    rsi,[rsp-0x18]
  019a0:    	mov    QWORD PTR [rsi],rax
  019a3:    	mov    QWORD PTR [rbx],rsi
  019a6:    	mov    rax,QWORD PTR [rbp-0x38]
  019aa:    	mov    QWORD PTR [rsp-0x38],rax
  019af: 00 	mov    rdi,0x0
  019b6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019bf: 00 	movabs rax,0x0
  019c9:    	mov    QWORD PTR [rsp-0x28],rax
  019ce: 00 	movabs r13,0x0
  019d8:    	call   0xffffbbf6
  019dd:    	lea    rdi,[rbp-0x8]
  019e1:    	mov    QWORD PTR [rbx],rdi
  019e4:    	movq   xmm5,QWORD PTR [rsp]
  019e9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019ef:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019f5:    	add    rsp,0x20
  019f9:    	test   rax,rax
  019fc:    	je     0x3d775
  01a02:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  01a06:    	mov    rdi,QWORD PTR [rbp-0x28]
  01a0a:    	sub    rsp,0x20
  01a0e:    	movq   QWORD PTR [rsp],xmm5
  01a13:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a19:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a1f: 00 	mov    rsi,0x90
  01a26:    	mov    rdx,r12
  01a29: b5 	movabs rax,0x55b5b0091cc0
  01a33:    	call   rax
  01a35:    	movq   xmm5,QWORD PTR [rsp]
  01a3a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a40:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a46:    	add    rsp,0x20
  01a4a:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  01a4e: 01 	sub    DWORD PTR [rip+0x405],0x1        # 0x1e5a
  01a55:    	je     0x3d7ad
  01a5b:    	sub    rsp,0x20
  01a5f:    	movq   QWORD PTR [rsp],xmm5
  01a64:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a6a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a70:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a74: b5 	movabs rax,0x55b5b009e670
  01a7e:    	call   rax
  01a80:    	mov    r15d,eax
  01a83: 00 	cmp    r15d,DWORD PTR [rip+0x3d8]        # 0x1e62
  01a8a:    	jne    0x3d7cf
  01a90:    	mov    eax,DWORD PTR [rip+0xffffffffffffd27d]        # 0xffffed13
  01a96:    	cmp    DWORD PTR [rip+0x3c2],eax        # 0x1e5e
  01a9c:    	jne    0x3d7cf
  01aa2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01aab:    	mov    QWORD PTR [rsp-0x38],rcx
  01ab0:    	mov    rax,QWORD PTR [rbx]
  01ab3:    	lea    rsi,[rsp-0x18]
  01ab8:    	mov    QWORD PTR [rsi],rax
  01abb:    	mov    QWORD PTR [rbx],rsi
  01abe:    	mov    rax,QWORD PTR [rbp-0x70]
  01ac2:    	mov    QWORD PTR [rsp-0x38],rax
  01ac7: 00 	mov    rdi,0x1
  01ace:    	lea    r8,[rsp-0x40]
  01ad3:    	mov    rax,QWORD PTR [rbp-0x78]
  01ad7:    	mov    QWORD PTR [r8],rax
  01ada:    	sub    r8,0x8
  01ade: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ae7: 00 	movabs rax,0x0
  01af1:    	mov    QWORD PTR [rsp-0x28],rax
  01af6: 00 	movabs r13,0x0
  01b00:    	call   0xffffbbf6
  01b05:    	lea    rdi,[rbp-0x8]
  01b09:    	mov    QWORD PTR [rbx],rdi
  01b0c:    	movq   xmm5,QWORD PTR [rsp]
  01b11:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b17:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b1d:    	add    rsp,0x20
  01b21:    	test   rax,rax
  01b24:    	je     0x3d83b
  01b2a:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01b2e: 01 	sub    DWORD PTR [rip+0x331],0x1        # 0x1e66
  01b35:    	je     0x3d873
  01b3b:    	sub    rsp,0x20
  01b3f:    	movq   QWORD PTR [rsp],xmm5
  01b44:    	movq   QWORD PTR [rsp+0x8],xmm6
  01b4a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01b50:    	mov    rdi,QWORD PTR [rbp-0x68]
  01b54: b5 	movabs rax,0x55b5b009e670
  01b5e:    	call   rax
  01b60:    	mov    r15d,eax
  01b63: 00 	cmp    r15d,DWORD PTR [rip+0x304]        # 0x1e6e
  01b6a:    	jne    0x3d895
  01b70:    	mov    eax,DWORD PTR [rip+0xffffffffffffd19d]        # 0xffffed13
  01b76:    	cmp    DWORD PTR [rip+0x2ee],eax        # 0x1e6a
  01b7c:    	jne    0x3d895
  01b82: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b8b:    	mov    QWORD PTR [rsp-0x38],rcx
  01b90:    	mov    rax,QWORD PTR [rbx]
  01b93:    	lea    rsi,[rsp-0x18]
  01b98:    	mov    QWORD PTR [rsi],rax
  01b9b:    	mov    QWORD PTR [rbx],rsi
  01b9e:    	mov    rax,QWORD PTR [rbp-0x68]
  01ba2:    	mov    QWORD PTR [rsp-0x38],rax
  01ba7: 00 	mov    rdi,0x0
  01bae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bb7: 00 	movabs rax,0x0
  01bc1:    	mov    QWORD PTR [rsp-0x28],rax
  01bc6: 00 	movabs r13,0x0
  01bd0:    	call   0xffffbbf6
  01bd5:    	lea    rdi,[rbp-0x8]
  01bd9:    	mov    QWORD PTR [rbx],rdi
  01bdc:    	movq   xmm5,QWORD PTR [rsp]
  01be1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01be7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01bed:    	add    rsp,0x20
  01bf1:    	test   rax,rax
  01bf4:    	je     0x3d901
  01bfa:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01bfe: 01 	sub    DWORD PTR [rip+0x26d],0x1        # 0x1e72
  01c05:    	je     0x3d939
  01c0b:    	sub    rsp,0x20
  01c0f:    	movq   QWORD PTR [rsp],xmm5
  01c14:    	movq   QWORD PTR [rsp+0x8],xmm6
  01c1a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01c20:    	mov    rdi,QWORD PTR [rbp-0x38]
  01c24: b5 	movabs rax,0x55b5b009e670
  01c2e:    	call   rax
  01c30:    	mov    r15d,eax
  01c33: 00 	cmp    r15d,DWORD PTR [rip+0x240]        # 0x1e7a
  01c3a:    	jne    0x3d95b
  01c40:    	mov    eax,DWORD PTR [rip+0xffffffffffffd0cd]        # 0xffffed13
  01c46:    	cmp    DWORD PTR [rip+0x22a],eax        # 0x1e76
  01c4c:    	jne    0x3d95b
  01c52: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c5b:    	mov    QWORD PTR [rsp-0x38],rcx
  01c60:    	mov    rax,QWORD PTR [rbx]
  01c63:    	lea    rsi,[rsp-0x18]
  01c68:    	mov    QWORD PTR [rsi],rax
  01c6b:    	mov    QWORD PTR [rbx],rsi
  01c6e:    	mov    rax,QWORD PTR [rbp-0x38]
  01c72:    	mov    QWORD PTR [rsp-0x38],rax
  01c77: 00 	mov    rdi,0x1
  01c7e:    	lea    r8,[rsp-0x40]
  01c83:    	mov    rax,QWORD PTR [rbp-0x70]
  01c87:    	mov    QWORD PTR [r8],rax
  01c8a:    	sub    r8,0x8
  01c8e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c97: 00 	movabs rax,0x0
  01ca1:    	mov    QWORD PTR [rsp-0x28],rax
  01ca6: 00 	movabs r13,0x0
  01cb0:    	call   0xffffbbf6
  01cb5:    	lea    rdi,[rbp-0x8]
  01cb9:    	mov    QWORD PTR [rbx],rdi
  01cbc:    	movq   xmm5,QWORD PTR [rsp]
  01cc1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01cc7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01ccd:    	add    rsp,0x20
  01cd1:    	test   rax,rax
  01cd4:    	je     0x3d9c7
:00110 
:00112 br =>:00113
  01cda:    	jmp    0x3da3c
:00113 br =>:00114
  01cdf:    	jmp    0x3daaf
:00114 %9 = nil
  01ce4: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01cec:    	mov    rax,QWORD PTR [rbp-0x70]
  01cf0:    	leave  
  01cf1:    	ret    
==> start whole compile: vsub FuncId(64) self_class:Vec start:[00000] bytecode:0x55b5b08082c0
<== finished compile. elapsed:67.3µs
offset:Pos(25224) code: 1397 bytes  data: 51 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x3bc64
  0001f: jmp    0x3bc64
  00024: mov    eax,0x1
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x38]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    rax,0x4
  00051: mov    QWORD PTR [rbp-0x38],rax
  00055: mov    QWORD PTR [rbp-0x40],rax
  00059: mov    QWORD PTR [rbp-0x48],rax
  0005d: mov    QWORD PTR [rbp-0x50],rax
  00061: mov    QWORD PTR [rbp-0x58],rax
  00065: mov    QWORD PTR [rbp-0x60],rax
  00069: mov    rdi,QWORD PTR [rbp-0x28]
  0006d: test   rdi,0x7
  00074: jne    0x3bc73
  0007a: cmp    DWORD PTR [rdi+0x4],0x28
  0007e: jne    0x3bc73
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  00084: mov    rax,QWORD PTR [rip+0xffffffffffffce1d]        # 0xffffcea8
  0008b: cmp    rax,QWORD PTR [rip+0x4f6]        # 0x588
  00092: jne    0x3bc82
  00098: mov    rax,QWORD PTR [rip+0x4d9]        # 0x578
  0009f: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  000a3: mov    rdi,QWORD PTR [rbp-0x28]
  000a7: mov    rax,QWORD PTR [rdi+0x10]
  000ab: mov    QWORD PTR [rbp-0x48],rax
:00003 %5 = %1.call x()                     [Vec]
  000af: mov    rdi,QWORD PTR [rbp-0x30]
  000b3: test   rdi,0x7
  000ba: jne    0x3bcc8
  000c0: cmp    DWORD PTR [rdi+0x4],0x28
  000c4: jne    0x3bcc8
  000ca: cmp    DWORD PTR [rip+0xffffffffffffcdc4],0x26        # 0xffffce95
  000d1: jne    0x3bcc8
  000d7: mov    esi,DWORD PTR [rip+0x4b7]        # 0x594
  000dd: cmp    esi,0xffffffff
  000e0: je     0x3bcd7
  000e6: cmp    WORD PTR [rdi+0x2],0x3
  000eb: jne    0x104
  000f1: cmp    esi,0x6
  000f4: jge    0x104
  000fa: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff: jmp    0x110
  00104: movabs rax,0x55b5b00a3ef0
  0010e: call   rax
  00110: mov    QWORD PTR [rbp-0x50],rax
:00004 
:00006 %4 = %4 - %5                         [Float][Float]
  00114: mov    rdi,QWORD PTR [rbp-0x48]
  00118: test   rdi,0x1
  0011f: jne    0x3bd00
  00125: test   rdi,0x2
  0012c: je     0x168
  00132: xorps  xmm2,xmm2
  00135: movabs rax,0x8000000000000002
  0013f: cmp    rdi,rax
  00142: je     0x17a
  00148: mov    rax,rdi
  0014b: sar    rax,0x3f
  0014f: add    rax,0x2
  00153: and    rdi,0xfffffffffffffffc
  00157: or     rdi,rax
  0015a: rol    rdi,0x3d
  0015e: movq   xmm2,rdi
  00163: jmp    0x17a
  00168: call   0xffff9e04
  0016d: test   rax,rax
  00170: je     0x3bd00
  00176: movq   xmm2,xmm0
  0017a: mov    rdi,QWORD PTR [rbp-0x50]
  0017e: test   rdi,0x1
  00185: jne    0x3bd0f
  0018b: test   rdi,0x2
  00192: je     0x1ce
  00198: xorps  xmm3,xmm3
  0019b: movabs rax,0x8000000000000002
  001a5: cmp    rdi,rax
  001a8: je     0x1e0
  001ae: mov    rax,rdi
  001b1: sar    rax,0x3f
  001b5: add    rax,0x2
  001b9: and    rdi,0xfffffffffffffffc
  001bd: or     rdi,rax
  001c0: rol    rdi,0x3d
  001c4: movq   xmm3,rdi
  001c9: jmp    0x1e0
  001ce: call   0xffff9e04
  001d3: test   rax,rax
  001d6: je     0x3bd0f
  001dc: movq   xmm3,xmm0
  001e0: subsd  xmm2,xmm3
:00007 %5 = @y: Vec[IvarId(1)]
  001e4: mov    rdi,QWORD PTR [rbp-0x28]
  001e8: mov    rax,QWORD PTR [rdi+0x18]
  001ec: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = %1.call y()                     [Vec]
  001f0: mov    rdi,QWORD PTR [rbp-0x30]
  001f4: test   rdi,0x7
  001fb: jne    0x3bd1e
  00201: cmp    DWORD PTR [rdi+0x4],0x28
  00205: jne    0x3bd1e
  0020b: cmp    DWORD PTR [rip+0xffffffffffffcc83],0x26        # 0xffffce95
  00212: jne    0x3bd1e
  00218: mov    esi,DWORD PTR [rip+0x37e]        # 0x59c
  0021e: cmp    esi,0xffffffff
  00221: je     0x3bd3a
  00227: cmp    WORD PTR [rdi+0x2],0x3
  0022c: jne    0x245
  00232: cmp    esi,0x6
  00235: jge    0x245
  0023b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00240: jmp    0x263
  00245: sub    rsp,0x10
  00249: movq   QWORD PTR [rsp],xmm2
  0024e: movabs rax,0x55b5b00a3ef0
  00258: call   rax
  0025a: movq   xmm2,QWORD PTR [rsp]
  0025f: add    rsp,0x10
  00263: mov    QWORD PTR [rbp-0x58],rax
:00009 
:00011 %5 = %5 - %6                         [Float][Float]
  00267: mov    rdi,QWORD PTR [rbp-0x50]
  0026b: test   rdi,0x1
  00272: jne    0x3bd75
  00278: test   rdi,0x2
  0027f: je     0x2bb
  00285: xorps  xmm3,xmm3
  00288: movabs rax,0x8000000000000002
  00292: cmp    rdi,rax
  00295: je     0x2cd
  0029b: mov    rax,rdi
  0029e: sar    rax,0x3f
  002a2: add    rax,0x2
  002a6: and    rdi,0xfffffffffffffffc
  002aa: or     rdi,rax
  002ad: rol    rdi,0x3d
  002b1: movq   xmm3,rdi
  002b6: jmp    0x2cd
  002bb: call   0xffff9e04
  002c0: test   rax,rax
  002c3: je     0x3bd75
  002c9: movq   xmm3,xmm0
  002cd: mov    rdi,QWORD PTR [rbp-0x58]
  002d1: test   rdi,0x1
  002d8: jne    0x3bd91
  002de: test   rdi,0x2
  002e5: je     0x321
  002eb: xorps  xmm4,xmm4
  002ee: movabs rax,0x8000000000000002
  002f8: cmp    rdi,rax
  002fb: je     0x333
  00301: mov    rax,rdi
  00304: sar    rax,0x3f
  00308: add    rax,0x2
  0030c: and    rdi,0xfffffffffffffffc
  00310: or     rdi,rax
  00313: rol    rdi,0x3d
  00317: movq   xmm4,rdi
  0031c: jmp    0x333
  00321: call   0xffff9e04
  00326: test   rax,rax
  00329: je     0x3bd91
  0032f: movq   xmm4,xmm0
  00333: subsd  xmm3,xmm4
:00012 %6 = @z: Vec[IvarId(2)]
  00337: mov    rdi,QWORD PTR [rbp-0x28]
  0033b: mov    rax,QWORD PTR [rdi+0x20]
  0033f: mov    QWORD PTR [rbp-0x58],rax
:00013 %7 = %1.call z()                     [Vec]
  00343: mov    rdi,QWORD PTR [rbp-0x30]
  00347: test   rdi,0x7
  0034e: jne    0x3bdad
  00354: cmp    DWORD PTR [rdi+0x4],0x28
  00358: jne    0x3bdad
  0035e: cmp    DWORD PTR [rip+0xffffffffffffcb30],0x26        # 0xffffce95
  00365: jne    0x3bdad
  0036b: mov    esi,DWORD PTR [rip+0x233]        # 0x5a4
  00371: cmp    esi,0xffffffff
  00374: je     0x3bdd6
  0037a: cmp    WORD PTR [rdi+0x2],0x3
  0037f: jne    0x398
  00385: cmp    esi,0x6
  00388: jge    0x398
  0038e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00393: jmp    0x3c2
  00398: sub    rsp,0x10
  0039c: movq   QWORD PTR [rsp],xmm2
  003a1: movq   QWORD PTR [rsp+0x8],xmm3
  003a7: movabs rax,0x55b5b00a3ef0
  003b1: call   rax
  003b3: movq   xmm2,QWORD PTR [rsp]
  003b8: movq   xmm3,QWORD PTR [rsp+0x8]
  003be: add    rsp,0x10
  003c2: mov    QWORD PTR [rbp-0x60],rax
:00014 
:00016 %6 = %6 - %7                         [Float][Float]
  003c6: mov    rdi,QWORD PTR [rbp-0x58]
  003ca: test   rdi,0x1
  003d1: jne    0x3be1d
  003d7: test   rdi,0x2
  003de: je     0x41a
  003e4: xorps  xmm4,xmm4
  003e7: movabs rax,0x8000000000000002
  003f1: cmp    rdi,rax
  003f4: je     0x42c
  003fa: mov    rax,rdi
  003fd: sar    rax,0x3f
  00401: add    rax,0x2
  00405: and    rdi,0xfffffffffffffffc
  00409: or     rdi,rax
  0040c: rol    rdi,0x3d
  00410: movq   xmm4,rdi
  00415: jmp    0x42c
  0041a: call   0xffff9e04
  0041f: test   rax,rax
  00422: je     0x3be1d
  00428: movq   xmm4,xmm0
  0042c: mov    rdi,QWORD PTR [rbp-0x60]
  00430: test   rdi,0x1
  00437: jne    0x3be46
  0043d: test   rdi,0x2
  00444: je     0x480
  0044a: xorps  xmm5,xmm5
  0044d: movabs rax,0x8000000000000002
  00457: cmp    rdi,rax
  0045a: je     0x492
  00460: mov    rax,rdi
  00463: sar    rax,0x3f
  00467: add    rax,0x2
  0046b: and    rdi,0xfffffffffffffffc
  0046f: or     rdi,rax
  00472: rol    rdi,0x3d
  00476: movq   xmm5,rdi
  0047b: jmp    0x492
  00480: call   0xffff9e04
  00485: test   rax,rax
  00488: je     0x3be46
  0048e: movq   xmm5,xmm0
  00492: subsd  xmm4,xmm5
:00017 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00496: movq   xmm0,xmm2
  0049a: call   0xffff9f28
  0049f: mov    QWORD PTR [rbp-0x48],rax
  004a3: movq   xmm0,xmm3
  004a7: call   0xffff9f28
  004ac: mov    QWORD PTR [rbp-0x50],rax
  004b0: movq   xmm0,xmm4
  004b4: call   0xffff9f28
  004b9: mov    QWORD PTR [rbp-0x58],rax
  004bd: mov    rdi,QWORD PTR [rbp-0x40]
  004c1: test   rdi,0x7
  004c8: jne    0x3be6f
  004ce: cmp    DWORD PTR [rdi+0x4],0x29
  004d2: jne    0x3be6f
  004d8: cmp    DWORD PTR [rip+0xffffffffffffc9b6],0x26        # 0xffffce95
  004df: jne    0x3be6f
  004e5: mov    r9,0x0
  004ec: sub    rsp,0x20
  004f0: movq   QWORD PTR [rsp],xmm2
  004f5: movq   QWORD PTR [rsp+0x8],xmm3
  004fb: movq   QWORD PTR [rsp+0x10],xmm4
  00501: movq   QWORD PTR [rsp+0x18],xmm5
  00507: mov    rdx,rdi
  0050a: mov    QWORD PTR [rsp-0x20],0x0
  00513: mov    QWORD PTR [rsp-0x38],rcx
  00518: mov    rax,QWORD PTR [rbx]
  0051b: lea    rsi,[rsp-0x18]
  00520: mov    QWORD PTR [rsi],rax
  00523: mov    QWORD PTR [rbx],rsi
  00526: lea    rcx,[rbp-0x48]
  0052a: mov    r8,0x3
  00531: call   0x3be7e
  00536: lea    rdi,[rbp-0x8]
  0053a: mov    QWORD PTR [rbx],rdi
  0053d: movq   xmm2,QWORD PTR [rsp]
  00542: movq   xmm3,QWORD PTR [rsp+0x8]
  00548: movq   xmm4,QWORD PTR [rsp+0x10]
  0054e: movq   xmm5,QWORD PTR [rsp+0x18]
  00554: add    rsp,0x20
  00558: movabs r13,0x55b5b08083f0
  00562: test   rax,rax
  00565: je     0xffff9dab
  0056b: mov    QWORD PTR [rbp-0x38],rax
:00018 
:00020 ret %2
  0056f: mov    rax,QWORD PTR [rbp-0x38]
  00573: leave  
  00574: ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55b5b07e9960
<== finished compile. elapsed:173µs
offset:Pos(26943) code: 9497 bytes  data: 412 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5: ff 	mov    QWORD PTR [rbp-0xb0],rax
  000cc: ff 	mov    QWORD PTR [rbp-0xb8],rax
  000d3: ff 	mov    QWORD PTR [rbp-0xc0],rax
  000da:    	mov    rdi,QWORD PTR [rbp-0x28]
  000de: 00 	test   rdi,0x7
  000e5:    	jne    0x3b808
  000eb:    	cmp    DWORD PTR [rdi+0x4],0x32
  000ef:    	jne    0x3b808
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000f5:    	mov    rax,QWORD PTR [rbp-0x10]
  000f9:    	mov    rax,QWORD PTR [rax]
  000fc:    	mov    rax,QWORD PTR [rax]
  000ff:    	mov    rax,QWORD PTR [rax]
  00102:    	mov    rax,QWORD PTR [rax-0x38]
  00106: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  0010d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00114: 00 	test   rdi,0x1
  0011b:    	je     0x3b817
  00121:    	add    rdi,0x2
  00125:    	jo     0x3b817
  0012b: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  00132:    	mov    rax,QWORD PTR [rbp-0x10]
  00136:    	mov    rax,QWORD PTR [rax]
  00139:    	mov    rax,QWORD PTR [rax]
  0013c:    	mov    rax,QWORD PTR [rax]
  0013f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00146:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0014a:    	mov    rax,QWORD PTR [rbp-0x10]
  0014e:    	mov    rax,QWORD PTR [rax]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax-0x20]
  0015b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00162: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00169: 00 	test   rdi,0x1
  00170:    	je     0x3b826
  00176: 26 	cmp    DWORD PTR [rip+0xffffffffffffc661],0x26        # 0xffffc7de
  0017d:    	jne    0x3b826
  00183:    	sar    rdi,1
  00186:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0018b:    	mov    rax,QWORD PTR [rbp-0x10]
  0018f:    	mov    rax,QWORD PTR [rax]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax]
  00198:    	mov    rax,QWORD PTR [rax-0x28]
  0019c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  001a3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001aa: 00 	test   rdi,0x1
  001b1:    	je     0x3b835
  001b7: 26 	cmp    DWORD PTR [rip+0xffffffffffffc620],0x26        # 0xffffc7de
  001be:    	jne    0x3b835
  001c4:    	sar    rdi,1
  001c7:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  001cc:    	mov    rax,QWORD PTR [rbp-0x10]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x3b851
  001f2: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5e5],0x26        # 0xffffc7de
  001f9:    	jne    0x3b851
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  00207:    	mov    rax,QWORD PTR [rbp-0x10]
  0020b:    	mov    rax,QWORD PTR [rax]
  0020e:    	mov    rax,QWORD PTR [rax]
  00211:    	mov    rax,QWORD PTR [rax-0x20]
  00215: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  0021c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00223: 00 	test   rdi,0x1
  0022a:    	je     0x3b87a
  00230: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5a7],0x26        # 0xffffc7de
  00237:    	jne    0x3b87a
  0023d:    	sar    rdi,1
  00240:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00245:    	mov    rdi,QWORD PTR [rbp-0x30]
  00249: 00 	test   rdi,0x1
  00250:    	je     0x3b8b0
  00256: 26 	cmp    DWORD PTR [rip+0xffffffffffffc581],0x26        # 0xffffc7de
  0025d:    	jne    0x3b8b0
  00263:    	sar    rdi,1
  00266:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0026b:    	mov    rax,QWORD PTR [rbp-0x10]
  0026f:    	mov    rax,QWORD PTR [rax-0x20]
  00273: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0027a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00281: 00 	test   rdi,0x1
  00288:    	je     0x3b8f3
  0028e: 26 	cmp    DWORD PTR [rip+0xffffffffffffc549],0x26        # 0xffffc7de
  00295:    	jne    0x3b8f3
  0029b:    	sar    rdi,1
  0029e:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  002a3:    	mov    rax,QWORD PTR [rbp-0x10]
  002a7:    	mov    rax,QWORD PTR [rax]
  002aa:    	mov    rax,QWORD PTR [rax]
  002ad:    	mov    rax,QWORD PTR [rax]
  002b0:    	mov    rax,QWORD PTR [rax-0x40]
  002b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  002bb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002c2: 00 	test   rdi,0x1
  002c9:    	jne    0x3b943
  002cf: 00 	test   rdi,0x2
  002d6:    	je     0x313
  002dc:    	xorps  xmm8,xmm8
  002e0: 00 	movabs rax,0x8000000000000002
  002ea:    	cmp    rdi,rax
  002ed:    	je     0x326
  002f3:    	mov    rax,rdi
  002f6:    	sar    rax,0x3f
  002fa:    	add    rax,0x2
  002fe:    	and    rdi,0xfffffffffffffffc
  00302:    	or     rdi,rax
  00305:    	rol    rdi,0x3d
  00309:    	movq   xmm8,rdi
  0030e:    	jmp    0x326
  00313:    	call   0xffff974d
  00318:    	test   rax,rax
  0031b:    	je     0x3b943
  00321:    	movq   xmm8,xmm0
  00326:    	movq   rax,xmm8
  0032b:    	test   rax,rax
  0032e:    	je     0xffff9719
  00334:    	movq   xmm0,xmm6
  00338:    	divsd  xmm0,xmm8
  0033d:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00342:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00347: 21 	movq   xmm9,QWORD PTR [rip+0x21d1]        # 0x2521
  00350: 00 	mov    rax,0x2
  00357: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0035e:    	movq   rax,xmm9
  00363:    	test   rax,rax
  00366:    	je     0xffff9719
  0036c:    	movq   xmm0,xmm2
  00370:    	divsd  xmm0,xmm9
  00375:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0037a:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0037f: 21 	movq   xmm9,QWORD PTR [rip+0x21a9]        # 0x2531
  00388: 00 	mov    rax,0x2
  0038f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00396:    	movq   rax,xmm9
  0039b:    	test   rax,rax
  0039e:    	je     0xffff9719
  003a4:    	movq   xmm0,xmm2
  003a8:    	divsd  xmm0,xmm9
  003ad:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  003b2:    	movq   xmm10,xmm8
  003b7:    	movq   rax,xmm9
  003bc:    	test   rax,rax
  003bf:    	je     0xffff9719
  003c5:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  003ca:    	mov    rax,QWORD PTR [rbp-0x10]
  003ce:    	mov    rax,QWORD PTR [rax]
  003d1:    	mov    rax,QWORD PTR [rax]
  003d4:    	mov    rax,QWORD PTR [rax]
  003d7:    	mov    rax,QWORD PTR [rax-0x40]
  003db: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003e2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003e9: 00 	test   rdi,0x1
  003f0:    	jne    0x3b9a0
  003f6: 00 	test   rdi,0x2
  003fd:    	je     0x43a
  00403:    	xorps  xmm8,xmm8
  00407: 00 	movabs rax,0x8000000000000002
  00411:    	cmp    rdi,rax
  00414:    	je     0x44d
  0041a:    	mov    rax,rdi
  0041d:    	sar    rax,0x3f
  00421:    	add    rax,0x2
  00425:    	and    rdi,0xfffffffffffffffc
  00429:    	or     rdi,rax
  0042c:    	rol    rdi,0x3d
  00430:    	movq   xmm8,rdi
  00435:    	jmp    0x44d
  0043a:    	call   0xffff974d
  0043f:    	test   rax,rax
  00442:    	je     0x3b9a0
  00448:    	movq   xmm8,xmm0
  0044d:    	movq   rax,xmm8
  00452:    	test   rax,rax
  00455:    	je     0xffff9719
  0045b:    	movq   xmm0,xmm7
  0045f:    	divsd  xmm0,xmm8
  00464:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00469:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0046e: 20 	movq   xmm9,QWORD PTR [rip+0x20ca]        # 0x2541
  00477: 00 	mov    rax,0x2
  0047e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00485:    	movq   rax,xmm9
  0048a:    	test   rax,rax
  0048d:    	je     0xffff9719
  00493:    	movq   xmm0,xmm3
  00497:    	divsd  xmm0,xmm9
  0049c:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  004a1:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  004a6: 00 	xorps  xmm8,XMMWORD PTR [rip+0x20a3]        # 0x2551
:00043 %15 = literal[2.0]
  004ae: 20 	movq   xmm9,QWORD PTR [rip+0x20aa]        # 0x2561
  004b7: 00 	mov    rax,0x2
  004be: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  004c5:    	movq   rax,xmm9
  004ca:    	test   rax,rax
  004cd:    	je     0xffff9719
  004d3:    	movq   xmm0,xmm3
  004d7:    	divsd  xmm0,xmm9
  004dc:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004e1:    	movq   xmm11,xmm8
  004e6:    	movq   rax,xmm9
  004eb:    	test   rax,rax
  004ee:    	je     0xffff9719
  004f4:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004f9: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc2f1]        # 0xffffc7f1
  00500: 00 	cmp    rax,QWORD PTR [rip+0x207a]        # 0x2581
  00507:    	jne    0x3ba1c
  0050d: 00 	mov    rax,QWORD PTR [rip+0x205d]        # 0x2571
  00514: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  0051b: 20 	movq   xmm9,QWORD PTR [rip+0x206d]        # 0x2591
  00524: 00 	movabs rax,0xff80000000000006
  0052e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00535:    	movq   xmm0,xmm10
  0053a:    	call   0xffff9871
  0053f: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00546:    	movq   xmm0,xmm11
  0054b:    	call   0xffff9871
  00550: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00557: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0055e: 00 	test   rdi,0x7
  00565:    	jne    0x3bada
  0056b:    	cmp    DWORD PTR [rdi+0x4],0x29
  0056f:    	jne    0x3bada
  00575: 26 	cmp    DWORD PTR [rip+0xffffffffffffc262],0x26        # 0xffffc7de
  0057c:    	jne    0x3bada
  00582: 00 	mov    r9,0x0
  00589:    	sub    rsp,0x50
  0058d:    	movq   QWORD PTR [rsp],xmm2
  00592:    	movq   QWORD PTR [rsp+0x8],xmm3
  00598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0059e:    	movq   QWORD PTR [rsp+0x18],xmm5
  005a4:    	movq   QWORD PTR [rsp+0x20],xmm6
  005aa:    	movq   QWORD PTR [rsp+0x28],xmm7
  005b0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005b7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005be: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005c5:    	mov    rdx,rdi
  005c8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005d1:    	mov    QWORD PTR [rsp-0x38],rcx
  005d6:    	mov    rax,QWORD PTR [rbx]
  005d9:    	lea    rsi,[rsp-0x18]
  005de:    	mov    QWORD PTR [rsi],rax
  005e1:    	mov    QWORD PTR [rbx],rsi
  005e4: ff 	lea    rcx,[rbp-0xa8]
  005eb: 00 	mov    r8,0x3
  005f2:    	call   0x3bb53
  005f7:    	lea    rdi,[rbp-0x8]
  005fb:    	mov    QWORD PTR [rbx],rdi
  005fe:    	movq   xmm2,QWORD PTR [rsp]
  00603:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00609:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0060f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00615:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0061b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00621: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00628: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0062f: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00636:    	add    rsp,0x50
  0063a: b5 	movabs r13,0x55b5b07e9ca0
  00644:    	test   rax,rax
  00647:    	je     0xffff96f4
  0064d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00654: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0065b: 00 	test   rdi,0x7
  00662:    	jne    0x3bb85
  00668:    	cmp    DWORD PTR [rdi+0x4],0x28
  0066c:    	jne    0x3bb85
  00672: 26 	cmp    DWORD PTR [rip+0xffffffffffffc165],0x26        # 0xffffc7de
  00679:    	jne    0x3bb85
  0067f:    	sub    rsp,0x50
  00683:    	movq   QWORD PTR [rsp],xmm2
  00688:    	movq   QWORD PTR [rsp+0x8],xmm3
  0068e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00694:    	movq   QWORD PTR [rsp+0x18],xmm5
  0069a:    	movq   QWORD PTR [rsp+0x20],xmm6
  006a0:    	movq   QWORD PTR [rsp+0x28],xmm7
  006a6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  006ad: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  006b4: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006bb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006c4:    	mov    QWORD PTR [rsp-0x38],rcx
  006c9:    	mov    rax,QWORD PTR [rbx]
  006cc:    	lea    rsi,[rsp-0x18]
  006d1:    	mov    QWORD PTR [rsi],rax
  006d4:    	mov    QWORD PTR [rbx],rsi
  006d7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006de:    	mov    QWORD PTR [rsp-0x38],rax
  006e3: 00 	mov    rdi,0x0
  006ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006f3: 07 	movabs rax,0x700000044
  006fd:    	mov    QWORD PTR [rsp-0x28],rax
  00702: b5 	movabs r13,0x55b5b07ceca0
  0070c:    	call   0xffffd123
  00711:    	lea    rdi,[rbp-0x8]
  00715:    	mov    QWORD PTR [rbx],rdi
  00718:    	movq   xmm2,QWORD PTR [rsp]
  0071d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00723:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00729:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0072f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00735:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0073b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00742: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00749: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00750:    	add    rsp,0x50
  00754: b5 	movabs r13,0x55b5b07e9cd0
  0075e:    	test   rax,rax
  00761:    	je     0xffff96f4
  00767:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0076b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc07f]        # 0xffffc7f1
  00772: 00 	cmp    rax,QWORD PTR [rip+0x1e38]        # 0x25b1
  00779:    	jne    0x3bbfe
  0077f: 00 	mov    rax,QWORD PTR [rip+0x1e1b]        # 0x25a1
  00786: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0078d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc05d]        # 0xffffc7f1
  00794: 00 	cmp    rax,QWORD PTR [rip+0x1e36]        # 0x25d1
  0079b:    	jne    0x3bcbc
  007a1: 00 	mov    rax,QWORD PTR [rip+0x1e19]        # 0x25c1
  007a8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  007af: 1e 	movq   xmm8,QWORD PTR [rip+0x1e29]        # 0x25e1
  007b8: 00 	movabs rax,0x8000000000000002
  007c2: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  007c9: 1e 	movq   xmm9,QWORD PTR [rip+0x1e1f]        # 0x25f1
  007d2: 00 	movabs rax,0x8000000000000002
  007dc: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007e3: 1e 	movq   xmm12,QWORD PTR [rip+0x1e15]        # 0x2601
  007ec: 00 	movabs rax,0x8000000000000002
  007f6: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007fd: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00804: 00 	test   rdi,0x7
  0080b:    	jne    0x3bd7a
  00811:    	cmp    DWORD PTR [rdi+0x4],0x29
  00815:    	jne    0x3bd7a
  0081b: 26 	cmp    DWORD PTR [rip+0xffffffffffffbfbc],0x26        # 0xffffc7de
  00822:    	jne    0x3bd7a
  00828: 00 	mov    r9,0x0
  0082f:    	sub    rsp,0x60
  00833:    	movq   QWORD PTR [rsp],xmm2
  00838:    	movq   QWORD PTR [rsp+0x8],xmm3
  0083e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00844:    	movq   QWORD PTR [rsp+0x18],xmm5
  0084a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00850:    	movq   QWORD PTR [rsp+0x28],xmm7
  00856: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0085d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00864: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0086b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00872: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00879:    	mov    rdx,rdi
  0087c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00885:    	mov    QWORD PTR [rsp-0x38],rcx
  0088a:    	mov    rax,QWORD PTR [rbx]
  0088d:    	lea    rsi,[rsp-0x18]
  00892:    	mov    QWORD PTR [rsi],rax
  00895:    	mov    QWORD PTR [rbx],rsi
  00898: ff 	lea    rcx,[rbp-0xb0]
  0089f: 00 	mov    r8,0x3
  008a6:    	call   0x3bdf3
  008ab:    	lea    rdi,[rbp-0x8]
  008af:    	mov    QWORD PTR [rbx],rdi
  008b2:    	movq   xmm2,QWORD PTR [rsp]
  008b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f8:    	add    rsp,0x60
  008fc: b5 	movabs r13,0x55b5b07e9d50
  00906:    	test   rax,rax
  00909:    	je     0xffff96f4
  0090f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  00916:    	mov    rax,QWORD PTR [rbp-0x78]
  0091a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00921: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00928: 00 	test   rdi,0x7
  0092f:    	jne    0x3be25
  00935:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00939:    	jne    0x3be25
  0093f: 26 	cmp    DWORD PTR [rip+0xffffffffffffbe98],0x26        # 0xffffc7de
  00946:    	jne    0x3be25
  0094c: 00 	mov    r9,0x0
  00953:    	sub    rsp,0x60
  00957:    	movq   QWORD PTR [rsp],xmm2
  0095c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00962:    	movq   QWORD PTR [rsp+0x10],xmm4
  00968:    	movq   QWORD PTR [rsp+0x18],xmm5
  0096e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00974:    	movq   QWORD PTR [rsp+0x28],xmm7
  0097a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00981: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00988: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0098f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00996: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0099d:    	mov    rdx,rdi
  009a0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a9:    	mov    QWORD PTR [rsp-0x38],rcx
  009ae:    	mov    rax,QWORD PTR [rbx]
  009b1:    	lea    rsi,[rsp-0x18]
  009b6:    	mov    QWORD PTR [rsi],rax
  009b9:    	mov    QWORD PTR [rbx],rsi
  009bc: ff 	lea    rcx,[rbp-0xa0]
  009c3: 00 	mov    r8,0x2
  009ca:    	call   0x3be9e
  009cf:    	lea    rdi,[rbp-0x8]
  009d3:    	mov    QWORD PTR [rbx],rdi
  009d6:    	movq   xmm2,QWORD PTR [rsp]
  009db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009f3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009f9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a00: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a07: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a0e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a15: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a1c:    	add    rsp,0x60
  00a20: b5 	movabs r13,0x55b5b07e9d90
  00a2a:    	test   rax,rax
  00a2d:    	je     0xffff96f4
  00a33:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a37: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbdb3]        # 0xffffc7f1
  00a3e: 00 	cmp    rax,QWORD PTR [rip+0x1bdc]        # 0x2621
  00a45:    	jne    0x3bed0
  00a4b: 00 	mov    rax,QWORD PTR [rip+0x1bbf]        # 0x2611
  00a52: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a59: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a60: 00 	test   rdi,0x7
  00a67:    	jne    0x3bfaa
  00a6d:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a71:    	jne    0x3bfaa
  00a77: 26 	cmp    DWORD PTR [rip+0xffffffffffffbd60],0x26        # 0xffffc7de
  00a7e:    	jne    0x3bfaa
  00a84: 00 	mov    r9,0x0
  00a8b:    	sub    rsp,0x60
  00a8f:    	movq   QWORD PTR [rsp],xmm2
  00a94:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a9a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aa0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00aa6:    	movq   QWORD PTR [rsp+0x20],xmm6
  00aac:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ab2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ab9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ac0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ac7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ace: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ad5:    	mov    rdx,rdi
  00ad8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ae1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ae6:    	mov    rax,QWORD PTR [rbx]
  00ae9:    	lea    rsi,[rsp-0x18]
  00aee:    	mov    QWORD PTR [rsi],rax
  00af1:    	mov    QWORD PTR [rbx],rsi
  00af4: ff 	lea    rcx,[rbp-0xa0]
  00afb: 00 	mov    r8,0x0
  00b02:    	call   0x3c023
  00b07:    	lea    rdi,[rbp-0x8]
  00b0b:    	mov    QWORD PTR [rbx],rdi
  00b0e:    	movq   xmm2,QWORD PTR [rsp]
  00b13:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b19:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b1f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b25:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b2b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b31: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b38: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b3f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b46: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b4d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b54:    	add    rsp,0x60
  00b58: b5 	movabs r13,0x55b5b07e9dd0
  00b62:    	test   rax,rax
  00b65:    	je     0xffff96f4
  00b6b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b72:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b76:    	mov    rax,QWORD PTR [rdi+0x10]
  00b7a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b81: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b8c:    	sub    rsp,0x60
  00b90:    	movq   QWORD PTR [rsp],xmm2
  00b95:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b9b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ba1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ba7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bad:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bb3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bba: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bc1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bc8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bcf: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bd6: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00bdd: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00be4:    	mov    rdi,rbx
  00be7:    	mov    rsi,r12
  00bea: b5 	movabs r8,0x55b5b07e9e08
  00bf4: b5 	movabs rax,0x55b5b0091aa0
  00bfe:    	call   rax
  00c00:    	movq   xmm2,QWORD PTR [rsp]
  00c05:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c0b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c11:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c17:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c1d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c23: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c2a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c31: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c38: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c3f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c46:    	add    rsp,0x60
  00c4a: b5 	movabs r13,0x55b5b07e9e10
  00c54:    	test   rax,rax
  00c57:    	je     0xffff96f4
  00c5d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c64:    	mov    rax,QWORD PTR [rbp-0x80]
  00c68: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c6f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c76: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c7d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c84: 00 	test   rdi,0x7
  00c8b:    	jne    0x3c055
  00c91:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c95:    	jne    0x3c055
  00c9b: 26 	cmp    DWORD PTR [rip+0xffffffffffffbb3c],0x26        # 0xffffc7de
  00ca2:    	jne    0x3c055
  00ca8:    	sub    rsp,0x60
  00cac:    	movq   QWORD PTR [rsp],xmm2
  00cb1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cbd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc3:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cc9:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ccf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cd6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cdd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ce4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ceb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cf2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cfb:    	mov    QWORD PTR [rsp-0x38],rcx
  00d00:    	mov    rax,QWORD PTR [rbx]
  00d03:    	lea    rsi,[rsp-0x18]
  00d08:    	mov    QWORD PTR [rsi],rax
  00d0b:    	mov    QWORD PTR [rbx],rsi
  00d0e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d15:    	mov    QWORD PTR [rsp-0x38],rax
  00d1a: 00 	mov    rdi,0x2
  00d21:    	lea    r8,[rsp-0x40]
  00d26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d2d:    	mov    QWORD PTR [r8],rax
  00d30:    	sub    r8,0x8
  00d34: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d3b:    	mov    QWORD PTR [r8],rax
  00d3e:    	sub    r8,0x8
  00d42: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d4b: 10 	movabs rax,0x1000000046
  00d55:    	mov    QWORD PTR [rsp-0x28],rax
  00d5a: b5 	movabs r13,0x55b5b07be970
  00d64:    	call   0xffffd42b
  00d69:    	lea    rdi,[rbp-0x8]
  00d6d:    	mov    QWORD PTR [rbx],rdi
  00d70:    	movq   xmm2,QWORD PTR [rsp]
  00d75:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d7b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d81:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d87:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d8d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d93: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d9a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00da1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00da8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00daf: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00db6:    	add    rsp,0x60
  00dba: b5 	movabs r13,0x55b5b07e9e50
  00dc4:    	test   rax,rax
  00dc7:    	je     0xffff96f4
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00dcd:    	mov    rdi,QWORD PTR [rbp-0x28]
  00dd1:    	mov    rax,QWORD PTR [rdi+0x10]
  00dd5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00ddc: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00de7:    	sub    rsp,0x60
  00deb:    	movq   QWORD PTR [rsp],xmm2
  00df0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dfc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e02:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e08:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e0e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e15: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e1c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e23: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e2a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e31: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e38: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e3f:    	mov    rdi,rbx
  00e42:    	mov    rsi,r12
  00e45: b5 	movabs r8,0x55b5b07e9e88
  00e4f: b5 	movabs rax,0x55b5b0091aa0
  00e59:    	call   rax
  00e5b:    	movq   xmm2,QWORD PTR [rsp]
  00e60:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e72:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e78:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e7e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e85: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e8c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e93: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e9a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ea1:    	add    rsp,0x60
  00ea5: b5 	movabs r13,0x55b5b07e9e90
  00eaf:    	test   rax,rax
  00eb2:    	je     0xffff96f4
  00eb8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00ebf:    	mov    rax,QWORD PTR [rbp-0x80]
  00ec3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00eca: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ed1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00ed8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00edf: 00 	test   rdi,0x7
  00ee6:    	jne    0x3c0ce
  00eec:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ef0:    	jne    0x3c0ce
  00ef6: 26 	cmp    DWORD PTR [rip+0xffffffffffffb8e1],0x26        # 0xffffc7de
  00efd:    	jne    0x3c0ce
  00f03:    	sub    rsp,0x60
  00f07:    	movq   QWORD PTR [rsp],xmm2
  00f0c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f12:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f18:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f1e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f24:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f2a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f31: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f38: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f3f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f46: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f4d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f56:    	mov    QWORD PTR [rsp-0x38],rcx
  00f5b:    	mov    rax,QWORD PTR [rbx]
  00f5e:    	lea    rsi,[rsp-0x18]
  00f63:    	mov    QWORD PTR [rsi],rax
  00f66:    	mov    QWORD PTR [rbx],rsi
  00f69: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f70:    	mov    QWORD PTR [rsp-0x38],rax
  00f75: 00 	mov    rdi,0x2
  00f7c:    	lea    r8,[rsp-0x40]
  00f81: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f88:    	mov    QWORD PTR [r8],rax
  00f8b:    	sub    r8,0x8
  00f8f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f96:    	mov    QWORD PTR [r8],rax
  00f99:    	sub    r8,0x8
  00f9d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fa6: 10 	movabs rax,0x1000000046
  00fb0:    	mov    QWORD PTR [rsp-0x28],rax
  00fb5: b5 	movabs r13,0x55b5b07be970
  00fbf:    	call   0xffffd42b
  00fc4:    	lea    rdi,[rbp-0x8]
  00fc8:    	mov    QWORD PTR [rbx],rdi
  00fcb:    	movq   xmm2,QWORD PTR [rsp]
  00fd0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fd6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fdc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fe2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fe8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ff5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ffc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01003: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0100a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01011:    	add    rsp,0x60
  01015: b5 	movabs r13,0x55b5b07e9ed0
  0101f:    	test   rax,rax
  01022:    	je     0xffff96f4
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  01028:    	mov    rdi,QWORD PTR [rbp-0x28]
  0102c:    	mov    rax,QWORD PTR [rdi+0x10]
  01030: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  01037: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01042:    	sub    rsp,0x60
  01046:    	movq   QWORD PTR [rsp],xmm2
  0104b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01051:    	movq   QWORD PTR [rsp+0x10],xmm4
  01057:    	movq   QWORD PTR [rsp+0x18],xmm5
  0105d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01063:    	movq   QWORD PTR [rsp+0x28],xmm7
  01069: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01070: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01077: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0107e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01085: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0108c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01093: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0109a:    	mov    rdi,rbx
  0109d:    	mov    rsi,r12
  010a0: b5 	movabs r8,0x55b5b07e9f08
  010aa: b5 	movabs rax,0x55b5b0091aa0
  010b4:    	call   rax
  010b6:    	movq   xmm2,QWORD PTR [rsp]
  010bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010c7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010cd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010d3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010d9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010e0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010e7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  010ee: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010f5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010fc:    	add    rsp,0x60
  01100: b5 	movabs r13,0x55b5b07e9f10
  0110a:    	test   rax,rax
  0110d:    	je     0xffff96f4
  01113: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  0111a:    	mov    rax,QWORD PTR [rbp-0x80]
  0111e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  01125: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0112c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  01133: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0113a: 00 	test   rdi,0x7
  01141:    	jne    0x3c147
  01147:    	cmp    DWORD PTR [rdi+0x4],0x2a
  0114b:    	jne    0x3c147
  01151: 26 	cmp    DWORD PTR [rip+0xffffffffffffb686],0x26        # 0xffffc7de
  01158:    	jne    0x3c147
  0115e:    	sub    rsp,0x60
  01162:    	movq   QWORD PTR [rsp],xmm2
  01167:    	movq   QWORD PTR [rsp+0x8],xmm3
  0116d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01173:    	movq   QWORD PTR [rsp+0x18],xmm5
  01179:    	movq   QWORD PTR [rsp+0x20],xmm6
  0117f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01185: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0118c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01193: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0119a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011a1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011a8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011b1:    	mov    QWORD PTR [rsp-0x38],rcx
  011b6:    	mov    rax,QWORD PTR [rbx]
  011b9:    	lea    rsi,[rsp-0x18]
  011be:    	mov    QWORD PTR [rsi],rax
  011c1:    	mov    QWORD PTR [rbx],rsi
  011c4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011cb:    	mov    QWORD PTR [rsp-0x38],rax
  011d0: 00 	mov    rdi,0x2
  011d7:    	lea    r8,[rsp-0x40]
  011dc: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011e3:    	mov    QWORD PTR [r8],rax
  011e6:    	sub    r8,0x8
  011ea: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011f1:    	mov    QWORD PTR [r8],rax
  011f4:    	sub    r8,0x8
  011f8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01201: 10 	movabs rax,0x1000000046
  0120b:    	mov    QWORD PTR [rsp-0x28],rax
  01210: b5 	movabs r13,0x55b5b07be970
  0121a:    	call   0xffffd42b
  0121f:    	lea    rdi,[rbp-0x8]
  01223:    	mov    QWORD PTR [rbx],rdi
  01226:    	movq   xmm2,QWORD PTR [rsp]
  0122b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01231:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01237:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0123d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01243:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01249: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01250: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01257: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0125e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01265: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0126c:    	add    rsp,0x60
  01270: b5 	movabs r13,0x55b5b07e9f50
  0127a:    	test   rax,rax
  0127d:    	je     0xffff96f4
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  01283:    	mov    rdi,QWORD PTR [rbp-0x28]
  01287:    	mov    rax,QWORD PTR [rdi+0x18]
  0128b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01292:    	mov    rax,QWORD PTR [rbp-0x80]
  01296: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  0129d: ff 	mov    rax,QWORD PTR [rbp-0x88]
  012a4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012ab: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x3c1c0
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x2c
  012c3:    	jne    0x3c1c0
  012c9: 26 	cmp    DWORD PTR [rip+0xffffffffffffb50e],0x26        # 0xffffc7de
  012d0:    	jne    0x3c1c0
  012d6:    	sub    rsp,0x60
  012da:    	movq   QWORD PTR [rsp],xmm2
  012df:    	movq   QWORD PTR [rsp+0x8],xmm3
  012e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  012eb:    	movq   QWORD PTR [rsp+0x18],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x20],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x28],xmm7
  012fd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01304: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0130b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01312: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01319: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01320: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01329:    	mov    QWORD PTR [rsp-0x38],rcx
  0132e:    	mov    rax,QWORD PTR [rbx]
  01331:    	lea    rsi,[rsp-0x18]
  01336:    	mov    QWORD PTR [rsi],rax
  01339:    	mov    QWORD PTR [rbx],rsi
  0133c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01343:    	mov    QWORD PTR [rsp-0x38],rax
  01348: 00 	mov    rdi,0x2
  0134f:    	lea    r8,[rsp-0x40]
  01354: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0135b:    	mov    QWORD PTR [r8],rax
  0135e:    	sub    r8,0x8
  01362: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01369:    	mov    QWORD PTR [r8],rax
  0136c:    	sub    r8,0x8
  01370: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01379: 0e 	movabs rax,0xe00000048
  01383:    	mov    QWORD PTR [rsp-0x28],rax
  01388: b5 	movabs r13,0x55b5b07c4d60
  01392:    	call   0xffffda39
  01397:    	lea    rdi,[rbp-0x8]
  0139b:    	mov    QWORD PTR [rbx],rdi
  0139e:    	movq   xmm2,QWORD PTR [rsp]
  013a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013b5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013bb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013c1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013c8: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013cf: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013d6: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013dd: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013e4:    	add    rsp,0x60
  013e8: b5 	movabs r13,0x55b5b07e9fb0
  013f2:    	test   rax,rax
  013f5:    	je     0xffff96f4
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  013fb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01402: 00 	test   rdi,0x7
  01409:    	jne    0x3c239
  0140f:    	cmp    DWORD PTR [rdi+0x4],0x30
  01413:    	jne    0x3c239
  01419: 26 	cmp    DWORD PTR [rip+0xffffffffffffb3be],0x26        # 0xffffc7de
  01420:    	jne    0x3c239
  01426:    	mov    esi,DWORD PTR [rip+0x1201]        # 0x262d
  0142c:    	cmp    esi,0xffffffff
  0142f:    	je     0x3c2b2
  01435:    	cmp    WORD PTR [rdi+0x2],0x3
  0143a:    	jne    0x1453
  01440:    	cmp    esi,0x6
  01443:    	jge    0x1453
  01449:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0144e:    	jmp    0x14f3
  01453:    	sub    rsp,0x60
  01457:    	movq   QWORD PTR [rsp],xmm2
  0145c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01462:    	movq   QWORD PTR [rsp+0x10],xmm4
  01468:    	movq   QWORD PTR [rsp+0x18],xmm5
  0146e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01474:    	movq   QWORD PTR [rsp+0x28],xmm7
  0147a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01481: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01488: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0148f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01496: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0149d: b5 	movabs rax,0x55b5b00a3ef0
  014a7:    	call   rax
  014a9:    	movq   xmm2,QWORD PTR [rsp]
  014ae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014b4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014ba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014c0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014c6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014cc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014d3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014da: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014e1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014e8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014ef:    	add    rsp,0x60
  014f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  014fa: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01501:    	or     rax,0x10
  01505:    	cmp    rax,0x14
  01509:    	je     0x2505
:00106 %14 = %12
  0150f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01516: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  0151d: 01 	sub    DWORD PTR [rip+0x110d],0x1        # 0x2631
  01524:    	je     0x3c3e8
  0152a:    	sub    rsp,0x60
  0152e:    	movq   QWORD PTR [rsp],xmm2
  01533:    	movq   QWORD PTR [rsp+0x8],xmm3
  01539:    	movq   QWORD PTR [rsp+0x10],xmm4
  0153f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01545:    	movq   QWORD PTR [rsp+0x20],xmm6
  0154b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01551: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01558: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0155f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01566: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0156d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01574:    	mov    r15d,0x32
  0157a: 00 	cmp    r15d,DWORD PTR [rip+0x10b8]        # 0x2639
  01581:    	jne    0x3c40a
  01587:    	mov    eax,DWORD PTR [rip+0xffffffffffffb251]        # 0xffffc7de
  0158d:    	cmp    DWORD PTR [rip+0x10a2],eax        # 0x2635
  01593:    	jne    0x3c40a
  01599: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015a2:    	mov    QWORD PTR [rsp-0x38],rcx
  015a7:    	mov    rax,QWORD PTR [rbx]
  015aa:    	lea    rsi,[rsp-0x18]
  015af:    	mov    QWORD PTR [rsi],rax
  015b2:    	mov    QWORD PTR [rbx],rsi
  015b5:    	mov    rax,QWORD PTR [rbp-0x28]
  015b9:    	mov    QWORD PTR [rsp-0x38],rax
  015be: 00 	mov    rdi,0x1
  015c5:    	lea    r8,[rsp-0x40]
  015ca: ff 	mov    rax,QWORD PTR [rbp-0x98]
  015d1:    	mov    QWORD PTR [r8],rax
  015d4:    	sub    r8,0x8
  015d8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015e1: 00 	movabs rax,0x0
  015eb:    	mov    QWORD PTR [rsp-0x28],rax
  015f0: 00 	movabs r13,0x0
  015fa:    	call   0xffff96c1
  015ff:    	lea    rdi,[rbp-0x8]
  01603:    	mov    QWORD PTR [rbx],rdi
  01606:    	movq   xmm2,QWORD PTR [rsp]
  0160b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01611:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01617:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0161d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01623:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01629: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01630: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01637: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0163e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01645: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0164c:    	add    rsp,0x60
  01650:    	test   rax,rax
  01653:    	je     0x3c476
  01659: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  01660:    	mov    rax,QWORD PTR [rbp-0x10]
  01664:    	mov    rax,QWORD PTR [rax]
  01667:    	mov    rax,QWORD PTR [rax-0x28]
  0166b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  01672:    	mov    rax,QWORD PTR [rbp-0x10]
  01676:    	mov    rax,QWORD PTR [rax]
  01679:    	mov    rax,QWORD PTR [rax-0x28]
  0167d: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  01684: 01 	sub    DWORD PTR [rip+0xfb2],0x1        # 0x263d
  0168b:    	je     0x3c4fe
  01691:    	sub    rsp,0x60
  01695:    	movq   QWORD PTR [rsp],xmm2
  0169a:    	movq   QWORD PTR [rsp+0x8],xmm3
  016a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  016a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  016b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  016b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016c6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  016cd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  016d4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  016db: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  016e2: b5 	movabs rax,0x55b5b009e670
  016ec:    	call   rax
  016ee:    	mov    r15d,eax
  016f1: 00 	cmp    r15d,DWORD PTR [rip+0xf4d]        # 0x2645
  016f8:    	jne    0x3c520
  016fe:    	mov    eax,DWORD PTR [rip+0xffffffffffffb0da]        # 0xffffc7de
  01704:    	cmp    DWORD PTR [rip+0xf37],eax        # 0x2641
  0170a:    	jne    0x3c520
  01710: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01719:    	mov    QWORD PTR [rsp-0x38],rcx
  0171e:    	mov    rax,QWORD PTR [rbx]
  01721:    	lea    rsi,[rsp-0x18]
  01726:    	mov    QWORD PTR [rsi],rax
  01729:    	mov    QWORD PTR [rbx],rsi
  0172c: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01733:    	mov    QWORD PTR [rsp-0x38],rax
  01738: 00 	mov    rdi,0x0
  0173f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01748: 00 	movabs rax,0x0
  01752:    	mov    QWORD PTR [rsp-0x28],rax
  01757: 00 	movabs r13,0x0
  01761:    	call   0xffff96c1
  01766:    	lea    rdi,[rbp-0x8]
  0176a:    	mov    QWORD PTR [rbx],rdi
  0176d:    	movq   xmm2,QWORD PTR [rsp]
  01772:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01778:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0177e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01784:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0178a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01790: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01797: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0179e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017a5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017ac: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017b3:    	add    rsp,0x60
  017b7:    	test   rax,rax
  017ba:    	je     0x3c58f
  017c0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  017c7: 01 	sub    DWORD PTR [rip+0xe7b],0x1        # 0x2649
  017ce:    	je     0x3c617
  017d4:    	sub    rsp,0x60
  017d8:    	movq   QWORD PTR [rsp],xmm2
  017dd:    	movq   QWORD PTR [rsp+0x8],xmm3
  017e3:    	movq   QWORD PTR [rsp+0x10],xmm4
  017e9:    	movq   QWORD PTR [rsp+0x18],xmm5
  017ef:    	movq   QWORD PTR [rsp+0x20],xmm6
  017f5:    	movq   QWORD PTR [rsp+0x28],xmm7
  017fb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01802: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01809: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01810: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01817: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0181e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01825: b5 	movabs rax,0x55b5b009e670
  0182f:    	call   rax
  01831:    	mov    r15d,eax
  01834: 00 	cmp    r15d,DWORD PTR [rip+0xe16]        # 0x2651
  0183b:    	jne    0x3c639
  01841:    	mov    eax,DWORD PTR [rip+0xffffffffffffaf97]        # 0xffffc7de
  01847:    	cmp    DWORD PTR [rip+0xe00],eax        # 0x264d
  0184d:    	jne    0x3c639
  01853: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0185c:    	mov    QWORD PTR [rsp-0x38],rcx
  01861:    	mov    rax,QWORD PTR [rbx]
  01864:    	lea    rsi,[rsp-0x18]
  01869:    	mov    QWORD PTR [rsi],rax
  0186c:    	mov    QWORD PTR [rbx],rsi
  0186f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01876:    	mov    QWORD PTR [rsp-0x38],rax
  0187b: 00 	mov    rdi,0x0
  01882: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0188b: 00 	movabs rax,0x0
  01895:    	mov    QWORD PTR [rsp-0x28],rax
  0189a: 00 	movabs r13,0x0
  018a4:    	call   0xffff96c1
  018a9:    	lea    rdi,[rbp-0x8]
  018ad:    	mov    QWORD PTR [rbx],rdi
  018b0:    	movq   xmm2,QWORD PTR [rsp]
  018b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018c7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018cd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018d3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018da: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018e1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  018e8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  018ef: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  018f6:    	add    rsp,0x60
  018fa:    	test   rax,rax
  018fd:    	je     0x3c6a8
  01903: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0190a: 01 	sub    DWORD PTR [rip+0xd44],0x1        # 0x2655
  01911:    	je     0x3c730
  01917: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0191e: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01925:    	sub    rsp,0x60
  01929:    	movq   QWORD PTR [rsp],xmm2
  0192e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01934:    	movq   QWORD PTR [rsp+0x10],xmm4
  0193a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01940:    	movq   QWORD PTR [rsp+0x20],xmm6
  01946:    	movq   QWORD PTR [rsp+0x28],xmm7
  0194c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01953: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0195a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01961: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01968: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0196f:    	mov    rdx,rdi
  01972:    	mov    rcx,rsi
  01975:    	mov    rdi,rbx
  01978:    	mov    rsi,r12
  0197b: b5 	movabs rax,0x55b5b00e6cb0
  01985:    	call   rax
  01987:    	movq   xmm2,QWORD PTR [rsp]
  0198c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01992:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01998:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0199e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  019a4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  019aa: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  019b1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  019b8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  019bf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  019c6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  019cd:    	add    rsp,0x60
  019d1: b5 	movabs r13,0x55b5b07ea0d0
  019db:    	test   rax,rax
  019de:    	je     0xffff96f4
  019e4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  019eb: 01 	sub    DWORD PTR [rip+0xc67],0x1        # 0x2659
  019f2:    	je     0x3c7cb
  019f8:    	sub    rsp,0x60
  019fc:    	movq   QWORD PTR [rsp],xmm2
  01a01:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a07:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a0d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a13:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a19:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a1f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a26: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a2d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a34: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a3b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a42: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01a49: b5 	movabs rax,0x55b5b009e670
  01a53:    	call   rax
  01a55:    	mov    r15d,eax
  01a58: 00 	cmp    r15d,DWORD PTR [rip+0xc02]        # 0x2661
  01a5f:    	jne    0x3c7ed
  01a65:    	mov    eax,DWORD PTR [rip+0xffffffffffffad73]        # 0xffffc7de
  01a6b:    	cmp    DWORD PTR [rip+0xbec],eax        # 0x265d
  01a71:    	jne    0x3c7ed
  01a77: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a80:    	mov    QWORD PTR [rsp-0x38],rcx
  01a85:    	mov    rax,QWORD PTR [rbx]
  01a88:    	lea    rsi,[rsp-0x18]
  01a8d:    	mov    QWORD PTR [rsi],rax
  01a90:    	mov    QWORD PTR [rbx],rsi
  01a93: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a9a:    	mov    QWORD PTR [rsp-0x38],rax
  01a9f: 00 	mov    rdi,0x1
  01aa6:    	lea    r8,[rsp-0x40]
  01aab: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01ab2:    	mov    QWORD PTR [r8],rax
  01ab5:    	sub    r8,0x8
  01ab9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ac2: 00 	movabs rax,0x0
  01acc:    	mov    QWORD PTR [rsp-0x28],rax
  01ad1: 00 	movabs r13,0x0
  01adb:    	call   0xffff96c1
  01ae0:    	lea    rdi,[rbp-0x8]
  01ae4:    	mov    QWORD PTR [rbx],rdi
  01ae7:    	movq   xmm2,QWORD PTR [rsp]
  01aec:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01af2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01af8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01afe:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b04:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b0a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b11: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b18: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b1f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b26: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b2d:    	add    rsp,0x60
  01b31:    	test   rax,rax
  01b34:    	je     0x3c85c
:00120 
:00122 %14 = dynvar(2, %2)
  01b3a:    	mov    rax,QWORD PTR [rbp-0x10]
  01b3e:    	mov    rax,QWORD PTR [rax]
  01b41:    	mov    rax,QWORD PTR [rax-0x28]
  01b45: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01b4c:    	mov    rax,QWORD PTR [rbp-0x10]
  01b50:    	mov    rax,QWORD PTR [rax]
  01b53:    	mov    rax,QWORD PTR [rax-0x28]
  01b57: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01b5e: 01 	sub    DWORD PTR [rip+0xb00],0x1        # 0x2665
  01b65:    	je     0x3c8e4
  01b6b:    	sub    rsp,0x60
  01b6f:    	movq   QWORD PTR [rsp],xmm2
  01b74:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b7a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b80:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b86:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b8c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b92: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b99: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ba0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ba7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01bae: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01bb5: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01bbc: b5 	movabs rax,0x55b5b009e670
  01bc6:    	call   rax
  01bc8:    	mov    r15d,eax
  01bcb: 00 	cmp    r15d,DWORD PTR [rip+0xa9b]        # 0x266d
  01bd2:    	jne    0x3c906
  01bd8:    	mov    eax,DWORD PTR [rip+0xffffffffffffac00]        # 0xffffc7de
  01bde:    	cmp    DWORD PTR [rip+0xa85],eax        # 0x2669
  01be4:    	jne    0x3c906
  01bea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bf3:    	mov    QWORD PTR [rsp-0x38],rcx
  01bf8:    	mov    rax,QWORD PTR [rbx]
  01bfb:    	lea    rsi,[rsp-0x18]
  01c00:    	mov    QWORD PTR [rsi],rax
  01c03:    	mov    QWORD PTR [rbx],rsi
  01c06: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01c0d:    	mov    QWORD PTR [rsp-0x38],rax
  01c12: 00 	mov    rdi,0x0
  01c19: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c22: 00 	movabs rax,0x0
  01c2c:    	mov    QWORD PTR [rsp-0x28],rax
  01c31: 00 	movabs r13,0x0
  01c3b:    	call   0xffff96c1
  01c40:    	lea    rdi,[rbp-0x8]
  01c44:    	mov    QWORD PTR [rbx],rdi
  01c47:    	movq   xmm2,QWORD PTR [rsp]
  01c4c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c52:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c58:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c5e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c64:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c6a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c71: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c78: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c7f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c86: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c8d:    	add    rsp,0x60
  01c91:    	test   rax,rax
  01c94:    	je     0x3c975
  01c9a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01ca1: 01 	sub    DWORD PTR [rip+0x9c9],0x1        # 0x2671
  01ca8:    	je     0x3c9fd
  01cae:    	sub    rsp,0x60
  01cb2:    	movq   QWORD PTR [rsp],xmm2
  01cb7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01cbd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01cc3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01cc9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ccf:    	movq   QWORD PTR [rsp+0x28],xmm7
  01cd5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01cdc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ce3: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01cea: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01cf1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01cf8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01cff: b5 	movabs rax,0x55b5b009e670
  01d09:    	call   rax
  01d0b:    	mov    r15d,eax
  01d0e: 00 	cmp    r15d,DWORD PTR [rip+0x964]        # 0x2679
  01d15:    	jne    0x3ca1f
  01d1b:    	mov    eax,DWORD PTR [rip+0xffffffffffffaabd]        # 0xffffc7de
  01d21:    	cmp    DWORD PTR [rip+0x94e],eax        # 0x2675
  01d27:    	jne    0x3ca1f
  01d2d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d36:    	mov    QWORD PTR [rsp-0x38],rcx
  01d3b:    	mov    rax,QWORD PTR [rbx]
  01d3e:    	lea    rsi,[rsp-0x18]
  01d43:    	mov    QWORD PTR [rsi],rax
  01d46:    	mov    QWORD PTR [rbx],rsi
  01d49: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d50:    	mov    QWORD PTR [rsp-0x38],rax
  01d55: 00 	mov    rdi,0x0
  01d5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d65: 00 	movabs rax,0x0
  01d6f:    	mov    QWORD PTR [rsp-0x28],rax
  01d74: 00 	movabs r13,0x0
  01d7e:    	call   0xffff96c1
  01d83:    	lea    rdi,[rbp-0x8]
  01d87:    	mov    QWORD PTR [rbx],rdi
  01d8a:    	movq   xmm2,QWORD PTR [rsp]
  01d8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01da1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01da7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01dad: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01db4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01dbb: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01dc2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01dc9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01dd0:    	add    rsp,0x60
  01dd4:    	test   rax,rax
  01dd7:    	je     0x3ca8e
  01ddd: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01de4: 01 	sub    DWORD PTR [rip+0x892],0x1        # 0x267d
  01deb:    	je     0x3cb16
  01df1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01df8: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01dff:    	sub    rsp,0x60
  01e03:    	movq   QWORD PTR [rsp],xmm2
  01e08:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e0e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e14:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e1a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e20:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e26: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e2d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e34: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e3b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e42: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e49:    	mov    rdx,rdi
  01e4c:    	mov    rcx,rsi
  01e4f:    	mov    rdi,rbx
  01e52:    	mov    rsi,r12
  01e55: b5 	movabs rax,0x55b5b00e6cb0
  01e5f:    	call   rax
  01e61:    	movq   xmm2,QWORD PTR [rsp]
  01e66:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e6c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e72:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e78:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e7e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e84: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e8b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e92: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e99: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ea0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ea7:    	add    rsp,0x60
  01eab: b5 	movabs r13,0x55b5b07ea190
  01eb5:    	test   rax,rax
  01eb8:    	je     0xffff96f4
  01ebe: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01ec5: 01 	sub    DWORD PTR [rip+0x7b5],0x1        # 0x2681
  01ecc:    	je     0x3cbb1
  01ed2:    	sub    rsp,0x60
  01ed6:    	movq   QWORD PTR [rsp],xmm2
  01edb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ee1:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ee7:    	movq   QWORD PTR [rsp+0x18],xmm5
  01eed:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ef3:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ef9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f00: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f07: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f0e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f15: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f1c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01f23: b5 	movabs rax,0x55b5b009e670
  01f2d:    	call   rax
  01f2f:    	mov    r15d,eax
  01f32: 00 	cmp    r15d,DWORD PTR [rip+0x750]        # 0x2689
  01f39:    	jne    0x3cbd3
  01f3f:    	mov    eax,DWORD PTR [rip+0xffffffffffffa899]        # 0xffffc7de
  01f45:    	cmp    DWORD PTR [rip+0x73a],eax        # 0x2685
  01f4b:    	jne    0x3cbd3
  01f51: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f5a:    	mov    QWORD PTR [rsp-0x38],rcx
  01f5f:    	mov    rax,QWORD PTR [rbx]
  01f62:    	lea    rsi,[rsp-0x18]
  01f67:    	mov    QWORD PTR [rsi],rax
  01f6a:    	mov    QWORD PTR [rbx],rsi
  01f6d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f74:    	mov    QWORD PTR [rsp-0x38],rax
  01f79: 00 	mov    rdi,0x1
  01f80:    	lea    r8,[rsp-0x40]
  01f85: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f8c:    	mov    QWORD PTR [r8],rax
  01f8f:    	sub    r8,0x8
  01f93: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f9c: 00 	movabs rax,0x0
  01fa6:    	mov    QWORD PTR [rsp-0x28],rax
  01fab: 00 	movabs r13,0x0
  01fb5:    	call   0xffff96c1
  01fba:    	lea    rdi,[rbp-0x8]
  01fbe:    	mov    QWORD PTR [rbx],rdi
  01fc1:    	movq   xmm2,QWORD PTR [rsp]
  01fc6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fcc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fd2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fd8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fde:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fe4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01feb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ff2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ff9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02000: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02007:    	add    rsp,0x60
  0200b:    	test   rax,rax
  0200e:    	je     0x3cc42
:00132 
:00134 %14 = dynvar(2, %2)
  02014:    	mov    rax,QWORD PTR [rbp-0x10]
  02018:    	mov    rax,QWORD PTR [rax]
  0201b:    	mov    rax,QWORD PTR [rax-0x28]
  0201f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  02026:    	mov    rax,QWORD PTR [rbp-0x10]
  0202a:    	mov    rax,QWORD PTR [rax]
  0202d:    	mov    rax,QWORD PTR [rax-0x28]
  02031: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  02038: 01 	sub    DWORD PTR [rip+0x64e],0x1        # 0x268d
  0203f:    	je     0x3ccca
  02045:    	sub    rsp,0x60
  02049:    	movq   QWORD PTR [rsp],xmm2
  0204e:    	movq   QWORD PTR [rsp+0x8],xmm3
  02054:    	movq   QWORD PTR [rsp+0x10],xmm4
  0205a:    	movq   QWORD PTR [rsp+0x18],xmm5
  02060:    	movq   QWORD PTR [rsp+0x20],xmm6
  02066:    	movq   QWORD PTR [rsp+0x28],xmm7
  0206c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02073: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0207a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02081: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02088: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0208f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02096: b5 	movabs rax,0x55b5b009e670
  020a0:    	call   rax
  020a2:    	mov    r15d,eax
  020a5: 00 	cmp    r15d,DWORD PTR [rip+0x5e9]        # 0x2695
  020ac:    	jne    0x3ccec
  020b2:    	mov    eax,DWORD PTR [rip+0xffffffffffffa726]        # 0xffffc7de
  020b8:    	cmp    DWORD PTR [rip+0x5d3],eax        # 0x2691
  020be:    	jne    0x3ccec
  020c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  020cd:    	mov    QWORD PTR [rsp-0x38],rcx
  020d2:    	mov    rax,QWORD PTR [rbx]
  020d5:    	lea    rsi,[rsp-0x18]
  020da:    	mov    QWORD PTR [rsi],rax
  020dd:    	mov    QWORD PTR [rbx],rsi
  020e0: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  020e7:    	mov    QWORD PTR [rsp-0x38],rax
  020ec: 00 	mov    rdi,0x0
  020f3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  020fc: 00 	movabs rax,0x0
  02106:    	mov    QWORD PTR [rsp-0x28],rax
  0210b: 00 	movabs r13,0x0
  02115:    	call   0xffff96c1
  0211a:    	lea    rdi,[rbp-0x8]
  0211e:    	mov    QWORD PTR [rbx],rdi
  02121:    	movq   xmm2,QWORD PTR [rsp]
  02126:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0212c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02132:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02138:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0213e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02144: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0214b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02152: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02159: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02160: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02167:    	add    rsp,0x60
  0216b:    	test   rax,rax
  0216e:    	je     0x3cd5b
  02174: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  0217b: 01 	sub    DWORD PTR [rip+0x517],0x1        # 0x2699
  02182:    	je     0x3cde3
  02188:    	sub    rsp,0x60
  0218c:    	movq   QWORD PTR [rsp],xmm2
  02191:    	movq   QWORD PTR [rsp+0x8],xmm3
  02197:    	movq   QWORD PTR [rsp+0x10],xmm4
  0219d:    	movq   QWORD PTR [rsp+0x18],xmm5
  021a3:    	movq   QWORD PTR [rsp+0x20],xmm6
  021a9:    	movq   QWORD PTR [rsp+0x28],xmm7
  021af: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  021b6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  021bd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  021c4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  021cb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  021d2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  021d9: b5 	movabs rax,0x55b5b009e670
  021e3:    	call   rax
  021e5:    	mov    r15d,eax
  021e8: 00 	cmp    r15d,DWORD PTR [rip+0x4b2]        # 0x26a1
  021ef:    	jne    0x3ce05
  021f5:    	mov    eax,DWORD PTR [rip+0xffffffffffffa5e3]        # 0xffffc7de
  021fb:    	cmp    DWORD PTR [rip+0x49c],eax        # 0x269d
  02201:    	jne    0x3ce05
  02207: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02210:    	mov    QWORD PTR [rsp-0x38],rcx
  02215:    	mov    rax,QWORD PTR [rbx]
  02218:    	lea    rsi,[rsp-0x18]
  0221d:    	mov    QWORD PTR [rsi],rax
  02220:    	mov    QWORD PTR [rbx],rsi
  02223: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0222a:    	mov    QWORD PTR [rsp-0x38],rax
  0222f: 00 	mov    rdi,0x0
  02236: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0223f: 00 	movabs rax,0x0
  02249:    	mov    QWORD PTR [rsp-0x28],rax
  0224e: 00 	movabs r13,0x0
  02258:    	call   0xffff96c1
  0225d:    	lea    rdi,[rbp-0x8]
  02261:    	mov    QWORD PTR [rbx],rdi
  02264:    	movq   xmm2,QWORD PTR [rsp]
  02269:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0226f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02275:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0227b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02281:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02287: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0228e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02295: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0229c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022a3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022aa:    	add    rsp,0x60
  022ae:    	test   rax,rax
  022b1:    	je     0x3ce74
  022b7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  022be: 01 	sub    DWORD PTR [rip+0x3e0],0x1        # 0x26a5
  022c5:    	je     0x3cefc
  022cb: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  022d2: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  022d9:    	sub    rsp,0x60
  022dd:    	movq   QWORD PTR [rsp],xmm2
  022e2:    	movq   QWORD PTR [rsp+0x8],xmm3
  022e8:    	movq   QWORD PTR [rsp+0x10],xmm4
  022ee:    	movq   QWORD PTR [rsp+0x18],xmm5
  022f4:    	movq   QWORD PTR [rsp+0x20],xmm6
  022fa:    	movq   QWORD PTR [rsp+0x28],xmm7
  02300: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02307: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0230e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02315: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0231c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02323:    	mov    rdx,rdi
  02326:    	mov    rcx,rsi
  02329:    	mov    rdi,rbx
  0232c:    	mov    rsi,r12
  0232f: b5 	movabs rax,0x55b5b00e6cb0
  02339:    	call   rax
  0233b:    	movq   xmm2,QWORD PTR [rsp]
  02340:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02346:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0234c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02352:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02358:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0235e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02365: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0236c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02373: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0237a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02381:    	add    rsp,0x60
  02385: b5 	movabs r13,0x55b5b07ea250
  0238f:    	test   rax,rax
  02392:    	je     0xffff96f4
  02398: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  0239f: 01 	sub    DWORD PTR [rip+0x303],0x1        # 0x26a9
  023a6:    	je     0x3cf97
  023ac:    	sub    rsp,0x60
  023b0:    	movq   QWORD PTR [rsp],xmm2
  023b5:    	movq   QWORD PTR [rsp+0x8],xmm3
  023bb:    	movq   QWORD PTR [rsp+0x10],xmm4
  023c1:    	movq   QWORD PTR [rsp+0x18],xmm5
  023c7:    	movq   QWORD PTR [rsp+0x20],xmm6
  023cd:    	movq   QWORD PTR [rsp+0x28],xmm7
  023d3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  023da: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  023e1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  023e8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  023ef: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  023f6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  023fd: b5 	movabs rax,0x55b5b009e670
  02407:    	call   rax
  02409:    	mov    r15d,eax
  0240c: 00 	cmp    r15d,DWORD PTR [rip+0x29e]        # 0x26b1
  02413:    	jne    0x3cfb9
  02419:    	mov    eax,DWORD PTR [rip+0xffffffffffffa3bf]        # 0xffffc7de
  0241f:    	cmp    DWORD PTR [rip+0x288],eax        # 0x26ad
  02425:    	jne    0x3cfb9
  0242b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02434:    	mov    QWORD PTR [rsp-0x38],rcx
  02439:    	mov    rax,QWORD PTR [rbx]
  0243c:    	lea    rsi,[rsp-0x18]
  02441:    	mov    QWORD PTR [rsi],rax
  02444:    	mov    QWORD PTR [rbx],rsi
  02447: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0244e:    	mov    QWORD PTR [rsp-0x38],rax
  02453: 00 	mov    rdi,0x1
  0245a:    	lea    r8,[rsp-0x40]
  0245f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02466:    	mov    QWORD PTR [r8],rax
  02469:    	sub    r8,0x8
  0246d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02476: 00 	movabs rax,0x0
  02480:    	mov    QWORD PTR [rsp-0x28],rax
  02485: 00 	movabs r13,0x0
  0248f:    	call   0xffff96c1
  02494:    	lea    rdi,[rbp-0x8]
  02498:    	mov    QWORD PTR [rbx],rdi
  0249b:    	movq   xmm2,QWORD PTR [rsp]
  024a0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  024a6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  024ac:    	movq   xmm5,QWORD PTR [rsp+0x18]
  024b2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  024b8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  024be: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  024c5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  024cc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  024d3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  024da: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  024e1:    	add    rsp,0x60
  024e5:    	test   rax,rax
  024e8:    	je     0x3d028
:00144 
:00146 %14 = %15
  024ee: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  024f5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 ret %14
  024fc: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02503:    	leave  
  02504:    	ret    
:00148 %14 = nil
  02505: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  02510: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02517:    	leave  
  02518:    	ret    
==> start whole compile: vnormalize FuncId(68) self_class:Vec start:[00000] bytecode:0x55b5b07ceca0
<== finished compile. elapsed:56.7µs
offset:Pos(36852) code: 1770 bytes  data: 90 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x3a982
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [rbp-0x30],rax
  0001f: mov    QWORD PTR [rbp-0x38],rax
  00023: mov    QWORD PTR [rbp-0x40],rax
  00027: mov    QWORD PTR [rbp-0x48],rax
  0002b: mov    QWORD PTR [rbp-0x50],rax
  0002f: mov    QWORD PTR [rbp-0x58],rax
  00033: mov    rdi,QWORD PTR [rbp-0x28]
  00037: test   rdi,0x7
  0003e: jne    0x3a991
  00044: cmp    DWORD PTR [rdi+0x4],0x28
  00048: jne    0x3a991
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [rbp-0x28]
  00052: cmp    DWORD PTR [rip+0xffffffffffffa0d0],0x26        # 0xffffa129
  00059: jne    0x3a9a0
  0005f: mov    QWORD PTR [rsp-0x20],0x0
  00068: mov    QWORD PTR [rsp-0x38],rcx
  0006d: mov    rax,QWORD PTR [rbx]
  00070: lea    rsi,[rsp-0x18]
  00075: mov    QWORD PTR [rsi],rax
  00078: mov    QWORD PTR [rbx],rsi
  0007b: mov    rax,QWORD PTR [rbp-0x28]
  0007f: mov    QWORD PTR [rsp-0x38],rax
  00084: mov    rdi,0x0
  0008b: mov    QWORD PTR [rsp-0x30],0x0
  00094: movabs rax,0x600000043
  0009e: mov    QWORD PTR [rsp-0x28],rax
  000a3: movabs r13,0x55b5b0796260
  000ad: call   0xffffaac6
  000b2: lea    rdi,[rbp-0x8]
  000b6: mov    QWORD PTR [rbx],rdi
  000b9: movabs r13,0x55b5b07cecd0
  000c3: test   rax,rax
  000c6: je     0xffff703f
  000cc: mov    QWORD PTR [rbp-0x40],rax
:00002 
:00004 %1 = %3
  000d0: mov    rax,QWORD PTR [rbp-0x40]
  000d4: mov    QWORD PTR [rbp-0x30],rax
:00005 %3 = const[Vec]                      [Vec]
  000d8: mov    rax,QWORD PTR [rip+0xffffffffffffa05d]        # 0xffffa13c
  000df: cmp    rax,QWORD PTR [rip+0x616]        # 0x6fc
  000e6: jne    0x3a9af
  000ec: mov    rax,QWORD PTR [rip+0x5f9]        # 0x6ec
  000f3: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = @x: Vec[IvarId(0)]
  000f7: mov    rdi,QWORD PTR [rbp-0x28]
  000fb: mov    rax,QWORD PTR [rdi+0x10]
  000ff: mov    QWORD PTR [rbp-0x48],rax
:00007 %5 = @y: Vec[IvarId(1)]
  00103: mov    rdi,QWORD PTR [rbp-0x28]
  00107: mov    rax,QWORD PTR [rdi+0x18]
  0010b: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = @z: Vec[IvarId(2)]
  0010f: mov    rdi,QWORD PTR [rbp-0x28]
  00113: mov    rax,QWORD PTR [rdi+0x20]
  00117: mov    QWORD PTR [rbp-0x58],rax
:00009 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  0011b: mov    rdi,QWORD PTR [rbp-0x40]
  0011f: test   rdi,0x7
  00126: jne    0x3a9f5
  0012c: cmp    DWORD PTR [rdi+0x4],0x29
  00130: jne    0x3a9f5
  00136: cmp    DWORD PTR [rip+0xffffffffffff9fec],0x26        # 0xffffa129
  0013d: jne    0x3a9f5
  00143: mov    r9,0x0
  0014a: mov    rdx,rdi
  0014d: mov    QWORD PTR [rsp-0x20],0x0
  00156: mov    QWORD PTR [rsp-0x38],rcx
  0015b: mov    rax,QWORD PTR [rbx]
  0015e: lea    rsi,[rsp-0x18]
  00163: mov    QWORD PTR [rsi],rax
  00166: mov    QWORD PTR [rbx],rsi
  00169: lea    rcx,[rbp-0x48]
  0016d: mov    r8,0x3
  00174: call   0x3aa04
  00179: lea    rdi,[rbp-0x8]
  0017d: mov    QWORD PTR [rbx],rdi
  00180: movabs r13,0x55b5b07ced50
  0018a: test   rax,rax
  0018d: je     0xffff703f
  00193: mov    QWORD PTR [rbp-0x38],rax
:00010 
:00012 %3 = literal[1e-17]
  00197: movq   xmm2,QWORD PTR [rip+0x56d]        # 0x70c
  0019f: movabs rax,0xe33877aa3236a4ba
  001a9: mov    QWORD PTR [rbp-0x40],rax
:00013 _%3 = %1 > %3                        [Float][Float]
:00014 condnotbr _%3 =>:00037
  001ad: mov    rdi,QWORD PTR [rbp-0x30]
  001b1: test   rdi,0x1
  001b8: jne    0x3aa36
  001be: test   rdi,0x2
  001c5: je     0x201
  001cb: xorps  xmm3,xmm3
  001ce: movabs rax,0x8000000000000002
  001d8: cmp    rdi,rax
  001db: je     0x213
  001e1: mov    rax,rdi
  001e4: sar    rax,0x3f
  001e8: add    rax,0x2
  001ec: and    rdi,0xfffffffffffffffc
  001f0: or     rdi,rax
  001f3: rol    rdi,0x3d
  001f7: movq   xmm3,rdi
  001fc: jmp    0x213
  00201: call   0xffff7098
  00206: test   rax,rax
  00209: je     0x3aa36
  0020f: movq   xmm3,xmm0
  00213: ucomisd xmm3,xmm2
  00217: jbe    0x3ac67
:00015 %3 = %2.call x()                     [Vec]
  0021d: mov    rdi,QWORD PTR [rbp-0x38]
  00221: test   rdi,0x7
  00228: jne    0x3aa45
  0022e: cmp    DWORD PTR [rdi+0x4],0x28
  00232: jne    0x3aa45
  00238: cmp    DWORD PTR [rip+0xffffffffffff9eea],0x26        # 0xffffa129
  0023f: jne    0x3aa45
  00245: mov    esi,DWORD PTR [rip+0x4cd]        # 0x718
  0024b: cmp    esi,0xffffffff
  0024e: je     0x3aa54
  00254: cmp    WORD PTR [rdi+0x2],0x3
  00259: jne    0x272
  0025f: cmp    esi,0x6
  00262: jge    0x272
  00268: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0026d: jmp    0x290
  00272: sub    rsp,0x10
  00276: movq   QWORD PTR [rsp],xmm3
  0027b: movabs rax,0x55b5b00a3ef0
  00285: call   rax
  00287: movq   xmm3,QWORD PTR [rsp]
  0028c: add    rsp,0x10
  00290: mov    QWORD PTR [rbp-0x40],rax
:00016 
:00018 %3 = %3 / %1                         [Float][Float]
  00294: mov    rdi,QWORD PTR [rbp-0x40]
  00298: test   rdi,0x1
  0029f: jne    0x3aa8f
  002a5: test   rdi,0x2
  002ac: je     0x2e8
  002b2: xorps  xmm2,xmm2
  002b5: movabs rax,0x8000000000000002
  002bf: cmp    rdi,rax
  002c2: je     0x2fa
  002c8: mov    rax,rdi
  002cb: sar    rax,0x3f
  002cf: add    rax,0x2
  002d3: and    rdi,0xfffffffffffffffc
  002d7: or     rdi,rax
  002da: rol    rdi,0x3d
  002de: movq   xmm2,rdi
  002e3: jmp    0x2fa
  002e8: call   0xffff7098
  002ed: test   rax,rax
  002f0: je     0x3aa8f
  002f6: movq   xmm2,xmm0
  002fa: movq   rax,xmm3
  002ff: test   rax,rax
  00302: je     0xffff7064
  00308: divsd  xmm2,xmm3
:00019 _ = %2.call x=(%3; 1)                [Vec]
  0030c: movq   xmm0,xmm2
  00310: call   0xffff71bc
  00315: mov    QWORD PTR [rbp-0x40],rax
  00319: mov    rdi,QWORD PTR [rbp-0x38]
  0031d: test   rdi,0x7
  00324: jne    0x3aa9e
  0032a: cmp    DWORD PTR [rdi+0x4],0x28
  0032e: jne    0x3aa9e
  00334: cmp    DWORD PTR [rip+0xffffffffffff9dee],0x26        # 0xffffa129
  0033b: jne    0x3aa9e
  00341: mov    esi,DWORD PTR [rip+0x3d9]        # 0x720
  00347: cmp    esi,0xffffffff
  0034a: je     0x3aaad
  00350: cmp    WORD PTR [rdi+0x2],0x3
  00355: jne    0x372
  0035b: cmp    esi,0x6
  0035e: jge    0x372
  00364: mov    rax,QWORD PTR [rbp-0x40]
  00368: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0036d: jmp    0x3b3
  00372: sub    rsp,0x10
  00376: movq   QWORD PTR [rsp],xmm2
  0037b: movq   QWORD PTR [rsp+0x8],xmm3
  00381: mov    rdx,QWORD PTR [rbp-0x40]
  00385: movabs rax,0x55b5b00a4170
  0038f: call   rax
  00391: movq   xmm2,QWORD PTR [rsp]
  00396: movq   xmm3,QWORD PTR [rsp+0x8]
  0039c: add    rsp,0x10
  003a0: movabs r13,0x55b5b07cedf0
  003aa: test   rax,rax
  003ad: je     0xffff703f
:00020 
:00022 %3 = %2.call y()                     [Vec]
  003b3: mov    rdi,QWORD PTR [rbp-0x38]
  003b7: test   rdi,0x7
  003be: jne    0x3aafb
  003c4: cmp    DWORD PTR [rdi+0x4],0x28
  003c8: jne    0x3aafb
  003ce: cmp    DWORD PTR [rip+0xffffffffffff9d54],0x26        # 0xffffa129
  003d5: jne    0x3aafb
  003db: mov    esi,DWORD PTR [rip+0x347]        # 0x728
  003e1: cmp    esi,0xffffffff
  003e4: je     0x3ab0a
  003ea: cmp    WORD PTR [rdi+0x2],0x3
  003ef: jne    0x408
  003f5: cmp    esi,0x6
  003f8: jge    0x408
  003fe: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00403: jmp    0x426
  00408: sub    rsp,0x10
  0040c: movq   QWORD PTR [rsp],xmm3
  00411: movabs rax,0x55b5b00a3ef0
  0041b: call   rax
  0041d: movq   xmm3,QWORD PTR [rsp]
  00422: add    rsp,0x10
  00426: mov    QWORD PTR [rbp-0x40],rax
:00023 
:00025 %3 = %3 / %1                         [Float][Float]
  0042a: mov    rdi,QWORD PTR [rbp-0x40]
  0042e: test   rdi,0x1
  00435: jne    0x3ab45
  0043b: test   rdi,0x2
  00442: je     0x47e
  00448: xorps  xmm2,xmm2
  0044b: movabs rax,0x8000000000000002
  00455: cmp    rdi,rax
  00458: je     0x490
  0045e: mov    rax,rdi
  00461: sar    rax,0x3f
  00465: add    rax,0x2
  00469: and    rdi,0xfffffffffffffffc
  0046d: or     rdi,rax
  00470: rol    rdi,0x3d
  00474: movq   xmm2,rdi
  00479: jmp    0x490
  0047e: call   0xffff7098
  00483: test   rax,rax
  00486: je     0x3ab45
  0048c: movq   xmm2,xmm0
  00490: movq   rax,xmm3
  00495: test   rax,rax
  00498: je     0xffff7064
  0049e: divsd  xmm2,xmm3
:00026 _ = %2.call y=(%3; 1)                [Vec]
  004a2: movq   xmm0,xmm2
  004a6: call   0xffff71bc
  004ab: mov    QWORD PTR [rbp-0x40],rax
  004af: mov    rdi,QWORD PTR [rbp-0x38]
  004b3: test   rdi,0x7
  004ba: jne    0x3ab54
  004c0: cmp    DWORD PTR [rdi+0x4],0x28
  004c4: jne    0x3ab54
  004ca: cmp    DWORD PTR [rip+0xffffffffffff9c58],0x26        # 0xffffa129
  004d1: jne    0x3ab54
  004d7: mov    esi,DWORD PTR [rip+0x253]        # 0x730
  004dd: cmp    esi,0xffffffff
  004e0: je     0x3ab63
  004e6: cmp    WORD PTR [rdi+0x2],0x3
  004eb: jne    0x508
  004f1: cmp    esi,0x6
  004f4: jge    0x508
  004fa: mov    rax,QWORD PTR [rbp-0x40]
  004fe: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00503: jmp    0x549
  00508: sub    rsp,0x10
  0050c: movq   QWORD PTR [rsp],xmm2
  00511: movq   QWORD PTR [rsp+0x8],xmm3
  00517: mov    rdx,QWORD PTR [rbp-0x40]
  0051b: movabs rax,0x55b5b00a4170
  00525: call   rax
  00527: movq   xmm2,QWORD PTR [rsp]
  0052c: movq   xmm3,QWORD PTR [rsp+0x8]
  00532: add    rsp,0x10
  00536: movabs r13,0x55b5b07cee60
  00540: test   rax,rax
  00543: je     0xffff703f
:00027 
:00029 %3 = %2.call z()                     [Vec]
  00549: mov    rdi,QWORD PTR [rbp-0x38]
  0054d: test   rdi,0x7
  00554: jne    0x3abb1
  0055a: cmp    DWORD PTR [rdi+0x4],0x28
  0055e: jne    0x3abb1
  00564: cmp    DWORD PTR [rip+0xffffffffffff9bbe],0x26        # 0xffffa129
  0056b: jne    0x3abb1
  00571: mov    esi,DWORD PTR [rip+0x1c1]        # 0x738
  00577: cmp    esi,0xffffffff
  0057a: je     0x3abc0
  00580: cmp    WORD PTR [rdi+0x2],0x3
  00585: jne    0x59e
  0058b: cmp    esi,0x6
  0058e: jge    0x59e
  00594: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00599: jmp    0x5bc
  0059e: sub    rsp,0x10
  005a2: movq   QWORD PTR [rsp],xmm3
  005a7: movabs rax,0x55b5b00a3ef0
  005b1: call   rax
  005b3: movq   xmm3,QWORD PTR [rsp]
  005b8: add    rsp,0x10
  005bc: mov    QWORD PTR [rbp-0x40],rax
:00030 
:00032 %3 = %3 / %1                         [Float][Float]
  005c0: mov    rdi,QWORD PTR [rbp-0x40]
  005c4: test   rdi,0x1
  005cb: jne    0x3abfb
  005d1: test   rdi,0x2
  005d8: je     0x614
  005de: xorps  xmm2,xmm2
  005e1: movabs rax,0x8000000000000002
  005eb: cmp    rdi,rax
  005ee: je     0x626
  005f4: mov    rax,rdi
  005f7: sar    rax,0x3f
  005fb: add    rax,0x2
  005ff: and    rdi,0xfffffffffffffffc
  00603: or     rdi,rax
  00606: rol    rdi,0x3d
  0060a: movq   xmm2,rdi
  0060f: jmp    0x626
  00614: call   0xffff7098
  00619: test   rax,rax
  0061c: je     0x3abfb
  00622: movq   xmm2,xmm0
  00626: movq   rax,xmm3
  0062b: test   rax,rax
  0062e: je     0xffff7064
  00634: divsd  xmm2,xmm3
:00033 _ = %2.call z=(%3; 1)                [Vec]
  00638: movq   xmm0,xmm2
  0063c: call   0xffff71bc
  00641: mov    QWORD PTR [rbp-0x40],rax
  00645: mov    rdi,QWORD PTR [rbp-0x38]
  00649: test   rdi,0x7
  00650: jne    0x3ac0a
  00656: cmp    DWORD PTR [rdi+0x4],0x28
  0065a: jne    0x3ac0a
  00660: cmp    DWORD PTR [rip+0xffffffffffff9ac2],0x26        # 0xffffa129
  00667: jne    0x3ac0a
  0066d: mov    esi,DWORD PTR [rip+0xcd]        # 0x740
  00673: cmp    esi,0xffffffff
  00676: je     0x3ac19
  0067c: cmp    WORD PTR [rdi+0x2],0x3
  00681: jne    0x69e
  00687: cmp    esi,0x6
  0068a: jge    0x69e
  00690: mov    rax,QWORD PTR [rbp-0x40]
  00694: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00699: jmp    0x6df
  0069e: sub    rsp,0x10
  006a2: movq   QWORD PTR [rsp],xmm2
  006a7: movq   QWORD PTR [rsp+0x8],xmm3
  006ad: mov    rdx,QWORD PTR [rbp-0x40]
  006b1: movabs rax,0x55b5b00a4170
  006bb: call   rax
  006bd: movq   xmm2,QWORD PTR [rsp]
  006c2: movq   xmm3,QWORD PTR [rsp+0x8]
  006c8: add    rsp,0x10
  006cc: movabs r13,0x55b5b07ceed0
  006d6: test   rax,rax
  006d9: je     0xffff703f
:00034 
:00036 br =>:00037
  006df: jmp    0x3ac80
:00037 ret %2
  006e4: mov    rax,QWORD PTR [rbp-0x38]
  006e8: leave  
  006e9: ret    
==> start whole compile: vlength FuncId(67) self_class:Vec start:[00000] bytecode:0x55b5b0796260
<== finished compile. elapsed:29.1µs
offset:Pos(38712) code: 872 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x3a555
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [rbp-0x30],rax
  0001f: mov    QWORD PTR [rbp-0x38],rax
  00023: mov    QWORD PTR [rbp-0x40],rax
  00027: mov    QWORD PTR [rbp-0x48],rax
  0002b: mov    QWORD PTR [rbp-0x50],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x28]
  00033: test   rdi,0x7
  0003a: jne    0x3a564
  00040: cmp    DWORD PTR [rdi+0x4],0x28
  00044: jne    0x3a564
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %2 = const[Math]                     [Math]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffff99a7]        # 0xffff99f8
  00051: cmp    rax,QWORD PTR [rip+0x320]        # 0x378
  00058: jne    0x3a573
  0005e: mov    rax,QWORD PTR [rip+0x303]        # 0x368
  00065: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [rbp-0x28]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [rbp-0x40],rax
:00003 %4 = @x: Vec[IvarId(0)]
  00075: mov    rdi,QWORD PTR [rbp-0x28]
  00079: mov    rax,QWORD PTR [rdi+0x10]
  0007d: mov    QWORD PTR [rbp-0x48],rax
:00004 %3 = %3 * %4                         [Float][Float]
  00081: mov    rdi,QWORD PTR [rbp-0x40]
  00085: test   rdi,0x1
  0008c: jne    0x3a5b9
  00092: test   rdi,0x2
  00099: je     0xd5
  0009f: xorps  xmm2,xmm2
  000a2: movabs rax,0x8000000000000002
  000ac: cmp    rdi,rax
  000af: je     0xe7
  000b5: mov    rax,rdi
  000b8: sar    rax,0x3f
  000bc: add    rax,0x2
  000c0: and    rdi,0xfffffffffffffffc
  000c4: or     rdi,rax
  000c7: rol    rdi,0x3d
  000cb: movq   xmm2,rdi
  000d0: jmp    0xe7
  000d5: call   0xffff6954
  000da: test   rax,rax
  000dd: je     0x3a5b9
  000e3: movq   xmm2,xmm0
  000e7: mov    rdi,QWORD PTR [rbp-0x48]
  000eb: test   rdi,0x1
  000f2: jne    0x3a5c8
  000f8: test   rdi,0x2
  000ff: je     0x13b
  00105: xorps  xmm3,xmm3
  00108: movabs rax,0x8000000000000002
  00112: cmp    rdi,rax
  00115: je     0x14d
  0011b: mov    rax,rdi
  0011e: sar    rax,0x3f
  00122: add    rax,0x2
  00126: and    rdi,0xfffffffffffffffc
  0012a: or     rdi,rax
  0012d: rol    rdi,0x3d
  00131: movq   xmm3,rdi
  00136: jmp    0x14d
  0013b: call   0xffff6954
  00140: test   rax,rax
  00143: je     0x3a5c8
  00149: movq   xmm3,xmm0
  0014d: mulsd  xmm2,xmm3
:00005 %4 = @y: Vec[IvarId(1)]
  00151: mov    rdi,QWORD PTR [rbp-0x28]
  00155: mov    rax,QWORD PTR [rdi+0x18]
  00159: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  0015d: mov    rdi,QWORD PTR [rbp-0x28]
  00161: mov    rax,QWORD PTR [rdi+0x18]
  00165: mov    QWORD PTR [rbp-0x50],rax
:00007 %4 = %4 * %5                         [Float][Float]
  00169: mov    rdi,QWORD PTR [rbp-0x48]
  0016d: test   rdi,0x1
  00174: jne    0x3a5d7
  0017a: test   rdi,0x2
  00181: je     0x1bd
  00187: xorps  xmm3,xmm3
  0018a: movabs rax,0x8000000000000002
  00194: cmp    rdi,rax
  00197: je     0x1cf
  0019d: mov    rax,rdi
  001a0: sar    rax,0x3f
  001a4: add    rax,0x2
  001a8: and    rdi,0xfffffffffffffffc
  001ac: or     rdi,rax
  001af: rol    rdi,0x3d
  001b3: movq   xmm3,rdi
  001b8: jmp    0x1cf
  001bd: call   0xffff6954
  001c2: test   rax,rax
  001c5: je     0x3a5d7
  001cb: movq   xmm3,xmm0
  001cf: mov    rdi,QWORD PTR [rbp-0x50]
  001d3: test   rdi,0x1
  001da: jne    0x3a5f3
  001e0: test   rdi,0x2
  001e7: je     0x223
  001ed: xorps  xmm4,xmm4
  001f0: movabs rax,0x8000000000000002
  001fa: cmp    rdi,rax
  001fd: je     0x235
  00203: mov    rax,rdi
  00206: sar    rax,0x3f
  0020a: add    rax,0x2
  0020e: and    rdi,0xfffffffffffffffc
  00212: or     rdi,rax
  00215: rol    rdi,0x3d
  00219: movq   xmm4,rdi
  0021e: jmp    0x235
  00223: call   0xffff6954
  00228: test   rax,rax
  0022b: je     0x3a5f3
  00231: movq   xmm4,xmm0
  00235: mulsd  xmm3,xmm4
:00008 %3 = %3 + %4                         [Float][Float]
  00239: addsd  xmm2,xmm3
:00009 %4 = @z: Vec[IvarId(2)]
  0023d: mov    rdi,QWORD PTR [rbp-0x28]
  00241: mov    rax,QWORD PTR [rdi+0x20]
  00245: mov    QWORD PTR [rbp-0x48],rax
:00010 %5 = @z: Vec[IvarId(2)]
  00249: mov    rdi,QWORD PTR [rbp-0x28]
  0024d: mov    rax,QWORD PTR [rdi+0x20]
  00251: mov    QWORD PTR [rbp-0x50],rax
:00011 %4 = %4 * %5                         [Float][Float]
  00255: mov    rdi,QWORD PTR [rbp-0x48]
  00259: test   rdi,0x1
  00260: jne    0x3a60f
  00266: test   rdi,0x2
  0026d: je     0x2a9
  00273: xorps  xmm3,xmm3
  00276: movabs rax,0x8000000000000002
  00280: cmp    rdi,rax
  00283: je     0x2bb
  00289: mov    rax,rdi
  0028c: sar    rax,0x3f
  00290: add    rax,0x2
  00294: and    rdi,0xfffffffffffffffc
  00298: or     rdi,rax
  0029b: rol    rdi,0x3d
  0029f: movq   xmm3,rdi
  002a4: jmp    0x2bb
  002a9: call   0xffff6954
  002ae: test   rax,rax
  002b1: je     0x3a60f
  002b7: movq   xmm3,xmm0
  002bb: mov    rdi,QWORD PTR [rbp-0x50]
  002bf: test   rdi,0x1
  002c6: jne    0x3a62b
  002cc: test   rdi,0x2
  002d3: je     0x30f
  002d9: xorps  xmm4,xmm4
  002dc: movabs rax,0x8000000000000002
  002e6: cmp    rdi,rax
  002e9: je     0x321
  002ef: mov    rax,rdi
  002f2: sar    rax,0x3f
  002f6: add    rax,0x2
  002fa: and    rdi,0xfffffffffffffffc
  002fe: or     rdi,rax
  00301: rol    rdi,0x3d
  00305: movq   xmm4,rdi
  0030a: jmp    0x321
  0030f: call   0xffff6954
  00314: test   rax,rax
  00317: je     0x3a62b
  0031d: movq   xmm4,xmm0
  00321: mulsd  xmm3,xmm4
:00012 %3 = %3 + %4                         [Float][Float]
  00325: addsd  xmm2,xmm3
:00013 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
  00329: mov    rdi,QWORD PTR [rbp-0x38]
  0032d: test   rdi,0x7
  00334: jne    0x3a647
  0033a: cmp    DWORD PTR [rdi+0x4],0x21
  0033e: jne    0x3a647
  00344: cmp    DWORD PTR [rip+0xffffffffffff969a],0x26        # 0xffff99e5
  0034b: jne    0x3a647
  00351: sqrtsd xmm5,xmm2
:00014 
:00016 ret %1
  00355: movq   xmm0,xmm5
  00359: call   0xffff6a78
  0035e: mov    QWORD PTR [rbp-0x30],rax
  00362: mov    rax,QWORD PTR [rbp-0x30]
  00366: leave  
  00367: ret    
==> start whole compile: initialize FuncId(73) self_class:Ray start:[00000] bytecode:0x55b5b079d9f0
<== finished compile. elapsed:26.7µs
offset:Pos(39608) code: 147 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x3a2f0
  0001f: jmp    0x3a2f0
  00024: mov    eax,0x2
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x40]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    QWORD PTR [rbp-0x40],0x4
  00052: mov    rdi,QWORD PTR [rbp-0x28]
  00056: test   rdi,0x7
  0005d: jne    0x3a2ff
  00063: cmp    DWORD PTR [rdi+0x4],0x2e
  00067: jne    0x3a2ff
:00000 init_method reg:4 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  0006d: mov    rdi,QWORD PTR [rbp-0x28]
  00071: mov    rax,QWORD PTR [rbp-0x30]
  00075: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00079: mov    rdi,QWORD PTR [rbp-0x28]
  0007d: mov    rax,QWORD PTR [rbp-0x38]
  00081: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  00085: mov    rax,QWORD PTR [rbp-0x38]
  00089: mov    QWORD PTR [rbp-0x40],rax
:00004 ret %3
  0008d: mov    rax,QWORD PTR [rbp-0x40]
  00091: leave  
  00092: ret    
==> start whole compile: initialize FuncId(74) self_class:Isect start:[00000] bytecode:0x55b5b07bf110
<== finished compile. elapsed:29.3µs
offset:Pos(39755) code: 687 bytes  data: 174 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x3a27b
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [rbp-0x30],rax
  0001f: mov    QWORD PTR [rbp-0x38],rax
  00023: mov    QWORD PTR [rbp-0x40],rax
  00027: mov    QWORD PTR [rbp-0x48],rax
  0002b: mov    QWORD PTR [rbp-0x50],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x28]
  00033: test   rdi,0x7
  0003a: jne    0x3a28a
  00040: cmp    DWORD PTR [rdi+0x4],0x30
  00044: jne    0x3a28a
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  0004a: movq   xmm2,QWORD PTR [rip+0x263]        # 0x2b5
  00052: movabs rax,0xb18968000000002
  0005c: mov    QWORD PTR [rbp-0x30],rax
:00002 @t: Isect[IvarId(0)] = %1
  00060: mov    rdi,QWORD PTR [rbp-0x28]
  00064: mov    rax,QWORD PTR [rbp-0x30]
  00068: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  0006c: mov    rax,0x14
  00073: mov    QWORD PTR [rbp-0x30],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00077: mov    rdi,QWORD PTR [rbp-0x28]
  0007b: mov    rax,QWORD PTR [rbp-0x30]
  0007f: mov    QWORD PTR [rdi+0x18],rax
:00005 %2 = const[Vec]                      [Vec]
  00083: mov    rax,QWORD PTR [rip+0xffffffffffff955b]        # 0xffff95e5
  0008a: cmp    rax,QWORD PTR [rip+0x244]        # 0x2d5
  00091: jne    0x3a299
  00097: mov    rax,QWORD PTR [rip+0x227]        # 0x2c5
  0009e: mov    QWORD PTR [rbp-0x38],rax
:00006 %3 = literal[0.0]
  000a2: movq   xmm2,QWORD PTR [rip+0x23b]        # 0x2e5
  000aa: movabs rax,0x8000000000000002
  000b4: mov    QWORD PTR [rbp-0x40],rax
:00007 %4 = literal[0.0]
  000b8: movq   xmm3,QWORD PTR [rip+0x235]        # 0x2f5
  000c0: movabs rax,0x8000000000000002
  000ca: mov    QWORD PTR [rbp-0x48],rax
:00008 %5 = literal[0.0]
  000ce: movq   xmm4,QWORD PTR [rip+0x22f]        # 0x305
  000d6: movabs rax,0x8000000000000002
  000e0: mov    QWORD PTR [rbp-0x50],rax
:00009 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  000e4: mov    rdi,QWORD PTR [rbp-0x38]
  000e8: test   rdi,0x7
  000ef: jne    0x3a2df
  000f5: cmp    DWORD PTR [rdi+0x4],0x29
  000f9: jne    0x3a2df
  000ff: cmp    DWORD PTR [rip+0xffffffffffff94cc],0x26        # 0xffff95d2
  00106: jne    0x3a2df
  0010c: mov    r9,0x0
  00113: sub    rsp,0x20
  00117: movq   QWORD PTR [rsp],xmm2
  0011c: movq   QWORD PTR [rsp+0x8],xmm3
  00122: movq   QWORD PTR [rsp+0x10],xmm4
  00128: mov    rdx,rdi
  0012b: mov    QWORD PTR [rsp-0x20],0x0
  00134: mov    QWORD PTR [rsp-0x38],rcx
  00139: mov    rax,QWORD PTR [rbx]
  0013c: lea    rsi,[rsp-0x18]
  00141: mov    QWORD PTR [rsi],rax
  00144: mov    QWORD PTR [rbx],rsi
  00147: lea    rcx,[rbp-0x40]
  0014b: mov    r8,0x3
  00152: call   0x3a2ee
  00157: lea    rdi,[rbp-0x8]
  0015b: mov    QWORD PTR [rbx],rdi
  0015e: movq   xmm2,QWORD PTR [rsp]
  00163: movq   xmm3,QWORD PTR [rsp+0x8]
  00169: movq   xmm4,QWORD PTR [rsp+0x10]
  0016f: add    rsp,0x20
  00173: movabs r13,0x55b5b07bf1c0
  0017d: test   rax,rax
  00180: je     0xffff64e8
  00186: mov    QWORD PTR [rbp-0x30],rax
:00010 
:00012 @pl: Isect[IvarId(2)] = %1
  0018a: mov    rdi,QWORD PTR [rbp-0x28]
  0018e: mov    rax,QWORD PTR [rbp-0x30]
  00192: mov    QWORD PTR [rdi+0x20],rax
:00013 %2 = const[Vec]                      [Vec]
  00196: mov    rax,QWORD PTR [rip+0xffffffffffff9448]        # 0xffff95e5
  0019d: cmp    rax,QWORD PTR [rip+0x181]        # 0x325
  001a4: jne    0x3a320
  001aa: mov    rax,QWORD PTR [rip+0x164]        # 0x315
  001b1: mov    QWORD PTR [rbp-0x38],rax
:00014 %3 = literal[0.0]
  001b5: movq   xmm2,QWORD PTR [rip+0x178]        # 0x335
  001bd: movabs rax,0x8000000000000002
  001c7: mov    QWORD PTR [rbp-0x40],rax
:00015 %4 = literal[0.0]
  001cb: movq   xmm3,QWORD PTR [rip+0x172]        # 0x345
  001d3: movabs rax,0x8000000000000002
  001dd: mov    QWORD PTR [rbp-0x48],rax
:00016 %5 = literal[0.0]
  001e1: movq   xmm4,QWORD PTR [rip+0x16c]        # 0x355
  001e9: movabs rax,0x8000000000000002
  001f3: mov    QWORD PTR [rbp-0x50],rax
:00017 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  001f7: mov    rdi,QWORD PTR [rbp-0x38]
  001fb: test   rdi,0x7
  00202: jne    0x3a390
  00208: cmp    DWORD PTR [rdi+0x4],0x29
  0020c: jne    0x3a390
  00212: cmp    DWORD PTR [rip+0xffffffffffff93b9],0x26        # 0xffff95d2
  00219: jne    0x3a390
  0021f: mov    r9,0x0
  00226: sub    rsp,0x20
  0022a: movq   QWORD PTR [rsp],xmm2
  0022f: movq   QWORD PTR [rsp+0x8],xmm3
  00235: movq   QWORD PTR [rsp+0x10],xmm4
  0023b: mov    rdx,rdi
  0023e: mov    QWORD PTR [rsp-0x20],0x0
  00247: mov    QWORD PTR [rsp-0x38],rcx
  0024c: mov    rax,QWORD PTR [rbx]
  0024f: lea    rsi,[rsp-0x18]
  00254: mov    QWORD PTR [rsi],rax
  00257: mov    QWORD PTR [rbx],rsi
  0025a: lea    rcx,[rbp-0x40]
  0025e: mov    r8,0x3
  00265: call   0x3a39f
  0026a: lea    rdi,[rbp-0x8]
  0026e: mov    QWORD PTR [rbx],rdi
  00271: movq   xmm2,QWORD PTR [rsp]
  00276: movq   xmm3,QWORD PTR [rsp+0x8]
  0027c: movq   xmm4,QWORD PTR [rsp+0x10]
  00282: add    rsp,0x20
  00286: movabs r13,0x55b5b07bf240
  00290: test   rax,rax
  00293: je     0xffff64e8
  00299: mov    QWORD PTR [rbp-0x30],rax
:00018 
:00020 @n: Isect[IvarId(3)] = %1
  0029d: mov    rdi,QWORD PTR [rbp-0x28]
  002a1: mov    rax,QWORD PTR [rbp-0x30]
  002a5: mov    QWORD PTR [rdi+0x28],rax
:00021 ret %1
  002a9: mov    rax,QWORD PTR [rbp-0x30]
  002ad: leave  
  002ae: ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55b5b07c4d60
<== finished compile. elapsed:140.1µs
offset:Pos(40616) code: 6755 bytes  data: 349 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x3a074
  00022:    	jmp    0x3a074
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x3a083
  00097:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0009b:    	jne    0x3a083
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a5:    	mov    rax,QWORD PTR [rdi+0x10]
  000a9:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  000ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  000b1:    	mov    rax,QWORD PTR [rdi+0x18]
  000b5:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  000bd: 00 	test   rdi,0x7
  000c4:    	jne    0x3a092
  000ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  000ce:    	jne    0x3a092
  000d4: 26 	cmp    DWORD PTR [rip+0xffffffffffff919a],0x26        # 0xffff9275
  000db:    	jne    0x3a092
  000e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000ea:    	mov    QWORD PTR [rsp-0x38],rcx
  000ef:    	mov    rax,QWORD PTR [rbx]
  000f2:    	lea    rsi,[rsp-0x18]
  000f7:    	mov    QWORD PTR [rsi],rax
  000fa:    	mov    QWORD PTR [rbx],rsi
  000fd:    	mov    rax,QWORD PTR [rbp-0x60]
  00101:    	mov    QWORD PTR [rsp-0x38],rax
  00106: 00 	mov    rdi,0x1
  0010d:    	lea    r8,[rsp-0x40]
  00112:    	mov    rax,QWORD PTR [rbp-0x68]
  00116:    	mov    QWORD PTR [r8],rax
  00119:    	sub    r8,0x8
  0011d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00126: 05 	movabs rax,0x1000500000042
  00130:    	mov    QWORD PTR [rsp-0x28],rax
  00135: b5 	movabs r13,0x55b5b07ddec0
  0013f:    	call   0xffff9fe6
  00144:    	lea    rdi,[rbp-0x8]
  00148:    	mov    QWORD PTR [rbx],rdi
  0014b: b5 	movabs r13,0x55b5b07c4db0
  00155:    	test   rax,rax
  00158:    	je     0xffff618b
  0015e:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00162:    	mov    rdi,QWORD PTR [rbp-0x40]
  00166: 00 	test   rdi,0x1
  0016d:    	jne    0x3a0a1
  00173: 00 	test   rdi,0x2
  0017a:    	je     0x1b6
  00180:    	xorps  xmm2,xmm2
  00183: 00 	movabs rax,0x8000000000000002
  0018d:    	cmp    rdi,rax
  00190:    	je     0x1c8
  00196:    	mov    rax,rdi
  00199:    	sar    rax,0x3f
  0019d:    	add    rax,0x2
  001a1:    	and    rdi,0xfffffffffffffffc
  001a5:    	or     rdi,rax
  001a8:    	rol    rdi,0x3d
  001ac:    	movq   xmm2,rdi
  001b1:    	jmp    0x1c8
  001b6:    	call   0xffff61e4
  001bb:    	test   rax,rax
  001be:    	je     0x3a0a1
  001c4:    	movq   xmm2,xmm0
  001c8: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1899]        # 0x1a68
:00007 %7 = %1.call dir()                   [Ray]
  001cf:    	mov    rdi,QWORD PTR [rbp-0x30]
  001d3: 00 	test   rdi,0x7
  001da:    	jne    0x3a0b0
  001e0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001e4:    	jne    0x3a0b0
  001ea: 26 	cmp    DWORD PTR [rip+0xffffffffffff9084],0x26        # 0xffff9275
  001f1:    	jne    0x3a0b0
  001f7:    	mov    esi,DWORD PTR [rip+0x1877]        # 0x1a74
  001fd:    	cmp    esi,0xffffffff
  00200:    	je     0x3a0cc
  00206:    	cmp    WORD PTR [rdi+0x2],0x3
  0020b:    	jne    0x224
  00211:    	cmp    esi,0x6
  00214:    	jge    0x224
  0021a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0021f:    	jmp    0x242
  00224:    	sub    rsp,0x10
  00228:    	movq   QWORD PTR [rsp],xmm2
  0022d: b5 	movabs rax,0x55b5b00a3ef0
  00237:    	call   rax
  00239:    	movq   xmm2,QWORD PTR [rsp]
  0023e:    	add    rsp,0x10
  00242:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00246:    	mov    rdi,QWORD PTR [rbp-0x28]
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x3a107
  00263:    	cmp    DWORD PTR [rdi+0x4],0x28
  00267:    	jne    0x3a107
  0026d: 26 	cmp    DWORD PTR [rip+0xffffffffffff9001],0x26        # 0xffff9275
  00274:    	jne    0x3a107
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028c:    	mov    QWORD PTR [rsp-0x38],rcx
  00291:    	mov    rax,QWORD PTR [rbx]
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rsi],rax
  0029c:    	mov    QWORD PTR [rbx],rsi
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	lea    r8,[rsp-0x40]
  002b4:    	mov    rax,QWORD PTR [rbp-0x68]
  002b8:    	mov    QWORD PTR [r8],rax
  002bb:    	sub    r8,0x8
  002bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c8: 05 	movabs rax,0x1000500000042
  002d2:    	mov    QWORD PTR [rsp-0x28],rax
  002d7: b5 	movabs r13,0x55b5b07ddec0
  002e1:    	call   0xffff9fe6
  002e6:    	lea    rdi,[rbp-0x8]
  002ea:    	mov    QWORD PTR [rbx],rdi
  002ed:    	movq   xmm2,QWORD PTR [rsp]
  002f2:    	add    rsp,0x10
  002f6: b5 	movabs r13,0x55b5b07c4e30
  00300:    	test   rax,rax
  00303:    	je     0xffff618b
  00309:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  0030d:    	mov    rax,QWORD PTR [rbp-0x48]
  00311:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  00315: 00 	movq   xmm3,QWORD PTR [rip+0x175b]        # 0x1a78
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0032b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0032f: 00 	test   rdi,0x1
  00336:    	jne    0x3a123
  0033c: 00 	test   rdi,0x2
  00343:    	je     0x37f
  00349:    	xorps  xmm4,xmm4
  0034c: 00 	movabs rax,0x8000000000000002
  00356:    	cmp    rdi,rax
  00359:    	je     0x391
  0035f:    	mov    rax,rdi
  00362:    	sar    rax,0x3f
  00366:    	add    rax,0x2
  0036a:    	and    rdi,0xfffffffffffffffc
  0036e:    	or     rdi,rax
  00371:    	rol    rdi,0x3d
  00375:    	movq   xmm4,rdi
  0037a:    	jmp    0x391
  0037f:    	call   0xffff61e4
  00384:    	test   rax,rax
  00387:    	je     0x3a123
  0038d:    	movq   xmm4,xmm0
  00391:    	ucomisd xmm4,xmm3
  00395:    	jae    0x3a18a
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  0039b: 01 	sub    DWORD PTR [rip+0x16de],0x1        # 0x1a80
  003a2:    	je     0x3a168
  003a8:    	movq   xmm0,xmm4
  003ac:    	call   0xffff6308
  003b1:    	mov    QWORD PTR [rbp-0x50],rax
  003b5:    	sub    rsp,0x20
  003b9:    	movq   QWORD PTR [rsp],xmm2
  003be:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c4:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ca:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ce:    	mov    rdx,rdi
  003d1:    	mov    rdi,rbx
  003d4:    	mov    rsi,r12
  003d7: b5 	movabs rax,0x55b5b00e59e0
  003e1:    	call   rax
  003e3:    	movq   xmm2,QWORD PTR [rsp]
  003e8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003ee:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003f4:    	add    rsp,0x20
  003f8: b5 	movabs r13,0x55b5b07c4ea0
  00402:    	test   rax,rax
  00405:    	je     0xffff618b
  0040b:    	mov    QWORD PTR [rbp-0x50],rax
:00020 br =>:00021
  0040f:    	jmp    0x3a1b0
:00021 %7 = literal[1e-17]
  00414: 00 	movq   xmm3,QWORD PTR [rip+0x166c]        # 0x1a88
  0041c: aa 	movabs rax,0xe33877aa3236a4ba
  00426:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0042a:    	mov    rdi,QWORD PTR [rbp-0x50]
  0042e: 00 	test   rdi,0x1
  00435:    	jne    0x3a1d6
  0043b: 00 	test   rdi,0x2
  00442:    	je     0x47e
  00448:    	xorps  xmm5,xmm5
  0044b: 00 	movabs rax,0x8000000000000002
  00455:    	cmp    rdi,rax
  00458:    	je     0x490
  0045e:    	mov    rax,rdi
  00461:    	sar    rax,0x3f
  00465:    	add    rax,0x2
  00469:    	and    rdi,0xfffffffffffffffc
  0046d:    	or     rdi,rax
  00470:    	rol    rdi,0x3d
  00474:    	movq   xmm5,rdi
  00479:    	jmp    0x490
  0047e:    	call   0xffff61e4
  00483:    	test   rax,rax
  00486:    	je     0x3a1d6
  0048c:    	movq   xmm5,xmm0
  00490:    	ucomisd xmm5,xmm3
  00494:    	jae    0x4a8
:00024 %7 = nil
  0049a: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  004a2:    	mov    rax,QWORD PTR [rbp-0x60]
  004a6:    	leave  
  004a7:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  004a8:    	mov    rdi,QWORD PTR [rbp-0x30]
  004ac: 00 	test   rdi,0x7
  004b3:    	jne    0x3a1f2
  004b9:    	cmp    DWORD PTR [rdi+0x4],0x2e
  004bd:    	jne    0x3a1f2
  004c3: 26 	cmp    DWORD PTR [rip+0xffffffffffff8dab],0x26        # 0xffff9275
  004ca:    	jne    0x3a1f2
  004d0:    	mov    esi,DWORD PTR [rip+0x15be]        # 0x1a94
  004d6:    	cmp    esi,0xffffffff
  004d9:    	je     0x3a20e
  004df:    	cmp    WORD PTR [rdi+0x2],0x3
  004e4:    	jne    0x4fd
  004ea:    	cmp    esi,0x6
  004ed:    	jge    0x4fd
  004f3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004f8:    	jmp    0x53f
  004fd:    	sub    rsp,0x20
  00501:    	movq   QWORD PTR [rsp],xmm2
  00506:    	movq   QWORD PTR [rsp+0x8],xmm3
  0050c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00512:    	movq   QWORD PTR [rsp+0x18],xmm5
  00518: b5 	movabs rax,0x55b5b00a3ef0
  00522:    	call   rax
  00524:    	movq   xmm2,QWORD PTR [rsp]
  00529:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0052f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00535:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0053b:    	add    rsp,0x20
  0053f:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  00543:    	mov    rdi,QWORD PTR [rbp-0x28]
  00547:    	mov    rax,QWORD PTR [rdi+0x18]
  0054b:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  0054f:    	mov    rdi,QWORD PTR [rbp-0x68]
  00553: 00 	test   rdi,0x7
  0055a:    	jne    0x3a26d
  00560:    	cmp    DWORD PTR [rdi+0x4],0x28
  00564:    	jne    0x3a26d
  0056a: 26 	cmp    DWORD PTR [rip+0xffffffffffff8d04],0x26        # 0xffff9275
  00571:    	jne    0x3a26d
  00577:    	sub    rsp,0x20
  0057b:    	movq   QWORD PTR [rsp],xmm2
  00580:    	movq   QWORD PTR [rsp+0x8],xmm4
  00586:    	movq   QWORD PTR [rsp+0x10],xmm5
  0058c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00595:    	mov    QWORD PTR [rsp-0x38],rcx
  0059a:    	mov    rax,QWORD PTR [rbx]
  0059d:    	lea    rsi,[rsp-0x18]
  005a2:    	mov    QWORD PTR [rsi],rax
  005a5:    	mov    QWORD PTR [rbx],rsi
  005a8:    	mov    rax,QWORD PTR [rbp-0x68]
  005ac:    	mov    QWORD PTR [rsp-0x38],rax
  005b1: 00 	mov    rdi,0x1
  005b8:    	lea    r8,[rsp-0x40]
  005bd:    	mov    rax,QWORD PTR [rbp-0x70]
  005c1:    	mov    QWORD PTR [r8],rax
  005c4:    	sub    r8,0x8
  005c8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005d1: 05 	movabs rax,0x1000500000042
  005db:    	mov    QWORD PTR [rsp-0x28],rax
  005e0: b5 	movabs r13,0x55b5b07ddec0
  005ea:    	call   0xffff9fe6
  005ef:    	lea    rdi,[rbp-0x8]
  005f3:    	mov    QWORD PTR [rbx],rdi
  005f6:    	movq   xmm2,QWORD PTR [rsp]
  005fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00601:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00607:    	add    rsp,0x20
  0060b: b5 	movabs r13,0x55b5b07c4f70
  00615:    	test   rax,rax
  00618:    	je     0xffff618b
  0061e:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00622:    	mov    rdi,QWORD PTR [rbp-0x60]
  00626: 00 	test   rdi,0x1
  0062d:    	jne    0x3a289
  00633: 00 	test   rdi,0x2
  0063a:    	je     0x676
  00640:    	xorps  xmm3,xmm3
  00643: 00 	movabs rax,0x8000000000000002
  0064d:    	cmp    rdi,rax
  00650:    	je     0x688
  00656:    	mov    rax,rdi
  00659:    	sar    rax,0x3f
  0065d:    	add    rax,0x2
  00661:    	and    rdi,0xfffffffffffffffc
  00665:    	or     rdi,rax
  00668:    	rol    rdi,0x3d
  0066c:    	movq   xmm3,rdi
  00671:    	jmp    0x688
  00676:    	call   0xffff61e4
  0067b:    	test   rax,rax
  0067e:    	je     0x3a289
  00684:    	movq   xmm3,xmm0
  00688:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0068c: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1405]        # 0x1a98
:00036 %6 = %7 / %4                         [Float][Float]
  00693:    	movq   xmm6,xmm3
  00697:    	movq   rax,xmm4
  0069c:    	test   rax,rax
  0069f:    	je     0xffff61b0
  006a5:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  006a9: 00 	movq   xmm3,QWORD PTR [rip+0x13f7]        # 0x1aa8
  006b1: 00 	movabs rax,0x8000000000000002
  006bb:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  006bf:    	ucomisd xmm6,xmm3
  006c3:    	jbe    0x3b202
:00040 %7 = %2.call t()                     [<INVALID>]
  006c9: 01 	sub    DWORD PTR [rip+0x13e0],0x1        # 0x1ab0
  006d0:    	je     0x3a2ce
  006d6:    	sub    rsp,0x20
  006da:    	movq   QWORD PTR [rsp],xmm2
  006df:    	movq   QWORD PTR [rsp+0x8],xmm4
  006e5:    	movq   QWORD PTR [rsp+0x10],xmm5
  006eb:    	movq   QWORD PTR [rsp+0x18],xmm6
  006f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  006f5: b5 	movabs rax,0x55b5b009e670
  006ff:    	call   rax
  00701:    	mov    r15d,eax
  00704: 00 	cmp    r15d,DWORD PTR [rip+0x13ad]        # 0x1ab8
  0070b:    	jne    0x3a2f0
  00711:    	mov    eax,DWORD PTR [rip+0xffffffffffff8b5e]        # 0xffff9275
  00717:    	cmp    DWORD PTR [rip+0x1397],eax        # 0x1ab4
  0071d:    	jne    0x3a2f0
  00723: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0072c:    	mov    QWORD PTR [rsp-0x38],rcx
  00731:    	mov    rax,QWORD PTR [rbx]
  00734:    	lea    rsi,[rsp-0x18]
  00739:    	mov    QWORD PTR [rsi],rax
  0073c:    	mov    QWORD PTR [rbx],rsi
  0073f:    	mov    rax,QWORD PTR [rbp-0x38]
  00743:    	mov    QWORD PTR [rsp-0x38],rax
  00748: 00 	mov    rdi,0x0
  0074f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00758: 00 	movabs rax,0x0
  00762:    	mov    QWORD PTR [rsp-0x28],rax
  00767: 00 	movabs r13,0x0
  00771:    	call   0xffff6158
  00776:    	lea    rdi,[rbp-0x8]
  0077a:    	mov    QWORD PTR [rbx],rdi
  0077d:    	movq   xmm2,QWORD PTR [rsp]
  00782:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00788:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0078e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00794:    	add    rsp,0x20
  00798:    	test   rax,rax
  0079b:    	je     0x3a35c
  007a1:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  007a5:    	movq   xmm0,xmm6
  007a9:    	call   0xffff6308
  007ae:    	mov    QWORD PTR [rbp-0x58],rax
  007b2:    	mov    rdi,QWORD PTR [rbp-0x58]
  007b6:    	mov    rsi,QWORD PTR [rbp-0x60]
  007ba: 00 	test   rdi,0x1
  007c1:    	je     0x3a36b
  007c7: 00 	test   rsi,0x1
  007ce:    	je     0x3a36b
  007d4:    	cmp    rdi,rsi
  007d7:    	jge    0x3b235
:00045 %7 = literal[true]
  007dd: 00 	mov    rax,0x1c
  007e4:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007e8: 01 	sub    DWORD PTR [rip+0x12cd],0x1        # 0x1abc
  007ef:    	je     0x3a3dc
  007f5:    	sub    rsp,0x20
  007f9:    	movq   QWORD PTR [rsp],xmm2
  007fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  00804:    	movq   QWORD PTR [rsp+0x10],xmm5
  0080a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00810:    	mov    rdi,QWORD PTR [rbp-0x38]
  00814: b5 	movabs rax,0x55b5b009e670
  0081e:    	call   rax
  00820:    	mov    r15d,eax
  00823: 00 	cmp    r15d,DWORD PTR [rip+0x129a]        # 0x1ac4
  0082a:    	jne    0x3a3fe
  00830:    	mov    eax,DWORD PTR [rip+0xffffffffffff8a3f]        # 0xffff9275
  00836:    	cmp    DWORD PTR [rip+0x1284],eax        # 0x1ac0
  0083c:    	jne    0x3a3fe
  00842: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0084b:    	mov    QWORD PTR [rsp-0x38],rcx
  00850:    	mov    rax,QWORD PTR [rbx]
  00853:    	lea    rsi,[rsp-0x18]
  00858:    	mov    QWORD PTR [rsi],rax
  0085b:    	mov    QWORD PTR [rbx],rsi
  0085e:    	mov    rax,QWORD PTR [rbp-0x38]
  00862:    	mov    QWORD PTR [rsp-0x38],rax
  00867: 00 	mov    rdi,0x1
  0086e:    	lea    r8,[rsp-0x40]
  00873:    	mov    rax,QWORD PTR [rbp-0x60]
  00877:    	mov    QWORD PTR [r8],rax
  0087a:    	sub    r8,0x8
  0087e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00887: 00 	movabs rax,0x0
  00891:    	mov    QWORD PTR [rsp-0x28],rax
  00896: 00 	movabs r13,0x0
  008a0:    	call   0xffff6158
  008a5:    	lea    rdi,[rbp-0x8]
  008a9:    	mov    QWORD PTR [rbx],rdi
  008ac:    	movq   xmm2,QWORD PTR [rsp]
  008b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008b7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008bd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008c3:    	add    rsp,0x20
  008c7:    	test   rax,rax
  008ca:    	je     0x3a46a
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  008d0: 01 	sub    DWORD PTR [rip+0x11f1],0x1        # 0x1ac8
  008d7:    	je     0x3a495
  008dd:    	sub    rsp,0x20
  008e1:    	movq   QWORD PTR [rsp],xmm2
  008e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  008ec:    	movq   QWORD PTR [rsp+0x10],xmm5
  008f2:    	movq   QWORD PTR [rsp+0x18],xmm6
  008f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  008fc: b5 	movabs rax,0x55b5b009e670
  00906:    	call   rax
  00908:    	mov    r15d,eax
  0090b: 00 	cmp    r15d,DWORD PTR [rip+0x11be]        # 0x1ad0
  00912:    	jne    0x3a4b7
  00918:    	mov    eax,DWORD PTR [rip+0xffffffffffff8957]        # 0xffff9275
  0091e:    	cmp    DWORD PTR [rip+0x11a8],eax        # 0x1acc
  00924:    	jne    0x3a4b7
  0092a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00933:    	mov    QWORD PTR [rsp-0x38],rcx
  00938:    	mov    rax,QWORD PTR [rbx]
  0093b:    	lea    rsi,[rsp-0x18]
  00940:    	mov    QWORD PTR [rsi],rax
  00943:    	mov    QWORD PTR [rbx],rsi
  00946:    	mov    rax,QWORD PTR [rbp-0x38]
  0094a:    	mov    QWORD PTR [rsp-0x38],rax
  0094f: 00 	mov    rdi,0x1
  00956:    	lea    r8,[rsp-0x40]
  0095b:    	mov    rax,QWORD PTR [rbp-0x58]
  0095f:    	mov    QWORD PTR [r8],rax
  00962:    	sub    r8,0x8
  00966: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0096f: 00 	movabs rax,0x0
  00979:    	mov    QWORD PTR [rsp-0x28],rax
  0097e: 00 	movabs r13,0x0
  00988:    	call   0xffff6158
  0098d:    	lea    rdi,[rbp-0x8]
  00991:    	mov    QWORD PTR [rbx],rdi
  00994:    	movq   xmm2,QWORD PTR [rsp]
  00999:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0099f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009a5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009ab:    	add    rsp,0x20
  009af:    	test   rax,rax
  009b2:    	je     0x3a523
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  009b8:    	mov    rdi,QWORD PTR [rbp-0x28]
  009bc:    	sub    rsp,0x20
  009c0:    	movq   QWORD PTR [rsp],xmm2
  009c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009cb:    	movq   QWORD PTR [rsp+0x10],xmm5
  009d1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009d7: 00 	mov    rsi,0x97
  009de:    	mov    rdx,r12
  009e1: b5 	movabs rax,0x55b5b0091cc0
  009eb:    	call   rax
  009ed:    	movq   xmm2,QWORD PTR [rsp]
  009f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009f8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009fe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a04:    	add    rsp,0x20
  00a08:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00a0c: 01 	sub    DWORD PTR [rip+0x10c1],0x1        # 0x1ad4
  00a13:    	je     0x3a54e
  00a19:    	sub    rsp,0x20
  00a1d:    	movq   QWORD PTR [rsp],xmm2
  00a22:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a28:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a2e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a34:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a38: b5 	movabs rax,0x55b5b009e670
  00a42:    	call   rax
  00a44:    	mov    r15d,eax
  00a47: 00 	cmp    r15d,DWORD PTR [rip+0x108e]        # 0x1adc
  00a4e:    	jne    0x3a570
  00a54:    	mov    eax,DWORD PTR [rip+0xffffffffffff881b]        # 0xffff9275
  00a5a:    	cmp    DWORD PTR [rip+0x1078],eax        # 0x1ad8
  00a60:    	jne    0x3a570
  00a66: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a6f:    	mov    QWORD PTR [rsp-0x38],rcx
  00a74:    	mov    rax,QWORD PTR [rbx]
  00a77:    	lea    rsi,[rsp-0x18]
  00a7c:    	mov    QWORD PTR [rsi],rax
  00a7f:    	mov    QWORD PTR [rbx],rsi
  00a82:    	mov    rax,QWORD PTR [rbp-0x38]
  00a86:    	mov    QWORD PTR [rsp-0x38],rax
  00a8b: 00 	mov    rdi,0x1
  00a92:    	lea    r8,[rsp-0x40]
  00a97:    	mov    rax,QWORD PTR [rbp-0x60]
  00a9b:    	mov    QWORD PTR [r8],rax
  00a9e:    	sub    r8,0x8
  00aa2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aab: 00 	movabs rax,0x0
  00ab5:    	mov    QWORD PTR [rsp-0x28],rax
  00aba: 00 	movabs r13,0x0
  00ac4:    	call   0xffff6158
  00ac9:    	lea    rdi,[rbp-0x8]
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0:    	movq   xmm2,QWORD PTR [rsp]
  00ad5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00adb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ae1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae7:    	add    rsp,0x20
  00aeb:    	test   rax,rax
  00aee:    	je     0x3a5dc
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00af4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff878d]        # 0xffff9288
  00afb: 00 	cmp    rax,QWORD PTR [rip+0xff6]        # 0x1af8
  00b02:    	jne    0x3a5eb
  00b08: 00 	mov    rax,QWORD PTR [rip+0xfd9]        # 0x1ae8
  00b0f:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00b13: 01 	sub    DWORD PTR [rip+0xfe6],0x1        # 0x1b00
  00b1a:    	je     0x3a683
  00b20:    	sub    rsp,0x20
  00b24:    	movq   QWORD PTR [rsp],xmm2
  00b29:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b2f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b35:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b3b:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b3f: b5 	movabs rax,0x55b5b009e670
  00b49:    	call   rax
  00b4b:    	mov    r15d,eax
  00b4e: 00 	cmp    r15d,DWORD PTR [rip+0xfb3]        # 0x1b08
  00b55:    	jne    0x3a6a5
  00b5b:    	mov    eax,DWORD PTR [rip+0xffffffffffff8714]        # 0xffff9275
  00b61:    	cmp    DWORD PTR [rip+0xf9d],eax        # 0x1b04
  00b67:    	jne    0x3a6a5
  00b6d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b76:    	mov    QWORD PTR [rsp-0x38],rcx
  00b7b:    	mov    rax,QWORD PTR [rbx]
  00b7e:    	lea    rsi,[rsp-0x18]
  00b83:    	mov    QWORD PTR [rsi],rax
  00b86:    	mov    QWORD PTR [rbx],rsi
  00b89:    	mov    rax,QWORD PTR [rbp-0x30]
  00b8d:    	mov    QWORD PTR [rsp-0x38],rax
  00b92: 00 	mov    rdi,0x0
  00b99: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ba2: 00 	movabs rax,0x0
  00bac:    	mov    QWORD PTR [rsp-0x28],rax
  00bb1: 00 	movabs r13,0x0
  00bbb:    	call   0xffff6158
  00bc0:    	lea    rdi,[rbp-0x8]
  00bc4:    	mov    QWORD PTR [rbx],rdi
  00bc7:    	movq   xmm2,QWORD PTR [rsp]
  00bcc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bd2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bd8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bde:    	add    rsp,0x20
  00be2:    	test   rax,rax
  00be5:    	je     0x3a711
  00beb:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bef: 01 	sub    DWORD PTR [rip+0xf16],0x1        # 0x1b0c
  00bf6:    	je     0x3a73c
  00bfc:    	sub    rsp,0x20
  00c00:    	movq   QWORD PTR [rsp],xmm2
  00c05:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c0b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c11:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c17:    	mov    rdi,QWORD PTR [rbp-0x78]
  00c1b: b5 	movabs rax,0x55b5b009e670
  00c25:    	call   rax
  00c27:    	mov    r15d,eax
  00c2a: 00 	cmp    r15d,DWORD PTR [rip+0xee3]        # 0x1b14
  00c31:    	jne    0x3a75e
  00c37:    	mov    eax,DWORD PTR [rip+0xffffffffffff8638]        # 0xffff9275
  00c3d:    	cmp    DWORD PTR [rip+0xecd],eax        # 0x1b10
  00c43:    	jne    0x3a75e
  00c49: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c52:    	mov    QWORD PTR [rsp-0x38],rcx
  00c57:    	mov    rax,QWORD PTR [rbx]
  00c5a:    	lea    rsi,[rsp-0x18]
  00c5f:    	mov    QWORD PTR [rsi],rax
  00c62:    	mov    QWORD PTR [rbx],rsi
  00c65:    	mov    rax,QWORD PTR [rbp-0x78]
  00c69:    	mov    QWORD PTR [rsp-0x38],rax
  00c6e: 00 	mov    rdi,0x0
  00c75: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c7e: 00 	movabs rax,0x0
  00c88:    	mov    QWORD PTR [rsp-0x28],rax
  00c8d: 00 	movabs r13,0x0
  00c97:    	call   0xffff6158
  00c9c:    	lea    rdi,[rbp-0x8]
  00ca0:    	mov    QWORD PTR [rbx],rdi
  00ca3:    	movq   xmm2,QWORD PTR [rsp]
  00ca8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cae:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00cb4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cba:    	add    rsp,0x20
  00cbe:    	test   rax,rax
  00cc1:    	je     0x3a7ca
  00cc7:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00ccb: 01 	sub    DWORD PTR [rip+0xe46],0x1        # 0x1b18
  00cd2:    	je     0x3a7f5
  00cd8:    	sub    rsp,0x20
  00cdc:    	movq   QWORD PTR [rsp],xmm2
  00ce1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ced:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf3:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cf7: b5 	movabs rax,0x55b5b009e670
  00d01:    	call   rax
  00d03:    	mov    r15d,eax
  00d06: 00 	cmp    r15d,DWORD PTR [rip+0xe13]        # 0x1b20
  00d0d:    	jne    0x3a817
  00d13:    	mov    eax,DWORD PTR [rip+0xffffffffffff855c]        # 0xffff9275
  00d19:    	cmp    DWORD PTR [rip+0xdfd],eax        # 0x1b1c
  00d1f:    	jne    0x3a817
  00d25: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d2e:    	mov    QWORD PTR [rsp-0x38],rcx
  00d33:    	mov    rax,QWORD PTR [rbx]
  00d36:    	lea    rsi,[rsp-0x18]
  00d3b:    	mov    QWORD PTR [rsi],rax
  00d3e:    	mov    QWORD PTR [rbx],rsi
  00d41:    	mov    rax,QWORD PTR [rbp-0x30]
  00d45:    	mov    QWORD PTR [rsp-0x38],rax
  00d4a: 00 	mov    rdi,0x0
  00d51: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d5a: 00 	movabs rax,0x0
  00d64:    	mov    QWORD PTR [rsp-0x28],rax
  00d69: 00 	movabs r13,0x0
  00d73:    	call   0xffff6158
  00d78:    	lea    rdi,[rbp-0x8]
  00d7c:    	mov    QWORD PTR [rbx],rdi
  00d7f:    	movq   xmm2,QWORD PTR [rsp]
  00d84:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d8a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d90:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d96:    	add    rsp,0x20
  00d9a:    	test   rax,rax
  00d9d:    	je     0x3a883
  00da3:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00da7: 01 	sub    DWORD PTR [rip+0xd76],0x1        # 0x1b24
  00dae:    	je     0x3a8ae
  00db4:    	sub    rsp,0x20
  00db8:    	movq   QWORD PTR [rsp],xmm2
  00dbd:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dc3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dc9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dcf:    	mov    rdi,QWORD PTR [rbp-0x80]
  00dd3: b5 	movabs rax,0x55b5b009e670
  00ddd:    	call   rax
  00ddf:    	mov    r15d,eax
  00de2: 00 	cmp    r15d,DWORD PTR [rip+0xd43]        # 0x1b2c
  00de9:    	jne    0x3a8d0
  00def:    	mov    eax,DWORD PTR [rip+0xffffffffffff8480]        # 0xffff9275
  00df5:    	cmp    DWORD PTR [rip+0xd2d],eax        # 0x1b28
  00dfb:    	jne    0x3a8d0
  00e01: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e0a:    	mov    QWORD PTR [rsp-0x38],rcx
  00e0f:    	mov    rax,QWORD PTR [rbx]
  00e12:    	lea    rsi,[rsp-0x18]
  00e17:    	mov    QWORD PTR [rsi],rax
  00e1a:    	mov    QWORD PTR [rbx],rsi
  00e1d:    	mov    rax,QWORD PTR [rbp-0x80]
  00e21:    	mov    QWORD PTR [rsp-0x38],rax
  00e26: 00 	mov    rdi,0x0
  00e2d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e36: 00 	movabs rax,0x0
  00e40:    	mov    QWORD PTR [rsp-0x28],rax
  00e45: 00 	movabs r13,0x0
  00e4f:    	call   0xffff6158
  00e54:    	lea    rdi,[rbp-0x8]
  00e58:    	mov    QWORD PTR [rbx],rdi
  00e5b:    	movq   xmm2,QWORD PTR [rsp]
  00e60:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e72:    	add    rsp,0x20
  00e76:    	test   rax,rax
  00e79:    	je     0x3a93c
  00e7f:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e83: 01 	sub    DWORD PTR [rip+0xca6],0x1        # 0x1b30
  00e8a:    	je     0x3a967
  00e90:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e94:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eb3:    	mov    rdx,rdi
  00eb6:    	mov    rcx,rsi
  00eb9:    	mov    rdi,rbx
  00ebc:    	mov    rsi,r12
  00ebf: b5 	movabs rax,0x55b5b00e8b30
  00ec9:    	call   rax
  00ecb:    	movq   xmm2,QWORD PTR [rsp]
  00ed0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00edc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ee2:    	add    rsp,0x20
  00ee6: b5 	movabs r13,0x55b5b07c51c0
  00ef0:    	test   rax,rax
  00ef3:    	je     0xffff618b
  00ef9:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00efd: 01 	sub    DWORD PTR [rip+0xc30],0x1        # 0x1b34
  00f04:    	je     0x3a9a5
  00f0a:    	mov    rdi,QWORD PTR [rbp-0x70]
  00f0e:    	mov    rsi,QWORD PTR [rbp-0x78]
  00f12:    	sub    rsp,0x20
  00f16:    	movq   QWORD PTR [rsp],xmm2
  00f1b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f21:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f27:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f2d:    	mov    rdx,rdi
  00f30:    	mov    rcx,rsi
  00f33:    	mov    rdi,rbx
  00f36:    	mov    rsi,r12
  00f39: b5 	movabs rax,0x55b5b00e6cb0
  00f43:    	call   rax
  00f45:    	movq   xmm2,QWORD PTR [rsp]
  00f4a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f50:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f56:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f5c:    	add    rsp,0x20
  00f60: b5 	movabs r13,0x55b5b07c51d0
  00f6a:    	test   rax,rax
  00f6d:    	je     0xffff618b
  00f73:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f77: 01 	sub    DWORD PTR [rip+0xbba],0x1        # 0x1b38
  00f7e:    	je     0x3a9e3
  00f84:    	sub    rsp,0x20
  00f88:    	movq   QWORD PTR [rsp],xmm2
  00f8d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f93:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f99:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f9f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00fa3: b5 	movabs rax,0x55b5b009e670
  00fad:    	call   rax
  00faf:    	mov    r15d,eax
  00fb2: 00 	cmp    r15d,DWORD PTR [rip+0xb87]        # 0x1b40
  00fb9:    	jne    0x3aa05
  00fbf:    	mov    eax,DWORD PTR [rip+0xffffffffffff82b0]        # 0xffff9275
  00fc5:    	cmp    DWORD PTR [rip+0xb71],eax        # 0x1b3c
  00fcb:    	jne    0x3aa05
  00fd1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fda:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdf:    	mov    rax,QWORD PTR [rbx]
  00fe2:    	lea    rsi,[rsp-0x18]
  00fe7:    	mov    QWORD PTR [rsi],rax
  00fea:    	mov    QWORD PTR [rbx],rsi
  00fed:    	mov    rax,QWORD PTR [rbp-0x30]
  00ff1:    	mov    QWORD PTR [rsp-0x38],rax
  00ff6: 00 	mov    rdi,0x0
  00ffd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01006: 00 	movabs rax,0x0
  01010:    	mov    QWORD PTR [rsp-0x28],rax
  01015: 00 	movabs r13,0x0
  0101f:    	call   0xffff6158
  01024:    	lea    rdi,[rbp-0x8]
  01028:    	mov    QWORD PTR [rbx],rdi
  0102b:    	movq   xmm2,QWORD PTR [rsp]
  01030:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01036:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0103c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01042:    	add    rsp,0x20
  01046:    	test   rax,rax
  01049:    	je     0x3aa71
  0104f:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  01053: 01 	sub    DWORD PTR [rip+0xaea],0x1        # 0x1b44
  0105a:    	je     0x3aa9c
  01060:    	sub    rsp,0x20
  01064:    	movq   QWORD PTR [rsp],xmm2
  01069:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01075:    	movq   QWORD PTR [rsp+0x18],xmm6
  0107b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0107f: b5 	movabs rax,0x55b5b009e670
  01089:    	call   rax
  0108b:    	mov    r15d,eax
  0108e: 00 	cmp    r15d,DWORD PTR [rip+0xab7]        # 0x1b4c
  01095:    	jne    0x3aabe
  0109b:    	mov    eax,DWORD PTR [rip+0xffffffffffff81d4]        # 0xffff9275
  010a1:    	cmp    DWORD PTR [rip+0xaa1],eax        # 0x1b48
  010a7:    	jne    0x3aabe
  010ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010b6:    	mov    QWORD PTR [rsp-0x38],rcx
  010bb:    	mov    rax,QWORD PTR [rbx]
  010be:    	lea    rsi,[rsp-0x18]
  010c3:    	mov    QWORD PTR [rsi],rax
  010c6:    	mov    QWORD PTR [rbx],rsi
  010c9:    	mov    rax,QWORD PTR [rbp-0x80]
  010cd:    	mov    QWORD PTR [rsp-0x38],rax
  010d2: 00 	mov    rdi,0x0
  010d9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010e2: 00 	movabs rax,0x0
  010ec:    	mov    QWORD PTR [rsp-0x28],rax
  010f1: 00 	movabs r13,0x0
  010fb:    	call   0xffff6158
  01100:    	lea    rdi,[rbp-0x8]
  01104:    	mov    QWORD PTR [rbx],rdi
  01107:    	movq   xmm2,QWORD PTR [rsp]
  0110c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01112:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01118:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0111e:    	add    rsp,0x20
  01122:    	test   rax,rax
  01125:    	je     0x3ab2a
  0112b:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  0112f: 01 	sub    DWORD PTR [rip+0xa1a],0x1        # 0x1b50
  01136:    	je     0x3ab55
  0113c:    	sub    rsp,0x20
  01140:    	movq   QWORD PTR [rsp],xmm2
  01145:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01151:    	movq   QWORD PTR [rsp+0x18],xmm6
  01157:    	mov    rdi,QWORD PTR [rbp-0x30]
  0115b: b5 	movabs rax,0x55b5b009e670
  01165:    	call   rax
  01167:    	mov    r15d,eax
  0116a: 00 	cmp    r15d,DWORD PTR [rip+0x9e7]        # 0x1b58
  01171:    	jne    0x3ab77
  01177:    	mov    eax,DWORD PTR [rip+0xffffffffffff80f8]        # 0xffff9275
  0117d:    	cmp    DWORD PTR [rip+0x9d1],eax        # 0x1b54
  01183:    	jne    0x3ab77
  01189: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01192:    	mov    QWORD PTR [rsp-0x38],rcx
  01197:    	mov    rax,QWORD PTR [rbx]
  0119a:    	lea    rsi,[rsp-0x18]
  0119f:    	mov    QWORD PTR [rsi],rax
  011a2:    	mov    QWORD PTR [rbx],rsi
  011a5:    	mov    rax,QWORD PTR [rbp-0x30]
  011a9:    	mov    QWORD PTR [rsp-0x38],rax
  011ae: 00 	mov    rdi,0x0
  011b5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011be: 00 	movabs rax,0x0
  011c8:    	mov    QWORD PTR [rsp-0x28],rax
  011cd: 00 	movabs r13,0x0
  011d7:    	call   0xffff6158
  011dc:    	lea    rdi,[rbp-0x8]
  011e0:    	mov    QWORD PTR [rbx],rdi
  011e3:    	movq   xmm2,QWORD PTR [rsp]
  011e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ee:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011f4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011fa:    	add    rsp,0x20
  011fe:    	test   rax,rax
  01201:    	je     0x3abe3
  01207: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  0120e: 01 	sub    DWORD PTR [rip+0x947],0x1        # 0x1b5c
  01215:    	je     0x3ac0e
  0121b:    	sub    rsp,0x20
  0121f:    	movq   QWORD PTR [rsp],xmm2
  01224:    	movq   QWORD PTR [rsp+0x8],xmm4
  0122a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01230:    	movq   QWORD PTR [rsp+0x18],xmm6
  01236: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0123d: b5 	movabs rax,0x55b5b009e670
  01247:    	call   rax
  01249:    	mov    r15d,eax
  0124c: 00 	cmp    r15d,DWORD PTR [rip+0x911]        # 0x1b64
  01253:    	jne    0x3ac30
  01259:    	mov    eax,DWORD PTR [rip+0xffffffffffff8016]        # 0xffff9275
  0125f:    	cmp    DWORD PTR [rip+0x8fb],eax        # 0x1b60
  01265:    	jne    0x3ac30
  0126b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01274:    	mov    QWORD PTR [rsp-0x38],rcx
  01279:    	mov    rax,QWORD PTR [rbx]
  0127c:    	lea    rsi,[rsp-0x18]
  01281:    	mov    QWORD PTR [rsi],rax
  01284:    	mov    QWORD PTR [rbx],rsi
  01287: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0128e:    	mov    QWORD PTR [rsp-0x38],rax
  01293: 00 	mov    rdi,0x0
  0129a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012a3: 00 	movabs rax,0x0
  012ad:    	mov    QWORD PTR [rsp-0x28],rax
  012b2: 00 	movabs r13,0x0
  012bc:    	call   0xffff6158
  012c1:    	lea    rdi,[rbp-0x8]
  012c5:    	mov    QWORD PTR [rbx],rdi
  012c8:    	movq   xmm2,QWORD PTR [rsp]
  012cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012df:    	add    rsp,0x20
  012e3:    	test   rax,rax
  012e6:    	je     0x3ac9f
  012ec:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  012f0: 01 	sub    DWORD PTR [rip+0x871],0x1        # 0x1b68
  012f7:    	je     0x3acca
  012fd:    	mov    rdi,QWORD PTR [rbp-0x58]
  01301:    	mov    rsi,QWORD PTR [rbp-0x80]
  01305:    	sub    rsp,0x20
  01309:    	movq   QWORD PTR [rsp],xmm2
  0130e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01314:    	movq   QWORD PTR [rsp+0x10],xmm5
  0131a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01320:    	mov    rdx,rdi
  01323:    	mov    rcx,rsi
  01326:    	mov    rdi,rbx
  01329:    	mov    rsi,r12
  0132c: b5 	movabs rax,0x55b5b00e8b30
  01336:    	call   rax
  01338:    	movq   xmm2,QWORD PTR [rsp]
  0133d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01343:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01349:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0134f:    	add    rsp,0x20
  01353: b5 	movabs r13,0x55b5b07c52a0
  0135d:    	test   rax,rax
  01360:    	je     0xffff618b
  01366:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  0136a: 01 	sub    DWORD PTR [rip+0x7fb],0x1        # 0x1b6c
  01371:    	je     0x3ad08
  01377:    	mov    rdi,QWORD PTR [rbp-0x78]
  0137b:    	mov    rsi,QWORD PTR [rbp-0x80]
  0137f:    	sub    rsp,0x20
  01383:    	movq   QWORD PTR [rsp],xmm2
  01388:    	movq   QWORD PTR [rsp+0x8],xmm4
  0138e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01394:    	movq   QWORD PTR [rsp+0x18],xmm6
  0139a:    	mov    rdx,rdi
  0139d:    	mov    rcx,rsi
  013a0:    	mov    rdi,rbx
  013a3:    	mov    rsi,r12
  013a6: b5 	movabs rax,0x55b5b00e6cb0
  013b0:    	call   rax
  013b2:    	movq   xmm2,QWORD PTR [rsp]
  013b7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013bd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013c3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013c9:    	add    rsp,0x20
  013cd: b5 	movabs r13,0x55b5b07c52b0
  013d7:    	test   rax,rax
  013da:    	je     0xffff618b
  013e0:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013e4: 01 	sub    DWORD PTR [rip+0x785],0x1        # 0x1b70
  013eb:    	je     0x3ad46
  013f1:    	sub    rsp,0x20
  013f5:    	movq   QWORD PTR [rsp],xmm2
  013fa:    	movq   QWORD PTR [rsp+0x8],xmm4
  01400:    	movq   QWORD PTR [rsp+0x10],xmm5
  01406:    	movq   QWORD PTR [rsp+0x18],xmm6
  0140c:    	mov    rdi,QWORD PTR [rbp-0x30]
  01410: b5 	movabs rax,0x55b5b009e670
  0141a:    	call   rax
  0141c:    	mov    r15d,eax
  0141f: 00 	cmp    r15d,DWORD PTR [rip+0x752]        # 0x1b78
  01426:    	jne    0x3ad68
  0142c:    	mov    eax,DWORD PTR [rip+0xffffffffffff7e43]        # 0xffff9275
  01432:    	cmp    DWORD PTR [rip+0x73c],eax        # 0x1b74
  01438:    	jne    0x3ad68
  0143e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01447:    	mov    QWORD PTR [rsp-0x38],rcx
  0144c:    	mov    rax,QWORD PTR [rbx]
  0144f:    	lea    rsi,[rsp-0x18]
  01454:    	mov    QWORD PTR [rsi],rax
  01457:    	mov    QWORD PTR [rbx],rsi
  0145a:    	mov    rax,QWORD PTR [rbp-0x30]
  0145e:    	mov    QWORD PTR [rsp-0x38],rax
  01463: 00 	mov    rdi,0x0
  0146a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01473: 00 	movabs rax,0x0
  0147d:    	mov    QWORD PTR [rsp-0x28],rax
  01482: 00 	movabs r13,0x0
  0148c:    	call   0xffff6158
  01491:    	lea    rdi,[rbp-0x8]
  01495:    	mov    QWORD PTR [rbx],rdi
  01498:    	movq   xmm2,QWORD PTR [rsp]
  0149d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014a3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014a9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014af:    	add    rsp,0x20
  014b3:    	test   rax,rax
  014b6:    	je     0x3add4
  014bc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  014c3: 01 	sub    DWORD PTR [rip+0x6b2],0x1        # 0x1b7c
  014ca:    	je     0x3adff
  014d0:    	sub    rsp,0x20
  014d4:    	movq   QWORD PTR [rsp],xmm2
  014d9:    	movq   QWORD PTR [rsp+0x8],xmm4
  014df:    	movq   QWORD PTR [rsp+0x10],xmm5
  014e5:    	movq   QWORD PTR [rsp+0x18],xmm6
  014eb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  014f2: b5 	movabs rax,0x55b5b009e670
  014fc:    	call   rax
  014fe:    	mov    r15d,eax
  01501: 00 	cmp    r15d,DWORD PTR [rip+0x67c]        # 0x1b84
  01508:    	jne    0x3ae21
  0150e:    	mov    eax,DWORD PTR [rip+0xffffffffffff7d61]        # 0xffff9275
  01514:    	cmp    DWORD PTR [rip+0x666],eax        # 0x1b80
  0151a:    	jne    0x3ae21
  01520: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01529:    	mov    QWORD PTR [rsp-0x38],rcx
  0152e:    	mov    rax,QWORD PTR [rbx]
  01531:    	lea    rsi,[rsp-0x18]
  01536:    	mov    QWORD PTR [rsi],rax
  01539:    	mov    QWORD PTR [rbx],rsi
  0153c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01543:    	mov    QWORD PTR [rsp-0x38],rax
  01548: 00 	mov    rdi,0x0
  0154f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01558: 00 	movabs rax,0x0
  01562:    	mov    QWORD PTR [rsp-0x28],rax
  01567: 00 	movabs r13,0x0
  01571:    	call   0xffff6158
  01576:    	lea    rdi,[rbp-0x8]
  0157a:    	mov    QWORD PTR [rbx],rdi
  0157d:    	movq   xmm2,QWORD PTR [rsp]
  01582:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01588:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0158e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01594:    	add    rsp,0x20
  01598:    	test   rax,rax
  0159b:    	je     0x3ae90
  015a1:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  015a5: 01 	sub    DWORD PTR [rip+0x5dc],0x1        # 0x1b88
  015ac:    	je     0x3aebb
  015b2:    	sub    rsp,0x20
  015b6:    	movq   QWORD PTR [rsp],xmm2
  015bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c1:    	movq   QWORD PTR [rsp+0x10],xmm5
  015c7:    	movq   QWORD PTR [rsp+0x18],xmm6
  015cd:    	mov    rdi,QWORD PTR [rbp-0x30]
  015d1: b5 	movabs rax,0x55b5b009e670
  015db:    	call   rax
  015dd:    	mov    r15d,eax
  015e0: 00 	cmp    r15d,DWORD PTR [rip+0x5a9]        # 0x1b90
  015e7:    	jne    0x3aedd
  015ed:    	mov    eax,DWORD PTR [rip+0xffffffffffff7c82]        # 0xffff9275
  015f3:    	cmp    DWORD PTR [rip+0x593],eax        # 0x1b8c
  015f9:    	jne    0x3aedd
  015ff: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01608:    	mov    QWORD PTR [rsp-0x38],rcx
  0160d:    	mov    rax,QWORD PTR [rbx]
  01610:    	lea    rsi,[rsp-0x18]
  01615:    	mov    QWORD PTR [rsi],rax
  01618:    	mov    QWORD PTR [rbx],rsi
  0161b:    	mov    rax,QWORD PTR [rbp-0x30]
  0161f:    	mov    QWORD PTR [rsp-0x38],rax
  01624: 00 	mov    rdi,0x0
  0162b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01634: 00 	movabs rax,0x0
  0163e:    	mov    QWORD PTR [rsp-0x28],rax
  01643: 00 	movabs r13,0x0
  0164d:    	call   0xffff6158
  01652:    	lea    rdi,[rbp-0x8]
  01656:    	mov    QWORD PTR [rbx],rdi
  01659:    	movq   xmm2,QWORD PTR [rsp]
  0165e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01664:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0166a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01670:    	add    rsp,0x20
  01674:    	test   rax,rax
  01677:    	je     0x3af49
  0167d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01684: 01 	sub    DWORD PTR [rip+0x509],0x1        # 0x1b94
  0168b:    	je     0x3af74
  01691:    	sub    rsp,0x20
  01695:    	movq   QWORD PTR [rsp],xmm2
  0169a:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a0:    	movq   QWORD PTR [rsp+0x10],xmm5
  016a6:    	movq   QWORD PTR [rsp+0x18],xmm6
  016ac: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016b3: b5 	movabs rax,0x55b5b009e670
  016bd:    	call   rax
  016bf:    	mov    r15d,eax
  016c2: 00 	cmp    r15d,DWORD PTR [rip+0x4d3]        # 0x1b9c
  016c9:    	jne    0x3af96
  016cf:    	mov    eax,DWORD PTR [rip+0xffffffffffff7ba0]        # 0xffff9275
  016d5:    	cmp    DWORD PTR [rip+0x4bd],eax        # 0x1b98
  016db:    	jne    0x3af96
  016e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016ea:    	mov    QWORD PTR [rsp-0x38],rcx
  016ef:    	mov    rax,QWORD PTR [rbx]
  016f2:    	lea    rsi,[rsp-0x18]
  016f7:    	mov    QWORD PTR [rsi],rax
  016fa:    	mov    QWORD PTR [rbx],rsi
  016fd: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01704:    	mov    QWORD PTR [rsp-0x38],rax
  01709: 00 	mov    rdi,0x0
  01710: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01719: 00 	movabs rax,0x0
  01723:    	mov    QWORD PTR [rsp-0x28],rax
  01728: 00 	movabs r13,0x0
  01732:    	call   0xffff6158
  01737:    	lea    rdi,[rbp-0x8]
  0173b:    	mov    QWORD PTR [rbx],rdi
  0173e:    	movq   xmm2,QWORD PTR [rsp]
  01743:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01749:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0174f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01755:    	add    rsp,0x20
  01759:    	test   rax,rax
  0175c:    	je     0x3b005
  01762: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01769: 01 	sub    DWORD PTR [rip+0x430],0x1        # 0x1ba0
  01770:    	je     0x3b030
  01776:    	mov    rdi,QWORD PTR [rbp-0x58]
  0177a: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01781:    	sub    rsp,0x20
  01785:    	movq   QWORD PTR [rsp],xmm2
  0178a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01790:    	movq   QWORD PTR [rsp+0x10],xmm5
  01796:    	movq   QWORD PTR [rsp+0x18],xmm6
  0179c:    	mov    rdx,rdi
  0179f:    	mov    rcx,rsi
  017a2:    	mov    rdi,rbx
  017a5:    	mov    rsi,r12
  017a8: b5 	movabs rax,0x55b5b00e8b30
  017b2:    	call   rax
  017b4:    	movq   xmm2,QWORD PTR [rsp]
  017b9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017bf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017c5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017cb:    	add    rsp,0x20
  017cf: b5 	movabs r13,0x55b5b07c5380
  017d9:    	test   rax,rax
  017dc:    	je     0xffff618b
  017e2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017e9: 01 	sub    DWORD PTR [rip+0x3b4],0x1        # 0x1ba4
  017f0:    	je     0x3b06e
  017f6:    	mov    rdi,QWORD PTR [rbp-0x80]
  017fa: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01801:    	sub    rsp,0x20
  01805:    	movq   QWORD PTR [rsp],xmm2
  0180a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01810:    	movq   QWORD PTR [rsp+0x10],xmm5
  01816:    	movq   QWORD PTR [rsp+0x18],xmm6
  0181c:    	mov    rdx,rdi
  0181f:    	mov    rcx,rsi
  01822:    	mov    rdi,rbx
  01825:    	mov    rsi,r12
  01828: b5 	movabs rax,0x55b5b00e6cb0
  01832:    	call   rax
  01834:    	movq   xmm2,QWORD PTR [rsp]
  01839:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0183f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01845:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0184b:    	add    rsp,0x20
  0184f: b5 	movabs r13,0x55b5b07c5390
  01859:    	test   rax,rax
  0185c:    	je     0xffff618b
  01862:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  01866: 01 	sub    DWORD PTR [rip+0x33b],0x1        # 0x1ba8
  0186d:    	je     0x3b0ac
  01873:    	sub    rsp,0x20
  01877:    	movq   QWORD PTR [rsp],xmm2
  0187c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01882:    	movq   QWORD PTR [rsp+0x10],xmm5
  01888:    	movq   QWORD PTR [rsp+0x18],xmm6
  0188e:    	mov    rdi,QWORD PTR [rbp-0x68]
  01892: b5 	movabs rax,0x55b5b009e670
  0189c:    	call   rax
  0189e:    	mov    r15d,eax
  018a1: 00 	cmp    r15d,DWORD PTR [rip+0x308]        # 0x1bb0
  018a8:    	jne    0x3b0ce
  018ae:    	mov    eax,DWORD PTR [rip+0xffffffffffff79c1]        # 0xffff9275
  018b4:    	cmp    DWORD PTR [rip+0x2f2],eax        # 0x1bac
  018ba:    	jne    0x3b0ce
  018c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018c9:    	mov    QWORD PTR [rsp-0x38],rcx
  018ce:    	mov    rax,QWORD PTR [rbx]
  018d1:    	lea    rsi,[rsp-0x18]
  018d6:    	mov    QWORD PTR [rsi],rax
  018d9:    	mov    QWORD PTR [rbx],rsi
  018dc:    	mov    rax,QWORD PTR [rbp-0x68]
  018e0:    	mov    QWORD PTR [rsp-0x38],rax
  018e5: 00 	mov    rdi,0x3
  018ec:    	lea    r8,[rsp-0x40]
  018f1:    	mov    rax,QWORD PTR [rbp-0x70]
  018f5:    	mov    QWORD PTR [r8],rax
  018f8:    	sub    r8,0x8
  018fc:    	mov    rax,QWORD PTR [rbp-0x78]
  01900:    	mov    QWORD PTR [r8],rax
  01903:    	sub    r8,0x8
  01907:    	mov    rax,QWORD PTR [rbp-0x80]
  0190b:    	mov    QWORD PTR [r8],rax
  0190e:    	sub    r8,0x8
  01912: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0191b: 00 	movabs rax,0x0
  01925:    	mov    QWORD PTR [rsp-0x28],rax
  0192a: 00 	movabs r13,0x0
  01934:    	call   0xffff6158
  01939:    	lea    rdi,[rbp-0x8]
  0193d:    	mov    QWORD PTR [rbx],rdi
  01940:    	movq   xmm2,QWORD PTR [rsp]
  01945:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0194b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01951:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01957:    	add    rsp,0x20
  0195b:    	test   rax,rax
  0195e:    	je     0x3b13a
  01964:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  01968: 01 	sub    DWORD PTR [rip+0x245],0x1        # 0x1bb4
  0196f:    	je     0x3b165
  01975:    	sub    rsp,0x20
  01979:    	movq   QWORD PTR [rsp],xmm2
  0197e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01984:    	movq   QWORD PTR [rsp+0x10],xmm5
  0198a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01990:    	mov    rdi,QWORD PTR [rbp-0x38]
  01994: b5 	movabs rax,0x55b5b009e670
  0199e:    	call   rax
  019a0:    	mov    r15d,eax
  019a3: 00 	cmp    r15d,DWORD PTR [rip+0x212]        # 0x1bbc
  019aa:    	jne    0x3b187
  019b0:    	mov    eax,DWORD PTR [rip+0xffffffffffff78bf]        # 0xffff9275
  019b6:    	cmp    DWORD PTR [rip+0x1fc],eax        # 0x1bb8
  019bc:    	jne    0x3b187
  019c2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019cb:    	mov    QWORD PTR [rsp-0x38],rcx
  019d0:    	mov    rax,QWORD PTR [rbx]
  019d3:    	lea    rsi,[rsp-0x18]
  019d8:    	mov    QWORD PTR [rsi],rax
  019db:    	mov    QWORD PTR [rbx],rsi
  019de:    	mov    rax,QWORD PTR [rbp-0x38]
  019e2:    	mov    QWORD PTR [rsp-0x38],rax
  019e7: 00 	mov    rdi,0x1
  019ee:    	lea    r8,[rsp-0x40]
  019f3:    	mov    rax,QWORD PTR [rbp-0x60]
  019f7:    	mov    QWORD PTR [r8],rax
  019fa:    	sub    r8,0x8
  019fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a07: 00 	movabs rax,0x0
  01a11:    	mov    QWORD PTR [rsp-0x28],rax
  01a16: 00 	movabs r13,0x0
  01a20:    	call   0xffff6158
  01a25:    	lea    rdi,[rbp-0x8]
  01a29:    	mov    QWORD PTR [rbx],rdi
  01a2c:    	movq   xmm2,QWORD PTR [rsp]
  01a31:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a37:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a3d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01a43:    	add    rsp,0x20
  01a47:    	test   rax,rax
  01a4a:    	je     0x3b1f3
:00103 
:00105 br =>:00106
  01a50:    	jmp    0x3b25b
:00106 %7 = nil
  01a55: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01a5d:    	mov    rax,QWORD PTR [rbp-0x60]
  01a61:    	leave  
  01a62:    	ret    
==> start whole compile: clamp FuncId(59) self_class:Scene start:[00000] bytecode:0x55b5b080a8e0
<== finished compile. elapsed:41.1µs
offset:Pos(47720) code: 553 bytes  data: 87 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x396c1
  0001f: jmp    0x396c1
  00024: mov    eax,0x1
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x38]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    QWORD PTR [rbp-0x38],0x4
  00052: mov    QWORD PTR [rbp-0x40],0x4
  0005a: mov    rdi,QWORD PTR [rbp-0x28]
  0005e: test   rdi,0x7
  00065: jne    0x396d0
  0006b: cmp    DWORD PTR [rdi+0x4],0x32
  0006f: jne    0x396d0
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  00075: movq   xmm2,QWORD PTR [rip+0x1bb]        # 0x238
  0007d: movabs rax,0x37f800000000002
  00087: mov    QWORD PTR [rbp-0x40],rax
:00002 %2 = %1 * %3                         [Float][Float]
  0008b: mov    rdi,QWORD PTR [rbp-0x30]
  0008f: test   rdi,0x1
  00096: jne    0x396df
  0009c: test   rdi,0x2
  000a3: je     0xdf
  000a9: xorps  xmm3,xmm3
  000ac: movabs rax,0x8000000000000002
  000b6: cmp    rdi,rax
  000b9: je     0xf1
  000bf: mov    rax,rdi
  000c2: sar    rax,0x3f
  000c6: add    rax,0x2
  000ca: and    rdi,0xfffffffffffffffc
  000ce: or     rdi,rax
  000d1: rol    rdi,0x3d
  000d5: movq   xmm3,rdi
  000da: jmp    0xf1
  000df: call   0xffff4624
  000e4: test   rax,rax
  000e7: je     0x396df
  000ed: movq   xmm3,xmm0
  000f1: movq   xmm4,xmm3
  000f5: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000f9: movq   xmm2,QWORD PTR [rip+0x147]        # 0x248
  00101: movabs rax,0x37f000000000002
  0010b: mov    QWORD PTR [rbp-0x40],rax
:00004 _%3 = %2 > %3                        [Float][Float]
:00005 condnotbr _%3 =>:00008
  0010f: ucomisd xmm4,xmm2
  00113: jbe    0x396ee
:00006 %2 = literal[255.0]
  00119: movq   xmm4,QWORD PTR [rip+0x137]        # 0x258
  00121: movabs rax,0x37f000000000002
  0012b: mov    QWORD PTR [rbp-0x38],rax
:00007 br =>:00008
  0012f: jmp    0x39714
:00008 %3 = literal[0.0]
  00134: movq   xmm2,QWORD PTR [rip+0x12c]        # 0x268
  0013c: movabs rax,0x8000000000000002
  00146: mov    QWORD PTR [rbp-0x40],rax
:00009 _%3 = %2 < %3                        [Float][Float]
:00010 condnotbr _%3 =>:00013
  0014a: ucomisd xmm4,xmm2
  0014e: jae    0x3972d
:00011 %2 = literal[0.0]
  00154: movq   xmm4,QWORD PTR [rip+0x11c]        # 0x278
  0015c: movabs rax,0x8000000000000002
  00166: mov    QWORD PTR [rbp-0x38],rax
:00012 br =>:00013
  0016a: jmp    0x39746
:00013 %3 = %2.call to_i()                  [Float]
  0016f: mov    rdi,QWORD PTR [rbp-0x38]
  00173: test   rdi,0x1
  0017a: jne    0x3975f
  00180: test   rdi,0x2
  00187: jne    0x1a4
  0018d: test   rdi,0x7
  00194: jne    0x3975f
  0019a: cmp    DWORD PTR [rdi+0x4],0x7
  0019e: jne    0x3975f
  001a4: cmp    DWORD PTR [rip+0xffffffffffff750a],0x26        # 0xffff76b5
  001ab: jne    0x3975f
  001b1: mov    r9,0x0
  001b8: sub    rsp,0x10
  001bc: movq   QWORD PTR [rsp],xmm3
  001c1: movq   QWORD PTR [rsp+0x8],xmm4
  001c7: mov    rdx,rdi
  001ca: mov    QWORD PTR [rsp-0x20],0x0
  001d3: mov    QWORD PTR [rsp-0x38],rcx
  001d8: mov    rax,QWORD PTR [rbx]
  001db: lea    rsi,[rsp-0x18]
  001e0: mov    QWORD PTR [rsi],rax
  001e3: mov    QWORD PTR [rbx],rsi
  001e6: lea    rcx,[rbp-0x48]
  001ea: mov    r8,0x0
  001f1: call   0x3976e
  001f6: lea    rdi,[rbp-0x8]
  001fa: mov    QWORD PTR [rbx],rdi
  001fd: movq   xmm3,QWORD PTR [rsp]
  00202: movq   xmm4,QWORD PTR [rsp+0x8]
  00208: add    rsp,0x10
  0020c: movabs r13,0x55b5b080a9d0
  00216: test   rax,rax
  00219: je     0xffff45cb
  0021f: mov    QWORD PTR [rbp-0x40],rax
:00014 
:00016 ret %3
  00223: mov    rax,QWORD PTR [rbp-0x40]
  00227: leave  
  00228: ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x55b5b080a860
<== finished compile. elapsed:63.2µs
offset:Pos(48360) code: 304 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: je     0x70
  00014: jl     0x1f
  0001a: jmp    0x70
  0001f: mov    eax,0x1
  00024: sub    eax,edx
  00026: test   rax,rax
  00029: je     0x45
  0002f: lea    rdi,[rbp-0x38]
  00033: mov    QWORD PTR [rdi+rax*8],0x4
  0003b: sub    rax,0x1
  0003f: jne    0x33
  00045: mov    edx,0x1
  0004a: mov    eax,0x1
  0004f: sub    eax,edx
  00051: test   rax,rax
  00054: je     0x70
  0005a: lea    rdi,[rbp-0x38]
  0005e: mov    QWORD PTR [rdi+rax*8],0x0
  00066: sub    rax,0x1
  0006a: jne    0x5e
  00070: mov    rax,0x4
  00077: mov    QWORD PTR [rbp-0x38],rax
  0007b: mov    QWORD PTR [rbp-0x40],rax
  0007f: mov    QWORD PTR [rbp-0x48],rax
  00083: mov    rdi,QWORD PTR [rbp-0x28]
  00087: test   rdi,0x7
  0008e: jne    0x3952f
  00094: cmp    DWORD PTR [rdi+0x4],0x32
  00098: jne    0x3952f
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = dynvar(3, %3)
  0009e: mov    rax,QWORD PTR [rbp-0x10]
  000a2: mov    rax,QWORD PTR [rax]
  000a5: mov    rax,QWORD PTR [rax]
  000a8: mov    rax,QWORD PTR [rax-0x30]
  000ac: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = literal[5439489]
  000b0: mov    rax,0xa60003
  000b7: mov    QWORD PTR [rbp-0x48],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  000bb: mov    rdi,QWORD PTR [rbp-0x40]
  000bf: test   rdi,0x1
  000c6: je     0x3953e
  000cc: cmp    DWORD PTR [rip+0xffffffffffff7362],0x26        # 0xffff7435
  000d3: jne    0x3953e
  000d9: mov    r9,QWORD PTR [rbp-0x48]
  000dd: mov    rdx,rdi
  000e0: mov    QWORD PTR [rsp-0x20],0x0
  000e9: mov    QWORD PTR [rsp-0x38],rcx
  000ee: mov    rax,QWORD PTR [rbx]
  000f1: lea    rsi,[rsp-0x18]
  000f6: mov    QWORD PTR [rsi],rax
  000f9: mov    QWORD PTR [rbx],rsi
  000fc: lea    rcx,[rbp-0x50]
  00100: mov    r8,0x0
  00107: call   0x3954d
  0010c: lea    rdi,[rbp-0x8]
  00110: mov    QWORD PTR [rbx],rdi
  00113: movabs r13,0x55b5b080a8b0
  0011d: test   rax,rax
  00120: je     0xffff434b
  00126: mov    QWORD PTR [rbp-0x38],rax
:00004 
:00006 ret %2
  0012a: mov    rax,QWORD PTR [rbp-0x38]
  0012e: leave  
  0012f: ret    
==> start whole compile: <unnamed> FuncId(81) self_class:Scene start:[00000] bytecode:0x55b5b07e6a00
<== finished compile. elapsed:103.8µs
offset:Pos(48664) code: 3749 bytes  data: 99 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: je     0x73
  00017: jl     0x22
  0001d: jmp    0x73
  00022: mov    eax,0x1
  00027: sub    eax,edx
  00029: test   rax,rax
  0002c: je     0x48
  00032: lea    rdi,[rbp-0x38]
  00036: mov    QWORD PTR [rdi+rax*8],0x4
  0003e: sub    rax,0x1
  00042: jne    0x36
  00048: mov    edx,0x1
  0004d: mov    eax,0x1
  00052: sub    eax,edx
  00054: test   rax,rax
  00057: je     0x73
  0005d: lea    rdi,[rbp-0x38]
  00061: mov    QWORD PTR [rdi+rax*8],0x0
  00069: sub    rax,0x1
  0006d: jne    0x61
  00073: mov    rax,0x4
  0007a: mov    QWORD PTR [rbp-0x38],rax
  0007e: mov    QWORD PTR [rbp-0x40],rax
  00082: mov    QWORD PTR [rbp-0x48],rax
  00086: mov    QWORD PTR [rbp-0x50],rax
  0008a: mov    QWORD PTR [rbp-0x58],rax
  0008e: mov    QWORD PTR [rbp-0x60],rax
  00092: mov    QWORD PTR [rbp-0x68],rax
  00096: mov    QWORD PTR [rbp-0x70],rax
  0009a: mov    rdi,QWORD PTR [rbp-0x28]
  0009e: test   rdi,0x7
  000a5: jne    0x3945e
  000ab: cmp    DWORD PTR [rdi+0x4],0x32
  000af: jne    0x3945e
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  000b5: mov    rax,QWORD PTR [rip+0xffffffffffff725c]        # 0xffff7318
  000bc: cmp    rax,QWORD PTR [rip+0xdf5]        # 0xeb8
  000c3: jne    0x3946d
  000c9: mov    rax,QWORD PTR [rip+0xdd8]        # 0xea8
  000d0: mov    QWORD PTR [rbp-0x58],rax
:00002 %7 = literal[0.0]
  000d4: movq   xmm2,QWORD PTR [rip+0xdec]        # 0xec8
  000dc: movabs rax,0x8000000000000002
  000e6: mov    QWORD PTR [rbp-0x60],rax
:00003 %8 = literal[0.0]
  000ea: movq   xmm3,QWORD PTR [rip+0xde6]        # 0xed8
  000f2: movabs rax,0x8000000000000002
  000fc: mov    QWORD PTR [rbp-0x68],rax
:00004 %9 = literal[0.0]
  00100: movq   xmm4,QWORD PTR [rip+0xde0]        # 0xee8
  00108: movabs rax,0x8000000000000002
  00112: mov    QWORD PTR [rbp-0x70],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  00116: mov    rdi,QWORD PTR [rbp-0x58]
  0011a: test   rdi,0x7
  00121: jne    0x394b3
  00127: cmp    DWORD PTR [rdi+0x4],0x29
  0012b: jne    0x394b3
  00131: cmp    DWORD PTR [rip+0xffffffffffff71cd],0x26        # 0xffff7305
  00138: jne    0x394b3
  0013e: mov    r9,0x0
  00145: sub    rsp,0x20
  00149: movq   QWORD PTR [rsp],xmm2
  0014e: movq   QWORD PTR [rsp+0x8],xmm3
  00154: movq   QWORD PTR [rsp+0x10],xmm4
  0015a: mov    rdx,rdi
  0015d: mov    QWORD PTR [rsp-0x20],0x0
  00166: mov    QWORD PTR [rsp-0x38],rcx
  0016b: mov    rax,QWORD PTR [rbx]
  0016e: lea    rsi,[rsp-0x18]
  00173: mov    QWORD PTR [rsi],rax
  00176: mov    QWORD PTR [rbx],rsi
  00179: lea    rcx,[rbp-0x60]
  0017d: mov    r8,0x3
  00184: call   0x394c2
  00189: lea    rdi,[rbp-0x8]
  0018d: mov    QWORD PTR [rbx],rdi
  00190: movq   xmm2,QWORD PTR [rsp]
  00195: movq   xmm3,QWORD PTR [rsp+0x8]
  0019b: movq   xmm4,QWORD PTR [rsp+0x10]
  001a1: add    rsp,0x20
  001a5: movabs r13,0x55b5b07e6a70
  001af: test   rax,rax
  001b2: je     0xffff421b
  001b8: mov    QWORD PTR [rbp-0x38],rax
:00006 
:00008 %6 = dynvar(2, %3)
  001bc: mov    rax,QWORD PTR [rbp-0x10]
  001c0: mov    rax,QWORD PTR [rax]
  001c3: mov    rax,QWORD PTR [rax-0x30]
  001c7: mov    QWORD PTR [rbp-0x58],rax
:00009 %7 = literal[5373953]
  001cb: mov    rax,0xa40003
  001d2: mov    QWORD PTR [rbp-0x60],rax
:00010 _ = %6.call times(&%7)               [Integer]
  001d6: mov    rdi,QWORD PTR [rbp-0x58]
  001da: test   rdi,0x1
  001e1: je     0x394f4
  001e7: cmp    DWORD PTR [rip+0xffffffffffff7117],0x26        # 0xffff7305
  001ee: jne    0x394f4
  001f4: mov    r9,QWORD PTR [rbp-0x60]
  001f8: sub    rsp,0x10
  001fc: movq   QWORD PTR [rsp],xmm3
  00201: movq   QWORD PTR [rsp+0x8],xmm4
  00207: mov    rdx,rdi
  0020a: mov    QWORD PTR [rsp-0x20],0x0
  00213: mov    QWORD PTR [rsp-0x38],rcx
  00218: mov    rax,QWORD PTR [rbx]
  0021b: lea    rsi,[rsp-0x18]
  00220: mov    QWORD PTR [rsi],rax
  00223: mov    QWORD PTR [rbx],rsi
  00226: lea    rcx,[rbp-0x68]
  0022a: mov    r8,0x0
  00231: call   0x39503
  00236: lea    rdi,[rbp-0x8]
  0023a: mov    QWORD PTR [rbx],rdi
  0023d: movq   xmm3,QWORD PTR [rsp]
  00242: movq   xmm4,QWORD PTR [rsp+0x8]
  00248: add    rsp,0x10
  0024c: movabs r13,0x55b5b07e6ac0
  00256: test   rax,rax
  00259: je     0xffff421b
:00011 
:00013 %6 = %2.call x()                     [Vec]
  0025f: mov    rdi,QWORD PTR [rbp-0x38]
  00263: test   rdi,0x7
  0026a: jne    0x39535
  00270: cmp    DWORD PTR [rdi+0x4],0x28
  00274: jne    0x39535
  0027a: cmp    DWORD PTR [rip+0xffffffffffff7084],0x26        # 0xffff7305
  00281: jne    0x39535
  00287: mov    esi,DWORD PTR [rip+0xc67]        # 0xef4
  0028d: cmp    esi,0xffffffff
  00290: je     0x39544
  00296: cmp    WORD PTR [rdi+0x2],0x3
  0029b: jne    0x2b4
  002a1: cmp    esi,0x6
  002a4: jge    0x2b4
  002aa: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002af: jmp    0x2de
  002b4: sub    rsp,0x10
  002b8: movq   QWORD PTR [rsp],xmm3
  002bd: movq   QWORD PTR [rsp+0x8],xmm4
  002c3: movabs rax,0x55b5b00a3ef0
  002cd: call   rax
  002cf: movq   xmm3,QWORD PTR [rsp]
  002d4: movq   xmm4,QWORD PTR [rsp+0x8]
  002da: add    rsp,0x10
  002de: mov    QWORD PTR [rbp-0x58],rax
:00014 
:00016 %7 = dynvar(2, %5)
  002e2: mov    rax,QWORD PTR [rbp-0x10]
  002e6: mov    rax,QWORD PTR [rax]
  002e9: mov    rax,QWORD PTR [rax-0x40]
  002ed: mov    QWORD PTR [rbp-0x60],rax
:00017 %8 = dynvar(2, %5)
  002f1: mov    rax,QWORD PTR [rbp-0x10]
  002f5: mov    rax,QWORD PTR [rax]
  002f8: mov    rax,QWORD PTR [rax-0x40]
  002fc: mov    QWORD PTR [rbp-0x68],rax
:00018 %7 = %7 * %8                         [Float][Float]
  00300: mov    rdi,QWORD PTR [rbp-0x60]
  00304: test   rdi,0x1
  0030b: jne    0x3958b
  00311: test   rdi,0x2
  00318: je     0x354
  0031e: xorps  xmm2,xmm2
  00321: movabs rax,0x8000000000000002
  0032b: cmp    rdi,rax
  0032e: je     0x366
  00334: mov    rax,rdi
  00337: sar    rax,0x3f
  0033b: add    rax,0x2
  0033f: and    rdi,0xfffffffffffffffc
  00343: or     rdi,rax
  00346: rol    rdi,0x3d
  0034a: movq   xmm2,rdi
  0034f: jmp    0x366
  00354: call   0xffff4274
  00359: test   rax,rax
  0035c: je     0x3958b
  00362: movq   xmm2,xmm0
  00366: mov    rdi,QWORD PTR [rbp-0x68]
  0036a: test   rdi,0x1
  00371: jne    0x3959a
  00377: test   rdi,0x2
  0037e: je     0x3ba
  00384: xorps  xmm3,xmm3
  00387: movabs rax,0x8000000000000002
  00391: cmp    rdi,rax
  00394: je     0x3cc
  0039a: mov    rax,rdi
  0039d: sar    rax,0x3f
  003a1: add    rax,0x2
  003a5: and    rdi,0xfffffffffffffffc
  003a9: or     rdi,rax
  003ac: rol    rdi,0x3d
  003b0: movq   xmm3,rdi
  003b5: jmp    0x3cc
  003ba: call   0xffff4274
  003bf: test   rax,rax
  003c2: je     0x3959a
  003c8: movq   xmm3,xmm0
  003cc: mulsd  xmm2,xmm3
:00019 %3 = %6 / %7                         [Float][Float]
  003d0: mov    rdi,QWORD PTR [rbp-0x58]
  003d4: test   rdi,0x1
  003db: jne    0x395a9
  003e1: test   rdi,0x2
  003e8: je     0x424
  003ee: xorps  xmm5,xmm5
  003f1: movabs rax,0x8000000000000002
  003fb: cmp    rdi,rax
  003fe: je     0x436
  00404: mov    rax,rdi
  00407: sar    rax,0x3f
  0040b: add    rax,0x2
  0040f: and    rdi,0xfffffffffffffffc
  00413: or     rdi,rax
  00416: rol    rdi,0x3d
  0041a: movq   xmm5,rdi
  0041f: jmp    0x436
  00424: call   0xffff4274
  00429: test   rax,rax
  0042c: je     0x395a9
  00432: movq   xmm5,xmm0
  00436: movq   xmm6,xmm5
  0043a: movq   rax,xmm2
  0043f: test   rax,rax
  00442: je     0xffff4240
  00448: divsd  xmm6,xmm2
:00020 %6 = %2.call y()                     [Vec]
  0044c: mov    rdi,QWORD PTR [rbp-0x38]
  00450: test   rdi,0x7
  00457: jne    0x395c5
  0045d: cmp    DWORD PTR [rdi+0x4],0x28
  00461: jne    0x395c5
  00467: cmp    DWORD PTR [rip+0xffffffffffff6e97],0x26        # 0xffff7305
  0046e: jne    0x395c5
  00474: mov    esi,DWORD PTR [rip+0xa82]        # 0xefc
  0047a: cmp    esi,0xffffffff
  0047d: je     0x395ee
  00483: cmp    WORD PTR [rdi+0x2],0x3
  00488: jne    0x4a1
  0048e: cmp    esi,0x6
  00491: jge    0x4a1
  00497: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0049c: jmp    0x4e3
  004a1: sub    rsp,0x20
  004a5: movq   QWORD PTR [rsp],xmm2
  004aa: movq   QWORD PTR [rsp+0x8],xmm3
  004b0: movq   QWORD PTR [rsp+0x10],xmm4
  004b6: movq   QWORD PTR [rsp+0x18],xmm6
  004bc: movabs rax,0x55b5b00a3ef0
  004c6: call   rax
  004c8: movq   xmm2,QWORD PTR [rsp]
  004cd: movq   xmm3,QWORD PTR [rsp+0x8]
  004d3: movq   xmm4,QWORD PTR [rsp+0x10]
  004d9: movq   xmm6,QWORD PTR [rsp+0x18]
  004df: add    rsp,0x20
  004e3: mov    QWORD PTR [rbp-0x58],rax
:00021 
:00023 %7 = dynvar(2, %5)
  004e7: mov    rax,QWORD PTR [rbp-0x10]
  004eb: mov    rax,QWORD PTR [rax]
  004ee: mov    rax,QWORD PTR [rax-0x40]
  004f2: mov    QWORD PTR [rbp-0x60],rax
:00024 %8 = dynvar(2, %5)
  004f6: mov    rax,QWORD PTR [rbp-0x10]
  004fa: mov    rax,QWORD PTR [rax]
  004fd: mov    rax,QWORD PTR [rax-0x40]
  00501: mov    QWORD PTR [rbp-0x68],rax
:00025 %7 = %7 * %8                         [Float][Float]
  00505: mov    rdi,QWORD PTR [rbp-0x60]
  00509: test   rdi,0x1
  00510: jne    0x3964d
  00516: test   rdi,0x2
  0051d: je     0x559
  00523: xorps  xmm2,xmm2
  00526: movabs rax,0x8000000000000002
  00530: cmp    rdi,rax
  00533: je     0x56b
  00539: mov    rax,rdi
  0053c: sar    rax,0x3f
  00540: add    rax,0x2
  00544: and    rdi,0xfffffffffffffffc
  00548: or     rdi,rax
  0054b: rol    rdi,0x3d
  0054f: movq   xmm2,rdi
  00554: jmp    0x56b
  00559: call   0xffff4274
  0055e: test   rax,rax
  00561: je     0x3964d
  00567: movq   xmm2,xmm0
  0056b: mov    rdi,QWORD PTR [rbp-0x68]
  0056f: test   rdi,0x1
  00576: jne    0x39669
  0057c: test   rdi,0x2
  00583: je     0x5bf
  00589: xorps  xmm3,xmm3
  0058c: movabs rax,0x8000000000000002
  00596: cmp    rdi,rax
  00599: je     0x5d1
  0059f: mov    rax,rdi
  005a2: sar    rax,0x3f
  005a6: add    rax,0x2
  005aa: and    rdi,0xfffffffffffffffc
  005ae: or     rdi,rax
  005b1: rol    rdi,0x3d
  005b5: movq   xmm3,rdi
  005ba: jmp    0x5d1
  005bf: call   0xffff4274
  005c4: test   rax,rax
  005c7: je     0x39669
  005cd: movq   xmm3,xmm0
  005d1: mulsd  xmm2,xmm3
:00026 %4 = %6 / %7                         [Float][Float]
  005d5: mov    rdi,QWORD PTR [rbp-0x58]
  005d9: test   rdi,0x1
  005e0: jne    0x39685
  005e6: test   rdi,0x2
  005ed: je     0x629
  005f3: xorps  xmm5,xmm5
  005f6: movabs rax,0x8000000000000002
  00600: cmp    rdi,rax
  00603: je     0x63b
  00609: mov    rax,rdi
  0060c: sar    rax,0x3f
  00610: add    rax,0x2
  00614: and    rdi,0xfffffffffffffffc
  00618: or     rdi,rax
  0061b: rol    rdi,0x3d
  0061f: movq   xmm5,rdi
  00624: jmp    0x63b
  00629: call   0xffff4274
  0062e: test   rax,rax
  00631: je     0x39685
  00637: movq   xmm5,xmm0
  0063b: movq   xmm7,xmm5
  0063f: movq   rax,xmm2
  00644: test   rax,rax
  00647: je     0xffff4240
  0064d: divsd  xmm7,xmm2
:00027 %6 = %2.call z()                     [Vec]
  00651: mov    rdi,QWORD PTR [rbp-0x38]
  00655: test   rdi,0x7
  0065c: jne    0x396ae
  00662: cmp    DWORD PTR [rdi+0x4],0x28
  00666: jne    0x396ae
  0066c: cmp    DWORD PTR [rip+0xffffffffffff6c92],0x26        # 0xffff7305
  00673: jne    0x396ae
  00679: mov    esi,DWORD PTR [rip+0x885]        # 0xf04
  0067f: cmp    esi,0xffffffff
  00682: je     0x396e4
  00688: cmp    WORD PTR [rdi+0x2],0x3
  0068d: jne    0x6a6
  00693: cmp    esi,0x6
  00696: jge    0x6a6
  0069c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006a1: jmp    0x6f4
  006a6: sub    rsp,0x30
  006aa: movq   QWORD PTR [rsp],xmm2
  006af: movq   QWORD PTR [rsp+0x8],xmm3
  006b5: movq   QWORD PTR [rsp+0x10],xmm4
  006bb: movq   QWORD PTR [rsp+0x18],xmm6
  006c1: movq   QWORD PTR [rsp+0x20],xmm7
  006c7: movabs rax,0x55b5b00a3ef0
  006d1: call   rax
  006d3: movq   xmm2,QWORD PTR [rsp]
  006d8: movq   xmm3,QWORD PTR [rsp+0x8]
  006de: movq   xmm4,QWORD PTR [rsp+0x10]
  006e4: movq   xmm6,QWORD PTR [rsp+0x18]
  006ea: movq   xmm7,QWORD PTR [rsp+0x20]
  006f0: add    rsp,0x30
  006f4: mov    QWORD PTR [rbp-0x58],rax
:00028 
:00030 %7 = dynvar(2, %5)
  006f8: mov    rax,QWORD PTR [rbp-0x10]
  006fc: mov    rax,QWORD PTR [rax]
  006ff: mov    rax,QWORD PTR [rax-0x40]
  00703: mov    QWORD PTR [rbp-0x60],rax
:00031 %8 = dynvar(2, %5)
  00707: mov    rax,QWORD PTR [rbp-0x10]
  0070b: mov    rax,QWORD PTR [rax]
  0070e: mov    rax,QWORD PTR [rax-0x40]
  00712: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  00716: mov    rdi,QWORD PTR [rbp-0x60]
  0071a: test   rdi,0x1
  00721: jne    0x3974f
  00727: test   rdi,0x2
  0072e: je     0x76a
  00734: xorps  xmm2,xmm2
  00737: movabs rax,0x8000000000000002
  00741: cmp    rdi,rax
  00744: je     0x77c
  0074a: mov    rax,rdi
  0074d: sar    rax,0x3f
  00751: add    rax,0x2
  00755: and    rdi,0xfffffffffffffffc
  00759: or     rdi,rax
  0075c: rol    rdi,0x3d
  00760: movq   xmm2,rdi
  00765: jmp    0x77c
  0076a: call   0xffff4274
  0076f: test   rax,rax
  00772: je     0x3974f
  00778: movq   xmm2,xmm0
  0077c: mov    rdi,QWORD PTR [rbp-0x68]
  00780: test   rdi,0x1
  00787: jne    0x39778
  0078d: test   rdi,0x2
  00794: je     0x7d0
  0079a: xorps  xmm3,xmm3
  0079d: movabs rax,0x8000000000000002
  007a7: cmp    rdi,rax
  007aa: je     0x7e2
  007b0: mov    rax,rdi
  007b3: sar    rax,0x3f
  007b7: add    rax,0x2
  007bb: and    rdi,0xfffffffffffffffc
  007bf: or     rdi,rax
  007c2: rol    rdi,0x3d
  007c6: movq   xmm3,rdi
  007cb: jmp    0x7e2
  007d0: call   0xffff4274
  007d5: test   rax,rax
  007d8: je     0x39778
  007de: movq   xmm3,xmm0
  007e2: mulsd  xmm2,xmm3
:00033 %5 = %6 / %7                         [Float][Float]
  007e6: mov    rdi,QWORD PTR [rbp-0x58]
  007ea: test   rdi,0x1
  007f1: jne    0x397a1
  007f7: test   rdi,0x2
  007fe: je     0x83a
  00804: xorps  xmm5,xmm5
  00807: movabs rax,0x8000000000000002
  00811: cmp    rdi,rax
  00814: je     0x84c
  0081a: mov    rax,rdi
  0081d: sar    rax,0x3f
  00821: add    rax,0x2
  00825: and    rdi,0xfffffffffffffffc
  00829: or     rdi,rax
  0082c: rol    rdi,0x3d
  00830: movq   xmm5,rdi
  00835: jmp    0x84c
  0083a: call   0xffff4274
  0083f: test   rax,rax
  00842: je     0x397a1
  00848: movq   xmm5,xmm0
  0084c: movq   xmm8,xmm5
  00851: movq   rax,xmm2
  00856: test   rax,rax
  00859: je     0xffff4240
  0085f: divsd  xmm8,xmm2
:00034 %8 = %4
:00035 %7 = %0.call clamp(%8; 1)            [Scene]
  00864: movq   xmm0,xmm7
  00868: call   0xffff4398
  0086d: mov    QWORD PTR [rbp-0x68],rax
  00871: mov    rdi,QWORD PTR [rbp-0x28]
  00875: cmp    DWORD PTR [rip+0xffffffffffff6a89],0x26        # 0xffff7305
  0087c: jne    0x397d7
  00882: sub    rsp,0x30
  00886: movq   QWORD PTR [rsp],xmm4
  0088b: movq   QWORD PTR [rsp+0x8],xmm5
  00891: movq   QWORD PTR [rsp+0x10],xmm6
  00897: movq   QWORD PTR [rsp+0x18],xmm7
  0089d: movq   QWORD PTR [rsp+0x20],xmm8
  008a4: mov    QWORD PTR [rsp-0x20],0x0
  008ad: mov    QWORD PTR [rsp-0x38],rcx
  008b2: mov    rax,QWORD PTR [rbx]
  008b5: lea    rsi,[rsp-0x18]
  008ba: mov    QWORD PTR [rsi],rax
  008bd: mov    QWORD PTR [rbx],rsi
  008c0: mov    rax,QWORD PTR [rbp-0x28]
  008c4: mov    QWORD PTR [rsp-0x38],rax
  008c9: mov    rdi,0x1
  008d0: lea    r8,[rsp-0x40]
  008d5: mov    rax,QWORD PTR [rbp-0x68]
  008d9: mov    QWORD PTR [r8],rax
  008dc: sub    r8,0x8
  008e0: mov    QWORD PTR [rsp-0x30],0x0
  008e9: movabs rax,0x40000003b
  008f3: mov    QWORD PTR [rsp-0x28],rax
  008f8: movabs r13,0x55b5b080a8e0
  00902: call   0xffffaa18
  00907: lea    rdi,[rbp-0x8]
  0090b: mov    QWORD PTR [rbx],rdi
  0090e: movq   xmm4,QWORD PTR [rsp]
  00913: movq   xmm5,QWORD PTR [rsp+0x8]
  00919: movq   xmm6,QWORD PTR [rsp+0x10]
  0091f: movq   xmm7,QWORD PTR [rsp+0x18]
  00925: movq   xmm8,QWORD PTR [rsp+0x20]
  0092c: add    rsp,0x30
  00930: movabs r13,0x55b5b07e6c50
  0093a: test   rax,rax
  0093d: je     0xffff421b
  00943: mov    QWORD PTR [rbp-0x60],rax
:00036 
:00038 %6 = %7.call chr()                   [Integer]
  00947: mov    rdi,QWORD PTR [rbp-0x60]
  0094b: test   rdi,0x1
  00952: je     0x3980e
  00958: cmp    DWORD PTR [rip+0xffffffffffff69a6],0x26        # 0xffff7305
  0095f: jne    0x3980e
  00965: mov    r9,0x0
  0096c: sub    rsp,0x20
  00970: movq   QWORD PTR [rsp],xmm4
  00975: movq   QWORD PTR [rsp+0x8],xmm6
  0097b: movq   QWORD PTR [rsp+0x10],xmm7
  00981: movq   QWORD PTR [rsp+0x18],xmm8
  00988: mov    rdx,rdi
  0098b: mov    QWORD PTR [rsp-0x20],0x0
  00994: mov    QWORD PTR [rsp-0x38],rcx
  00999: mov    rax,QWORD PTR [rbx]
  0099c: lea    rsi,[rsp-0x18]
  009a1: mov    QWORD PTR [rsi],rax
  009a4: mov    QWORD PTR [rbx],rsi
  009a7: lea    rcx,[rbp-0x68]
  009ab: mov    r8,0x0
  009b2: call   0x39845
  009b7: lea    rdi,[rbp-0x8]
  009bb: mov    QWORD PTR [rbx],rdi
  009be: movq   xmm4,QWORD PTR [rsp]
  009c3: movq   xmm6,QWORD PTR [rsp+0x8]
  009c9: movq   xmm7,QWORD PTR [rsp+0x10]
  009cf: movq   xmm8,QWORD PTR [rsp+0x18]
  009d6: add    rsp,0x20
  009da: movabs r13,0x55b5b07e6c80
  009e4: test   rax,rax
  009e7: je     0xffff421b
  009ed: mov    QWORD PTR [rbp-0x58],rax
:00039 
:00041 _ = %0.call print(%6; 1)             [Scene]
  009f1: mov    rdi,QWORD PTR [rbp-0x28]
  009f5: cmp    DWORD PTR [rip+0xffffffffffff6909],0x26        # 0xffff7305
  009fc: jne    0x39877
  00a02: mov    r9,0x0
  00a09: sub    rsp,0x20
  00a0d: movq   QWORD PTR [rsp],xmm4
  00a12: movq   QWORD PTR [rsp+0x8],xmm6
  00a18: movq   QWORD PTR [rsp+0x10],xmm7
  00a1e: movq   QWORD PTR [rsp+0x18],xmm8
  00a25: mov    rdx,rdi
  00a28: mov    QWORD PTR [rsp-0x20],0x0
  00a31: mov    QWORD PTR [rsp-0x38],rcx
  00a36: mov    rax,QWORD PTR [rbx]
  00a39: lea    rsi,[rsp-0x18]
  00a3e: mov    QWORD PTR [rsi],rax
  00a41: mov    QWORD PTR [rbx],rsi
  00a44: lea    rcx,[rbp-0x58]
  00a48: mov    r8,0x1
  00a4f: call   0x398ae
  00a54: lea    rdi,[rbp-0x8]
  00a58: mov    QWORD PTR [rbx],rdi
  00a5b: movq   xmm4,QWORD PTR [rsp]
  00a60: movq   xmm6,QWORD PTR [rsp+0x8]
  00a66: movq   xmm7,QWORD PTR [rsp+0x10]
  00a6c: movq   xmm8,QWORD PTR [rsp+0x18]
  00a73: add    rsp,0x20
  00a77: movabs r13,0x55b5b07e6cb0
  00a81: test   rax,rax
  00a84: je     0xffff421b
:00042 
:00044 %8 = %3
:00045 %7 = %0.call clamp(%8; 1)            [Scene]
  00a8a: movq   xmm0,xmm6
  00a8e: call   0xffff4398
  00a93: mov    QWORD PTR [rbp-0x68],rax
  00a97: mov    rdi,QWORD PTR [rbp-0x28]
  00a9b: cmp    DWORD PTR [rip+0xffffffffffff6863],0x26        # 0xffff7305
  00aa2: jne    0x398e0
  00aa8: sub    rsp,0x20
  00aac: movq   QWORD PTR [rsp],xmm4
  00ab1: movq   QWORD PTR [rsp+0x8],xmm6
  00ab7: movq   QWORD PTR [rsp+0x10],xmm7
  00abd: movq   QWORD PTR [rsp+0x18],xmm8
  00ac4: mov    QWORD PTR [rsp-0x20],0x0
  00acd: mov    QWORD PTR [rsp-0x38],rcx
  00ad2: mov    rax,QWORD PTR [rbx]
  00ad5: lea    rsi,[rsp-0x18]
  00ada: mov    QWORD PTR [rsi],rax
  00add: mov    QWORD PTR [rbx],rsi
  00ae0: mov    rax,QWORD PTR [rbp-0x28]
  00ae4: mov    QWORD PTR [rsp-0x38],rax
  00ae9: mov    rdi,0x1
  00af0: lea    r8,[rsp-0x40]
  00af5: mov    rax,QWORD PTR [rbp-0x68]
  00af9: mov    QWORD PTR [r8],rax
  00afc: sub    r8,0x8
  00b00: mov    QWORD PTR [rsp-0x30],0x0
  00b09: movabs rax,0x40000003b
  00b13: mov    QWORD PTR [rsp-0x28],rax
  00b18: movabs r13,0x55b5b080a8e0
  00b22: call   0xffffaa18
  00b27: lea    rdi,[rbp-0x8]
  00b2b: mov    QWORD PTR [rbx],rdi
  00b2e: movq   xmm4,QWORD PTR [rsp]
  00b33: movq   xmm6,QWORD PTR [rsp+0x8]
  00b39: movq   xmm7,QWORD PTR [rsp+0x10]
  00b3f: movq   xmm8,QWORD PTR [rsp+0x18]
  00b46: add    rsp,0x20
  00b4a: movabs r13,0x55b5b07e6cf0
  00b54: test   rax,rax
  00b57: je     0xffff421b
  00b5d: mov    QWORD PTR [rbp-0x60],rax
:00046 
:00048 %6 = %7.call chr()                   [Integer]
  00b61: mov    rdi,QWORD PTR [rbp-0x60]
  00b65: test   rdi,0x1
  00b6c: je     0x39917
  00b72: cmp    DWORD PTR [rip+0xffffffffffff678c],0x26        # 0xffff7305
  00b79: jne    0x39917
  00b7f: mov    r9,0x0
  00b86: sub    rsp,0x20
  00b8a: movq   QWORD PTR [rsp],xmm4
  00b8f: movq   QWORD PTR [rsp+0x8],xmm6
  00b95: movq   QWORD PTR [rsp+0x10],xmm7
  00b9b: movq   QWORD PTR [rsp+0x18],xmm8
  00ba2: mov    rdx,rdi
  00ba5: mov    QWORD PTR [rsp-0x20],0x0
  00bae: mov    QWORD PTR [rsp-0x38],rcx
  00bb3: mov    rax,QWORD PTR [rbx]
  00bb6: lea    rsi,[rsp-0x18]
  00bbb: mov    QWORD PTR [rsi],rax
  00bbe: mov    QWORD PTR [rbx],rsi
  00bc1: lea    rcx,[rbp-0x68]
  00bc5: mov    r8,0x0
  00bcc: call   0x3994e
  00bd1: lea    rdi,[rbp-0x8]
  00bd5: mov    QWORD PTR [rbx],rdi
  00bd8: movq   xmm4,QWORD PTR [rsp]
  00bdd: movq   xmm6,QWORD PTR [rsp+0x8]
  00be3: movq   xmm7,QWORD PTR [rsp+0x10]
  00be9: movq   xmm8,QWORD PTR [rsp+0x18]
  00bf0: add    rsp,0x20
  00bf4: movabs r13,0x55b5b07e6d20
  00bfe: test   rax,rax
  00c01: je     0xffff421b
  00c07: mov    QWORD PTR [rbp-0x58],rax
:00049 
:00051 _ = %0.call print(%6; 1)             [Scene]
  00c0b: mov    rdi,QWORD PTR [rbp-0x28]
  00c0f: cmp    DWORD PTR [rip+0xffffffffffff66ef],0x26        # 0xffff7305
  00c16: jne    0x39980
  00c1c: mov    r9,0x0
  00c23: sub    rsp,0x20
  00c27: movq   QWORD PTR [rsp],xmm4
  00c2c: movq   QWORD PTR [rsp+0x8],xmm6
  00c32: movq   QWORD PTR [rsp+0x10],xmm7
  00c38: movq   QWORD PTR [rsp+0x18],xmm8
  00c3f: mov    rdx,rdi
  00c42: mov    QWORD PTR [rsp-0x20],0x0
  00c4b: mov    QWORD PTR [rsp-0x38],rcx
  00c50: mov    rax,QWORD PTR [rbx]
  00c53: lea    rsi,[rsp-0x18]
  00c58: mov    QWORD PTR [rsi],rax
  00c5b: mov    QWORD PTR [rbx],rsi
  00c5e: lea    rcx,[rbp-0x58]
  00c62: mov    r8,0x1
  00c69: call   0x399b7
  00c6e: lea    rdi,[rbp-0x8]
  00c72: mov    QWORD PTR [rbx],rdi
  00c75: movq   xmm4,QWORD PTR [rsp]
  00c7a: movq   xmm6,QWORD PTR [rsp+0x8]
  00c80: movq   xmm7,QWORD PTR [rsp+0x10]
  00c86: movq   xmm8,QWORD PTR [rsp+0x18]
  00c8d: add    rsp,0x20
  00c91: movabs r13,0x55b5b07e6d50
  00c9b: test   rax,rax
  00c9e: je     0xffff421b
:00052 
:00054 %9 = %5
:00055 %8 = %0.call clamp(%9; 1)            [Scene]
  00ca4: movq   xmm0,xmm8
  00ca9: call   0xffff4398
  00cae: mov    QWORD PTR [rbp-0x70],rax
  00cb2: mov    rdi,QWORD PTR [rbp-0x28]
  00cb6: cmp    DWORD PTR [rip+0xffffffffffff6648],0x26        # 0xffff7305
  00cbd: jne    0x399e9
  00cc3: sub    rsp,0x20
  00cc7: movq   QWORD PTR [rsp],xmm6
  00ccc: movq   QWORD PTR [rsp+0x8],xmm7
  00cd2: movq   QWORD PTR [rsp+0x10],xmm8
  00cd9: mov    QWORD PTR [rsp-0x20],0x0
  00ce2: mov    QWORD PTR [rsp-0x38],rcx
  00ce7: mov    rax,QWORD PTR [rbx]
  00cea: lea    rsi,[rsp-0x18]
  00cef: mov    QWORD PTR [rsi],rax
  00cf2: mov    QWORD PTR [rbx],rsi
  00cf5: mov    rax,QWORD PTR [rbp-0x28]
  00cf9: mov    QWORD PTR [rsp-0x38],rax
  00cfe: mov    rdi,0x1
  00d05: lea    r8,[rsp-0x40]
  00d0a: mov    rax,QWORD PTR [rbp-0x70]
  00d0e: mov    QWORD PTR [r8],rax
  00d11: sub    r8,0x8
  00d15: mov    QWORD PTR [rsp-0x30],0x0
  00d1e: movabs rax,0x40000003b
  00d28: mov    QWORD PTR [rsp-0x28],rax
  00d2d: movabs r13,0x55b5b080a8e0
  00d37: call   0xffffaa18
  00d3c: lea    rdi,[rbp-0x8]
  00d40: mov    QWORD PTR [rbx],rdi
  00d43: movq   xmm6,QWORD PTR [rsp]
  00d48: movq   xmm7,QWORD PTR [rsp+0x8]
  00d4e: movq   xmm8,QWORD PTR [rsp+0x10]
  00d55: add    rsp,0x20
  00d59: movabs r13,0x55b5b07e6d90
  00d63: test   rax,rax
  00d66: je     0xffff421b
  00d6c: mov    QWORD PTR [rbp-0x68],rax
:00056 
:00058 %7 = %8.call chr()                   [Integer]
  00d70: mov    rdi,QWORD PTR [rbp-0x68]
  00d74: test   rdi,0x1
  00d7b: je     0x39a20
  00d81: cmp    DWORD PTR [rip+0xffffffffffff657d],0x26        # 0xffff7305
  00d88: jne    0x39a20
  00d8e: mov    r9,0x0
  00d95: sub    rsp,0x20
  00d99: movq   QWORD PTR [rsp],xmm6
  00d9e: movq   QWORD PTR [rsp+0x8],xmm7
  00da4: movq   QWORD PTR [rsp+0x10],xmm8
  00dab: mov    rdx,rdi
  00dae: mov    QWORD PTR [rsp-0x20],0x0
  00db7: mov    QWORD PTR [rsp-0x38],rcx
  00dbc: mov    rax,QWORD PTR [rbx]
  00dbf: lea    rsi,[rsp-0x18]
  00dc4: mov    QWORD PTR [rsi],rax
  00dc7: mov    QWORD PTR [rbx],rsi
  00dca: lea    rcx,[rbp-0x70]
  00dce: mov    r8,0x0
  00dd5: call   0x39a57
  00dda: lea    rdi,[rbp-0x8]
  00dde: mov    QWORD PTR [rbx],rdi
  00de1: movq   xmm6,QWORD PTR [rsp]
  00de6: movq   xmm7,QWORD PTR [rsp+0x8]
  00dec: movq   xmm8,QWORD PTR [rsp+0x10]
  00df3: add    rsp,0x20
  00df7: movabs r13,0x55b5b07e6dc0
  00e01: test   rax,rax
  00e04: je     0xffff421b
  00e0a: mov    QWORD PTR [rbp-0x60],rax
:00059 
:00061 %6 = %0.call print(%7; 1)            [Scene]
  00e0e: mov    rdi,QWORD PTR [rbp-0x28]
  00e12: cmp    DWORD PTR [rip+0xffffffffffff64ec],0x26        # 0xffff7305
  00e19: jne    0x39a89
  00e1f: mov    r9,0x0
  00e26: sub    rsp,0x20
  00e2a: movq   QWORD PTR [rsp],xmm6
  00e2f: movq   QWORD PTR [rsp+0x8],xmm7
  00e35: movq   QWORD PTR [rsp+0x10],xmm8
  00e3c: mov    rdx,rdi
  00e3f: mov    QWORD PTR [rsp-0x20],0x0
  00e48: mov    QWORD PTR [rsp-0x38],rcx
  00e4d: mov    rax,QWORD PTR [rbx]
  00e50: lea    rsi,[rsp-0x18]
  00e55: mov    QWORD PTR [rsi],rax
  00e58: mov    QWORD PTR [rbx],rsi
  00e5b: lea    rcx,[rbp-0x60]
  00e5f: mov    r8,0x1
  00e66: call   0x39ac0
  00e6b: lea    rdi,[rbp-0x8]
  00e6f: mov    QWORD PTR [rbx],rdi
  00e72: movq   xmm6,QWORD PTR [rsp]
  00e77: movq   xmm7,QWORD PTR [rsp+0x8]
  00e7d: movq   xmm8,QWORD PTR [rsp+0x10]
  00e84: add    rsp,0x20
  00e88: movabs r13,0x55b5b07e6df0
  00e92: test   rax,rax
  00e95: je     0xffff421b
  00e9b: mov    QWORD PTR [rbp-0x58],rax
:00062 
:00064 ret %6
  00e9f: mov    rax,QWORD PTR [rbp-0x58]
  00ea3: leave  
  00ea4: ret    
==> start whole compile: <unnamed> FuncId(79) self_class:Scene start:[00000] bytecode:0x55b5b0796830
<== finished compile. elapsed:45.5µs
offset:Pos(52512) code: 299 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: je     0x70
  00014: jl     0x1f
  0001a: jmp    0x70
  0001f: mov    eax,0x1
  00024: sub    eax,edx
  00026: test   rax,rax
  00029: je     0x45
  0002f: lea    rdi,[rbp-0x38]
  00033: mov    QWORD PTR [rdi+rax*8],0x4
  0003b: sub    rax,0x1
  0003f: jne    0x33
  00045: mov    edx,0x1
  0004a: mov    eax,0x1
  0004f: sub    eax,edx
  00051: test   rax,rax
  00054: je     0x70
  0005a: lea    rdi,[rbp-0x38]
  0005e: mov    QWORD PTR [rdi+rax*8],0x0
  00066: sub    rax,0x1
  0006a: jne    0x5e
  00070: mov    QWORD PTR [rbp-0x38],0x4
  00078: mov    QWORD PTR [rbp-0x40],0x4
  00080: mov    rdi,QWORD PTR [rbp-0x28]
  00084: test   rdi,0x7
  0008b: jne    0x38bf9
  00091: cmp    DWORD PTR [rdi+0x4],0x32
  00095: jne    0x38bf9
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  0009b: mov    rax,QWORD PTR [rbp-0x10]
  0009f: mov    rax,QWORD PTR [rax-0x20]
  000a3: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = literal[5308417]
  000a7: mov    rax,0xa20003
  000ae: mov    QWORD PTR [rbp-0x40],rax
:00003 _ = %2.call times(&%3)               [Integer]
  000b2: mov    rdi,QWORD PTR [rbp-0x38]
  000b6: test   rdi,0x1
  000bd: je     0x38c08
  000c3: cmp    DWORD PTR [rip+0xffffffffffff6333],0x26        # 0xffff63fd
  000ca: jne    0x38c08
  000d0: mov    r9,QWORD PTR [rbp-0x40]
  000d4: mov    rdx,rdi
  000d7: mov    QWORD PTR [rsp-0x20],0x0
  000e0: mov    QWORD PTR [rsp-0x38],rcx
  000e5: mov    rax,QWORD PTR [rbx]
  000e8: lea    rsi,[rsp-0x18]
  000ed: mov    QWORD PTR [rsi],rax
  000f0: mov    QWORD PTR [rbx],rsi
  000f3: lea    rcx,[rbp-0x48]
  000f7: mov    r8,0x0
  000fe: call   0x38c17
  00103: lea    rdi,[rbp-0x8]
  00107: mov    QWORD PTR [rbx],rdi
  0010a: movabs r13,0x55b5b0796880
  00114: test   rax,rax
  00117: je     0xffff3313
:00004 
:00006 %2 = nil
  0011d: mov    QWORD PTR [rbp-0x38],0x4
:00007 ret %2
  00125: mov    rax,QWORD PTR [rbp-0x38]
  00129: leave  
  0012a: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55b5b07be970
<== finished compile. elapsed:159.2µs
offset:Pos(53860) code: 7410 bytes  data: 402 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x38705
  00022:    	jmp    0x38705
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086: ff 	mov    QWORD PTR [rbp-0x98],rax
  0008d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00094:    	mov    rdi,QWORD PTR [rbp-0x28]
  00098: 00 	test   rdi,0x7
  0009f:    	jne    0x38714
  000a5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  000a9:    	jne    0x38714
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  000af:    	mov    rdi,QWORD PTR [rbp-0x30]
  000b3: 00 	test   rdi,0x7
  000ba:    	jne    0x38723
  000c0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000c4:    	jne    0x38723
  000ca: 26 	cmp    DWORD PTR [rip+0xffffffffffff5de8],0x26        # 0xffff5eb9
  000d1:    	jne    0x38723
  000d7:    	mov    esi,DWORD PTR [rip+0x1c19]        # 0x1cf6
  000dd:    	cmp    esi,0xffffffff
  000e0:    	je     0x38732
  000e6:    	cmp    WORD PTR [rdi+0x2],0x3
  000eb:    	jne    0x104
  000f1:    	cmp    esi,0x6
  000f4:    	jge    0x104
  000fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff:    	jmp    0x110
  00104: b5 	movabs rax,0x55b5b00a3ef0
  0010e:    	call   rax
  00110:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  00114:    	mov    rdi,QWORD PTR [rbp-0x28]
  00118:    	mov    rax,QWORD PTR [rdi+0x10]
  0011c:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00120:    	mov    rdi,QWORD PTR [rbp-0x70]
  00124: 00 	test   rdi,0x7
  0012b:    	jne    0x3875b
  00131:    	cmp    DWORD PTR [rdi+0x4],0x28
  00135:    	jne    0x3875b
  0013b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5d77],0x26        # 0xffff5eb9
  00142:    	jne    0x3875b
  00148: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00151:    	mov    QWORD PTR [rsp-0x38],rcx
  00156:    	mov    rax,QWORD PTR [rbx]
  00159:    	lea    rsi,[rsp-0x18]
  0015e:    	mov    QWORD PTR [rsi],rax
  00161:    	mov    QWORD PTR [rbx],rsi
  00164:    	mov    rax,QWORD PTR [rbp-0x70]
  00168:    	mov    QWORD PTR [rsp-0x38],rax
  0016d: 00 	mov    rdi,0x1
  00174:    	lea    r8,[rsp-0x40]
  00179:    	mov    rax,QWORD PTR [rbp-0x78]
  0017d:    	mov    QWORD PTR [r8],rax
  00180:    	sub    r8,0x8
  00184: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0018d: 08 	movabs rax,0x800000040
  00197:    	mov    QWORD PTR [rsp-0x28],rax
  0019c: b5 	movabs r13,0x55b5b08082c0
  001a6:    	call   0xffff6b98
  001ab:    	lea    rdi,[rbp-0x8]
  001af:    	mov    QWORD PTR [rbx],rdi
  001b2: b5 	movabs r13,0x55b5b07be9e0
  001bc:    	test   rax,rax
  001bf:    	je     0xffff2dcf
  001c5:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001c9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001cd: 00 	test   rdi,0x7
  001d4:    	jne    0x3876a
  001da:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001de:    	jne    0x3876a
  001e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff5cce],0x26        # 0xffff5eb9
  001eb:    	jne    0x3876a
  001f1:    	mov    esi,DWORD PTR [rip+0x1b07]        # 0x1cfe
  001f7:    	cmp    esi,0xffffffff
  001fa:    	je     0x38779
  00200:    	cmp    WORD PTR [rdi+0x2],0x3
  00205:    	jne    0x21e
  0020b:    	cmp    esi,0x6
  0020e:    	jge    0x21e
  00214:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00219:    	jmp    0x22a
  0021e: b5 	movabs rax,0x55b5b00a3ef0
  00228:    	call   rax
  0022a:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0022e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00232: 00 	test   rdi,0x7
  00239:    	jne    0x387a2
  0023f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00243:    	jne    0x387a2
  00249: 26 	cmp    DWORD PTR [rip+0xffffffffffff5c69],0x26        # 0xffff5eb9
  00250:    	jne    0x387a2
  00256: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0025f:    	mov    QWORD PTR [rsp-0x38],rcx
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rsi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rsi],rax
  0026f:    	mov    QWORD PTR [rbx],rsi
  00272:    	mov    rax,QWORD PTR [rbp-0x40]
  00276:    	mov    QWORD PTR [rsp-0x38],rax
  0027b: 00 	mov    rdi,0x1
  00282:    	lea    r8,[rsp-0x40]
  00287:    	mov    rax,QWORD PTR [rbp-0x70]
  0028b:    	mov    QWORD PTR [r8],rax
  0028e:    	sub    r8,0x8
  00292: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0029b: 05 	movabs rax,0x500000042
  002a5:    	mov    QWORD PTR [rsp-0x28],rax
  002aa: b5 	movabs r13,0x55b5b07ddec0
  002b4:    	call   0xffff6c2a
  002b9:    	lea    rdi,[rbp-0x8]
  002bd:    	mov    QWORD PTR [rbx],rdi
  002c0: b5 	movabs r13,0x55b5b07bea40
  002ca:    	test   rax,rax
  002cd:    	je     0xffff2dcf
  002d3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002d7:    	mov    rax,QWORD PTR [rbp-0x40]
  002db:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002df:    	mov    rdi,QWORD PTR [rbp-0x40]
  002e3: 00 	test   rdi,0x7
  002ea:    	jne    0x387b1
  002f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  002f4:    	jne    0x387b1
  002fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff5bb8],0x26        # 0xffff5eb9
  00301:    	jne    0x387b1
  00307: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00310:    	mov    QWORD PTR [rsp-0x38],rcx
  00315:    	mov    rax,QWORD PTR [rbx]
  00318:    	lea    rsi,[rsp-0x18]
  0031d:    	mov    QWORD PTR [rsi],rax
  00320:    	mov    QWORD PTR [rbx],rsi
  00323:    	mov    rax,QWORD PTR [rbp-0x40]
  00327:    	mov    QWORD PTR [rsp-0x38],rax
  0032c: 00 	mov    rdi,0x1
  00333:    	lea    r8,[rsp-0x40]
  00338:    	mov    rax,QWORD PTR [rbp-0x78]
  0033c:    	mov    QWORD PTR [r8],rax
  0033f:    	sub    r8,0x8
  00343: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0034c: 05 	movabs rax,0x500000042
  00356:    	mov    QWORD PTR [rsp-0x28],rax
  0035b: b5 	movabs r13,0x55b5b07ddec0
  00365:    	call   0xffff6c2a
  0036a:    	lea    rdi,[rbp-0x8]
  0036e:    	mov    QWORD PTR [rbx],rdi
  00371: b5 	movabs r13,0x55b5b07bea80
  0037b:    	test   rax,rax
  0037e:    	je     0xffff2dcf
  00384:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00388:    	mov    rdi,QWORD PTR [rbp-0x28]
  0038c:    	mov    rax,QWORD PTR [rdi+0x18]
  00390:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00394:    	mov    rdi,QWORD PTR [rbp-0x28]
  00398:    	mov    rax,QWORD PTR [rdi+0x18]
  0039c:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  003a0:    	mov    rdi,QWORD PTR [rbp-0x78]
  003a4: 00 	test   rdi,0x1
  003ab:    	jne    0x387c0
  003b1: 00 	test   rdi,0x2
  003b8:    	je     0x3f4
  003be:    	xorps  xmm2,xmm2
  003c1: 00 	movabs rax,0x8000000000000002
  003cb:    	cmp    rdi,rax
  003ce:    	je     0x406
  003d4:    	mov    rax,rdi
  003d7:    	sar    rax,0x3f
  003db:    	add    rax,0x2
  003df:    	and    rdi,0xfffffffffffffffc
  003e3:    	or     rdi,rax
  003e6:    	rol    rdi,0x3d
  003ea:    	movq   xmm2,rdi
  003ef:    	jmp    0x406
  003f4:    	call   0xffff2e28
  003f9:    	test   rax,rax
  003fc:    	je     0x387c0
  00402:    	movq   xmm2,xmm0
  00406:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040a: 00 	test   rdi,0x1
  00411:    	jne    0x387cf
  00417: 00 	test   rdi,0x2
  0041e:    	je     0x45a
  00424:    	xorps  xmm3,xmm3
  00427: 00 	movabs rax,0x8000000000000002
  00431:    	cmp    rdi,rax
  00434:    	je     0x46c
  0043a:    	mov    rax,rdi
  0043d:    	sar    rax,0x3f
  00441:    	add    rax,0x2
  00445:    	and    rdi,0xfffffffffffffffc
  00449:    	or     rdi,rax
  0044c:    	rol    rdi,0x3d
  00450:    	movq   xmm3,rdi
  00455:    	jmp    0x46c
  0045a:    	call   0xffff2e28
  0045f:    	test   rax,rax
  00462:    	je     0x387cf
  00468:    	movq   xmm3,xmm0
  0046c:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00470:    	mov    rdi,QWORD PTR [rbp-0x70]
  00474: 00 	test   rdi,0x1
  0047b:    	jne    0x387de
  00481: 00 	test   rdi,0x2
  00488:    	je     0x4c4
  0048e:    	xorps  xmm4,xmm4
  00491: 00 	movabs rax,0x8000000000000002
  0049b:    	cmp    rdi,rax
  0049e:    	je     0x4d6
  004a4:    	mov    rax,rdi
  004a7:    	sar    rax,0x3f
  004ab:    	add    rax,0x2
  004af:    	and    rdi,0xfffffffffffffffc
  004b3:    	or     rdi,rax
  004b6:    	rol    rdi,0x3d
  004ba:    	movq   xmm4,rdi
  004bf:    	jmp    0x4d6
  004c4:    	call   0xffff2e28
  004c9:    	test   rax,rax
  004cc:    	je     0x387de
  004d2:    	movq   xmm4,xmm0
  004d6:    	movq   xmm5,xmm4
  004da:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004de:    	mov    rdi,QWORD PTR [rbp-0x48]
  004e2: 00 	test   rdi,0x1
  004e9:    	jne    0x387fa
  004ef: 00 	test   rdi,0x2
  004f6:    	je     0x532
  004fc:    	xorps  xmm6,xmm6
  004ff: 00 	movabs rax,0x8000000000000002
  00509:    	cmp    rdi,rax
  0050c:    	je     0x544
  00512:    	mov    rax,rdi
  00515:    	sar    rax,0x3f
  00519:    	add    rax,0x2
  0051d:    	and    rdi,0xfffffffffffffffc
  00521:    	or     rdi,rax
  00524:    	rol    rdi,0x3d
  00528:    	movq   xmm6,rdi
  0052d:    	jmp    0x544
  00532:    	call   0xffff2e28
  00537:    	test   rax,rax
  0053a:    	je     0x387fa
  00540:    	movq   xmm6,xmm0
  00544:    	movq   xmm4,xmm6
  00548:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0054c:    	movq   xmm7,xmm4
  00550:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00554: 00 	movq   xmm4,QWORD PTR [rip+0x17b0]        # 0x1d0c
  0055c: 00 	movabs rax,0x8000000000000002
  00566:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0056a:    	ucomisd xmm7,xmm4
  0056e:    	jbe    0x39dd6
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00574: 01 	sub    DWORD PTR [rip+0x1799],0x1        # 0x1d14
  0057b:    	je     0x38866
  00581:    	movq   xmm0,xmm6
  00585:    	call   0xffff2f4c
  0058a:    	mov    QWORD PTR [rbp-0x70],rax
  0058e:    	sub    rsp,0x30
  00592:    	movq   QWORD PTR [rsp],xmm2
  00597:    	movq   QWORD PTR [rsp+0x8],xmm3
  0059d:    	movq   QWORD PTR [rsp+0x10],xmm5
  005a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  005a9:    	movq   QWORD PTR [rsp+0x20],xmm7
  005af:    	mov    rdi,QWORD PTR [rbp-0x70]
  005b3:    	mov    rdx,rdi
  005b6:    	mov    rdi,rbx
  005b9:    	mov    rsi,r12
  005bc: b5 	movabs rax,0x55b5b00e59e0
  005c6:    	call   rax
  005c8:    	movq   xmm2,QWORD PTR [rsp]
  005cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005df:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005e5:    	add    rsp,0x30
  005e9: b5 	movabs r13,0x55b5b07beb40
  005f3:    	test   rax,rax
  005f6:    	je     0xffff2dcf
  005fc:    	mov    QWORD PTR [rbp-0x70],rax
:00029 %11 = const[Math]                    [<INVALID>]
  00600: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff58c5]        # 0xffff5ecc
  00607: 00 	cmp    rax,QWORD PTR [rip+0x171e]        # 0x1d2c
  0060e:    	jne    0x38888
  00614: 00 	mov    rax,QWORD PTR [rip+0x1701]        # 0x1d1c
  0061b:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  0061f: 01 	sub    DWORD PTR [rip+0x170e],0x1        # 0x1d34
  00626:    	je     0x38941
  0062c:    	movq   xmm0,xmm7
  00630:    	call   0xffff2f4c
  00635: ff 	mov    QWORD PTR [rbp-0x88],rax
  0063c:    	sub    rsp,0x20
  00640:    	movq   QWORD PTR [rsp],xmm5
  00645:    	movq   QWORD PTR [rsp+0x8],xmm6
  0064b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00651:    	mov    rdi,QWORD PTR [rbp-0x80]
  00655: b5 	movabs rax,0x55b5b009e670
  0065f:    	call   rax
  00661:    	mov    r15d,eax
  00664: 00 	cmp    r15d,DWORD PTR [rip+0x16d1]        # 0x1d3c
  0066b:    	jne    0x38963
  00671:    	mov    eax,DWORD PTR [rip+0xffffffffffff5842]        # 0xffff5eb9
  00677:    	cmp    DWORD PTR [rip+0x16bb],eax        # 0x1d38
  0067d:    	jne    0x38963
  00683: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0068c:    	mov    QWORD PTR [rsp-0x38],rcx
  00691:    	mov    rax,QWORD PTR [rbx]
  00694:    	lea    rsi,[rsp-0x18]
  00699:    	mov    QWORD PTR [rsi],rax
  0069c:    	mov    QWORD PTR [rbx],rsi
  0069f:    	mov    rax,QWORD PTR [rbp-0x80]
  006a3:    	mov    QWORD PTR [rsp-0x38],rax
  006a8: 00 	mov    rdi,0x1
  006af:    	lea    r8,[rsp-0x40]
  006b4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  006bb:    	mov    QWORD PTR [r8],rax
  006be:    	sub    r8,0x8
  006c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006cb: 00 	movabs rax,0x0
  006d5:    	mov    QWORD PTR [rsp-0x28],rax
  006da: 00 	movabs r13,0x0
  006e4:    	call   0xffff2d9c
  006e9:    	lea    rdi,[rbp-0x8]
  006ed:    	mov    QWORD PTR [rbx],rdi
  006f0:    	movq   xmm5,QWORD PTR [rsp]
  006f5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006fb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00701:    	add    rsp,0x20
  00705:    	test   rax,rax
  00708:    	je     0x389cf
  0070e:    	mov    QWORD PTR [rbp-0x78],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00712: 01 	sub    DWORD PTR [rip+0x1627],0x1        # 0x1d40
  00719:    	je     0x38a07
  0071f:    	mov    rdi,QWORD PTR [rbp-0x70]
  00723:    	mov    rsi,QWORD PTR [rbp-0x78]
  00727:    	sub    rsp,0x20
  0072b:    	movq   QWORD PTR [rsp],xmm5
  00730:    	movq   QWORD PTR [rsp+0x8],xmm6
  00736:    	movq   QWORD PTR [rsp+0x10],xmm7
  0073c:    	mov    rdx,rdi
  0073f:    	mov    rcx,rsi
  00742:    	mov    rdi,rbx
  00745:    	mov    rsi,r12
  00748: b5 	movabs rax,0x55b5b00e7bd0
  00752:    	call   rax
  00754:    	movq   xmm5,QWORD PTR [rsp]
  00759:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0075f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00765:    	add    rsp,0x20
  00769: b5 	movabs r13,0x55b5b07beba0
  00773:    	test   rax,rax
  00776:    	je     0xffff2dcf
  0077c:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %9 = literal[0.0]
  00780: 00 	movq   xmm2,QWORD PTR [rip+0x15c4]        # 0x1d4c
  00788: 00 	movabs rax,0x8000000000000002
  00792:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00796:    	mov    rdi,QWORD PTR [rbp-0x60]
  0079a:    	mov    rsi,QWORD PTR [rbp-0x70]
  0079e: 00 	test   rdi,0x1
  007a5:    	je     0x38a29
  007ab: 00 	test   rsi,0x1
  007b2:    	je     0x38a29
  007b8:    	cmp    rdi,rsi
  007bb:    	jle    0x39d3d
:00038 %9 = %2.call t()                     [<INVALID>]
  007c1: 01 	sub    DWORD PTR [rip+0x158c],0x1        # 0x1d54
  007c8:    	je     0x38a9b
  007ce:    	sub    rsp,0x20
  007d2:    	movq   QWORD PTR [rsp],xmm5
  007d7:    	movq   QWORD PTR [rsp+0x8],xmm6
  007dd:    	movq   QWORD PTR [rsp+0x10],xmm7
  007e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  007e7: b5 	movabs rax,0x55b5b009e670
  007f1:    	call   rax
  007f3:    	mov    r15d,eax
  007f6: 00 	cmp    r15d,DWORD PTR [rip+0x155f]        # 0x1d5c
  007fd:    	jne    0x38abd
  00803:    	mov    eax,DWORD PTR [rip+0xffffffffffff56b0]        # 0xffff5eb9
  00809:    	cmp    DWORD PTR [rip+0x1549],eax        # 0x1d58
  0080f:    	jne    0x38abd
  00815: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0081e:    	mov    QWORD PTR [rsp-0x38],rcx
  00823:    	mov    rax,QWORD PTR [rbx]
  00826:    	lea    rsi,[rsp-0x18]
  0082b:    	mov    QWORD PTR [rsi],rax
  0082e:    	mov    QWORD PTR [rbx],rsi
  00831:    	mov    rax,QWORD PTR [rbp-0x38]
  00835:    	mov    QWORD PTR [rsp-0x38],rax
  0083a: 00 	mov    rdi,0x0
  00841: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0084a: 00 	movabs rax,0x0
  00854:    	mov    QWORD PTR [rsp-0x28],rax
  00859: 00 	movabs r13,0x0
  00863:    	call   0xffff2d9c
  00868:    	lea    rdi,[rbp-0x8]
  0086c:    	mov    QWORD PTR [rbx],rdi
  0086f:    	movq   xmm5,QWORD PTR [rsp]
  00874:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0087a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00880:    	add    rsp,0x20
  00884:    	test   rax,rax
  00887:    	je     0x38b29
  0088d:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00891:    	mov    rdi,QWORD PTR [rbp-0x60]
  00895:    	mov    rsi,QWORD PTR [rbp-0x70]
  00899: 00 	test   rdi,0x1
  008a0:    	je     0x38b38
  008a6: 00 	test   rsi,0x1
  008ad:    	je     0x38b38
  008b3:    	cmp    rdi,rsi
  008b6:    	jge    0x39d70
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  008bc: 01 	sub    DWORD PTR [rip+0x149d],0x1        # 0x1d60
  008c3:    	je     0x38baa
  008c9:    	sub    rsp,0x20
  008cd:    	movq   QWORD PTR [rsp],xmm5
  008d2:    	movq   QWORD PTR [rsp+0x8],xmm6
  008d8:    	movq   QWORD PTR [rsp+0x10],xmm7
  008de:    	mov    rdi,QWORD PTR [rbp-0x38]
  008e2: b5 	movabs rax,0x55b5b009e670
  008ec:    	call   rax
  008ee:    	mov    r15d,eax
  008f1: 00 	cmp    r15d,DWORD PTR [rip+0x1470]        # 0x1d68
  008f8:    	jne    0x38bcc
  008fe:    	mov    eax,DWORD PTR [rip+0xffffffffffff55b5]        # 0xffff5eb9
  00904:    	cmp    DWORD PTR [rip+0x145a],eax        # 0x1d64
  0090a:    	jne    0x38bcc
  00910: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00919:    	mov    QWORD PTR [rsp-0x38],rcx
  0091e:    	mov    rax,QWORD PTR [rbx]
  00921:    	lea    rsi,[rsp-0x18]
  00926:    	mov    QWORD PTR [rsi],rax
  00929:    	mov    QWORD PTR [rbx],rsi
  0092c:    	mov    rax,QWORD PTR [rbp-0x38]
  00930:    	mov    QWORD PTR [rsp-0x38],rax
  00935: 00 	mov    rdi,0x1
  0093c:    	lea    r8,[rsp-0x40]
  00941:    	mov    rax,QWORD PTR [rbp-0x60]
  00945:    	mov    QWORD PTR [r8],rax
  00948:    	sub    r8,0x8
  0094c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00955: 00 	movabs rax,0x0
  0095f:    	mov    QWORD PTR [rsp-0x28],rax
  00964: 00 	movabs r13,0x0
  0096e:    	call   0xffff2d9c
  00973:    	lea    rdi,[rbp-0x8]
  00977:    	mov    QWORD PTR [rbx],rdi
  0097a:    	movq   xmm5,QWORD PTR [rsp]
  0097f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00985:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0098b:    	add    rsp,0x20
  0098f:    	test   rax,rax
  00992:    	je     0x38c38
:00044 
:00046 %9 = literal[true]
  00998: 00 	mov    rax,0x1c
  0099f:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  009a3: 01 	sub    DWORD PTR [rip+0x13c2],0x1        # 0x1d6c
  009aa:    	je     0x38c70
  009b0:    	sub    rsp,0x20
  009b4:    	movq   QWORD PTR [rsp],xmm5
  009b9:    	movq   QWORD PTR [rsp+0x8],xmm6
  009bf:    	movq   QWORD PTR [rsp+0x10],xmm7
  009c5:    	mov    rdi,QWORD PTR [rbp-0x38]
  009c9: b5 	movabs rax,0x55b5b009e670
  009d3:    	call   rax
  009d5:    	mov    r15d,eax
  009d8: 00 	cmp    r15d,DWORD PTR [rip+0x1395]        # 0x1d74
  009df:    	jne    0x38c92
  009e5:    	mov    eax,DWORD PTR [rip+0xffffffffffff54ce]        # 0xffff5eb9
  009eb:    	cmp    DWORD PTR [rip+0x137f],eax        # 0x1d70
  009f1:    	jne    0x38c92
  009f7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a00:    	mov    QWORD PTR [rsp-0x38],rcx
  00a05:    	mov    rax,QWORD PTR [rbx]
  00a08:    	lea    rsi,[rsp-0x18]
  00a0d:    	mov    QWORD PTR [rsi],rax
  00a10:    	mov    QWORD PTR [rbx],rsi
  00a13:    	mov    rax,QWORD PTR [rbp-0x38]
  00a17:    	mov    QWORD PTR [rsp-0x38],rax
  00a1c: 00 	mov    rdi,0x1
  00a23:    	lea    r8,[rsp-0x40]
  00a28:    	mov    rax,QWORD PTR [rbp-0x70]
  00a2c:    	mov    QWORD PTR [r8],rax
  00a2f:    	sub    r8,0x8
  00a33: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a3c: 00 	movabs rax,0x0
  00a46:    	mov    QWORD PTR [rsp-0x28],rax
  00a4b: 00 	movabs r13,0x0
  00a55:    	call   0xffff2d9c
  00a5a:    	lea    rdi,[rbp-0x8]
  00a5e:    	mov    QWORD PTR [rbx],rdi
  00a61:    	movq   xmm5,QWORD PTR [rsp]
  00a66:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a6c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a72:    	add    rsp,0x20
  00a76:    	test   rax,rax
  00a79:    	je     0x38cfe
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a7f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5446]        # 0xffff5ecc
  00a86: 00 	cmp    rax,QWORD PTR [rip+0x12ff]        # 0x1d8c
  00a8d:    	jne    0x38d0d
  00a93: 00 	mov    rax,QWORD PTR [rip+0x12e2]        # 0x1d7c
  00a9a:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a9e: 01 	sub    DWORD PTR [rip+0x12ef],0x1        # 0x1d94
  00aa5:    	je     0x38da6
  00aab:    	sub    rsp,0x20
  00aaf:    	movq   QWORD PTR [rsp],xmm5
  00ab4:    	movq   QWORD PTR [rsp+0x8],xmm6
  00aba:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ac0:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ac4: b5 	movabs rax,0x55b5b009e670
  00ace:    	call   rax
  00ad0:    	mov    r15d,eax
  00ad3: 00 	cmp    r15d,DWORD PTR [rip+0x12c2]        # 0x1d9c
  00ada:    	jne    0x38dc8
  00ae0:    	mov    eax,DWORD PTR [rip+0xffffffffffff53d3]        # 0xffff5eb9
  00ae6:    	cmp    DWORD PTR [rip+0x12ac],eax        # 0x1d98
  00aec:    	jne    0x38dc8
  00af2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00afb:    	mov    QWORD PTR [rsp-0x38],rcx
  00b00:    	mov    rax,QWORD PTR [rbx]
  00b03:    	lea    rsi,[rsp-0x18]
  00b08:    	mov    QWORD PTR [rsi],rax
  00b0b:    	mov    QWORD PTR [rbx],rsi
  00b0e:    	mov    rax,QWORD PTR [rbp-0x30]
  00b12:    	mov    QWORD PTR [rsp-0x38],rax
  00b17: 00 	mov    rdi,0x0
  00b1e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b27: 00 	movabs rax,0x0
  00b31:    	mov    QWORD PTR [rsp-0x28],rax
  00b36: 00 	movabs r13,0x0
  00b40:    	call   0xffff2d9c
  00b45:    	lea    rdi,[rbp-0x8]
  00b49:    	mov    QWORD PTR [rbx],rdi
  00b4c:    	movq   xmm5,QWORD PTR [rsp]
  00b51:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b57:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b5d:    	add    rsp,0x20
  00b61:    	test   rax,rax
  00b64:    	je     0x38e34
  00b6a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b71: 01 	sub    DWORD PTR [rip+0x1228],0x1        # 0x1da0
  00b78:    	je     0x38e6c
  00b7e:    	sub    rsp,0x20
  00b82:    	movq   QWORD PTR [rsp],xmm5
  00b87:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b8d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b93: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b9a: b5 	movabs rax,0x55b5b009e670
  00ba4:    	call   rax
  00ba6:    	mov    r15d,eax
  00ba9: 00 	cmp    r15d,DWORD PTR [rip+0x11f8]        # 0x1da8
  00bb0:    	jne    0x38e8e
  00bb6:    	mov    eax,DWORD PTR [rip+0xffffffffffff52fd]        # 0xffff5eb9
  00bbc:    	cmp    DWORD PTR [rip+0x11e2],eax        # 0x1da4
  00bc2:    	jne    0x38e8e
  00bc8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bd1:    	mov    QWORD PTR [rsp-0x38],rcx
  00bd6:    	mov    rax,QWORD PTR [rbx]
  00bd9:    	lea    rsi,[rsp-0x18]
  00bde:    	mov    QWORD PTR [rsi],rax
  00be1:    	mov    QWORD PTR [rbx],rsi
  00be4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00beb:    	mov    QWORD PTR [rsp-0x38],rax
  00bf0: 00 	mov    rdi,0x0
  00bf7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c00: 00 	movabs rax,0x0
  00c0a:    	mov    QWORD PTR [rsp-0x28],rax
  00c0f: 00 	movabs r13,0x0
  00c19:    	call   0xffff2d9c
  00c1e:    	lea    rdi,[rbp-0x8]
  00c22:    	mov    QWORD PTR [rbx],rdi
  00c25:    	movq   xmm5,QWORD PTR [rsp]
  00c2a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c30:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c36:    	add    rsp,0x20
  00c3a:    	test   rax,rax
  00c3d:    	je     0x38efd
  00c43:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c47: 01 	sub    DWORD PTR [rip+0x115e],0x1        # 0x1dac
  00c4e:    	je     0x38f35
  00c54:    	sub    rsp,0x20
  00c58:    	movq   QWORD PTR [rsp],xmm5
  00c5d:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c63:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c69:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c6d: b5 	movabs rax,0x55b5b009e670
  00c77:    	call   rax
  00c79:    	mov    r15d,eax
  00c7c: 00 	cmp    r15d,DWORD PTR [rip+0x1131]        # 0x1db4
  00c83:    	jne    0x38f57
  00c89:    	mov    eax,DWORD PTR [rip+0xffffffffffff522a]        # 0xffff5eb9
  00c8f:    	cmp    DWORD PTR [rip+0x111b],eax        # 0x1db0
  00c95:    	jne    0x38f57
  00c9b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ca4:    	mov    QWORD PTR [rsp-0x38],rcx
  00ca9:    	mov    rax,QWORD PTR [rbx]
  00cac:    	lea    rsi,[rsp-0x18]
  00cb1:    	mov    QWORD PTR [rsi],rax
  00cb4:    	mov    QWORD PTR [rbx],rsi
  00cb7:    	mov    rax,QWORD PTR [rbp-0x30]
  00cbb:    	mov    QWORD PTR [rsp-0x38],rax
  00cc0: 00 	mov    rdi,0x0
  00cc7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cd0: 00 	movabs rax,0x0
  00cda:    	mov    QWORD PTR [rsp-0x28],rax
  00cdf: 00 	movabs r13,0x0
  00ce9:    	call   0xffff2d9c
  00cee:    	lea    rdi,[rbp-0x8]
  00cf2:    	mov    QWORD PTR [rbx],rdi
  00cf5:    	movq   xmm5,QWORD PTR [rsp]
  00cfa:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d00:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d06:    	add    rsp,0x20
  00d0a:    	test   rax,rax
  00d0d:    	je     0x38fc3
  00d13: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00d1a: 01 	sub    DWORD PTR [rip+0x1097],0x1        # 0x1db8
  00d21:    	je     0x38ffb
  00d27:    	sub    rsp,0x20
  00d2b:    	movq   QWORD PTR [rsp],xmm5
  00d30:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d36:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d3c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00d43: b5 	movabs rax,0x55b5b009e670
  00d4d:    	call   rax
  00d4f:    	mov    r15d,eax
  00d52: 00 	cmp    r15d,DWORD PTR [rip+0x1067]        # 0x1dc0
  00d59:    	jne    0x3901d
  00d5f:    	mov    eax,DWORD PTR [rip+0xffffffffffff5154]        # 0xffff5eb9
  00d65:    	cmp    DWORD PTR [rip+0x1051],eax        # 0x1dbc
  00d6b:    	jne    0x3901d
  00d71: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d7a:    	mov    QWORD PTR [rsp-0x38],rcx
  00d7f:    	mov    rax,QWORD PTR [rbx]
  00d82:    	lea    rsi,[rsp-0x18]
  00d87:    	mov    QWORD PTR [rsi],rax
  00d8a:    	mov    QWORD PTR [rbx],rsi
  00d8d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00d94:    	mov    QWORD PTR [rsp-0x38],rax
  00d99: 00 	mov    rdi,0x0
  00da0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00da9: 00 	movabs rax,0x0
  00db3:    	mov    QWORD PTR [rsp-0x28],rax
  00db8: 00 	movabs r13,0x0
  00dc2:    	call   0xffff2d9c
  00dc7:    	lea    rdi,[rbp-0x8]
  00dcb:    	mov    QWORD PTR [rbx],rdi
  00dce:    	movq   xmm5,QWORD PTR [rsp]
  00dd3:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00dd9:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ddf:    	add    rsp,0x20
  00de3:    	test   rax,rax
  00de6:    	je     0x3908c
  00dec: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00df3: 01 	sub    DWORD PTR [rip+0xfca],0x1        # 0x1dc4
  00dfa:    	je     0x390c4
  00e00: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00e07:    	mov    rsi,QWORD PTR [rbp-0x60]
  00e0b:    	sub    rsp,0x20
  00e0f:    	movq   QWORD PTR [rsp],xmm5
  00e14:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e1a:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e20:    	mov    rdx,rdi
  00e23:    	mov    rcx,rsi
  00e26:    	mov    rdi,rbx
  00e29:    	mov    rsi,r12
  00e2c: b5 	movabs rax,0x55b5b00e8b30
  00e36:    	call   rax
  00e38:    	movq   xmm5,QWORD PTR [rsp]
  00e3d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e43:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e49:    	add    rsp,0x20
  00e4d: b5 	movabs r13,0x55b5b07bed70
  00e57:    	test   rax,rax
  00e5a:    	je     0xffff2dcf
  00e60: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e67: 01 	sub    DWORD PTR [rip+0xf5a],0x1        # 0x1dc8
  00e6e:    	je     0x3910f
  00e74:    	mov    rdi,QWORD PTR [rbp-0x80]
  00e78: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00e7f:    	sub    rsp,0x20
  00e83:    	movq   QWORD PTR [rsp],xmm5
  00e88:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e8e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e94:    	mov    rdx,rdi
  00e97:    	mov    rcx,rsi
  00e9a:    	mov    rdi,rbx
  00e9d:    	mov    rsi,r12
  00ea0: b5 	movabs rax,0x55b5b00e6cb0
  00eaa:    	call   rax
  00eac:    	movq   xmm5,QWORD PTR [rsp]
  00eb1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00eb7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ebd:    	add    rsp,0x20
  00ec1: b5 	movabs r13,0x55b5b07bed80
  00ecb:    	test   rax,rax
  00ece:    	je     0xffff2dcf
  00ed4:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00ed8: 01 	sub    DWORD PTR [rip+0xeed],0x1        # 0x1dcc
  00edf:    	je     0x3915a
  00ee5:    	sub    rsp,0x20
  00ee9:    	movq   QWORD PTR [rsp],xmm5
  00eee:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ef4:    	movq   QWORD PTR [rsp+0x10],xmm7
  00efa:    	mov    rdi,QWORD PTR [rbp-0x30]
  00efe: b5 	movabs rax,0x55b5b009e670
  00f08:    	call   rax
  00f0a:    	mov    r15d,eax
  00f0d: 00 	cmp    r15d,DWORD PTR [rip+0xec0]        # 0x1dd4
  00f14:    	jne    0x3917c
  00f1a:    	mov    eax,DWORD PTR [rip+0xffffffffffff4f99]        # 0xffff5eb9
  00f20:    	cmp    DWORD PTR [rip+0xeaa],eax        # 0x1dd0
  00f26:    	jne    0x3917c
  00f2c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f35:    	mov    QWORD PTR [rsp-0x38],rcx
  00f3a:    	mov    rax,QWORD PTR [rbx]
  00f3d:    	lea    rsi,[rsp-0x18]
  00f42:    	mov    QWORD PTR [rsi],rax
  00f45:    	mov    QWORD PTR [rbx],rsi
  00f48:    	mov    rax,QWORD PTR [rbp-0x30]
  00f4c:    	mov    QWORD PTR [rsp-0x38],rax
  00f51: 00 	mov    rdi,0x0
  00f58: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f61: 00 	movabs rax,0x0
  00f6b:    	mov    QWORD PTR [rsp-0x28],rax
  00f70: 00 	movabs r13,0x0
  00f7a:    	call   0xffff2d9c
  00f7f:    	lea    rdi,[rbp-0x8]
  00f83:    	mov    QWORD PTR [rbx],rdi
  00f86:    	movq   xmm5,QWORD PTR [rsp]
  00f8b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f91:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f97:    	add    rsp,0x20
  00f9b:    	test   rax,rax
  00f9e:    	je     0x391e8
  00fa4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00fab: 01 	sub    DWORD PTR [rip+0xe26],0x1        # 0x1dd8
  00fb2:    	je     0x39220
  00fb8:    	sub    rsp,0x20
  00fbc:    	movq   QWORD PTR [rsp],xmm5
  00fc1:    	movq   QWORD PTR [rsp+0x8],xmm6
  00fc7:    	movq   QWORD PTR [rsp+0x10],xmm7
  00fcd: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00fd4: b5 	movabs rax,0x55b5b009e670
  00fde:    	call   rax
  00fe0:    	mov    r15d,eax
  00fe3: 00 	cmp    r15d,DWORD PTR [rip+0xdf6]        # 0x1de0
  00fea:    	jne    0x39242
  00ff0:    	mov    eax,DWORD PTR [rip+0xffffffffffff4ec3]        # 0xffff5eb9
  00ff6:    	cmp    DWORD PTR [rip+0xde0],eax        # 0x1ddc
  00ffc:    	jne    0x39242
  01002: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0100b:    	mov    QWORD PTR [rsp-0x38],rcx
  01010:    	mov    rax,QWORD PTR [rbx]
  01013:    	lea    rsi,[rsp-0x18]
  01018:    	mov    QWORD PTR [rsi],rax
  0101b:    	mov    QWORD PTR [rbx],rsi
  0101e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01025:    	mov    QWORD PTR [rsp-0x38],rax
  0102a: 00 	mov    rdi,0x0
  01031: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0103a: 00 	movabs rax,0x0
  01044:    	mov    QWORD PTR [rsp-0x28],rax
  01049: 00 	movabs r13,0x0
  01053:    	call   0xffff2d9c
  01058:    	lea    rdi,[rbp-0x8]
  0105c:    	mov    QWORD PTR [rbx],rdi
  0105f:    	movq   xmm5,QWORD PTR [rsp]
  01064:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0106a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01070:    	add    rsp,0x20
  01074:    	test   rax,rax
  01077:    	je     0x392b1
  0107d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  01084: 01 	sub    DWORD PTR [rip+0xd59],0x1        # 0x1de4
  0108b:    	je     0x392e9
  01091:    	sub    rsp,0x20
  01095:    	movq   QWORD PTR [rsp],xmm5
  0109a:    	movq   QWORD PTR [rsp+0x8],xmm6
  010a0:    	movq   QWORD PTR [rsp+0x10],xmm7
  010a6:    	mov    rdi,QWORD PTR [rbp-0x30]
  010aa: b5 	movabs rax,0x55b5b009e670
  010b4:    	call   rax
  010b6:    	mov    r15d,eax
  010b9: 00 	cmp    r15d,DWORD PTR [rip+0xd2c]        # 0x1dec
  010c0:    	jne    0x3930b
  010c6:    	mov    eax,DWORD PTR [rip+0xffffffffffff4ded]        # 0xffff5eb9
  010cc:    	cmp    DWORD PTR [rip+0xd16],eax        # 0x1de8
  010d2:    	jne    0x3930b
  010d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010e1:    	mov    QWORD PTR [rsp-0x38],rcx
  010e6:    	mov    rax,QWORD PTR [rbx]
  010e9:    	lea    rsi,[rsp-0x18]
  010ee:    	mov    QWORD PTR [rsi],rax
  010f1:    	mov    QWORD PTR [rbx],rsi
  010f4:    	mov    rax,QWORD PTR [rbp-0x30]
  010f8:    	mov    QWORD PTR [rsp-0x38],rax
  010fd: 00 	mov    rdi,0x0
  01104: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0110d: 00 	movabs rax,0x0
  01117:    	mov    QWORD PTR [rsp-0x28],rax
  0111c: 00 	movabs r13,0x0
  01126:    	call   0xffff2d9c
  0112b:    	lea    rdi,[rbp-0x8]
  0112f:    	mov    QWORD PTR [rbx],rdi
  01132:    	movq   xmm5,QWORD PTR [rsp]
  01137:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0113d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01143:    	add    rsp,0x20
  01147:    	test   rax,rax
  0114a:    	je     0x39377
  01150: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01157: 01 	sub    DWORD PTR [rip+0xc92],0x1        # 0x1df0
  0115e:    	je     0x393af
  01164:    	sub    rsp,0x20
  01168:    	movq   QWORD PTR [rsp],xmm5
  0116d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01173:    	movq   QWORD PTR [rsp+0x10],xmm7
  01179: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01180: b5 	movabs rax,0x55b5b009e670
  0118a:    	call   rax
  0118c:    	mov    r15d,eax
  0118f: 00 	cmp    r15d,DWORD PTR [rip+0xc62]        # 0x1df8
  01196:    	jne    0x393d1
  0119c:    	mov    eax,DWORD PTR [rip+0xffffffffffff4d17]        # 0xffff5eb9
  011a2:    	cmp    DWORD PTR [rip+0xc4c],eax        # 0x1df4
  011a8:    	jne    0x393d1
  011ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011b7:    	mov    QWORD PTR [rsp-0x38],rcx
  011bc:    	mov    rax,QWORD PTR [rbx]
  011bf:    	lea    rsi,[rsp-0x18]
  011c4:    	mov    QWORD PTR [rsi],rax
  011c7:    	mov    QWORD PTR [rbx],rsi
  011ca: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011d1:    	mov    QWORD PTR [rsp-0x38],rax
  011d6: 00 	mov    rdi,0x0
  011dd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011e6: 00 	movabs rax,0x0
  011f0:    	mov    QWORD PTR [rsp-0x28],rax
  011f5: 00 	movabs r13,0x0
  011ff:    	call   0xffff2d9c
  01204:    	lea    rdi,[rbp-0x8]
  01208:    	mov    QWORD PTR [rbx],rdi
  0120b:    	movq   xmm5,QWORD PTR [rsp]
  01210:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01216:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0121c:    	add    rsp,0x20
  01220:    	test   rax,rax
  01223:    	je     0x39440
  01229: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  01230: 01 	sub    DWORD PTR [rip+0xbc5],0x1        # 0x1dfc
  01237:    	je     0x39478
  0123d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01244:    	mov    rsi,QWORD PTR [rbp-0x60]
  01248:    	sub    rsp,0x20
  0124c:    	movq   QWORD PTR [rsp],xmm5
  01251:    	movq   QWORD PTR [rsp+0x8],xmm6
  01257:    	movq   QWORD PTR [rsp+0x10],xmm7
  0125d:    	mov    rdx,rdi
  01260:    	mov    rcx,rsi
  01263:    	mov    rdi,rbx
  01266:    	mov    rsi,r12
  01269: b5 	movabs rax,0x55b5b00e8b30
  01273:    	call   rax
  01275:    	movq   xmm5,QWORD PTR [rsp]
  0127a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01280:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01286:    	add    rsp,0x20
  0128a: b5 	movabs r13,0x55b5b07bee50
  01294:    	test   rax,rax
  01297:    	je     0xffff2dcf
  0129d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  012a4: 01 	sub    DWORD PTR [rip+0xb55],0x1        # 0x1e00
  012ab:    	je     0x394c3
  012b1: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  012b8: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  012bf:    	sub    rsp,0x20
  012c3:    	movq   QWORD PTR [rsp],xmm5
  012c8:    	movq   QWORD PTR [rsp+0x8],xmm6
  012ce:    	movq   QWORD PTR [rsp+0x10],xmm7
  012d4:    	mov    rdx,rdi
  012d7:    	mov    rcx,rsi
  012da:    	mov    rdi,rbx
  012dd:    	mov    rsi,r12
  012e0: b5 	movabs rax,0x55b5b00e6cb0
  012ea:    	call   rax
  012ec:    	movq   xmm5,QWORD PTR [rsp]
  012f1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012f7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012fd:    	add    rsp,0x20
  01301: b5 	movabs r13,0x55b5b07bee60
  0130b:    	test   rax,rax
  0130e:    	je     0xffff2dcf
  01314: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  0131b: 01 	sub    DWORD PTR [rip+0xae2],0x1        # 0x1e04
  01322:    	je     0x3950e
  01328:    	sub    rsp,0x20
  0132c:    	movq   QWORD PTR [rsp],xmm5
  01331:    	movq   QWORD PTR [rsp+0x8],xmm6
  01337:    	movq   QWORD PTR [rsp+0x10],xmm7
  0133d:    	mov    rdi,QWORD PTR [rbp-0x30]
  01341: b5 	movabs rax,0x55b5b009e670
  0134b:    	call   rax
  0134d:    	mov    r15d,eax
  01350: 00 	cmp    r15d,DWORD PTR [rip+0xab5]        # 0x1e0c
  01357:    	jne    0x39530
  0135d:    	mov    eax,DWORD PTR [rip+0xffffffffffff4b56]        # 0xffff5eb9
  01363:    	cmp    DWORD PTR [rip+0xa9f],eax        # 0x1e08
  01369:    	jne    0x39530
  0136f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01378:    	mov    QWORD PTR [rsp-0x38],rcx
  0137d:    	mov    rax,QWORD PTR [rbx]
  01380:    	lea    rsi,[rsp-0x18]
  01385:    	mov    QWORD PTR [rsi],rax
  01388:    	mov    QWORD PTR [rbx],rsi
  0138b:    	mov    rax,QWORD PTR [rbp-0x30]
  0138f:    	mov    QWORD PTR [rsp-0x38],rax
  01394: 00 	mov    rdi,0x0
  0139b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013a4: 00 	movabs rax,0x0
  013ae:    	mov    QWORD PTR [rsp-0x28],rax
  013b3: 00 	movabs r13,0x0
  013bd:    	call   0xffff2d9c
  013c2:    	lea    rdi,[rbp-0x8]
  013c6:    	mov    QWORD PTR [rbx],rdi
  013c9:    	movq   xmm5,QWORD PTR [rsp]
  013ce:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013d4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013da:    	add    rsp,0x20
  013de:    	test   rax,rax
  013e1:    	je     0x3959c
  013e7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013ee: 01 	sub    DWORD PTR [rip+0xa1b],0x1        # 0x1e10
  013f5:    	je     0x395d4
  013fb:    	sub    rsp,0x20
  013ff:    	movq   QWORD PTR [rsp],xmm5
  01404:    	movq   QWORD PTR [rsp+0x8],xmm6
  0140a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01410: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01417: b5 	movabs rax,0x55b5b009e670
  01421:    	call   rax
  01423:    	mov    r15d,eax
  01426: 00 	cmp    r15d,DWORD PTR [rip+0x9eb]        # 0x1e18
  0142d:    	jne    0x395f6
  01433:    	mov    eax,DWORD PTR [rip+0xffffffffffff4a80]        # 0xffff5eb9
  01439:    	cmp    DWORD PTR [rip+0x9d5],eax        # 0x1e14
  0143f:    	jne    0x395f6
  01445: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0144e:    	mov    QWORD PTR [rsp-0x38],rcx
  01453:    	mov    rax,QWORD PTR [rbx]
  01456:    	lea    rsi,[rsp-0x18]
  0145b:    	mov    QWORD PTR [rsi],rax
  0145e:    	mov    QWORD PTR [rbx],rsi
  01461: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01468:    	mov    QWORD PTR [rsp-0x38],rax
  0146d: 00 	mov    rdi,0x0
  01474: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0147d: 00 	movabs rax,0x0
  01487:    	mov    QWORD PTR [rsp-0x28],rax
  0148c: 00 	movabs r13,0x0
  01496:    	call   0xffff2d9c
  0149b:    	lea    rdi,[rbp-0x8]
  0149f:    	mov    QWORD PTR [rbx],rdi
  014a2:    	movq   xmm5,QWORD PTR [rsp]
  014a7:    	movq   xmm6,QWORD PTR [rsp+0x8]
  014ad:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014b3:    	add    rsp,0x20
  014b7:    	test   rax,rax
  014ba:    	je     0x39665
  014c0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  014c7: 01 	sub    DWORD PTR [rip+0x94e],0x1        # 0x1e1c
  014ce:    	je     0x3969d
  014d4:    	sub    rsp,0x20
  014d8:    	movq   QWORD PTR [rsp],xmm5
  014dd:    	movq   QWORD PTR [rsp+0x8],xmm6
  014e3:    	movq   QWORD PTR [rsp+0x10],xmm7
  014e9:    	mov    rdi,QWORD PTR [rbp-0x30]
  014ed: b5 	movabs rax,0x55b5b009e670
  014f7:    	call   rax
  014f9:    	mov    r15d,eax
  014fc: 00 	cmp    r15d,DWORD PTR [rip+0x921]        # 0x1e24
  01503:    	jne    0x396bf
  01509:    	mov    eax,DWORD PTR [rip+0xffffffffffff49aa]        # 0xffff5eb9
  0150f:    	cmp    DWORD PTR [rip+0x90b],eax        # 0x1e20
  01515:    	jne    0x396bf
  0151b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01524:    	mov    QWORD PTR [rsp-0x38],rcx
  01529:    	mov    rax,QWORD PTR [rbx]
  0152c:    	lea    rsi,[rsp-0x18]
  01531:    	mov    QWORD PTR [rsi],rax
  01534:    	mov    QWORD PTR [rbx],rsi
  01537:    	mov    rax,QWORD PTR [rbp-0x30]
  0153b:    	mov    QWORD PTR [rsp-0x38],rax
  01540: 00 	mov    rdi,0x0
  01547: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01550: 00 	movabs rax,0x0
  0155a:    	mov    QWORD PTR [rsp-0x28],rax
  0155f: 00 	movabs r13,0x0
  01569:    	call   0xffff2d9c
  0156e:    	lea    rdi,[rbp-0x8]
  01572:    	mov    QWORD PTR [rbx],rdi
  01575:    	movq   xmm5,QWORD PTR [rsp]
  0157a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01580:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01586:    	add    rsp,0x20
  0158a:    	test   rax,rax
  0158d:    	je     0x3972b
  01593: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  0159a: 01 	sub    DWORD PTR [rip+0x887],0x1        # 0x1e28
  015a1:    	je     0x39763
  015a7:    	sub    rsp,0x20
  015ab:    	movq   QWORD PTR [rsp],xmm5
  015b0:    	movq   QWORD PTR [rsp+0x8],xmm6
  015b6:    	movq   QWORD PTR [rsp+0x10],xmm7
  015bc: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015c3: b5 	movabs rax,0x55b5b009e670
  015cd:    	call   rax
  015cf:    	mov    r15d,eax
  015d2: 00 	cmp    r15d,DWORD PTR [rip+0x857]        # 0x1e30
  015d9:    	jne    0x39785
  015df:    	mov    eax,DWORD PTR [rip+0xffffffffffff48d4]        # 0xffff5eb9
  015e5:    	cmp    DWORD PTR [rip+0x841],eax        # 0x1e2c
  015eb:    	jne    0x39785
  015f1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fa:    	mov    QWORD PTR [rsp-0x38],rcx
  015ff:    	mov    rax,QWORD PTR [rbx]
  01602:    	lea    rsi,[rsp-0x18]
  01607:    	mov    QWORD PTR [rsi],rax
  0160a:    	mov    QWORD PTR [rbx],rsi
  0160d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01614:    	mov    QWORD PTR [rsp-0x38],rax
  01619: 00 	mov    rdi,0x0
  01620: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01629: 00 	movabs rax,0x0
  01633:    	mov    QWORD PTR [rsp-0x28],rax
  01638: 00 	movabs r13,0x0
  01642:    	call   0xffff2d9c
  01647:    	lea    rdi,[rbp-0x8]
  0164b:    	mov    QWORD PTR [rbx],rdi
  0164e:    	movq   xmm5,QWORD PTR [rsp]
  01653:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01659:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0165f:    	add    rsp,0x20
  01663:    	test   rax,rax
  01666:    	je     0x397f4
  0166c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01673: 01 	sub    DWORD PTR [rip+0x7ba],0x1        # 0x1e34
  0167a:    	je     0x3982c
  01680: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01687:    	mov    rsi,QWORD PTR [rbp-0x60]
  0168b:    	sub    rsp,0x20
  0168f:    	movq   QWORD PTR [rsp],xmm5
  01694:    	movq   QWORD PTR [rsp+0x8],xmm6
  0169a:    	movq   QWORD PTR [rsp+0x10],xmm7
  016a0:    	mov    rdx,rdi
  016a3:    	mov    rcx,rsi
  016a6:    	mov    rdi,rbx
  016a9:    	mov    rsi,r12
  016ac: b5 	movabs rax,0x55b5b00e8b30
  016b6:    	call   rax
  016b8:    	movq   xmm5,QWORD PTR [rsp]
  016bd:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016c3:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016c9:    	add    rsp,0x20
  016cd: b5 	movabs r13,0x55b5b07bef30
  016d7:    	test   rax,rax
  016da:    	je     0xffff2dcf
  016e0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016e7: 01 	sub    DWORD PTR [rip+0x74a],0x1        # 0x1e38
  016ee:    	je     0x39877
  016f4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016fb: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01702:    	sub    rsp,0x20
  01706:    	movq   QWORD PTR [rsp],xmm5
  0170b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01711:    	movq   QWORD PTR [rsp+0x10],xmm7
  01717:    	mov    rdx,rdi
  0171a:    	mov    rcx,rsi
  0171d:    	mov    rdi,rbx
  01720:    	mov    rsi,r12
  01723: b5 	movabs rax,0x55b5b00e6cb0
  0172d:    	call   rax
  0172f:    	movq   xmm5,QWORD PTR [rsp]
  01734:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0173a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01740:    	add    rsp,0x20
  01744: b5 	movabs r13,0x55b5b07bef40
  0174e:    	test   rax,rax
  01751:    	je     0xffff2dcf
  01757: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  0175e: 01 	sub    DWORD PTR [rip+0x6d7],0x1        # 0x1e3c
  01765:    	je     0x398c2
  0176b:    	sub    rsp,0x20
  0176f:    	movq   QWORD PTR [rsp],xmm5
  01774:    	movq   QWORD PTR [rsp+0x8],xmm6
  0177a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01780:    	mov    rdi,QWORD PTR [rbp-0x78]
  01784: b5 	movabs rax,0x55b5b009e670
  0178e:    	call   rax
  01790:    	mov    r15d,eax
  01793: 00 	cmp    r15d,DWORD PTR [rip+0x6aa]        # 0x1e44
  0179a:    	jne    0x398e4
  017a0:    	mov    eax,DWORD PTR [rip+0xffffffffffff4713]        # 0xffff5eb9
  017a6:    	cmp    DWORD PTR [rip+0x694],eax        # 0x1e40
  017ac:    	jne    0x398e4
  017b2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017bb:    	mov    QWORD PTR [rsp-0x38],rcx
  017c0:    	mov    rax,QWORD PTR [rbx]
  017c3:    	lea    rsi,[rsp-0x18]
  017c8:    	mov    QWORD PTR [rsi],rax
  017cb:    	mov    QWORD PTR [rbx],rsi
  017ce:    	mov    rax,QWORD PTR [rbp-0x78]
  017d2:    	mov    QWORD PTR [rsp-0x38],rax
  017d7: 00 	mov    rdi,0x3
  017de:    	lea    r8,[rsp-0x40]
  017e3:    	mov    rax,QWORD PTR [rbp-0x80]
  017e7:    	mov    QWORD PTR [r8],rax
  017ea:    	sub    r8,0x8
  017ee: ff 	mov    rax,QWORD PTR [rbp-0x88]
  017f5:    	mov    QWORD PTR [r8],rax
  017f8:    	sub    r8,0x8
  017fc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01803:    	mov    QWORD PTR [r8],rax
  01806:    	sub    r8,0x8
  0180a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01813: 00 	movabs rax,0x0
  0181d:    	mov    QWORD PTR [rsp-0x28],rax
  01822: 00 	movabs r13,0x0
  0182c:    	call   0xffff2d9c
  01831:    	lea    rdi,[rbp-0x8]
  01835:    	mov    QWORD PTR [rbx],rdi
  01838:    	movq   xmm5,QWORD PTR [rsp]
  0183d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01843:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01849:    	add    rsp,0x20
  0184d:    	test   rax,rax
  01850:    	je     0x39950
  01856:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0185a: 01 	sub    DWORD PTR [rip+0x5e7],0x1        # 0x1e48
  01861:    	je     0x39988
  01867:    	sub    rsp,0x20
  0186b:    	movq   QWORD PTR [rsp],xmm5
  01870:    	movq   QWORD PTR [rsp+0x8],xmm6
  01876:    	movq   QWORD PTR [rsp+0x10],xmm7
  0187c:    	mov    rdi,QWORD PTR [rbp-0x38]
  01880: b5 	movabs rax,0x55b5b009e670
  0188a:    	call   rax
  0188c:    	mov    r15d,eax
  0188f: 00 	cmp    r15d,DWORD PTR [rip+0x5ba]        # 0x1e50
  01896:    	jne    0x399aa
  0189c:    	mov    eax,DWORD PTR [rip+0xffffffffffff4617]        # 0xffff5eb9
  018a2:    	cmp    DWORD PTR [rip+0x5a4],eax        # 0x1e4c
  018a8:    	jne    0x399aa
  018ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018b7:    	mov    QWORD PTR [rsp-0x38],rcx
  018bc:    	mov    rax,QWORD PTR [rbx]
  018bf:    	lea    rsi,[rsp-0x18]
  018c4:    	mov    QWORD PTR [rsi],rax
  018c7:    	mov    QWORD PTR [rbx],rsi
  018ca:    	mov    rax,QWORD PTR [rbp-0x38]
  018ce:    	mov    QWORD PTR [rsp-0x38],rax
  018d3: 00 	mov    rdi,0x1
  018da:    	lea    r8,[rsp-0x40]
  018df:    	mov    rax,QWORD PTR [rbp-0x70]
  018e3:    	mov    QWORD PTR [r8],rax
  018e6:    	sub    r8,0x8
  018ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018f3: 00 	movabs rax,0x0
  018fd:    	mov    QWORD PTR [rsp-0x28],rax
  01902: 00 	movabs r13,0x0
  0190c:    	call   0xffff2d9c
  01911:    	lea    rdi,[rbp-0x8]
  01915:    	mov    QWORD PTR [rbx],rdi
  01918:    	movq   xmm5,QWORD PTR [rsp]
  0191d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01923:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01929:    	add    rsp,0x20
  0192d:    	test   rax,rax
  01930:    	je     0x39a16
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  01936: 01 	sub    DWORD PTR [rip+0x517],0x1        # 0x1e54
  0193d:    	je     0x39a4e
  01943:    	sub    rsp,0x20
  01947:    	movq   QWORD PTR [rsp],xmm5
  0194c:    	movq   QWORD PTR [rsp+0x8],xmm6
  01952:    	movq   QWORD PTR [rsp+0x10],xmm7
  01958:    	mov    rdi,QWORD PTR [rbp-0x38]
  0195c: b5 	movabs rax,0x55b5b009e670
  01966:    	call   rax
  01968:    	mov    r15d,eax
  0196b: 00 	cmp    r15d,DWORD PTR [rip+0x4ea]        # 0x1e5c
  01972:    	jne    0x39a70
  01978:    	mov    eax,DWORD PTR [rip+0xffffffffffff453b]        # 0xffff5eb9
  0197e:    	cmp    DWORD PTR [rip+0x4d4],eax        # 0x1e58
  01984:    	jne    0x39a70
  0198a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01993:    	mov    QWORD PTR [rsp-0x38],rcx
  01998:    	mov    rax,QWORD PTR [rbx]
  0199b:    	lea    rsi,[rsp-0x18]
  019a0:    	mov    QWORD PTR [rsi],rax
  019a3:    	mov    QWORD PTR [rbx],rsi
  019a6:    	mov    rax,QWORD PTR [rbp-0x38]
  019aa:    	mov    QWORD PTR [rsp-0x38],rax
  019af: 00 	mov    rdi,0x0
  019b6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019bf: 00 	movabs rax,0x0
  019c9:    	mov    QWORD PTR [rsp-0x28],rax
  019ce: 00 	movabs r13,0x0
  019d8:    	call   0xffff2d9c
  019dd:    	lea    rdi,[rbp-0x8]
  019e1:    	mov    QWORD PTR [rbx],rdi
  019e4:    	movq   xmm5,QWORD PTR [rsp]
  019e9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019ef:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019f5:    	add    rsp,0x20
  019f9:    	test   rax,rax
  019fc:    	je     0x39adc
  01a02:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  01a06:    	mov    rdi,QWORD PTR [rbp-0x28]
  01a0a:    	sub    rsp,0x20
  01a0e:    	movq   QWORD PTR [rsp],xmm5
  01a13:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a19:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a1f: 00 	mov    rsi,0x90
  01a26:    	mov    rdx,r12
  01a29: b5 	movabs rax,0x55b5b0091cc0
  01a33:    	call   rax
  01a35:    	movq   xmm5,QWORD PTR [rsp]
  01a3a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a40:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a46:    	add    rsp,0x20
  01a4a:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  01a4e: 01 	sub    DWORD PTR [rip+0x40b],0x1        # 0x1e60
  01a55:    	je     0x39b14
  01a5b:    	sub    rsp,0x20
  01a5f:    	movq   QWORD PTR [rsp],xmm5
  01a64:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a6a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a70:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a74: b5 	movabs rax,0x55b5b009e670
  01a7e:    	call   rax
  01a80:    	mov    r15d,eax
  01a83: 00 	cmp    r15d,DWORD PTR [rip+0x3de]        # 0x1e68
  01a8a:    	jne    0x39b36
  01a90:    	mov    eax,DWORD PTR [rip+0xffffffffffff4423]        # 0xffff5eb9
  01a96:    	cmp    DWORD PTR [rip+0x3c8],eax        # 0x1e64
  01a9c:    	jne    0x39b36
  01aa2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01aab:    	mov    QWORD PTR [rsp-0x38],rcx
  01ab0:    	mov    rax,QWORD PTR [rbx]
  01ab3:    	lea    rsi,[rsp-0x18]
  01ab8:    	mov    QWORD PTR [rsi],rax
  01abb:    	mov    QWORD PTR [rbx],rsi
  01abe:    	mov    rax,QWORD PTR [rbp-0x70]
  01ac2:    	mov    QWORD PTR [rsp-0x38],rax
  01ac7: 00 	mov    rdi,0x1
  01ace:    	lea    r8,[rsp-0x40]
  01ad3:    	mov    rax,QWORD PTR [rbp-0x78]
  01ad7:    	mov    QWORD PTR [r8],rax
  01ada:    	sub    r8,0x8
  01ade: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ae7: 00 	movabs rax,0x0
  01af1:    	mov    QWORD PTR [rsp-0x28],rax
  01af6: 00 	movabs r13,0x0
  01b00:    	call   0xffff2d9c
  01b05:    	lea    rdi,[rbp-0x8]
  01b09:    	mov    QWORD PTR [rbx],rdi
  01b0c:    	movq   xmm5,QWORD PTR [rsp]
  01b11:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b17:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b1d:    	add    rsp,0x20
  01b21:    	test   rax,rax
  01b24:    	je     0x39ba2
  01b2a:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01b2e: 01 	sub    DWORD PTR [rip+0x337],0x1        # 0x1e6c
  01b35:    	je     0x39bda
  01b3b:    	sub    rsp,0x20
  01b3f:    	movq   QWORD PTR [rsp],xmm5
  01b44:    	movq   QWORD PTR [rsp+0x8],xmm6
  01b4a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01b50:    	mov    rdi,QWORD PTR [rbp-0x68]
  01b54: b5 	movabs rax,0x55b5b009e670
  01b5e:    	call   rax
  01b60:    	mov    r15d,eax
  01b63: 00 	cmp    r15d,DWORD PTR [rip+0x30a]        # 0x1e74
  01b6a:    	jne    0x39bfc
  01b70:    	mov    eax,DWORD PTR [rip+0xffffffffffff4343]        # 0xffff5eb9
  01b76:    	cmp    DWORD PTR [rip+0x2f4],eax        # 0x1e70
  01b7c:    	jne    0x39bfc
  01b82: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b8b:    	mov    QWORD PTR [rsp-0x38],rcx
  01b90:    	mov    rax,QWORD PTR [rbx]
  01b93:    	lea    rsi,[rsp-0x18]
  01b98:    	mov    QWORD PTR [rsi],rax
  01b9b:    	mov    QWORD PTR [rbx],rsi
  01b9e:    	mov    rax,QWORD PTR [rbp-0x68]
  01ba2:    	mov    QWORD PTR [rsp-0x38],rax
  01ba7: 00 	mov    rdi,0x0
  01bae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bb7: 00 	movabs rax,0x0
  01bc1:    	mov    QWORD PTR [rsp-0x28],rax
  01bc6: 00 	movabs r13,0x0
  01bd0:    	call   0xffff2d9c
  01bd5:    	lea    rdi,[rbp-0x8]
  01bd9:    	mov    QWORD PTR [rbx],rdi
  01bdc:    	movq   xmm5,QWORD PTR [rsp]
  01be1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01be7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01bed:    	add    rsp,0x20
  01bf1:    	test   rax,rax
  01bf4:    	je     0x39c68
  01bfa:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01bfe: 01 	sub    DWORD PTR [rip+0x273],0x1        # 0x1e78
  01c05:    	je     0x39ca0
  01c0b:    	sub    rsp,0x20
  01c0f:    	movq   QWORD PTR [rsp],xmm5
  01c14:    	movq   QWORD PTR [rsp+0x8],xmm6
  01c1a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01c20:    	mov    rdi,QWORD PTR [rbp-0x38]
  01c24: b5 	movabs rax,0x55b5b009e670
  01c2e:    	call   rax
  01c30:    	mov    r15d,eax
  01c33: 00 	cmp    r15d,DWORD PTR [rip+0x246]        # 0x1e80
  01c3a:    	jne    0x39cc2
  01c40:    	mov    eax,DWORD PTR [rip+0xffffffffffff4273]        # 0xffff5eb9
  01c46:    	cmp    DWORD PTR [rip+0x230],eax        # 0x1e7c
  01c4c:    	jne    0x39cc2
  01c52: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c5b:    	mov    QWORD PTR [rsp-0x38],rcx
  01c60:    	mov    rax,QWORD PTR [rbx]
  01c63:    	lea    rsi,[rsp-0x18]
  01c68:    	mov    QWORD PTR [rsi],rax
  01c6b:    	mov    QWORD PTR [rbx],rsi
  01c6e:    	mov    rax,QWORD PTR [rbp-0x38]
  01c72:    	mov    QWORD PTR [rsp-0x38],rax
  01c77: 00 	mov    rdi,0x1
  01c7e:    	lea    r8,[rsp-0x40]
  01c83:    	mov    rax,QWORD PTR [rbp-0x70]
  01c87:    	mov    QWORD PTR [r8],rax
  01c8a:    	sub    r8,0x8
  01c8e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c97: 00 	movabs rax,0x0
  01ca1:    	mov    QWORD PTR [rsp-0x28],rax
  01ca6: 00 	movabs r13,0x0
  01cb0:    	call   0xffff2d9c
  01cb5:    	lea    rdi,[rbp-0x8]
  01cb9:    	mov    QWORD PTR [rbx],rdi
  01cbc:    	movq   xmm5,QWORD PTR [rsp]
  01cc1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01cc7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01ccd:    	add    rsp,0x20
  01cd1:    	test   rax,rax
  01cd4:    	je     0x39d2e
:00110 
:00112 br =>:00113
  01cda:    	jmp    0x39da3
:00113 br =>:00114
  01cdf:    	jmp    0x39e16
:00114 %9 = nil
  01ce4: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01cec:    	mov    rax,QWORD PTR [rbp-0x70]
  01cf0:    	leave  
  01cf1:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55b5b07b7240
<== finished compile. elapsed:221.8µs
offset:Pos(61672) code: 9273 bytes  data: 423 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5:    	mov    rdi,QWORD PTR [rbp-0x28]
  000c9: 00 	test   rdi,0x7
  000d0:    	jne    0x37fd4
  000d6:    	cmp    DWORD PTR [rdi+0x4],0x32
  000da:    	jne    0x37fd4
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:11
:00001 %13 = %0.call rand()                 [Scene]
  000e0:    	mov    rdi,QWORD PTR [rbp-0x28]
  000e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff3f4a],0x26        # 0xffff4035
  000eb:    	jne    0x37fe3
  000f1: 00 	mov    r9,0x0
  000f8:    	mov    rdx,rdi
  000fb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00104:    	mov    QWORD PTR [rsp-0x38],rcx
  00109:    	mov    rax,QWORD PTR [rbx]
  0010c:    	lea    rsi,[rsp-0x18]
  00111:    	mov    QWORD PTR [rsi],rax
  00114:    	mov    QWORD PTR [rbx],rsi
  00117: ff 	lea    rcx,[rbp-0x98]
  0011e: 00 	mov    r8,0x0
  00125:    	call   0x37ff2
  0012a:    	lea    rdi,[rbp-0x8]
  0012e:    	mov    QWORD PTR [rbx],rdi
  00131: b5 	movabs r13,0x55b5b07b7270
  0013b:    	test   rax,rax
  0013e:    	je     0xffff0f4b
  00144: ff 	mov    QWORD PTR [rbp-0x90],rax
:00002 
:00004 %2 = %13
  0014b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00152:    	mov    QWORD PTR [rbp-0x38],rax
:00005 %13 = literal[2.0]
  00156: 00 	movq   xmm2,QWORD PTR [rip+0x22ea]        # 0x2448
  0015e: 00 	mov    rax,0x2
  00165: ff 	mov    QWORD PTR [rbp-0x90],rax
:00006 %14 = literal[3.14159265]
  0016c: 00 	movq   xmm3,QWORD PTR [rip+0x22e4]        # 0x2458
  00174: da 	movabs rax,0x490fda9e46a78a
  0017e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00185:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00189:    	mov    rdi,QWORD PTR [rbp-0x28]
  0018d: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ea1],0x26        # 0xffff4035
  00194:    	jne    0x38024
  0019a: 00 	mov    r9,0x0
  001a1:    	sub    rsp,0x10
  001a5:    	movq   QWORD PTR [rsp],xmm2
  001aa:    	mov    rdx,rdi
  001ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001b6:    	mov    QWORD PTR [rsp-0x38],rcx
  001bb:    	mov    rax,QWORD PTR [rbx]
  001be:    	lea    rsi,[rsp-0x18]
  001c3:    	mov    QWORD PTR [rsi],rax
  001c6:    	mov    QWORD PTR [rbx],rsi
  001c9: ff 	lea    rcx,[rbp-0xa0]
  001d0: 00 	mov    r8,0x0
  001d7:    	call   0x38043
  001dc:    	lea    rdi,[rbp-0x8]
  001e0:    	mov    QWORD PTR [rbx],rdi
  001e3:    	movq   xmm2,QWORD PTR [rsp]
  001e8:    	add    rsp,0x10
  001ec: b5 	movabs r13,0x55b5b07b72e0
  001f6:    	test   rax,rax
  001f9:    	je     0xffff0f4b
  001ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  00206: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0020d: 00 	test   rdi,0x1
  00214:    	jne    0x38075
  0021a: 00 	test   rdi,0x2
  00221:    	je     0x25d
  00227:    	xorps  xmm3,xmm3
  0022a: 00 	movabs rax,0x8000000000000002
  00234:    	cmp    rdi,rax
  00237:    	je     0x26f
  0023d:    	mov    rax,rdi
  00240:    	sar    rax,0x3f
  00244:    	add    rax,0x2
  00248:    	and    rdi,0xfffffffffffffffc
  0024c:    	or     rdi,rax
  0024f:    	rol    rdi,0x3d
  00253:    	movq   xmm3,rdi
  00258:    	jmp    0x26f
  0025d:    	call   0xffff0fa4
  00262:    	test   rax,rax
  00265:    	je     0x38075
  0026b:    	movq   xmm3,xmm0
  0026f:    	movq   xmm4,xmm2
  00273:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00277: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3dca]        # 0xffff4048
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x21f3]        # 0x2478
  00285:    	jne    0x38094
  0028b: 00 	mov    rax,QWORD PTR [rip+0x21d6]        # 0x2468
  00292: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00299: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002a0: 00 	test   rdi,0x7
  002a7:    	jne    0x380f8
  002ad:    	cmp    DWORD PTR [rdi+0x4],0x21
  002b1:    	jne    0x380f8
  002b7: 26 	cmp    DWORD PTR [rip+0xffffffffffff3d77],0x26        # 0xffff4035
  002be:    	jne    0x380f8
  002c4:    	sub    rsp,0x10
  002c8:    	movq   QWORD PTR [rsp],xmm2
  002cd:    	movq   QWORD PTR [rsp+0x8],xmm4
  002d3:    	movq   xmm0,xmm4
  002d7: b5 	movabs rax,0x55b5b0071300
  002e1:    	call   rax
  002e3:    	movq   xmm2,QWORD PTR [rsp]
  002e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002ee:    	add    rsp,0x10
  002f2:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002f6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3d4b]        # 0xffff4048
  002fd: 00 	cmp    rax,QWORD PTR [rip+0x2194]        # 0x2498
  00304:    	jne    0x3811b
  0030a: 00 	mov    rax,QWORD PTR [rip+0x2177]        # 0x2488
  00311: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00018 %16 = literal[1.0]
  00318: 00 	movq   xmm3,QWORD PTR [rip+0x2188]        # 0x24a8
  00320: 00 	movabs rax,0xff80000000000002
  0032a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00019 %16 = %16 - %2                       [Float][Float]
  00331:    	mov    rdi,QWORD PTR [rbp-0x38]
  00335: 00 	test   rdi,0x1
  0033c:    	jne    0x3817f
  00342: 00 	test   rdi,0x2
  00349:    	je     0x385
  0034f:    	xorps  xmm5,xmm5
  00352: 00 	movabs rax,0x8000000000000002
  0035c:    	cmp    rdi,rax
  0035f:    	je     0x397
  00365:    	mov    rax,rdi
  00368:    	sar    rax,0x3f
  0036c:    	add    rax,0x2
  00370:    	and    rdi,0xfffffffffffffffc
  00374:    	or     rdi,rax
  00377:    	rol    rdi,0x3d
  0037b:    	movq   xmm5,rdi
  00380:    	jmp    0x397
  00385:    	call   0xffff0fa4
  0038a:    	test   rax,rax
  0038d:    	je     0x3817f
  00393:    	movq   xmm5,xmm0
  00397:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  0039b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  003a2: 00 	test   rdi,0x7
  003a9:    	jne    0x381ab
  003af:    	cmp    DWORD PTR [rdi+0x4],0x21
  003b3:    	jne    0x381ab
  003b9: 26 	cmp    DWORD PTR [rip+0xffffffffffff3c75],0x26        # 0xffff4035
  003c0:    	jne    0x381ab
  003c6:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003ca:    	movq   xmm7,xmm2
  003ce:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003d2: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3c6f]        # 0xffff4048
  003d9: 00 	cmp    rax,QWORD PTR [rip+0x20e8]        # 0x24c8
  003e0:    	jne    0x381e7
  003e6: 00 	mov    rax,QWORD PTR [rip+0x20cb]        # 0x24b8
  003ed: ff 	mov    QWORD PTR [rbp-0x98],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003f4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x3826f
  00408:    	cmp    DWORD PTR [rdi+0x4],0x21
  0040c:    	jne    0x3826f
  00412: 26 	cmp    DWORD PTR [rip+0xffffffffffff3c1c],0x26        # 0xffff4035
  00419:    	jne    0x3826f
  0041f:    	sub    rsp,0x30
  00423:    	movq   QWORD PTR [rsp],xmm2
  00428:    	movq   QWORD PTR [rsp+0x8],xmm3
  0042e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00434:    	movq   QWORD PTR [rsp+0x18],xmm5
  0043a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00440:    	movq   xmm0,xmm4
  00444: b5 	movabs rax,0x55b5b0071310
  0044e:    	call   rax
  00450:    	movq   xmm2,QWORD PTR [rsp]
  00455:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00461:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00467:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0046d:    	add    rsp,0x30
  00471:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00475: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3bcc]        # 0xffff4048
  0047c: 00 	cmp    rax,QWORD PTR [rip+0x2065]        # 0x24e8
  00483:    	jne    0x382af
  00489: 00 	mov    rax,QWORD PTR [rip+0x2048]        # 0x24d8
  00490: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %16 = literal[1.0]
  00497: 00 	movq   xmm3,QWORD PTR [rip+0x2059]        # 0x24f8
  0049f: 00 	movabs rax,0xff80000000000002
  004a9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00031 %16 = %16 - %2                       [Float][Float]
  004b0:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004b4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  004bb: 00 	test   rdi,0x7
  004c2:    	jne    0x38337
  004c8:    	cmp    DWORD PTR [rdi+0x4],0x21
  004cc:    	jne    0x38337
  004d2: 26 	cmp    DWORD PTR [rip+0xffffffffffff3b5c],0x26        # 0xffff4035
  004d9:    	jne    0x38337
  004df:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004e3:    	movq   xmm8,xmm2
  004e8:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004ed: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3b54]        # 0xffff4048
  004f4: 00 	cmp    rax,QWORD PTR [rip+0x201d]        # 0x2518
  004fb:    	jne    0x38380
  00501: 00 	mov    rax,QWORD PTR [rip+0x2000]        # 0x2508
  00508: ff 	mov    QWORD PTR [rbp-0x90],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  0050f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00516: 00 	test   rdi,0x7
  0051d:    	jne    0x38416
  00523:    	cmp    DWORD PTR [rdi+0x4],0x21
  00527:    	jne    0x38416
  0052d: 26 	cmp    DWORD PTR [rip+0xffffffffffff3b01],0x26        # 0xffff4035
  00534:    	jne    0x38416
  0053a:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0053e:    	mov    rax,QWORD PTR [rbp-0x10]
  00542:    	mov    rax,QWORD PTR [rax]
  00545:    	mov    rax,QWORD PTR [rax-0x28]
  00549: ff 	mov    QWORD PTR [rbp-0x98],rax
:00042 %15 = 0: i32
  00550: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  0055b:    	sub    rsp,0x30
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576:    	movq   QWORD PTR [rsp+0x20],xmm7
  0057c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00583: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0058a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00591:    	mov    rdi,rbx
  00594:    	mov    rsi,r12
  00597: b5 	movabs r8,0x55b5b07b74f8
  005a1: b5 	movabs rax,0x55b5b0091aa0
  005ab:    	call   rax
  005ad:    	movq   xmm2,QWORD PTR [rsp]
  005b2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005b8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005be:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ca: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d1:    	add    rsp,0x30
  005d5: b5 	movabs r13,0x55b5b07b7500
  005df:    	test   rax,rax
  005e2:    	je     0xffff0f4b
  005e8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00044 %13 = %14.call x()                   [Vec]
  005ef: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  005f6: 00 	test   rdi,0x7
  005fd:    	jne    0x3846d
  00603:    	cmp    DWORD PTR [rdi+0x4],0x28
  00607:    	jne    0x3846d
  0060d: 26 	cmp    DWORD PTR [rip+0xffffffffffff3a21],0x26        # 0xffff4035
  00614:    	jne    0x3846d
  0061a:    	mov    esi,DWORD PTR [rip+0x1f04]        # 0x2524
  00620:    	cmp    esi,0xffffffff
  00623:    	je     0x384c1
  00629:    	cmp    WORD PTR [rdi+0x2],0x3
  0062e:    	jne    0x647
  00634:    	cmp    esi,0x6
  00637:    	jge    0x647
  0063d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00642:    	jmp    0x6a3
  00647:    	sub    rsp,0x30
  0064b:    	movq   QWORD PTR [rsp],xmm2
  00650:    	movq   QWORD PTR [rsp+0x8],xmm3
  00656:    	movq   QWORD PTR [rsp+0x10],xmm4
  0065c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00662:    	movq   QWORD PTR [rsp+0x20],xmm7
  00668: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0066f: b5 	movabs rax,0x55b5b00a3ef0
  00679:    	call   rax
  0067b:    	movq   xmm2,QWORD PTR [rsp]
  00680:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00686:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0068c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00692:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00698: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0069f:    	add    rsp,0x30
  006a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  006aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  006b1: 00 	test   rdi,0x1
  006b8:    	jne    0x3853a
  006be: 00 	test   rdi,0x2
  006c5:    	je     0x701
  006cb:    	xorps  xmm6,xmm6
  006ce: 00 	movabs rax,0x8000000000000002
  006d8:    	cmp    rdi,rax
  006db:    	je     0x713
  006e1:    	mov    rax,rdi
  006e4:    	sar    rax,0x3f
  006e8:    	add    rax,0x2
  006ec:    	and    rdi,0xfffffffffffffffc
  006f0:    	or     rdi,rax
  006f3:    	rol    rdi,0x3d
  006f7:    	movq   xmm6,rdi
  006fc:    	jmp    0x713
  00701:    	call   0xffff0fa4
  00706:    	test   rax,rax
  00709:    	je     0x3853a
  0070f:    	movq   xmm6,xmm0
  00713:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00717:    	mov    rax,QWORD PTR [rbp-0x10]
  0071b:    	mov    rax,QWORD PTR [rax]
  0071e:    	mov    rax,QWORD PTR [rax-0x28]
  00722: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00049 %16 = 1: i32
  00729: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00734:    	sub    rsp,0x30
  00738:    	movq   QWORD PTR [rsp],xmm2
  0073d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00743:    	movq   QWORD PTR [rsp+0x10],xmm5
  00749:    	movq   QWORD PTR [rsp+0x18],xmm6
  0074f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00755: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0075c: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00763: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0076a:    	mov    rdi,rbx
  0076d:    	mov    rsi,r12
  00770: b5 	movabs r8,0x55b5b07b7568
  0077a: b5 	movabs rax,0x55b5b0091aa0
  00784:    	call   rax
  00786:    	movq   xmm2,QWORD PTR [rsp]
  0078b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00791:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00797:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0079d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007a3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007aa:    	add    rsp,0x30
  007ae: b5 	movabs r13,0x55b5b07b7570
  007b8:    	test   rax,rax
  007bb:    	je     0xffff0f4b
  007c1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00051 %14 = %15.call x()                   [Vec]
  007c8: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  007cf: 00 	test   rdi,0x7
  007d6:    	jne    0x3858e
  007dc:    	cmp    DWORD PTR [rdi+0x4],0x28
  007e0:    	jne    0x3858e
  007e6: 26 	cmp    DWORD PTR [rip+0xffffffffffff3848],0x26        # 0xffff4035
  007ed:    	jne    0x3858e
  007f3:    	mov    esi,DWORD PTR [rip+0x1d33]        # 0x252c
  007f9:    	cmp    esi,0xffffffff
  007fc:    	je     0x385e2
  00802:    	cmp    WORD PTR [rdi+0x2],0x3
  00807:    	jne    0x820
  0080d:    	cmp    esi,0x6
  00810:    	jge    0x820
  00816:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0081b:    	jmp    0x87c
  00820:    	sub    rsp,0x30
  00824:    	movq   QWORD PTR [rsp],xmm2
  00829:    	movq   QWORD PTR [rsp+0x8],xmm4
  0082f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00835:    	movq   QWORD PTR [rsp+0x18],xmm6
  0083b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00841: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00848: b5 	movabs rax,0x55b5b00a3ef0
  00852:    	call   rax
  00854:    	movq   xmm2,QWORD PTR [rsp]
  00859:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0085f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00865:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0086b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00871: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00878:    	add    rsp,0x30
  0087c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00883: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0088a: 00 	test   rdi,0x1
  00891:    	jne    0x3865b
  00897: 00 	test   rdi,0x2
  0089e:    	je     0x8da
  008a4:    	xorps  xmm3,xmm3
  008a7: 00 	movabs rax,0x8000000000000002
  008b1:    	cmp    rdi,rax
  008b4:    	je     0x8ec
  008ba:    	mov    rax,rdi
  008bd:    	sar    rax,0x3f
  008c1:    	add    rax,0x2
  008c5:    	and    rdi,0xfffffffffffffffc
  008c9:    	or     rdi,rax
  008cc:    	rol    rdi,0x3d
  008d0:    	movq   xmm3,rdi
  008d5:    	jmp    0x8ec
  008da:    	call   0xffff0fa4
  008df:    	test   rax,rax
  008e2:    	je     0x3865b
  008e8:    	movq   xmm3,xmm0
  008ec:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008f1:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008f5:    	mov    rax,QWORD PTR [rbp-0x10]
  008f9:    	mov    rax,QWORD PTR [rax]
  008fc:    	mov    rax,QWORD PTR [rax-0x28]
  00900: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00057 %16 = 2: i32
  00907: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  00912:    	sub    rsp,0x40
  00916:    	movq   QWORD PTR [rsp],xmm2
  0091b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00921:    	movq   QWORD PTR [rsp+0x10],xmm4
  00927:    	movq   QWORD PTR [rsp+0x18],xmm5
  0092d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00933:    	movq   QWORD PTR [rsp+0x28],xmm7
  00939: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00940: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00947: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0094e:    	mov    rdi,rbx
  00951:    	mov    rsi,r12
  00954: b5 	movabs r8,0x55b5b07b75e8
  0095e: b5 	movabs rax,0x55b5b0091aa0
  00968:    	call   rax
  0096a:    	movq   xmm2,QWORD PTR [rsp]
  0096f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00975:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0097b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00981:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00987:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0098d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00994:    	add    rsp,0x40
  00998: b5 	movabs r13,0x55b5b07b75f0
  009a2:    	test   rax,rax
  009a5:    	je     0xffff0f4b
  009ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00059 %14 = %15.call x()                   [Vec]
  009b2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x386af
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x28
  009ca:    	jne    0x386af
  009d0: 26 	cmp    DWORD PTR [rip+0xffffffffffff365e],0x26        # 0xffff4035
  009d7:    	jne    0x386af
  009dd:    	mov    esi,DWORD PTR [rip+0x1b51]        # 0x2534
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x38703
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa66
  00a0a:    	sub    rsp,0x30
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a2b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a32: b5 	movabs rax,0x55b5b00a3ef0
  00a3c:    	call   rax
  00a3e:    	movq   xmm2,QWORD PTR [rsp]
  00a43:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a49:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a4f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a55:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a5b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a62:    	add    rsp,0x30
  00a66: ff 	mov    QWORD PTR [rbp-0x98],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a6d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a74: 00 	test   rdi,0x1
  00a7b:    	jne    0x3877c
  00a81: 00 	test   rdi,0x2
  00a88:    	je     0xac4
  00a8e:    	xorps  xmm3,xmm3
  00a91: 00 	movabs rax,0x8000000000000002
  00a9b:    	cmp    rdi,rax
  00a9e:    	je     0xad6
  00aa4:    	mov    rax,rdi
  00aa7:    	sar    rax,0x3f
  00aab:    	add    rax,0x2
  00aaf:    	and    rdi,0xfffffffffffffffc
  00ab3:    	or     rdi,rax
  00ab6:    	rol    rdi,0x3d
  00aba:    	movq   xmm3,rdi
  00abf:    	jmp    0xad6
  00ac4:    	call   0xffff0fa4
  00ac9:    	test   rax,rax
  00acc:    	je     0x3877c
  00ad2:    	movq   xmm3,xmm0
  00ad6:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ada:    	movq   xmm9,xmm6
  00adf:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ae4:    	mov    rax,QWORD PTR [rbp-0x10]
  00ae8:    	mov    rax,QWORD PTR [rax]
  00aeb:    	mov    rax,QWORD PTR [rax-0x28]
  00aef: ff 	mov    QWORD PTR [rbp-0x98],rax
:00065 %15 = 0: i32
  00af6: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00b01:    	sub    rsp,0x40
  00b05:    	movq   QWORD PTR [rsp],xmm2
  00b0a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b10:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b16:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b1c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b22: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b29: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b30: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b37: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b3e:    	mov    rdi,rbx
  00b41:    	mov    rsi,r12
  00b44: b5 	movabs r8,0x55b5b07b7668
  00b4e: b5 	movabs rax,0x55b5b0091aa0
  00b58:    	call   rax
  00b5a:    	movq   xmm2,QWORD PTR [rsp]
  00b5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b65:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b6b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b71:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b77: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b7e: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b85:    	add    rsp,0x40
  00b89: b5 	movabs r13,0x55b5b07b7670
  00b93:    	test   rax,rax
  00b96:    	je     0xffff0f4b
  00b9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00067 %13 = %14.call y()                   [Vec]
  00ba3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00baa: 00 	test   rdi,0x7
  00bb1:    	jne    0x387d0
  00bb7:    	cmp    DWORD PTR [rdi+0x4],0x28
  00bbb:    	jne    0x387d0
  00bc1: 26 	cmp    DWORD PTR [rip+0xffffffffffff346d],0x26        # 0xffff4035
  00bc8:    	jne    0x387d0
  00bce:    	mov    esi,DWORD PTR [rip+0x1968]        # 0x253c
  00bd4:    	cmp    esi,0xffffffff
  00bd7:    	je     0x38822
  00bdd:    	cmp    WORD PTR [rdi+0x2],0x3
  00be2:    	jne    0xbfb
  00be8:    	cmp    esi,0x6
  00beb:    	jge    0xbfb
  00bf1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bf6:    	jmp    0xc59
  00bfb:    	sub    rsp,0x30
  00bff:    	movq   QWORD PTR [rsp],xmm2
  00c04:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c0a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c10:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c16: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c1d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c24: b5 	movabs rax,0x55b5b00a3ef0
  00c2e:    	call   rax
  00c30:    	movq   xmm2,QWORD PTR [rsp]
  00c35:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c3b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c41:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c47: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c4e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c55:    	add    rsp,0x30
  00c59: ff 	mov    QWORD PTR [rbp-0x90],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c60: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c67: 00 	test   rdi,0x1
  00c6e:    	jne    0x3889d
  00c74: 00 	test   rdi,0x2
  00c7b:    	je     0xcb7
  00c81:    	xorps  xmm3,xmm3
  00c84: 00 	movabs rax,0x8000000000000002
  00c8e:    	cmp    rdi,rax
  00c91:    	je     0xcc9
  00c97:    	mov    rax,rdi
  00c9a:    	sar    rax,0x3f
  00c9e:    	add    rax,0x2
  00ca2:    	and    rdi,0xfffffffffffffffc
  00ca6:    	or     rdi,rax
  00ca9:    	rol    rdi,0x3d
  00cad:    	movq   xmm3,rdi
  00cb2:    	jmp    0xcc9
  00cb7:    	call   0xffff0fa4
  00cbc:    	test   rax,rax
  00cbf:    	je     0x3889d
  00cc5:    	movq   xmm3,xmm0
  00cc9:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00ccd:    	mov    rax,QWORD PTR [rbp-0x10]
  00cd1:    	mov    rax,QWORD PTR [rax]
  00cd4:    	mov    rax,QWORD PTR [rax-0x28]
  00cd8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00072 %16 = 1: i32
  00cdf: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cea:    	sub    rsp,0x40
  00cee:    	movq   QWORD PTR [rsp],xmm2
  00cf3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cf9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cff:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d05:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d0b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d12: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00d20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00d27:    	mov    rdi,rbx
  00d2a:    	mov    rsi,r12
  00d2d: b5 	movabs r8,0x55b5b07b76d8
  00d37: b5 	movabs rax,0x55b5b0091aa0
  00d41:    	call   rax
  00d43:    	movq   xmm2,QWORD PTR [rsp]
  00d48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d5a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d60: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d67: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d6e:    	add    rsp,0x40
  00d72: b5 	movabs r13,0x55b5b07b76e0
  00d7c:    	test   rax,rax
  00d7f:    	je     0xffff0f4b
  00d85: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00074 %14 = %15.call y()                   [Vec]
  00d8c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00d93: 00 	test   rdi,0x7
  00d9a:    	jne    0x388ef
  00da0:    	cmp    DWORD PTR [rdi+0x4],0x28
  00da4:    	jne    0x388ef
  00daa: 26 	cmp    DWORD PTR [rip+0xffffffffffff3284],0x26        # 0xffff4035
  00db1:    	jne    0x388ef
  00db7:    	mov    esi,DWORD PTR [rip+0x1787]        # 0x2544
  00dbd:    	cmp    esi,0xffffffff
  00dc0:    	je     0x38951
  00dc6:    	cmp    WORD PTR [rdi+0x2],0x3
  00dcb:    	jne    0xde4
  00dd1:    	cmp    esi,0x6
  00dd4:    	jge    0xde4
  00dda:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ddf:    	jmp    0xe4e
  00de4:    	sub    rsp,0x40
  00de8:    	movq   QWORD PTR [rsp],xmm2
  00ded:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00df9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dff:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e05: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e0c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e13: b5 	movabs rax,0x55b5b00a3ef0
  00e1d:    	call   rax
  00e1f:    	movq   xmm2,QWORD PTR [rsp]
  00e24:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e2a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e30:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e36:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e3c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e43: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e4a:    	add    rsp,0x40
  00e4e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e55: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e5c: 00 	test   rdi,0x1
  00e63:    	jne    0x389d8
  00e69: 00 	test   rdi,0x2
  00e70:    	je     0xeac
  00e76:    	xorps  xmm6,xmm6
  00e79: 00 	movabs rax,0x8000000000000002
  00e83:    	cmp    rdi,rax
  00e86:    	je     0xebe
  00e8c:    	mov    rax,rdi
  00e8f:    	sar    rax,0x3f
  00e93:    	add    rax,0x2
  00e97:    	and    rdi,0xfffffffffffffffc
  00e9b:    	or     rdi,rax
  00e9e:    	rol    rdi,0x3d
  00ea2:    	movq   xmm6,rdi
  00ea7:    	jmp    0xebe
  00eac:    	call   0xffff0fa4
  00eb1:    	test   rax,rax
  00eb4:    	je     0x389d8
  00eba:    	movq   xmm6,xmm0
  00ebe:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00ec3:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00ec7:    	mov    rax,QWORD PTR [rbp-0x10]
  00ecb:    	mov    rax,QWORD PTR [rax]
  00ece:    	mov    rax,QWORD PTR [rax-0x28]
  00ed2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00080 %16 = 2: i32
  00ed9: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ee4:    	sub    rsp,0x40
  00ee8:    	movq   QWORD PTR [rsp],xmm2
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ef9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eff:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f05:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f0b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f12: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00f20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00f27:    	mov    rdi,rbx
  00f2a:    	mov    rsi,r12
  00f2d: b5 	movabs r8,0x55b5b07b7758
  00f37: b5 	movabs rax,0x55b5b0091aa0
  00f41:    	call   rax
  00f43:    	movq   xmm2,QWORD PTR [rsp]
  00f48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f5a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f60:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f66: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f6d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f74:    	add    rsp,0x40
  00f78: b5 	movabs r13,0x55b5b07b7760
  00f82:    	test   rax,rax
  00f85:    	je     0xffff0f4b
  00f8b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00082 %14 = %15.call y()                   [Vec]
  00f92: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00f99: 00 	test   rdi,0x7
  00fa0:    	jne    0x38a3a
  00fa6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00faa:    	jne    0x38a3a
  00fb0: 26 	cmp    DWORD PTR [rip+0xffffffffffff307e],0x26        # 0xffff4035
  00fb7:    	jne    0x38a3a
  00fbd:    	mov    esi,DWORD PTR [rip+0x1589]        # 0x254c
  00fc3:    	cmp    esi,0xffffffff
  00fc6:    	je     0x38a9c
  00fcc:    	cmp    WORD PTR [rdi+0x2],0x3
  00fd1:    	jne    0xfea
  00fd7:    	cmp    esi,0x6
  00fda:    	jge    0xfea
  00fe0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fe5:    	jmp    0x1054
  00fea:    	sub    rsp,0x40
  00fee:    	movq   QWORD PTR [rsp],xmm2
  00ff3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fff:    	movq   QWORD PTR [rsp+0x18],xmm5
  01005:    	movq   QWORD PTR [rsp+0x20],xmm7
  0100b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01012: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01019: b5 	movabs rax,0x55b5b00a3ef0
  01023:    	call   rax
  01025:    	movq   xmm2,QWORD PTR [rsp]
  0102a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01030:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01036:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0103c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01042: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01049: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01050:    	add    rsp,0x40
  01054: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  0105b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01062: 00 	test   rdi,0x1
  01069:    	jne    0x38b23
  0106f: 00 	test   rdi,0x2
  01076:    	je     0x10b2
  0107c:    	xorps  xmm6,xmm6
  0107f: 00 	movabs rax,0x8000000000000002
  01089:    	cmp    rdi,rax
  0108c:    	je     0x10c4
  01092:    	mov    rax,rdi
  01095:    	sar    rax,0x3f
  01099:    	add    rax,0x2
  0109d:    	and    rdi,0xfffffffffffffffc
  010a1:    	or     rdi,rax
  010a4:    	rol    rdi,0x3d
  010a8:    	movq   xmm6,rdi
  010ad:    	jmp    0x10c4
  010b2:    	call   0xffff0fa4
  010b7:    	test   rax,rax
  010ba:    	je     0x38b23
  010c0:    	movq   xmm6,xmm0
  010c4:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010c8:    	movq   xmm10,xmm3
  010cd:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010d2:    	mov    rax,QWORD PTR [rbp-0x10]
  010d6:    	mov    rax,QWORD PTR [rax]
  010d9:    	mov    rax,QWORD PTR [rax-0x28]
  010dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 0: i32
  010e4: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010ef:    	sub    rsp,0x40
  010f3:    	movq   QWORD PTR [rsp],xmm2
  010f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  010fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01104:    	movq   QWORD PTR [rsp+0x18],xmm5
  0110a:    	movq   QWORD PTR [rsp+0x20],xmm7
  01110: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01117: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0111e: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01125: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0112c: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  01133:    	mov    rdi,rbx
  01136:    	mov    rsi,r12
  01139: b5 	movabs r8,0x55b5b07b77d8
  01143: b5 	movabs rax,0x55b5b0091aa0
  0114d:    	call   rax
  0114f:    	movq   xmm2,QWORD PTR [rsp]
  01154:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0115a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01160:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01166:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0116c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01173: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0117a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01181:    	add    rsp,0x40
  01185: b5 	movabs r13,0x55b5b07b77e0
  0118f:    	test   rax,rax
  01192:    	je     0xffff0f4b
  01198: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %13 = %14.call z()                   [Vec]
  0119f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011a6: 00 	test   rdi,0x7
  011ad:    	jne    0x38b85
  011b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  011b7:    	jne    0x38b85
  011bd: 26 	cmp    DWORD PTR [rip+0xffffffffffff2e71],0x26        # 0xffff4035
  011c4:    	jne    0x38b85
  011ca:    	mov    esi,DWORD PTR [rip+0x1384]        # 0x2554
  011d0:    	cmp    esi,0xffffffff
  011d3:    	je     0x38be5
  011d9:    	cmp    WORD PTR [rdi+0x2],0x3
  011de:    	jne    0x11f7
  011e4:    	cmp    esi,0x6
  011e7:    	jge    0x11f7
  011ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011f2:    	jmp    0x1263
  011f7:    	sub    rsp,0x40
  011fb:    	movq   QWORD PTR [rsp],xmm2
  01200:    	movq   QWORD PTR [rsp+0x8],xmm4
  01206:    	movq   QWORD PTR [rsp+0x10],xmm5
  0120c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01212: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01219: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01220: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01227: b5 	movabs rax,0x55b5b00a3ef0
  01231:    	call   rax
  01233:    	movq   xmm2,QWORD PTR [rsp]
  01238:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01244:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0124a: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01251: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01258: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0125f:    	add    rsp,0x40
  01263: ff 	mov    QWORD PTR [rbp-0x90],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  0126a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01271: 00 	test   rdi,0x1
  01278:    	jne    0x38c6e
  0127e: 00 	test   rdi,0x2
  01285:    	je     0x12c1
  0128b:    	xorps  xmm3,xmm3
  0128e: 00 	movabs rax,0x8000000000000002
  01298:    	cmp    rdi,rax
  0129b:    	je     0x12d3
  012a1:    	mov    rax,rdi
  012a4:    	sar    rax,0x3f
  012a8:    	add    rax,0x2
  012ac:    	and    rdi,0xfffffffffffffffc
  012b0:    	or     rdi,rax
  012b3:    	rol    rdi,0x3d
  012b7:    	movq   xmm3,rdi
  012bc:    	jmp    0x12d3
  012c1:    	call   0xffff0fa4
  012c6:    	test   rax,rax
  012c9:    	je     0x38c6e
  012cf:    	movq   xmm3,xmm0
  012d3:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012d7:    	mov    rax,QWORD PTR [rbp-0x10]
  012db:    	mov    rax,QWORD PTR [rax]
  012de:    	mov    rax,QWORD PTR [rax-0x28]
  012e2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00095 %16 = 1: i32
  012e9: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012f4:    	sub    rsp,0x40
  012f8:    	movq   QWORD PTR [rsp],xmm2
  012fd:    	movq   QWORD PTR [rsp+0x8],xmm3
  01303:    	movq   QWORD PTR [rsp+0x10],xmm4
  01309:    	movq   QWORD PTR [rsp+0x18],xmm5
  0130f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01315: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0131c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01323: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0132a: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01331: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01338:    	mov    rdi,rbx
  0133b:    	mov    rsi,r12
  0133e: b5 	movabs r8,0x55b5b07b7848
  01348: b5 	movabs rax,0x55b5b0091aa0
  01352:    	call   rax
  01354:    	movq   xmm2,QWORD PTR [rsp]
  01359:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0135f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01365:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0136b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01371: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01378: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0137f: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01386:    	add    rsp,0x40
  0138a: b5 	movabs r13,0x55b5b07b7850
  01394:    	test   rax,rax
  01397:    	je     0xffff0f4b
  0139d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %14 = %15.call z()                   [Vec]
  013a4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  013ab: 00 	test   rdi,0x7
  013b2:    	jne    0x38cce
  013b8:    	cmp    DWORD PTR [rdi+0x4],0x28
  013bc:    	jne    0x38cce
  013c2: 26 	cmp    DWORD PTR [rip+0xffffffffffff2c6c],0x26        # 0xffff4035
  013c9:    	jne    0x38cce
  013cf:    	mov    esi,DWORD PTR [rip+0x1187]        # 0x255c
  013d5:    	cmp    esi,0xffffffff
  013d8:    	je     0x38d3e
  013de:    	cmp    WORD PTR [rdi+0x2],0x3
  013e3:    	jne    0x13fc
  013e9:    	cmp    esi,0x6
  013ec:    	jge    0x13fc
  013f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013f7:    	jmp    0x1474
  013fc:    	sub    rsp,0x40
  01400:    	movq   QWORD PTR [rsp],xmm2
  01405:    	movq   QWORD PTR [rsp+0x8],xmm3
  0140b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01411:    	movq   QWORD PTR [rsp+0x18],xmm5
  01417:    	movq   QWORD PTR [rsp+0x20],xmm7
  0141d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01424: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0142b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01432: b5 	movabs rax,0x55b5b00a3ef0
  0143c:    	call   rax
  0143e:    	movq   xmm2,QWORD PTR [rsp]
  01443:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01449:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0144f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01455:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0145b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01462: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01469: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01470:    	add    rsp,0x40
  01474: ff 	mov    QWORD PTR [rbp-0x98],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  0147b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01482: 00 	test   rdi,0x1
  01489:    	jne    0x38dd3
  0148f: 00 	test   rdi,0x2
  01496:    	je     0x14d2
  0149c:    	xorps  xmm6,xmm6
  0149f: 00 	movabs rax,0x8000000000000002
  014a9:    	cmp    rdi,rax
  014ac:    	je     0x14e4
  014b2:    	mov    rax,rdi
  014b5:    	sar    rax,0x3f
  014b9:    	add    rax,0x2
  014bd:    	and    rdi,0xfffffffffffffffc
  014c1:    	or     rdi,rax
  014c4:    	rol    rdi,0x3d
  014c8:    	movq   xmm6,rdi
  014cd:    	jmp    0x14e4
  014d2:    	call   0xffff0fa4
  014d7:    	test   rax,rax
  014da:    	je     0x38dd3
  014e0:    	movq   xmm6,xmm0
  014e4:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014e9:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014ed:    	mov    rax,QWORD PTR [rbp-0x10]
  014f1:    	mov    rax,QWORD PTR [rax]
  014f4:    	mov    rax,QWORD PTR [rax-0x28]
  014f8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00103 %16 = 2: i32
  014ff: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  0150a:    	sub    rsp,0x50
  0150e:    	movq   QWORD PTR [rsp],xmm2
  01513:    	movq   QWORD PTR [rsp+0x8],xmm3
  01519:    	movq   QWORD PTR [rsp+0x10],xmm4
  0151f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01525:    	movq   QWORD PTR [rsp+0x20],xmm6
  0152b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01531: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01538: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0153f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01546: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0154d: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01554:    	mov    rdi,rbx
  01557:    	mov    rsi,r12
  0155a: b5 	movabs r8,0x55b5b07b78c8
  01564: b5 	movabs rax,0x55b5b0091aa0
  0156e:    	call   rax
  01570:    	movq   xmm2,QWORD PTR [rsp]
  01575:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0157b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01581:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01587:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0158d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01593: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0159a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015a1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015a8:    	add    rsp,0x50
  015ac: b5 	movabs r13,0x55b5b07b78d0
  015b6:    	test   rax,rax
  015b9:    	je     0xffff0f4b
  015bf: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00105 %14 = %15.call z()                   [Vec]
  015c6: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015cd: 00 	test   rdi,0x7
  015d4:    	jne    0x38e43
  015da:    	cmp    DWORD PTR [rdi+0x4],0x28
  015de:    	jne    0x38e43
  015e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff2a4a],0x26        # 0xffff4035
  015eb:    	jne    0x38e43
  015f1:    	mov    esi,DWORD PTR [rip+0xf6d]        # 0x2564
  015f7:    	cmp    esi,0xffffffff
  015fa:    	je     0x38eb3
  01600:    	cmp    WORD PTR [rdi+0x2],0x3
  01605:    	jne    0x161e
  0160b:    	cmp    esi,0x6
  0160e:    	jge    0x161e
  01614:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01619:    	jmp    0x1696
  0161e:    	sub    rsp,0x40
  01622:    	movq   QWORD PTR [rsp],xmm2
  01627:    	movq   QWORD PTR [rsp+0x8],xmm3
  0162d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01633:    	movq   QWORD PTR [rsp+0x18],xmm5
  01639:    	movq   QWORD PTR [rsp+0x20],xmm7
  0163f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01646: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0164d: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01654: b5 	movabs rax,0x55b5b00a3ef0
  0165e:    	call   rax
  01660:    	movq   xmm2,QWORD PTR [rsp]
  01665:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0166b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01671:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01677:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0167d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01684: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0168b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01692:    	add    rsp,0x40
  01696: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0169d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  016a4: 00 	test   rdi,0x1
  016ab:    	jne    0x38f48
  016b1: 00 	test   rdi,0x2
  016b8:    	je     0x16f4
  016be:    	xorps  xmm6,xmm6
  016c1: 00 	movabs rax,0x8000000000000002
  016cb:    	cmp    rdi,rax
  016ce:    	je     0x1706
  016d4:    	mov    rax,rdi
  016d7:    	sar    rax,0x3f
  016db:    	add    rax,0x2
  016df:    	and    rdi,0xfffffffffffffffc
  016e3:    	or     rdi,rax
  016e6:    	rol    rdi,0x3d
  016ea:    	movq   xmm6,rdi
  016ef:    	jmp    0x1706
  016f4:    	call   0xffff0fa4
  016f9:    	test   rax,rax
  016fc:    	je     0x38f48
  01702:    	movq   xmm6,xmm0
  01706:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  0170a:    	movq   xmm11,xmm3
  0170f:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01714: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff292d]        # 0xffff4048
  0171b: 00 	cmp    rax,QWORD PTR [rip+0xe56]        # 0x2578
  01722:    	jne    0x38fb8
  01728: 00 	mov    rax,QWORD PTR [rip+0xe39]        # 0x2568
  0172f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01736:    	movq   xmm0,xmm9
  0173b:    	call   0xffff10c8
  01740: ff 	mov    QWORD PTR [rbp-0x98],rax
  01747:    	movq   xmm0,xmm10
  0174c:    	call   0xffff10c8
  01751: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01758:    	movq   xmm0,xmm11
  0175d:    	call   0xffff10c8
  01762: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01769: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01770: 00 	test   rdi,0x7
  01777:    	jne    0x39078
  0177d:    	cmp    DWORD PTR [rdi+0x4],0x29
  01781:    	jne    0x39078
  01787: 26 	cmp    DWORD PTR [rip+0xffffffffffff28a7],0x26        # 0xffff4035
  0178e:    	jne    0x39078
  01794: 00 	mov    r9,0x0
  0179b:    	sub    rsp,0x40
  0179f:    	movq   QWORD PTR [rsp],xmm2
  017a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  017aa:    	movq   QWORD PTR [rsp+0x10],xmm5
  017b0:    	movq   QWORD PTR [rsp+0x18],xmm7
  017b6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017bd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017c4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017cb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017d2:    	mov    rdx,rdi
  017d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017de:    	mov    QWORD PTR [rsp-0x38],rcx
  017e3:    	mov    rax,QWORD PTR [rbx]
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rsi],rax
  017ee:    	mov    QWORD PTR [rbx],rsi
  017f1: ff 	lea    rcx,[rbp-0x98]
  017f8: 00 	mov    r8,0x3
  017ff:    	call   0x390e6
  01804:    	lea    rdi,[rbp-0x8]
  01808:    	mov    QWORD PTR [rbx],rdi
  0180b:    	movq   xmm2,QWORD PTR [rsp]
  01810:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01816:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0181c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01822: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01829: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01830: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01837: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183e:    	add    rsp,0x40
  01842: b5 	movabs r13,0x55b5b07b7980
  0184c:    	test   rax,rax
  0184f:    	je     0xffff0f4b
  01855:    	mov    QWORD PTR [rbp-0x78],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01859: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff27e8]        # 0xffff4048
  01860: 00 	cmp    rax,QWORD PTR [rip+0xd31]        # 0x2598
  01867:    	jne    0x39118
  0186d: 00 	mov    rax,QWORD PTR [rip+0xd14]        # 0x2588
  01874: ff 	mov    QWORD PTR [rbp-0x90],rax
:00118 %14 = dynvar(2, %7)
  0187b:    	mov    rax,QWORD PTR [rbp-0x10]
  0187f:    	mov    rax,QWORD PTR [rax]
  01882:    	mov    rax,QWORD PTR [rax-0x50]
  01886: ff 	mov    QWORD PTR [rbp-0x98],rax
:00119 %15 = %10
  0188d:    	mov    rax,QWORD PTR [rbp-0x78]
  01891: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01898: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0189f: 00 	test   rdi,0x7
  018a6:    	jne    0x391cc
  018ac:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018b0:    	jne    0x391cc
  018b6: 26 	cmp    DWORD PTR [rip+0xffffffffffff2778],0x26        # 0xffff4035
  018bd:    	jne    0x391cc
  018c3: 00 	mov    r9,0x0
  018ca:    	sub    rsp,0x40
  018ce:    	movq   QWORD PTR [rsp],xmm2
  018d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d9:    	movq   QWORD PTR [rsp+0x10],xmm5
  018df:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e5: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018ec: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f3: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018fa: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01901:    	mov    rdx,rdi
  01904: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0190d:    	mov    QWORD PTR [rsp-0x38],rcx
  01912:    	mov    rax,QWORD PTR [rbx]
  01915:    	lea    rsi,[rsp-0x18]
  0191a:    	mov    QWORD PTR [rsi],rax
  0191d:    	mov    QWORD PTR [rbx],rsi
  01920: ff 	lea    rcx,[rbp-0x98]
  01927: 00 	mov    r8,0x2
  0192e:    	call   0x3923a
  01933:    	lea    rdi,[rbp-0x8]
  01937:    	mov    QWORD PTR [rbx],rdi
  0193a:    	movq   xmm2,QWORD PTR [rsp]
  0193f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01945:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0194b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01951: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01958: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0195f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01966: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0196d:    	add    rsp,0x40
  01971: b5 	movabs r13,0x55b5b07b79e0
  0197b:    	test   rax,rax
  0197e:    	je     0xffff0f4b
  01984:    	mov    QWORD PTR [rbp-0x80],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01988: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff26b9]        # 0xffff4048
  0198f: 00 	cmp    rax,QWORD PTR [rip+0xc22]        # 0x25b8
  01996:    	jne    0x3926c
  0199c: 00 	mov    rax,QWORD PTR [rip+0xc05]        # 0x25a8
  019a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  019b1: 00 	test   rdi,0x7
  019b8:    	jne    0x39320
  019be:    	cmp    DWORD PTR [rdi+0x4],0x31
  019c2:    	jne    0x39320
  019c8: 26 	cmp    DWORD PTR [rip+0xffffffffffff2666],0x26        # 0xffff4035
  019cf:    	jne    0x39320
  019d5: 00 	mov    r9,0x0
  019dc:    	sub    rsp,0x40
  019e0:    	movq   QWORD PTR [rsp],xmm2
  019e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  019f1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019f7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019fe: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a05: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a0c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a13:    	mov    rdx,rdi
  01a16: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a1f:    	mov    QWORD PTR [rsp-0x38],rcx
  01a24:    	mov    rax,QWORD PTR [rbx]
  01a27:    	lea    rsi,[rsp-0x18]
  01a2c:    	mov    QWORD PTR [rsi],rax
  01a2f:    	mov    QWORD PTR [rbx],rsi
  01a32: ff 	lea    rcx,[rbp-0x98]
  01a39: 00 	mov    r8,0x0
  01a40:    	call   0x3938e
  01a45:    	lea    rdi,[rbp-0x8]
  01a49:    	mov    QWORD PTR [rbx],rdi
  01a4c:    	movq   xmm2,QWORD PTR [rsp]
  01a51:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a57:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a5d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a63: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a6a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a71: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a78: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a7f:    	add    rsp,0x40
  01a83: b5 	movabs r13,0x55b5b07b7a20
  01a8d:    	test   rax,rax
  01a90:    	je     0xffff0f4b
  01a96: ff 	mov    QWORD PTR [rbp-0x88],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01a9d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01aa1:    	mov    rax,QWORD PTR [rdi+0x10]
  01aa5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00128 %14 = 0: i32
  01aac: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ab7:    	sub    rsp,0x40
  01abb:    	movq   QWORD PTR [rsp],xmm2
  01ac0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ac6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01acc:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ad2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ad9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ae0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ae7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01aee: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01af5: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01afc:    	mov    rdi,rbx
  01aff:    	mov    rsi,r12
  01b02: b5 	movabs r8,0x55b5b07b7a58
  01b0c: b5 	movabs rax,0x55b5b0091aa0
  01b16:    	call   rax
  01b18:    	movq   xmm2,QWORD PTR [rsp]
  01b1d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b23:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b29:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b2f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b36: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b3d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b44: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b4b:    	add    rsp,0x40
  01b4f: b5 	movabs r13,0x55b5b07b7a60
  01b59:    	test   rax,rax
  01b5c:    	je     0xffff0f4b
  01b62: ff 	mov    QWORD PTR [rbp-0x90],rax
:00130 %14 = %11
  01b69:    	mov    rax,QWORD PTR [rbp-0x80]
  01b6d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00131 %15 = %12
  01b74: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01b7b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01b82: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b89: 00 	test   rdi,0x7
  01b90:    	jne    0x393c0
  01b96:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01b9a:    	jne    0x393c0
  01ba0: 26 	cmp    DWORD PTR [rip+0xffffffffffff248e],0x26        # 0xffff4035
  01ba7:    	jne    0x393c0
  01bad:    	sub    rsp,0x40
  01bb1:    	movq   QWORD PTR [rsp],xmm2
  01bb6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bbc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bc2:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bc8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bcf: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bd6: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bdd: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01be4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bed:    	mov    QWORD PTR [rsp-0x38],rcx
  01bf2:    	mov    rax,QWORD PTR [rbx]
  01bf5:    	lea    rsi,[rsp-0x18]
  01bfa:    	mov    QWORD PTR [rsi],rax
  01bfd:    	mov    QWORD PTR [rbx],rsi
  01c00: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01c07:    	mov    QWORD PTR [rsp-0x38],rax
  01c0c: 00 	mov    rdi,0x2
  01c13:    	lea    r8,[rsp-0x40]
  01c18: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01c1f:    	mov    QWORD PTR [r8],rax
  01c22:    	sub    r8,0x8
  01c26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01c2d:    	mov    QWORD PTR [r8],rax
  01c30:    	sub    r8,0x8
  01c34: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c3d: 10 	movabs rax,0x1001000000046
  01c47:    	mov    QWORD PTR [rsp-0x28],rax
  01c4c: b5 	movabs r13,0x55b5b07be970
  01c56:    	call   0xffff4c82
  01c5b:    	lea    rdi,[rbp-0x8]
  01c5f:    	mov    QWORD PTR [rbx],rdi
  01c62:    	movq   xmm2,QWORD PTR [rsp]
  01c67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c6d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c73:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c79: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c80: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c87: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c8e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c95:    	add    rsp,0x40
  01c99: b5 	movabs r13,0x55b5b07b7aa0
  01ca3:    	test   rax,rax
  01ca6:    	je     0xffff0f4b
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cac:    	mov    rdi,QWORD PTR [rbp-0x28]
  01cb0:    	mov    rax,QWORD PTR [rdi+0x10]
  01cb4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00136 %14 = 1: i32
  01cbb: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cc6:    	sub    rsp,0x40
  01cca:    	movq   QWORD PTR [rsp],xmm2
  01ccf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cd5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01cdb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ce1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ce8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cef: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01cf6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01cfd: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01d04: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01d0b:    	mov    rdi,rbx
  01d0e:    	mov    rsi,r12
  01d11: b5 	movabs r8,0x55b5b07b7ad8
  01d1b: b5 	movabs rax,0x55b5b0091aa0
  01d25:    	call   rax
  01d27:    	movq   xmm2,QWORD PTR [rsp]
  01d2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d32:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d38:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d3e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d45: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d4c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d53: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d5a:    	add    rsp,0x40
  01d5e: b5 	movabs r13,0x55b5b07b7ae0
  01d68:    	test   rax,rax
  01d6b:    	je     0xffff0f4b
  01d71: ff 	mov    QWORD PTR [rbp-0x90],rax
:00138 %14 = %11
  01d78:    	mov    rax,QWORD PTR [rbp-0x80]
  01d7c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00139 %15 = %12
  01d83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01d8a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01d91: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01d98: 00 	test   rdi,0x7
  01d9f:    	jne    0x3942e
  01da5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01da9:    	jne    0x3942e
  01daf: 26 	cmp    DWORD PTR [rip+0xffffffffffff227f],0x26        # 0xffff4035
  01db6:    	jne    0x3942e
  01dbc:    	sub    rsp,0x40
  01dc0:    	movq   QWORD PTR [rsp],xmm2
  01dc5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dcb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01dd1:    	movq   QWORD PTR [rsp+0x18],xmm7
  01dd7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01dde: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01de5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01dec: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01df3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01dfc:    	mov    QWORD PTR [rsp-0x38],rcx
  01e01:    	mov    rax,QWORD PTR [rbx]
  01e04:    	lea    rsi,[rsp-0x18]
  01e09:    	mov    QWORD PTR [rsi],rax
  01e0c:    	mov    QWORD PTR [rbx],rsi
  01e0f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01e16:    	mov    QWORD PTR [rsp-0x38],rax
  01e1b: 00 	mov    rdi,0x2
  01e22:    	lea    r8,[rsp-0x40]
  01e27: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01e2e:    	mov    QWORD PTR [r8],rax
  01e31:    	sub    r8,0x8
  01e35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01e3c:    	mov    QWORD PTR [r8],rax
  01e3f:    	sub    r8,0x8
  01e43: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e4c: 10 	movabs rax,0x1001000000046
  01e56:    	mov    QWORD PTR [rsp-0x28],rax
  01e5b: b5 	movabs r13,0x55b5b07be970
  01e65:    	call   0xffff4c82
  01e6a:    	lea    rdi,[rbp-0x8]
  01e6e:    	mov    QWORD PTR [rbx],rdi
  01e71:    	movq   xmm2,QWORD PTR [rsp]
  01e76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e7c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e82:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e88: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e8f: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e96: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e9d: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ea4:    	add    rsp,0x40
  01ea8: b5 	movabs r13,0x55b5b07b7b20
  01eb2:    	test   rax,rax
  01eb5:    	je     0xffff0f4b
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ebb:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ebf:    	mov    rax,QWORD PTR [rdi+0x10]
  01ec3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00144 %14 = 2: i32
  01eca: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01ed5:    	sub    rsp,0x40
  01ed9:    	movq   QWORD PTR [rsp],xmm2
  01ede:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ee4:    	movq   QWORD PTR [rsp+0x10],xmm5
  01eea:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ef0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ef7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01efe: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f05: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f0c: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01f13: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01f1a:    	mov    rdi,rbx
  01f1d:    	mov    rsi,r12
  01f20: b5 	movabs r8,0x55b5b07b7b58
  01f2a: b5 	movabs rax,0x55b5b0091aa0
  01f34:    	call   rax
  01f36:    	movq   xmm2,QWORD PTR [rsp]
  01f3b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f41:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f47:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f4d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f54: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f5b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f62: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f69:    	add    rsp,0x40
  01f6d: b5 	movabs r13,0x55b5b07b7b60
  01f77:    	test   rax,rax
  01f7a:    	je     0xffff0f4b
  01f80: ff 	mov    QWORD PTR [rbp-0x90],rax
:00146 %14 = %11
  01f87:    	mov    rax,QWORD PTR [rbp-0x80]
  01f8b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 %15 = %12
  01f92: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01f99: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fa0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fa7: 00 	test   rdi,0x7
  01fae:    	jne    0x3949c
  01fb4:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01fb8:    	jne    0x3949c
  01fbe: 26 	cmp    DWORD PTR [rip+0xffffffffffff2070],0x26        # 0xffff4035
  01fc5:    	jne    0x3949c
  01fcb:    	sub    rsp,0x40
  01fcf:    	movq   QWORD PTR [rsp],xmm2
  01fd4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01fda:    	movq   QWORD PTR [rsp+0x10],xmm5
  01fe0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01fe6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01fed: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ff4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ffb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02002: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0200b:    	mov    QWORD PTR [rsp-0x38],rcx
  02010:    	mov    rax,QWORD PTR [rbx]
  02013:    	lea    rsi,[rsp-0x18]
  02018:    	mov    QWORD PTR [rsi],rax
  0201b:    	mov    QWORD PTR [rbx],rsi
  0201e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02025:    	mov    QWORD PTR [rsp-0x38],rax
  0202a: 00 	mov    rdi,0x2
  02031:    	lea    r8,[rsp-0x40]
  02036: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0203d:    	mov    QWORD PTR [r8],rax
  02040:    	sub    r8,0x8
  02044: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0204b:    	mov    QWORD PTR [r8],rax
  0204e:    	sub    r8,0x8
  02052: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0205b: 10 	movabs rax,0x1001000000046
  02065:    	mov    QWORD PTR [rsp-0x28],rax
  0206a: b5 	movabs r13,0x55b5b07be970
  02074:    	call   0xffff4c82
  02079:    	lea    rdi,[rbp-0x8]
  0207d:    	mov    QWORD PTR [rbx],rdi
  02080:    	movq   xmm2,QWORD PTR [rsp]
  02085:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0208b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02091:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02097: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0209e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020a5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020ac: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020b3:    	add    rsp,0x40
  020b7: b5 	movabs r13,0x55b5b07b7ba0
  020c1:    	test   rax,rax
  020c4:    	je     0xffff0f4b
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  020ca:    	mov    rdi,QWORD PTR [rbp-0x28]
  020ce:    	mov    rax,QWORD PTR [rdi+0x18]
  020d2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00152 %14 = %11
  020d9:    	mov    rax,QWORD PTR [rbp-0x80]
  020dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00153 %15 = %12
  020e4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  020eb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  020f2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  020f9: 00 	test   rdi,0x7
  02100:    	jne    0x3950a
  02106:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0210a:    	jne    0x3950a
  02110: 26 	cmp    DWORD PTR [rip+0xffffffffffff1f1e],0x26        # 0xffff4035
  02117:    	jne    0x3950a
  0211d:    	sub    rsp,0x40
  02121:    	movq   QWORD PTR [rsp],xmm2
  02126:    	movq   QWORD PTR [rsp+0x8],xmm4
  0212c:    	movq   QWORD PTR [rsp+0x10],xmm5
  02132:    	movq   QWORD PTR [rsp+0x18],xmm7
  02138: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0213f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02146: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0214d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02154: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0215d:    	mov    QWORD PTR [rsp-0x38],rcx
  02162:    	mov    rax,QWORD PTR [rbx]
  02165:    	lea    rsi,[rsp-0x18]
  0216a:    	mov    QWORD PTR [rsi],rax
  0216d:    	mov    QWORD PTR [rbx],rsi
  02170: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02177:    	mov    QWORD PTR [rsp-0x38],rax
  0217c: 00 	mov    rdi,0x2
  02183:    	lea    r8,[rsp-0x40]
  02188: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0218f:    	mov    QWORD PTR [r8],rax
  02192:    	sub    r8,0x8
  02196: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0219d:    	mov    QWORD PTR [r8],rax
  021a0:    	sub    r8,0x8
  021a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021ad: 0e 	movabs rax,0x1000e00000048
  021b7:    	mov    QWORD PTR [rsp-0x28],rax
  021bc: b5 	movabs r13,0x55b5b07c4d60
  021c6:    	call   0xffff5290
  021cb:    	lea    rdi,[rbp-0x8]
  021cf:    	mov    QWORD PTR [rbx],rdi
  021d2:    	movq   xmm2,QWORD PTR [rsp]
  021d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021dd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021e3:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021e9: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021f0: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021f7: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021fe: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02205:    	add    rsp,0x40
  02209: b5 	movabs r13,0x55b5b07b7c00
  02213:    	test   rax,rax
  02216:    	je     0xffff0f4b
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  0221c: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  02223: 00 	test   rdi,0x7
  0222a:    	jne    0x39578
  02230:    	cmp    DWORD PTR [rdi+0x4],0x30
  02234:    	jne    0x39578
  0223a: 26 	cmp    DWORD PTR [rip+0xffffffffffff1df4],0x26        # 0xffff4035
  02241:    	jne    0x39578
  02247:    	mov    esi,DWORD PTR [rip+0x377]        # 0x25c4
  0224d:    	cmp    esi,0xffffffff
  02250:    	je     0x395e6
  02256:    	cmp    WORD PTR [rdi+0x2],0x3
  0225b:    	jne    0x2274
  02261:    	cmp    esi,0x6
  02264:    	jge    0x2274
  0226a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0226f:    	jmp    0x22ee
  02274:    	sub    rsp,0x40
  02278:    	movq   QWORD PTR [rsp],xmm2
  0227d:    	movq   QWORD PTR [rsp+0x8],xmm4
  02283:    	movq   QWORD PTR [rsp+0x10],xmm5
  02289:    	movq   QWORD PTR [rsp+0x18],xmm7
  0228f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02296: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0229d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022a4: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  022ab: b5 	movabs rax,0x55b5b00a3ef0
  022b5:    	call   rax
  022b7:    	movq   xmm2,QWORD PTR [rsp]
  022bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  022c2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  022c8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  022ce: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  022d5: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  022dc: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  022e3: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  022ea:    	add    rsp,0x40
  022ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00158 
:00160 condnotbr %13 =>:00166
  022f5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022fc:    	or     rax,0x10
  02300:    	cmp    rax,0x14
  02304:    	je     0x2417
:00161 %13 = dynvar(2, %6)
  0230a:    	mov    rax,QWORD PTR [rbp-0x10]
  0230e:    	mov    rax,QWORD PTR [rax]
  02311:    	mov    rax,QWORD PTR [rax-0x48]
  02315: ff 	mov    QWORD PTR [rbp-0x90],rax
:00162 %14 = literal[1.0]
  0231c: 00 	movq   xmm3,QWORD PTR [rip+0x2a4]        # 0x25c8
  02324: 00 	movabs rax,0xff80000000000002
  0232e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00163 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  02335: 01 	sub    DWORD PTR [rip+0x294],0x1        # 0x25d0
  0233c:    	je     0x396eb
  02342: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02349: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  02350:    	sub    rsp,0x50
  02354:    	movq   QWORD PTR [rsp],xmm2
  02359:    	movq   QWORD PTR [rsp+0x8],xmm3
  0235f:    	movq   QWORD PTR [rsp+0x10],xmm4
  02365:    	movq   QWORD PTR [rsp+0x18],xmm5
  0236b:    	movq   QWORD PTR [rsp+0x20],xmm7
  02371: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  02378: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0237f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  02386: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0238d:    	mov    rdx,rdi
  02390:    	mov    rcx,rsi
  02393:    	mov    rdi,rbx
  02396:    	mov    rsi,r12
  02399: b5 	movabs rax,0x55b5b00e6cb0
  023a3:    	call   rax
  023a5:    	movq   xmm2,QWORD PTR [rsp]
  023aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  023b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  023b6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  023bc:    	movq   xmm7,QWORD PTR [rsp+0x20]
  023c2: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  023c9: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  023d0: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  023d7: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  023de:    	add    rsp,0x50
  023e2: b5 	movabs r13,0x55b5b07b7c80
  023ec:    	test   rax,rax
  023ef:    	je     0xffff0f4b
  023f5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00164 dynvar(2, %6) = %13
  023fc:    	mov    rax,QWORD PTR [rbp-0x10]
  02400:    	mov    rax,QWORD PTR [rax]
  02403: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0240a:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  0240e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02415:    	leave  
  02416:    	ret    
:00166 %13 = literal[0.0]
  02417: 00 	movq   xmm3,QWORD PTR [rip+0x1b9]        # 0x25d8
  0241f: 00 	movabs rax,0x8000000000000002
  02429: ff 	mov    QWORD PTR [rbp-0x90],rax
:00167 ret %13
  02430: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02437:    	leave  
  02438:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55b5b07be970
<== finished compile. elapsed:196.5µs
offset:Pos(71368) code: 7332 bytes  data: 396 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x3712d
  00022:    	jmp    0x3712d
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086: ff 	mov    QWORD PTR [rbp-0x98],rax
  0008d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00094:    	mov    rdi,QWORD PTR [rbp-0x28]
  00098: 00 	test   rdi,0x7
  0009f:    	jne    0x3713c
  000a5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  000a9:    	jne    0x3713c
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  000af:    	mov    rdi,QWORD PTR [rbp-0x30]
  000b3: 00 	test   rdi,0x7
  000ba:    	jne    0x3714b
  000c0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000c4:    	jne    0x3714b
  000ca: 26 	cmp    DWORD PTR [rip+0xffffffffffff1984],0x26        # 0xffff1a55
  000d1:    	jne    0x3714b
  000d7:    	mov    esi,DWORD PTR [rip+0x1bcb]        # 0x1ca8
  000dd:    	cmp    esi,0xffffffff
  000e0:    	je     0x3715a
  000e6:    	cmp    WORD PTR [rdi+0x2],0x3
  000eb:    	jne    0x104
  000f1:    	cmp    esi,0x6
  000f4:    	jge    0x104
  000fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff:    	jmp    0x110
  00104: b5 	movabs rax,0x55b5b00a3ef0
  0010e:    	call   rax
  00110:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  00114:    	mov    rdi,QWORD PTR [rbp-0x28]
  00118:    	mov    rax,QWORD PTR [rdi+0x10]
  0011c:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00120:    	mov    rdi,QWORD PTR [rbp-0x70]
  00124: 00 	test   rdi,0x7
  0012b:    	jne    0x37183
  00131:    	cmp    DWORD PTR [rdi+0x4],0x28
  00135:    	jne    0x37183
  0013b: 26 	cmp    DWORD PTR [rip+0xffffffffffff1913],0x26        # 0xffff1a55
  00142:    	jne    0x37183
  00148: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00151:    	mov    QWORD PTR [rsp-0x38],rcx
  00156:    	mov    rax,QWORD PTR [rbx]
  00159:    	lea    rsi,[rsp-0x18]
  0015e:    	mov    QWORD PTR [rsi],rax
  00161:    	mov    QWORD PTR [rbx],rsi
  00164:    	mov    rax,QWORD PTR [rbp-0x70]
  00168:    	mov    QWORD PTR [rsp-0x38],rax
  0016d: 00 	mov    rdi,0x1
  00174:    	lea    r8,[rsp-0x40]
  00179:    	mov    rax,QWORD PTR [rbp-0x78]
  0017d:    	mov    QWORD PTR [r8],rax
  00180:    	sub    r8,0x8
  00184: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0018d: 08 	movabs rax,0x800000040
  00197:    	mov    QWORD PTR [rsp-0x28],rax
  0019c: b5 	movabs r13,0x55b5b08082c0
  001a6:    	call   0xffff2734
  001ab:    	lea    rdi,[rbp-0x8]
  001af:    	mov    QWORD PTR [rbx],rdi
  001b2: b5 	movabs r13,0x55b5b07be9e0
  001bc:    	test   rax,rax
  001bf:    	je     0xfffee96b
  001c5:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001c9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001cd: 00 	test   rdi,0x7
  001d4:    	jne    0x37192
  001da:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001de:    	jne    0x37192
  001e4: 26 	cmp    DWORD PTR [rip+0xffffffffffff186a],0x26        # 0xffff1a55
  001eb:    	jne    0x37192
  001f1:    	mov    esi,DWORD PTR [rip+0x1ab9]        # 0x1cb0
  001f7:    	cmp    esi,0xffffffff
  001fa:    	je     0x371a1
  00200:    	cmp    WORD PTR [rdi+0x2],0x3
  00205:    	jne    0x21e
  0020b:    	cmp    esi,0x6
  0020e:    	jge    0x21e
  00214:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00219:    	jmp    0x22a
  0021e: b5 	movabs rax,0x55b5b00a3ef0
  00228:    	call   rax
  0022a:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0022e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00232: 00 	test   rdi,0x7
  00239:    	jne    0x371ca
  0023f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00243:    	jne    0x371ca
  00249: 26 	cmp    DWORD PTR [rip+0xffffffffffff1805],0x26        # 0xffff1a55
  00250:    	jne    0x371ca
  00256: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0025f:    	mov    QWORD PTR [rsp-0x38],rcx
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rsi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rsi],rax
  0026f:    	mov    QWORD PTR [rbx],rsi
  00272:    	mov    rax,QWORD PTR [rbp-0x40]
  00276:    	mov    QWORD PTR [rsp-0x38],rax
  0027b: 00 	mov    rdi,0x1
  00282:    	lea    r8,[rsp-0x40]
  00287:    	mov    rax,QWORD PTR [rbp-0x70]
  0028b:    	mov    QWORD PTR [r8],rax
  0028e:    	sub    r8,0x8
  00292: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0029b: 05 	movabs rax,0x500000042
  002a5:    	mov    QWORD PTR [rsp-0x28],rax
  002aa: b5 	movabs r13,0x55b5b07ddec0
  002b4:    	call   0xffff27c6
  002b9:    	lea    rdi,[rbp-0x8]
  002bd:    	mov    QWORD PTR [rbx],rdi
  002c0: b5 	movabs r13,0x55b5b07bea40
  002ca:    	test   rax,rax
  002cd:    	je     0xfffee96b
  002d3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002d7:    	mov    rax,QWORD PTR [rbp-0x40]
  002db:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002df:    	mov    rdi,QWORD PTR [rbp-0x40]
  002e3: 00 	test   rdi,0x7
  002ea:    	jne    0x371d9
  002f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  002f4:    	jne    0x371d9
  002fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff1754],0x26        # 0xffff1a55
  00301:    	jne    0x371d9
  00307: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00310:    	mov    QWORD PTR [rsp-0x38],rcx
  00315:    	mov    rax,QWORD PTR [rbx]
  00318:    	lea    rsi,[rsp-0x18]
  0031d:    	mov    QWORD PTR [rsi],rax
  00320:    	mov    QWORD PTR [rbx],rsi
  00323:    	mov    rax,QWORD PTR [rbp-0x40]
  00327:    	mov    QWORD PTR [rsp-0x38],rax
  0032c: 00 	mov    rdi,0x1
  00333:    	lea    r8,[rsp-0x40]
  00338:    	mov    rax,QWORD PTR [rbp-0x78]
  0033c:    	mov    QWORD PTR [r8],rax
  0033f:    	sub    r8,0x8
  00343: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0034c: 05 	movabs rax,0x500000042
  00356:    	mov    QWORD PTR [rsp-0x28],rax
  0035b: b5 	movabs r13,0x55b5b07ddec0
  00365:    	call   0xffff27c6
  0036a:    	lea    rdi,[rbp-0x8]
  0036e:    	mov    QWORD PTR [rbx],rdi
  00371: b5 	movabs r13,0x55b5b07bea80
  0037b:    	test   rax,rax
  0037e:    	je     0xfffee96b
  00384:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00388:    	mov    rdi,QWORD PTR [rbp-0x28]
  0038c:    	mov    rax,QWORD PTR [rdi+0x18]
  00390:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00394:    	mov    rdi,QWORD PTR [rbp-0x28]
  00398:    	mov    rax,QWORD PTR [rdi+0x18]
  0039c:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  003a0:    	mov    rdi,QWORD PTR [rbp-0x78]
  003a4: 00 	test   rdi,0x1
  003ab:    	jne    0x371e8
  003b1: 00 	test   rdi,0x2
  003b8:    	je     0x3f4
  003be:    	xorps  xmm2,xmm2
  003c1: 00 	movabs rax,0x8000000000000002
  003cb:    	cmp    rdi,rax
  003ce:    	je     0x406
  003d4:    	mov    rax,rdi
  003d7:    	sar    rax,0x3f
  003db:    	add    rax,0x2
  003df:    	and    rdi,0xfffffffffffffffc
  003e3:    	or     rdi,rax
  003e6:    	rol    rdi,0x3d
  003ea:    	movq   xmm2,rdi
  003ef:    	jmp    0x406
  003f4:    	call   0xfffee9c4
  003f9:    	test   rax,rax
  003fc:    	je     0x371e8
  00402:    	movq   xmm2,xmm0
  00406:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040a: 00 	test   rdi,0x1
  00411:    	jne    0x371f7
  00417: 00 	test   rdi,0x2
  0041e:    	je     0x45a
  00424:    	xorps  xmm3,xmm3
  00427: 00 	movabs rax,0x8000000000000002
  00431:    	cmp    rdi,rax
  00434:    	je     0x46c
  0043a:    	mov    rax,rdi
  0043d:    	sar    rax,0x3f
  00441:    	add    rax,0x2
  00445:    	and    rdi,0xfffffffffffffffc
  00449:    	or     rdi,rax
  0044c:    	rol    rdi,0x3d
  00450:    	movq   xmm3,rdi
  00455:    	jmp    0x46c
  0045a:    	call   0xfffee9c4
  0045f:    	test   rax,rax
  00462:    	je     0x371f7
  00468:    	movq   xmm3,xmm0
  0046c:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00470:    	mov    rdi,QWORD PTR [rbp-0x70]
  00474: 00 	test   rdi,0x1
  0047b:    	jne    0x37206
  00481: 00 	test   rdi,0x2
  00488:    	je     0x4c4
  0048e:    	xorps  xmm4,xmm4
  00491: 00 	movabs rax,0x8000000000000002
  0049b:    	cmp    rdi,rax
  0049e:    	je     0x4d6
  004a4:    	mov    rax,rdi
  004a7:    	sar    rax,0x3f
  004ab:    	add    rax,0x2
  004af:    	and    rdi,0xfffffffffffffffc
  004b3:    	or     rdi,rax
  004b6:    	rol    rdi,0x3d
  004ba:    	movq   xmm4,rdi
  004bf:    	jmp    0x4d6
  004c4:    	call   0xfffee9c4
  004c9:    	test   rax,rax
  004cc:    	je     0x37206
  004d2:    	movq   xmm4,xmm0
  004d6:    	movq   xmm5,xmm4
  004da:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004de:    	mov    rdi,QWORD PTR [rbp-0x48]
  004e2: 00 	test   rdi,0x1
  004e9:    	jne    0x37222
  004ef: 00 	test   rdi,0x2
  004f6:    	je     0x532
  004fc:    	xorps  xmm6,xmm6
  004ff: 00 	movabs rax,0x8000000000000002
  00509:    	cmp    rdi,rax
  0050c:    	je     0x544
  00512:    	mov    rax,rdi
  00515:    	sar    rax,0x3f
  00519:    	add    rax,0x2
  0051d:    	and    rdi,0xfffffffffffffffc
  00521:    	or     rdi,rax
  00524:    	rol    rdi,0x3d
  00528:    	movq   xmm6,rdi
  0052d:    	jmp    0x544
  00532:    	call   0xfffee9c4
  00537:    	test   rax,rax
  0053a:    	je     0x37222
  00540:    	movq   xmm6,xmm0
  00544:    	movq   xmm4,xmm6
  00548:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0054c:    	movq   xmm7,xmm4
  00550:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00554: 00 	movq   xmm4,QWORD PTR [rip+0x175c]        # 0x1cb8
  0055c: 00 	movabs rax,0x8000000000000002
  00566:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0056a:    	ucomisd xmm7,xmm4
  0056e:    	jbe    0x3878f
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00574:    	movq   xmm4,xmm6
  00578: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1749]        # 0x1cc8
:00029 %11 = const[Math]                    [Math]
  0057f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff14e2]        # 0xffff1a68
  00586: 00 	cmp    rax,QWORD PTR [rip+0x175b]        # 0x1ce8
  0058d:    	jne    0x3724b
  00593: 00 	mov    rax,QWORD PTR [rip+0x173e]        # 0x1cd8
  0059a:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  0059e:    	mov    rdi,QWORD PTR [rbp-0x80]
  005a2: 00 	test   rdi,0x7
  005a9:    	jne    0x372d3
  005af:    	cmp    DWORD PTR [rdi+0x4],0x21
  005b3:    	jne    0x372d3
  005b9: 26 	cmp    DWORD PTR [rip+0xffffffffffff1495],0x26        # 0xffff1a55
  005c0:    	jne    0x372d3
  005c6:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005ca:    	movq   xmm3,xmm4
  005ce:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005d2: 00 	movq   xmm4,QWORD PTR [rip+0x171e]        # 0x1cf8
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e8:    	ucomisd xmm3,xmm4
  005ec:    	jbe    0x3864f
:00038 %9 = %2.call t()                     [<INVALID>]
  005f2: 01 	sub    DWORD PTR [rip+0x1707],0x1        # 0x1d00
  005f9:    	je     0x3735a
  005ff:    	sub    rsp,0x30
  00603:    	movq   QWORD PTR [rsp],xmm2
  00608:    	movq   QWORD PTR [rsp+0x8],xmm3
  0060e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00614:    	movq   QWORD PTR [rsp+0x18],xmm6
  0061a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00620:    	mov    rdi,QWORD PTR [rbp-0x38]
  00624: b5 	movabs rax,0x55b5b009e670
  0062e:    	call   rax
  00630:    	mov    r15d,eax
  00633: 00 	cmp    r15d,DWORD PTR [rip+0x16ce]        # 0x1d08
  0063a:    	jne    0x3737c
  00640:    	mov    eax,DWORD PTR [rip+0xffffffffffff140f]        # 0xffff1a55
  00646:    	cmp    DWORD PTR [rip+0x16b8],eax        # 0x1d04
  0064c:    	jne    0x3737c
  00652: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0065b:    	mov    QWORD PTR [rsp-0x38],rcx
  00660:    	mov    rax,QWORD PTR [rbx]
  00663:    	lea    rsi,[rsp-0x18]
  00668:    	mov    QWORD PTR [rsi],rax
  0066b:    	mov    QWORD PTR [rbx],rsi
  0066e:    	mov    rax,QWORD PTR [rbp-0x38]
  00672:    	mov    QWORD PTR [rsp-0x38],rax
  00677: 00 	mov    rdi,0x0
  0067e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00687: 00 	movabs rax,0x0
  00691:    	mov    QWORD PTR [rsp-0x28],rax
  00696: 00 	movabs r13,0x0
  006a0:    	call   0xfffee938
  006a5:    	lea    rdi,[rbp-0x8]
  006a9:    	mov    QWORD PTR [rbx],rdi
  006ac:    	movq   xmm2,QWORD PTR [rsp]
  006b1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006b7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006bd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006c3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  006c9:    	add    rsp,0x30
  006cd:    	test   rax,rax
  006d0:    	je     0x373e8
  006d6:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  006da:    	movq   xmm0,xmm3
  006de:    	call   0xfffeeae8
  006e3:    	mov    QWORD PTR [rbp-0x60],rax
  006e7:    	mov    rdi,QWORD PTR [rbp-0x60]
  006eb:    	mov    rsi,QWORD PTR [rbp-0x70]
  006ef: 00 	test   rdi,0x1
  006f6:    	je     0x373f7
  006fc: 00 	test   rsi,0x1
  00703:    	je     0x373f7
  00709:    	cmp    rdi,rsi
  0070c:    	jge    0x386dc
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  00712: 01 	sub    DWORD PTR [rip+0x15f3],0x1        # 0x1d0c
  00719:    	je     0x37495
  0071f:    	sub    rsp,0x30
  00723:    	movq   QWORD PTR [rsp],xmm2
  00728:    	movq   QWORD PTR [rsp+0x8],xmm3
  0072e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00734:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00740:    	mov    rdi,QWORD PTR [rbp-0x38]
  00744: b5 	movabs rax,0x55b5b009e670
  0074e:    	call   rax
  00750:    	mov    r15d,eax
  00753: 00 	cmp    r15d,DWORD PTR [rip+0x15ba]        # 0x1d14
  0075a:    	jne    0x374b7
  00760:    	mov    eax,DWORD PTR [rip+0xffffffffffff12ef]        # 0xffff1a55
  00766:    	cmp    DWORD PTR [rip+0x15a4],eax        # 0x1d10
  0076c:    	jne    0x374b7
  00772: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0077b:    	mov    QWORD PTR [rsp-0x38],rcx
  00780:    	mov    rax,QWORD PTR [rbx]
  00783:    	lea    rsi,[rsp-0x18]
  00788:    	mov    QWORD PTR [rsi],rax
  0078b:    	mov    QWORD PTR [rbx],rsi
  0078e:    	mov    rax,QWORD PTR [rbp-0x38]
  00792:    	mov    QWORD PTR [rsp-0x38],rax
  00797: 00 	mov    rdi,0x1
  0079e:    	lea    r8,[rsp-0x40]
  007a3:    	mov    rax,QWORD PTR [rbp-0x60]
  007a7:    	mov    QWORD PTR [r8],rax
  007aa:    	sub    r8,0x8
  007ae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007b7: 00 	movabs rax,0x0
  007c1:    	mov    QWORD PTR [rsp-0x28],rax
  007c6: 00 	movabs r13,0x0
  007d0:    	call   0xfffee938
  007d5:    	lea    rdi,[rbp-0x8]
  007d9:    	mov    QWORD PTR [rbx],rdi
  007dc:    	movq   xmm2,QWORD PTR [rsp]
  007e1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007e7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007ed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007f3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007f9:    	add    rsp,0x30
  007fd:    	test   rax,rax
  00800:    	je     0x37523
:00044 
:00046 %9 = literal[true]
  00806: 00 	mov    rax,0x1c
  0080d:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  00811: 01 	sub    DWORD PTR [rip+0x1500],0x1        # 0x1d18
  00818:    	je     0x3756f
  0081e:    	sub    rsp,0x30
  00822:    	movq   QWORD PTR [rsp],xmm2
  00827:    	movq   QWORD PTR [rsp+0x8],xmm3
  0082d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00833:    	movq   QWORD PTR [rsp+0x18],xmm6
  00839:    	movq   QWORD PTR [rsp+0x20],xmm7
  0083f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00843: b5 	movabs rax,0x55b5b009e670
  0084d:    	call   rax
  0084f:    	mov    r15d,eax
  00852: 00 	cmp    r15d,DWORD PTR [rip+0x14c7]        # 0x1d20
  00859:    	jne    0x37591
  0085f:    	mov    eax,DWORD PTR [rip+0xffffffffffff11f0]        # 0xffff1a55
  00865:    	cmp    DWORD PTR [rip+0x14b1],eax        # 0x1d1c
  0086b:    	jne    0x37591
  00871: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0087a:    	mov    QWORD PTR [rsp-0x38],rcx
  0087f:    	mov    rax,QWORD PTR [rbx]
  00882:    	lea    rsi,[rsp-0x18]
  00887:    	mov    QWORD PTR [rsi],rax
  0088a:    	mov    QWORD PTR [rbx],rsi
  0088d:    	mov    rax,QWORD PTR [rbp-0x38]
  00891:    	mov    QWORD PTR [rsp-0x38],rax
  00896: 00 	mov    rdi,0x1
  0089d:    	lea    r8,[rsp-0x40]
  008a2:    	mov    rax,QWORD PTR [rbp-0x70]
  008a6:    	mov    QWORD PTR [r8],rax
  008a9:    	sub    r8,0x8
  008ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008b6: 00 	movabs rax,0x0
  008c0:    	mov    QWORD PTR [rsp-0x28],rax
  008c5: 00 	movabs r13,0x0
  008cf:    	call   0xfffee938
  008d4:    	lea    rdi,[rbp-0x8]
  008d8:    	mov    QWORD PTR [rbx],rdi
  008db:    	movq   xmm2,QWORD PTR [rsp]
  008e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008e6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008ec:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008f2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  008f8:    	add    rsp,0x30
  008fc:    	test   rax,rax
  008ff:    	je     0x375fd
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00905: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff115c]        # 0xffff1a68
  0090c: 00 	cmp    rax,QWORD PTR [rip+0x1425]        # 0x1d38
  00913:    	jne    0x3760c
  00919: 00 	mov    rax,QWORD PTR [rip+0x1408]        # 0x1d28
  00920:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00924: 01 	sub    DWORD PTR [rip+0x1415],0x1        # 0x1d40
  0092b:    	je     0x376b8
  00931:    	sub    rsp,0x20
  00935:    	movq   QWORD PTR [rsp],xmm3
  0093a:    	movq   QWORD PTR [rsp+0x8],xmm5
  00940:    	movq   QWORD PTR [rsp+0x10],xmm6
  00946:    	movq   QWORD PTR [rsp+0x18],xmm7
  0094c:    	mov    rdi,QWORD PTR [rbp-0x30]
  00950: b5 	movabs rax,0x55b5b009e670
  0095a:    	call   rax
  0095c:    	mov    r15d,eax
  0095f: 00 	cmp    r15d,DWORD PTR [rip+0x13e2]        # 0x1d48
  00966:    	jne    0x376da
  0096c:    	mov    eax,DWORD PTR [rip+0xffffffffffff10e3]        # 0xffff1a55
  00972:    	cmp    DWORD PTR [rip+0x13cc],eax        # 0x1d44
  00978:    	jne    0x376da
  0097e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00987:    	mov    QWORD PTR [rsp-0x38],rcx
  0098c:    	mov    rax,QWORD PTR [rbx]
  0098f:    	lea    rsi,[rsp-0x18]
  00994:    	mov    QWORD PTR [rsi],rax
  00997:    	mov    QWORD PTR [rbx],rsi
  0099a:    	mov    rax,QWORD PTR [rbp-0x30]
  0099e:    	mov    QWORD PTR [rsp-0x38],rax
  009a3: 00 	mov    rdi,0x0
  009aa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009b3: 00 	movabs rax,0x0
  009bd:    	mov    QWORD PTR [rsp-0x28],rax
  009c2: 00 	movabs r13,0x0
  009cc:    	call   0xfffee938
  009d1:    	lea    rdi,[rbp-0x8]
  009d5:    	mov    QWORD PTR [rbx],rdi
  009d8:    	movq   xmm3,QWORD PTR [rsp]
  009dd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009e3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009e9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009ef:    	add    rsp,0x20
  009f3:    	test   rax,rax
  009f6:    	je     0x37746
  009fc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00a03: 01 	sub    DWORD PTR [rip+0x1342],0x1        # 0x1d4c
  00a0a:    	je     0x3777e
  00a10:    	sub    rsp,0x20
  00a14:    	movq   QWORD PTR [rsp],xmm3
  00a19:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a25:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a2b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00a32: b5 	movabs rax,0x55b5b009e670
  00a3c:    	call   rax
  00a3e:    	mov    r15d,eax
  00a41: 00 	cmp    r15d,DWORD PTR [rip+0x130c]        # 0x1d54
  00a48:    	jne    0x377a0
  00a4e:    	mov    eax,DWORD PTR [rip+0xffffffffffff1001]        # 0xffff1a55
  00a54:    	cmp    DWORD PTR [rip+0x12f6],eax        # 0x1d50
  00a5a:    	jne    0x377a0
  00a60: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a69:    	mov    QWORD PTR [rsp-0x38],rcx
  00a6e:    	mov    rax,QWORD PTR [rbx]
  00a71:    	lea    rsi,[rsp-0x18]
  00a76:    	mov    QWORD PTR [rsi],rax
  00a79:    	mov    QWORD PTR [rbx],rsi
  00a7c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00a83:    	mov    QWORD PTR [rsp-0x38],rax
  00a88: 00 	mov    rdi,0x0
  00a8f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a98: 00 	movabs rax,0x0
  00aa2:    	mov    QWORD PTR [rsp-0x28],rax
  00aa7: 00 	movabs r13,0x0
  00ab1:    	call   0xfffee938
  00ab6:    	lea    rdi,[rbp-0x8]
  00aba:    	mov    QWORD PTR [rbx],rdi
  00abd:    	movq   xmm3,QWORD PTR [rsp]
  00ac2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ac8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ace:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ad4:    	add    rsp,0x20
  00ad8:    	test   rax,rax
  00adb:    	je     0x3780f
  00ae1:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00ae5: 01 	sub    DWORD PTR [rip+0x126c],0x1        # 0x1d58
  00aec:    	je     0x37847
  00af2:    	sub    rsp,0x20
  00af6:    	movq   QWORD PTR [rsp],xmm3
  00afb:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b01:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b07:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b0d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b11: b5 	movabs rax,0x55b5b009e670
  00b1b:    	call   rax
  00b1d:    	mov    r15d,eax
  00b20: 00 	cmp    r15d,DWORD PTR [rip+0x1239]        # 0x1d60
  00b27:    	jne    0x37869
  00b2d:    	mov    eax,DWORD PTR [rip+0xffffffffffff0f22]        # 0xffff1a55
  00b33:    	cmp    DWORD PTR [rip+0x1223],eax        # 0x1d5c
  00b39:    	jne    0x37869
  00b3f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b48:    	mov    QWORD PTR [rsp-0x38],rcx
  00b4d:    	mov    rax,QWORD PTR [rbx]
  00b50:    	lea    rsi,[rsp-0x18]
  00b55:    	mov    QWORD PTR [rsi],rax
  00b58:    	mov    QWORD PTR [rbx],rsi
  00b5b:    	mov    rax,QWORD PTR [rbp-0x30]
  00b5f:    	mov    QWORD PTR [rsp-0x38],rax
  00b64: 00 	mov    rdi,0x0
  00b6b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b74: 00 	movabs rax,0x0
  00b7e:    	mov    QWORD PTR [rsp-0x28],rax
  00b83: 00 	movabs r13,0x0
  00b8d:    	call   0xfffee938
  00b92:    	lea    rdi,[rbp-0x8]
  00b96:    	mov    QWORD PTR [rbx],rdi
  00b99:    	movq   xmm3,QWORD PTR [rsp]
  00b9e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ba4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00baa:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bb0:    	add    rsp,0x20
  00bb4:    	test   rax,rax
  00bb7:    	je     0x378d5
  00bbd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00bc4: 01 	sub    DWORD PTR [rip+0x1199],0x1        # 0x1d64
  00bcb:    	je     0x3790d
  00bd1:    	sub    rsp,0x20
  00bd5:    	movq   QWORD PTR [rsp],xmm3
  00bda:    	movq   QWORD PTR [rsp+0x8],xmm5
  00be0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00be6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00bec: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bf3: b5 	movabs rax,0x55b5b009e670
  00bfd:    	call   rax
  00bff:    	mov    r15d,eax
  00c02: 00 	cmp    r15d,DWORD PTR [rip+0x1163]        # 0x1d6c
  00c09:    	jne    0x3792f
  00c0f:    	mov    eax,DWORD PTR [rip+0xffffffffffff0e40]        # 0xffff1a55
  00c15:    	cmp    DWORD PTR [rip+0x114d],eax        # 0x1d68
  00c1b:    	jne    0x3792f
  00c21: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c2a:    	mov    QWORD PTR [rsp-0x38],rcx
  00c2f:    	mov    rax,QWORD PTR [rbx]
  00c32:    	lea    rsi,[rsp-0x18]
  00c37:    	mov    QWORD PTR [rsi],rax
  00c3a:    	mov    QWORD PTR [rbx],rsi
  00c3d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00c44:    	mov    QWORD PTR [rsp-0x38],rax
  00c49: 00 	mov    rdi,0x0
  00c50: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c59: 00 	movabs rax,0x0
  00c63:    	mov    QWORD PTR [rsp-0x28],rax
  00c68: 00 	movabs r13,0x0
  00c72:    	call   0xfffee938
  00c77:    	lea    rdi,[rbp-0x8]
  00c7b:    	mov    QWORD PTR [rbx],rdi
  00c7e:    	movq   xmm3,QWORD PTR [rsp]
  00c83:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c89:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c8f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c95:    	add    rsp,0x20
  00c99:    	test   rax,rax
  00c9c:    	je     0x3799e
  00ca2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00ca9: 01 	sub    DWORD PTR [rip+0x10c0],0x1        # 0x1d70
  00cb0:    	je     0x379d6
  00cb6: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00cbd:    	mov    rsi,QWORD PTR [rbp-0x60]
  00cc1:    	sub    rsp,0x20
  00cc5:    	movq   QWORD PTR [rsp],xmm3
  00cca:    	movq   QWORD PTR [rsp+0x8],xmm5
  00cd0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00cd6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00cdc:    	mov    rdx,rdi
  00cdf:    	mov    rcx,rsi
  00ce2:    	mov    rdi,rbx
  00ce5:    	mov    rsi,r12
  00ce8: b5 	movabs rax,0x55b5b00e8b30
  00cf2:    	call   rax
  00cf4:    	movq   xmm3,QWORD PTR [rsp]
  00cf9:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00cff:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d05:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d0b:    	add    rsp,0x20
  00d0f: b5 	movabs r13,0x55b5b07bed70
  00d19:    	test   rax,rax
  00d1c:    	je     0xfffee96b
  00d22: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00d29: 01 	sub    DWORD PTR [rip+0x1044],0x1        # 0x1d74
  00d30:    	je     0x37a21
  00d36:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d3a: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00d41:    	sub    rsp,0x20
  00d45:    	movq   QWORD PTR [rsp],xmm3
  00d4a:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d50:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d56:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d5c:    	mov    rdx,rdi
  00d5f:    	mov    rcx,rsi
  00d62:    	mov    rdi,rbx
  00d65:    	mov    rsi,r12
  00d68: b5 	movabs rax,0x55b5b00e6cb0
  00d72:    	call   rax
  00d74:    	movq   xmm3,QWORD PTR [rsp]
  00d79:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d7f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d85:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d8b:    	add    rsp,0x20
  00d8f: b5 	movabs r13,0x55b5b07bed80
  00d99:    	test   rax,rax
  00d9c:    	je     0xfffee96b
  00da2:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00da6: 01 	sub    DWORD PTR [rip+0xfcb],0x1        # 0x1d78
  00dad:    	je     0x37a6c
  00db3:    	sub    rsp,0x20
  00db7:    	movq   QWORD PTR [rsp],xmm3
  00dbc:    	movq   QWORD PTR [rsp+0x8],xmm5
  00dc2:    	movq   QWORD PTR [rsp+0x10],xmm6
  00dc8:    	movq   QWORD PTR [rsp+0x18],xmm7
  00dce:    	mov    rdi,QWORD PTR [rbp-0x30]
  00dd2: b5 	movabs rax,0x55b5b009e670
  00ddc:    	call   rax
  00dde:    	mov    r15d,eax
  00de1: 00 	cmp    r15d,DWORD PTR [rip+0xf98]        # 0x1d80
  00de8:    	jne    0x37a8e
  00dee:    	mov    eax,DWORD PTR [rip+0xffffffffffff0c61]        # 0xffff1a55
  00df4:    	cmp    DWORD PTR [rip+0xf82],eax        # 0x1d7c
  00dfa:    	jne    0x37a8e
  00e00: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e09:    	mov    QWORD PTR [rsp-0x38],rcx
  00e0e:    	mov    rax,QWORD PTR [rbx]
  00e11:    	lea    rsi,[rsp-0x18]
  00e16:    	mov    QWORD PTR [rsi],rax
  00e19:    	mov    QWORD PTR [rbx],rsi
  00e1c:    	mov    rax,QWORD PTR [rbp-0x30]
  00e20:    	mov    QWORD PTR [rsp-0x38],rax
  00e25: 00 	mov    rdi,0x0
  00e2c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e35: 00 	movabs rax,0x0
  00e3f:    	mov    QWORD PTR [rsp-0x28],rax
  00e44: 00 	movabs r13,0x0
  00e4e:    	call   0xfffee938
  00e53:    	lea    rdi,[rbp-0x8]
  00e57:    	mov    QWORD PTR [rbx],rdi
  00e5a:    	movq   xmm3,QWORD PTR [rsp]
  00e5f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e65:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e6b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e71:    	add    rsp,0x20
  00e75:    	test   rax,rax
  00e78:    	je     0x37afa
  00e7e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00e85: 01 	sub    DWORD PTR [rip+0xef8],0x1        # 0x1d84
  00e8c:    	je     0x37b32
  00e92:    	sub    rsp,0x20
  00e96:    	movq   QWORD PTR [rsp],xmm3
  00e9b:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ea1:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ea7:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ead: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00eb4: b5 	movabs rax,0x55b5b009e670
  00ebe:    	call   rax
  00ec0:    	mov    r15d,eax
  00ec3: 00 	cmp    r15d,DWORD PTR [rip+0xec2]        # 0x1d8c
  00eca:    	jne    0x37b54
  00ed0:    	mov    eax,DWORD PTR [rip+0xffffffffffff0b7f]        # 0xffff1a55
  00ed6:    	cmp    DWORD PTR [rip+0xeac],eax        # 0x1d88
  00edc:    	jne    0x37b54
  00ee2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00eeb:    	mov    QWORD PTR [rsp-0x38],rcx
  00ef0:    	mov    rax,QWORD PTR [rbx]
  00ef3:    	lea    rsi,[rsp-0x18]
  00ef8:    	mov    QWORD PTR [rsi],rax
  00efb:    	mov    QWORD PTR [rbx],rsi
  00efe: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00f05:    	mov    QWORD PTR [rsp-0x38],rax
  00f0a: 00 	mov    rdi,0x0
  00f11: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f1a: 00 	movabs rax,0x0
  00f24:    	mov    QWORD PTR [rsp-0x28],rax
  00f29: 00 	movabs r13,0x0
  00f33:    	call   0xfffee938
  00f38:    	lea    rdi,[rbp-0x8]
  00f3c:    	mov    QWORD PTR [rbx],rdi
  00f3f:    	movq   xmm3,QWORD PTR [rsp]
  00f44:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f4a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f50:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f56:    	add    rsp,0x20
  00f5a:    	test   rax,rax
  00f5d:    	je     0x37bc3
  00f63: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  00f6a: 01 	sub    DWORD PTR [rip+0xe1f],0x1        # 0x1d90
  00f71:    	je     0x37bfb
  00f77:    	sub    rsp,0x20
  00f7b:    	movq   QWORD PTR [rsp],xmm3
  00f80:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f86:    	movq   QWORD PTR [rsp+0x10],xmm6
  00f8c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00f92:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f96: b5 	movabs rax,0x55b5b009e670
  00fa0:    	call   rax
  00fa2:    	mov    r15d,eax
  00fa5: 00 	cmp    r15d,DWORD PTR [rip+0xdec]        # 0x1d98
  00fac:    	jne    0x37c1d
  00fb2:    	mov    eax,DWORD PTR [rip+0xffffffffffff0a9d]        # 0xffff1a55
  00fb8:    	cmp    DWORD PTR [rip+0xdd6],eax        # 0x1d94
  00fbe:    	jne    0x37c1d
  00fc4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fcd:    	mov    QWORD PTR [rsp-0x38],rcx
  00fd2:    	mov    rax,QWORD PTR [rbx]
  00fd5:    	lea    rsi,[rsp-0x18]
  00fda:    	mov    QWORD PTR [rsi],rax
  00fdd:    	mov    QWORD PTR [rbx],rsi
  00fe0:    	mov    rax,QWORD PTR [rbp-0x30]
  00fe4:    	mov    QWORD PTR [rsp-0x38],rax
  00fe9: 00 	mov    rdi,0x0
  00ff0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff9: 00 	movabs rax,0x0
  01003:    	mov    QWORD PTR [rsp-0x28],rax
  01008: 00 	movabs r13,0x0
  01012:    	call   0xfffee938
  01017:    	lea    rdi,[rbp-0x8]
  0101b:    	mov    QWORD PTR [rbx],rdi
  0101e:    	movq   xmm3,QWORD PTR [rsp]
  01023:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01029:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0102f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01035:    	add    rsp,0x20
  01039:    	test   rax,rax
  0103c:    	je     0x37c89
  01042: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01049: 01 	sub    DWORD PTR [rip+0xd4c],0x1        # 0x1d9c
  01050:    	je     0x37cc1
  01056:    	sub    rsp,0x20
  0105a:    	movq   QWORD PTR [rsp],xmm3
  0105f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01065:    	movq   QWORD PTR [rsp+0x10],xmm6
  0106b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01071: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01078: b5 	movabs rax,0x55b5b009e670
  01082:    	call   rax
  01084:    	mov    r15d,eax
  01087: 00 	cmp    r15d,DWORD PTR [rip+0xd16]        # 0x1da4
  0108e:    	jne    0x37ce3
  01094:    	mov    eax,DWORD PTR [rip+0xffffffffffff09bb]        # 0xffff1a55
  0109a:    	cmp    DWORD PTR [rip+0xd00],eax        # 0x1da0
  010a0:    	jne    0x37ce3
  010a6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010af:    	mov    QWORD PTR [rsp-0x38],rcx
  010b4:    	mov    rax,QWORD PTR [rbx]
  010b7:    	lea    rsi,[rsp-0x18]
  010bc:    	mov    QWORD PTR [rsi],rax
  010bf:    	mov    QWORD PTR [rbx],rsi
  010c2: ff 	mov    rax,QWORD PTR [rbp-0x98]
  010c9:    	mov    QWORD PTR [rsp-0x38],rax
  010ce: 00 	mov    rdi,0x0
  010d5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010de: 00 	movabs rax,0x0
  010e8:    	mov    QWORD PTR [rsp-0x28],rax
  010ed: 00 	movabs r13,0x0
  010f7:    	call   0xfffee938
  010fc:    	lea    rdi,[rbp-0x8]
  01100:    	mov    QWORD PTR [rbx],rdi
  01103:    	movq   xmm3,QWORD PTR [rsp]
  01108:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0110e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01114:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0111a:    	add    rsp,0x20
  0111e:    	test   rax,rax
  01121:    	je     0x37d52
  01127: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  0112e: 01 	sub    DWORD PTR [rip+0xc73],0x1        # 0x1da8
  01135:    	je     0x37d8a
  0113b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01142:    	mov    rsi,QWORD PTR [rbp-0x60]
  01146:    	sub    rsp,0x20
  0114a:    	movq   QWORD PTR [rsp],xmm3
  0114f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01155:    	movq   QWORD PTR [rsp+0x10],xmm6
  0115b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01161:    	mov    rdx,rdi
  01164:    	mov    rcx,rsi
  01167:    	mov    rdi,rbx
  0116a:    	mov    rsi,r12
  0116d: b5 	movabs rax,0x55b5b00e8b30
  01177:    	call   rax
  01179:    	movq   xmm3,QWORD PTR [rsp]
  0117e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01184:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0118a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01190:    	add    rsp,0x20
  01194: b5 	movabs r13,0x55b5b07bee50
  0119e:    	test   rax,rax
  011a1:    	je     0xfffee96b
  011a7: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  011ae: 01 	sub    DWORD PTR [rip+0xbf7],0x1        # 0x1dac
  011b5:    	je     0x37dd5
  011bb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011c2: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  011c9:    	sub    rsp,0x20
  011cd:    	movq   QWORD PTR [rsp],xmm3
  011d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  011d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  011de:    	movq   QWORD PTR [rsp+0x18],xmm7
  011e4:    	mov    rdx,rdi
  011e7:    	mov    rcx,rsi
  011ea:    	mov    rdi,rbx
  011ed:    	mov    rsi,r12
  011f0: b5 	movabs rax,0x55b5b00e6cb0
  011fa:    	call   rax
  011fc:    	movq   xmm3,QWORD PTR [rsp]
  01201:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01207:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0120d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01213:    	add    rsp,0x20
  01217: b5 	movabs r13,0x55b5b07bee60
  01221:    	test   rax,rax
  01224:    	je     0xfffee96b
  0122a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  01231: 01 	sub    DWORD PTR [rip+0xb78],0x1        # 0x1db0
  01238:    	je     0x37e20
  0123e:    	sub    rsp,0x20
  01242:    	movq   QWORD PTR [rsp],xmm3
  01247:    	movq   QWORD PTR [rsp+0x8],xmm5
  0124d:    	movq   QWORD PTR [rsp+0x10],xmm6
  01253:    	movq   QWORD PTR [rsp+0x18],xmm7
  01259:    	mov    rdi,QWORD PTR [rbp-0x30]
  0125d: b5 	movabs rax,0x55b5b009e670
  01267:    	call   rax
  01269:    	mov    r15d,eax
  0126c: 00 	cmp    r15d,DWORD PTR [rip+0xb45]        # 0x1db8
  01273:    	jne    0x37e42
  01279:    	mov    eax,DWORD PTR [rip+0xffffffffffff07d6]        # 0xffff1a55
  0127f:    	cmp    DWORD PTR [rip+0xb2f],eax        # 0x1db4
  01285:    	jne    0x37e42
  0128b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01294:    	mov    QWORD PTR [rsp-0x38],rcx
  01299:    	mov    rax,QWORD PTR [rbx]
  0129c:    	lea    rsi,[rsp-0x18]
  012a1:    	mov    QWORD PTR [rsi],rax
  012a4:    	mov    QWORD PTR [rbx],rsi
  012a7:    	mov    rax,QWORD PTR [rbp-0x30]
  012ab:    	mov    QWORD PTR [rsp-0x38],rax
  012b0: 00 	mov    rdi,0x0
  012b7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012c0: 00 	movabs rax,0x0
  012ca:    	mov    QWORD PTR [rsp-0x28],rax
  012cf: 00 	movabs r13,0x0
  012d9:    	call   0xfffee938
  012de:    	lea    rdi,[rbp-0x8]
  012e2:    	mov    QWORD PTR [rbx],rdi
  012e5:    	movq   xmm3,QWORD PTR [rsp]
  012ea:    	movq   xmm5,QWORD PTR [rsp+0x8]
  012f0:    	movq   xmm6,QWORD PTR [rsp+0x10]
  012f6:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012fc:    	add    rsp,0x20
  01300:    	test   rax,rax
  01303:    	je     0x37eae
  01309: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  01310: 01 	sub    DWORD PTR [rip+0xaa5],0x1        # 0x1dbc
  01317:    	je     0x37ee6
  0131d:    	sub    rsp,0x20
  01321:    	movq   QWORD PTR [rsp],xmm3
  01326:    	movq   QWORD PTR [rsp+0x8],xmm5
  0132c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01332:    	movq   QWORD PTR [rsp+0x18],xmm7
  01338: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0133f: b5 	movabs rax,0x55b5b009e670
  01349:    	call   rax
  0134b:    	mov    r15d,eax
  0134e: 00 	cmp    r15d,DWORD PTR [rip+0xa6f]        # 0x1dc4
  01355:    	jne    0x37f08
  0135b:    	mov    eax,DWORD PTR [rip+0xffffffffffff06f4]        # 0xffff1a55
  01361:    	cmp    DWORD PTR [rip+0xa59],eax        # 0x1dc0
  01367:    	jne    0x37f08
  0136d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01376:    	mov    QWORD PTR [rsp-0x38],rcx
  0137b:    	mov    rax,QWORD PTR [rbx]
  0137e:    	lea    rsi,[rsp-0x18]
  01383:    	mov    QWORD PTR [rsi],rax
  01386:    	mov    QWORD PTR [rbx],rsi
  01389: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01390:    	mov    QWORD PTR [rsp-0x38],rax
  01395: 00 	mov    rdi,0x0
  0139c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013a5: 00 	movabs rax,0x0
  013af:    	mov    QWORD PTR [rsp-0x28],rax
  013b4: 00 	movabs r13,0x0
  013be:    	call   0xfffee938
  013c3:    	lea    rdi,[rbp-0x8]
  013c7:    	mov    QWORD PTR [rbx],rdi
  013ca:    	movq   xmm3,QWORD PTR [rsp]
  013cf:    	movq   xmm5,QWORD PTR [rsp+0x8]
  013d5:    	movq   xmm6,QWORD PTR [rsp+0x10]
  013db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  013e1:    	add    rsp,0x20
  013e5:    	test   rax,rax
  013e8:    	je     0x37f77
  013ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  013f5: 01 	sub    DWORD PTR [rip+0x9cc],0x1        # 0x1dc8
  013fc:    	je     0x37faf
  01402:    	sub    rsp,0x20
  01406:    	movq   QWORD PTR [rsp],xmm3
  0140b:    	movq   QWORD PTR [rsp+0x8],xmm5
  01411:    	movq   QWORD PTR [rsp+0x10],xmm6
  01417:    	movq   QWORD PTR [rsp+0x18],xmm7
  0141d:    	mov    rdi,QWORD PTR [rbp-0x30]
  01421: b5 	movabs rax,0x55b5b009e670
  0142b:    	call   rax
  0142d:    	mov    r15d,eax
  01430: 00 	cmp    r15d,DWORD PTR [rip+0x999]        # 0x1dd0
  01437:    	jne    0x37fd1
  0143d:    	mov    eax,DWORD PTR [rip+0xffffffffffff0612]        # 0xffff1a55
  01443:    	cmp    DWORD PTR [rip+0x983],eax        # 0x1dcc
  01449:    	jne    0x37fd1
  0144f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01458:    	mov    QWORD PTR [rsp-0x38],rcx
  0145d:    	mov    rax,QWORD PTR [rbx]
  01460:    	lea    rsi,[rsp-0x18]
  01465:    	mov    QWORD PTR [rsi],rax
  01468:    	mov    QWORD PTR [rbx],rsi
  0146b:    	mov    rax,QWORD PTR [rbp-0x30]
  0146f:    	mov    QWORD PTR [rsp-0x38],rax
  01474: 00 	mov    rdi,0x0
  0147b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01484: 00 	movabs rax,0x0
  0148e:    	mov    QWORD PTR [rsp-0x28],rax
  01493: 00 	movabs r13,0x0
  0149d:    	call   0xfffee938
  014a2:    	lea    rdi,[rbp-0x8]
  014a6:    	mov    QWORD PTR [rbx],rdi
  014a9:    	movq   xmm3,QWORD PTR [rsp]
  014ae:    	movq   xmm5,QWORD PTR [rsp+0x8]
  014b4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  014ba:    	movq   xmm7,QWORD PTR [rsp+0x18]
  014c0:    	add    rsp,0x20
  014c4:    	test   rax,rax
  014c7:    	je     0x3803d
  014cd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  014d4: 01 	sub    DWORD PTR [rip+0x8f9],0x1        # 0x1dd4
  014db:    	je     0x38075
  014e1:    	sub    rsp,0x20
  014e5:    	movq   QWORD PTR [rsp],xmm3
  014ea:    	movq   QWORD PTR [rsp+0x8],xmm5
  014f0:    	movq   QWORD PTR [rsp+0x10],xmm6
  014f6:    	movq   QWORD PTR [rsp+0x18],xmm7
  014fc: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01503: b5 	movabs rax,0x55b5b009e670
  0150d:    	call   rax
  0150f:    	mov    r15d,eax
  01512: 00 	cmp    r15d,DWORD PTR [rip+0x8c3]        # 0x1ddc
  01519:    	jne    0x38097
  0151f:    	mov    eax,DWORD PTR [rip+0xffffffffffff0530]        # 0xffff1a55
  01525:    	cmp    DWORD PTR [rip+0x8ad],eax        # 0x1dd8
  0152b:    	jne    0x38097
  01531: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0153a:    	mov    QWORD PTR [rsp-0x38],rcx
  0153f:    	mov    rax,QWORD PTR [rbx]
  01542:    	lea    rsi,[rsp-0x18]
  01547:    	mov    QWORD PTR [rsi],rax
  0154a:    	mov    QWORD PTR [rbx],rsi
  0154d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01554:    	mov    QWORD PTR [rsp-0x38],rax
  01559: 00 	mov    rdi,0x0
  01560: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01569: 00 	movabs rax,0x0
  01573:    	mov    QWORD PTR [rsp-0x28],rax
  01578: 00 	movabs r13,0x0
  01582:    	call   0xfffee938
  01587:    	lea    rdi,[rbp-0x8]
  0158b:    	mov    QWORD PTR [rbx],rdi
  0158e:    	movq   xmm3,QWORD PTR [rsp]
  01593:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01599:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0159f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015a5:    	add    rsp,0x20
  015a9:    	test   rax,rax
  015ac:    	je     0x38106
  015b2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  015b9: 01 	sub    DWORD PTR [rip+0x820],0x1        # 0x1de0
  015c0:    	je     0x3813e
  015c6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015cd:    	mov    rsi,QWORD PTR [rbp-0x60]
  015d1:    	sub    rsp,0x20
  015d5:    	movq   QWORD PTR [rsp],xmm3
  015da:    	movq   QWORD PTR [rsp+0x8],xmm5
  015e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  015e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  015ec:    	mov    rdx,rdi
  015ef:    	mov    rcx,rsi
  015f2:    	mov    rdi,rbx
  015f5:    	mov    rsi,r12
  015f8: b5 	movabs rax,0x55b5b00e8b30
  01602:    	call   rax
  01604:    	movq   xmm3,QWORD PTR [rsp]
  01609:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0160f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01615:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0161b:    	add    rsp,0x20
  0161f: b5 	movabs r13,0x55b5b07bef30
  01629:    	test   rax,rax
  0162c:    	je     0xfffee96b
  01632: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  01639: 01 	sub    DWORD PTR [rip+0x7a4],0x1        # 0x1de4
  01640:    	je     0x38189
  01646: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0164d: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01654:    	sub    rsp,0x20
  01658:    	movq   QWORD PTR [rsp],xmm3
  0165d:    	movq   QWORD PTR [rsp+0x8],xmm5
  01663:    	movq   QWORD PTR [rsp+0x10],xmm6
  01669:    	movq   QWORD PTR [rsp+0x18],xmm7
  0166f:    	mov    rdx,rdi
  01672:    	mov    rcx,rsi
  01675:    	mov    rdi,rbx
  01678:    	mov    rsi,r12
  0167b: b5 	movabs rax,0x55b5b00e6cb0
  01685:    	call   rax
  01687:    	movq   xmm3,QWORD PTR [rsp]
  0168c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01692:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01698:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0169e:    	add    rsp,0x20
  016a2: b5 	movabs r13,0x55b5b07bef40
  016ac:    	test   rax,rax
  016af:    	je     0xfffee96b
  016b5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  016bc: 01 	sub    DWORD PTR [rip+0x725],0x1        # 0x1de8
  016c3:    	je     0x381d4
  016c9:    	sub    rsp,0x20
  016cd:    	movq   QWORD PTR [rsp],xmm3
  016d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  016d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  016de:    	movq   QWORD PTR [rsp+0x18],xmm7
  016e4:    	mov    rdi,QWORD PTR [rbp-0x78]
  016e8: b5 	movabs rax,0x55b5b009e670
  016f2:    	call   rax
  016f4:    	mov    r15d,eax
  016f7: 00 	cmp    r15d,DWORD PTR [rip+0x6f2]        # 0x1df0
  016fe:    	jne    0x381f6
  01704:    	mov    eax,DWORD PTR [rip+0xffffffffffff034b]        # 0xffff1a55
  0170a:    	cmp    DWORD PTR [rip+0x6dc],eax        # 0x1dec
  01710:    	jne    0x381f6
  01716: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0171f:    	mov    QWORD PTR [rsp-0x38],rcx
  01724:    	mov    rax,QWORD PTR [rbx]
  01727:    	lea    rsi,[rsp-0x18]
  0172c:    	mov    QWORD PTR [rsi],rax
  0172f:    	mov    QWORD PTR [rbx],rsi
  01732:    	mov    rax,QWORD PTR [rbp-0x78]
  01736:    	mov    QWORD PTR [rsp-0x38],rax
  0173b: 00 	mov    rdi,0x3
  01742:    	lea    r8,[rsp-0x40]
  01747:    	mov    rax,QWORD PTR [rbp-0x80]
  0174b:    	mov    QWORD PTR [r8],rax
  0174e:    	sub    r8,0x8
  01752: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01759:    	mov    QWORD PTR [r8],rax
  0175c:    	sub    r8,0x8
  01760: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01767:    	mov    QWORD PTR [r8],rax
  0176a:    	sub    r8,0x8
  0176e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01777: 00 	movabs rax,0x0
  01781:    	mov    QWORD PTR [rsp-0x28],rax
  01786: 00 	movabs r13,0x0
  01790:    	call   0xfffee938
  01795:    	lea    rdi,[rbp-0x8]
  01799:    	mov    QWORD PTR [rbx],rdi
  0179c:    	movq   xmm3,QWORD PTR [rsp]
  017a1:    	movq   xmm5,QWORD PTR [rsp+0x8]
  017a7:    	movq   xmm6,QWORD PTR [rsp+0x10]
  017ad:    	movq   xmm7,QWORD PTR [rsp+0x18]
  017b3:    	add    rsp,0x20
  017b7:    	test   rax,rax
  017ba:    	je     0x38262
  017c0:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  017c4: 01 	sub    DWORD PTR [rip+0x629],0x1        # 0x1df4
  017cb:    	je     0x3829a
  017d1:    	sub    rsp,0x20
  017d5:    	movq   QWORD PTR [rsp],xmm3
  017da:    	movq   QWORD PTR [rsp+0x8],xmm5
  017e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  017e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  017ec:    	mov    rdi,QWORD PTR [rbp-0x38]
  017f0: b5 	movabs rax,0x55b5b009e670
  017fa:    	call   rax
  017fc:    	mov    r15d,eax
  017ff: 00 	cmp    r15d,DWORD PTR [rip+0x5f6]        # 0x1dfc
  01806:    	jne    0x382bc
  0180c:    	mov    eax,DWORD PTR [rip+0xffffffffffff0243]        # 0xffff1a55
  01812:    	cmp    DWORD PTR [rip+0x5e0],eax        # 0x1df8
  01818:    	jne    0x382bc
  0181e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01827:    	mov    QWORD PTR [rsp-0x38],rcx
  0182c:    	mov    rax,QWORD PTR [rbx]
  0182f:    	lea    rsi,[rsp-0x18]
  01834:    	mov    QWORD PTR [rsi],rax
  01837:    	mov    QWORD PTR [rbx],rsi
  0183a:    	mov    rax,QWORD PTR [rbp-0x38]
  0183e:    	mov    QWORD PTR [rsp-0x38],rax
  01843: 00 	mov    rdi,0x1
  0184a:    	lea    r8,[rsp-0x40]
  0184f:    	mov    rax,QWORD PTR [rbp-0x70]
  01853:    	mov    QWORD PTR [r8],rax
  01856:    	sub    r8,0x8
  0185a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01863: 00 	movabs rax,0x0
  0186d:    	mov    QWORD PTR [rsp-0x28],rax
  01872: 00 	movabs r13,0x0
  0187c:    	call   0xfffee938
  01881:    	lea    rdi,[rbp-0x8]
  01885:    	mov    QWORD PTR [rbx],rdi
  01888:    	movq   xmm3,QWORD PTR [rsp]
  0188d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01893:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01899:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0189f:    	add    rsp,0x20
  018a3:    	test   rax,rax
  018a6:    	je     0x38328
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  018ac: 01 	sub    DWORD PTR [rip+0x54d],0x1        # 0x1e00
  018b3:    	je     0x38360
  018b9:    	sub    rsp,0x20
  018bd:    	movq   QWORD PTR [rsp],xmm3
  018c2:    	movq   QWORD PTR [rsp+0x8],xmm5
  018c8:    	movq   QWORD PTR [rsp+0x10],xmm6
  018ce:    	movq   QWORD PTR [rsp+0x18],xmm7
  018d4:    	mov    rdi,QWORD PTR [rbp-0x38]
  018d8: b5 	movabs rax,0x55b5b009e670
  018e2:    	call   rax
  018e4:    	mov    r15d,eax
  018e7: 00 	cmp    r15d,DWORD PTR [rip+0x51a]        # 0x1e08
  018ee:    	jne    0x38382
  018f4:    	mov    eax,DWORD PTR [rip+0xffffffffffff015b]        # 0xffff1a55
  018fa:    	cmp    DWORD PTR [rip+0x504],eax        # 0x1e04
  01900:    	jne    0x38382
  01906: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0190f:    	mov    QWORD PTR [rsp-0x38],rcx
  01914:    	mov    rax,QWORD PTR [rbx]
  01917:    	lea    rsi,[rsp-0x18]
  0191c:    	mov    QWORD PTR [rsi],rax
  0191f:    	mov    QWORD PTR [rbx],rsi
  01922:    	mov    rax,QWORD PTR [rbp-0x38]
  01926:    	mov    QWORD PTR [rsp-0x38],rax
  0192b: 00 	mov    rdi,0x0
  01932: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0193b: 00 	movabs rax,0x0
  01945:    	mov    QWORD PTR [rsp-0x28],rax
  0194a: 00 	movabs r13,0x0
  01954:    	call   0xfffee938
  01959:    	lea    rdi,[rbp-0x8]
  0195d:    	mov    QWORD PTR [rbx],rdi
  01960:    	movq   xmm3,QWORD PTR [rsp]
  01965:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0196b:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01971:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01977:    	add    rsp,0x20
  0197b:    	test   rax,rax
  0197e:    	je     0x383ee
  01984:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  01988:    	mov    rdi,QWORD PTR [rbp-0x28]
  0198c:    	sub    rsp,0x20
  01990:    	movq   QWORD PTR [rsp],xmm3
  01995:    	movq   QWORD PTR [rsp+0x8],xmm5
  0199b:    	movq   QWORD PTR [rsp+0x10],xmm6
  019a1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019a7: 00 	mov    rsi,0x90
  019ae:    	mov    rdx,r12
  019b1: b5 	movabs rax,0x55b5b0091cc0
  019bb:    	call   rax
  019bd:    	movq   xmm3,QWORD PTR [rsp]
  019c2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  019c8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  019ce:    	movq   xmm7,QWORD PTR [rsp+0x18]
  019d4:    	add    rsp,0x20
  019d8:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  019dc: 01 	sub    DWORD PTR [rip+0x429],0x1        # 0x1e0c
  019e3:    	je     0x38426
  019e9:    	sub    rsp,0x20
  019ed:    	movq   QWORD PTR [rsp],xmm3
  019f2:    	movq   QWORD PTR [rsp+0x8],xmm5
  019f8:    	movq   QWORD PTR [rsp+0x10],xmm6
  019fe:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a04:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a08: b5 	movabs rax,0x55b5b009e670
  01a12:    	call   rax
  01a14:    	mov    r15d,eax
  01a17: 00 	cmp    r15d,DWORD PTR [rip+0x3f6]        # 0x1e14
  01a1e:    	jne    0x38448
  01a24:    	mov    eax,DWORD PTR [rip+0xffffffffffff002b]        # 0xffff1a55
  01a2a:    	cmp    DWORD PTR [rip+0x3e0],eax        # 0x1e10
  01a30:    	jne    0x38448
  01a36: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a3f:    	mov    QWORD PTR [rsp-0x38],rcx
  01a44:    	mov    rax,QWORD PTR [rbx]
  01a47:    	lea    rsi,[rsp-0x18]
  01a4c:    	mov    QWORD PTR [rsi],rax
  01a4f:    	mov    QWORD PTR [rbx],rsi
  01a52:    	mov    rax,QWORD PTR [rbp-0x70]
  01a56:    	mov    QWORD PTR [rsp-0x38],rax
  01a5b: 00 	mov    rdi,0x1
  01a62:    	lea    r8,[rsp-0x40]
  01a67:    	mov    rax,QWORD PTR [rbp-0x78]
  01a6b:    	mov    QWORD PTR [r8],rax
  01a6e:    	sub    r8,0x8
  01a72: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a7b: 00 	movabs rax,0x0
  01a85:    	mov    QWORD PTR [rsp-0x28],rax
  01a8a: 00 	movabs r13,0x0
  01a94:    	call   0xfffee938
  01a99:    	lea    rdi,[rbp-0x8]
  01a9d:    	mov    QWORD PTR [rbx],rdi
  01aa0:    	movq   xmm3,QWORD PTR [rsp]
  01aa5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01aab:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01ab1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ab7:    	add    rsp,0x20
  01abb:    	test   rax,rax
  01abe:    	je     0x384b4
  01ac4:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01ac8: 01 	sub    DWORD PTR [rip+0x349],0x1        # 0x1e18
  01acf:    	je     0x384ec
  01ad5:    	sub    rsp,0x20
  01ad9:    	movq   QWORD PTR [rsp],xmm3
  01ade:    	movq   QWORD PTR [rsp+0x8],xmm5
  01ae4:    	movq   QWORD PTR [rsp+0x10],xmm6
  01aea:    	movq   QWORD PTR [rsp+0x18],xmm7
  01af0:    	mov    rdi,QWORD PTR [rbp-0x68]
  01af4: b5 	movabs rax,0x55b5b009e670
  01afe:    	call   rax
  01b00:    	mov    r15d,eax
  01b03: 00 	cmp    r15d,DWORD PTR [rip+0x316]        # 0x1e20
  01b0a:    	jne    0x3850e
  01b10:    	mov    eax,DWORD PTR [rip+0xfffffffffffeff3f]        # 0xffff1a55
  01b16:    	cmp    DWORD PTR [rip+0x300],eax        # 0x1e1c
  01b1c:    	jne    0x3850e
  01b22: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b2b:    	mov    QWORD PTR [rsp-0x38],rcx
  01b30:    	mov    rax,QWORD PTR [rbx]
  01b33:    	lea    rsi,[rsp-0x18]
  01b38:    	mov    QWORD PTR [rsi],rax
  01b3b:    	mov    QWORD PTR [rbx],rsi
  01b3e:    	mov    rax,QWORD PTR [rbp-0x68]
  01b42:    	mov    QWORD PTR [rsp-0x38],rax
  01b47: 00 	mov    rdi,0x0
  01b4e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b57: 00 	movabs rax,0x0
  01b61:    	mov    QWORD PTR [rsp-0x28],rax
  01b66: 00 	movabs r13,0x0
  01b70:    	call   0xfffee938
  01b75:    	lea    rdi,[rbp-0x8]
  01b79:    	mov    QWORD PTR [rbx],rdi
  01b7c:    	movq   xmm3,QWORD PTR [rsp]
  01b81:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01b87:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01b8d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b93:    	add    rsp,0x20
  01b97:    	test   rax,rax
  01b9a:    	je     0x3857a
  01ba0:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01ba4: 01 	sub    DWORD PTR [rip+0x279],0x1        # 0x1e24
  01bab:    	je     0x385b2
  01bb1:    	sub    rsp,0x20
  01bb5:    	movq   QWORD PTR [rsp],xmm3
  01bba:    	movq   QWORD PTR [rsp+0x8],xmm5
  01bc0:    	movq   QWORD PTR [rsp+0x10],xmm6
  01bc6:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bcc:    	mov    rdi,QWORD PTR [rbp-0x38]
  01bd0: b5 	movabs rax,0x55b5b009e670
  01bda:    	call   rax
  01bdc:    	mov    r15d,eax
  01bdf: 00 	cmp    r15d,DWORD PTR [rip+0x246]        # 0x1e2c
  01be6:    	jne    0x385d4
  01bec:    	mov    eax,DWORD PTR [rip+0xfffffffffffefe63]        # 0xffff1a55
  01bf2:    	cmp    DWORD PTR [rip+0x230],eax        # 0x1e28
  01bf8:    	jne    0x385d4
  01bfe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c07:    	mov    QWORD PTR [rsp-0x38],rcx
  01c0c:    	mov    rax,QWORD PTR [rbx]
  01c0f:    	lea    rsi,[rsp-0x18]
  01c14:    	mov    QWORD PTR [rsi],rax
  01c17:    	mov    QWORD PTR [rbx],rsi
  01c1a:    	mov    rax,QWORD PTR [rbp-0x38]
  01c1e:    	mov    QWORD PTR [rsp-0x38],rax
  01c23: 00 	mov    rdi,0x1
  01c2a:    	lea    r8,[rsp-0x40]
  01c2f:    	mov    rax,QWORD PTR [rbp-0x70]
  01c33:    	mov    QWORD PTR [r8],rax
  01c36:    	sub    r8,0x8
  01c3a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c43: 00 	movabs rax,0x0
  01c4d:    	mov    QWORD PTR [rsp-0x28],rax
  01c52: 00 	movabs r13,0x0
  01c5c:    	call   0xfffee938
  01c61:    	lea    rdi,[rbp-0x8]
  01c65:    	mov    QWORD PTR [rbx],rdi
  01c68:    	movq   xmm3,QWORD PTR [rsp]
  01c6d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01c73:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01c79:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c7f:    	add    rsp,0x20
  01c83:    	test   rax,rax
  01c86:    	je     0x38640
:00110 
:00112 br =>:00113
  01c8c:    	jmp    0x3875c
:00113 br =>:00114
  01c91:    	jmp    0x387cf
:00114 %9 = nil
  01c96: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c9e:    	mov    rax,QWORD PTR [rbp-0x70]
  01ca2:    	leave  
  01ca3:    	ret    
==> start whole compile: <unnamed> FuncId(78) self_class:Scene start:[00000] bytecode:0x55b5b0793480
<== finished compile. elapsed:31.6µs
offset:Pos(79096) code: 298 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: je     0x70
  00014: jl     0x1f
  0001a: jmp    0x70
  0001f: mov    eax,0x1
  00024: sub    eax,edx
  00026: test   rax,rax
  00029: je     0x45
  0002f: lea    rdi,[rbp-0x38]
  00033: mov    QWORD PTR [rdi+rax*8],0x4
  0003b: sub    rax,0x1
  0003f: jne    0x33
  00045: mov    edx,0x1
  0004a: mov    eax,0x1
  0004f: sub    eax,edx
  00051: test   rax,rax
  00054: je     0x70
  0005a: lea    rdi,[rbp-0x38]
  0005e: mov    QWORD PTR [rdi+rax*8],0x0
  00066: sub    rax,0x1
  0006a: jne    0x5e
  00070: mov    rax,0x4
  00077: mov    QWORD PTR [rbp-0x38],rax
  0007b: mov    QWORD PTR [rbp-0x40],rax
  0007f: mov    QWORD PTR [rbp-0x48],rax
  00083: mov    rdi,QWORD PTR [rbp-0x28]
  00087: test   rdi,0x7
  0008e: jne    0x369e1
  00094: cmp    DWORD PTR [rdi+0x4],0x32
  00098: jne    0x369e1
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = dynvar(1, %3)
  0009e: mov    rax,QWORD PTR [rbp-0x10]
  000a2: mov    rax,QWORD PTR [rax-0x30]
  000a6: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = literal[5242881]
  000aa: mov    rax,0xa00003
  000b1: mov    QWORD PTR [rbp-0x48],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  000b5: mov    rdi,QWORD PTR [rbp-0x40]
  000b9: test   rdi,0x1
  000c0: je     0x369f0
  000c6: cmp    DWORD PTR [rip+0xfffffffffffefb58],0x26        # 0xfffefc25
  000cd: jne    0x369f0
  000d3: mov    r9,QWORD PTR [rbp-0x48]
  000d7: mov    rdx,rdi
  000da: mov    QWORD PTR [rsp-0x20],0x0
  000e3: mov    QWORD PTR [rsp-0x38],rcx
  000e8: mov    rax,QWORD PTR [rbx]
  000eb: lea    rsi,[rsp-0x18]
  000f0: mov    QWORD PTR [rsi],rax
  000f3: mov    QWORD PTR [rbx],rsi
  000f6: lea    rcx,[rbp-0x50]
  000fa: mov    r8,0x0
  00101: call   0x369ff
  00106: lea    rdi,[rbp-0x8]
  0010a: mov    QWORD PTR [rbx],rdi
  0010d: movabs r13,0x55b5b07934d0
  00117: test   rax,rax
  0011a: je     0xfffecb3b
  00120: mov    QWORD PTR [rbp-0x38],rax
:00004 
:00006 ret %2
  00124: mov    rax,QWORD PTR [rbp-0x38]
  00128: leave  
  00129: ret    
==> start whole compile: vcross FuncId(65) self_class:Vec start:[00000] bytecode:0x55b5b07a1dd0
<== finished compile. elapsed:99.8µs
offset:Pos(79394) code: 2478 bytes  data: 72 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: je     0x4a
  00014: jl     0x1f
  0001a: jmp    0x36907
  0001f: jmp    0x36907
  00024: mov    eax,0x1
  00029: sub    eax,edx
  0002b: test   rax,rax
  0002e: je     0x4a
  00034: lea    rdi,[rbp-0x38]
  00038: mov    QWORD PTR [rdi+rax*8],0x0
  00040: sub    rax,0x1
  00044: jne    0x38
  0004a: mov    rax,0x4
  00051: mov    QWORD PTR [rbp-0x38],rax
  00055: mov    QWORD PTR [rbp-0x40],rax
  00059: mov    QWORD PTR [rbp-0x48],rax
  0005d: mov    QWORD PTR [rbp-0x50],rax
  00061: mov    QWORD PTR [rbp-0x58],rax
  00065: mov    QWORD PTR [rbp-0x60],rax
  00069: mov    QWORD PTR [rbp-0x68],rax
  0006d: mov    rdi,QWORD PTR [rbp-0x28]
  00071: test   rdi,0x7
  00078: jne    0x36916
  0007e: cmp    DWORD PTR [rdi+0x4],0x28
  00082: jne    0x36916
:00000 init_method reg:9 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  00088: mov    rax,QWORD PTR [rip+0xfffffffffffefa7f]        # 0xfffefb0e
  0008f: cmp    rax,QWORD PTR [rip+0x928]        # 0x9be
  00096: jne    0x36925
  0009c: mov    rax,QWORD PTR [rip+0x90b]        # 0x9ae
  000a3: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @y: Vec[IvarId(1)]
  000a7: mov    rdi,QWORD PTR [rbp-0x28]
  000ab: mov    rax,QWORD PTR [rdi+0x18]
  000af: mov    QWORD PTR [rbp-0x48],rax
:00003 %5 = %1.call z()                     [Vec]
  000b3: mov    rdi,QWORD PTR [rbp-0x30]
  000b7: test   rdi,0x7
  000be: jne    0x3696b
  000c4: cmp    DWORD PTR [rdi+0x4],0x28
  000c8: jne    0x3696b
  000ce: cmp    DWORD PTR [rip+0xfffffffffffefa26],0x26        # 0xfffefafb
  000d5: jne    0x3696b
  000db: mov    esi,DWORD PTR [rip+0x8e9]        # 0x9ca
  000e1: cmp    esi,0xffffffff
  000e4: je     0x3697a
  000ea: cmp    WORD PTR [rdi+0x2],0x3
  000ef: jne    0x108
  000f5: cmp    esi,0x6
  000f8: jge    0x108
  000fe: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00103: jmp    0x114
  00108: movabs rax,0x55b5b00a3ef0
  00112: call   rax
  00114: mov    QWORD PTR [rbp-0x50],rax
:00004 
:00006 %4 = %4 * %5                         [Float][Float]
  00118: mov    rdi,QWORD PTR [rbp-0x48]
  0011c: test   rdi,0x1
  00123: jne    0x369a3
  00129: test   rdi,0x2
  00130: je     0x16c
  00136: xorps  xmm2,xmm2
  00139: movabs rax,0x8000000000000002
  00143: cmp    rdi,rax
  00146: je     0x17e
  0014c: mov    rax,rdi
  0014f: sar    rax,0x3f
  00153: add    rax,0x2
  00157: and    rdi,0xfffffffffffffffc
  0015b: or     rdi,rax
  0015e: rol    rdi,0x3d
  00162: movq   xmm2,rdi
  00167: jmp    0x17e
  0016c: call   0xfffeca6a
  00171: test   rax,rax
  00174: je     0x369a3
  0017a: movq   xmm2,xmm0
  0017e: mov    rdi,QWORD PTR [rbp-0x50]
  00182: test   rdi,0x1
  00189: jne    0x369b2
  0018f: test   rdi,0x2
  00196: je     0x1d2
  0019c: xorps  xmm3,xmm3
  0019f: movabs rax,0x8000000000000002
  001a9: cmp    rdi,rax
  001ac: je     0x1e4
  001b2: mov    rax,rdi
  001b5: sar    rax,0x3f
  001b9: add    rax,0x2
  001bd: and    rdi,0xfffffffffffffffc
  001c1: or     rdi,rax
  001c4: rol    rdi,0x3d
  001c8: movq   xmm3,rdi
  001cd: jmp    0x1e4
  001d2: call   0xfffeca6a
  001d7: test   rax,rax
  001da: je     0x369b2
  001e0: movq   xmm3,xmm0
  001e4: mulsd  xmm2,xmm3
:00007 %5 = @z: Vec[IvarId(2)]
  001e8: mov    rdi,QWORD PTR [rbp-0x28]
  001ec: mov    rax,QWORD PTR [rdi+0x20]
  001f0: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = %1.call y()                     [Vec]
  001f4: mov    rdi,QWORD PTR [rbp-0x30]
  001f8: test   rdi,0x7
  001ff: jne    0x369c1
  00205: cmp    DWORD PTR [rdi+0x4],0x28
  00209: jne    0x369c1
  0020f: cmp    DWORD PTR [rip+0xfffffffffffef8e5],0x26        # 0xfffefafb
  00216: jne    0x369c1
  0021c: mov    esi,DWORD PTR [rip+0x7b0]        # 0x9d2
  00222: cmp    esi,0xffffffff
  00225: je     0x369dd
  0022b: cmp    WORD PTR [rdi+0x2],0x3
  00230: jne    0x249
  00236: cmp    esi,0x6
  00239: jge    0x249
  0023f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00244: jmp    0x267
  00249: sub    rsp,0x10
  0024d: movq   QWORD PTR [rsp],xmm2
  00252: movabs rax,0x55b5b00a3ef0
  0025c: call   rax
  0025e: movq   xmm2,QWORD PTR [rsp]
  00263: add    rsp,0x10
  00267: mov    QWORD PTR [rbp-0x58],rax
:00009 
:00011 %5 = %5 * %6                         [Float][Float]
  0026b: mov    rdi,QWORD PTR [rbp-0x50]
  0026f: test   rdi,0x1
  00276: jne    0x36a18
  0027c: test   rdi,0x2
  00283: je     0x2bf
  00289: xorps  xmm3,xmm3
  0028c: movabs rax,0x8000000000000002
  00296: cmp    rdi,rax
  00299: je     0x2d1
  0029f: mov    rax,rdi
  002a2: sar    rax,0x3f
  002a6: add    rax,0x2
  002aa: and    rdi,0xfffffffffffffffc
  002ae: or     rdi,rax
  002b1: rol    rdi,0x3d
  002b5: movq   xmm3,rdi
  002ba: jmp    0x2d1
  002bf: call   0xfffeca6a
  002c4: test   rax,rax
  002c7: je     0x36a18
  002cd: movq   xmm3,xmm0
  002d1: mov    rdi,QWORD PTR [rbp-0x58]
  002d5: test   rdi,0x1
  002dc: jne    0x36a34
  002e2: test   rdi,0x2
  002e9: je     0x325
  002ef: xorps  xmm4,xmm4
  002f2: movabs rax,0x8000000000000002
  002fc: cmp    rdi,rax
  002ff: je     0x337
  00305: mov    rax,rdi
  00308: sar    rax,0x3f
  0030c: add    rax,0x2
  00310: and    rdi,0xfffffffffffffffc
  00314: or     rdi,rax
  00317: rol    rdi,0x3d
  0031b: movq   xmm4,rdi
  00320: jmp    0x337
  00325: call   0xfffeca6a
  0032a: test   rax,rax
  0032d: je     0x36a34
  00333: movq   xmm4,xmm0
  00337: mulsd  xmm3,xmm4
:00012 %4 = %4 - %5                         [Float][Float]
  0033b: subsd  xmm2,xmm3
:00013 %5 = @z: Vec[IvarId(2)]
  0033f: mov    rdi,QWORD PTR [rbp-0x28]
  00343: mov    rax,QWORD PTR [rdi+0x20]
  00347: mov    QWORD PTR [rbp-0x50],rax
:00014 %6 = %1.call x()                     [Vec]
  0034b: mov    rdi,QWORD PTR [rbp-0x30]
  0034f: test   rdi,0x7
  00356: jne    0x36a50
  0035c: cmp    DWORD PTR [rdi+0x4],0x28
  00360: jne    0x36a50
  00366: cmp    DWORD PTR [rip+0xfffffffffffef78e],0x26        # 0xfffefafb
  0036d: jne    0x36a50
  00373: mov    esi,DWORD PTR [rip+0x661]        # 0x9da
  00379: cmp    esi,0xffffffff
  0037c: je     0x36a6c
  00382: cmp    WORD PTR [rdi+0x2],0x3
  00387: jne    0x3a0
  0038d: cmp    esi,0x6
  00390: jge    0x3a0
  00396: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0039b: jmp    0x3be
  003a0: sub    rsp,0x10
  003a4: movq   QWORD PTR [rsp],xmm2
  003a9: movabs rax,0x55b5b00a3ef0
  003b3: call   rax
  003b5: movq   xmm2,QWORD PTR [rsp]
  003ba: add    rsp,0x10
  003be: mov    QWORD PTR [rbp-0x58],rax
:00015 
:00017 %5 = %5 * %6                         [Float][Float]
  003c2: mov    rdi,QWORD PTR [rbp-0x50]
  003c6: test   rdi,0x1
  003cd: jne    0x36aa7
  003d3: test   rdi,0x2
  003da: je     0x416
  003e0: xorps  xmm3,xmm3
  003e3: movabs rax,0x8000000000000002
  003ed: cmp    rdi,rax
  003f0: je     0x428
  003f6: mov    rax,rdi
  003f9: sar    rax,0x3f
  003fd: add    rax,0x2
  00401: and    rdi,0xfffffffffffffffc
  00405: or     rdi,rax
  00408: rol    rdi,0x3d
  0040c: movq   xmm3,rdi
  00411: jmp    0x428
  00416: call   0xfffeca6a
  0041b: test   rax,rax
  0041e: je     0x36aa7
  00424: movq   xmm3,xmm0
  00428: mov    rdi,QWORD PTR [rbp-0x58]
  0042c: test   rdi,0x1
  00433: jne    0x36ac3
  00439: test   rdi,0x2
  00440: je     0x47c
  00446: xorps  xmm4,xmm4
  00449: movabs rax,0x8000000000000002
  00453: cmp    rdi,rax
  00456: je     0x48e
  0045c: mov    rax,rdi
  0045f: sar    rax,0x3f
  00463: add    rax,0x2
  00467: and    rdi,0xfffffffffffffffc
  0046b: or     rdi,rax
  0046e: rol    rdi,0x3d
  00472: movq   xmm4,rdi
  00477: jmp    0x48e
  0047c: call   0xfffeca6a
  00481: test   rax,rax
  00484: je     0x36ac3
  0048a: movq   xmm4,xmm0
  0048e: mulsd  xmm3,xmm4
:00018 %6 = @x: Vec[IvarId(0)]
  00492: mov    rdi,QWORD PTR [rbp-0x28]
  00496: mov    rax,QWORD PTR [rdi+0x10]
  0049a: mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = %1.call z()                     [Vec]
  0049e: mov    rdi,QWORD PTR [rbp-0x30]
  004a2: test   rdi,0x7
  004a9: jne    0x36adf
  004af: cmp    DWORD PTR [rdi+0x4],0x28
  004b3: jne    0x36adf
  004b9: cmp    DWORD PTR [rip+0xfffffffffffef63b],0x26        # 0xfffefafb
  004c0: jne    0x36adf
  004c6: mov    esi,DWORD PTR [rip+0x516]        # 0x9e2
  004cc: cmp    esi,0xffffffff
  004cf: je     0x36b08
  004d5: cmp    WORD PTR [rdi+0x2],0x3
  004da: jne    0x4f3
  004e0: cmp    esi,0x6
  004e3: jge    0x4f3
  004e9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004ee: jmp    0x51d
  004f3: sub    rsp,0x10
  004f7: movq   QWORD PTR [rsp],xmm2
  004fc: movq   QWORD PTR [rsp+0x8],xmm3
  00502: movabs rax,0x55b5b00a3ef0
  0050c: call   rax
  0050e: movq   xmm2,QWORD PTR [rsp]
  00513: movq   xmm3,QWORD PTR [rsp+0x8]
  00519: add    rsp,0x10
  0051d: mov    QWORD PTR [rbp-0x60],rax
:00020 
:00022 %6 = %6 * %7                         [Float][Float]
  00521: mov    rdi,QWORD PTR [rbp-0x58]
  00525: test   rdi,0x1
  0052c: jne    0x36b4f
  00532: test   rdi,0x2
  00539: je     0x575
  0053f: xorps  xmm4,xmm4
  00542: movabs rax,0x8000000000000002
  0054c: cmp    rdi,rax
  0054f: je     0x587
  00555: mov    rax,rdi
  00558: sar    rax,0x3f
  0055c: add    rax,0x2
  00560: and    rdi,0xfffffffffffffffc
  00564: or     rdi,rax
  00567: rol    rdi,0x3d
  0056b: movq   xmm4,rdi
  00570: jmp    0x587
  00575: call   0xfffeca6a
  0057a: test   rax,rax
  0057d: je     0x36b4f
  00583: movq   xmm4,xmm0
  00587: mov    rdi,QWORD PTR [rbp-0x60]
  0058b: test   rdi,0x1
  00592: jne    0x36b78
  00598: test   rdi,0x2
  0059f: je     0x5db
  005a5: xorps  xmm5,xmm5
  005a8: movabs rax,0x8000000000000002
  005b2: cmp    rdi,rax
  005b5: je     0x5ed
  005bb: mov    rax,rdi
  005be: sar    rax,0x3f
  005c2: add    rax,0x2
  005c6: and    rdi,0xfffffffffffffffc
  005ca: or     rdi,rax
  005cd: rol    rdi,0x3d
  005d1: movq   xmm5,rdi
  005d6: jmp    0x5ed
  005db: call   0xfffeca6a
  005e0: test   rax,rax
  005e3: je     0x36b78
  005e9: movq   xmm5,xmm0
  005ed: mulsd  xmm4,xmm5
:00023 %5 = %5 - %6                         [Float][Float]
  005f1: subsd  xmm3,xmm4
:00024 %6 = @x: Vec[IvarId(0)]
  005f5: mov    rdi,QWORD PTR [rbp-0x28]
  005f9: mov    rax,QWORD PTR [rdi+0x10]
  005fd: mov    QWORD PTR [rbp-0x58],rax
:00025 %7 = %1.call y()                     [Vec]
  00601: mov    rdi,QWORD PTR [rbp-0x30]
  00605: test   rdi,0x7
  0060c: jne    0x36ba1
  00612: cmp    DWORD PTR [rdi+0x4],0x28
  00616: jne    0x36ba1
  0061c: cmp    DWORD PTR [rip+0xfffffffffffef4d8],0x26        # 0xfffefafb
  00623: jne    0x36ba1
  00629: mov    esi,DWORD PTR [rip+0x3bb]        # 0x9ea
  0062f: cmp    esi,0xffffffff
  00632: je     0x36bca
  00638: cmp    WORD PTR [rdi+0x2],0x3
  0063d: jne    0x656
  00643: cmp    esi,0x6
  00646: jge    0x656
  0064c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00651: jmp    0x680
  00656: sub    rsp,0x10
  0065a: movq   QWORD PTR [rsp],xmm2
  0065f: movq   QWORD PTR [rsp+0x8],xmm3
  00665: movabs rax,0x55b5b00a3ef0
  0066f: call   rax
  00671: movq   xmm2,QWORD PTR [rsp]
  00676: movq   xmm3,QWORD PTR [rsp+0x8]
  0067c: add    rsp,0x10
  00680: mov    QWORD PTR [rbp-0x60],rax
:00026 
:00028 %6 = %6 * %7                         [Float][Float]
  00684: mov    rdi,QWORD PTR [rbp-0x58]
  00688: test   rdi,0x1
  0068f: jne    0x36c11
  00695: test   rdi,0x2
  0069c: je     0x6d8
  006a2: xorps  xmm4,xmm4
  006a5: movabs rax,0x8000000000000002
  006af: cmp    rdi,rax
  006b2: je     0x6ea
  006b8: mov    rax,rdi
  006bb: sar    rax,0x3f
  006bf: add    rax,0x2
  006c3: and    rdi,0xfffffffffffffffc
  006c7: or     rdi,rax
  006ca: rol    rdi,0x3d
  006ce: movq   xmm4,rdi
  006d3: jmp    0x6ea
  006d8: call   0xfffeca6a
  006dd: test   rax,rax
  006e0: je     0x36c11
  006e6: movq   xmm4,xmm0
  006ea: mov    rdi,QWORD PTR [rbp-0x60]
  006ee: test   rdi,0x1
  006f5: jne    0x36c3a
  006fb: test   rdi,0x2
  00702: je     0x73e
  00708: xorps  xmm5,xmm5
  0070b: movabs rax,0x8000000000000002
  00715: cmp    rdi,rax
  00718: je     0x750
  0071e: mov    rax,rdi
  00721: sar    rax,0x3f
  00725: add    rax,0x2
  00729: and    rdi,0xfffffffffffffffc
  0072d: or     rdi,rax
  00730: rol    rdi,0x3d
  00734: movq   xmm5,rdi
  00739: jmp    0x750
  0073e: call   0xfffeca6a
  00743: test   rax,rax
  00746: je     0x36c3a
  0074c: movq   xmm5,xmm0
  00750: mulsd  xmm4,xmm5
:00029 %7 = @y: Vec[IvarId(1)]
  00754: mov    rdi,QWORD PTR [rbp-0x28]
  00758: mov    rax,QWORD PTR [rdi+0x18]
  0075c: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = %1.call x()                     [Vec]
  00760: mov    rdi,QWORD PTR [rbp-0x30]
  00764: test   rdi,0x7
  0076b: jne    0x36c63
  00771: cmp    DWORD PTR [rdi+0x4],0x28
  00775: jne    0x36c63
  0077b: cmp    DWORD PTR [rip+0xfffffffffffef379],0x26        # 0xfffefafb
  00782: jne    0x36c63
  00788: mov    esi,DWORD PTR [rip+0x264]        # 0x9f2
  0078e: cmp    esi,0xffffffff
  00791: je     0x36c99
  00797: cmp    WORD PTR [rdi+0x2],0x3
  0079c: jne    0x7b5
  007a2: cmp    esi,0x6
  007a5: jge    0x7b5
  007ab: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007b0: jmp    0x7eb
  007b5: sub    rsp,0x20
  007b9: movq   QWORD PTR [rsp],xmm2
  007be: movq   QWORD PTR [rsp+0x8],xmm3
  007c4: movq   QWORD PTR [rsp+0x10],xmm4
  007ca: movabs rax,0x55b5b00a3ef0
  007d4: call   rax
  007d6: movq   xmm2,QWORD PTR [rsp]
  007db: movq   xmm3,QWORD PTR [rsp+0x8]
  007e1: movq   xmm4,QWORD PTR [rsp+0x10]
  007e7: add    rsp,0x20
  007eb: mov    QWORD PTR [rbp-0x68],rax
:00031 
:00033 %7 = %7 * %8                         [Float][Float]
  007ef: mov    rdi,QWORD PTR [rbp-0x60]
  007f3: test   rdi,0x1
  007fa: jne    0x36cec
  00800: test   rdi,0x2
  00807: je     0x843
  0080d: xorps  xmm5,xmm5
  00810: movabs rax,0x8000000000000002
  0081a: cmp    rdi,rax
  0081d: je     0x855
  00823: mov    rax,rdi
  00826: sar    rax,0x3f
  0082a: add    rax,0x2
  0082e: and    rdi,0xfffffffffffffffc
  00832: or     rdi,rax
  00835: rol    rdi,0x3d
  00839: movq   xmm5,rdi
  0083e: jmp    0x855
  00843: call   0xfffeca6a
  00848: test   rax,rax
  0084b: je     0x36cec
  00851: movq   xmm5,xmm0
  00855: mov    rdi,QWORD PTR [rbp-0x68]
  00859: test   rdi,0x1
  00860: jne    0x36d22
  00866: test   rdi,0x2
  0086d: je     0x8a9
  00873: xorps  xmm6,xmm6
  00876: movabs rax,0x8000000000000002
  00880: cmp    rdi,rax
  00883: je     0x8bb
  00889: mov    rax,rdi
  0088c: sar    rax,0x3f
  00890: add    rax,0x2
  00894: and    rdi,0xfffffffffffffffc
  00898: or     rdi,rax
  0089b: rol    rdi,0x3d
  0089f: movq   xmm6,rdi
  008a4: jmp    0x8bb
  008a9: call   0xfffeca6a
  008ae: test   rax,rax
  008b1: je     0x36d22
  008b7: movq   xmm6,xmm0
  008bb: mulsd  xmm5,xmm6
:00034 %6 = %6 - %7                         [Float][Float]
  008bf: subsd  xmm4,xmm5
:00035 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  008c3: movq   xmm0,xmm2
  008c7: call   0xfffecb8e
  008cc: mov    QWORD PTR [rbp-0x48],rax
  008d0: movq   xmm0,xmm3
  008d4: call   0xfffecb8e
  008d9: mov    QWORD PTR [rbp-0x50],rax
  008dd: movq   xmm0,xmm4
  008e1: call   0xfffecb8e
  008e6: mov    QWORD PTR [rbp-0x58],rax
  008ea: mov    rdi,QWORD PTR [rbp-0x40]
  008ee: test   rdi,0x7
  008f5: jne    0x36d58
  008fb: cmp    DWORD PTR [rdi+0x4],0x29
  008ff: jne    0x36d58
  00905: cmp    DWORD PTR [rip+0xfffffffffffef1ef],0x26        # 0xfffefafb
  0090c: jne    0x36d58
  00912: mov    r9,0x0
  00919: sub    rsp,0x30
  0091d: movq   QWORD PTR [rsp],xmm2
  00922: movq   QWORD PTR [rsp+0x8],xmm3
  00928: movq   QWORD PTR [rsp+0x10],xmm4
  0092e: movq   QWORD PTR [rsp+0x18],xmm5
  00934: movq   QWORD PTR [rsp+0x20],xmm6
  0093a: mov    rdx,rdi
  0093d: mov    QWORD PTR [rsp-0x20],0x0
  00946: mov    QWORD PTR [rsp-0x38],rcx
  0094b: mov    rax,QWORD PTR [rbx]
  0094e: lea    rsi,[rsp-0x18]
  00953: mov    QWORD PTR [rsi],rax
  00956: mov    QWORD PTR [rbx],rsi
  00959: lea    rcx,[rbp-0x48]
  0095d: mov    r8,0x3
  00964: call   0x36d74
  00969: lea    rdi,[rbp-0x8]
  0096d: mov    QWORD PTR [rbx],rdi
  00970: movq   xmm2,QWORD PTR [rsp]
  00975: movq   xmm3,QWORD PTR [rsp+0x8]
  0097b: movq   xmm4,QWORD PTR [rsp+0x10]
  00981: movq   xmm5,QWORD PTR [rsp+0x18]
  00987: movq   xmm6,QWORD PTR [rsp+0x20]
  0098d: add    rsp,0x30
  00991: movabs r13,0x55b5b07a2020
  0099b: test   rax,rax
  0099e: je     0xfffeca11
  009a4: mov    QWORD PTR [rbp-0x38],rax
:00036 
:00038 ret %2
  009a8: mov    rax,QWORD PTR [rbp-0x38]
  009ac: leave  
  009ad: ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55b5b07e9960
<== finished compile. elapsed:156.4µs
offset:Pos(81944) code: 9497 bytes  data: 419 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5: ff 	mov    QWORD PTR [rbp-0xb0],rax
  000cc: ff 	mov    QWORD PTR [rbp-0xb8],rax
  000d3: ff 	mov    QWORD PTR [rbp-0xc0],rax
  000da:    	mov    rdi,QWORD PTR [rbp-0x28]
  000de: 00 	test   rdi,0x7
  000e5:    	jne    0x363bf
  000eb:    	cmp    DWORD PTR [rdi+0x4],0x32
  000ef:    	jne    0x363bf
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000f5:    	mov    rax,QWORD PTR [rbp-0x10]
  000f9:    	mov    rax,QWORD PTR [rax]
  000fc:    	mov    rax,QWORD PTR [rax]
  000ff:    	mov    rax,QWORD PTR [rax]
  00102:    	mov    rax,QWORD PTR [rax-0x38]
  00106: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  0010d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00114: 00 	test   rdi,0x1
  0011b:    	je     0x363ce
  00121:    	add    rdi,0x2
  00125:    	jo     0x363ce
  0012b: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  00132:    	mov    rax,QWORD PTR [rbp-0x10]
  00136:    	mov    rax,QWORD PTR [rax]
  00139:    	mov    rax,QWORD PTR [rax]
  0013c:    	mov    rax,QWORD PTR [rax]
  0013f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00146:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0014a:    	mov    rax,QWORD PTR [rbp-0x10]
  0014e:    	mov    rax,QWORD PTR [rax]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax-0x20]
  0015b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00162: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00169: 00 	test   rdi,0x1
  00170:    	je     0x363dd
  00176: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef88],0x26        # 0xfffef105
  0017d:    	jne    0x363dd
  00183:    	sar    rdi,1
  00186:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0018b:    	mov    rax,QWORD PTR [rbp-0x10]
  0018f:    	mov    rax,QWORD PTR [rax]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax]
  00198:    	mov    rax,QWORD PTR [rax-0x28]
  0019c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  001a3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001aa: 00 	test   rdi,0x1
  001b1:    	je     0x363ec
  001b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef47],0x26        # 0xfffef105
  001be:    	jne    0x363ec
  001c4:    	sar    rdi,1
  001c7:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  001cc:    	mov    rax,QWORD PTR [rbp-0x10]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x36408
  001f2: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef0c],0x26        # 0xfffef105
  001f9:    	jne    0x36408
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  00207:    	mov    rax,QWORD PTR [rbp-0x10]
  0020b:    	mov    rax,QWORD PTR [rax]
  0020e:    	mov    rax,QWORD PTR [rax]
  00211:    	mov    rax,QWORD PTR [rax-0x20]
  00215: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  0021c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00223: 00 	test   rdi,0x1
  0022a:    	je     0x36431
  00230: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeece],0x26        # 0xfffef105
  00237:    	jne    0x36431
  0023d:    	sar    rdi,1
  00240:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00245:    	mov    rdi,QWORD PTR [rbp-0x30]
  00249: 00 	test   rdi,0x1
  00250:    	je     0x36467
  00256: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeea8],0x26        # 0xfffef105
  0025d:    	jne    0x36467
  00263:    	sar    rdi,1
  00266:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0026b:    	mov    rax,QWORD PTR [rbp-0x10]
  0026f:    	mov    rax,QWORD PTR [rax-0x20]
  00273: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0027a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00281: 00 	test   rdi,0x1
  00288:    	je     0x364aa
  0028e: 26 	cmp    DWORD PTR [rip+0xfffffffffffeee70],0x26        # 0xfffef105
  00295:    	jne    0x364aa
  0029b:    	sar    rdi,1
  0029e:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  002a3:    	mov    rax,QWORD PTR [rbp-0x10]
  002a7:    	mov    rax,QWORD PTR [rax]
  002aa:    	mov    rax,QWORD PTR [rax]
  002ad:    	mov    rax,QWORD PTR [rax]
  002b0:    	mov    rax,QWORD PTR [rax-0x40]
  002b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  002bb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002c2: 00 	test   rdi,0x1
  002c9:    	jne    0x364fa
  002cf: 00 	test   rdi,0x2
  002d6:    	je     0x313
  002dc:    	xorps  xmm8,xmm8
  002e0: 00 	movabs rax,0x8000000000000002
  002ea:    	cmp    rdi,rax
  002ed:    	je     0x326
  002f3:    	mov    rax,rdi
  002f6:    	sar    rax,0x3f
  002fa:    	add    rax,0x2
  002fe:    	and    rdi,0xfffffffffffffffc
  00302:    	or     rdi,rax
  00305:    	rol    rdi,0x3d
  00309:    	movq   xmm8,rdi
  0030e:    	jmp    0x326
  00313:    	call   0xfffec074
  00318:    	test   rax,rax
  0031b:    	je     0x364fa
  00321:    	movq   xmm8,xmm0
  00326:    	movq   rax,xmm8
  0032b:    	test   rax,rax
  0032e:    	je     0xfffec040
  00334:    	movq   xmm0,xmm6
  00338:    	divsd  xmm0,xmm8
  0033d:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00342:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00347: 21 	movq   xmm9,QWORD PTR [rip+0x21d8]        # 0x2528
  00350: 00 	mov    rax,0x2
  00357: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0035e:    	movq   rax,xmm9
  00363:    	test   rax,rax
  00366:    	je     0xfffec040
  0036c:    	movq   xmm0,xmm2
  00370:    	divsd  xmm0,xmm9
  00375:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0037a:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0037f: 21 	movq   xmm9,QWORD PTR [rip+0x21b0]        # 0x2538
  00388: 00 	mov    rax,0x2
  0038f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00396:    	movq   rax,xmm9
  0039b:    	test   rax,rax
  0039e:    	je     0xfffec040
  003a4:    	movq   xmm0,xmm2
  003a8:    	divsd  xmm0,xmm9
  003ad:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  003b2:    	movq   xmm10,xmm8
  003b7:    	movq   rax,xmm9
  003bc:    	test   rax,rax
  003bf:    	je     0xfffec040
  003c5:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  003ca:    	mov    rax,QWORD PTR [rbp-0x10]
  003ce:    	mov    rax,QWORD PTR [rax]
  003d1:    	mov    rax,QWORD PTR [rax]
  003d4:    	mov    rax,QWORD PTR [rax]
  003d7:    	mov    rax,QWORD PTR [rax-0x40]
  003db: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003e2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003e9: 00 	test   rdi,0x1
  003f0:    	jne    0x36557
  003f6: 00 	test   rdi,0x2
  003fd:    	je     0x43a
  00403:    	xorps  xmm8,xmm8
  00407: 00 	movabs rax,0x8000000000000002
  00411:    	cmp    rdi,rax
  00414:    	je     0x44d
  0041a:    	mov    rax,rdi
  0041d:    	sar    rax,0x3f
  00421:    	add    rax,0x2
  00425:    	and    rdi,0xfffffffffffffffc
  00429:    	or     rdi,rax
  0042c:    	rol    rdi,0x3d
  00430:    	movq   xmm8,rdi
  00435:    	jmp    0x44d
  0043a:    	call   0xfffec074
  0043f:    	test   rax,rax
  00442:    	je     0x36557
  00448:    	movq   xmm8,xmm0
  0044d:    	movq   rax,xmm8
  00452:    	test   rax,rax
  00455:    	je     0xfffec040
  0045b:    	movq   xmm0,xmm7
  0045f:    	divsd  xmm0,xmm8
  00464:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00469:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0046e: 20 	movq   xmm9,QWORD PTR [rip+0x20d1]        # 0x2548
  00477: 00 	mov    rax,0x2
  0047e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00485:    	movq   rax,xmm9
  0048a:    	test   rax,rax
  0048d:    	je     0xfffec040
  00493:    	movq   xmm0,xmm3
  00497:    	divsd  xmm0,xmm9
  0049c:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  004a1:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  004a6: 00 	xorps  xmm8,XMMWORD PTR [rip+0x20aa]        # 0x2558
:00043 %15 = literal[2.0]
  004ae: 20 	movq   xmm9,QWORD PTR [rip+0x20b1]        # 0x2568
  004b7: 00 	mov    rax,0x2
  004be: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  004c5:    	movq   rax,xmm9
  004ca:    	test   rax,rax
  004cd:    	je     0xfffec040
  004d3:    	movq   xmm0,xmm3
  004d7:    	divsd  xmm0,xmm9
  004dc:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004e1:    	movq   xmm11,xmm8
  004e6:    	movq   rax,xmm9
  004eb:    	test   rax,rax
  004ee:    	je     0xfffec040
  004f4:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004f9: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeec18]        # 0xfffef118
  00500: 00 	cmp    rax,QWORD PTR [rip+0x2081]        # 0x2588
  00507:    	jne    0x365d3
  0050d: 00 	mov    rax,QWORD PTR [rip+0x2064]        # 0x2578
  00514: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  0051b: 20 	movq   xmm9,QWORD PTR [rip+0x2074]        # 0x2598
  00524: 00 	movabs rax,0xff80000000000006
  0052e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00535:    	movq   xmm0,xmm10
  0053a:    	call   0xfffec198
  0053f: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00546:    	movq   xmm0,xmm11
  0054b:    	call   0xfffec198
  00550: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00557: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0055e: 00 	test   rdi,0x7
  00565:    	jne    0x36691
  0056b:    	cmp    DWORD PTR [rdi+0x4],0x29
  0056f:    	jne    0x36691
  00575: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeb89],0x26        # 0xfffef105
  0057c:    	jne    0x36691
  00582: 00 	mov    r9,0x0
  00589:    	sub    rsp,0x50
  0058d:    	movq   QWORD PTR [rsp],xmm2
  00592:    	movq   QWORD PTR [rsp+0x8],xmm3
  00598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0059e:    	movq   QWORD PTR [rsp+0x18],xmm5
  005a4:    	movq   QWORD PTR [rsp+0x20],xmm6
  005aa:    	movq   QWORD PTR [rsp+0x28],xmm7
  005b0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005b7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005be: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005c5:    	mov    rdx,rdi
  005c8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005d1:    	mov    QWORD PTR [rsp-0x38],rcx
  005d6:    	mov    rax,QWORD PTR [rbx]
  005d9:    	lea    rsi,[rsp-0x18]
  005de:    	mov    QWORD PTR [rsi],rax
  005e1:    	mov    QWORD PTR [rbx],rsi
  005e4: ff 	lea    rcx,[rbp-0xa8]
  005eb: 00 	mov    r8,0x3
  005f2:    	call   0x3670a
  005f7:    	lea    rdi,[rbp-0x8]
  005fb:    	mov    QWORD PTR [rbx],rdi
  005fe:    	movq   xmm2,QWORD PTR [rsp]
  00603:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00609:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0060f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00615:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0061b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00621: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00628: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0062f: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00636:    	add    rsp,0x50
  0063a: b5 	movabs r13,0x55b5b07e9ca0
  00644:    	test   rax,rax
  00647:    	je     0xfffec01b
  0064d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00654: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0065b: 00 	test   rdi,0x7
  00662:    	jne    0x3673c
  00668:    	cmp    DWORD PTR [rdi+0x4],0x28
  0066c:    	jne    0x3673c
  00672: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea8c],0x26        # 0xfffef105
  00679:    	jne    0x3673c
  0067f:    	sub    rsp,0x50
  00683:    	movq   QWORD PTR [rsp],xmm2
  00688:    	movq   QWORD PTR [rsp+0x8],xmm3
  0068e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00694:    	movq   QWORD PTR [rsp+0x18],xmm5
  0069a:    	movq   QWORD PTR [rsp+0x20],xmm6
  006a0:    	movq   QWORD PTR [rsp+0x28],xmm7
  006a6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  006ad: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  006b4: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006bb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006c4:    	mov    QWORD PTR [rsp-0x38],rcx
  006c9:    	mov    rax,QWORD PTR [rbx]
  006cc:    	lea    rsi,[rsp-0x18]
  006d1:    	mov    QWORD PTR [rsi],rax
  006d4:    	mov    QWORD PTR [rbx],rsi
  006d7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006de:    	mov    QWORD PTR [rsp-0x38],rax
  006e3: 00 	mov    rdi,0x0
  006ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006f3: 07 	movabs rax,0x700000044
  006fd:    	mov    QWORD PTR [rsp-0x28],rax
  00702: b5 	movabs r13,0x55b5b07ceca0
  0070c:    	call   0xfffefa4a
  00711:    	lea    rdi,[rbp-0x8]
  00715:    	mov    QWORD PTR [rbx],rdi
  00718:    	movq   xmm2,QWORD PTR [rsp]
  0071d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00723:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00729:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0072f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00735:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0073b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00742: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00749: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00750:    	add    rsp,0x50
  00754: b5 	movabs r13,0x55b5b07e9cd0
  0075e:    	test   rax,rax
  00761:    	je     0xfffec01b
  00767:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0076b: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee9a6]        # 0xfffef118
  00772: 00 	cmp    rax,QWORD PTR [rip+0x1e3f]        # 0x25b8
  00779:    	jne    0x367b5
  0077f: 00 	mov    rax,QWORD PTR [rip+0x1e22]        # 0x25a8
  00786: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0078d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee984]        # 0xfffef118
  00794: 00 	cmp    rax,QWORD PTR [rip+0x1e3d]        # 0x25d8
  0079b:    	jne    0x36873
  007a1: 00 	mov    rax,QWORD PTR [rip+0x1e20]        # 0x25c8
  007a8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  007af: 1e 	movq   xmm8,QWORD PTR [rip+0x1e30]        # 0x25e8
  007b8: 00 	movabs rax,0x8000000000000002
  007c2: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  007c9: 1e 	movq   xmm9,QWORD PTR [rip+0x1e26]        # 0x25f8
  007d2: 00 	movabs rax,0x8000000000000002
  007dc: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007e3: 1e 	movq   xmm12,QWORD PTR [rip+0x1e1c]        # 0x2608
  007ec: 00 	movabs rax,0x8000000000000002
  007f6: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007fd: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00804: 00 	test   rdi,0x7
  0080b:    	jne    0x36931
  00811:    	cmp    DWORD PTR [rdi+0x4],0x29
  00815:    	jne    0x36931
  0081b: 26 	cmp    DWORD PTR [rip+0xfffffffffffee8e3],0x26        # 0xfffef105
  00822:    	jne    0x36931
  00828: 00 	mov    r9,0x0
  0082f:    	sub    rsp,0x60
  00833:    	movq   QWORD PTR [rsp],xmm2
  00838:    	movq   QWORD PTR [rsp+0x8],xmm3
  0083e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00844:    	movq   QWORD PTR [rsp+0x18],xmm5
  0084a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00850:    	movq   QWORD PTR [rsp+0x28],xmm7
  00856: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0085d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00864: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0086b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00872: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00879:    	mov    rdx,rdi
  0087c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00885:    	mov    QWORD PTR [rsp-0x38],rcx
  0088a:    	mov    rax,QWORD PTR [rbx]
  0088d:    	lea    rsi,[rsp-0x18]
  00892:    	mov    QWORD PTR [rsi],rax
  00895:    	mov    QWORD PTR [rbx],rsi
  00898: ff 	lea    rcx,[rbp-0xb0]
  0089f: 00 	mov    r8,0x3
  008a6:    	call   0x369aa
  008ab:    	lea    rdi,[rbp-0x8]
  008af:    	mov    QWORD PTR [rbx],rdi
  008b2:    	movq   xmm2,QWORD PTR [rsp]
  008b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f8:    	add    rsp,0x60
  008fc: b5 	movabs r13,0x55b5b07e9d50
  00906:    	test   rax,rax
  00909:    	je     0xfffec01b
  0090f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  00916:    	mov    rax,QWORD PTR [rbp-0x78]
  0091a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00921: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00928: 00 	test   rdi,0x7
  0092f:    	jne    0x369dc
  00935:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00939:    	jne    0x369dc
  0093f: 26 	cmp    DWORD PTR [rip+0xfffffffffffee7bf],0x26        # 0xfffef105
  00946:    	jne    0x369dc
  0094c: 00 	mov    r9,0x0
  00953:    	sub    rsp,0x60
  00957:    	movq   QWORD PTR [rsp],xmm2
  0095c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00962:    	movq   QWORD PTR [rsp+0x10],xmm4
  00968:    	movq   QWORD PTR [rsp+0x18],xmm5
  0096e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00974:    	movq   QWORD PTR [rsp+0x28],xmm7
  0097a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00981: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00988: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0098f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00996: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0099d:    	mov    rdx,rdi
  009a0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a9:    	mov    QWORD PTR [rsp-0x38],rcx
  009ae:    	mov    rax,QWORD PTR [rbx]
  009b1:    	lea    rsi,[rsp-0x18]
  009b6:    	mov    QWORD PTR [rsi],rax
  009b9:    	mov    QWORD PTR [rbx],rsi
  009bc: ff 	lea    rcx,[rbp-0xa0]
  009c3: 00 	mov    r8,0x2
  009ca:    	call   0x36a55
  009cf:    	lea    rdi,[rbp-0x8]
  009d3:    	mov    QWORD PTR [rbx],rdi
  009d6:    	movq   xmm2,QWORD PTR [rsp]
  009db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009f3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009f9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a00: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a07: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a0e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a15: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a1c:    	add    rsp,0x60
  00a20: b5 	movabs r13,0x55b5b07e9d90
  00a2a:    	test   rax,rax
  00a2d:    	je     0xfffec01b
  00a33:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a37: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffee6da]        # 0xfffef118
  00a3e: 00 	cmp    rax,QWORD PTR [rip+0x1be3]        # 0x2628
  00a45:    	jne    0x36a87
  00a4b: 00 	mov    rax,QWORD PTR [rip+0x1bc6]        # 0x2618
  00a52: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a59: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a60: 00 	test   rdi,0x7
  00a67:    	jne    0x36b61
  00a6d:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a71:    	jne    0x36b61
  00a77: 26 	cmp    DWORD PTR [rip+0xfffffffffffee687],0x26        # 0xfffef105
  00a7e:    	jne    0x36b61
  00a84: 00 	mov    r9,0x0
  00a8b:    	sub    rsp,0x60
  00a8f:    	movq   QWORD PTR [rsp],xmm2
  00a94:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a9a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aa0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00aa6:    	movq   QWORD PTR [rsp+0x20],xmm6
  00aac:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ab2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ab9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ac0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ac7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ace: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ad5:    	mov    rdx,rdi
  00ad8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ae1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ae6:    	mov    rax,QWORD PTR [rbx]
  00ae9:    	lea    rsi,[rsp-0x18]
  00aee:    	mov    QWORD PTR [rsi],rax
  00af1:    	mov    QWORD PTR [rbx],rsi
  00af4: ff 	lea    rcx,[rbp-0xa0]
  00afb: 00 	mov    r8,0x0
  00b02:    	call   0x36bda
  00b07:    	lea    rdi,[rbp-0x8]
  00b0b:    	mov    QWORD PTR [rbx],rdi
  00b0e:    	movq   xmm2,QWORD PTR [rsp]
  00b13:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b19:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b1f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b25:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b2b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b31: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b38: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b3f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b46: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b4d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b54:    	add    rsp,0x60
  00b58: b5 	movabs r13,0x55b5b07e9dd0
  00b62:    	test   rax,rax
  00b65:    	je     0xfffec01b
  00b6b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b72:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b76:    	mov    rax,QWORD PTR [rdi+0x10]
  00b7a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b81: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b8c:    	sub    rsp,0x60
  00b90:    	movq   QWORD PTR [rsp],xmm2
  00b95:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b9b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ba1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ba7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bad:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bb3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bba: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bc1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bc8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bcf: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bd6: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00bdd: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00be4:    	mov    rdi,rbx
  00be7:    	mov    rsi,r12
  00bea: b5 	movabs r8,0x55b5b07e9e08
  00bf4: b5 	movabs rax,0x55b5b0091aa0
  00bfe:    	call   rax
  00c00:    	movq   xmm2,QWORD PTR [rsp]
  00c05:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c0b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c11:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c17:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c1d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c23: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c2a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c31: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c38: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c3f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c46:    	add    rsp,0x60
  00c4a: b5 	movabs r13,0x55b5b07e9e10
  00c54:    	test   rax,rax
  00c57:    	je     0xfffec01b
  00c5d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c64:    	mov    rax,QWORD PTR [rbp-0x80]
  00c68: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c6f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c76: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c7d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c84: 00 	test   rdi,0x7
  00c8b:    	jne    0x36c0c
  00c91:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c95:    	jne    0x36c0c
  00c9b: 26 	cmp    DWORD PTR [rip+0xfffffffffffee463],0x26        # 0xfffef105
  00ca2:    	jne    0x36c0c
  00ca8:    	sub    rsp,0x60
  00cac:    	movq   QWORD PTR [rsp],xmm2
  00cb1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cbd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc3:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cc9:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ccf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cd6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cdd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ce4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ceb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cf2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cfb:    	mov    QWORD PTR [rsp-0x38],rcx
  00d00:    	mov    rax,QWORD PTR [rbx]
  00d03:    	lea    rsi,[rsp-0x18]
  00d08:    	mov    QWORD PTR [rsi],rax
  00d0b:    	mov    QWORD PTR [rbx],rsi
  00d0e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d15:    	mov    QWORD PTR [rsp-0x38],rax
  00d1a: 00 	mov    rdi,0x2
  00d21:    	lea    r8,[rsp-0x40]
  00d26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d2d:    	mov    QWORD PTR [r8],rax
  00d30:    	sub    r8,0x8
  00d34: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d3b:    	mov    QWORD PTR [r8],rax
  00d3e:    	sub    r8,0x8
  00d42: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d4b: 10 	movabs rax,0x1000000046
  00d55:    	mov    QWORD PTR [rsp-0x28],rax
  00d5a: b5 	movabs r13,0x55b5b07be970
  00d64:    	call   0xfffefd52
  00d69:    	lea    rdi,[rbp-0x8]
  00d6d:    	mov    QWORD PTR [rbx],rdi
  00d70:    	movq   xmm2,QWORD PTR [rsp]
  00d75:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d7b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d81:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d87:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d8d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d93: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d9a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00da1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00da8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00daf: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00db6:    	add    rsp,0x60
  00dba: b5 	movabs r13,0x55b5b07e9e50
  00dc4:    	test   rax,rax
  00dc7:    	je     0xfffec01b
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00dcd:    	mov    rdi,QWORD PTR [rbp-0x28]
  00dd1:    	mov    rax,QWORD PTR [rdi+0x10]
  00dd5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00ddc: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00de7:    	sub    rsp,0x60
  00deb:    	movq   QWORD PTR [rsp],xmm2
  00df0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dfc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e02:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e08:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e0e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e15: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e1c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e23: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e2a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e31: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e38: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e3f:    	mov    rdi,rbx
  00e42:    	mov    rsi,r12
  00e45: b5 	movabs r8,0x55b5b07e9e88
  00e4f: b5 	movabs rax,0x55b5b0091aa0
  00e59:    	call   rax
  00e5b:    	movq   xmm2,QWORD PTR [rsp]
  00e60:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e72:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e78:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e7e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e85: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e8c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e93: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e9a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ea1:    	add    rsp,0x60
  00ea5: b5 	movabs r13,0x55b5b07e9e90
  00eaf:    	test   rax,rax
  00eb2:    	je     0xfffec01b
  00eb8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00ebf:    	mov    rax,QWORD PTR [rbp-0x80]
  00ec3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00eca: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ed1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00ed8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00edf: 00 	test   rdi,0x7
  00ee6:    	jne    0x36c85
  00eec:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ef0:    	jne    0x36c85
  00ef6: 26 	cmp    DWORD PTR [rip+0xfffffffffffee208],0x26        # 0xfffef105
  00efd:    	jne    0x36c85
  00f03:    	sub    rsp,0x60
  00f07:    	movq   QWORD PTR [rsp],xmm2
  00f0c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f12:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f18:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f1e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f24:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f2a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f31: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f38: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f3f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f46: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f4d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f56:    	mov    QWORD PTR [rsp-0x38],rcx
  00f5b:    	mov    rax,QWORD PTR [rbx]
  00f5e:    	lea    rsi,[rsp-0x18]
  00f63:    	mov    QWORD PTR [rsi],rax
  00f66:    	mov    QWORD PTR [rbx],rsi
  00f69: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f70:    	mov    QWORD PTR [rsp-0x38],rax
  00f75: 00 	mov    rdi,0x2
  00f7c:    	lea    r8,[rsp-0x40]
  00f81: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f88:    	mov    QWORD PTR [r8],rax
  00f8b:    	sub    r8,0x8
  00f8f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f96:    	mov    QWORD PTR [r8],rax
  00f99:    	sub    r8,0x8
  00f9d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fa6: 10 	movabs rax,0x1000000046
  00fb0:    	mov    QWORD PTR [rsp-0x28],rax
  00fb5: b5 	movabs r13,0x55b5b07be970
  00fbf:    	call   0xfffefd52
  00fc4:    	lea    rdi,[rbp-0x8]
  00fc8:    	mov    QWORD PTR [rbx],rdi
  00fcb:    	movq   xmm2,QWORD PTR [rsp]
  00fd0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fd6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fdc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fe2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fe8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ff5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ffc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01003: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0100a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01011:    	add    rsp,0x60
  01015: b5 	movabs r13,0x55b5b07e9ed0
  0101f:    	test   rax,rax
  01022:    	je     0xfffec01b
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  01028:    	mov    rdi,QWORD PTR [rbp-0x28]
  0102c:    	mov    rax,QWORD PTR [rdi+0x10]
  01030: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  01037: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01042:    	sub    rsp,0x60
  01046:    	movq   QWORD PTR [rsp],xmm2
  0104b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01051:    	movq   QWORD PTR [rsp+0x10],xmm4
  01057:    	movq   QWORD PTR [rsp+0x18],xmm5
  0105d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01063:    	movq   QWORD PTR [rsp+0x28],xmm7
  01069: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01070: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01077: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0107e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01085: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0108c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01093: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0109a:    	mov    rdi,rbx
  0109d:    	mov    rsi,r12
  010a0: b5 	movabs r8,0x55b5b07e9f08
  010aa: b5 	movabs rax,0x55b5b0091aa0
  010b4:    	call   rax
  010b6:    	movq   xmm2,QWORD PTR [rsp]
  010bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010c7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010cd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010d3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010d9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010e0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010e7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  010ee: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010f5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010fc:    	add    rsp,0x60
  01100: b5 	movabs r13,0x55b5b07e9f10
  0110a:    	test   rax,rax
  0110d:    	je     0xfffec01b
  01113: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  0111a:    	mov    rax,QWORD PTR [rbp-0x80]
  0111e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  01125: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0112c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  01133: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0113a: 00 	test   rdi,0x7
  01141:    	jne    0x36cfe
  01147:    	cmp    DWORD PTR [rdi+0x4],0x2a
  0114b:    	jne    0x36cfe
  01151: 26 	cmp    DWORD PTR [rip+0xfffffffffffedfad],0x26        # 0xfffef105
  01158:    	jne    0x36cfe
  0115e:    	sub    rsp,0x60
  01162:    	movq   QWORD PTR [rsp],xmm2
  01167:    	movq   QWORD PTR [rsp+0x8],xmm3
  0116d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01173:    	movq   QWORD PTR [rsp+0x18],xmm5
  01179:    	movq   QWORD PTR [rsp+0x20],xmm6
  0117f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01185: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0118c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01193: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0119a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011a1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011a8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011b1:    	mov    QWORD PTR [rsp-0x38],rcx
  011b6:    	mov    rax,QWORD PTR [rbx]
  011b9:    	lea    rsi,[rsp-0x18]
  011be:    	mov    QWORD PTR [rsi],rax
  011c1:    	mov    QWORD PTR [rbx],rsi
  011c4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011cb:    	mov    QWORD PTR [rsp-0x38],rax
  011d0: 00 	mov    rdi,0x2
  011d7:    	lea    r8,[rsp-0x40]
  011dc: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011e3:    	mov    QWORD PTR [r8],rax
  011e6:    	sub    r8,0x8
  011ea: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011f1:    	mov    QWORD PTR [r8],rax
  011f4:    	sub    r8,0x8
  011f8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01201: 10 	movabs rax,0x1000000046
  0120b:    	mov    QWORD PTR [rsp-0x28],rax
  01210: b5 	movabs r13,0x55b5b07be970
  0121a:    	call   0xfffefd52
  0121f:    	lea    rdi,[rbp-0x8]
  01223:    	mov    QWORD PTR [rbx],rdi
  01226:    	movq   xmm2,QWORD PTR [rsp]
  0122b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01231:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01237:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0123d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01243:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01249: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01250: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01257: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0125e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01265: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0126c:    	add    rsp,0x60
  01270: b5 	movabs r13,0x55b5b07e9f50
  0127a:    	test   rax,rax
  0127d:    	je     0xfffec01b
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  01283:    	mov    rdi,QWORD PTR [rbp-0x28]
  01287:    	mov    rax,QWORD PTR [rdi+0x18]
  0128b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01292:    	mov    rax,QWORD PTR [rbp-0x80]
  01296: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  0129d: ff 	mov    rax,QWORD PTR [rbp-0x88]
  012a4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012ab: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x36d77
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x2c
  012c3:    	jne    0x36d77
  012c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffede35],0x26        # 0xfffef105
  012d0:    	jne    0x36d77
  012d6:    	sub    rsp,0x60
  012da:    	movq   QWORD PTR [rsp],xmm2
  012df:    	movq   QWORD PTR [rsp+0x8],xmm3
  012e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  012eb:    	movq   QWORD PTR [rsp+0x18],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x20],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x28],xmm7
  012fd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01304: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0130b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01312: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01319: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01320: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01329:    	mov    QWORD PTR [rsp-0x38],rcx
  0132e:    	mov    rax,QWORD PTR [rbx]
  01331:    	lea    rsi,[rsp-0x18]
  01336:    	mov    QWORD PTR [rsi],rax
  01339:    	mov    QWORD PTR [rbx],rsi
  0133c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01343:    	mov    QWORD PTR [rsp-0x38],rax
  01348: 00 	mov    rdi,0x2
  0134f:    	lea    r8,[rsp-0x40]
  01354: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0135b:    	mov    QWORD PTR [r8],rax
  0135e:    	sub    r8,0x8
  01362: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01369:    	mov    QWORD PTR [r8],rax
  0136c:    	sub    r8,0x8
  01370: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01379: 0e 	movabs rax,0xe00000048
  01383:    	mov    QWORD PTR [rsp-0x28],rax
  01388: b5 	movabs r13,0x55b5b07c4d60
  01392:    	call   0xffff0360
  01397:    	lea    rdi,[rbp-0x8]
  0139b:    	mov    QWORD PTR [rbx],rdi
  0139e:    	movq   xmm2,QWORD PTR [rsp]
  013a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013b5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013bb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013c1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013c8: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013cf: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013d6: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013dd: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013e4:    	add    rsp,0x60
  013e8: b5 	movabs r13,0x55b5b07e9fb0
  013f2:    	test   rax,rax
  013f5:    	je     0xfffec01b
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  013fb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01402: 00 	test   rdi,0x7
  01409:    	jne    0x36df0
  0140f:    	cmp    DWORD PTR [rdi+0x4],0x30
  01413:    	jne    0x36df0
  01419: 26 	cmp    DWORD PTR [rip+0xfffffffffffedce5],0x26        # 0xfffef105
  01420:    	jne    0x36df0
  01426:    	mov    esi,DWORD PTR [rip+0x1208]        # 0x2634
  0142c:    	cmp    esi,0xffffffff
  0142f:    	je     0x36e69
  01435:    	cmp    WORD PTR [rdi+0x2],0x3
  0143a:    	jne    0x1453
  01440:    	cmp    esi,0x6
  01443:    	jge    0x1453
  01449:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0144e:    	jmp    0x14f3
  01453:    	sub    rsp,0x60
  01457:    	movq   QWORD PTR [rsp],xmm2
  0145c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01462:    	movq   QWORD PTR [rsp+0x10],xmm4
  01468:    	movq   QWORD PTR [rsp+0x18],xmm5
  0146e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01474:    	movq   QWORD PTR [rsp+0x28],xmm7
  0147a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01481: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01488: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0148f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01496: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0149d: b5 	movabs rax,0x55b5b00a3ef0
  014a7:    	call   rax
  014a9:    	movq   xmm2,QWORD PTR [rsp]
  014ae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014b4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014ba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014c0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014c6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014cc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014d3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014da: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014e1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014e8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014ef:    	add    rsp,0x60
  014f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  014fa: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01501:    	or     rax,0x10
  01505:    	cmp    rax,0x14
  01509:    	je     0x2505
:00106 %14 = %12
  0150f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01516: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  0151d: 01 	sub    DWORD PTR [rip+0x1114],0x1        # 0x2638
  01524:    	je     0x36f9f
  0152a:    	sub    rsp,0x60
  0152e:    	movq   QWORD PTR [rsp],xmm2
  01533:    	movq   QWORD PTR [rsp+0x8],xmm3
  01539:    	movq   QWORD PTR [rsp+0x10],xmm4
  0153f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01545:    	movq   QWORD PTR [rsp+0x20],xmm6
  0154b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01551: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01558: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0155f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01566: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0156d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01574:    	mov    r15d,0x32
  0157a: 00 	cmp    r15d,DWORD PTR [rip+0x10bf]        # 0x2640
  01581:    	jne    0x36fc1
  01587:    	mov    eax,DWORD PTR [rip+0xfffffffffffedb78]        # 0xfffef105
  0158d:    	cmp    DWORD PTR [rip+0x10a9],eax        # 0x263c
  01593:    	jne    0x36fc1
  01599: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015a2:    	mov    QWORD PTR [rsp-0x38],rcx
  015a7:    	mov    rax,QWORD PTR [rbx]
  015aa:    	lea    rsi,[rsp-0x18]
  015af:    	mov    QWORD PTR [rsi],rax
  015b2:    	mov    QWORD PTR [rbx],rsi
  015b5:    	mov    rax,QWORD PTR [rbp-0x28]
  015b9:    	mov    QWORD PTR [rsp-0x38],rax
  015be: 00 	mov    rdi,0x1
  015c5:    	lea    r8,[rsp-0x40]
  015ca: ff 	mov    rax,QWORD PTR [rbp-0x98]
  015d1:    	mov    QWORD PTR [r8],rax
  015d4:    	sub    r8,0x8
  015d8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015e1: 00 	movabs rax,0x0
  015eb:    	mov    QWORD PTR [rsp-0x28],rax
  015f0: 00 	movabs r13,0x0
  015fa:    	call   0xfffebfe8
  015ff:    	lea    rdi,[rbp-0x8]
  01603:    	mov    QWORD PTR [rbx],rdi
  01606:    	movq   xmm2,QWORD PTR [rsp]
  0160b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01611:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01617:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0161d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01623:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01629: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01630: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01637: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0163e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01645: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0164c:    	add    rsp,0x60
  01650:    	test   rax,rax
  01653:    	je     0x3702d
  01659: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  01660:    	mov    rax,QWORD PTR [rbp-0x10]
  01664:    	mov    rax,QWORD PTR [rax]
  01667:    	mov    rax,QWORD PTR [rax-0x28]
  0166b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  01672:    	mov    rax,QWORD PTR [rbp-0x10]
  01676:    	mov    rax,QWORD PTR [rax]
  01679:    	mov    rax,QWORD PTR [rax-0x28]
  0167d: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  01684: 01 	sub    DWORD PTR [rip+0xfb9],0x1        # 0x2644
  0168b:    	je     0x370b5
  01691:    	sub    rsp,0x60
  01695:    	movq   QWORD PTR [rsp],xmm2
  0169a:    	movq   QWORD PTR [rsp+0x8],xmm3
  016a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  016a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  016b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  016b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016c6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  016cd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  016d4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  016db: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  016e2: b5 	movabs rax,0x55b5b009e670
  016ec:    	call   rax
  016ee:    	mov    r15d,eax
  016f1: 00 	cmp    r15d,DWORD PTR [rip+0xf54]        # 0x264c
  016f8:    	jne    0x370d7
  016fe:    	mov    eax,DWORD PTR [rip+0xfffffffffffeda01]        # 0xfffef105
  01704:    	cmp    DWORD PTR [rip+0xf3e],eax        # 0x2648
  0170a:    	jne    0x370d7
  01710: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01719:    	mov    QWORD PTR [rsp-0x38],rcx
  0171e:    	mov    rax,QWORD PTR [rbx]
  01721:    	lea    rsi,[rsp-0x18]
  01726:    	mov    QWORD PTR [rsi],rax
  01729:    	mov    QWORD PTR [rbx],rsi
  0172c: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01733:    	mov    QWORD PTR [rsp-0x38],rax
  01738: 00 	mov    rdi,0x0
  0173f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01748: 00 	movabs rax,0x0
  01752:    	mov    QWORD PTR [rsp-0x28],rax
  01757: 00 	movabs r13,0x0
  01761:    	call   0xfffebfe8
  01766:    	lea    rdi,[rbp-0x8]
  0176a:    	mov    QWORD PTR [rbx],rdi
  0176d:    	movq   xmm2,QWORD PTR [rsp]
  01772:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01778:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0177e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01784:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0178a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01790: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01797: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0179e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017a5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017ac: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017b3:    	add    rsp,0x60
  017b7:    	test   rax,rax
  017ba:    	je     0x37146
  017c0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  017c7: 01 	sub    DWORD PTR [rip+0xe82],0x1        # 0x2650
  017ce:    	je     0x371ce
  017d4:    	sub    rsp,0x60
  017d8:    	movq   QWORD PTR [rsp],xmm2
  017dd:    	movq   QWORD PTR [rsp+0x8],xmm3
  017e3:    	movq   QWORD PTR [rsp+0x10],xmm4
  017e9:    	movq   QWORD PTR [rsp+0x18],xmm5
  017ef:    	movq   QWORD PTR [rsp+0x20],xmm6
  017f5:    	movq   QWORD PTR [rsp+0x28],xmm7
  017fb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01802: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01809: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01810: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01817: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0181e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01825: b5 	movabs rax,0x55b5b009e670
  0182f:    	call   rax
  01831:    	mov    r15d,eax
  01834: 00 	cmp    r15d,DWORD PTR [rip+0xe1d]        # 0x2658
  0183b:    	jne    0x371f0
  01841:    	mov    eax,DWORD PTR [rip+0xfffffffffffed8be]        # 0xfffef105
  01847:    	cmp    DWORD PTR [rip+0xe07],eax        # 0x2654
  0184d:    	jne    0x371f0
  01853: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0185c:    	mov    QWORD PTR [rsp-0x38],rcx
  01861:    	mov    rax,QWORD PTR [rbx]
  01864:    	lea    rsi,[rsp-0x18]
  01869:    	mov    QWORD PTR [rsi],rax
  0186c:    	mov    QWORD PTR [rbx],rsi
  0186f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01876:    	mov    QWORD PTR [rsp-0x38],rax
  0187b: 00 	mov    rdi,0x0
  01882: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0188b: 00 	movabs rax,0x0
  01895:    	mov    QWORD PTR [rsp-0x28],rax
  0189a: 00 	movabs r13,0x0
  018a4:    	call   0xfffebfe8
  018a9:    	lea    rdi,[rbp-0x8]
  018ad:    	mov    QWORD PTR [rbx],rdi
  018b0:    	movq   xmm2,QWORD PTR [rsp]
  018b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018c7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018cd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018d3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018da: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018e1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  018e8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  018ef: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  018f6:    	add    rsp,0x60
  018fa:    	test   rax,rax
  018fd:    	je     0x3725f
  01903: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0190a: 01 	sub    DWORD PTR [rip+0xd4b],0x1        # 0x265c
  01911:    	je     0x372e7
  01917: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0191e: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01925:    	sub    rsp,0x60
  01929:    	movq   QWORD PTR [rsp],xmm2
  0192e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01934:    	movq   QWORD PTR [rsp+0x10],xmm4
  0193a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01940:    	movq   QWORD PTR [rsp+0x20],xmm6
  01946:    	movq   QWORD PTR [rsp+0x28],xmm7
  0194c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01953: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0195a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01961: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01968: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0196f:    	mov    rdx,rdi
  01972:    	mov    rcx,rsi
  01975:    	mov    rdi,rbx
  01978:    	mov    rsi,r12
  0197b: b5 	movabs rax,0x55b5b00e6cb0
  01985:    	call   rax
  01987:    	movq   xmm2,QWORD PTR [rsp]
  0198c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01992:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01998:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0199e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  019a4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  019aa: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  019b1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  019b8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  019bf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  019c6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  019cd:    	add    rsp,0x60
  019d1: b5 	movabs r13,0x55b5b07ea0d0
  019db:    	test   rax,rax
  019de:    	je     0xfffec01b
  019e4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  019eb: 01 	sub    DWORD PTR [rip+0xc6e],0x1        # 0x2660
  019f2:    	je     0x37382
  019f8:    	sub    rsp,0x60
  019fc:    	movq   QWORD PTR [rsp],xmm2
  01a01:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a07:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a0d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a13:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a19:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a1f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a26: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a2d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a34: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a3b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a42: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01a49: b5 	movabs rax,0x55b5b009e670
  01a53:    	call   rax
  01a55:    	mov    r15d,eax
  01a58: 00 	cmp    r15d,DWORD PTR [rip+0xc09]        # 0x2668
  01a5f:    	jne    0x373a4
  01a65:    	mov    eax,DWORD PTR [rip+0xfffffffffffed69a]        # 0xfffef105
  01a6b:    	cmp    DWORD PTR [rip+0xbf3],eax        # 0x2664
  01a71:    	jne    0x373a4
  01a77: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a80:    	mov    QWORD PTR [rsp-0x38],rcx
  01a85:    	mov    rax,QWORD PTR [rbx]
  01a88:    	lea    rsi,[rsp-0x18]
  01a8d:    	mov    QWORD PTR [rsi],rax
  01a90:    	mov    QWORD PTR [rbx],rsi
  01a93: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a9a:    	mov    QWORD PTR [rsp-0x38],rax
  01a9f: 00 	mov    rdi,0x1
  01aa6:    	lea    r8,[rsp-0x40]
  01aab: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01ab2:    	mov    QWORD PTR [r8],rax
  01ab5:    	sub    r8,0x8
  01ab9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ac2: 00 	movabs rax,0x0
  01acc:    	mov    QWORD PTR [rsp-0x28],rax
  01ad1: 00 	movabs r13,0x0
  01adb:    	call   0xfffebfe8
  01ae0:    	lea    rdi,[rbp-0x8]
  01ae4:    	mov    QWORD PTR [rbx],rdi
  01ae7:    	movq   xmm2,QWORD PTR [rsp]
  01aec:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01af2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01af8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01afe:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b04:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b0a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b11: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b18: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b1f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b26: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b2d:    	add    rsp,0x60
  01b31:    	test   rax,rax
  01b34:    	je     0x37413
:00120 
:00122 %14 = dynvar(2, %2)
  01b3a:    	mov    rax,QWORD PTR [rbp-0x10]
  01b3e:    	mov    rax,QWORD PTR [rax]
  01b41:    	mov    rax,QWORD PTR [rax-0x28]
  01b45: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01b4c:    	mov    rax,QWORD PTR [rbp-0x10]
  01b50:    	mov    rax,QWORD PTR [rax]
  01b53:    	mov    rax,QWORD PTR [rax-0x28]
  01b57: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01b5e: 01 	sub    DWORD PTR [rip+0xb07],0x1        # 0x266c
  01b65:    	je     0x3749b
  01b6b:    	sub    rsp,0x60
  01b6f:    	movq   QWORD PTR [rsp],xmm2
  01b74:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b7a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b80:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b86:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b8c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b92: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b99: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ba0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ba7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01bae: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01bb5: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01bbc: b5 	movabs rax,0x55b5b009e670
  01bc6:    	call   rax
  01bc8:    	mov    r15d,eax
  01bcb: 00 	cmp    r15d,DWORD PTR [rip+0xaa2]        # 0x2674
  01bd2:    	jne    0x374bd
  01bd8:    	mov    eax,DWORD PTR [rip+0xfffffffffffed527]        # 0xfffef105
  01bde:    	cmp    DWORD PTR [rip+0xa8c],eax        # 0x2670
  01be4:    	jne    0x374bd
  01bea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bf3:    	mov    QWORD PTR [rsp-0x38],rcx
  01bf8:    	mov    rax,QWORD PTR [rbx]
  01bfb:    	lea    rsi,[rsp-0x18]
  01c00:    	mov    QWORD PTR [rsi],rax
  01c03:    	mov    QWORD PTR [rbx],rsi
  01c06: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01c0d:    	mov    QWORD PTR [rsp-0x38],rax
  01c12: 00 	mov    rdi,0x0
  01c19: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c22: 00 	movabs rax,0x0
  01c2c:    	mov    QWORD PTR [rsp-0x28],rax
  01c31: 00 	movabs r13,0x0
  01c3b:    	call   0xfffebfe8
  01c40:    	lea    rdi,[rbp-0x8]
  01c44:    	mov    QWORD PTR [rbx],rdi
  01c47:    	movq   xmm2,QWORD PTR [rsp]
  01c4c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c52:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c58:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c5e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c64:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c6a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c71: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c78: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c7f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c86: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c8d:    	add    rsp,0x60
  01c91:    	test   rax,rax
  01c94:    	je     0x3752c
  01c9a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01ca1: 01 	sub    DWORD PTR [rip+0x9d0],0x1        # 0x2678
  01ca8:    	je     0x375b4
  01cae:    	sub    rsp,0x60
  01cb2:    	movq   QWORD PTR [rsp],xmm2
  01cb7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01cbd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01cc3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01cc9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ccf:    	movq   QWORD PTR [rsp+0x28],xmm7
  01cd5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01cdc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ce3: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01cea: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01cf1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01cf8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01cff: b5 	movabs rax,0x55b5b009e670
  01d09:    	call   rax
  01d0b:    	mov    r15d,eax
  01d0e: 00 	cmp    r15d,DWORD PTR [rip+0x96b]        # 0x2680
  01d15:    	jne    0x375d6
  01d1b:    	mov    eax,DWORD PTR [rip+0xfffffffffffed3e4]        # 0xfffef105
  01d21:    	cmp    DWORD PTR [rip+0x955],eax        # 0x267c
  01d27:    	jne    0x375d6
  01d2d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d36:    	mov    QWORD PTR [rsp-0x38],rcx
  01d3b:    	mov    rax,QWORD PTR [rbx]
  01d3e:    	lea    rsi,[rsp-0x18]
  01d43:    	mov    QWORD PTR [rsi],rax
  01d46:    	mov    QWORD PTR [rbx],rsi
  01d49: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d50:    	mov    QWORD PTR [rsp-0x38],rax
  01d55: 00 	mov    rdi,0x0
  01d5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d65: 00 	movabs rax,0x0
  01d6f:    	mov    QWORD PTR [rsp-0x28],rax
  01d74: 00 	movabs r13,0x0
  01d7e:    	call   0xfffebfe8
  01d83:    	lea    rdi,[rbp-0x8]
  01d87:    	mov    QWORD PTR [rbx],rdi
  01d8a:    	movq   xmm2,QWORD PTR [rsp]
  01d8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01da1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01da7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01dad: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01db4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01dbb: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01dc2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01dc9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01dd0:    	add    rsp,0x60
  01dd4:    	test   rax,rax
  01dd7:    	je     0x37645
  01ddd: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01de4: 01 	sub    DWORD PTR [rip+0x899],0x1        # 0x2684
  01deb:    	je     0x376cd
  01df1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01df8: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01dff:    	sub    rsp,0x60
  01e03:    	movq   QWORD PTR [rsp],xmm2
  01e08:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e0e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e14:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e1a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e20:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e26: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e2d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e34: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e3b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e42: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e49:    	mov    rdx,rdi
  01e4c:    	mov    rcx,rsi
  01e4f:    	mov    rdi,rbx
  01e52:    	mov    rsi,r12
  01e55: b5 	movabs rax,0x55b5b00e6cb0
  01e5f:    	call   rax
  01e61:    	movq   xmm2,QWORD PTR [rsp]
  01e66:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e6c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e72:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e78:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e7e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e84: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e8b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e92: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e99: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ea0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ea7:    	add    rsp,0x60
  01eab: b5 	movabs r13,0x55b5b07ea190
  01eb5:    	test   rax,rax
  01eb8:    	je     0xfffec01b
  01ebe: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01ec5: 01 	sub    DWORD PTR [rip+0x7bc],0x1        # 0x2688
  01ecc:    	je     0x37768
  01ed2:    	sub    rsp,0x60
  01ed6:    	movq   QWORD PTR [rsp],xmm2
  01edb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ee1:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ee7:    	movq   QWORD PTR [rsp+0x18],xmm5
  01eed:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ef3:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ef9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f00: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f07: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f0e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f15: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f1c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01f23: b5 	movabs rax,0x55b5b009e670
  01f2d:    	call   rax
  01f2f:    	mov    r15d,eax
  01f32: 00 	cmp    r15d,DWORD PTR [rip+0x757]        # 0x2690
  01f39:    	jne    0x3778a
  01f3f:    	mov    eax,DWORD PTR [rip+0xfffffffffffed1c0]        # 0xfffef105
  01f45:    	cmp    DWORD PTR [rip+0x741],eax        # 0x268c
  01f4b:    	jne    0x3778a
  01f51: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f5a:    	mov    QWORD PTR [rsp-0x38],rcx
  01f5f:    	mov    rax,QWORD PTR [rbx]
  01f62:    	lea    rsi,[rsp-0x18]
  01f67:    	mov    QWORD PTR [rsi],rax
  01f6a:    	mov    QWORD PTR [rbx],rsi
  01f6d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f74:    	mov    QWORD PTR [rsp-0x38],rax
  01f79: 00 	mov    rdi,0x1
  01f80:    	lea    r8,[rsp-0x40]
  01f85: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f8c:    	mov    QWORD PTR [r8],rax
  01f8f:    	sub    r8,0x8
  01f93: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f9c: 00 	movabs rax,0x0
  01fa6:    	mov    QWORD PTR [rsp-0x28],rax
  01fab: 00 	movabs r13,0x0
  01fb5:    	call   0xfffebfe8
  01fba:    	lea    rdi,[rbp-0x8]
  01fbe:    	mov    QWORD PTR [rbx],rdi
  01fc1:    	movq   xmm2,QWORD PTR [rsp]
  01fc6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fcc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fd2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fd8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fde:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fe4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01feb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ff2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ff9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02000: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02007:    	add    rsp,0x60
  0200b:    	test   rax,rax
  0200e:    	je     0x377f9
:00132 
:00134 %14 = dynvar(2, %2)
  02014:    	mov    rax,QWORD PTR [rbp-0x10]
  02018:    	mov    rax,QWORD PTR [rax]
  0201b:    	mov    rax,QWORD PTR [rax-0x28]
  0201f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  02026:    	mov    rax,QWORD PTR [rbp-0x10]
  0202a:    	mov    rax,QWORD PTR [rax]
  0202d:    	mov    rax,QWORD PTR [rax-0x28]
  02031: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  02038: 01 	sub    DWORD PTR [rip+0x655],0x1        # 0x2694
  0203f:    	je     0x37881
  02045:    	sub    rsp,0x60
  02049:    	movq   QWORD PTR [rsp],xmm2
  0204e:    	movq   QWORD PTR [rsp+0x8],xmm3
  02054:    	movq   QWORD PTR [rsp+0x10],xmm4
  0205a:    	movq   QWORD PTR [rsp+0x18],xmm5
  02060:    	movq   QWORD PTR [rsp+0x20],xmm6
  02066:    	movq   QWORD PTR [rsp+0x28],xmm7
  0206c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02073: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0207a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02081: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02088: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0208f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02096: b5 	movabs rax,0x55b5b009e670
  020a0:    	call   rax
  020a2:    	mov    r15d,eax
  020a5: 00 	cmp    r15d,DWORD PTR [rip+0x5f0]        # 0x269c
  020ac:    	jne    0x378a3
  020b2:    	mov    eax,DWORD PTR [rip+0xfffffffffffed04d]        # 0xfffef105
  020b8:    	cmp    DWORD PTR [rip+0x5da],eax        # 0x2698
  020be:    	jne    0x378a3
  020c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  020cd:    	mov    QWORD PTR [rsp-0x38],rcx
  020d2:    	mov    rax,QWORD PTR [rbx]
  020d5:    	lea    rsi,[rsp-0x18]
  020da:    	mov    QWORD PTR [rsi],rax
  020dd:    	mov    QWORD PTR [rbx],rsi
  020e0: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  020e7:    	mov    QWORD PTR [rsp-0x38],rax
  020ec: 00 	mov    rdi,0x0
  020f3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  020fc: 00 	movabs rax,0x0
  02106:    	mov    QWORD PTR [rsp-0x28],rax
  0210b: 00 	movabs r13,0x0
  02115:    	call   0xfffebfe8
  0211a:    	lea    rdi,[rbp-0x8]
  0211e:    	mov    QWORD PTR [rbx],rdi
  02121:    	movq   xmm2,QWORD PTR [rsp]
  02126:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0212c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02132:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02138:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0213e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02144: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0214b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02152: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02159: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02160: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02167:    	add    rsp,0x60
  0216b:    	test   rax,rax
  0216e:    	je     0x37912
  02174: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  0217b: 01 	sub    DWORD PTR [rip+0x51e],0x1        # 0x26a0
  02182:    	je     0x3799a
  02188:    	sub    rsp,0x60
  0218c:    	movq   QWORD PTR [rsp],xmm2
  02191:    	movq   QWORD PTR [rsp+0x8],xmm3
  02197:    	movq   QWORD PTR [rsp+0x10],xmm4
  0219d:    	movq   QWORD PTR [rsp+0x18],xmm5
  021a3:    	movq   QWORD PTR [rsp+0x20],xmm6
  021a9:    	movq   QWORD PTR [rsp+0x28],xmm7
  021af: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  021b6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  021bd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  021c4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  021cb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  021d2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  021d9: b5 	movabs rax,0x55b5b009e670
  021e3:    	call   rax
  021e5:    	mov    r15d,eax
  021e8: 00 	cmp    r15d,DWORD PTR [rip+0x4b9]        # 0x26a8
  021ef:    	jne    0x379bc
  021f5:    	mov    eax,DWORD PTR [rip+0xfffffffffffecf0a]        # 0xfffef105
  021fb:    	cmp    DWORD PTR [rip+0x4a3],eax        # 0x26a4
  02201:    	jne    0x379bc
  02207: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02210:    	mov    QWORD PTR [rsp-0x38],rcx
  02215:    	mov    rax,QWORD PTR [rbx]
  02218:    	lea    rsi,[rsp-0x18]
  0221d:    	mov    QWORD PTR [rsi],rax
  02220:    	mov    QWORD PTR [rbx],rsi
  02223: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0222a:    	mov    QWORD PTR [rsp-0x38],rax
  0222f: 00 	mov    rdi,0x0
  02236: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0223f: 00 	movabs rax,0x0
  02249:    	mov    QWORD PTR [rsp-0x28],rax
  0224e: 00 	movabs r13,0x0
  02258:    	call   0xfffebfe8
  0225d:    	lea    rdi,[rbp-0x8]
  02261:    	mov    QWORD PTR [rbx],rdi
  02264:    	movq   xmm2,QWORD PTR [rsp]
  02269:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0226f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02275:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0227b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02281:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02287: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0228e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02295: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0229c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022a3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022aa:    	add    rsp,0x60
  022ae:    	test   rax,rax
  022b1:    	je     0x37a2b
  022b7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  022be: 01 	sub    DWORD PTR [rip+0x3e7],0x1        # 0x26ac
  022c5:    	je     0x37ab3
  022cb: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  022d2: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  022d9:    	sub    rsp,0x60
  022dd:    	movq   QWORD PTR [rsp],xmm2
  022e2:    	movq   QWORD PTR [rsp+0x8],xmm3
  022e8:    	movq   QWORD PTR [rsp+0x10],xmm4
  022ee:    	movq   QWORD PTR [rsp+0x18],xmm5
  022f4:    	movq   QWORD PTR [rsp+0x20],xmm6
  022fa:    	movq   QWORD PTR [rsp+0x28],xmm7
  02300: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02307: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0230e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02315: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0231c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02323:    	mov    rdx,rdi
  02326:    	mov    rcx,rsi
  02329:    	mov    rdi,rbx
  0232c:    	mov    rsi,r12
  0232f: b5 	movabs rax,0x55b5b00e6cb0
  02339:    	call   rax
  0233b:    	movq   xmm2,QWORD PTR [rsp]
  02340:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02346:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0234c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02352:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02358:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0235e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02365: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0236c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02373: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0237a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02381:    	add    rsp,0x60
  02385: b5 	movabs r13,0x55b5b07ea250
  0238f:    	test   rax,rax
  02392:    	je     0xfffec01b
  02398: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  0239f: 01 	sub    DWORD PTR [rip+0x30a],0x1        # 0x26b0
  023a6:    	je     0x37b4e
  023ac:    	sub    rsp,0x60
  023b0:    	movq   QWORD PTR [rsp],xmm2
  023b5:    	movq   QWORD PTR [rsp+0x8],xmm3
  023bb:    	movq   QWORD PTR [rsp+0x10],xmm4
  023c1:    	movq   QWORD PTR [rsp+0x18],xmm5
  023c7:    	movq   QWORD PTR [rsp+0x20],xmm6
  023cd:    	movq   QWORD PTR [rsp+0x28],xmm7
  023d3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  023da: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  023e1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  023e8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  023ef: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  023f6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  023fd: b5 	movabs rax,0x55b5b009e670
  02407:    	call   rax
  02409:    	mov    r15d,eax
  0240c: 00 	cmp    r15d,DWORD PTR [rip+0x2a5]        # 0x26b8
  02413:    	jne    0x37b70
  02419:    	mov    eax,DWORD PTR [rip+0xfffffffffffecce6]        # 0xfffef105
  0241f:    	cmp    DWORD PTR [rip+0x28f],eax        # 0x26b4
  02425:    	jne    0x37b70
  0242b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02434:    	mov    QWORD PTR [rsp-0x38],rcx
  02439:    	mov    rax,QWORD PTR [rbx]
  0243c:    	lea    rsi,[rsp-0x18]
  02441:    	mov    QWORD PTR [rsi],rax
  02444:    	mov    QWORD PTR [rbx],rsi
  02447: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0244e:    	mov    QWORD PTR [rsp-0x38],rax
  02453: 00 	mov    rdi,0x1
  0245a:    	lea    r8,[rsp-0x40]
  0245f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02466:    	mov    QWORD PTR [r8],rax
  02469:    	sub    r8,0x8
  0246d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02476: 00 	movabs rax,0x0
  02480:    	mov    QWORD PTR [rsp-0x28],rax
  02485: 00 	movabs r13,0x0
  0248f:    	call   0xfffebfe8
  02494:    	lea    rdi,[rbp-0x8]
  02498:    	mov    QWORD PTR [rbx],rdi
  0249b:    	movq   xmm2,QWORD PTR [rsp]
  024a0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  024a6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  024ac:    	movq   xmm5,QWORD PTR [rsp+0x18]
  024b2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  024b8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  024be: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  024c5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  024cc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  024d3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  024da: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  024e1:    	add    rsp,0x60
  024e5:    	test   rax,rax
  024e8:    	je     0x37bdf
:00144 
:00146 %14 = %15
  024ee: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  024f5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 ret %14
  024fc: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02503:    	leave  
  02504:    	ret    
:00148 %14 = nil
  02505: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  02510: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02517:    	leave  
  02518:    	ret    
==> start whole compile: ambient_occlusion FuncId(76) self_class:Scene start:[00000] bytecode:0x55b5b07c7ae0
<== finished compile. elapsed:96.4µs
offset:Pos(91860) code: 4041 bytes  data: 283 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: je     0x4d
  00017: jl     0x22
  0001d: jmp    0x35532
  00022: jmp    0x35532
  00027: mov    eax,0x1
  0002c: sub    eax,edx
  0002e: test   rax,rax
  00031: je     0x4d
  00037: lea    rdi,[rbp-0x38]
  0003b: mov    QWORD PTR [rdi+rax*8],0x0
  00043: sub    rax,0x1
  00047: jne    0x3b
  0004d: mov    rax,0x4
  00054: mov    QWORD PTR [rbp-0x38],rax
  00058: mov    QWORD PTR [rbp-0x40],rax
  0005c: mov    QWORD PTR [rbp-0x48],rax
  00060: mov    QWORD PTR [rbp-0x50],rax
  00064: mov    QWORD PTR [rbp-0x58],rax
  00068: mov    QWORD PTR [rbp-0x60],rax
  0006c: mov    QWORD PTR [rbp-0x68],rax
  00070: mov    QWORD PTR [rbp-0x70],rax
  00074: mov    QWORD PTR [rbp-0x78],rax
  00078: mov    QWORD PTR [rbp-0x80],rax
  0007c: mov    QWORD PTR [rbp-0x88],rax
  00083: mov    QWORD PTR [rbp-0x90],rax
  0008a: mov    rdi,QWORD PTR [rbp-0x28]
  0008e: test   rdi,0x7
  00095: jne    0x35541
  0009b: cmp    DWORD PTR [rdi+0x4],0x32
  0009f: jne    0x35541
:00000 init_method reg:14 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  000a5: mov    rax,QWORD PTR [rip+0xfffffffffffec9b0]        # 0xfffeca5c
  000ac: cmp    rax,QWORD PTR [rip+0xf29]        # 0xfdc
  000b3: jne    0x35550
  000b9: mov    rax,QWORD PTR [rip+0xf0c]        # 0xfcc
  000c0: mov    QWORD PTR [rbp-0x68],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  000c4: mov    rdi,QWORD PTR [rbp-0x68]
  000c8: test   rdi,0x7
  000cf: jne    0x35596
  000d5: cmp    DWORD PTR [rdi+0x4],0x1e
  000d9: jne    0x35596
  000df: cmp    DWORD PTR [rip+0xfffffffffffec963],0x26        # 0xfffeca49
  000e6: jne    0x35596
  000ec: mov    r9,0x0
  000f3: mov    rdx,rdi
  000f6: mov    QWORD PTR [rsp-0x20],0x0
  000ff: mov    QWORD PTR [rsp-0x38],rcx
  00104: mov    rax,QWORD PTR [rbx]
  00107: lea    rsi,[rsp-0x18]
  0010c: mov    QWORD PTR [rsi],rax
  0010f: mov    QWORD PTR [rbx],rsi
  00112: lea    rcx,[rbp-0x70]
  00116: mov    r8,0x0
  0011d: call   0x355a5
  00122: lea    rdi,[rbp-0x8]
  00126: mov    QWORD PTR [rbx],rdi
  00129: movabs r13,0x55b5b07c7b20
  00133: test   rax,rax
  00136: je     0xfffe995f
  0013c: mov    QWORD PTR [rbp-0x38],rax
:00003 
:00005 %8 = %2
  00140: mov    rax,QWORD PTR [rbp-0x38]
  00144: mov    QWORD PTR [rbp-0x68],rax
:00006 %9 = %1.call n()                     [Isect]
  00148: mov    rdi,QWORD PTR [rbp-0x30]
  0014c: test   rdi,0x7
  00153: jne    0x355d7
  00159: cmp    DWORD PTR [rdi+0x4],0x30
  0015d: jne    0x355d7
  00163: cmp    DWORD PTR [rip+0xfffffffffffec8df],0x26        # 0xfffeca49
  0016a: jne    0x355d7
  00170: mov    esi,DWORD PTR [rip+0xe72]        # 0xfe8
  00176: cmp    esi,0xffffffff
  00179: je     0x355e6
  0017f: cmp    WORD PTR [rdi+0x2],0x3
  00184: jne    0x19d
  0018a: cmp    esi,0x6
  0018d: jge    0x19d
  00193: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00198: jmp    0x1a9
  0019d: movabs rax,0x55b5b00a3ef0
  001a7: call   rax
  001a9: mov    QWORD PTR [rbp-0x70],rax
:00007 
:00009 _ = %0.call otherBasis(%8; 2)        [Scene]
  001ad: mov    rdi,QWORD PTR [rbp-0x28]
  001b1: cmp    DWORD PTR [rip+0xfffffffffffec891],0x26        # 0xfffeca49
  001b8: jne    0x3560f
  001be: mov    QWORD PTR [rsp-0x20],0x0
  001c7: mov    QWORD PTR [rsp-0x38],rcx
  001cc: mov    rax,QWORD PTR [rbx]
  001cf: lea    rsi,[rsp-0x18]
  001d4: mov    QWORD PTR [rsi],rax
  001d7: mov    QWORD PTR [rbx],rsi
  001da: mov    rax,QWORD PTR [rbp-0x28]
  001de: mov    QWORD PTR [rsp-0x38],rax
  001e3: mov    rdi,0x2
  001ea: lea    r8,[rsp-0x40]
  001ef: mov    rax,QWORD PTR [rbp-0x68]
  001f3: mov    QWORD PTR [r8],rax
  001f6: sub    r8,0x8
  001fa: mov    rax,QWORD PTR [rbp-0x70]
  001fe: mov    QWORD PTR [r8],rax
  00201: sub    r8,0x8
  00205: mov    QWORD PTR [rsp-0x30],0x0
  0020e: movabs rax,0x90000003c
  00218: mov    QWORD PTR [rsp-0x28],rax
  0021d: movabs r13,0x55b5b07d6270
  00227: call   0xffff6979
  0022c: lea    rdi,[rbp-0x8]
  00230: mov    QWORD PTR [rbx],rdi
  00233: movabs r13,0x55b5b07c7b90
  0023d: test   rax,rax
  00240: je     0xfffe995f
:00010 
:00012 %3 = const[NAO_SAMPLES]              [8]
  00246: mov    rax,QWORD PTR [rip+0xfffffffffffec80f]        # 0xfffeca5c
  0024d: cmp    rax,QWORD PTR [rip+0xda8]        # 0xffc
  00254: jne    0x3561e
  0025a: mov    rax,QWORD PTR [rip+0xd8b]        # 0xfec
  00261: mov    QWORD PTR [rbp-0x40],rax
:00013 %4 = const[NAO_SAMPLES]              [8]
  00265: mov    rax,QWORD PTR [rip+0xfffffffffffec7f0]        # 0xfffeca5c
  0026c: cmp    rax,QWORD PTR [rip+0xda9]        # 0x101c
  00273: jne    0x35664
  00279: mov    rax,QWORD PTR [rip+0xd8c]        # 0x100c
  00280: mov    QWORD PTR [rbp-0x48],rax
:00014 %5 = literal[0.0001]
  00284: movq   xmm2,QWORD PTR [rip+0xda0]        # 0x102c
  0028c: movabs rax,0xf8d1b71758e2196a
  00296: mov    QWORD PTR [rbp-0x50],rax
:00015 %6 = literal[0.0]
  0029a: movq   xmm3,QWORD PTR [rip+0xd9a]        # 0x103c
  002a2: movabs rax,0x8000000000000002
  002ac: mov    QWORD PTR [rbp-0x58],rax
:00016 %8 = const[Vec]                      [Vec]
  002b0: mov    rax,QWORD PTR [rip+0xfffffffffffec7a5]        # 0xfffeca5c
  002b7: cmp    rax,QWORD PTR [rip+0xd9e]        # 0x105c
  002be: jne    0x356aa
  002c4: mov    rax,QWORD PTR [rip+0xd81]        # 0x104c
  002cb: mov    QWORD PTR [rbp-0x68],rax
:00017 %10 = %1.call pl()                   [Isect]
  002cf: mov    rdi,QWORD PTR [rbp-0x30]
  002d3: test   rdi,0x7
  002da: jne    0x3570e
  002e0: cmp    DWORD PTR [rdi+0x4],0x30
  002e4: jne    0x3570e
  002ea: cmp    DWORD PTR [rip+0xfffffffffffec758],0x26        # 0xfffeca49
  002f1: jne    0x3570e
  002f7: mov    esi,DWORD PTR [rip+0xd6b]        # 0x1068
  002fd: cmp    esi,0xffffffff
  00300: je     0x3571d
  00306: cmp    WORD PTR [rdi+0x2],0x3
  0030b: jne    0x324
  00311: cmp    esi,0x6
  00314: jge    0x324
  0031a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0031f: jmp    0x34e
  00324: sub    rsp,0x10
  00328: movq   QWORD PTR [rsp],xmm2
  0032d: movq   QWORD PTR [rsp+0x8],xmm3
  00333: movabs rax,0x55b5b00a3ef0
  0033d: call   rax
  0033f: movq   xmm2,QWORD PTR [rsp]
  00344: movq   xmm3,QWORD PTR [rsp+0x8]
  0034a: add    rsp,0x10
  0034e: mov    QWORD PTR [rbp-0x78],rax
:00018 
:00020 %9 = %10.call x()                    [Vec]
  00352: mov    rdi,QWORD PTR [rbp-0x78]
  00356: test   rdi,0x7
  0035d: jne    0x35764
  00363: cmp    DWORD PTR [rdi+0x4],0x28
  00367: jne    0x35764
  0036d: cmp    DWORD PTR [rip+0xfffffffffffec6d5],0x26        # 0xfffeca49
  00374: jne    0x35764
  0037a: mov    esi,DWORD PTR [rip+0xcf0]        # 0x1070
  00380: cmp    esi,0xffffffff
  00383: je     0x35773
  00389: cmp    WORD PTR [rdi+0x2],0x3
  0038e: jne    0x3a7
  00394: cmp    esi,0x6
  00397: jge    0x3a7
  0039d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003a2: jmp    0x3d1
  003a7: sub    rsp,0x10
  003ab: movq   QWORD PTR [rsp],xmm2
  003b0: movq   QWORD PTR [rsp+0x8],xmm3
  003b6: movabs rax,0x55b5b00a3ef0
  003c0: call   rax
  003c2: movq   xmm2,QWORD PTR [rsp]
  003c7: movq   xmm3,QWORD PTR [rsp+0x8]
  003cd: add    rsp,0x10
  003d1: mov    QWORD PTR [rbp-0x70],rax
:00021 
:00023 %11 = %1.call n()                    [Isect]
  003d5: mov    rdi,QWORD PTR [rbp-0x30]
  003d9: test   rdi,0x7
  003e0: jne    0x357ba
  003e6: cmp    DWORD PTR [rdi+0x4],0x30
  003ea: jne    0x357ba
  003f0: cmp    DWORD PTR [rip+0xfffffffffffec652],0x26        # 0xfffeca49
  003f7: jne    0x357ba
  003fd: mov    esi,DWORD PTR [rip+0xc75]        # 0x1078
  00403: cmp    esi,0xffffffff
  00406: je     0x357c9
  0040c: cmp    WORD PTR [rdi+0x2],0x3
  00411: jne    0x42a
  00417: cmp    esi,0x6
  0041a: jge    0x42a
  00420: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00425: jmp    0x454
  0042a: sub    rsp,0x10
  0042e: movq   QWORD PTR [rsp],xmm2
  00433: movq   QWORD PTR [rsp+0x8],xmm3
  00439: movabs rax,0x55b5b00a3ef0
  00443: call   rax
  00445: movq   xmm2,QWORD PTR [rsp]
  0044a: movq   xmm3,QWORD PTR [rsp+0x8]
  00450: add    rsp,0x10
  00454: mov    QWORD PTR [rbp-0x80],rax
:00024 
:00026 %10 = %11.call x()                   [Vec]
  00458: mov    rdi,QWORD PTR [rbp-0x80]
  0045c: test   rdi,0x7
  00463: jne    0x35810
  00469: cmp    DWORD PTR [rdi+0x4],0x28
  0046d: jne    0x35810
  00473: cmp    DWORD PTR [rip+0xfffffffffffec5cf],0x26        # 0xfffeca49
  0047a: jne    0x35810
  00480: mov    esi,DWORD PTR [rip+0xbfa]        # 0x1080
  00486: cmp    esi,0xffffffff
  00489: je     0x3581f
  0048f: cmp    WORD PTR [rdi+0x2],0x3
  00494: jne    0x4ad
  0049a: cmp    esi,0x6
  0049d: jge    0x4ad
  004a3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004a8: jmp    0x4d7
  004ad: sub    rsp,0x10
  004b1: movq   QWORD PTR [rsp],xmm2
  004b6: movq   QWORD PTR [rsp+0x8],xmm3
  004bc: movabs rax,0x55b5b00a3ef0
  004c6: call   rax
  004c8: movq   xmm2,QWORD PTR [rsp]
  004cd: movq   xmm3,QWORD PTR [rsp+0x8]
  004d3: add    rsp,0x10
  004d7: mov    QWORD PTR [rbp-0x78],rax
:00027 
:00029 %10 = %5 * %10                       [Float][Float]
  004db: mov    rdi,QWORD PTR [rbp-0x78]
  004df: test   rdi,0x1
  004e6: jne    0x35866
  004ec: test   rdi,0x2
  004f3: je     0x52f
  004f9: xorps  xmm4,xmm4
  004fc: movabs rax,0x8000000000000002
  00506: cmp    rdi,rax
  00509: je     0x541
  0050f: mov    rax,rdi
  00512: sar    rax,0x3f
  00516: add    rax,0x2
  0051a: and    rdi,0xfffffffffffffffc
  0051e: or     rdi,rax
  00521: rol    rdi,0x3d
  00525: movq   xmm4,rdi
  0052a: jmp    0x541
  0052f: call   0xfffe99b8
  00534: test   rax,rax
  00537: je     0x35866
  0053d: movq   xmm4,xmm0
  00541: mulsd  xmm4,xmm2
:00030 %9 = %9 + %10                        [Float][Float]
  00545: mov    rdi,QWORD PTR [rbp-0x70]
  00549: test   rdi,0x1
  00550: jne    0x35875
  00556: test   rdi,0x2
  0055d: je     0x599
  00563: xorps  xmm5,xmm5
  00566: movabs rax,0x8000000000000002
  00570: cmp    rdi,rax
  00573: je     0x5ab
  00579: mov    rax,rdi
  0057c: sar    rax,0x3f
  00580: add    rax,0x2
  00584: and    rdi,0xfffffffffffffffc
  00588: or     rdi,rax
  0058b: rol    rdi,0x3d
  0058f: movq   xmm5,rdi
  00594: jmp    0x5ab
  00599: call   0xfffe99b8
  0059e: test   rax,rax
  005a1: je     0x35875
  005a7: movq   xmm5,xmm0
  005ab: addsd  xmm5,xmm4
:00031 %11 = %1.call pl()                   [Isect]
  005af: mov    rdi,QWORD PTR [rbp-0x30]
  005b3: test   rdi,0x7
  005ba: jne    0x35891
  005c0: cmp    DWORD PTR [rdi+0x4],0x30
  005c4: jne    0x35891
  005ca: cmp    DWORD PTR [rip+0xfffffffffffec478],0x26        # 0xfffeca49
  005d1: jne    0x35891
  005d7: mov    esi,DWORD PTR [rip+0xaab]        # 0x1088
  005dd: cmp    esi,0xffffffff
  005e0: je     0x358ba
  005e6: cmp    WORD PTR [rdi+0x2],0x3
  005eb: jne    0x604
  005f1: cmp    esi,0x6
  005f4: jge    0x604
  005fa: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005ff: jmp    0x646
  00604: sub    rsp,0x20
  00608: movq   QWORD PTR [rsp],xmm2
  0060d: movq   QWORD PTR [rsp+0x8],xmm3
  00613: movq   QWORD PTR [rsp+0x10],xmm4
  00619: movq   QWORD PTR [rsp+0x18],xmm5
  0061f: movabs rax,0x55b5b00a3ef0
  00629: call   rax
  0062b: movq   xmm2,QWORD PTR [rsp]
  00630: movq   xmm3,QWORD PTR [rsp+0x8]
  00636: movq   xmm4,QWORD PTR [rsp+0x10]
  0063c: movq   xmm5,QWORD PTR [rsp+0x18]
  00642: add    rsp,0x20
  00646: mov    QWORD PTR [rbp-0x80],rax
:00032 
:00034 %10 = %11.call y()                   [Vec]
  0064a: mov    rdi,QWORD PTR [rbp-0x80]
  0064e: test   rdi,0x7
  00655: jne    0x35919
  0065b: cmp    DWORD PTR [rdi+0x4],0x28
  0065f: jne    0x35919
  00665: cmp    DWORD PTR [rip+0xfffffffffffec3dd],0x26        # 0xfffeca49
  0066c: jne    0x35919
  00672: mov    esi,DWORD PTR [rip+0xa18]        # 0x1090
  00678: cmp    esi,0xffffffff
  0067b: je     0x35935
  00681: cmp    WORD PTR [rdi+0x2],0x3
  00686: jne    0x69f
  0068c: cmp    esi,0x6
  0068f: jge    0x69f
  00695: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0069a: jmp    0x6d5
  0069f: sub    rsp,0x20
  006a3: movq   QWORD PTR [rsp],xmm2
  006a8: movq   QWORD PTR [rsp+0x8],xmm3
  006ae: movq   QWORD PTR [rsp+0x10],xmm5
  006b4: movabs rax,0x55b5b00a3ef0
  006be: call   rax
  006c0: movq   xmm2,QWORD PTR [rsp]
  006c5: movq   xmm3,QWORD PTR [rsp+0x8]
  006cb: movq   xmm5,QWORD PTR [rsp+0x10]
  006d1: add    rsp,0x20
  006d5: mov    QWORD PTR [rbp-0x78],rax
:00035 
:00037 %12 = %1.call n()                    [Isect]
  006d9: mov    rdi,QWORD PTR [rbp-0x30]
  006dd: test   rdi,0x7
  006e4: jne    0x35988
  006ea: cmp    DWORD PTR [rdi+0x4],0x30
  006ee: jne    0x35988
  006f4: cmp    DWORD PTR [rip+0xfffffffffffec34e],0x26        # 0xfffeca49
  006fb: jne    0x35988
  00701: mov    esi,DWORD PTR [rip+0x991]        # 0x1098
  00707: cmp    esi,0xffffffff
  0070a: je     0x359a4
  00710: cmp    WORD PTR [rdi+0x2],0x3
  00715: jne    0x72e
  0071b: cmp    esi,0x6
  0071e: jge    0x72e
  00724: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00729: jmp    0x764
  0072e: sub    rsp,0x20
  00732: movq   QWORD PTR [rsp],xmm2
  00737: movq   QWORD PTR [rsp+0x8],xmm3
  0073d: movq   QWORD PTR [rsp+0x10],xmm5
  00743: movabs rax,0x55b5b00a3ef0
  0074d: call   rax
  0074f: movq   xmm2,QWORD PTR [rsp]
  00754: movq   xmm3,QWORD PTR [rsp+0x8]
  0075a: movq   xmm5,QWORD PTR [rsp+0x10]
  00760: add    rsp,0x20
  00764: mov    QWORD PTR [rbp-0x88],rax
:00038 
:00040 %11 = %12.call y()                   [Vec]
  0076b: mov    rdi,QWORD PTR [rbp-0x88]
  00772: test   rdi,0x7
  00779: jne    0x359f7
  0077f: cmp    DWORD PTR [rdi+0x4],0x28
  00783: jne    0x359f7
  00789: cmp    DWORD PTR [rip+0xfffffffffffec2b9],0x26        # 0xfffeca49
  00790: jne    0x359f7
  00796: mov    esi,DWORD PTR [rip+0x904]        # 0x10a0
  0079c: cmp    esi,0xffffffff
  0079f: je     0x35a13
  007a5: cmp    WORD PTR [rdi+0x2],0x3
  007aa: jne    0x7c3
  007b0: cmp    esi,0x6
  007b3: jge    0x7c3
  007b9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007be: jmp    0x7f9
  007c3: sub    rsp,0x20
  007c7: movq   QWORD PTR [rsp],xmm2
  007cc: movq   QWORD PTR [rsp+0x8],xmm3
  007d2: movq   QWORD PTR [rsp+0x10],xmm5
  007d8: movabs rax,0x55b5b00a3ef0
  007e2: call   rax
  007e4: movq   xmm2,QWORD PTR [rsp]
  007e9: movq   xmm3,QWORD PTR [rsp+0x8]
  007ef: movq   xmm5,QWORD PTR [rsp+0x10]
  007f5: add    rsp,0x20
  007f9: mov    QWORD PTR [rbp-0x80],rax
:00041 
:00043 %11 = %5 * %11                       [Float][Float]
  007fd: mov    rdi,QWORD PTR [rbp-0x80]
  00801: test   rdi,0x1
  00808: jne    0x35a66
  0080e: test   rdi,0x2
  00815: je     0x851
  0081b: xorps  xmm4,xmm4
  0081e: movabs rax,0x8000000000000002
  00828: cmp    rdi,rax
  0082b: je     0x863
  00831: mov    rax,rdi
  00834: sar    rax,0x3f
  00838: add    rax,0x2
  0083c: and    rdi,0xfffffffffffffffc
  00840: or     rdi,rax
  00843: rol    rdi,0x3d
  00847: movq   xmm4,rdi
  0084c: jmp    0x863
  00851: call   0xfffe99b8
  00856: test   rax,rax
  00859: je     0x35a66
  0085f: movq   xmm4,xmm0
  00863: mulsd  xmm4,xmm2
:00044 %10 = %10 + %11                      [Float][Float]
  00867: mov    rdi,QWORD PTR [rbp-0x78]
  0086b: test   rdi,0x1
  00872: jne    0x35a82
  00878: test   rdi,0x2
  0087f: je     0x8bb
  00885: xorps  xmm6,xmm6
  00888: movabs rax,0x8000000000000002
  00892: cmp    rdi,rax
  00895: je     0x8cd
  0089b: mov    rax,rdi
  0089e: sar    rax,0x3f
  008a2: add    rax,0x2
  008a6: and    rdi,0xfffffffffffffffc
  008aa: or     rdi,rax
  008ad: rol    rdi,0x3d
  008b1: movq   xmm6,rdi
  008b6: jmp    0x8cd
  008bb: call   0xfffe99b8
  008c0: test   rax,rax
  008c3: je     0x35a82
  008c9: movq   xmm6,xmm0
  008cd: addsd  xmm6,xmm4
:00045 %12 = %1.call pl()                   [Isect]
  008d1: mov    rdi,QWORD PTR [rbp-0x30]
  008d5: test   rdi,0x7
  008dc: jne    0x35aab
  008e2: cmp    DWORD PTR [rdi+0x4],0x30
  008e6: jne    0x35aab
  008ec: cmp    DWORD PTR [rip+0xfffffffffffec156],0x26        # 0xfffeca49
  008f3: jne    0x35aab
  008f9: mov    esi,DWORD PTR [rip+0x7a9]        # 0x10a8
  008ff: cmp    esi,0xffffffff
  00902: je     0x35ae1
  00908: cmp    WORD PTR [rdi+0x2],0x3
  0090d: jne    0x926
  00913: cmp    esi,0x6
  00916: jge    0x926
  0091c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00921: jmp    0x974
  00926: sub    rsp,0x30
  0092a: movq   QWORD PTR [rsp],xmm2
  0092f: movq   QWORD PTR [rsp+0x8],xmm3
  00935: movq   QWORD PTR [rsp+0x10],xmm4
  0093b: movq   QWORD PTR [rsp+0x18],xmm5
  00941: movq   QWORD PTR [rsp+0x20],xmm6
  00947: movabs rax,0x55b5b00a3ef0
  00951: call   rax
  00953: movq   xmm2,QWORD PTR [rsp]
  00958: movq   xmm3,QWORD PTR [rsp+0x8]
  0095e: movq   xmm4,QWORD PTR [rsp+0x10]
  00964: movq   xmm5,QWORD PTR [rsp+0x18]
  0096a: movq   xmm6,QWORD PTR [rsp+0x20]
  00970: add    rsp,0x30
  00974: mov    QWORD PTR [rbp-0x88],rax
:00046 
:00048 %11 = %12.call z()                   [Vec]
  0097b: mov    rdi,QWORD PTR [rbp-0x88]
  00982: test   rdi,0x7
  00989: jne    0x35b4c
  0098f: cmp    DWORD PTR [rdi+0x4],0x28
  00993: jne    0x35b4c
  00999: cmp    DWORD PTR [rip+0xfffffffffffec0a9],0x26        # 0xfffeca49
  009a0: jne    0x35b4c
  009a6: mov    esi,DWORD PTR [rip+0x704]        # 0x10b0
  009ac: cmp    esi,0xffffffff
  009af: je     0x35b75
  009b5: cmp    WORD PTR [rdi+0x2],0x3
  009ba: jne    0x9d3
  009c0: cmp    esi,0x6
  009c3: jge    0x9d3
  009c9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ce: jmp    0xa15
  009d3: sub    rsp,0x20
  009d7: movq   QWORD PTR [rsp],xmm2
  009dc: movq   QWORD PTR [rsp+0x8],xmm3
  009e2: movq   QWORD PTR [rsp+0x10],xmm5
  009e8: movq   QWORD PTR [rsp+0x18],xmm6
  009ee: movabs rax,0x55b5b00a3ef0
  009f8: call   rax
  009fa: movq   xmm2,QWORD PTR [rsp]
  009ff: movq   xmm3,QWORD PTR [rsp+0x8]
  00a05: movq   xmm5,QWORD PTR [rsp+0x10]
  00a0b: movq   xmm6,QWORD PTR [rsp+0x18]
  00a11: add    rsp,0x20
  00a15: mov    QWORD PTR [rbp-0x80],rax
:00049 
:00051 %13 = %1.call n()                    [Isect]
  00a19: mov    rdi,QWORD PTR [rbp-0x30]
  00a1d: test   rdi,0x7
  00a24: jne    0x35bd4
  00a2a: cmp    DWORD PTR [rdi+0x4],0x30
  00a2e: jne    0x35bd4
  00a34: cmp    DWORD PTR [rip+0xfffffffffffec00e],0x26        # 0xfffeca49
  00a3b: jne    0x35bd4
  00a41: mov    esi,DWORD PTR [rip+0x671]        # 0x10b8
  00a47: cmp    esi,0xffffffff
  00a4a: je     0x35bfd
  00a50: cmp    WORD PTR [rdi+0x2],0x3
  00a55: jne    0xa6e
  00a5b: cmp    esi,0x6
  00a5e: jge    0xa6e
  00a64: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a69: jmp    0xab0
  00a6e: sub    rsp,0x20
  00a72: movq   QWORD PTR [rsp],xmm2
  00a77: movq   QWORD PTR [rsp+0x8],xmm3
  00a7d: movq   QWORD PTR [rsp+0x10],xmm5
  00a83: movq   QWORD PTR [rsp+0x18],xmm6
  00a89: movabs rax,0x55b5b00a3ef0
  00a93: call   rax
  00a95: movq   xmm2,QWORD PTR [rsp]
  00a9a: movq   xmm3,QWORD PTR [rsp+0x8]
  00aa0: movq   xmm5,QWORD PTR [rsp+0x10]
  00aa6: movq   xmm6,QWORD PTR [rsp+0x18]
  00aac: add    rsp,0x20
  00ab0: mov    QWORD PTR [rbp-0x90],rax
:00052 
:00054 %12 = %13.call z()                   [Vec]
  00ab7: mov    rdi,QWORD PTR [rbp-0x90]
  00abe: test   rdi,0x7
  00ac5: jne    0x35c5c
  00acb: cmp    DWORD PTR [rdi+0x4],0x28
  00acf: jne    0x35c5c
  00ad5: cmp    DWORD PTR [rip+0xfffffffffffebf6d],0x26        # 0xfffeca49
  00adc: jne    0x35c5c
  00ae2: mov    esi,DWORD PTR [rip+0x5d8]        # 0x10c0
  00ae8: cmp    esi,0xffffffff
  00aeb: je     0x35c85
  00af1: cmp    WORD PTR [rdi+0x2],0x3
  00af6: jne    0xb0f
  00afc: cmp    esi,0x6
  00aff: jge    0xb0f
  00b05: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b0a: jmp    0xb51
  00b0f: sub    rsp,0x20
  00b13: movq   QWORD PTR [rsp],xmm2
  00b18: movq   QWORD PTR [rsp+0x8],xmm3
  00b1e: movq   QWORD PTR [rsp+0x10],xmm5
  00b24: movq   QWORD PTR [rsp+0x18],xmm6
  00b2a: movabs rax,0x55b5b00a3ef0
  00b34: call   rax
  00b36: movq   xmm2,QWORD PTR [rsp]
  00b3b: movq   xmm3,QWORD PTR [rsp+0x8]
  00b41: movq   xmm5,QWORD PTR [rsp+0x10]
  00b47: movq   xmm6,QWORD PTR [rsp+0x18]
  00b4d: add    rsp,0x20
  00b51: mov    QWORD PTR [rbp-0x88],rax
:00055 
:00057 %12 = %5 * %12                       [Float][Float]
  00b58: mov    rdi,QWORD PTR [rbp-0x88]
  00b5f: test   rdi,0x1
  00b66: jne    0x35ce4
  00b6c: test   rdi,0x2
  00b73: je     0xbaf
  00b79: xorps  xmm4,xmm4
  00b7c: movabs rax,0x8000000000000002
  00b86: cmp    rdi,rax
  00b89: je     0xbc1
  00b8f: mov    rax,rdi
  00b92: sar    rax,0x3f
  00b96: add    rax,0x2
  00b9a: and    rdi,0xfffffffffffffffc
  00b9e: or     rdi,rax
  00ba1: rol    rdi,0x3d
  00ba5: movq   xmm4,rdi
  00baa: jmp    0xbc1
  00baf: call   0xfffe99b8
  00bb4: test   rax,rax
  00bb7: je     0x35ce4
  00bbd: movq   xmm4,xmm0
  00bc1: mulsd  xmm4,xmm2
:00058 %11 = %11 + %12                      [Float][Float]
  00bc5: mov    rdi,QWORD PTR [rbp-0x80]
  00bc9: test   rdi,0x1
  00bd0: jne    0x35d0d
  00bd6: test   rdi,0x2
  00bdd: je     0xc19
  00be3: xorps  xmm7,xmm7
  00be6: movabs rax,0x8000000000000002
  00bf0: cmp    rdi,rax
  00bf3: je     0xc2b
  00bf9: mov    rax,rdi
  00bfc: sar    rax,0x3f
  00c00: add    rax,0x2
  00c04: and    rdi,0xfffffffffffffffc
  00c08: or     rdi,rax
  00c0b: rol    rdi,0x3d
  00c0f: movq   xmm7,rdi
  00c14: jmp    0xc2b
  00c19: call   0xfffe99b8
  00c1e: test   rax,rax
  00c21: je     0x35d0d
  00c27: movq   xmm7,xmm0
  00c2b: addsd  xmm7,xmm4
:00059 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c2f: movq   xmm0,xmm5
  00c33: call   0xfffe9adc
  00c38: mov    QWORD PTR [rbp-0x70],rax
  00c3c: movq   xmm0,xmm6
  00c40: call   0xfffe9adc
  00c45: mov    QWORD PTR [rbp-0x78],rax
  00c49: movq   xmm0,xmm7
  00c4d: call   0xfffe9adc
  00c52: mov    QWORD PTR [rbp-0x80],rax
  00c56: mov    rdi,QWORD PTR [rbp-0x68]
  00c5a: test   rdi,0x7
  00c61: jne    0x35d46
  00c67: cmp    DWORD PTR [rdi+0x4],0x29
  00c6b: jne    0x35d46
  00c71: cmp    DWORD PTR [rip+0xfffffffffffebdd1],0x26        # 0xfffeca49
  00c78: jne    0x35d46
  00c7e: mov    r9,0x0
  00c85: sub    rsp,0x30
  00c89: movq   QWORD PTR [rsp],xmm2
  00c8e: movq   QWORD PTR [rsp+0x8],xmm3
  00c94: movq   QWORD PTR [rsp+0x10],xmm4
  00c9a: movq   QWORD PTR [rsp+0x18],xmm5
  00ca0: movq   QWORD PTR [rsp+0x20],xmm6
  00ca6: movq   QWORD PTR [rsp+0x28],xmm7
  00cac: mov    rdx,rdi
  00caf: mov    QWORD PTR [rsp-0x20],0x0
  00cb8: mov    QWORD PTR [rsp-0x38],rcx
  00cbd: mov    rax,QWORD PTR [rbx]
  00cc0: lea    rsi,[rsp-0x18]
  00cc5: mov    QWORD PTR [rsi],rax
  00cc8: mov    QWORD PTR [rbx],rsi
  00ccb: lea    rcx,[rbp-0x70]
  00ccf: mov    r8,0x3
  00cd6: call   0x35d65
  00cdb: lea    rdi,[rbp-0x8]
  00cdf: mov    QWORD PTR [rbx],rdi
  00ce2: movq   xmm2,QWORD PTR [rsp]
  00ce7: movq   xmm3,QWORD PTR [rsp+0x8]
  00ced: movq   xmm4,QWORD PTR [rsp+0x10]
  00cf3: movq   xmm5,QWORD PTR [rsp+0x18]
  00cf9: movq   xmm6,QWORD PTR [rsp+0x20]
  00cff: movq   xmm7,QWORD PTR [rsp+0x28]
  00d05: add    rsp,0x30
  00d09: movabs r13,0x55b5b07c7eb0
  00d13: test   rax,rax
  00d16: je     0xfffe995f
  00d1c: mov    QWORD PTR [rbp-0x60],rax
:00060 
:00062 %8 = literal[5111809]
  00d20: mov    rax,0x9c0003
  00d27: mov    QWORD PTR [rbp-0x68],rax
:00063 _ = %4.call times(&%8)               [Integer]
  00d2b: mov    rdi,QWORD PTR [rbp-0x48]
  00d2f: test   rdi,0x1
  00d36: je     0x35d97
  00d3c: cmp    DWORD PTR [rip+0xfffffffffffebd06],0x26        # 0xfffeca49
  00d43: jne    0x35d97
  00d49: mov    r9,QWORD PTR [rbp-0x68]
  00d4d: sub    rsp,0x20
  00d51: movq   QWORD PTR [rsp],xmm4
  00d56: movq   QWORD PTR [rsp+0x8],xmm5
  00d5c: movq   QWORD PTR [rsp+0x10],xmm6
  00d62: movq   QWORD PTR [rsp+0x18],xmm7
  00d68: mov    rdx,rdi
  00d6b: mov    QWORD PTR [rsp-0x20],0x0
  00d74: mov    QWORD PTR [rsp-0x38],rcx
  00d79: mov    rax,QWORD PTR [rbx]
  00d7c: lea    rsi,[rsp-0x18]
  00d81: mov    QWORD PTR [rsi],rax
  00d84: mov    QWORD PTR [rbx],rsi
  00d87: lea    rcx,[rbp-0x70]
  00d8b: mov    r8,0x0
  00d92: call   0x35db6
  00d97: lea    rdi,[rbp-0x8]
  00d9b: mov    QWORD PTR [rbx],rdi
  00d9e: movq   xmm4,QWORD PTR [rsp]
  00da3: movq   xmm5,QWORD PTR [rsp+0x8]
  00da9: movq   xmm6,QWORD PTR [rsp+0x10]
  00daf: movq   xmm7,QWORD PTR [rsp+0x18]
  00db5: add    rsp,0x20
  00db9: movabs r13,0x55b5b07c7ef0
  00dc3: test   rax,rax
  00dc6: je     0xfffe995f
:00064 
:00066 %8 = %3.call to_f()                  [Integer]
  00dcc: mov    rdi,QWORD PTR [rbp-0x40]
  00dd0: test   rdi,0x1
  00dd7: je     0x35de8
  00ddd: cmp    DWORD PTR [rip+0xfffffffffffebc65],0x26        # 0xfffeca49
  00de4: jne    0x35de8
  00dea: sar    rdi,1
  00ded: cvtsi2sd xmm2,rdi
:00067 
:00069 %9 = %4.call to_f()                  [Integer]
  00df2: mov    rdi,QWORD PTR [rbp-0x48]
  00df6: test   rdi,0x1
  00dfd: je     0x35e07
  00e03: cmp    DWORD PTR [rip+0xfffffffffffebc3f],0x26        # 0xfffeca49
  00e0a: jne    0x35e07
  00e10: sar    rdi,1
  00e13: cvtsi2sd xmm3,rdi
:00070 
:00072 %8 = %8 * %9                         [Float][Float]
  00e18: mulsd  xmm2,xmm3
:00073 %8 = %8 - %6                         [Float][Float]
  00e1c: mov    rdi,QWORD PTR [rbp-0x58]
  00e20: test   rdi,0x1
  00e27: jne    0x35e33
  00e2d: test   rdi,0x2
  00e34: je     0xe70
  00e3a: xorps  xmm5,xmm5
  00e3d: movabs rax,0x8000000000000002
  00e47: cmp    rdi,rax
  00e4a: je     0xe82
  00e50: mov    rax,rdi
  00e53: sar    rax,0x3f
  00e57: add    rax,0x2
  00e5b: and    rdi,0xfffffffffffffffc
  00e5f: or     rdi,rax
  00e62: rol    rdi,0x3d
  00e66: movq   xmm5,rdi
  00e6b: jmp    0xe82
  00e70: call   0xfffe99b8
  00e75: test   rax,rax
  00e78: je     0x35e33
  00e7e: movq   xmm5,xmm0
  00e82: subsd  xmm2,xmm5
:00074 %9 = %3.call to_f()                  [Integer]
  00e86: mov    rdi,QWORD PTR [rbp-0x40]
  00e8a: test   rdi,0x1
  00e91: je     0x35e6c
  00e97: cmp    DWORD PTR [rip+0xfffffffffffebbab],0x26        # 0xfffeca49
  00e9e: jne    0x35e6c
  00ea4: sar    rdi,1
  00ea7: cvtsi2sd xmm3,rdi
:00075 
:00077 %10 = %4.call to_f()                 [Integer]
  00eac: mov    rdi,QWORD PTR [rbp-0x48]
  00eb0: test   rdi,0x1
  00eb7: je     0x35e98
  00ebd: cmp    DWORD PTR [rip+0xfffffffffffebb85],0x26        # 0xfffeca49
  00ec4: jne    0x35e98
  00eca: sar    rdi,1
  00ecd: cvtsi2sd xmm6,rdi
:00078 
:00080 %9 = %9 * %10                        [Float][Float]
  00ed2: mulsd  xmm3,xmm6
:00081 %6 = %8 / %9                         [Float][Float]
  00ed6: movq   xmm5,xmm2
  00eda: movq   rax,xmm3
  00edf: test   rax,rax
  00ee2: je     0xfffe9984
  00ee8: divsd  xmm5,xmm3
:00082 %9 = const[Vec]                      [Vec]
  00eec: mov    rax,QWORD PTR [rip+0xfffffffffffebb69]        # 0xfffeca5c
  00ef3: cmp    rax,QWORD PTR [rip+0x1e2]        # 0x10dc
  00efa: jne    0x35ed1
  00f00: mov    rax,QWORD PTR [rip+0x1c5]        # 0x10cc
  00f07: mov    QWORD PTR [rbp-0x70],rax
:00083 %10 = %6
:00084 %11 = %6
:00085 %12 = %6
:00086 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
  00f0b: movq   xmm0,xmm5
  00f0f: call   0xfffe9adc
  00f14: mov    QWORD PTR [rbp-0x78],rax
  00f18: movq   xmm0,xmm5
  00f1c: call   0xfffe9adc
  00f21: mov    QWORD PTR [rbp-0x80],rax
  00f25: movq   xmm0,xmm5
  00f29: call   0xfffe9adc
  00f2e: mov    QWORD PTR [rbp-0x88],rax
  00f35: mov    rdi,QWORD PTR [rbp-0x70]
  00f39: test   rdi,0x7
  00f40: jne    0x35f59
  00f46: cmp    DWORD PTR [rdi+0x4],0x29
  00f4a: jne    0x35f59
  00f50: cmp    DWORD PTR [rip+0xfffffffffffebaf2],0x26        # 0xfffeca49
  00f57: jne    0x35f59
  00f5d: mov    r9,0x0
  00f64: sub    rsp,0x10
  00f68: movq   QWORD PTR [rsp],xmm5
  00f6d: mov    rdx,rdi
  00f70: mov    QWORD PTR [rsp-0x20],0x0
  00f79: mov    QWORD PTR [rsp-0x38],rcx
  00f7e: mov    rax,QWORD PTR [rbx]
  00f81: lea    rsi,[rsp-0x18]
  00f86: mov    QWORD PTR [rsi],rax
  00f89: mov    QWORD PTR [rbx],rsi
  00f8c: lea    rcx,[rbp-0x78]
  00f90: mov    r8,0x3
  00f97: call   0x35f75
  00f9c: lea    rdi,[rbp-0x8]
  00fa0: mov    QWORD PTR [rbx],rdi
  00fa3: movq   xmm5,QWORD PTR [rsp]
  00fa8: add    rsp,0x10
  00fac: movabs r13,0x55b5b07c8060
  00fb6: test   rax,rax
  00fb9: je     0xfffe995f
  00fbf: mov    QWORD PTR [rbp-0x68],rax
:00087 
:00089 ret %8
  00fc3: mov    rax,QWORD PTR [rbp-0x68]
  00fc7: leave  
  00fc8: ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55b5b07d6270
<== finished compile. elapsed:170µs
offset:Pos(96184) code: 7664 bytes  data: 380 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	je     0x4a
  00014:    	jl     0x1f
  0001a:    	jmp    0x34ec3
  0001f:    	jmp    0x34ec3
  00024:    	mov    eax,0x2
  00029:    	sub    eax,edx
  0002b:    	test   rax,rax
  0002e:    	je     0x4a
  00034:    	lea    rdi,[rbp-0x40]
  00038: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00040:    	sub    rax,0x1
  00044:    	jne    0x38
  0004a: 00 	mov    rax,0x4
  00051:    	mov    QWORD PTR [rbp-0x40],rax
  00055:    	mov    QWORD PTR [rbp-0x48],rax
  00059:    	mov    QWORD PTR [rbp-0x50],rax
  0005d:    	mov    QWORD PTR [rbp-0x58],rax
  00061:    	mov    QWORD PTR [rbp-0x60],rax
  00065:    	mov    QWORD PTR [rbp-0x68],rax
  00069:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x34ed2
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x32
  0007e:    	jne    0x34ed2
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  00084: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  0008c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb8e5]        # 0xfffeb978
  00093: 00 	cmp    rax,QWORD PTR [rip+0x1d6e]        # 0x1e08
  0009a:    	jne    0x34ee1
  000a0: 00 	mov    rax,QWORD PTR [rip+0x1d51]        # 0x1df8
  000a7:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  000ab:    	mov    rdi,QWORD PTR [rbp-0x38]
  000af: 00 	test   rdi,0x7
  000b6:    	jne    0x34f27
  000bc:    	cmp    DWORD PTR [rdi+0x4],0x28
  000c0:    	jne    0x34f27
  000c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb898],0x26        # 0xfffeb965
  000cd:    	jne    0x34f27
  000d3:    	mov    esi,DWORD PTR [rip+0x1d3b]        # 0x1e14
  000d9:    	cmp    esi,0xffffffff
  000dc:    	je     0x34f36
  000e2:    	cmp    WORD PTR [rdi+0x2],0x3
  000e7:    	jne    0x100
  000ed:    	cmp    esi,0x6
  000f0:    	jge    0x100
  000f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000fb:    	jmp    0x10c
  00100: b5 	movabs rax,0x55b5b00a3ef0
  0010a:    	call   rax
  0010c:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  00110:    	mov    rdi,QWORD PTR [rbp-0x38]
  00114: 00 	test   rdi,0x7
  0011b:    	jne    0x34f5f
  00121:    	cmp    DWORD PTR [rdi+0x4],0x28
  00125:    	jne    0x34f5f
  0012b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb833],0x26        # 0xfffeb965
  00132:    	jne    0x34f5f
  00138:    	mov    esi,DWORD PTR [rip+0x1cde]        # 0x1e1c
  0013e:    	cmp    esi,0xffffffff
  00141:    	je     0x34f6e
  00147:    	cmp    WORD PTR [rdi+0x2],0x3
  0014c:    	jne    0x165
  00152:    	cmp    esi,0x6
  00155:    	jge    0x165
  0015b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00160:    	jmp    0x171
  00165: b5 	movabs rax,0x55b5b00a3ef0
  0016f:    	call   rax
  00171:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00175:    	mov    rdi,QWORD PTR [rbp-0x38]
  00179: 00 	test   rdi,0x7
  00180:    	jne    0x34f97
  00186:    	cmp    DWORD PTR [rdi+0x4],0x28
  0018a:    	jne    0x34f97
  00190: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb7ce],0x26        # 0xfffeb965
  00197:    	jne    0x34f97
  0019d:    	mov    esi,DWORD PTR [rip+0x1c81]        # 0x1e24
  001a3:    	cmp    esi,0xffffffff
  001a6:    	je     0x34fa6
  001ac:    	cmp    WORD PTR [rdi+0x2],0x3
  001b1:    	jne    0x1ca
  001b7:    	cmp    esi,0x6
  001ba:    	jge    0x1ca
  001c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001c5:    	jmp    0x1d6
  001ca: b5 	movabs rax,0x55b5b00a3ef0
  001d4:    	call   rax
  001d6:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001da:    	mov    rdi,QWORD PTR [rbp-0x50]
  001de: 00 	test   rdi,0x7
  001e5:    	jne    0x34fcf
  001eb:    	cmp    DWORD PTR [rdi+0x4],0x29
  001ef:    	jne    0x34fcf
  001f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb769],0x26        # 0xfffeb965
  001fc:    	jne    0x34fcf
  00202: 00 	mov    r9,0x0
  00209:    	mov    rdx,rdi
  0020c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00215:    	mov    QWORD PTR [rsp-0x38],rcx
  0021a:    	mov    rax,QWORD PTR [rbx]
  0021d:    	lea    rsi,[rsp-0x18]
  00222:    	mov    QWORD PTR [rsi],rax
  00225:    	mov    QWORD PTR [rbx],rsi
  00228:    	lea    rcx,[rbp-0x58]
  0022c: 00 	mov    r8,0x3
  00233:    	call   0x34fde
  00238:    	lea    rdi,[rbp-0x8]
  0023c:    	mov    QWORD PTR [rbx],rdi
  0023f: b5 	movabs r13,0x55b5b07d6350
  00249:    	test   rax,rax
  0024c:    	je     0xfffe887b
  00252:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  00256:    	mov    rdx,QWORD PTR [rbp-0x30]
  0025a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0025e:    	mov    r8,QWORD PTR [rbp-0x48]
  00262:    	mov    rdi,rbx
  00265:    	mov    rsi,r12
  00268: b5 	movabs rax,0x55b5b0091bd0
  00272:    	call   rax
  00274: b5 	movabs r13,0x55b5b07d6370
  0027e:    	test   rax,rax
  00281:    	je     0xfffe887b
:00016 %3 = 1: i32
  00287: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  0028f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb6e2]        # 0xfffeb978
  00296: 00 	cmp    rax,QWORD PTR [rip+0x1b9b]        # 0x1e38
  0029d:    	jne    0x35010
  002a3: 00 	mov    rax,QWORD PTR [rip+0x1b7e]        # 0x1e28
  002aa:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  002ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b92]        # 0x1e48
  002b6: 00 	movabs rax,0x8000000000000002
  002c0:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002c4: 00 	movq   xmm3,QWORD PTR [rip+0x1b8c]        # 0x1e58
  002cc: 00 	movabs rax,0x8000000000000002
  002d6:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002da: 00 	movq   xmm4,QWORD PTR [rip+0x1b86]        # 0x1e68
  002e2: 00 	movabs rax,0x8000000000000002
  002ec:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f0:    	mov    rdi,QWORD PTR [rbp-0x50]
  002f4: 00 	test   rdi,0x7
  002fb:    	jne    0x35056
  00301:    	cmp    DWORD PTR [rdi+0x4],0x29
  00305:    	jne    0x35056
  0030b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb653],0x26        # 0xfffeb965
  00312:    	jne    0x35056
  00318: 00 	mov    r9,0x0
  0031f:    	sub    rsp,0x20
  00323:    	movq   QWORD PTR [rsp],xmm2
  00328:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00334:    	mov    rdx,rdi
  00337: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00340:    	mov    QWORD PTR [rsp-0x38],rcx
  00345:    	mov    rax,QWORD PTR [rbx]
  00348:    	lea    rsi,[rsp-0x18]
  0034d:    	mov    QWORD PTR [rsi],rax
  00350:    	mov    QWORD PTR [rbx],rsi
  00353:    	lea    rcx,[rbp-0x58]
  00357: 00 	mov    r8,0x3
  0035e:    	call   0x35065
  00363:    	lea    rdi,[rbp-0x8]
  00367:    	mov    QWORD PTR [rbx],rdi
  0036a:    	movq   xmm2,QWORD PTR [rsp]
  0036f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00375:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0037b:    	add    rsp,0x20
  0037f: b5 	movabs r13,0x55b5b07d63e0
  00389:    	test   rax,rax
  0038c:    	je     0xfffe887b
  00392:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  00396:    	sub    rsp,0x20
  0039a:    	movq   QWORD PTR [rsp],xmm2
  0039f:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  003af:    	mov    rcx,QWORD PTR [rbp-0x40]
  003b3:    	mov    r8,QWORD PTR [rbp-0x48]
  003b7:    	mov    rdi,rbx
  003ba:    	mov    rsi,r12
  003bd: b5 	movabs rax,0x55b5b0091bd0
  003c7:    	call   rax
  003c9:    	movq   xmm2,QWORD PTR [rsp]
  003ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003da:    	add    rsp,0x20
  003de: b5 	movabs r13,0x55b5b07d6400
  003e8:    	test   rax,rax
  003eb:    	je     0xfffe887b
:00025 %3 = %2.call x()                     [Vec]
  003f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  003f5: 00 	test   rdi,0x7
  003fc:    	jne    0x35097
  00402:    	cmp    DWORD PTR [rdi+0x4],0x28
  00406:    	jne    0x35097
  0040c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb552],0x26        # 0xfffeb965
  00413:    	jne    0x35097
  00419:    	mov    esi,DWORD PTR [rip+0x1a55]        # 0x1e74
  0041f:    	cmp    esi,0xffffffff
  00422:    	je     0x350a6
  00428:    	cmp    WORD PTR [rdi+0x2],0x3
  0042d:    	jne    0x446
  00433:    	cmp    esi,0x6
  00436:    	jge    0x446
  0043c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441:    	jmp    0x47c
  00446:    	sub    rsp,0x20
  0044a:    	movq   QWORD PTR [rsp],xmm2
  0044f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00455:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045b: b5 	movabs rax,0x55b5b00a3ef0
  00465:    	call   rax
  00467:    	movq   xmm2,QWORD PTR [rsp]
  0046c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00472:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00478:    	add    rsp,0x20
  0047c:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00480: 00 	movq   xmm5,QWORD PTR [rip+0x19f0]        # 0x1e78
  00488: 99 	movabs rax,0xff1999999999999a
  00492:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00496:    	mov    rdi,QWORD PTR [rbp-0x40]
  0049a: 00 	test   rdi,0x1
  004a1:    	jne    0x350f9
  004a7: 00 	test   rdi,0x2
  004ae:    	je     0x4ea
  004b4:    	xorps  xmm6,xmm6
  004b7: 00 	movabs rax,0x8000000000000002
  004c1:    	cmp    rdi,rax
  004c4:    	je     0x4fc
  004ca:    	mov    rax,rdi
  004cd:    	sar    rax,0x3f
  004d1:    	add    rax,0x2
  004d5:    	and    rdi,0xfffffffffffffffc
  004d9:    	or     rdi,rax
  004dc:    	rol    rdi,0x3d
  004e0:    	movq   xmm6,rdi
  004e5:    	jmp    0x4fc
  004ea:    	call   0xfffe88d4
  004ef:    	test   rax,rax
  004f2:    	je     0x350f9
  004f8:    	movq   xmm6,xmm0
  004fc:    	ucomisd xmm6,xmm5
  00500:    	jae    0x351fa
:00031 %3 = %2.call x()                     [Vec]
  00506:    	mov    rdi,QWORD PTR [rbp-0x38]
  0050a: 00 	test   rdi,0x7
  00511:    	jne    0x35108
  00517:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051b:    	jne    0x35108
  00521: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb43d],0x26        # 0xfffeb965
  00528:    	jne    0x35108
  0052e:    	mov    esi,DWORD PTR [rip+0x1950]        # 0x1e84
  00534:    	cmp    esi,0xffffffff
  00537:    	je     0x35117
  0053d:    	cmp    WORD PTR [rdi+0x2],0x3
  00542:    	jne    0x55b
  00548:    	cmp    esi,0x6
  0054b:    	jge    0x55b
  00551:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00556:    	jmp    0x59d
  0055b:    	sub    rsp,0x20
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576: b5 	movabs rax,0x55b5b00a3ef0
  00580:    	call   rax
  00582:    	movq   xmm2,QWORD PTR [rsp]
  00587:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00593:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00599:    	add    rsp,0x20
  0059d:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  005a1: 00 	movq   xmm5,QWORD PTR [rip+0x18df]        # 0x1e88
  005a9: 99 	movabs rax,0xff1999999999999e
  005b3:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  005bb: 00 	test   rdi,0x1
  005c2:    	jne    0x35176
  005c8: 00 	test   rdi,0x2
  005cf:    	je     0x60b
  005d5:    	xorps  xmm6,xmm6
  005d8: 00 	movabs rax,0x8000000000000002
  005e2:    	cmp    rdi,rax
  005e5:    	je     0x61d
  005eb:    	mov    rax,rdi
  005ee:    	sar    rax,0x3f
  005f2:    	add    rax,0x2
  005f6:    	and    rdi,0xfffffffffffffffc
  005fa:    	or     rdi,rax
  005fd:    	rol    rdi,0x3d
  00601:    	movq   xmm6,rdi
  00606:    	jmp    0x61d
  0060b:    	call   0xfffe88d4
  00610:    	test   rax,rax
  00613:    	je     0x35176
  00619:    	movq   xmm6,xmm0
  0061d:    	ucomisd xmm6,xmm5
  00621:    	jbe    0x35213
:00037 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0062f:    	sub    rsp,0x20
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0064e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00652:    	mov    rdi,rbx
  00655:    	mov    rsi,r12
  00658: b5 	movabs r8,0x55b5b07d64d8
  00662: b5 	movabs rax,0x55b5b0091aa0
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00685:    	add    rsp,0x20
  00689: b5 	movabs r13,0x55b5b07d64e0
  00693:    	test   rax,rax
  00696:    	je     0xfffe887b
  0069c:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  006a0: 00 	movq   xmm5,QWORD PTR [rip+0x17f0]        # 0x1e98
  006a8: 00 	movabs rax,0xff80000000000002
  006b2:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006b6:    	mov    rdi,QWORD PTR [rbp-0x40]
  006ba: 00 	test   rdi,0x7
  006c1:    	jne    0x35185
  006c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  006cb:    	jne    0x35185
  006d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb28d],0x26        # 0xfffeb965
  006d8:    	jne    0x35185
  006de:    	mov    esi,DWORD PTR [rip+0x17c0]        # 0x1ea4
  006e4:    	cmp    esi,0xffffffff
  006e7:    	je     0x35194
  006ed:    	cmp    WORD PTR [rdi+0x2],0x3
  006f2:    	jne    0x70f
  006f8:    	cmp    esi,0x6
  006fb:    	jge    0x70f
  00701:    	mov    rax,QWORD PTR [rbp-0x48]
  00705:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0070a:    	jmp    0x768
  0070f:    	sub    rsp,0x20
  00713:    	movq   QWORD PTR [rsp],xmm2
  00718:    	movq   QWORD PTR [rsp+0x8],xmm3
  0071e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00724:    	movq   QWORD PTR [rsp+0x18],xmm5
  0072a:    	mov    rdx,QWORD PTR [rbp-0x48]
  0072e: b5 	movabs rax,0x55b5b00a4170
  00738:    	call   rax
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	add    rsp,0x20
  00755: b5 	movabs r13,0x55b5b07d6510
  0075f:    	test   rax,rax
  00762:    	je     0xfffe887b
:00041 
:00043 br =>:00088
  00768:    	jmp    0x358d4
:00044 %3 = %2.call y()                     [<INVALID>]
  0076d: 01 	sub    DWORD PTR [rip+0x1734],0x1        # 0x1ea8
  00774:    	je     0x3523b
  0077a:    	sub    rsp,0x20
  0077e:    	movq   QWORD PTR [rsp],xmm2
  00783:    	movq   QWORD PTR [rsp+0x8],xmm3
  00789:    	movq   QWORD PTR [rsp+0x10],xmm4
  0078f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00795:    	mov    rdi,QWORD PTR [rbp-0x38]
  00799: b5 	movabs rax,0x55b5b009e670
  007a3:    	call   rax
  007a5:    	mov    r15d,eax
  007a8: 00 	cmp    r15d,DWORD PTR [rip+0x1701]        # 0x1eb0
  007af:    	jne    0x3525d
  007b5:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb1aa]        # 0xfffeb965
  007bb:    	cmp    DWORD PTR [rip+0x16eb],eax        # 0x1eac
  007c1:    	jne    0x3525d
  007c7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007d0:    	mov    QWORD PTR [rsp-0x38],rcx
  007d5:    	mov    rax,QWORD PTR [rbx]
  007d8:    	lea    rsi,[rsp-0x18]
  007dd:    	mov    QWORD PTR [rsi],rax
  007e0:    	mov    QWORD PTR [rbx],rsi
  007e3:    	mov    rax,QWORD PTR [rbp-0x38]
  007e7:    	mov    QWORD PTR [rsp-0x38],rax
  007ec: 00 	mov    rdi,0x0
  007f3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007fc: 00 	movabs rax,0x0
  00806:    	mov    QWORD PTR [rsp-0x28],rax
  0080b: 00 	movabs r13,0x0
  00815:    	call   0xfffe8848
  0081a:    	lea    rdi,[rbp-0x8]
  0081e:    	mov    QWORD PTR [rbx],rdi
  00821:    	movq   xmm2,QWORD PTR [rsp]
  00826:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0082c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00832:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00838:    	add    rsp,0x20
  0083c:    	test   rax,rax
  0083f:    	je     0x352c9
  00845:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00849: 00 	movq   xmm5,QWORD PTR [rip+0x1667]        # 0x1eb8
  00851: 99 	movabs rax,0xff1999999999999a
  0085b:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  0085f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00863:    	mov    rsi,QWORD PTR [rbp-0x48]
  00867: 00 	test   rdi,0x1
  0086e:    	je     0x352d8
  00874: 00 	test   rsi,0x1
  0087b:    	je     0x352d8
  00881:    	cmp    rdi,rsi
  00884:    	jge    0x354da
:00050 %3 = %2.call y()                     [<INVALID>]
  0088a: 01 	sub    DWORD PTR [rip+0x162f],0x1        # 0x1ec0
  00891:    	je     0x3533c
  00897:    	sub    rsp,0x20
  0089b:    	movq   QWORD PTR [rsp],xmm2
  008a0:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a6:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ac:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b2:    	mov    rdi,QWORD PTR [rbp-0x38]
  008b6: b5 	movabs rax,0x55b5b009e670
  008c0:    	call   rax
  008c2:    	mov    r15d,eax
  008c5: 00 	cmp    r15d,DWORD PTR [rip+0x15fc]        # 0x1ec8
  008cc:    	jne    0x3535e
  008d2:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb08d]        # 0xfffeb965
  008d8:    	cmp    DWORD PTR [rip+0x15e6],eax        # 0x1ec4
  008de:    	jne    0x3535e
  008e4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008ed:    	mov    QWORD PTR [rsp-0x38],rcx
  008f2:    	mov    rax,QWORD PTR [rbx]
  008f5:    	lea    rsi,[rsp-0x18]
  008fa:    	mov    QWORD PTR [rsi],rax
  008fd:    	mov    QWORD PTR [rbx],rsi
  00900:    	mov    rax,QWORD PTR [rbp-0x38]
  00904:    	mov    QWORD PTR [rsp-0x38],rax
  00909: 00 	mov    rdi,0x0
  00910: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00919: 00 	movabs rax,0x0
  00923:    	mov    QWORD PTR [rsp-0x28],rax
  00928: 00 	movabs r13,0x0
  00932:    	call   0xfffe8848
  00937:    	lea    rdi,[rbp-0x8]
  0093b:    	mov    QWORD PTR [rbx],rdi
  0093e:    	movq   xmm2,QWORD PTR [rsp]
  00943:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00949:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0094f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00955:    	add    rsp,0x20
  00959:    	test   rax,rax
  0095c:    	je     0x353ca
  00962:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00966: 00 	movq   xmm5,QWORD PTR [rip+0x156a]        # 0x1ed8
  0096e: 99 	movabs rax,0xff1999999999999e
  00978:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  0097c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00980:    	mov    rsi,QWORD PTR [rbp-0x48]
  00984: 00 	test   rdi,0x1
  0098b:    	je     0x353d9
  00991: 00 	test   rsi,0x1
  00998:    	je     0x353d9
  0099e:    	cmp    rdi,rsi
  009a1:    	jle    0x354f3
:00056 %3 = 1: i32
  009a7: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009af:    	sub    rsp,0x20
  009b3:    	movq   QWORD PTR [rsp],xmm2
  009b8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009be:    	movq   QWORD PTR [rsp+0x10],xmm4
  009c4:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ca:    	mov    rdx,QWORD PTR [rbp-0x30]
  009ce:    	mov    rcx,QWORD PTR [rbp-0x40]
  009d2:    	mov    rdi,rbx
  009d5:    	mov    rsi,r12
  009d8: b5 	movabs r8,0x55b5b07d6608
  009e2: b5 	movabs rax,0x55b5b0091aa0
  009ec:    	call   rax
  009ee:    	movq   xmm2,QWORD PTR [rsp]
  009f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a05:    	add    rsp,0x20
  00a09: b5 	movabs r13,0x55b5b07d6610
  00a13:    	test   rax,rax
  00a16:    	je     0xfffe887b
  00a1c:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a20: 00 	movq   xmm5,QWORD PTR [rip+0x14c0]        # 0x1ee8
  00a28: 00 	movabs rax,0xff80000000000002
  00a32:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a36: 01 	sub    DWORD PTR [rip+0x14b3],0x1        # 0x1ef0
  00a3d:    	je     0x3543d
  00a43:    	sub    rsp,0x20
  00a47:    	movq   QWORD PTR [rsp],xmm2
  00a4c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a52:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a58:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a5e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a62: b5 	movabs rax,0x55b5b009e670
  00a6c:    	call   rax
  00a6e:    	mov    r15d,eax
  00a71: 00 	cmp    r15d,DWORD PTR [rip+0x1480]        # 0x1ef8
  00a78:    	jne    0x3545f
  00a7e:    	mov    eax,DWORD PTR [rip+0xfffffffffffeaee1]        # 0xfffeb965
  00a84:    	cmp    DWORD PTR [rip+0x146a],eax        # 0x1ef4
  00a8a:    	jne    0x3545f
  00a90: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a99:    	mov    QWORD PTR [rsp-0x38],rcx
  00a9e:    	mov    rax,QWORD PTR [rbx]
  00aa1:    	lea    rsi,[rsp-0x18]
  00aa6:    	mov    QWORD PTR [rsi],rax
  00aa9:    	mov    QWORD PTR [rbx],rsi
  00aac:    	mov    rax,QWORD PTR [rbp-0x40]
  00ab0:    	mov    QWORD PTR [rsp-0x38],rax
  00ab5: 00 	mov    rdi,0x1
  00abc:    	lea    r8,[rsp-0x40]
  00ac1:    	mov    rax,QWORD PTR [rbp-0x48]
  00ac5:    	mov    QWORD PTR [r8],rax
  00ac8:    	sub    r8,0x8
  00acc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ad5: 00 	movabs rax,0x0
  00adf:    	mov    QWORD PTR [rsp-0x28],rax
  00ae4: 00 	movabs r13,0x0
  00aee:    	call   0xfffe8848
  00af3:    	lea    rdi,[rbp-0x8]
  00af7:    	mov    QWORD PTR [rbx],rdi
  00afa:    	movq   xmm2,QWORD PTR [rsp]
  00aff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b05:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b0b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b11:    	add    rsp,0x20
  00b15:    	test   rax,rax
  00b18:    	je     0x354cb
:00060 
:00062 br =>:00088
  00b1e:    	jmp    0x358ed
:00063 %3 = %2.call z()                     [<INVALID>]
  00b23: 01 	sub    DWORD PTR [rip+0x13d2],0x1        # 0x1efc
  00b2a:    	je     0x3551b
  00b30:    	sub    rsp,0x20
  00b34:    	movq   QWORD PTR [rsp],xmm2
  00b39:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b3f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b45:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b4b:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b4f: b5 	movabs rax,0x55b5b009e670
  00b59:    	call   rax
  00b5b:    	mov    r15d,eax
  00b5e: 00 	cmp    r15d,DWORD PTR [rip+0x139f]        # 0x1f04
  00b65:    	jne    0x3553d
  00b6b:    	mov    eax,DWORD PTR [rip+0xfffffffffffeadf4]        # 0xfffeb965
  00b71:    	cmp    DWORD PTR [rip+0x1389],eax        # 0x1f00
  00b77:    	jne    0x3553d
  00b7d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b86:    	mov    QWORD PTR [rsp-0x38],rcx
  00b8b:    	mov    rax,QWORD PTR [rbx]
  00b8e:    	lea    rsi,[rsp-0x18]
  00b93:    	mov    QWORD PTR [rsi],rax
  00b96:    	mov    QWORD PTR [rbx],rsi
  00b99:    	mov    rax,QWORD PTR [rbp-0x38]
  00b9d:    	mov    QWORD PTR [rsp-0x38],rax
  00ba2: 00 	mov    rdi,0x0
  00ba9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bb2: 00 	movabs rax,0x0
  00bbc:    	mov    QWORD PTR [rsp-0x28],rax
  00bc1: 00 	movabs r13,0x0
  00bcb:    	call   0xfffe8848
  00bd0:    	lea    rdi,[rbp-0x8]
  00bd4:    	mov    QWORD PTR [rbx],rdi
  00bd7:    	movq   xmm2,QWORD PTR [rsp]
  00bdc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00be2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00be8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bee:    	add    rsp,0x20
  00bf2:    	test   rax,rax
  00bf5:    	je     0x355a9
  00bfb:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00bff: 00 	movq   xmm5,QWORD PTR [rip+0x1301]        # 0x1f08
  00c07: 99 	movabs rax,0xff1999999999999a
  00c11:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00c15:    	mov    rdi,QWORD PTR [rbp-0x40]
  00c19:    	mov    rsi,QWORD PTR [rbp-0x48]
  00c1d: 00 	test   rdi,0x1
  00c24:    	je     0x355b8
  00c2a: 00 	test   rsi,0x1
  00c31:    	je     0x355b8
  00c37:    	cmp    rdi,rsi
  00c3a:    	jge    0x357ba
:00069 %3 = %2.call z()                     [<INVALID>]
  00c40: 01 	sub    DWORD PTR [rip+0x12c9],0x1        # 0x1f10
  00c47:    	je     0x3561c
  00c4d:    	sub    rsp,0x20
  00c51:    	movq   QWORD PTR [rsp],xmm2
  00c56:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c5c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c62:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c68:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c6c: b5 	movabs rax,0x55b5b009e670
  00c76:    	call   rax
  00c78:    	mov    r15d,eax
  00c7b: 00 	cmp    r15d,DWORD PTR [rip+0x1296]        # 0x1f18
  00c82:    	jne    0x3563e
  00c88:    	mov    eax,DWORD PTR [rip+0xfffffffffffeacd7]        # 0xfffeb965
  00c8e:    	cmp    DWORD PTR [rip+0x1280],eax        # 0x1f14
  00c94:    	jne    0x3563e
  00c9a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ca3:    	mov    QWORD PTR [rsp-0x38],rcx
  00ca8:    	mov    rax,QWORD PTR [rbx]
  00cab:    	lea    rsi,[rsp-0x18]
  00cb0:    	mov    QWORD PTR [rsi],rax
  00cb3:    	mov    QWORD PTR [rbx],rsi
  00cb6:    	mov    rax,QWORD PTR [rbp-0x38]
  00cba:    	mov    QWORD PTR [rsp-0x38],rax
  00cbf: 00 	mov    rdi,0x0
  00cc6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ccf: 00 	movabs rax,0x0
  00cd9:    	mov    QWORD PTR [rsp-0x28],rax
  00cde: 00 	movabs r13,0x0
  00ce8:    	call   0xfffe8848
  00ced:    	lea    rdi,[rbp-0x8]
  00cf1:    	mov    QWORD PTR [rbx],rdi
  00cf4:    	movq   xmm2,QWORD PTR [rsp]
  00cf9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cff:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d05:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d0b:    	add    rsp,0x20
  00d0f:    	test   rax,rax
  00d12:    	je     0x356aa
  00d18:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00d1c: 00 	movq   xmm5,QWORD PTR [rip+0x1204]        # 0x1f28
  00d24: 99 	movabs rax,0xff1999999999999e
  00d2e:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d32:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d36:    	mov    rsi,QWORD PTR [rbp-0x48]
  00d3a: 00 	test   rdi,0x1
  00d41:    	je     0x356b9
  00d47: 00 	test   rsi,0x1
  00d4e:    	je     0x356b9
  00d54:    	cmp    rdi,rsi
  00d57:    	jle    0x357d3
:00075 %3 = 1: i32
  00d5d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00d65:    	sub    rsp,0x20
  00d69:    	movq   QWORD PTR [rsp],xmm2
  00d6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d74:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d80:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d84:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d88:    	mov    rdi,rbx
  00d8b:    	mov    rsi,r12
  00d8e: b5 	movabs r8,0x55b5b07d6738
  00d98: b5 	movabs rax,0x55b5b0091aa0
  00da2:    	call   rax
  00da4:    	movq   xmm2,QWORD PTR [rsp]
  00da9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00daf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dbb:    	add    rsp,0x20
  00dbf: b5 	movabs r13,0x55b5b07d6740
  00dc9:    	test   rax,rax
  00dcc:    	je     0xfffe887b
  00dd2:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00dd6: 00 	movq   xmm5,QWORD PTR [rip+0x115a]        # 0x1f38
  00dde: 00 	movabs rax,0xff80000000000002
  00de8:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00dec: 01 	sub    DWORD PTR [rip+0x114d],0x1        # 0x1f40
  00df3:    	je     0x3571d
  00df9:    	sub    rsp,0x20
  00dfd:    	movq   QWORD PTR [rsp],xmm2
  00e02:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e08:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e0e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e14:    	mov    rdi,QWORD PTR [rbp-0x40]
  00e18: b5 	movabs rax,0x55b5b009e670
  00e22:    	call   rax
  00e24:    	mov    r15d,eax
  00e27: 00 	cmp    r15d,DWORD PTR [rip+0x111a]        # 0x1f48
  00e2e:    	jne    0x3573f
  00e34:    	mov    eax,DWORD PTR [rip+0xfffffffffffeab2b]        # 0xfffeb965
  00e3a:    	cmp    DWORD PTR [rip+0x1104],eax        # 0x1f44
  00e40:    	jne    0x3573f
  00e46: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e4f:    	mov    QWORD PTR [rsp-0x38],rcx
  00e54:    	mov    rax,QWORD PTR [rbx]
  00e57:    	lea    rsi,[rsp-0x18]
  00e5c:    	mov    QWORD PTR [rsi],rax
  00e5f:    	mov    QWORD PTR [rbx],rsi
  00e62:    	mov    rax,QWORD PTR [rbp-0x40]
  00e66:    	mov    QWORD PTR [rsp-0x38],rax
  00e6b: 00 	mov    rdi,0x1
  00e72:    	lea    r8,[rsp-0x40]
  00e77:    	mov    rax,QWORD PTR [rbp-0x48]
  00e7b:    	mov    QWORD PTR [r8],rax
  00e7e:    	sub    r8,0x8
  00e82: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e8b: 00 	movabs rax,0x0
  00e95:    	mov    QWORD PTR [rsp-0x28],rax
  00e9a: 00 	movabs r13,0x0
  00ea4:    	call   0xfffe8848
  00ea9:    	lea    rdi,[rbp-0x8]
  00ead:    	mov    QWORD PTR [rbx],rdi
  00eb0:    	movq   xmm2,QWORD PTR [rsp]
  00eb5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ebb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ec1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ec7:    	add    rsp,0x20
  00ecb:    	test   rax,rax
  00ece:    	je     0x357ab
:00079 
:00081 br =>:00088
  00ed4:    	jmp    0x35906
:00082 %3 = 1: i32
  00ed9: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00ee1:    	sub    rsp,0x20
  00ee5:    	movq   QWORD PTR [rsp],xmm2
  00eea:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ef6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00efc:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f00:    	mov    rcx,QWORD PTR [rbp-0x40]
  00f04:    	mov    rdi,rbx
  00f07:    	mov    rsi,r12
  00f0a: b5 	movabs r8,0x55b5b07d67a8
  00f14: b5 	movabs rax,0x55b5b0091aa0
  00f1e:    	call   rax
  00f20:    	movq   xmm2,QWORD PTR [rsp]
  00f25:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f2b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f31:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f37:    	add    rsp,0x20
  00f3b: b5 	movabs r13,0x55b5b07d67b0
  00f45:    	test   rax,rax
  00f48:    	je     0xfffe887b
  00f4e:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f52: 00 	movq   xmm5,QWORD PTR [rip+0xffe]        # 0x1f58
  00f5a: 00 	movabs rax,0xff80000000000002
  00f64:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f68: 01 	sub    DWORD PTR [rip+0xff1],0x1        # 0x1f60
  00f6f:    	je     0x357fb
  00f75:    	sub    rsp,0x20
  00f79:    	movq   QWORD PTR [rsp],xmm2
  00f7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f84:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f90:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f94: b5 	movabs rax,0x55b5b009e670
  00f9e:    	call   rax
  00fa0:    	mov    r15d,eax
  00fa3: 00 	cmp    r15d,DWORD PTR [rip+0xfbe]        # 0x1f68
  00faa:    	jne    0x3581d
  00fb0:    	mov    eax,DWORD PTR [rip+0xfffffffffffea9af]        # 0xfffeb965
  00fb6:    	cmp    DWORD PTR [rip+0xfa8],eax        # 0x1f64
  00fbc:    	jne    0x3581d
  00fc2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fcb:    	mov    QWORD PTR [rsp-0x38],rcx
  00fd0:    	mov    rax,QWORD PTR [rbx]
  00fd3:    	lea    rsi,[rsp-0x18]
  00fd8:    	mov    QWORD PTR [rsi],rax
  00fdb:    	mov    QWORD PTR [rbx],rsi
  00fde:    	mov    rax,QWORD PTR [rbp-0x40]
  00fe2:    	mov    QWORD PTR [rsp-0x38],rax
  00fe7: 00 	mov    rdi,0x1
  00fee:    	lea    r8,[rsp-0x40]
  00ff3:    	mov    rax,QWORD PTR [rbp-0x48]
  00ff7:    	mov    QWORD PTR [r8],rax
  00ffa:    	sub    r8,0x8
  00ffe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01007: 00 	movabs rax,0x0
  01011:    	mov    QWORD PTR [rsp-0x28],rax
  01016: 00 	movabs r13,0x0
  01020:    	call   0xfffe8848
  01025:    	lea    rdi,[rbp-0x8]
  01029:    	mov    QWORD PTR [rbx],rdi
  0102c:    	movq   xmm2,QWORD PTR [rsp]
  01031:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01037:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0103d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01043:    	add    rsp,0x20
  01047:    	test   rax,rax
  0104a:    	je     0x35889
:00086 
:00088 %3 = 0: i32
  01050: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01058: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01060:    	sub    rsp,0x20
  01064:    	movq   QWORD PTR [rsp],xmm2
  01069:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01075:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0107f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01083:    	mov    rdi,rbx
  01086:    	mov    rsi,r12
  01089: b5 	movabs r8,0x55b5b07d6818
  01093: b5 	movabs rax,0x55b5b0091aa0
  0109d:    	call   rax
  0109f:    	movq   xmm2,QWORD PTR [rsp]
  010a4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010aa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010b0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b6:    	add    rsp,0x20
  010ba: b5 	movabs r13,0x55b5b07d6820
  010c4:    	test   rax,rax
  010c7:    	je     0xfffe887b
  010cd:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010d1: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010d9:    	sub    rsp,0x20
  010dd:    	movq   QWORD PTR [rsp],xmm3
  010e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  010ee:    	mov    rdx,QWORD PTR [rbp-0x30]
  010f2:    	mov    rcx,QWORD PTR [rbp-0x58]
  010f6:    	mov    rdi,rbx
  010f9:    	mov    rsi,r12
  010fc: b5 	movabs r8,0x55b5b07d6838
  01106: b5 	movabs rax,0x55b5b0091aa0
  01110:    	call   rax
  01112:    	movq   xmm3,QWORD PTR [rsp]
  01117:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0111d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01123:    	add    rsp,0x20
  01127: b5 	movabs r13,0x55b5b07d6840
  01131:    	test   rax,rax
  01134:    	je     0xfffe887b
  0113a:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0113e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01142: 00 	test   rdi,0x7
  01149:    	jne    0x35898
  0114f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01153:    	jne    0x35898
  01159: 26 	cmp    DWORD PTR [rip+0xfffffffffffea805],0x26        # 0xfffeb965
  01160:    	jne    0x35898
  01166:    	sub    rsp,0x10
  0116a:    	movq   QWORD PTR [rsp],xmm3
  0116f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01175: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0117e:    	mov    QWORD PTR [rsp-0x38],rcx
  01183:    	mov    rax,QWORD PTR [rbx]
  01186:    	lea    rsi,[rsp-0x18]
  0118b:    	mov    QWORD PTR [rsi],rax
  0118e:    	mov    QWORD PTR [rbx],rsi
  01191:    	mov    rax,QWORD PTR [rbp-0x50]
  01195:    	mov    QWORD PTR [rsp-0x38],rax
  0119a: 00 	mov    rdi,0x1
  011a1:    	lea    r8,[rsp-0x40]
  011a6:    	mov    rax,QWORD PTR [rbp-0x58]
  011aa:    	mov    QWORD PTR [r8],rax
  011ad:    	sub    r8,0x8
  011b1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011ba: 09 	movabs rax,0x900000041
  011c4:    	mov    QWORD PTR [rsp-0x28],rax
  011c9: b5 	movabs r13,0x55b5b07a1dd0
  011d3:    	call   0xffff58ed
  011d8:    	lea    rdi,[rbp-0x8]
  011dc:    	mov    QWORD PTR [rbx],rdi
  011df:    	movq   xmm3,QWORD PTR [rsp]
  011e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ea:    	add    rsp,0x10
  011ee: b5 	movabs r13,0x55b5b07d6860
  011f8:    	test   rax,rax
  011fb:    	je     0xfffe887b
  01201:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01205:    	sub    rsp,0x10
  01209:    	movq   QWORD PTR [rsp],xmm3
  0120e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01214:    	mov    rdx,QWORD PTR [rbp-0x30]
  01218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0121c:    	mov    r8,QWORD PTR [rbp-0x48]
  01220:    	mov    rdi,rbx
  01223:    	mov    rsi,r12
  01226: b5 	movabs rax,0x55b5b0091bd0
  01230:    	call   rax
  01232:    	movq   xmm3,QWORD PTR [rsp]
  01237:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123d:    	add    rsp,0x10
  01241: b5 	movabs r13,0x55b5b07d6880
  0124b:    	test   rax,rax
  0124e:    	je     0xfffe887b
:00097 %3 = 0: i32
  01254: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  0125c: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01264:    	sub    rsp,0x10
  01268:    	movq   QWORD PTR [rsp],xmm3
  0126d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01273:    	mov    rdx,QWORD PTR [rbp-0x30]
  01277:    	mov    rcx,QWORD PTR [rbp-0x50]
  0127b:    	mov    rdi,rbx
  0127e:    	mov    rsi,r12
  01281: b5 	movabs r8,0x55b5b07d68a8
  0128b: b5 	movabs rax,0x55b5b0091aa0
  01295:    	call   rax
  01297:    	movq   xmm3,QWORD PTR [rsp]
  0129c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a2:    	add    rsp,0x10
  012a6: b5 	movabs r13,0x55b5b07d68b0
  012b0:    	test   rax,rax
  012b3:    	je     0xfffe887b
  012b9:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  012bd:    	mov    rdi,QWORD PTR [rbp-0x50]
  012c1: 00 	test   rdi,0x7
  012c8:    	jne    0x358a7
  012ce:    	cmp    DWORD PTR [rdi+0x4],0x28
  012d2:    	jne    0x358a7
  012d8: 26 	cmp    DWORD PTR [rip+0xfffffffffffea686],0x26        # 0xfffeb965
  012df:    	jne    0x358a7
  012e5:    	sub    rsp,0x10
  012e9:    	movq   QWORD PTR [rsp],xmm3
  012ee:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012fd:    	mov    QWORD PTR [rsp-0x38],rcx
  01302:    	mov    rax,QWORD PTR [rbx]
  01305:    	lea    rsi,[rsp-0x18]
  0130a:    	mov    QWORD PTR [rsi],rax
  0130d:    	mov    QWORD PTR [rbx],rsi
  01310:    	mov    rax,QWORD PTR [rbp-0x50]
  01314:    	mov    QWORD PTR [rsp-0x38],rax
  01319: 00 	mov    rdi,0x0
  01320: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01329: 07 	movabs rax,0x1000700000044
  01333:    	mov    QWORD PTR [rsp-0x28],rax
  01338: b5 	movabs r13,0x55b5b07ceca0
  01342:    	call   0xfffec2aa
  01347:    	lea    rdi,[rbp-0x8]
  0134b:    	mov    QWORD PTR [rbx],rdi
  0134e:    	movq   xmm3,QWORD PTR [rsp]
  01353:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01359:    	add    rsp,0x10
  0135d: b5 	movabs r13,0x55b5b07d68d0
  01367:    	test   rax,rax
  0136a:    	je     0xfffe887b
  01370:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01374:    	sub    rsp,0x10
  01378:    	movq   QWORD PTR [rsp],xmm3
  0137d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01383:    	mov    rdx,QWORD PTR [rbp-0x30]
  01387:    	mov    rcx,QWORD PTR [rbp-0x40]
  0138b:    	mov    r8,QWORD PTR [rbp-0x48]
  0138f:    	mov    rdi,rbx
  01392:    	mov    rsi,r12
  01395: b5 	movabs rax,0x55b5b0091bd0
  0139f:    	call   rax
  013a1:    	movq   xmm3,QWORD PTR [rsp]
  013a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ac:    	add    rsp,0x10
  013b0: b5 	movabs r13,0x55b5b07d68f0
  013ba:    	test   rax,rax
  013bd:    	je     0xfffe887b
:00104 %3 = 1: i32
  013c3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  013cb: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  013d3:    	sub    rsp,0x10
  013d7:    	movq   QWORD PTR [rsp],xmm3
  013dc:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e2:    	mov    rdx,QWORD PTR [rbp-0x30]
  013e6:    	mov    rcx,QWORD PTR [rbp-0x50]
  013ea:    	mov    rdi,rbx
  013ed:    	mov    rsi,r12
  013f0: b5 	movabs r8,0x55b5b07d6918
  013fa: b5 	movabs rax,0x55b5b0091aa0
  01404:    	call   rax
  01406:    	movq   xmm3,QWORD PTR [rsp]
  0140b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01411:    	add    rsp,0x10
  01415: b5 	movabs r13,0x55b5b07d6920
  0141f:    	test   rax,rax
  01422:    	je     0xfffe887b
  01428:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  0142c: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01434:    	sub    rsp,0x10
  01438:    	movq   QWORD PTR [rsp],xmm3
  0143d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01443:    	mov    rdx,QWORD PTR [rbp-0x30]
  01447:    	mov    rcx,QWORD PTR [rbp-0x58]
  0144b:    	mov    rdi,rbx
  0144e:    	mov    rsi,r12
  01451: b5 	movabs r8,0x55b5b07d6938
  0145b: b5 	movabs rax,0x55b5b0091aa0
  01465:    	call   rax
  01467:    	movq   xmm3,QWORD PTR [rsp]
  0146c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01472:    	add    rsp,0x10
  01476: b5 	movabs r13,0x55b5b07d6940
  01480:    	test   rax,rax
  01483:    	je     0xfffe887b
  01489:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  0148d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01491: 00 	test   rdi,0x7
  01498:    	jne    0x358b6
  0149e:    	cmp    DWORD PTR [rdi+0x4],0x28
  014a2:    	jne    0x358b6
  014a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffea4b6],0x26        # 0xfffeb965
  014af:    	jne    0x358b6
  014b5:    	sub    rsp,0x10
  014b9:    	movq   QWORD PTR [rsp],xmm3
  014be:    	movq   QWORD PTR [rsp+0x8],xmm4
  014c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014cd:    	mov    QWORD PTR [rsp-0x38],rcx
  014d2:    	mov    rax,QWORD PTR [rbx]
  014d5:    	lea    rsi,[rsp-0x18]
  014da:    	mov    QWORD PTR [rsi],rax
  014dd:    	mov    QWORD PTR [rbx],rsi
  014e0:    	mov    rax,QWORD PTR [rbp-0x50]
  014e4:    	mov    QWORD PTR [rsp-0x38],rax
  014e9: 00 	mov    rdi,0x1
  014f0:    	lea    r8,[rsp-0x40]
  014f5:    	mov    rax,QWORD PTR [rbp-0x58]
  014f9:    	mov    QWORD PTR [r8],rax
  014fc:    	sub    r8,0x8
  01500: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01509: 09 	movabs rax,0x900000041
  01513:    	mov    QWORD PTR [rsp-0x28],rax
  01518: b5 	movabs r13,0x55b5b07a1dd0
  01522:    	call   0xffff58ed
  01527:    	lea    rdi,[rbp-0x8]
  0152b:    	mov    QWORD PTR [rbx],rdi
  0152e:    	movq   xmm3,QWORD PTR [rsp]
  01533:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01539:    	add    rsp,0x10
  0153d: b5 	movabs r13,0x55b5b07d6960
  01547:    	test   rax,rax
  0154a:    	je     0xfffe887b
  01550:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01554:    	sub    rsp,0x10
  01558:    	movq   QWORD PTR [rsp],xmm3
  0155d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01563:    	mov    rdx,QWORD PTR [rbp-0x30]
  01567:    	mov    rcx,QWORD PTR [rbp-0x40]
  0156b:    	mov    r8,QWORD PTR [rbp-0x48]
  0156f:    	mov    rdi,rbx
  01572:    	mov    rsi,r12
  01575: b5 	movabs rax,0x55b5b0091bd0
  0157f:    	call   rax
  01581:    	movq   xmm3,QWORD PTR [rsp]
  01586:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0158c:    	add    rsp,0x10
  01590: b5 	movabs r13,0x55b5b07d6980
  0159a:    	test   rax,rax
  0159d:    	je     0xfffe887b
:00113 %3 = 1: i32
  015a3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  015ab: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  015b3:    	sub    rsp,0x10
  015b7:    	movq   QWORD PTR [rsp],xmm3
  015bc:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c2:    	mov    rdx,QWORD PTR [rbp-0x30]
  015c6:    	mov    rcx,QWORD PTR [rbp-0x50]
  015ca:    	mov    rdi,rbx
  015cd:    	mov    rsi,r12
  015d0: b5 	movabs r8,0x55b5b07d69a8
  015da: b5 	movabs rax,0x55b5b0091aa0
  015e4:    	call   rax
  015e6:    	movq   xmm3,QWORD PTR [rsp]
  015eb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015f1:    	add    rsp,0x10
  015f5: b5 	movabs r13,0x55b5b07d69b0
  015ff:    	test   rax,rax
  01602:    	je     0xfffe887b
  01608:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  0160c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01610: 00 	test   rdi,0x7
  01617:    	jne    0x358c5
  0161d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01621:    	jne    0x358c5
  01627: 26 	cmp    DWORD PTR [rip+0xfffffffffffea337],0x26        # 0xfffeb965
  0162e:    	jne    0x358c5
  01634:    	sub    rsp,0x10
  01638:    	movq   QWORD PTR [rsp],xmm3
  0163d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01643: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0164c:    	mov    QWORD PTR [rsp-0x38],rcx
  01651:    	mov    rax,QWORD PTR [rbx]
  01654:    	lea    rsi,[rsp-0x18]
  01659:    	mov    QWORD PTR [rsi],rax
  0165c:    	mov    QWORD PTR [rbx],rsi
  0165f:    	mov    rax,QWORD PTR [rbp-0x50]
  01663:    	mov    QWORD PTR [rsp-0x38],rax
  01668: 00 	mov    rdi,0x0
  0166f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01678: 07 	movabs rax,0x1000700000044
  01682:    	mov    QWORD PTR [rsp-0x28],rax
  01687: b5 	movabs r13,0x55b5b07ceca0
  01691:    	call   0xfffec2aa
  01696:    	lea    rdi,[rbp-0x8]
  0169a:    	mov    QWORD PTR [rbx],rdi
  0169d:    	movq   xmm3,QWORD PTR [rsp]
  016a2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016a8:    	add    rsp,0x10
  016ac: b5 	movabs r13,0x55b5b07d69d0
  016b6:    	test   rax,rax
  016b9:    	je     0xfffe887b
  016bf:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  016c3:    	sub    rsp,0x10
  016c7:    	movq   QWORD PTR [rsp],xmm3
  016cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  016d2:    	mov    rdx,QWORD PTR [rbp-0x30]
  016d6:    	mov    rcx,QWORD PTR [rbp-0x40]
  016da:    	mov    r8,QWORD PTR [rbp-0x48]
  016de:    	mov    rdi,rbx
  016e1:    	mov    rsi,r12
  016e4: b5 	movabs rax,0x55b5b0091bd0
  016ee:    	call   rax
  016f0:    	movq   xmm3,QWORD PTR [rsp]
  016f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016fb:    	add    rsp,0x10
  016ff: b5 	movabs r13,0x55b5b07d69f0
  01709:    	test   rax,rax
  0170c:    	je     0xfffe887b
:00120 %3 = %4
  01712:    	mov    rax,QWORD PTR [rbp-0x48]
  01716:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  0171a:    	mov    rax,QWORD PTR [rbp-0x40]
  0171e:    	leave  
  0171f:    	ret    
:00088 %3 = 0: i32
  01720: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01728: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01730:    	sub    rsp,0x20
  01734:    	movq   QWORD PTR [rsp],xmm2
  01739:    	movq   QWORD PTR [rsp+0x8],xmm3
  0173f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01745:    	movq   QWORD PTR [rsp+0x18],xmm5
  0174b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0174f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01753:    	mov    rdi,rbx
  01756:    	mov    rsi,r12
  01759: b5 	movabs r8,0x55b5b07d6818
  01763: b5 	movabs rax,0x55b5b0091aa0
  0176d:    	call   rax
  0176f:    	movq   xmm2,QWORD PTR [rsp]
  01774:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0177a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01780:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01786:    	add    rsp,0x20
  0178a: b5 	movabs r13,0x55b5b07d6820
  01794:    	test   rax,rax
  01797:    	je     0xfffe887b
  0179d:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  017a1: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  017a9:    	sub    rsp,0x20
  017ad:    	movq   QWORD PTR [rsp],xmm3
  017b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  017b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  017be:    	mov    rdx,QWORD PTR [rbp-0x30]
  017c2:    	mov    rcx,QWORD PTR [rbp-0x58]
  017c6:    	mov    rdi,rbx
  017c9:    	mov    rsi,r12
  017cc: b5 	movabs r8,0x55b5b07d6838
  017d6: b5 	movabs rax,0x55b5b0091aa0
  017e0:    	call   rax
  017e2:    	movq   xmm3,QWORD PTR [rsp]
  017e7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ed:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017f3:    	add    rsp,0x20
  017f7: b5 	movabs r13,0x55b5b07d6840
  01801:    	test   rax,rax
  01804:    	je     0xfffe887b
  0180a:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0180e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01812: 00 	test   rdi,0x7
  01819:    	jne    0x3591f
  0181f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01823:    	jne    0x3591f
  01829: 26 	cmp    DWORD PTR [rip+0xfffffffffffea135],0x26        # 0xfffeb965
  01830:    	jne    0x3591f
  01836:    	sub    rsp,0x10
  0183a:    	movq   QWORD PTR [rsp],xmm3
  0183f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01845: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0184e:    	mov    QWORD PTR [rsp-0x38],rcx
  01853:    	mov    rax,QWORD PTR [rbx]
  01856:    	lea    rsi,[rsp-0x18]
  0185b:    	mov    QWORD PTR [rsi],rax
  0185e:    	mov    QWORD PTR [rbx],rsi
  01861:    	mov    rax,QWORD PTR [rbp-0x50]
  01865:    	mov    QWORD PTR [rsp-0x38],rax
  0186a: 00 	mov    rdi,0x1
  01871:    	lea    r8,[rsp-0x40]
  01876:    	mov    rax,QWORD PTR [rbp-0x58]
  0187a:    	mov    QWORD PTR [r8],rax
  0187d:    	sub    r8,0x8
  01881: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0188a: 09 	movabs rax,0x900000041
  01894:    	mov    QWORD PTR [rsp-0x28],rax
  01899: b5 	movabs r13,0x55b5b07a1dd0
  018a3:    	call   0xffff58ed
  018a8:    	lea    rdi,[rbp-0x8]
  018ac:    	mov    QWORD PTR [rbx],rdi
  018af:    	movq   xmm3,QWORD PTR [rsp]
  018b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018ba:    	add    rsp,0x10
  018be: b5 	movabs r13,0x55b5b07d6860
  018c8:    	test   rax,rax
  018cb:    	je     0xfffe887b
  018d1:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  018d5:    	sub    rsp,0x10
  018d9:    	movq   QWORD PTR [rsp],xmm3
  018de:    	movq   QWORD PTR [rsp+0x8],xmm4
  018e4:    	mov    rdx,QWORD PTR [rbp-0x30]
  018e8:    	mov    rcx,QWORD PTR [rbp-0x40]
  018ec:    	mov    r8,QWORD PTR [rbp-0x48]
  018f0:    	mov    rdi,rbx
  018f3:    	mov    rsi,r12
  018f6: b5 	movabs rax,0x55b5b0091bd0
  01900:    	call   rax
  01902:    	movq   xmm3,QWORD PTR [rsp]
  01907:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0190d:    	add    rsp,0x10
  01911: b5 	movabs r13,0x55b5b07d6880
  0191b:    	test   rax,rax
  0191e:    	je     0xfffe887b
:00097 %3 = 0: i32
  01924: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  0192c: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01934:    	sub    rsp,0x10
  01938:    	movq   QWORD PTR [rsp],xmm3
  0193d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01943:    	mov    rdx,QWORD PTR [rbp-0x30]
  01947:    	mov    rcx,QWORD PTR [rbp-0x50]
  0194b:    	mov    rdi,rbx
  0194e:    	mov    rsi,r12
  01951: b5 	movabs r8,0x55b5b07d68a8
  0195b: b5 	movabs rax,0x55b5b0091aa0
  01965:    	call   rax
  01967:    	movq   xmm3,QWORD PTR [rsp]
  0196c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01972:    	add    rsp,0x10
  01976: b5 	movabs r13,0x55b5b07d68b0
  01980:    	test   rax,rax
  01983:    	je     0xfffe887b
  01989:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0198d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01991: 00 	test   rdi,0x7
  01998:    	jne    0x3592e
  0199e:    	cmp    DWORD PTR [rdi+0x4],0x28
  019a2:    	jne    0x3592e
  019a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9fb6],0x26        # 0xfffeb965
  019af:    	jne    0x3592e
  019b5:    	sub    rsp,0x10
  019b9:    	movq   QWORD PTR [rsp],xmm3
  019be:    	movq   QWORD PTR [rsp+0x8],xmm4
  019c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019cd:    	mov    QWORD PTR [rsp-0x38],rcx
  019d2:    	mov    rax,QWORD PTR [rbx]
  019d5:    	lea    rsi,[rsp-0x18]
  019da:    	mov    QWORD PTR [rsi],rax
  019dd:    	mov    QWORD PTR [rbx],rsi
  019e0:    	mov    rax,QWORD PTR [rbp-0x50]
  019e4:    	mov    QWORD PTR [rsp-0x38],rax
  019e9: 00 	mov    rdi,0x0
  019f0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019f9: 07 	movabs rax,0x1000700000044
  01a03:    	mov    QWORD PTR [rsp-0x28],rax
  01a08: b5 	movabs r13,0x55b5b07ceca0
  01a12:    	call   0xfffec2aa
  01a17:    	lea    rdi,[rbp-0x8]
  01a1b:    	mov    QWORD PTR [rbx],rdi
  01a1e:    	movq   xmm3,QWORD PTR [rsp]
  01a23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a29:    	add    rsp,0x10
  01a2d: b5 	movabs r13,0x55b5b07d68d0
  01a37:    	test   rax,rax
  01a3a:    	je     0xfffe887b
  01a40:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a44:    	sub    rsp,0x10
  01a48:    	movq   QWORD PTR [rsp],xmm3
  01a4d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a53:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a57:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a5b:    	mov    r8,QWORD PTR [rbp-0x48]
  01a5f:    	mov    rdi,rbx
  01a62:    	mov    rsi,r12
  01a65: b5 	movabs rax,0x55b5b0091bd0
  01a6f:    	call   rax
  01a71:    	movq   xmm3,QWORD PTR [rsp]
  01a76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a7c:    	add    rsp,0x10
  01a80: b5 	movabs r13,0x55b5b07d68f0
  01a8a:    	test   rax,rax
  01a8d:    	je     0xfffe887b
:00104 %3 = 1: i32
  01a93: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a9b: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01aa3:    	sub    rsp,0x10
  01aa7:    	movq   QWORD PTR [rsp],xmm3
  01aac:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ab2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ab6:    	mov    rcx,QWORD PTR [rbp-0x50]
  01aba:    	mov    rdi,rbx
  01abd:    	mov    rsi,r12
  01ac0: b5 	movabs r8,0x55b5b07d6918
  01aca: b5 	movabs rax,0x55b5b0091aa0
  01ad4:    	call   rax
  01ad6:    	movq   xmm3,QWORD PTR [rsp]
  01adb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae1:    	add    rsp,0x10
  01ae5: b5 	movabs r13,0x55b5b07d6920
  01aef:    	test   rax,rax
  01af2:    	je     0xfffe887b
  01af8:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01afc: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01b04:    	sub    rsp,0x10
  01b08:    	movq   QWORD PTR [rsp],xmm3
  01b0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b13:    	mov    rdx,QWORD PTR [rbp-0x30]
  01b17:    	mov    rcx,QWORD PTR [rbp-0x58]
  01b1b:    	mov    rdi,rbx
  01b1e:    	mov    rsi,r12
  01b21: b5 	movabs r8,0x55b5b07d6938
  01b2b: b5 	movabs rax,0x55b5b0091aa0
  01b35:    	call   rax
  01b37:    	movq   xmm3,QWORD PTR [rsp]
  01b3c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b42:    	add    rsp,0x10
  01b46: b5 	movabs r13,0x55b5b07d6940
  01b50:    	test   rax,rax
  01b53:    	je     0xfffe887b
  01b59:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b5d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b61: 00 	test   rdi,0x7
  01b68:    	jne    0x3593d
  01b6e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b72:    	jne    0x3593d
  01b78: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9de6],0x26        # 0xfffeb965
  01b7f:    	jne    0x3593d
  01b85:    	sub    rsp,0x10
  01b89:    	movq   QWORD PTR [rsp],xmm3
  01b8e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b9d:    	mov    QWORD PTR [rsp-0x38],rcx
  01ba2:    	mov    rax,QWORD PTR [rbx]
  01ba5:    	lea    rsi,[rsp-0x18]
  01baa:    	mov    QWORD PTR [rsi],rax
  01bad:    	mov    QWORD PTR [rbx],rsi
  01bb0:    	mov    rax,QWORD PTR [rbp-0x50]
  01bb4:    	mov    QWORD PTR [rsp-0x38],rax
  01bb9: 00 	mov    rdi,0x1
  01bc0:    	lea    r8,[rsp-0x40]
  01bc5:    	mov    rax,QWORD PTR [rbp-0x58]
  01bc9:    	mov    QWORD PTR [r8],rax
  01bcc:    	sub    r8,0x8
  01bd0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bd9: 09 	movabs rax,0x900000041
  01be3:    	mov    QWORD PTR [rsp-0x28],rax
  01be8: b5 	movabs r13,0x55b5b07a1dd0
  01bf2:    	call   0xffff58ed
  01bf7:    	lea    rdi,[rbp-0x8]
  01bfb:    	mov    QWORD PTR [rbx],rdi
  01bfe:    	movq   xmm3,QWORD PTR [rsp]
  01c03:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c09:    	add    rsp,0x10
  01c0d: b5 	movabs r13,0x55b5b07d6960
  01c17:    	test   rax,rax
  01c1a:    	je     0xfffe887b
  01c20:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01c24:    	sub    rsp,0x10
  01c28:    	movq   QWORD PTR [rsp],xmm3
  01c2d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c33:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c37:    	mov    rcx,QWORD PTR [rbp-0x40]
  01c3b:    	mov    r8,QWORD PTR [rbp-0x48]
  01c3f:    	mov    rdi,rbx
  01c42:    	mov    rsi,r12
  01c45: b5 	movabs rax,0x55b5b0091bd0
  01c4f:    	call   rax
  01c51:    	movq   xmm3,QWORD PTR [rsp]
  01c56:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c5c:    	add    rsp,0x10
  01c60: b5 	movabs r13,0x55b5b07d6980
  01c6a:    	test   rax,rax
  01c6d:    	je     0xfffe887b
:00113 %3 = 1: i32
  01c73: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c7b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c83:    	sub    rsp,0x10
  01c87:    	movq   QWORD PTR [rsp],xmm3
  01c8c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c92:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c96:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c9a:    	mov    rdi,rbx
  01c9d:    	mov    rsi,r12
  01ca0: b5 	movabs r8,0x55b5b07d69a8
  01caa: b5 	movabs rax,0x55b5b0091aa0
  01cb4:    	call   rax
  01cb6:    	movq   xmm3,QWORD PTR [rsp]
  01cbb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01cc1:    	add    rsp,0x10
  01cc5: b5 	movabs r13,0x55b5b07d69b0
  01ccf:    	test   rax,rax
  01cd2:    	je     0xfffe887b
  01cd8:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01cdc:    	mov    rdi,QWORD PTR [rbp-0x50]
  01ce0: 00 	test   rdi,0x7
  01ce7:    	jne    0x3594c
  01ced:    	cmp    DWORD PTR [rdi+0x4],0x28
  01cf1:    	jne    0x3594c
  01cf7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9c67],0x26        # 0xfffeb965
  01cfe:    	jne    0x3594c
  01d04:    	sub    rsp,0x10
  01d08:    	movq   QWORD PTR [rsp],xmm3
  01d0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d13: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d1c:    	mov    QWORD PTR [rsp-0x38],rcx
  01d21:    	mov    rax,QWORD PTR [rbx]
  01d24:    	lea    rsi,[rsp-0x18]
  01d29:    	mov    QWORD PTR [rsi],rax
  01d2c:    	mov    QWORD PTR [rbx],rsi
  01d2f:    	mov    rax,QWORD PTR [rbp-0x50]
  01d33:    	mov    QWORD PTR [rsp-0x38],rax
  01d38: 00 	mov    rdi,0x0
  01d3f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d48: 07 	movabs rax,0x1000700000044
  01d52:    	mov    QWORD PTR [rsp-0x28],rax
  01d57: b5 	movabs r13,0x55b5b07ceca0
  01d61:    	call   0xfffec2aa
  01d66:    	lea    rdi,[rbp-0x8]
  01d6a:    	mov    QWORD PTR [rbx],rdi
  01d6d:    	movq   xmm3,QWORD PTR [rsp]
  01d72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d78:    	add    rsp,0x10
  01d7c: b5 	movabs r13,0x55b5b07d69d0
  01d86:    	test   rax,rax
  01d89:    	je     0xfffe887b
  01d8f:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d93:    	sub    rsp,0x10
  01d97:    	movq   QWORD PTR [rsp],xmm3
  01d9c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01da2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01da6:    	mov    rcx,QWORD PTR [rbp-0x40]
  01daa:    	mov    r8,QWORD PTR [rbp-0x48]
  01dae:    	mov    rdi,rbx
  01db1:    	mov    rsi,r12
  01db4: b5 	movabs rax,0x55b5b0091bd0
  01dbe:    	call   rax
  01dc0:    	movq   xmm3,QWORD PTR [rsp]
  01dc5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01dcb:    	add    rsp,0x10
  01dcf: b5 	movabs r13,0x55b5b07d69f0
  01dd9:    	test   rax,rax
  01ddc:    	je     0xfffe887b
:00120 %3 = %4
  01de2:    	mov    rax,QWORD PTR [rbp-0x48]
  01de6:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01dea:    	mov    rax,QWORD PTR [rbp-0x40]
  01dee:    	leave  
  01def:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55b5b07c4d60
<== finished compile. elapsed:144.2µs
offset:Pos(104228) code: 6755 bytes  data: 353 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x339ef
  00022:    	jmp    0x339ef
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x339fe
  00097:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0009b:    	jne    0x339fe
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a5:    	mov    rax,QWORD PTR [rdi+0x10]
  000a9:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  000ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  000b1:    	mov    rax,QWORD PTR [rdi+0x18]
  000b5:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  000bd: 00 	test   rdi,0x7
  000c4:    	jne    0x33a0d
  000ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  000ce:    	jne    0x33a0d
  000d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe991e],0x26        # 0xfffe99f9
  000db:    	jne    0x33a0d
  000e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000ea:    	mov    QWORD PTR [rsp-0x38],rcx
  000ef:    	mov    rax,QWORD PTR [rbx]
  000f2:    	lea    rsi,[rsp-0x18]
  000f7:    	mov    QWORD PTR [rsi],rax
  000fa:    	mov    QWORD PTR [rbx],rsi
  000fd:    	mov    rax,QWORD PTR [rbp-0x60]
  00101:    	mov    QWORD PTR [rsp-0x38],rax
  00106: 00 	mov    rdi,0x1
  0010d:    	lea    r8,[rsp-0x40]
  00112:    	mov    rax,QWORD PTR [rbp-0x68]
  00116:    	mov    QWORD PTR [r8],rax
  00119:    	sub    r8,0x8
  0011d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00126: 05 	movabs rax,0x1000500000042
  00130:    	mov    QWORD PTR [rsp-0x28],rax
  00135: b5 	movabs r13,0x55b5b07ddec0
  0013f:    	call   0xfffea76a
  00144:    	lea    rdi,[rbp-0x8]
  00148:    	mov    QWORD PTR [rbx],rdi
  0014b: b5 	movabs r13,0x55b5b07c4db0
  00155:    	test   rax,rax
  00158:    	je     0xfffe690f
  0015e:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00162:    	mov    rdi,QWORD PTR [rbp-0x40]
  00166: 00 	test   rdi,0x1
  0016d:    	jne    0x33a1c
  00173: 00 	test   rdi,0x2
  0017a:    	je     0x1b6
  00180:    	xorps  xmm2,xmm2
  00183: 00 	movabs rax,0x8000000000000002
  0018d:    	cmp    rdi,rax
  00190:    	je     0x1c8
  00196:    	mov    rax,rdi
  00199:    	sar    rax,0x3f
  0019d:    	add    rax,0x2
  001a1:    	and    rdi,0xfffffffffffffffc
  001a5:    	or     rdi,rax
  001a8:    	rol    rdi,0x3d
  001ac:    	movq   xmm2,rdi
  001b1:    	jmp    0x1c8
  001b6:    	call   0xfffe6968
  001bb:    	test   rax,rax
  001be:    	je     0x33a1c
  001c4:    	movq   xmm2,xmm0
  001c8: 00 	xorps  xmm2,XMMWORD PTR [rip+0x189d]        # 0x1a6c
:00007 %7 = %1.call dir()                   [Ray]
  001cf:    	mov    rdi,QWORD PTR [rbp-0x30]
  001d3: 00 	test   rdi,0x7
  001da:    	jne    0x33a2b
  001e0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001e4:    	jne    0x33a2b
  001ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9808],0x26        # 0xfffe99f9
  001f1:    	jne    0x33a2b
  001f7:    	mov    esi,DWORD PTR [rip+0x187b]        # 0x1a78
  001fd:    	cmp    esi,0xffffffff
  00200:    	je     0x33a47
  00206:    	cmp    WORD PTR [rdi+0x2],0x3
  0020b:    	jne    0x224
  00211:    	cmp    esi,0x6
  00214:    	jge    0x224
  0021a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0021f:    	jmp    0x242
  00224:    	sub    rsp,0x10
  00228:    	movq   QWORD PTR [rsp],xmm2
  0022d: b5 	movabs rax,0x55b5b00a3ef0
  00237:    	call   rax
  00239:    	movq   xmm2,QWORD PTR [rsp]
  0023e:    	add    rsp,0x10
  00242:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00246:    	mov    rdi,QWORD PTR [rbp-0x28]
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x33a82
  00263:    	cmp    DWORD PTR [rdi+0x4],0x28
  00267:    	jne    0x33a82
  0026d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9785],0x26        # 0xfffe99f9
  00274:    	jne    0x33a82
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028c:    	mov    QWORD PTR [rsp-0x38],rcx
  00291:    	mov    rax,QWORD PTR [rbx]
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rsi],rax
  0029c:    	mov    QWORD PTR [rbx],rsi
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	lea    r8,[rsp-0x40]
  002b4:    	mov    rax,QWORD PTR [rbp-0x68]
  002b8:    	mov    QWORD PTR [r8],rax
  002bb:    	sub    r8,0x8
  002bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c8: 05 	movabs rax,0x1000500000042
  002d2:    	mov    QWORD PTR [rsp-0x28],rax
  002d7: b5 	movabs r13,0x55b5b07ddec0
  002e1:    	call   0xfffea76a
  002e6:    	lea    rdi,[rbp-0x8]
  002ea:    	mov    QWORD PTR [rbx],rdi
  002ed:    	movq   xmm2,QWORD PTR [rsp]
  002f2:    	add    rsp,0x10
  002f6: b5 	movabs r13,0x55b5b07c4e30
  00300:    	test   rax,rax
  00303:    	je     0xfffe690f
  00309:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  0030d:    	mov    rax,QWORD PTR [rbp-0x48]
  00311:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  00315: 00 	movq   xmm3,QWORD PTR [rip+0x175f]        # 0x1a7c
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0032b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0032f: 00 	test   rdi,0x1
  00336:    	jne    0x33a9e
  0033c: 00 	test   rdi,0x2
  00343:    	je     0x37f
  00349:    	xorps  xmm4,xmm4
  0034c: 00 	movabs rax,0x8000000000000002
  00356:    	cmp    rdi,rax
  00359:    	je     0x391
  0035f:    	mov    rax,rdi
  00362:    	sar    rax,0x3f
  00366:    	add    rax,0x2
  0036a:    	and    rdi,0xfffffffffffffffc
  0036e:    	or     rdi,rax
  00371:    	rol    rdi,0x3d
  00375:    	movq   xmm4,rdi
  0037a:    	jmp    0x391
  0037f:    	call   0xfffe6968
  00384:    	test   rax,rax
  00387:    	je     0x33a9e
  0038d:    	movq   xmm4,xmm0
  00391:    	ucomisd xmm4,xmm3
  00395:    	jae    0x33b05
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  0039b: 01 	sub    DWORD PTR [rip+0x16e2],0x1        # 0x1a84
  003a2:    	je     0x33ae3
  003a8:    	movq   xmm0,xmm4
  003ac:    	call   0xfffe6a8c
  003b1:    	mov    QWORD PTR [rbp-0x50],rax
  003b5:    	sub    rsp,0x20
  003b9:    	movq   QWORD PTR [rsp],xmm2
  003be:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c4:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ca:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ce:    	mov    rdx,rdi
  003d1:    	mov    rdi,rbx
  003d4:    	mov    rsi,r12
  003d7: b5 	movabs rax,0x55b5b00e59e0
  003e1:    	call   rax
  003e3:    	movq   xmm2,QWORD PTR [rsp]
  003e8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003ee:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003f4:    	add    rsp,0x20
  003f8: b5 	movabs r13,0x55b5b07c4ea0
  00402:    	test   rax,rax
  00405:    	je     0xfffe690f
  0040b:    	mov    QWORD PTR [rbp-0x50],rax
:00020 br =>:00021
  0040f:    	jmp    0x33b2b
:00021 %7 = literal[1e-17]
  00414: 00 	movq   xmm3,QWORD PTR [rip+0x1670]        # 0x1a8c
  0041c: aa 	movabs rax,0xe33877aa3236a4ba
  00426:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0042a:    	mov    rdi,QWORD PTR [rbp-0x50]
  0042e: 00 	test   rdi,0x1
  00435:    	jne    0x33b51
  0043b: 00 	test   rdi,0x2
  00442:    	je     0x47e
  00448:    	xorps  xmm5,xmm5
  0044b: 00 	movabs rax,0x8000000000000002
  00455:    	cmp    rdi,rax
  00458:    	je     0x490
  0045e:    	mov    rax,rdi
  00461:    	sar    rax,0x3f
  00465:    	add    rax,0x2
  00469:    	and    rdi,0xfffffffffffffffc
  0046d:    	or     rdi,rax
  00470:    	rol    rdi,0x3d
  00474:    	movq   xmm5,rdi
  00479:    	jmp    0x490
  0047e:    	call   0xfffe6968
  00483:    	test   rax,rax
  00486:    	je     0x33b51
  0048c:    	movq   xmm5,xmm0
  00490:    	ucomisd xmm5,xmm3
  00494:    	jae    0x4a8
:00024 %7 = nil
  0049a: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  004a2:    	mov    rax,QWORD PTR [rbp-0x60]
  004a6:    	leave  
  004a7:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  004a8:    	mov    rdi,QWORD PTR [rbp-0x30]
  004ac: 00 	test   rdi,0x7
  004b3:    	jne    0x33b6d
  004b9:    	cmp    DWORD PTR [rdi+0x4],0x2e
  004bd:    	jne    0x33b6d
  004c3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe952f],0x26        # 0xfffe99f9
  004ca:    	jne    0x33b6d
  004d0:    	mov    esi,DWORD PTR [rip+0x15c2]        # 0x1a98
  004d6:    	cmp    esi,0xffffffff
  004d9:    	je     0x33b89
  004df:    	cmp    WORD PTR [rdi+0x2],0x3
  004e4:    	jne    0x4fd
  004ea:    	cmp    esi,0x6
  004ed:    	jge    0x4fd
  004f3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004f8:    	jmp    0x53f
  004fd:    	sub    rsp,0x20
  00501:    	movq   QWORD PTR [rsp],xmm2
  00506:    	movq   QWORD PTR [rsp+0x8],xmm3
  0050c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00512:    	movq   QWORD PTR [rsp+0x18],xmm5
  00518: b5 	movabs rax,0x55b5b00a3ef0
  00522:    	call   rax
  00524:    	movq   xmm2,QWORD PTR [rsp]
  00529:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0052f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00535:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0053b:    	add    rsp,0x20
  0053f:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  00543:    	mov    rdi,QWORD PTR [rbp-0x28]
  00547:    	mov    rax,QWORD PTR [rdi+0x18]
  0054b:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  0054f:    	mov    rdi,QWORD PTR [rbp-0x68]
  00553: 00 	test   rdi,0x7
  0055a:    	jne    0x33be8
  00560:    	cmp    DWORD PTR [rdi+0x4],0x28
  00564:    	jne    0x33be8
  0056a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9488],0x26        # 0xfffe99f9
  00571:    	jne    0x33be8
  00577:    	sub    rsp,0x20
  0057b:    	movq   QWORD PTR [rsp],xmm2
  00580:    	movq   QWORD PTR [rsp+0x8],xmm4
  00586:    	movq   QWORD PTR [rsp+0x10],xmm5
  0058c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00595:    	mov    QWORD PTR [rsp-0x38],rcx
  0059a:    	mov    rax,QWORD PTR [rbx]
  0059d:    	lea    rsi,[rsp-0x18]
  005a2:    	mov    QWORD PTR [rsi],rax
  005a5:    	mov    QWORD PTR [rbx],rsi
  005a8:    	mov    rax,QWORD PTR [rbp-0x68]
  005ac:    	mov    QWORD PTR [rsp-0x38],rax
  005b1: 00 	mov    rdi,0x1
  005b8:    	lea    r8,[rsp-0x40]
  005bd:    	mov    rax,QWORD PTR [rbp-0x70]
  005c1:    	mov    QWORD PTR [r8],rax
  005c4:    	sub    r8,0x8
  005c8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005d1: 05 	movabs rax,0x1000500000042
  005db:    	mov    QWORD PTR [rsp-0x28],rax
  005e0: b5 	movabs r13,0x55b5b07ddec0
  005ea:    	call   0xfffea76a
  005ef:    	lea    rdi,[rbp-0x8]
  005f3:    	mov    QWORD PTR [rbx],rdi
  005f6:    	movq   xmm2,QWORD PTR [rsp]
  005fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00601:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00607:    	add    rsp,0x20
  0060b: b5 	movabs r13,0x55b5b07c4f70
  00615:    	test   rax,rax
  00618:    	je     0xfffe690f
  0061e:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00622:    	mov    rdi,QWORD PTR [rbp-0x60]
  00626: 00 	test   rdi,0x1
  0062d:    	jne    0x33c04
  00633: 00 	test   rdi,0x2
  0063a:    	je     0x676
  00640:    	xorps  xmm3,xmm3
  00643: 00 	movabs rax,0x8000000000000002
  0064d:    	cmp    rdi,rax
  00650:    	je     0x688
  00656:    	mov    rax,rdi
  00659:    	sar    rax,0x3f
  0065d:    	add    rax,0x2
  00661:    	and    rdi,0xfffffffffffffffc
  00665:    	or     rdi,rax
  00668:    	rol    rdi,0x3d
  0066c:    	movq   xmm3,rdi
  00671:    	jmp    0x688
  00676:    	call   0xfffe6968
  0067b:    	test   rax,rax
  0067e:    	je     0x33c04
  00684:    	movq   xmm3,xmm0
  00688:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0068c: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1409]        # 0x1a9c
:00036 %6 = %7 / %4                         [Float][Float]
  00693:    	movq   xmm6,xmm3
  00697:    	movq   rax,xmm4
  0069c:    	test   rax,rax
  0069f:    	je     0xfffe6934
  006a5:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  006a9: 00 	movq   xmm3,QWORD PTR [rip+0x13fb]        # 0x1aac
  006b1: 00 	movabs rax,0x8000000000000002
  006bb:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  006bf:    	ucomisd xmm6,xmm3
  006c3:    	jbe    0x34b7d
:00040 %7 = %2.call t()                     [<INVALID>]
  006c9: 01 	sub    DWORD PTR [rip+0x13e4],0x1        # 0x1ab4
  006d0:    	je     0x33c49
  006d6:    	sub    rsp,0x20
  006da:    	movq   QWORD PTR [rsp],xmm2
  006df:    	movq   QWORD PTR [rsp+0x8],xmm4
  006e5:    	movq   QWORD PTR [rsp+0x10],xmm5
  006eb:    	movq   QWORD PTR [rsp+0x18],xmm6
  006f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  006f5: b5 	movabs rax,0x55b5b009e670
  006ff:    	call   rax
  00701:    	mov    r15d,eax
  00704: 00 	cmp    r15d,DWORD PTR [rip+0x13b1]        # 0x1abc
  0070b:    	jne    0x33c6b
  00711:    	mov    eax,DWORD PTR [rip+0xfffffffffffe92e2]        # 0xfffe99f9
  00717:    	cmp    DWORD PTR [rip+0x139b],eax        # 0x1ab8
  0071d:    	jne    0x33c6b
  00723: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0072c:    	mov    QWORD PTR [rsp-0x38],rcx
  00731:    	mov    rax,QWORD PTR [rbx]
  00734:    	lea    rsi,[rsp-0x18]
  00739:    	mov    QWORD PTR [rsi],rax
  0073c:    	mov    QWORD PTR [rbx],rsi
  0073f:    	mov    rax,QWORD PTR [rbp-0x38]
  00743:    	mov    QWORD PTR [rsp-0x38],rax
  00748: 00 	mov    rdi,0x0
  0074f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00758: 00 	movabs rax,0x0
  00762:    	mov    QWORD PTR [rsp-0x28],rax
  00767: 00 	movabs r13,0x0
  00771:    	call   0xfffe68dc
  00776:    	lea    rdi,[rbp-0x8]
  0077a:    	mov    QWORD PTR [rbx],rdi
  0077d:    	movq   xmm2,QWORD PTR [rsp]
  00782:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00788:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0078e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00794:    	add    rsp,0x20
  00798:    	test   rax,rax
  0079b:    	je     0x33cd7
  007a1:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  007a5:    	movq   xmm0,xmm6
  007a9:    	call   0xfffe6a8c
  007ae:    	mov    QWORD PTR [rbp-0x58],rax
  007b2:    	mov    rdi,QWORD PTR [rbp-0x58]
  007b6:    	mov    rsi,QWORD PTR [rbp-0x60]
  007ba: 00 	test   rdi,0x1
  007c1:    	je     0x33ce6
  007c7: 00 	test   rsi,0x1
  007ce:    	je     0x33ce6
  007d4:    	cmp    rdi,rsi
  007d7:    	jge    0x34bb0
:00045 %7 = literal[true]
  007dd: 00 	mov    rax,0x1c
  007e4:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007e8: 01 	sub    DWORD PTR [rip+0x12d1],0x1        # 0x1ac0
  007ef:    	je     0x33d57
  007f5:    	sub    rsp,0x20
  007f9:    	movq   QWORD PTR [rsp],xmm2
  007fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  00804:    	movq   QWORD PTR [rsp+0x10],xmm5
  0080a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00810:    	mov    rdi,QWORD PTR [rbp-0x38]
  00814: b5 	movabs rax,0x55b5b009e670
  0081e:    	call   rax
  00820:    	mov    r15d,eax
  00823: 00 	cmp    r15d,DWORD PTR [rip+0x129e]        # 0x1ac8
  0082a:    	jne    0x33d79
  00830:    	mov    eax,DWORD PTR [rip+0xfffffffffffe91c3]        # 0xfffe99f9
  00836:    	cmp    DWORD PTR [rip+0x1288],eax        # 0x1ac4
  0083c:    	jne    0x33d79
  00842: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0084b:    	mov    QWORD PTR [rsp-0x38],rcx
  00850:    	mov    rax,QWORD PTR [rbx]
  00853:    	lea    rsi,[rsp-0x18]
  00858:    	mov    QWORD PTR [rsi],rax
  0085b:    	mov    QWORD PTR [rbx],rsi
  0085e:    	mov    rax,QWORD PTR [rbp-0x38]
  00862:    	mov    QWORD PTR [rsp-0x38],rax
  00867: 00 	mov    rdi,0x1
  0086e:    	lea    r8,[rsp-0x40]
  00873:    	mov    rax,QWORD PTR [rbp-0x60]
  00877:    	mov    QWORD PTR [r8],rax
  0087a:    	sub    r8,0x8
  0087e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00887: 00 	movabs rax,0x0
  00891:    	mov    QWORD PTR [rsp-0x28],rax
  00896: 00 	movabs r13,0x0
  008a0:    	call   0xfffe68dc
  008a5:    	lea    rdi,[rbp-0x8]
  008a9:    	mov    QWORD PTR [rbx],rdi
  008ac:    	movq   xmm2,QWORD PTR [rsp]
  008b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008b7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008bd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008c3:    	add    rsp,0x20
  008c7:    	test   rax,rax
  008ca:    	je     0x33de5
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  008d0: 01 	sub    DWORD PTR [rip+0x11f5],0x1        # 0x1acc
  008d7:    	je     0x33e10
  008dd:    	sub    rsp,0x20
  008e1:    	movq   QWORD PTR [rsp],xmm2
  008e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  008ec:    	movq   QWORD PTR [rsp+0x10],xmm5
  008f2:    	movq   QWORD PTR [rsp+0x18],xmm6
  008f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  008fc: b5 	movabs rax,0x55b5b009e670
  00906:    	call   rax
  00908:    	mov    r15d,eax
  0090b: 00 	cmp    r15d,DWORD PTR [rip+0x11c2]        # 0x1ad4
  00912:    	jne    0x33e32
  00918:    	mov    eax,DWORD PTR [rip+0xfffffffffffe90db]        # 0xfffe99f9
  0091e:    	cmp    DWORD PTR [rip+0x11ac],eax        # 0x1ad0
  00924:    	jne    0x33e32
  0092a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00933:    	mov    QWORD PTR [rsp-0x38],rcx
  00938:    	mov    rax,QWORD PTR [rbx]
  0093b:    	lea    rsi,[rsp-0x18]
  00940:    	mov    QWORD PTR [rsi],rax
  00943:    	mov    QWORD PTR [rbx],rsi
  00946:    	mov    rax,QWORD PTR [rbp-0x38]
  0094a:    	mov    QWORD PTR [rsp-0x38],rax
  0094f: 00 	mov    rdi,0x1
  00956:    	lea    r8,[rsp-0x40]
  0095b:    	mov    rax,QWORD PTR [rbp-0x58]
  0095f:    	mov    QWORD PTR [r8],rax
  00962:    	sub    r8,0x8
  00966: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0096f: 00 	movabs rax,0x0
  00979:    	mov    QWORD PTR [rsp-0x28],rax
  0097e: 00 	movabs r13,0x0
  00988:    	call   0xfffe68dc
  0098d:    	lea    rdi,[rbp-0x8]
  00991:    	mov    QWORD PTR [rbx],rdi
  00994:    	movq   xmm2,QWORD PTR [rsp]
  00999:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0099f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009a5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009ab:    	add    rsp,0x20
  009af:    	test   rax,rax
  009b2:    	je     0x33e9e
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  009b8:    	mov    rdi,QWORD PTR [rbp-0x28]
  009bc:    	sub    rsp,0x20
  009c0:    	movq   QWORD PTR [rsp],xmm2
  009c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009cb:    	movq   QWORD PTR [rsp+0x10],xmm5
  009d1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009d7: 00 	mov    rsi,0x97
  009de:    	mov    rdx,r12
  009e1: b5 	movabs rax,0x55b5b0091cc0
  009eb:    	call   rax
  009ed:    	movq   xmm2,QWORD PTR [rsp]
  009f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009f8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009fe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a04:    	add    rsp,0x20
  00a08:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00a0c: 01 	sub    DWORD PTR [rip+0x10c5],0x1        # 0x1ad8
  00a13:    	je     0x33ec9
  00a19:    	sub    rsp,0x20
  00a1d:    	movq   QWORD PTR [rsp],xmm2
  00a22:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a28:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a2e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a34:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a38: b5 	movabs rax,0x55b5b009e670
  00a42:    	call   rax
  00a44:    	mov    r15d,eax
  00a47: 00 	cmp    r15d,DWORD PTR [rip+0x1092]        # 0x1ae0
  00a4e:    	jne    0x33eeb
  00a54:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8f9f]        # 0xfffe99f9
  00a5a:    	cmp    DWORD PTR [rip+0x107c],eax        # 0x1adc
  00a60:    	jne    0x33eeb
  00a66: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a6f:    	mov    QWORD PTR [rsp-0x38],rcx
  00a74:    	mov    rax,QWORD PTR [rbx]
  00a77:    	lea    rsi,[rsp-0x18]
  00a7c:    	mov    QWORD PTR [rsi],rax
  00a7f:    	mov    QWORD PTR [rbx],rsi
  00a82:    	mov    rax,QWORD PTR [rbp-0x38]
  00a86:    	mov    QWORD PTR [rsp-0x38],rax
  00a8b: 00 	mov    rdi,0x1
  00a92:    	lea    r8,[rsp-0x40]
  00a97:    	mov    rax,QWORD PTR [rbp-0x60]
  00a9b:    	mov    QWORD PTR [r8],rax
  00a9e:    	sub    r8,0x8
  00aa2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aab: 00 	movabs rax,0x0
  00ab5:    	mov    QWORD PTR [rsp-0x28],rax
  00aba: 00 	movabs r13,0x0
  00ac4:    	call   0xfffe68dc
  00ac9:    	lea    rdi,[rbp-0x8]
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0:    	movq   xmm2,QWORD PTR [rsp]
  00ad5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00adb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ae1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae7:    	add    rsp,0x20
  00aeb:    	test   rax,rax
  00aee:    	je     0x33f57
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00af4: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8f11]        # 0xfffe9a0c
  00afb: 00 	cmp    rax,QWORD PTR [rip+0xffa]        # 0x1afc
  00b02:    	jne    0x33f66
  00b08: 00 	mov    rax,QWORD PTR [rip+0xfdd]        # 0x1aec
  00b0f:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00b13: 01 	sub    DWORD PTR [rip+0xfea],0x1        # 0x1b04
  00b1a:    	je     0x33ffe
  00b20:    	sub    rsp,0x20
  00b24:    	movq   QWORD PTR [rsp],xmm2
  00b29:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b2f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b35:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b3b:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b3f: b5 	movabs rax,0x55b5b009e670
  00b49:    	call   rax
  00b4b:    	mov    r15d,eax
  00b4e: 00 	cmp    r15d,DWORD PTR [rip+0xfb7]        # 0x1b0c
  00b55:    	jne    0x34020
  00b5b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8e98]        # 0xfffe99f9
  00b61:    	cmp    DWORD PTR [rip+0xfa1],eax        # 0x1b08
  00b67:    	jne    0x34020
  00b6d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b76:    	mov    QWORD PTR [rsp-0x38],rcx
  00b7b:    	mov    rax,QWORD PTR [rbx]
  00b7e:    	lea    rsi,[rsp-0x18]
  00b83:    	mov    QWORD PTR [rsi],rax
  00b86:    	mov    QWORD PTR [rbx],rsi
  00b89:    	mov    rax,QWORD PTR [rbp-0x30]
  00b8d:    	mov    QWORD PTR [rsp-0x38],rax
  00b92: 00 	mov    rdi,0x0
  00b99: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ba2: 00 	movabs rax,0x0
  00bac:    	mov    QWORD PTR [rsp-0x28],rax
  00bb1: 00 	movabs r13,0x0
  00bbb:    	call   0xfffe68dc
  00bc0:    	lea    rdi,[rbp-0x8]
  00bc4:    	mov    QWORD PTR [rbx],rdi
  00bc7:    	movq   xmm2,QWORD PTR [rsp]
  00bcc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bd2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bd8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bde:    	add    rsp,0x20
  00be2:    	test   rax,rax
  00be5:    	je     0x3408c
  00beb:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bef: 01 	sub    DWORD PTR [rip+0xf1a],0x1        # 0x1b10
  00bf6:    	je     0x340b7
  00bfc:    	sub    rsp,0x20
  00c00:    	movq   QWORD PTR [rsp],xmm2
  00c05:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c0b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c11:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c17:    	mov    rdi,QWORD PTR [rbp-0x78]
  00c1b: b5 	movabs rax,0x55b5b009e670
  00c25:    	call   rax
  00c27:    	mov    r15d,eax
  00c2a: 00 	cmp    r15d,DWORD PTR [rip+0xee7]        # 0x1b18
  00c31:    	jne    0x340d9
  00c37:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8dbc]        # 0xfffe99f9
  00c3d:    	cmp    DWORD PTR [rip+0xed1],eax        # 0x1b14
  00c43:    	jne    0x340d9
  00c49: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c52:    	mov    QWORD PTR [rsp-0x38],rcx
  00c57:    	mov    rax,QWORD PTR [rbx]
  00c5a:    	lea    rsi,[rsp-0x18]
  00c5f:    	mov    QWORD PTR [rsi],rax
  00c62:    	mov    QWORD PTR [rbx],rsi
  00c65:    	mov    rax,QWORD PTR [rbp-0x78]
  00c69:    	mov    QWORD PTR [rsp-0x38],rax
  00c6e: 00 	mov    rdi,0x0
  00c75: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c7e: 00 	movabs rax,0x0
  00c88:    	mov    QWORD PTR [rsp-0x28],rax
  00c8d: 00 	movabs r13,0x0
  00c97:    	call   0xfffe68dc
  00c9c:    	lea    rdi,[rbp-0x8]
  00ca0:    	mov    QWORD PTR [rbx],rdi
  00ca3:    	movq   xmm2,QWORD PTR [rsp]
  00ca8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cae:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00cb4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cba:    	add    rsp,0x20
  00cbe:    	test   rax,rax
  00cc1:    	je     0x34145
  00cc7:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00ccb: 01 	sub    DWORD PTR [rip+0xe4a],0x1        # 0x1b1c
  00cd2:    	je     0x34170
  00cd8:    	sub    rsp,0x20
  00cdc:    	movq   QWORD PTR [rsp],xmm2
  00ce1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ced:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf3:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cf7: b5 	movabs rax,0x55b5b009e670
  00d01:    	call   rax
  00d03:    	mov    r15d,eax
  00d06: 00 	cmp    r15d,DWORD PTR [rip+0xe17]        # 0x1b24
  00d0d:    	jne    0x34192
  00d13:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8ce0]        # 0xfffe99f9
  00d19:    	cmp    DWORD PTR [rip+0xe01],eax        # 0x1b20
  00d1f:    	jne    0x34192
  00d25: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d2e:    	mov    QWORD PTR [rsp-0x38],rcx
  00d33:    	mov    rax,QWORD PTR [rbx]
  00d36:    	lea    rsi,[rsp-0x18]
  00d3b:    	mov    QWORD PTR [rsi],rax
  00d3e:    	mov    QWORD PTR [rbx],rsi
  00d41:    	mov    rax,QWORD PTR [rbp-0x30]
  00d45:    	mov    QWORD PTR [rsp-0x38],rax
  00d4a: 00 	mov    rdi,0x0
  00d51: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d5a: 00 	movabs rax,0x0
  00d64:    	mov    QWORD PTR [rsp-0x28],rax
  00d69: 00 	movabs r13,0x0
  00d73:    	call   0xfffe68dc
  00d78:    	lea    rdi,[rbp-0x8]
  00d7c:    	mov    QWORD PTR [rbx],rdi
  00d7f:    	movq   xmm2,QWORD PTR [rsp]
  00d84:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d8a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d90:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d96:    	add    rsp,0x20
  00d9a:    	test   rax,rax
  00d9d:    	je     0x341fe
  00da3:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00da7: 01 	sub    DWORD PTR [rip+0xd7a],0x1        # 0x1b28
  00dae:    	je     0x34229
  00db4:    	sub    rsp,0x20
  00db8:    	movq   QWORD PTR [rsp],xmm2
  00dbd:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dc3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dc9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dcf:    	mov    rdi,QWORD PTR [rbp-0x80]
  00dd3: b5 	movabs rax,0x55b5b009e670
  00ddd:    	call   rax
  00ddf:    	mov    r15d,eax
  00de2: 00 	cmp    r15d,DWORD PTR [rip+0xd47]        # 0x1b30
  00de9:    	jne    0x3424b
  00def:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8c04]        # 0xfffe99f9
  00df5:    	cmp    DWORD PTR [rip+0xd31],eax        # 0x1b2c
  00dfb:    	jne    0x3424b
  00e01: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e0a:    	mov    QWORD PTR [rsp-0x38],rcx
  00e0f:    	mov    rax,QWORD PTR [rbx]
  00e12:    	lea    rsi,[rsp-0x18]
  00e17:    	mov    QWORD PTR [rsi],rax
  00e1a:    	mov    QWORD PTR [rbx],rsi
  00e1d:    	mov    rax,QWORD PTR [rbp-0x80]
  00e21:    	mov    QWORD PTR [rsp-0x38],rax
  00e26: 00 	mov    rdi,0x0
  00e2d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e36: 00 	movabs rax,0x0
  00e40:    	mov    QWORD PTR [rsp-0x28],rax
  00e45: 00 	movabs r13,0x0
  00e4f:    	call   0xfffe68dc
  00e54:    	lea    rdi,[rbp-0x8]
  00e58:    	mov    QWORD PTR [rbx],rdi
  00e5b:    	movq   xmm2,QWORD PTR [rsp]
  00e60:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e72:    	add    rsp,0x20
  00e76:    	test   rax,rax
  00e79:    	je     0x342b7
  00e7f:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e83: 01 	sub    DWORD PTR [rip+0xcaa],0x1        # 0x1b34
  00e8a:    	je     0x342e2
  00e90:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e94:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eb3:    	mov    rdx,rdi
  00eb6:    	mov    rcx,rsi
  00eb9:    	mov    rdi,rbx
  00ebc:    	mov    rsi,r12
  00ebf: b5 	movabs rax,0x55b5b00e8b30
  00ec9:    	call   rax
  00ecb:    	movq   xmm2,QWORD PTR [rsp]
  00ed0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00edc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ee2:    	add    rsp,0x20
  00ee6: b5 	movabs r13,0x55b5b07c51c0
  00ef0:    	test   rax,rax
  00ef3:    	je     0xfffe690f
  00ef9:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00efd: 01 	sub    DWORD PTR [rip+0xc34],0x1        # 0x1b38
  00f04:    	je     0x34320
  00f0a:    	mov    rdi,QWORD PTR [rbp-0x70]
  00f0e:    	mov    rsi,QWORD PTR [rbp-0x78]
  00f12:    	sub    rsp,0x20
  00f16:    	movq   QWORD PTR [rsp],xmm2
  00f1b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f21:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f27:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f2d:    	mov    rdx,rdi
  00f30:    	mov    rcx,rsi
  00f33:    	mov    rdi,rbx
  00f36:    	mov    rsi,r12
  00f39: b5 	movabs rax,0x55b5b00e6cb0
  00f43:    	call   rax
  00f45:    	movq   xmm2,QWORD PTR [rsp]
  00f4a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f50:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f56:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f5c:    	add    rsp,0x20
  00f60: b5 	movabs r13,0x55b5b07c51d0
  00f6a:    	test   rax,rax
  00f6d:    	je     0xfffe690f
  00f73:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f77: 01 	sub    DWORD PTR [rip+0xbbe],0x1        # 0x1b3c
  00f7e:    	je     0x3435e
  00f84:    	sub    rsp,0x20
  00f88:    	movq   QWORD PTR [rsp],xmm2
  00f8d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f93:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f99:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f9f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00fa3: b5 	movabs rax,0x55b5b009e670
  00fad:    	call   rax
  00faf:    	mov    r15d,eax
  00fb2: 00 	cmp    r15d,DWORD PTR [rip+0xb8b]        # 0x1b44
  00fb9:    	jne    0x34380
  00fbf:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8a34]        # 0xfffe99f9
  00fc5:    	cmp    DWORD PTR [rip+0xb75],eax        # 0x1b40
  00fcb:    	jne    0x34380
  00fd1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fda:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdf:    	mov    rax,QWORD PTR [rbx]
  00fe2:    	lea    rsi,[rsp-0x18]
  00fe7:    	mov    QWORD PTR [rsi],rax
  00fea:    	mov    QWORD PTR [rbx],rsi
  00fed:    	mov    rax,QWORD PTR [rbp-0x30]
  00ff1:    	mov    QWORD PTR [rsp-0x38],rax
  00ff6: 00 	mov    rdi,0x0
  00ffd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01006: 00 	movabs rax,0x0
  01010:    	mov    QWORD PTR [rsp-0x28],rax
  01015: 00 	movabs r13,0x0
  0101f:    	call   0xfffe68dc
  01024:    	lea    rdi,[rbp-0x8]
  01028:    	mov    QWORD PTR [rbx],rdi
  0102b:    	movq   xmm2,QWORD PTR [rsp]
  01030:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01036:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0103c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01042:    	add    rsp,0x20
  01046:    	test   rax,rax
  01049:    	je     0x343ec
  0104f:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  01053: 01 	sub    DWORD PTR [rip+0xaee],0x1        # 0x1b48
  0105a:    	je     0x34417
  01060:    	sub    rsp,0x20
  01064:    	movq   QWORD PTR [rsp],xmm2
  01069:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01075:    	movq   QWORD PTR [rsp+0x18],xmm6
  0107b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0107f: b5 	movabs rax,0x55b5b009e670
  01089:    	call   rax
  0108b:    	mov    r15d,eax
  0108e: 00 	cmp    r15d,DWORD PTR [rip+0xabb]        # 0x1b50
  01095:    	jne    0x34439
  0109b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8958]        # 0xfffe99f9
  010a1:    	cmp    DWORD PTR [rip+0xaa5],eax        # 0x1b4c
  010a7:    	jne    0x34439
  010ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010b6:    	mov    QWORD PTR [rsp-0x38],rcx
  010bb:    	mov    rax,QWORD PTR [rbx]
  010be:    	lea    rsi,[rsp-0x18]
  010c3:    	mov    QWORD PTR [rsi],rax
  010c6:    	mov    QWORD PTR [rbx],rsi
  010c9:    	mov    rax,QWORD PTR [rbp-0x80]
  010cd:    	mov    QWORD PTR [rsp-0x38],rax
  010d2: 00 	mov    rdi,0x0
  010d9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010e2: 00 	movabs rax,0x0
  010ec:    	mov    QWORD PTR [rsp-0x28],rax
  010f1: 00 	movabs r13,0x0
  010fb:    	call   0xfffe68dc
  01100:    	lea    rdi,[rbp-0x8]
  01104:    	mov    QWORD PTR [rbx],rdi
  01107:    	movq   xmm2,QWORD PTR [rsp]
  0110c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01112:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01118:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0111e:    	add    rsp,0x20
  01122:    	test   rax,rax
  01125:    	je     0x344a5
  0112b:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  0112f: 01 	sub    DWORD PTR [rip+0xa1e],0x1        # 0x1b54
  01136:    	je     0x344d0
  0113c:    	sub    rsp,0x20
  01140:    	movq   QWORD PTR [rsp],xmm2
  01145:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01151:    	movq   QWORD PTR [rsp+0x18],xmm6
  01157:    	mov    rdi,QWORD PTR [rbp-0x30]
  0115b: b5 	movabs rax,0x55b5b009e670
  01165:    	call   rax
  01167:    	mov    r15d,eax
  0116a: 00 	cmp    r15d,DWORD PTR [rip+0x9eb]        # 0x1b5c
  01171:    	jne    0x344f2
  01177:    	mov    eax,DWORD PTR [rip+0xfffffffffffe887c]        # 0xfffe99f9
  0117d:    	cmp    DWORD PTR [rip+0x9d5],eax        # 0x1b58
  01183:    	jne    0x344f2
  01189: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01192:    	mov    QWORD PTR [rsp-0x38],rcx
  01197:    	mov    rax,QWORD PTR [rbx]
  0119a:    	lea    rsi,[rsp-0x18]
  0119f:    	mov    QWORD PTR [rsi],rax
  011a2:    	mov    QWORD PTR [rbx],rsi
  011a5:    	mov    rax,QWORD PTR [rbp-0x30]
  011a9:    	mov    QWORD PTR [rsp-0x38],rax
  011ae: 00 	mov    rdi,0x0
  011b5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011be: 00 	movabs rax,0x0
  011c8:    	mov    QWORD PTR [rsp-0x28],rax
  011cd: 00 	movabs r13,0x0
  011d7:    	call   0xfffe68dc
  011dc:    	lea    rdi,[rbp-0x8]
  011e0:    	mov    QWORD PTR [rbx],rdi
  011e3:    	movq   xmm2,QWORD PTR [rsp]
  011e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ee:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011f4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011fa:    	add    rsp,0x20
  011fe:    	test   rax,rax
  01201:    	je     0x3455e
  01207: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  0120e: 01 	sub    DWORD PTR [rip+0x94b],0x1        # 0x1b60
  01215:    	je     0x34589
  0121b:    	sub    rsp,0x20
  0121f:    	movq   QWORD PTR [rsp],xmm2
  01224:    	movq   QWORD PTR [rsp+0x8],xmm4
  0122a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01230:    	movq   QWORD PTR [rsp+0x18],xmm6
  01236: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0123d: b5 	movabs rax,0x55b5b009e670
  01247:    	call   rax
  01249:    	mov    r15d,eax
  0124c: 00 	cmp    r15d,DWORD PTR [rip+0x915]        # 0x1b68
  01253:    	jne    0x345ab
  01259:    	mov    eax,DWORD PTR [rip+0xfffffffffffe879a]        # 0xfffe99f9
  0125f:    	cmp    DWORD PTR [rip+0x8ff],eax        # 0x1b64
  01265:    	jne    0x345ab
  0126b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01274:    	mov    QWORD PTR [rsp-0x38],rcx
  01279:    	mov    rax,QWORD PTR [rbx]
  0127c:    	lea    rsi,[rsp-0x18]
  01281:    	mov    QWORD PTR [rsi],rax
  01284:    	mov    QWORD PTR [rbx],rsi
  01287: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0128e:    	mov    QWORD PTR [rsp-0x38],rax
  01293: 00 	mov    rdi,0x0
  0129a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012a3: 00 	movabs rax,0x0
  012ad:    	mov    QWORD PTR [rsp-0x28],rax
  012b2: 00 	movabs r13,0x0
  012bc:    	call   0xfffe68dc
  012c1:    	lea    rdi,[rbp-0x8]
  012c5:    	mov    QWORD PTR [rbx],rdi
  012c8:    	movq   xmm2,QWORD PTR [rsp]
  012cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012df:    	add    rsp,0x20
  012e3:    	test   rax,rax
  012e6:    	je     0x3461a
  012ec:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  012f0: 01 	sub    DWORD PTR [rip+0x875],0x1        # 0x1b6c
  012f7:    	je     0x34645
  012fd:    	mov    rdi,QWORD PTR [rbp-0x58]
  01301:    	mov    rsi,QWORD PTR [rbp-0x80]
  01305:    	sub    rsp,0x20
  01309:    	movq   QWORD PTR [rsp],xmm2
  0130e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01314:    	movq   QWORD PTR [rsp+0x10],xmm5
  0131a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01320:    	mov    rdx,rdi
  01323:    	mov    rcx,rsi
  01326:    	mov    rdi,rbx
  01329:    	mov    rsi,r12
  0132c: b5 	movabs rax,0x55b5b00e8b30
  01336:    	call   rax
  01338:    	movq   xmm2,QWORD PTR [rsp]
  0133d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01343:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01349:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0134f:    	add    rsp,0x20
  01353: b5 	movabs r13,0x55b5b07c52a0
  0135d:    	test   rax,rax
  01360:    	je     0xfffe690f
  01366:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  0136a: 01 	sub    DWORD PTR [rip+0x7ff],0x1        # 0x1b70
  01371:    	je     0x34683
  01377:    	mov    rdi,QWORD PTR [rbp-0x78]
  0137b:    	mov    rsi,QWORD PTR [rbp-0x80]
  0137f:    	sub    rsp,0x20
  01383:    	movq   QWORD PTR [rsp],xmm2
  01388:    	movq   QWORD PTR [rsp+0x8],xmm4
  0138e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01394:    	movq   QWORD PTR [rsp+0x18],xmm6
  0139a:    	mov    rdx,rdi
  0139d:    	mov    rcx,rsi
  013a0:    	mov    rdi,rbx
  013a3:    	mov    rsi,r12
  013a6: b5 	movabs rax,0x55b5b00e6cb0
  013b0:    	call   rax
  013b2:    	movq   xmm2,QWORD PTR [rsp]
  013b7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013bd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013c3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013c9:    	add    rsp,0x20
  013cd: b5 	movabs r13,0x55b5b07c52b0
  013d7:    	test   rax,rax
  013da:    	je     0xfffe690f
  013e0:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013e4: 01 	sub    DWORD PTR [rip+0x789],0x1        # 0x1b74
  013eb:    	je     0x346c1
  013f1:    	sub    rsp,0x20
  013f5:    	movq   QWORD PTR [rsp],xmm2
  013fa:    	movq   QWORD PTR [rsp+0x8],xmm4
  01400:    	movq   QWORD PTR [rsp+0x10],xmm5
  01406:    	movq   QWORD PTR [rsp+0x18],xmm6
  0140c:    	mov    rdi,QWORD PTR [rbp-0x30]
  01410: b5 	movabs rax,0x55b5b009e670
  0141a:    	call   rax
  0141c:    	mov    r15d,eax
  0141f: 00 	cmp    r15d,DWORD PTR [rip+0x756]        # 0x1b7c
  01426:    	jne    0x346e3
  0142c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe85c7]        # 0xfffe99f9
  01432:    	cmp    DWORD PTR [rip+0x740],eax        # 0x1b78
  01438:    	jne    0x346e3
  0143e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01447:    	mov    QWORD PTR [rsp-0x38],rcx
  0144c:    	mov    rax,QWORD PTR [rbx]
  0144f:    	lea    rsi,[rsp-0x18]
  01454:    	mov    QWORD PTR [rsi],rax
  01457:    	mov    QWORD PTR [rbx],rsi
  0145a:    	mov    rax,QWORD PTR [rbp-0x30]
  0145e:    	mov    QWORD PTR [rsp-0x38],rax
  01463: 00 	mov    rdi,0x0
  0146a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01473: 00 	movabs rax,0x0
  0147d:    	mov    QWORD PTR [rsp-0x28],rax
  01482: 00 	movabs r13,0x0
  0148c:    	call   0xfffe68dc
  01491:    	lea    rdi,[rbp-0x8]
  01495:    	mov    QWORD PTR [rbx],rdi
  01498:    	movq   xmm2,QWORD PTR [rsp]
  0149d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014a3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014a9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014af:    	add    rsp,0x20
  014b3:    	test   rax,rax
  014b6:    	je     0x3474f
  014bc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  014c3: 01 	sub    DWORD PTR [rip+0x6b6],0x1        # 0x1b80
  014ca:    	je     0x3477a
  014d0:    	sub    rsp,0x20
  014d4:    	movq   QWORD PTR [rsp],xmm2
  014d9:    	movq   QWORD PTR [rsp+0x8],xmm4
  014df:    	movq   QWORD PTR [rsp+0x10],xmm5
  014e5:    	movq   QWORD PTR [rsp+0x18],xmm6
  014eb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  014f2: b5 	movabs rax,0x55b5b009e670
  014fc:    	call   rax
  014fe:    	mov    r15d,eax
  01501: 00 	cmp    r15d,DWORD PTR [rip+0x680]        # 0x1b88
  01508:    	jne    0x3479c
  0150e:    	mov    eax,DWORD PTR [rip+0xfffffffffffe84e5]        # 0xfffe99f9
  01514:    	cmp    DWORD PTR [rip+0x66a],eax        # 0x1b84
  0151a:    	jne    0x3479c
  01520: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01529:    	mov    QWORD PTR [rsp-0x38],rcx
  0152e:    	mov    rax,QWORD PTR [rbx]
  01531:    	lea    rsi,[rsp-0x18]
  01536:    	mov    QWORD PTR [rsi],rax
  01539:    	mov    QWORD PTR [rbx],rsi
  0153c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01543:    	mov    QWORD PTR [rsp-0x38],rax
  01548: 00 	mov    rdi,0x0
  0154f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01558: 00 	movabs rax,0x0
  01562:    	mov    QWORD PTR [rsp-0x28],rax
  01567: 00 	movabs r13,0x0
  01571:    	call   0xfffe68dc
  01576:    	lea    rdi,[rbp-0x8]
  0157a:    	mov    QWORD PTR [rbx],rdi
  0157d:    	movq   xmm2,QWORD PTR [rsp]
  01582:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01588:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0158e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01594:    	add    rsp,0x20
  01598:    	test   rax,rax
  0159b:    	je     0x3480b
  015a1:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  015a5: 01 	sub    DWORD PTR [rip+0x5e0],0x1        # 0x1b8c
  015ac:    	je     0x34836
  015b2:    	sub    rsp,0x20
  015b6:    	movq   QWORD PTR [rsp],xmm2
  015bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c1:    	movq   QWORD PTR [rsp+0x10],xmm5
  015c7:    	movq   QWORD PTR [rsp+0x18],xmm6
  015cd:    	mov    rdi,QWORD PTR [rbp-0x30]
  015d1: b5 	movabs rax,0x55b5b009e670
  015db:    	call   rax
  015dd:    	mov    r15d,eax
  015e0: 00 	cmp    r15d,DWORD PTR [rip+0x5ad]        # 0x1b94
  015e7:    	jne    0x34858
  015ed:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8406]        # 0xfffe99f9
  015f3:    	cmp    DWORD PTR [rip+0x597],eax        # 0x1b90
  015f9:    	jne    0x34858
  015ff: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01608:    	mov    QWORD PTR [rsp-0x38],rcx
  0160d:    	mov    rax,QWORD PTR [rbx]
  01610:    	lea    rsi,[rsp-0x18]
  01615:    	mov    QWORD PTR [rsi],rax
  01618:    	mov    QWORD PTR [rbx],rsi
  0161b:    	mov    rax,QWORD PTR [rbp-0x30]
  0161f:    	mov    QWORD PTR [rsp-0x38],rax
  01624: 00 	mov    rdi,0x0
  0162b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01634: 00 	movabs rax,0x0
  0163e:    	mov    QWORD PTR [rsp-0x28],rax
  01643: 00 	movabs r13,0x0
  0164d:    	call   0xfffe68dc
  01652:    	lea    rdi,[rbp-0x8]
  01656:    	mov    QWORD PTR [rbx],rdi
  01659:    	movq   xmm2,QWORD PTR [rsp]
  0165e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01664:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0166a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01670:    	add    rsp,0x20
  01674:    	test   rax,rax
  01677:    	je     0x348c4
  0167d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01684: 01 	sub    DWORD PTR [rip+0x50d],0x1        # 0x1b98
  0168b:    	je     0x348ef
  01691:    	sub    rsp,0x20
  01695:    	movq   QWORD PTR [rsp],xmm2
  0169a:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a0:    	movq   QWORD PTR [rsp+0x10],xmm5
  016a6:    	movq   QWORD PTR [rsp+0x18],xmm6
  016ac: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016b3: b5 	movabs rax,0x55b5b009e670
  016bd:    	call   rax
  016bf:    	mov    r15d,eax
  016c2: 00 	cmp    r15d,DWORD PTR [rip+0x4d7]        # 0x1ba0
  016c9:    	jne    0x34911
  016cf:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8324]        # 0xfffe99f9
  016d5:    	cmp    DWORD PTR [rip+0x4c1],eax        # 0x1b9c
  016db:    	jne    0x34911
  016e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016ea:    	mov    QWORD PTR [rsp-0x38],rcx
  016ef:    	mov    rax,QWORD PTR [rbx]
  016f2:    	lea    rsi,[rsp-0x18]
  016f7:    	mov    QWORD PTR [rsi],rax
  016fa:    	mov    QWORD PTR [rbx],rsi
  016fd: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01704:    	mov    QWORD PTR [rsp-0x38],rax
  01709: 00 	mov    rdi,0x0
  01710: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01719: 00 	movabs rax,0x0
  01723:    	mov    QWORD PTR [rsp-0x28],rax
  01728: 00 	movabs r13,0x0
  01732:    	call   0xfffe68dc
  01737:    	lea    rdi,[rbp-0x8]
  0173b:    	mov    QWORD PTR [rbx],rdi
  0173e:    	movq   xmm2,QWORD PTR [rsp]
  01743:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01749:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0174f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01755:    	add    rsp,0x20
  01759:    	test   rax,rax
  0175c:    	je     0x34980
  01762: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01769: 01 	sub    DWORD PTR [rip+0x434],0x1        # 0x1ba4
  01770:    	je     0x349ab
  01776:    	mov    rdi,QWORD PTR [rbp-0x58]
  0177a: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01781:    	sub    rsp,0x20
  01785:    	movq   QWORD PTR [rsp],xmm2
  0178a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01790:    	movq   QWORD PTR [rsp+0x10],xmm5
  01796:    	movq   QWORD PTR [rsp+0x18],xmm6
  0179c:    	mov    rdx,rdi
  0179f:    	mov    rcx,rsi
  017a2:    	mov    rdi,rbx
  017a5:    	mov    rsi,r12
  017a8: b5 	movabs rax,0x55b5b00e8b30
  017b2:    	call   rax
  017b4:    	movq   xmm2,QWORD PTR [rsp]
  017b9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017bf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017c5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017cb:    	add    rsp,0x20
  017cf: b5 	movabs r13,0x55b5b07c5380
  017d9:    	test   rax,rax
  017dc:    	je     0xfffe690f
  017e2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017e9: 01 	sub    DWORD PTR [rip+0x3b8],0x1        # 0x1ba8
  017f0:    	je     0x349e9
  017f6:    	mov    rdi,QWORD PTR [rbp-0x80]
  017fa: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01801:    	sub    rsp,0x20
  01805:    	movq   QWORD PTR [rsp],xmm2
  0180a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01810:    	movq   QWORD PTR [rsp+0x10],xmm5
  01816:    	movq   QWORD PTR [rsp+0x18],xmm6
  0181c:    	mov    rdx,rdi
  0181f:    	mov    rcx,rsi
  01822:    	mov    rdi,rbx
  01825:    	mov    rsi,r12
  01828: b5 	movabs rax,0x55b5b00e6cb0
  01832:    	call   rax
  01834:    	movq   xmm2,QWORD PTR [rsp]
  01839:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0183f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01845:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0184b:    	add    rsp,0x20
  0184f: b5 	movabs r13,0x55b5b07c5390
  01859:    	test   rax,rax
  0185c:    	je     0xfffe690f
  01862:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  01866: 01 	sub    DWORD PTR [rip+0x33f],0x1        # 0x1bac
  0186d:    	je     0x34a27
  01873:    	sub    rsp,0x20
  01877:    	movq   QWORD PTR [rsp],xmm2
  0187c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01882:    	movq   QWORD PTR [rsp+0x10],xmm5
  01888:    	movq   QWORD PTR [rsp+0x18],xmm6
  0188e:    	mov    rdi,QWORD PTR [rbp-0x68]
  01892: b5 	movabs rax,0x55b5b009e670
  0189c:    	call   rax
  0189e:    	mov    r15d,eax
  018a1: 00 	cmp    r15d,DWORD PTR [rip+0x30c]        # 0x1bb4
  018a8:    	jne    0x34a49
  018ae:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8145]        # 0xfffe99f9
  018b4:    	cmp    DWORD PTR [rip+0x2f6],eax        # 0x1bb0
  018ba:    	jne    0x34a49
  018c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018c9:    	mov    QWORD PTR [rsp-0x38],rcx
  018ce:    	mov    rax,QWORD PTR [rbx]
  018d1:    	lea    rsi,[rsp-0x18]
  018d6:    	mov    QWORD PTR [rsi],rax
  018d9:    	mov    QWORD PTR [rbx],rsi
  018dc:    	mov    rax,QWORD PTR [rbp-0x68]
  018e0:    	mov    QWORD PTR [rsp-0x38],rax
  018e5: 00 	mov    rdi,0x3
  018ec:    	lea    r8,[rsp-0x40]
  018f1:    	mov    rax,QWORD PTR [rbp-0x70]
  018f5:    	mov    QWORD PTR [r8],rax
  018f8:    	sub    r8,0x8
  018fc:    	mov    rax,QWORD PTR [rbp-0x78]
  01900:    	mov    QWORD PTR [r8],rax
  01903:    	sub    r8,0x8
  01907:    	mov    rax,QWORD PTR [rbp-0x80]
  0190b:    	mov    QWORD PTR [r8],rax
  0190e:    	sub    r8,0x8
  01912: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0191b: 00 	movabs rax,0x0
  01925:    	mov    QWORD PTR [rsp-0x28],rax
  0192a: 00 	movabs r13,0x0
  01934:    	call   0xfffe68dc
  01939:    	lea    rdi,[rbp-0x8]
  0193d:    	mov    QWORD PTR [rbx],rdi
  01940:    	movq   xmm2,QWORD PTR [rsp]
  01945:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0194b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01951:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01957:    	add    rsp,0x20
  0195b:    	test   rax,rax
  0195e:    	je     0x34ab5
  01964:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  01968: 01 	sub    DWORD PTR [rip+0x249],0x1        # 0x1bb8
  0196f:    	je     0x34ae0
  01975:    	sub    rsp,0x20
  01979:    	movq   QWORD PTR [rsp],xmm2
  0197e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01984:    	movq   QWORD PTR [rsp+0x10],xmm5
  0198a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01990:    	mov    rdi,QWORD PTR [rbp-0x38]
  01994: b5 	movabs rax,0x55b5b009e670
  0199e:    	call   rax
  019a0:    	mov    r15d,eax
  019a3: 00 	cmp    r15d,DWORD PTR [rip+0x216]        # 0x1bc0
  019aa:    	jne    0x34b02
  019b0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8043]        # 0xfffe99f9
  019b6:    	cmp    DWORD PTR [rip+0x200],eax        # 0x1bbc
  019bc:    	jne    0x34b02
  019c2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019cb:    	mov    QWORD PTR [rsp-0x38],rcx
  019d0:    	mov    rax,QWORD PTR [rbx]
  019d3:    	lea    rsi,[rsp-0x18]
  019d8:    	mov    QWORD PTR [rsi],rax
  019db:    	mov    QWORD PTR [rbx],rsi
  019de:    	mov    rax,QWORD PTR [rbp-0x38]
  019e2:    	mov    QWORD PTR [rsp-0x38],rax
  019e7: 00 	mov    rdi,0x1
  019ee:    	lea    r8,[rsp-0x40]
  019f3:    	mov    rax,QWORD PTR [rbp-0x60]
  019f7:    	mov    QWORD PTR [r8],rax
  019fa:    	sub    r8,0x8
  019fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a07: 00 	movabs rax,0x0
  01a11:    	mov    QWORD PTR [rsp-0x28],rax
  01a16: 00 	movabs r13,0x0
  01a20:    	call   0xfffe68dc
  01a25:    	lea    rdi,[rbp-0x8]
  01a29:    	mov    QWORD PTR [rbx],rdi
  01a2c:    	movq   xmm2,QWORD PTR [rsp]
  01a31:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a37:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a3d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01a43:    	add    rsp,0x20
  01a47:    	test   rax,rax
  01a4a:    	je     0x34b6e
:00103 
:00105 br =>:00106
  01a50:    	jmp    0x34bd6
:00106 %7 = nil
  01a55: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01a5d:    	mov    rax,QWORD PTR [rbp-0x60]
  01a61:    	leave  
  01a62:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55b5b07b7240
<== finished compile. elapsed:181µs
offset:Pos(111336) code: 9273 bytes  data: 423 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5:    	mov    rdi,QWORD PTR [rbp-0x28]
  000c9: 00 	test   rdi,0x7
  000d0:    	jne    0x33047
  000d6:    	cmp    DWORD PTR [rdi+0x4],0x32
  000da:    	jne    0x33047
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:11
:00001 %13 = %0.call rand()                 [Scene]
  000e0:    	mov    rdi,QWORD PTR [rbp-0x28]
  000e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7d4a],0x26        # 0xfffe7e35
  000eb:    	jne    0x33056
  000f1: 00 	mov    r9,0x0
  000f8:    	mov    rdx,rdi
  000fb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00104:    	mov    QWORD PTR [rsp-0x38],rcx
  00109:    	mov    rax,QWORD PTR [rbx]
  0010c:    	lea    rsi,[rsp-0x18]
  00111:    	mov    QWORD PTR [rsi],rax
  00114:    	mov    QWORD PTR [rbx],rsi
  00117: ff 	lea    rcx,[rbp-0x98]
  0011e: 00 	mov    r8,0x0
  00125:    	call   0x33065
  0012a:    	lea    rdi,[rbp-0x8]
  0012e:    	mov    QWORD PTR [rbx],rdi
  00131: b5 	movabs r13,0x55b5b07b7270
  0013b:    	test   rax,rax
  0013e:    	je     0xfffe4d4b
  00144: ff 	mov    QWORD PTR [rbp-0x90],rax
:00002 
:00004 %2 = %13
  0014b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00152:    	mov    QWORD PTR [rbp-0x38],rax
:00005 %13 = literal[2.0]
  00156: 00 	movq   xmm2,QWORD PTR [rip+0x22ea]        # 0x2448
  0015e: 00 	mov    rax,0x2
  00165: ff 	mov    QWORD PTR [rbp-0x90],rax
:00006 %14 = literal[3.14159265]
  0016c: 00 	movq   xmm3,QWORD PTR [rip+0x22e4]        # 0x2458
  00174: da 	movabs rax,0x490fda9e46a78a
  0017e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00185:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00189:    	mov    rdi,QWORD PTR [rbp-0x28]
  0018d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7ca1],0x26        # 0xfffe7e35
  00194:    	jne    0x33097
  0019a: 00 	mov    r9,0x0
  001a1:    	sub    rsp,0x10
  001a5:    	movq   QWORD PTR [rsp],xmm2
  001aa:    	mov    rdx,rdi
  001ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001b6:    	mov    QWORD PTR [rsp-0x38],rcx
  001bb:    	mov    rax,QWORD PTR [rbx]
  001be:    	lea    rsi,[rsp-0x18]
  001c3:    	mov    QWORD PTR [rsi],rax
  001c6:    	mov    QWORD PTR [rbx],rsi
  001c9: ff 	lea    rcx,[rbp-0xa0]
  001d0: 00 	mov    r8,0x0
  001d7:    	call   0x330b6
  001dc:    	lea    rdi,[rbp-0x8]
  001e0:    	mov    QWORD PTR [rbx],rdi
  001e3:    	movq   xmm2,QWORD PTR [rsp]
  001e8:    	add    rsp,0x10
  001ec: b5 	movabs r13,0x55b5b07b72e0
  001f6:    	test   rax,rax
  001f9:    	je     0xfffe4d4b
  001ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  00206: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0020d: 00 	test   rdi,0x1
  00214:    	jne    0x330e8
  0021a: 00 	test   rdi,0x2
  00221:    	je     0x25d
  00227:    	xorps  xmm3,xmm3
  0022a: 00 	movabs rax,0x8000000000000002
  00234:    	cmp    rdi,rax
  00237:    	je     0x26f
  0023d:    	mov    rax,rdi
  00240:    	sar    rax,0x3f
  00244:    	add    rax,0x2
  00248:    	and    rdi,0xfffffffffffffffc
  0024c:    	or     rdi,rax
  0024f:    	rol    rdi,0x3d
  00253:    	movq   xmm3,rdi
  00258:    	jmp    0x26f
  0025d:    	call   0xfffe4da4
  00262:    	test   rax,rax
  00265:    	je     0x330e8
  0026b:    	movq   xmm3,xmm0
  0026f:    	movq   xmm4,xmm2
  00273:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7bca]        # 0xfffe7e48
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x21f3]        # 0x2478
  00285:    	jne    0x33107
  0028b: 00 	mov    rax,QWORD PTR [rip+0x21d6]        # 0x2468
  00292: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00299: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002a0: 00 	test   rdi,0x7
  002a7:    	jne    0x3316b
  002ad:    	cmp    DWORD PTR [rdi+0x4],0x21
  002b1:    	jne    0x3316b
  002b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7b77],0x26        # 0xfffe7e35
  002be:    	jne    0x3316b
  002c4:    	sub    rsp,0x10
  002c8:    	movq   QWORD PTR [rsp],xmm2
  002cd:    	movq   QWORD PTR [rsp+0x8],xmm4
  002d3:    	movq   xmm0,xmm4
  002d7: b5 	movabs rax,0x55b5b0071300
  002e1:    	call   rax
  002e3:    	movq   xmm2,QWORD PTR [rsp]
  002e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002ee:    	add    rsp,0x10
  002f2:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002f6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7b4b]        # 0xfffe7e48
  002fd: 00 	cmp    rax,QWORD PTR [rip+0x2194]        # 0x2498
  00304:    	jne    0x3318e
  0030a: 00 	mov    rax,QWORD PTR [rip+0x2177]        # 0x2488
  00311: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00018 %16 = literal[1.0]
  00318: 00 	movq   xmm3,QWORD PTR [rip+0x2188]        # 0x24a8
  00320: 00 	movabs rax,0xff80000000000002
  0032a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00019 %16 = %16 - %2                       [Float][Float]
  00331:    	mov    rdi,QWORD PTR [rbp-0x38]
  00335: 00 	test   rdi,0x1
  0033c:    	jne    0x331f2
  00342: 00 	test   rdi,0x2
  00349:    	je     0x385
  0034f:    	xorps  xmm5,xmm5
  00352: 00 	movabs rax,0x8000000000000002
  0035c:    	cmp    rdi,rax
  0035f:    	je     0x397
  00365:    	mov    rax,rdi
  00368:    	sar    rax,0x3f
  0036c:    	add    rax,0x2
  00370:    	and    rdi,0xfffffffffffffffc
  00374:    	or     rdi,rax
  00377:    	rol    rdi,0x3d
  0037b:    	movq   xmm5,rdi
  00380:    	jmp    0x397
  00385:    	call   0xfffe4da4
  0038a:    	test   rax,rax
  0038d:    	je     0x331f2
  00393:    	movq   xmm5,xmm0
  00397:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  0039b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  003a2: 00 	test   rdi,0x7
  003a9:    	jne    0x3321e
  003af:    	cmp    DWORD PTR [rdi+0x4],0x21
  003b3:    	jne    0x3321e
  003b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7a75],0x26        # 0xfffe7e35
  003c0:    	jne    0x3321e
  003c6:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003ca:    	movq   xmm7,xmm2
  003ce:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003d2: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7a6f]        # 0xfffe7e48
  003d9: 00 	cmp    rax,QWORD PTR [rip+0x20e8]        # 0x24c8
  003e0:    	jne    0x3325a
  003e6: 00 	mov    rax,QWORD PTR [rip+0x20cb]        # 0x24b8
  003ed: ff 	mov    QWORD PTR [rbp-0x98],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003f4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x332e2
  00408:    	cmp    DWORD PTR [rdi+0x4],0x21
  0040c:    	jne    0x332e2
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7a1c],0x26        # 0xfffe7e35
  00419:    	jne    0x332e2
  0041f:    	sub    rsp,0x30
  00423:    	movq   QWORD PTR [rsp],xmm2
  00428:    	movq   QWORD PTR [rsp+0x8],xmm3
  0042e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00434:    	movq   QWORD PTR [rsp+0x18],xmm5
  0043a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00440:    	movq   xmm0,xmm4
  00444: b5 	movabs rax,0x55b5b0071310
  0044e:    	call   rax
  00450:    	movq   xmm2,QWORD PTR [rsp]
  00455:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00461:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00467:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0046d:    	add    rsp,0x30
  00471:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00475: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe79cc]        # 0xfffe7e48
  0047c: 00 	cmp    rax,QWORD PTR [rip+0x2065]        # 0x24e8
  00483:    	jne    0x33322
  00489: 00 	mov    rax,QWORD PTR [rip+0x2048]        # 0x24d8
  00490: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %16 = literal[1.0]
  00497: 00 	movq   xmm3,QWORD PTR [rip+0x2059]        # 0x24f8
  0049f: 00 	movabs rax,0xff80000000000002
  004a9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00031 %16 = %16 - %2                       [Float][Float]
  004b0:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004b4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  004bb: 00 	test   rdi,0x7
  004c2:    	jne    0x333aa
  004c8:    	cmp    DWORD PTR [rdi+0x4],0x21
  004cc:    	jne    0x333aa
  004d2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe795c],0x26        # 0xfffe7e35
  004d9:    	jne    0x333aa
  004df:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004e3:    	movq   xmm8,xmm2
  004e8:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004ed: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7954]        # 0xfffe7e48
  004f4: 00 	cmp    rax,QWORD PTR [rip+0x201d]        # 0x2518
  004fb:    	jne    0x333f3
  00501: 00 	mov    rax,QWORD PTR [rip+0x2000]        # 0x2508
  00508: ff 	mov    QWORD PTR [rbp-0x90],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  0050f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00516: 00 	test   rdi,0x7
  0051d:    	jne    0x33489
  00523:    	cmp    DWORD PTR [rdi+0x4],0x21
  00527:    	jne    0x33489
  0052d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7901],0x26        # 0xfffe7e35
  00534:    	jne    0x33489
  0053a:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0053e:    	mov    rax,QWORD PTR [rbp-0x10]
  00542:    	mov    rax,QWORD PTR [rax]
  00545:    	mov    rax,QWORD PTR [rax-0x28]
  00549: ff 	mov    QWORD PTR [rbp-0x98],rax
:00042 %15 = 0: i32
  00550: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  0055b:    	sub    rsp,0x30
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576:    	movq   QWORD PTR [rsp+0x20],xmm7
  0057c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00583: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0058a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00591:    	mov    rdi,rbx
  00594:    	mov    rsi,r12
  00597: b5 	movabs r8,0x55b5b07b74f8
  005a1: b5 	movabs rax,0x55b5b0091aa0
  005ab:    	call   rax
  005ad:    	movq   xmm2,QWORD PTR [rsp]
  005b2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005b8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005be:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ca: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d1:    	add    rsp,0x30
  005d5: b5 	movabs r13,0x55b5b07b7500
  005df:    	test   rax,rax
  005e2:    	je     0xfffe4d4b
  005e8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00044 %13 = %14.call x()                   [Vec]
  005ef: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  005f6: 00 	test   rdi,0x7
  005fd:    	jne    0x334e0
  00603:    	cmp    DWORD PTR [rdi+0x4],0x28
  00607:    	jne    0x334e0
  0060d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7821],0x26        # 0xfffe7e35
  00614:    	jne    0x334e0
  0061a:    	mov    esi,DWORD PTR [rip+0x1f04]        # 0x2524
  00620:    	cmp    esi,0xffffffff
  00623:    	je     0x33534
  00629:    	cmp    WORD PTR [rdi+0x2],0x3
  0062e:    	jne    0x647
  00634:    	cmp    esi,0x6
  00637:    	jge    0x647
  0063d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00642:    	jmp    0x6a3
  00647:    	sub    rsp,0x30
  0064b:    	movq   QWORD PTR [rsp],xmm2
  00650:    	movq   QWORD PTR [rsp+0x8],xmm3
  00656:    	movq   QWORD PTR [rsp+0x10],xmm4
  0065c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00662:    	movq   QWORD PTR [rsp+0x20],xmm7
  00668: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0066f: b5 	movabs rax,0x55b5b00a3ef0
  00679:    	call   rax
  0067b:    	movq   xmm2,QWORD PTR [rsp]
  00680:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00686:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0068c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00692:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00698: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0069f:    	add    rsp,0x30
  006a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  006aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  006b1: 00 	test   rdi,0x1
  006b8:    	jne    0x335ad
  006be: 00 	test   rdi,0x2
  006c5:    	je     0x701
  006cb:    	xorps  xmm6,xmm6
  006ce: 00 	movabs rax,0x8000000000000002
  006d8:    	cmp    rdi,rax
  006db:    	je     0x713
  006e1:    	mov    rax,rdi
  006e4:    	sar    rax,0x3f
  006e8:    	add    rax,0x2
  006ec:    	and    rdi,0xfffffffffffffffc
  006f0:    	or     rdi,rax
  006f3:    	rol    rdi,0x3d
  006f7:    	movq   xmm6,rdi
  006fc:    	jmp    0x713
  00701:    	call   0xfffe4da4
  00706:    	test   rax,rax
  00709:    	je     0x335ad
  0070f:    	movq   xmm6,xmm0
  00713:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00717:    	mov    rax,QWORD PTR [rbp-0x10]
  0071b:    	mov    rax,QWORD PTR [rax]
  0071e:    	mov    rax,QWORD PTR [rax-0x28]
  00722: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00049 %16 = 1: i32
  00729: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00734:    	sub    rsp,0x30
  00738:    	movq   QWORD PTR [rsp],xmm2
  0073d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00743:    	movq   QWORD PTR [rsp+0x10],xmm5
  00749:    	movq   QWORD PTR [rsp+0x18],xmm6
  0074f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00755: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0075c: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00763: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0076a:    	mov    rdi,rbx
  0076d:    	mov    rsi,r12
  00770: b5 	movabs r8,0x55b5b07b7568
  0077a: b5 	movabs rax,0x55b5b0091aa0
  00784:    	call   rax
  00786:    	movq   xmm2,QWORD PTR [rsp]
  0078b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00791:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00797:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0079d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007a3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007aa:    	add    rsp,0x30
  007ae: b5 	movabs r13,0x55b5b07b7570
  007b8:    	test   rax,rax
  007bb:    	je     0xfffe4d4b
  007c1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00051 %14 = %15.call x()                   [Vec]
  007c8: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  007cf: 00 	test   rdi,0x7
  007d6:    	jne    0x33601
  007dc:    	cmp    DWORD PTR [rdi+0x4],0x28
  007e0:    	jne    0x33601
  007e6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7648],0x26        # 0xfffe7e35
  007ed:    	jne    0x33601
  007f3:    	mov    esi,DWORD PTR [rip+0x1d33]        # 0x252c
  007f9:    	cmp    esi,0xffffffff
  007fc:    	je     0x33655
  00802:    	cmp    WORD PTR [rdi+0x2],0x3
  00807:    	jne    0x820
  0080d:    	cmp    esi,0x6
  00810:    	jge    0x820
  00816:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0081b:    	jmp    0x87c
  00820:    	sub    rsp,0x30
  00824:    	movq   QWORD PTR [rsp],xmm2
  00829:    	movq   QWORD PTR [rsp+0x8],xmm4
  0082f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00835:    	movq   QWORD PTR [rsp+0x18],xmm6
  0083b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00841: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00848: b5 	movabs rax,0x55b5b00a3ef0
  00852:    	call   rax
  00854:    	movq   xmm2,QWORD PTR [rsp]
  00859:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0085f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00865:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0086b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00871: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00878:    	add    rsp,0x30
  0087c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00883: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0088a: 00 	test   rdi,0x1
  00891:    	jne    0x336ce
  00897: 00 	test   rdi,0x2
  0089e:    	je     0x8da
  008a4:    	xorps  xmm3,xmm3
  008a7: 00 	movabs rax,0x8000000000000002
  008b1:    	cmp    rdi,rax
  008b4:    	je     0x8ec
  008ba:    	mov    rax,rdi
  008bd:    	sar    rax,0x3f
  008c1:    	add    rax,0x2
  008c5:    	and    rdi,0xfffffffffffffffc
  008c9:    	or     rdi,rax
  008cc:    	rol    rdi,0x3d
  008d0:    	movq   xmm3,rdi
  008d5:    	jmp    0x8ec
  008da:    	call   0xfffe4da4
  008df:    	test   rax,rax
  008e2:    	je     0x336ce
  008e8:    	movq   xmm3,xmm0
  008ec:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008f1:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008f5:    	mov    rax,QWORD PTR [rbp-0x10]
  008f9:    	mov    rax,QWORD PTR [rax]
  008fc:    	mov    rax,QWORD PTR [rax-0x28]
  00900: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00057 %16 = 2: i32
  00907: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  00912:    	sub    rsp,0x40
  00916:    	movq   QWORD PTR [rsp],xmm2
  0091b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00921:    	movq   QWORD PTR [rsp+0x10],xmm4
  00927:    	movq   QWORD PTR [rsp+0x18],xmm5
  0092d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00933:    	movq   QWORD PTR [rsp+0x28],xmm7
  00939: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00940: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00947: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0094e:    	mov    rdi,rbx
  00951:    	mov    rsi,r12
  00954: b5 	movabs r8,0x55b5b07b75e8
  0095e: b5 	movabs rax,0x55b5b0091aa0
  00968:    	call   rax
  0096a:    	movq   xmm2,QWORD PTR [rsp]
  0096f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00975:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0097b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00981:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00987:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0098d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00994:    	add    rsp,0x40
  00998: b5 	movabs r13,0x55b5b07b75f0
  009a2:    	test   rax,rax
  009a5:    	je     0xfffe4d4b
  009ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00059 %14 = %15.call x()                   [Vec]
  009b2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x33722
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x28
  009ca:    	jne    0x33722
  009d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe745e],0x26        # 0xfffe7e35
  009d7:    	jne    0x33722
  009dd:    	mov    esi,DWORD PTR [rip+0x1b51]        # 0x2534
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x33776
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa66
  00a0a:    	sub    rsp,0x30
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a2b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a32: b5 	movabs rax,0x55b5b00a3ef0
  00a3c:    	call   rax
  00a3e:    	movq   xmm2,QWORD PTR [rsp]
  00a43:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a49:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a4f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a55:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a5b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a62:    	add    rsp,0x30
  00a66: ff 	mov    QWORD PTR [rbp-0x98],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a6d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a74: 00 	test   rdi,0x1
  00a7b:    	jne    0x337ef
  00a81: 00 	test   rdi,0x2
  00a88:    	je     0xac4
  00a8e:    	xorps  xmm3,xmm3
  00a91: 00 	movabs rax,0x8000000000000002
  00a9b:    	cmp    rdi,rax
  00a9e:    	je     0xad6
  00aa4:    	mov    rax,rdi
  00aa7:    	sar    rax,0x3f
  00aab:    	add    rax,0x2
  00aaf:    	and    rdi,0xfffffffffffffffc
  00ab3:    	or     rdi,rax
  00ab6:    	rol    rdi,0x3d
  00aba:    	movq   xmm3,rdi
  00abf:    	jmp    0xad6
  00ac4:    	call   0xfffe4da4
  00ac9:    	test   rax,rax
  00acc:    	je     0x337ef
  00ad2:    	movq   xmm3,xmm0
  00ad6:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ada:    	movq   xmm9,xmm6
  00adf:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ae4:    	mov    rax,QWORD PTR [rbp-0x10]
  00ae8:    	mov    rax,QWORD PTR [rax]
  00aeb:    	mov    rax,QWORD PTR [rax-0x28]
  00aef: ff 	mov    QWORD PTR [rbp-0x98],rax
:00065 %15 = 0: i32
  00af6: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00b01:    	sub    rsp,0x40
  00b05:    	movq   QWORD PTR [rsp],xmm2
  00b0a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b10:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b16:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b1c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b22: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b29: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b30: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b37: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b3e:    	mov    rdi,rbx
  00b41:    	mov    rsi,r12
  00b44: b5 	movabs r8,0x55b5b07b7668
  00b4e: b5 	movabs rax,0x55b5b0091aa0
  00b58:    	call   rax
  00b5a:    	movq   xmm2,QWORD PTR [rsp]
  00b5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b65:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b6b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b71:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b77: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b7e: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b85:    	add    rsp,0x40
  00b89: b5 	movabs r13,0x55b5b07b7670
  00b93:    	test   rax,rax
  00b96:    	je     0xfffe4d4b
  00b9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00067 %13 = %14.call y()                   [Vec]
  00ba3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00baa: 00 	test   rdi,0x7
  00bb1:    	jne    0x33843
  00bb7:    	cmp    DWORD PTR [rdi+0x4],0x28
  00bbb:    	jne    0x33843
  00bc1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe726d],0x26        # 0xfffe7e35
  00bc8:    	jne    0x33843
  00bce:    	mov    esi,DWORD PTR [rip+0x1968]        # 0x253c
  00bd4:    	cmp    esi,0xffffffff
  00bd7:    	je     0x33895
  00bdd:    	cmp    WORD PTR [rdi+0x2],0x3
  00be2:    	jne    0xbfb
  00be8:    	cmp    esi,0x6
  00beb:    	jge    0xbfb
  00bf1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bf6:    	jmp    0xc59
  00bfb:    	sub    rsp,0x30
  00bff:    	movq   QWORD PTR [rsp],xmm2
  00c04:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c0a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c10:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c16: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c1d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c24: b5 	movabs rax,0x55b5b00a3ef0
  00c2e:    	call   rax
  00c30:    	movq   xmm2,QWORD PTR [rsp]
  00c35:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c3b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c41:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c47: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c4e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c55:    	add    rsp,0x30
  00c59: ff 	mov    QWORD PTR [rbp-0x90],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c60: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c67: 00 	test   rdi,0x1
  00c6e:    	jne    0x33910
  00c74: 00 	test   rdi,0x2
  00c7b:    	je     0xcb7
  00c81:    	xorps  xmm3,xmm3
  00c84: 00 	movabs rax,0x8000000000000002
  00c8e:    	cmp    rdi,rax
  00c91:    	je     0xcc9
  00c97:    	mov    rax,rdi
  00c9a:    	sar    rax,0x3f
  00c9e:    	add    rax,0x2
  00ca2:    	and    rdi,0xfffffffffffffffc
  00ca6:    	or     rdi,rax
  00ca9:    	rol    rdi,0x3d
  00cad:    	movq   xmm3,rdi
  00cb2:    	jmp    0xcc9
  00cb7:    	call   0xfffe4da4
  00cbc:    	test   rax,rax
  00cbf:    	je     0x33910
  00cc5:    	movq   xmm3,xmm0
  00cc9:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00ccd:    	mov    rax,QWORD PTR [rbp-0x10]
  00cd1:    	mov    rax,QWORD PTR [rax]
  00cd4:    	mov    rax,QWORD PTR [rax-0x28]
  00cd8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00072 %16 = 1: i32
  00cdf: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cea:    	sub    rsp,0x40
  00cee:    	movq   QWORD PTR [rsp],xmm2
  00cf3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cf9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cff:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d05:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d0b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d12: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00d20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00d27:    	mov    rdi,rbx
  00d2a:    	mov    rsi,r12
  00d2d: b5 	movabs r8,0x55b5b07b76d8
  00d37: b5 	movabs rax,0x55b5b0091aa0
  00d41:    	call   rax
  00d43:    	movq   xmm2,QWORD PTR [rsp]
  00d48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d5a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d60: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d67: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d6e:    	add    rsp,0x40
  00d72: b5 	movabs r13,0x55b5b07b76e0
  00d7c:    	test   rax,rax
  00d7f:    	je     0xfffe4d4b
  00d85: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00074 %14 = %15.call y()                   [Vec]
  00d8c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00d93: 00 	test   rdi,0x7
  00d9a:    	jne    0x33962
  00da0:    	cmp    DWORD PTR [rdi+0x4],0x28
  00da4:    	jne    0x33962
  00daa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7084],0x26        # 0xfffe7e35
  00db1:    	jne    0x33962
  00db7:    	mov    esi,DWORD PTR [rip+0x1787]        # 0x2544
  00dbd:    	cmp    esi,0xffffffff
  00dc0:    	je     0x339c4
  00dc6:    	cmp    WORD PTR [rdi+0x2],0x3
  00dcb:    	jne    0xde4
  00dd1:    	cmp    esi,0x6
  00dd4:    	jge    0xde4
  00dda:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ddf:    	jmp    0xe4e
  00de4:    	sub    rsp,0x40
  00de8:    	movq   QWORD PTR [rsp],xmm2
  00ded:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00df9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dff:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e05: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e0c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e13: b5 	movabs rax,0x55b5b00a3ef0
  00e1d:    	call   rax
  00e1f:    	movq   xmm2,QWORD PTR [rsp]
  00e24:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e2a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e30:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e36:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e3c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e43: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e4a:    	add    rsp,0x40
  00e4e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e55: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e5c: 00 	test   rdi,0x1
  00e63:    	jne    0x33a4b
  00e69: 00 	test   rdi,0x2
  00e70:    	je     0xeac
  00e76:    	xorps  xmm6,xmm6
  00e79: 00 	movabs rax,0x8000000000000002
  00e83:    	cmp    rdi,rax
  00e86:    	je     0xebe
  00e8c:    	mov    rax,rdi
  00e8f:    	sar    rax,0x3f
  00e93:    	add    rax,0x2
  00e97:    	and    rdi,0xfffffffffffffffc
  00e9b:    	or     rdi,rax
  00e9e:    	rol    rdi,0x3d
  00ea2:    	movq   xmm6,rdi
  00ea7:    	jmp    0xebe
  00eac:    	call   0xfffe4da4
  00eb1:    	test   rax,rax
  00eb4:    	je     0x33a4b
  00eba:    	movq   xmm6,xmm0
  00ebe:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00ec3:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00ec7:    	mov    rax,QWORD PTR [rbp-0x10]
  00ecb:    	mov    rax,QWORD PTR [rax]
  00ece:    	mov    rax,QWORD PTR [rax-0x28]
  00ed2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00080 %16 = 2: i32
  00ed9: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ee4:    	sub    rsp,0x40
  00ee8:    	movq   QWORD PTR [rsp],xmm2
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ef9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eff:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f05:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f0b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f12: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00f20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00f27:    	mov    rdi,rbx
  00f2a:    	mov    rsi,r12
  00f2d: b5 	movabs r8,0x55b5b07b7758
  00f37: b5 	movabs rax,0x55b5b0091aa0
  00f41:    	call   rax
  00f43:    	movq   xmm2,QWORD PTR [rsp]
  00f48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f5a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f60:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f66: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f6d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f74:    	add    rsp,0x40
  00f78: b5 	movabs r13,0x55b5b07b7760
  00f82:    	test   rax,rax
  00f85:    	je     0xfffe4d4b
  00f8b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00082 %14 = %15.call y()                   [Vec]
  00f92: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00f99: 00 	test   rdi,0x7
  00fa0:    	jne    0x33aad
  00fa6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00faa:    	jne    0x33aad
  00fb0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6e7e],0x26        # 0xfffe7e35
  00fb7:    	jne    0x33aad
  00fbd:    	mov    esi,DWORD PTR [rip+0x1589]        # 0x254c
  00fc3:    	cmp    esi,0xffffffff
  00fc6:    	je     0x33b0f
  00fcc:    	cmp    WORD PTR [rdi+0x2],0x3
  00fd1:    	jne    0xfea
  00fd7:    	cmp    esi,0x6
  00fda:    	jge    0xfea
  00fe0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fe5:    	jmp    0x1054
  00fea:    	sub    rsp,0x40
  00fee:    	movq   QWORD PTR [rsp],xmm2
  00ff3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fff:    	movq   QWORD PTR [rsp+0x18],xmm5
  01005:    	movq   QWORD PTR [rsp+0x20],xmm7
  0100b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01012: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01019: b5 	movabs rax,0x55b5b00a3ef0
  01023:    	call   rax
  01025:    	movq   xmm2,QWORD PTR [rsp]
  0102a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01030:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01036:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0103c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01042: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01049: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01050:    	add    rsp,0x40
  01054: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  0105b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01062: 00 	test   rdi,0x1
  01069:    	jne    0x33b96
  0106f: 00 	test   rdi,0x2
  01076:    	je     0x10b2
  0107c:    	xorps  xmm6,xmm6
  0107f: 00 	movabs rax,0x8000000000000002
  01089:    	cmp    rdi,rax
  0108c:    	je     0x10c4
  01092:    	mov    rax,rdi
  01095:    	sar    rax,0x3f
  01099:    	add    rax,0x2
  0109d:    	and    rdi,0xfffffffffffffffc
  010a1:    	or     rdi,rax
  010a4:    	rol    rdi,0x3d
  010a8:    	movq   xmm6,rdi
  010ad:    	jmp    0x10c4
  010b2:    	call   0xfffe4da4
  010b7:    	test   rax,rax
  010ba:    	je     0x33b96
  010c0:    	movq   xmm6,xmm0
  010c4:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010c8:    	movq   xmm10,xmm3
  010cd:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010d2:    	mov    rax,QWORD PTR [rbp-0x10]
  010d6:    	mov    rax,QWORD PTR [rax]
  010d9:    	mov    rax,QWORD PTR [rax-0x28]
  010dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 0: i32
  010e4: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010ef:    	sub    rsp,0x40
  010f3:    	movq   QWORD PTR [rsp],xmm2
  010f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  010fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01104:    	movq   QWORD PTR [rsp+0x18],xmm5
  0110a:    	movq   QWORD PTR [rsp+0x20],xmm7
  01110: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01117: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0111e: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01125: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0112c: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  01133:    	mov    rdi,rbx
  01136:    	mov    rsi,r12
  01139: b5 	movabs r8,0x55b5b07b77d8
  01143: b5 	movabs rax,0x55b5b0091aa0
  0114d:    	call   rax
  0114f:    	movq   xmm2,QWORD PTR [rsp]
  01154:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0115a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01160:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01166:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0116c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01173: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0117a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01181:    	add    rsp,0x40
  01185: b5 	movabs r13,0x55b5b07b77e0
  0118f:    	test   rax,rax
  01192:    	je     0xfffe4d4b
  01198: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %13 = %14.call z()                   [Vec]
  0119f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011a6: 00 	test   rdi,0x7
  011ad:    	jne    0x33bf8
  011b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  011b7:    	jne    0x33bf8
  011bd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6c71],0x26        # 0xfffe7e35
  011c4:    	jne    0x33bf8
  011ca:    	mov    esi,DWORD PTR [rip+0x1384]        # 0x2554
  011d0:    	cmp    esi,0xffffffff
  011d3:    	je     0x33c58
  011d9:    	cmp    WORD PTR [rdi+0x2],0x3
  011de:    	jne    0x11f7
  011e4:    	cmp    esi,0x6
  011e7:    	jge    0x11f7
  011ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011f2:    	jmp    0x1263
  011f7:    	sub    rsp,0x40
  011fb:    	movq   QWORD PTR [rsp],xmm2
  01200:    	movq   QWORD PTR [rsp+0x8],xmm4
  01206:    	movq   QWORD PTR [rsp+0x10],xmm5
  0120c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01212: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01219: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01220: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01227: b5 	movabs rax,0x55b5b00a3ef0
  01231:    	call   rax
  01233:    	movq   xmm2,QWORD PTR [rsp]
  01238:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01244:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0124a: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01251: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01258: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0125f:    	add    rsp,0x40
  01263: ff 	mov    QWORD PTR [rbp-0x90],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  0126a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01271: 00 	test   rdi,0x1
  01278:    	jne    0x33ce1
  0127e: 00 	test   rdi,0x2
  01285:    	je     0x12c1
  0128b:    	xorps  xmm3,xmm3
  0128e: 00 	movabs rax,0x8000000000000002
  01298:    	cmp    rdi,rax
  0129b:    	je     0x12d3
  012a1:    	mov    rax,rdi
  012a4:    	sar    rax,0x3f
  012a8:    	add    rax,0x2
  012ac:    	and    rdi,0xfffffffffffffffc
  012b0:    	or     rdi,rax
  012b3:    	rol    rdi,0x3d
  012b7:    	movq   xmm3,rdi
  012bc:    	jmp    0x12d3
  012c1:    	call   0xfffe4da4
  012c6:    	test   rax,rax
  012c9:    	je     0x33ce1
  012cf:    	movq   xmm3,xmm0
  012d3:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012d7:    	mov    rax,QWORD PTR [rbp-0x10]
  012db:    	mov    rax,QWORD PTR [rax]
  012de:    	mov    rax,QWORD PTR [rax-0x28]
  012e2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00095 %16 = 1: i32
  012e9: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012f4:    	sub    rsp,0x40
  012f8:    	movq   QWORD PTR [rsp],xmm2
  012fd:    	movq   QWORD PTR [rsp+0x8],xmm3
  01303:    	movq   QWORD PTR [rsp+0x10],xmm4
  01309:    	movq   QWORD PTR [rsp+0x18],xmm5
  0130f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01315: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0131c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01323: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0132a: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01331: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01338:    	mov    rdi,rbx
  0133b:    	mov    rsi,r12
  0133e: b5 	movabs r8,0x55b5b07b7848
  01348: b5 	movabs rax,0x55b5b0091aa0
  01352:    	call   rax
  01354:    	movq   xmm2,QWORD PTR [rsp]
  01359:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0135f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01365:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0136b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01371: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01378: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0137f: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01386:    	add    rsp,0x40
  0138a: b5 	movabs r13,0x55b5b07b7850
  01394:    	test   rax,rax
  01397:    	je     0xfffe4d4b
  0139d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %14 = %15.call z()                   [Vec]
  013a4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  013ab: 00 	test   rdi,0x7
  013b2:    	jne    0x33d41
  013b8:    	cmp    DWORD PTR [rdi+0x4],0x28
  013bc:    	jne    0x33d41
  013c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6a6c],0x26        # 0xfffe7e35
  013c9:    	jne    0x33d41
  013cf:    	mov    esi,DWORD PTR [rip+0x1187]        # 0x255c
  013d5:    	cmp    esi,0xffffffff
  013d8:    	je     0x33db1
  013de:    	cmp    WORD PTR [rdi+0x2],0x3
  013e3:    	jne    0x13fc
  013e9:    	cmp    esi,0x6
  013ec:    	jge    0x13fc
  013f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013f7:    	jmp    0x1474
  013fc:    	sub    rsp,0x40
  01400:    	movq   QWORD PTR [rsp],xmm2
  01405:    	movq   QWORD PTR [rsp+0x8],xmm3
  0140b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01411:    	movq   QWORD PTR [rsp+0x18],xmm5
  01417:    	movq   QWORD PTR [rsp+0x20],xmm7
  0141d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01424: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0142b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01432: b5 	movabs rax,0x55b5b00a3ef0
  0143c:    	call   rax
  0143e:    	movq   xmm2,QWORD PTR [rsp]
  01443:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01449:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0144f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01455:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0145b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01462: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01469: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01470:    	add    rsp,0x40
  01474: ff 	mov    QWORD PTR [rbp-0x98],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  0147b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01482: 00 	test   rdi,0x1
  01489:    	jne    0x33e46
  0148f: 00 	test   rdi,0x2
  01496:    	je     0x14d2
  0149c:    	xorps  xmm6,xmm6
  0149f: 00 	movabs rax,0x8000000000000002
  014a9:    	cmp    rdi,rax
  014ac:    	je     0x14e4
  014b2:    	mov    rax,rdi
  014b5:    	sar    rax,0x3f
  014b9:    	add    rax,0x2
  014bd:    	and    rdi,0xfffffffffffffffc
  014c1:    	or     rdi,rax
  014c4:    	rol    rdi,0x3d
  014c8:    	movq   xmm6,rdi
  014cd:    	jmp    0x14e4
  014d2:    	call   0xfffe4da4
  014d7:    	test   rax,rax
  014da:    	je     0x33e46
  014e0:    	movq   xmm6,xmm0
  014e4:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014e9:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014ed:    	mov    rax,QWORD PTR [rbp-0x10]
  014f1:    	mov    rax,QWORD PTR [rax]
  014f4:    	mov    rax,QWORD PTR [rax-0x28]
  014f8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00103 %16 = 2: i32
  014ff: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  0150a:    	sub    rsp,0x50
  0150e:    	movq   QWORD PTR [rsp],xmm2
  01513:    	movq   QWORD PTR [rsp+0x8],xmm3
  01519:    	movq   QWORD PTR [rsp+0x10],xmm4
  0151f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01525:    	movq   QWORD PTR [rsp+0x20],xmm6
  0152b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01531: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01538: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0153f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01546: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0154d: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01554:    	mov    rdi,rbx
  01557:    	mov    rsi,r12
  0155a: b5 	movabs r8,0x55b5b07b78c8
  01564: b5 	movabs rax,0x55b5b0091aa0
  0156e:    	call   rax
  01570:    	movq   xmm2,QWORD PTR [rsp]
  01575:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0157b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01581:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01587:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0158d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01593: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0159a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015a1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015a8:    	add    rsp,0x50
  015ac: b5 	movabs r13,0x55b5b07b78d0
  015b6:    	test   rax,rax
  015b9:    	je     0xfffe4d4b
  015bf: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00105 %14 = %15.call z()                   [Vec]
  015c6: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015cd: 00 	test   rdi,0x7
  015d4:    	jne    0x33eb6
  015da:    	cmp    DWORD PTR [rdi+0x4],0x28
  015de:    	jne    0x33eb6
  015e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe684a],0x26        # 0xfffe7e35
  015eb:    	jne    0x33eb6
  015f1:    	mov    esi,DWORD PTR [rip+0xf6d]        # 0x2564
  015f7:    	cmp    esi,0xffffffff
  015fa:    	je     0x33f26
  01600:    	cmp    WORD PTR [rdi+0x2],0x3
  01605:    	jne    0x161e
  0160b:    	cmp    esi,0x6
  0160e:    	jge    0x161e
  01614:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01619:    	jmp    0x1696
  0161e:    	sub    rsp,0x40
  01622:    	movq   QWORD PTR [rsp],xmm2
  01627:    	movq   QWORD PTR [rsp+0x8],xmm3
  0162d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01633:    	movq   QWORD PTR [rsp+0x18],xmm5
  01639:    	movq   QWORD PTR [rsp+0x20],xmm7
  0163f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01646: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0164d: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01654: b5 	movabs rax,0x55b5b00a3ef0
  0165e:    	call   rax
  01660:    	movq   xmm2,QWORD PTR [rsp]
  01665:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0166b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01671:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01677:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0167d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01684: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0168b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01692:    	add    rsp,0x40
  01696: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0169d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  016a4: 00 	test   rdi,0x1
  016ab:    	jne    0x33fbb
  016b1: 00 	test   rdi,0x2
  016b8:    	je     0x16f4
  016be:    	xorps  xmm6,xmm6
  016c1: 00 	movabs rax,0x8000000000000002
  016cb:    	cmp    rdi,rax
  016ce:    	je     0x1706
  016d4:    	mov    rax,rdi
  016d7:    	sar    rax,0x3f
  016db:    	add    rax,0x2
  016df:    	and    rdi,0xfffffffffffffffc
  016e3:    	or     rdi,rax
  016e6:    	rol    rdi,0x3d
  016ea:    	movq   xmm6,rdi
  016ef:    	jmp    0x1706
  016f4:    	call   0xfffe4da4
  016f9:    	test   rax,rax
  016fc:    	je     0x33fbb
  01702:    	movq   xmm6,xmm0
  01706:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  0170a:    	movq   xmm11,xmm3
  0170f:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01714: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe672d]        # 0xfffe7e48
  0171b: 00 	cmp    rax,QWORD PTR [rip+0xe56]        # 0x2578
  01722:    	jne    0x3402b
  01728: 00 	mov    rax,QWORD PTR [rip+0xe39]        # 0x2568
  0172f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01736:    	movq   xmm0,xmm9
  0173b:    	call   0xfffe4ec8
  01740: ff 	mov    QWORD PTR [rbp-0x98],rax
  01747:    	movq   xmm0,xmm10
  0174c:    	call   0xfffe4ec8
  01751: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01758:    	movq   xmm0,xmm11
  0175d:    	call   0xfffe4ec8
  01762: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01769: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01770: 00 	test   rdi,0x7
  01777:    	jne    0x340eb
  0177d:    	cmp    DWORD PTR [rdi+0x4],0x29
  01781:    	jne    0x340eb
  01787: 26 	cmp    DWORD PTR [rip+0xfffffffffffe66a7],0x26        # 0xfffe7e35
  0178e:    	jne    0x340eb
  01794: 00 	mov    r9,0x0
  0179b:    	sub    rsp,0x40
  0179f:    	movq   QWORD PTR [rsp],xmm2
  017a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  017aa:    	movq   QWORD PTR [rsp+0x10],xmm5
  017b0:    	movq   QWORD PTR [rsp+0x18],xmm7
  017b6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017bd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017c4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017cb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017d2:    	mov    rdx,rdi
  017d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017de:    	mov    QWORD PTR [rsp-0x38],rcx
  017e3:    	mov    rax,QWORD PTR [rbx]
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rsi],rax
  017ee:    	mov    QWORD PTR [rbx],rsi
  017f1: ff 	lea    rcx,[rbp-0x98]
  017f8: 00 	mov    r8,0x3
  017ff:    	call   0x34159
  01804:    	lea    rdi,[rbp-0x8]
  01808:    	mov    QWORD PTR [rbx],rdi
  0180b:    	movq   xmm2,QWORD PTR [rsp]
  01810:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01816:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0181c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01822: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01829: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01830: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01837: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183e:    	add    rsp,0x40
  01842: b5 	movabs r13,0x55b5b07b7980
  0184c:    	test   rax,rax
  0184f:    	je     0xfffe4d4b
  01855:    	mov    QWORD PTR [rbp-0x78],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01859: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe65e8]        # 0xfffe7e48
  01860: 00 	cmp    rax,QWORD PTR [rip+0xd31]        # 0x2598
  01867:    	jne    0x3418b
  0186d: 00 	mov    rax,QWORD PTR [rip+0xd14]        # 0x2588
  01874: ff 	mov    QWORD PTR [rbp-0x90],rax
:00118 %14 = dynvar(2, %7)
  0187b:    	mov    rax,QWORD PTR [rbp-0x10]
  0187f:    	mov    rax,QWORD PTR [rax]
  01882:    	mov    rax,QWORD PTR [rax-0x50]
  01886: ff 	mov    QWORD PTR [rbp-0x98],rax
:00119 %15 = %10
  0188d:    	mov    rax,QWORD PTR [rbp-0x78]
  01891: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01898: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0189f: 00 	test   rdi,0x7
  018a6:    	jne    0x3423f
  018ac:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018b0:    	jne    0x3423f
  018b6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6578],0x26        # 0xfffe7e35
  018bd:    	jne    0x3423f
  018c3: 00 	mov    r9,0x0
  018ca:    	sub    rsp,0x40
  018ce:    	movq   QWORD PTR [rsp],xmm2
  018d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d9:    	movq   QWORD PTR [rsp+0x10],xmm5
  018df:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e5: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018ec: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f3: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018fa: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01901:    	mov    rdx,rdi
  01904: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0190d:    	mov    QWORD PTR [rsp-0x38],rcx
  01912:    	mov    rax,QWORD PTR [rbx]
  01915:    	lea    rsi,[rsp-0x18]
  0191a:    	mov    QWORD PTR [rsi],rax
  0191d:    	mov    QWORD PTR [rbx],rsi
  01920: ff 	lea    rcx,[rbp-0x98]
  01927: 00 	mov    r8,0x2
  0192e:    	call   0x342ad
  01933:    	lea    rdi,[rbp-0x8]
  01937:    	mov    QWORD PTR [rbx],rdi
  0193a:    	movq   xmm2,QWORD PTR [rsp]
  0193f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01945:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0194b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01951: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01958: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0195f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01966: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0196d:    	add    rsp,0x40
  01971: b5 	movabs r13,0x55b5b07b79e0
  0197b:    	test   rax,rax
  0197e:    	je     0xfffe4d4b
  01984:    	mov    QWORD PTR [rbp-0x80],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01988: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe64b9]        # 0xfffe7e48
  0198f: 00 	cmp    rax,QWORD PTR [rip+0xc22]        # 0x25b8
  01996:    	jne    0x342df
  0199c: 00 	mov    rax,QWORD PTR [rip+0xc05]        # 0x25a8
  019a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  019b1: 00 	test   rdi,0x7
  019b8:    	jne    0x34393
  019be:    	cmp    DWORD PTR [rdi+0x4],0x31
  019c2:    	jne    0x34393
  019c8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6466],0x26        # 0xfffe7e35
  019cf:    	jne    0x34393
  019d5: 00 	mov    r9,0x0
  019dc:    	sub    rsp,0x40
  019e0:    	movq   QWORD PTR [rsp],xmm2
  019e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  019f1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019f7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019fe: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a05: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a0c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a13:    	mov    rdx,rdi
  01a16: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a1f:    	mov    QWORD PTR [rsp-0x38],rcx
  01a24:    	mov    rax,QWORD PTR [rbx]
  01a27:    	lea    rsi,[rsp-0x18]
  01a2c:    	mov    QWORD PTR [rsi],rax
  01a2f:    	mov    QWORD PTR [rbx],rsi
  01a32: ff 	lea    rcx,[rbp-0x98]
  01a39: 00 	mov    r8,0x0
  01a40:    	call   0x34401
  01a45:    	lea    rdi,[rbp-0x8]
  01a49:    	mov    QWORD PTR [rbx],rdi
  01a4c:    	movq   xmm2,QWORD PTR [rsp]
  01a51:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a57:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a5d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a63: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a6a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a71: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a78: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a7f:    	add    rsp,0x40
  01a83: b5 	movabs r13,0x55b5b07b7a20
  01a8d:    	test   rax,rax
  01a90:    	je     0xfffe4d4b
  01a96: ff 	mov    QWORD PTR [rbp-0x88],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01a9d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01aa1:    	mov    rax,QWORD PTR [rdi+0x10]
  01aa5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00128 %14 = 0: i32
  01aac: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ab7:    	sub    rsp,0x40
  01abb:    	movq   QWORD PTR [rsp],xmm2
  01ac0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ac6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01acc:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ad2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ad9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ae0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ae7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01aee: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01af5: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01afc:    	mov    rdi,rbx
  01aff:    	mov    rsi,r12
  01b02: b5 	movabs r8,0x55b5b07b7a58
  01b0c: b5 	movabs rax,0x55b5b0091aa0
  01b16:    	call   rax
  01b18:    	movq   xmm2,QWORD PTR [rsp]
  01b1d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b23:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b29:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b2f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b36: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b3d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b44: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b4b:    	add    rsp,0x40
  01b4f: b5 	movabs r13,0x55b5b07b7a60
  01b59:    	test   rax,rax
  01b5c:    	je     0xfffe4d4b
  01b62: ff 	mov    QWORD PTR [rbp-0x90],rax
:00130 %14 = %11
  01b69:    	mov    rax,QWORD PTR [rbp-0x80]
  01b6d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00131 %15 = %12
  01b74: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01b7b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01b82: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b89: 00 	test   rdi,0x7
  01b90:    	jne    0x34433
  01b96:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01b9a:    	jne    0x34433
  01ba0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe628e],0x26        # 0xfffe7e35
  01ba7:    	jne    0x34433
  01bad:    	sub    rsp,0x40
  01bb1:    	movq   QWORD PTR [rsp],xmm2
  01bb6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bbc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bc2:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bc8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bcf: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bd6: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bdd: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01be4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bed:    	mov    QWORD PTR [rsp-0x38],rcx
  01bf2:    	mov    rax,QWORD PTR [rbx]
  01bf5:    	lea    rsi,[rsp-0x18]
  01bfa:    	mov    QWORD PTR [rsi],rax
  01bfd:    	mov    QWORD PTR [rbx],rsi
  01c00: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01c07:    	mov    QWORD PTR [rsp-0x38],rax
  01c0c: 00 	mov    rdi,0x2
  01c13:    	lea    r8,[rsp-0x40]
  01c18: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01c1f:    	mov    QWORD PTR [r8],rax
  01c22:    	sub    r8,0x8
  01c26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01c2d:    	mov    QWORD PTR [r8],rax
  01c30:    	sub    r8,0x8
  01c34: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c3d: 10 	movabs rax,0x1001000000046
  01c47:    	mov    QWORD PTR [rsp-0x28],rax
  01c4c: b5 	movabs r13,0x55b5b07be970
  01c56:    	call   0xfffe8a82
  01c5b:    	lea    rdi,[rbp-0x8]
  01c5f:    	mov    QWORD PTR [rbx],rdi
  01c62:    	movq   xmm2,QWORD PTR [rsp]
  01c67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c6d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c73:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c79: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c80: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c87: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c8e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c95:    	add    rsp,0x40
  01c99: b5 	movabs r13,0x55b5b07b7aa0
  01ca3:    	test   rax,rax
  01ca6:    	je     0xfffe4d4b
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cac:    	mov    rdi,QWORD PTR [rbp-0x28]
  01cb0:    	mov    rax,QWORD PTR [rdi+0x10]
  01cb4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00136 %14 = 1: i32
  01cbb: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cc6:    	sub    rsp,0x40
  01cca:    	movq   QWORD PTR [rsp],xmm2
  01ccf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cd5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01cdb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ce1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ce8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cef: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01cf6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01cfd: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01d04: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01d0b:    	mov    rdi,rbx
  01d0e:    	mov    rsi,r12
  01d11: b5 	movabs r8,0x55b5b07b7ad8
  01d1b: b5 	movabs rax,0x55b5b0091aa0
  01d25:    	call   rax
  01d27:    	movq   xmm2,QWORD PTR [rsp]
  01d2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d32:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d38:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d3e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d45: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d4c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d53: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d5a:    	add    rsp,0x40
  01d5e: b5 	movabs r13,0x55b5b07b7ae0
  01d68:    	test   rax,rax
  01d6b:    	je     0xfffe4d4b
  01d71: ff 	mov    QWORD PTR [rbp-0x90],rax
:00138 %14 = %11
  01d78:    	mov    rax,QWORD PTR [rbp-0x80]
  01d7c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00139 %15 = %12
  01d83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01d8a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01d91: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01d98: 00 	test   rdi,0x7
  01d9f:    	jne    0x344a1
  01da5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01da9:    	jne    0x344a1
  01daf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe607f],0x26        # 0xfffe7e35
  01db6:    	jne    0x344a1
  01dbc:    	sub    rsp,0x40
  01dc0:    	movq   QWORD PTR [rsp],xmm2
  01dc5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dcb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01dd1:    	movq   QWORD PTR [rsp+0x18],xmm7
  01dd7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01dde: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01de5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01dec: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01df3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01dfc:    	mov    QWORD PTR [rsp-0x38],rcx
  01e01:    	mov    rax,QWORD PTR [rbx]
  01e04:    	lea    rsi,[rsp-0x18]
  01e09:    	mov    QWORD PTR [rsi],rax
  01e0c:    	mov    QWORD PTR [rbx],rsi
  01e0f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01e16:    	mov    QWORD PTR [rsp-0x38],rax
  01e1b: 00 	mov    rdi,0x2
  01e22:    	lea    r8,[rsp-0x40]
  01e27: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01e2e:    	mov    QWORD PTR [r8],rax
  01e31:    	sub    r8,0x8
  01e35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01e3c:    	mov    QWORD PTR [r8],rax
  01e3f:    	sub    r8,0x8
  01e43: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e4c: 10 	movabs rax,0x1001000000046
  01e56:    	mov    QWORD PTR [rsp-0x28],rax
  01e5b: b5 	movabs r13,0x55b5b07be970
  01e65:    	call   0xfffe8a82
  01e6a:    	lea    rdi,[rbp-0x8]
  01e6e:    	mov    QWORD PTR [rbx],rdi
  01e71:    	movq   xmm2,QWORD PTR [rsp]
  01e76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e7c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e82:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e88: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e8f: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e96: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e9d: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ea4:    	add    rsp,0x40
  01ea8: b5 	movabs r13,0x55b5b07b7b20
  01eb2:    	test   rax,rax
  01eb5:    	je     0xfffe4d4b
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ebb:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ebf:    	mov    rax,QWORD PTR [rdi+0x10]
  01ec3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00144 %14 = 2: i32
  01eca: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01ed5:    	sub    rsp,0x40
  01ed9:    	movq   QWORD PTR [rsp],xmm2
  01ede:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ee4:    	movq   QWORD PTR [rsp+0x10],xmm5
  01eea:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ef0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ef7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01efe: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f05: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f0c: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01f13: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01f1a:    	mov    rdi,rbx
  01f1d:    	mov    rsi,r12
  01f20: b5 	movabs r8,0x55b5b07b7b58
  01f2a: b5 	movabs rax,0x55b5b0091aa0
  01f34:    	call   rax
  01f36:    	movq   xmm2,QWORD PTR [rsp]
  01f3b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f41:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f47:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f4d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f54: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f5b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f62: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f69:    	add    rsp,0x40
  01f6d: b5 	movabs r13,0x55b5b07b7b60
  01f77:    	test   rax,rax
  01f7a:    	je     0xfffe4d4b
  01f80: ff 	mov    QWORD PTR [rbp-0x90],rax
:00146 %14 = %11
  01f87:    	mov    rax,QWORD PTR [rbp-0x80]
  01f8b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 %15 = %12
  01f92: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01f99: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fa0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fa7: 00 	test   rdi,0x7
  01fae:    	jne    0x3450f
  01fb4:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01fb8:    	jne    0x3450f
  01fbe: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5e70],0x26        # 0xfffe7e35
  01fc5:    	jne    0x3450f
  01fcb:    	sub    rsp,0x40
  01fcf:    	movq   QWORD PTR [rsp],xmm2
  01fd4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01fda:    	movq   QWORD PTR [rsp+0x10],xmm5
  01fe0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01fe6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01fed: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ff4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ffb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02002: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0200b:    	mov    QWORD PTR [rsp-0x38],rcx
  02010:    	mov    rax,QWORD PTR [rbx]
  02013:    	lea    rsi,[rsp-0x18]
  02018:    	mov    QWORD PTR [rsi],rax
  0201b:    	mov    QWORD PTR [rbx],rsi
  0201e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02025:    	mov    QWORD PTR [rsp-0x38],rax
  0202a: 00 	mov    rdi,0x2
  02031:    	lea    r8,[rsp-0x40]
  02036: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0203d:    	mov    QWORD PTR [r8],rax
  02040:    	sub    r8,0x8
  02044: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0204b:    	mov    QWORD PTR [r8],rax
  0204e:    	sub    r8,0x8
  02052: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0205b: 10 	movabs rax,0x1001000000046
  02065:    	mov    QWORD PTR [rsp-0x28],rax
  0206a: b5 	movabs r13,0x55b5b07be970
  02074:    	call   0xfffe8a82
  02079:    	lea    rdi,[rbp-0x8]
  0207d:    	mov    QWORD PTR [rbx],rdi
  02080:    	movq   xmm2,QWORD PTR [rsp]
  02085:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0208b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02091:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02097: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0209e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020a5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020ac: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020b3:    	add    rsp,0x40
  020b7: b5 	movabs r13,0x55b5b07b7ba0
  020c1:    	test   rax,rax
  020c4:    	je     0xfffe4d4b
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  020ca:    	mov    rdi,QWORD PTR [rbp-0x28]
  020ce:    	mov    rax,QWORD PTR [rdi+0x18]
  020d2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00152 %14 = %11
  020d9:    	mov    rax,QWORD PTR [rbp-0x80]
  020dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00153 %15 = %12
  020e4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  020eb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  020f2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  020f9: 00 	test   rdi,0x7
  02100:    	jne    0x3457d
  02106:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0210a:    	jne    0x3457d
  02110: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5d1e],0x26        # 0xfffe7e35
  02117:    	jne    0x3457d
  0211d:    	sub    rsp,0x40
  02121:    	movq   QWORD PTR [rsp],xmm2
  02126:    	movq   QWORD PTR [rsp+0x8],xmm4
  0212c:    	movq   QWORD PTR [rsp+0x10],xmm5
  02132:    	movq   QWORD PTR [rsp+0x18],xmm7
  02138: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0213f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02146: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0214d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02154: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0215d:    	mov    QWORD PTR [rsp-0x38],rcx
  02162:    	mov    rax,QWORD PTR [rbx]
  02165:    	lea    rsi,[rsp-0x18]
  0216a:    	mov    QWORD PTR [rsi],rax
  0216d:    	mov    QWORD PTR [rbx],rsi
  02170: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02177:    	mov    QWORD PTR [rsp-0x38],rax
  0217c: 00 	mov    rdi,0x2
  02183:    	lea    r8,[rsp-0x40]
  02188: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0218f:    	mov    QWORD PTR [r8],rax
  02192:    	sub    r8,0x8
  02196: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0219d:    	mov    QWORD PTR [r8],rax
  021a0:    	sub    r8,0x8
  021a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021ad: 0e 	movabs rax,0x1000e00000048
  021b7:    	mov    QWORD PTR [rsp-0x28],rax
  021bc: b5 	movabs r13,0x55b5b07c4d60
  021c6:    	call   0xfffe9090
  021cb:    	lea    rdi,[rbp-0x8]
  021cf:    	mov    QWORD PTR [rbx],rdi
  021d2:    	movq   xmm2,QWORD PTR [rsp]
  021d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021dd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021e3:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021e9: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021f0: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021f7: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021fe: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02205:    	add    rsp,0x40
  02209: b5 	movabs r13,0x55b5b07b7c00
  02213:    	test   rax,rax
  02216:    	je     0xfffe4d4b
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  0221c: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  02223: 00 	test   rdi,0x7
  0222a:    	jne    0x345eb
  02230:    	cmp    DWORD PTR [rdi+0x4],0x30
  02234:    	jne    0x345eb
  0223a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5bf4],0x26        # 0xfffe7e35
  02241:    	jne    0x345eb
  02247:    	mov    esi,DWORD PTR [rip+0x377]        # 0x25c4
  0224d:    	cmp    esi,0xffffffff
  02250:    	je     0x34659
  02256:    	cmp    WORD PTR [rdi+0x2],0x3
  0225b:    	jne    0x2274
  02261:    	cmp    esi,0x6
  02264:    	jge    0x2274
  0226a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0226f:    	jmp    0x22ee
  02274:    	sub    rsp,0x40
  02278:    	movq   QWORD PTR [rsp],xmm2
  0227d:    	movq   QWORD PTR [rsp+0x8],xmm4
  02283:    	movq   QWORD PTR [rsp+0x10],xmm5
  02289:    	movq   QWORD PTR [rsp+0x18],xmm7
  0228f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02296: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0229d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022a4: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  022ab: b5 	movabs rax,0x55b5b00a3ef0
  022b5:    	call   rax
  022b7:    	movq   xmm2,QWORD PTR [rsp]
  022bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  022c2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  022c8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  022ce: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  022d5: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  022dc: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  022e3: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  022ea:    	add    rsp,0x40
  022ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00158 
:00160 condnotbr %13 =>:00166
  022f5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022fc:    	or     rax,0x10
  02300:    	cmp    rax,0x14
  02304:    	je     0x2417
:00161 %13 = dynvar(2, %6)
  0230a:    	mov    rax,QWORD PTR [rbp-0x10]
  0230e:    	mov    rax,QWORD PTR [rax]
  02311:    	mov    rax,QWORD PTR [rax-0x48]
  02315: ff 	mov    QWORD PTR [rbp-0x90],rax
:00162 %14 = literal[1.0]
  0231c: 00 	movq   xmm3,QWORD PTR [rip+0x2a4]        # 0x25c8
  02324: 00 	movabs rax,0xff80000000000002
  0232e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00163 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  02335: 01 	sub    DWORD PTR [rip+0x294],0x1        # 0x25d0
  0233c:    	je     0x3475e
  02342: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02349: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  02350:    	sub    rsp,0x50
  02354:    	movq   QWORD PTR [rsp],xmm2
  02359:    	movq   QWORD PTR [rsp+0x8],xmm3
  0235f:    	movq   QWORD PTR [rsp+0x10],xmm4
  02365:    	movq   QWORD PTR [rsp+0x18],xmm5
  0236b:    	movq   QWORD PTR [rsp+0x20],xmm7
  02371: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  02378: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0237f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  02386: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0238d:    	mov    rdx,rdi
  02390:    	mov    rcx,rsi
  02393:    	mov    rdi,rbx
  02396:    	mov    rsi,r12
  02399: b5 	movabs rax,0x55b5b00e6cb0
  023a3:    	call   rax
  023a5:    	movq   xmm2,QWORD PTR [rsp]
  023aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  023b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  023b6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  023bc:    	movq   xmm7,QWORD PTR [rsp+0x20]
  023c2: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  023c9: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  023d0: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  023d7: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  023de:    	add    rsp,0x50
  023e2: b5 	movabs r13,0x55b5b07b7c80
  023ec:    	test   rax,rax
  023ef:    	je     0xfffe4d4b
  023f5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00164 dynvar(2, %6) = %13
  023fc:    	mov    rax,QWORD PTR [rbp-0x10]
  02400:    	mov    rax,QWORD PTR [rax]
  02403: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0240a:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  0240e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02415:    	leave  
  02416:    	ret    
:00166 %13 = literal[0.0]
  02417: 00 	movq   xmm3,QWORD PTR [rip+0x1b9]        # 0x25d8
  0241f: 00 	movabs rax,0x8000000000000002
  02429: ff 	mov    QWORD PTR [rbp-0x90],rax
:00167 ret %13
  02430: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02437:    	leave  
  02438:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55b5b07be970
<== finished compile. elapsed:268µs
offset:Pos(121032) code: 7332 bytes  data: 396 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x321a0
  00022:    	jmp    0x321a0
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086: ff 	mov    QWORD PTR [rbp-0x98],rax
  0008d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00094:    	mov    rdi,QWORD PTR [rbp-0x28]
  00098: 00 	test   rdi,0x7
  0009f:    	jne    0x321af
  000a5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  000a9:    	jne    0x321af
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  000af:    	mov    rdi,QWORD PTR [rbp-0x30]
  000b3: 00 	test   rdi,0x7
  000ba:    	jne    0x321be
  000c0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000c4:    	jne    0x321be
  000ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5784],0x26        # 0xfffe5855
  000d1:    	jne    0x321be
  000d7:    	mov    esi,DWORD PTR [rip+0x1bcb]        # 0x1ca8
  000dd:    	cmp    esi,0xffffffff
  000e0:    	je     0x321cd
  000e6:    	cmp    WORD PTR [rdi+0x2],0x3
  000eb:    	jne    0x104
  000f1:    	cmp    esi,0x6
  000f4:    	jge    0x104
  000fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff:    	jmp    0x110
  00104: b5 	movabs rax,0x55b5b00a3ef0
  0010e:    	call   rax
  00110:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  00114:    	mov    rdi,QWORD PTR [rbp-0x28]
  00118:    	mov    rax,QWORD PTR [rdi+0x10]
  0011c:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00120:    	mov    rdi,QWORD PTR [rbp-0x70]
  00124: 00 	test   rdi,0x7
  0012b:    	jne    0x321f6
  00131:    	cmp    DWORD PTR [rdi+0x4],0x28
  00135:    	jne    0x321f6
  0013b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5713],0x26        # 0xfffe5855
  00142:    	jne    0x321f6
  00148: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00151:    	mov    QWORD PTR [rsp-0x38],rcx
  00156:    	mov    rax,QWORD PTR [rbx]
  00159:    	lea    rsi,[rsp-0x18]
  0015e:    	mov    QWORD PTR [rsi],rax
  00161:    	mov    QWORD PTR [rbx],rsi
  00164:    	mov    rax,QWORD PTR [rbp-0x70]
  00168:    	mov    QWORD PTR [rsp-0x38],rax
  0016d: 00 	mov    rdi,0x1
  00174:    	lea    r8,[rsp-0x40]
  00179:    	mov    rax,QWORD PTR [rbp-0x78]
  0017d:    	mov    QWORD PTR [r8],rax
  00180:    	sub    r8,0x8
  00184: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0018d: 08 	movabs rax,0x800000040
  00197:    	mov    QWORD PTR [rsp-0x28],rax
  0019c: b5 	movabs r13,0x55b5b08082c0
  001a6:    	call   0xfffe6534
  001ab:    	lea    rdi,[rbp-0x8]
  001af:    	mov    QWORD PTR [rbx],rdi
  001b2: b5 	movabs r13,0x55b5b07be9e0
  001bc:    	test   rax,rax
  001bf:    	je     0xfffe276b
  001c5:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001c9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001cd: 00 	test   rdi,0x7
  001d4:    	jne    0x32205
  001da:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001de:    	jne    0x32205
  001e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe566a],0x26        # 0xfffe5855
  001eb:    	jne    0x32205
  001f1:    	mov    esi,DWORD PTR [rip+0x1ab9]        # 0x1cb0
  001f7:    	cmp    esi,0xffffffff
  001fa:    	je     0x32214
  00200:    	cmp    WORD PTR [rdi+0x2],0x3
  00205:    	jne    0x21e
  0020b:    	cmp    esi,0x6
  0020e:    	jge    0x21e
  00214:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00219:    	jmp    0x22a
  0021e: b5 	movabs rax,0x55b5b00a3ef0
  00228:    	call   rax
  0022a:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0022e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00232: 00 	test   rdi,0x7
  00239:    	jne    0x3223d
  0023f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00243:    	jne    0x3223d
  00249: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5605],0x26        # 0xfffe5855
  00250:    	jne    0x3223d
  00256: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0025f:    	mov    QWORD PTR [rsp-0x38],rcx
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rsi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rsi],rax
  0026f:    	mov    QWORD PTR [rbx],rsi
  00272:    	mov    rax,QWORD PTR [rbp-0x40]
  00276:    	mov    QWORD PTR [rsp-0x38],rax
  0027b: 00 	mov    rdi,0x1
  00282:    	lea    r8,[rsp-0x40]
  00287:    	mov    rax,QWORD PTR [rbp-0x70]
  0028b:    	mov    QWORD PTR [r8],rax
  0028e:    	sub    r8,0x8
  00292: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0029b: 05 	movabs rax,0x500000042
  002a5:    	mov    QWORD PTR [rsp-0x28],rax
  002aa: b5 	movabs r13,0x55b5b07ddec0
  002b4:    	call   0xfffe65c6
  002b9:    	lea    rdi,[rbp-0x8]
  002bd:    	mov    QWORD PTR [rbx],rdi
  002c0: b5 	movabs r13,0x55b5b07bea40
  002ca:    	test   rax,rax
  002cd:    	je     0xfffe276b
  002d3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002d7:    	mov    rax,QWORD PTR [rbp-0x40]
  002db:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002df:    	mov    rdi,QWORD PTR [rbp-0x40]
  002e3: 00 	test   rdi,0x7
  002ea:    	jne    0x3224c
  002f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  002f4:    	jne    0x3224c
  002fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5554],0x26        # 0xfffe5855
  00301:    	jne    0x3224c
  00307: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00310:    	mov    QWORD PTR [rsp-0x38],rcx
  00315:    	mov    rax,QWORD PTR [rbx]
  00318:    	lea    rsi,[rsp-0x18]
  0031d:    	mov    QWORD PTR [rsi],rax
  00320:    	mov    QWORD PTR [rbx],rsi
  00323:    	mov    rax,QWORD PTR [rbp-0x40]
  00327:    	mov    QWORD PTR [rsp-0x38],rax
  0032c: 00 	mov    rdi,0x1
  00333:    	lea    r8,[rsp-0x40]
  00338:    	mov    rax,QWORD PTR [rbp-0x78]
  0033c:    	mov    QWORD PTR [r8],rax
  0033f:    	sub    r8,0x8
  00343: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0034c: 05 	movabs rax,0x500000042
  00356:    	mov    QWORD PTR [rsp-0x28],rax
  0035b: b5 	movabs r13,0x55b5b07ddec0
  00365:    	call   0xfffe65c6
  0036a:    	lea    rdi,[rbp-0x8]
  0036e:    	mov    QWORD PTR [rbx],rdi
  00371: b5 	movabs r13,0x55b5b07bea80
  0037b:    	test   rax,rax
  0037e:    	je     0xfffe276b
  00384:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00388:    	mov    rdi,QWORD PTR [rbp-0x28]
  0038c:    	mov    rax,QWORD PTR [rdi+0x18]
  00390:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00394:    	mov    rdi,QWORD PTR [rbp-0x28]
  00398:    	mov    rax,QWORD PTR [rdi+0x18]
  0039c:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  003a0:    	mov    rdi,QWORD PTR [rbp-0x78]
  003a4: 00 	test   rdi,0x1
  003ab:    	jne    0x3225b
  003b1: 00 	test   rdi,0x2
  003b8:    	je     0x3f4
  003be:    	xorps  xmm2,xmm2
  003c1: 00 	movabs rax,0x8000000000000002
  003cb:    	cmp    rdi,rax
  003ce:    	je     0x406
  003d4:    	mov    rax,rdi
  003d7:    	sar    rax,0x3f
  003db:    	add    rax,0x2
  003df:    	and    rdi,0xfffffffffffffffc
  003e3:    	or     rdi,rax
  003e6:    	rol    rdi,0x3d
  003ea:    	movq   xmm2,rdi
  003ef:    	jmp    0x406
  003f4:    	call   0xfffe27c4
  003f9:    	test   rax,rax
  003fc:    	je     0x3225b
  00402:    	movq   xmm2,xmm0
  00406:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040a: 00 	test   rdi,0x1
  00411:    	jne    0x3226a
  00417: 00 	test   rdi,0x2
  0041e:    	je     0x45a
  00424:    	xorps  xmm3,xmm3
  00427: 00 	movabs rax,0x8000000000000002
  00431:    	cmp    rdi,rax
  00434:    	je     0x46c
  0043a:    	mov    rax,rdi
  0043d:    	sar    rax,0x3f
  00441:    	add    rax,0x2
  00445:    	and    rdi,0xfffffffffffffffc
  00449:    	or     rdi,rax
  0044c:    	rol    rdi,0x3d
  00450:    	movq   xmm3,rdi
  00455:    	jmp    0x46c
  0045a:    	call   0xfffe27c4
  0045f:    	test   rax,rax
  00462:    	je     0x3226a
  00468:    	movq   xmm3,xmm0
  0046c:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00470:    	mov    rdi,QWORD PTR [rbp-0x70]
  00474: 00 	test   rdi,0x1
  0047b:    	jne    0x32279
  00481: 00 	test   rdi,0x2
  00488:    	je     0x4c4
  0048e:    	xorps  xmm4,xmm4
  00491: 00 	movabs rax,0x8000000000000002
  0049b:    	cmp    rdi,rax
  0049e:    	je     0x4d6
  004a4:    	mov    rax,rdi
  004a7:    	sar    rax,0x3f
  004ab:    	add    rax,0x2
  004af:    	and    rdi,0xfffffffffffffffc
  004b3:    	or     rdi,rax
  004b6:    	rol    rdi,0x3d
  004ba:    	movq   xmm4,rdi
  004bf:    	jmp    0x4d6
  004c4:    	call   0xfffe27c4
  004c9:    	test   rax,rax
  004cc:    	je     0x32279
  004d2:    	movq   xmm4,xmm0
  004d6:    	movq   xmm5,xmm4
  004da:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004de:    	mov    rdi,QWORD PTR [rbp-0x48]
  004e2: 00 	test   rdi,0x1
  004e9:    	jne    0x32295
  004ef: 00 	test   rdi,0x2
  004f6:    	je     0x532
  004fc:    	xorps  xmm6,xmm6
  004ff: 00 	movabs rax,0x8000000000000002
  00509:    	cmp    rdi,rax
  0050c:    	je     0x544
  00512:    	mov    rax,rdi
  00515:    	sar    rax,0x3f
  00519:    	add    rax,0x2
  0051d:    	and    rdi,0xfffffffffffffffc
  00521:    	or     rdi,rax
  00524:    	rol    rdi,0x3d
  00528:    	movq   xmm6,rdi
  0052d:    	jmp    0x544
  00532:    	call   0xfffe27c4
  00537:    	test   rax,rax
  0053a:    	je     0x32295
  00540:    	movq   xmm6,xmm0
  00544:    	movq   xmm4,xmm6
  00548:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0054c:    	movq   xmm7,xmm4
  00550:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00554: 00 	movq   xmm4,QWORD PTR [rip+0x175c]        # 0x1cb8
  0055c: 00 	movabs rax,0x8000000000000002
  00566:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0056a:    	ucomisd xmm7,xmm4
  0056e:    	jbe    0x33802
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00574:    	movq   xmm4,xmm6
  00578: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1749]        # 0x1cc8
:00029 %11 = const[Math]                    [Math]
  0057f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe52e2]        # 0xfffe5868
  00586: 00 	cmp    rax,QWORD PTR [rip+0x175b]        # 0x1ce8
  0058d:    	jne    0x322be
  00593: 00 	mov    rax,QWORD PTR [rip+0x173e]        # 0x1cd8
  0059a:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  0059e:    	mov    rdi,QWORD PTR [rbp-0x80]
  005a2: 00 	test   rdi,0x7
  005a9:    	jne    0x32346
  005af:    	cmp    DWORD PTR [rdi+0x4],0x21
  005b3:    	jne    0x32346
  005b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5295],0x26        # 0xfffe5855
  005c0:    	jne    0x32346
  005c6:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005ca:    	movq   xmm3,xmm4
  005ce:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005d2: 00 	movq   xmm4,QWORD PTR [rip+0x171e]        # 0x1cf8
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e8:    	ucomisd xmm3,xmm4
  005ec:    	jbe    0x336c2
:00038 %9 = %2.call t()                     [<INVALID>]
  005f2: 01 	sub    DWORD PTR [rip+0x1707],0x1        # 0x1d00
  005f9:    	je     0x323cd
  005ff:    	sub    rsp,0x30
  00603:    	movq   QWORD PTR [rsp],xmm2
  00608:    	movq   QWORD PTR [rsp+0x8],xmm3
  0060e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00614:    	movq   QWORD PTR [rsp+0x18],xmm6
  0061a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00620:    	mov    rdi,QWORD PTR [rbp-0x38]
  00624: b5 	movabs rax,0x55b5b009e670
  0062e:    	call   rax
  00630:    	mov    r15d,eax
  00633: 00 	cmp    r15d,DWORD PTR [rip+0x16ce]        # 0x1d08
  0063a:    	jne    0x323ef
  00640:    	mov    eax,DWORD PTR [rip+0xfffffffffffe520f]        # 0xfffe5855
  00646:    	cmp    DWORD PTR [rip+0x16b8],eax        # 0x1d04
  0064c:    	jne    0x323ef
  00652: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0065b:    	mov    QWORD PTR [rsp-0x38],rcx
  00660:    	mov    rax,QWORD PTR [rbx]
  00663:    	lea    rsi,[rsp-0x18]
  00668:    	mov    QWORD PTR [rsi],rax
  0066b:    	mov    QWORD PTR [rbx],rsi
  0066e:    	mov    rax,QWORD PTR [rbp-0x38]
  00672:    	mov    QWORD PTR [rsp-0x38],rax
  00677: 00 	mov    rdi,0x0
  0067e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00687: 00 	movabs rax,0x0
  00691:    	mov    QWORD PTR [rsp-0x28],rax
  00696: 00 	movabs r13,0x0
  006a0:    	call   0xfffe2738
  006a5:    	lea    rdi,[rbp-0x8]
  006a9:    	mov    QWORD PTR [rbx],rdi
  006ac:    	movq   xmm2,QWORD PTR [rsp]
  006b1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006b7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006bd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006c3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  006c9:    	add    rsp,0x30
  006cd:    	test   rax,rax
  006d0:    	je     0x3245b
  006d6:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  006da:    	movq   xmm0,xmm3
  006de:    	call   0xfffe28e8
  006e3:    	mov    QWORD PTR [rbp-0x60],rax
  006e7:    	mov    rdi,QWORD PTR [rbp-0x60]
  006eb:    	mov    rsi,QWORD PTR [rbp-0x70]
  006ef: 00 	test   rdi,0x1
  006f6:    	je     0x3246a
  006fc: 00 	test   rsi,0x1
  00703:    	je     0x3246a
  00709:    	cmp    rdi,rsi
  0070c:    	jge    0x3374f
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  00712: 01 	sub    DWORD PTR [rip+0x15f3],0x1        # 0x1d0c
  00719:    	je     0x32508
  0071f:    	sub    rsp,0x30
  00723:    	movq   QWORD PTR [rsp],xmm2
  00728:    	movq   QWORD PTR [rsp+0x8],xmm3
  0072e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00734:    	movq   QWORD PTR [rsp+0x18],xmm6
  0073a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00740:    	mov    rdi,QWORD PTR [rbp-0x38]
  00744: b5 	movabs rax,0x55b5b009e670
  0074e:    	call   rax
  00750:    	mov    r15d,eax
  00753: 00 	cmp    r15d,DWORD PTR [rip+0x15ba]        # 0x1d14
  0075a:    	jne    0x3252a
  00760:    	mov    eax,DWORD PTR [rip+0xfffffffffffe50ef]        # 0xfffe5855
  00766:    	cmp    DWORD PTR [rip+0x15a4],eax        # 0x1d10
  0076c:    	jne    0x3252a
  00772: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0077b:    	mov    QWORD PTR [rsp-0x38],rcx
  00780:    	mov    rax,QWORD PTR [rbx]
  00783:    	lea    rsi,[rsp-0x18]
  00788:    	mov    QWORD PTR [rsi],rax
  0078b:    	mov    QWORD PTR [rbx],rsi
  0078e:    	mov    rax,QWORD PTR [rbp-0x38]
  00792:    	mov    QWORD PTR [rsp-0x38],rax
  00797: 00 	mov    rdi,0x1
  0079e:    	lea    r8,[rsp-0x40]
  007a3:    	mov    rax,QWORD PTR [rbp-0x60]
  007a7:    	mov    QWORD PTR [r8],rax
  007aa:    	sub    r8,0x8
  007ae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007b7: 00 	movabs rax,0x0
  007c1:    	mov    QWORD PTR [rsp-0x28],rax
  007c6: 00 	movabs r13,0x0
  007d0:    	call   0xfffe2738
  007d5:    	lea    rdi,[rbp-0x8]
  007d9:    	mov    QWORD PTR [rbx],rdi
  007dc:    	movq   xmm2,QWORD PTR [rsp]
  007e1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007e7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007ed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007f3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007f9:    	add    rsp,0x30
  007fd:    	test   rax,rax
  00800:    	je     0x32596
:00044 
:00046 %9 = literal[true]
  00806: 00 	mov    rax,0x1c
  0080d:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  00811: 01 	sub    DWORD PTR [rip+0x1500],0x1        # 0x1d18
  00818:    	je     0x325e2
  0081e:    	sub    rsp,0x30
  00822:    	movq   QWORD PTR [rsp],xmm2
  00827:    	movq   QWORD PTR [rsp+0x8],xmm3
  0082d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00833:    	movq   QWORD PTR [rsp+0x18],xmm6
  00839:    	movq   QWORD PTR [rsp+0x20],xmm7
  0083f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00843: b5 	movabs rax,0x55b5b009e670
  0084d:    	call   rax
  0084f:    	mov    r15d,eax
  00852: 00 	cmp    r15d,DWORD PTR [rip+0x14c7]        # 0x1d20
  00859:    	jne    0x32604
  0085f:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4ff0]        # 0xfffe5855
  00865:    	cmp    DWORD PTR [rip+0x14b1],eax        # 0x1d1c
  0086b:    	jne    0x32604
  00871: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0087a:    	mov    QWORD PTR [rsp-0x38],rcx
  0087f:    	mov    rax,QWORD PTR [rbx]
  00882:    	lea    rsi,[rsp-0x18]
  00887:    	mov    QWORD PTR [rsi],rax
  0088a:    	mov    QWORD PTR [rbx],rsi
  0088d:    	mov    rax,QWORD PTR [rbp-0x38]
  00891:    	mov    QWORD PTR [rsp-0x38],rax
  00896: 00 	mov    rdi,0x1
  0089d:    	lea    r8,[rsp-0x40]
  008a2:    	mov    rax,QWORD PTR [rbp-0x70]
  008a6:    	mov    QWORD PTR [r8],rax
  008a9:    	sub    r8,0x8
  008ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008b6: 00 	movabs rax,0x0
  008c0:    	mov    QWORD PTR [rsp-0x28],rax
  008c5: 00 	movabs r13,0x0
  008cf:    	call   0xfffe2738
  008d4:    	lea    rdi,[rbp-0x8]
  008d8:    	mov    QWORD PTR [rbx],rdi
  008db:    	movq   xmm2,QWORD PTR [rsp]
  008e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008e6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008ec:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008f2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  008f8:    	add    rsp,0x30
  008fc:    	test   rax,rax
  008ff:    	je     0x32670
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00905: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4f5c]        # 0xfffe5868
  0090c: 00 	cmp    rax,QWORD PTR [rip+0x1425]        # 0x1d38
  00913:    	jne    0x3267f
  00919: 00 	mov    rax,QWORD PTR [rip+0x1408]        # 0x1d28
  00920:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00924: 01 	sub    DWORD PTR [rip+0x1415],0x1        # 0x1d40
  0092b:    	je     0x3272b
  00931:    	sub    rsp,0x20
  00935:    	movq   QWORD PTR [rsp],xmm3
  0093a:    	movq   QWORD PTR [rsp+0x8],xmm5
  00940:    	movq   QWORD PTR [rsp+0x10],xmm6
  00946:    	movq   QWORD PTR [rsp+0x18],xmm7
  0094c:    	mov    rdi,QWORD PTR [rbp-0x30]
  00950: b5 	movabs rax,0x55b5b009e670
  0095a:    	call   rax
  0095c:    	mov    r15d,eax
  0095f: 00 	cmp    r15d,DWORD PTR [rip+0x13e2]        # 0x1d48
  00966:    	jne    0x3274d
  0096c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4ee3]        # 0xfffe5855
  00972:    	cmp    DWORD PTR [rip+0x13cc],eax        # 0x1d44
  00978:    	jne    0x3274d
  0097e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00987:    	mov    QWORD PTR [rsp-0x38],rcx
  0098c:    	mov    rax,QWORD PTR [rbx]
  0098f:    	lea    rsi,[rsp-0x18]
  00994:    	mov    QWORD PTR [rsi],rax
  00997:    	mov    QWORD PTR [rbx],rsi
  0099a:    	mov    rax,QWORD PTR [rbp-0x30]
  0099e:    	mov    QWORD PTR [rsp-0x38],rax
  009a3: 00 	mov    rdi,0x0
  009aa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009b3: 00 	movabs rax,0x0
  009bd:    	mov    QWORD PTR [rsp-0x28],rax
  009c2: 00 	movabs r13,0x0
  009cc:    	call   0xfffe2738
  009d1:    	lea    rdi,[rbp-0x8]
  009d5:    	mov    QWORD PTR [rbx],rdi
  009d8:    	movq   xmm3,QWORD PTR [rsp]
  009dd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009e3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009e9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009ef:    	add    rsp,0x20
  009f3:    	test   rax,rax
  009f6:    	je     0x327b9
  009fc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00a03: 01 	sub    DWORD PTR [rip+0x1342],0x1        # 0x1d4c
  00a0a:    	je     0x327f1
  00a10:    	sub    rsp,0x20
  00a14:    	movq   QWORD PTR [rsp],xmm3
  00a19:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a25:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a2b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00a32: b5 	movabs rax,0x55b5b009e670
  00a3c:    	call   rax
  00a3e:    	mov    r15d,eax
  00a41: 00 	cmp    r15d,DWORD PTR [rip+0x130c]        # 0x1d54
  00a48:    	jne    0x32813
  00a4e:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4e01]        # 0xfffe5855
  00a54:    	cmp    DWORD PTR [rip+0x12f6],eax        # 0x1d50
  00a5a:    	jne    0x32813
  00a60: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a69:    	mov    QWORD PTR [rsp-0x38],rcx
  00a6e:    	mov    rax,QWORD PTR [rbx]
  00a71:    	lea    rsi,[rsp-0x18]
  00a76:    	mov    QWORD PTR [rsi],rax
  00a79:    	mov    QWORD PTR [rbx],rsi
  00a7c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00a83:    	mov    QWORD PTR [rsp-0x38],rax
  00a88: 00 	mov    rdi,0x0
  00a8f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a98: 00 	movabs rax,0x0
  00aa2:    	mov    QWORD PTR [rsp-0x28],rax
  00aa7: 00 	movabs r13,0x0
  00ab1:    	call   0xfffe2738
  00ab6:    	lea    rdi,[rbp-0x8]
  00aba:    	mov    QWORD PTR [rbx],rdi
  00abd:    	movq   xmm3,QWORD PTR [rsp]
  00ac2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ac8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ace:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ad4:    	add    rsp,0x20
  00ad8:    	test   rax,rax
  00adb:    	je     0x32882
  00ae1:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00ae5: 01 	sub    DWORD PTR [rip+0x126c],0x1        # 0x1d58
  00aec:    	je     0x328ba
  00af2:    	sub    rsp,0x20
  00af6:    	movq   QWORD PTR [rsp],xmm3
  00afb:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b01:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b07:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b0d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b11: b5 	movabs rax,0x55b5b009e670
  00b1b:    	call   rax
  00b1d:    	mov    r15d,eax
  00b20: 00 	cmp    r15d,DWORD PTR [rip+0x1239]        # 0x1d60
  00b27:    	jne    0x328dc
  00b2d:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4d22]        # 0xfffe5855
  00b33:    	cmp    DWORD PTR [rip+0x1223],eax        # 0x1d5c
  00b39:    	jne    0x328dc
  00b3f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b48:    	mov    QWORD PTR [rsp-0x38],rcx
  00b4d:    	mov    rax,QWORD PTR [rbx]
  00b50:    	lea    rsi,[rsp-0x18]
  00b55:    	mov    QWORD PTR [rsi],rax
  00b58:    	mov    QWORD PTR [rbx],rsi
  00b5b:    	mov    rax,QWORD PTR [rbp-0x30]
  00b5f:    	mov    QWORD PTR [rsp-0x38],rax
  00b64: 00 	mov    rdi,0x0
  00b6b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b74: 00 	movabs rax,0x0
  00b7e:    	mov    QWORD PTR [rsp-0x28],rax
  00b83: 00 	movabs r13,0x0
  00b8d:    	call   0xfffe2738
  00b92:    	lea    rdi,[rbp-0x8]
  00b96:    	mov    QWORD PTR [rbx],rdi
  00b99:    	movq   xmm3,QWORD PTR [rsp]
  00b9e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ba4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00baa:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bb0:    	add    rsp,0x20
  00bb4:    	test   rax,rax
  00bb7:    	je     0x32948
  00bbd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00bc4: 01 	sub    DWORD PTR [rip+0x1199],0x1        # 0x1d64
  00bcb:    	je     0x32980
  00bd1:    	sub    rsp,0x20
  00bd5:    	movq   QWORD PTR [rsp],xmm3
  00bda:    	movq   QWORD PTR [rsp+0x8],xmm5
  00be0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00be6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00bec: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bf3: b5 	movabs rax,0x55b5b009e670
  00bfd:    	call   rax
  00bff:    	mov    r15d,eax
  00c02: 00 	cmp    r15d,DWORD PTR [rip+0x1163]        # 0x1d6c
  00c09:    	jne    0x329a2
  00c0f:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4c40]        # 0xfffe5855
  00c15:    	cmp    DWORD PTR [rip+0x114d],eax        # 0x1d68
  00c1b:    	jne    0x329a2
  00c21: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c2a:    	mov    QWORD PTR [rsp-0x38],rcx
  00c2f:    	mov    rax,QWORD PTR [rbx]
  00c32:    	lea    rsi,[rsp-0x18]
  00c37:    	mov    QWORD PTR [rsi],rax
  00c3a:    	mov    QWORD PTR [rbx],rsi
  00c3d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00c44:    	mov    QWORD PTR [rsp-0x38],rax
  00c49: 00 	mov    rdi,0x0
  00c50: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c59: 00 	movabs rax,0x0
  00c63:    	mov    QWORD PTR [rsp-0x28],rax
  00c68: 00 	movabs r13,0x0
  00c72:    	call   0xfffe2738
  00c77:    	lea    rdi,[rbp-0x8]
  00c7b:    	mov    QWORD PTR [rbx],rdi
  00c7e:    	movq   xmm3,QWORD PTR [rsp]
  00c83:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c89:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c8f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c95:    	add    rsp,0x20
  00c99:    	test   rax,rax
  00c9c:    	je     0x32a11
  00ca2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00ca9: 01 	sub    DWORD PTR [rip+0x10c0],0x1        # 0x1d70
  00cb0:    	je     0x32a49
  00cb6: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00cbd:    	mov    rsi,QWORD PTR [rbp-0x60]
  00cc1:    	sub    rsp,0x20
  00cc5:    	movq   QWORD PTR [rsp],xmm3
  00cca:    	movq   QWORD PTR [rsp+0x8],xmm5
  00cd0:    	movq   QWORD PTR [rsp+0x10],xmm6
  00cd6:    	movq   QWORD PTR [rsp+0x18],xmm7
  00cdc:    	mov    rdx,rdi
  00cdf:    	mov    rcx,rsi
  00ce2:    	mov    rdi,rbx
  00ce5:    	mov    rsi,r12
  00ce8: b5 	movabs rax,0x55b5b00e8b30
  00cf2:    	call   rax
  00cf4:    	movq   xmm3,QWORD PTR [rsp]
  00cf9:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00cff:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d05:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d0b:    	add    rsp,0x20
  00d0f: b5 	movabs r13,0x55b5b07bed70
  00d19:    	test   rax,rax
  00d1c:    	je     0xfffe276b
  00d22: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00d29: 01 	sub    DWORD PTR [rip+0x1044],0x1        # 0x1d74
  00d30:    	je     0x32a94
  00d36:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d3a: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00d41:    	sub    rsp,0x20
  00d45:    	movq   QWORD PTR [rsp],xmm3
  00d4a:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d50:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d56:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d5c:    	mov    rdx,rdi
  00d5f:    	mov    rcx,rsi
  00d62:    	mov    rdi,rbx
  00d65:    	mov    rsi,r12
  00d68: b5 	movabs rax,0x55b5b00e6cb0
  00d72:    	call   rax
  00d74:    	movq   xmm3,QWORD PTR [rsp]
  00d79:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d7f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d85:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d8b:    	add    rsp,0x20
  00d8f: b5 	movabs r13,0x55b5b07bed80
  00d99:    	test   rax,rax
  00d9c:    	je     0xfffe276b
  00da2:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00da6: 01 	sub    DWORD PTR [rip+0xfcb],0x1        # 0x1d78
  00dad:    	je     0x32adf
  00db3:    	sub    rsp,0x20
  00db7:    	movq   QWORD PTR [rsp],xmm3
  00dbc:    	movq   QWORD PTR [rsp+0x8],xmm5
  00dc2:    	movq   QWORD PTR [rsp+0x10],xmm6
  00dc8:    	movq   QWORD PTR [rsp+0x18],xmm7
  00dce:    	mov    rdi,QWORD PTR [rbp-0x30]
  00dd2: b5 	movabs rax,0x55b5b009e670
  00ddc:    	call   rax
  00dde:    	mov    r15d,eax
  00de1: 00 	cmp    r15d,DWORD PTR [rip+0xf98]        # 0x1d80
  00de8:    	jne    0x32b01
  00dee:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4a61]        # 0xfffe5855
  00df4:    	cmp    DWORD PTR [rip+0xf82],eax        # 0x1d7c
  00dfa:    	jne    0x32b01
  00e00: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e09:    	mov    QWORD PTR [rsp-0x38],rcx
  00e0e:    	mov    rax,QWORD PTR [rbx]
  00e11:    	lea    rsi,[rsp-0x18]
  00e16:    	mov    QWORD PTR [rsi],rax
  00e19:    	mov    QWORD PTR [rbx],rsi
  00e1c:    	mov    rax,QWORD PTR [rbp-0x30]
  00e20:    	mov    QWORD PTR [rsp-0x38],rax
  00e25: 00 	mov    rdi,0x0
  00e2c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e35: 00 	movabs rax,0x0
  00e3f:    	mov    QWORD PTR [rsp-0x28],rax
  00e44: 00 	movabs r13,0x0
  00e4e:    	call   0xfffe2738
  00e53:    	lea    rdi,[rbp-0x8]
  00e57:    	mov    QWORD PTR [rbx],rdi
  00e5a:    	movq   xmm3,QWORD PTR [rsp]
  00e5f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e65:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e6b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e71:    	add    rsp,0x20
  00e75:    	test   rax,rax
  00e78:    	je     0x32b6d
  00e7e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00e85: 01 	sub    DWORD PTR [rip+0xef8],0x1        # 0x1d84
  00e8c:    	je     0x32ba5
  00e92:    	sub    rsp,0x20
  00e96:    	movq   QWORD PTR [rsp],xmm3
  00e9b:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ea1:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ea7:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ead: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00eb4: b5 	movabs rax,0x55b5b009e670
  00ebe:    	call   rax
  00ec0:    	mov    r15d,eax
  00ec3: 00 	cmp    r15d,DWORD PTR [rip+0xec2]        # 0x1d8c
  00eca:    	jne    0x32bc7
  00ed0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe497f]        # 0xfffe5855
  00ed6:    	cmp    DWORD PTR [rip+0xeac],eax        # 0x1d88
  00edc:    	jne    0x32bc7
  00ee2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00eeb:    	mov    QWORD PTR [rsp-0x38],rcx
  00ef0:    	mov    rax,QWORD PTR [rbx]
  00ef3:    	lea    rsi,[rsp-0x18]
  00ef8:    	mov    QWORD PTR [rsi],rax
  00efb:    	mov    QWORD PTR [rbx],rsi
  00efe: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00f05:    	mov    QWORD PTR [rsp-0x38],rax
  00f0a: 00 	mov    rdi,0x0
  00f11: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f1a: 00 	movabs rax,0x0
  00f24:    	mov    QWORD PTR [rsp-0x28],rax
  00f29: 00 	movabs r13,0x0
  00f33:    	call   0xfffe2738
  00f38:    	lea    rdi,[rbp-0x8]
  00f3c:    	mov    QWORD PTR [rbx],rdi
  00f3f:    	movq   xmm3,QWORD PTR [rsp]
  00f44:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f4a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f50:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f56:    	add    rsp,0x20
  00f5a:    	test   rax,rax
  00f5d:    	je     0x32c36
  00f63: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  00f6a: 01 	sub    DWORD PTR [rip+0xe1f],0x1        # 0x1d90
  00f71:    	je     0x32c6e
  00f77:    	sub    rsp,0x20
  00f7b:    	movq   QWORD PTR [rsp],xmm3
  00f80:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f86:    	movq   QWORD PTR [rsp+0x10],xmm6
  00f8c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00f92:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f96: b5 	movabs rax,0x55b5b009e670
  00fa0:    	call   rax
  00fa2:    	mov    r15d,eax
  00fa5: 00 	cmp    r15d,DWORD PTR [rip+0xdec]        # 0x1d98
  00fac:    	jne    0x32c90
  00fb2:    	mov    eax,DWORD PTR [rip+0xfffffffffffe489d]        # 0xfffe5855
  00fb8:    	cmp    DWORD PTR [rip+0xdd6],eax        # 0x1d94
  00fbe:    	jne    0x32c90
  00fc4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fcd:    	mov    QWORD PTR [rsp-0x38],rcx
  00fd2:    	mov    rax,QWORD PTR [rbx]
  00fd5:    	lea    rsi,[rsp-0x18]
  00fda:    	mov    QWORD PTR [rsi],rax
  00fdd:    	mov    QWORD PTR [rbx],rsi
  00fe0:    	mov    rax,QWORD PTR [rbp-0x30]
  00fe4:    	mov    QWORD PTR [rsp-0x38],rax
  00fe9: 00 	mov    rdi,0x0
  00ff0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff9: 00 	movabs rax,0x0
  01003:    	mov    QWORD PTR [rsp-0x28],rax
  01008: 00 	movabs r13,0x0
  01012:    	call   0xfffe2738
  01017:    	lea    rdi,[rbp-0x8]
  0101b:    	mov    QWORD PTR [rbx],rdi
  0101e:    	movq   xmm3,QWORD PTR [rsp]
  01023:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01029:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0102f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01035:    	add    rsp,0x20
  01039:    	test   rax,rax
  0103c:    	je     0x32cfc
  01042: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01049: 01 	sub    DWORD PTR [rip+0xd4c],0x1        # 0x1d9c
  01050:    	je     0x32d34
  01056:    	sub    rsp,0x20
  0105a:    	movq   QWORD PTR [rsp],xmm3
  0105f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01065:    	movq   QWORD PTR [rsp+0x10],xmm6
  0106b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01071: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01078: b5 	movabs rax,0x55b5b009e670
  01082:    	call   rax
  01084:    	mov    r15d,eax
  01087: 00 	cmp    r15d,DWORD PTR [rip+0xd16]        # 0x1da4
  0108e:    	jne    0x32d56
  01094:    	mov    eax,DWORD PTR [rip+0xfffffffffffe47bb]        # 0xfffe5855
  0109a:    	cmp    DWORD PTR [rip+0xd00],eax        # 0x1da0
  010a0:    	jne    0x32d56
  010a6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010af:    	mov    QWORD PTR [rsp-0x38],rcx
  010b4:    	mov    rax,QWORD PTR [rbx]
  010b7:    	lea    rsi,[rsp-0x18]
  010bc:    	mov    QWORD PTR [rsi],rax
  010bf:    	mov    QWORD PTR [rbx],rsi
  010c2: ff 	mov    rax,QWORD PTR [rbp-0x98]
  010c9:    	mov    QWORD PTR [rsp-0x38],rax
  010ce: 00 	mov    rdi,0x0
  010d5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010de: 00 	movabs rax,0x0
  010e8:    	mov    QWORD PTR [rsp-0x28],rax
  010ed: 00 	movabs r13,0x0
  010f7:    	call   0xfffe2738
  010fc:    	lea    rdi,[rbp-0x8]
  01100:    	mov    QWORD PTR [rbx],rdi
  01103:    	movq   xmm3,QWORD PTR [rsp]
  01108:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0110e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01114:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0111a:    	add    rsp,0x20
  0111e:    	test   rax,rax
  01121:    	je     0x32dc5
  01127: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  0112e: 01 	sub    DWORD PTR [rip+0xc73],0x1        # 0x1da8
  01135:    	je     0x32dfd
  0113b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01142:    	mov    rsi,QWORD PTR [rbp-0x60]
  01146:    	sub    rsp,0x20
  0114a:    	movq   QWORD PTR [rsp],xmm3
  0114f:    	movq   QWORD PTR [rsp+0x8],xmm5
  01155:    	movq   QWORD PTR [rsp+0x10],xmm6
  0115b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01161:    	mov    rdx,rdi
  01164:    	mov    rcx,rsi
  01167:    	mov    rdi,rbx
  0116a:    	mov    rsi,r12
  0116d: b5 	movabs rax,0x55b5b00e8b30
  01177:    	call   rax
  01179:    	movq   xmm3,QWORD PTR [rsp]
  0117e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01184:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0118a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01190:    	add    rsp,0x20
  01194: b5 	movabs r13,0x55b5b07bee50
  0119e:    	test   rax,rax
  011a1:    	je     0xfffe276b
  011a7: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  011ae: 01 	sub    DWORD PTR [rip+0xbf7],0x1        # 0x1dac
  011b5:    	je     0x32e48
  011bb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011c2: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  011c9:    	sub    rsp,0x20
  011cd:    	movq   QWORD PTR [rsp],xmm3
  011d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  011d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  011de:    	movq   QWORD PTR [rsp+0x18],xmm7
  011e4:    	mov    rdx,rdi
  011e7:    	mov    rcx,rsi
  011ea:    	mov    rdi,rbx
  011ed:    	mov    rsi,r12
  011f0: b5 	movabs rax,0x55b5b00e6cb0
  011fa:    	call   rax
  011fc:    	movq   xmm3,QWORD PTR [rsp]
  01201:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01207:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0120d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01213:    	add    rsp,0x20
  01217: b5 	movabs r13,0x55b5b07bee60
  01221:    	test   rax,rax
  01224:    	je     0xfffe276b
  0122a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  01231: 01 	sub    DWORD PTR [rip+0xb78],0x1        # 0x1db0
  01238:    	je     0x32e93
  0123e:    	sub    rsp,0x20
  01242:    	movq   QWORD PTR [rsp],xmm3
  01247:    	movq   QWORD PTR [rsp+0x8],xmm5
  0124d:    	movq   QWORD PTR [rsp+0x10],xmm6
  01253:    	movq   QWORD PTR [rsp+0x18],xmm7
  01259:    	mov    rdi,QWORD PTR [rbp-0x30]
  0125d: b5 	movabs rax,0x55b5b009e670
  01267:    	call   rax
  01269:    	mov    r15d,eax
  0126c: 00 	cmp    r15d,DWORD PTR [rip+0xb45]        # 0x1db8
  01273:    	jne    0x32eb5
  01279:    	mov    eax,DWORD PTR [rip+0xfffffffffffe45d6]        # 0xfffe5855
  0127f:    	cmp    DWORD PTR [rip+0xb2f],eax        # 0x1db4
  01285:    	jne    0x32eb5
  0128b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01294:    	mov    QWORD PTR [rsp-0x38],rcx
  01299:    	mov    rax,QWORD PTR [rbx]
  0129c:    	lea    rsi,[rsp-0x18]
  012a1:    	mov    QWORD PTR [rsi],rax
  012a4:    	mov    QWORD PTR [rbx],rsi
  012a7:    	mov    rax,QWORD PTR [rbp-0x30]
  012ab:    	mov    QWORD PTR [rsp-0x38],rax
  012b0: 00 	mov    rdi,0x0
  012b7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012c0: 00 	movabs rax,0x0
  012ca:    	mov    QWORD PTR [rsp-0x28],rax
  012cf: 00 	movabs r13,0x0
  012d9:    	call   0xfffe2738
  012de:    	lea    rdi,[rbp-0x8]
  012e2:    	mov    QWORD PTR [rbx],rdi
  012e5:    	movq   xmm3,QWORD PTR [rsp]
  012ea:    	movq   xmm5,QWORD PTR [rsp+0x8]
  012f0:    	movq   xmm6,QWORD PTR [rsp+0x10]
  012f6:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012fc:    	add    rsp,0x20
  01300:    	test   rax,rax
  01303:    	je     0x32f21
  01309: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  01310: 01 	sub    DWORD PTR [rip+0xaa5],0x1        # 0x1dbc
  01317:    	je     0x32f59
  0131d:    	sub    rsp,0x20
  01321:    	movq   QWORD PTR [rsp],xmm3
  01326:    	movq   QWORD PTR [rsp+0x8],xmm5
  0132c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01332:    	movq   QWORD PTR [rsp+0x18],xmm7
  01338: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0133f: b5 	movabs rax,0x55b5b009e670
  01349:    	call   rax
  0134b:    	mov    r15d,eax
  0134e: 00 	cmp    r15d,DWORD PTR [rip+0xa6f]        # 0x1dc4
  01355:    	jne    0x32f7b
  0135b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe44f4]        # 0xfffe5855
  01361:    	cmp    DWORD PTR [rip+0xa59],eax        # 0x1dc0
  01367:    	jne    0x32f7b
  0136d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01376:    	mov    QWORD PTR [rsp-0x38],rcx
  0137b:    	mov    rax,QWORD PTR [rbx]
  0137e:    	lea    rsi,[rsp-0x18]
  01383:    	mov    QWORD PTR [rsi],rax
  01386:    	mov    QWORD PTR [rbx],rsi
  01389: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01390:    	mov    QWORD PTR [rsp-0x38],rax
  01395: 00 	mov    rdi,0x0
  0139c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013a5: 00 	movabs rax,0x0
  013af:    	mov    QWORD PTR [rsp-0x28],rax
  013b4: 00 	movabs r13,0x0
  013be:    	call   0xfffe2738
  013c3:    	lea    rdi,[rbp-0x8]
  013c7:    	mov    QWORD PTR [rbx],rdi
  013ca:    	movq   xmm3,QWORD PTR [rsp]
  013cf:    	movq   xmm5,QWORD PTR [rsp+0x8]
  013d5:    	movq   xmm6,QWORD PTR [rsp+0x10]
  013db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  013e1:    	add    rsp,0x20
  013e5:    	test   rax,rax
  013e8:    	je     0x32fea
  013ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  013f5: 01 	sub    DWORD PTR [rip+0x9cc],0x1        # 0x1dc8
  013fc:    	je     0x33022
  01402:    	sub    rsp,0x20
  01406:    	movq   QWORD PTR [rsp],xmm3
  0140b:    	movq   QWORD PTR [rsp+0x8],xmm5
  01411:    	movq   QWORD PTR [rsp+0x10],xmm6
  01417:    	movq   QWORD PTR [rsp+0x18],xmm7
  0141d:    	mov    rdi,QWORD PTR [rbp-0x30]
  01421: b5 	movabs rax,0x55b5b009e670
  0142b:    	call   rax
  0142d:    	mov    r15d,eax
  01430: 00 	cmp    r15d,DWORD PTR [rip+0x999]        # 0x1dd0
  01437:    	jne    0x33044
  0143d:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4412]        # 0xfffe5855
  01443:    	cmp    DWORD PTR [rip+0x983],eax        # 0x1dcc
  01449:    	jne    0x33044
  0144f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01458:    	mov    QWORD PTR [rsp-0x38],rcx
  0145d:    	mov    rax,QWORD PTR [rbx]
  01460:    	lea    rsi,[rsp-0x18]
  01465:    	mov    QWORD PTR [rsi],rax
  01468:    	mov    QWORD PTR [rbx],rsi
  0146b:    	mov    rax,QWORD PTR [rbp-0x30]
  0146f:    	mov    QWORD PTR [rsp-0x38],rax
  01474: 00 	mov    rdi,0x0
  0147b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01484: 00 	movabs rax,0x0
  0148e:    	mov    QWORD PTR [rsp-0x28],rax
  01493: 00 	movabs r13,0x0
  0149d:    	call   0xfffe2738
  014a2:    	lea    rdi,[rbp-0x8]
  014a6:    	mov    QWORD PTR [rbx],rdi
  014a9:    	movq   xmm3,QWORD PTR [rsp]
  014ae:    	movq   xmm5,QWORD PTR [rsp+0x8]
  014b4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  014ba:    	movq   xmm7,QWORD PTR [rsp+0x18]
  014c0:    	add    rsp,0x20
  014c4:    	test   rax,rax
  014c7:    	je     0x330b0
  014cd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  014d4: 01 	sub    DWORD PTR [rip+0x8f9],0x1        # 0x1dd4
  014db:    	je     0x330e8
  014e1:    	sub    rsp,0x20
  014e5:    	movq   QWORD PTR [rsp],xmm3
  014ea:    	movq   QWORD PTR [rsp+0x8],xmm5
  014f0:    	movq   QWORD PTR [rsp+0x10],xmm6
  014f6:    	movq   QWORD PTR [rsp+0x18],xmm7
  014fc: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01503: b5 	movabs rax,0x55b5b009e670
  0150d:    	call   rax
  0150f:    	mov    r15d,eax
  01512: 00 	cmp    r15d,DWORD PTR [rip+0x8c3]        # 0x1ddc
  01519:    	jne    0x3310a
  0151f:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4330]        # 0xfffe5855
  01525:    	cmp    DWORD PTR [rip+0x8ad],eax        # 0x1dd8
  0152b:    	jne    0x3310a
  01531: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0153a:    	mov    QWORD PTR [rsp-0x38],rcx
  0153f:    	mov    rax,QWORD PTR [rbx]
  01542:    	lea    rsi,[rsp-0x18]
  01547:    	mov    QWORD PTR [rsi],rax
  0154a:    	mov    QWORD PTR [rbx],rsi
  0154d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01554:    	mov    QWORD PTR [rsp-0x38],rax
  01559: 00 	mov    rdi,0x0
  01560: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01569: 00 	movabs rax,0x0
  01573:    	mov    QWORD PTR [rsp-0x28],rax
  01578: 00 	movabs r13,0x0
  01582:    	call   0xfffe2738
  01587:    	lea    rdi,[rbp-0x8]
  0158b:    	mov    QWORD PTR [rbx],rdi
  0158e:    	movq   xmm3,QWORD PTR [rsp]
  01593:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01599:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0159f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015a5:    	add    rsp,0x20
  015a9:    	test   rax,rax
  015ac:    	je     0x33179
  015b2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  015b9: 01 	sub    DWORD PTR [rip+0x820],0x1        # 0x1de0
  015c0:    	je     0x331b1
  015c6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015cd:    	mov    rsi,QWORD PTR [rbp-0x60]
  015d1:    	sub    rsp,0x20
  015d5:    	movq   QWORD PTR [rsp],xmm3
  015da:    	movq   QWORD PTR [rsp+0x8],xmm5
  015e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  015e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  015ec:    	mov    rdx,rdi
  015ef:    	mov    rcx,rsi
  015f2:    	mov    rdi,rbx
  015f5:    	mov    rsi,r12
  015f8: b5 	movabs rax,0x55b5b00e8b30
  01602:    	call   rax
  01604:    	movq   xmm3,QWORD PTR [rsp]
  01609:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0160f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01615:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0161b:    	add    rsp,0x20
  0161f: b5 	movabs r13,0x55b5b07bef30
  01629:    	test   rax,rax
  0162c:    	je     0xfffe276b
  01632: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  01639: 01 	sub    DWORD PTR [rip+0x7a4],0x1        # 0x1de4
  01640:    	je     0x331fc
  01646: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0164d: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01654:    	sub    rsp,0x20
  01658:    	movq   QWORD PTR [rsp],xmm3
  0165d:    	movq   QWORD PTR [rsp+0x8],xmm5
  01663:    	movq   QWORD PTR [rsp+0x10],xmm6
  01669:    	movq   QWORD PTR [rsp+0x18],xmm7
  0166f:    	mov    rdx,rdi
  01672:    	mov    rcx,rsi
  01675:    	mov    rdi,rbx
  01678:    	mov    rsi,r12
  0167b: b5 	movabs rax,0x55b5b00e6cb0
  01685:    	call   rax
  01687:    	movq   xmm3,QWORD PTR [rsp]
  0168c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01692:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01698:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0169e:    	add    rsp,0x20
  016a2: b5 	movabs r13,0x55b5b07bef40
  016ac:    	test   rax,rax
  016af:    	je     0xfffe276b
  016b5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  016bc: 01 	sub    DWORD PTR [rip+0x725],0x1        # 0x1de8
  016c3:    	je     0x33247
  016c9:    	sub    rsp,0x20
  016cd:    	movq   QWORD PTR [rsp],xmm3
  016d2:    	movq   QWORD PTR [rsp+0x8],xmm5
  016d8:    	movq   QWORD PTR [rsp+0x10],xmm6
  016de:    	movq   QWORD PTR [rsp+0x18],xmm7
  016e4:    	mov    rdi,QWORD PTR [rbp-0x78]
  016e8: b5 	movabs rax,0x55b5b009e670
  016f2:    	call   rax
  016f4:    	mov    r15d,eax
  016f7: 00 	cmp    r15d,DWORD PTR [rip+0x6f2]        # 0x1df0
  016fe:    	jne    0x33269
  01704:    	mov    eax,DWORD PTR [rip+0xfffffffffffe414b]        # 0xfffe5855
  0170a:    	cmp    DWORD PTR [rip+0x6dc],eax        # 0x1dec
  01710:    	jne    0x33269
  01716: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0171f:    	mov    QWORD PTR [rsp-0x38],rcx
  01724:    	mov    rax,QWORD PTR [rbx]
  01727:    	lea    rsi,[rsp-0x18]
  0172c:    	mov    QWORD PTR [rsi],rax
  0172f:    	mov    QWORD PTR [rbx],rsi
  01732:    	mov    rax,QWORD PTR [rbp-0x78]
  01736:    	mov    QWORD PTR [rsp-0x38],rax
  0173b: 00 	mov    rdi,0x3
  01742:    	lea    r8,[rsp-0x40]
  01747:    	mov    rax,QWORD PTR [rbp-0x80]
  0174b:    	mov    QWORD PTR [r8],rax
  0174e:    	sub    r8,0x8
  01752: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01759:    	mov    QWORD PTR [r8],rax
  0175c:    	sub    r8,0x8
  01760: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01767:    	mov    QWORD PTR [r8],rax
  0176a:    	sub    r8,0x8
  0176e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01777: 00 	movabs rax,0x0
  01781:    	mov    QWORD PTR [rsp-0x28],rax
  01786: 00 	movabs r13,0x0
  01790:    	call   0xfffe2738
  01795:    	lea    rdi,[rbp-0x8]
  01799:    	mov    QWORD PTR [rbx],rdi
  0179c:    	movq   xmm3,QWORD PTR [rsp]
  017a1:    	movq   xmm5,QWORD PTR [rsp+0x8]
  017a7:    	movq   xmm6,QWORD PTR [rsp+0x10]
  017ad:    	movq   xmm7,QWORD PTR [rsp+0x18]
  017b3:    	add    rsp,0x20
  017b7:    	test   rax,rax
  017ba:    	je     0x332d5
  017c0:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  017c4: 01 	sub    DWORD PTR [rip+0x629],0x1        # 0x1df4
  017cb:    	je     0x3330d
  017d1:    	sub    rsp,0x20
  017d5:    	movq   QWORD PTR [rsp],xmm3
  017da:    	movq   QWORD PTR [rsp+0x8],xmm5
  017e0:    	movq   QWORD PTR [rsp+0x10],xmm6
  017e6:    	movq   QWORD PTR [rsp+0x18],xmm7
  017ec:    	mov    rdi,QWORD PTR [rbp-0x38]
  017f0: b5 	movabs rax,0x55b5b009e670
  017fa:    	call   rax
  017fc:    	mov    r15d,eax
  017ff: 00 	cmp    r15d,DWORD PTR [rip+0x5f6]        # 0x1dfc
  01806:    	jne    0x3332f
  0180c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4043]        # 0xfffe5855
  01812:    	cmp    DWORD PTR [rip+0x5e0],eax        # 0x1df8
  01818:    	jne    0x3332f
  0181e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01827:    	mov    QWORD PTR [rsp-0x38],rcx
  0182c:    	mov    rax,QWORD PTR [rbx]
  0182f:    	lea    rsi,[rsp-0x18]
  01834:    	mov    QWORD PTR [rsi],rax
  01837:    	mov    QWORD PTR [rbx],rsi
  0183a:    	mov    rax,QWORD PTR [rbp-0x38]
  0183e:    	mov    QWORD PTR [rsp-0x38],rax
  01843: 00 	mov    rdi,0x1
  0184a:    	lea    r8,[rsp-0x40]
  0184f:    	mov    rax,QWORD PTR [rbp-0x70]
  01853:    	mov    QWORD PTR [r8],rax
  01856:    	sub    r8,0x8
  0185a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01863: 00 	movabs rax,0x0
  0186d:    	mov    QWORD PTR [rsp-0x28],rax
  01872: 00 	movabs r13,0x0
  0187c:    	call   0xfffe2738
  01881:    	lea    rdi,[rbp-0x8]
  01885:    	mov    QWORD PTR [rbx],rdi
  01888:    	movq   xmm3,QWORD PTR [rsp]
  0188d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01893:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01899:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0189f:    	add    rsp,0x20
  018a3:    	test   rax,rax
  018a6:    	je     0x3339b
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  018ac: 01 	sub    DWORD PTR [rip+0x54d],0x1        # 0x1e00
  018b3:    	je     0x333d3
  018b9:    	sub    rsp,0x20
  018bd:    	movq   QWORD PTR [rsp],xmm3
  018c2:    	movq   QWORD PTR [rsp+0x8],xmm5
  018c8:    	movq   QWORD PTR [rsp+0x10],xmm6
  018ce:    	movq   QWORD PTR [rsp+0x18],xmm7
  018d4:    	mov    rdi,QWORD PTR [rbp-0x38]
  018d8: b5 	movabs rax,0x55b5b009e670
  018e2:    	call   rax
  018e4:    	mov    r15d,eax
  018e7: 00 	cmp    r15d,DWORD PTR [rip+0x51a]        # 0x1e08
  018ee:    	jne    0x333f5
  018f4:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3f5b]        # 0xfffe5855
  018fa:    	cmp    DWORD PTR [rip+0x504],eax        # 0x1e04
  01900:    	jne    0x333f5
  01906: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0190f:    	mov    QWORD PTR [rsp-0x38],rcx
  01914:    	mov    rax,QWORD PTR [rbx]
  01917:    	lea    rsi,[rsp-0x18]
  0191c:    	mov    QWORD PTR [rsi],rax
  0191f:    	mov    QWORD PTR [rbx],rsi
  01922:    	mov    rax,QWORD PTR [rbp-0x38]
  01926:    	mov    QWORD PTR [rsp-0x38],rax
  0192b: 00 	mov    rdi,0x0
  01932: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0193b: 00 	movabs rax,0x0
  01945:    	mov    QWORD PTR [rsp-0x28],rax
  0194a: 00 	movabs r13,0x0
  01954:    	call   0xfffe2738
  01959:    	lea    rdi,[rbp-0x8]
  0195d:    	mov    QWORD PTR [rbx],rdi
  01960:    	movq   xmm3,QWORD PTR [rsp]
  01965:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0196b:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01971:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01977:    	add    rsp,0x20
  0197b:    	test   rax,rax
  0197e:    	je     0x33461
  01984:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  01988:    	mov    rdi,QWORD PTR [rbp-0x28]
  0198c:    	sub    rsp,0x20
  01990:    	movq   QWORD PTR [rsp],xmm3
  01995:    	movq   QWORD PTR [rsp+0x8],xmm5
  0199b:    	movq   QWORD PTR [rsp+0x10],xmm6
  019a1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019a7: 00 	mov    rsi,0x90
  019ae:    	mov    rdx,r12
  019b1: b5 	movabs rax,0x55b5b0091cc0
  019bb:    	call   rax
  019bd:    	movq   xmm3,QWORD PTR [rsp]
  019c2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  019c8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  019ce:    	movq   xmm7,QWORD PTR [rsp+0x18]
  019d4:    	add    rsp,0x20
  019d8:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  019dc: 01 	sub    DWORD PTR [rip+0x429],0x1        # 0x1e0c
  019e3:    	je     0x33499
  019e9:    	sub    rsp,0x20
  019ed:    	movq   QWORD PTR [rsp],xmm3
  019f2:    	movq   QWORD PTR [rsp+0x8],xmm5
  019f8:    	movq   QWORD PTR [rsp+0x10],xmm6
  019fe:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a04:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a08: b5 	movabs rax,0x55b5b009e670
  01a12:    	call   rax
  01a14:    	mov    r15d,eax
  01a17: 00 	cmp    r15d,DWORD PTR [rip+0x3f6]        # 0x1e14
  01a1e:    	jne    0x334bb
  01a24:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3e2b]        # 0xfffe5855
  01a2a:    	cmp    DWORD PTR [rip+0x3e0],eax        # 0x1e10
  01a30:    	jne    0x334bb
  01a36: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a3f:    	mov    QWORD PTR [rsp-0x38],rcx
  01a44:    	mov    rax,QWORD PTR [rbx]
  01a47:    	lea    rsi,[rsp-0x18]
  01a4c:    	mov    QWORD PTR [rsi],rax
  01a4f:    	mov    QWORD PTR [rbx],rsi
  01a52:    	mov    rax,QWORD PTR [rbp-0x70]
  01a56:    	mov    QWORD PTR [rsp-0x38],rax
  01a5b: 00 	mov    rdi,0x1
  01a62:    	lea    r8,[rsp-0x40]
  01a67:    	mov    rax,QWORD PTR [rbp-0x78]
  01a6b:    	mov    QWORD PTR [r8],rax
  01a6e:    	sub    r8,0x8
  01a72: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a7b: 00 	movabs rax,0x0
  01a85:    	mov    QWORD PTR [rsp-0x28],rax
  01a8a: 00 	movabs r13,0x0
  01a94:    	call   0xfffe2738
  01a99:    	lea    rdi,[rbp-0x8]
  01a9d:    	mov    QWORD PTR [rbx],rdi
  01aa0:    	movq   xmm3,QWORD PTR [rsp]
  01aa5:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01aab:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01ab1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ab7:    	add    rsp,0x20
  01abb:    	test   rax,rax
  01abe:    	je     0x33527
  01ac4:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01ac8: 01 	sub    DWORD PTR [rip+0x349],0x1        # 0x1e18
  01acf:    	je     0x3355f
  01ad5:    	sub    rsp,0x20
  01ad9:    	movq   QWORD PTR [rsp],xmm3
  01ade:    	movq   QWORD PTR [rsp+0x8],xmm5
  01ae4:    	movq   QWORD PTR [rsp+0x10],xmm6
  01aea:    	movq   QWORD PTR [rsp+0x18],xmm7
  01af0:    	mov    rdi,QWORD PTR [rbp-0x68]
  01af4: b5 	movabs rax,0x55b5b009e670
  01afe:    	call   rax
  01b00:    	mov    r15d,eax
  01b03: 00 	cmp    r15d,DWORD PTR [rip+0x316]        # 0x1e20
  01b0a:    	jne    0x33581
  01b10:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3d3f]        # 0xfffe5855
  01b16:    	cmp    DWORD PTR [rip+0x300],eax        # 0x1e1c
  01b1c:    	jne    0x33581
  01b22: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b2b:    	mov    QWORD PTR [rsp-0x38],rcx
  01b30:    	mov    rax,QWORD PTR [rbx]
  01b33:    	lea    rsi,[rsp-0x18]
  01b38:    	mov    QWORD PTR [rsi],rax
  01b3b:    	mov    QWORD PTR [rbx],rsi
  01b3e:    	mov    rax,QWORD PTR [rbp-0x68]
  01b42:    	mov    QWORD PTR [rsp-0x38],rax
  01b47: 00 	mov    rdi,0x0
  01b4e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b57: 00 	movabs rax,0x0
  01b61:    	mov    QWORD PTR [rsp-0x28],rax
  01b66: 00 	movabs r13,0x0
  01b70:    	call   0xfffe2738
  01b75:    	lea    rdi,[rbp-0x8]
  01b79:    	mov    QWORD PTR [rbx],rdi
  01b7c:    	movq   xmm3,QWORD PTR [rsp]
  01b81:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01b87:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01b8d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b93:    	add    rsp,0x20
  01b97:    	test   rax,rax
  01b9a:    	je     0x335ed
  01ba0:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01ba4: 01 	sub    DWORD PTR [rip+0x279],0x1        # 0x1e24
  01bab:    	je     0x33625
  01bb1:    	sub    rsp,0x20
  01bb5:    	movq   QWORD PTR [rsp],xmm3
  01bba:    	movq   QWORD PTR [rsp+0x8],xmm5
  01bc0:    	movq   QWORD PTR [rsp+0x10],xmm6
  01bc6:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bcc:    	mov    rdi,QWORD PTR [rbp-0x38]
  01bd0: b5 	movabs rax,0x55b5b009e670
  01bda:    	call   rax
  01bdc:    	mov    r15d,eax
  01bdf: 00 	cmp    r15d,DWORD PTR [rip+0x246]        # 0x1e2c
  01be6:    	jne    0x33647
  01bec:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3c63]        # 0xfffe5855
  01bf2:    	cmp    DWORD PTR [rip+0x230],eax        # 0x1e28
  01bf8:    	jne    0x33647
  01bfe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c07:    	mov    QWORD PTR [rsp-0x38],rcx
  01c0c:    	mov    rax,QWORD PTR [rbx]
  01c0f:    	lea    rsi,[rsp-0x18]
  01c14:    	mov    QWORD PTR [rsi],rax
  01c17:    	mov    QWORD PTR [rbx],rsi
  01c1a:    	mov    rax,QWORD PTR [rbp-0x38]
  01c1e:    	mov    QWORD PTR [rsp-0x38],rax
  01c23: 00 	mov    rdi,0x1
  01c2a:    	lea    r8,[rsp-0x40]
  01c2f:    	mov    rax,QWORD PTR [rbp-0x70]
  01c33:    	mov    QWORD PTR [r8],rax
  01c36:    	sub    r8,0x8
  01c3a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c43: 00 	movabs rax,0x0
  01c4d:    	mov    QWORD PTR [rsp-0x28],rax
  01c52: 00 	movabs r13,0x0
  01c5c:    	call   0xfffe2738
  01c61:    	lea    rdi,[rbp-0x8]
  01c65:    	mov    QWORD PTR [rbx],rdi
  01c68:    	movq   xmm3,QWORD PTR [rsp]
  01c6d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01c73:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01c79:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c7f:    	add    rsp,0x20
  01c83:    	test   rax,rax
  01c86:    	je     0x336b3
:00110 
:00112 br =>:00113
  01c8c:    	jmp    0x337cf
:00113 br =>:00114
  01c91:    	jmp    0x33842
:00114 %9 = nil
  01c96: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c9e:    	mov    rax,QWORD PTR [rbp-0x70]
  01ca2:    	leave  
  01ca3:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55b5b07c4d60
<== finished compile. elapsed:177µs
offset:Pos(128760) code: 6650 bytes  data: 374 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x31a45
  00022:    	jmp    0x31a45
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x31a54
  00097:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0009b:    	jne    0x31a54
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a5:    	mov    rax,QWORD PTR [rdi+0x10]
  000a9:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  000ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  000b1:    	mov    rax,QWORD PTR [rdi+0x18]
  000b5:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  000bd: 00 	test   rdi,0x7
  000c4:    	jne    0x31a63
  000ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  000ce:    	jne    0x31a63
  000d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe394a],0x26        # 0xfffe3a25
  000db:    	jne    0x31a63
  000e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000ea:    	mov    QWORD PTR [rsp-0x38],rcx
  000ef:    	mov    rax,QWORD PTR [rbx]
  000f2:    	lea    rsi,[rsp-0x18]
  000f7:    	mov    QWORD PTR [rsi],rax
  000fa:    	mov    QWORD PTR [rbx],rsi
  000fd:    	mov    rax,QWORD PTR [rbp-0x60]
  00101:    	mov    QWORD PTR [rsp-0x38],rax
  00106: 00 	mov    rdi,0x1
  0010d:    	lea    r8,[rsp-0x40]
  00112:    	mov    rax,QWORD PTR [rbp-0x68]
  00116:    	mov    QWORD PTR [r8],rax
  00119:    	sub    r8,0x8
  0011d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00126: 05 	movabs rax,0x1000500000042
  00130:    	mov    QWORD PTR [rsp-0x28],rax
  00135: b5 	movabs r13,0x55b5b07ddec0
  0013f:    	call   0xfffe4796
  00144:    	lea    rdi,[rbp-0x8]
  00148:    	mov    QWORD PTR [rbx],rdi
  0014b: b5 	movabs r13,0x55b5b07c4db0
  00155:    	test   rax,rax
  00158:    	je     0xfffe093b
  0015e:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00162:    	mov    rdi,QWORD PTR [rbp-0x40]
  00166: 00 	test   rdi,0x1
  0016d:    	jne    0x31a72
  00173: 00 	test   rdi,0x2
  0017a:    	je     0x1b6
  00180:    	xorps  xmm2,xmm2
  00183: 00 	movabs rax,0x8000000000000002
  0018d:    	cmp    rdi,rax
  00190:    	je     0x1c8
  00196:    	mov    rax,rdi
  00199:    	sar    rax,0x3f
  0019d:    	add    rax,0x2
  001a1:    	and    rdi,0xfffffffffffffffc
  001a5:    	or     rdi,rax
  001a8:    	rol    rdi,0x3d
  001ac:    	movq   xmm2,rdi
  001b1:    	jmp    0x1c8
  001b6:    	call   0xfffe0994
  001bb:    	test   rax,rax
  001be:    	je     0x31a72
  001c4:    	movq   xmm2,xmm0
  001c8: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1839]        # 0x1a08
:00007 %7 = %1.call dir()                   [Ray]
  001cf:    	mov    rdi,QWORD PTR [rbp-0x30]
  001d3: 00 	test   rdi,0x7
  001da:    	jne    0x31a81
  001e0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001e4:    	jne    0x31a81
  001ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3834],0x26        # 0xfffe3a25
  001f1:    	jne    0x31a81
  001f7:    	mov    esi,DWORD PTR [rip+0x1817]        # 0x1a14
  001fd:    	cmp    esi,0xffffffff
  00200:    	je     0x31a9d
  00206:    	cmp    WORD PTR [rdi+0x2],0x3
  0020b:    	jne    0x224
  00211:    	cmp    esi,0x6
  00214:    	jge    0x224
  0021a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0021f:    	jmp    0x242
  00224:    	sub    rsp,0x10
  00228:    	movq   QWORD PTR [rsp],xmm2
  0022d: b5 	movabs rax,0x55b5b00a3ef0
  00237:    	call   rax
  00239:    	movq   xmm2,QWORD PTR [rsp]
  0023e:    	add    rsp,0x10
  00242:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00246:    	mov    rdi,QWORD PTR [rbp-0x28]
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x31ad8
  00263:    	cmp    DWORD PTR [rdi+0x4],0x28
  00267:    	jne    0x31ad8
  0026d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe37b1],0x26        # 0xfffe3a25
  00274:    	jne    0x31ad8
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028c:    	mov    QWORD PTR [rsp-0x38],rcx
  00291:    	mov    rax,QWORD PTR [rbx]
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rsi],rax
  0029c:    	mov    QWORD PTR [rbx],rsi
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	lea    r8,[rsp-0x40]
  002b4:    	mov    rax,QWORD PTR [rbp-0x68]
  002b8:    	mov    QWORD PTR [r8],rax
  002bb:    	sub    r8,0x8
  002bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c8: 05 	movabs rax,0x1000500000042
  002d2:    	mov    QWORD PTR [rsp-0x28],rax
  002d7: b5 	movabs r13,0x55b5b07ddec0
  002e1:    	call   0xfffe4796
  002e6:    	lea    rdi,[rbp-0x8]
  002ea:    	mov    QWORD PTR [rbx],rdi
  002ed:    	movq   xmm2,QWORD PTR [rsp]
  002f2:    	add    rsp,0x10
  002f6: b5 	movabs r13,0x55b5b07c4e30
  00300:    	test   rax,rax
  00303:    	je     0xfffe093b
  00309:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  0030d:    	mov    rax,QWORD PTR [rbp-0x48]
  00311:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  00315: 00 	movq   xmm3,QWORD PTR [rip+0x16fb]        # 0x1a18
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0032b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0032f: 00 	test   rdi,0x1
  00336:    	jne    0x31af4
  0033c: 00 	test   rdi,0x2
  00343:    	je     0x37f
  00349:    	xorps  xmm4,xmm4
  0034c: 00 	movabs rax,0x8000000000000002
  00356:    	cmp    rdi,rax
  00359:    	je     0x391
  0035f:    	mov    rax,rdi
  00362:    	sar    rax,0x3f
  00366:    	add    rax,0x2
  0036a:    	and    rdi,0xfffffffffffffffc
  0036e:    	or     rdi,rax
  00371:    	rol    rdi,0x3d
  00375:    	movq   xmm4,rdi
  0037a:    	jmp    0x391
  0037f:    	call   0xfffe0994
  00384:    	test   rax,rax
  00387:    	je     0x31af4
  0038d:    	movq   xmm4,xmm0
  00391:    	ucomisd xmm4,xmm3
  00395:    	jae    0x31b10
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0039b:    	movq   xmm5,xmm4
  0039f: 00 	xorps  xmm5,XMMWORD PTR [rip+0x1682]        # 0x1a28
:00020 br =>:00021
  003a6:    	jmp    0x31b36
:00021 %7 = literal[1e-17]
  003ab: 00 	movq   xmm3,QWORD PTR [rip+0x1685]        # 0x1a38
  003b3: aa 	movabs rax,0xe33877aa3236a4ba
  003bd:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003c1:    	mov    rdi,QWORD PTR [rbp-0x50]
  003c5: 00 	test   rdi,0x1
  003cc:    	jne    0x31b69
  003d2: 00 	test   rdi,0x2
  003d9:    	je     0x415
  003df:    	xorps  xmm5,xmm5
  003e2: 00 	movabs rax,0x8000000000000002
  003ec:    	cmp    rdi,rax
  003ef:    	je     0x427
  003f5:    	mov    rax,rdi
  003f8:    	sar    rax,0x3f
  003fc:    	add    rax,0x2
  00400:    	and    rdi,0xfffffffffffffffc
  00404:    	or     rdi,rax
  00407:    	rol    rdi,0x3d
  0040b:    	movq   xmm5,rdi
  00410:    	jmp    0x427
  00415:    	call   0xfffe0994
  0041a:    	test   rax,rax
  0041d:    	je     0x31b69
  00423:    	movq   xmm5,xmm0
  00427:    	ucomisd xmm5,xmm3
  0042b:    	jae    0x43f
:00024 %7 = nil
  00431: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00439:    	mov    rax,QWORD PTR [rbp-0x60]
  0043d:    	leave  
  0043e:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  0043f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00443: 00 	test   rdi,0x7
  0044a:    	jne    0x31b85
  00450:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00454:    	jne    0x31b85
  0045a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe35c4],0x26        # 0xfffe3a25
  00461:    	jne    0x31b85
  00467:    	mov    esi,DWORD PTR [rip+0x15d7]        # 0x1a44
  0046d:    	cmp    esi,0xffffffff
  00470:    	je     0x31ba1
  00476:    	cmp    WORD PTR [rdi+0x2],0x3
  0047b:    	jne    0x494
  00481:    	cmp    esi,0x6
  00484:    	jge    0x494
  0048a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0048f:    	jmp    0x4d6
  00494:    	sub    rsp,0x20
  00498:    	movq   QWORD PTR [rsp],xmm2
  0049d:    	movq   QWORD PTR [rsp+0x8],xmm3
  004a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  004a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  004af: b5 	movabs rax,0x55b5b00a3ef0
  004b9:    	call   rax
  004bb:    	movq   xmm2,QWORD PTR [rsp]
  004c0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004c6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004cc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004d2:    	add    rsp,0x20
  004d6:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004da:    	mov    rdi,QWORD PTR [rbp-0x28]
  004de:    	mov    rax,QWORD PTR [rdi+0x18]
  004e2:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004e6:    	mov    rdi,QWORD PTR [rbp-0x68]
  004ea: 00 	test   rdi,0x7
  004f1:    	jne    0x31c00
  004f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  004fb:    	jne    0x31c00
  00501: 26 	cmp    DWORD PTR [rip+0xfffffffffffe351d],0x26        # 0xfffe3a25
  00508:    	jne    0x31c00
  0050e:    	sub    rsp,0x20
  00512:    	movq   QWORD PTR [rsp],xmm2
  00517:    	movq   QWORD PTR [rsp+0x8],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00523: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0052c:    	mov    QWORD PTR [rsp-0x38],rcx
  00531:    	mov    rax,QWORD PTR [rbx]
  00534:    	lea    rsi,[rsp-0x18]
  00539:    	mov    QWORD PTR [rsi],rax
  0053c:    	mov    QWORD PTR [rbx],rsi
  0053f:    	mov    rax,QWORD PTR [rbp-0x68]
  00543:    	mov    QWORD PTR [rsp-0x38],rax
  00548: 00 	mov    rdi,0x1
  0054f:    	lea    r8,[rsp-0x40]
  00554:    	mov    rax,QWORD PTR [rbp-0x70]
  00558:    	mov    QWORD PTR [r8],rax
  0055b:    	sub    r8,0x8
  0055f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00568: 05 	movabs rax,0x1000500000042
  00572:    	mov    QWORD PTR [rsp-0x28],rax
  00577: b5 	movabs r13,0x55b5b07ddec0
  00581:    	call   0xfffe4796
  00586:    	lea    rdi,[rbp-0x8]
  0058a:    	mov    QWORD PTR [rbx],rdi
  0058d:    	movq   xmm2,QWORD PTR [rsp]
  00592:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00598:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0059e:    	add    rsp,0x20
  005a2: b5 	movabs r13,0x55b5b07c4f70
  005ac:    	test   rax,rax
  005af:    	je     0xfffe093b
  005b5:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  005bd: 00 	test   rdi,0x1
  005c4:    	jne    0x31c1c
  005ca: 00 	test   rdi,0x2
  005d1:    	je     0x60d
  005d7:    	xorps  xmm3,xmm3
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	cmp    rdi,rax
  005e7:    	je     0x61f
  005ed:    	mov    rax,rdi
  005f0:    	sar    rax,0x3f
  005f4:    	add    rax,0x2
  005f8:    	and    rdi,0xfffffffffffffffc
  005fc:    	or     rdi,rax
  005ff:    	rol    rdi,0x3d
  00603:    	movq   xmm3,rdi
  00608:    	jmp    0x61f
  0060d:    	call   0xfffe0994
  00612:    	test   rax,rax
  00615:    	je     0x31c1c
  0061b:    	movq   xmm3,xmm0
  0061f:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00623: 00 	xorps  xmm3,XMMWORD PTR [rip+0x141e]        # 0x1a48
:00036 %6 = %7 / %4                         [Float][Float]
  0062a:    	movq   xmm6,xmm3
  0062e:    	movq   rax,xmm4
  00633:    	test   rax,rax
  00636:    	je     0xfffe0960
  0063c:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00640: 00 	movq   xmm3,QWORD PTR [rip+0x1410]        # 0x1a58
  00648: 00 	movabs rax,0x8000000000000002
  00652:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00656:    	ucomisd xmm6,xmm3
  0065a:    	jbe    0x32b95
:00040 %7 = %2.call t()                     [<INVALID>]
  00660: 01 	sub    DWORD PTR [rip+0x13f9],0x1        # 0x1a60
  00667:    	je     0x31c61
  0066d:    	sub    rsp,0x20
  00671:    	movq   QWORD PTR [rsp],xmm2
  00676:    	movq   QWORD PTR [rsp+0x8],xmm4
  0067c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00682:    	movq   QWORD PTR [rsp+0x18],xmm6
  00688:    	mov    rdi,QWORD PTR [rbp-0x38]
  0068c: b5 	movabs rax,0x55b5b009e670
  00696:    	call   rax
  00698:    	mov    r15d,eax
  0069b: 00 	cmp    r15d,DWORD PTR [rip+0x13c6]        # 0x1a68
  006a2:    	jne    0x31c83
  006a8:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3377]        # 0xfffe3a25
  006ae:    	cmp    DWORD PTR [rip+0x13b0],eax        # 0x1a64
  006b4:    	jne    0x31c83
  006ba: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006c3:    	mov    QWORD PTR [rsp-0x38],rcx
  006c8:    	mov    rax,QWORD PTR [rbx]
  006cb:    	lea    rsi,[rsp-0x18]
  006d0:    	mov    QWORD PTR [rsi],rax
  006d3:    	mov    QWORD PTR [rbx],rsi
  006d6:    	mov    rax,QWORD PTR [rbp-0x38]
  006da:    	mov    QWORD PTR [rsp-0x38],rax
  006df: 00 	mov    rdi,0x0
  006e6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006ef: 00 	movabs rax,0x0
  006f9:    	mov    QWORD PTR [rsp-0x28],rax
  006fe: 00 	movabs r13,0x0
  00708:    	call   0xfffe0908
  0070d:    	lea    rdi,[rbp-0x8]
  00711:    	mov    QWORD PTR [rbx],rdi
  00714:    	movq   xmm2,QWORD PTR [rsp]
  00719:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0071f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00725:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0072b:    	add    rsp,0x20
  0072f:    	test   rax,rax
  00732:    	je     0x31cef
  00738:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  0073c:    	movq   xmm0,xmm6
  00740:    	call   0xfffe0ab8
  00745:    	mov    QWORD PTR [rbp-0x58],rax
  00749:    	mov    rdi,QWORD PTR [rbp-0x58]
  0074d:    	mov    rsi,QWORD PTR [rbp-0x60]
  00751: 00 	test   rdi,0x1
  00758:    	je     0x31cfe
  0075e: 00 	test   rsi,0x1
  00765:    	je     0x31cfe
  0076b:    	cmp    rdi,rsi
  0076e:    	jge    0x32bc8
:00045 %7 = literal[true]
  00774: 00 	mov    rax,0x1c
  0077b:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  0077f: 01 	sub    DWORD PTR [rip+0x12e6],0x1        # 0x1a6c
  00786:    	je     0x31d6f
  0078c:    	sub    rsp,0x20
  00790:    	movq   QWORD PTR [rsp],xmm2
  00795:    	movq   QWORD PTR [rsp+0x8],xmm4
  0079b:    	movq   QWORD PTR [rsp+0x10],xmm5
  007a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  007a7:    	mov    rdi,QWORD PTR [rbp-0x38]
  007ab: b5 	movabs rax,0x55b5b009e670
  007b5:    	call   rax
  007b7:    	mov    r15d,eax
  007ba: 00 	cmp    r15d,DWORD PTR [rip+0x12b3]        # 0x1a74
  007c1:    	jne    0x31d91
  007c7:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3258]        # 0xfffe3a25
  007cd:    	cmp    DWORD PTR [rip+0x129d],eax        # 0x1a70
  007d3:    	jne    0x31d91
  007d9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007e2:    	mov    QWORD PTR [rsp-0x38],rcx
  007e7:    	mov    rax,QWORD PTR [rbx]
  007ea:    	lea    rsi,[rsp-0x18]
  007ef:    	mov    QWORD PTR [rsi],rax
  007f2:    	mov    QWORD PTR [rbx],rsi
  007f5:    	mov    rax,QWORD PTR [rbp-0x38]
  007f9:    	mov    QWORD PTR [rsp-0x38],rax
  007fe: 00 	mov    rdi,0x1
  00805:    	lea    r8,[rsp-0x40]
  0080a:    	mov    rax,QWORD PTR [rbp-0x60]
  0080e:    	mov    QWORD PTR [r8],rax
  00811:    	sub    r8,0x8
  00815: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0081e: 00 	movabs rax,0x0
  00828:    	mov    QWORD PTR [rsp-0x28],rax
  0082d: 00 	movabs r13,0x0
  00837:    	call   0xfffe0908
  0083c:    	lea    rdi,[rbp-0x8]
  00840:    	mov    QWORD PTR [rbx],rdi
  00843:    	movq   xmm2,QWORD PTR [rsp]
  00848:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0084e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00854:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0085a:    	add    rsp,0x20
  0085e:    	test   rax,rax
  00861:    	je     0x31dfd
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  00867: 01 	sub    DWORD PTR [rip+0x120a],0x1        # 0x1a78
  0086e:    	je     0x31e28
  00874:    	sub    rsp,0x20
  00878:    	movq   QWORD PTR [rsp],xmm2
  0087d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00883:    	movq   QWORD PTR [rsp+0x10],xmm5
  00889:    	movq   QWORD PTR [rsp+0x18],xmm6
  0088f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00893: b5 	movabs rax,0x55b5b009e670
  0089d:    	call   rax
  0089f:    	mov    r15d,eax
  008a2: 00 	cmp    r15d,DWORD PTR [rip+0x11d7]        # 0x1a80
  008a9:    	jne    0x31e4a
  008af:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3170]        # 0xfffe3a25
  008b5:    	cmp    DWORD PTR [rip+0x11c1],eax        # 0x1a7c
  008bb:    	jne    0x31e4a
  008c1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008ca:    	mov    QWORD PTR [rsp-0x38],rcx
  008cf:    	mov    rax,QWORD PTR [rbx]
  008d2:    	lea    rsi,[rsp-0x18]
  008d7:    	mov    QWORD PTR [rsi],rax
  008da:    	mov    QWORD PTR [rbx],rsi
  008dd:    	mov    rax,QWORD PTR [rbp-0x38]
  008e1:    	mov    QWORD PTR [rsp-0x38],rax
  008e6: 00 	mov    rdi,0x1
  008ed:    	lea    r8,[rsp-0x40]
  008f2:    	mov    rax,QWORD PTR [rbp-0x58]
  008f6:    	mov    QWORD PTR [r8],rax
  008f9:    	sub    r8,0x8
  008fd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00906: 00 	movabs rax,0x0
  00910:    	mov    QWORD PTR [rsp-0x28],rax
  00915: 00 	movabs r13,0x0
  0091f:    	call   0xfffe0908
  00924:    	lea    rdi,[rbp-0x8]
  00928:    	mov    QWORD PTR [rbx],rdi
  0092b:    	movq   xmm2,QWORD PTR [rsp]
  00930:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00936:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0093c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00942:    	add    rsp,0x20
  00946:    	test   rax,rax
  00949:    	je     0x31eb6
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  0094f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00953:    	sub    rsp,0x20
  00957:    	movq   QWORD PTR [rsp],xmm2
  0095c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00962:    	movq   QWORD PTR [rsp+0x10],xmm5
  00968:    	movq   QWORD PTR [rsp+0x18],xmm6
  0096e: 00 	mov    rsi,0x97
  00975:    	mov    rdx,r12
  00978: b5 	movabs rax,0x55b5b0091cc0
  00982:    	call   rax
  00984:    	movq   xmm2,QWORD PTR [rsp]
  00989:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0098f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00995:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0099b:    	add    rsp,0x20
  0099f:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  009a3: 01 	sub    DWORD PTR [rip+0x10da],0x1        # 0x1a84
  009aa:    	je     0x31ee1
  009b0:    	sub    rsp,0x20
  009b4:    	movq   QWORD PTR [rsp],xmm2
  009b9:    	movq   QWORD PTR [rsp+0x8],xmm4
  009bf:    	movq   QWORD PTR [rsp+0x10],xmm5
  009c5:    	movq   QWORD PTR [rsp+0x18],xmm6
  009cb:    	mov    rdi,QWORD PTR [rbp-0x38]
  009cf: b5 	movabs rax,0x55b5b009e670
  009d9:    	call   rax
  009db:    	mov    r15d,eax
  009de: 00 	cmp    r15d,DWORD PTR [rip+0x10a7]        # 0x1a8c
  009e5:    	jne    0x31f03
  009eb:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3034]        # 0xfffe3a25
  009f1:    	cmp    DWORD PTR [rip+0x1091],eax        # 0x1a88
  009f7:    	jne    0x31f03
  009fd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a06:    	mov    QWORD PTR [rsp-0x38],rcx
  00a0b:    	mov    rax,QWORD PTR [rbx]
  00a0e:    	lea    rsi,[rsp-0x18]
  00a13:    	mov    QWORD PTR [rsi],rax
  00a16:    	mov    QWORD PTR [rbx],rsi
  00a19:    	mov    rax,QWORD PTR [rbp-0x38]
  00a1d:    	mov    QWORD PTR [rsp-0x38],rax
  00a22: 00 	mov    rdi,0x1
  00a29:    	lea    r8,[rsp-0x40]
  00a2e:    	mov    rax,QWORD PTR [rbp-0x60]
  00a32:    	mov    QWORD PTR [r8],rax
  00a35:    	sub    r8,0x8
  00a39: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a42: 00 	movabs rax,0x0
  00a4c:    	mov    QWORD PTR [rsp-0x28],rax
  00a51: 00 	movabs r13,0x0
  00a5b:    	call   0xfffe0908
  00a60:    	lea    rdi,[rbp-0x8]
  00a64:    	mov    QWORD PTR [rbx],rdi
  00a67:    	movq   xmm2,QWORD PTR [rsp]
  00a6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a7e:    	add    rsp,0x20
  00a82:    	test   rax,rax
  00a85:    	je     0x31f6f
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00a8b: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe2fa6]        # 0xfffe3a38
  00a92: 00 	cmp    rax,QWORD PTR [rip+0x100f]        # 0x1aa8
  00a99:    	jne    0x31f7e
  00a9f: 00 	mov    rax,QWORD PTR [rip+0xff2]        # 0x1a98
  00aa6:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00aaa: 01 	sub    DWORD PTR [rip+0xfff],0x1        # 0x1ab0
  00ab1:    	je     0x32016
  00ab7:    	sub    rsp,0x20
  00abb:    	movq   QWORD PTR [rsp],xmm2
  00ac0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ac6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00acc:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ad2:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ad6: b5 	movabs rax,0x55b5b009e670
  00ae0:    	call   rax
  00ae2:    	mov    r15d,eax
  00ae5: 00 	cmp    r15d,DWORD PTR [rip+0xfcc]        # 0x1ab8
  00aec:    	jne    0x32038
  00af2:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2f2d]        # 0xfffe3a25
  00af8:    	cmp    DWORD PTR [rip+0xfb6],eax        # 0x1ab4
  00afe:    	jne    0x32038
  00b04: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b0d:    	mov    QWORD PTR [rsp-0x38],rcx
  00b12:    	mov    rax,QWORD PTR [rbx]
  00b15:    	lea    rsi,[rsp-0x18]
  00b1a:    	mov    QWORD PTR [rsi],rax
  00b1d:    	mov    QWORD PTR [rbx],rsi
  00b20:    	mov    rax,QWORD PTR [rbp-0x30]
  00b24:    	mov    QWORD PTR [rsp-0x38],rax
  00b29: 00 	mov    rdi,0x0
  00b30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b39: 00 	movabs rax,0x0
  00b43:    	mov    QWORD PTR [rsp-0x28],rax
  00b48: 00 	movabs r13,0x0
  00b52:    	call   0xfffe0908
  00b57:    	lea    rdi,[rbp-0x8]
  00b5b:    	mov    QWORD PTR [rbx],rdi
  00b5e:    	movq   xmm2,QWORD PTR [rsp]
  00b63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b6f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b75:    	add    rsp,0x20
  00b79:    	test   rax,rax
  00b7c:    	je     0x320a4
  00b82:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00b86: 01 	sub    DWORD PTR [rip+0xf2f],0x1        # 0x1abc
  00b8d:    	je     0x320cf
  00b93:    	sub    rsp,0x20
  00b97:    	movq   QWORD PTR [rsp],xmm2
  00b9c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ba2:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ba8:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bae:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bb2: b5 	movabs rax,0x55b5b009e670
  00bbc:    	call   rax
  00bbe:    	mov    r15d,eax
  00bc1: 00 	cmp    r15d,DWORD PTR [rip+0xefc]        # 0x1ac4
  00bc8:    	jne    0x320f1
  00bce:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2e51]        # 0xfffe3a25
  00bd4:    	cmp    DWORD PTR [rip+0xee6],eax        # 0x1ac0
  00bda:    	jne    0x320f1
  00be0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00be9:    	mov    QWORD PTR [rsp-0x38],rcx
  00bee:    	mov    rax,QWORD PTR [rbx]
  00bf1:    	lea    rsi,[rsp-0x18]
  00bf6:    	mov    QWORD PTR [rsi],rax
  00bf9:    	mov    QWORD PTR [rbx],rsi
  00bfc:    	mov    rax,QWORD PTR [rbp-0x78]
  00c00:    	mov    QWORD PTR [rsp-0x38],rax
  00c05: 00 	mov    rdi,0x0
  00c0c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c15: 00 	movabs rax,0x0
  00c1f:    	mov    QWORD PTR [rsp-0x28],rax
  00c24: 00 	movabs r13,0x0
  00c2e:    	call   0xfffe0908
  00c33:    	lea    rdi,[rbp-0x8]
  00c37:    	mov    QWORD PTR [rbx],rdi
  00c3a:    	movq   xmm2,QWORD PTR [rsp]
  00c3f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c45:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c4b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c51:    	add    rsp,0x20
  00c55:    	test   rax,rax
  00c58:    	je     0x3215d
  00c5e:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c62: 01 	sub    DWORD PTR [rip+0xe5f],0x1        # 0x1ac8
  00c69:    	je     0x32188
  00c6f:    	sub    rsp,0x20
  00c73:    	movq   QWORD PTR [rsp],xmm2
  00c78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c7e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c84:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c8a:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c8e: b5 	movabs rax,0x55b5b009e670
  00c98:    	call   rax
  00c9a:    	mov    r15d,eax
  00c9d: 00 	cmp    r15d,DWORD PTR [rip+0xe2c]        # 0x1ad0
  00ca4:    	jne    0x321aa
  00caa:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2d75]        # 0xfffe3a25
  00cb0:    	cmp    DWORD PTR [rip+0xe16],eax        # 0x1acc
  00cb6:    	jne    0x321aa
  00cbc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cc5:    	mov    QWORD PTR [rsp-0x38],rcx
  00cca:    	mov    rax,QWORD PTR [rbx]
  00ccd:    	lea    rsi,[rsp-0x18]
  00cd2:    	mov    QWORD PTR [rsi],rax
  00cd5:    	mov    QWORD PTR [rbx],rsi
  00cd8:    	mov    rax,QWORD PTR [rbp-0x30]
  00cdc:    	mov    QWORD PTR [rsp-0x38],rax
  00ce1: 00 	mov    rdi,0x0
  00ce8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cf1: 00 	movabs rax,0x0
  00cfb:    	mov    QWORD PTR [rsp-0x28],rax
  00d00: 00 	movabs r13,0x0
  00d0a:    	call   0xfffe0908
  00d0f:    	lea    rdi,[rbp-0x8]
  00d13:    	mov    QWORD PTR [rbx],rdi
  00d16:    	movq   xmm2,QWORD PTR [rsp]
  00d1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d27:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d2d:    	add    rsp,0x20
  00d31:    	test   rax,rax
  00d34:    	je     0x32216
  00d3a:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00d3e: 01 	sub    DWORD PTR [rip+0xd8f],0x1        # 0x1ad4
  00d45:    	je     0x32241
  00d4b:    	sub    rsp,0x20
  00d4f:    	movq   QWORD PTR [rsp],xmm2
  00d54:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d5a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d60:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d66:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d6a: b5 	movabs rax,0x55b5b009e670
  00d74:    	call   rax
  00d76:    	mov    r15d,eax
  00d79: 00 	cmp    r15d,DWORD PTR [rip+0xd5c]        # 0x1adc
  00d80:    	jne    0x32263
  00d86:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2c99]        # 0xfffe3a25
  00d8c:    	cmp    DWORD PTR [rip+0xd46],eax        # 0x1ad8
  00d92:    	jne    0x32263
  00d98: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00da1:    	mov    QWORD PTR [rsp-0x38],rcx
  00da6:    	mov    rax,QWORD PTR [rbx]
  00da9:    	lea    rsi,[rsp-0x18]
  00dae:    	mov    QWORD PTR [rsi],rax
  00db1:    	mov    QWORD PTR [rbx],rsi
  00db4:    	mov    rax,QWORD PTR [rbp-0x80]
  00db8:    	mov    QWORD PTR [rsp-0x38],rax
  00dbd: 00 	mov    rdi,0x0
  00dc4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dcd: 00 	movabs rax,0x0
  00dd7:    	mov    QWORD PTR [rsp-0x28],rax
  00ddc: 00 	movabs r13,0x0
  00de6:    	call   0xfffe0908
  00deb:    	lea    rdi,[rbp-0x8]
  00def:    	mov    QWORD PTR [rbx],rdi
  00df2:    	movq   xmm2,QWORD PTR [rsp]
  00df7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dfd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e03:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e09:    	add    rsp,0x20
  00e0d:    	test   rax,rax
  00e10:    	je     0x322cf
  00e16:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e1a: 01 	sub    DWORD PTR [rip+0xcbf],0x1        # 0x1ae0
  00e21:    	je     0x322fa
  00e27:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e2b:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e2f:    	sub    rsp,0x20
  00e33:    	movq   QWORD PTR [rsp],xmm2
  00e38:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e3e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e44:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e4a:    	mov    rdx,rdi
  00e4d:    	mov    rcx,rsi
  00e50:    	mov    rdi,rbx
  00e53:    	mov    rsi,r12
  00e56: b5 	movabs rax,0x55b5b00e8b30
  00e60:    	call   rax
  00e62:    	movq   xmm2,QWORD PTR [rsp]
  00e67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e6d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e73:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e79:    	add    rsp,0x20
  00e7d: b5 	movabs r13,0x55b5b07c51c0
  00e87:    	test   rax,rax
  00e8a:    	je     0xfffe093b
  00e90:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00e94: 01 	sub    DWORD PTR [rip+0xc49],0x1        # 0x1ae4
  00e9b:    	je     0x32338
  00ea1:    	mov    rdi,QWORD PTR [rbp-0x70]
  00ea5:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ea9:    	sub    rsp,0x20
  00ead:    	movq   QWORD PTR [rsp],xmm2
  00eb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ebe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec4:    	mov    rdx,rdi
  00ec7:    	mov    rcx,rsi
  00eca:    	mov    rdi,rbx
  00ecd:    	mov    rsi,r12
  00ed0: b5 	movabs rax,0x55b5b00e6cb0
  00eda:    	call   rax
  00edc:    	movq   xmm2,QWORD PTR [rsp]
  00ee1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ee7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef3:    	add    rsp,0x20
  00ef7: b5 	movabs r13,0x55b5b07c51d0
  00f01:    	test   rax,rax
  00f04:    	je     0xfffe093b
  00f0a:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f0e: 01 	sub    DWORD PTR [rip+0xbd3],0x1        # 0x1ae8
  00f15:    	je     0x32376
  00f1b:    	sub    rsp,0x20
  00f1f:    	movq   QWORD PTR [rsp],xmm2
  00f24:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f2a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f30:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f36:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f3a: b5 	movabs rax,0x55b5b009e670
  00f44:    	call   rax
  00f46:    	mov    r15d,eax
  00f49: 00 	cmp    r15d,DWORD PTR [rip+0xba0]        # 0x1af0
  00f50:    	jne    0x32398
  00f56:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2ac9]        # 0xfffe3a25
  00f5c:    	cmp    DWORD PTR [rip+0xb8a],eax        # 0x1aec
  00f62:    	jne    0x32398
  00f68: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f71:    	mov    QWORD PTR [rsp-0x38],rcx
  00f76:    	mov    rax,QWORD PTR [rbx]
  00f79:    	lea    rsi,[rsp-0x18]
  00f7e:    	mov    QWORD PTR [rsi],rax
  00f81:    	mov    QWORD PTR [rbx],rsi
  00f84:    	mov    rax,QWORD PTR [rbp-0x30]
  00f88:    	mov    QWORD PTR [rsp-0x38],rax
  00f8d: 00 	mov    rdi,0x0
  00f94: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f9d: 00 	movabs rax,0x0
  00fa7:    	mov    QWORD PTR [rsp-0x28],rax
  00fac: 00 	movabs r13,0x0
  00fb6:    	call   0xfffe0908
  00fbb:    	lea    rdi,[rbp-0x8]
  00fbf:    	mov    QWORD PTR [rbx],rdi
  00fc2:    	movq   xmm2,QWORD PTR [rsp]
  00fc7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fcd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fd3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fd9:    	add    rsp,0x20
  00fdd:    	test   rax,rax
  00fe0:    	je     0x32404
  00fe6:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  00fea: 01 	sub    DWORD PTR [rip+0xb03],0x1        # 0x1af4
  00ff1:    	je     0x3242f
  00ff7:    	sub    rsp,0x20
  00ffb:    	movq   QWORD PTR [rsp],xmm2
  01000:    	movq   QWORD PTR [rsp+0x8],xmm4
  01006:    	movq   QWORD PTR [rsp+0x10],xmm5
  0100c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01012:    	mov    rdi,QWORD PTR [rbp-0x80]
  01016: b5 	movabs rax,0x55b5b009e670
  01020:    	call   rax
  01022:    	mov    r15d,eax
  01025: 00 	cmp    r15d,DWORD PTR [rip+0xad0]        # 0x1afc
  0102c:    	jne    0x32451
  01032:    	mov    eax,DWORD PTR [rip+0xfffffffffffe29ed]        # 0xfffe3a25
  01038:    	cmp    DWORD PTR [rip+0xaba],eax        # 0x1af8
  0103e:    	jne    0x32451
  01044: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0104d:    	mov    QWORD PTR [rsp-0x38],rcx
  01052:    	mov    rax,QWORD PTR [rbx]
  01055:    	lea    rsi,[rsp-0x18]
  0105a:    	mov    QWORD PTR [rsi],rax
  0105d:    	mov    QWORD PTR [rbx],rsi
  01060:    	mov    rax,QWORD PTR [rbp-0x80]
  01064:    	mov    QWORD PTR [rsp-0x38],rax
  01069: 00 	mov    rdi,0x0
  01070: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01079: 00 	movabs rax,0x0
  01083:    	mov    QWORD PTR [rsp-0x28],rax
  01088: 00 	movabs r13,0x0
  01092:    	call   0xfffe0908
  01097:    	lea    rdi,[rbp-0x8]
  0109b:    	mov    QWORD PTR [rbx],rdi
  0109e:    	movq   xmm2,QWORD PTR [rsp]
  010a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010af:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010b5:    	add    rsp,0x20
  010b9:    	test   rax,rax
  010bc:    	je     0x324bd
  010c2:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  010c6: 01 	sub    DWORD PTR [rip+0xa33],0x1        # 0x1b00
  010cd:    	je     0x324e8
  010d3:    	sub    rsp,0x20
  010d7:    	movq   QWORD PTR [rsp],xmm2
  010dc:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e2:    	movq   QWORD PTR [rsp+0x10],xmm5
  010e8:    	movq   QWORD PTR [rsp+0x18],xmm6
  010ee:    	mov    rdi,QWORD PTR [rbp-0x30]
  010f2: b5 	movabs rax,0x55b5b009e670
  010fc:    	call   rax
  010fe:    	mov    r15d,eax
  01101: 00 	cmp    r15d,DWORD PTR [rip+0xa00]        # 0x1b08
  01108:    	jne    0x3250a
  0110e:    	mov    eax,DWORD PTR [rip+0xfffffffffffe2911]        # 0xfffe3a25
  01114:    	cmp    DWORD PTR [rip+0x9ea],eax        # 0x1b04
  0111a:    	jne    0x3250a
  01120: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01129:    	mov    QWORD PTR [rsp-0x38],rcx
  0112e:    	mov    rax,QWORD PTR [rbx]
  01131:    	lea    rsi,[rsp-0x18]
  01136:    	mov    QWORD PTR [rsi],rax
  01139:    	mov    QWORD PTR [rbx],rsi
  0113c:    	mov    rax,QWORD PTR [rbp-0x30]
  01140:    	mov    QWORD PTR [rsp-0x38],rax
  01145: 00 	mov    rdi,0x0
  0114c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01155: 00 	movabs rax,0x0
  0115f:    	mov    QWORD PTR [rsp-0x28],rax
  01164: 00 	movabs r13,0x0
  0116e:    	call   0xfffe0908
  01173:    	lea    rdi,[rbp-0x8]
  01177:    	mov    QWORD PTR [rbx],rdi
  0117a:    	movq   xmm2,QWORD PTR [rsp]
  0117f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01185:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0118b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01191:    	add    rsp,0x20
  01195:    	test   rax,rax
  01198:    	je     0x32576
  0119e: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  011a5: 01 	sub    DWORD PTR [rip+0x960],0x1        # 0x1b0c
  011ac:    	je     0x325a1
  011b2:    	sub    rsp,0x20
  011b6:    	movq   QWORD PTR [rsp],xmm2
  011bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c1:    	movq   QWORD PTR [rsp+0x10],xmm5
  011c7:    	movq   QWORD PTR [rsp+0x18],xmm6
  011cd: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011d4: b5 	movabs rax,0x55b5b009e670
  011de:    	call   rax
  011e0:    	mov    r15d,eax
  011e3: 00 	cmp    r15d,DWORD PTR [rip+0x92a]        # 0x1b14
  011ea:    	jne    0x325c3
  011f0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe282f]        # 0xfffe3a25
  011f6:    	cmp    DWORD PTR [rip+0x914],eax        # 0x1b10
  011fc:    	jne    0x325c3
  01202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0120b:    	mov    QWORD PTR [rsp-0x38],rcx
  01210:    	mov    rax,QWORD PTR [rbx]
  01213:    	lea    rsi,[rsp-0x18]
  01218:    	mov    QWORD PTR [rsi],rax
  0121b:    	mov    QWORD PTR [rbx],rsi
  0121e: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01225:    	mov    QWORD PTR [rsp-0x38],rax
  0122a: 00 	mov    rdi,0x0
  01231: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0123a: 00 	movabs rax,0x0
  01244:    	mov    QWORD PTR [rsp-0x28],rax
  01249: 00 	movabs r13,0x0
  01253:    	call   0xfffe0908
  01258:    	lea    rdi,[rbp-0x8]
  0125c:    	mov    QWORD PTR [rbx],rdi
  0125f:    	movq   xmm2,QWORD PTR [rsp]
  01264:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01270:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01276:    	add    rsp,0x20
  0127a:    	test   rax,rax
  0127d:    	je     0x32632
  01283:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01287: 01 	sub    DWORD PTR [rip+0x88a],0x1        # 0x1b18
  0128e:    	je     0x3265d
  01294:    	mov    rdi,QWORD PTR [rbp-0x58]
  01298:    	mov    rsi,QWORD PTR [rbp-0x80]
  0129c:    	sub    rsp,0x20
  012a0:    	movq   QWORD PTR [rsp],xmm2
  012a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ab:    	movq   QWORD PTR [rsp+0x10],xmm5
  012b1:    	movq   QWORD PTR [rsp+0x18],xmm6
  012b7:    	mov    rdx,rdi
  012ba:    	mov    rcx,rsi
  012bd:    	mov    rdi,rbx
  012c0:    	mov    rsi,r12
  012c3: b5 	movabs rax,0x55b5b00e8b30
  012cd:    	call   rax
  012cf:    	movq   xmm2,QWORD PTR [rsp]
  012d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012da:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012e0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012e6:    	add    rsp,0x20
  012ea: b5 	movabs r13,0x55b5b07c52a0
  012f4:    	test   rax,rax
  012f7:    	je     0xfffe093b
  012fd:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01301: 01 	sub    DWORD PTR [rip+0x814],0x1        # 0x1b1c
  01308:    	je     0x3269b
  0130e:    	mov    rdi,QWORD PTR [rbp-0x78]
  01312:    	mov    rsi,QWORD PTR [rbp-0x80]
  01316:    	sub    rsp,0x20
  0131a:    	movq   QWORD PTR [rsp],xmm2
  0131f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01325:    	movq   QWORD PTR [rsp+0x10],xmm5
  0132b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01331:    	mov    rdx,rdi
  01334:    	mov    rcx,rsi
  01337:    	mov    rdi,rbx
  0133a:    	mov    rsi,r12
  0133d: b5 	movabs rax,0x55b5b00e6cb0
  01347:    	call   rax
  01349:    	movq   xmm2,QWORD PTR [rsp]
  0134e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01354:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0135a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01360:    	add    rsp,0x20
  01364: b5 	movabs r13,0x55b5b07c52b0
  0136e:    	test   rax,rax
  01371:    	je     0xfffe093b
  01377:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  0137b: 01 	sub    DWORD PTR [rip+0x79e],0x1        # 0x1b20
  01382:    	je     0x326d9
  01388:    	sub    rsp,0x20
  0138c:    	movq   QWORD PTR [rsp],xmm2
  01391:    	movq   QWORD PTR [rsp+0x8],xmm4
  01397:    	movq   QWORD PTR [rsp+0x10],xmm5
  0139d:    	movq   QWORD PTR [rsp+0x18],xmm6
  013a3:    	mov    rdi,QWORD PTR [rbp-0x30]
  013a7: b5 	movabs rax,0x55b5b009e670
  013b1:    	call   rax
  013b3:    	mov    r15d,eax
  013b6: 00 	cmp    r15d,DWORD PTR [rip+0x76b]        # 0x1b28
  013bd:    	jne    0x326fb
  013c3:    	mov    eax,DWORD PTR [rip+0xfffffffffffe265c]        # 0xfffe3a25
  013c9:    	cmp    DWORD PTR [rip+0x755],eax        # 0x1b24
  013cf:    	jne    0x326fb
  013d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013de:    	mov    QWORD PTR [rsp-0x38],rcx
  013e3:    	mov    rax,QWORD PTR [rbx]
  013e6:    	lea    rsi,[rsp-0x18]
  013eb:    	mov    QWORD PTR [rsi],rax
  013ee:    	mov    QWORD PTR [rbx],rsi
  013f1:    	mov    rax,QWORD PTR [rbp-0x30]
  013f5:    	mov    QWORD PTR [rsp-0x38],rax
  013fa: 00 	mov    rdi,0x0
  01401: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0140a: 00 	movabs rax,0x0
  01414:    	mov    QWORD PTR [rsp-0x28],rax
  01419: 00 	movabs r13,0x0
  01423:    	call   0xfffe0908
  01428:    	lea    rdi,[rbp-0x8]
  0142c:    	mov    QWORD PTR [rbx],rdi
  0142f:    	movq   xmm2,QWORD PTR [rsp]
  01434:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0143a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01440:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01446:    	add    rsp,0x20
  0144a:    	test   rax,rax
  0144d:    	je     0x32767
  01453: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  0145a: 01 	sub    DWORD PTR [rip+0x6cb],0x1        # 0x1b2c
  01461:    	je     0x32792
  01467:    	sub    rsp,0x20
  0146b:    	movq   QWORD PTR [rsp],xmm2
  01470:    	movq   QWORD PTR [rsp+0x8],xmm4
  01476:    	movq   QWORD PTR [rsp+0x10],xmm5
  0147c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01482: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01489: b5 	movabs rax,0x55b5b009e670
  01493:    	call   rax
  01495:    	mov    r15d,eax
  01498: 00 	cmp    r15d,DWORD PTR [rip+0x695]        # 0x1b34
  0149f:    	jne    0x327b4
  014a5:    	mov    eax,DWORD PTR [rip+0xfffffffffffe257a]        # 0xfffe3a25
  014ab:    	cmp    DWORD PTR [rip+0x67f],eax        # 0x1b30
  014b1:    	jne    0x327b4
  014b7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014c0:    	mov    QWORD PTR [rsp-0x38],rcx
  014c5:    	mov    rax,QWORD PTR [rbx]
  014c8:    	lea    rsi,[rsp-0x18]
  014cd:    	mov    QWORD PTR [rsi],rax
  014d0:    	mov    QWORD PTR [rbx],rsi
  014d3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014da:    	mov    QWORD PTR [rsp-0x38],rax
  014df: 00 	mov    rdi,0x0
  014e6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ef: 00 	movabs rax,0x0
  014f9:    	mov    QWORD PTR [rsp-0x28],rax
  014fe: 00 	movabs r13,0x0
  01508:    	call   0xfffe0908
  0150d:    	lea    rdi,[rbp-0x8]
  01511:    	mov    QWORD PTR [rbx],rdi
  01514:    	movq   xmm2,QWORD PTR [rsp]
  01519:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0151f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01525:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0152b:    	add    rsp,0x20
  0152f:    	test   rax,rax
  01532:    	je     0x32823
  01538:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  0153c: 01 	sub    DWORD PTR [rip+0x5f5],0x1        # 0x1b38
  01543:    	je     0x3284e
  01549:    	sub    rsp,0x20
  0154d:    	movq   QWORD PTR [rsp],xmm2
  01552:    	movq   QWORD PTR [rsp+0x8],xmm4
  01558:    	movq   QWORD PTR [rsp+0x10],xmm5
  0155e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01564:    	mov    rdi,QWORD PTR [rbp-0x30]
  01568: b5 	movabs rax,0x55b5b009e670
  01572:    	call   rax
  01574:    	mov    r15d,eax
  01577: 00 	cmp    r15d,DWORD PTR [rip+0x5c2]        # 0x1b40
  0157e:    	jne    0x32870
  01584:    	mov    eax,DWORD PTR [rip+0xfffffffffffe249b]        # 0xfffe3a25
  0158a:    	cmp    DWORD PTR [rip+0x5ac],eax        # 0x1b3c
  01590:    	jne    0x32870
  01596: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0159f:    	mov    QWORD PTR [rsp-0x38],rcx
  015a4:    	mov    rax,QWORD PTR [rbx]
  015a7:    	lea    rsi,[rsp-0x18]
  015ac:    	mov    QWORD PTR [rsi],rax
  015af:    	mov    QWORD PTR [rbx],rsi
  015b2:    	mov    rax,QWORD PTR [rbp-0x30]
  015b6:    	mov    QWORD PTR [rsp-0x38],rax
  015bb: 00 	mov    rdi,0x0
  015c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015cb: 00 	movabs rax,0x0
  015d5:    	mov    QWORD PTR [rsp-0x28],rax
  015da: 00 	movabs r13,0x0
  015e4:    	call   0xfffe0908
  015e9:    	lea    rdi,[rbp-0x8]
  015ed:    	mov    QWORD PTR [rbx],rdi
  015f0:    	movq   xmm2,QWORD PTR [rsp]
  015f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01601:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01607:    	add    rsp,0x20
  0160b:    	test   rax,rax
  0160e:    	je     0x328dc
  01614: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  0161b: 01 	sub    DWORD PTR [rip+0x522],0x1        # 0x1b44
  01622:    	je     0x32907
  01628:    	sub    rsp,0x20
  0162c:    	movq   QWORD PTR [rsp],xmm2
  01631:    	movq   QWORD PTR [rsp+0x8],xmm4
  01637:    	movq   QWORD PTR [rsp+0x10],xmm5
  0163d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01643: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0164a: b5 	movabs rax,0x55b5b009e670
  01654:    	call   rax
  01656:    	mov    r15d,eax
  01659: 00 	cmp    r15d,DWORD PTR [rip+0x4ec]        # 0x1b4c
  01660:    	jne    0x32929
  01666:    	mov    eax,DWORD PTR [rip+0xfffffffffffe23b9]        # 0xfffe3a25
  0166c:    	cmp    DWORD PTR [rip+0x4d6],eax        # 0x1b48
  01672:    	jne    0x32929
  01678: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01681:    	mov    QWORD PTR [rsp-0x38],rcx
  01686:    	mov    rax,QWORD PTR [rbx]
  01689:    	lea    rsi,[rsp-0x18]
  0168e:    	mov    QWORD PTR [rsi],rax
  01691:    	mov    QWORD PTR [rbx],rsi
  01694: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0169b:    	mov    QWORD PTR [rsp-0x38],rax
  016a0: 00 	mov    rdi,0x0
  016a7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016b0: 00 	movabs rax,0x0
  016ba:    	mov    QWORD PTR [rsp-0x28],rax
  016bf: 00 	movabs r13,0x0
  016c9:    	call   0xfffe0908
  016ce:    	lea    rdi,[rbp-0x8]
  016d2:    	mov    QWORD PTR [rbx],rdi
  016d5:    	movq   xmm2,QWORD PTR [rsp]
  016da:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016e0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016e6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  016ec:    	add    rsp,0x20
  016f0:    	test   rax,rax
  016f3:    	je     0x32998
  016f9: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01700: 01 	sub    DWORD PTR [rip+0x449],0x1        # 0x1b50
  01707:    	je     0x329c3
  0170d:    	mov    rdi,QWORD PTR [rbp-0x58]
  01711: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01718:    	sub    rsp,0x20
  0171c:    	movq   QWORD PTR [rsp],xmm2
  01721:    	movq   QWORD PTR [rsp+0x8],xmm4
  01727:    	movq   QWORD PTR [rsp+0x10],xmm5
  0172d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01733:    	mov    rdx,rdi
  01736:    	mov    rcx,rsi
  01739:    	mov    rdi,rbx
  0173c:    	mov    rsi,r12
  0173f: b5 	movabs rax,0x55b5b00e8b30
  01749:    	call   rax
  0174b:    	movq   xmm2,QWORD PTR [rsp]
  01750:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01756:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01762:    	add    rsp,0x20
  01766: b5 	movabs r13,0x55b5b07c5380
  01770:    	test   rax,rax
  01773:    	je     0xfffe093b
  01779: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  01780: 01 	sub    DWORD PTR [rip+0x3cd],0x1        # 0x1b54
  01787:    	je     0x32a01
  0178d:    	mov    rdi,QWORD PTR [rbp-0x80]
  01791: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01798:    	sub    rsp,0x20
  0179c:    	movq   QWORD PTR [rsp],xmm2
  017a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017a7:    	movq   QWORD PTR [rsp+0x10],xmm5
  017ad:    	movq   QWORD PTR [rsp+0x18],xmm6
  017b3:    	mov    rdx,rdi
  017b6:    	mov    rcx,rsi
  017b9:    	mov    rdi,rbx
  017bc:    	mov    rsi,r12
  017bf: b5 	movabs rax,0x55b5b00e6cb0
  017c9:    	call   rax
  017cb:    	movq   xmm2,QWORD PTR [rsp]
  017d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017d6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017dc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017e2:    	add    rsp,0x20
  017e6: b5 	movabs r13,0x55b5b07c5390
  017f0:    	test   rax,rax
  017f3:    	je     0xfffe093b
  017f9:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  017fd: 01 	sub    DWORD PTR [rip+0x354],0x1        # 0x1b58
  01804:    	je     0x32a3f
  0180a:    	sub    rsp,0x20
  0180e:    	movq   QWORD PTR [rsp],xmm2
  01813:    	movq   QWORD PTR [rsp+0x8],xmm4
  01819:    	movq   QWORD PTR [rsp+0x10],xmm5
  0181f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01825:    	mov    rdi,QWORD PTR [rbp-0x68]
  01829: b5 	movabs rax,0x55b5b009e670
  01833:    	call   rax
  01835:    	mov    r15d,eax
  01838: 00 	cmp    r15d,DWORD PTR [rip+0x321]        # 0x1b60
  0183f:    	jne    0x32a61
  01845:    	mov    eax,DWORD PTR [rip+0xfffffffffffe21da]        # 0xfffe3a25
  0184b:    	cmp    DWORD PTR [rip+0x30b],eax        # 0x1b5c
  01851:    	jne    0x32a61
  01857: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01860:    	mov    QWORD PTR [rsp-0x38],rcx
  01865:    	mov    rax,QWORD PTR [rbx]
  01868:    	lea    rsi,[rsp-0x18]
  0186d:    	mov    QWORD PTR [rsi],rax
  01870:    	mov    QWORD PTR [rbx],rsi
  01873:    	mov    rax,QWORD PTR [rbp-0x68]
  01877:    	mov    QWORD PTR [rsp-0x38],rax
  0187c: 00 	mov    rdi,0x3
  01883:    	lea    r8,[rsp-0x40]
  01888:    	mov    rax,QWORD PTR [rbp-0x70]
  0188c:    	mov    QWORD PTR [r8],rax
  0188f:    	sub    r8,0x8
  01893:    	mov    rax,QWORD PTR [rbp-0x78]
  01897:    	mov    QWORD PTR [r8],rax
  0189a:    	sub    r8,0x8
  0189e:    	mov    rax,QWORD PTR [rbp-0x80]
  018a2:    	mov    QWORD PTR [r8],rax
  018a5:    	sub    r8,0x8
  018a9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b2: 00 	movabs rax,0x0
  018bc:    	mov    QWORD PTR [rsp-0x28],rax
  018c1: 00 	movabs r13,0x0
  018cb:    	call   0xfffe0908
  018d0:    	lea    rdi,[rbp-0x8]
  018d4:    	mov    QWORD PTR [rbx],rdi
  018d7:    	movq   xmm2,QWORD PTR [rsp]
  018dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  018e8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  018ee:    	add    rsp,0x20
  018f2:    	test   rax,rax
  018f5:    	je     0x32acd
  018fb:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  018ff: 01 	sub    DWORD PTR [rip+0x25e],0x1        # 0x1b64
  01906:    	je     0x32af8
  0190c:    	sub    rsp,0x20
  01910:    	movq   QWORD PTR [rsp],xmm2
  01915:    	movq   QWORD PTR [rsp+0x8],xmm4
  0191b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01921:    	movq   QWORD PTR [rsp+0x18],xmm6
  01927:    	mov    rdi,QWORD PTR [rbp-0x38]
  0192b: b5 	movabs rax,0x55b5b009e670
  01935:    	call   rax
  01937:    	mov    r15d,eax
  0193a: 00 	cmp    r15d,DWORD PTR [rip+0x22b]        # 0x1b6c
  01941:    	jne    0x32b1a
  01947:    	mov    eax,DWORD PTR [rip+0xfffffffffffe20d8]        # 0xfffe3a25
  0194d:    	cmp    DWORD PTR [rip+0x215],eax        # 0x1b68
  01953:    	jne    0x32b1a
  01959: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01962:    	mov    QWORD PTR [rsp-0x38],rcx
  01967:    	mov    rax,QWORD PTR [rbx]
  0196a:    	lea    rsi,[rsp-0x18]
  0196f:    	mov    QWORD PTR [rsi],rax
  01972:    	mov    QWORD PTR [rbx],rsi
  01975:    	mov    rax,QWORD PTR [rbp-0x38]
  01979:    	mov    QWORD PTR [rsp-0x38],rax
  0197e: 00 	mov    rdi,0x1
  01985:    	lea    r8,[rsp-0x40]
  0198a:    	mov    rax,QWORD PTR [rbp-0x60]
  0198e:    	mov    QWORD PTR [r8],rax
  01991:    	sub    r8,0x8
  01995: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0199e: 00 	movabs rax,0x0
  019a8:    	mov    QWORD PTR [rsp-0x28],rax
  019ad: 00 	movabs r13,0x0
  019b7:    	call   0xfffe0908
  019bc:    	lea    rdi,[rbp-0x8]
  019c0:    	mov    QWORD PTR [rbx],rdi
  019c3:    	movq   xmm2,QWORD PTR [rsp]
  019c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019ce:    	movq   xmm5,QWORD PTR [rsp+0x10]
  019d4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  019da:    	add    rsp,0x20
  019de:    	test   rax,rax
  019e1:    	je     0x32b86
:00103 
:00105 br =>:00106
  019e7:    	jmp    0x32bee
:00106 %7 = nil
  019ec: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  019f4:    	mov    rax,QWORD PTR [rbp-0x60]
  019f8:    	leave  
  019f9:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x55b5b07b7240
<== finished compile. elapsed:200.7µs
offset:Pos(135784) code: 9199 bytes  data: 417 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5:    	mov    rdi,QWORD PTR [rbp-0x28]
  000c9: 00 	test   rdi,0x7
  000d0:    	jne    0x310b3
  000d6:    	cmp    DWORD PTR [rdi+0x4],0x32
  000da:    	jne    0x310b3
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:11
:00001 %13 = %0.call rand()                 [Scene]
  000e0:    	mov    rdi,QWORD PTR [rbp-0x28]
  000e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1dca],0x26        # 0xfffe1eb5
  000eb:    	jne    0x310c2
  000f1: 00 	mov    r9,0x0
  000f8:    	mov    rdx,rdi
  000fb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00104:    	mov    QWORD PTR [rsp-0x38],rcx
  00109:    	mov    rax,QWORD PTR [rbx]
  0010c:    	lea    rsi,[rsp-0x18]
  00111:    	mov    QWORD PTR [rsi],rax
  00114:    	mov    QWORD PTR [rbx],rsi
  00117: ff 	lea    rcx,[rbp-0x98]
  0011e: 00 	mov    r8,0x0
  00125:    	call   0x310d1
  0012a:    	lea    rdi,[rbp-0x8]
  0012e:    	mov    QWORD PTR [rbx],rdi
  00131: b5 	movabs r13,0x55b5b07b7270
  0013b:    	test   rax,rax
  0013e:    	je     0xfffdedcb
  00144: ff 	mov    QWORD PTR [rbp-0x90],rax
:00002 
:00004 %2 = %13
  0014b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00152:    	mov    QWORD PTR [rbp-0x38],rax
:00005 %13 = literal[2.0]
  00156: 00 	movq   xmm2,QWORD PTR [rip+0x229a]        # 0x23f8
  0015e: 00 	mov    rax,0x2
  00165: ff 	mov    QWORD PTR [rbp-0x90],rax
:00006 %14 = literal[3.14159265]
  0016c: 00 	movq   xmm3,QWORD PTR [rip+0x2294]        # 0x2408
  00174: da 	movabs rax,0x490fda9e46a78a
  0017e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00185:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00189:    	mov    rdi,QWORD PTR [rbp-0x28]
  0018d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1d21],0x26        # 0xfffe1eb5
  00194:    	jne    0x31103
  0019a: 00 	mov    r9,0x0
  001a1:    	sub    rsp,0x10
  001a5:    	movq   QWORD PTR [rsp],xmm2
  001aa:    	mov    rdx,rdi
  001ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001b6:    	mov    QWORD PTR [rsp-0x38],rcx
  001bb:    	mov    rax,QWORD PTR [rbx]
  001be:    	lea    rsi,[rsp-0x18]
  001c3:    	mov    QWORD PTR [rsi],rax
  001c6:    	mov    QWORD PTR [rbx],rsi
  001c9: ff 	lea    rcx,[rbp-0xa0]
  001d0: 00 	mov    r8,0x0
  001d7:    	call   0x31122
  001dc:    	lea    rdi,[rbp-0x8]
  001e0:    	mov    QWORD PTR [rbx],rdi
  001e3:    	movq   xmm2,QWORD PTR [rsp]
  001e8:    	add    rsp,0x10
  001ec: b5 	movabs r13,0x55b5b07b72e0
  001f6:    	test   rax,rax
  001f9:    	je     0xfffdedcb
  001ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  00206: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0020d: 00 	test   rdi,0x1
  00214:    	jne    0x31154
  0021a: 00 	test   rdi,0x2
  00221:    	je     0x25d
  00227:    	xorps  xmm3,xmm3
  0022a: 00 	movabs rax,0x8000000000000002
  00234:    	cmp    rdi,rax
  00237:    	je     0x26f
  0023d:    	mov    rax,rdi
  00240:    	sar    rax,0x3f
  00244:    	add    rax,0x2
  00248:    	and    rdi,0xfffffffffffffffc
  0024c:    	or     rdi,rax
  0024f:    	rol    rdi,0x3d
  00253:    	movq   xmm3,rdi
  00258:    	jmp    0x26f
  0025d:    	call   0xfffdee24
  00262:    	test   rax,rax
  00265:    	je     0x31154
  0026b:    	movq   xmm3,xmm0
  0026f:    	movq   xmm4,xmm2
  00273:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1c4a]        # 0xfffe1ec8
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x21a3]        # 0x2428
  00285:    	jne    0x31173
  0028b: 00 	mov    rax,QWORD PTR [rip+0x2186]        # 0x2418
  00292: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00299: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002a0: 00 	test   rdi,0x7
  002a7:    	jne    0x311d7
  002ad:    	cmp    DWORD PTR [rdi+0x4],0x21
  002b1:    	jne    0x311d7
  002b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1bf7],0x26        # 0xfffe1eb5
  002be:    	jne    0x311d7
  002c4:    	sub    rsp,0x10
  002c8:    	movq   QWORD PTR [rsp],xmm2
  002cd:    	movq   QWORD PTR [rsp+0x8],xmm4
  002d3:    	movq   xmm0,xmm4
  002d7: b5 	movabs rax,0x55b5b0071300
  002e1:    	call   rax
  002e3:    	movq   xmm2,QWORD PTR [rsp]
  002e8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002ee:    	add    rsp,0x10
  002f2:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002f6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1bcb]        # 0xfffe1ec8
  002fd: 00 	cmp    rax,QWORD PTR [rip+0x2144]        # 0x2448
  00304:    	jne    0x311fa
  0030a: 00 	mov    rax,QWORD PTR [rip+0x2127]        # 0x2438
  00311: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00018 %16 = literal[1.0]
  00318: 00 	movq   xmm3,QWORD PTR [rip+0x2138]        # 0x2458
  00320: 00 	movabs rax,0xff80000000000002
  0032a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00019 %16 = %16 - %2                       [Float][Float]
  00331:    	mov    rdi,QWORD PTR [rbp-0x38]
  00335: 00 	test   rdi,0x1
  0033c:    	jne    0x3125e
  00342: 00 	test   rdi,0x2
  00349:    	je     0x385
  0034f:    	xorps  xmm5,xmm5
  00352: 00 	movabs rax,0x8000000000000002
  0035c:    	cmp    rdi,rax
  0035f:    	je     0x397
  00365:    	mov    rax,rdi
  00368:    	sar    rax,0x3f
  0036c:    	add    rax,0x2
  00370:    	and    rdi,0xfffffffffffffffc
  00374:    	or     rdi,rax
  00377:    	rol    rdi,0x3d
  0037b:    	movq   xmm5,rdi
  00380:    	jmp    0x397
  00385:    	call   0xfffdee24
  0038a:    	test   rax,rax
  0038d:    	je     0x3125e
  00393:    	movq   xmm5,xmm0
  00397:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  0039b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  003a2: 00 	test   rdi,0x7
  003a9:    	jne    0x3128a
  003af:    	cmp    DWORD PTR [rdi+0x4],0x21
  003b3:    	jne    0x3128a
  003b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1af5],0x26        # 0xfffe1eb5
  003c0:    	jne    0x3128a
  003c6:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003ca:    	movq   xmm7,xmm2
  003ce:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003d2: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1aef]        # 0xfffe1ec8
  003d9: 00 	cmp    rax,QWORD PTR [rip+0x2098]        # 0x2478
  003e0:    	jne    0x312c6
  003e6: 00 	mov    rax,QWORD PTR [rip+0x207b]        # 0x2468
  003ed: ff 	mov    QWORD PTR [rbp-0x98],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003f4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x3134e
  00408:    	cmp    DWORD PTR [rdi+0x4],0x21
  0040c:    	jne    0x3134e
  00412: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1a9c],0x26        # 0xfffe1eb5
  00419:    	jne    0x3134e
  0041f:    	sub    rsp,0x30
  00423:    	movq   QWORD PTR [rsp],xmm2
  00428:    	movq   QWORD PTR [rsp+0x8],xmm3
  0042e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00434:    	movq   QWORD PTR [rsp+0x18],xmm5
  0043a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00440:    	movq   xmm0,xmm4
  00444: b5 	movabs rax,0x55b5b0071310
  0044e:    	call   rax
  00450:    	movq   xmm2,QWORD PTR [rsp]
  00455:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00461:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00467:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0046d:    	add    rsp,0x30
  00471:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00475: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe1a4c]        # 0xfffe1ec8
  0047c: 00 	cmp    rax,QWORD PTR [rip+0x2015]        # 0x2498
  00483:    	jne    0x3138e
  00489: 00 	mov    rax,QWORD PTR [rip+0x1ff8]        # 0x2488
  00490: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %16 = literal[1.0]
  00497: 00 	movq   xmm3,QWORD PTR [rip+0x2009]        # 0x24a8
  0049f: 00 	movabs rax,0xff80000000000002
  004a9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00031 %16 = %16 - %2                       [Float][Float]
  004b0:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004b4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  004bb: 00 	test   rdi,0x7
  004c2:    	jne    0x31416
  004c8:    	cmp    DWORD PTR [rdi+0x4],0x21
  004cc:    	jne    0x31416
  004d2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe19dc],0x26        # 0xfffe1eb5
  004d9:    	jne    0x31416
  004df:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004e3:    	movq   xmm8,xmm2
  004e8:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004ed: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe19d4]        # 0xfffe1ec8
  004f4: 00 	cmp    rax,QWORD PTR [rip+0x1fcd]        # 0x24c8
  004fb:    	jne    0x3145f
  00501: 00 	mov    rax,QWORD PTR [rip+0x1fb0]        # 0x24b8
  00508: ff 	mov    QWORD PTR [rbp-0x90],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  0050f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00516: 00 	test   rdi,0x7
  0051d:    	jne    0x314f5
  00523:    	cmp    DWORD PTR [rdi+0x4],0x21
  00527:    	jne    0x314f5
  0052d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1981],0x26        # 0xfffe1eb5
  00534:    	jne    0x314f5
  0053a:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0053e:    	mov    rax,QWORD PTR [rbp-0x10]
  00542:    	mov    rax,QWORD PTR [rax]
  00545:    	mov    rax,QWORD PTR [rax-0x28]
  00549: ff 	mov    QWORD PTR [rbp-0x98],rax
:00042 %15 = 0: i32
  00550: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  0055b:    	sub    rsp,0x30
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576:    	movq   QWORD PTR [rsp+0x20],xmm7
  0057c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00583: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0058a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00591:    	mov    rdi,rbx
  00594:    	mov    rsi,r12
  00597: b5 	movabs r8,0x55b5b07b74f8
  005a1: b5 	movabs rax,0x55b5b0091aa0
  005ab:    	call   rax
  005ad:    	movq   xmm2,QWORD PTR [rsp]
  005b2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005b8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005be:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ca: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d1:    	add    rsp,0x30
  005d5: b5 	movabs r13,0x55b5b07b7500
  005df:    	test   rax,rax
  005e2:    	je     0xfffdedcb
  005e8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00044 %13 = %14.call x()                   [Vec]
  005ef: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  005f6: 00 	test   rdi,0x7
  005fd:    	jne    0x3154c
  00603:    	cmp    DWORD PTR [rdi+0x4],0x28
  00607:    	jne    0x3154c
  0060d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe18a1],0x26        # 0xfffe1eb5
  00614:    	jne    0x3154c
  0061a:    	mov    esi,DWORD PTR [rip+0x1eb4]        # 0x24d4
  00620:    	cmp    esi,0xffffffff
  00623:    	je     0x315a0
  00629:    	cmp    WORD PTR [rdi+0x2],0x3
  0062e:    	jne    0x647
  00634:    	cmp    esi,0x6
  00637:    	jge    0x647
  0063d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00642:    	jmp    0x6a3
  00647:    	sub    rsp,0x30
  0064b:    	movq   QWORD PTR [rsp],xmm2
  00650:    	movq   QWORD PTR [rsp+0x8],xmm3
  00656:    	movq   QWORD PTR [rsp+0x10],xmm4
  0065c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00662:    	movq   QWORD PTR [rsp+0x20],xmm7
  00668: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0066f: b5 	movabs rax,0x55b5b00a3ef0
  00679:    	call   rax
  0067b:    	movq   xmm2,QWORD PTR [rsp]
  00680:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00686:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0068c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00692:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00698: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0069f:    	add    rsp,0x30
  006a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  006aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  006b1: 00 	test   rdi,0x1
  006b8:    	jne    0x31619
  006be: 00 	test   rdi,0x2
  006c5:    	je     0x701
  006cb:    	xorps  xmm6,xmm6
  006ce: 00 	movabs rax,0x8000000000000002
  006d8:    	cmp    rdi,rax
  006db:    	je     0x713
  006e1:    	mov    rax,rdi
  006e4:    	sar    rax,0x3f
  006e8:    	add    rax,0x2
  006ec:    	and    rdi,0xfffffffffffffffc
  006f0:    	or     rdi,rax
  006f3:    	rol    rdi,0x3d
  006f7:    	movq   xmm6,rdi
  006fc:    	jmp    0x713
  00701:    	call   0xfffdee24
  00706:    	test   rax,rax
  00709:    	je     0x31619
  0070f:    	movq   xmm6,xmm0
  00713:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  00717:    	mov    rax,QWORD PTR [rbp-0x10]
  0071b:    	mov    rax,QWORD PTR [rax]
  0071e:    	mov    rax,QWORD PTR [rax-0x28]
  00722: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00049 %16 = 1: i32
  00729: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00734:    	sub    rsp,0x30
  00738:    	movq   QWORD PTR [rsp],xmm2
  0073d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00743:    	movq   QWORD PTR [rsp+0x10],xmm5
  00749:    	movq   QWORD PTR [rsp+0x18],xmm6
  0074f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00755: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0075c: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00763: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0076a:    	mov    rdi,rbx
  0076d:    	mov    rsi,r12
  00770: b5 	movabs r8,0x55b5b07b7568
  0077a: b5 	movabs rax,0x55b5b0091aa0
  00784:    	call   rax
  00786:    	movq   xmm2,QWORD PTR [rsp]
  0078b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00791:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00797:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0079d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007a3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007aa:    	add    rsp,0x30
  007ae: b5 	movabs r13,0x55b5b07b7570
  007b8:    	test   rax,rax
  007bb:    	je     0xfffdedcb
  007c1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00051 %14 = %15.call x()                   [Vec]
  007c8: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  007cf: 00 	test   rdi,0x7
  007d6:    	jne    0x3166d
  007dc:    	cmp    DWORD PTR [rdi+0x4],0x28
  007e0:    	jne    0x3166d
  007e6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe16c8],0x26        # 0xfffe1eb5
  007ed:    	jne    0x3166d
  007f3:    	mov    esi,DWORD PTR [rip+0x1ce3]        # 0x24dc
  007f9:    	cmp    esi,0xffffffff
  007fc:    	je     0x316c1
  00802:    	cmp    WORD PTR [rdi+0x2],0x3
  00807:    	jne    0x820
  0080d:    	cmp    esi,0x6
  00810:    	jge    0x820
  00816:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0081b:    	jmp    0x87c
  00820:    	sub    rsp,0x30
  00824:    	movq   QWORD PTR [rsp],xmm2
  00829:    	movq   QWORD PTR [rsp+0x8],xmm4
  0082f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00835:    	movq   QWORD PTR [rsp+0x18],xmm6
  0083b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00841: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00848: b5 	movabs rax,0x55b5b00a3ef0
  00852:    	call   rax
  00854:    	movq   xmm2,QWORD PTR [rsp]
  00859:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0085f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00865:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0086b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00871: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00878:    	add    rsp,0x30
  0087c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00883: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0088a: 00 	test   rdi,0x1
  00891:    	jne    0x3173a
  00897: 00 	test   rdi,0x2
  0089e:    	je     0x8da
  008a4:    	xorps  xmm3,xmm3
  008a7: 00 	movabs rax,0x8000000000000002
  008b1:    	cmp    rdi,rax
  008b4:    	je     0x8ec
  008ba:    	mov    rax,rdi
  008bd:    	sar    rax,0x3f
  008c1:    	add    rax,0x2
  008c5:    	and    rdi,0xfffffffffffffffc
  008c9:    	or     rdi,rax
  008cc:    	rol    rdi,0x3d
  008d0:    	movq   xmm3,rdi
  008d5:    	jmp    0x8ec
  008da:    	call   0xfffdee24
  008df:    	test   rax,rax
  008e2:    	je     0x3173a
  008e8:    	movq   xmm3,xmm0
  008ec:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008f1:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008f5:    	mov    rax,QWORD PTR [rbp-0x10]
  008f9:    	mov    rax,QWORD PTR [rax]
  008fc:    	mov    rax,QWORD PTR [rax-0x28]
  00900: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00057 %16 = 2: i32
  00907: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  00912:    	sub    rsp,0x40
  00916:    	movq   QWORD PTR [rsp],xmm2
  0091b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00921:    	movq   QWORD PTR [rsp+0x10],xmm4
  00927:    	movq   QWORD PTR [rsp+0x18],xmm5
  0092d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00933:    	movq   QWORD PTR [rsp+0x28],xmm7
  00939: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00940: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00947: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0094e:    	mov    rdi,rbx
  00951:    	mov    rsi,r12
  00954: b5 	movabs r8,0x55b5b07b75e8
  0095e: b5 	movabs rax,0x55b5b0091aa0
  00968:    	call   rax
  0096a:    	movq   xmm2,QWORD PTR [rsp]
  0096f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00975:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0097b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00981:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00987:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0098d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00994:    	add    rsp,0x40
  00998: b5 	movabs r13,0x55b5b07b75f0
  009a2:    	test   rax,rax
  009a5:    	je     0xfffdedcb
  009ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00059 %14 = %15.call x()                   [Vec]
  009b2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  009b9: 00 	test   rdi,0x7
  009c0:    	jne    0x3178e
  009c6:    	cmp    DWORD PTR [rdi+0x4],0x28
  009ca:    	jne    0x3178e
  009d0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe14de],0x26        # 0xfffe1eb5
  009d7:    	jne    0x3178e
  009dd:    	mov    esi,DWORD PTR [rip+0x1b01]        # 0x24e4
  009e3:    	cmp    esi,0xffffffff
  009e6:    	je     0x317e2
  009ec:    	cmp    WORD PTR [rdi+0x2],0x3
  009f1:    	jne    0xa0a
  009f7:    	cmp    esi,0x6
  009fa:    	jge    0xa0a
  00a00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a05:    	jmp    0xa66
  00a0a:    	sub    rsp,0x30
  00a0e:    	movq   QWORD PTR [rsp],xmm2
  00a13:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a1f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a25:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a2b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a32: b5 	movabs rax,0x55b5b00a3ef0
  00a3c:    	call   rax
  00a3e:    	movq   xmm2,QWORD PTR [rsp]
  00a43:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a49:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a4f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a55:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a5b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a62:    	add    rsp,0x30
  00a66: ff 	mov    QWORD PTR [rbp-0x98],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a6d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a74: 00 	test   rdi,0x1
  00a7b:    	jne    0x3185b
  00a81: 00 	test   rdi,0x2
  00a88:    	je     0xac4
  00a8e:    	xorps  xmm3,xmm3
  00a91: 00 	movabs rax,0x8000000000000002
  00a9b:    	cmp    rdi,rax
  00a9e:    	je     0xad6
  00aa4:    	mov    rax,rdi
  00aa7:    	sar    rax,0x3f
  00aab:    	add    rax,0x2
  00aaf:    	and    rdi,0xfffffffffffffffc
  00ab3:    	or     rdi,rax
  00ab6:    	rol    rdi,0x3d
  00aba:    	movq   xmm3,rdi
  00abf:    	jmp    0xad6
  00ac4:    	call   0xfffdee24
  00ac9:    	test   rax,rax
  00acc:    	je     0x3185b
  00ad2:    	movq   xmm3,xmm0
  00ad6:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00ada:    	movq   xmm9,xmm6
  00adf:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00ae4:    	mov    rax,QWORD PTR [rbp-0x10]
  00ae8:    	mov    rax,QWORD PTR [rax]
  00aeb:    	mov    rax,QWORD PTR [rax-0x28]
  00aef: ff 	mov    QWORD PTR [rbp-0x98],rax
:00065 %15 = 0: i32
  00af6: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00b01:    	sub    rsp,0x40
  00b05:    	movq   QWORD PTR [rsp],xmm2
  00b0a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b10:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b16:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b1c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b22: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b29: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b30: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b37: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b3e:    	mov    rdi,rbx
  00b41:    	mov    rsi,r12
  00b44: b5 	movabs r8,0x55b5b07b7668
  00b4e: b5 	movabs rax,0x55b5b0091aa0
  00b58:    	call   rax
  00b5a:    	movq   xmm2,QWORD PTR [rsp]
  00b5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b65:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b6b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b71:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b77: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b7e: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b85:    	add    rsp,0x40
  00b89: b5 	movabs r13,0x55b5b07b7670
  00b93:    	test   rax,rax
  00b96:    	je     0xfffdedcb
  00b9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00067 %13 = %14.call y()                   [Vec]
  00ba3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00baa: 00 	test   rdi,0x7
  00bb1:    	jne    0x318af
  00bb7:    	cmp    DWORD PTR [rdi+0x4],0x28
  00bbb:    	jne    0x318af
  00bc1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe12ed],0x26        # 0xfffe1eb5
  00bc8:    	jne    0x318af
  00bce:    	mov    esi,DWORD PTR [rip+0x1918]        # 0x24ec
  00bd4:    	cmp    esi,0xffffffff
  00bd7:    	je     0x31901
  00bdd:    	cmp    WORD PTR [rdi+0x2],0x3
  00be2:    	jne    0xbfb
  00be8:    	cmp    esi,0x6
  00beb:    	jge    0xbfb
  00bf1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bf6:    	jmp    0xc59
  00bfb:    	sub    rsp,0x30
  00bff:    	movq   QWORD PTR [rsp],xmm2
  00c04:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c0a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c10:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c16: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c1d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c24: b5 	movabs rax,0x55b5b00a3ef0
  00c2e:    	call   rax
  00c30:    	movq   xmm2,QWORD PTR [rsp]
  00c35:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c3b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c41:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c47: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c4e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c55:    	add    rsp,0x30
  00c59: ff 	mov    QWORD PTR [rbp-0x90],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c60: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c67: 00 	test   rdi,0x1
  00c6e:    	jne    0x3197c
  00c74: 00 	test   rdi,0x2
  00c7b:    	je     0xcb7
  00c81:    	xorps  xmm3,xmm3
  00c84: 00 	movabs rax,0x8000000000000002
  00c8e:    	cmp    rdi,rax
  00c91:    	je     0xcc9
  00c97:    	mov    rax,rdi
  00c9a:    	sar    rax,0x3f
  00c9e:    	add    rax,0x2
  00ca2:    	and    rdi,0xfffffffffffffffc
  00ca6:    	or     rdi,rax
  00ca9:    	rol    rdi,0x3d
  00cad:    	movq   xmm3,rdi
  00cb2:    	jmp    0xcc9
  00cb7:    	call   0xfffdee24
  00cbc:    	test   rax,rax
  00cbf:    	je     0x3197c
  00cc5:    	movq   xmm3,xmm0
  00cc9:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00ccd:    	mov    rax,QWORD PTR [rbp-0x10]
  00cd1:    	mov    rax,QWORD PTR [rax]
  00cd4:    	mov    rax,QWORD PTR [rax-0x28]
  00cd8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00072 %16 = 1: i32
  00cdf: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cea:    	sub    rsp,0x40
  00cee:    	movq   QWORD PTR [rsp],xmm2
  00cf3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cf9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cff:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d05:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d0b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d12: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00d20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00d27:    	mov    rdi,rbx
  00d2a:    	mov    rsi,r12
  00d2d: b5 	movabs r8,0x55b5b07b76d8
  00d37: b5 	movabs rax,0x55b5b0091aa0
  00d41:    	call   rax
  00d43:    	movq   xmm2,QWORD PTR [rsp]
  00d48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d5a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d60: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d67: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d6e:    	add    rsp,0x40
  00d72: b5 	movabs r13,0x55b5b07b76e0
  00d7c:    	test   rax,rax
  00d7f:    	je     0xfffdedcb
  00d85: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00074 %14 = %15.call y()                   [Vec]
  00d8c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00d93: 00 	test   rdi,0x7
  00d9a:    	jne    0x319ce
  00da0:    	cmp    DWORD PTR [rdi+0x4],0x28
  00da4:    	jne    0x319ce
  00daa: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1104],0x26        # 0xfffe1eb5
  00db1:    	jne    0x319ce
  00db7:    	mov    esi,DWORD PTR [rip+0x1737]        # 0x24f4
  00dbd:    	cmp    esi,0xffffffff
  00dc0:    	je     0x31a30
  00dc6:    	cmp    WORD PTR [rdi+0x2],0x3
  00dcb:    	jne    0xde4
  00dd1:    	cmp    esi,0x6
  00dd4:    	jge    0xde4
  00dda:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ddf:    	jmp    0xe4e
  00de4:    	sub    rsp,0x40
  00de8:    	movq   QWORD PTR [rsp],xmm2
  00ded:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00df9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dff:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e05: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e0c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e13: b5 	movabs rax,0x55b5b00a3ef0
  00e1d:    	call   rax
  00e1f:    	movq   xmm2,QWORD PTR [rsp]
  00e24:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e2a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e30:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e36:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e3c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e43: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e4a:    	add    rsp,0x40
  00e4e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e55: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e5c: 00 	test   rdi,0x1
  00e63:    	jne    0x31ab7
  00e69: 00 	test   rdi,0x2
  00e70:    	je     0xeac
  00e76:    	xorps  xmm6,xmm6
  00e79: 00 	movabs rax,0x8000000000000002
  00e83:    	cmp    rdi,rax
  00e86:    	je     0xebe
  00e8c:    	mov    rax,rdi
  00e8f:    	sar    rax,0x3f
  00e93:    	add    rax,0x2
  00e97:    	and    rdi,0xfffffffffffffffc
  00e9b:    	or     rdi,rax
  00e9e:    	rol    rdi,0x3d
  00ea2:    	movq   xmm6,rdi
  00ea7:    	jmp    0xebe
  00eac:    	call   0xfffdee24
  00eb1:    	test   rax,rax
  00eb4:    	je     0x31ab7
  00eba:    	movq   xmm6,xmm0
  00ebe:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00ec3:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00ec7:    	mov    rax,QWORD PTR [rbp-0x10]
  00ecb:    	mov    rax,QWORD PTR [rax]
  00ece:    	mov    rax,QWORD PTR [rax-0x28]
  00ed2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00080 %16 = 2: i32
  00ed9: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ee4:    	sub    rsp,0x40
  00ee8:    	movq   QWORD PTR [rsp],xmm2
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ef9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eff:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f05:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f0b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f12: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f19: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00f20: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00f27:    	mov    rdi,rbx
  00f2a:    	mov    rsi,r12
  00f2d: b5 	movabs r8,0x55b5b07b7758
  00f37: b5 	movabs rax,0x55b5b0091aa0
  00f41:    	call   rax
  00f43:    	movq   xmm2,QWORD PTR [rsp]
  00f48:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f54:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f5a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f60:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f66: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f6d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f74:    	add    rsp,0x40
  00f78: b5 	movabs r13,0x55b5b07b7760
  00f82:    	test   rax,rax
  00f85:    	je     0xfffdedcb
  00f8b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00082 %14 = %15.call y()                   [Vec]
  00f92: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00f99: 00 	test   rdi,0x7
  00fa0:    	jne    0x31b19
  00fa6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00faa:    	jne    0x31b19
  00fb0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0efe],0x26        # 0xfffe1eb5
  00fb7:    	jne    0x31b19
  00fbd:    	mov    esi,DWORD PTR [rip+0x1539]        # 0x24fc
  00fc3:    	cmp    esi,0xffffffff
  00fc6:    	je     0x31b7b
  00fcc:    	cmp    WORD PTR [rdi+0x2],0x3
  00fd1:    	jne    0xfea
  00fd7:    	cmp    esi,0x6
  00fda:    	jge    0xfea
  00fe0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fe5:    	jmp    0x1054
  00fea:    	sub    rsp,0x40
  00fee:    	movq   QWORD PTR [rsp],xmm2
  00ff3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fff:    	movq   QWORD PTR [rsp+0x18],xmm5
  01005:    	movq   QWORD PTR [rsp+0x20],xmm7
  0100b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01012: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01019: b5 	movabs rax,0x55b5b00a3ef0
  01023:    	call   rax
  01025:    	movq   xmm2,QWORD PTR [rsp]
  0102a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01030:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01036:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0103c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01042: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01049: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01050:    	add    rsp,0x40
  01054: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  0105b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01062: 00 	test   rdi,0x1
  01069:    	jne    0x31c02
  0106f: 00 	test   rdi,0x2
  01076:    	je     0x10b2
  0107c:    	xorps  xmm6,xmm6
  0107f: 00 	movabs rax,0x8000000000000002
  01089:    	cmp    rdi,rax
  0108c:    	je     0x10c4
  01092:    	mov    rax,rdi
  01095:    	sar    rax,0x3f
  01099:    	add    rax,0x2
  0109d:    	and    rdi,0xfffffffffffffffc
  010a1:    	or     rdi,rax
  010a4:    	rol    rdi,0x3d
  010a8:    	movq   xmm6,rdi
  010ad:    	jmp    0x10c4
  010b2:    	call   0xfffdee24
  010b7:    	test   rax,rax
  010ba:    	je     0x31c02
  010c0:    	movq   xmm6,xmm0
  010c4:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  010c8:    	movq   xmm10,xmm3
  010cd:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  010d2:    	mov    rax,QWORD PTR [rbp-0x10]
  010d6:    	mov    rax,QWORD PTR [rax]
  010d9:    	mov    rax,QWORD PTR [rax-0x28]
  010dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 0: i32
  010e4: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010ef:    	sub    rsp,0x40
  010f3:    	movq   QWORD PTR [rsp],xmm2
  010f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  010fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01104:    	movq   QWORD PTR [rsp+0x18],xmm5
  0110a:    	movq   QWORD PTR [rsp+0x20],xmm7
  01110: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01117: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0111e: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01125: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0112c: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  01133:    	mov    rdi,rbx
  01136:    	mov    rsi,r12
  01139: b5 	movabs r8,0x55b5b07b77d8
  01143: b5 	movabs rax,0x55b5b0091aa0
  0114d:    	call   rax
  0114f:    	movq   xmm2,QWORD PTR [rsp]
  01154:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0115a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01160:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01166:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0116c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01173: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0117a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01181:    	add    rsp,0x40
  01185: b5 	movabs r13,0x55b5b07b77e0
  0118f:    	test   rax,rax
  01192:    	je     0xfffdedcb
  01198: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %13 = %14.call z()                   [Vec]
  0119f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011a6: 00 	test   rdi,0x7
  011ad:    	jne    0x31c64
  011b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  011b7:    	jne    0x31c64
  011bd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0cf1],0x26        # 0xfffe1eb5
  011c4:    	jne    0x31c64
  011ca:    	mov    esi,DWORD PTR [rip+0x1334]        # 0x2504
  011d0:    	cmp    esi,0xffffffff
  011d3:    	je     0x31cc4
  011d9:    	cmp    WORD PTR [rdi+0x2],0x3
  011de:    	jne    0x11f7
  011e4:    	cmp    esi,0x6
  011e7:    	jge    0x11f7
  011ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011f2:    	jmp    0x1263
  011f7:    	sub    rsp,0x40
  011fb:    	movq   QWORD PTR [rsp],xmm2
  01200:    	movq   QWORD PTR [rsp+0x8],xmm4
  01206:    	movq   QWORD PTR [rsp+0x10],xmm5
  0120c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01212: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01219: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01220: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01227: b5 	movabs rax,0x55b5b00a3ef0
  01231:    	call   rax
  01233:    	movq   xmm2,QWORD PTR [rsp]
  01238:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01244:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0124a: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01251: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01258: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0125f:    	add    rsp,0x40
  01263: ff 	mov    QWORD PTR [rbp-0x90],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  0126a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01271: 00 	test   rdi,0x1
  01278:    	jne    0x31d4d
  0127e: 00 	test   rdi,0x2
  01285:    	je     0x12c1
  0128b:    	xorps  xmm3,xmm3
  0128e: 00 	movabs rax,0x8000000000000002
  01298:    	cmp    rdi,rax
  0129b:    	je     0x12d3
  012a1:    	mov    rax,rdi
  012a4:    	sar    rax,0x3f
  012a8:    	add    rax,0x2
  012ac:    	and    rdi,0xfffffffffffffffc
  012b0:    	or     rdi,rax
  012b3:    	rol    rdi,0x3d
  012b7:    	movq   xmm3,rdi
  012bc:    	jmp    0x12d3
  012c1:    	call   0xfffdee24
  012c6:    	test   rax,rax
  012c9:    	je     0x31d4d
  012cf:    	movq   xmm3,xmm0
  012d3:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  012d7:    	mov    rax,QWORD PTR [rbp-0x10]
  012db:    	mov    rax,QWORD PTR [rax]
  012de:    	mov    rax,QWORD PTR [rax-0x28]
  012e2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00095 %16 = 1: i32
  012e9: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012f4:    	sub    rsp,0x40
  012f8:    	movq   QWORD PTR [rsp],xmm2
  012fd:    	movq   QWORD PTR [rsp+0x8],xmm3
  01303:    	movq   QWORD PTR [rsp+0x10],xmm4
  01309:    	movq   QWORD PTR [rsp+0x18],xmm5
  0130f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01315: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0131c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01323: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0132a: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01331: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01338:    	mov    rdi,rbx
  0133b:    	mov    rsi,r12
  0133e: b5 	movabs r8,0x55b5b07b7848
  01348: b5 	movabs rax,0x55b5b0091aa0
  01352:    	call   rax
  01354:    	movq   xmm2,QWORD PTR [rsp]
  01359:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0135f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01365:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0136b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01371: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01378: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0137f: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01386:    	add    rsp,0x40
  0138a: b5 	movabs r13,0x55b5b07b7850
  01394:    	test   rax,rax
  01397:    	je     0xfffdedcb
  0139d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %14 = %15.call z()                   [Vec]
  013a4: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  013ab: 00 	test   rdi,0x7
  013b2:    	jne    0x31dad
  013b8:    	cmp    DWORD PTR [rdi+0x4],0x28
  013bc:    	jne    0x31dad
  013c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0aec],0x26        # 0xfffe1eb5
  013c9:    	jne    0x31dad
  013cf:    	mov    esi,DWORD PTR [rip+0x1137]        # 0x250c
  013d5:    	cmp    esi,0xffffffff
  013d8:    	je     0x31e1d
  013de:    	cmp    WORD PTR [rdi+0x2],0x3
  013e3:    	jne    0x13fc
  013e9:    	cmp    esi,0x6
  013ec:    	jge    0x13fc
  013f2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013f7:    	jmp    0x1474
  013fc:    	sub    rsp,0x40
  01400:    	movq   QWORD PTR [rsp],xmm2
  01405:    	movq   QWORD PTR [rsp+0x8],xmm3
  0140b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01411:    	movq   QWORD PTR [rsp+0x18],xmm5
  01417:    	movq   QWORD PTR [rsp+0x20],xmm7
  0141d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01424: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0142b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01432: b5 	movabs rax,0x55b5b00a3ef0
  0143c:    	call   rax
  0143e:    	movq   xmm2,QWORD PTR [rsp]
  01443:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01449:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0144f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01455:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0145b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01462: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01469: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01470:    	add    rsp,0x40
  01474: ff 	mov    QWORD PTR [rbp-0x98],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  0147b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01482: 00 	test   rdi,0x1
  01489:    	jne    0x31eb2
  0148f: 00 	test   rdi,0x2
  01496:    	je     0x14d2
  0149c:    	xorps  xmm6,xmm6
  0149f: 00 	movabs rax,0x8000000000000002
  014a9:    	cmp    rdi,rax
  014ac:    	je     0x14e4
  014b2:    	mov    rax,rdi
  014b5:    	sar    rax,0x3f
  014b9:    	add    rax,0x2
  014bd:    	and    rdi,0xfffffffffffffffc
  014c1:    	or     rdi,rax
  014c4:    	rol    rdi,0x3d
  014c8:    	movq   xmm6,rdi
  014cd:    	jmp    0x14e4
  014d2:    	call   0xfffdee24
  014d7:    	test   rax,rax
  014da:    	je     0x31eb2
  014e0:    	movq   xmm6,xmm0
  014e4:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014e9:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014ed:    	mov    rax,QWORD PTR [rbp-0x10]
  014f1:    	mov    rax,QWORD PTR [rax]
  014f4:    	mov    rax,QWORD PTR [rax-0x28]
  014f8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00103 %16 = 2: i32
  014ff: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  0150a:    	sub    rsp,0x50
  0150e:    	movq   QWORD PTR [rsp],xmm2
  01513:    	movq   QWORD PTR [rsp+0x8],xmm3
  01519:    	movq   QWORD PTR [rsp+0x10],xmm4
  0151f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01525:    	movq   QWORD PTR [rsp+0x20],xmm6
  0152b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01531: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01538: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0153f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01546: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0154d: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01554:    	mov    rdi,rbx
  01557:    	mov    rsi,r12
  0155a: b5 	movabs r8,0x55b5b07b78c8
  01564: b5 	movabs rax,0x55b5b0091aa0
  0156e:    	call   rax
  01570:    	movq   xmm2,QWORD PTR [rsp]
  01575:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0157b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01581:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01587:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0158d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01593: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0159a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015a1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015a8:    	add    rsp,0x50
  015ac: b5 	movabs r13,0x55b5b07b78d0
  015b6:    	test   rax,rax
  015b9:    	je     0xfffdedcb
  015bf: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00105 %14 = %15.call z()                   [Vec]
  015c6: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015cd: 00 	test   rdi,0x7
  015d4:    	jne    0x31f22
  015da:    	cmp    DWORD PTR [rdi+0x4],0x28
  015de:    	jne    0x31f22
  015e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe08ca],0x26        # 0xfffe1eb5
  015eb:    	jne    0x31f22
  015f1:    	mov    esi,DWORD PTR [rip+0xf1d]        # 0x2514
  015f7:    	cmp    esi,0xffffffff
  015fa:    	je     0x31f92
  01600:    	cmp    WORD PTR [rdi+0x2],0x3
  01605:    	jne    0x161e
  0160b:    	cmp    esi,0x6
  0160e:    	jge    0x161e
  01614:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01619:    	jmp    0x1696
  0161e:    	sub    rsp,0x40
  01622:    	movq   QWORD PTR [rsp],xmm2
  01627:    	movq   QWORD PTR [rsp+0x8],xmm3
  0162d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01633:    	movq   QWORD PTR [rsp+0x18],xmm5
  01639:    	movq   QWORD PTR [rsp+0x20],xmm7
  0163f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01646: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0164d: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01654: b5 	movabs rax,0x55b5b00a3ef0
  0165e:    	call   rax
  01660:    	movq   xmm2,QWORD PTR [rsp]
  01665:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0166b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01671:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01677:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0167d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01684: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0168b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01692:    	add    rsp,0x40
  01696: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0169d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  016a4: 00 	test   rdi,0x1
  016ab:    	jne    0x32027
  016b1: 00 	test   rdi,0x2
  016b8:    	je     0x16f4
  016be:    	xorps  xmm6,xmm6
  016c1: 00 	movabs rax,0x8000000000000002
  016cb:    	cmp    rdi,rax
  016ce:    	je     0x1706
  016d4:    	mov    rax,rdi
  016d7:    	sar    rax,0x3f
  016db:    	add    rax,0x2
  016df:    	and    rdi,0xfffffffffffffffc
  016e3:    	or     rdi,rax
  016e6:    	rol    rdi,0x3d
  016ea:    	movq   xmm6,rdi
  016ef:    	jmp    0x1706
  016f4:    	call   0xfffdee24
  016f9:    	test   rax,rax
  016fc:    	je     0x32027
  01702:    	movq   xmm6,xmm0
  01706:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  0170a:    	movq   xmm11,xmm3
  0170f:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  01714: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe07ad]        # 0xfffe1ec8
  0171b: 00 	cmp    rax,QWORD PTR [rip+0xe06]        # 0x2528
  01722:    	jne    0x32097
  01728: 00 	mov    rax,QWORD PTR [rip+0xde9]        # 0x2518
  0172f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  01736:    	movq   xmm0,xmm9
  0173b:    	call   0xfffdef48
  01740: ff 	mov    QWORD PTR [rbp-0x98],rax
  01747:    	movq   xmm0,xmm10
  0174c:    	call   0xfffdef48
  01751: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01758:    	movq   xmm0,xmm11
  0175d:    	call   0xfffdef48
  01762: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01769: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01770: 00 	test   rdi,0x7
  01777:    	jne    0x32157
  0177d:    	cmp    DWORD PTR [rdi+0x4],0x29
  01781:    	jne    0x32157
  01787: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0727],0x26        # 0xfffe1eb5
  0178e:    	jne    0x32157
  01794: 00 	mov    r9,0x0
  0179b:    	sub    rsp,0x40
  0179f:    	movq   QWORD PTR [rsp],xmm2
  017a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  017aa:    	movq   QWORD PTR [rsp+0x10],xmm5
  017b0:    	movq   QWORD PTR [rsp+0x18],xmm7
  017b6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017bd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017c4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017cb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017d2:    	mov    rdx,rdi
  017d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017de:    	mov    QWORD PTR [rsp-0x38],rcx
  017e3:    	mov    rax,QWORD PTR [rbx]
  017e6:    	lea    rsi,[rsp-0x18]
  017eb:    	mov    QWORD PTR [rsi],rax
  017ee:    	mov    QWORD PTR [rbx],rsi
  017f1: ff 	lea    rcx,[rbp-0x98]
  017f8: 00 	mov    r8,0x3
  017ff:    	call   0x321c5
  01804:    	lea    rdi,[rbp-0x8]
  01808:    	mov    QWORD PTR [rbx],rdi
  0180b:    	movq   xmm2,QWORD PTR [rsp]
  01810:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01816:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0181c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01822: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01829: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01830: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01837: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0183e:    	add    rsp,0x40
  01842: b5 	movabs r13,0x55b5b07b7980
  0184c:    	test   rax,rax
  0184f:    	je     0xfffdedcb
  01855:    	mov    QWORD PTR [rbp-0x78],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01859: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe0668]        # 0xfffe1ec8
  01860: 00 	cmp    rax,QWORD PTR [rip+0xce1]        # 0x2548
  01867:    	jne    0x321f7
  0186d: 00 	mov    rax,QWORD PTR [rip+0xcc4]        # 0x2538
  01874: ff 	mov    QWORD PTR [rbp-0x90],rax
:00118 %14 = dynvar(2, %7)
  0187b:    	mov    rax,QWORD PTR [rbp-0x10]
  0187f:    	mov    rax,QWORD PTR [rax]
  01882:    	mov    rax,QWORD PTR [rax-0x50]
  01886: ff 	mov    QWORD PTR [rbp-0x98],rax
:00119 %15 = %10
  0188d:    	mov    rax,QWORD PTR [rbp-0x78]
  01891: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01898: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0189f: 00 	test   rdi,0x7
  018a6:    	jne    0x322ab
  018ac:    	cmp    DWORD PTR [rdi+0x4],0x2f
  018b0:    	jne    0x322ab
  018b6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe05f8],0x26        # 0xfffe1eb5
  018bd:    	jne    0x322ab
  018c3: 00 	mov    r9,0x0
  018ca:    	sub    rsp,0x40
  018ce:    	movq   QWORD PTR [rsp],xmm2
  018d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  018d9:    	movq   QWORD PTR [rsp+0x10],xmm5
  018df:    	movq   QWORD PTR [rsp+0x18],xmm7
  018e5: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018ec: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018f3: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018fa: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01901:    	mov    rdx,rdi
  01904: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0190d:    	mov    QWORD PTR [rsp-0x38],rcx
  01912:    	mov    rax,QWORD PTR [rbx]
  01915:    	lea    rsi,[rsp-0x18]
  0191a:    	mov    QWORD PTR [rsi],rax
  0191d:    	mov    QWORD PTR [rbx],rsi
  01920: ff 	lea    rcx,[rbp-0x98]
  01927: 00 	mov    r8,0x2
  0192e:    	call   0x32319
  01933:    	lea    rdi,[rbp-0x8]
  01937:    	mov    QWORD PTR [rbx],rdi
  0193a:    	movq   xmm2,QWORD PTR [rsp]
  0193f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01945:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0194b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01951: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01958: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0195f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01966: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0196d:    	add    rsp,0x40
  01971: b5 	movabs r13,0x55b5b07b79e0
  0197b:    	test   rax,rax
  0197e:    	je     0xfffdedcb
  01984:    	mov    QWORD PTR [rbp-0x80],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01988: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe0539]        # 0xfffe1ec8
  0198f: 00 	cmp    rax,QWORD PTR [rip+0xbd2]        # 0x2568
  01996:    	jne    0x3234b
  0199c: 00 	mov    rax,QWORD PTR [rip+0xbb5]        # 0x2558
  019a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  019aa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  019b1: 00 	test   rdi,0x7
  019b8:    	jne    0x323ff
  019be:    	cmp    DWORD PTR [rdi+0x4],0x31
  019c2:    	jne    0x323ff
  019c8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe04e6],0x26        # 0xfffe1eb5
  019cf:    	jne    0x323ff
  019d5: 00 	mov    r9,0x0
  019dc:    	sub    rsp,0x40
  019e0:    	movq   QWORD PTR [rsp],xmm2
  019e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  019eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  019f1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019f7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019fe: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a05: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a0c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a13:    	mov    rdx,rdi
  01a16: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a1f:    	mov    QWORD PTR [rsp-0x38],rcx
  01a24:    	mov    rax,QWORD PTR [rbx]
  01a27:    	lea    rsi,[rsp-0x18]
  01a2c:    	mov    QWORD PTR [rsi],rax
  01a2f:    	mov    QWORD PTR [rbx],rsi
  01a32: ff 	lea    rcx,[rbp-0x98]
  01a39: 00 	mov    r8,0x0
  01a40:    	call   0x3246d
  01a45:    	lea    rdi,[rbp-0x8]
  01a49:    	mov    QWORD PTR [rbx],rdi
  01a4c:    	movq   xmm2,QWORD PTR [rsp]
  01a51:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a57:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a5d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a63: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a6a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a71: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a78: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a7f:    	add    rsp,0x40
  01a83: b5 	movabs r13,0x55b5b07b7a20
  01a8d:    	test   rax,rax
  01a90:    	je     0xfffdedcb
  01a96: ff 	mov    QWORD PTR [rbp-0x88],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01a9d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01aa1:    	mov    rax,QWORD PTR [rdi+0x10]
  01aa5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00128 %14 = 0: i32
  01aac: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ab7:    	sub    rsp,0x40
  01abb:    	movq   QWORD PTR [rsp],xmm2
  01ac0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ac6:    	movq   QWORD PTR [rsp+0x10],xmm5
  01acc:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ad2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ad9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ae0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ae7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01aee: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01af5: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01afc:    	mov    rdi,rbx
  01aff:    	mov    rsi,r12
  01b02: b5 	movabs r8,0x55b5b07b7a58
  01b0c: b5 	movabs rax,0x55b5b0091aa0
  01b16:    	call   rax
  01b18:    	movq   xmm2,QWORD PTR [rsp]
  01b1d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b23:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b29:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b2f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b36: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b3d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b44: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b4b:    	add    rsp,0x40
  01b4f: b5 	movabs r13,0x55b5b07b7a60
  01b59:    	test   rax,rax
  01b5c:    	je     0xfffdedcb
  01b62: ff 	mov    QWORD PTR [rbp-0x90],rax
:00130 %14 = %11
  01b69:    	mov    rax,QWORD PTR [rbp-0x80]
  01b6d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00131 %15 = %12
  01b74: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01b7b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01b82: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b89: 00 	test   rdi,0x7
  01b90:    	jne    0x3249f
  01b96:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01b9a:    	jne    0x3249f
  01ba0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe030e],0x26        # 0xfffe1eb5
  01ba7:    	jne    0x3249f
  01bad:    	sub    rsp,0x40
  01bb1:    	movq   QWORD PTR [rsp],xmm2
  01bb6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bbc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bc2:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bc8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bcf: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bd6: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bdd: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01be4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bed:    	mov    QWORD PTR [rsp-0x38],rcx
  01bf2:    	mov    rax,QWORD PTR [rbx]
  01bf5:    	lea    rsi,[rsp-0x18]
  01bfa:    	mov    QWORD PTR [rsi],rax
  01bfd:    	mov    QWORD PTR [rbx],rsi
  01c00: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01c07:    	mov    QWORD PTR [rsp-0x38],rax
  01c0c: 00 	mov    rdi,0x2
  01c13:    	lea    r8,[rsp-0x40]
  01c18: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01c1f:    	mov    QWORD PTR [r8],rax
  01c22:    	sub    r8,0x8
  01c26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01c2d:    	mov    QWORD PTR [r8],rax
  01c30:    	sub    r8,0x8
  01c34: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c3d: 10 	movabs rax,0x1001000000046
  01c47:    	mov    QWORD PTR [rsp-0x28],rax
  01c4c: b5 	movabs r13,0x55b5b07be970
  01c56:    	call   0xfffe2b02
  01c5b:    	lea    rdi,[rbp-0x8]
  01c5f:    	mov    QWORD PTR [rbx],rdi
  01c62:    	movq   xmm2,QWORD PTR [rsp]
  01c67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c6d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c73:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c79: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c80: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c87: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c8e: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c95:    	add    rsp,0x40
  01c99: b5 	movabs r13,0x55b5b07b7aa0
  01ca3:    	test   rax,rax
  01ca6:    	je     0xfffdedcb
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01cac:    	mov    rdi,QWORD PTR [rbp-0x28]
  01cb0:    	mov    rax,QWORD PTR [rdi+0x10]
  01cb4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00136 %14 = 1: i32
  01cbb: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01cc6:    	sub    rsp,0x40
  01cca:    	movq   QWORD PTR [rsp],xmm2
  01ccf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cd5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01cdb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ce1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ce8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cef: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01cf6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01cfd: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01d04: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01d0b:    	mov    rdi,rbx
  01d0e:    	mov    rsi,r12
  01d11: b5 	movabs r8,0x55b5b07b7ad8
  01d1b: b5 	movabs rax,0x55b5b0091aa0
  01d25:    	call   rax
  01d27:    	movq   xmm2,QWORD PTR [rsp]
  01d2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d32:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d38:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d3e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d45: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d4c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d53: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d5a:    	add    rsp,0x40
  01d5e: b5 	movabs r13,0x55b5b07b7ae0
  01d68:    	test   rax,rax
  01d6b:    	je     0xfffdedcb
  01d71: ff 	mov    QWORD PTR [rbp-0x90],rax
:00138 %14 = %11
  01d78:    	mov    rax,QWORD PTR [rbp-0x80]
  01d7c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00139 %15 = %12
  01d83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01d8a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01d91: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01d98: 00 	test   rdi,0x7
  01d9f:    	jne    0x3250d
  01da5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01da9:    	jne    0x3250d
  01daf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe00ff],0x26        # 0xfffe1eb5
  01db6:    	jne    0x3250d
  01dbc:    	sub    rsp,0x40
  01dc0:    	movq   QWORD PTR [rsp],xmm2
  01dc5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dcb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01dd1:    	movq   QWORD PTR [rsp+0x18],xmm7
  01dd7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01dde: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01de5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01dec: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01df3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01dfc:    	mov    QWORD PTR [rsp-0x38],rcx
  01e01:    	mov    rax,QWORD PTR [rbx]
  01e04:    	lea    rsi,[rsp-0x18]
  01e09:    	mov    QWORD PTR [rsi],rax
  01e0c:    	mov    QWORD PTR [rbx],rsi
  01e0f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01e16:    	mov    QWORD PTR [rsp-0x38],rax
  01e1b: 00 	mov    rdi,0x2
  01e22:    	lea    r8,[rsp-0x40]
  01e27: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01e2e:    	mov    QWORD PTR [r8],rax
  01e31:    	sub    r8,0x8
  01e35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01e3c:    	mov    QWORD PTR [r8],rax
  01e3f:    	sub    r8,0x8
  01e43: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e4c: 10 	movabs rax,0x1001000000046
  01e56:    	mov    QWORD PTR [rsp-0x28],rax
  01e5b: b5 	movabs r13,0x55b5b07be970
  01e65:    	call   0xfffe2b02
  01e6a:    	lea    rdi,[rbp-0x8]
  01e6e:    	mov    QWORD PTR [rbx],rdi
  01e71:    	movq   xmm2,QWORD PTR [rsp]
  01e76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e7c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e82:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e88: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e8f: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e96: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e9d: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ea4:    	add    rsp,0x40
  01ea8: b5 	movabs r13,0x55b5b07b7b20
  01eb2:    	test   rax,rax
  01eb5:    	je     0xfffdedcb
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01ebb:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ebf:    	mov    rax,QWORD PTR [rdi+0x10]
  01ec3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00144 %14 = 2: i32
  01eca: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01ed5:    	sub    rsp,0x40
  01ed9:    	movq   QWORD PTR [rsp],xmm2
  01ede:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ee4:    	movq   QWORD PTR [rsp+0x10],xmm5
  01eea:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ef0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ef7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01efe: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f05: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f0c: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01f13: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01f1a:    	mov    rdi,rbx
  01f1d:    	mov    rsi,r12
  01f20: b5 	movabs r8,0x55b5b07b7b58
  01f2a: b5 	movabs rax,0x55b5b0091aa0
  01f34:    	call   rax
  01f36:    	movq   xmm2,QWORD PTR [rsp]
  01f3b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f41:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f47:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f4d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f54: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f5b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f62: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f69:    	add    rsp,0x40
  01f6d: b5 	movabs r13,0x55b5b07b7b60
  01f77:    	test   rax,rax
  01f7a:    	je     0xfffdedcb
  01f80: ff 	mov    QWORD PTR [rbp-0x90],rax
:00146 %14 = %11
  01f87:    	mov    rax,QWORD PTR [rbp-0x80]
  01f8b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 %15 = %12
  01f92: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01f99: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01fa0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fa7: 00 	test   rdi,0x7
  01fae:    	jne    0x3257b
  01fb4:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01fb8:    	jne    0x3257b
  01fbe: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfef0],0x26        # 0xfffe1eb5
  01fc5:    	jne    0x3257b
  01fcb:    	sub    rsp,0x40
  01fcf:    	movq   QWORD PTR [rsp],xmm2
  01fd4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01fda:    	movq   QWORD PTR [rsp+0x10],xmm5
  01fe0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01fe6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01fed: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ff4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ffb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02002: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0200b:    	mov    QWORD PTR [rsp-0x38],rcx
  02010:    	mov    rax,QWORD PTR [rbx]
  02013:    	lea    rsi,[rsp-0x18]
  02018:    	mov    QWORD PTR [rsi],rax
  0201b:    	mov    QWORD PTR [rbx],rsi
  0201e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02025:    	mov    QWORD PTR [rsp-0x38],rax
  0202a: 00 	mov    rdi,0x2
  02031:    	lea    r8,[rsp-0x40]
  02036: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0203d:    	mov    QWORD PTR [r8],rax
  02040:    	sub    r8,0x8
  02044: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0204b:    	mov    QWORD PTR [r8],rax
  0204e:    	sub    r8,0x8
  02052: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0205b: 10 	movabs rax,0x1001000000046
  02065:    	mov    QWORD PTR [rsp-0x28],rax
  0206a: b5 	movabs r13,0x55b5b07be970
  02074:    	call   0xfffe2b02
  02079:    	lea    rdi,[rbp-0x8]
  0207d:    	mov    QWORD PTR [rbx],rdi
  02080:    	movq   xmm2,QWORD PTR [rsp]
  02085:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0208b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02091:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02097: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0209e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020a5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020ac: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020b3:    	add    rsp,0x40
  020b7: b5 	movabs r13,0x55b5b07b7ba0
  020c1:    	test   rax,rax
  020c4:    	je     0xfffdedcb
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  020ca:    	mov    rdi,QWORD PTR [rbp-0x28]
  020ce:    	mov    rax,QWORD PTR [rdi+0x18]
  020d2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00152 %14 = %11
  020d9:    	mov    rax,QWORD PTR [rbp-0x80]
  020dd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00153 %15 = %12
  020e4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  020eb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  020f2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  020f9: 00 	test   rdi,0x7
  02100:    	jne    0x325e9
  02106:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0210a:    	jne    0x325e9
  02110: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfd9e],0x26        # 0xfffe1eb5
  02117:    	jne    0x325e9
  0211d:    	sub    rsp,0x40
  02121:    	movq   QWORD PTR [rsp],xmm2
  02126:    	movq   QWORD PTR [rsp+0x8],xmm4
  0212c:    	movq   QWORD PTR [rsp+0x10],xmm5
  02132:    	movq   QWORD PTR [rsp+0x18],xmm7
  02138: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0213f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02146: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0214d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02154: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0215d:    	mov    QWORD PTR [rsp-0x38],rcx
  02162:    	mov    rax,QWORD PTR [rbx]
  02165:    	lea    rsi,[rsp-0x18]
  0216a:    	mov    QWORD PTR [rsi],rax
  0216d:    	mov    QWORD PTR [rbx],rsi
  02170: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02177:    	mov    QWORD PTR [rsp-0x38],rax
  0217c: 00 	mov    rdi,0x2
  02183:    	lea    r8,[rsp-0x40]
  02188: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0218f:    	mov    QWORD PTR [r8],rax
  02192:    	sub    r8,0x8
  02196: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0219d:    	mov    QWORD PTR [r8],rax
  021a0:    	sub    r8,0x8
  021a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021ad: 0e 	movabs rax,0x1000e00000048
  021b7:    	mov    QWORD PTR [rsp-0x28],rax
  021bc: b5 	movabs r13,0x55b5b07c4d60
  021c6:    	call   0xfffe3110
  021cb:    	lea    rdi,[rbp-0x8]
  021cf:    	mov    QWORD PTR [rbx],rdi
  021d2:    	movq   xmm2,QWORD PTR [rsp]
  021d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021dd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021e3:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021e9: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021f0: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021f7: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021fe: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02205:    	add    rsp,0x40
  02209: b5 	movabs r13,0x55b5b07b7c00
  02213:    	test   rax,rax
  02216:    	je     0xfffdedcb
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  0221c: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  02223: 00 	test   rdi,0x7
  0222a:    	jne    0x32657
  02230:    	cmp    DWORD PTR [rdi+0x4],0x30
  02234:    	jne    0x32657
  0223a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfc74],0x26        # 0xfffe1eb5
  02241:    	jne    0x32657
  02247:    	mov    esi,DWORD PTR [rip+0x327]        # 0x2574
  0224d:    	cmp    esi,0xffffffff
  02250:    	je     0x326c5
  02256:    	cmp    WORD PTR [rdi+0x2],0x3
  0225b:    	jne    0x2274
  02261:    	cmp    esi,0x6
  02264:    	jge    0x2274
  0226a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0226f:    	jmp    0x22ee
  02274:    	sub    rsp,0x40
  02278:    	movq   QWORD PTR [rsp],xmm2
  0227d:    	movq   QWORD PTR [rsp+0x8],xmm4
  02283:    	movq   QWORD PTR [rsp+0x10],xmm5
  02289:    	movq   QWORD PTR [rsp+0x18],xmm7
  0228f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02296: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0229d: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022a4: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  022ab: b5 	movabs rax,0x55b5b00a3ef0
  022b5:    	call   rax
  022b7:    	movq   xmm2,QWORD PTR [rsp]
  022bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  022c2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  022c8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  022ce: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  022d5: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  022dc: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  022e3: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  022ea:    	add    rsp,0x40
  022ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00158 
:00160 condnotbr %13 =>:00166
  022f5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022fc:    	or     rax,0x10
  02300:    	cmp    rax,0x14
  02304:    	je     0x23cd
:00161 %13 = dynvar(2, %6)
  0230a:    	mov    rax,QWORD PTR [rbp-0x10]
  0230e:    	mov    rax,QWORD PTR [rax]
  02311:    	mov    rax,QWORD PTR [rax-0x48]
  02315: ff 	mov    QWORD PTR [rbp-0x90],rax
:00162 %14 = literal[1.0]
  0231c: 00 	movq   xmm3,QWORD PTR [rip+0x254]        # 0x2578
  02324: 00 	movabs rax,0xff80000000000002
  0232e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00163 %13 = %13 + %14                      [Float][Float]
  02335: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0233c: 00 	test   rdi,0x1
  02343:    	jne    0x3275c
  02349: 00 	test   rdi,0x2
  02350:    	je     0x238c
  02356:    	xorps  xmm6,xmm6
  02359: 00 	movabs rax,0x8000000000000002
  02363:    	cmp    rdi,rax
  02366:    	je     0x239e
  0236c:    	mov    rax,rdi
  0236f:    	sar    rax,0x3f
  02373:    	add    rax,0x2
  02377:    	and    rdi,0xfffffffffffffffc
  0237b:    	or     rdi,rax
  0237e:    	rol    rdi,0x3d
  02382:    	movq   xmm6,rdi
  02387:    	jmp    0x239e
  0238c:    	call   0xfffdee24
  02391:    	test   rax,rax
  02394:    	je     0x3275c
  0239a:    	movq   xmm6,xmm0
  0239e:    	addsd  xmm6,xmm3
:00164 dynvar(2, %6) = %13
  023a2:    	movq   xmm0,xmm6
  023a6:    	call   0xfffdef48
  023ab: ff 	mov    QWORD PTR [rbp-0x90],rax
  023b2:    	mov    rax,QWORD PTR [rbp-0x10]
  023b6:    	mov    rax,QWORD PTR [rax]
  023b9: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  023c0:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  023c4: ff 	mov    rax,QWORD PTR [rbp-0x90]
  023cb:    	leave  
  023cc:    	ret    
:00166 %13 = literal[0.0]
  023cd: 00 	movq   xmm3,QWORD PTR [rip+0x1b3]        # 0x2588
  023d5: 00 	movabs rax,0x8000000000000002
  023df: ff 	mov    QWORD PTR [rbp-0x90],rax
:00167 ret %13
  023e6: ff 	mov    rax,QWORD PTR [rbp-0x90]
  023ed:    	leave  
  023ee:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55b5b07c4d60
<== finished compile. elapsed:183.1µs
offset:Pos(145400) code: 6650 bytes  data: 374 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x3023a
  00022:    	jmp    0x3023a
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x30249
  00097:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0009b:    	jne    0x30249
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a5:    	mov    rax,QWORD PTR [rdi+0x10]
  000a9:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  000ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  000b1:    	mov    rax,QWORD PTR [rdi+0x18]
  000b5:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  000bd: 00 	test   rdi,0x7
  000c4:    	jne    0x30258
  000ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  000ce:    	jne    0x30258
  000d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf84a],0x26        # 0xfffdf925
  000db:    	jne    0x30258
  000e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000ea:    	mov    QWORD PTR [rsp-0x38],rcx
  000ef:    	mov    rax,QWORD PTR [rbx]
  000f2:    	lea    rsi,[rsp-0x18]
  000f7:    	mov    QWORD PTR [rsi],rax
  000fa:    	mov    QWORD PTR [rbx],rsi
  000fd:    	mov    rax,QWORD PTR [rbp-0x60]
  00101:    	mov    QWORD PTR [rsp-0x38],rax
  00106: 00 	mov    rdi,0x1
  0010d:    	lea    r8,[rsp-0x40]
  00112:    	mov    rax,QWORD PTR [rbp-0x68]
  00116:    	mov    QWORD PTR [r8],rax
  00119:    	sub    r8,0x8
  0011d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00126: 05 	movabs rax,0x1000500000042
  00130:    	mov    QWORD PTR [rsp-0x28],rax
  00135: b5 	movabs r13,0x55b5b07ddec0
  0013f:    	call   0xfffe0696
  00144:    	lea    rdi,[rbp-0x8]
  00148:    	mov    QWORD PTR [rbx],rdi
  0014b: b5 	movabs r13,0x55b5b07c4db0
  00155:    	test   rax,rax
  00158:    	je     0xfffdc83b
  0015e:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00162:    	mov    rdi,QWORD PTR [rbp-0x40]
  00166: 00 	test   rdi,0x1
  0016d:    	jne    0x30267
  00173: 00 	test   rdi,0x2
  0017a:    	je     0x1b6
  00180:    	xorps  xmm2,xmm2
  00183: 00 	movabs rax,0x8000000000000002
  0018d:    	cmp    rdi,rax
  00190:    	je     0x1c8
  00196:    	mov    rax,rdi
  00199:    	sar    rax,0x3f
  0019d:    	add    rax,0x2
  001a1:    	and    rdi,0xfffffffffffffffc
  001a5:    	or     rdi,rax
  001a8:    	rol    rdi,0x3d
  001ac:    	movq   xmm2,rdi
  001b1:    	jmp    0x1c8
  001b6:    	call   0xfffdc894
  001bb:    	test   rax,rax
  001be:    	je     0x30267
  001c4:    	movq   xmm2,xmm0
  001c8: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1839]        # 0x1a08
:00007 %7 = %1.call dir()                   [Ray]
  001cf:    	mov    rdi,QWORD PTR [rbp-0x30]
  001d3: 00 	test   rdi,0x7
  001da:    	jne    0x30276
  001e0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001e4:    	jne    0x30276
  001ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf734],0x26        # 0xfffdf925
  001f1:    	jne    0x30276
  001f7:    	mov    esi,DWORD PTR [rip+0x1817]        # 0x1a14
  001fd:    	cmp    esi,0xffffffff
  00200:    	je     0x30292
  00206:    	cmp    WORD PTR [rdi+0x2],0x3
  0020b:    	jne    0x224
  00211:    	cmp    esi,0x6
  00214:    	jge    0x224
  0021a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0021f:    	jmp    0x242
  00224:    	sub    rsp,0x10
  00228:    	movq   QWORD PTR [rsp],xmm2
  0022d: b5 	movabs rax,0x55b5b00a3ef0
  00237:    	call   rax
  00239:    	movq   xmm2,QWORD PTR [rsp]
  0023e:    	add    rsp,0x10
  00242:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00246:    	mov    rdi,QWORD PTR [rbp-0x28]
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x302cd
  00263:    	cmp    DWORD PTR [rdi+0x4],0x28
  00267:    	jne    0x302cd
  0026d: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf6b1],0x26        # 0xfffdf925
  00274:    	jne    0x302cd
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028c:    	mov    QWORD PTR [rsp-0x38],rcx
  00291:    	mov    rax,QWORD PTR [rbx]
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rsi],rax
  0029c:    	mov    QWORD PTR [rbx],rsi
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	lea    r8,[rsp-0x40]
  002b4:    	mov    rax,QWORD PTR [rbp-0x68]
  002b8:    	mov    QWORD PTR [r8],rax
  002bb:    	sub    r8,0x8
  002bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c8: 05 	movabs rax,0x1000500000042
  002d2:    	mov    QWORD PTR [rsp-0x28],rax
  002d7: b5 	movabs r13,0x55b5b07ddec0
  002e1:    	call   0xfffe0696
  002e6:    	lea    rdi,[rbp-0x8]
  002ea:    	mov    QWORD PTR [rbx],rdi
  002ed:    	movq   xmm2,QWORD PTR [rsp]
  002f2:    	add    rsp,0x10
  002f6: b5 	movabs r13,0x55b5b07c4e30
  00300:    	test   rax,rax
  00303:    	je     0xfffdc83b
  00309:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  0030d:    	mov    rax,QWORD PTR [rbp-0x48]
  00311:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  00315: 00 	movq   xmm3,QWORD PTR [rip+0x16fb]        # 0x1a18
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0032b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0032f: 00 	test   rdi,0x1
  00336:    	jne    0x302e9
  0033c: 00 	test   rdi,0x2
  00343:    	je     0x37f
  00349:    	xorps  xmm4,xmm4
  0034c: 00 	movabs rax,0x8000000000000002
  00356:    	cmp    rdi,rax
  00359:    	je     0x391
  0035f:    	mov    rax,rdi
  00362:    	sar    rax,0x3f
  00366:    	add    rax,0x2
  0036a:    	and    rdi,0xfffffffffffffffc
  0036e:    	or     rdi,rax
  00371:    	rol    rdi,0x3d
  00375:    	movq   xmm4,rdi
  0037a:    	jmp    0x391
  0037f:    	call   0xfffdc894
  00384:    	test   rax,rax
  00387:    	je     0x302e9
  0038d:    	movq   xmm4,xmm0
  00391:    	ucomisd xmm4,xmm3
  00395:    	jae    0x30305
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0039b:    	movq   xmm5,xmm4
  0039f: 00 	xorps  xmm5,XMMWORD PTR [rip+0x1682]        # 0x1a28
:00020 br =>:00021
  003a6:    	jmp    0x3032b
:00021 %7 = literal[1e-17]
  003ab: 00 	movq   xmm3,QWORD PTR [rip+0x1685]        # 0x1a38
  003b3: aa 	movabs rax,0xe33877aa3236a4ba
  003bd:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003c1:    	mov    rdi,QWORD PTR [rbp-0x50]
  003c5: 00 	test   rdi,0x1
  003cc:    	jne    0x3035e
  003d2: 00 	test   rdi,0x2
  003d9:    	je     0x415
  003df:    	xorps  xmm5,xmm5
  003e2: 00 	movabs rax,0x8000000000000002
  003ec:    	cmp    rdi,rax
  003ef:    	je     0x427
  003f5:    	mov    rax,rdi
  003f8:    	sar    rax,0x3f
  003fc:    	add    rax,0x2
  00400:    	and    rdi,0xfffffffffffffffc
  00404:    	or     rdi,rax
  00407:    	rol    rdi,0x3d
  0040b:    	movq   xmm5,rdi
  00410:    	jmp    0x427
  00415:    	call   0xfffdc894
  0041a:    	test   rax,rax
  0041d:    	je     0x3035e
  00423:    	movq   xmm5,xmm0
  00427:    	ucomisd xmm5,xmm3
  0042b:    	jae    0x43f
:00024 %7 = nil
  00431: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00439:    	mov    rax,QWORD PTR [rbp-0x60]
  0043d:    	leave  
  0043e:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  0043f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00443: 00 	test   rdi,0x7
  0044a:    	jne    0x3037a
  00450:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00454:    	jne    0x3037a
  0045a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf4c4],0x26        # 0xfffdf925
  00461:    	jne    0x3037a
  00467:    	mov    esi,DWORD PTR [rip+0x15d7]        # 0x1a44
  0046d:    	cmp    esi,0xffffffff
  00470:    	je     0x30396
  00476:    	cmp    WORD PTR [rdi+0x2],0x3
  0047b:    	jne    0x494
  00481:    	cmp    esi,0x6
  00484:    	jge    0x494
  0048a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0048f:    	jmp    0x4d6
  00494:    	sub    rsp,0x20
  00498:    	movq   QWORD PTR [rsp],xmm2
  0049d:    	movq   QWORD PTR [rsp+0x8],xmm3
  004a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  004a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  004af: b5 	movabs rax,0x55b5b00a3ef0
  004b9:    	call   rax
  004bb:    	movq   xmm2,QWORD PTR [rsp]
  004c0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004c6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004cc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004d2:    	add    rsp,0x20
  004d6:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004da:    	mov    rdi,QWORD PTR [rbp-0x28]
  004de:    	mov    rax,QWORD PTR [rdi+0x18]
  004e2:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004e6:    	mov    rdi,QWORD PTR [rbp-0x68]
  004ea: 00 	test   rdi,0x7
  004f1:    	jne    0x303f5
  004f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  004fb:    	jne    0x303f5
  00501: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf41d],0x26        # 0xfffdf925
  00508:    	jne    0x303f5
  0050e:    	sub    rsp,0x20
  00512:    	movq   QWORD PTR [rsp],xmm2
  00517:    	movq   QWORD PTR [rsp+0x8],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00523: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0052c:    	mov    QWORD PTR [rsp-0x38],rcx
  00531:    	mov    rax,QWORD PTR [rbx]
  00534:    	lea    rsi,[rsp-0x18]
  00539:    	mov    QWORD PTR [rsi],rax
  0053c:    	mov    QWORD PTR [rbx],rsi
  0053f:    	mov    rax,QWORD PTR [rbp-0x68]
  00543:    	mov    QWORD PTR [rsp-0x38],rax
  00548: 00 	mov    rdi,0x1
  0054f:    	lea    r8,[rsp-0x40]
  00554:    	mov    rax,QWORD PTR [rbp-0x70]
  00558:    	mov    QWORD PTR [r8],rax
  0055b:    	sub    r8,0x8
  0055f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00568: 05 	movabs rax,0x1000500000042
  00572:    	mov    QWORD PTR [rsp-0x28],rax
  00577: b5 	movabs r13,0x55b5b07ddec0
  00581:    	call   0xfffe0696
  00586:    	lea    rdi,[rbp-0x8]
  0058a:    	mov    QWORD PTR [rbx],rdi
  0058d:    	movq   xmm2,QWORD PTR [rsp]
  00592:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00598:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0059e:    	add    rsp,0x20
  005a2: b5 	movabs r13,0x55b5b07c4f70
  005ac:    	test   rax,rax
  005af:    	je     0xfffdc83b
  005b5:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  005bd: 00 	test   rdi,0x1
  005c4:    	jne    0x30411
  005ca: 00 	test   rdi,0x2
  005d1:    	je     0x60d
  005d7:    	xorps  xmm3,xmm3
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	cmp    rdi,rax
  005e7:    	je     0x61f
  005ed:    	mov    rax,rdi
  005f0:    	sar    rax,0x3f
  005f4:    	add    rax,0x2
  005f8:    	and    rdi,0xfffffffffffffffc
  005fc:    	or     rdi,rax
  005ff:    	rol    rdi,0x3d
  00603:    	movq   xmm3,rdi
  00608:    	jmp    0x61f
  0060d:    	call   0xfffdc894
  00612:    	test   rax,rax
  00615:    	je     0x30411
  0061b:    	movq   xmm3,xmm0
  0061f:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00623: 00 	xorps  xmm3,XMMWORD PTR [rip+0x141e]        # 0x1a48
:00036 %6 = %7 / %4                         [Float][Float]
  0062a:    	movq   xmm6,xmm3
  0062e:    	movq   rax,xmm4
  00633:    	test   rax,rax
  00636:    	je     0xfffdc860
  0063c:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00640: 00 	movq   xmm3,QWORD PTR [rip+0x1410]        # 0x1a58
  00648: 00 	movabs rax,0x8000000000000002
  00652:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00656:    	ucomisd xmm6,xmm3
  0065a:    	jbe    0x3138a
:00040 %7 = %2.call t()                     [<INVALID>]
  00660: 01 	sub    DWORD PTR [rip+0x13f9],0x1        # 0x1a60
  00667:    	je     0x30456
  0066d:    	sub    rsp,0x20
  00671:    	movq   QWORD PTR [rsp],xmm2
  00676:    	movq   QWORD PTR [rsp+0x8],xmm4
  0067c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00682:    	movq   QWORD PTR [rsp+0x18],xmm6
  00688:    	mov    rdi,QWORD PTR [rbp-0x38]
  0068c: b5 	movabs rax,0x55b5b009e670
  00696:    	call   rax
  00698:    	mov    r15d,eax
  0069b: 00 	cmp    r15d,DWORD PTR [rip+0x13c6]        # 0x1a68
  006a2:    	jne    0x30478
  006a8:    	mov    eax,DWORD PTR [rip+0xfffffffffffdf277]        # 0xfffdf925
  006ae:    	cmp    DWORD PTR [rip+0x13b0],eax        # 0x1a64
  006b4:    	jne    0x30478
  006ba: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006c3:    	mov    QWORD PTR [rsp-0x38],rcx
  006c8:    	mov    rax,QWORD PTR [rbx]
  006cb:    	lea    rsi,[rsp-0x18]
  006d0:    	mov    QWORD PTR [rsi],rax
  006d3:    	mov    QWORD PTR [rbx],rsi
  006d6:    	mov    rax,QWORD PTR [rbp-0x38]
  006da:    	mov    QWORD PTR [rsp-0x38],rax
  006df: 00 	mov    rdi,0x0
  006e6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006ef: 00 	movabs rax,0x0
  006f9:    	mov    QWORD PTR [rsp-0x28],rax
  006fe: 00 	movabs r13,0x0
  00708:    	call   0xfffdc808
  0070d:    	lea    rdi,[rbp-0x8]
  00711:    	mov    QWORD PTR [rbx],rdi
  00714:    	movq   xmm2,QWORD PTR [rsp]
  00719:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0071f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00725:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0072b:    	add    rsp,0x20
  0072f:    	test   rax,rax
  00732:    	je     0x304e4
  00738:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  0073c:    	movq   xmm0,xmm6
  00740:    	call   0xfffdc9b8
  00745:    	mov    QWORD PTR [rbp-0x58],rax
  00749:    	mov    rdi,QWORD PTR [rbp-0x58]
  0074d:    	mov    rsi,QWORD PTR [rbp-0x60]
  00751: 00 	test   rdi,0x1
  00758:    	je     0x304f3
  0075e: 00 	test   rsi,0x1
  00765:    	je     0x304f3
  0076b:    	cmp    rdi,rsi
  0076e:    	jge    0x313bd
:00045 %7 = literal[true]
  00774: 00 	mov    rax,0x1c
  0077b:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  0077f: 01 	sub    DWORD PTR [rip+0x12e6],0x1        # 0x1a6c
  00786:    	je     0x30564
  0078c:    	sub    rsp,0x20
  00790:    	movq   QWORD PTR [rsp],xmm2
  00795:    	movq   QWORD PTR [rsp+0x8],xmm4
  0079b:    	movq   QWORD PTR [rsp+0x10],xmm5
  007a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  007a7:    	mov    rdi,QWORD PTR [rbp-0x38]
  007ab: b5 	movabs rax,0x55b5b009e670
  007b5:    	call   rax
  007b7:    	mov    r15d,eax
  007ba: 00 	cmp    r15d,DWORD PTR [rip+0x12b3]        # 0x1a74
  007c1:    	jne    0x30586
  007c7:    	mov    eax,DWORD PTR [rip+0xfffffffffffdf158]        # 0xfffdf925
  007cd:    	cmp    DWORD PTR [rip+0x129d],eax        # 0x1a70
  007d3:    	jne    0x30586
  007d9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007e2:    	mov    QWORD PTR [rsp-0x38],rcx
  007e7:    	mov    rax,QWORD PTR [rbx]
  007ea:    	lea    rsi,[rsp-0x18]
  007ef:    	mov    QWORD PTR [rsi],rax
  007f2:    	mov    QWORD PTR [rbx],rsi
  007f5:    	mov    rax,QWORD PTR [rbp-0x38]
  007f9:    	mov    QWORD PTR [rsp-0x38],rax
  007fe: 00 	mov    rdi,0x1
  00805:    	lea    r8,[rsp-0x40]
  0080a:    	mov    rax,QWORD PTR [rbp-0x60]
  0080e:    	mov    QWORD PTR [r8],rax
  00811:    	sub    r8,0x8
  00815: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0081e: 00 	movabs rax,0x0
  00828:    	mov    QWORD PTR [rsp-0x28],rax
  0082d: 00 	movabs r13,0x0
  00837:    	call   0xfffdc808
  0083c:    	lea    rdi,[rbp-0x8]
  00840:    	mov    QWORD PTR [rbx],rdi
  00843:    	movq   xmm2,QWORD PTR [rsp]
  00848:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0084e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00854:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0085a:    	add    rsp,0x20
  0085e:    	test   rax,rax
  00861:    	je     0x305f2
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  00867: 01 	sub    DWORD PTR [rip+0x120a],0x1        # 0x1a78
  0086e:    	je     0x3061d
  00874:    	sub    rsp,0x20
  00878:    	movq   QWORD PTR [rsp],xmm2
  0087d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00883:    	movq   QWORD PTR [rsp+0x10],xmm5
  00889:    	movq   QWORD PTR [rsp+0x18],xmm6
  0088f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00893: b5 	movabs rax,0x55b5b009e670
  0089d:    	call   rax
  0089f:    	mov    r15d,eax
  008a2: 00 	cmp    r15d,DWORD PTR [rip+0x11d7]        # 0x1a80
  008a9:    	jne    0x3063f
  008af:    	mov    eax,DWORD PTR [rip+0xfffffffffffdf070]        # 0xfffdf925
  008b5:    	cmp    DWORD PTR [rip+0x11c1],eax        # 0x1a7c
  008bb:    	jne    0x3063f
  008c1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008ca:    	mov    QWORD PTR [rsp-0x38],rcx
  008cf:    	mov    rax,QWORD PTR [rbx]
  008d2:    	lea    rsi,[rsp-0x18]
  008d7:    	mov    QWORD PTR [rsi],rax
  008da:    	mov    QWORD PTR [rbx],rsi
  008dd:    	mov    rax,QWORD PTR [rbp-0x38]
  008e1:    	mov    QWORD PTR [rsp-0x38],rax
  008e6: 00 	mov    rdi,0x1
  008ed:    	lea    r8,[rsp-0x40]
  008f2:    	mov    rax,QWORD PTR [rbp-0x58]
  008f6:    	mov    QWORD PTR [r8],rax
  008f9:    	sub    r8,0x8
  008fd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00906: 00 	movabs rax,0x0
  00910:    	mov    QWORD PTR [rsp-0x28],rax
  00915: 00 	movabs r13,0x0
  0091f:    	call   0xfffdc808
  00924:    	lea    rdi,[rbp-0x8]
  00928:    	mov    QWORD PTR [rbx],rdi
  0092b:    	movq   xmm2,QWORD PTR [rsp]
  00930:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00936:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0093c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00942:    	add    rsp,0x20
  00946:    	test   rax,rax
  00949:    	je     0x306ab
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  0094f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00953:    	sub    rsp,0x20
  00957:    	movq   QWORD PTR [rsp],xmm2
  0095c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00962:    	movq   QWORD PTR [rsp+0x10],xmm5
  00968:    	movq   QWORD PTR [rsp+0x18],xmm6
  0096e: 00 	mov    rsi,0x97
  00975:    	mov    rdx,r12
  00978: b5 	movabs rax,0x55b5b0091cc0
  00982:    	call   rax
  00984:    	movq   xmm2,QWORD PTR [rsp]
  00989:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0098f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00995:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0099b:    	add    rsp,0x20
  0099f:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  009a3: 01 	sub    DWORD PTR [rip+0x10da],0x1        # 0x1a84
  009aa:    	je     0x306d6
  009b0:    	sub    rsp,0x20
  009b4:    	movq   QWORD PTR [rsp],xmm2
  009b9:    	movq   QWORD PTR [rsp+0x8],xmm4
  009bf:    	movq   QWORD PTR [rsp+0x10],xmm5
  009c5:    	movq   QWORD PTR [rsp+0x18],xmm6
  009cb:    	mov    rdi,QWORD PTR [rbp-0x38]
  009cf: b5 	movabs rax,0x55b5b009e670
  009d9:    	call   rax
  009db:    	mov    r15d,eax
  009de: 00 	cmp    r15d,DWORD PTR [rip+0x10a7]        # 0x1a8c
  009e5:    	jne    0x306f8
  009eb:    	mov    eax,DWORD PTR [rip+0xfffffffffffdef34]        # 0xfffdf925
  009f1:    	cmp    DWORD PTR [rip+0x1091],eax        # 0x1a88
  009f7:    	jne    0x306f8
  009fd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a06:    	mov    QWORD PTR [rsp-0x38],rcx
  00a0b:    	mov    rax,QWORD PTR [rbx]
  00a0e:    	lea    rsi,[rsp-0x18]
  00a13:    	mov    QWORD PTR [rsi],rax
  00a16:    	mov    QWORD PTR [rbx],rsi
  00a19:    	mov    rax,QWORD PTR [rbp-0x38]
  00a1d:    	mov    QWORD PTR [rsp-0x38],rax
  00a22: 00 	mov    rdi,0x1
  00a29:    	lea    r8,[rsp-0x40]
  00a2e:    	mov    rax,QWORD PTR [rbp-0x60]
  00a32:    	mov    QWORD PTR [r8],rax
  00a35:    	sub    r8,0x8
  00a39: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a42: 00 	movabs rax,0x0
  00a4c:    	mov    QWORD PTR [rsp-0x28],rax
  00a51: 00 	movabs r13,0x0
  00a5b:    	call   0xfffdc808
  00a60:    	lea    rdi,[rbp-0x8]
  00a64:    	mov    QWORD PTR [rbx],rdi
  00a67:    	movq   xmm2,QWORD PTR [rsp]
  00a6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a78:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a7e:    	add    rsp,0x20
  00a82:    	test   rax,rax
  00a85:    	je     0x30764
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00a8b: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdeea6]        # 0xfffdf938
  00a92: 00 	cmp    rax,QWORD PTR [rip+0x100f]        # 0x1aa8
  00a99:    	jne    0x30773
  00a9f: 00 	mov    rax,QWORD PTR [rip+0xff2]        # 0x1a98
  00aa6:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00aaa: 01 	sub    DWORD PTR [rip+0xfff],0x1        # 0x1ab0
  00ab1:    	je     0x3080b
  00ab7:    	sub    rsp,0x20
  00abb:    	movq   QWORD PTR [rsp],xmm2
  00ac0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ac6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00acc:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ad2:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ad6: b5 	movabs rax,0x55b5b009e670
  00ae0:    	call   rax
  00ae2:    	mov    r15d,eax
  00ae5: 00 	cmp    r15d,DWORD PTR [rip+0xfcc]        # 0x1ab8
  00aec:    	jne    0x3082d
  00af2:    	mov    eax,DWORD PTR [rip+0xfffffffffffdee2d]        # 0xfffdf925
  00af8:    	cmp    DWORD PTR [rip+0xfb6],eax        # 0x1ab4
  00afe:    	jne    0x3082d
  00b04: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b0d:    	mov    QWORD PTR [rsp-0x38],rcx
  00b12:    	mov    rax,QWORD PTR [rbx]
  00b15:    	lea    rsi,[rsp-0x18]
  00b1a:    	mov    QWORD PTR [rsi],rax
  00b1d:    	mov    QWORD PTR [rbx],rsi
  00b20:    	mov    rax,QWORD PTR [rbp-0x30]
  00b24:    	mov    QWORD PTR [rsp-0x38],rax
  00b29: 00 	mov    rdi,0x0
  00b30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b39: 00 	movabs rax,0x0
  00b43:    	mov    QWORD PTR [rsp-0x28],rax
  00b48: 00 	movabs r13,0x0
  00b52:    	call   0xfffdc808
  00b57:    	lea    rdi,[rbp-0x8]
  00b5b:    	mov    QWORD PTR [rbx],rdi
  00b5e:    	movq   xmm2,QWORD PTR [rsp]
  00b63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b6f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b75:    	add    rsp,0x20
  00b79:    	test   rax,rax
  00b7c:    	je     0x30899
  00b82:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00b86: 01 	sub    DWORD PTR [rip+0xf2f],0x1        # 0x1abc
  00b8d:    	je     0x308c4
  00b93:    	sub    rsp,0x20
  00b97:    	movq   QWORD PTR [rsp],xmm2
  00b9c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ba2:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ba8:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bae:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bb2: b5 	movabs rax,0x55b5b009e670
  00bbc:    	call   rax
  00bbe:    	mov    r15d,eax
  00bc1: 00 	cmp    r15d,DWORD PTR [rip+0xefc]        # 0x1ac4
  00bc8:    	jne    0x308e6
  00bce:    	mov    eax,DWORD PTR [rip+0xfffffffffffded51]        # 0xfffdf925
  00bd4:    	cmp    DWORD PTR [rip+0xee6],eax        # 0x1ac0
  00bda:    	jne    0x308e6
  00be0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00be9:    	mov    QWORD PTR [rsp-0x38],rcx
  00bee:    	mov    rax,QWORD PTR [rbx]
  00bf1:    	lea    rsi,[rsp-0x18]
  00bf6:    	mov    QWORD PTR [rsi],rax
  00bf9:    	mov    QWORD PTR [rbx],rsi
  00bfc:    	mov    rax,QWORD PTR [rbp-0x78]
  00c00:    	mov    QWORD PTR [rsp-0x38],rax
  00c05: 00 	mov    rdi,0x0
  00c0c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c15: 00 	movabs rax,0x0
  00c1f:    	mov    QWORD PTR [rsp-0x28],rax
  00c24: 00 	movabs r13,0x0
  00c2e:    	call   0xfffdc808
  00c33:    	lea    rdi,[rbp-0x8]
  00c37:    	mov    QWORD PTR [rbx],rdi
  00c3a:    	movq   xmm2,QWORD PTR [rsp]
  00c3f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c45:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c4b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c51:    	add    rsp,0x20
  00c55:    	test   rax,rax
  00c58:    	je     0x30952
  00c5e:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c62: 01 	sub    DWORD PTR [rip+0xe5f],0x1        # 0x1ac8
  00c69:    	je     0x3097d
  00c6f:    	sub    rsp,0x20
  00c73:    	movq   QWORD PTR [rsp],xmm2
  00c78:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c7e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c84:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c8a:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c8e: b5 	movabs rax,0x55b5b009e670
  00c98:    	call   rax
  00c9a:    	mov    r15d,eax
  00c9d: 00 	cmp    r15d,DWORD PTR [rip+0xe2c]        # 0x1ad0
  00ca4:    	jne    0x3099f
  00caa:    	mov    eax,DWORD PTR [rip+0xfffffffffffdec75]        # 0xfffdf925
  00cb0:    	cmp    DWORD PTR [rip+0xe16],eax        # 0x1acc
  00cb6:    	jne    0x3099f
  00cbc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cc5:    	mov    QWORD PTR [rsp-0x38],rcx
  00cca:    	mov    rax,QWORD PTR [rbx]
  00ccd:    	lea    rsi,[rsp-0x18]
  00cd2:    	mov    QWORD PTR [rsi],rax
  00cd5:    	mov    QWORD PTR [rbx],rsi
  00cd8:    	mov    rax,QWORD PTR [rbp-0x30]
  00cdc:    	mov    QWORD PTR [rsp-0x38],rax
  00ce1: 00 	mov    rdi,0x0
  00ce8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cf1: 00 	movabs rax,0x0
  00cfb:    	mov    QWORD PTR [rsp-0x28],rax
  00d00: 00 	movabs r13,0x0
  00d0a:    	call   0xfffdc808
  00d0f:    	lea    rdi,[rbp-0x8]
  00d13:    	mov    QWORD PTR [rbx],rdi
  00d16:    	movq   xmm2,QWORD PTR [rsp]
  00d1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d27:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d2d:    	add    rsp,0x20
  00d31:    	test   rax,rax
  00d34:    	je     0x30a0b
  00d3a:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00d3e: 01 	sub    DWORD PTR [rip+0xd8f],0x1        # 0x1ad4
  00d45:    	je     0x30a36
  00d4b:    	sub    rsp,0x20
  00d4f:    	movq   QWORD PTR [rsp],xmm2
  00d54:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d5a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d60:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d66:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d6a: b5 	movabs rax,0x55b5b009e670
  00d74:    	call   rax
  00d76:    	mov    r15d,eax
  00d79: 00 	cmp    r15d,DWORD PTR [rip+0xd5c]        # 0x1adc
  00d80:    	jne    0x30a58
  00d86:    	mov    eax,DWORD PTR [rip+0xfffffffffffdeb99]        # 0xfffdf925
  00d8c:    	cmp    DWORD PTR [rip+0xd46],eax        # 0x1ad8
  00d92:    	jne    0x30a58
  00d98: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00da1:    	mov    QWORD PTR [rsp-0x38],rcx
  00da6:    	mov    rax,QWORD PTR [rbx]
  00da9:    	lea    rsi,[rsp-0x18]
  00dae:    	mov    QWORD PTR [rsi],rax
  00db1:    	mov    QWORD PTR [rbx],rsi
  00db4:    	mov    rax,QWORD PTR [rbp-0x80]
  00db8:    	mov    QWORD PTR [rsp-0x38],rax
  00dbd: 00 	mov    rdi,0x0
  00dc4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dcd: 00 	movabs rax,0x0
  00dd7:    	mov    QWORD PTR [rsp-0x28],rax
  00ddc: 00 	movabs r13,0x0
  00de6:    	call   0xfffdc808
  00deb:    	lea    rdi,[rbp-0x8]
  00def:    	mov    QWORD PTR [rbx],rdi
  00df2:    	movq   xmm2,QWORD PTR [rsp]
  00df7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dfd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e03:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e09:    	add    rsp,0x20
  00e0d:    	test   rax,rax
  00e10:    	je     0x30ac4
  00e16:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e1a: 01 	sub    DWORD PTR [rip+0xcbf],0x1        # 0x1ae0
  00e21:    	je     0x30aef
  00e27:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e2b:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e2f:    	sub    rsp,0x20
  00e33:    	movq   QWORD PTR [rsp],xmm2
  00e38:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e3e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e44:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e4a:    	mov    rdx,rdi
  00e4d:    	mov    rcx,rsi
  00e50:    	mov    rdi,rbx
  00e53:    	mov    rsi,r12
  00e56: b5 	movabs rax,0x55b5b00e8b30
  00e60:    	call   rax
  00e62:    	movq   xmm2,QWORD PTR [rsp]
  00e67:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e6d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e73:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e79:    	add    rsp,0x20
  00e7d: b5 	movabs r13,0x55b5b07c51c0
  00e87:    	test   rax,rax
  00e8a:    	je     0xfffdc83b
  00e90:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00e94: 01 	sub    DWORD PTR [rip+0xc49],0x1        # 0x1ae4
  00e9b:    	je     0x30b2d
  00ea1:    	mov    rdi,QWORD PTR [rbp-0x70]
  00ea5:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ea9:    	sub    rsp,0x20
  00ead:    	movq   QWORD PTR [rsp],xmm2
  00eb2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eb8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ebe:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec4:    	mov    rdx,rdi
  00ec7:    	mov    rcx,rsi
  00eca:    	mov    rdi,rbx
  00ecd:    	mov    rsi,r12
  00ed0: b5 	movabs rax,0x55b5b00e6cb0
  00eda:    	call   rax
  00edc:    	movq   xmm2,QWORD PTR [rsp]
  00ee1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ee7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef3:    	add    rsp,0x20
  00ef7: b5 	movabs r13,0x55b5b07c51d0
  00f01:    	test   rax,rax
  00f04:    	je     0xfffdc83b
  00f0a:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f0e: 01 	sub    DWORD PTR [rip+0xbd3],0x1        # 0x1ae8
  00f15:    	je     0x30b6b
  00f1b:    	sub    rsp,0x20
  00f1f:    	movq   QWORD PTR [rsp],xmm2
  00f24:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f2a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f30:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f36:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f3a: b5 	movabs rax,0x55b5b009e670
  00f44:    	call   rax
  00f46:    	mov    r15d,eax
  00f49: 00 	cmp    r15d,DWORD PTR [rip+0xba0]        # 0x1af0
  00f50:    	jne    0x30b8d
  00f56:    	mov    eax,DWORD PTR [rip+0xfffffffffffde9c9]        # 0xfffdf925
  00f5c:    	cmp    DWORD PTR [rip+0xb8a],eax        # 0x1aec
  00f62:    	jne    0x30b8d
  00f68: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f71:    	mov    QWORD PTR [rsp-0x38],rcx
  00f76:    	mov    rax,QWORD PTR [rbx]
  00f79:    	lea    rsi,[rsp-0x18]
  00f7e:    	mov    QWORD PTR [rsi],rax
  00f81:    	mov    QWORD PTR [rbx],rsi
  00f84:    	mov    rax,QWORD PTR [rbp-0x30]
  00f88:    	mov    QWORD PTR [rsp-0x38],rax
  00f8d: 00 	mov    rdi,0x0
  00f94: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f9d: 00 	movabs rax,0x0
  00fa7:    	mov    QWORD PTR [rsp-0x28],rax
  00fac: 00 	movabs r13,0x0
  00fb6:    	call   0xfffdc808
  00fbb:    	lea    rdi,[rbp-0x8]
  00fbf:    	mov    QWORD PTR [rbx],rdi
  00fc2:    	movq   xmm2,QWORD PTR [rsp]
  00fc7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fcd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fd3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fd9:    	add    rsp,0x20
  00fdd:    	test   rax,rax
  00fe0:    	je     0x30bf9
  00fe6:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  00fea: 01 	sub    DWORD PTR [rip+0xb03],0x1        # 0x1af4
  00ff1:    	je     0x30c24
  00ff7:    	sub    rsp,0x20
  00ffb:    	movq   QWORD PTR [rsp],xmm2
  01000:    	movq   QWORD PTR [rsp+0x8],xmm4
  01006:    	movq   QWORD PTR [rsp+0x10],xmm5
  0100c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01012:    	mov    rdi,QWORD PTR [rbp-0x80]
  01016: b5 	movabs rax,0x55b5b009e670
  01020:    	call   rax
  01022:    	mov    r15d,eax
  01025: 00 	cmp    r15d,DWORD PTR [rip+0xad0]        # 0x1afc
  0102c:    	jne    0x30c46
  01032:    	mov    eax,DWORD PTR [rip+0xfffffffffffde8ed]        # 0xfffdf925
  01038:    	cmp    DWORD PTR [rip+0xaba],eax        # 0x1af8
  0103e:    	jne    0x30c46
  01044: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0104d:    	mov    QWORD PTR [rsp-0x38],rcx
  01052:    	mov    rax,QWORD PTR [rbx]
  01055:    	lea    rsi,[rsp-0x18]
  0105a:    	mov    QWORD PTR [rsi],rax
  0105d:    	mov    QWORD PTR [rbx],rsi
  01060:    	mov    rax,QWORD PTR [rbp-0x80]
  01064:    	mov    QWORD PTR [rsp-0x38],rax
  01069: 00 	mov    rdi,0x0
  01070: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01079: 00 	movabs rax,0x0
  01083:    	mov    QWORD PTR [rsp-0x28],rax
  01088: 00 	movabs r13,0x0
  01092:    	call   0xfffdc808
  01097:    	lea    rdi,[rbp-0x8]
  0109b:    	mov    QWORD PTR [rbx],rdi
  0109e:    	movq   xmm2,QWORD PTR [rsp]
  010a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010af:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010b5:    	add    rsp,0x20
  010b9:    	test   rax,rax
  010bc:    	je     0x30cb2
  010c2:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  010c6: 01 	sub    DWORD PTR [rip+0xa33],0x1        # 0x1b00
  010cd:    	je     0x30cdd
  010d3:    	sub    rsp,0x20
  010d7:    	movq   QWORD PTR [rsp],xmm2
  010dc:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e2:    	movq   QWORD PTR [rsp+0x10],xmm5
  010e8:    	movq   QWORD PTR [rsp+0x18],xmm6
  010ee:    	mov    rdi,QWORD PTR [rbp-0x30]
  010f2: b5 	movabs rax,0x55b5b009e670
  010fc:    	call   rax
  010fe:    	mov    r15d,eax
  01101: 00 	cmp    r15d,DWORD PTR [rip+0xa00]        # 0x1b08
  01108:    	jne    0x30cff
  0110e:    	mov    eax,DWORD PTR [rip+0xfffffffffffde811]        # 0xfffdf925
  01114:    	cmp    DWORD PTR [rip+0x9ea],eax        # 0x1b04
  0111a:    	jne    0x30cff
  01120: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01129:    	mov    QWORD PTR [rsp-0x38],rcx
  0112e:    	mov    rax,QWORD PTR [rbx]
  01131:    	lea    rsi,[rsp-0x18]
  01136:    	mov    QWORD PTR [rsi],rax
  01139:    	mov    QWORD PTR [rbx],rsi
  0113c:    	mov    rax,QWORD PTR [rbp-0x30]
  01140:    	mov    QWORD PTR [rsp-0x38],rax
  01145: 00 	mov    rdi,0x0
  0114c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01155: 00 	movabs rax,0x0
  0115f:    	mov    QWORD PTR [rsp-0x28],rax
  01164: 00 	movabs r13,0x0
  0116e:    	call   0xfffdc808
  01173:    	lea    rdi,[rbp-0x8]
  01177:    	mov    QWORD PTR [rbx],rdi
  0117a:    	movq   xmm2,QWORD PTR [rsp]
  0117f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01185:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0118b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01191:    	add    rsp,0x20
  01195:    	test   rax,rax
  01198:    	je     0x30d6b
  0119e: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  011a5: 01 	sub    DWORD PTR [rip+0x960],0x1        # 0x1b0c
  011ac:    	je     0x30d96
  011b2:    	sub    rsp,0x20
  011b6:    	movq   QWORD PTR [rsp],xmm2
  011bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c1:    	movq   QWORD PTR [rsp+0x10],xmm5
  011c7:    	movq   QWORD PTR [rsp+0x18],xmm6
  011cd: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011d4: b5 	movabs rax,0x55b5b009e670
  011de:    	call   rax
  011e0:    	mov    r15d,eax
  011e3: 00 	cmp    r15d,DWORD PTR [rip+0x92a]        # 0x1b14
  011ea:    	jne    0x30db8
  011f0:    	mov    eax,DWORD PTR [rip+0xfffffffffffde72f]        # 0xfffdf925
  011f6:    	cmp    DWORD PTR [rip+0x914],eax        # 0x1b10
  011fc:    	jne    0x30db8
  01202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0120b:    	mov    QWORD PTR [rsp-0x38],rcx
  01210:    	mov    rax,QWORD PTR [rbx]
  01213:    	lea    rsi,[rsp-0x18]
  01218:    	mov    QWORD PTR [rsi],rax
  0121b:    	mov    QWORD PTR [rbx],rsi
  0121e: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01225:    	mov    QWORD PTR [rsp-0x38],rax
  0122a: 00 	mov    rdi,0x0
  01231: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0123a: 00 	movabs rax,0x0
  01244:    	mov    QWORD PTR [rsp-0x28],rax
  01249: 00 	movabs r13,0x0
  01253:    	call   0xfffdc808
  01258:    	lea    rdi,[rbp-0x8]
  0125c:    	mov    QWORD PTR [rbx],rdi
  0125f:    	movq   xmm2,QWORD PTR [rsp]
  01264:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01270:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01276:    	add    rsp,0x20
  0127a:    	test   rax,rax
  0127d:    	je     0x30e27
  01283:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01287: 01 	sub    DWORD PTR [rip+0x88a],0x1        # 0x1b18
  0128e:    	je     0x30e52
  01294:    	mov    rdi,QWORD PTR [rbp-0x58]
  01298:    	mov    rsi,QWORD PTR [rbp-0x80]
  0129c:    	sub    rsp,0x20
  012a0:    	movq   QWORD PTR [rsp],xmm2
  012a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ab:    	movq   QWORD PTR [rsp+0x10],xmm5
  012b1:    	movq   QWORD PTR [rsp+0x18],xmm6
  012b7:    	mov    rdx,rdi
  012ba:    	mov    rcx,rsi
  012bd:    	mov    rdi,rbx
  012c0:    	mov    rsi,r12
  012c3: b5 	movabs rax,0x55b5b00e8b30
  012cd:    	call   rax
  012cf:    	movq   xmm2,QWORD PTR [rsp]
  012d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012da:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012e0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012e6:    	add    rsp,0x20
  012ea: b5 	movabs r13,0x55b5b07c52a0
  012f4:    	test   rax,rax
  012f7:    	je     0xfffdc83b
  012fd:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01301: 01 	sub    DWORD PTR [rip+0x814],0x1        # 0x1b1c
  01308:    	je     0x30e90
  0130e:    	mov    rdi,QWORD PTR [rbp-0x78]
  01312:    	mov    rsi,QWORD PTR [rbp-0x80]
  01316:    	sub    rsp,0x20
  0131a:    	movq   QWORD PTR [rsp],xmm2
  0131f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01325:    	movq   QWORD PTR [rsp+0x10],xmm5
  0132b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01331:    	mov    rdx,rdi
  01334:    	mov    rcx,rsi
  01337:    	mov    rdi,rbx
  0133a:    	mov    rsi,r12
  0133d: b5 	movabs rax,0x55b5b00e6cb0
  01347:    	call   rax
  01349:    	movq   xmm2,QWORD PTR [rsp]
  0134e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01354:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0135a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01360:    	add    rsp,0x20
  01364: b5 	movabs r13,0x55b5b07c52b0
  0136e:    	test   rax,rax
  01371:    	je     0xfffdc83b
  01377:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  0137b: 01 	sub    DWORD PTR [rip+0x79e],0x1        # 0x1b20
  01382:    	je     0x30ece
  01388:    	sub    rsp,0x20
  0138c:    	movq   QWORD PTR [rsp],xmm2
  01391:    	movq   QWORD PTR [rsp+0x8],xmm4
  01397:    	movq   QWORD PTR [rsp+0x10],xmm5
  0139d:    	movq   QWORD PTR [rsp+0x18],xmm6
  013a3:    	mov    rdi,QWORD PTR [rbp-0x30]
  013a7: b5 	movabs rax,0x55b5b009e670
  013b1:    	call   rax
  013b3:    	mov    r15d,eax
  013b6: 00 	cmp    r15d,DWORD PTR [rip+0x76b]        # 0x1b28
  013bd:    	jne    0x30ef0
  013c3:    	mov    eax,DWORD PTR [rip+0xfffffffffffde55c]        # 0xfffdf925
  013c9:    	cmp    DWORD PTR [rip+0x755],eax        # 0x1b24
  013cf:    	jne    0x30ef0
  013d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013de:    	mov    QWORD PTR [rsp-0x38],rcx
  013e3:    	mov    rax,QWORD PTR [rbx]
  013e6:    	lea    rsi,[rsp-0x18]
  013eb:    	mov    QWORD PTR [rsi],rax
  013ee:    	mov    QWORD PTR [rbx],rsi
  013f1:    	mov    rax,QWORD PTR [rbp-0x30]
  013f5:    	mov    QWORD PTR [rsp-0x38],rax
  013fa: 00 	mov    rdi,0x0
  01401: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0140a: 00 	movabs rax,0x0
  01414:    	mov    QWORD PTR [rsp-0x28],rax
  01419: 00 	movabs r13,0x0
  01423:    	call   0xfffdc808
  01428:    	lea    rdi,[rbp-0x8]
  0142c:    	mov    QWORD PTR [rbx],rdi
  0142f:    	movq   xmm2,QWORD PTR [rsp]
  01434:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0143a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01440:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01446:    	add    rsp,0x20
  0144a:    	test   rax,rax
  0144d:    	je     0x30f5c
  01453: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  0145a: 01 	sub    DWORD PTR [rip+0x6cb],0x1        # 0x1b2c
  01461:    	je     0x30f87
  01467:    	sub    rsp,0x20
  0146b:    	movq   QWORD PTR [rsp],xmm2
  01470:    	movq   QWORD PTR [rsp+0x8],xmm4
  01476:    	movq   QWORD PTR [rsp+0x10],xmm5
  0147c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01482: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01489: b5 	movabs rax,0x55b5b009e670
  01493:    	call   rax
  01495:    	mov    r15d,eax
  01498: 00 	cmp    r15d,DWORD PTR [rip+0x695]        # 0x1b34
  0149f:    	jne    0x30fa9
  014a5:    	mov    eax,DWORD PTR [rip+0xfffffffffffde47a]        # 0xfffdf925
  014ab:    	cmp    DWORD PTR [rip+0x67f],eax        # 0x1b30
  014b1:    	jne    0x30fa9
  014b7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014c0:    	mov    QWORD PTR [rsp-0x38],rcx
  014c5:    	mov    rax,QWORD PTR [rbx]
  014c8:    	lea    rsi,[rsp-0x18]
  014cd:    	mov    QWORD PTR [rsi],rax
  014d0:    	mov    QWORD PTR [rbx],rsi
  014d3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014da:    	mov    QWORD PTR [rsp-0x38],rax
  014df: 00 	mov    rdi,0x0
  014e6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ef: 00 	movabs rax,0x0
  014f9:    	mov    QWORD PTR [rsp-0x28],rax
  014fe: 00 	movabs r13,0x0
  01508:    	call   0xfffdc808
  0150d:    	lea    rdi,[rbp-0x8]
  01511:    	mov    QWORD PTR [rbx],rdi
  01514:    	movq   xmm2,QWORD PTR [rsp]
  01519:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0151f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01525:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0152b:    	add    rsp,0x20
  0152f:    	test   rax,rax
  01532:    	je     0x31018
  01538:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  0153c: 01 	sub    DWORD PTR [rip+0x5f5],0x1        # 0x1b38
  01543:    	je     0x31043
  01549:    	sub    rsp,0x20
  0154d:    	movq   QWORD PTR [rsp],xmm2
  01552:    	movq   QWORD PTR [rsp+0x8],xmm4
  01558:    	movq   QWORD PTR [rsp+0x10],xmm5
  0155e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01564:    	mov    rdi,QWORD PTR [rbp-0x30]
  01568: b5 	movabs rax,0x55b5b009e670
  01572:    	call   rax
  01574:    	mov    r15d,eax
  01577: 00 	cmp    r15d,DWORD PTR [rip+0x5c2]        # 0x1b40
  0157e:    	jne    0x31065
  01584:    	mov    eax,DWORD PTR [rip+0xfffffffffffde39b]        # 0xfffdf925
  0158a:    	cmp    DWORD PTR [rip+0x5ac],eax        # 0x1b3c
  01590:    	jne    0x31065
  01596: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0159f:    	mov    QWORD PTR [rsp-0x38],rcx
  015a4:    	mov    rax,QWORD PTR [rbx]
  015a7:    	lea    rsi,[rsp-0x18]
  015ac:    	mov    QWORD PTR [rsi],rax
  015af:    	mov    QWORD PTR [rbx],rsi
  015b2:    	mov    rax,QWORD PTR [rbp-0x30]
  015b6:    	mov    QWORD PTR [rsp-0x38],rax
  015bb: 00 	mov    rdi,0x0
  015c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015cb: 00 	movabs rax,0x0
  015d5:    	mov    QWORD PTR [rsp-0x28],rax
  015da: 00 	movabs r13,0x0
  015e4:    	call   0xfffdc808
  015e9:    	lea    rdi,[rbp-0x8]
  015ed:    	mov    QWORD PTR [rbx],rdi
  015f0:    	movq   xmm2,QWORD PTR [rsp]
  015f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01601:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01607:    	add    rsp,0x20
  0160b:    	test   rax,rax
  0160e:    	je     0x310d1
  01614: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  0161b: 01 	sub    DWORD PTR [rip+0x522],0x1        # 0x1b44
  01622:    	je     0x310fc
  01628:    	sub    rsp,0x20
  0162c:    	movq   QWORD PTR [rsp],xmm2
  01631:    	movq   QWORD PTR [rsp+0x8],xmm4
  01637:    	movq   QWORD PTR [rsp+0x10],xmm5
  0163d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01643: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0164a: b5 	movabs rax,0x55b5b009e670
  01654:    	call   rax
  01656:    	mov    r15d,eax
  01659: 00 	cmp    r15d,DWORD PTR [rip+0x4ec]        # 0x1b4c
  01660:    	jne    0x3111e
  01666:    	mov    eax,DWORD PTR [rip+0xfffffffffffde2b9]        # 0xfffdf925
  0166c:    	cmp    DWORD PTR [rip+0x4d6],eax        # 0x1b48
  01672:    	jne    0x3111e
  01678: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01681:    	mov    QWORD PTR [rsp-0x38],rcx
  01686:    	mov    rax,QWORD PTR [rbx]
  01689:    	lea    rsi,[rsp-0x18]
  0168e:    	mov    QWORD PTR [rsi],rax
  01691:    	mov    QWORD PTR [rbx],rsi
  01694: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0169b:    	mov    QWORD PTR [rsp-0x38],rax
  016a0: 00 	mov    rdi,0x0
  016a7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016b0: 00 	movabs rax,0x0
  016ba:    	mov    QWORD PTR [rsp-0x28],rax
  016bf: 00 	movabs r13,0x0
  016c9:    	call   0xfffdc808
  016ce:    	lea    rdi,[rbp-0x8]
  016d2:    	mov    QWORD PTR [rbx],rdi
  016d5:    	movq   xmm2,QWORD PTR [rsp]
  016da:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016e0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016e6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  016ec:    	add    rsp,0x20
  016f0:    	test   rax,rax
  016f3:    	je     0x3118d
  016f9: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01700: 01 	sub    DWORD PTR [rip+0x449],0x1        # 0x1b50
  01707:    	je     0x311b8
  0170d:    	mov    rdi,QWORD PTR [rbp-0x58]
  01711: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01718:    	sub    rsp,0x20
  0171c:    	movq   QWORD PTR [rsp],xmm2
  01721:    	movq   QWORD PTR [rsp+0x8],xmm4
  01727:    	movq   QWORD PTR [rsp+0x10],xmm5
  0172d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01733:    	mov    rdx,rdi
  01736:    	mov    rcx,rsi
  01739:    	mov    rdi,rbx
  0173c:    	mov    rsi,r12
  0173f: b5 	movabs rax,0x55b5b00e8b30
  01749:    	call   rax
  0174b:    	movq   xmm2,QWORD PTR [rsp]
  01750:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01756:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01762:    	add    rsp,0x20
  01766: b5 	movabs r13,0x55b5b07c5380
  01770:    	test   rax,rax
  01773:    	je     0xfffdc83b
  01779: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  01780: 01 	sub    DWORD PTR [rip+0x3cd],0x1        # 0x1b54
  01787:    	je     0x311f6
  0178d:    	mov    rdi,QWORD PTR [rbp-0x80]
  01791: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01798:    	sub    rsp,0x20
  0179c:    	movq   QWORD PTR [rsp],xmm2
  017a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017a7:    	movq   QWORD PTR [rsp+0x10],xmm5
  017ad:    	movq   QWORD PTR [rsp+0x18],xmm6
  017b3:    	mov    rdx,rdi
  017b6:    	mov    rcx,rsi
  017b9:    	mov    rdi,rbx
  017bc:    	mov    rsi,r12
  017bf: b5 	movabs rax,0x55b5b00e6cb0
  017c9:    	call   rax
  017cb:    	movq   xmm2,QWORD PTR [rsp]
  017d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017d6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017dc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017e2:    	add    rsp,0x20
  017e6: b5 	movabs r13,0x55b5b07c5390
  017f0:    	test   rax,rax
  017f3:    	je     0xfffdc83b
  017f9:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  017fd: 01 	sub    DWORD PTR [rip+0x354],0x1        # 0x1b58
  01804:    	je     0x31234
  0180a:    	sub    rsp,0x20
  0180e:    	movq   QWORD PTR [rsp],xmm2
  01813:    	movq   QWORD PTR [rsp+0x8],xmm4
  01819:    	movq   QWORD PTR [rsp+0x10],xmm5
  0181f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01825:    	mov    rdi,QWORD PTR [rbp-0x68]
  01829: b5 	movabs rax,0x55b5b009e670
  01833:    	call   rax
  01835:    	mov    r15d,eax
  01838: 00 	cmp    r15d,DWORD PTR [rip+0x321]        # 0x1b60
  0183f:    	jne    0x31256
  01845:    	mov    eax,DWORD PTR [rip+0xfffffffffffde0da]        # 0xfffdf925
  0184b:    	cmp    DWORD PTR [rip+0x30b],eax        # 0x1b5c
  01851:    	jne    0x31256
  01857: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01860:    	mov    QWORD PTR [rsp-0x38],rcx
  01865:    	mov    rax,QWORD PTR [rbx]
  01868:    	lea    rsi,[rsp-0x18]
  0186d:    	mov    QWORD PTR [rsi],rax
  01870:    	mov    QWORD PTR [rbx],rsi
  01873:    	mov    rax,QWORD PTR [rbp-0x68]
  01877:    	mov    QWORD PTR [rsp-0x38],rax
  0187c: 00 	mov    rdi,0x3
  01883:    	lea    r8,[rsp-0x40]
  01888:    	mov    rax,QWORD PTR [rbp-0x70]
  0188c:    	mov    QWORD PTR [r8],rax
  0188f:    	sub    r8,0x8
  01893:    	mov    rax,QWORD PTR [rbp-0x78]
  01897:    	mov    QWORD PTR [r8],rax
  0189a:    	sub    r8,0x8
  0189e:    	mov    rax,QWORD PTR [rbp-0x80]
  018a2:    	mov    QWORD PTR [r8],rax
  018a5:    	sub    r8,0x8
  018a9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b2: 00 	movabs rax,0x0
  018bc:    	mov    QWORD PTR [rsp-0x28],rax
  018c1: 00 	movabs r13,0x0
  018cb:    	call   0xfffdc808
  018d0:    	lea    rdi,[rbp-0x8]
  018d4:    	mov    QWORD PTR [rbx],rdi
  018d7:    	movq   xmm2,QWORD PTR [rsp]
  018dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  018e8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  018ee:    	add    rsp,0x20
  018f2:    	test   rax,rax
  018f5:    	je     0x312c2
  018fb:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  018ff: 01 	sub    DWORD PTR [rip+0x25e],0x1        # 0x1b64
  01906:    	je     0x312ed
  0190c:    	sub    rsp,0x20
  01910:    	movq   QWORD PTR [rsp],xmm2
  01915:    	movq   QWORD PTR [rsp+0x8],xmm4
  0191b:    	movq   QWORD PTR [rsp+0x10],xmm5
  01921:    	movq   QWORD PTR [rsp+0x18],xmm6
  01927:    	mov    rdi,QWORD PTR [rbp-0x38]
  0192b: b5 	movabs rax,0x55b5b009e670
  01935:    	call   rax
  01937:    	mov    r15d,eax
  0193a: 00 	cmp    r15d,DWORD PTR [rip+0x22b]        # 0x1b6c
  01941:    	jne    0x3130f
  01947:    	mov    eax,DWORD PTR [rip+0xfffffffffffddfd8]        # 0xfffdf925
  0194d:    	cmp    DWORD PTR [rip+0x215],eax        # 0x1b68
  01953:    	jne    0x3130f
  01959: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01962:    	mov    QWORD PTR [rsp-0x38],rcx
  01967:    	mov    rax,QWORD PTR [rbx]
  0196a:    	lea    rsi,[rsp-0x18]
  0196f:    	mov    QWORD PTR [rsi],rax
  01972:    	mov    QWORD PTR [rbx],rsi
  01975:    	mov    rax,QWORD PTR [rbp-0x38]
  01979:    	mov    QWORD PTR [rsp-0x38],rax
  0197e: 00 	mov    rdi,0x1
  01985:    	lea    r8,[rsp-0x40]
  0198a:    	mov    rax,QWORD PTR [rbp-0x60]
  0198e:    	mov    QWORD PTR [r8],rax
  01991:    	sub    r8,0x8
  01995: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0199e: 00 	movabs rax,0x0
  019a8:    	mov    QWORD PTR [rsp-0x28],rax
  019ad: 00 	movabs r13,0x0
  019b7:    	call   0xfffdc808
  019bc:    	lea    rdi,[rbp-0x8]
  019c0:    	mov    QWORD PTR [rbx],rdi
  019c3:    	movq   xmm2,QWORD PTR [rsp]
  019c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019ce:    	movq   xmm5,QWORD PTR [rsp+0x10]
  019d4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  019da:    	add    rsp,0x20
  019de:    	test   rax,rax
  019e1:    	je     0x3137b
:00103 
:00105 br =>:00106
  019e7:    	jmp    0x313e3
:00106 %7 = nil
  019ec: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  019f4:    	mov    rax,QWORD PTR [rbp-0x60]
  019f8:    	leave  
  019f9:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x55b5b07c4d60
<== finished compile. elapsed:151.4µs
offset:Pos(152424) code: 5722 bytes  data: 270 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x2f899
  00022:    	jmp    0x2f899
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x2f8a8
  00097:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0009b:    	jne    0x2f8a8
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a5:    	mov    rax,QWORD PTR [rdi+0x10]
  000a9:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  000ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  000b1:    	mov    rax,QWORD PTR [rdi+0x18]
  000b5:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  000bd: 00 	test   rdi,0x7
  000c4:    	jne    0x2f8b7
  000ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  000ce:    	jne    0x2f8b7
  000d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffddcda],0x26        # 0xfffdddb5
  000db:    	jne    0x2f8b7
  000e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000ea:    	mov    QWORD PTR [rsp-0x38],rcx
  000ef:    	mov    rax,QWORD PTR [rbx]
  000f2:    	lea    rsi,[rsp-0x18]
  000f7:    	mov    QWORD PTR [rsi],rax
  000fa:    	mov    QWORD PTR [rbx],rsi
  000fd:    	mov    rax,QWORD PTR [rbp-0x60]
  00101:    	mov    QWORD PTR [rsp-0x38],rax
  00106: 00 	mov    rdi,0x1
  0010d:    	lea    r8,[rsp-0x40]
  00112:    	mov    rax,QWORD PTR [rbp-0x68]
  00116:    	mov    QWORD PTR [r8],rax
  00119:    	sub    r8,0x8
  0011d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00126: 05 	movabs rax,0x1000500000042
  00130:    	mov    QWORD PTR [rsp-0x28],rax
  00135: b5 	movabs r13,0x55b5b07ddec0
  0013f:    	call   0xfffdeb26
  00144:    	lea    rdi,[rbp-0x8]
  00148:    	mov    QWORD PTR [rbx],rdi
  0014b: b5 	movabs r13,0x55b5b07c4db0
  00155:    	test   rax,rax
  00158:    	je     0xfffdaccb
  0015e:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00162:    	mov    rdi,QWORD PTR [rbp-0x40]
  00166: 00 	test   rdi,0x1
  0016d:    	jne    0x2f8c6
  00173: 00 	test   rdi,0x2
  0017a:    	je     0x1b6
  00180:    	xorps  xmm2,xmm2
  00183: 00 	movabs rax,0x8000000000000002
  0018d:    	cmp    rdi,rax
  00190:    	je     0x1c8
  00196:    	mov    rax,rdi
  00199:    	sar    rax,0x3f
  0019d:    	add    rax,0x2
  001a1:    	and    rdi,0xfffffffffffffffc
  001a5:    	or     rdi,rax
  001a8:    	rol    rdi,0x3d
  001ac:    	movq   xmm2,rdi
  001b1:    	jmp    0x1c8
  001b6:    	call   0xfffdad24
  001bb:    	test   rax,rax
  001be:    	je     0x2f8c6
  001c4:    	movq   xmm2,xmm0
  001c8: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1499]        # 0x1668
:00007 %7 = %1.call dir()                   [Ray]
  001cf:    	mov    rdi,QWORD PTR [rbp-0x30]
  001d3: 00 	test   rdi,0x7
  001da:    	jne    0x2f8d5
  001e0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001e4:    	jne    0x2f8d5
  001ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffddbc4],0x26        # 0xfffdddb5
  001f1:    	jne    0x2f8d5
  001f7:    	mov    esi,DWORD PTR [rip+0x1477]        # 0x1674
  001fd:    	cmp    esi,0xffffffff
  00200:    	je     0x2f8f1
  00206:    	cmp    WORD PTR [rdi+0x2],0x3
  0020b:    	jne    0x224
  00211:    	cmp    esi,0x6
  00214:    	jge    0x224
  0021a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0021f:    	jmp    0x242
  00224:    	sub    rsp,0x10
  00228:    	movq   QWORD PTR [rsp],xmm2
  0022d: b5 	movabs rax,0x55b5b00a3ef0
  00237:    	call   rax
  00239:    	movq   xmm2,QWORD PTR [rsp]
  0023e:    	add    rsp,0x10
  00242:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00246:    	mov    rdi,QWORD PTR [rbp-0x28]
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x2f92c
  00263:    	cmp    DWORD PTR [rdi+0x4],0x28
  00267:    	jne    0x2f92c
  0026d: 26 	cmp    DWORD PTR [rip+0xfffffffffffddb41],0x26        # 0xfffdddb5
  00274:    	jne    0x2f92c
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028c:    	mov    QWORD PTR [rsp-0x38],rcx
  00291:    	mov    rax,QWORD PTR [rbx]
  00294:    	lea    rsi,[rsp-0x18]
  00299:    	mov    QWORD PTR [rsi],rax
  0029c:    	mov    QWORD PTR [rbx],rsi
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	lea    r8,[rsp-0x40]
  002b4:    	mov    rax,QWORD PTR [rbp-0x68]
  002b8:    	mov    QWORD PTR [r8],rax
  002bb:    	sub    r8,0x8
  002bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c8: 05 	movabs rax,0x1000500000042
  002d2:    	mov    QWORD PTR [rsp-0x28],rax
  002d7: b5 	movabs r13,0x55b5b07ddec0
  002e1:    	call   0xfffdeb26
  002e6:    	lea    rdi,[rbp-0x8]
  002ea:    	mov    QWORD PTR [rbx],rdi
  002ed:    	movq   xmm2,QWORD PTR [rsp]
  002f2:    	add    rsp,0x10
  002f6: b5 	movabs r13,0x55b5b07c4e30
  00300:    	test   rax,rax
  00303:    	je     0xfffdaccb
  00309:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  0030d:    	mov    rax,QWORD PTR [rbp-0x48]
  00311:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  00315: 00 	movq   xmm3,QWORD PTR [rip+0x135b]        # 0x1678
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  0032b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0032f: 00 	test   rdi,0x1
  00336:    	jne    0x2f948
  0033c: 00 	test   rdi,0x2
  00343:    	je     0x37f
  00349:    	xorps  xmm4,xmm4
  0034c: 00 	movabs rax,0x8000000000000002
  00356:    	cmp    rdi,rax
  00359:    	je     0x391
  0035f:    	mov    rax,rdi
  00362:    	sar    rax,0x3f
  00366:    	add    rax,0x2
  0036a:    	and    rdi,0xfffffffffffffffc
  0036e:    	or     rdi,rax
  00371:    	rol    rdi,0x3d
  00375:    	movq   xmm4,rdi
  0037a:    	jmp    0x391
  0037f:    	call   0xfffdad24
  00384:    	test   rax,rax
  00387:    	je     0x2f948
  0038d:    	movq   xmm4,xmm0
  00391:    	ucomisd xmm4,xmm3
  00395:    	jae    0x2f964
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  0039b:    	movq   xmm5,xmm4
  0039f: 00 	xorps  xmm5,XMMWORD PTR [rip+0x12e2]        # 0x1688
:00020 br =>:00021
  003a6:    	jmp    0x2f98a
:00021 %7 = literal[1e-17]
  003ab: 00 	movq   xmm3,QWORD PTR [rip+0x12e5]        # 0x1698
  003b3: aa 	movabs rax,0xe33877aa3236a4ba
  003bd:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003c1:    	mov    rdi,QWORD PTR [rbp-0x50]
  003c5: 00 	test   rdi,0x1
  003cc:    	jne    0x2f9bd
  003d2: 00 	test   rdi,0x2
  003d9:    	je     0x415
  003df:    	xorps  xmm5,xmm5
  003e2: 00 	movabs rax,0x8000000000000002
  003ec:    	cmp    rdi,rax
  003ef:    	je     0x427
  003f5:    	mov    rax,rdi
  003f8:    	sar    rax,0x3f
  003fc:    	add    rax,0x2
  00400:    	and    rdi,0xfffffffffffffffc
  00404:    	or     rdi,rax
  00407:    	rol    rdi,0x3d
  0040b:    	movq   xmm5,rdi
  00410:    	jmp    0x427
  00415:    	call   0xfffdad24
  0041a:    	test   rax,rax
  0041d:    	je     0x2f9bd
  00423:    	movq   xmm5,xmm0
  00427:    	ucomisd xmm5,xmm3
  0042b:    	jae    0x43f
:00024 %7 = nil
  00431: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00439:    	mov    rax,QWORD PTR [rbp-0x60]
  0043d:    	leave  
  0043e:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  0043f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00443: 00 	test   rdi,0x7
  0044a:    	jne    0x2f9d9
  00450:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00454:    	jne    0x2f9d9
  0045a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd954],0x26        # 0xfffdddb5
  00461:    	jne    0x2f9d9
  00467:    	mov    esi,DWORD PTR [rip+0x1237]        # 0x16a4
  0046d:    	cmp    esi,0xffffffff
  00470:    	je     0x2f9f5
  00476:    	cmp    WORD PTR [rdi+0x2],0x3
  0047b:    	jne    0x494
  00481:    	cmp    esi,0x6
  00484:    	jge    0x494
  0048a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0048f:    	jmp    0x4d6
  00494:    	sub    rsp,0x20
  00498:    	movq   QWORD PTR [rsp],xmm2
  0049d:    	movq   QWORD PTR [rsp+0x8],xmm3
  004a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  004a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  004af: b5 	movabs rax,0x55b5b00a3ef0
  004b9:    	call   rax
  004bb:    	movq   xmm2,QWORD PTR [rsp]
  004c0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004c6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004cc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004d2:    	add    rsp,0x20
  004d6:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004da:    	mov    rdi,QWORD PTR [rbp-0x28]
  004de:    	mov    rax,QWORD PTR [rdi+0x18]
  004e2:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004e6:    	mov    rdi,QWORD PTR [rbp-0x68]
  004ea: 00 	test   rdi,0x7
  004f1:    	jne    0x2fa54
  004f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  004fb:    	jne    0x2fa54
  00501: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd8ad],0x26        # 0xfffdddb5
  00508:    	jne    0x2fa54
  0050e:    	sub    rsp,0x20
  00512:    	movq   QWORD PTR [rsp],xmm2
  00517:    	movq   QWORD PTR [rsp+0x8],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00523: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0052c:    	mov    QWORD PTR [rsp-0x38],rcx
  00531:    	mov    rax,QWORD PTR [rbx]
  00534:    	lea    rsi,[rsp-0x18]
  00539:    	mov    QWORD PTR [rsi],rax
  0053c:    	mov    QWORD PTR [rbx],rsi
  0053f:    	mov    rax,QWORD PTR [rbp-0x68]
  00543:    	mov    QWORD PTR [rsp-0x38],rax
  00548: 00 	mov    rdi,0x1
  0054f:    	lea    r8,[rsp-0x40]
  00554:    	mov    rax,QWORD PTR [rbp-0x70]
  00558:    	mov    QWORD PTR [r8],rax
  0055b:    	sub    r8,0x8
  0055f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00568: 05 	movabs rax,0x1000500000042
  00572:    	mov    QWORD PTR [rsp-0x28],rax
  00577: b5 	movabs r13,0x55b5b07ddec0
  00581:    	call   0xfffdeb26
  00586:    	lea    rdi,[rbp-0x8]
  0058a:    	mov    QWORD PTR [rbx],rdi
  0058d:    	movq   xmm2,QWORD PTR [rsp]
  00592:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00598:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0059e:    	add    rsp,0x20
  005a2: b5 	movabs r13,0x55b5b07c4f70
  005ac:    	test   rax,rax
  005af:    	je     0xfffdaccb
  005b5:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005b9:    	mov    rdi,QWORD PTR [rbp-0x60]
  005bd: 00 	test   rdi,0x1
  005c4:    	jne    0x2fa70
  005ca: 00 	test   rdi,0x2
  005d1:    	je     0x60d
  005d7:    	xorps  xmm3,xmm3
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	cmp    rdi,rax
  005e7:    	je     0x61f
  005ed:    	mov    rax,rdi
  005f0:    	sar    rax,0x3f
  005f4:    	add    rax,0x2
  005f8:    	and    rdi,0xfffffffffffffffc
  005fc:    	or     rdi,rax
  005ff:    	rol    rdi,0x3d
  00603:    	movq   xmm3,rdi
  00608:    	jmp    0x61f
  0060d:    	call   0xfffdad24
  00612:    	test   rax,rax
  00615:    	je     0x2fa70
  0061b:    	movq   xmm3,xmm0
  0061f:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  00623: 00 	xorps  xmm3,XMMWORD PTR [rip+0x107e]        # 0x16a8
:00036 %6 = %7 / %4                         [Float][Float]
  0062a:    	movq   xmm6,xmm3
  0062e:    	movq   rax,xmm4
  00633:    	test   rax,rax
  00636:    	je     0xfffdacf0
  0063c:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00640: 00 	movq   xmm3,QWORD PTR [rip+0x1070]        # 0x16b8
  00648: 00 	movabs rax,0x8000000000000002
  00652:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00656:    	ucomisd xmm6,xmm3
  0065a:    	jbe    0x306c0
:00040 %7 = %2.call t()                     [Isect]
  00660:    	mov    rdi,QWORD PTR [rbp-0x38]
  00664: 00 	test   rdi,0x7
  0066b:    	jne    0x2fa8c
  00671:    	cmp    DWORD PTR [rdi+0x4],0x30
  00675:    	jne    0x2fa8c
  0067b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd733],0x26        # 0xfffdddb5
  00682:    	jne    0x2fa8c
  00688:    	mov    esi,DWORD PTR [rip+0x1036]        # 0x16c4
  0068e:    	cmp    esi,0xffffffff
  00691:    	je     0x2fab5
  00697:    	cmp    WORD PTR [rdi+0x2],0x3
  0069c:    	jne    0x6b5
  006a2:    	cmp    esi,0x6
  006a5:    	jge    0x6b5
  006ab:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006b0:    	jmp    0x6f7
  006b5:    	sub    rsp,0x20
  006b9:    	movq   QWORD PTR [rsp],xmm2
  006be:    	movq   QWORD PTR [rsp+0x8],xmm4
  006c4:    	movq   QWORD PTR [rsp+0x10],xmm5
  006ca:    	movq   QWORD PTR [rsp+0x18],xmm6
  006d0: b5 	movabs rax,0x55b5b00a3ef0
  006da:    	call   rax
  006dc:    	movq   xmm2,QWORD PTR [rsp]
  006e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006e7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006ed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006f3:    	add    rsp,0x20
  006f7:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [Float][Float]
:00044 condnotbr _%7 =>:00106
  006fb:    	mov    rdi,QWORD PTR [rbp-0x60]
  006ff: 00 	test   rdi,0x1
  00706:    	jne    0x2fb14
  0070c: 00 	test   rdi,0x2
  00713:    	je     0x74f
  00719:    	xorps  xmm3,xmm3
  0071c: 00 	movabs rax,0x8000000000000002
  00726:    	cmp    rdi,rax
  00729:    	je     0x761
  0072f:    	mov    rax,rdi
  00732:    	sar    rax,0x3f
  00736:    	add    rax,0x2
  0073a:    	and    rdi,0xfffffffffffffffc
  0073e:    	or     rdi,rax
  00741:    	rol    rdi,0x3d
  00745:    	movq   xmm3,rdi
  0074a:    	jmp    0x761
  0074f:    	call   0xfffdad24
  00754:    	test   rax,rax
  00757:    	je     0x2fb14
  0075d:    	movq   xmm3,xmm0
  00761:    	ucomisd xmm6,xmm3
  00765:    	jae    0x306f3
:00045 %7 = literal[true]
  0076b: 00 	mov    rax,0x1c
  00772:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  00776:    	mov    rdi,QWORD PTR [rbp-0x38]
  0077a: 00 	test   rdi,0x7
  00781:    	jne    0x2fb3d
  00787:    	cmp    DWORD PTR [rdi+0x4],0x30
  0078b:    	jne    0x2fb3d
  00791: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd61d],0x26        # 0xfffdddb5
  00798:    	jne    0x2fb3d
  0079e:    	mov    esi,DWORD PTR [rip+0xf28]        # 0x16cc
  007a4:    	cmp    esi,0xffffffff
  007a7:    	je     0x2fb66
  007ad:    	cmp    WORD PTR [rdi+0x2],0x3
  007b2:    	jne    0x7cf
  007b8:    	cmp    esi,0x6
  007bb:    	jge    0x7cf
  007c1:    	mov    rax,QWORD PTR [rbp-0x60]
  007c5:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007ca:    	jmp    0x828
  007cf:    	sub    rsp,0x20
  007d3:    	movq   QWORD PTR [rsp],xmm2
  007d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  007de:    	movq   QWORD PTR [rsp+0x10],xmm5
  007e4:    	movq   QWORD PTR [rsp+0x18],xmm6
  007ea:    	mov    rdx,QWORD PTR [rbp-0x60]
  007ee: b5 	movabs rax,0x55b5b00a4170
  007f8:    	call   rax
  007fa:    	movq   xmm2,QWORD PTR [rsp]
  007ff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00805:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0080b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00811:    	add    rsp,0x20
  00815: b5 	movabs r13,0x55b5b07c5060
  0081f:    	test   rax,rax
  00822:    	je     0xfffdaccb
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  00828:    	movq   xmm0,xmm6
  0082c:    	call   0xfffdae48
  00831:    	mov    QWORD PTR [rbp-0x58],rax
  00835:    	mov    rdi,QWORD PTR [rbp-0x38]
  00839: 00 	test   rdi,0x7
  00840:    	jne    0x2fbcc
  00846:    	cmp    DWORD PTR [rdi+0x4],0x30
  0084a:    	jne    0x2fbcc
  00850: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd55e],0x26        # 0xfffdddb5
  00857:    	jne    0x2fbcc
  0085d:    	mov    esi,DWORD PTR [rip+0xe71]        # 0x16d4
  00863:    	cmp    esi,0xffffffff
  00866:    	je     0x2fbe8
  0086c:    	cmp    WORD PTR [rdi+0x2],0x3
  00871:    	jne    0x88e
  00877:    	cmp    esi,0x6
  0087a:    	jge    0x88e
  00880:    	mov    rax,QWORD PTR [rbp-0x58]
  00884:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00889:    	jmp    0x8e7
  0088e:    	sub    rsp,0x20
  00892:    	movq   QWORD PTR [rsp],xmm2
  00897:    	movq   QWORD PTR [rsp+0x8],xmm4
  0089d:    	movq   QWORD PTR [rsp+0x10],xmm5
  008a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  008a9:    	mov    rdx,QWORD PTR [rbp-0x58]
  008ad: b5 	movabs rax,0x55b5b00a4170
  008b7:    	call   rax
  008b9:    	movq   xmm2,QWORD PTR [rsp]
  008be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008c4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008ca:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008d0:    	add    rsp,0x20
  008d4: b5 	movabs r13,0x55b5b07c5090
  008de:    	test   rax,rax
  008e1:    	je     0xfffdaccb
:00050 
:00052 %7 = @n: Plane[IvarId(1)]
  008e7:    	mov    rdi,QWORD PTR [rbp-0x28]
  008eb:    	mov    rax,QWORD PTR [rdi+0x18]
  008ef:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008f3:    	mov    rdi,QWORD PTR [rbp-0x38]
  008f7: 00 	test   rdi,0x7
  008fe:    	jne    0x2fc4e
  00904:    	cmp    DWORD PTR [rdi+0x4],0x30
  00908:    	jne    0x2fc4e
  0090e: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd4a0],0x26        # 0xfffdddb5
  00915:    	jne    0x2fc4e
  0091b:    	mov    esi,DWORD PTR [rip+0xdbb]        # 0x16dc
  00921:    	cmp    esi,0xffffffff
  00924:    	je     0x2fc6a
  0092a:    	cmp    WORD PTR [rdi+0x2],0x3
  0092f:    	jne    0x94c
  00935:    	cmp    esi,0x6
  00938:    	jge    0x94c
  0093e:    	mov    rax,QWORD PTR [rbp-0x60]
  00942:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00947:    	jmp    0x9a5
  0094c:    	sub    rsp,0x20
  00950:    	movq   QWORD PTR [rsp],xmm2
  00955:    	movq   QWORD PTR [rsp+0x8],xmm4
  0095b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00961:    	movq   QWORD PTR [rsp+0x18],xmm6
  00967:    	mov    rdx,QWORD PTR [rbp-0x60]
  0096b: b5 	movabs rax,0x55b5b00a4170
  00975:    	call   rax
  00977:    	movq   xmm2,QWORD PTR [rsp]
  0097c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00982:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00988:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0098e:    	add    rsp,0x20
  00992: b5 	movabs r13,0x55b5b07c50d0
  0099c:    	test   rax,rax
  0099f:    	je     0xfffdaccb
:00054 
:00056 %8 = const[Vec]                      [Vec]
  009a5: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdd41c]        # 0xfffdddc8
  009ac: 00 	cmp    rax,QWORD PTR [rip+0xd45]        # 0x16f8
  009b3:    	jne    0x2fcd0
  009b9: 00 	mov    rax,QWORD PTR [rip+0xd28]        # 0x16e8
  009c0:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [Ray]
  009c4:    	mov    rdi,QWORD PTR [rbp-0x30]
  009c8: 00 	test   rdi,0x7
  009cf:    	jne    0x2fd4c
  009d5:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009d9:    	jne    0x2fd4c
  009df: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd3cf],0x26        # 0xfffdddb5
  009e6:    	jne    0x2fd4c
  009ec:    	mov    esi,DWORD PTR [rip+0xd12]        # 0x1704
  009f2:    	cmp    esi,0xffffffff
  009f5:    	je     0x2fd68
  009fb:    	cmp    WORD PTR [rdi+0x2],0x3
  00a00:    	jne    0xa19
  00a06:    	cmp    esi,0x6
  00a09:    	jge    0xa19
  00a0f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a14:    	jmp    0xa5b
  00a19:    	sub    rsp,0x20
  00a1d:    	movq   QWORD PTR [rsp],xmm2
  00a22:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a28:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a2e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a34: b5 	movabs rax,0x55b5b00a3ef0
  00a3e:    	call   rax
  00a40:    	movq   xmm2,QWORD PTR [rsp]
  00a45:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a4b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a51:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a57:    	add    rsp,0x20
  00a5b:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a5f:    	mov    rdi,QWORD PTR [rbp-0x78]
  00a63: 00 	test   rdi,0x7
  00a6a:    	jne    0x2fdc7
  00a70:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a74:    	jne    0x2fdc7
  00a7a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd334],0x26        # 0xfffdddb5
  00a81:    	jne    0x2fdc7
  00a87:    	mov    esi,DWORD PTR [rip+0xc7f]        # 0x170c
  00a8d:    	cmp    esi,0xffffffff
  00a90:    	je     0x2fde3
  00a96:    	cmp    WORD PTR [rdi+0x2],0x3
  00a9b:    	jne    0xab4
  00aa1:    	cmp    esi,0x6
  00aa4:    	jge    0xab4
  00aaa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aaf:    	jmp    0xaf6
  00ab4:    	sub    rsp,0x20
  00ab8:    	movq   QWORD PTR [rsp],xmm2
  00abd:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ac3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ac9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00acf: b5 	movabs rax,0x55b5b00a3ef0
  00ad9:    	call   rax
  00adb:    	movq   xmm2,QWORD PTR [rsp]
  00ae0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ae6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00aec:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00af2:    	add    rsp,0x20
  00af6:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00afa:    	mov    rdi,QWORD PTR [rbp-0x30]
  00afe: 00 	test   rdi,0x7
  00b05:    	jne    0x2fe42
  00b0b:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b0f:    	jne    0x2fe42
  00b15: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd299],0x26        # 0xfffdddb5
  00b1c:    	jne    0x2fe42
  00b22:    	mov    esi,DWORD PTR [rip+0xbec]        # 0x1714
  00b28:    	cmp    esi,0xffffffff
  00b2b:    	je     0x2fe5e
  00b31:    	cmp    WORD PTR [rdi+0x2],0x3
  00b36:    	jne    0xb4f
  00b3c:    	cmp    esi,0x6
  00b3f:    	jge    0xb4f
  00b45:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b4a:    	jmp    0xb91
  00b4f:    	sub    rsp,0x20
  00b53:    	movq   QWORD PTR [rsp],xmm2
  00b58:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b5e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b64:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b6a: b5 	movabs rax,0x55b5b00a3ef0
  00b74:    	call   rax
  00b76:    	movq   xmm2,QWORD PTR [rsp]
  00b7b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b81:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b8d:    	add    rsp,0x20
  00b91:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b95:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b99: 00 	test   rdi,0x7
  00ba0:    	jne    0x2febd
  00ba6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00baa:    	jne    0x2febd
  00bb0: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd1fe],0x26        # 0xfffdddb5
  00bb7:    	jne    0x2febd
  00bbd:    	mov    esi,DWORD PTR [rip+0xb59]        # 0x171c
  00bc3:    	cmp    esi,0xffffffff
  00bc6:    	je     0x2fed9
  00bcc:    	cmp    WORD PTR [rdi+0x2],0x3
  00bd1:    	jne    0xbea
  00bd7:    	cmp    esi,0x6
  00bda:    	jge    0xbea
  00be0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be5:    	jmp    0xc2c
  00bea:    	sub    rsp,0x20
  00bee:    	movq   QWORD PTR [rsp],xmm2
  00bf3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bf9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bff:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c05: b5 	movabs rax,0x55b5b00a3ef0
  00c0f:    	call   rax
  00c11:    	movq   xmm2,QWORD PTR [rsp]
  00c16:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c1c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c22:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c28:    	add    rsp,0x20
  00c2c:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [Float][Float]
  00c30:    	mov    rdi,QWORD PTR [rbp-0x78]
  00c34: 00 	test   rdi,0x1
  00c3b:    	jne    0x2ff38
  00c41: 00 	test   rdi,0x2
  00c48:    	je     0xc84
  00c4e:    	xorps  xmm3,xmm3
  00c51: 00 	movabs rax,0x8000000000000002
  00c5b:    	cmp    rdi,rax
  00c5e:    	je     0xc96
  00c64:    	mov    rax,rdi
  00c67:    	sar    rax,0x3f
  00c6b:    	add    rax,0x2
  00c6f:    	and    rdi,0xfffffffffffffffc
  00c73:    	or     rdi,rax
  00c76:    	rol    rdi,0x3d
  00c7a:    	movq   xmm3,rdi
  00c7f:    	jmp    0xc96
  00c84:    	call   0xfffdad24
  00c89:    	test   rax,rax
  00c8c:    	je     0x2ff38
  00c92:    	movq   xmm3,xmm0
  00c96:    	mulsd  xmm3,xmm6
:00070 %9 = %9 + %10                        [Float][Float]
  00c9a:    	mov    rdi,QWORD PTR [rbp-0x70]
  00c9e: 00 	test   rdi,0x1
  00ca5:    	jne    0x2ff54
  00cab: 00 	test   rdi,0x2
  00cb2:    	je     0xcee
  00cb8:    	xorps  xmm7,xmm7
  00cbb: 00 	movabs rax,0x8000000000000002
  00cc5:    	cmp    rdi,rax
  00cc8:    	je     0xd00
  00cce:    	mov    rax,rdi
  00cd1:    	sar    rax,0x3f
  00cd5:    	add    rax,0x2
  00cd9:    	and    rdi,0xfffffffffffffffc
  00cdd:    	or     rdi,rax
  00ce0:    	rol    rdi,0x3d
  00ce4:    	movq   xmm7,rdi
  00ce9:    	jmp    0xd00
  00cee:    	call   0xfffdad24
  00cf3:    	test   rax,rax
  00cf6:    	je     0x2ff54
  00cfc:    	movq   xmm7,xmm0
  00d00:    	addsd  xmm7,xmm3
:00071 %11 = %1.call org()                  [Ray]
  00d04:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d08: 00 	test   rdi,0x7
  00d0f:    	jne    0x2ff7d
  00d15:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d19:    	jne    0x2ff7d
  00d1f: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd08f],0x26        # 0xfffdddb5
  00d26:    	jne    0x2ff7d
  00d2c:    	mov    esi,DWORD PTR [rip+0x9f2]        # 0x1724
  00d32:    	cmp    esi,0xffffffff
  00d35:    	je     0x2ffb3
  00d3b:    	cmp    WORD PTR [rdi+0x2],0x3
  00d40:    	jne    0xd59
  00d46:    	cmp    esi,0x6
  00d49:    	jge    0xd59
  00d4f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d54:    	jmp    0xdb3
  00d59:    	sub    rsp,0x30
  00d5d:    	movq   QWORD PTR [rsp],xmm2
  00d62:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d68:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d6e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d74:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d7a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d80: b5 	movabs rax,0x55b5b00a3ef0
  00d8a:    	call   rax
  00d8c:    	movq   xmm2,QWORD PTR [rsp]
  00d91:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d97:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d9d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00da9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00daf:    	add    rsp,0x30
  00db3:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00db7:    	mov    rdi,QWORD PTR [rbp-0x80]
  00dbb: 00 	test   rdi,0x7
  00dc2:    	jne    0x3002a
  00dc8:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dcc:    	jne    0x3002a
  00dd2: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcfdc],0x26        # 0xfffdddb5
  00dd9:    	jne    0x3002a
  00ddf:    	mov    esi,DWORD PTR [rip+0x947]        # 0x172c
  00de5:    	cmp    esi,0xffffffff
  00de8:    	je     0x30053
  00dee:    	cmp    WORD PTR [rdi+0x2],0x3
  00df3:    	jne    0xe0c
  00df9:    	cmp    esi,0x6
  00dfc:    	jge    0xe0c
  00e02:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e07:    	jmp    0xe5a
  00e0c:    	sub    rsp,0x30
  00e10:    	movq   QWORD PTR [rsp],xmm2
  00e15:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e1b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e21:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e27:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e2d: b5 	movabs rax,0x55b5b00a3ef0
  00e37:    	call   rax
  00e39:    	movq   xmm2,QWORD PTR [rsp]
  00e3e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e44:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e4a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e50:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e56:    	add    rsp,0x30
  00e5a:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e5e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e62: 00 	test   rdi,0x7
  00e69:    	jne    0x300be
  00e6f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e73:    	jne    0x300be
  00e79: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcf35],0x26        # 0xfffdddb5
  00e80:    	jne    0x300be
  00e86:    	mov    esi,DWORD PTR [rip+0x8a8]        # 0x1734
  00e8c:    	cmp    esi,0xffffffff
  00e8f:    	je     0x300e7
  00e95:    	cmp    WORD PTR [rdi+0x2],0x3
  00e9a:    	jne    0xeb3
  00ea0:    	cmp    esi,0x6
  00ea3:    	jge    0xeb3
  00ea9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00eae:    	jmp    0xf01
  00eb3:    	sub    rsp,0x30
  00eb7:    	movq   QWORD PTR [rsp],xmm2
  00ebc:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ec2:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ec8:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ece:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ed4: b5 	movabs rax,0x55b5b00a3ef0
  00ede:    	call   rax
  00ee0:    	movq   xmm2,QWORD PTR [rsp]
  00ee5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00eeb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ef1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00efd:    	add    rsp,0x30
  00f01: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00f08: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00f0f: 00 	test   rdi,0x7
  00f16:    	jne    0x30152
  00f1c:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f20:    	jne    0x30152
  00f26: 26 	cmp    DWORD PTR [rip+0xfffffffffffdce88],0x26        # 0xfffdddb5
  00f2d:    	jne    0x30152
  00f33:    	mov    esi,DWORD PTR [rip+0x803]        # 0x173c
  00f39:    	cmp    esi,0xffffffff
  00f3c:    	je     0x3017b
  00f42:    	cmp    WORD PTR [rdi+0x2],0x3
  00f47:    	jne    0xf60
  00f4d:    	cmp    esi,0x6
  00f50:    	jge    0xf60
  00f56:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f5b:    	jmp    0xfae
  00f60:    	sub    rsp,0x30
  00f64:    	movq   QWORD PTR [rsp],xmm2
  00f69:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f6f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f75:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f7b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f81: b5 	movabs rax,0x55b5b00a3ef0
  00f8b:    	call   rax
  00f8d:    	movq   xmm2,QWORD PTR [rsp]
  00f92:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f98:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f9e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fa4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00faa:    	add    rsp,0x30
  00fae:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [Float][Float]
  00fb2:    	mov    rdi,QWORD PTR [rbp-0x80]
  00fb6: 00 	test   rdi,0x1
  00fbd:    	jne    0x301e6
  00fc3: 00 	test   rdi,0x2
  00fca:    	je     0x1006
  00fd0:    	xorps  xmm3,xmm3
  00fd3: 00 	movabs rax,0x8000000000000002
  00fdd:    	cmp    rdi,rax
  00fe0:    	je     0x1018
  00fe6:    	mov    rax,rdi
  00fe9:    	sar    rax,0x3f
  00fed:    	add    rax,0x2
  00ff1:    	and    rdi,0xfffffffffffffffc
  00ff5:    	or     rdi,rax
  00ff8:    	rol    rdi,0x3d
  00ffc:    	movq   xmm3,rdi
  01001:    	jmp    0x1018
  01006:    	call   0xfffdad24
  0100b:    	test   rax,rax
  0100e:    	je     0x301e6
  01014:    	movq   xmm3,xmm0
  01018:    	mulsd  xmm3,xmm6
:00084 %10 = %10 + %11                      [Float][Float]
  0101c:    	mov    rdi,QWORD PTR [rbp-0x78]
  01020: 00 	test   rdi,0x1
  01027:    	jne    0x3020f
  0102d: 00 	test   rdi,0x2
  01034:    	je     0x1071
  0103a:    	xorps  xmm8,xmm8
  0103e: 00 	movabs rax,0x8000000000000002
  01048:    	cmp    rdi,rax
  0104b:    	je     0x1084
  01051:    	mov    rax,rdi
  01054:    	sar    rax,0x3f
  01058:    	add    rax,0x2
  0105c:    	and    rdi,0xfffffffffffffffc
  01060:    	or     rdi,rax
  01063:    	rol    rdi,0x3d
  01067:    	movq   xmm8,rdi
  0106c:    	jmp    0x1084
  01071:    	call   0xfffdad24
  01076:    	test   rax,rax
  01079:    	je     0x3020f
  0107f:    	movq   xmm8,xmm0
  01084:    	addsd  xmm8,xmm3
:00085 %12 = %1.call org()                  [Ray]
  01089:    	mov    rdi,QWORD PTR [rbp-0x30]
  0108d: 00 	test   rdi,0x7
  01094:    	jne    0x30245
  0109a:    	cmp    DWORD PTR [rdi+0x4],0x2e
  0109e:    	jne    0x30245
  010a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcd0a],0x26        # 0xfffdddb5
  010ab:    	jne    0x30245
  010b1:    	mov    esi,DWORD PTR [rip+0x68d]        # 0x1744
  010b7:    	cmp    esi,0xffffffff
  010ba:    	je     0x30289
  010c0:    	cmp    WORD PTR [rdi+0x2],0x3
  010c5:    	jne    0x10de
  010cb:    	cmp    esi,0x6
  010ce:    	jge    0x10de
  010d4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010d9:    	jmp    0x1146
  010de:    	sub    rsp,0x40
  010e2:    	movq   QWORD PTR [rsp],xmm2
  010e7:    	movq   QWORD PTR [rsp+0x8],xmm3
  010ed:    	movq   QWORD PTR [rsp+0x10],xmm4
  010f3:    	movq   QWORD PTR [rsp+0x18],xmm5
  010f9:    	movq   QWORD PTR [rsp+0x20],xmm6
  010ff:    	movq   QWORD PTR [rsp+0x28],xmm7
  01105: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0110c: b5 	movabs rax,0x55b5b00a3ef0
  01116:    	call   rax
  01118:    	movq   xmm2,QWORD PTR [rsp]
  0111d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01123:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01129:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0112f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01135:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0113b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01142:    	add    rsp,0x40
  01146: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  0114d: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01154: 00 	test   rdi,0x7
  0115b:    	jne    0x3030e
  01161:    	cmp    DWORD PTR [rdi+0x4],0x28
  01165:    	jne    0x3030e
  0116b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcc43],0x26        # 0xfffdddb5
  01172:    	jne    0x3030e
  01178:    	mov    esi,DWORD PTR [rip+0x5ce]        # 0x174c
  0117e:    	cmp    esi,0xffffffff
  01181:    	je     0x30345
  01187:    	cmp    WORD PTR [rdi+0x2],0x3
  0118c:    	jne    0x11a5
  01192:    	cmp    esi,0x6
  01195:    	jge    0x11a5
  0119b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011a0:    	jmp    0x1201
  011a5:    	sub    rsp,0x30
  011a9:    	movq   QWORD PTR [rsp],xmm2
  011ae:    	movq   QWORD PTR [rsp+0x8],xmm4
  011b4:    	movq   QWORD PTR [rsp+0x10],xmm5
  011ba:    	movq   QWORD PTR [rsp+0x18],xmm6
  011c0:    	movq   QWORD PTR [rsp+0x20],xmm7
  011c6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011cd: b5 	movabs rax,0x55b5b00a3ef0
  011d7:    	call   rax
  011d9:    	movq   xmm2,QWORD PTR [rsp]
  011de:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011e4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011ea:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011f0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011f6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011fd:    	add    rsp,0x30
  01201:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  01205:    	mov    rdi,QWORD PTR [rbp-0x30]
  01209: 00 	test   rdi,0x7
  01210:    	jne    0x303be
  01216:    	cmp    DWORD PTR [rdi+0x4],0x2e
  0121a:    	jne    0x303be
  01220: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcb8e],0x26        # 0xfffdddb5
  01227:    	jne    0x303be
  0122d:    	mov    esi,DWORD PTR [rip+0x521]        # 0x1754
  01233:    	cmp    esi,0xffffffff
  01236:    	je     0x303f5
  0123c:    	cmp    WORD PTR [rdi+0x2],0x3
  01241:    	jne    0x125a
  01247:    	cmp    esi,0x6
  0124a:    	jge    0x125a
  01250:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01255:    	jmp    0x12b6
  0125a:    	sub    rsp,0x30
  0125e:    	movq   QWORD PTR [rsp],xmm2
  01263:    	movq   QWORD PTR [rsp+0x8],xmm4
  01269:    	movq   QWORD PTR [rsp+0x10],xmm5
  0126f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01275:    	movq   QWORD PTR [rsp+0x20],xmm7
  0127b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01282: b5 	movabs rax,0x55b5b00a3ef0
  0128c:    	call   rax
  0128e:    	movq   xmm2,QWORD PTR [rsp]
  01293:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01299:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0129f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012a5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  012ab: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  012b2:    	add    rsp,0x30
  012b6: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  012bd: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  012c4: 00 	test   rdi,0x7
  012cb:    	jne    0x3046e
  012d1:    	cmp    DWORD PTR [rdi+0x4],0x28
  012d5:    	jne    0x3046e
  012db: 26 	cmp    DWORD PTR [rip+0xfffffffffffdcad3],0x26        # 0xfffdddb5
  012e2:    	jne    0x3046e
  012e8:    	mov    esi,DWORD PTR [rip+0x46e]        # 0x175c
  012ee:    	cmp    esi,0xffffffff
  012f1:    	je     0x304a5
  012f7:    	cmp    WORD PTR [rdi+0x2],0x3
  012fc:    	jne    0x1315
  01302:    	cmp    esi,0x6
  01305:    	jge    0x1315
  0130b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01310:    	jmp    0x1371
  01315:    	sub    rsp,0x30
  01319:    	movq   QWORD PTR [rsp],xmm2
  0131e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01324:    	movq   QWORD PTR [rsp+0x10],xmm5
  0132a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01330:    	movq   QWORD PTR [rsp+0x20],xmm7
  01336: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0133d: b5 	movabs rax,0x55b5b00a3ef0
  01347:    	call   rax
  01349:    	movq   xmm2,QWORD PTR [rsp]
  0134e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01354:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0135a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01360:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01366: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0136d:    	add    rsp,0x30
  01371: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [Float][Float]
  01378: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0137f: 00 	test   rdi,0x1
  01386:    	jne    0x3051e
  0138c: 00 	test   rdi,0x2
  01393:    	je     0x13cf
  01399:    	xorps  xmm3,xmm3
  0139c: 00 	movabs rax,0x8000000000000002
  013a6:    	cmp    rdi,rax
  013a9:    	je     0x13e1
  013af:    	mov    rax,rdi
  013b2:    	sar    rax,0x3f
  013b6:    	add    rax,0x2
  013ba:    	and    rdi,0xfffffffffffffffc
  013be:    	or     rdi,rax
  013c1:    	rol    rdi,0x3d
  013c5:    	movq   xmm3,rdi
  013ca:    	jmp    0x13e1
  013cf:    	call   0xfffdad24
  013d4:    	test   rax,rax
  013d7:    	je     0x3051e
  013dd:    	movq   xmm3,xmm0
  013e1:    	mulsd  xmm3,xmm6
:00098 %11 = %11 + %12                      [Float][Float]
  013e5:    	mov    rdi,QWORD PTR [rbp-0x80]
  013e9: 00 	test   rdi,0x1
  013f0:    	jne    0x30555
  013f6: 00 	test   rdi,0x2
  013fd:    	je     0x143a
  01403:    	xorps  xmm9,xmm9
  01407: 00 	movabs rax,0x8000000000000002
  01411:    	cmp    rdi,rax
  01414:    	je     0x144d
  0141a:    	mov    rax,rdi
  0141d:    	sar    rax,0x3f
  01421:    	add    rax,0x2
  01425:    	and    rdi,0xfffffffffffffffc
  01429:    	or     rdi,rax
  0142c:    	rol    rdi,0x3d
  01430:    	movq   xmm9,rdi
  01435:    	jmp    0x144d
  0143a:    	call   0xfffdad24
  0143f:    	test   rax,rax
  01442:    	je     0x30555
  01448:    	movq   xmm9,xmm0
  0144d:    	addsd  xmm9,xmm3
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  01452:    	movq   xmm0,xmm7
  01456:    	call   0xfffdae48
  0145b:    	mov    QWORD PTR [rbp-0x70],rax
  0145f:    	movq   xmm0,xmm8
  01464:    	call   0xfffdae48
  01469:    	mov    QWORD PTR [rbp-0x78],rax
  0146d:    	movq   xmm0,xmm9
  01472:    	call   0xfffdae48
  01477:    	mov    QWORD PTR [rbp-0x80],rax
  0147b:    	mov    rdi,QWORD PTR [rbp-0x68]
  0147f: 00 	test   rdi,0x7
  01486:    	jne    0x3059c
  0148c:    	cmp    DWORD PTR [rdi+0x4],0x29
  01490:    	jne    0x3059c
  01496: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc918],0x26        # 0xfffdddb5
  0149d:    	jne    0x3059c
  014a3: 00 	mov    r9,0x0
  014aa:    	sub    rsp,0x40
  014ae:    	movq   QWORD PTR [rsp],xmm2
  014b3:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b9:    	movq   QWORD PTR [rsp+0x10],xmm4
  014bf:    	movq   QWORD PTR [rsp+0x18],xmm5
  014c5:    	movq   QWORD PTR [rsp+0x20],xmm6
  014cb:    	movq   QWORD PTR [rsp+0x28],xmm7
  014d1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014d8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014df:    	mov    rdx,rdi
  014e2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014eb:    	mov    QWORD PTR [rsp-0x38],rcx
  014f0:    	mov    rax,QWORD PTR [rbx]
  014f3:    	lea    rsi,[rsp-0x18]
  014f8:    	mov    QWORD PTR [rsi],rax
  014fb:    	mov    QWORD PTR [rbx],rsi
  014fe:    	lea    rcx,[rbp-0x70]
  01502: 00 	mov    r8,0x3
  01509:    	call   0x305c8
  0150e:    	lea    rdi,[rbp-0x8]
  01512:    	mov    QWORD PTR [rbx],rdi
  01515:    	movq   xmm2,QWORD PTR [rsp]
  0151a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01520:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01526:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0152c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01532:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01538: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0153f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01546:    	add    rsp,0x40
  0154a: b5 	movabs r13,0x55b5b07c53b0
  01554:    	test   rax,rax
  01557:    	je     0xfffdaccb
  0155d:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  01561:    	mov    rdi,QWORD PTR [rbp-0x38]
  01565: 00 	test   rdi,0x7
  0156c:    	jne    0x305fa
  01572:    	cmp    DWORD PTR [rdi+0x4],0x30
  01576:    	jne    0x305fa
  0157c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc832],0x26        # 0xfffdddb5
  01583:    	jne    0x305fa
  01589:    	mov    esi,DWORD PTR [rip+0x1d5]        # 0x1764
  0158f:    	cmp    esi,0xffffffff
  01592:    	je     0x30626
  01598:    	cmp    WORD PTR [rdi+0x2],0x3
  0159d:    	jne    0x15ba
  015a3:    	cmp    esi,0x6
  015a6:    	jge    0x15ba
  015ac:    	mov    rax,QWORD PTR [rbp-0x60]
  015b0:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  015b5:    	jmp    0x1647
  015ba:    	sub    rsp,0x40
  015be:    	movq   QWORD PTR [rsp],xmm2
  015c3:    	movq   QWORD PTR [rsp+0x8],xmm3
  015c9:    	movq   QWORD PTR [rsp+0x10],xmm4
  015cf:    	movq   QWORD PTR [rsp+0x18],xmm5
  015d5:    	movq   QWORD PTR [rsp+0x20],xmm6
  015db:    	movq   QWORD PTR [rsp+0x28],xmm7
  015e1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015e8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015ef:    	mov    rdx,QWORD PTR [rbp-0x60]
  015f3: b5 	movabs rax,0x55b5b00a4170
  015fd:    	call   rax
  015ff:    	movq   xmm2,QWORD PTR [rsp]
  01604:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0160a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01610:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01616:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0161c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01622: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01629: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01630:    	add    rsp,0x40
  01634: b5 	movabs r13,0x55b5b07c53e0
  0163e:    	test   rax,rax
  01641:    	je     0xfffdaccb
:00103 
:00105 br =>:00106
  01647:    	jmp    0x30726
:00106 %7 = nil
  0164c: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01654:    	mov    rax,QWORD PTR [rbp-0x60]
  01658:    	leave  
  01659:    	ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x55b5b07e9960
<== finished compile. elapsed:199.8µs
offset:Pos(158416) code: 9024 bytes  data: 344 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	je     0x73
  00017:    	jl     0x22
  0001d:    	jmp    0x73
  00022:    	mov    eax,0x1
  00027:    	sub    eax,edx
  00029:    	test   rax,rax
  0002c:    	je     0x48
  00032:    	lea    rdi,[rbp-0x38]
  00036: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  0003e:    	sub    rax,0x1
  00042:    	jne    0x36
  00048:    	mov    edx,0x1
  0004d:    	mov    eax,0x1
  00052:    	sub    eax,edx
  00054:    	test   rax,rax
  00057:    	je     0x73
  0005d:    	lea    rdi,[rbp-0x38]
  00061: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00069:    	sub    rax,0x1
  0006d:    	jne    0x61
  00073: 00 	mov    rax,0x4
  0007a:    	mov    QWORD PTR [rbp-0x38],rax
  0007e:    	mov    QWORD PTR [rbp-0x40],rax
  00082:    	mov    QWORD PTR [rbp-0x48],rax
  00086:    	mov    QWORD PTR [rbp-0x50],rax
  0008a:    	mov    QWORD PTR [rbp-0x58],rax
  0008e:    	mov    QWORD PTR [rbp-0x60],rax
  00092:    	mov    QWORD PTR [rbp-0x68],rax
  00096:    	mov    QWORD PTR [rbp-0x70],rax
  0009a:    	mov    QWORD PTR [rbp-0x78],rax
  0009e:    	mov    QWORD PTR [rbp-0x80],rax
  000a2: ff 	mov    QWORD PTR [rbp-0x88],rax
  000a9: ff 	mov    QWORD PTR [rbp-0x90],rax
  000b0: ff 	mov    QWORD PTR [rbp-0x98],rax
  000b7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  000be: ff 	mov    QWORD PTR [rbp-0xa8],rax
  000c5: ff 	mov    QWORD PTR [rbp-0xb0],rax
  000cc: ff 	mov    QWORD PTR [rbp-0xb8],rax
  000d3: ff 	mov    QWORD PTR [rbp-0xc0],rax
  000da:    	mov    rdi,QWORD PTR [rbp-0x28]
  000de: 00 	test   rdi,0x7
  000e5:    	jne    0x2f003
  000eb:    	cmp    DWORD PTR [rdi+0x4],0x32
  000ef:    	jne    0x2f003
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000f5:    	mov    rax,QWORD PTR [rbp-0x10]
  000f9:    	mov    rax,QWORD PTR [rax]
  000fc:    	mov    rax,QWORD PTR [rax]
  000ff:    	mov    rax,QWORD PTR [rax]
  00102:    	mov    rax,QWORD PTR [rax-0x38]
  00106: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  0010d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00114: 00 	test   rdi,0x1
  0011b:    	je     0x2f012
  00121:    	add    rdi,0x2
  00125:    	jo     0x2f012
  0012b: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  00132:    	mov    rax,QWORD PTR [rbp-0x10]
  00136:    	mov    rax,QWORD PTR [rax]
  00139:    	mov    rax,QWORD PTR [rax]
  0013c:    	mov    rax,QWORD PTR [rax]
  0013f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00146:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0014a:    	mov    rax,QWORD PTR [rbp-0x10]
  0014e:    	mov    rax,QWORD PTR [rax]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax-0x20]
  0015b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00162: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00169: 00 	test   rdi,0x1
  00170:    	je     0x2f021
  00176: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc4d0],0x26        # 0xfffdc64d
  0017d:    	jne    0x2f021
  00183:    	sar    rdi,1
  00186:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0018b:    	mov    rax,QWORD PTR [rbp-0x10]
  0018f:    	mov    rax,QWORD PTR [rax]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax]
  00198:    	mov    rax,QWORD PTR [rax-0x28]
  0019c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  001a3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001aa: 00 	test   rdi,0x1
  001b1:    	je     0x2f030
  001b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc48f],0x26        # 0xfffdc64d
  001be:    	jne    0x2f030
  001c4:    	sar    rdi,1
  001c7:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  001cc:    	mov    rax,QWORD PTR [rbp-0x10]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x2f04c
  001f2: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc454],0x26        # 0xfffdc64d
  001f9:    	jne    0x2f04c
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  00207:    	mov    rax,QWORD PTR [rbp-0x10]
  0020b:    	mov    rax,QWORD PTR [rax]
  0020e:    	mov    rax,QWORD PTR [rax]
  00211:    	mov    rax,QWORD PTR [rax-0x20]
  00215: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  0021c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00223: 00 	test   rdi,0x1
  0022a:    	je     0x2f075
  00230: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc416],0x26        # 0xfffdc64d
  00237:    	jne    0x2f075
  0023d:    	sar    rdi,1
  00240:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00245:    	mov    rdi,QWORD PTR [rbp-0x30]
  00249: 00 	test   rdi,0x1
  00250:    	je     0x2f0ab
  00256: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc3f0],0x26        # 0xfffdc64d
  0025d:    	jne    0x2f0ab
  00263:    	sar    rdi,1
  00266:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0026b:    	mov    rax,QWORD PTR [rbp-0x10]
  0026f:    	mov    rax,QWORD PTR [rax-0x20]
  00273: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0027a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00281: 00 	test   rdi,0x1
  00288:    	je     0x2f0ee
  0028e: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc3b8],0x26        # 0xfffdc64d
  00295:    	jne    0x2f0ee
  0029b:    	sar    rdi,1
  0029e:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  002a3:    	mov    rax,QWORD PTR [rbp-0x10]
  002a7:    	mov    rax,QWORD PTR [rax]
  002aa:    	mov    rax,QWORD PTR [rax]
  002ad:    	mov    rax,QWORD PTR [rax]
  002b0:    	mov    rax,QWORD PTR [rax-0x40]
  002b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  002bb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002c2: 00 	test   rdi,0x1
  002c9:    	jne    0x2f13e
  002cf: 00 	test   rdi,0x2
  002d6:    	je     0x313
  002dc:    	xorps  xmm8,xmm8
  002e0: 00 	movabs rax,0x8000000000000002
  002ea:    	cmp    rdi,rax
  002ed:    	je     0x326
  002f3:    	mov    rax,rdi
  002f6:    	sar    rax,0x3f
  002fa:    	add    rax,0x2
  002fe:    	and    rdi,0xfffffffffffffffc
  00302:    	or     rdi,rax
  00305:    	rol    rdi,0x3d
  00309:    	movq   xmm8,rdi
  0030e:    	jmp    0x326
  00313:    	call   0xfffd95bc
  00318:    	test   rax,rax
  0031b:    	je     0x2f13e
  00321:    	movq   xmm8,xmm0
  00326:    	movq   rax,xmm8
  0032b:    	test   rax,rax
  0032e:    	je     0xfffd9588
  00334:    	movq   xmm0,xmm6
  00338:    	divsd  xmm0,xmm8
  0033d:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00342:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00347: 1f 	movq   xmm9,QWORD PTR [rip+0x1ff0]        # 0x2340
  00350: 00 	mov    rax,0x2
  00357: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0035e:    	movq   rax,xmm9
  00363:    	test   rax,rax
  00366:    	je     0xfffd9588
  0036c:    	movq   xmm0,xmm2
  00370:    	divsd  xmm0,xmm9
  00375:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0037a:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0037f: 1f 	movq   xmm9,QWORD PTR [rip+0x1fc8]        # 0x2350
  00388: 00 	mov    rax,0x2
  0038f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00396:    	movq   rax,xmm9
  0039b:    	test   rax,rax
  0039e:    	je     0xfffd9588
  003a4:    	movq   xmm0,xmm2
  003a8:    	divsd  xmm0,xmm9
  003ad:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  003b2:    	movq   xmm10,xmm8
  003b7:    	movq   rax,xmm9
  003bc:    	test   rax,rax
  003bf:    	je     0xfffd9588
  003c5:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  003ca:    	mov    rax,QWORD PTR [rbp-0x10]
  003ce:    	mov    rax,QWORD PTR [rax]
  003d1:    	mov    rax,QWORD PTR [rax]
  003d4:    	mov    rax,QWORD PTR [rax]
  003d7:    	mov    rax,QWORD PTR [rax-0x40]
  003db: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003e2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003e9: 00 	test   rdi,0x1
  003f0:    	jne    0x2f19b
  003f6: 00 	test   rdi,0x2
  003fd:    	je     0x43a
  00403:    	xorps  xmm8,xmm8
  00407: 00 	movabs rax,0x8000000000000002
  00411:    	cmp    rdi,rax
  00414:    	je     0x44d
  0041a:    	mov    rax,rdi
  0041d:    	sar    rax,0x3f
  00421:    	add    rax,0x2
  00425:    	and    rdi,0xfffffffffffffffc
  00429:    	or     rdi,rax
  0042c:    	rol    rdi,0x3d
  00430:    	movq   xmm8,rdi
  00435:    	jmp    0x44d
  0043a:    	call   0xfffd95bc
  0043f:    	test   rax,rax
  00442:    	je     0x2f19b
  00448:    	movq   xmm8,xmm0
  0044d:    	movq   rax,xmm8
  00452:    	test   rax,rax
  00455:    	je     0xfffd9588
  0045b:    	movq   xmm0,xmm7
  0045f:    	divsd  xmm0,xmm8
  00464:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00469:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0046e: 1e 	movq   xmm9,QWORD PTR [rip+0x1ee9]        # 0x2360
  00477: 00 	mov    rax,0x2
  0047e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00485:    	movq   rax,xmm9
  0048a:    	test   rax,rax
  0048d:    	je     0xfffd9588
  00493:    	movq   xmm0,xmm3
  00497:    	divsd  xmm0,xmm9
  0049c:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  004a1:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  004a6: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1ec2]        # 0x2370
:00043 %15 = literal[2.0]
  004ae: 1e 	movq   xmm9,QWORD PTR [rip+0x1ec9]        # 0x2380
  004b7: 00 	mov    rax,0x2
  004be: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  004c5:    	movq   rax,xmm9
  004ca:    	test   rax,rax
  004cd:    	je     0xfffd9588
  004d3:    	movq   xmm0,xmm3
  004d7:    	divsd  xmm0,xmm9
  004dc:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004e1:    	movq   xmm11,xmm8
  004e6:    	movq   rax,xmm9
  004eb:    	test   rax,rax
  004ee:    	je     0xfffd9588
  004f4:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004f9: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdc160]        # 0xfffdc660
  00500: 00 	cmp    rax,QWORD PTR [rip+0x1e99]        # 0x23a0
  00507:    	jne    0x2f217
  0050d: 00 	mov    rax,QWORD PTR [rip+0x1e7c]        # 0x2390
  00514: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  0051b: 1e 	movq   xmm9,QWORD PTR [rip+0x1e8c]        # 0x23b0
  00524: 00 	movabs rax,0xff80000000000006
  0052e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00535:    	movq   xmm0,xmm10
  0053a:    	call   0xfffd96e0
  0053f: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00546:    	movq   xmm0,xmm11
  0054b:    	call   0xfffd96e0
  00550: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00557: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0055e: 00 	test   rdi,0x7
  00565:    	jne    0x2f2d5
  0056b:    	cmp    DWORD PTR [rdi+0x4],0x29
  0056f:    	jne    0x2f2d5
  00575: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc0d1],0x26        # 0xfffdc64d
  0057c:    	jne    0x2f2d5
  00582: 00 	mov    r9,0x0
  00589:    	sub    rsp,0x50
  0058d:    	movq   QWORD PTR [rsp],xmm2
  00592:    	movq   QWORD PTR [rsp+0x8],xmm3
  00598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0059e:    	movq   QWORD PTR [rsp+0x18],xmm5
  005a4:    	movq   QWORD PTR [rsp+0x20],xmm6
  005aa:    	movq   QWORD PTR [rsp+0x28],xmm7
  005b0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005b7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005be: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005c5:    	mov    rdx,rdi
  005c8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005d1:    	mov    QWORD PTR [rsp-0x38],rcx
  005d6:    	mov    rax,QWORD PTR [rbx]
  005d9:    	lea    rsi,[rsp-0x18]
  005de:    	mov    QWORD PTR [rsi],rax
  005e1:    	mov    QWORD PTR [rbx],rsi
  005e4: ff 	lea    rcx,[rbp-0xa8]
  005eb: 00 	mov    r8,0x3
  005f2:    	call   0x2f34e
  005f7:    	lea    rdi,[rbp-0x8]
  005fb:    	mov    QWORD PTR [rbx],rdi
  005fe:    	movq   xmm2,QWORD PTR [rsp]
  00603:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00609:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0060f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00615:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0061b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00621: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00628: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0062f: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00636:    	add    rsp,0x50
  0063a: b5 	movabs r13,0x55b5b07e9ca0
  00644:    	test   rax,rax
  00647:    	je     0xfffd9563
  0064d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00654: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0065b: 00 	test   rdi,0x7
  00662:    	jne    0x2f380
  00668:    	cmp    DWORD PTR [rdi+0x4],0x28
  0066c:    	jne    0x2f380
  00672: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbfd4],0x26        # 0xfffdc64d
  00679:    	jne    0x2f380
  0067f:    	sub    rsp,0x50
  00683:    	movq   QWORD PTR [rsp],xmm2
  00688:    	movq   QWORD PTR [rsp+0x8],xmm3
  0068e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00694:    	movq   QWORD PTR [rsp+0x18],xmm5
  0069a:    	movq   QWORD PTR [rsp+0x20],xmm6
  006a0:    	movq   QWORD PTR [rsp+0x28],xmm7
  006a6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  006ad: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  006b4: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006bb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006c4:    	mov    QWORD PTR [rsp-0x38],rcx
  006c9:    	mov    rax,QWORD PTR [rbx]
  006cc:    	lea    rsi,[rsp-0x18]
  006d1:    	mov    QWORD PTR [rsi],rax
  006d4:    	mov    QWORD PTR [rbx],rsi
  006d7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006de:    	mov    QWORD PTR [rsp-0x38],rax
  006e3: 00 	mov    rdi,0x0
  006ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006f3: 07 	movabs rax,0x700000044
  006fd:    	mov    QWORD PTR [rsp-0x28],rax
  00702: b5 	movabs r13,0x55b5b07ceca0
  0070c:    	call   0xfffdcf92
  00711:    	lea    rdi,[rbp-0x8]
  00715:    	mov    QWORD PTR [rbx],rdi
  00718:    	movq   xmm2,QWORD PTR [rsp]
  0071d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00723:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00729:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0072f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00735:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0073b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00742: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00749: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00750:    	add    rsp,0x50
  00754: b5 	movabs r13,0x55b5b07e9cd0
  0075e:    	test   rax,rax
  00761:    	je     0xfffd9563
  00767:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0076b: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdbeee]        # 0xfffdc660
  00772: 00 	cmp    rax,QWORD PTR [rip+0x1c57]        # 0x23d0
  00779:    	jne    0x2f3f9
  0077f: 00 	mov    rax,QWORD PTR [rip+0x1c3a]        # 0x23c0
  00786: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0078d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdbecc]        # 0xfffdc660
  00794: 00 	cmp    rax,QWORD PTR [rip+0x1c55]        # 0x23f0
  0079b:    	jne    0x2f4b7
  007a1: 00 	mov    rax,QWORD PTR [rip+0x1c38]        # 0x23e0
  007a8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  007af: 1c 	movq   xmm8,QWORD PTR [rip+0x1c48]        # 0x2400
  007b8: 00 	movabs rax,0x8000000000000002
  007c2: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  007c9: 1c 	movq   xmm9,QWORD PTR [rip+0x1c3e]        # 0x2410
  007d2: 00 	movabs rax,0x8000000000000002
  007dc: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007e3: 1c 	movq   xmm12,QWORD PTR [rip+0x1c34]        # 0x2420
  007ec: 00 	movabs rax,0x8000000000000002
  007f6: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007fd: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00804: 00 	test   rdi,0x7
  0080b:    	jne    0x2f575
  00811:    	cmp    DWORD PTR [rdi+0x4],0x29
  00815:    	jne    0x2f575
  0081b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbe2b],0x26        # 0xfffdc64d
  00822:    	jne    0x2f575
  00828: 00 	mov    r9,0x0
  0082f:    	sub    rsp,0x60
  00833:    	movq   QWORD PTR [rsp],xmm2
  00838:    	movq   QWORD PTR [rsp+0x8],xmm3
  0083e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00844:    	movq   QWORD PTR [rsp+0x18],xmm5
  0084a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00850:    	movq   QWORD PTR [rsp+0x28],xmm7
  00856: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0085d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00864: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0086b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00872: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00879:    	mov    rdx,rdi
  0087c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00885:    	mov    QWORD PTR [rsp-0x38],rcx
  0088a:    	mov    rax,QWORD PTR [rbx]
  0088d:    	lea    rsi,[rsp-0x18]
  00892:    	mov    QWORD PTR [rsi],rax
  00895:    	mov    QWORD PTR [rbx],rsi
  00898: ff 	lea    rcx,[rbp-0xb0]
  0089f: 00 	mov    r8,0x3
  008a6:    	call   0x2f5ee
  008ab:    	lea    rdi,[rbp-0x8]
  008af:    	mov    QWORD PTR [rbx],rdi
  008b2:    	movq   xmm2,QWORD PTR [rsp]
  008b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f8:    	add    rsp,0x60
  008fc: b5 	movabs r13,0x55b5b07e9d50
  00906:    	test   rax,rax
  00909:    	je     0xfffd9563
  0090f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  00916:    	mov    rax,QWORD PTR [rbp-0x78]
  0091a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00921: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00928: 00 	test   rdi,0x7
  0092f:    	jne    0x2f620
  00935:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00939:    	jne    0x2f620
  0093f: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbd07],0x26        # 0xfffdc64d
  00946:    	jne    0x2f620
  0094c: 00 	mov    r9,0x0
  00953:    	sub    rsp,0x60
  00957:    	movq   QWORD PTR [rsp],xmm2
  0095c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00962:    	movq   QWORD PTR [rsp+0x10],xmm4
  00968:    	movq   QWORD PTR [rsp+0x18],xmm5
  0096e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00974:    	movq   QWORD PTR [rsp+0x28],xmm7
  0097a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00981: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00988: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0098f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00996: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0099d:    	mov    rdx,rdi
  009a0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a9:    	mov    QWORD PTR [rsp-0x38],rcx
  009ae:    	mov    rax,QWORD PTR [rbx]
  009b1:    	lea    rsi,[rsp-0x18]
  009b6:    	mov    QWORD PTR [rsi],rax
  009b9:    	mov    QWORD PTR [rbx],rsi
  009bc: ff 	lea    rcx,[rbp-0xa0]
  009c3: 00 	mov    r8,0x2
  009ca:    	call   0x2f699
  009cf:    	lea    rdi,[rbp-0x8]
  009d3:    	mov    QWORD PTR [rbx],rdi
  009d6:    	movq   xmm2,QWORD PTR [rsp]
  009db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009f3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009f9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a00: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a07: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a0e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a15: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a1c:    	add    rsp,0x60
  00a20: b5 	movabs r13,0x55b5b07e9d90
  00a2a:    	test   rax,rax
  00a2d:    	je     0xfffd9563
  00a33:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a37: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdbc22]        # 0xfffdc660
  00a3e: 00 	cmp    rax,QWORD PTR [rip+0x19fb]        # 0x2440
  00a45:    	jne    0x2f6cb
  00a4b: 00 	mov    rax,QWORD PTR [rip+0x19de]        # 0x2430
  00a52: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a59: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a60: 00 	test   rdi,0x7
  00a67:    	jne    0x2f7a5
  00a6d:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a71:    	jne    0x2f7a5
  00a77: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbbcf],0x26        # 0xfffdc64d
  00a7e:    	jne    0x2f7a5
  00a84: 00 	mov    r9,0x0
  00a8b:    	sub    rsp,0x60
  00a8f:    	movq   QWORD PTR [rsp],xmm2
  00a94:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a9a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aa0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00aa6:    	movq   QWORD PTR [rsp+0x20],xmm6
  00aac:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ab2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ab9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ac0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ac7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ace: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ad5:    	mov    rdx,rdi
  00ad8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ae1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ae6:    	mov    rax,QWORD PTR [rbx]
  00ae9:    	lea    rsi,[rsp-0x18]
  00aee:    	mov    QWORD PTR [rsi],rax
  00af1:    	mov    QWORD PTR [rbx],rsi
  00af4: ff 	lea    rcx,[rbp-0xa0]
  00afb: 00 	mov    r8,0x0
  00b02:    	call   0x2f81e
  00b07:    	lea    rdi,[rbp-0x8]
  00b0b:    	mov    QWORD PTR [rbx],rdi
  00b0e:    	movq   xmm2,QWORD PTR [rsp]
  00b13:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b19:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b1f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b25:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b2b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b31: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b38: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b3f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b46: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b4d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b54:    	add    rsp,0x60
  00b58: b5 	movabs r13,0x55b5b07e9dd0
  00b62:    	test   rax,rax
  00b65:    	je     0xfffd9563
  00b6b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b72:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b76:    	mov    rax,QWORD PTR [rdi+0x10]
  00b7a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b81: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b8c:    	sub    rsp,0x60
  00b90:    	movq   QWORD PTR [rsp],xmm2
  00b95:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b9b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ba1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ba7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bad:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bb3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bba: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bc1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bc8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bcf: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bd6: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00bdd: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00be4:    	mov    rdi,rbx
  00be7:    	mov    rsi,r12
  00bea: b5 	movabs r8,0x55b5b07e9e08
  00bf4: b5 	movabs rax,0x55b5b0091aa0
  00bfe:    	call   rax
  00c00:    	movq   xmm2,QWORD PTR [rsp]
  00c05:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c0b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c11:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c17:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c1d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c23: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c2a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c31: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c38: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c3f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c46:    	add    rsp,0x60
  00c4a: b5 	movabs r13,0x55b5b07e9e10
  00c54:    	test   rax,rax
  00c57:    	je     0xfffd9563
  00c5d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c64:    	mov    rax,QWORD PTR [rbp-0x80]
  00c68: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c6f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c76: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c7d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c84: 00 	test   rdi,0x7
  00c8b:    	jne    0x2f850
  00c91:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c95:    	jne    0x2f850
  00c9b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb9ab],0x26        # 0xfffdc64d
  00ca2:    	jne    0x2f850
  00ca8:    	sub    rsp,0x60
  00cac:    	movq   QWORD PTR [rsp],xmm2
  00cb1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cbd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc3:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cc9:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ccf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cd6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cdd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ce4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ceb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cf2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cfb:    	mov    QWORD PTR [rsp-0x38],rcx
  00d00:    	mov    rax,QWORD PTR [rbx]
  00d03:    	lea    rsi,[rsp-0x18]
  00d08:    	mov    QWORD PTR [rsi],rax
  00d0b:    	mov    QWORD PTR [rbx],rsi
  00d0e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d15:    	mov    QWORD PTR [rsp-0x38],rax
  00d1a: 00 	mov    rdi,0x2
  00d21:    	lea    r8,[rsp-0x40]
  00d26: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d2d:    	mov    QWORD PTR [r8],rax
  00d30:    	sub    r8,0x8
  00d34: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d3b:    	mov    QWORD PTR [r8],rax
  00d3e:    	sub    r8,0x8
  00d42: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d4b: 10 	movabs rax,0x1000000046
  00d55:    	mov    QWORD PTR [rsp-0x28],rax
  00d5a: b5 	movabs r13,0x55b5b07be970
  00d64:    	call   0xfffdd29a
  00d69:    	lea    rdi,[rbp-0x8]
  00d6d:    	mov    QWORD PTR [rbx],rdi
  00d70:    	movq   xmm2,QWORD PTR [rsp]
  00d75:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d7b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d81:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d87:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d8d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d93: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d9a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00da1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00da8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00daf: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00db6:    	add    rsp,0x60
  00dba: b5 	movabs r13,0x55b5b07e9e50
  00dc4:    	test   rax,rax
  00dc7:    	je     0xfffd9563
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00dcd:    	mov    rdi,QWORD PTR [rbp-0x28]
  00dd1:    	mov    rax,QWORD PTR [rdi+0x10]
  00dd5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00ddc: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00de7:    	sub    rsp,0x60
  00deb:    	movq   QWORD PTR [rsp],xmm2
  00df0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00df6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dfc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e02:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e08:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e0e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e15: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e1c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e23: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e2a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e31: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e38: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e3f:    	mov    rdi,rbx
  00e42:    	mov    rsi,r12
  00e45: b5 	movabs r8,0x55b5b07e9e88
  00e4f: b5 	movabs rax,0x55b5b0091aa0
  00e59:    	call   rax
  00e5b:    	movq   xmm2,QWORD PTR [rsp]
  00e60:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e66:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e72:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e78:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e7e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e85: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e8c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e93: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e9a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ea1:    	add    rsp,0x60
  00ea5: b5 	movabs r13,0x55b5b07e9e90
  00eaf:    	test   rax,rax
  00eb2:    	je     0xfffd9563
  00eb8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00ebf:    	mov    rax,QWORD PTR [rbp-0x80]
  00ec3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00eca: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ed1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00ed8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00edf: 00 	test   rdi,0x7
  00ee6:    	jne    0x2f8c9
  00eec:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ef0:    	jne    0x2f8c9
  00ef6: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb750],0x26        # 0xfffdc64d
  00efd:    	jne    0x2f8c9
  00f03:    	sub    rsp,0x60
  00f07:    	movq   QWORD PTR [rsp],xmm2
  00f0c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f12:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f18:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f1e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f24:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f2a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f31: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f38: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f3f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f46: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f4d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f56:    	mov    QWORD PTR [rsp-0x38],rcx
  00f5b:    	mov    rax,QWORD PTR [rbx]
  00f5e:    	lea    rsi,[rsp-0x18]
  00f63:    	mov    QWORD PTR [rsi],rax
  00f66:    	mov    QWORD PTR [rbx],rsi
  00f69: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f70:    	mov    QWORD PTR [rsp-0x38],rax
  00f75: 00 	mov    rdi,0x2
  00f7c:    	lea    r8,[rsp-0x40]
  00f81: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f88:    	mov    QWORD PTR [r8],rax
  00f8b:    	sub    r8,0x8
  00f8f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f96:    	mov    QWORD PTR [r8],rax
  00f99:    	sub    r8,0x8
  00f9d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fa6: 10 	movabs rax,0x1000000046
  00fb0:    	mov    QWORD PTR [rsp-0x28],rax
  00fb5: b5 	movabs r13,0x55b5b07be970
  00fbf:    	call   0xfffdd29a
  00fc4:    	lea    rdi,[rbp-0x8]
  00fc8:    	mov    QWORD PTR [rbx],rdi
  00fcb:    	movq   xmm2,QWORD PTR [rsp]
  00fd0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fd6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fdc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fe2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fe8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ff5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ffc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01003: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0100a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01011:    	add    rsp,0x60
  01015: b5 	movabs r13,0x55b5b07e9ed0
  0101f:    	test   rax,rax
  01022:    	je     0xfffd9563
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  01028:    	mov    rdi,QWORD PTR [rbp-0x28]
  0102c:    	mov    rax,QWORD PTR [rdi+0x10]
  01030: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  01037: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01042:    	sub    rsp,0x60
  01046:    	movq   QWORD PTR [rsp],xmm2
  0104b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01051:    	movq   QWORD PTR [rsp+0x10],xmm4
  01057:    	movq   QWORD PTR [rsp+0x18],xmm5
  0105d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01063:    	movq   QWORD PTR [rsp+0x28],xmm7
  01069: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01070: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01077: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0107e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01085: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0108c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01093: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0109a:    	mov    rdi,rbx
  0109d:    	mov    rsi,r12
  010a0: b5 	movabs r8,0x55b5b07e9f08
  010aa: b5 	movabs rax,0x55b5b0091aa0
  010b4:    	call   rax
  010b6:    	movq   xmm2,QWORD PTR [rsp]
  010bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010c7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010cd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010d3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010d9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010e0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010e7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  010ee: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010f5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010fc:    	add    rsp,0x60
  01100: b5 	movabs r13,0x55b5b07e9f10
  0110a:    	test   rax,rax
  0110d:    	je     0xfffd9563
  01113: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  0111a:    	mov    rax,QWORD PTR [rbp-0x80]
  0111e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  01125: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0112c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  01133: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0113a: 00 	test   rdi,0x7
  01141:    	jne    0x2f942
  01147:    	cmp    DWORD PTR [rdi+0x4],0x2a
  0114b:    	jne    0x2f942
  01151: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb4f5],0x26        # 0xfffdc64d
  01158:    	jne    0x2f942
  0115e:    	sub    rsp,0x60
  01162:    	movq   QWORD PTR [rsp],xmm2
  01167:    	movq   QWORD PTR [rsp+0x8],xmm3
  0116d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01173:    	movq   QWORD PTR [rsp+0x18],xmm5
  01179:    	movq   QWORD PTR [rsp+0x20],xmm6
  0117f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01185: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0118c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01193: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0119a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011a1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011a8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011b1:    	mov    QWORD PTR [rsp-0x38],rcx
  011b6:    	mov    rax,QWORD PTR [rbx]
  011b9:    	lea    rsi,[rsp-0x18]
  011be:    	mov    QWORD PTR [rsi],rax
  011c1:    	mov    QWORD PTR [rbx],rsi
  011c4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011cb:    	mov    QWORD PTR [rsp-0x38],rax
  011d0: 00 	mov    rdi,0x2
  011d7:    	lea    r8,[rsp-0x40]
  011dc: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011e3:    	mov    QWORD PTR [r8],rax
  011e6:    	sub    r8,0x8
  011ea: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011f1:    	mov    QWORD PTR [r8],rax
  011f4:    	sub    r8,0x8
  011f8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01201: 10 	movabs rax,0x1000000046
  0120b:    	mov    QWORD PTR [rsp-0x28],rax
  01210: b5 	movabs r13,0x55b5b07be970
  0121a:    	call   0xfffdd29a
  0121f:    	lea    rdi,[rbp-0x8]
  01223:    	mov    QWORD PTR [rbx],rdi
  01226:    	movq   xmm2,QWORD PTR [rsp]
  0122b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01231:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01237:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0123d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01243:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01249: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01250: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01257: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0125e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01265: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0126c:    	add    rsp,0x60
  01270: b5 	movabs r13,0x55b5b07e9f50
  0127a:    	test   rax,rax
  0127d:    	je     0xfffd9563
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  01283:    	mov    rdi,QWORD PTR [rbp-0x28]
  01287:    	mov    rax,QWORD PTR [rdi+0x18]
  0128b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01292:    	mov    rax,QWORD PTR [rbp-0x80]
  01296: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  0129d: ff 	mov    rax,QWORD PTR [rbp-0x88]
  012a4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  012ab: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x2f9bb
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x2c
  012c3:    	jne    0x2f9bb
  012c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb37d],0x26        # 0xfffdc64d
  012d0:    	jne    0x2f9bb
  012d6:    	sub    rsp,0x60
  012da:    	movq   QWORD PTR [rsp],xmm2
  012df:    	movq   QWORD PTR [rsp+0x8],xmm3
  012e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  012eb:    	movq   QWORD PTR [rsp+0x18],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x20],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x28],xmm7
  012fd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01304: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0130b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01312: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01319: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01320: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01329:    	mov    QWORD PTR [rsp-0x38],rcx
  0132e:    	mov    rax,QWORD PTR [rbx]
  01331:    	lea    rsi,[rsp-0x18]
  01336:    	mov    QWORD PTR [rsi],rax
  01339:    	mov    QWORD PTR [rbx],rsi
  0133c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01343:    	mov    QWORD PTR [rsp-0x38],rax
  01348: 00 	mov    rdi,0x2
  0134f:    	lea    r8,[rsp-0x40]
  01354: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0135b:    	mov    QWORD PTR [r8],rax
  0135e:    	sub    r8,0x8
  01362: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01369:    	mov    QWORD PTR [r8],rax
  0136c:    	sub    r8,0x8
  01370: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01379: 0e 	movabs rax,0xe00000048
  01383:    	mov    QWORD PTR [rsp-0x28],rax
  01388: b5 	movabs r13,0x55b5b07c4d60
  01392:    	call   0xfffdd8a8
  01397:    	lea    rdi,[rbp-0x8]
  0139b:    	mov    QWORD PTR [rbx],rdi
  0139e:    	movq   xmm2,QWORD PTR [rsp]
  013a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013b5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013bb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013c1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013c8: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013cf: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013d6: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013dd: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013e4:    	add    rsp,0x60
  013e8: b5 	movabs r13,0x55b5b07e9fb0
  013f2:    	test   rax,rax
  013f5:    	je     0xfffd9563
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  013fb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01402: 00 	test   rdi,0x7
  01409:    	jne    0x2fa34
  0140f:    	cmp    DWORD PTR [rdi+0x4],0x30
  01413:    	jne    0x2fa34
  01419: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb22d],0x26        # 0xfffdc64d
  01420:    	jne    0x2fa34
  01426:    	mov    esi,DWORD PTR [rip+0x1020]        # 0x244c
  0142c:    	cmp    esi,0xffffffff
  0142f:    	je     0x2faad
  01435:    	cmp    WORD PTR [rdi+0x2],0x3
  0143a:    	jne    0x1453
  01440:    	cmp    esi,0x6
  01443:    	jge    0x1453
  01449:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0144e:    	jmp    0x14f3
  01453:    	sub    rsp,0x60
  01457:    	movq   QWORD PTR [rsp],xmm2
  0145c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01462:    	movq   QWORD PTR [rsp+0x10],xmm4
  01468:    	movq   QWORD PTR [rsp+0x18],xmm5
  0146e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01474:    	movq   QWORD PTR [rsp+0x28],xmm7
  0147a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01481: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01488: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0148f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01496: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0149d: b5 	movabs rax,0x55b5b00a3ef0
  014a7:    	call   rax
  014a9:    	movq   xmm2,QWORD PTR [rsp]
  014ae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014b4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014ba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014c0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014c6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014cc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014d3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014da: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014e1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014e8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014ef:    	add    rsp,0x60
  014f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  014fa: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01501:    	or     rax,0x10
  01505:    	cmp    rax,0x14
  01509:    	je     0x232c
:00106 %14 = %12
  0150f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01516: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  0151d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01521: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb125],0x26        # 0xfffdc64d
  01528:    	jne    0x2fb6a
  0152e:    	sub    rsp,0x60
  01532:    	movq   QWORD PTR [rsp],xmm2
  01537:    	movq   QWORD PTR [rsp+0x8],xmm3
  0153d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01543:    	movq   QWORD PTR [rsp+0x18],xmm5
  01549:    	movq   QWORD PTR [rsp+0x20],xmm6
  0154f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01555: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0155c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01563: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0156a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01571: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01578: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01581:    	mov    QWORD PTR [rsp-0x38],rcx
  01586:    	mov    rax,QWORD PTR [rbx]
  01589:    	lea    rsi,[rsp-0x18]
  0158e:    	mov    QWORD PTR [rsi],rax
  01591:    	mov    QWORD PTR [rbx],rsi
  01594:    	mov    rax,QWORD PTR [rbp-0x28]
  01598:    	mov    QWORD PTR [rsp-0x38],rax
  0159d: 00 	mov    rdi,0x1
  015a4:    	lea    r8,[rsp-0x40]
  015a9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  015b0:    	mov    QWORD PTR [r8],rax
  015b3:    	sub    r8,0x8
  015b7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015c0: 0e 	movabs rax,0xe0000004c
  015ca:    	mov    QWORD PTR [rsp-0x28],rax
  015cf: b5 	movabs r13,0x55b5b07c7ae0
  015d9:    	call   0xfffe64eb
  015de:    	lea    rdi,[rbp-0x8]
  015e2:    	mov    QWORD PTR [rbx],rdi
  015e5:    	movq   xmm2,QWORD PTR [rsp]
  015ea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015f0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015f6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015fc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01602:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01608: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0160f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01616: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0161d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01624: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0162b:    	add    rsp,0x60
  0162f: b5 	movabs r13,0x55b5b07ea030
  01639:    	test   rax,rax
  0163c:    	je     0xfffd9563
  01642: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  01649:    	mov    rax,QWORD PTR [rbp-0x10]
  0164d:    	mov    rax,QWORD PTR [rax]
  01650:    	mov    rax,QWORD PTR [rax-0x28]
  01654: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  0165b:    	mov    rax,QWORD PTR [rbp-0x10]
  0165f:    	mov    rax,QWORD PTR [rax]
  01662:    	mov    rax,QWORD PTR [rax-0x28]
  01666: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [Vec]
  0166d: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01674: 00 	test   rdi,0x7
  0167b:    	jne    0x2fbe3
  01681:    	cmp    DWORD PTR [rdi+0x4],0x28
  01685:    	jne    0x2fbe3
  0168b: 26 	cmp    DWORD PTR [rip+0xfffffffffffdafbb],0x26        # 0xfffdc64d
  01692:    	jne    0x2fbe3
  01698:    	mov    esi,DWORD PTR [rip+0xdb6]        # 0x2454
  0169e:    	cmp    esi,0xffffffff
  016a1:    	je     0x2fc5c
  016a7:    	cmp    WORD PTR [rdi+0x2],0x3
  016ac:    	jne    0x16c5
  016b2:    	cmp    esi,0x6
  016b5:    	jge    0x16c5
  016bb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  016c0:    	jmp    0x1765
  016c5:    	sub    rsp,0x60
  016c9:    	movq   QWORD PTR [rsp],xmm2
  016ce:    	movq   QWORD PTR [rsp+0x8],xmm3
  016d4:    	movq   QWORD PTR [rsp+0x10],xmm4
  016da:    	movq   QWORD PTR [rsp+0x18],xmm5
  016e0:    	movq   QWORD PTR [rsp+0x20],xmm6
  016e6:    	movq   QWORD PTR [rsp+0x28],xmm7
  016ec: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016f3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016fa: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01701: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01708: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0170f: b5 	movabs rax,0x55b5b00a3ef0
  01719:    	call   rax
  0171b:    	movq   xmm2,QWORD PTR [rsp]
  01720:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01726:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0172c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01732:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01738:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0173e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01745: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0174c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01753: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0175a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01761:    	add    rsp,0x60
  01765: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [Vec]
  0176c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01773: 00 	test   rdi,0x7
  0177a:    	jne    0x2fd19
  01780:    	cmp    DWORD PTR [rdi+0x4],0x28
  01784:    	jne    0x2fd19
  0178a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdaebc],0x26        # 0xfffdc64d
  01791:    	jne    0x2fd19
  01797:    	mov    esi,DWORD PTR [rip+0xcbf]        # 0x245c
  0179d:    	cmp    esi,0xffffffff
  017a0:    	je     0x2fd92
  017a6:    	cmp    WORD PTR [rdi+0x2],0x3
  017ab:    	jne    0x17c4
  017b1:    	cmp    esi,0x6
  017b4:    	jge    0x17c4
  017ba:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  017bf:    	jmp    0x1864
  017c4:    	sub    rsp,0x60
  017c8:    	movq   QWORD PTR [rsp],xmm2
  017cd:    	movq   QWORD PTR [rsp+0x8],xmm3
  017d3:    	movq   QWORD PTR [rsp+0x10],xmm4
  017d9:    	movq   QWORD PTR [rsp+0x18],xmm5
  017df:    	movq   QWORD PTR [rsp+0x20],xmm6
  017e5:    	movq   QWORD PTR [rsp+0x28],xmm7
  017eb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  017f2: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017f9: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01800: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01807: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0180e: b5 	movabs rax,0x55b5b00a3ef0
  01818:    	call   rax
  0181a:    	movq   xmm2,QWORD PTR [rsp]
  0181f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01825:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0182b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01831:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01837:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0183d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01844: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0184b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01852: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01859: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01860:    	add    rsp,0x60
  01864: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [Float][Float]
  0186b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01872: 00 	test   rdi,0x1
  01879:    	jne    0x2fe4f
  0187f: 00 	test   rdi,0x2
  01886:    	je     0x18c3
  0188c:    	xorps  xmm13,xmm13
  01890: 00 	movabs rax,0x8000000000000002
  0189a:    	cmp    rdi,rax
  0189d:    	je     0x18d6
  018a3:    	mov    rax,rdi
  018a6:    	sar    rax,0x3f
  018aa:    	add    rax,0x2
  018ae:    	and    rdi,0xfffffffffffffffc
  018b2:    	or     rdi,rax
  018b5:    	rol    rdi,0x3d
  018b9:    	movq   xmm13,rdi
  018be:    	jmp    0x18d6
  018c3:    	call   0xfffd95bc
  018c8:    	test   rax,rax
  018cb:    	je     0x2fe4f
  018d1:    	movq   xmm13,xmm0
  018d6: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  018dd: 00 	test   rdi,0x1
  018e4:    	jne    0x2fec8
  018ea: 00 	test   rdi,0x2
  018f1:    	je     0x192e
  018f7:    	xorps  xmm14,xmm14
  018fb: 00 	movabs rax,0x8000000000000002
  01905:    	cmp    rdi,rax
  01908:    	je     0x1941
  0190e:    	mov    rax,rdi
  01911:    	sar    rax,0x3f
  01915:    	add    rax,0x2
  01919:    	and    rdi,0xfffffffffffffffc
  0191d:    	or     rdi,rax
  01920:    	rol    rdi,0x3d
  01924:    	movq   xmm14,rdi
  01929:    	jmp    0x1941
  0192e:    	call   0xfffd95bc
  01933:    	test   rax,rax
  01936:    	je     0x2fec8
  0193c:    	movq   xmm14,xmm0
  01941:    	addsd  xmm13,xmm14
:00119 _ = %14.call x=(%15; 1)              [Vec]
  01946:    	movq   xmm0,xmm13
  0194b:    	call   0xfffd96e0
  01950: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01957: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0195e: 00 	test   rdi,0x7
  01965:    	jne    0x2ff41
  0196b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0196f:    	jne    0x2ff41
  01975: 26 	cmp    DWORD PTR [rip+0xfffffffffffdacd1],0x26        # 0xfffdc64d
  0197c:    	jne    0x2ff41
  01982:    	mov    esi,DWORD PTR [rip+0xadc]        # 0x2464
  01988:    	cmp    esi,0xffffffff
  0198b:    	je     0x2ffba
  01991:    	cmp    WORD PTR [rdi+0x2],0x3
  01996:    	jne    0x19b6
  0199c:    	cmp    esi,0x6
  0199f:    	jge    0x19b6
  019a5: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  019ac:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  019b1:    	jmp    0x1a8c
  019b6:    	sub    rsp,0x70
  019ba:    	movq   QWORD PTR [rsp],xmm2
  019bf:    	movq   QWORD PTR [rsp+0x8],xmm3
  019c5:    	movq   QWORD PTR [rsp+0x10],xmm4
  019cb:    	movq   QWORD PTR [rsp+0x18],xmm5
  019d1:    	movq   QWORD PTR [rsp+0x20],xmm6
  019d7:    	movq   QWORD PTR [rsp+0x28],xmm7
  019dd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019e4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019eb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019f2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019f9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a00: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01a07: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01a0e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01a15: b5 	movabs rax,0x55b5b00a4170
  01a1f:    	call   rax
  01a21:    	movq   xmm2,QWORD PTR [rsp]
  01a26:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a2c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a32:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a38:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a3e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a44: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a4b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a52: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a59: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a60: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a67: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01a6e: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01a75:    	add    rsp,0x70
  01a79: b5 	movabs r13,0x55b5b07ea0f0
  01a83:    	test   rax,rax
  01a86:    	je     0xfffd9563
:00120 
:00122 %14 = dynvar(2, %2)
  01a8c:    	mov    rax,QWORD PTR [rbp-0x10]
  01a90:    	mov    rax,QWORD PTR [rax]
  01a93:    	mov    rax,QWORD PTR [rax-0x28]
  01a97: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01a9e:    	mov    rax,QWORD PTR [rbp-0x10]
  01aa2:    	mov    rax,QWORD PTR [rax]
  01aa5:    	mov    rax,QWORD PTR [rax-0x28]
  01aa9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [Vec]
  01ab0: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01ab7: 00 	test   rdi,0x7
  01abe:    	jne    0x3009d
  01ac4:    	cmp    DWORD PTR [rdi+0x4],0x28
  01ac8:    	jne    0x3009d
  01ace: 26 	cmp    DWORD PTR [rip+0xfffffffffffdab78],0x26        # 0xfffdc64d
  01ad5:    	jne    0x3009d
  01adb:    	mov    esi,DWORD PTR [rip+0x98b]        # 0x246c
  01ae1:    	cmp    esi,0xffffffff
  01ae4:    	je     0x30116
  01aea:    	cmp    WORD PTR [rdi+0x2],0x3
  01aef:    	jne    0x1b08
  01af5:    	cmp    esi,0x6
  01af8:    	jge    0x1b08
  01afe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b03:    	jmp    0x1ba8
  01b08:    	sub    rsp,0x60
  01b0c:    	movq   QWORD PTR [rsp],xmm2
  01b11:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b17:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b1d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b23:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b29:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b2f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b36: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b3d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b44: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b4b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b52: b5 	movabs rax,0x55b5b00a3ef0
  01b5c:    	call   rax
  01b5e:    	movq   xmm2,QWORD PTR [rsp]
  01b63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b75:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b7b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b81: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b88: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b8f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b96: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b9d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ba4:    	add    rsp,0x60
  01ba8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [Vec]
  01baf: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01bb6: 00 	test   rdi,0x7
  01bbd:    	jne    0x301d3
  01bc3:    	cmp    DWORD PTR [rdi+0x4],0x28
  01bc7:    	jne    0x301d3
  01bcd: 26 	cmp    DWORD PTR [rip+0xfffffffffffdaa79],0x26        # 0xfffdc64d
  01bd4:    	jne    0x301d3
  01bda:    	mov    esi,DWORD PTR [rip+0x894]        # 0x2474
  01be0:    	cmp    esi,0xffffffff
  01be3:    	je     0x3024c
  01be9:    	cmp    WORD PTR [rdi+0x2],0x3
  01bee:    	jne    0x1c07
  01bf4:    	cmp    esi,0x6
  01bf7:    	jge    0x1c07
  01bfd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01c02:    	jmp    0x1ca7
  01c07:    	sub    rsp,0x60
  01c0b:    	movq   QWORD PTR [rsp],xmm2
  01c10:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c16:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c1c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c22:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c28:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c2e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c35: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c3c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c43: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c4a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c51: b5 	movabs rax,0x55b5b00a3ef0
  01c5b:    	call   rax
  01c5d:    	movq   xmm2,QWORD PTR [rsp]
  01c62:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c68:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c6e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c74:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c7a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c80: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c87: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c8e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c95: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c9c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ca3:    	add    rsp,0x60
  01ca7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [Float][Float]
  01cae: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01cb5: 00 	test   rdi,0x1
  01cbc:    	jne    0x30309
  01cc2: 00 	test   rdi,0x2
  01cc9:    	je     0x1d06
  01ccf:    	xorps  xmm13,xmm13
  01cd3: 00 	movabs rax,0x8000000000000002
  01cdd:    	cmp    rdi,rax
  01ce0:    	je     0x1d19
  01ce6:    	mov    rax,rdi
  01ce9:    	sar    rax,0x3f
  01ced:    	add    rax,0x2
  01cf1:    	and    rdi,0xfffffffffffffffc
  01cf5:    	or     rdi,rax
  01cf8:    	rol    rdi,0x3d
  01cfc:    	movq   xmm13,rdi
  01d01:    	jmp    0x1d19
  01d06:    	call   0xfffd95bc
  01d0b:    	test   rax,rax
  01d0e:    	je     0x30309
  01d14:    	movq   xmm13,xmm0
  01d19: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01d20: 00 	test   rdi,0x1
  01d27:    	jne    0x30382
  01d2d: 00 	test   rdi,0x2
  01d34:    	je     0x1d71
  01d3a:    	xorps  xmm14,xmm14
  01d3e: 00 	movabs rax,0x8000000000000002
  01d48:    	cmp    rdi,rax
  01d4b:    	je     0x1d84
  01d51:    	mov    rax,rdi
  01d54:    	sar    rax,0x3f
  01d58:    	add    rax,0x2
  01d5c:    	and    rdi,0xfffffffffffffffc
  01d60:    	or     rdi,rax
  01d63:    	rol    rdi,0x3d
  01d67:    	movq   xmm14,rdi
  01d6c:    	jmp    0x1d84
  01d71:    	call   0xfffd95bc
  01d76:    	test   rax,rax
  01d79:    	je     0x30382
  01d7f:    	movq   xmm14,xmm0
  01d84:    	addsd  xmm13,xmm14
:00131 _ = %14.call y=(%15; 1)              [Vec]
  01d89:    	movq   xmm0,xmm13
  01d8e:    	call   0xfffd96e0
  01d93: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01d9a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01da1: 00 	test   rdi,0x7
  01da8:    	jne    0x303fb
  01dae:    	cmp    DWORD PTR [rdi+0x4],0x28
  01db2:    	jne    0x303fb
  01db8: 26 	cmp    DWORD PTR [rip+0xfffffffffffda88e],0x26        # 0xfffdc64d
  01dbf:    	jne    0x303fb
  01dc5:    	mov    esi,DWORD PTR [rip+0x6b1]        # 0x247c
  01dcb:    	cmp    esi,0xffffffff
  01dce:    	je     0x30474
  01dd4:    	cmp    WORD PTR [rdi+0x2],0x3
  01dd9:    	jne    0x1df9
  01ddf:    	cmp    esi,0x6
  01de2:    	jge    0x1df9
  01de8: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01def:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01df4:    	jmp    0x1ecf
  01df9:    	sub    rsp,0x70
  01dfd:    	movq   QWORD PTR [rsp],xmm2
  01e02:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e08:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e0e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e14:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e1a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e20: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e27: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e2e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e35: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e3c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e43: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01e4a: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01e51: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01e58: b5 	movabs rax,0x55b5b00a4170
  01e62:    	call   rax
  01e64:    	movq   xmm2,QWORD PTR [rsp]
  01e69:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e6f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e75:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e7b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e81:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e87: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e8e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e95: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e9c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ea3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01eaa: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01eb1: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01eb8:    	add    rsp,0x70
  01ebc: b5 	movabs r13,0x55b5b07ea1b0
  01ec6:    	test   rax,rax
  01ec9:    	je     0xfffd9563
:00132 
:00134 %14 = dynvar(2, %2)
  01ecf:    	mov    rax,QWORD PTR [rbp-0x10]
  01ed3:    	mov    rax,QWORD PTR [rax]
  01ed6:    	mov    rax,QWORD PTR [rax-0x28]
  01eda: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  01ee1:    	mov    rax,QWORD PTR [rbp-0x10]
  01ee5:    	mov    rax,QWORD PTR [rax]
  01ee8:    	mov    rax,QWORD PTR [rax-0x28]
  01eec: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [Vec]
  01ef3: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01efa: 00 	test   rdi,0x7
  01f01:    	jne    0x30557
  01f07:    	cmp    DWORD PTR [rdi+0x4],0x28
  01f0b:    	jne    0x30557
  01f11: 26 	cmp    DWORD PTR [rip+0xfffffffffffda735],0x26        # 0xfffdc64d
  01f18:    	jne    0x30557
  01f1e:    	mov    esi,DWORD PTR [rip+0x560]        # 0x2484
  01f24:    	cmp    esi,0xffffffff
  01f27:    	je     0x305d0
  01f2d:    	cmp    WORD PTR [rdi+0x2],0x3
  01f32:    	jne    0x1f4b
  01f38:    	cmp    esi,0x6
  01f3b:    	jge    0x1f4b
  01f41:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f46:    	jmp    0x1feb
  01f4b:    	sub    rsp,0x60
  01f4f:    	movq   QWORD PTR [rsp],xmm2
  01f54:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f5a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f60:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f66:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f6c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f72: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f79: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f80: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f87: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f8e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f95: b5 	movabs rax,0x55b5b00a3ef0
  01f9f:    	call   rax
  01fa1:    	movq   xmm2,QWORD PTR [rsp]
  01fa6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fb2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fb8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fbe:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fc4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01fcb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01fd2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fd9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fe0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01fe7:    	add    rsp,0x60
  01feb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [Vec]
  01ff2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ff9: 00 	test   rdi,0x7
  02000:    	jne    0x3068d
  02006:    	cmp    DWORD PTR [rdi+0x4],0x28
  0200a:    	jne    0x3068d
  02010: 26 	cmp    DWORD PTR [rip+0xfffffffffffda636],0x26        # 0xfffdc64d
  02017:    	jne    0x3068d
  0201d:    	mov    esi,DWORD PTR [rip+0x469]        # 0x248c
  02023:    	cmp    esi,0xffffffff
  02026:    	je     0x30706
  0202c:    	cmp    WORD PTR [rdi+0x2],0x3
  02031:    	jne    0x204a
  02037:    	cmp    esi,0x6
  0203a:    	jge    0x204a
  02040:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02045:    	jmp    0x20ea
  0204a:    	sub    rsp,0x60
  0204e:    	movq   QWORD PTR [rsp],xmm2
  02053:    	movq   QWORD PTR [rsp+0x8],xmm3
  02059:    	movq   QWORD PTR [rsp+0x10],xmm4
  0205f:    	movq   QWORD PTR [rsp+0x18],xmm5
  02065:    	movq   QWORD PTR [rsp+0x20],xmm6
  0206b:    	movq   QWORD PTR [rsp+0x28],xmm7
  02071: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02078: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0207f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02086: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0208d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02094: b5 	movabs rax,0x55b5b00a3ef0
  0209e:    	call   rax
  020a0:    	movq   xmm2,QWORD PTR [rsp]
  020a5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020ab:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020b1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020b7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020bd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020c3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  020ca: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  020d1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020d8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020df: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020e6:    	add    rsp,0x60
  020ea: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [Float][Float]
  020f1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  020f8: 00 	test   rdi,0x1
  020ff:    	jne    0x307c3
  02105: 00 	test   rdi,0x2
  0210c:    	je     0x2149
  02112:    	xorps  xmm13,xmm13
  02116: 00 	movabs rax,0x8000000000000002
  02120:    	cmp    rdi,rax
  02123:    	je     0x215c
  02129:    	mov    rax,rdi
  0212c:    	sar    rax,0x3f
  02130:    	add    rax,0x2
  02134:    	and    rdi,0xfffffffffffffffc
  02138:    	or     rdi,rax
  0213b:    	rol    rdi,0x3d
  0213f:    	movq   xmm13,rdi
  02144:    	jmp    0x215c
  02149:    	call   0xfffd95bc
  0214e:    	test   rax,rax
  02151:    	je     0x307c3
  02157:    	movq   xmm13,xmm0
  0215c: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02163: 00 	test   rdi,0x1
  0216a:    	jne    0x3083c
  02170: 00 	test   rdi,0x2
  02177:    	je     0x21b4
  0217d:    	xorps  xmm14,xmm14
  02181: 00 	movabs rax,0x8000000000000002
  0218b:    	cmp    rdi,rax
  0218e:    	je     0x21c7
  02194:    	mov    rax,rdi
  02197:    	sar    rax,0x3f
  0219b:    	add    rax,0x2
  0219f:    	and    rdi,0xfffffffffffffffc
  021a3:    	or     rdi,rax
  021a6:    	rol    rdi,0x3d
  021aa:    	movq   xmm14,rdi
  021af:    	jmp    0x21c7
  021b4:    	call   0xfffd95bc
  021b9:    	test   rax,rax
  021bc:    	je     0x3083c
  021c2:    	movq   xmm14,xmm0
  021c7:    	addsd  xmm13,xmm14
:00143 _ = %14.call z=(%15; 1)              [Vec]
  021cc:    	movq   xmm0,xmm13
  021d1:    	call   0xfffd96e0
  021d6: ff 	mov    QWORD PTR [rbp-0xa0],rax
  021dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  021e4: 00 	test   rdi,0x7
  021eb:    	jne    0x308b5
  021f1:    	cmp    DWORD PTR [rdi+0x4],0x28
  021f5:    	jne    0x308b5
  021fb: 26 	cmp    DWORD PTR [rip+0xfffffffffffda44b],0x26        # 0xfffdc64d
  02202:    	jne    0x308b5
  02208:    	mov    esi,DWORD PTR [rip+0x286]        # 0x2494
  0220e:    	cmp    esi,0xffffffff
  02211:    	je     0x3092e
  02217:    	cmp    WORD PTR [rdi+0x2],0x3
  0221c:    	jne    0x223c
  02222:    	cmp    esi,0x6
  02225:    	jge    0x223c
  0222b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02232:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  02237:    	jmp    0x2312
  0223c:    	sub    rsp,0x70
  02240:    	movq   QWORD PTR [rsp],xmm2
  02245:    	movq   QWORD PTR [rsp+0x8],xmm3
  0224b:    	movq   QWORD PTR [rsp+0x10],xmm4
  02251:    	movq   QWORD PTR [rsp+0x18],xmm5
  02257:    	movq   QWORD PTR [rsp+0x20],xmm6
  0225d:    	movq   QWORD PTR [rsp+0x28],xmm7
  02263: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0226a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02271: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02278: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0227f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02286: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  0228d: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  02294: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0229b: b5 	movabs rax,0x55b5b00a4170
  022a5:    	call   rax
  022a7:    	movq   xmm2,QWORD PTR [rsp]
  022ac:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022b2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022b8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022be:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022c4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022ca: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022d1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022d8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022df: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022e6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022ed: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  022f4: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  022fb:    	add    rsp,0x70
  022ff: b5 	movabs r13,0x55b5b07ea270
  02309:    	test   rax,rax
  0230c:    	je     0xfffd9563
:00144 
:00146 %14 = %15
:00147 ret %14
  02312:    	movq   xmm0,xmm13
  02317:    	call   0xfffd96e0
  0231c: ff 	mov    QWORD PTR [rbp-0x98],rax
  02323: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0232a:    	leave  
  0232b:    	ret    
:00148 %14 = nil
  0232c: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  02337: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0233e:    	leave  
  0233f:    	ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x55b5b07be970
<== finished compile. elapsed:177.3µs
offset:Pos(167784) code: 6506 bytes  data: 270 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	je     0x4d
  00017:    	jl     0x22
  0001d:    	jmp    0x2e579
  00022:    	jmp    0x2e579
  00027:    	mov    eax,0x2
  0002c:    	sub    eax,edx
  0002e:    	test   rax,rax
  00031:    	je     0x4d
  00037:    	lea    rdi,[rbp-0x40]
  0003b: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00043:    	sub    rax,0x1
  00047:    	jne    0x3b
  0004d: 00 	mov    rax,0x4
  00054:    	mov    QWORD PTR [rbp-0x40],rax
  00058:    	mov    QWORD PTR [rbp-0x48],rax
  0005c:    	mov    QWORD PTR [rbp-0x50],rax
  00060:    	mov    QWORD PTR [rbp-0x58],rax
  00064:    	mov    QWORD PTR [rbp-0x60],rax
  00068:    	mov    QWORD PTR [rbp-0x68],rax
  0006c:    	mov    QWORD PTR [rbp-0x70],rax
  00070:    	mov    QWORD PTR [rbp-0x78],rax
  00074:    	mov    QWORD PTR [rbp-0x80],rax
  00078: ff 	mov    QWORD PTR [rbp-0x88],rax
  0007f: ff 	mov    QWORD PTR [rbp-0x90],rax
  00086: ff 	mov    QWORD PTR [rbp-0x98],rax
  0008d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00094:    	mov    rdi,QWORD PTR [rbp-0x28]
  00098: 00 	test   rdi,0x7
  0009f:    	jne    0x2e588
  000a5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  000a9:    	jne    0x2e588
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  000af:    	mov    rdi,QWORD PTR [rbp-0x30]
  000b3: 00 	test   rdi,0x7
  000ba:    	jne    0x2e597
  000c0:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000c4:    	jne    0x2e597
  000ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffda0e4],0x26        # 0xfffda1b5
  000d1:    	jne    0x2e597
  000d7:    	mov    esi,DWORD PTR [rip+0x1891]        # 0x196e
  000dd:    	cmp    esi,0xffffffff
  000e0:    	je     0x2e5a6
  000e6:    	cmp    WORD PTR [rdi+0x2],0x3
  000eb:    	jne    0x104
  000f1:    	cmp    esi,0x6
  000f4:    	jge    0x104
  000fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000ff:    	jmp    0x110
  00104: b5 	movabs rax,0x55b5b00a3ef0
  0010e:    	call   rax
  00110:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  00114:    	mov    rdi,QWORD PTR [rbp-0x28]
  00118:    	mov    rax,QWORD PTR [rdi+0x10]
  0011c:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00120:    	mov    rdi,QWORD PTR [rbp-0x70]
  00124: 00 	test   rdi,0x7
  0012b:    	jne    0x2e5cf
  00131:    	cmp    DWORD PTR [rdi+0x4],0x28
  00135:    	jne    0x2e5cf
  0013b: 26 	cmp    DWORD PTR [rip+0xfffffffffffda073],0x26        # 0xfffda1b5
  00142:    	jne    0x2e5cf
  00148: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00151:    	mov    QWORD PTR [rsp-0x38],rcx
  00156:    	mov    rax,QWORD PTR [rbx]
  00159:    	lea    rsi,[rsp-0x18]
  0015e:    	mov    QWORD PTR [rsi],rax
  00161:    	mov    QWORD PTR [rbx],rsi
  00164:    	mov    rax,QWORD PTR [rbp-0x70]
  00168:    	mov    QWORD PTR [rsp-0x38],rax
  0016d: 00 	mov    rdi,0x1
  00174:    	lea    r8,[rsp-0x40]
  00179:    	mov    rax,QWORD PTR [rbp-0x78]
  0017d:    	mov    QWORD PTR [r8],rax
  00180:    	sub    r8,0x8
  00184: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0018d: 08 	movabs rax,0x800000040
  00197:    	mov    QWORD PTR [rsp-0x28],rax
  0019c: b5 	movabs r13,0x55b5b08082c0
  001a6:    	call   0xfffdae94
  001ab:    	lea    rdi,[rbp-0x8]
  001af:    	mov    QWORD PTR [rbx],rdi
  001b2: b5 	movabs r13,0x55b5b07be9e0
  001bc:    	test   rax,rax
  001bf:    	je     0xfffd70cb
  001c5:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001c9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001cd: 00 	test   rdi,0x7
  001d4:    	jne    0x2e5de
  001da:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001de:    	jne    0x2e5de
  001e4: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9fca],0x26        # 0xfffda1b5
  001eb:    	jne    0x2e5de
  001f1:    	mov    esi,DWORD PTR [rip+0x177f]        # 0x1976
  001f7:    	cmp    esi,0xffffffff
  001fa:    	je     0x2e5ed
  00200:    	cmp    WORD PTR [rdi+0x2],0x3
  00205:    	jne    0x21e
  0020b:    	cmp    esi,0x6
  0020e:    	jge    0x21e
  00214:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00219:    	jmp    0x22a
  0021e: b5 	movabs rax,0x55b5b00a3ef0
  00228:    	call   rax
  0022a:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0022e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00232: 00 	test   rdi,0x7
  00239:    	jne    0x2e616
  0023f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00243:    	jne    0x2e616
  00249: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9f65],0x26        # 0xfffda1b5
  00250:    	jne    0x2e616
  00256: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0025f:    	mov    QWORD PTR [rsp-0x38],rcx
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rsi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rsi],rax
  0026f:    	mov    QWORD PTR [rbx],rsi
  00272:    	mov    rax,QWORD PTR [rbp-0x40]
  00276:    	mov    QWORD PTR [rsp-0x38],rax
  0027b: 00 	mov    rdi,0x1
  00282:    	lea    r8,[rsp-0x40]
  00287:    	mov    rax,QWORD PTR [rbp-0x70]
  0028b:    	mov    QWORD PTR [r8],rax
  0028e:    	sub    r8,0x8
  00292: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0029b: 05 	movabs rax,0x500000042
  002a5:    	mov    QWORD PTR [rsp-0x28],rax
  002aa: b5 	movabs r13,0x55b5b07ddec0
  002b4:    	call   0xfffdaf26
  002b9:    	lea    rdi,[rbp-0x8]
  002bd:    	mov    QWORD PTR [rbx],rdi
  002c0: b5 	movabs r13,0x55b5b07bea40
  002ca:    	test   rax,rax
  002cd:    	je     0xfffd70cb
  002d3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002d7:    	mov    rax,QWORD PTR [rbp-0x40]
  002db:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002df:    	mov    rdi,QWORD PTR [rbp-0x40]
  002e3: 00 	test   rdi,0x7
  002ea:    	jne    0x2e625
  002f0:    	cmp    DWORD PTR [rdi+0x4],0x28
  002f4:    	jne    0x2e625
  002fa: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9eb4],0x26        # 0xfffda1b5
  00301:    	jne    0x2e625
  00307: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00310:    	mov    QWORD PTR [rsp-0x38],rcx
  00315:    	mov    rax,QWORD PTR [rbx]
  00318:    	lea    rsi,[rsp-0x18]
  0031d:    	mov    QWORD PTR [rsi],rax
  00320:    	mov    QWORD PTR [rbx],rsi
  00323:    	mov    rax,QWORD PTR [rbp-0x40]
  00327:    	mov    QWORD PTR [rsp-0x38],rax
  0032c: 00 	mov    rdi,0x1
  00333:    	lea    r8,[rsp-0x40]
  00338:    	mov    rax,QWORD PTR [rbp-0x78]
  0033c:    	mov    QWORD PTR [r8],rax
  0033f:    	sub    r8,0x8
  00343: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0034c: 05 	movabs rax,0x500000042
  00356:    	mov    QWORD PTR [rsp-0x28],rax
  0035b: b5 	movabs r13,0x55b5b07ddec0
  00365:    	call   0xfffdaf26
  0036a:    	lea    rdi,[rbp-0x8]
  0036e:    	mov    QWORD PTR [rbx],rdi
  00371: b5 	movabs r13,0x55b5b07bea80
  0037b:    	test   rax,rax
  0037e:    	je     0xfffd70cb
  00384:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00388:    	mov    rdi,QWORD PTR [rbp-0x28]
  0038c:    	mov    rax,QWORD PTR [rdi+0x18]
  00390:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00394:    	mov    rdi,QWORD PTR [rbp-0x28]
  00398:    	mov    rax,QWORD PTR [rdi+0x18]
  0039c:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  003a0:    	mov    rdi,QWORD PTR [rbp-0x78]
  003a4: 00 	test   rdi,0x1
  003ab:    	jne    0x2e634
  003b1: 00 	test   rdi,0x2
  003b8:    	je     0x3f4
  003be:    	xorps  xmm2,xmm2
  003c1: 00 	movabs rax,0x8000000000000002
  003cb:    	cmp    rdi,rax
  003ce:    	je     0x406
  003d4:    	mov    rax,rdi
  003d7:    	sar    rax,0x3f
  003db:    	add    rax,0x2
  003df:    	and    rdi,0xfffffffffffffffc
  003e3:    	or     rdi,rax
  003e6:    	rol    rdi,0x3d
  003ea:    	movq   xmm2,rdi
  003ef:    	jmp    0x406
  003f4:    	call   0xfffd7124
  003f9:    	test   rax,rax
  003fc:    	je     0x2e634
  00402:    	movq   xmm2,xmm0
  00406:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040a: 00 	test   rdi,0x1
  00411:    	jne    0x2e643
  00417: 00 	test   rdi,0x2
  0041e:    	je     0x45a
  00424:    	xorps  xmm3,xmm3
  00427: 00 	movabs rax,0x8000000000000002
  00431:    	cmp    rdi,rax
  00434:    	je     0x46c
  0043a:    	mov    rax,rdi
  0043d:    	sar    rax,0x3f
  00441:    	add    rax,0x2
  00445:    	and    rdi,0xfffffffffffffffc
  00449:    	or     rdi,rax
  0044c:    	rol    rdi,0x3d
  00450:    	movq   xmm3,rdi
  00455:    	jmp    0x46c
  0045a:    	call   0xfffd7124
  0045f:    	test   rax,rax
  00462:    	je     0x2e643
  00468:    	movq   xmm3,xmm0
  0046c:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00470:    	mov    rdi,QWORD PTR [rbp-0x70]
  00474: 00 	test   rdi,0x1
  0047b:    	jne    0x2e652
  00481: 00 	test   rdi,0x2
  00488:    	je     0x4c4
  0048e:    	xorps  xmm4,xmm4
  00491: 00 	movabs rax,0x8000000000000002
  0049b:    	cmp    rdi,rax
  0049e:    	je     0x4d6
  004a4:    	mov    rax,rdi
  004a7:    	sar    rax,0x3f
  004ab:    	add    rax,0x2
  004af:    	and    rdi,0xfffffffffffffffc
  004b3:    	or     rdi,rax
  004b6:    	rol    rdi,0x3d
  004ba:    	movq   xmm4,rdi
  004bf:    	jmp    0x4d6
  004c4:    	call   0xfffd7124
  004c9:    	test   rax,rax
  004cc:    	je     0x2e652
  004d2:    	movq   xmm4,xmm0
  004d6:    	movq   xmm5,xmm4
  004da:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004de:    	mov    rdi,QWORD PTR [rbp-0x48]
  004e2: 00 	test   rdi,0x1
  004e9:    	jne    0x2e66e
  004ef: 00 	test   rdi,0x2
  004f6:    	je     0x532
  004fc:    	xorps  xmm6,xmm6
  004ff: 00 	movabs rax,0x8000000000000002
  00509:    	cmp    rdi,rax
  0050c:    	je     0x544
  00512:    	mov    rax,rdi
  00515:    	sar    rax,0x3f
  00519:    	add    rax,0x2
  0051d:    	and    rdi,0xfffffffffffffffc
  00521:    	or     rdi,rax
  00524:    	rol    rdi,0x3d
  00528:    	movq   xmm6,rdi
  0052d:    	jmp    0x544
  00532:    	call   0xfffd7124
  00537:    	test   rax,rax
  0053a:    	je     0x2e66e
  00540:    	movq   xmm6,xmm0
  00544:    	movq   xmm4,xmm6
  00548:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0054c:    	movq   xmm7,xmm4
  00550:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00554: 00 	movq   xmm4,QWORD PTR [rip+0x142c]        # 0x1988
  0055c: 00 	movabs rax,0x8000000000000002
  00566:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0056a:    	ucomisd xmm7,xmm4
  0056e:    	jbe    0x2f7f4
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00574:    	movq   xmm4,xmm6
  00578: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1419]        # 0x1998
:00029 %11 = const[Math]                    [Math]
  0057f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd9c42]        # 0xfffda1c8
  00586: 00 	cmp    rax,QWORD PTR [rip+0x142b]        # 0x19b8
  0058d:    	jne    0x2e697
  00593: 00 	mov    rax,QWORD PTR [rip+0x140e]        # 0x19a8
  0059a:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  0059e:    	mov    rdi,QWORD PTR [rbp-0x80]
  005a2: 00 	test   rdi,0x7
  005a9:    	jne    0x2e71f
  005af:    	cmp    DWORD PTR [rdi+0x4],0x21
  005b3:    	jne    0x2e71f
  005b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9bf5],0x26        # 0xfffda1b5
  005c0:    	jne    0x2e71f
  005c6:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005ca:    	movq   xmm3,xmm4
  005ce:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005d2: 00 	movq   xmm4,QWORD PTR [rip+0x13ee]        # 0x19c8
  005da: 00 	movabs rax,0x8000000000000002
  005e4:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005e8:    	ucomisd xmm3,xmm4
  005ec:    	jbe    0x2f6e8
:00038 %9 = %2.call t()                     [Isect]
  005f2:    	mov    rdi,QWORD PTR [rbp-0x38]
  005f6: 00 	test   rdi,0x7
  005fd:    	jne    0x2e75c
  00603:    	cmp    DWORD PTR [rdi+0x4],0x30
  00607:    	jne    0x2e75c
  0060d: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9ba1],0x26        # 0xfffda1b5
  00614:    	jne    0x2e75c
  0061a:    	mov    esi,DWORD PTR [rip+0x13b4]        # 0x19d4
  00620:    	cmp    esi,0xffffffff
  00623:    	je     0x2e7a6
  00629:    	cmp    WORD PTR [rdi+0x2],0x3
  0062e:    	jne    0x647
  00634:    	cmp    esi,0x6
  00637:    	jge    0x647
  0063d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00642:    	jmp    0x695
  00647:    	sub    rsp,0x30
  0064b:    	movq   QWORD PTR [rsp],xmm2
  00650:    	movq   QWORD PTR [rsp+0x8],xmm3
  00656:    	movq   QWORD PTR [rsp+0x10],xmm5
  0065c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00662:    	movq   QWORD PTR [rsp+0x20],xmm7
  00668: b5 	movabs rax,0x55b5b00a3ef0
  00672:    	call   rax
  00674:    	movq   xmm2,QWORD PTR [rsp]
  00679:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00685:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0068b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00691:    	add    rsp,0x30
  00695:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [Float][Float]
:00042 condnotbr _%9 =>:00113
  00699:    	mov    rdi,QWORD PTR [rbp-0x70]
  0069d: 00 	test   rdi,0x1
  006a4:    	jne    0x2e811
  006aa: 00 	test   rdi,0x2
  006b1:    	je     0x6ed
  006b7:    	xorps  xmm4,xmm4
  006ba: 00 	movabs rax,0x8000000000000002
  006c4:    	cmp    rdi,rax
  006c7:    	je     0x6ff
  006cd:    	mov    rax,rdi
  006d0:    	sar    rax,0x3f
  006d4:    	add    rax,0x2
  006d8:    	and    rdi,0xfffffffffffffffc
  006dc:    	or     rdi,rax
  006df:    	rol    rdi,0x3d
  006e3:    	movq   xmm4,rdi
  006e8:    	jmp    0x6ff
  006ed:    	call   0xfffd7124
  006f2:    	test   rax,rax
  006f5:    	je     0x2e811
  006fb:    	movq   xmm4,xmm0
  006ff:    	ucomisd xmm3,xmm4
  00703:    	jae    0x2f745
:00043 _ = %2.call t=(%7; 1)                [Isect]
  00709:    	movq   xmm0,xmm3
  0070d:    	call   0xfffd7248
  00712:    	mov    QWORD PTR [rbp-0x60],rax
  00716:    	mov    rdi,QWORD PTR [rbp-0x38]
  0071a: 00 	test   rdi,0x7
  00721:    	jne    0x2e85b
  00727:    	cmp    DWORD PTR [rdi+0x4],0x30
  0072b:    	jne    0x2e85b
  00731: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9a7d],0x26        # 0xfffda1b5
  00738:    	jne    0x2e85b
  0073e:    	mov    esi,DWORD PTR [rip+0x1298]        # 0x19dc
  00744:    	cmp    esi,0xffffffff
  00747:    	je     0x2e898
  0074d:    	cmp    WORD PTR [rdi+0x2],0x3
  00752:    	jne    0x76f
  00758:    	cmp    esi,0x6
  0075b:    	jge    0x76f
  00761:    	mov    rax,QWORD PTR [rbp-0x60]
  00765:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0076a:    	jmp    0x7e0
  0076f:    	sub    rsp,0x30
  00773:    	movq   QWORD PTR [rsp],xmm2
  00778:    	movq   QWORD PTR [rsp+0x8],xmm3
  0077e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00784:    	movq   QWORD PTR [rsp+0x18],xmm5
  0078a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00790:    	movq   QWORD PTR [rsp+0x28],xmm7
  00796:    	mov    rdx,QWORD PTR [rbp-0x60]
  0079a: b5 	movabs rax,0x55b5b00a4170
  007a4:    	call   rax
  007a6:    	movq   xmm2,QWORD PTR [rsp]
  007ab:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007b1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007b7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007bd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  007c3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  007c9:    	add    rsp,0x30
  007cd: b5 	movabs r13,0x55b5b07bec40
  007d7:    	test   rax,rax
  007da:    	je     0xfffd70cb
:00044 
:00046 %9 = literal[true]
  007e0: 00 	mov    rax,0x1c
  007e7:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  007eb:    	mov    rdi,QWORD PTR [rbp-0x38]
  007ef: 00 	test   rdi,0x7
  007f6:    	jne    0x2e916
  007fc:    	cmp    DWORD PTR [rdi+0x4],0x30
  00800:    	jne    0x2e916
  00806: 26 	cmp    DWORD PTR [rip+0xfffffffffffd99a8],0x26        # 0xfffda1b5
  0080d:    	jne    0x2e916
  00813:    	mov    esi,DWORD PTR [rip+0x11cb]        # 0x19e4
  00819:    	cmp    esi,0xffffffff
  0081c:    	je     0x2e953
  00822:    	cmp    WORD PTR [rdi+0x2],0x3
  00827:    	jne    0x844
  0082d:    	cmp    esi,0x6
  00830:    	jge    0x844
  00836:    	mov    rax,QWORD PTR [rbp-0x70]
  0083a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0083f:    	jmp    0x8a9
  00844:    	sub    rsp,0x30
  00848:    	movq   QWORD PTR [rsp],xmm2
  0084d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00853:    	movq   QWORD PTR [rsp+0x10],xmm5
  00859:    	movq   QWORD PTR [rsp+0x18],xmm6
  0085f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00865:    	mov    rdx,QWORD PTR [rbp-0x70]
  00869: b5 	movabs rax,0x55b5b00a4170
  00873:    	call   rax
  00875:    	movq   xmm2,QWORD PTR [rsp]
  0087a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00880:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00886:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0088c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00892:    	add    rsp,0x30
  00896: b5 	movabs r13,0x55b5b07bec80
  008a0:    	test   rax,rax
  008a3:    	je     0xfffd70cb
:00048 
:00050 %10 = const[Vec]                     [Vec]
  008a9: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd9918]        # 0xfffda1c8
  008b0: 00 	cmp    rax,QWORD PTR [rip+0x1141]        # 0x19f8
  008b7:    	jne    0x2e9c5
  008bd: 00 	mov    rax,QWORD PTR [rip+0x1124]        # 0x19e8
  008c4:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [Ray]
  008c8:    	mov    rdi,QWORD PTR [rbp-0x30]
  008cc: 00 	test   rdi,0x7
  008d3:    	jne    0x2ea41
  008d9:    	cmp    DWORD PTR [rdi+0x4],0x2e
  008dd:    	jne    0x2ea41
  008e3: 26 	cmp    DWORD PTR [rip+0xfffffffffffd98cb],0x26        # 0xfffda1b5
  008ea:    	jne    0x2ea41
  008f0:    	mov    esi,DWORD PTR [rip+0x110e]        # 0x1a04
  008f6:    	cmp    esi,0xffffffff
  008f9:    	je     0x2ea6a
  008ff:    	cmp    WORD PTR [rdi+0x2],0x3
  00904:    	jne    0x91d
  0090a:    	cmp    esi,0x6
  0090d:    	jge    0x91d
  00913:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00918:    	jmp    0x95f
  0091d:    	sub    rsp,0x20
  00921:    	movq   QWORD PTR [rsp],xmm3
  00926:    	movq   QWORD PTR [rsp+0x8],xmm5
  0092c:    	movq   QWORD PTR [rsp+0x10],xmm6
  00932:    	movq   QWORD PTR [rsp+0x18],xmm7
  00938: b5 	movabs rax,0x55b5b00a3ef0
  00942:    	call   rax
  00944:    	movq   xmm3,QWORD PTR [rsp]
  00949:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0094f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00955:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0095b:    	add    rsp,0x20
  0095f: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  00966: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0096d: 00 	test   rdi,0x7
  00974:    	jne    0x2eac9
  0097a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0097e:    	jne    0x2eac9
  00984: 26 	cmp    DWORD PTR [rip+0xfffffffffffd982a],0x26        # 0xfffda1b5
  0098b:    	jne    0x2eac9
  00991:    	mov    esi,DWORD PTR [rip+0x1075]        # 0x1a0c
  00997:    	cmp    esi,0xffffffff
  0099a:    	je     0x2eaf2
  009a0:    	cmp    WORD PTR [rdi+0x2],0x3
  009a5:    	jne    0x9be
  009ab:    	cmp    esi,0x6
  009ae:    	jge    0x9be
  009b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009b9:    	jmp    0xa00
  009be:    	sub    rsp,0x20
  009c2:    	movq   QWORD PTR [rsp],xmm3
  009c7:    	movq   QWORD PTR [rsp+0x8],xmm5
  009cd:    	movq   QWORD PTR [rsp+0x10],xmm6
  009d3:    	movq   QWORD PTR [rsp+0x18],xmm7
  009d9: b5 	movabs rax,0x55b5b00a3ef0
  009e3:    	call   rax
  009e5:    	movq   xmm3,QWORD PTR [rsp]
  009ea:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009f0:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009f6:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009fc:    	add    rsp,0x20
  00a00:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  00a04:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a08: 00 	test   rdi,0x7
  00a0f:    	jne    0x2eb51
  00a15:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a19:    	jne    0x2eb51
  00a1f: 26 	cmp    DWORD PTR [rip+0xfffffffffffd978f],0x26        # 0xfffda1b5
  00a26:    	jne    0x2eb51
  00a2c:    	mov    esi,DWORD PTR [rip+0xfe2]        # 0x1a14
  00a32:    	cmp    esi,0xffffffff
  00a35:    	je     0x2eb7a
  00a3b:    	cmp    WORD PTR [rdi+0x2],0x3
  00a40:    	jne    0xa59
  00a46:    	cmp    esi,0x6
  00a49:    	jge    0xa59
  00a4f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a54:    	jmp    0xa9b
  00a59:    	sub    rsp,0x20
  00a5d:    	movq   QWORD PTR [rsp],xmm3
  00a62:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a68:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a6e:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a74: b5 	movabs rax,0x55b5b00a3ef0
  00a7e:    	call   rax
  00a80:    	movq   xmm3,QWORD PTR [rsp]
  00a85:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a8b:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a91:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a97:    	add    rsp,0x20
  00a9b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00aa2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00aa9: 00 	test   rdi,0x7
  00ab0:    	jne    0x2ebd9
  00ab6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00aba:    	jne    0x2ebd9
  00ac0: 26 	cmp    DWORD PTR [rip+0xfffffffffffd96ee],0x26        # 0xfffda1b5
  00ac7:    	jne    0x2ebd9
  00acd:    	mov    esi,DWORD PTR [rip+0xf49]        # 0x1a1c
  00ad3:    	cmp    esi,0xffffffff
  00ad6:    	je     0x2ec02
  00adc:    	cmp    WORD PTR [rdi+0x2],0x3
  00ae1:    	jne    0xafa
  00ae7:    	cmp    esi,0x6
  00aea:    	jge    0xafa
  00af0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00af5:    	jmp    0xb3c
  00afa:    	sub    rsp,0x20
  00afe:    	movq   QWORD PTR [rsp],xmm3
  00b03:    	movq   QWORD PTR [rsp+0x8],xmm5
  00b09:    	movq   QWORD PTR [rsp+0x10],xmm6
  00b0f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b15: b5 	movabs rax,0x55b5b00a3ef0
  00b1f:    	call   rax
  00b21:    	movq   xmm3,QWORD PTR [rsp]
  00b26:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b2c:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b32:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b38:    	add    rsp,0x20
  00b3c: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [Float][Float]
  00b43: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b4a: 00 	test   rdi,0x1
  00b51:    	jne    0x2ec61
  00b57: 00 	test   rdi,0x2
  00b5e:    	je     0xb9a
  00b64:    	xorps  xmm2,xmm2
  00b67: 00 	movabs rax,0x8000000000000002
  00b71:    	cmp    rdi,rax
  00b74:    	je     0xbac
  00b7a:    	mov    rax,rdi
  00b7d:    	sar    rax,0x3f
  00b81:    	add    rax,0x2
  00b85:    	and    rdi,0xfffffffffffffffc
  00b89:    	or     rdi,rax
  00b8c:    	rol    rdi,0x3d
  00b90:    	movq   xmm2,rdi
  00b95:    	jmp    0xbac
  00b9a:    	call   0xfffd7124
  00b9f:    	test   rax,rax
  00ba2:    	je     0x2ec61
  00ba8:    	movq   xmm2,xmm0
  00bac:    	mulsd  xmm2,xmm3
:00064 %11 = %11 + %12                      [Float][Float]
  00bb0:    	mov    rdi,QWORD PTR [rbp-0x80]
  00bb4: 00 	test   rdi,0x1
  00bbb:    	jne    0x2ec8a
  00bc1: 00 	test   rdi,0x2
  00bc8:    	je     0xc04
  00bce:    	xorps  xmm4,xmm4
  00bd1: 00 	movabs rax,0x8000000000000002
  00bdb:    	cmp    rdi,rax
  00bde:    	je     0xc16
  00be4:    	mov    rax,rdi
  00be7:    	sar    rax,0x3f
  00beb:    	add    rax,0x2
  00bef:    	and    rdi,0xfffffffffffffffc
  00bf3:    	or     rdi,rax
  00bf6:    	rol    rdi,0x3d
  00bfa:    	movq   xmm4,rdi
  00bff:    	jmp    0xc16
  00c04:    	call   0xfffd7124
  00c09:    	test   rax,rax
  00c0c:    	je     0x2ec8a
  00c12:    	movq   xmm4,xmm0
  00c16:    	addsd  xmm4,xmm2
:00065 %13 = %1.call org()                  [Ray]
  00c1a:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c1e: 00 	test   rdi,0x7
  00c25:    	jne    0x2ecc3
  00c2b:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00c2f:    	jne    0x2ecc3
  00c35: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9579],0x26        # 0xfffda1b5
  00c3c:    	jne    0x2ecc3
  00c42:    	mov    esi,DWORD PTR [rip+0xddc]        # 0x1a24
  00c48:    	cmp    esi,0xffffffff
  00c4b:    	je     0x2ed09
  00c51:    	cmp    WORD PTR [rdi+0x2],0x3
  00c56:    	jne    0xc6f
  00c5c:    	cmp    esi,0x6
  00c5f:    	jge    0xc6f
  00c65:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c6a:    	jmp    0xcc9
  00c6f:    	sub    rsp,0x30
  00c73:    	movq   QWORD PTR [rsp],xmm2
  00c78:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c7e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c84:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c8a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c90:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c96: b5 	movabs rax,0x55b5b00a3ef0
  00ca0:    	call   rax
  00ca2:    	movq   xmm2,QWORD PTR [rsp]
  00ca7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cad:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cb3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cb9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00cbf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00cc5:    	add    rsp,0x30
  00cc9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00cd0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00cd7: 00 	test   rdi,0x7
  00cde:    	jne    0x2ed80
  00ce4:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ce8:    	jne    0x2ed80
  00cee: 26 	cmp    DWORD PTR [rip+0xfffffffffffd94c0],0x26        # 0xfffda1b5
  00cf5:    	jne    0x2ed80
  00cfb:    	mov    esi,DWORD PTR [rip+0xd2b]        # 0x1a2c
  00d01:    	cmp    esi,0xffffffff
  00d04:    	je     0x2edb6
  00d0a:    	cmp    WORD PTR [rdi+0x2],0x3
  00d0f:    	jne    0xd28
  00d15:    	cmp    esi,0x6
  00d18:    	jge    0xd28
  00d1e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d23:    	jmp    0xd76
  00d28:    	sub    rsp,0x30
  00d2c:    	movq   QWORD PTR [rsp],xmm3
  00d31:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d37:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d3d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d43:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d49: b5 	movabs rax,0x55b5b00a3ef0
  00d53:    	call   rax
  00d55:    	movq   xmm3,QWORD PTR [rsp]
  00d5a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d60:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d66:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d6c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d72:    	add    rsp,0x30
  00d76: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d7d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d81: 00 	test   rdi,0x7
  00d88:    	jne    0x2ee21
  00d8e:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d92:    	jne    0x2ee21
  00d98: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9416],0x26        # 0xfffda1b5
  00d9f:    	jne    0x2ee21
  00da5:    	mov    esi,DWORD PTR [rip+0xc89]        # 0x1a34
  00dab:    	cmp    esi,0xffffffff
  00dae:    	je     0x2ee57
  00db4:    	cmp    WORD PTR [rdi+0x2],0x3
  00db9:    	jne    0xdd2
  00dbf:    	cmp    esi,0x6
  00dc2:    	jge    0xdd2
  00dc8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dcd:    	jmp    0xe20
  00dd2:    	sub    rsp,0x30
  00dd6:    	movq   QWORD PTR [rsp],xmm3
  00ddb:    	movq   QWORD PTR [rsp+0x8],xmm4
  00de1:    	movq   QWORD PTR [rsp+0x10],xmm5
  00de7:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ded:    	movq   QWORD PTR [rsp+0x20],xmm7
  00df3: b5 	movabs rax,0x55b5b00a3ef0
  00dfd:    	call   rax
  00dff:    	movq   xmm3,QWORD PTR [rsp]
  00e04:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e0a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e10:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e16:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e1c:    	add    rsp,0x30
  00e20: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00e27: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e2e: 00 	test   rdi,0x7
  00e35:    	jne    0x2eec2
  00e3b:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e3f:    	jne    0x2eec2
  00e45: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9369],0x26        # 0xfffda1b5
  00e4c:    	jne    0x2eec2
  00e52:    	mov    esi,DWORD PTR [rip+0xbe4]        # 0x1a3c
  00e58:    	cmp    esi,0xffffffff
  00e5b:    	je     0x2eef8
  00e61:    	cmp    WORD PTR [rdi+0x2],0x3
  00e66:    	jne    0xe7f
  00e6c:    	cmp    esi,0x6
  00e6f:    	jge    0xe7f
  00e75:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e7a:    	jmp    0xecd
  00e7f:    	sub    rsp,0x30
  00e83:    	movq   QWORD PTR [rsp],xmm3
  00e88:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e8e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e94:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e9a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ea0: b5 	movabs rax,0x55b5b00a3ef0
  00eaa:    	call   rax
  00eac:    	movq   xmm3,QWORD PTR [rsp]
  00eb1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00eb7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ebd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ec3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ec9:    	add    rsp,0x30
  00ecd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [Float][Float]
  00ed4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00edb: 00 	test   rdi,0x1
  00ee2:    	jne    0x2ef63
  00ee8: 00 	test   rdi,0x2
  00eef:    	je     0xf2b
  00ef5:    	xorps  xmm2,xmm2
  00ef8: 00 	movabs rax,0x8000000000000002
  00f02:    	cmp    rdi,rax
  00f05:    	je     0xf3d
  00f0b:    	mov    rax,rdi
  00f0e:    	sar    rax,0x3f
  00f12:    	add    rax,0x2
  00f16:    	and    rdi,0xfffffffffffffffc
  00f1a:    	or     rdi,rax
  00f1d:    	rol    rdi,0x3d
  00f21:    	movq   xmm2,rdi
  00f26:    	jmp    0xf3d
  00f2b:    	call   0xfffd7124
  00f30:    	test   rax,rax
  00f33:    	je     0x2ef63
  00f39:    	movq   xmm2,xmm0
  00f3d:    	mulsd  xmm2,xmm3
:00078 %12 = %12 + %13                      [Float][Float]
  00f41: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00f48: 00 	test   rdi,0x1
  00f4f:    	jne    0x2ef99
  00f55: 00 	test   rdi,0x2
  00f5c:    	je     0xf99
  00f62:    	xorps  xmm8,xmm8
  00f66: 00 	movabs rax,0x8000000000000002
  00f70:    	cmp    rdi,rax
  00f73:    	je     0xfac
  00f79:    	mov    rax,rdi
  00f7c:    	sar    rax,0x3f
  00f80:    	add    rax,0x2
  00f84:    	and    rdi,0xfffffffffffffffc
  00f88:    	or     rdi,rax
  00f8b:    	rol    rdi,0x3d
  00f8f:    	movq   xmm8,rdi
  00f94:    	jmp    0xfac
  00f99:    	call   0xfffd7124
  00f9e:    	test   rax,rax
  00fa1:    	je     0x2ef99
  00fa7:    	movq   xmm8,xmm0
  00fac:    	addsd  xmm8,xmm2
:00079 %14 = %1.call org()                  [Ray]
  00fb1:    	mov    rdi,QWORD PTR [rbp-0x30]
  00fb5: 00 	test   rdi,0x7
  00fbc:    	jne    0x2efdf
  00fc2:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00fc6:    	jne    0x2efdf
  00fcc: 26 	cmp    DWORD PTR [rip+0xfffffffffffd91e2],0x26        # 0xfffda1b5
  00fd3:    	jne    0x2efdf
  00fd9:    	mov    esi,DWORD PTR [rip+0xa65]        # 0x1a44
  00fdf:    	cmp    esi,0xffffffff
  00fe2:    	je     0x2f036
  00fe8:    	cmp    WORD PTR [rdi+0x2],0x3
  00fed:    	jne    0x1006
  00ff3:    	cmp    esi,0x6
  00ff6:    	jge    0x1006
  00ffc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01001:    	jmp    0x106e
  01006:    	sub    rsp,0x40
  0100a:    	movq   QWORD PTR [rsp],xmm2
  0100f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01015:    	movq   QWORD PTR [rsp+0x10],xmm4
  0101b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01021:    	movq   QWORD PTR [rsp+0x20],xmm6
  01027:    	movq   QWORD PTR [rsp+0x28],xmm7
  0102d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01034: b5 	movabs rax,0x55b5b00a3ef0
  0103e:    	call   rax
  01040:    	movq   xmm2,QWORD PTR [rsp]
  01045:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0104b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01051:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01057:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0105d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01063: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0106a:    	add    rsp,0x40
  0106e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  01075: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0107c: 00 	test   rdi,0x7
  01083:    	jne    0x2f0bb
  01089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0108d:    	jne    0x2f0bb
  01093: 26 	cmp    DWORD PTR [rip+0xfffffffffffd911b],0x26        # 0xfffda1b5
  0109a:    	jne    0x2f0bb
  010a0:    	mov    esi,DWORD PTR [rip+0x9a6]        # 0x1a4c
  010a6:    	cmp    esi,0xffffffff
  010a9:    	je     0x2f102
  010af:    	cmp    WORD PTR [rdi+0x2],0x3
  010b4:    	jne    0x10cd
  010ba:    	cmp    esi,0x6
  010bd:    	jge    0x10cd
  010c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010c8:    	jmp    0x1129
  010cd:    	sub    rsp,0x30
  010d1:    	movq   QWORD PTR [rsp],xmm3
  010d6:    	movq   QWORD PTR [rsp+0x8],xmm4
  010dc:    	movq   QWORD PTR [rsp+0x10],xmm5
  010e2:    	movq   QWORD PTR [rsp+0x18],xmm6
  010e8:    	movq   QWORD PTR [rsp+0x20],xmm7
  010ee: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010f5: b5 	movabs rax,0x55b5b00a3ef0
  010ff:    	call   rax
  01101:    	movq   xmm3,QWORD PTR [rsp]
  01106:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0110c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01112:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01118:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0111e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01125:    	add    rsp,0x30
  01129: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  01130:    	mov    rdi,QWORD PTR [rbp-0x30]
  01134: 00 	test   rdi,0x7
  0113b:    	jne    0x2f17b
  01141:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01145:    	jne    0x2f17b
  0114b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9063],0x26        # 0xfffda1b5
  01152:    	jne    0x2f17b
  01158:    	mov    esi,DWORD PTR [rip+0x8f6]        # 0x1a54
  0115e:    	cmp    esi,0xffffffff
  01161:    	je     0x2f1c2
  01167:    	cmp    WORD PTR [rdi+0x2],0x3
  0116c:    	jne    0x1185
  01172:    	cmp    esi,0x6
  01175:    	jge    0x1185
  0117b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01180:    	jmp    0x11e1
  01185:    	sub    rsp,0x30
  01189:    	movq   QWORD PTR [rsp],xmm3
  0118e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01194:    	movq   QWORD PTR [rsp+0x10],xmm5
  0119a:    	movq   QWORD PTR [rsp+0x18],xmm6
  011a0:    	movq   QWORD PTR [rsp+0x20],xmm7
  011a6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011ad: b5 	movabs rax,0x55b5b00a3ef0
  011b7:    	call   rax
  011b9:    	movq   xmm3,QWORD PTR [rsp]
  011be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011ca:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011d0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011d6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011dd:    	add    rsp,0x30
  011e1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  011e8: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  011ef: 00 	test   rdi,0x7
  011f6:    	jne    0x2f23b
  011fc:    	cmp    DWORD PTR [rdi+0x4],0x28
  01200:    	jne    0x2f23b
  01206: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8fa8],0x26        # 0xfffda1b5
  0120d:    	jne    0x2f23b
  01213:    	mov    esi,DWORD PTR [rip+0x843]        # 0x1a5c
  01219:    	cmp    esi,0xffffffff
  0121c:    	je     0x2f282
  01222:    	cmp    WORD PTR [rdi+0x2],0x3
  01227:    	jne    0x1240
  0122d:    	cmp    esi,0x6
  01230:    	jge    0x1240
  01236:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0123b:    	jmp    0x129c
  01240:    	sub    rsp,0x30
  01244:    	movq   QWORD PTR [rsp],xmm3
  01249:    	movq   QWORD PTR [rsp+0x8],xmm4
  0124f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01255:    	movq   QWORD PTR [rsp+0x18],xmm6
  0125b:    	movq   QWORD PTR [rsp+0x20],xmm7
  01261: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01268: b5 	movabs rax,0x55b5b00a3ef0
  01272:    	call   rax
  01274:    	movq   xmm3,QWORD PTR [rsp]
  01279:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0127f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01285:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0128b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01291: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01298:    	add    rsp,0x30
  0129c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [Float][Float]
  012a3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012aa: 00 	test   rdi,0x1
  012b1:    	jne    0x2f2fb
  012b7: 00 	test   rdi,0x2
  012be:    	je     0x12fa
  012c4:    	xorps  xmm2,xmm2
  012c7: 00 	movabs rax,0x8000000000000002
  012d1:    	cmp    rdi,rax
  012d4:    	je     0x130c
  012da:    	mov    rax,rdi
  012dd:    	sar    rax,0x3f
  012e1:    	add    rax,0x2
  012e5:    	and    rdi,0xfffffffffffffffc
  012e9:    	or     rdi,rax
  012ec:    	rol    rdi,0x3d
  012f0:    	movq   xmm2,rdi
  012f5:    	jmp    0x130c
  012fa:    	call   0xfffd7124
  012ff:    	test   rax,rax
  01302:    	je     0x2f2fb
  01308:    	movq   xmm2,xmm0
  0130c:    	mulsd  xmm2,xmm3
:00092 %13 = %13 + %14                      [Float][Float]
  01310: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01317: 00 	test   rdi,0x1
  0131e:    	jne    0x2f342
  01324: 00 	test   rdi,0x2
  0132b:    	je     0x1368
  01331:    	xorps  xmm9,xmm9
  01335: 00 	movabs rax,0x8000000000000002
  0133f:    	cmp    rdi,rax
  01342:    	je     0x137b
  01348:    	mov    rax,rdi
  0134b:    	sar    rax,0x3f
  0134f:    	add    rax,0x2
  01353:    	and    rdi,0xfffffffffffffffc
  01357:    	or     rdi,rax
  0135a:    	rol    rdi,0x3d
  0135e:    	movq   xmm9,rdi
  01363:    	jmp    0x137b
  01368:    	call   0xfffd7124
  0136d:    	test   rax,rax
  01370:    	je     0x2f342
  01376:    	movq   xmm9,xmm0
  0137b:    	addsd  xmm9,xmm2
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  01380:    	movq   xmm0,xmm4
  01384:    	call   0xfffd7248
  01389:    	mov    QWORD PTR [rbp-0x80],rax
  0138d:    	movq   xmm0,xmm8
  01392:    	call   0xfffd7248
  01397: ff 	mov    QWORD PTR [rbp-0x88],rax
  0139e:    	movq   xmm0,xmm9
  013a3:    	call   0xfffd7248
  013a8: ff 	mov    QWORD PTR [rbp-0x90],rax
  013af:    	mov    rdi,QWORD PTR [rbp-0x78]
  013b3: 00 	test   rdi,0x7
  013ba:    	jne    0x2f399
  013c0:    	cmp    DWORD PTR [rdi+0x4],0x29
  013c4:    	jne    0x2f399
  013ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8de4],0x26        # 0xfffda1b5
  013d1:    	jne    0x2f399
  013d7: 00 	mov    r9,0x0
  013de:    	sub    rsp,0x40
  013e2:    	movq   QWORD PTR [rsp],xmm2
  013e7:    	movq   QWORD PTR [rsp+0x8],xmm3
  013ed:    	movq   QWORD PTR [rsp+0x10],xmm4
  013f3:    	movq   QWORD PTR [rsp+0x18],xmm5
  013f9:    	movq   QWORD PTR [rsp+0x20],xmm6
  013ff:    	movq   QWORD PTR [rsp+0x28],xmm7
  01405: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0140c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01413:    	mov    rdx,rdi
  01416: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0141f:    	mov    QWORD PTR [rsp-0x38],rcx
  01424:    	mov    rax,QWORD PTR [rbx]
  01427:    	lea    rsi,[rsp-0x18]
  0142c:    	mov    QWORD PTR [rsi],rax
  0142f:    	mov    QWORD PTR [rbx],rsi
  01432:    	lea    rcx,[rbp-0x80]
  01436: 00 	mov    r8,0x3
  0143d:    	call   0x2f3d2
  01442:    	lea    rdi,[rbp-0x8]
  01446:    	mov    QWORD PTR [rbx],rdi
  01449:    	movq   xmm2,QWORD PTR [rsp]
  0144e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01454:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0145a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01460:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01466:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0146c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01473: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0147a:    	add    rsp,0x40
  0147e: b5 	movabs r13,0x55b5b07bef60
  01488:    	test   rax,rax
  0148b:    	je     0xfffd70cb
  01491:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  01495:    	mov    rdi,QWORD PTR [rbp-0x38]
  01499: 00 	test   rdi,0x7
  014a0:    	jne    0x2f404
  014a6:    	cmp    DWORD PTR [rdi+0x4],0x30
  014aa:    	jne    0x2f404
  014b0: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8cfe],0x26        # 0xfffda1b5
  014b7:    	jne    0x2f404
  014bd:    	mov    esi,DWORD PTR [rip+0x5a1]        # 0x1a64
  014c3:    	cmp    esi,0xffffffff
  014c6:    	je     0x2f43d
  014cc:    	cmp    WORD PTR [rdi+0x2],0x3
  014d1:    	jne    0x14ee
  014d7:    	cmp    esi,0x6
  014da:    	jge    0x14ee
  014e0:    	mov    rax,QWORD PTR [rbp-0x70]
  014e4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014e9:    	jmp    0x157b
  014ee:    	sub    rsp,0x40
  014f2:    	movq   QWORD PTR [rsp],xmm2
  014f7:    	movq   QWORD PTR [rsp+0x8],xmm3
  014fd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01503:    	movq   QWORD PTR [rsp+0x18],xmm5
  01509:    	movq   QWORD PTR [rsp+0x20],xmm6
  0150f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01515: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0151c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01523:    	mov    rdx,QWORD PTR [rbp-0x70]
  01527: b5 	movabs rax,0x55b5b00a4170
  01531:    	call   rax
  01533:    	movq   xmm2,QWORD PTR [rsp]
  01538:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0153e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01544:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0154a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01550:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01556: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0155d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01564:    	add    rsp,0x40
  01568: b5 	movabs r13,0x55b5b07bef90
  01572:    	test   rax,rax
  01575:    	je     0xfffd70cb
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  0157b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0157f: 00 	test   rdi,0x7
  01586:    	jne    0x2f4d7
  0158c:    	cmp    DWORD PTR [rdi+0x4],0x30
  01590:    	jne    0x2f4d7
  01596: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8c18],0x26        # 0xfffda1b5
  0159d:    	jne    0x2f4d7
  015a3:    	mov    esi,DWORD PTR [rip+0x4c3]        # 0x1a6c
  015a9:    	cmp    esi,0xffffffff
  015ac:    	je     0x2f510
  015b2:    	cmp    WORD PTR [rdi+0x2],0x3
  015b7:    	jne    0x15d0
  015bd:    	cmp    esi,0x6
  015c0:    	jge    0x15d0
  015c6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  015cb:    	jmp    0x1646
  015d0:    	sub    rsp,0x40
  015d4:    	movq   QWORD PTR [rsp],xmm2
  015d9:    	movq   QWORD PTR [rsp+0x8],xmm3
  015df:    	movq   QWORD PTR [rsp+0x10],xmm4
  015e5:    	movq   QWORD PTR [rsp+0x18],xmm5
  015eb:    	movq   QWORD PTR [rsp+0x20],xmm6
  015f1:    	movq   QWORD PTR [rsp+0x28],xmm7
  015f7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015fe: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01605: b5 	movabs rax,0x55b5b00a3ef0
  0160f:    	call   rax
  01611:    	movq   xmm2,QWORD PTR [rsp]
  01616:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0161c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01622:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01628:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0162e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01634: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0163b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01642:    	add    rsp,0x40
  01646:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: Sphere[IvarId(0)]
  0164a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0164e:    	mov    rax,QWORD PTR [rdi+0x10]
  01652:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  01656:    	mov    rdi,QWORD PTR [rbp-0x70]
  0165a: 00 	test   rdi,0x7
  01661:    	jne    0x2f5a3
  01667:    	cmp    DWORD PTR [rdi+0x4],0x28
  0166b:    	jne    0x2f5a3
  01671: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8b3d],0x26        # 0xfffda1b5
  01678:    	jne    0x2f5a3
  0167e:    	sub    rsp,0x40
  01682:    	movq   QWORD PTR [rsp],xmm2
  01687:    	movq   QWORD PTR [rsp+0x8],xmm3
  0168d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01693:    	movq   QWORD PTR [rsp+0x18],xmm5
  01699:    	movq   QWORD PTR [rsp+0x20],xmm6
  0169f:    	movq   QWORD PTR [rsp+0x28],xmm7
  016a5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016ac: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016b3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016bc:    	mov    QWORD PTR [rsp-0x38],rcx
  016c1:    	mov    rax,QWORD PTR [rbx]
  016c4:    	lea    rsi,[rsp-0x18]
  016c9:    	mov    QWORD PTR [rsi],rax
  016cc:    	mov    QWORD PTR [rbx],rsi
  016cf:    	mov    rax,QWORD PTR [rbp-0x70]
  016d3:    	mov    QWORD PTR [rsp-0x38],rax
  016d8: 00 	mov    rdi,0x1
  016df:    	lea    r8,[rsp-0x40]
  016e4:    	mov    rax,QWORD PTR [rbp-0x78]
  016e8:    	mov    QWORD PTR [r8],rax
  016eb:    	sub    r8,0x8
  016ef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016f8: 08 	movabs rax,0x1000800000040
  01702:    	mov    QWORD PTR [rsp-0x28],rax
  01707: b5 	movabs r13,0x55b5b08082c0
  01711:    	call   0xfffdae94
  01716:    	lea    rdi,[rbp-0x8]
  0171a:    	mov    QWORD PTR [rbx],rdi
  0171d:    	movq   xmm2,QWORD PTR [rsp]
  01722:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01728:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0172e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01734:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0173a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01740: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01747: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0174e:    	add    rsp,0x40
  01752: b5 	movabs r13,0x55b5b07bf000
  0175c:    	test   rax,rax
  0175f:    	je     0xfffd70cb
  01765:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  01769:    	mov    rdi,QWORD PTR [rbp-0x68]
  0176d: 00 	test   rdi,0x7
  01774:    	jne    0x2f5dc
  0177a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0177e:    	jne    0x2f5dc
  01784: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8a2a],0x26        # 0xfffda1b5
  0178b:    	jne    0x2f5dc
  01791:    	sub    rsp,0x40
  01795:    	movq   QWORD PTR [rsp],xmm2
  0179a:    	movq   QWORD PTR [rsp+0x8],xmm3
  017a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  017a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  017ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  017b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  017b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  017bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017c6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017cf:    	mov    QWORD PTR [rsp-0x38],rcx
  017d4:    	mov    rax,QWORD PTR [rbx]
  017d7:    	lea    rsi,[rsp-0x18]
  017dc:    	mov    QWORD PTR [rsi],rax
  017df:    	mov    QWORD PTR [rbx],rsi
  017e2:    	mov    rax,QWORD PTR [rbp-0x68]
  017e6:    	mov    QWORD PTR [rsp-0x38],rax
  017eb: 00 	mov    rdi,0x0
  017f2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017fb: 07 	movabs rax,0x1000700000044
  01805:    	mov    QWORD PTR [rsp-0x28],rax
  0180a: b5 	movabs r13,0x55b5b07ceca0
  01814:    	call   0xfffdaafa
  01819:    	lea    rdi,[rbp-0x8]
  0181d:    	mov    QWORD PTR [rbx],rdi
  01820:    	movq   xmm2,QWORD PTR [rsp]
  01825:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0182b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01831:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01837:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0183d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01843: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0184a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01851:    	add    rsp,0x40
  01855: b5 	movabs r13,0x55b5b07bf030
  0185f:    	test   rax,rax
  01862:    	je     0xfffd70cb
  01868:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  0186c:    	mov    rdi,QWORD PTR [rbp-0x38]
  01870: 00 	test   rdi,0x7
  01877:    	jne    0x2f615
  0187d:    	cmp    DWORD PTR [rdi+0x4],0x30
  01881:    	jne    0x2f615
  01887: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8927],0x26        # 0xfffda1b5
  0188e:    	jne    0x2f615
  01894:    	mov    esi,DWORD PTR [rip+0x1da]        # 0x1a74
  0189a:    	cmp    esi,0xffffffff
  0189d:    	je     0x2f64e
  018a3:    	cmp    WORD PTR [rdi+0x2],0x3
  018a8:    	jne    0x18c5
  018ae:    	cmp    esi,0x6
  018b1:    	jge    0x18c5
  018b7:    	mov    rax,QWORD PTR [rbp-0x70]
  018bb:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  018c0:    	jmp    0x1952
  018c5:    	sub    rsp,0x40
  018c9:    	movq   QWORD PTR [rsp],xmm2
  018ce:    	movq   QWORD PTR [rsp+0x8],xmm3
  018d4:    	movq   QWORD PTR [rsp+0x10],xmm4
  018da:    	movq   QWORD PTR [rsp+0x18],xmm5
  018e0:    	movq   QWORD PTR [rsp+0x20],xmm6
  018e6:    	movq   QWORD PTR [rsp+0x28],xmm7
  018ec: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018f3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018fa:    	mov    rdx,QWORD PTR [rbp-0x70]
  018fe: b5 	movabs rax,0x55b5b00a4170
  01908:    	call   rax
  0190a:    	movq   xmm2,QWORD PTR [rsp]
  0190f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01915:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0191b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01921:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01927:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0192d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01934: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0193b:    	add    rsp,0x40
  0193f: b5 	movabs r13,0x55b5b07bf060
  01949:    	test   rax,rax
  0194c:    	je     0xfffd70cb
:00110 
:00112 br =>:00113
  01952:    	jmp    0x2f7a2
:00113 br =>:00114
  01957:    	jmp    0x2f834
:00114 %9 = nil
  0195c: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01964:    	mov    rax,QWORD PTR [rbp-0x70]
  01968:    	leave  
  01969:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55b5b07d6270
<== finished compile. elapsed:210.5µs
offset:Pos(174560) code: 7664 bytes  data: 372 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	je     0x4a
  00014:    	jl     0x1f
  0001a:    	jmp    0x2ddef
  0001f:    	jmp    0x2ddef
  00024:    	mov    eax,0x2
  00029:    	sub    eax,edx
  0002b:    	test   rax,rax
  0002e:    	je     0x4a
  00034:    	lea    rdi,[rbp-0x40]
  00038: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00040:    	sub    rax,0x1
  00044:    	jne    0x38
  0004a: 00 	mov    rax,0x4
  00051:    	mov    QWORD PTR [rbp-0x40],rax
  00055:    	mov    QWORD PTR [rbp-0x48],rax
  00059:    	mov    QWORD PTR [rbp-0x50],rax
  0005d:    	mov    QWORD PTR [rbp-0x58],rax
  00061:    	mov    QWORD PTR [rbp-0x60],rax
  00065:    	mov    QWORD PTR [rbp-0x68],rax
  00069:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x2ddfe
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x32
  0007e:    	jne    0x2ddfe
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  00084: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  0008c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd86bd]        # 0xfffd8750
  00093: 00 	cmp    rax,QWORD PTR [rip+0x1d66]        # 0x1e00
  0009a:    	jne    0x2de0d
  000a0: 00 	mov    rax,QWORD PTR [rip+0x1d49]        # 0x1df0
  000a7:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  000ab:    	mov    rdi,QWORD PTR [rbp-0x38]
  000af: 00 	test   rdi,0x7
  000b6:    	jne    0x2de53
  000bc:    	cmp    DWORD PTR [rdi+0x4],0x28
  000c0:    	jne    0x2de53
  000c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8670],0x26        # 0xfffd873d
  000cd:    	jne    0x2de53
  000d3:    	mov    esi,DWORD PTR [rip+0x1d33]        # 0x1e0c
  000d9:    	cmp    esi,0xffffffff
  000dc:    	je     0x2de62
  000e2:    	cmp    WORD PTR [rdi+0x2],0x3
  000e7:    	jne    0x100
  000ed:    	cmp    esi,0x6
  000f0:    	jge    0x100
  000f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000fb:    	jmp    0x10c
  00100: b5 	movabs rax,0x55b5b00a3ef0
  0010a:    	call   rax
  0010c:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  00110:    	mov    rdi,QWORD PTR [rbp-0x38]
  00114: 00 	test   rdi,0x7
  0011b:    	jne    0x2de8b
  00121:    	cmp    DWORD PTR [rdi+0x4],0x28
  00125:    	jne    0x2de8b
  0012b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd860b],0x26        # 0xfffd873d
  00132:    	jne    0x2de8b
  00138:    	mov    esi,DWORD PTR [rip+0x1cd6]        # 0x1e14
  0013e:    	cmp    esi,0xffffffff
  00141:    	je     0x2de9a
  00147:    	cmp    WORD PTR [rdi+0x2],0x3
  0014c:    	jne    0x165
  00152:    	cmp    esi,0x6
  00155:    	jge    0x165
  0015b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00160:    	jmp    0x171
  00165: b5 	movabs rax,0x55b5b00a3ef0
  0016f:    	call   rax
  00171:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00175:    	mov    rdi,QWORD PTR [rbp-0x38]
  00179: 00 	test   rdi,0x7
  00180:    	jne    0x2dec3
  00186:    	cmp    DWORD PTR [rdi+0x4],0x28
  0018a:    	jne    0x2dec3
  00190: 26 	cmp    DWORD PTR [rip+0xfffffffffffd85a6],0x26        # 0xfffd873d
  00197:    	jne    0x2dec3
  0019d:    	mov    esi,DWORD PTR [rip+0x1c79]        # 0x1e1c
  001a3:    	cmp    esi,0xffffffff
  001a6:    	je     0x2ded2
  001ac:    	cmp    WORD PTR [rdi+0x2],0x3
  001b1:    	jne    0x1ca
  001b7:    	cmp    esi,0x6
  001ba:    	jge    0x1ca
  001c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001c5:    	jmp    0x1d6
  001ca: b5 	movabs rax,0x55b5b00a3ef0
  001d4:    	call   rax
  001d6:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001da:    	mov    rdi,QWORD PTR [rbp-0x50]
  001de: 00 	test   rdi,0x7
  001e5:    	jne    0x2defb
  001eb:    	cmp    DWORD PTR [rdi+0x4],0x29
  001ef:    	jne    0x2defb
  001f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8541],0x26        # 0xfffd873d
  001fc:    	jne    0x2defb
  00202: 00 	mov    r9,0x0
  00209:    	mov    rdx,rdi
  0020c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00215:    	mov    QWORD PTR [rsp-0x38],rcx
  0021a:    	mov    rax,QWORD PTR [rbx]
  0021d:    	lea    rsi,[rsp-0x18]
  00222:    	mov    QWORD PTR [rsi],rax
  00225:    	mov    QWORD PTR [rbx],rsi
  00228:    	lea    rcx,[rbp-0x58]
  0022c: 00 	mov    r8,0x3
  00233:    	call   0x2df0a
  00238:    	lea    rdi,[rbp-0x8]
  0023c:    	mov    QWORD PTR [rbx],rdi
  0023f: b5 	movabs r13,0x55b5b07d6350
  00249:    	test   rax,rax
  0024c:    	je     0xfffd5653
  00252:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  00256:    	mov    rdx,QWORD PTR [rbp-0x30]
  0025a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0025e:    	mov    r8,QWORD PTR [rbp-0x48]
  00262:    	mov    rdi,rbx
  00265:    	mov    rsi,r12
  00268: b5 	movabs rax,0x55b5b0091bd0
  00272:    	call   rax
  00274: b5 	movabs r13,0x55b5b07d6370
  0027e:    	test   rax,rax
  00281:    	je     0xfffd5653
:00016 %3 = 1: i32
  00287: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  0028f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd84ba]        # 0xfffd8750
  00296: 00 	cmp    rax,QWORD PTR [rip+0x1b93]        # 0x1e30
  0029d:    	jne    0x2df3c
  002a3: 00 	mov    rax,QWORD PTR [rip+0x1b76]        # 0x1e20
  002aa:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  002ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b8a]        # 0x1e40
  002b6: 00 	movabs rax,0x8000000000000002
  002c0:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002c4: 00 	movq   xmm3,QWORD PTR [rip+0x1b84]        # 0x1e50
  002cc: 00 	movabs rax,0x8000000000000002
  002d6:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002da: 00 	movq   xmm4,QWORD PTR [rip+0x1b7e]        # 0x1e60
  002e2: 00 	movabs rax,0x8000000000000002
  002ec:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f0:    	mov    rdi,QWORD PTR [rbp-0x50]
  002f4: 00 	test   rdi,0x7
  002fb:    	jne    0x2df82
  00301:    	cmp    DWORD PTR [rdi+0x4],0x29
  00305:    	jne    0x2df82
  0030b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd842b],0x26        # 0xfffd873d
  00312:    	jne    0x2df82
  00318: 00 	mov    r9,0x0
  0031f:    	sub    rsp,0x20
  00323:    	movq   QWORD PTR [rsp],xmm2
  00328:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00334:    	mov    rdx,rdi
  00337: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00340:    	mov    QWORD PTR [rsp-0x38],rcx
  00345:    	mov    rax,QWORD PTR [rbx]
  00348:    	lea    rsi,[rsp-0x18]
  0034d:    	mov    QWORD PTR [rsi],rax
  00350:    	mov    QWORD PTR [rbx],rsi
  00353:    	lea    rcx,[rbp-0x58]
  00357: 00 	mov    r8,0x3
  0035e:    	call   0x2df91
  00363:    	lea    rdi,[rbp-0x8]
  00367:    	mov    QWORD PTR [rbx],rdi
  0036a:    	movq   xmm2,QWORD PTR [rsp]
  0036f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00375:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0037b:    	add    rsp,0x20
  0037f: b5 	movabs r13,0x55b5b07d63e0
  00389:    	test   rax,rax
  0038c:    	je     0xfffd5653
  00392:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  00396:    	sub    rsp,0x20
  0039a:    	movq   QWORD PTR [rsp],xmm2
  0039f:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  003af:    	mov    rcx,QWORD PTR [rbp-0x40]
  003b3:    	mov    r8,QWORD PTR [rbp-0x48]
  003b7:    	mov    rdi,rbx
  003ba:    	mov    rsi,r12
  003bd: b5 	movabs rax,0x55b5b0091bd0
  003c7:    	call   rax
  003c9:    	movq   xmm2,QWORD PTR [rsp]
  003ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003da:    	add    rsp,0x20
  003de: b5 	movabs r13,0x55b5b07d6400
  003e8:    	test   rax,rax
  003eb:    	je     0xfffd5653
:00025 %3 = %2.call x()                     [Vec]
  003f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  003f5: 00 	test   rdi,0x7
  003fc:    	jne    0x2dfc3
  00402:    	cmp    DWORD PTR [rdi+0x4],0x28
  00406:    	jne    0x2dfc3
  0040c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd832a],0x26        # 0xfffd873d
  00413:    	jne    0x2dfc3
  00419:    	mov    esi,DWORD PTR [rip+0x1a4d]        # 0x1e6c
  0041f:    	cmp    esi,0xffffffff
  00422:    	je     0x2dfd2
  00428:    	cmp    WORD PTR [rdi+0x2],0x3
  0042d:    	jne    0x446
  00433:    	cmp    esi,0x6
  00436:    	jge    0x446
  0043c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441:    	jmp    0x47c
  00446:    	sub    rsp,0x20
  0044a:    	movq   QWORD PTR [rsp],xmm2
  0044f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00455:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045b: b5 	movabs rax,0x55b5b00a3ef0
  00465:    	call   rax
  00467:    	movq   xmm2,QWORD PTR [rsp]
  0046c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00472:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00478:    	add    rsp,0x20
  0047c:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00480: 00 	movq   xmm5,QWORD PTR [rip+0x19e8]        # 0x1e70
  00488: 99 	movabs rax,0xff1999999999999a
  00492:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00496:    	mov    rdi,QWORD PTR [rbp-0x40]
  0049a: 00 	test   rdi,0x1
  004a1:    	jne    0x2e025
  004a7: 00 	test   rdi,0x2
  004ae:    	je     0x4ea
  004b4:    	xorps  xmm6,xmm6
  004b7: 00 	movabs rax,0x8000000000000002
  004c1:    	cmp    rdi,rax
  004c4:    	je     0x4fc
  004ca:    	mov    rax,rdi
  004cd:    	sar    rax,0x3f
  004d1:    	add    rax,0x2
  004d5:    	and    rdi,0xfffffffffffffffc
  004d9:    	or     rdi,rax
  004dc:    	rol    rdi,0x3d
  004e0:    	movq   xmm6,rdi
  004e5:    	jmp    0x4fc
  004ea:    	call   0xfffd56ac
  004ef:    	test   rax,rax
  004f2:    	je     0x2e025
  004f8:    	movq   xmm6,xmm0
  004fc:    	ucomisd xmm6,xmm5
  00500:    	jae    0x2e126
:00031 %3 = %2.call x()                     [Vec]
  00506:    	mov    rdi,QWORD PTR [rbp-0x38]
  0050a: 00 	test   rdi,0x7
  00511:    	jne    0x2e034
  00517:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051b:    	jne    0x2e034
  00521: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8215],0x26        # 0xfffd873d
  00528:    	jne    0x2e034
  0052e:    	mov    esi,DWORD PTR [rip+0x1948]        # 0x1e7c
  00534:    	cmp    esi,0xffffffff
  00537:    	je     0x2e043
  0053d:    	cmp    WORD PTR [rdi+0x2],0x3
  00542:    	jne    0x55b
  00548:    	cmp    esi,0x6
  0054b:    	jge    0x55b
  00551:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00556:    	jmp    0x59d
  0055b:    	sub    rsp,0x20
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576: b5 	movabs rax,0x55b5b00a3ef0
  00580:    	call   rax
  00582:    	movq   xmm2,QWORD PTR [rsp]
  00587:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00593:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00599:    	add    rsp,0x20
  0059d:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  005a1: 00 	movq   xmm5,QWORD PTR [rip+0x18d7]        # 0x1e80
  005a9: 99 	movabs rax,0xff1999999999999e
  005b3:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  005bb: 00 	test   rdi,0x1
  005c2:    	jne    0x2e0a2
  005c8: 00 	test   rdi,0x2
  005cf:    	je     0x60b
  005d5:    	xorps  xmm6,xmm6
  005d8: 00 	movabs rax,0x8000000000000002
  005e2:    	cmp    rdi,rax
  005e5:    	je     0x61d
  005eb:    	mov    rax,rdi
  005ee:    	sar    rax,0x3f
  005f2:    	add    rax,0x2
  005f6:    	and    rdi,0xfffffffffffffffc
  005fa:    	or     rdi,rax
  005fd:    	rol    rdi,0x3d
  00601:    	movq   xmm6,rdi
  00606:    	jmp    0x61d
  0060b:    	call   0xfffd56ac
  00610:    	test   rax,rax
  00613:    	je     0x2e0a2
  00619:    	movq   xmm6,xmm0
  0061d:    	ucomisd xmm6,xmm5
  00621:    	jbe    0x2e13f
:00037 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0062f:    	sub    rsp,0x20
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0064e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00652:    	mov    rdi,rbx
  00655:    	mov    rsi,r12
  00658: b5 	movabs r8,0x55b5b07d64d8
  00662: b5 	movabs rax,0x55b5b0091aa0
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00685:    	add    rsp,0x20
  00689: b5 	movabs r13,0x55b5b07d64e0
  00693:    	test   rax,rax
  00696:    	je     0xfffd5653
  0069c:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  006a0: 00 	movq   xmm5,QWORD PTR [rip+0x17e8]        # 0x1e90
  006a8: 00 	movabs rax,0xff80000000000002
  006b2:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006b6:    	mov    rdi,QWORD PTR [rbp-0x40]
  006ba: 00 	test   rdi,0x7
  006c1:    	jne    0x2e0b1
  006c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  006cb:    	jne    0x2e0b1
  006d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8065],0x26        # 0xfffd873d
  006d8:    	jne    0x2e0b1
  006de:    	mov    esi,DWORD PTR [rip+0x17b8]        # 0x1e9c
  006e4:    	cmp    esi,0xffffffff
  006e7:    	je     0x2e0c0
  006ed:    	cmp    WORD PTR [rdi+0x2],0x3
  006f2:    	jne    0x70f
  006f8:    	cmp    esi,0x6
  006fb:    	jge    0x70f
  00701:    	mov    rax,QWORD PTR [rbp-0x48]
  00705:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0070a:    	jmp    0x768
  0070f:    	sub    rsp,0x20
  00713:    	movq   QWORD PTR [rsp],xmm2
  00718:    	movq   QWORD PTR [rsp+0x8],xmm3
  0071e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00724:    	movq   QWORD PTR [rsp+0x18],xmm5
  0072a:    	mov    rdx,QWORD PTR [rbp-0x48]
  0072e: b5 	movabs rax,0x55b5b00a4170
  00738:    	call   rax
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	add    rsp,0x20
  00755: b5 	movabs r13,0x55b5b07d6510
  0075f:    	test   rax,rax
  00762:    	je     0xfffd5653
:00041 
:00043 br =>:00088
  00768:    	jmp    0x2e800
:00044 %3 = %2.call y()                     [<INVALID>]
  0076d: 01 	sub    DWORD PTR [rip+0x172c],0x1        # 0x1ea0
  00774:    	je     0x2e167
  0077a:    	sub    rsp,0x20
  0077e:    	movq   QWORD PTR [rsp],xmm2
  00783:    	movq   QWORD PTR [rsp+0x8],xmm3
  00789:    	movq   QWORD PTR [rsp+0x10],xmm4
  0078f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00795:    	mov    rdi,QWORD PTR [rbp-0x38]
  00799: b5 	movabs rax,0x55b5b009e670
  007a3:    	call   rax
  007a5:    	mov    r15d,eax
  007a8: 00 	cmp    r15d,DWORD PTR [rip+0x16f9]        # 0x1ea8
  007af:    	jne    0x2e189
  007b5:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7f82]        # 0xfffd873d
  007bb:    	cmp    DWORD PTR [rip+0x16e3],eax        # 0x1ea4
  007c1:    	jne    0x2e189
  007c7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007d0:    	mov    QWORD PTR [rsp-0x38],rcx
  007d5:    	mov    rax,QWORD PTR [rbx]
  007d8:    	lea    rsi,[rsp-0x18]
  007dd:    	mov    QWORD PTR [rsi],rax
  007e0:    	mov    QWORD PTR [rbx],rsi
  007e3:    	mov    rax,QWORD PTR [rbp-0x38]
  007e7:    	mov    QWORD PTR [rsp-0x38],rax
  007ec: 00 	mov    rdi,0x0
  007f3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007fc: 00 	movabs rax,0x0
  00806:    	mov    QWORD PTR [rsp-0x28],rax
  0080b: 00 	movabs r13,0x0
  00815:    	call   0xfffd5620
  0081a:    	lea    rdi,[rbp-0x8]
  0081e:    	mov    QWORD PTR [rbx],rdi
  00821:    	movq   xmm2,QWORD PTR [rsp]
  00826:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0082c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00832:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00838:    	add    rsp,0x20
  0083c:    	test   rax,rax
  0083f:    	je     0x2e1f5
  00845:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00849: 00 	movq   xmm5,QWORD PTR [rip+0x165f]        # 0x1eb0
  00851: 99 	movabs rax,0xff1999999999999a
  0085b:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  0085f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00863:    	mov    rsi,QWORD PTR [rbp-0x48]
  00867: 00 	test   rdi,0x1
  0086e:    	je     0x2e204
  00874: 00 	test   rsi,0x1
  0087b:    	je     0x2e204
  00881:    	cmp    rdi,rsi
  00884:    	jge    0x2e406
:00050 %3 = %2.call y()                     [<INVALID>]
  0088a: 01 	sub    DWORD PTR [rip+0x1627],0x1        # 0x1eb8
  00891:    	je     0x2e268
  00897:    	sub    rsp,0x20
  0089b:    	movq   QWORD PTR [rsp],xmm2
  008a0:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a6:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ac:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b2:    	mov    rdi,QWORD PTR [rbp-0x38]
  008b6: b5 	movabs rax,0x55b5b009e670
  008c0:    	call   rax
  008c2:    	mov    r15d,eax
  008c5: 00 	cmp    r15d,DWORD PTR [rip+0x15f4]        # 0x1ec0
  008cc:    	jne    0x2e28a
  008d2:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7e65]        # 0xfffd873d
  008d8:    	cmp    DWORD PTR [rip+0x15de],eax        # 0x1ebc
  008de:    	jne    0x2e28a
  008e4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008ed:    	mov    QWORD PTR [rsp-0x38],rcx
  008f2:    	mov    rax,QWORD PTR [rbx]
  008f5:    	lea    rsi,[rsp-0x18]
  008fa:    	mov    QWORD PTR [rsi],rax
  008fd:    	mov    QWORD PTR [rbx],rsi
  00900:    	mov    rax,QWORD PTR [rbp-0x38]
  00904:    	mov    QWORD PTR [rsp-0x38],rax
  00909: 00 	mov    rdi,0x0
  00910: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00919: 00 	movabs rax,0x0
  00923:    	mov    QWORD PTR [rsp-0x28],rax
  00928: 00 	movabs r13,0x0
  00932:    	call   0xfffd5620
  00937:    	lea    rdi,[rbp-0x8]
  0093b:    	mov    QWORD PTR [rbx],rdi
  0093e:    	movq   xmm2,QWORD PTR [rsp]
  00943:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00949:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0094f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00955:    	add    rsp,0x20
  00959:    	test   rax,rax
  0095c:    	je     0x2e2f6
  00962:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00966: 00 	movq   xmm5,QWORD PTR [rip+0x1562]        # 0x1ed0
  0096e: 99 	movabs rax,0xff1999999999999e
  00978:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  0097c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00980:    	mov    rsi,QWORD PTR [rbp-0x48]
  00984: 00 	test   rdi,0x1
  0098b:    	je     0x2e305
  00991: 00 	test   rsi,0x1
  00998:    	je     0x2e305
  0099e:    	cmp    rdi,rsi
  009a1:    	jle    0x2e41f
:00056 %3 = 1: i32
  009a7: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009af:    	sub    rsp,0x20
  009b3:    	movq   QWORD PTR [rsp],xmm2
  009b8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009be:    	movq   QWORD PTR [rsp+0x10],xmm4
  009c4:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ca:    	mov    rdx,QWORD PTR [rbp-0x30]
  009ce:    	mov    rcx,QWORD PTR [rbp-0x40]
  009d2:    	mov    rdi,rbx
  009d5:    	mov    rsi,r12
  009d8: b5 	movabs r8,0x55b5b07d6608
  009e2: b5 	movabs rax,0x55b5b0091aa0
  009ec:    	call   rax
  009ee:    	movq   xmm2,QWORD PTR [rsp]
  009f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a05:    	add    rsp,0x20
  00a09: b5 	movabs r13,0x55b5b07d6610
  00a13:    	test   rax,rax
  00a16:    	je     0xfffd5653
  00a1c:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a20: 00 	movq   xmm5,QWORD PTR [rip+0x14b8]        # 0x1ee0
  00a28: 00 	movabs rax,0xff80000000000002
  00a32:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a36: 01 	sub    DWORD PTR [rip+0x14ab],0x1        # 0x1ee8
  00a3d:    	je     0x2e369
  00a43:    	sub    rsp,0x20
  00a47:    	movq   QWORD PTR [rsp],xmm2
  00a4c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a52:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a58:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a5e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a62: b5 	movabs rax,0x55b5b009e670
  00a6c:    	call   rax
  00a6e:    	mov    r15d,eax
  00a71: 00 	cmp    r15d,DWORD PTR [rip+0x1478]        # 0x1ef0
  00a78:    	jne    0x2e38b
  00a7e:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7cb9]        # 0xfffd873d
  00a84:    	cmp    DWORD PTR [rip+0x1462],eax        # 0x1eec
  00a8a:    	jne    0x2e38b
  00a90: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a99:    	mov    QWORD PTR [rsp-0x38],rcx
  00a9e:    	mov    rax,QWORD PTR [rbx]
  00aa1:    	lea    rsi,[rsp-0x18]
  00aa6:    	mov    QWORD PTR [rsi],rax
  00aa9:    	mov    QWORD PTR [rbx],rsi
  00aac:    	mov    rax,QWORD PTR [rbp-0x40]
  00ab0:    	mov    QWORD PTR [rsp-0x38],rax
  00ab5: 00 	mov    rdi,0x1
  00abc:    	lea    r8,[rsp-0x40]
  00ac1:    	mov    rax,QWORD PTR [rbp-0x48]
  00ac5:    	mov    QWORD PTR [r8],rax
  00ac8:    	sub    r8,0x8
  00acc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ad5: 00 	movabs rax,0x0
  00adf:    	mov    QWORD PTR [rsp-0x28],rax
  00ae4: 00 	movabs r13,0x0
  00aee:    	call   0xfffd5620
  00af3:    	lea    rdi,[rbp-0x8]
  00af7:    	mov    QWORD PTR [rbx],rdi
  00afa:    	movq   xmm2,QWORD PTR [rsp]
  00aff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b05:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b0b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b11:    	add    rsp,0x20
  00b15:    	test   rax,rax
  00b18:    	je     0x2e3f7
:00060 
:00062 br =>:00088
  00b1e:    	jmp    0x2e819
:00063 %3 = %2.call z()                     [<INVALID>]
  00b23: 01 	sub    DWORD PTR [rip+0x13ca],0x1        # 0x1ef4
  00b2a:    	je     0x2e447
  00b30:    	sub    rsp,0x20
  00b34:    	movq   QWORD PTR [rsp],xmm2
  00b39:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b3f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b45:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b4b:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b4f: b5 	movabs rax,0x55b5b009e670
  00b59:    	call   rax
  00b5b:    	mov    r15d,eax
  00b5e: 00 	cmp    r15d,DWORD PTR [rip+0x1397]        # 0x1efc
  00b65:    	jne    0x2e469
  00b6b:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7bcc]        # 0xfffd873d
  00b71:    	cmp    DWORD PTR [rip+0x1381],eax        # 0x1ef8
  00b77:    	jne    0x2e469
  00b7d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b86:    	mov    QWORD PTR [rsp-0x38],rcx
  00b8b:    	mov    rax,QWORD PTR [rbx]
  00b8e:    	lea    rsi,[rsp-0x18]
  00b93:    	mov    QWORD PTR [rsi],rax
  00b96:    	mov    QWORD PTR [rbx],rsi
  00b99:    	mov    rax,QWORD PTR [rbp-0x38]
  00b9d:    	mov    QWORD PTR [rsp-0x38],rax
  00ba2: 00 	mov    rdi,0x0
  00ba9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bb2: 00 	movabs rax,0x0
  00bbc:    	mov    QWORD PTR [rsp-0x28],rax
  00bc1: 00 	movabs r13,0x0
  00bcb:    	call   0xfffd5620
  00bd0:    	lea    rdi,[rbp-0x8]
  00bd4:    	mov    QWORD PTR [rbx],rdi
  00bd7:    	movq   xmm2,QWORD PTR [rsp]
  00bdc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00be2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00be8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bee:    	add    rsp,0x20
  00bf2:    	test   rax,rax
  00bf5:    	je     0x2e4d5
  00bfb:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00bff: 00 	movq   xmm5,QWORD PTR [rip+0x12f9]        # 0x1f00
  00c07: 99 	movabs rax,0xff1999999999999a
  00c11:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00c15:    	mov    rdi,QWORD PTR [rbp-0x40]
  00c19:    	mov    rsi,QWORD PTR [rbp-0x48]
  00c1d: 00 	test   rdi,0x1
  00c24:    	je     0x2e4e4
  00c2a: 00 	test   rsi,0x1
  00c31:    	je     0x2e4e4
  00c37:    	cmp    rdi,rsi
  00c3a:    	jge    0x2e6e6
:00069 %3 = %2.call z()                     [<INVALID>]
  00c40: 01 	sub    DWORD PTR [rip+0x12c1],0x1        # 0x1f08
  00c47:    	je     0x2e548
  00c4d:    	sub    rsp,0x20
  00c51:    	movq   QWORD PTR [rsp],xmm2
  00c56:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c5c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c62:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c68:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c6c: b5 	movabs rax,0x55b5b009e670
  00c76:    	call   rax
  00c78:    	mov    r15d,eax
  00c7b: 00 	cmp    r15d,DWORD PTR [rip+0x128e]        # 0x1f10
  00c82:    	jne    0x2e56a
  00c88:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7aaf]        # 0xfffd873d
  00c8e:    	cmp    DWORD PTR [rip+0x1278],eax        # 0x1f0c
  00c94:    	jne    0x2e56a
  00c9a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ca3:    	mov    QWORD PTR [rsp-0x38],rcx
  00ca8:    	mov    rax,QWORD PTR [rbx]
  00cab:    	lea    rsi,[rsp-0x18]
  00cb0:    	mov    QWORD PTR [rsi],rax
  00cb3:    	mov    QWORD PTR [rbx],rsi
  00cb6:    	mov    rax,QWORD PTR [rbp-0x38]
  00cba:    	mov    QWORD PTR [rsp-0x38],rax
  00cbf: 00 	mov    rdi,0x0
  00cc6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ccf: 00 	movabs rax,0x0
  00cd9:    	mov    QWORD PTR [rsp-0x28],rax
  00cde: 00 	movabs r13,0x0
  00ce8:    	call   0xfffd5620
  00ced:    	lea    rdi,[rbp-0x8]
  00cf1:    	mov    QWORD PTR [rbx],rdi
  00cf4:    	movq   xmm2,QWORD PTR [rsp]
  00cf9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cff:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d05:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d0b:    	add    rsp,0x20
  00d0f:    	test   rax,rax
  00d12:    	je     0x2e5d6
  00d18:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00d1c: 00 	movq   xmm5,QWORD PTR [rip+0x11fc]        # 0x1f20
  00d24: 99 	movabs rax,0xff1999999999999e
  00d2e:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d32:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d36:    	mov    rsi,QWORD PTR [rbp-0x48]
  00d3a: 00 	test   rdi,0x1
  00d41:    	je     0x2e5e5
  00d47: 00 	test   rsi,0x1
  00d4e:    	je     0x2e5e5
  00d54:    	cmp    rdi,rsi
  00d57:    	jle    0x2e6ff
:00075 %3 = 1: i32
  00d5d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d65:    	sub    rsp,0x20
  00d69:    	movq   QWORD PTR [rsp],xmm2
  00d6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d74:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d80:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d84:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d88:    	mov    rdi,rbx
  00d8b:    	mov    rsi,r12
  00d8e: b5 	movabs r8,0x55b5b07d6738
  00d98: b5 	movabs rax,0x55b5b0091aa0
  00da2:    	call   rax
  00da4:    	movq   xmm2,QWORD PTR [rsp]
  00da9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00daf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dbb:    	add    rsp,0x20
  00dbf: b5 	movabs r13,0x55b5b07d6740
  00dc9:    	test   rax,rax
  00dcc:    	je     0xfffd5653
  00dd2:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00dd6: 00 	movq   xmm5,QWORD PTR [rip+0x1152]        # 0x1f30
  00dde: 00 	movabs rax,0xff80000000000002
  00de8:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00dec: 01 	sub    DWORD PTR [rip+0x1145],0x1        # 0x1f38
  00df3:    	je     0x2e649
  00df9:    	sub    rsp,0x20
  00dfd:    	movq   QWORD PTR [rsp],xmm2
  00e02:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e08:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e0e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e14:    	mov    rdi,QWORD PTR [rbp-0x40]
  00e18: b5 	movabs rax,0x55b5b009e670
  00e22:    	call   rax
  00e24:    	mov    r15d,eax
  00e27: 00 	cmp    r15d,DWORD PTR [rip+0x1112]        # 0x1f40
  00e2e:    	jne    0x2e66b
  00e34:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7903]        # 0xfffd873d
  00e3a:    	cmp    DWORD PTR [rip+0x10fc],eax        # 0x1f3c
  00e40:    	jne    0x2e66b
  00e46: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e4f:    	mov    QWORD PTR [rsp-0x38],rcx
  00e54:    	mov    rax,QWORD PTR [rbx]
  00e57:    	lea    rsi,[rsp-0x18]
  00e5c:    	mov    QWORD PTR [rsi],rax
  00e5f:    	mov    QWORD PTR [rbx],rsi
  00e62:    	mov    rax,QWORD PTR [rbp-0x40]
  00e66:    	mov    QWORD PTR [rsp-0x38],rax
  00e6b: 00 	mov    rdi,0x1
  00e72:    	lea    r8,[rsp-0x40]
  00e77:    	mov    rax,QWORD PTR [rbp-0x48]
  00e7b:    	mov    QWORD PTR [r8],rax
  00e7e:    	sub    r8,0x8
  00e82: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e8b: 00 	movabs rax,0x0
  00e95:    	mov    QWORD PTR [rsp-0x28],rax
  00e9a: 00 	movabs r13,0x0
  00ea4:    	call   0xfffd5620
  00ea9:    	lea    rdi,[rbp-0x8]
  00ead:    	mov    QWORD PTR [rbx],rdi
  00eb0:    	movq   xmm2,QWORD PTR [rsp]
  00eb5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ebb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ec1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ec7:    	add    rsp,0x20
  00ecb:    	test   rax,rax
  00ece:    	je     0x2e6d7
:00079 
:00081 br =>:00088
  00ed4:    	jmp    0x2e832
:00082 %3 = 1: i32
  00ed9: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00ee1:    	sub    rsp,0x20
  00ee5:    	movq   QWORD PTR [rsp],xmm2
  00eea:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ef6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00efc:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f00:    	mov    rcx,QWORD PTR [rbp-0x40]
  00f04:    	mov    rdi,rbx
  00f07:    	mov    rsi,r12
  00f0a: b5 	movabs r8,0x55b5b07d67a8
  00f14: b5 	movabs rax,0x55b5b0091aa0
  00f1e:    	call   rax
  00f20:    	movq   xmm2,QWORD PTR [rsp]
  00f25:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f2b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f31:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f37:    	add    rsp,0x20
  00f3b: b5 	movabs r13,0x55b5b07d67b0
  00f45:    	test   rax,rax
  00f48:    	je     0xfffd5653
  00f4e:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f52: 00 	movq   xmm5,QWORD PTR [rip+0xff6]        # 0x1f50
  00f5a: 00 	movabs rax,0xff80000000000002
  00f64:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f68: 01 	sub    DWORD PTR [rip+0xfe9],0x1        # 0x1f58
  00f6f:    	je     0x2e727
  00f75:    	sub    rsp,0x20
  00f79:    	movq   QWORD PTR [rsp],xmm2
  00f7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f84:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f90:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f94: b5 	movabs rax,0x55b5b009e670
  00f9e:    	call   rax
  00fa0:    	mov    r15d,eax
  00fa3: 00 	cmp    r15d,DWORD PTR [rip+0xfb6]        # 0x1f60
  00faa:    	jne    0x2e749
  00fb0:    	mov    eax,DWORD PTR [rip+0xfffffffffffd7787]        # 0xfffd873d
  00fb6:    	cmp    DWORD PTR [rip+0xfa0],eax        # 0x1f5c
  00fbc:    	jne    0x2e749
  00fc2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fcb:    	mov    QWORD PTR [rsp-0x38],rcx
  00fd0:    	mov    rax,QWORD PTR [rbx]
  00fd3:    	lea    rsi,[rsp-0x18]
  00fd8:    	mov    QWORD PTR [rsi],rax
  00fdb:    	mov    QWORD PTR [rbx],rsi
  00fde:    	mov    rax,QWORD PTR [rbp-0x40]
  00fe2:    	mov    QWORD PTR [rsp-0x38],rax
  00fe7: 00 	mov    rdi,0x1
  00fee:    	lea    r8,[rsp-0x40]
  00ff3:    	mov    rax,QWORD PTR [rbp-0x48]
  00ff7:    	mov    QWORD PTR [r8],rax
  00ffa:    	sub    r8,0x8
  00ffe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01007: 00 	movabs rax,0x0
  01011:    	mov    QWORD PTR [rsp-0x28],rax
  01016: 00 	movabs r13,0x0
  01020:    	call   0xfffd5620
  01025:    	lea    rdi,[rbp-0x8]
  01029:    	mov    QWORD PTR [rbx],rdi
  0102c:    	movq   xmm2,QWORD PTR [rsp]
  01031:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01037:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0103d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01043:    	add    rsp,0x20
  01047:    	test   rax,rax
  0104a:    	je     0x2e7b5
:00086 
:00088 %3 = 0: i32
  01050: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01058: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01060:    	sub    rsp,0x20
  01064:    	movq   QWORD PTR [rsp],xmm2
  01069:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01075:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0107f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01083:    	mov    rdi,rbx
  01086:    	mov    rsi,r12
  01089: b5 	movabs r8,0x55b5b07d6818
  01093: b5 	movabs rax,0x55b5b0091aa0
  0109d:    	call   rax
  0109f:    	movq   xmm2,QWORD PTR [rsp]
  010a4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010aa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010b0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b6:    	add    rsp,0x20
  010ba: b5 	movabs r13,0x55b5b07d6820
  010c4:    	test   rax,rax
  010c7:    	je     0xfffd5653
  010cd:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010d1: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010d9:    	sub    rsp,0x20
  010dd:    	movq   QWORD PTR [rsp],xmm3
  010e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  010ee:    	mov    rdx,QWORD PTR [rbp-0x30]
  010f2:    	mov    rcx,QWORD PTR [rbp-0x58]
  010f6:    	mov    rdi,rbx
  010f9:    	mov    rsi,r12
  010fc: b5 	movabs r8,0x55b5b07d6838
  01106: b5 	movabs rax,0x55b5b0091aa0
  01110:    	call   rax
  01112:    	movq   xmm3,QWORD PTR [rsp]
  01117:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0111d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01123:    	add    rsp,0x20
  01127: b5 	movabs r13,0x55b5b07d6840
  01131:    	test   rax,rax
  01134:    	je     0xfffd5653
  0113a:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0113e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01142: 00 	test   rdi,0x7
  01149:    	jne    0x2e7c4
  0114f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01153:    	jne    0x2e7c4
  01159: 26 	cmp    DWORD PTR [rip+0xfffffffffffd75dd],0x26        # 0xfffd873d
  01160:    	jne    0x2e7c4
  01166:    	sub    rsp,0x10
  0116a:    	movq   QWORD PTR [rsp],xmm3
  0116f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01175: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0117e:    	mov    QWORD PTR [rsp-0x38],rcx
  01183:    	mov    rax,QWORD PTR [rbx]
  01186:    	lea    rsi,[rsp-0x18]
  0118b:    	mov    QWORD PTR [rsi],rax
  0118e:    	mov    QWORD PTR [rbx],rsi
  01191:    	mov    rax,QWORD PTR [rbp-0x50]
  01195:    	mov    QWORD PTR [rsp-0x38],rax
  0119a: 00 	mov    rdi,0x1
  011a1:    	lea    r8,[rsp-0x40]
  011a6:    	mov    rax,QWORD PTR [rbp-0x58]
  011aa:    	mov    QWORD PTR [r8],rax
  011ad:    	sub    r8,0x8
  011b1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011ba: 09 	movabs rax,0x900000041
  011c4:    	mov    QWORD PTR [rsp-0x28],rax
  011c9: b5 	movabs r13,0x55b5b07a1dd0
  011d3:    	call   0xfffe26c5
  011d8:    	lea    rdi,[rbp-0x8]
  011dc:    	mov    QWORD PTR [rbx],rdi
  011df:    	movq   xmm3,QWORD PTR [rsp]
  011e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ea:    	add    rsp,0x10
  011ee: b5 	movabs r13,0x55b5b07d6860
  011f8:    	test   rax,rax
  011fb:    	je     0xfffd5653
  01201:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01205:    	sub    rsp,0x10
  01209:    	movq   QWORD PTR [rsp],xmm3
  0120e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01214:    	mov    rdx,QWORD PTR [rbp-0x30]
  01218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0121c:    	mov    r8,QWORD PTR [rbp-0x48]
  01220:    	mov    rdi,rbx
  01223:    	mov    rsi,r12
  01226: b5 	movabs rax,0x55b5b0091bd0
  01230:    	call   rax
  01232:    	movq   xmm3,QWORD PTR [rsp]
  01237:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123d:    	add    rsp,0x10
  01241: b5 	movabs r13,0x55b5b07d6880
  0124b:    	test   rax,rax
  0124e:    	je     0xfffd5653
:00097 %3 = 0: i32
  01254: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  0125c: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01264:    	sub    rsp,0x10
  01268:    	movq   QWORD PTR [rsp],xmm3
  0126d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01273:    	mov    rdx,QWORD PTR [rbp-0x30]
  01277:    	mov    rcx,QWORD PTR [rbp-0x50]
  0127b:    	mov    rdi,rbx
  0127e:    	mov    rsi,r12
  01281: b5 	movabs r8,0x55b5b07d68a8
  0128b: b5 	movabs rax,0x55b5b0091aa0
  01295:    	call   rax
  01297:    	movq   xmm3,QWORD PTR [rsp]
  0129c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a2:    	add    rsp,0x10
  012a6: b5 	movabs r13,0x55b5b07d68b0
  012b0:    	test   rax,rax
  012b3:    	je     0xfffd5653
  012b9:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  012bd:    	mov    rdi,QWORD PTR [rbp-0x50]
  012c1: 00 	test   rdi,0x7
  012c8:    	jne    0x2e7d3
  012ce:    	cmp    DWORD PTR [rdi+0x4],0x28
  012d2:    	jne    0x2e7d3
  012d8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd745e],0x26        # 0xfffd873d
  012df:    	jne    0x2e7d3
  012e5:    	sub    rsp,0x10
  012e9:    	movq   QWORD PTR [rsp],xmm3
  012ee:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012fd:    	mov    QWORD PTR [rsp-0x38],rcx
  01302:    	mov    rax,QWORD PTR [rbx]
  01305:    	lea    rsi,[rsp-0x18]
  0130a:    	mov    QWORD PTR [rsi],rax
  0130d:    	mov    QWORD PTR [rbx],rsi
  01310:    	mov    rax,QWORD PTR [rbp-0x50]
  01314:    	mov    QWORD PTR [rsp-0x38],rax
  01319: 00 	mov    rdi,0x0
  01320: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01329: 07 	movabs rax,0x1000700000044
  01333:    	mov    QWORD PTR [rsp-0x28],rax
  01338: b5 	movabs r13,0x55b5b07ceca0
  01342:    	call   0xfffd9082
  01347:    	lea    rdi,[rbp-0x8]
  0134b:    	mov    QWORD PTR [rbx],rdi
  0134e:    	movq   xmm3,QWORD PTR [rsp]
  01353:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01359:    	add    rsp,0x10
  0135d: b5 	movabs r13,0x55b5b07d68d0
  01367:    	test   rax,rax
  0136a:    	je     0xfffd5653
  01370:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01374:    	sub    rsp,0x10
  01378:    	movq   QWORD PTR [rsp],xmm3
  0137d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01383:    	mov    rdx,QWORD PTR [rbp-0x30]
  01387:    	mov    rcx,QWORD PTR [rbp-0x40]
  0138b:    	mov    r8,QWORD PTR [rbp-0x48]
  0138f:    	mov    rdi,rbx
  01392:    	mov    rsi,r12
  01395: b5 	movabs rax,0x55b5b0091bd0
  0139f:    	call   rax
  013a1:    	movq   xmm3,QWORD PTR [rsp]
  013a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ac:    	add    rsp,0x10
  013b0: b5 	movabs r13,0x55b5b07d68f0
  013ba:    	test   rax,rax
  013bd:    	je     0xfffd5653
:00104 %3 = 1: i32
  013c3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  013cb: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  013d3:    	sub    rsp,0x10
  013d7:    	movq   QWORD PTR [rsp],xmm3
  013dc:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e2:    	mov    rdx,QWORD PTR [rbp-0x30]
  013e6:    	mov    rcx,QWORD PTR [rbp-0x50]
  013ea:    	mov    rdi,rbx
  013ed:    	mov    rsi,r12
  013f0: b5 	movabs r8,0x55b5b07d6918
  013fa: b5 	movabs rax,0x55b5b0091aa0
  01404:    	call   rax
  01406:    	movq   xmm3,QWORD PTR [rsp]
  0140b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01411:    	add    rsp,0x10
  01415: b5 	movabs r13,0x55b5b07d6920
  0141f:    	test   rax,rax
  01422:    	je     0xfffd5653
  01428:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  0142c: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01434:    	sub    rsp,0x10
  01438:    	movq   QWORD PTR [rsp],xmm3
  0143d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01443:    	mov    rdx,QWORD PTR [rbp-0x30]
  01447:    	mov    rcx,QWORD PTR [rbp-0x58]
  0144b:    	mov    rdi,rbx
  0144e:    	mov    rsi,r12
  01451: b5 	movabs r8,0x55b5b07d6938
  0145b: b5 	movabs rax,0x55b5b0091aa0
  01465:    	call   rax
  01467:    	movq   xmm3,QWORD PTR [rsp]
  0146c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01472:    	add    rsp,0x10
  01476: b5 	movabs r13,0x55b5b07d6940
  01480:    	test   rax,rax
  01483:    	je     0xfffd5653
  01489:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  0148d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01491: 00 	test   rdi,0x7
  01498:    	jne    0x2e7e2
  0149e:    	cmp    DWORD PTR [rdi+0x4],0x28
  014a2:    	jne    0x2e7e2
  014a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd728e],0x26        # 0xfffd873d
  014af:    	jne    0x2e7e2
  014b5:    	sub    rsp,0x10
  014b9:    	movq   QWORD PTR [rsp],xmm3
  014be:    	movq   QWORD PTR [rsp+0x8],xmm4
  014c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014cd:    	mov    QWORD PTR [rsp-0x38],rcx
  014d2:    	mov    rax,QWORD PTR [rbx]
  014d5:    	lea    rsi,[rsp-0x18]
  014da:    	mov    QWORD PTR [rsi],rax
  014dd:    	mov    QWORD PTR [rbx],rsi
  014e0:    	mov    rax,QWORD PTR [rbp-0x50]
  014e4:    	mov    QWORD PTR [rsp-0x38],rax
  014e9: 00 	mov    rdi,0x1
  014f0:    	lea    r8,[rsp-0x40]
  014f5:    	mov    rax,QWORD PTR [rbp-0x58]
  014f9:    	mov    QWORD PTR [r8],rax
  014fc:    	sub    r8,0x8
  01500: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01509: 09 	movabs rax,0x900000041
  01513:    	mov    QWORD PTR [rsp-0x28],rax
  01518: b5 	movabs r13,0x55b5b07a1dd0
  01522:    	call   0xfffe26c5
  01527:    	lea    rdi,[rbp-0x8]
  0152b:    	mov    QWORD PTR [rbx],rdi
  0152e:    	movq   xmm3,QWORD PTR [rsp]
  01533:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01539:    	add    rsp,0x10
  0153d: b5 	movabs r13,0x55b5b07d6960
  01547:    	test   rax,rax
  0154a:    	je     0xfffd5653
  01550:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01554:    	sub    rsp,0x10
  01558:    	movq   QWORD PTR [rsp],xmm3
  0155d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01563:    	mov    rdx,QWORD PTR [rbp-0x30]
  01567:    	mov    rcx,QWORD PTR [rbp-0x40]
  0156b:    	mov    r8,QWORD PTR [rbp-0x48]
  0156f:    	mov    rdi,rbx
  01572:    	mov    rsi,r12
  01575: b5 	movabs rax,0x55b5b0091bd0
  0157f:    	call   rax
  01581:    	movq   xmm3,QWORD PTR [rsp]
  01586:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0158c:    	add    rsp,0x10
  01590: b5 	movabs r13,0x55b5b07d6980
  0159a:    	test   rax,rax
  0159d:    	je     0xfffd5653
:00113 %3 = 1: i32
  015a3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  015ab: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  015b3:    	sub    rsp,0x10
  015b7:    	movq   QWORD PTR [rsp],xmm3
  015bc:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c2:    	mov    rdx,QWORD PTR [rbp-0x30]
  015c6:    	mov    rcx,QWORD PTR [rbp-0x50]
  015ca:    	mov    rdi,rbx
  015cd:    	mov    rsi,r12
  015d0: b5 	movabs r8,0x55b5b07d69a8
  015da: b5 	movabs rax,0x55b5b0091aa0
  015e4:    	call   rax
  015e6:    	movq   xmm3,QWORD PTR [rsp]
  015eb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015f1:    	add    rsp,0x10
  015f5: b5 	movabs r13,0x55b5b07d69b0
  015ff:    	test   rax,rax
  01602:    	je     0xfffd5653
  01608:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  0160c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01610: 00 	test   rdi,0x7
  01617:    	jne    0x2e7f1
  0161d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01621:    	jne    0x2e7f1
  01627: 26 	cmp    DWORD PTR [rip+0xfffffffffffd710f],0x26        # 0xfffd873d
  0162e:    	jne    0x2e7f1
  01634:    	sub    rsp,0x10
  01638:    	movq   QWORD PTR [rsp],xmm3
  0163d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01643: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0164c:    	mov    QWORD PTR [rsp-0x38],rcx
  01651:    	mov    rax,QWORD PTR [rbx]
  01654:    	lea    rsi,[rsp-0x18]
  01659:    	mov    QWORD PTR [rsi],rax
  0165c:    	mov    QWORD PTR [rbx],rsi
  0165f:    	mov    rax,QWORD PTR [rbp-0x50]
  01663:    	mov    QWORD PTR [rsp-0x38],rax
  01668: 00 	mov    rdi,0x0
  0166f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01678: 07 	movabs rax,0x1000700000044
  01682:    	mov    QWORD PTR [rsp-0x28],rax
  01687: b5 	movabs r13,0x55b5b07ceca0
  01691:    	call   0xfffd9082
  01696:    	lea    rdi,[rbp-0x8]
  0169a:    	mov    QWORD PTR [rbx],rdi
  0169d:    	movq   xmm3,QWORD PTR [rsp]
  016a2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016a8:    	add    rsp,0x10
  016ac: b5 	movabs r13,0x55b5b07d69d0
  016b6:    	test   rax,rax
  016b9:    	je     0xfffd5653
  016bf:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  016c3:    	sub    rsp,0x10
  016c7:    	movq   QWORD PTR [rsp],xmm3
  016cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  016d2:    	mov    rdx,QWORD PTR [rbp-0x30]
  016d6:    	mov    rcx,QWORD PTR [rbp-0x40]
  016da:    	mov    r8,QWORD PTR [rbp-0x48]
  016de:    	mov    rdi,rbx
  016e1:    	mov    rsi,r12
  016e4: b5 	movabs rax,0x55b5b0091bd0
  016ee:    	call   rax
  016f0:    	movq   xmm3,QWORD PTR [rsp]
  016f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016fb:    	add    rsp,0x10
  016ff: b5 	movabs r13,0x55b5b07d69f0
  01709:    	test   rax,rax
  0170c:    	je     0xfffd5653
:00120 %3 = %4
  01712:    	mov    rax,QWORD PTR [rbp-0x48]
  01716:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  0171a:    	mov    rax,QWORD PTR [rbp-0x40]
  0171e:    	leave  
  0171f:    	ret    
:00088 %3 = 0: i32
  01720: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01728: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01730:    	sub    rsp,0x20
  01734:    	movq   QWORD PTR [rsp],xmm2
  01739:    	movq   QWORD PTR [rsp+0x8],xmm3
  0173f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01745:    	movq   QWORD PTR [rsp+0x18],xmm5
  0174b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0174f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01753:    	mov    rdi,rbx
  01756:    	mov    rsi,r12
  01759: b5 	movabs r8,0x55b5b07d6818
  01763: b5 	movabs rax,0x55b5b0091aa0
  0176d:    	call   rax
  0176f:    	movq   xmm2,QWORD PTR [rsp]
  01774:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0177a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01780:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01786:    	add    rsp,0x20
  0178a: b5 	movabs r13,0x55b5b07d6820
  01794:    	test   rax,rax
  01797:    	je     0xfffd5653
  0179d:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  017a1: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  017a9:    	sub    rsp,0x20
  017ad:    	movq   QWORD PTR [rsp],xmm3
  017b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  017b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  017be:    	mov    rdx,QWORD PTR [rbp-0x30]
  017c2:    	mov    rcx,QWORD PTR [rbp-0x58]
  017c6:    	mov    rdi,rbx
  017c9:    	mov    rsi,r12
  017cc: b5 	movabs r8,0x55b5b07d6838
  017d6: b5 	movabs rax,0x55b5b0091aa0
  017e0:    	call   rax
  017e2:    	movq   xmm3,QWORD PTR [rsp]
  017e7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ed:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017f3:    	add    rsp,0x20
  017f7: b5 	movabs r13,0x55b5b07d6840
  01801:    	test   rax,rax
  01804:    	je     0xfffd5653
  0180a:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0180e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01812: 00 	test   rdi,0x7
  01819:    	jne    0x2e84b
  0181f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01823:    	jne    0x2e84b
  01829: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6f0d],0x26        # 0xfffd873d
  01830:    	jne    0x2e84b
  01836:    	sub    rsp,0x10
  0183a:    	movq   QWORD PTR [rsp],xmm3
  0183f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01845: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0184e:    	mov    QWORD PTR [rsp-0x38],rcx
  01853:    	mov    rax,QWORD PTR [rbx]
  01856:    	lea    rsi,[rsp-0x18]
  0185b:    	mov    QWORD PTR [rsi],rax
  0185e:    	mov    QWORD PTR [rbx],rsi
  01861:    	mov    rax,QWORD PTR [rbp-0x50]
  01865:    	mov    QWORD PTR [rsp-0x38],rax
  0186a: 00 	mov    rdi,0x1
  01871:    	lea    r8,[rsp-0x40]
  01876:    	mov    rax,QWORD PTR [rbp-0x58]
  0187a:    	mov    QWORD PTR [r8],rax
  0187d:    	sub    r8,0x8
  01881: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0188a: 09 	movabs rax,0x900000041
  01894:    	mov    QWORD PTR [rsp-0x28],rax
  01899: b5 	movabs r13,0x55b5b07a1dd0
  018a3:    	call   0xfffe26c5
  018a8:    	lea    rdi,[rbp-0x8]
  018ac:    	mov    QWORD PTR [rbx],rdi
  018af:    	movq   xmm3,QWORD PTR [rsp]
  018b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018ba:    	add    rsp,0x10
  018be: b5 	movabs r13,0x55b5b07d6860
  018c8:    	test   rax,rax
  018cb:    	je     0xfffd5653
  018d1:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  018d5:    	sub    rsp,0x10
  018d9:    	movq   QWORD PTR [rsp],xmm3
  018de:    	movq   QWORD PTR [rsp+0x8],xmm4
  018e4:    	mov    rdx,QWORD PTR [rbp-0x30]
  018e8:    	mov    rcx,QWORD PTR [rbp-0x40]
  018ec:    	mov    r8,QWORD PTR [rbp-0x48]
  018f0:    	mov    rdi,rbx
  018f3:    	mov    rsi,r12
  018f6: b5 	movabs rax,0x55b5b0091bd0
  01900:    	call   rax
  01902:    	movq   xmm3,QWORD PTR [rsp]
  01907:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0190d:    	add    rsp,0x10
  01911: b5 	movabs r13,0x55b5b07d6880
  0191b:    	test   rax,rax
  0191e:    	je     0xfffd5653
:00097 %3 = 0: i32
  01924: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  0192c: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01934:    	sub    rsp,0x10
  01938:    	movq   QWORD PTR [rsp],xmm3
  0193d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01943:    	mov    rdx,QWORD PTR [rbp-0x30]
  01947:    	mov    rcx,QWORD PTR [rbp-0x50]
  0194b:    	mov    rdi,rbx
  0194e:    	mov    rsi,r12
  01951: b5 	movabs r8,0x55b5b07d68a8
  0195b: b5 	movabs rax,0x55b5b0091aa0
  01965:    	call   rax
  01967:    	movq   xmm3,QWORD PTR [rsp]
  0196c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01972:    	add    rsp,0x10
  01976: b5 	movabs r13,0x55b5b07d68b0
  01980:    	test   rax,rax
  01983:    	je     0xfffd5653
  01989:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0198d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01991: 00 	test   rdi,0x7
  01998:    	jne    0x2e85a
  0199e:    	cmp    DWORD PTR [rdi+0x4],0x28
  019a2:    	jne    0x2e85a
  019a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6d8e],0x26        # 0xfffd873d
  019af:    	jne    0x2e85a
  019b5:    	sub    rsp,0x10
  019b9:    	movq   QWORD PTR [rsp],xmm3
  019be:    	movq   QWORD PTR [rsp+0x8],xmm4
  019c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019cd:    	mov    QWORD PTR [rsp-0x38],rcx
  019d2:    	mov    rax,QWORD PTR [rbx]
  019d5:    	lea    rsi,[rsp-0x18]
  019da:    	mov    QWORD PTR [rsi],rax
  019dd:    	mov    QWORD PTR [rbx],rsi
  019e0:    	mov    rax,QWORD PTR [rbp-0x50]
  019e4:    	mov    QWORD PTR [rsp-0x38],rax
  019e9: 00 	mov    rdi,0x0
  019f0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019f9: 07 	movabs rax,0x1000700000044
  01a03:    	mov    QWORD PTR [rsp-0x28],rax
  01a08: b5 	movabs r13,0x55b5b07ceca0
  01a12:    	call   0xfffd9082
  01a17:    	lea    rdi,[rbp-0x8]
  01a1b:    	mov    QWORD PTR [rbx],rdi
  01a1e:    	movq   xmm3,QWORD PTR [rsp]
  01a23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a29:    	add    rsp,0x10
  01a2d: b5 	movabs r13,0x55b5b07d68d0
  01a37:    	test   rax,rax
  01a3a:    	je     0xfffd5653
  01a40:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a44:    	sub    rsp,0x10
  01a48:    	movq   QWORD PTR [rsp],xmm3
  01a4d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a53:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a57:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a5b:    	mov    r8,QWORD PTR [rbp-0x48]
  01a5f:    	mov    rdi,rbx
  01a62:    	mov    rsi,r12
  01a65: b5 	movabs rax,0x55b5b0091bd0
  01a6f:    	call   rax
  01a71:    	movq   xmm3,QWORD PTR [rsp]
  01a76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a7c:    	add    rsp,0x10
  01a80: b5 	movabs r13,0x55b5b07d68f0
  01a8a:    	test   rax,rax
  01a8d:    	je     0xfffd5653
:00104 %3 = 1: i32
  01a93: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a9b: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01aa3:    	sub    rsp,0x10
  01aa7:    	movq   QWORD PTR [rsp],xmm3
  01aac:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ab2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ab6:    	mov    rcx,QWORD PTR [rbp-0x50]
  01aba:    	mov    rdi,rbx
  01abd:    	mov    rsi,r12
  01ac0: b5 	movabs r8,0x55b5b07d6918
  01aca: b5 	movabs rax,0x55b5b0091aa0
  01ad4:    	call   rax
  01ad6:    	movq   xmm3,QWORD PTR [rsp]
  01adb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae1:    	add    rsp,0x10
  01ae5: b5 	movabs r13,0x55b5b07d6920
  01aef:    	test   rax,rax
  01af2:    	je     0xfffd5653
  01af8:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01afc: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01b04:    	sub    rsp,0x10
  01b08:    	movq   QWORD PTR [rsp],xmm3
  01b0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b13:    	mov    rdx,QWORD PTR [rbp-0x30]
  01b17:    	mov    rcx,QWORD PTR [rbp-0x58]
  01b1b:    	mov    rdi,rbx
  01b1e:    	mov    rsi,r12
  01b21: b5 	movabs r8,0x55b5b07d6938
  01b2b: b5 	movabs rax,0x55b5b0091aa0
  01b35:    	call   rax
  01b37:    	movq   xmm3,QWORD PTR [rsp]
  01b3c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b42:    	add    rsp,0x10
  01b46: b5 	movabs r13,0x55b5b07d6940
  01b50:    	test   rax,rax
  01b53:    	je     0xfffd5653
  01b59:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b5d:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b61: 00 	test   rdi,0x7
  01b68:    	jne    0x2e869
  01b6e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b72:    	jne    0x2e869
  01b78: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6bbe],0x26        # 0xfffd873d
  01b7f:    	jne    0x2e869
  01b85:    	sub    rsp,0x10
  01b89:    	movq   QWORD PTR [rsp],xmm3
  01b8e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b9d:    	mov    QWORD PTR [rsp-0x38],rcx
  01ba2:    	mov    rax,QWORD PTR [rbx]
  01ba5:    	lea    rsi,[rsp-0x18]
  01baa:    	mov    QWORD PTR [rsi],rax
  01bad:    	mov    QWORD PTR [rbx],rsi
  01bb0:    	mov    rax,QWORD PTR [rbp-0x50]
  01bb4:    	mov    QWORD PTR [rsp-0x38],rax
  01bb9: 00 	mov    rdi,0x1
  01bc0:    	lea    r8,[rsp-0x40]
  01bc5:    	mov    rax,QWORD PTR [rbp-0x58]
  01bc9:    	mov    QWORD PTR [r8],rax
  01bcc:    	sub    r8,0x8
  01bd0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bd9: 09 	movabs rax,0x900000041
  01be3:    	mov    QWORD PTR [rsp-0x28],rax
  01be8: b5 	movabs r13,0x55b5b07a1dd0
  01bf2:    	call   0xfffe26c5
  01bf7:    	lea    rdi,[rbp-0x8]
  01bfb:    	mov    QWORD PTR [rbx],rdi
  01bfe:    	movq   xmm3,QWORD PTR [rsp]
  01c03:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c09:    	add    rsp,0x10
  01c0d: b5 	movabs r13,0x55b5b07d6960
  01c17:    	test   rax,rax
  01c1a:    	je     0xfffd5653
  01c20:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01c24:    	sub    rsp,0x10
  01c28:    	movq   QWORD PTR [rsp],xmm3
  01c2d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c33:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c37:    	mov    rcx,QWORD PTR [rbp-0x40]
  01c3b:    	mov    r8,QWORD PTR [rbp-0x48]
  01c3f:    	mov    rdi,rbx
  01c42:    	mov    rsi,r12
  01c45: b5 	movabs rax,0x55b5b0091bd0
  01c4f:    	call   rax
  01c51:    	movq   xmm3,QWORD PTR [rsp]
  01c56:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c5c:    	add    rsp,0x10
  01c60: b5 	movabs r13,0x55b5b07d6980
  01c6a:    	test   rax,rax
  01c6d:    	je     0xfffd5653
:00113 %3 = 1: i32
  01c73: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c7b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c83:    	sub    rsp,0x10
  01c87:    	movq   QWORD PTR [rsp],xmm3
  01c8c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c92:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c96:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c9a:    	mov    rdi,rbx
  01c9d:    	mov    rsi,r12
  01ca0: b5 	movabs r8,0x55b5b07d69a8
  01caa: b5 	movabs rax,0x55b5b0091aa0
  01cb4:    	call   rax
  01cb6:    	movq   xmm3,QWORD PTR [rsp]
  01cbb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01cc1:    	add    rsp,0x10
  01cc5: b5 	movabs r13,0x55b5b07d69b0
  01ccf:    	test   rax,rax
  01cd2:    	je     0xfffd5653
  01cd8:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01cdc:    	mov    rdi,QWORD PTR [rbp-0x50]
  01ce0: 00 	test   rdi,0x7
  01ce7:    	jne    0x2e878
  01ced:    	cmp    DWORD PTR [rdi+0x4],0x28
  01cf1:    	jne    0x2e878
  01cf7: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6a3f],0x26        # 0xfffd873d
  01cfe:    	jne    0x2e878
  01d04:    	sub    rsp,0x10
  01d08:    	movq   QWORD PTR [rsp],xmm3
  01d0d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d13: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d1c:    	mov    QWORD PTR [rsp-0x38],rcx
  01d21:    	mov    rax,QWORD PTR [rbx]
  01d24:    	lea    rsi,[rsp-0x18]
  01d29:    	mov    QWORD PTR [rsi],rax
  01d2c:    	mov    QWORD PTR [rbx],rsi
  01d2f:    	mov    rax,QWORD PTR [rbp-0x50]
  01d33:    	mov    QWORD PTR [rsp-0x38],rax
  01d38: 00 	mov    rdi,0x0
  01d3f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d48: 07 	movabs rax,0x1000700000044
  01d52:    	mov    QWORD PTR [rsp-0x28],rax
  01d57: b5 	movabs r13,0x55b5b07ceca0
  01d61:    	call   0xfffd9082
  01d66:    	lea    rdi,[rbp-0x8]
  01d6a:    	mov    QWORD PTR [rbx],rdi
  01d6d:    	movq   xmm3,QWORD PTR [rsp]
  01d72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d78:    	add    rsp,0x10
  01d7c: b5 	movabs r13,0x55b5b07d69d0
  01d86:    	test   rax,rax
  01d89:    	je     0xfffd5653
  01d8f:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d93:    	sub    rsp,0x10
  01d97:    	movq   QWORD PTR [rsp],xmm3
  01d9c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01da2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01da6:    	mov    rcx,QWORD PTR [rbp-0x40]
  01daa:    	mov    r8,QWORD PTR [rbp-0x48]
  01dae:    	mov    rdi,rbx
  01db1:    	mov    rsi,r12
  01db4: b5 	movabs rax,0x55b5b0091bd0
  01dbe:    	call   rax
  01dc0:    	movq   xmm3,QWORD PTR [rsp]
  01dc5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01dcb:    	add    rsp,0x10
  01dcf: b5 	movabs r13,0x55b5b07d69f0
  01dd9:    	test   rax,rax
  01ddc:    	je     0xfffd5653
:00120 %3 = %4
  01de2:    	mov    rax,QWORD PTR [rbp-0x48]
  01de6:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01dea:    	mov    rax,QWORD PTR [rbp-0x40]
  01dee:    	leave  
  01def:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55b5b07d6270
<== finished compile. elapsed:177.3µs
offset:Pos(182596) code: 7622 bytes  data: 346 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	je     0x4a
  00014:    	jl     0x1f
  0001a:    	jmp    0x2c923
  0001f:    	jmp    0x2c923
  00024:    	mov    eax,0x2
  00029:    	sub    eax,edx
  0002b:    	test   rax,rax
  0002e:    	je     0x4a
  00034:    	lea    rdi,[rbp-0x40]
  00038: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00040:    	sub    rax,0x1
  00044:    	jne    0x38
  0004a: 00 	mov    rax,0x4
  00051:    	mov    QWORD PTR [rbp-0x40],rax
  00055:    	mov    QWORD PTR [rbp-0x48],rax
  00059:    	mov    QWORD PTR [rbp-0x50],rax
  0005d:    	mov    QWORD PTR [rbp-0x58],rax
  00061:    	mov    QWORD PTR [rbp-0x60],rax
  00065:    	mov    QWORD PTR [rbp-0x68],rax
  00069:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x2c932
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x32
  0007e:    	jne    0x2c932
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  00084: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  0008c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd6759]        # 0xfffd67ec
  00093: 00 	cmp    rax,QWORD PTR [rip+0x1d42]        # 0x1ddc
  0009a:    	jne    0x2c941
  000a0: 00 	mov    rax,QWORD PTR [rip+0x1d25]        # 0x1dcc
  000a7:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  000ab:    	mov    rdi,QWORD PTR [rbp-0x38]
  000af: 00 	test   rdi,0x7
  000b6:    	jne    0x2c987
  000bc:    	cmp    DWORD PTR [rdi+0x4],0x28
  000c0:    	jne    0x2c987
  000c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffd670c],0x26        # 0xfffd67d9
  000cd:    	jne    0x2c987
  000d3:    	mov    esi,DWORD PTR [rip+0x1d0f]        # 0x1de8
  000d9:    	cmp    esi,0xffffffff
  000dc:    	je     0x2c996
  000e2:    	cmp    WORD PTR [rdi+0x2],0x3
  000e7:    	jne    0x100
  000ed:    	cmp    esi,0x6
  000f0:    	jge    0x100
  000f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000fb:    	jmp    0x10c
  00100: b5 	movabs rax,0x55b5b00a3ef0
  0010a:    	call   rax
  0010c:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  00110:    	mov    rdi,QWORD PTR [rbp-0x38]
  00114: 00 	test   rdi,0x7
  0011b:    	jne    0x2c9bf
  00121:    	cmp    DWORD PTR [rdi+0x4],0x28
  00125:    	jne    0x2c9bf
  0012b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd66a7],0x26        # 0xfffd67d9
  00132:    	jne    0x2c9bf
  00138:    	mov    esi,DWORD PTR [rip+0x1cb2]        # 0x1df0
  0013e:    	cmp    esi,0xffffffff
  00141:    	je     0x2c9ce
  00147:    	cmp    WORD PTR [rdi+0x2],0x3
  0014c:    	jne    0x165
  00152:    	cmp    esi,0x6
  00155:    	jge    0x165
  0015b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00160:    	jmp    0x171
  00165: b5 	movabs rax,0x55b5b00a3ef0
  0016f:    	call   rax
  00171:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00175:    	mov    rdi,QWORD PTR [rbp-0x38]
  00179: 00 	test   rdi,0x7
  00180:    	jne    0x2c9f7
  00186:    	cmp    DWORD PTR [rdi+0x4],0x28
  0018a:    	jne    0x2c9f7
  00190: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6642],0x26        # 0xfffd67d9
  00197:    	jne    0x2c9f7
  0019d:    	mov    esi,DWORD PTR [rip+0x1c55]        # 0x1df8
  001a3:    	cmp    esi,0xffffffff
  001a6:    	je     0x2ca06
  001ac:    	cmp    WORD PTR [rdi+0x2],0x3
  001b1:    	jne    0x1ca
  001b7:    	cmp    esi,0x6
  001ba:    	jge    0x1ca
  001c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001c5:    	jmp    0x1d6
  001ca: b5 	movabs rax,0x55b5b00a3ef0
  001d4:    	call   rax
  001d6:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001da:    	mov    rdi,QWORD PTR [rbp-0x50]
  001de: 00 	test   rdi,0x7
  001e5:    	jne    0x2ca2f
  001eb:    	cmp    DWORD PTR [rdi+0x4],0x29
  001ef:    	jne    0x2ca2f
  001f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd65dd],0x26        # 0xfffd67d9
  001fc:    	jne    0x2ca2f
  00202: 00 	mov    r9,0x0
  00209:    	mov    rdx,rdi
  0020c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00215:    	mov    QWORD PTR [rsp-0x38],rcx
  0021a:    	mov    rax,QWORD PTR [rbx]
  0021d:    	lea    rsi,[rsp-0x18]
  00222:    	mov    QWORD PTR [rsi],rax
  00225:    	mov    QWORD PTR [rbx],rsi
  00228:    	lea    rcx,[rbp-0x58]
  0022c: 00 	mov    r8,0x3
  00233:    	call   0x2ca3e
  00238:    	lea    rdi,[rbp-0x8]
  0023c:    	mov    QWORD PTR [rbx],rdi
  0023f: b5 	movabs r13,0x55b5b07d6350
  00249:    	test   rax,rax
  0024c:    	je     0xfffd36ef
  00252:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  00256:    	mov    rdx,QWORD PTR [rbp-0x30]
  0025a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0025e:    	mov    r8,QWORD PTR [rbp-0x48]
  00262:    	mov    rdi,rbx
  00265:    	mov    rsi,r12
  00268: b5 	movabs rax,0x55b5b0091bd0
  00272:    	call   rax
  00274: b5 	movabs r13,0x55b5b07d6370
  0027e:    	test   rax,rax
  00281:    	je     0xfffd36ef
:00016 %3 = 1: i32
  00287: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  0028f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd6556]        # 0xfffd67ec
  00296: 00 	cmp    rax,QWORD PTR [rip+0x1b6f]        # 0x1e0c
  0029d:    	jne    0x2ca70
  002a3: 00 	mov    rax,QWORD PTR [rip+0x1b52]        # 0x1dfc
  002aa:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  002ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b66]        # 0x1e1c
  002b6: 00 	movabs rax,0x8000000000000002
  002c0:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002c4: 00 	movq   xmm3,QWORD PTR [rip+0x1b60]        # 0x1e2c
  002cc: 00 	movabs rax,0x8000000000000002
  002d6:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002da: 00 	movq   xmm4,QWORD PTR [rip+0x1b5a]        # 0x1e3c
  002e2: 00 	movabs rax,0x8000000000000002
  002ec:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f0:    	mov    rdi,QWORD PTR [rbp-0x50]
  002f4: 00 	test   rdi,0x7
  002fb:    	jne    0x2cab6
  00301:    	cmp    DWORD PTR [rdi+0x4],0x29
  00305:    	jne    0x2cab6
  0030b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd64c7],0x26        # 0xfffd67d9
  00312:    	jne    0x2cab6
  00318: 00 	mov    r9,0x0
  0031f:    	sub    rsp,0x20
  00323:    	movq   QWORD PTR [rsp],xmm2
  00328:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00334:    	mov    rdx,rdi
  00337: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00340:    	mov    QWORD PTR [rsp-0x38],rcx
  00345:    	mov    rax,QWORD PTR [rbx]
  00348:    	lea    rsi,[rsp-0x18]
  0034d:    	mov    QWORD PTR [rsi],rax
  00350:    	mov    QWORD PTR [rbx],rsi
  00353:    	lea    rcx,[rbp-0x58]
  00357: 00 	mov    r8,0x3
  0035e:    	call   0x2cac5
  00363:    	lea    rdi,[rbp-0x8]
  00367:    	mov    QWORD PTR [rbx],rdi
  0036a:    	movq   xmm2,QWORD PTR [rsp]
  0036f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00375:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0037b:    	add    rsp,0x20
  0037f: b5 	movabs r13,0x55b5b07d63e0
  00389:    	test   rax,rax
  0038c:    	je     0xfffd36ef
  00392:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  00396:    	sub    rsp,0x20
  0039a:    	movq   QWORD PTR [rsp],xmm2
  0039f:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  003af:    	mov    rcx,QWORD PTR [rbp-0x40]
  003b3:    	mov    r8,QWORD PTR [rbp-0x48]
  003b7:    	mov    rdi,rbx
  003ba:    	mov    rsi,r12
  003bd: b5 	movabs rax,0x55b5b0091bd0
  003c7:    	call   rax
  003c9:    	movq   xmm2,QWORD PTR [rsp]
  003ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003da:    	add    rsp,0x20
  003de: b5 	movabs r13,0x55b5b07d6400
  003e8:    	test   rax,rax
  003eb:    	je     0xfffd36ef
:00025 %3 = %2.call x()                     [Vec]
  003f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  003f5: 00 	test   rdi,0x7
  003fc:    	jne    0x2caf7
  00402:    	cmp    DWORD PTR [rdi+0x4],0x28
  00406:    	jne    0x2caf7
  0040c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd63c6],0x26        # 0xfffd67d9
  00413:    	jne    0x2caf7
  00419:    	mov    esi,DWORD PTR [rip+0x1a29]        # 0x1e48
  0041f:    	cmp    esi,0xffffffff
  00422:    	je     0x2cb06
  00428:    	cmp    WORD PTR [rdi+0x2],0x3
  0042d:    	jne    0x446
  00433:    	cmp    esi,0x6
  00436:    	jge    0x446
  0043c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441:    	jmp    0x47c
  00446:    	sub    rsp,0x20
  0044a:    	movq   QWORD PTR [rsp],xmm2
  0044f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00455:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045b: b5 	movabs rax,0x55b5b00a3ef0
  00465:    	call   rax
  00467:    	movq   xmm2,QWORD PTR [rsp]
  0046c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00472:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00478:    	add    rsp,0x20
  0047c:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00480: 00 	movq   xmm5,QWORD PTR [rip+0x19c4]        # 0x1e4c
  00488: 99 	movabs rax,0xff1999999999999a
  00492:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00496:    	mov    rdi,QWORD PTR [rbp-0x40]
  0049a: 00 	test   rdi,0x1
  004a1:    	jne    0x2cb59
  004a7: 00 	test   rdi,0x2
  004ae:    	je     0x4ea
  004b4:    	xorps  xmm6,xmm6
  004b7: 00 	movabs rax,0x8000000000000002
  004c1:    	cmp    rdi,rax
  004c4:    	je     0x4fc
  004ca:    	mov    rax,rdi
  004cd:    	sar    rax,0x3f
  004d1:    	add    rax,0x2
  004d5:    	and    rdi,0xfffffffffffffffc
  004d9:    	or     rdi,rax
  004dc:    	rol    rdi,0x3d
  004e0:    	movq   xmm6,rdi
  004e5:    	jmp    0x4fc
  004ea:    	call   0xfffd3748
  004ef:    	test   rax,rax
  004f2:    	je     0x2cb59
  004f8:    	movq   xmm6,xmm0
  004fc:    	ucomisd xmm6,xmm5
  00500:    	jae    0x2cc5a
:00031 %3 = %2.call x()                     [Vec]
  00506:    	mov    rdi,QWORD PTR [rbp-0x38]
  0050a: 00 	test   rdi,0x7
  00511:    	jne    0x2cb68
  00517:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051b:    	jne    0x2cb68
  00521: 26 	cmp    DWORD PTR [rip+0xfffffffffffd62b1],0x26        # 0xfffd67d9
  00528:    	jne    0x2cb68
  0052e:    	mov    esi,DWORD PTR [rip+0x1924]        # 0x1e58
  00534:    	cmp    esi,0xffffffff
  00537:    	je     0x2cb77
  0053d:    	cmp    WORD PTR [rdi+0x2],0x3
  00542:    	jne    0x55b
  00548:    	cmp    esi,0x6
  0054b:    	jge    0x55b
  00551:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00556:    	jmp    0x59d
  0055b:    	sub    rsp,0x20
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576: b5 	movabs rax,0x55b5b00a3ef0
  00580:    	call   rax
  00582:    	movq   xmm2,QWORD PTR [rsp]
  00587:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00593:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00599:    	add    rsp,0x20
  0059d:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  005a1: 00 	movq   xmm5,QWORD PTR [rip+0x18b3]        # 0x1e5c
  005a9: 99 	movabs rax,0xff1999999999999e
  005b3:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  005bb: 00 	test   rdi,0x1
  005c2:    	jne    0x2cbd6
  005c8: 00 	test   rdi,0x2
  005cf:    	je     0x60b
  005d5:    	xorps  xmm6,xmm6
  005d8: 00 	movabs rax,0x8000000000000002
  005e2:    	cmp    rdi,rax
  005e5:    	je     0x61d
  005eb:    	mov    rax,rdi
  005ee:    	sar    rax,0x3f
  005f2:    	add    rax,0x2
  005f6:    	and    rdi,0xfffffffffffffffc
  005fa:    	or     rdi,rax
  005fd:    	rol    rdi,0x3d
  00601:    	movq   xmm6,rdi
  00606:    	jmp    0x61d
  0060b:    	call   0xfffd3748
  00610:    	test   rax,rax
  00613:    	je     0x2cbd6
  00619:    	movq   xmm6,xmm0
  0061d:    	ucomisd xmm6,xmm5
  00621:    	jbe    0x2cc73
:00037 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0062f:    	sub    rsp,0x20
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0064e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00652:    	mov    rdi,rbx
  00655:    	mov    rsi,r12
  00658: b5 	movabs r8,0x55b5b07d64d8
  00662: b5 	movabs rax,0x55b5b0091aa0
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00685:    	add    rsp,0x20
  00689: b5 	movabs r13,0x55b5b07d64e0
  00693:    	test   rax,rax
  00696:    	je     0xfffd36ef
  0069c:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  006a0: 00 	movq   xmm5,QWORD PTR [rip+0x17c4]        # 0x1e6c
  006a8: 00 	movabs rax,0xff80000000000002
  006b2:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006b6:    	mov    rdi,QWORD PTR [rbp-0x40]
  006ba: 00 	test   rdi,0x7
  006c1:    	jne    0x2cbe5
  006c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  006cb:    	jne    0x2cbe5
  006d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6101],0x26        # 0xfffd67d9
  006d8:    	jne    0x2cbe5
  006de:    	mov    esi,DWORD PTR [rip+0x1794]        # 0x1e78
  006e4:    	cmp    esi,0xffffffff
  006e7:    	je     0x2cbf4
  006ed:    	cmp    WORD PTR [rdi+0x2],0x3
  006f2:    	jne    0x70f
  006f8:    	cmp    esi,0x6
  006fb:    	jge    0x70f
  00701:    	mov    rax,QWORD PTR [rbp-0x48]
  00705:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0070a:    	jmp    0x768
  0070f:    	sub    rsp,0x20
  00713:    	movq   QWORD PTR [rsp],xmm2
  00718:    	movq   QWORD PTR [rsp+0x8],xmm3
  0071e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00724:    	movq   QWORD PTR [rsp+0x18],xmm5
  0072a:    	mov    rdx,QWORD PTR [rbp-0x48]
  0072e: b5 	movabs rax,0x55b5b00a4170
  00738:    	call   rax
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	add    rsp,0x20
  00755: b5 	movabs r13,0x55b5b07d6510
  0075f:    	test   rax,rax
  00762:    	je     0xfffd36ef
:00041 
:00043 br =>:00088
  00768:    	jmp    0x2d171
:00044 %3 = %2.call y()                     [Vec]
  0076d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00771: 00 	test   rdi,0x7
  00778:    	jne    0x2cc8c
  0077e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00782:    	jne    0x2cc8c
  00788: 26 	cmp    DWORD PTR [rip+0xfffffffffffd604a],0x26        # 0xfffd67d9
  0078f:    	jne    0x2cc8c
  00795:    	mov    esi,DWORD PTR [rip+0x16e5]        # 0x1e80
  0079b:    	cmp    esi,0xffffffff
  0079e:    	je     0x2cc9b
  007a4:    	cmp    WORD PTR [rdi+0x2],0x3
  007a9:    	jne    0x7c2
  007af:    	cmp    esi,0x6
  007b2:    	jge    0x7c2
  007b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007bd:    	jmp    0x804
  007c2:    	sub    rsp,0x20
  007c6:    	movq   QWORD PTR [rsp],xmm2
  007cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  007d1:    	movq   QWORD PTR [rsp+0x10],xmm4
  007d7:    	movq   QWORD PTR [rsp+0x18],xmm5
  007dd: b5 	movabs rax,0x55b5b00a3ef0
  007e7:    	call   rax
  007e9:    	movq   xmm2,QWORD PTR [rsp]
  007ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00800:    	add    rsp,0x20
  00804:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00808: 00 	movq   xmm5,QWORD PTR [rip+0x167c]        # 0x1e8c
  00810: 99 	movabs rax,0xff1999999999999a
  0081a:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0081e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00822: 00 	test   rdi,0x1
  00829:    	jne    0x2ccfa
  0082f: 00 	test   rdi,0x2
  00836:    	je     0x872
  0083c:    	xorps  xmm6,xmm6
  0083f: 00 	movabs rax,0x8000000000000002
  00849:    	cmp    rdi,rax
  0084c:    	je     0x884
  00852:    	mov    rax,rdi
  00855:    	sar    rax,0x3f
  00859:    	add    rax,0x2
  0085d:    	and    rdi,0xfffffffffffffffc
  00861:    	or     rdi,rax
  00864:    	rol    rdi,0x3d
  00868:    	movq   xmm6,rdi
  0086d:    	jmp    0x884
  00872:    	call   0xfffd3748
  00877:    	test   rax,rax
  0087a:    	je     0x2ccfa
  00880:    	movq   xmm6,xmm0
  00884:    	ucomisd xmm6,xmm5
  00888:    	jae    0x2ceb6
:00050 %3 = %2.call y()                     [<INVALID>]
  0088e: 01 	sub    DWORD PTR [rip+0x15ff],0x1        # 0x1e94
  00895:    	je     0x2cd18
  0089b:    	sub    rsp,0x20
  0089f:    	movq   QWORD PTR [rsp],xmm2
  008a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  008aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  008b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b6:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ba: b5 	movabs rax,0x55b5b009e670
  008c4:    	call   rax
  008c6:    	mov    r15d,eax
  008c9: 00 	cmp    r15d,DWORD PTR [rip+0x15cc]        # 0x1e9c
  008d0:    	jne    0x2cd3a
  008d6:    	mov    eax,DWORD PTR [rip+0xfffffffffffd5efd]        # 0xfffd67d9
  008dc:    	cmp    DWORD PTR [rip+0x15b6],eax        # 0x1e98
  008e2:    	jne    0x2cd3a
  008e8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008f1:    	mov    QWORD PTR [rsp-0x38],rcx
  008f6:    	mov    rax,QWORD PTR [rbx]
  008f9:    	lea    rsi,[rsp-0x18]
  008fe:    	mov    QWORD PTR [rsi],rax
  00901:    	mov    QWORD PTR [rbx],rsi
  00904:    	mov    rax,QWORD PTR [rbp-0x38]
  00908:    	mov    QWORD PTR [rsp-0x38],rax
  0090d: 00 	mov    rdi,0x0
  00914: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0091d: 00 	movabs rax,0x0
  00927:    	mov    QWORD PTR [rsp-0x28],rax
  0092c: 00 	movabs r13,0x0
  00936:    	call   0xfffd36bc
  0093b:    	lea    rdi,[rbp-0x8]
  0093f:    	mov    QWORD PTR [rbx],rdi
  00942:    	movq   xmm2,QWORD PTR [rsp]
  00947:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0094d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00953:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00959:    	add    rsp,0x20
  0095d:    	test   rax,rax
  00960:    	je     0x2cda6
  00966:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  0096a: 00 	movq   xmm5,QWORD PTR [rip+0x153a]        # 0x1eac
  00972: 99 	movabs rax,0xff1999999999999e
  0097c:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00980:    	mov    rdi,QWORD PTR [rbp-0x40]
  00984:    	mov    rsi,QWORD PTR [rbp-0x48]
  00988: 00 	test   rdi,0x1
  0098f:    	je     0x2cdb5
  00995: 00 	test   rsi,0x1
  0099c:    	je     0x2cdb5
  009a2:    	cmp    rdi,rsi
  009a5:    	jle    0x2cecf
:00056 %3 = 1: i32
  009ab: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009b3:    	sub    rsp,0x20
  009b7:    	movq   QWORD PTR [rsp],xmm2
  009bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  009c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  009c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ce:    	mov    rdx,QWORD PTR [rbp-0x30]
  009d2:    	mov    rcx,QWORD PTR [rbp-0x40]
  009d6:    	mov    rdi,rbx
  009d9:    	mov    rsi,r12
  009dc: b5 	movabs r8,0x55b5b07d6608
  009e6: b5 	movabs rax,0x55b5b0091aa0
  009f0:    	call   rax
  009f2:    	movq   xmm2,QWORD PTR [rsp]
  009f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a03:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a09:    	add    rsp,0x20
  00a0d: b5 	movabs r13,0x55b5b07d6610
  00a17:    	test   rax,rax
  00a1a:    	je     0xfffd36ef
  00a20:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a24: 00 	movq   xmm5,QWORD PTR [rip+0x1490]        # 0x1ebc
  00a2c: 00 	movabs rax,0xff80000000000002
  00a36:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a3a: 01 	sub    DWORD PTR [rip+0x1483],0x1        # 0x1ec4
  00a41:    	je     0x2ce19
  00a47:    	sub    rsp,0x20
  00a4b:    	movq   QWORD PTR [rsp],xmm2
  00a50:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a56:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a5c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a62:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a66: b5 	movabs rax,0x55b5b009e670
  00a70:    	call   rax
  00a72:    	mov    r15d,eax
  00a75: 00 	cmp    r15d,DWORD PTR [rip+0x1450]        # 0x1ecc
  00a7c:    	jne    0x2ce3b
  00a82:    	mov    eax,DWORD PTR [rip+0xfffffffffffd5d51]        # 0xfffd67d9
  00a88:    	cmp    DWORD PTR [rip+0x143a],eax        # 0x1ec8
  00a8e:    	jne    0x2ce3b
  00a94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a9d:    	mov    QWORD PTR [rsp-0x38],rcx
  00aa2:    	mov    rax,QWORD PTR [rbx]
  00aa5:    	lea    rsi,[rsp-0x18]
  00aaa:    	mov    QWORD PTR [rsi],rax
  00aad:    	mov    QWORD PTR [rbx],rsi
  00ab0:    	mov    rax,QWORD PTR [rbp-0x40]
  00ab4:    	mov    QWORD PTR [rsp-0x38],rax
  00ab9: 00 	mov    rdi,0x1
  00ac0:    	lea    r8,[rsp-0x40]
  00ac5:    	mov    rax,QWORD PTR [rbp-0x48]
  00ac9:    	mov    QWORD PTR [r8],rax
  00acc:    	sub    r8,0x8
  00ad0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ad9: 00 	movabs rax,0x0
  00ae3:    	mov    QWORD PTR [rsp-0x28],rax
  00ae8: 00 	movabs r13,0x0
  00af2:    	call   0xfffd36bc
  00af7:    	lea    rdi,[rbp-0x8]
  00afb:    	mov    QWORD PTR [rbx],rdi
  00afe:    	movq   xmm2,QWORD PTR [rsp]
  00b03:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b09:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b0f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b15:    	add    rsp,0x20
  00b19:    	test   rax,rax
  00b1c:    	je     0x2cea7
:00060 
:00062 br =>:00088
  00b22:    	jmp    0x2d18a
:00063 %3 = %2.call z()                     [Vec]
  00b27:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b2b: 00 	test   rdi,0x7
  00b32:    	jne    0x2cee8
  00b38:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b3c:    	jne    0x2cee8
  00b42: 26 	cmp    DWORD PTR [rip+0xfffffffffffd5c90],0x26        # 0xfffd67d9
  00b49:    	jne    0x2cee8
  00b4f:    	mov    esi,DWORD PTR [rip+0x137f]        # 0x1ed4
  00b55:    	cmp    esi,0xffffffff
  00b58:    	je     0x2cef7
  00b5e:    	cmp    WORD PTR [rdi+0x2],0x3
  00b63:    	jne    0xb7c
  00b69:    	cmp    esi,0x6
  00b6c:    	jge    0xb7c
  00b72:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b77:    	jmp    0xbbe
  00b7c:    	sub    rsp,0x20
  00b80:    	movq   QWORD PTR [rsp],xmm2
  00b85:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b8b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b91:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b97: b5 	movabs rax,0x55b5b00a3ef0
  00ba1:    	call   rax
  00ba3:    	movq   xmm2,QWORD PTR [rsp]
  00ba8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bb4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bba:    	add    rsp,0x20
  00bbe:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00bc2: 00 	movq   xmm5,QWORD PTR [rip+0x1312]        # 0x1edc
  00bca: 99 	movabs rax,0xff1999999999999a
  00bd4:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00bd8:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bdc: 00 	test   rdi,0x1
  00be3:    	jne    0x2cf56
  00be9: 00 	test   rdi,0x2
  00bf0:    	je     0xc2c
  00bf6:    	xorps  xmm6,xmm6
  00bf9: 00 	movabs rax,0x8000000000000002
  00c03:    	cmp    rdi,rax
  00c06:    	je     0xc3e
  00c0c:    	mov    rax,rdi
  00c0f:    	sar    rax,0x3f
  00c13:    	add    rax,0x2
  00c17:    	and    rdi,0xfffffffffffffffc
  00c1b:    	or     rdi,rax
  00c1e:    	rol    rdi,0x3d
  00c22:    	movq   xmm6,rdi
  00c27:    	jmp    0xc3e
  00c2c:    	call   0xfffd3748
  00c31:    	test   rax,rax
  00c34:    	je     0x2cf56
  00c3a:    	movq   xmm6,xmm0
  00c3e:    	ucomisd xmm6,xmm5
  00c42:    	jae    0x2d057
:00069 %3 = %2.call z()                     [Vec]
  00c48:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c4c: 00 	test   rdi,0x7
  00c53:    	jne    0x2cf65
  00c59:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c5d:    	jne    0x2cf65
  00c63: 26 	cmp    DWORD PTR [rip+0xfffffffffffd5b6f],0x26        # 0xfffd67d9
  00c6a:    	jne    0x2cf65
  00c70:    	mov    esi,DWORD PTR [rip+0x1272]        # 0x1ee8
  00c76:    	cmp    esi,0xffffffff
  00c79:    	je     0x2cf74
  00c7f:    	cmp    WORD PTR [rdi+0x2],0x3
  00c84:    	jne    0xc9d
  00c8a:    	cmp    esi,0x6
  00c8d:    	jge    0xc9d
  00c93:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c98:    	jmp    0xcdf
  00c9d:    	sub    rsp,0x20
  00ca1:    	movq   QWORD PTR [rsp],xmm2
  00ca6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cac:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cb2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cb8: b5 	movabs rax,0x55b5b00a3ef0
  00cc2:    	call   rax
  00cc4:    	movq   xmm2,QWORD PTR [rsp]
  00cc9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ccf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cd5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cdb:    	add    rsp,0x20
  00cdf:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00ce3: 00 	movq   xmm5,QWORD PTR [rip+0x1201]        # 0x1eec
  00ceb: 99 	movabs rax,0xff1999999999999e
  00cf5:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00cf9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00cfd: 00 	test   rdi,0x1
  00d04:    	jne    0x2cfd3
  00d0a: 00 	test   rdi,0x2
  00d11:    	je     0xd4d
  00d17:    	xorps  xmm6,xmm6
  00d1a: 00 	movabs rax,0x8000000000000002
  00d24:    	cmp    rdi,rax
  00d27:    	je     0xd5f
  00d2d:    	mov    rax,rdi
  00d30:    	sar    rax,0x3f
  00d34:    	add    rax,0x2
  00d38:    	and    rdi,0xfffffffffffffffc
  00d3c:    	or     rdi,rax
  00d3f:    	rol    rdi,0x3d
  00d43:    	movq   xmm6,rdi
  00d48:    	jmp    0xd5f
  00d4d:    	call   0xfffd3748
  00d52:    	test   rax,rax
  00d55:    	je     0x2cfd3
  00d5b:    	movq   xmm6,xmm0
  00d5f:    	ucomisd xmm6,xmm5
  00d63:    	jbe    0x2d070
:00075 %3 = 1: i32
  00d69: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d71:    	sub    rsp,0x20
  00d75:    	movq   QWORD PTR [rsp],xmm2
  00d7a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d80:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d86:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d8c:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d90:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d94:    	mov    rdi,rbx
  00d97:    	mov    rsi,r12
  00d9a: b5 	movabs r8,0x55b5b07d6738
  00da4: b5 	movabs rax,0x55b5b0091aa0
  00dae:    	call   rax
  00db0:    	movq   xmm2,QWORD PTR [rsp]
  00db5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dbb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dc1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dc7:    	add    rsp,0x20
  00dcb: b5 	movabs r13,0x55b5b07d6740
  00dd5:    	test   rax,rax
  00dd8:    	je     0xfffd36ef
  00dde:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00de2: 00 	movq   xmm5,QWORD PTR [rip+0x1112]        # 0x1efc
  00dea: 00 	movabs rax,0xff80000000000002
  00df4:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00df8:    	mov    rdi,QWORD PTR [rbp-0x40]
  00dfc: 00 	test   rdi,0x7
  00e03:    	jne    0x2cfe2
  00e09:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e0d:    	jne    0x2cfe2
  00e13: 26 	cmp    DWORD PTR [rip+0xfffffffffffd59bf],0x26        # 0xfffd67d9
  00e1a:    	jne    0x2cfe2
  00e20:    	mov    esi,DWORD PTR [rip+0x10e2]        # 0x1f08
  00e26:    	cmp    esi,0xffffffff
  00e29:    	je     0x2cff1
  00e2f:    	cmp    WORD PTR [rdi+0x2],0x3
  00e34:    	jne    0xe51
  00e3a:    	cmp    esi,0x6
  00e3d:    	jge    0xe51
  00e43:    	mov    rax,QWORD PTR [rbp-0x48]
  00e47:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e4c:    	jmp    0xeaa
  00e51:    	sub    rsp,0x20
  00e55:    	movq   QWORD PTR [rsp],xmm2
  00e5a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e60:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e66:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e6c:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e70: b5 	movabs rax,0x55b5b00a4170
  00e7a:    	call   rax
  00e7c:    	movq   xmm2,QWORD PTR [rsp]
  00e81:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e87:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e8d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e93:    	add    rsp,0x20
  00e97: b5 	movabs r13,0x55b5b07d6770
  00ea1:    	test   rax,rax
  00ea4:    	je     0xfffd36ef
:00079 
:00081 br =>:00088
  00eaa:    	jmp    0x2d1a3
:00082 %3 = 1: i32
  00eaf: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00eb7:    	sub    rsp,0x20
  00ebb:    	movq   QWORD PTR [rsp],xmm2
  00ec0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ec6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ecc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed2:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ed6:    	mov    rcx,QWORD PTR [rbp-0x40]
  00eda:    	mov    rdi,rbx
  00edd:    	mov    rsi,r12
  00ee0: b5 	movabs r8,0x55b5b07d67a8
  00eea: b5 	movabs rax,0x55b5b0091aa0
  00ef4:    	call   rax
  00ef6:    	movq   xmm2,QWORD PTR [rsp]
  00efb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f01:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f07:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f0d:    	add    rsp,0x20
  00f11: b5 	movabs r13,0x55b5b07d67b0
  00f1b:    	test   rax,rax
  00f1e:    	je     0xfffd36ef
  00f24:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f28: 00 	movq   xmm5,QWORD PTR [rip+0xfdc]        # 0x1f0c
  00f30: 00 	movabs rax,0xff80000000000002
  00f3a:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f3e: 01 	sub    DWORD PTR [rip+0xfcf],0x1        # 0x1f14
  00f45:    	je     0x2d098
  00f4b:    	sub    rsp,0x20
  00f4f:    	movq   QWORD PTR [rsp],xmm2
  00f54:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f5a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f60:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f66:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f6a: b5 	movabs rax,0x55b5b009e670
  00f74:    	call   rax
  00f76:    	mov    r15d,eax
  00f79: 00 	cmp    r15d,DWORD PTR [rip+0xf9c]        # 0x1f1c
  00f80:    	jne    0x2d0ba
  00f86:    	mov    eax,DWORD PTR [rip+0xfffffffffffd584d]        # 0xfffd67d9
  00f8c:    	cmp    DWORD PTR [rip+0xf86],eax        # 0x1f18
  00f92:    	jne    0x2d0ba
  00f98: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa1:    	mov    QWORD PTR [rsp-0x38],rcx
  00fa6:    	mov    rax,QWORD PTR [rbx]
  00fa9:    	lea    rsi,[rsp-0x18]
  00fae:    	mov    QWORD PTR [rsi],rax
  00fb1:    	mov    QWORD PTR [rbx],rsi
  00fb4:    	mov    rax,QWORD PTR [rbp-0x40]
  00fb8:    	mov    QWORD PTR [rsp-0x38],rax
  00fbd: 00 	mov    rdi,0x1
  00fc4:    	lea    r8,[rsp-0x40]
  00fc9:    	mov    rax,QWORD PTR [rbp-0x48]
  00fcd:    	mov    QWORD PTR [r8],rax
  00fd0:    	sub    r8,0x8
  00fd4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fdd: 00 	movabs rax,0x0
  00fe7:    	mov    QWORD PTR [rsp-0x28],rax
  00fec: 00 	movabs r13,0x0
  00ff6:    	call   0xfffd36bc
  00ffb:    	lea    rdi,[rbp-0x8]
  00fff:    	mov    QWORD PTR [rbx],rdi
  01002:    	movq   xmm2,QWORD PTR [rsp]
  01007:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01013:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01019:    	add    rsp,0x20
  0101d:    	test   rax,rax
  01020:    	je     0x2d126
:00086 
:00088 %3 = 0: i32
  01026: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  0102e: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01036:    	sub    rsp,0x20
  0103a:    	movq   QWORD PTR [rsp],xmm2
  0103f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01045:    	movq   QWORD PTR [rsp+0x10],xmm4
  0104b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01051:    	mov    rdx,QWORD PTR [rbp-0x30]
  01055:    	mov    rcx,QWORD PTR [rbp-0x50]
  01059:    	mov    rdi,rbx
  0105c:    	mov    rsi,r12
  0105f: b5 	movabs r8,0x55b5b07d6818
  01069: b5 	movabs rax,0x55b5b0091aa0
  01073:    	call   rax
  01075:    	movq   xmm2,QWORD PTR [rsp]
  0107a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01080:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01086:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0108c:    	add    rsp,0x20
  01090: b5 	movabs r13,0x55b5b07d6820
  0109a:    	test   rax,rax
  0109d:    	je     0xfffd36ef
  010a3:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010a7: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010af:    	sub    rsp,0x20
  010b3:    	movq   QWORD PTR [rsp],xmm3
  010b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  010be:    	movq   QWORD PTR [rsp+0x10],xmm5
  010c4:    	mov    rdx,QWORD PTR [rbp-0x30]
  010c8:    	mov    rcx,QWORD PTR [rbp-0x58]
  010cc:    	mov    rdi,rbx
  010cf:    	mov    rsi,r12
  010d2: b5 	movabs r8,0x55b5b07d6838
  010dc: b5 	movabs rax,0x55b5b0091aa0
  010e6:    	call   rax
  010e8:    	movq   xmm3,QWORD PTR [rsp]
  010ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f9:    	add    rsp,0x20
  010fd: b5 	movabs r13,0x55b5b07d6840
  01107:    	test   rax,rax
  0110a:    	je     0xfffd36ef
  01110:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01114:    	mov    rdi,QWORD PTR [rbp-0x50]
  01118: 00 	test   rdi,0x7
  0111f:    	jne    0x2d135
  01125:    	cmp    DWORD PTR [rdi+0x4],0x28
  01129:    	jne    0x2d135
  0112f: 26 	cmp    DWORD PTR [rip+0xfffffffffffd56a3],0x26        # 0xfffd67d9
  01136:    	jne    0x2d135
  0113c:    	sub    rsp,0x10
  01140:    	movq   QWORD PTR [rsp],xmm3
  01145:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01154:    	mov    QWORD PTR [rsp-0x38],rcx
  01159:    	mov    rax,QWORD PTR [rbx]
  0115c:    	lea    rsi,[rsp-0x18]
  01161:    	mov    QWORD PTR [rsi],rax
  01164:    	mov    QWORD PTR [rbx],rsi
  01167:    	mov    rax,QWORD PTR [rbp-0x50]
  0116b:    	mov    QWORD PTR [rsp-0x38],rax
  01170: 00 	mov    rdi,0x1
  01177:    	lea    r8,[rsp-0x40]
  0117c:    	mov    rax,QWORD PTR [rbp-0x58]
  01180:    	mov    QWORD PTR [r8],rax
  01183:    	sub    r8,0x8
  01187: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01190: 09 	movabs rax,0x900000041
  0119a:    	mov    QWORD PTR [rsp-0x28],rax
  0119f: b5 	movabs r13,0x55b5b07a1dd0
  011a9:    	call   0xfffe0761
  011ae:    	lea    rdi,[rbp-0x8]
  011b2:    	mov    QWORD PTR [rbx],rdi
  011b5:    	movq   xmm3,QWORD PTR [rsp]
  011ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c0:    	add    rsp,0x10
  011c4: b5 	movabs r13,0x55b5b07d6860
  011ce:    	test   rax,rax
  011d1:    	je     0xfffd36ef
  011d7:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011db:    	sub    rsp,0x10
  011df:    	movq   QWORD PTR [rsp],xmm3
  011e4:    	movq   QWORD PTR [rsp+0x8],xmm4
  011ea:    	mov    rdx,QWORD PTR [rbp-0x30]
  011ee:    	mov    rcx,QWORD PTR [rbp-0x40]
  011f2:    	mov    r8,QWORD PTR [rbp-0x48]
  011f6:    	mov    rdi,rbx
  011f9:    	mov    rsi,r12
  011fc: b5 	movabs rax,0x55b5b0091bd0
  01206:    	call   rax
  01208:    	movq   xmm3,QWORD PTR [rsp]
  0120d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01213:    	add    rsp,0x10
  01217: b5 	movabs r13,0x55b5b07d6880
  01221:    	test   rax,rax
  01224:    	je     0xfffd36ef
:00097 %3 = 0: i32
  0122a: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01232: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0123a:    	sub    rsp,0x10
  0123e:    	movq   QWORD PTR [rsp],xmm3
  01243:    	movq   QWORD PTR [rsp+0x8],xmm4
  01249:    	mov    rdx,QWORD PTR [rbp-0x30]
  0124d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01251:    	mov    rdi,rbx
  01254:    	mov    rsi,r12
  01257: b5 	movabs r8,0x55b5b07d68a8
  01261: b5 	movabs rax,0x55b5b0091aa0
  0126b:    	call   rax
  0126d:    	movq   xmm3,QWORD PTR [rsp]
  01272:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01278:    	add    rsp,0x10
  0127c: b5 	movabs r13,0x55b5b07d68b0
  01286:    	test   rax,rax
  01289:    	je     0xfffd36ef
  0128f:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01293:    	mov    rdi,QWORD PTR [rbp-0x50]
  01297: 00 	test   rdi,0x7
  0129e:    	jne    0x2d144
  012a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  012a8:    	jne    0x2d144
  012ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffd5524],0x26        # 0xfffd67d9
  012b5:    	jne    0x2d144
  012bb:    	sub    rsp,0x10
  012bf:    	movq   QWORD PTR [rsp],xmm3
  012c4:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d3:    	mov    QWORD PTR [rsp-0x38],rcx
  012d8:    	mov    rax,QWORD PTR [rbx]
  012db:    	lea    rsi,[rsp-0x18]
  012e0:    	mov    QWORD PTR [rsi],rax
  012e3:    	mov    QWORD PTR [rbx],rsi
  012e6:    	mov    rax,QWORD PTR [rbp-0x50]
  012ea:    	mov    QWORD PTR [rsp-0x38],rax
  012ef: 00 	mov    rdi,0x0
  012f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012ff: 07 	movabs rax,0x1000700000044
  01309:    	mov    QWORD PTR [rsp-0x28],rax
  0130e: b5 	movabs r13,0x55b5b07ceca0
  01318:    	call   0xfffd711e
  0131d:    	lea    rdi,[rbp-0x8]
  01321:    	mov    QWORD PTR [rbx],rdi
  01324:    	movq   xmm3,QWORD PTR [rsp]
  01329:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0132f:    	add    rsp,0x10
  01333: b5 	movabs r13,0x55b5b07d68d0
  0133d:    	test   rax,rax
  01340:    	je     0xfffd36ef
  01346:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  0134a:    	sub    rsp,0x10
  0134e:    	movq   QWORD PTR [rsp],xmm3
  01353:    	movq   QWORD PTR [rsp+0x8],xmm4
  01359:    	mov    rdx,QWORD PTR [rbp-0x30]
  0135d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01361:    	mov    r8,QWORD PTR [rbp-0x48]
  01365:    	mov    rdi,rbx
  01368:    	mov    rsi,r12
  0136b: b5 	movabs rax,0x55b5b0091bd0
  01375:    	call   rax
  01377:    	movq   xmm3,QWORD PTR [rsp]
  0137c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01382:    	add    rsp,0x10
  01386: b5 	movabs r13,0x55b5b07d68f0
  01390:    	test   rax,rax
  01393:    	je     0xfffd36ef
:00104 %3 = 1: i32
  01399: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  013a1: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  013a9:    	sub    rsp,0x10
  013ad:    	movq   QWORD PTR [rsp],xmm3
  013b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  013b8:    	mov    rdx,QWORD PTR [rbp-0x30]
  013bc:    	mov    rcx,QWORD PTR [rbp-0x50]
  013c0:    	mov    rdi,rbx
  013c3:    	mov    rsi,r12
  013c6: b5 	movabs r8,0x55b5b07d6918
  013d0: b5 	movabs rax,0x55b5b0091aa0
  013da:    	call   rax
  013dc:    	movq   xmm3,QWORD PTR [rsp]
  013e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013e7:    	add    rsp,0x10
  013eb: b5 	movabs r13,0x55b5b07d6920
  013f5:    	test   rax,rax
  013f8:    	je     0xfffd36ef
  013fe:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01402: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  0140a:    	sub    rsp,0x10
  0140e:    	movq   QWORD PTR [rsp],xmm3
  01413:    	movq   QWORD PTR [rsp+0x8],xmm4
  01419:    	mov    rdx,QWORD PTR [rbp-0x30]
  0141d:    	mov    rcx,QWORD PTR [rbp-0x58]
  01421:    	mov    rdi,rbx
  01424:    	mov    rsi,r12
  01427: b5 	movabs r8,0x55b5b07d6938
  01431: b5 	movabs rax,0x55b5b0091aa0
  0143b:    	call   rax
  0143d:    	movq   xmm3,QWORD PTR [rsp]
  01442:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01448:    	add    rsp,0x10
  0144c: b5 	movabs r13,0x55b5b07d6940
  01456:    	test   rax,rax
  01459:    	je     0xfffd36ef
  0145f:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01463:    	mov    rdi,QWORD PTR [rbp-0x50]
  01467: 00 	test   rdi,0x7
  0146e:    	jne    0x2d153
  01474:    	cmp    DWORD PTR [rdi+0x4],0x28
  01478:    	jne    0x2d153
  0147e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd5354],0x26        # 0xfffd67d9
  01485:    	jne    0x2d153
  0148b:    	sub    rsp,0x10
  0148f:    	movq   QWORD PTR [rsp],xmm3
  01494:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014a3:    	mov    QWORD PTR [rsp-0x38],rcx
  014a8:    	mov    rax,QWORD PTR [rbx]
  014ab:    	lea    rsi,[rsp-0x18]
  014b0:    	mov    QWORD PTR [rsi],rax
  014b3:    	mov    QWORD PTR [rbx],rsi
  014b6:    	mov    rax,QWORD PTR [rbp-0x50]
  014ba:    	mov    QWORD PTR [rsp-0x38],rax
  014bf: 00 	mov    rdi,0x1
  014c6:    	lea    r8,[rsp-0x40]
  014cb:    	mov    rax,QWORD PTR [rbp-0x58]
  014cf:    	mov    QWORD PTR [r8],rax
  014d2:    	sub    r8,0x8
  014d6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014df: 09 	movabs rax,0x900000041
  014e9:    	mov    QWORD PTR [rsp-0x28],rax
  014ee: b5 	movabs r13,0x55b5b07a1dd0
  014f8:    	call   0xfffe0761
  014fd:    	lea    rdi,[rbp-0x8]
  01501:    	mov    QWORD PTR [rbx],rdi
  01504:    	movq   xmm3,QWORD PTR [rsp]
  01509:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0150f:    	add    rsp,0x10
  01513: b5 	movabs r13,0x55b5b07d6960
  0151d:    	test   rax,rax
  01520:    	je     0xfffd36ef
  01526:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  0152a:    	sub    rsp,0x10
  0152e:    	movq   QWORD PTR [rsp],xmm3
  01533:    	movq   QWORD PTR [rsp+0x8],xmm4
  01539:    	mov    rdx,QWORD PTR [rbp-0x30]
  0153d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01541:    	mov    r8,QWORD PTR [rbp-0x48]
  01545:    	mov    rdi,rbx
  01548:    	mov    rsi,r12
  0154b: b5 	movabs rax,0x55b5b0091bd0
  01555:    	call   rax
  01557:    	movq   xmm3,QWORD PTR [rsp]
  0155c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01562:    	add    rsp,0x10
  01566: b5 	movabs r13,0x55b5b07d6980
  01570:    	test   rax,rax
  01573:    	je     0xfffd36ef
:00113 %3 = 1: i32
  01579: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01581: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01589:    	sub    rsp,0x10
  0158d:    	movq   QWORD PTR [rsp],xmm3
  01592:    	movq   QWORD PTR [rsp+0x8],xmm4
  01598:    	mov    rdx,QWORD PTR [rbp-0x30]
  0159c:    	mov    rcx,QWORD PTR [rbp-0x50]
  015a0:    	mov    rdi,rbx
  015a3:    	mov    rsi,r12
  015a6: b5 	movabs r8,0x55b5b07d69a8
  015b0: b5 	movabs rax,0x55b5b0091aa0
  015ba:    	call   rax
  015bc:    	movq   xmm3,QWORD PTR [rsp]
  015c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c7:    	add    rsp,0x10
  015cb: b5 	movabs r13,0x55b5b07d69b0
  015d5:    	test   rax,rax
  015d8:    	je     0xfffd36ef
  015de:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015e2:    	mov    rdi,QWORD PTR [rbp-0x50]
  015e6: 00 	test   rdi,0x7
  015ed:    	jne    0x2d162
  015f3:    	cmp    DWORD PTR [rdi+0x4],0x28
  015f7:    	jne    0x2d162
  015fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd51d5],0x26        # 0xfffd67d9
  01604:    	jne    0x2d162
  0160a:    	sub    rsp,0x10
  0160e:    	movq   QWORD PTR [rsp],xmm3
  01613:    	movq   QWORD PTR [rsp+0x8],xmm4
  01619: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01622:    	mov    QWORD PTR [rsp-0x38],rcx
  01627:    	mov    rax,QWORD PTR [rbx]
  0162a:    	lea    rsi,[rsp-0x18]
  0162f:    	mov    QWORD PTR [rsi],rax
  01632:    	mov    QWORD PTR [rbx],rsi
  01635:    	mov    rax,QWORD PTR [rbp-0x50]
  01639:    	mov    QWORD PTR [rsp-0x38],rax
  0163e: 00 	mov    rdi,0x0
  01645: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0164e: 07 	movabs rax,0x1000700000044
  01658:    	mov    QWORD PTR [rsp-0x28],rax
  0165d: b5 	movabs r13,0x55b5b07ceca0
  01667:    	call   0xfffd711e
  0166c:    	lea    rdi,[rbp-0x8]
  01670:    	mov    QWORD PTR [rbx],rdi
  01673:    	movq   xmm3,QWORD PTR [rsp]
  01678:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0167e:    	add    rsp,0x10
  01682: b5 	movabs r13,0x55b5b07d69d0
  0168c:    	test   rax,rax
  0168f:    	je     0xfffd36ef
  01695:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01699:    	sub    rsp,0x10
  0169d:    	movq   QWORD PTR [rsp],xmm3
  016a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a8:    	mov    rdx,QWORD PTR [rbp-0x30]
  016ac:    	mov    rcx,QWORD PTR [rbp-0x40]
  016b0:    	mov    r8,QWORD PTR [rbp-0x48]
  016b4:    	mov    rdi,rbx
  016b7:    	mov    rsi,r12
  016ba: b5 	movabs rax,0x55b5b0091bd0
  016c4:    	call   rax
  016c6:    	movq   xmm3,QWORD PTR [rsp]
  016cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016d1:    	add    rsp,0x10
  016d5: b5 	movabs r13,0x55b5b07d69f0
  016df:    	test   rax,rax
  016e2:    	je     0xfffd36ef
:00120 %3 = %4
  016e8:    	mov    rax,QWORD PTR [rbp-0x48]
  016ec:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016f0:    	mov    rax,QWORD PTR [rbp-0x40]
  016f4:    	leave  
  016f5:    	ret    
:00088 %3 = 0: i32
  016f6: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016fe: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01706:    	sub    rsp,0x20
  0170a:    	movq   QWORD PTR [rsp],xmm2
  0170f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01715:    	movq   QWORD PTR [rsp+0x10],xmm4
  0171b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01721:    	mov    rdx,QWORD PTR [rbp-0x30]
  01725:    	mov    rcx,QWORD PTR [rbp-0x50]
  01729:    	mov    rdi,rbx
  0172c:    	mov    rsi,r12
  0172f: b5 	movabs r8,0x55b5b07d6818
  01739: b5 	movabs rax,0x55b5b0091aa0
  01743:    	call   rax
  01745:    	movq   xmm2,QWORD PTR [rsp]
  0174a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01750:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01756:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0175c:    	add    rsp,0x20
  01760: b5 	movabs r13,0x55b5b07d6820
  0176a:    	test   rax,rax
  0176d:    	je     0xfffd36ef
  01773:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01777: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0177f:    	sub    rsp,0x20
  01783:    	movq   QWORD PTR [rsp],xmm3
  01788:    	movq   QWORD PTR [rsp+0x8],xmm4
  0178e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01794:    	mov    rdx,QWORD PTR [rbp-0x30]
  01798:    	mov    rcx,QWORD PTR [rbp-0x58]
  0179c:    	mov    rdi,rbx
  0179f:    	mov    rsi,r12
  017a2: b5 	movabs r8,0x55b5b07d6838
  017ac: b5 	movabs rax,0x55b5b0091aa0
  017b6:    	call   rax
  017b8:    	movq   xmm3,QWORD PTR [rsp]
  017bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017c3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017c9:    	add    rsp,0x20
  017cd: b5 	movabs r13,0x55b5b07d6840
  017d7:    	test   rax,rax
  017da:    	je     0xfffd36ef
  017e0:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017e4:    	mov    rdi,QWORD PTR [rbp-0x50]
  017e8: 00 	test   rdi,0x7
  017ef:    	jne    0x2d1bc
  017f5:    	cmp    DWORD PTR [rdi+0x4],0x28
  017f9:    	jne    0x2d1bc
  017ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4fd3],0x26        # 0xfffd67d9
  01806:    	jne    0x2d1bc
  0180c:    	sub    rsp,0x10
  01810:    	movq   QWORD PTR [rsp],xmm3
  01815:    	movq   QWORD PTR [rsp+0x8],xmm4
  0181b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01824:    	mov    QWORD PTR [rsp-0x38],rcx
  01829:    	mov    rax,QWORD PTR [rbx]
  0182c:    	lea    rsi,[rsp-0x18]
  01831:    	mov    QWORD PTR [rsi],rax
  01834:    	mov    QWORD PTR [rbx],rsi
  01837:    	mov    rax,QWORD PTR [rbp-0x50]
  0183b:    	mov    QWORD PTR [rsp-0x38],rax
  01840: 00 	mov    rdi,0x1
  01847:    	lea    r8,[rsp-0x40]
  0184c:    	mov    rax,QWORD PTR [rbp-0x58]
  01850:    	mov    QWORD PTR [r8],rax
  01853:    	sub    r8,0x8
  01857: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01860: 09 	movabs rax,0x900000041
  0186a:    	mov    QWORD PTR [rsp-0x28],rax
  0186f: b5 	movabs r13,0x55b5b07a1dd0
  01879:    	call   0xfffe0761
  0187e:    	lea    rdi,[rbp-0x8]
  01882:    	mov    QWORD PTR [rbx],rdi
  01885:    	movq   xmm3,QWORD PTR [rsp]
  0188a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01890:    	add    rsp,0x10
  01894: b5 	movabs r13,0x55b5b07d6860
  0189e:    	test   rax,rax
  018a1:    	je     0xfffd36ef
  018a7:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  018ab:    	sub    rsp,0x10
  018af:    	movq   QWORD PTR [rsp],xmm3
  018b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  018ba:    	mov    rdx,QWORD PTR [rbp-0x30]
  018be:    	mov    rcx,QWORD PTR [rbp-0x40]
  018c2:    	mov    r8,QWORD PTR [rbp-0x48]
  018c6:    	mov    rdi,rbx
  018c9:    	mov    rsi,r12
  018cc: b5 	movabs rax,0x55b5b0091bd0
  018d6:    	call   rax
  018d8:    	movq   xmm3,QWORD PTR [rsp]
  018dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e3:    	add    rsp,0x10
  018e7: b5 	movabs r13,0x55b5b07d6880
  018f1:    	test   rax,rax
  018f4:    	je     0xfffd36ef
:00097 %3 = 0: i32
  018fa: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01902: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0190a:    	sub    rsp,0x10
  0190e:    	movq   QWORD PTR [rsp],xmm3
  01913:    	movq   QWORD PTR [rsp+0x8],xmm4
  01919:    	mov    rdx,QWORD PTR [rbp-0x30]
  0191d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01921:    	mov    rdi,rbx
  01924:    	mov    rsi,r12
  01927: b5 	movabs r8,0x55b5b07d68a8
  01931: b5 	movabs rax,0x55b5b0091aa0
  0193b:    	call   rax
  0193d:    	movq   xmm3,QWORD PTR [rsp]
  01942:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01948:    	add    rsp,0x10
  0194c: b5 	movabs r13,0x55b5b07d68b0
  01956:    	test   rax,rax
  01959:    	je     0xfffd36ef
  0195f:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01963:    	mov    rdi,QWORD PTR [rbp-0x50]
  01967: 00 	test   rdi,0x7
  0196e:    	jne    0x2d1cb
  01974:    	cmp    DWORD PTR [rdi+0x4],0x28
  01978:    	jne    0x2d1cb
  0197e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4e54],0x26        # 0xfffd67d9
  01985:    	jne    0x2d1cb
  0198b:    	sub    rsp,0x10
  0198f:    	movq   QWORD PTR [rsp],xmm3
  01994:    	movq   QWORD PTR [rsp+0x8],xmm4
  0199a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019a3:    	mov    QWORD PTR [rsp-0x38],rcx
  019a8:    	mov    rax,QWORD PTR [rbx]
  019ab:    	lea    rsi,[rsp-0x18]
  019b0:    	mov    QWORD PTR [rsi],rax
  019b3:    	mov    QWORD PTR [rbx],rsi
  019b6:    	mov    rax,QWORD PTR [rbp-0x50]
  019ba:    	mov    QWORD PTR [rsp-0x38],rax
  019bf: 00 	mov    rdi,0x0
  019c6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019cf: 07 	movabs rax,0x1000700000044
  019d9:    	mov    QWORD PTR [rsp-0x28],rax
  019de: b5 	movabs r13,0x55b5b07ceca0
  019e8:    	call   0xfffd711e
  019ed:    	lea    rdi,[rbp-0x8]
  019f1:    	mov    QWORD PTR [rbx],rdi
  019f4:    	movq   xmm3,QWORD PTR [rsp]
  019f9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019ff:    	add    rsp,0x10
  01a03: b5 	movabs r13,0x55b5b07d68d0
  01a0d:    	test   rax,rax
  01a10:    	je     0xfffd36ef
  01a16:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a1a:    	sub    rsp,0x10
  01a1e:    	movq   QWORD PTR [rsp],xmm3
  01a23:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a29:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a2d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a31:    	mov    r8,QWORD PTR [rbp-0x48]
  01a35:    	mov    rdi,rbx
  01a38:    	mov    rsi,r12
  01a3b: b5 	movabs rax,0x55b5b0091bd0
  01a45:    	call   rax
  01a47:    	movq   xmm3,QWORD PTR [rsp]
  01a4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a52:    	add    rsp,0x10
  01a56: b5 	movabs r13,0x55b5b07d68f0
  01a60:    	test   rax,rax
  01a63:    	je     0xfffd36ef
:00104 %3 = 1: i32
  01a69: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a71: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a79:    	sub    rsp,0x10
  01a7d:    	movq   QWORD PTR [rsp],xmm3
  01a82:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a88:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a8c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a90:    	mov    rdi,rbx
  01a93:    	mov    rsi,r12
  01a96: b5 	movabs r8,0x55b5b07d6918
  01aa0: b5 	movabs rax,0x55b5b0091aa0
  01aaa:    	call   rax
  01aac:    	movq   xmm3,QWORD PTR [rsp]
  01ab1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ab7:    	add    rsp,0x10
  01abb: b5 	movabs r13,0x55b5b07d6920
  01ac5:    	test   rax,rax
  01ac8:    	je     0xfffd36ef
  01ace:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01ad2: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01ada:    	sub    rsp,0x10
  01ade:    	movq   QWORD PTR [rsp],xmm3
  01ae3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ae9:    	mov    rdx,QWORD PTR [rbp-0x30]
  01aed:    	mov    rcx,QWORD PTR [rbp-0x58]
  01af1:    	mov    rdi,rbx
  01af4:    	mov    rsi,r12
  01af7: b5 	movabs r8,0x55b5b07d6938
  01b01: b5 	movabs rax,0x55b5b0091aa0
  01b0b:    	call   rax
  01b0d:    	movq   xmm3,QWORD PTR [rsp]
  01b12:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b18:    	add    rsp,0x10
  01b1c: b5 	movabs r13,0x55b5b07d6940
  01b26:    	test   rax,rax
  01b29:    	je     0xfffd36ef
  01b2f:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b33:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b37: 00 	test   rdi,0x7
  01b3e:    	jne    0x2d1da
  01b44:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b48:    	jne    0x2d1da
  01b4e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4c84],0x26        # 0xfffd67d9
  01b55:    	jne    0x2d1da
  01b5b:    	sub    rsp,0x10
  01b5f:    	movq   QWORD PTR [rsp],xmm3
  01b64:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b6a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b73:    	mov    QWORD PTR [rsp-0x38],rcx
  01b78:    	mov    rax,QWORD PTR [rbx]
  01b7b:    	lea    rsi,[rsp-0x18]
  01b80:    	mov    QWORD PTR [rsi],rax
  01b83:    	mov    QWORD PTR [rbx],rsi
  01b86:    	mov    rax,QWORD PTR [rbp-0x50]
  01b8a:    	mov    QWORD PTR [rsp-0x38],rax
  01b8f: 00 	mov    rdi,0x1
  01b96:    	lea    r8,[rsp-0x40]
  01b9b:    	mov    rax,QWORD PTR [rbp-0x58]
  01b9f:    	mov    QWORD PTR [r8],rax
  01ba2:    	sub    r8,0x8
  01ba6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01baf: 09 	movabs rax,0x900000041
  01bb9:    	mov    QWORD PTR [rsp-0x28],rax
  01bbe: b5 	movabs r13,0x55b5b07a1dd0
  01bc8:    	call   0xfffe0761
  01bcd:    	lea    rdi,[rbp-0x8]
  01bd1:    	mov    QWORD PTR [rbx],rdi
  01bd4:    	movq   xmm3,QWORD PTR [rsp]
  01bd9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bdf:    	add    rsp,0x10
  01be3: b5 	movabs r13,0x55b5b07d6960
  01bed:    	test   rax,rax
  01bf0:    	je     0xfffd36ef
  01bf6:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bfa:    	sub    rsp,0x10
  01bfe:    	movq   QWORD PTR [rsp],xmm3
  01c03:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c09:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c0d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01c11:    	mov    r8,QWORD PTR [rbp-0x48]
  01c15:    	mov    rdi,rbx
  01c18:    	mov    rsi,r12
  01c1b: b5 	movabs rax,0x55b5b0091bd0
  01c25:    	call   rax
  01c27:    	movq   xmm3,QWORD PTR [rsp]
  01c2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c32:    	add    rsp,0x10
  01c36: b5 	movabs r13,0x55b5b07d6980
  01c40:    	test   rax,rax
  01c43:    	je     0xfffd36ef
:00113 %3 = 1: i32
  01c49: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c51: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c59:    	sub    rsp,0x10
  01c5d:    	movq   QWORD PTR [rsp],xmm3
  01c62:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c68:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c6c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c70:    	mov    rdi,rbx
  01c73:    	mov    rsi,r12
  01c76: b5 	movabs r8,0x55b5b07d69a8
  01c80: b5 	movabs rax,0x55b5b0091aa0
  01c8a:    	call   rax
  01c8c:    	movq   xmm3,QWORD PTR [rsp]
  01c91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c97:    	add    rsp,0x10
  01c9b: b5 	movabs r13,0x55b5b07d69b0
  01ca5:    	test   rax,rax
  01ca8:    	je     0xfffd36ef
  01cae:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01cb2:    	mov    rdi,QWORD PTR [rbp-0x50]
  01cb6: 00 	test   rdi,0x7
  01cbd:    	jne    0x2d1e9
  01cc3:    	cmp    DWORD PTR [rdi+0x4],0x28
  01cc7:    	jne    0x2d1e9
  01ccd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4b05],0x26        # 0xfffd67d9
  01cd4:    	jne    0x2d1e9
  01cda:    	sub    rsp,0x10
  01cde:    	movq   QWORD PTR [rsp],xmm3
  01ce3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ce9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cf2:    	mov    QWORD PTR [rsp-0x38],rcx
  01cf7:    	mov    rax,QWORD PTR [rbx]
  01cfa:    	lea    rsi,[rsp-0x18]
  01cff:    	mov    QWORD PTR [rsi],rax
  01d02:    	mov    QWORD PTR [rbx],rsi
  01d05:    	mov    rax,QWORD PTR [rbp-0x50]
  01d09:    	mov    QWORD PTR [rsp-0x38],rax
  01d0e: 00 	mov    rdi,0x0
  01d15: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d1e: 07 	movabs rax,0x1000700000044
  01d28:    	mov    QWORD PTR [rsp-0x28],rax
  01d2d: b5 	movabs r13,0x55b5b07ceca0
  01d37:    	call   0xfffd711e
  01d3c:    	lea    rdi,[rbp-0x8]
  01d40:    	mov    QWORD PTR [rbx],rdi
  01d43:    	movq   xmm3,QWORD PTR [rsp]
  01d48:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d4e:    	add    rsp,0x10
  01d52: b5 	movabs r13,0x55b5b07d69d0
  01d5c:    	test   rax,rax
  01d5f:    	je     0xfffd36ef
  01d65:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d69:    	sub    rsp,0x10
  01d6d:    	movq   QWORD PTR [rsp],xmm3
  01d72:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d78:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d7c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d80:    	mov    r8,QWORD PTR [rbp-0x48]
  01d84:    	mov    rdi,rbx
  01d87:    	mov    rsi,r12
  01d8a: b5 	movabs rax,0x55b5b0091bd0
  01d94:    	call   rax
  01d96:    	movq   xmm3,QWORD PTR [rsp]
  01d9b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01da1:    	add    rsp,0x10
  01da5: b5 	movabs r13,0x55b5b07d69f0
  01daf:    	test   rax,rax
  01db2:    	je     0xfffd36ef
:00120 %3 = %4
  01db8:    	mov    rax,QWORD PTR [rbp-0x48]
  01dbc:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01dc0:    	mov    rax,QWORD PTR [rbp-0x40]
  01dc4:    	leave  
  01dc5:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55b5b07d6270
<== finished compile. elapsed:275.4µs
offset:Pos(190564) code: 7622 bytes  data: 346 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	je     0x4a
  00014:    	jl     0x1f
  0001a:    	jmp    0x2b2d8
  0001f:    	jmp    0x2b2d8
  00024:    	mov    eax,0x2
  00029:    	sub    eax,edx
  0002b:    	test   rax,rax
  0002e:    	je     0x4a
  00034:    	lea    rdi,[rbp-0x40]
  00038: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00040:    	sub    rax,0x1
  00044:    	jne    0x38
  0004a: 00 	mov    rax,0x4
  00051:    	mov    QWORD PTR [rbp-0x40],rax
  00055:    	mov    QWORD PTR [rbp-0x48],rax
  00059:    	mov    QWORD PTR [rbp-0x50],rax
  0005d:    	mov    QWORD PTR [rbp-0x58],rax
  00061:    	mov    QWORD PTR [rbp-0x60],rax
  00065:    	mov    QWORD PTR [rbp-0x68],rax
  00069:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x2b2e7
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x32
  0007e:    	jne    0x2b2e7
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  00084: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  0008c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd4839]        # 0xfffd48cc
  00093: 00 	cmp    rax,QWORD PTR [rip+0x1d42]        # 0x1ddc
  0009a:    	jne    0x2b2f6
  000a0: 00 	mov    rax,QWORD PTR [rip+0x1d25]        # 0x1dcc
  000a7:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  000ab:    	mov    rdi,QWORD PTR [rbp-0x38]
  000af: 00 	test   rdi,0x7
  000b6:    	jne    0x2b33c
  000bc:    	cmp    DWORD PTR [rdi+0x4],0x28
  000c0:    	jne    0x2b33c
  000c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffd47ec],0x26        # 0xfffd48b9
  000cd:    	jne    0x2b33c
  000d3:    	mov    esi,DWORD PTR [rip+0x1d0f]        # 0x1de8
  000d9:    	cmp    esi,0xffffffff
  000dc:    	je     0x2b34b
  000e2:    	cmp    WORD PTR [rdi+0x2],0x3
  000e7:    	jne    0x100
  000ed:    	cmp    esi,0x6
  000f0:    	jge    0x100
  000f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000fb:    	jmp    0x10c
  00100: b5 	movabs rax,0x55b5b00a3ef0
  0010a:    	call   rax
  0010c:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  00110:    	mov    rdi,QWORD PTR [rbp-0x38]
  00114: 00 	test   rdi,0x7
  0011b:    	jne    0x2b374
  00121:    	cmp    DWORD PTR [rdi+0x4],0x28
  00125:    	jne    0x2b374
  0012b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4787],0x26        # 0xfffd48b9
  00132:    	jne    0x2b374
  00138:    	mov    esi,DWORD PTR [rip+0x1cb2]        # 0x1df0
  0013e:    	cmp    esi,0xffffffff
  00141:    	je     0x2b383
  00147:    	cmp    WORD PTR [rdi+0x2],0x3
  0014c:    	jne    0x165
  00152:    	cmp    esi,0x6
  00155:    	jge    0x165
  0015b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00160:    	jmp    0x171
  00165: b5 	movabs rax,0x55b5b00a3ef0
  0016f:    	call   rax
  00171:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00175:    	mov    rdi,QWORD PTR [rbp-0x38]
  00179: 00 	test   rdi,0x7
  00180:    	jne    0x2b3ac
  00186:    	cmp    DWORD PTR [rdi+0x4],0x28
  0018a:    	jne    0x2b3ac
  00190: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4722],0x26        # 0xfffd48b9
  00197:    	jne    0x2b3ac
  0019d:    	mov    esi,DWORD PTR [rip+0x1c55]        # 0x1df8
  001a3:    	cmp    esi,0xffffffff
  001a6:    	je     0x2b3bb
  001ac:    	cmp    WORD PTR [rdi+0x2],0x3
  001b1:    	jne    0x1ca
  001b7:    	cmp    esi,0x6
  001ba:    	jge    0x1ca
  001c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001c5:    	jmp    0x1d6
  001ca: b5 	movabs rax,0x55b5b00a3ef0
  001d4:    	call   rax
  001d6:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001da:    	mov    rdi,QWORD PTR [rbp-0x50]
  001de: 00 	test   rdi,0x7
  001e5:    	jne    0x2b3e4
  001eb:    	cmp    DWORD PTR [rdi+0x4],0x29
  001ef:    	jne    0x2b3e4
  001f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd46bd],0x26        # 0xfffd48b9
  001fc:    	jne    0x2b3e4
  00202: 00 	mov    r9,0x0
  00209:    	mov    rdx,rdi
  0020c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00215:    	mov    QWORD PTR [rsp-0x38],rcx
  0021a:    	mov    rax,QWORD PTR [rbx]
  0021d:    	lea    rsi,[rsp-0x18]
  00222:    	mov    QWORD PTR [rsi],rax
  00225:    	mov    QWORD PTR [rbx],rsi
  00228:    	lea    rcx,[rbp-0x58]
  0022c: 00 	mov    r8,0x3
  00233:    	call   0x2b3f3
  00238:    	lea    rdi,[rbp-0x8]
  0023c:    	mov    QWORD PTR [rbx],rdi
  0023f: b5 	movabs r13,0x55b5b07d6350
  00249:    	test   rax,rax
  0024c:    	je     0xfffd17cf
  00252:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  00256:    	mov    rdx,QWORD PTR [rbp-0x30]
  0025a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0025e:    	mov    r8,QWORD PTR [rbp-0x48]
  00262:    	mov    rdi,rbx
  00265:    	mov    rsi,r12
  00268: b5 	movabs rax,0x55b5b0091bd0
  00272:    	call   rax
  00274: b5 	movabs r13,0x55b5b07d6370
  0027e:    	test   rax,rax
  00281:    	je     0xfffd17cf
:00016 %3 = 1: i32
  00287: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  0028f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd4636]        # 0xfffd48cc
  00296: 00 	cmp    rax,QWORD PTR [rip+0x1b6f]        # 0x1e0c
  0029d:    	jne    0x2b425
  002a3: 00 	mov    rax,QWORD PTR [rip+0x1b52]        # 0x1dfc
  002aa:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  002ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b66]        # 0x1e1c
  002b6: 00 	movabs rax,0x8000000000000002
  002c0:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002c4: 00 	movq   xmm3,QWORD PTR [rip+0x1b60]        # 0x1e2c
  002cc: 00 	movabs rax,0x8000000000000002
  002d6:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002da: 00 	movq   xmm4,QWORD PTR [rip+0x1b5a]        # 0x1e3c
  002e2: 00 	movabs rax,0x8000000000000002
  002ec:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f0:    	mov    rdi,QWORD PTR [rbp-0x50]
  002f4: 00 	test   rdi,0x7
  002fb:    	jne    0x2b46b
  00301:    	cmp    DWORD PTR [rdi+0x4],0x29
  00305:    	jne    0x2b46b
  0030b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd45a7],0x26        # 0xfffd48b9
  00312:    	jne    0x2b46b
  00318: 00 	mov    r9,0x0
  0031f:    	sub    rsp,0x20
  00323:    	movq   QWORD PTR [rsp],xmm2
  00328:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00334:    	mov    rdx,rdi
  00337: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00340:    	mov    QWORD PTR [rsp-0x38],rcx
  00345:    	mov    rax,QWORD PTR [rbx]
  00348:    	lea    rsi,[rsp-0x18]
  0034d:    	mov    QWORD PTR [rsi],rax
  00350:    	mov    QWORD PTR [rbx],rsi
  00353:    	lea    rcx,[rbp-0x58]
  00357: 00 	mov    r8,0x3
  0035e:    	call   0x2b47a
  00363:    	lea    rdi,[rbp-0x8]
  00367:    	mov    QWORD PTR [rbx],rdi
  0036a:    	movq   xmm2,QWORD PTR [rsp]
  0036f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00375:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0037b:    	add    rsp,0x20
  0037f: b5 	movabs r13,0x55b5b07d63e0
  00389:    	test   rax,rax
  0038c:    	je     0xfffd17cf
  00392:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  00396:    	sub    rsp,0x20
  0039a:    	movq   QWORD PTR [rsp],xmm2
  0039f:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  003af:    	mov    rcx,QWORD PTR [rbp-0x40]
  003b3:    	mov    r8,QWORD PTR [rbp-0x48]
  003b7:    	mov    rdi,rbx
  003ba:    	mov    rsi,r12
  003bd: b5 	movabs rax,0x55b5b0091bd0
  003c7:    	call   rax
  003c9:    	movq   xmm2,QWORD PTR [rsp]
  003ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003da:    	add    rsp,0x20
  003de: b5 	movabs r13,0x55b5b07d6400
  003e8:    	test   rax,rax
  003eb:    	je     0xfffd17cf
:00025 %3 = %2.call x()                     [Vec]
  003f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  003f5: 00 	test   rdi,0x7
  003fc:    	jne    0x2b4ac
  00402:    	cmp    DWORD PTR [rdi+0x4],0x28
  00406:    	jne    0x2b4ac
  0040c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd44a6],0x26        # 0xfffd48b9
  00413:    	jne    0x2b4ac
  00419:    	mov    esi,DWORD PTR [rip+0x1a29]        # 0x1e48
  0041f:    	cmp    esi,0xffffffff
  00422:    	je     0x2b4bb
  00428:    	cmp    WORD PTR [rdi+0x2],0x3
  0042d:    	jne    0x446
  00433:    	cmp    esi,0x6
  00436:    	jge    0x446
  0043c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441:    	jmp    0x47c
  00446:    	sub    rsp,0x20
  0044a:    	movq   QWORD PTR [rsp],xmm2
  0044f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00455:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045b: b5 	movabs rax,0x55b5b00a3ef0
  00465:    	call   rax
  00467:    	movq   xmm2,QWORD PTR [rsp]
  0046c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00472:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00478:    	add    rsp,0x20
  0047c:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00480: 00 	movq   xmm5,QWORD PTR [rip+0x19c4]        # 0x1e4c
  00488: 99 	movabs rax,0xff1999999999999a
  00492:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00496:    	mov    rdi,QWORD PTR [rbp-0x40]
  0049a: 00 	test   rdi,0x1
  004a1:    	jne    0x2b50e
  004a7: 00 	test   rdi,0x2
  004ae:    	je     0x4ea
  004b4:    	xorps  xmm6,xmm6
  004b7: 00 	movabs rax,0x8000000000000002
  004c1:    	cmp    rdi,rax
  004c4:    	je     0x4fc
  004ca:    	mov    rax,rdi
  004cd:    	sar    rax,0x3f
  004d1:    	add    rax,0x2
  004d5:    	and    rdi,0xfffffffffffffffc
  004d9:    	or     rdi,rax
  004dc:    	rol    rdi,0x3d
  004e0:    	movq   xmm6,rdi
  004e5:    	jmp    0x4fc
  004ea:    	call   0xfffd1828
  004ef:    	test   rax,rax
  004f2:    	je     0x2b50e
  004f8:    	movq   xmm6,xmm0
  004fc:    	ucomisd xmm6,xmm5
  00500:    	jae    0x2b60f
:00031 %3 = %2.call x()                     [Vec]
  00506:    	mov    rdi,QWORD PTR [rbp-0x38]
  0050a: 00 	test   rdi,0x7
  00511:    	jne    0x2b51d
  00517:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051b:    	jne    0x2b51d
  00521: 26 	cmp    DWORD PTR [rip+0xfffffffffffd4391],0x26        # 0xfffd48b9
  00528:    	jne    0x2b51d
  0052e:    	mov    esi,DWORD PTR [rip+0x1924]        # 0x1e58
  00534:    	cmp    esi,0xffffffff
  00537:    	je     0x2b52c
  0053d:    	cmp    WORD PTR [rdi+0x2],0x3
  00542:    	jne    0x55b
  00548:    	cmp    esi,0x6
  0054b:    	jge    0x55b
  00551:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00556:    	jmp    0x59d
  0055b:    	sub    rsp,0x20
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576: b5 	movabs rax,0x55b5b00a3ef0
  00580:    	call   rax
  00582:    	movq   xmm2,QWORD PTR [rsp]
  00587:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00593:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00599:    	add    rsp,0x20
  0059d:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  005a1: 00 	movq   xmm5,QWORD PTR [rip+0x18b3]        # 0x1e5c
  005a9: 99 	movabs rax,0xff1999999999999e
  005b3:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  005bb: 00 	test   rdi,0x1
  005c2:    	jne    0x2b58b
  005c8: 00 	test   rdi,0x2
  005cf:    	je     0x60b
  005d5:    	xorps  xmm6,xmm6
  005d8: 00 	movabs rax,0x8000000000000002
  005e2:    	cmp    rdi,rax
  005e5:    	je     0x61d
  005eb:    	mov    rax,rdi
  005ee:    	sar    rax,0x3f
  005f2:    	add    rax,0x2
  005f6:    	and    rdi,0xfffffffffffffffc
  005fa:    	or     rdi,rax
  005fd:    	rol    rdi,0x3d
  00601:    	movq   xmm6,rdi
  00606:    	jmp    0x61d
  0060b:    	call   0xfffd1828
  00610:    	test   rax,rax
  00613:    	je     0x2b58b
  00619:    	movq   xmm6,xmm0
  0061d:    	ucomisd xmm6,xmm5
  00621:    	jbe    0x2b628
:00037 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0062f:    	sub    rsp,0x20
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0064e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00652:    	mov    rdi,rbx
  00655:    	mov    rsi,r12
  00658: b5 	movabs r8,0x55b5b07d64d8
  00662: b5 	movabs rax,0x55b5b0091aa0
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00685:    	add    rsp,0x20
  00689: b5 	movabs r13,0x55b5b07d64e0
  00693:    	test   rax,rax
  00696:    	je     0xfffd17cf
  0069c:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  006a0: 00 	movq   xmm5,QWORD PTR [rip+0x17c4]        # 0x1e6c
  006a8: 00 	movabs rax,0xff80000000000002
  006b2:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006b6:    	mov    rdi,QWORD PTR [rbp-0x40]
  006ba: 00 	test   rdi,0x7
  006c1:    	jne    0x2b59a
  006c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  006cb:    	jne    0x2b59a
  006d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd41e1],0x26        # 0xfffd48b9
  006d8:    	jne    0x2b59a
  006de:    	mov    esi,DWORD PTR [rip+0x1794]        # 0x1e78
  006e4:    	cmp    esi,0xffffffff
  006e7:    	je     0x2b5a9
  006ed:    	cmp    WORD PTR [rdi+0x2],0x3
  006f2:    	jne    0x70f
  006f8:    	cmp    esi,0x6
  006fb:    	jge    0x70f
  00701:    	mov    rax,QWORD PTR [rbp-0x48]
  00705:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0070a:    	jmp    0x768
  0070f:    	sub    rsp,0x20
  00713:    	movq   QWORD PTR [rsp],xmm2
  00718:    	movq   QWORD PTR [rsp+0x8],xmm3
  0071e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00724:    	movq   QWORD PTR [rsp+0x18],xmm5
  0072a:    	mov    rdx,QWORD PTR [rbp-0x48]
  0072e: b5 	movabs rax,0x55b5b00a4170
  00738:    	call   rax
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	add    rsp,0x20
  00755: b5 	movabs r13,0x55b5b07d6510
  0075f:    	test   rax,rax
  00762:    	je     0xfffd17cf
:00041 
:00043 br =>:00088
  00768:    	jmp    0x2bb26
:00044 %3 = %2.call y()                     [Vec]
  0076d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00771: 00 	test   rdi,0x7
  00778:    	jne    0x2b641
  0077e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00782:    	jne    0x2b641
  00788: 26 	cmp    DWORD PTR [rip+0xfffffffffffd412a],0x26        # 0xfffd48b9
  0078f:    	jne    0x2b641
  00795:    	mov    esi,DWORD PTR [rip+0x16e5]        # 0x1e80
  0079b:    	cmp    esi,0xffffffff
  0079e:    	je     0x2b650
  007a4:    	cmp    WORD PTR [rdi+0x2],0x3
  007a9:    	jne    0x7c2
  007af:    	cmp    esi,0x6
  007b2:    	jge    0x7c2
  007b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007bd:    	jmp    0x804
  007c2:    	sub    rsp,0x20
  007c6:    	movq   QWORD PTR [rsp],xmm2
  007cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  007d1:    	movq   QWORD PTR [rsp+0x10],xmm4
  007d7:    	movq   QWORD PTR [rsp+0x18],xmm5
  007dd: b5 	movabs rax,0x55b5b00a3ef0
  007e7:    	call   rax
  007e9:    	movq   xmm2,QWORD PTR [rsp]
  007ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00800:    	add    rsp,0x20
  00804:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00808: 00 	movq   xmm5,QWORD PTR [rip+0x167c]        # 0x1e8c
  00810: 99 	movabs rax,0xff1999999999999a
  0081a:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0081e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00822: 00 	test   rdi,0x1
  00829:    	jne    0x2b6af
  0082f: 00 	test   rdi,0x2
  00836:    	je     0x872
  0083c:    	xorps  xmm6,xmm6
  0083f: 00 	movabs rax,0x8000000000000002
  00849:    	cmp    rdi,rax
  0084c:    	je     0x884
  00852:    	mov    rax,rdi
  00855:    	sar    rax,0x3f
  00859:    	add    rax,0x2
  0085d:    	and    rdi,0xfffffffffffffffc
  00861:    	or     rdi,rax
  00864:    	rol    rdi,0x3d
  00868:    	movq   xmm6,rdi
  0086d:    	jmp    0x884
  00872:    	call   0xfffd1828
  00877:    	test   rax,rax
  0087a:    	je     0x2b6af
  00880:    	movq   xmm6,xmm0
  00884:    	ucomisd xmm6,xmm5
  00888:    	jae    0x2b86b
:00050 %3 = %2.call y()                     [<INVALID>]
  0088e: 01 	sub    DWORD PTR [rip+0x15ff],0x1        # 0x1e94
  00895:    	je     0x2b6cd
  0089b:    	sub    rsp,0x20
  0089f:    	movq   QWORD PTR [rsp],xmm2
  008a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  008aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  008b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b6:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ba: b5 	movabs rax,0x55b5b009e670
  008c4:    	call   rax
  008c6:    	mov    r15d,eax
  008c9: 00 	cmp    r15d,DWORD PTR [rip+0x15cc]        # 0x1e9c
  008d0:    	jne    0x2b6ef
  008d6:    	mov    eax,DWORD PTR [rip+0xfffffffffffd3fdd]        # 0xfffd48b9
  008dc:    	cmp    DWORD PTR [rip+0x15b6],eax        # 0x1e98
  008e2:    	jne    0x2b6ef
  008e8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008f1:    	mov    QWORD PTR [rsp-0x38],rcx
  008f6:    	mov    rax,QWORD PTR [rbx]
  008f9:    	lea    rsi,[rsp-0x18]
  008fe:    	mov    QWORD PTR [rsi],rax
  00901:    	mov    QWORD PTR [rbx],rsi
  00904:    	mov    rax,QWORD PTR [rbp-0x38]
  00908:    	mov    QWORD PTR [rsp-0x38],rax
  0090d: 00 	mov    rdi,0x0
  00914: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0091d: 00 	movabs rax,0x0
  00927:    	mov    QWORD PTR [rsp-0x28],rax
  0092c: 00 	movabs r13,0x0
  00936:    	call   0xfffd179c
  0093b:    	lea    rdi,[rbp-0x8]
  0093f:    	mov    QWORD PTR [rbx],rdi
  00942:    	movq   xmm2,QWORD PTR [rsp]
  00947:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0094d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00953:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00959:    	add    rsp,0x20
  0095d:    	test   rax,rax
  00960:    	je     0x2b75b
  00966:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  0096a: 00 	movq   xmm5,QWORD PTR [rip+0x153a]        # 0x1eac
  00972: 99 	movabs rax,0xff1999999999999e
  0097c:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00980:    	mov    rdi,QWORD PTR [rbp-0x40]
  00984:    	mov    rsi,QWORD PTR [rbp-0x48]
  00988: 00 	test   rdi,0x1
  0098f:    	je     0x2b76a
  00995: 00 	test   rsi,0x1
  0099c:    	je     0x2b76a
  009a2:    	cmp    rdi,rsi
  009a5:    	jle    0x2b884
:00056 %3 = 1: i32
  009ab: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  009b3:    	sub    rsp,0x20
  009b7:    	movq   QWORD PTR [rsp],xmm2
  009bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  009c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  009c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ce:    	mov    rdx,QWORD PTR [rbp-0x30]
  009d2:    	mov    rcx,QWORD PTR [rbp-0x40]
  009d6:    	mov    rdi,rbx
  009d9:    	mov    rsi,r12
  009dc: b5 	movabs r8,0x55b5b07d6608
  009e6: b5 	movabs rax,0x55b5b0091aa0
  009f0:    	call   rax
  009f2:    	movq   xmm2,QWORD PTR [rsp]
  009f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a03:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a09:    	add    rsp,0x20
  00a0d: b5 	movabs r13,0x55b5b07d6610
  00a17:    	test   rax,rax
  00a1a:    	je     0xfffd17cf
  00a20:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a24: 00 	movq   xmm5,QWORD PTR [rip+0x1490]        # 0x1ebc
  00a2c: 00 	movabs rax,0xff80000000000002
  00a36:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a3a: 01 	sub    DWORD PTR [rip+0x1483],0x1        # 0x1ec4
  00a41:    	je     0x2b7ce
  00a47:    	sub    rsp,0x20
  00a4b:    	movq   QWORD PTR [rsp],xmm2
  00a50:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a56:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a5c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a62:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a66: b5 	movabs rax,0x55b5b009e670
  00a70:    	call   rax
  00a72:    	mov    r15d,eax
  00a75: 00 	cmp    r15d,DWORD PTR [rip+0x1450]        # 0x1ecc
  00a7c:    	jne    0x2b7f0
  00a82:    	mov    eax,DWORD PTR [rip+0xfffffffffffd3e31]        # 0xfffd48b9
  00a88:    	cmp    DWORD PTR [rip+0x143a],eax        # 0x1ec8
  00a8e:    	jne    0x2b7f0
  00a94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a9d:    	mov    QWORD PTR [rsp-0x38],rcx
  00aa2:    	mov    rax,QWORD PTR [rbx]
  00aa5:    	lea    rsi,[rsp-0x18]
  00aaa:    	mov    QWORD PTR [rsi],rax
  00aad:    	mov    QWORD PTR [rbx],rsi
  00ab0:    	mov    rax,QWORD PTR [rbp-0x40]
  00ab4:    	mov    QWORD PTR [rsp-0x38],rax
  00ab9: 00 	mov    rdi,0x1
  00ac0:    	lea    r8,[rsp-0x40]
  00ac5:    	mov    rax,QWORD PTR [rbp-0x48]
  00ac9:    	mov    QWORD PTR [r8],rax
  00acc:    	sub    r8,0x8
  00ad0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ad9: 00 	movabs rax,0x0
  00ae3:    	mov    QWORD PTR [rsp-0x28],rax
  00ae8: 00 	movabs r13,0x0
  00af2:    	call   0xfffd179c
  00af7:    	lea    rdi,[rbp-0x8]
  00afb:    	mov    QWORD PTR [rbx],rdi
  00afe:    	movq   xmm2,QWORD PTR [rsp]
  00b03:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b09:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b0f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b15:    	add    rsp,0x20
  00b19:    	test   rax,rax
  00b1c:    	je     0x2b85c
:00060 
:00062 br =>:00088
  00b22:    	jmp    0x2bb3f
:00063 %3 = %2.call z()                     [Vec]
  00b27:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b2b: 00 	test   rdi,0x7
  00b32:    	jne    0x2b89d
  00b38:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b3c:    	jne    0x2b89d
  00b42: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3d70],0x26        # 0xfffd48b9
  00b49:    	jne    0x2b89d
  00b4f:    	mov    esi,DWORD PTR [rip+0x137f]        # 0x1ed4
  00b55:    	cmp    esi,0xffffffff
  00b58:    	je     0x2b8ac
  00b5e:    	cmp    WORD PTR [rdi+0x2],0x3
  00b63:    	jne    0xb7c
  00b69:    	cmp    esi,0x6
  00b6c:    	jge    0xb7c
  00b72:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b77:    	jmp    0xbbe
  00b7c:    	sub    rsp,0x20
  00b80:    	movq   QWORD PTR [rsp],xmm2
  00b85:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b8b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b91:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b97: b5 	movabs rax,0x55b5b00a3ef0
  00ba1:    	call   rax
  00ba3:    	movq   xmm2,QWORD PTR [rsp]
  00ba8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bb4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bba:    	add    rsp,0x20
  00bbe:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00bc2: 00 	movq   xmm5,QWORD PTR [rip+0x1312]        # 0x1edc
  00bca: 99 	movabs rax,0xff1999999999999a
  00bd4:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00bd8:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bdc: 00 	test   rdi,0x1
  00be3:    	jne    0x2b90b
  00be9: 00 	test   rdi,0x2
  00bf0:    	je     0xc2c
  00bf6:    	xorps  xmm6,xmm6
  00bf9: 00 	movabs rax,0x8000000000000002
  00c03:    	cmp    rdi,rax
  00c06:    	je     0xc3e
  00c0c:    	mov    rax,rdi
  00c0f:    	sar    rax,0x3f
  00c13:    	add    rax,0x2
  00c17:    	and    rdi,0xfffffffffffffffc
  00c1b:    	or     rdi,rax
  00c1e:    	rol    rdi,0x3d
  00c22:    	movq   xmm6,rdi
  00c27:    	jmp    0xc3e
  00c2c:    	call   0xfffd1828
  00c31:    	test   rax,rax
  00c34:    	je     0x2b90b
  00c3a:    	movq   xmm6,xmm0
  00c3e:    	ucomisd xmm6,xmm5
  00c42:    	jae    0x2ba0c
:00069 %3 = %2.call z()                     [Vec]
  00c48:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c4c: 00 	test   rdi,0x7
  00c53:    	jne    0x2b91a
  00c59:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c5d:    	jne    0x2b91a
  00c63: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3c4f],0x26        # 0xfffd48b9
  00c6a:    	jne    0x2b91a
  00c70:    	mov    esi,DWORD PTR [rip+0x1272]        # 0x1ee8
  00c76:    	cmp    esi,0xffffffff
  00c79:    	je     0x2b929
  00c7f:    	cmp    WORD PTR [rdi+0x2],0x3
  00c84:    	jne    0xc9d
  00c8a:    	cmp    esi,0x6
  00c8d:    	jge    0xc9d
  00c93:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c98:    	jmp    0xcdf
  00c9d:    	sub    rsp,0x20
  00ca1:    	movq   QWORD PTR [rsp],xmm2
  00ca6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cac:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cb2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cb8: b5 	movabs rax,0x55b5b00a3ef0
  00cc2:    	call   rax
  00cc4:    	movq   xmm2,QWORD PTR [rsp]
  00cc9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ccf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cd5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cdb:    	add    rsp,0x20
  00cdf:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00ce3: 00 	movq   xmm5,QWORD PTR [rip+0x1201]        # 0x1eec
  00ceb: 99 	movabs rax,0xff1999999999999e
  00cf5:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00cf9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00cfd: 00 	test   rdi,0x1
  00d04:    	jne    0x2b988
  00d0a: 00 	test   rdi,0x2
  00d11:    	je     0xd4d
  00d17:    	xorps  xmm6,xmm6
  00d1a: 00 	movabs rax,0x8000000000000002
  00d24:    	cmp    rdi,rax
  00d27:    	je     0xd5f
  00d2d:    	mov    rax,rdi
  00d30:    	sar    rax,0x3f
  00d34:    	add    rax,0x2
  00d38:    	and    rdi,0xfffffffffffffffc
  00d3c:    	or     rdi,rax
  00d3f:    	rol    rdi,0x3d
  00d43:    	movq   xmm6,rdi
  00d48:    	jmp    0xd5f
  00d4d:    	call   0xfffd1828
  00d52:    	test   rax,rax
  00d55:    	je     0x2b988
  00d5b:    	movq   xmm6,xmm0
  00d5f:    	ucomisd xmm6,xmm5
  00d63:    	jbe    0x2ba25
:00075 %3 = 1: i32
  00d69: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d71:    	sub    rsp,0x20
  00d75:    	movq   QWORD PTR [rsp],xmm2
  00d7a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d80:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d86:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d8c:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d90:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d94:    	mov    rdi,rbx
  00d97:    	mov    rsi,r12
  00d9a: b5 	movabs r8,0x55b5b07d6738
  00da4: b5 	movabs rax,0x55b5b0091aa0
  00dae:    	call   rax
  00db0:    	movq   xmm2,QWORD PTR [rsp]
  00db5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dbb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dc1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dc7:    	add    rsp,0x20
  00dcb: b5 	movabs r13,0x55b5b07d6740
  00dd5:    	test   rax,rax
  00dd8:    	je     0xfffd17cf
  00dde:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00de2: 00 	movq   xmm5,QWORD PTR [rip+0x1112]        # 0x1efc
  00dea: 00 	movabs rax,0xff80000000000002
  00df4:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00df8:    	mov    rdi,QWORD PTR [rbp-0x40]
  00dfc: 00 	test   rdi,0x7
  00e03:    	jne    0x2b997
  00e09:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e0d:    	jne    0x2b997
  00e13: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3a9f],0x26        # 0xfffd48b9
  00e1a:    	jne    0x2b997
  00e20:    	mov    esi,DWORD PTR [rip+0x10e2]        # 0x1f08
  00e26:    	cmp    esi,0xffffffff
  00e29:    	je     0x2b9a6
  00e2f:    	cmp    WORD PTR [rdi+0x2],0x3
  00e34:    	jne    0xe51
  00e3a:    	cmp    esi,0x6
  00e3d:    	jge    0xe51
  00e43:    	mov    rax,QWORD PTR [rbp-0x48]
  00e47:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e4c:    	jmp    0xeaa
  00e51:    	sub    rsp,0x20
  00e55:    	movq   QWORD PTR [rsp],xmm2
  00e5a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e60:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e66:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e6c:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e70: b5 	movabs rax,0x55b5b00a4170
  00e7a:    	call   rax
  00e7c:    	movq   xmm2,QWORD PTR [rsp]
  00e81:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e87:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e8d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e93:    	add    rsp,0x20
  00e97: b5 	movabs r13,0x55b5b07d6770
  00ea1:    	test   rax,rax
  00ea4:    	je     0xfffd17cf
:00079 
:00081 br =>:00088
  00eaa:    	jmp    0x2bb58
:00082 %3 = 1: i32
  00eaf: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00eb7:    	sub    rsp,0x20
  00ebb:    	movq   QWORD PTR [rsp],xmm2
  00ec0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ec6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ecc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed2:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ed6:    	mov    rcx,QWORD PTR [rbp-0x40]
  00eda:    	mov    rdi,rbx
  00edd:    	mov    rsi,r12
  00ee0: b5 	movabs r8,0x55b5b07d67a8
  00eea: b5 	movabs rax,0x55b5b0091aa0
  00ef4:    	call   rax
  00ef6:    	movq   xmm2,QWORD PTR [rsp]
  00efb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f01:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f07:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f0d:    	add    rsp,0x20
  00f11: b5 	movabs r13,0x55b5b07d67b0
  00f1b:    	test   rax,rax
  00f1e:    	je     0xfffd17cf
  00f24:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f28: 00 	movq   xmm5,QWORD PTR [rip+0xfdc]        # 0x1f0c
  00f30: 00 	movabs rax,0xff80000000000002
  00f3a:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f3e: 01 	sub    DWORD PTR [rip+0xfcf],0x1        # 0x1f14
  00f45:    	je     0x2ba4d
  00f4b:    	sub    rsp,0x20
  00f4f:    	movq   QWORD PTR [rsp],xmm2
  00f54:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f5a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f60:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f66:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f6a: b5 	movabs rax,0x55b5b009e670
  00f74:    	call   rax
  00f76:    	mov    r15d,eax
  00f79: 00 	cmp    r15d,DWORD PTR [rip+0xf9c]        # 0x1f1c
  00f80:    	jne    0x2ba6f
  00f86:    	mov    eax,DWORD PTR [rip+0xfffffffffffd392d]        # 0xfffd48b9
  00f8c:    	cmp    DWORD PTR [rip+0xf86],eax        # 0x1f18
  00f92:    	jne    0x2ba6f
  00f98: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa1:    	mov    QWORD PTR [rsp-0x38],rcx
  00fa6:    	mov    rax,QWORD PTR [rbx]
  00fa9:    	lea    rsi,[rsp-0x18]
  00fae:    	mov    QWORD PTR [rsi],rax
  00fb1:    	mov    QWORD PTR [rbx],rsi
  00fb4:    	mov    rax,QWORD PTR [rbp-0x40]
  00fb8:    	mov    QWORD PTR [rsp-0x38],rax
  00fbd: 00 	mov    rdi,0x1
  00fc4:    	lea    r8,[rsp-0x40]
  00fc9:    	mov    rax,QWORD PTR [rbp-0x48]
  00fcd:    	mov    QWORD PTR [r8],rax
  00fd0:    	sub    r8,0x8
  00fd4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fdd: 00 	movabs rax,0x0
  00fe7:    	mov    QWORD PTR [rsp-0x28],rax
  00fec: 00 	movabs r13,0x0
  00ff6:    	call   0xfffd179c
  00ffb:    	lea    rdi,[rbp-0x8]
  00fff:    	mov    QWORD PTR [rbx],rdi
  01002:    	movq   xmm2,QWORD PTR [rsp]
  01007:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01013:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01019:    	add    rsp,0x20
  0101d:    	test   rax,rax
  01020:    	je     0x2badb
:00086 
:00088 %3 = 0: i32
  01026: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  0102e: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01036:    	sub    rsp,0x20
  0103a:    	movq   QWORD PTR [rsp],xmm2
  0103f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01045:    	movq   QWORD PTR [rsp+0x10],xmm4
  0104b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01051:    	mov    rdx,QWORD PTR [rbp-0x30]
  01055:    	mov    rcx,QWORD PTR [rbp-0x50]
  01059:    	mov    rdi,rbx
  0105c:    	mov    rsi,r12
  0105f: b5 	movabs r8,0x55b5b07d6818
  01069: b5 	movabs rax,0x55b5b0091aa0
  01073:    	call   rax
  01075:    	movq   xmm2,QWORD PTR [rsp]
  0107a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01080:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01086:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0108c:    	add    rsp,0x20
  01090: b5 	movabs r13,0x55b5b07d6820
  0109a:    	test   rax,rax
  0109d:    	je     0xfffd17cf
  010a3:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010a7: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010af:    	sub    rsp,0x20
  010b3:    	movq   QWORD PTR [rsp],xmm3
  010b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  010be:    	movq   QWORD PTR [rsp+0x10],xmm5
  010c4:    	mov    rdx,QWORD PTR [rbp-0x30]
  010c8:    	mov    rcx,QWORD PTR [rbp-0x58]
  010cc:    	mov    rdi,rbx
  010cf:    	mov    rsi,r12
  010d2: b5 	movabs r8,0x55b5b07d6838
  010dc: b5 	movabs rax,0x55b5b0091aa0
  010e6:    	call   rax
  010e8:    	movq   xmm3,QWORD PTR [rsp]
  010ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f9:    	add    rsp,0x20
  010fd: b5 	movabs r13,0x55b5b07d6840
  01107:    	test   rax,rax
  0110a:    	je     0xfffd17cf
  01110:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01114:    	mov    rdi,QWORD PTR [rbp-0x50]
  01118: 00 	test   rdi,0x7
  0111f:    	jne    0x2baea
  01125:    	cmp    DWORD PTR [rdi+0x4],0x28
  01129:    	jne    0x2baea
  0112f: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3783],0x26        # 0xfffd48b9
  01136:    	jne    0x2baea
  0113c:    	sub    rsp,0x10
  01140:    	movq   QWORD PTR [rsp],xmm3
  01145:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01154:    	mov    QWORD PTR [rsp-0x38],rcx
  01159:    	mov    rax,QWORD PTR [rbx]
  0115c:    	lea    rsi,[rsp-0x18]
  01161:    	mov    QWORD PTR [rsi],rax
  01164:    	mov    QWORD PTR [rbx],rsi
  01167:    	mov    rax,QWORD PTR [rbp-0x50]
  0116b:    	mov    QWORD PTR [rsp-0x38],rax
  01170: 00 	mov    rdi,0x1
  01177:    	lea    r8,[rsp-0x40]
  0117c:    	mov    rax,QWORD PTR [rbp-0x58]
  01180:    	mov    QWORD PTR [r8],rax
  01183:    	sub    r8,0x8
  01187: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01190: 09 	movabs rax,0x900000041
  0119a:    	mov    QWORD PTR [rsp-0x28],rax
  0119f: b5 	movabs r13,0x55b5b07a1dd0
  011a9:    	call   0xfffde841
  011ae:    	lea    rdi,[rbp-0x8]
  011b2:    	mov    QWORD PTR [rbx],rdi
  011b5:    	movq   xmm3,QWORD PTR [rsp]
  011ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c0:    	add    rsp,0x10
  011c4: b5 	movabs r13,0x55b5b07d6860
  011ce:    	test   rax,rax
  011d1:    	je     0xfffd17cf
  011d7:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011db:    	sub    rsp,0x10
  011df:    	movq   QWORD PTR [rsp],xmm3
  011e4:    	movq   QWORD PTR [rsp+0x8],xmm4
  011ea:    	mov    rdx,QWORD PTR [rbp-0x30]
  011ee:    	mov    rcx,QWORD PTR [rbp-0x40]
  011f2:    	mov    r8,QWORD PTR [rbp-0x48]
  011f6:    	mov    rdi,rbx
  011f9:    	mov    rsi,r12
  011fc: b5 	movabs rax,0x55b5b0091bd0
  01206:    	call   rax
  01208:    	movq   xmm3,QWORD PTR [rsp]
  0120d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01213:    	add    rsp,0x10
  01217: b5 	movabs r13,0x55b5b07d6880
  01221:    	test   rax,rax
  01224:    	je     0xfffd17cf
:00097 %3 = 0: i32
  0122a: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01232: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0123a:    	sub    rsp,0x10
  0123e:    	movq   QWORD PTR [rsp],xmm3
  01243:    	movq   QWORD PTR [rsp+0x8],xmm4
  01249:    	mov    rdx,QWORD PTR [rbp-0x30]
  0124d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01251:    	mov    rdi,rbx
  01254:    	mov    rsi,r12
  01257: b5 	movabs r8,0x55b5b07d68a8
  01261: b5 	movabs rax,0x55b5b0091aa0
  0126b:    	call   rax
  0126d:    	movq   xmm3,QWORD PTR [rsp]
  01272:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01278:    	add    rsp,0x10
  0127c: b5 	movabs r13,0x55b5b07d68b0
  01286:    	test   rax,rax
  01289:    	je     0xfffd17cf
  0128f:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01293:    	mov    rdi,QWORD PTR [rbp-0x50]
  01297: 00 	test   rdi,0x7
  0129e:    	jne    0x2baf9
  012a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  012a8:    	jne    0x2baf9
  012ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3604],0x26        # 0xfffd48b9
  012b5:    	jne    0x2baf9
  012bb:    	sub    rsp,0x10
  012bf:    	movq   QWORD PTR [rsp],xmm3
  012c4:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d3:    	mov    QWORD PTR [rsp-0x38],rcx
  012d8:    	mov    rax,QWORD PTR [rbx]
  012db:    	lea    rsi,[rsp-0x18]
  012e0:    	mov    QWORD PTR [rsi],rax
  012e3:    	mov    QWORD PTR [rbx],rsi
  012e6:    	mov    rax,QWORD PTR [rbp-0x50]
  012ea:    	mov    QWORD PTR [rsp-0x38],rax
  012ef: 00 	mov    rdi,0x0
  012f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012ff: 07 	movabs rax,0x1000700000044
  01309:    	mov    QWORD PTR [rsp-0x28],rax
  0130e: b5 	movabs r13,0x55b5b07ceca0
  01318:    	call   0xfffd51fe
  0131d:    	lea    rdi,[rbp-0x8]
  01321:    	mov    QWORD PTR [rbx],rdi
  01324:    	movq   xmm3,QWORD PTR [rsp]
  01329:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0132f:    	add    rsp,0x10
  01333: b5 	movabs r13,0x55b5b07d68d0
  0133d:    	test   rax,rax
  01340:    	je     0xfffd17cf
  01346:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  0134a:    	sub    rsp,0x10
  0134e:    	movq   QWORD PTR [rsp],xmm3
  01353:    	movq   QWORD PTR [rsp+0x8],xmm4
  01359:    	mov    rdx,QWORD PTR [rbp-0x30]
  0135d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01361:    	mov    r8,QWORD PTR [rbp-0x48]
  01365:    	mov    rdi,rbx
  01368:    	mov    rsi,r12
  0136b: b5 	movabs rax,0x55b5b0091bd0
  01375:    	call   rax
  01377:    	movq   xmm3,QWORD PTR [rsp]
  0137c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01382:    	add    rsp,0x10
  01386: b5 	movabs r13,0x55b5b07d68f0
  01390:    	test   rax,rax
  01393:    	je     0xfffd17cf
:00104 %3 = 1: i32
  01399: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  013a1: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  013a9:    	sub    rsp,0x10
  013ad:    	movq   QWORD PTR [rsp],xmm3
  013b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  013b8:    	mov    rdx,QWORD PTR [rbp-0x30]
  013bc:    	mov    rcx,QWORD PTR [rbp-0x50]
  013c0:    	mov    rdi,rbx
  013c3:    	mov    rsi,r12
  013c6: b5 	movabs r8,0x55b5b07d6918
  013d0: b5 	movabs rax,0x55b5b0091aa0
  013da:    	call   rax
  013dc:    	movq   xmm3,QWORD PTR [rsp]
  013e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013e7:    	add    rsp,0x10
  013eb: b5 	movabs r13,0x55b5b07d6920
  013f5:    	test   rax,rax
  013f8:    	je     0xfffd17cf
  013fe:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01402: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  0140a:    	sub    rsp,0x10
  0140e:    	movq   QWORD PTR [rsp],xmm3
  01413:    	movq   QWORD PTR [rsp+0x8],xmm4
  01419:    	mov    rdx,QWORD PTR [rbp-0x30]
  0141d:    	mov    rcx,QWORD PTR [rbp-0x58]
  01421:    	mov    rdi,rbx
  01424:    	mov    rsi,r12
  01427: b5 	movabs r8,0x55b5b07d6938
  01431: b5 	movabs rax,0x55b5b0091aa0
  0143b:    	call   rax
  0143d:    	movq   xmm3,QWORD PTR [rsp]
  01442:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01448:    	add    rsp,0x10
  0144c: b5 	movabs r13,0x55b5b07d6940
  01456:    	test   rax,rax
  01459:    	je     0xfffd17cf
  0145f:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01463:    	mov    rdi,QWORD PTR [rbp-0x50]
  01467: 00 	test   rdi,0x7
  0146e:    	jne    0x2bb08
  01474:    	cmp    DWORD PTR [rdi+0x4],0x28
  01478:    	jne    0x2bb08
  0147e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd3434],0x26        # 0xfffd48b9
  01485:    	jne    0x2bb08
  0148b:    	sub    rsp,0x10
  0148f:    	movq   QWORD PTR [rsp],xmm3
  01494:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014a3:    	mov    QWORD PTR [rsp-0x38],rcx
  014a8:    	mov    rax,QWORD PTR [rbx]
  014ab:    	lea    rsi,[rsp-0x18]
  014b0:    	mov    QWORD PTR [rsi],rax
  014b3:    	mov    QWORD PTR [rbx],rsi
  014b6:    	mov    rax,QWORD PTR [rbp-0x50]
  014ba:    	mov    QWORD PTR [rsp-0x38],rax
  014bf: 00 	mov    rdi,0x1
  014c6:    	lea    r8,[rsp-0x40]
  014cb:    	mov    rax,QWORD PTR [rbp-0x58]
  014cf:    	mov    QWORD PTR [r8],rax
  014d2:    	sub    r8,0x8
  014d6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014df: 09 	movabs rax,0x900000041
  014e9:    	mov    QWORD PTR [rsp-0x28],rax
  014ee: b5 	movabs r13,0x55b5b07a1dd0
  014f8:    	call   0xfffde841
  014fd:    	lea    rdi,[rbp-0x8]
  01501:    	mov    QWORD PTR [rbx],rdi
  01504:    	movq   xmm3,QWORD PTR [rsp]
  01509:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0150f:    	add    rsp,0x10
  01513: b5 	movabs r13,0x55b5b07d6960
  0151d:    	test   rax,rax
  01520:    	je     0xfffd17cf
  01526:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  0152a:    	sub    rsp,0x10
  0152e:    	movq   QWORD PTR [rsp],xmm3
  01533:    	movq   QWORD PTR [rsp+0x8],xmm4
  01539:    	mov    rdx,QWORD PTR [rbp-0x30]
  0153d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01541:    	mov    r8,QWORD PTR [rbp-0x48]
  01545:    	mov    rdi,rbx
  01548:    	mov    rsi,r12
  0154b: b5 	movabs rax,0x55b5b0091bd0
  01555:    	call   rax
  01557:    	movq   xmm3,QWORD PTR [rsp]
  0155c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01562:    	add    rsp,0x10
  01566: b5 	movabs r13,0x55b5b07d6980
  01570:    	test   rax,rax
  01573:    	je     0xfffd17cf
:00113 %3 = 1: i32
  01579: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01581: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01589:    	sub    rsp,0x10
  0158d:    	movq   QWORD PTR [rsp],xmm3
  01592:    	movq   QWORD PTR [rsp+0x8],xmm4
  01598:    	mov    rdx,QWORD PTR [rbp-0x30]
  0159c:    	mov    rcx,QWORD PTR [rbp-0x50]
  015a0:    	mov    rdi,rbx
  015a3:    	mov    rsi,r12
  015a6: b5 	movabs r8,0x55b5b07d69a8
  015b0: b5 	movabs rax,0x55b5b0091aa0
  015ba:    	call   rax
  015bc:    	movq   xmm3,QWORD PTR [rsp]
  015c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c7:    	add    rsp,0x10
  015cb: b5 	movabs r13,0x55b5b07d69b0
  015d5:    	test   rax,rax
  015d8:    	je     0xfffd17cf
  015de:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015e2:    	mov    rdi,QWORD PTR [rbp-0x50]
  015e6: 00 	test   rdi,0x7
  015ed:    	jne    0x2bb17
  015f3:    	cmp    DWORD PTR [rdi+0x4],0x28
  015f7:    	jne    0x2bb17
  015fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd32b5],0x26        # 0xfffd48b9
  01604:    	jne    0x2bb17
  0160a:    	sub    rsp,0x10
  0160e:    	movq   QWORD PTR [rsp],xmm3
  01613:    	movq   QWORD PTR [rsp+0x8],xmm4
  01619: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01622:    	mov    QWORD PTR [rsp-0x38],rcx
  01627:    	mov    rax,QWORD PTR [rbx]
  0162a:    	lea    rsi,[rsp-0x18]
  0162f:    	mov    QWORD PTR [rsi],rax
  01632:    	mov    QWORD PTR [rbx],rsi
  01635:    	mov    rax,QWORD PTR [rbp-0x50]
  01639:    	mov    QWORD PTR [rsp-0x38],rax
  0163e: 00 	mov    rdi,0x0
  01645: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0164e: 07 	movabs rax,0x1000700000044
  01658:    	mov    QWORD PTR [rsp-0x28],rax
  0165d: b5 	movabs r13,0x55b5b07ceca0
  01667:    	call   0xfffd51fe
  0166c:    	lea    rdi,[rbp-0x8]
  01670:    	mov    QWORD PTR [rbx],rdi
  01673:    	movq   xmm3,QWORD PTR [rsp]
  01678:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0167e:    	add    rsp,0x10
  01682: b5 	movabs r13,0x55b5b07d69d0
  0168c:    	test   rax,rax
  0168f:    	je     0xfffd17cf
  01695:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01699:    	sub    rsp,0x10
  0169d:    	movq   QWORD PTR [rsp],xmm3
  016a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a8:    	mov    rdx,QWORD PTR [rbp-0x30]
  016ac:    	mov    rcx,QWORD PTR [rbp-0x40]
  016b0:    	mov    r8,QWORD PTR [rbp-0x48]
  016b4:    	mov    rdi,rbx
  016b7:    	mov    rsi,r12
  016ba: b5 	movabs rax,0x55b5b0091bd0
  016c4:    	call   rax
  016c6:    	movq   xmm3,QWORD PTR [rsp]
  016cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016d1:    	add    rsp,0x10
  016d5: b5 	movabs r13,0x55b5b07d69f0
  016df:    	test   rax,rax
  016e2:    	je     0xfffd17cf
:00120 %3 = %4
  016e8:    	mov    rax,QWORD PTR [rbp-0x48]
  016ec:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016f0:    	mov    rax,QWORD PTR [rbp-0x40]
  016f4:    	leave  
  016f5:    	ret    
:00088 %3 = 0: i32
  016f6: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016fe: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01706:    	sub    rsp,0x20
  0170a:    	movq   QWORD PTR [rsp],xmm2
  0170f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01715:    	movq   QWORD PTR [rsp+0x10],xmm4
  0171b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01721:    	mov    rdx,QWORD PTR [rbp-0x30]
  01725:    	mov    rcx,QWORD PTR [rbp-0x50]
  01729:    	mov    rdi,rbx
  0172c:    	mov    rsi,r12
  0172f: b5 	movabs r8,0x55b5b07d6818
  01739: b5 	movabs rax,0x55b5b0091aa0
  01743:    	call   rax
  01745:    	movq   xmm2,QWORD PTR [rsp]
  0174a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01750:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01756:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0175c:    	add    rsp,0x20
  01760: b5 	movabs r13,0x55b5b07d6820
  0176a:    	test   rax,rax
  0176d:    	je     0xfffd17cf
  01773:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01777: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0177f:    	sub    rsp,0x20
  01783:    	movq   QWORD PTR [rsp],xmm3
  01788:    	movq   QWORD PTR [rsp+0x8],xmm4
  0178e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01794:    	mov    rdx,QWORD PTR [rbp-0x30]
  01798:    	mov    rcx,QWORD PTR [rbp-0x58]
  0179c:    	mov    rdi,rbx
  0179f:    	mov    rsi,r12
  017a2: b5 	movabs r8,0x55b5b07d6838
  017ac: b5 	movabs rax,0x55b5b0091aa0
  017b6:    	call   rax
  017b8:    	movq   xmm3,QWORD PTR [rsp]
  017bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017c3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017c9:    	add    rsp,0x20
  017cd: b5 	movabs r13,0x55b5b07d6840
  017d7:    	test   rax,rax
  017da:    	je     0xfffd17cf
  017e0:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017e4:    	mov    rdi,QWORD PTR [rbp-0x50]
  017e8: 00 	test   rdi,0x7
  017ef:    	jne    0x2bb71
  017f5:    	cmp    DWORD PTR [rdi+0x4],0x28
  017f9:    	jne    0x2bb71
  017ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffd30b3],0x26        # 0xfffd48b9
  01806:    	jne    0x2bb71
  0180c:    	sub    rsp,0x10
  01810:    	movq   QWORD PTR [rsp],xmm3
  01815:    	movq   QWORD PTR [rsp+0x8],xmm4
  0181b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01824:    	mov    QWORD PTR [rsp-0x38],rcx
  01829:    	mov    rax,QWORD PTR [rbx]
  0182c:    	lea    rsi,[rsp-0x18]
  01831:    	mov    QWORD PTR [rsi],rax
  01834:    	mov    QWORD PTR [rbx],rsi
  01837:    	mov    rax,QWORD PTR [rbp-0x50]
  0183b:    	mov    QWORD PTR [rsp-0x38],rax
  01840: 00 	mov    rdi,0x1
  01847:    	lea    r8,[rsp-0x40]
  0184c:    	mov    rax,QWORD PTR [rbp-0x58]
  01850:    	mov    QWORD PTR [r8],rax
  01853:    	sub    r8,0x8
  01857: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01860: 09 	movabs rax,0x900000041
  0186a:    	mov    QWORD PTR [rsp-0x28],rax
  0186f: b5 	movabs r13,0x55b5b07a1dd0
  01879:    	call   0xfffde841
  0187e:    	lea    rdi,[rbp-0x8]
  01882:    	mov    QWORD PTR [rbx],rdi
  01885:    	movq   xmm3,QWORD PTR [rsp]
  0188a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01890:    	add    rsp,0x10
  01894: b5 	movabs r13,0x55b5b07d6860
  0189e:    	test   rax,rax
  018a1:    	je     0xfffd17cf
  018a7:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  018ab:    	sub    rsp,0x10
  018af:    	movq   QWORD PTR [rsp],xmm3
  018b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  018ba:    	mov    rdx,QWORD PTR [rbp-0x30]
  018be:    	mov    rcx,QWORD PTR [rbp-0x40]
  018c2:    	mov    r8,QWORD PTR [rbp-0x48]
  018c6:    	mov    rdi,rbx
  018c9:    	mov    rsi,r12
  018cc: b5 	movabs rax,0x55b5b0091bd0
  018d6:    	call   rax
  018d8:    	movq   xmm3,QWORD PTR [rsp]
  018dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e3:    	add    rsp,0x10
  018e7: b5 	movabs r13,0x55b5b07d6880
  018f1:    	test   rax,rax
  018f4:    	je     0xfffd17cf
:00097 %3 = 0: i32
  018fa: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01902: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0190a:    	sub    rsp,0x10
  0190e:    	movq   QWORD PTR [rsp],xmm3
  01913:    	movq   QWORD PTR [rsp+0x8],xmm4
  01919:    	mov    rdx,QWORD PTR [rbp-0x30]
  0191d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01921:    	mov    rdi,rbx
  01924:    	mov    rsi,r12
  01927: b5 	movabs r8,0x55b5b07d68a8
  01931: b5 	movabs rax,0x55b5b0091aa0
  0193b:    	call   rax
  0193d:    	movq   xmm3,QWORD PTR [rsp]
  01942:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01948:    	add    rsp,0x10
  0194c: b5 	movabs r13,0x55b5b07d68b0
  01956:    	test   rax,rax
  01959:    	je     0xfffd17cf
  0195f:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01963:    	mov    rdi,QWORD PTR [rbp-0x50]
  01967: 00 	test   rdi,0x7
  0196e:    	jne    0x2bb80
  01974:    	cmp    DWORD PTR [rdi+0x4],0x28
  01978:    	jne    0x2bb80
  0197e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2f34],0x26        # 0xfffd48b9
  01985:    	jne    0x2bb80
  0198b:    	sub    rsp,0x10
  0198f:    	movq   QWORD PTR [rsp],xmm3
  01994:    	movq   QWORD PTR [rsp+0x8],xmm4
  0199a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019a3:    	mov    QWORD PTR [rsp-0x38],rcx
  019a8:    	mov    rax,QWORD PTR [rbx]
  019ab:    	lea    rsi,[rsp-0x18]
  019b0:    	mov    QWORD PTR [rsi],rax
  019b3:    	mov    QWORD PTR [rbx],rsi
  019b6:    	mov    rax,QWORD PTR [rbp-0x50]
  019ba:    	mov    QWORD PTR [rsp-0x38],rax
  019bf: 00 	mov    rdi,0x0
  019c6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019cf: 07 	movabs rax,0x1000700000044
  019d9:    	mov    QWORD PTR [rsp-0x28],rax
  019de: b5 	movabs r13,0x55b5b07ceca0
  019e8:    	call   0xfffd51fe
  019ed:    	lea    rdi,[rbp-0x8]
  019f1:    	mov    QWORD PTR [rbx],rdi
  019f4:    	movq   xmm3,QWORD PTR [rsp]
  019f9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019ff:    	add    rsp,0x10
  01a03: b5 	movabs r13,0x55b5b07d68d0
  01a0d:    	test   rax,rax
  01a10:    	je     0xfffd17cf
  01a16:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a1a:    	sub    rsp,0x10
  01a1e:    	movq   QWORD PTR [rsp],xmm3
  01a23:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a29:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a2d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a31:    	mov    r8,QWORD PTR [rbp-0x48]
  01a35:    	mov    rdi,rbx
  01a38:    	mov    rsi,r12
  01a3b: b5 	movabs rax,0x55b5b0091bd0
  01a45:    	call   rax
  01a47:    	movq   xmm3,QWORD PTR [rsp]
  01a4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a52:    	add    rsp,0x10
  01a56: b5 	movabs r13,0x55b5b07d68f0
  01a60:    	test   rax,rax
  01a63:    	je     0xfffd17cf
:00104 %3 = 1: i32
  01a69: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a71: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a79:    	sub    rsp,0x10
  01a7d:    	movq   QWORD PTR [rsp],xmm3
  01a82:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a88:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a8c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a90:    	mov    rdi,rbx
  01a93:    	mov    rsi,r12
  01a96: b5 	movabs r8,0x55b5b07d6918
  01aa0: b5 	movabs rax,0x55b5b0091aa0
  01aaa:    	call   rax
  01aac:    	movq   xmm3,QWORD PTR [rsp]
  01ab1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ab7:    	add    rsp,0x10
  01abb: b5 	movabs r13,0x55b5b07d6920
  01ac5:    	test   rax,rax
  01ac8:    	je     0xfffd17cf
  01ace:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01ad2: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01ada:    	sub    rsp,0x10
  01ade:    	movq   QWORD PTR [rsp],xmm3
  01ae3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ae9:    	mov    rdx,QWORD PTR [rbp-0x30]
  01aed:    	mov    rcx,QWORD PTR [rbp-0x58]
  01af1:    	mov    rdi,rbx
  01af4:    	mov    rsi,r12
  01af7: b5 	movabs r8,0x55b5b07d6938
  01b01: b5 	movabs rax,0x55b5b0091aa0
  01b0b:    	call   rax
  01b0d:    	movq   xmm3,QWORD PTR [rsp]
  01b12:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b18:    	add    rsp,0x10
  01b1c: b5 	movabs r13,0x55b5b07d6940
  01b26:    	test   rax,rax
  01b29:    	je     0xfffd17cf
  01b2f:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b33:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b37: 00 	test   rdi,0x7
  01b3e:    	jne    0x2bb8f
  01b44:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b48:    	jne    0x2bb8f
  01b4e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2d64],0x26        # 0xfffd48b9
  01b55:    	jne    0x2bb8f
  01b5b:    	sub    rsp,0x10
  01b5f:    	movq   QWORD PTR [rsp],xmm3
  01b64:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b6a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b73:    	mov    QWORD PTR [rsp-0x38],rcx
  01b78:    	mov    rax,QWORD PTR [rbx]
  01b7b:    	lea    rsi,[rsp-0x18]
  01b80:    	mov    QWORD PTR [rsi],rax
  01b83:    	mov    QWORD PTR [rbx],rsi
  01b86:    	mov    rax,QWORD PTR [rbp-0x50]
  01b8a:    	mov    QWORD PTR [rsp-0x38],rax
  01b8f: 00 	mov    rdi,0x1
  01b96:    	lea    r8,[rsp-0x40]
  01b9b:    	mov    rax,QWORD PTR [rbp-0x58]
  01b9f:    	mov    QWORD PTR [r8],rax
  01ba2:    	sub    r8,0x8
  01ba6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01baf: 09 	movabs rax,0x900000041
  01bb9:    	mov    QWORD PTR [rsp-0x28],rax
  01bbe: b5 	movabs r13,0x55b5b07a1dd0
  01bc8:    	call   0xfffde841
  01bcd:    	lea    rdi,[rbp-0x8]
  01bd1:    	mov    QWORD PTR [rbx],rdi
  01bd4:    	movq   xmm3,QWORD PTR [rsp]
  01bd9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bdf:    	add    rsp,0x10
  01be3: b5 	movabs r13,0x55b5b07d6960
  01bed:    	test   rax,rax
  01bf0:    	je     0xfffd17cf
  01bf6:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bfa:    	sub    rsp,0x10
  01bfe:    	movq   QWORD PTR [rsp],xmm3
  01c03:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c09:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c0d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01c11:    	mov    r8,QWORD PTR [rbp-0x48]
  01c15:    	mov    rdi,rbx
  01c18:    	mov    rsi,r12
  01c1b: b5 	movabs rax,0x55b5b0091bd0
  01c25:    	call   rax
  01c27:    	movq   xmm3,QWORD PTR [rsp]
  01c2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c32:    	add    rsp,0x10
  01c36: b5 	movabs r13,0x55b5b07d6980
  01c40:    	test   rax,rax
  01c43:    	je     0xfffd17cf
:00113 %3 = 1: i32
  01c49: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c51: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c59:    	sub    rsp,0x10
  01c5d:    	movq   QWORD PTR [rsp],xmm3
  01c62:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c68:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c6c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c70:    	mov    rdi,rbx
  01c73:    	mov    rsi,r12
  01c76: b5 	movabs r8,0x55b5b07d69a8
  01c80: b5 	movabs rax,0x55b5b0091aa0
  01c8a:    	call   rax
  01c8c:    	movq   xmm3,QWORD PTR [rsp]
  01c91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c97:    	add    rsp,0x10
  01c9b: b5 	movabs r13,0x55b5b07d69b0
  01ca5:    	test   rax,rax
  01ca8:    	je     0xfffd17cf
  01cae:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01cb2:    	mov    rdi,QWORD PTR [rbp-0x50]
  01cb6: 00 	test   rdi,0x7
  01cbd:    	jne    0x2bb9e
  01cc3:    	cmp    DWORD PTR [rdi+0x4],0x28
  01cc7:    	jne    0x2bb9e
  01ccd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2be5],0x26        # 0xfffd48b9
  01cd4:    	jne    0x2bb9e
  01cda:    	sub    rsp,0x10
  01cde:    	movq   QWORD PTR [rsp],xmm3
  01ce3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ce9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cf2:    	mov    QWORD PTR [rsp-0x38],rcx
  01cf7:    	mov    rax,QWORD PTR [rbx]
  01cfa:    	lea    rsi,[rsp-0x18]
  01cff:    	mov    QWORD PTR [rsi],rax
  01d02:    	mov    QWORD PTR [rbx],rsi
  01d05:    	mov    rax,QWORD PTR [rbp-0x50]
  01d09:    	mov    QWORD PTR [rsp-0x38],rax
  01d0e: 00 	mov    rdi,0x0
  01d15: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d1e: 07 	movabs rax,0x1000700000044
  01d28:    	mov    QWORD PTR [rsp-0x28],rax
  01d2d: b5 	movabs r13,0x55b5b07ceca0
  01d37:    	call   0xfffd51fe
  01d3c:    	lea    rdi,[rbp-0x8]
  01d40:    	mov    QWORD PTR [rbx],rdi
  01d43:    	movq   xmm3,QWORD PTR [rsp]
  01d48:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d4e:    	add    rsp,0x10
  01d52: b5 	movabs r13,0x55b5b07d69d0
  01d5c:    	test   rax,rax
  01d5f:    	je     0xfffd17cf
  01d65:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d69:    	sub    rsp,0x10
  01d6d:    	movq   QWORD PTR [rsp],xmm3
  01d72:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d78:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d7c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d80:    	mov    r8,QWORD PTR [rbp-0x48]
  01d84:    	mov    rdi,rbx
  01d87:    	mov    rsi,r12
  01d8a: b5 	movabs rax,0x55b5b0091bd0
  01d94:    	call   rax
  01d96:    	movq   xmm3,QWORD PTR [rsp]
  01d9b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01da1:    	add    rsp,0x10
  01da5: b5 	movabs r13,0x55b5b07d69f0
  01daf:    	test   rax,rax
  01db2:    	je     0xfffd17cf
:00120 %3 = %4
  01db8:    	mov    rax,QWORD PTR [rbp-0x48]
  01dbc:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01dc0:    	mov    rax,QWORD PTR [rbp-0x40]
  01dc4:    	leave  
  01dc5:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x55b5b07d6270
<== finished compile. elapsed:273µs
offset:Pos(198532) code: 7572 bytes  data: 332 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	je     0x4a
  00014:    	jl     0x1f
  0001a:    	jmp    0x29c8d
  0001f:    	jmp    0x29c8d
  00024:    	mov    eax,0x2
  00029:    	sub    eax,edx
  0002b:    	test   rax,rax
  0002e:    	je     0x4a
  00034:    	lea    rdi,[rbp-0x40]
  00038: 00 	mov    QWORD PTR [rdi+rax*8],0x0
  00040:    	sub    rax,0x1
  00044:    	jne    0x38
  0004a: 00 	mov    rax,0x4
  00051:    	mov    QWORD PTR [rbp-0x40],rax
  00055:    	mov    QWORD PTR [rbp-0x48],rax
  00059:    	mov    QWORD PTR [rbp-0x50],rax
  0005d:    	mov    QWORD PTR [rbp-0x58],rax
  00061:    	mov    QWORD PTR [rbp-0x60],rax
  00065:    	mov    QWORD PTR [rbp-0x68],rax
  00069:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x29c9c
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x32
  0007e:    	jne    0x29c9c
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  00084: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  0008c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd2919]        # 0xfffd29ac
  00093: 00 	cmp    rax,QWORD PTR [rip+0x1d12]        # 0x1dac
  0009a:    	jne    0x29cab
  000a0: 00 	mov    rax,QWORD PTR [rip+0x1cf5]        # 0x1d9c
  000a7:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  000ab:    	mov    rdi,QWORD PTR [rbp-0x38]
  000af: 00 	test   rdi,0x7
  000b6:    	jne    0x29cf1
  000bc:    	cmp    DWORD PTR [rdi+0x4],0x28
  000c0:    	jne    0x29cf1
  000c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffd28cc],0x26        # 0xfffd2999
  000cd:    	jne    0x29cf1
  000d3:    	mov    esi,DWORD PTR [rip+0x1cdf]        # 0x1db8
  000d9:    	cmp    esi,0xffffffff
  000dc:    	je     0x29d00
  000e2:    	cmp    WORD PTR [rdi+0x2],0x3
  000e7:    	jne    0x100
  000ed:    	cmp    esi,0x6
  000f0:    	jge    0x100
  000f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000fb:    	jmp    0x10c
  00100: b5 	movabs rax,0x55b5b00a3ef0
  0010a:    	call   rax
  0010c:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  00110:    	mov    rdi,QWORD PTR [rbp-0x38]
  00114: 00 	test   rdi,0x7
  0011b:    	jne    0x29d29
  00121:    	cmp    DWORD PTR [rdi+0x4],0x28
  00125:    	jne    0x29d29
  0012b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2867],0x26        # 0xfffd2999
  00132:    	jne    0x29d29
  00138:    	mov    esi,DWORD PTR [rip+0x1c82]        # 0x1dc0
  0013e:    	cmp    esi,0xffffffff
  00141:    	je     0x29d38
  00147:    	cmp    WORD PTR [rdi+0x2],0x3
  0014c:    	jne    0x165
  00152:    	cmp    esi,0x6
  00155:    	jge    0x165
  0015b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00160:    	jmp    0x171
  00165: b5 	movabs rax,0x55b5b00a3ef0
  0016f:    	call   rax
  00171:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00175:    	mov    rdi,QWORD PTR [rbp-0x38]
  00179: 00 	test   rdi,0x7
  00180:    	jne    0x29d61
  00186:    	cmp    DWORD PTR [rdi+0x4],0x28
  0018a:    	jne    0x29d61
  00190: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2802],0x26        # 0xfffd2999
  00197:    	jne    0x29d61
  0019d:    	mov    esi,DWORD PTR [rip+0x1c25]        # 0x1dc8
  001a3:    	cmp    esi,0xffffffff
  001a6:    	je     0x29d70
  001ac:    	cmp    WORD PTR [rdi+0x2],0x3
  001b1:    	jne    0x1ca
  001b7:    	cmp    esi,0x6
  001ba:    	jge    0x1ca
  001c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001c5:    	jmp    0x1d6
  001ca: b5 	movabs rax,0x55b5b00a3ef0
  001d4:    	call   rax
  001d6:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001da:    	mov    rdi,QWORD PTR [rbp-0x50]
  001de: 00 	test   rdi,0x7
  001e5:    	jne    0x29d99
  001eb:    	cmp    DWORD PTR [rdi+0x4],0x29
  001ef:    	jne    0x29d99
  001f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffd279d],0x26        # 0xfffd2999
  001fc:    	jne    0x29d99
  00202: 00 	mov    r9,0x0
  00209:    	mov    rdx,rdi
  0020c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00215:    	mov    QWORD PTR [rsp-0x38],rcx
  0021a:    	mov    rax,QWORD PTR [rbx]
  0021d:    	lea    rsi,[rsp-0x18]
  00222:    	mov    QWORD PTR [rsi],rax
  00225:    	mov    QWORD PTR [rbx],rsi
  00228:    	lea    rcx,[rbp-0x58]
  0022c: 00 	mov    r8,0x3
  00233:    	call   0x29da8
  00238:    	lea    rdi,[rbp-0x8]
  0023c:    	mov    QWORD PTR [rbx],rdi
  0023f: b5 	movabs r13,0x55b5b07d6350
  00249:    	test   rax,rax
  0024c:    	je     0xfffcf8af
  00252:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  00256:    	mov    rdx,QWORD PTR [rbp-0x30]
  0025a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0025e:    	mov    r8,QWORD PTR [rbp-0x48]
  00262:    	mov    rdi,rbx
  00265:    	mov    rsi,r12
  00268: b5 	movabs rax,0x55b5b0091bd0
  00272:    	call   rax
  00274: b5 	movabs r13,0x55b5b07d6370
  0027e:    	test   rax,rax
  00281:    	je     0xfffcf8af
:00016 %3 = 1: i32
  00287: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  0028f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd2716]        # 0xfffd29ac
  00296: 00 	cmp    rax,QWORD PTR [rip+0x1b3f]        # 0x1ddc
  0029d:    	jne    0x29dda
  002a3: 00 	mov    rax,QWORD PTR [rip+0x1b22]        # 0x1dcc
  002aa:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  002ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b36]        # 0x1dec
  002b6: 00 	movabs rax,0x8000000000000002
  002c0:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002c4: 00 	movq   xmm3,QWORD PTR [rip+0x1b30]        # 0x1dfc
  002cc: 00 	movabs rax,0x8000000000000002
  002d6:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002da: 00 	movq   xmm4,QWORD PTR [rip+0x1b2a]        # 0x1e0c
  002e2: 00 	movabs rax,0x8000000000000002
  002ec:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f0:    	mov    rdi,QWORD PTR [rbp-0x50]
  002f4: 00 	test   rdi,0x7
  002fb:    	jne    0x29e20
  00301:    	cmp    DWORD PTR [rdi+0x4],0x29
  00305:    	jne    0x29e20
  0030b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2687],0x26        # 0xfffd2999
  00312:    	jne    0x29e20
  00318: 00 	mov    r9,0x0
  0031f:    	sub    rsp,0x20
  00323:    	movq   QWORD PTR [rsp],xmm2
  00328:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00334:    	mov    rdx,rdi
  00337: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00340:    	mov    QWORD PTR [rsp-0x38],rcx
  00345:    	mov    rax,QWORD PTR [rbx]
  00348:    	lea    rsi,[rsp-0x18]
  0034d:    	mov    QWORD PTR [rsi],rax
  00350:    	mov    QWORD PTR [rbx],rsi
  00353:    	lea    rcx,[rbp-0x58]
  00357: 00 	mov    r8,0x3
  0035e:    	call   0x29e2f
  00363:    	lea    rdi,[rbp-0x8]
  00367:    	mov    QWORD PTR [rbx],rdi
  0036a:    	movq   xmm2,QWORD PTR [rsp]
  0036f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00375:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0037b:    	add    rsp,0x20
  0037f: b5 	movabs r13,0x55b5b07d63e0
  00389:    	test   rax,rax
  0038c:    	je     0xfffcf8af
  00392:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  00396:    	sub    rsp,0x20
  0039a:    	movq   QWORD PTR [rsp],xmm2
  0039f:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  003af:    	mov    rcx,QWORD PTR [rbp-0x40]
  003b3:    	mov    r8,QWORD PTR [rbp-0x48]
  003b7:    	mov    rdi,rbx
  003ba:    	mov    rsi,r12
  003bd: b5 	movabs rax,0x55b5b0091bd0
  003c7:    	call   rax
  003c9:    	movq   xmm2,QWORD PTR [rsp]
  003ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003da:    	add    rsp,0x20
  003de: b5 	movabs r13,0x55b5b07d6400
  003e8:    	test   rax,rax
  003eb:    	je     0xfffcf8af
:00025 %3 = %2.call x()                     [Vec]
  003f1:    	mov    rdi,QWORD PTR [rbp-0x38]
  003f5: 00 	test   rdi,0x7
  003fc:    	jne    0x29e61
  00402:    	cmp    DWORD PTR [rdi+0x4],0x28
  00406:    	jne    0x29e61
  0040c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2586],0x26        # 0xfffd2999
  00413:    	jne    0x29e61
  00419:    	mov    esi,DWORD PTR [rip+0x19f9]        # 0x1e18
  0041f:    	cmp    esi,0xffffffff
  00422:    	je     0x29e70
  00428:    	cmp    WORD PTR [rdi+0x2],0x3
  0042d:    	jne    0x446
  00433:    	cmp    esi,0x6
  00436:    	jge    0x446
  0043c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441:    	jmp    0x47c
  00446:    	sub    rsp,0x20
  0044a:    	movq   QWORD PTR [rsp],xmm2
  0044f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00455:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045b: b5 	movabs rax,0x55b5b00a3ef0
  00465:    	call   rax
  00467:    	movq   xmm2,QWORD PTR [rsp]
  0046c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00472:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00478:    	add    rsp,0x20
  0047c:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00480: 00 	movq   xmm5,QWORD PTR [rip+0x1994]        # 0x1e1c
  00488: 99 	movabs rax,0xff1999999999999a
  00492:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00496:    	mov    rdi,QWORD PTR [rbp-0x40]
  0049a: 00 	test   rdi,0x1
  004a1:    	jne    0x29ec3
  004a7: 00 	test   rdi,0x2
  004ae:    	je     0x4ea
  004b4:    	xorps  xmm6,xmm6
  004b7: 00 	movabs rax,0x8000000000000002
  004c1:    	cmp    rdi,rax
  004c4:    	je     0x4fc
  004ca:    	mov    rax,rdi
  004cd:    	sar    rax,0x3f
  004d1:    	add    rax,0x2
  004d5:    	and    rdi,0xfffffffffffffffc
  004d9:    	or     rdi,rax
  004dc:    	rol    rdi,0x3d
  004e0:    	movq   xmm6,rdi
  004e5:    	jmp    0x4fc
  004ea:    	call   0xfffcf908
  004ef:    	test   rax,rax
  004f2:    	je     0x29ec3
  004f8:    	movq   xmm6,xmm0
  004fc:    	ucomisd xmm6,xmm5
  00500:    	jae    0x29fc4
:00031 %3 = %2.call x()                     [Vec]
  00506:    	mov    rdi,QWORD PTR [rbp-0x38]
  0050a: 00 	test   rdi,0x7
  00511:    	jne    0x29ed2
  00517:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051b:    	jne    0x29ed2
  00521: 26 	cmp    DWORD PTR [rip+0xfffffffffffd2471],0x26        # 0xfffd2999
  00528:    	jne    0x29ed2
  0052e:    	mov    esi,DWORD PTR [rip+0x18f4]        # 0x1e28
  00534:    	cmp    esi,0xffffffff
  00537:    	je     0x29ee1
  0053d:    	cmp    WORD PTR [rdi+0x2],0x3
  00542:    	jne    0x55b
  00548:    	cmp    esi,0x6
  0054b:    	jge    0x55b
  00551:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00556:    	jmp    0x59d
  0055b:    	sub    rsp,0x20
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00570:    	movq   QWORD PTR [rsp+0x18],xmm5
  00576: b5 	movabs rax,0x55b5b00a3ef0
  00580:    	call   rax
  00582:    	movq   xmm2,QWORD PTR [rsp]
  00587:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00593:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00599:    	add    rsp,0x20
  0059d:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  005a1: 00 	movq   xmm5,QWORD PTR [rip+0x1883]        # 0x1e2c
  005a9: 99 	movabs rax,0xff1999999999999e
  005b3:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  005bb: 00 	test   rdi,0x1
  005c2:    	jne    0x29f40
  005c8: 00 	test   rdi,0x2
  005cf:    	je     0x60b
  005d5:    	xorps  xmm6,xmm6
  005d8: 00 	movabs rax,0x8000000000000002
  005e2:    	cmp    rdi,rax
  005e5:    	je     0x61d
  005eb:    	mov    rax,rdi
  005ee:    	sar    rax,0x3f
  005f2:    	add    rax,0x2
  005f6:    	and    rdi,0xfffffffffffffffc
  005fa:    	or     rdi,rax
  005fd:    	rol    rdi,0x3d
  00601:    	movq   xmm6,rdi
  00606:    	jmp    0x61d
  0060b:    	call   0xfffcf908
  00610:    	test   rax,rax
  00613:    	je     0x29f40
  00619:    	movq   xmm6,xmm0
  0061d:    	ucomisd xmm6,xmm5
  00621:    	jbe    0x29fdd
:00037 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  0062f:    	sub    rsp,0x20
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0064e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00652:    	mov    rdi,rbx
  00655:    	mov    rsi,r12
  00658: b5 	movabs r8,0x55b5b07d64d8
  00662: b5 	movabs rax,0x55b5b0091aa0
  0066c:    	call   rax
  0066e:    	movq   xmm2,QWORD PTR [rsp]
  00673:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00679:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00685:    	add    rsp,0x20
  00689: b5 	movabs r13,0x55b5b07d64e0
  00693:    	test   rax,rax
  00696:    	je     0xfffcf8af
  0069c:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  006a0: 00 	movq   xmm5,QWORD PTR [rip+0x1794]        # 0x1e3c
  006a8: 00 	movabs rax,0xff80000000000002
  006b2:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006b6:    	mov    rdi,QWORD PTR [rbp-0x40]
  006ba: 00 	test   rdi,0x7
  006c1:    	jne    0x29f4f
  006c7:    	cmp    DWORD PTR [rdi+0x4],0x28
  006cb:    	jne    0x29f4f
  006d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd22c1],0x26        # 0xfffd2999
  006d8:    	jne    0x29f4f
  006de:    	mov    esi,DWORD PTR [rip+0x1764]        # 0x1e48
  006e4:    	cmp    esi,0xffffffff
  006e7:    	je     0x29f5e
  006ed:    	cmp    WORD PTR [rdi+0x2],0x3
  006f2:    	jne    0x70f
  006f8:    	cmp    esi,0x6
  006fb:    	jge    0x70f
  00701:    	mov    rax,QWORD PTR [rbp-0x48]
  00705:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0070a:    	jmp    0x768
  0070f:    	sub    rsp,0x20
  00713:    	movq   QWORD PTR [rsp],xmm2
  00718:    	movq   QWORD PTR [rsp+0x8],xmm3
  0071e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00724:    	movq   QWORD PTR [rsp+0x18],xmm5
  0072a:    	mov    rdx,QWORD PTR [rbp-0x48]
  0072e: b5 	movabs rax,0x55b5b00a4170
  00738:    	call   rax
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	add    rsp,0x20
  00755: b5 	movabs r13,0x55b5b07d6510
  0075f:    	test   rax,rax
  00762:    	je     0xfffcf8af
:00041 
:00043 br =>:00088
  00768:    	jmp    0x2a420
:00044 %3 = %2.call y()                     [Vec]
  0076d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00771: 00 	test   rdi,0x7
  00778:    	jne    0x29ff6
  0077e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00782:    	jne    0x29ff6
  00788: 26 	cmp    DWORD PTR [rip+0xfffffffffffd220a],0x26        # 0xfffd2999
  0078f:    	jne    0x29ff6
  00795:    	mov    esi,DWORD PTR [rip+0x16b5]        # 0x1e50
  0079b:    	cmp    esi,0xffffffff
  0079e:    	je     0x2a005
  007a4:    	cmp    WORD PTR [rdi+0x2],0x3
  007a9:    	jne    0x7c2
  007af:    	cmp    esi,0x6
  007b2:    	jge    0x7c2
  007b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007bd:    	jmp    0x804
  007c2:    	sub    rsp,0x20
  007c6:    	movq   QWORD PTR [rsp],xmm2
  007cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  007d1:    	movq   QWORD PTR [rsp+0x10],xmm4
  007d7:    	movq   QWORD PTR [rsp+0x18],xmm5
  007dd: b5 	movabs rax,0x55b5b00a3ef0
  007e7:    	call   rax
  007e9:    	movq   xmm2,QWORD PTR [rsp]
  007ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00800:    	add    rsp,0x20
  00804:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00808: 00 	movq   xmm5,QWORD PTR [rip+0x164c]        # 0x1e5c
  00810: 99 	movabs rax,0xff1999999999999a
  0081a:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0081e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00822: 00 	test   rdi,0x1
  00829:    	jne    0x2a064
  0082f: 00 	test   rdi,0x2
  00836:    	je     0x872
  0083c:    	xorps  xmm6,xmm6
  0083f: 00 	movabs rax,0x8000000000000002
  00849:    	cmp    rdi,rax
  0084c:    	je     0x884
  00852:    	mov    rax,rdi
  00855:    	sar    rax,0x3f
  00859:    	add    rax,0x2
  0085d:    	and    rdi,0xfffffffffffffffc
  00861:    	or     rdi,rax
  00864:    	rol    rdi,0x3d
  00868:    	movq   xmm6,rdi
  0086d:    	jmp    0x884
  00872:    	call   0xfffcf908
  00877:    	test   rax,rax
  0087a:    	je     0x2a064
  00880:    	movq   xmm6,xmm0
  00884:    	ucomisd xmm6,xmm5
  00888:    	jae    0x2a165
:00050 %3 = %2.call y()                     [Vec]
  0088e:    	mov    rdi,QWORD PTR [rbp-0x38]
  00892: 00 	test   rdi,0x7
  00899:    	jne    0x2a073
  0089f:    	cmp    DWORD PTR [rdi+0x4],0x28
  008a3:    	jne    0x2a073
  008a9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd20e9],0x26        # 0xfffd2999
  008b0:    	jne    0x2a073
  008b6:    	mov    esi,DWORD PTR [rip+0x15ac]        # 0x1e68
  008bc:    	cmp    esi,0xffffffff
  008bf:    	je     0x2a082
  008c5:    	cmp    WORD PTR [rdi+0x2],0x3
  008ca:    	jne    0x8e3
  008d0:    	cmp    esi,0x6
  008d3:    	jge    0x8e3
  008d9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008de:    	jmp    0x925
  008e3:    	sub    rsp,0x20
  008e7:    	movq   QWORD PTR [rsp],xmm2
  008ec:    	movq   QWORD PTR [rsp+0x8],xmm3
  008f2:    	movq   QWORD PTR [rsp+0x10],xmm4
  008f8:    	movq   QWORD PTR [rsp+0x18],xmm5
  008fe: b5 	movabs rax,0x55b5b00a3ef0
  00908:    	call   rax
  0090a:    	movq   xmm2,QWORD PTR [rsp]
  0090f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00915:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0091b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00921:    	add    rsp,0x20
  00925:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00929: 00 	movq   xmm5,QWORD PTR [rip+0x153b]        # 0x1e6c
  00931: 99 	movabs rax,0xff1999999999999e
  0093b:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [Float][Float]
:00055 condnotbr _%3 =>:00063
  0093f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00943: 00 	test   rdi,0x1
  0094a:    	jne    0x2a0e1
  00950: 00 	test   rdi,0x2
  00957:    	je     0x993
  0095d:    	xorps  xmm6,xmm6
  00960: 00 	movabs rax,0x8000000000000002
  0096a:    	cmp    rdi,rax
  0096d:    	je     0x9a5
  00973:    	mov    rax,rdi
  00976:    	sar    rax,0x3f
  0097a:    	add    rax,0x2
  0097e:    	and    rdi,0xfffffffffffffffc
  00982:    	or     rdi,rax
  00985:    	rol    rdi,0x3d
  00989:    	movq   xmm6,rdi
  0098e:    	jmp    0x9a5
  00993:    	call   0xfffcf908
  00998:    	test   rax,rax
  0099b:    	je     0x2a0e1
  009a1:    	movq   xmm6,xmm0
  009a5:    	ucomisd xmm6,xmm5
  009a9:    	jbe    0x2a17e
:00056 %3 = 1: i32
  009af: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  009b7:    	sub    rsp,0x20
  009bb:    	movq   QWORD PTR [rsp],xmm2
  009c0:    	movq   QWORD PTR [rsp+0x8],xmm3
  009c6:    	movq   QWORD PTR [rsp+0x10],xmm4
  009cc:    	movq   QWORD PTR [rsp+0x18],xmm5
  009d2:    	mov    rdx,QWORD PTR [rbp-0x30]
  009d6:    	mov    rcx,QWORD PTR [rbp-0x40]
  009da:    	mov    rdi,rbx
  009dd:    	mov    rsi,r12
  009e0: b5 	movabs r8,0x55b5b07d6608
  009ea: b5 	movabs rax,0x55b5b0091aa0
  009f4:    	call   rax
  009f6:    	movq   xmm2,QWORD PTR [rsp]
  009fb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a01:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a07:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a0d:    	add    rsp,0x20
  00a11: b5 	movabs r13,0x55b5b07d6610
  00a1b:    	test   rax,rax
  00a1e:    	je     0xfffcf8af
  00a24:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a28: 00 	movq   xmm5,QWORD PTR [rip+0x144c]        # 0x1e7c
  00a30: 00 	movabs rax,0xff80000000000002
  00a3a:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [Vec]
  00a3e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a42: 00 	test   rdi,0x7
  00a49:    	jne    0x2a0f0
  00a4f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a53:    	jne    0x2a0f0
  00a59: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1f39],0x26        # 0xfffd2999
  00a60:    	jne    0x2a0f0
  00a66:    	mov    esi,DWORD PTR [rip+0x141c]        # 0x1e88
  00a6c:    	cmp    esi,0xffffffff
  00a6f:    	je     0x2a0ff
  00a75:    	cmp    WORD PTR [rdi+0x2],0x3
  00a7a:    	jne    0xa97
  00a80:    	cmp    esi,0x6
  00a83:    	jge    0xa97
  00a89:    	mov    rax,QWORD PTR [rbp-0x48]
  00a8d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00a92:    	jmp    0xaf0
  00a97:    	sub    rsp,0x20
  00a9b:    	movq   QWORD PTR [rsp],xmm2
  00aa0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aac:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab2:    	mov    rdx,QWORD PTR [rbp-0x48]
  00ab6: b5 	movabs rax,0x55b5b00a4170
  00ac0:    	call   rax
  00ac2:    	movq   xmm2,QWORD PTR [rsp]
  00ac7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00acd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ad3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ad9:    	add    rsp,0x20
  00add: b5 	movabs r13,0x55b5b07d6640
  00ae7:    	test   rax,rax
  00aea:    	je     0xfffcf8af
:00060 
:00062 br =>:00088
  00af0:    	jmp    0x2a439
:00063 %3 = %2.call z()                     [Vec]
  00af5:    	mov    rdi,QWORD PTR [rbp-0x38]
  00af9: 00 	test   rdi,0x7
  00b00:    	jne    0x2a197
  00b06:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b0a:    	jne    0x2a197
  00b10: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1e82],0x26        # 0xfffd2999
  00b17:    	jne    0x2a197
  00b1d:    	mov    esi,DWORD PTR [rip+0x136d]        # 0x1e90
  00b23:    	cmp    esi,0xffffffff
  00b26:    	je     0x2a1a6
  00b2c:    	cmp    WORD PTR [rdi+0x2],0x3
  00b31:    	jne    0xb4a
  00b37:    	cmp    esi,0x6
  00b3a:    	jge    0xb4a
  00b40:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b45:    	jmp    0xb8c
  00b4a:    	sub    rsp,0x20
  00b4e:    	movq   QWORD PTR [rsp],xmm2
  00b53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b65: b5 	movabs rax,0x55b5b00a3ef0
  00b6f:    	call   rax
  00b71:    	movq   xmm2,QWORD PTR [rsp]
  00b76:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b7c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b82:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b88:    	add    rsp,0x20
  00b8c:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00b90: 00 	movq   xmm5,QWORD PTR [rip+0x1304]        # 0x1e9c
  00b98: 99 	movabs rax,0xff1999999999999a
  00ba2:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00ba6:    	mov    rdi,QWORD PTR [rbp-0x40]
  00baa: 00 	test   rdi,0x1
  00bb1:    	jne    0x2a205
  00bb7: 00 	test   rdi,0x2
  00bbe:    	je     0xbfa
  00bc4:    	xorps  xmm6,xmm6
  00bc7: 00 	movabs rax,0x8000000000000002
  00bd1:    	cmp    rdi,rax
  00bd4:    	je     0xc0c
  00bda:    	mov    rax,rdi
  00bdd:    	sar    rax,0x3f
  00be1:    	add    rax,0x2
  00be5:    	and    rdi,0xfffffffffffffffc
  00be9:    	or     rdi,rax
  00bec:    	rol    rdi,0x3d
  00bf0:    	movq   xmm6,rdi
  00bf5:    	jmp    0xc0c
  00bfa:    	call   0xfffcf908
  00bff:    	test   rax,rax
  00c02:    	je     0x2a205
  00c08:    	movq   xmm6,xmm0
  00c0c:    	ucomisd xmm6,xmm5
  00c10:    	jae    0x2a306
:00069 %3 = %2.call z()                     [Vec]
  00c16:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c1a: 00 	test   rdi,0x7
  00c21:    	jne    0x2a214
  00c27:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c2b:    	jne    0x2a214
  00c31: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1d61],0x26        # 0xfffd2999
  00c38:    	jne    0x2a214
  00c3e:    	mov    esi,DWORD PTR [rip+0x1264]        # 0x1ea8
  00c44:    	cmp    esi,0xffffffff
  00c47:    	je     0x2a223
  00c4d:    	cmp    WORD PTR [rdi+0x2],0x3
  00c52:    	jne    0xc6b
  00c58:    	cmp    esi,0x6
  00c5b:    	jge    0xc6b
  00c61:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c66:    	jmp    0xcad
  00c6b:    	sub    rsp,0x20
  00c6f:    	movq   QWORD PTR [rsp],xmm2
  00c74:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c7a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c80:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c86: b5 	movabs rax,0x55b5b00a3ef0
  00c90:    	call   rax
  00c92:    	movq   xmm2,QWORD PTR [rsp]
  00c97:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c9d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ca3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ca9:    	add    rsp,0x20
  00cad:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00cb1: 00 	movq   xmm5,QWORD PTR [rip+0x11f3]        # 0x1eac
  00cb9: 99 	movabs rax,0xff1999999999999e
  00cc3:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00cc7:    	mov    rdi,QWORD PTR [rbp-0x40]
  00ccb: 00 	test   rdi,0x1
  00cd2:    	jne    0x2a282
  00cd8: 00 	test   rdi,0x2
  00cdf:    	je     0xd1b
  00ce5:    	xorps  xmm6,xmm6
  00ce8: 00 	movabs rax,0x8000000000000002
  00cf2:    	cmp    rdi,rax
  00cf5:    	je     0xd2d
  00cfb:    	mov    rax,rdi
  00cfe:    	sar    rax,0x3f
  00d02:    	add    rax,0x2
  00d06:    	and    rdi,0xfffffffffffffffc
  00d0a:    	or     rdi,rax
  00d0d:    	rol    rdi,0x3d
  00d11:    	movq   xmm6,rdi
  00d16:    	jmp    0xd2d
  00d1b:    	call   0xfffcf908
  00d20:    	test   rax,rax
  00d23:    	je     0x2a282
  00d29:    	movq   xmm6,xmm0
  00d2d:    	ucomisd xmm6,xmm5
  00d31:    	jbe    0x2a31f
:00075 %3 = 1: i32
  00d37: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d3f:    	sub    rsp,0x20
  00d43:    	movq   QWORD PTR [rsp],xmm2
  00d48:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d4e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d54:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d5a:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d5e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d62:    	mov    rdi,rbx
  00d65:    	mov    rsi,r12
  00d68: b5 	movabs r8,0x55b5b07d6738
  00d72: b5 	movabs rax,0x55b5b0091aa0
  00d7c:    	call   rax
  00d7e:    	movq   xmm2,QWORD PTR [rsp]
  00d83:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d89:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d8f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d95:    	add    rsp,0x20
  00d99: b5 	movabs r13,0x55b5b07d6740
  00da3:    	test   rax,rax
  00da6:    	je     0xfffcf8af
  00dac:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00db0: 00 	movq   xmm5,QWORD PTR [rip+0x1104]        # 0x1ebc
  00db8: 00 	movabs rax,0xff80000000000002
  00dc2:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00dc6:    	mov    rdi,QWORD PTR [rbp-0x40]
  00dca: 00 	test   rdi,0x7
  00dd1:    	jne    0x2a291
  00dd7:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ddb:    	jne    0x2a291
  00de1: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1bb1],0x26        # 0xfffd2999
  00de8:    	jne    0x2a291
  00dee:    	mov    esi,DWORD PTR [rip+0x10d4]        # 0x1ec8
  00df4:    	cmp    esi,0xffffffff
  00df7:    	je     0x2a2a0
  00dfd:    	cmp    WORD PTR [rdi+0x2],0x3
  00e02:    	jne    0xe1f
  00e08:    	cmp    esi,0x6
  00e0b:    	jge    0xe1f
  00e11:    	mov    rax,QWORD PTR [rbp-0x48]
  00e15:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e1a:    	jmp    0xe78
  00e1f:    	sub    rsp,0x20
  00e23:    	movq   QWORD PTR [rsp],xmm2
  00e28:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e2e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e34:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e3a:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e3e: b5 	movabs rax,0x55b5b00a4170
  00e48:    	call   rax
  00e4a:    	movq   xmm2,QWORD PTR [rsp]
  00e4f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e55:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e5b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e61:    	add    rsp,0x20
  00e65: b5 	movabs r13,0x55b5b07d6770
  00e6f:    	test   rax,rax
  00e72:    	je     0xfffcf8af
:00079 
:00081 br =>:00088
  00e78:    	jmp    0x2a452
:00082 %3 = 1: i32
  00e7d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e85:    	sub    rsp,0x20
  00e89:    	movq   QWORD PTR [rsp],xmm2
  00e8e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e94:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e9a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ea0:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ea4:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ea8:    	mov    rdi,rbx
  00eab:    	mov    rsi,r12
  00eae: b5 	movabs r8,0x55b5b07d67a8
  00eb8: b5 	movabs rax,0x55b5b0091aa0
  00ec2:    	call   rax
  00ec4:    	movq   xmm2,QWORD PTR [rsp]
  00ec9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ecf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ed5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00edb:    	add    rsp,0x20
  00edf: b5 	movabs r13,0x55b5b07d67b0
  00ee9:    	test   rax,rax
  00eec:    	je     0xfffcf8af
  00ef2:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00ef6: 00 	movq   xmm5,QWORD PTR [rip+0xfce]        # 0x1ecc
  00efe: 00 	movabs rax,0xff80000000000002
  00f08:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f0c: 01 	sub    DWORD PTR [rip+0xfc1],0x1        # 0x1ed4
  00f13:    	je     0x2a347
  00f19:    	sub    rsp,0x20
  00f1d:    	movq   QWORD PTR [rsp],xmm2
  00f22:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f28:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f2e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f34:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f38: b5 	movabs rax,0x55b5b009e670
  00f42:    	call   rax
  00f44:    	mov    r15d,eax
  00f47: 00 	cmp    r15d,DWORD PTR [rip+0xf8e]        # 0x1edc
  00f4e:    	jne    0x2a369
  00f54:    	mov    eax,DWORD PTR [rip+0xfffffffffffd1a3f]        # 0xfffd2999
  00f5a:    	cmp    DWORD PTR [rip+0xf78],eax        # 0x1ed8
  00f60:    	jne    0x2a369
  00f66: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f6f:    	mov    QWORD PTR [rsp-0x38],rcx
  00f74:    	mov    rax,QWORD PTR [rbx]
  00f77:    	lea    rsi,[rsp-0x18]
  00f7c:    	mov    QWORD PTR [rsi],rax
  00f7f:    	mov    QWORD PTR [rbx],rsi
  00f82:    	mov    rax,QWORD PTR [rbp-0x40]
  00f86:    	mov    QWORD PTR [rsp-0x38],rax
  00f8b: 00 	mov    rdi,0x1
  00f92:    	lea    r8,[rsp-0x40]
  00f97:    	mov    rax,QWORD PTR [rbp-0x48]
  00f9b:    	mov    QWORD PTR [r8],rax
  00f9e:    	sub    r8,0x8
  00fa2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fab: 00 	movabs rax,0x0
  00fb5:    	mov    QWORD PTR [rsp-0x28],rax
  00fba: 00 	movabs r13,0x0
  00fc4:    	call   0xfffcf87c
  00fc9:    	lea    rdi,[rbp-0x8]
  00fcd:    	mov    QWORD PTR [rbx],rdi
  00fd0:    	movq   xmm2,QWORD PTR [rsp]
  00fd5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fdb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fe1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fe7:    	add    rsp,0x20
  00feb:    	test   rax,rax
  00fee:    	je     0x2a3d5
:00086 
:00088 %3 = 0: i32
  00ff4: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  00ffc: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01004:    	sub    rsp,0x20
  01008:    	movq   QWORD PTR [rsp],xmm2
  0100d:    	movq   QWORD PTR [rsp+0x8],xmm3
  01013:    	movq   QWORD PTR [rsp+0x10],xmm4
  01019:    	movq   QWORD PTR [rsp+0x18],xmm5
  0101f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01023:    	mov    rcx,QWORD PTR [rbp-0x50]
  01027:    	mov    rdi,rbx
  0102a:    	mov    rsi,r12
  0102d: b5 	movabs r8,0x55b5b07d6818
  01037: b5 	movabs rax,0x55b5b0091aa0
  01041:    	call   rax
  01043:    	movq   xmm2,QWORD PTR [rsp]
  01048:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0104e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01054:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0105a:    	add    rsp,0x20
  0105e: b5 	movabs r13,0x55b5b07d6820
  01068:    	test   rax,rax
  0106b:    	je     0xfffcf8af
  01071:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01075: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0107d:    	sub    rsp,0x20
  01081:    	movq   QWORD PTR [rsp],xmm3
  01086:    	movq   QWORD PTR [rsp+0x8],xmm4
  0108c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01092:    	mov    rdx,QWORD PTR [rbp-0x30]
  01096:    	mov    rcx,QWORD PTR [rbp-0x58]
  0109a:    	mov    rdi,rbx
  0109d:    	mov    rsi,r12
  010a0: b5 	movabs r8,0x55b5b07d6838
  010aa: b5 	movabs rax,0x55b5b0091aa0
  010b4:    	call   rax
  010b6:    	movq   xmm3,QWORD PTR [rsp]
  010bb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010c1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010c7:    	add    rsp,0x20
  010cb: b5 	movabs r13,0x55b5b07d6840
  010d5:    	test   rax,rax
  010d8:    	je     0xfffcf8af
  010de:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  010e2:    	mov    rdi,QWORD PTR [rbp-0x50]
  010e6: 00 	test   rdi,0x7
  010ed:    	jne    0x2a3e4
  010f3:    	cmp    DWORD PTR [rdi+0x4],0x28
  010f7:    	jne    0x2a3e4
  010fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1895],0x26        # 0xfffd2999
  01104:    	jne    0x2a3e4
  0110a:    	sub    rsp,0x10
  0110e:    	movq   QWORD PTR [rsp],xmm3
  01113:    	movq   QWORD PTR [rsp+0x8],xmm4
  01119: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01122:    	mov    QWORD PTR [rsp-0x38],rcx
  01127:    	mov    rax,QWORD PTR [rbx]
  0112a:    	lea    rsi,[rsp-0x18]
  0112f:    	mov    QWORD PTR [rsi],rax
  01132:    	mov    QWORD PTR [rbx],rsi
  01135:    	mov    rax,QWORD PTR [rbp-0x50]
  01139:    	mov    QWORD PTR [rsp-0x38],rax
  0113e: 00 	mov    rdi,0x1
  01145:    	lea    r8,[rsp-0x40]
  0114a:    	mov    rax,QWORD PTR [rbp-0x58]
  0114e:    	mov    QWORD PTR [r8],rax
  01151:    	sub    r8,0x8
  01155: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0115e: 09 	movabs rax,0x900000041
  01168:    	mov    QWORD PTR [rsp-0x28],rax
  0116d: b5 	movabs r13,0x55b5b07a1dd0
  01177:    	call   0xfffdc921
  0117c:    	lea    rdi,[rbp-0x8]
  01180:    	mov    QWORD PTR [rbx],rdi
  01183:    	movq   xmm3,QWORD PTR [rsp]
  01188:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0118e:    	add    rsp,0x10
  01192: b5 	movabs r13,0x55b5b07d6860
  0119c:    	test   rax,rax
  0119f:    	je     0xfffcf8af
  011a5:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011a9:    	sub    rsp,0x10
  011ad:    	movq   QWORD PTR [rsp],xmm3
  011b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  011b8:    	mov    rdx,QWORD PTR [rbp-0x30]
  011bc:    	mov    rcx,QWORD PTR [rbp-0x40]
  011c0:    	mov    r8,QWORD PTR [rbp-0x48]
  011c4:    	mov    rdi,rbx
  011c7:    	mov    rsi,r12
  011ca: b5 	movabs rax,0x55b5b0091bd0
  011d4:    	call   rax
  011d6:    	movq   xmm3,QWORD PTR [rsp]
  011db:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011e1:    	add    rsp,0x10
  011e5: b5 	movabs r13,0x55b5b07d6880
  011ef:    	test   rax,rax
  011f2:    	je     0xfffcf8af
:00097 %3 = 0: i32
  011f8: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01200: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01208:    	sub    rsp,0x10
  0120c:    	movq   QWORD PTR [rsp],xmm3
  01211:    	movq   QWORD PTR [rsp+0x8],xmm4
  01217:    	mov    rdx,QWORD PTR [rbp-0x30]
  0121b:    	mov    rcx,QWORD PTR [rbp-0x50]
  0121f:    	mov    rdi,rbx
  01222:    	mov    rsi,r12
  01225: b5 	movabs r8,0x55b5b07d68a8
  0122f: b5 	movabs rax,0x55b5b0091aa0
  01239:    	call   rax
  0123b:    	movq   xmm3,QWORD PTR [rsp]
  01240:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01246:    	add    rsp,0x10
  0124a: b5 	movabs r13,0x55b5b07d68b0
  01254:    	test   rax,rax
  01257:    	je     0xfffcf8af
  0125d:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01261:    	mov    rdi,QWORD PTR [rbp-0x50]
  01265: 00 	test   rdi,0x7
  0126c:    	jne    0x2a3f3
  01272:    	cmp    DWORD PTR [rdi+0x4],0x28
  01276:    	jne    0x2a3f3
  0127c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1716],0x26        # 0xfffd2999
  01283:    	jne    0x2a3f3
  01289:    	sub    rsp,0x10
  0128d:    	movq   QWORD PTR [rsp],xmm3
  01292:    	movq   QWORD PTR [rsp+0x8],xmm4
  01298: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012a1:    	mov    QWORD PTR [rsp-0x38],rcx
  012a6:    	mov    rax,QWORD PTR [rbx]
  012a9:    	lea    rsi,[rsp-0x18]
  012ae:    	mov    QWORD PTR [rsi],rax
  012b1:    	mov    QWORD PTR [rbx],rsi
  012b4:    	mov    rax,QWORD PTR [rbp-0x50]
  012b8:    	mov    QWORD PTR [rsp-0x38],rax
  012bd: 00 	mov    rdi,0x0
  012c4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012cd: 07 	movabs rax,0x1000700000044
  012d7:    	mov    QWORD PTR [rsp-0x28],rax
  012dc: b5 	movabs r13,0x55b5b07ceca0
  012e6:    	call   0xfffd32de
  012eb:    	lea    rdi,[rbp-0x8]
  012ef:    	mov    QWORD PTR [rbx],rdi
  012f2:    	movq   xmm3,QWORD PTR [rsp]
  012f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012fd:    	add    rsp,0x10
  01301: b5 	movabs r13,0x55b5b07d68d0
  0130b:    	test   rax,rax
  0130e:    	je     0xfffcf8af
  01314:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01318:    	sub    rsp,0x10
  0131c:    	movq   QWORD PTR [rsp],xmm3
  01321:    	movq   QWORD PTR [rsp+0x8],xmm4
  01327:    	mov    rdx,QWORD PTR [rbp-0x30]
  0132b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0132f:    	mov    r8,QWORD PTR [rbp-0x48]
  01333:    	mov    rdi,rbx
  01336:    	mov    rsi,r12
  01339: b5 	movabs rax,0x55b5b0091bd0
  01343:    	call   rax
  01345:    	movq   xmm3,QWORD PTR [rsp]
  0134a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01350:    	add    rsp,0x10
  01354: b5 	movabs r13,0x55b5b07d68f0
  0135e:    	test   rax,rax
  01361:    	je     0xfffcf8af
:00104 %3 = 1: i32
  01367: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  0136f: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01377:    	sub    rsp,0x10
  0137b:    	movq   QWORD PTR [rsp],xmm3
  01380:    	movq   QWORD PTR [rsp+0x8],xmm4
  01386:    	mov    rdx,QWORD PTR [rbp-0x30]
  0138a:    	mov    rcx,QWORD PTR [rbp-0x50]
  0138e:    	mov    rdi,rbx
  01391:    	mov    rsi,r12
  01394: b5 	movabs r8,0x55b5b07d6918
  0139e: b5 	movabs rax,0x55b5b0091aa0
  013a8:    	call   rax
  013aa:    	movq   xmm3,QWORD PTR [rsp]
  013af:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013b5:    	add    rsp,0x10
  013b9: b5 	movabs r13,0x55b5b07d6920
  013c3:    	test   rax,rax
  013c6:    	je     0xfffcf8af
  013cc:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013d0: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  013d8:    	sub    rsp,0x10
  013dc:    	movq   QWORD PTR [rsp],xmm3
  013e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e7:    	mov    rdx,QWORD PTR [rbp-0x30]
  013eb:    	mov    rcx,QWORD PTR [rbp-0x58]
  013ef:    	mov    rdi,rbx
  013f2:    	mov    rsi,r12
  013f5: b5 	movabs r8,0x55b5b07d6938
  013ff: b5 	movabs rax,0x55b5b0091aa0
  01409:    	call   rax
  0140b:    	movq   xmm3,QWORD PTR [rsp]
  01410:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01416:    	add    rsp,0x10
  0141a: b5 	movabs r13,0x55b5b07d6940
  01424:    	test   rax,rax
  01427:    	je     0xfffcf8af
  0142d:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01431:    	mov    rdi,QWORD PTR [rbp-0x50]
  01435: 00 	test   rdi,0x7
  0143c:    	jne    0x2a402
  01442:    	cmp    DWORD PTR [rdi+0x4],0x28
  01446:    	jne    0x2a402
  0144c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1546],0x26        # 0xfffd2999
  01453:    	jne    0x2a402
  01459:    	sub    rsp,0x10
  0145d:    	movq   QWORD PTR [rsp],xmm3
  01462:    	movq   QWORD PTR [rsp+0x8],xmm4
  01468: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01471:    	mov    QWORD PTR [rsp-0x38],rcx
  01476:    	mov    rax,QWORD PTR [rbx]
  01479:    	lea    rsi,[rsp-0x18]
  0147e:    	mov    QWORD PTR [rsi],rax
  01481:    	mov    QWORD PTR [rbx],rsi
  01484:    	mov    rax,QWORD PTR [rbp-0x50]
  01488:    	mov    QWORD PTR [rsp-0x38],rax
  0148d: 00 	mov    rdi,0x1
  01494:    	lea    r8,[rsp-0x40]
  01499:    	mov    rax,QWORD PTR [rbp-0x58]
  0149d:    	mov    QWORD PTR [r8],rax
  014a0:    	sub    r8,0x8
  014a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ad: 09 	movabs rax,0x900000041
  014b7:    	mov    QWORD PTR [rsp-0x28],rax
  014bc: b5 	movabs r13,0x55b5b07a1dd0
  014c6:    	call   0xfffdc921
  014cb:    	lea    rdi,[rbp-0x8]
  014cf:    	mov    QWORD PTR [rbx],rdi
  014d2:    	movq   xmm3,QWORD PTR [rsp]
  014d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014dd:    	add    rsp,0x10
  014e1: b5 	movabs r13,0x55b5b07d6960
  014eb:    	test   rax,rax
  014ee:    	je     0xfffcf8af
  014f4:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  014f8:    	sub    rsp,0x10
  014fc:    	movq   QWORD PTR [rsp],xmm3
  01501:    	movq   QWORD PTR [rsp+0x8],xmm4
  01507:    	mov    rdx,QWORD PTR [rbp-0x30]
  0150b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0150f:    	mov    r8,QWORD PTR [rbp-0x48]
  01513:    	mov    rdi,rbx
  01516:    	mov    rsi,r12
  01519: b5 	movabs rax,0x55b5b0091bd0
  01523:    	call   rax
  01525:    	movq   xmm3,QWORD PTR [rsp]
  0152a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01530:    	add    rsp,0x10
  01534: b5 	movabs r13,0x55b5b07d6980
  0153e:    	test   rax,rax
  01541:    	je     0xfffcf8af
:00113 %3 = 1: i32
  01547: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  0154f: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01557:    	sub    rsp,0x10
  0155b:    	movq   QWORD PTR [rsp],xmm3
  01560:    	movq   QWORD PTR [rsp+0x8],xmm4
  01566:    	mov    rdx,QWORD PTR [rbp-0x30]
  0156a:    	mov    rcx,QWORD PTR [rbp-0x50]
  0156e:    	mov    rdi,rbx
  01571:    	mov    rsi,r12
  01574: b5 	movabs r8,0x55b5b07d69a8
  0157e: b5 	movabs rax,0x55b5b0091aa0
  01588:    	call   rax
  0158a:    	movq   xmm3,QWORD PTR [rsp]
  0158f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01595:    	add    rsp,0x10
  01599: b5 	movabs r13,0x55b5b07d69b0
  015a3:    	test   rax,rax
  015a6:    	je     0xfffcf8af
  015ac:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015b0:    	mov    rdi,QWORD PTR [rbp-0x50]
  015b4: 00 	test   rdi,0x7
  015bb:    	jne    0x2a411
  015c1:    	cmp    DWORD PTR [rdi+0x4],0x28
  015c5:    	jne    0x2a411
  015cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffd13c7],0x26        # 0xfffd2999
  015d2:    	jne    0x2a411
  015d8:    	sub    rsp,0x10
  015dc:    	movq   QWORD PTR [rsp],xmm3
  015e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015f0:    	mov    QWORD PTR [rsp-0x38],rcx
  015f5:    	mov    rax,QWORD PTR [rbx]
  015f8:    	lea    rsi,[rsp-0x18]
  015fd:    	mov    QWORD PTR [rsi],rax
  01600:    	mov    QWORD PTR [rbx],rsi
  01603:    	mov    rax,QWORD PTR [rbp-0x50]
  01607:    	mov    QWORD PTR [rsp-0x38],rax
  0160c: 00 	mov    rdi,0x0
  01613: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0161c: 07 	movabs rax,0x1000700000044
  01626:    	mov    QWORD PTR [rsp-0x28],rax
  0162b: b5 	movabs r13,0x55b5b07ceca0
  01635:    	call   0xfffd32de
  0163a:    	lea    rdi,[rbp-0x8]
  0163e:    	mov    QWORD PTR [rbx],rdi
  01641:    	movq   xmm3,QWORD PTR [rsp]
  01646:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0164c:    	add    rsp,0x10
  01650: b5 	movabs r13,0x55b5b07d69d0
  0165a:    	test   rax,rax
  0165d:    	je     0xfffcf8af
  01663:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01667:    	sub    rsp,0x10
  0166b:    	movq   QWORD PTR [rsp],xmm3
  01670:    	movq   QWORD PTR [rsp+0x8],xmm4
  01676:    	mov    rdx,QWORD PTR [rbp-0x30]
  0167a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0167e:    	mov    r8,QWORD PTR [rbp-0x48]
  01682:    	mov    rdi,rbx
  01685:    	mov    rsi,r12
  01688: b5 	movabs rax,0x55b5b0091bd0
  01692:    	call   rax
  01694:    	movq   xmm3,QWORD PTR [rsp]
  01699:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169f:    	add    rsp,0x10
  016a3: b5 	movabs r13,0x55b5b07d69f0
  016ad:    	test   rax,rax
  016b0:    	je     0xfffcf8af
:00120 %3 = %4
  016b6:    	mov    rax,QWORD PTR [rbp-0x48]
  016ba:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016be:    	mov    rax,QWORD PTR [rbp-0x40]
  016c2:    	leave  
  016c3:    	ret    
:00088 %3 = 0: i32
  016c4: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016cc: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016d4:    	sub    rsp,0x20
  016d8:    	movq   QWORD PTR [rsp],xmm2
  016dd:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e3:    	movq   QWORD PTR [rsp+0x10],xmm4
  016e9:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ef:    	mov    rdx,QWORD PTR [rbp-0x30]
  016f3:    	mov    rcx,QWORD PTR [rbp-0x50]
  016f7:    	mov    rdi,rbx
  016fa:    	mov    rsi,r12
  016fd: b5 	movabs r8,0x55b5b07d6818
  01707: b5 	movabs rax,0x55b5b0091aa0
  01711:    	call   rax
  01713:    	movq   xmm2,QWORD PTR [rsp]
  01718:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0171e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01724:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0172a:    	add    rsp,0x20
  0172e: b5 	movabs r13,0x55b5b07d6820
  01738:    	test   rax,rax
  0173b:    	je     0xfffcf8af
  01741:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01745: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0174d:    	sub    rsp,0x20
  01751:    	movq   QWORD PTR [rsp],xmm3
  01756:    	movq   QWORD PTR [rsp+0x8],xmm4
  0175c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01762:    	mov    rdx,QWORD PTR [rbp-0x30]
  01766:    	mov    rcx,QWORD PTR [rbp-0x58]
  0176a:    	mov    rdi,rbx
  0176d:    	mov    rsi,r12
  01770: b5 	movabs r8,0x55b5b07d6838
  0177a: b5 	movabs rax,0x55b5b0091aa0
  01784:    	call   rax
  01786:    	movq   xmm3,QWORD PTR [rsp]
  0178b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01791:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01797:    	add    rsp,0x20
  0179b: b5 	movabs r13,0x55b5b07d6840
  017a5:    	test   rax,rax
  017a8:    	je     0xfffcf8af
  017ae:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017b2:    	mov    rdi,QWORD PTR [rbp-0x50]
  017b6: 00 	test   rdi,0x7
  017bd:    	jne    0x2a46b
  017c3:    	cmp    DWORD PTR [rdi+0x4],0x28
  017c7:    	jne    0x2a46b
  017cd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd11c5],0x26        # 0xfffd2999
  017d4:    	jne    0x2a46b
  017da:    	sub    rsp,0x10
  017de:    	movq   QWORD PTR [rsp],xmm3
  017e3:    	movq   QWORD PTR [rsp+0x8],xmm4
  017e9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017f2:    	mov    QWORD PTR [rsp-0x38],rcx
  017f7:    	mov    rax,QWORD PTR [rbx]
  017fa:    	lea    rsi,[rsp-0x18]
  017ff:    	mov    QWORD PTR [rsi],rax
  01802:    	mov    QWORD PTR [rbx],rsi
  01805:    	mov    rax,QWORD PTR [rbp-0x50]
  01809:    	mov    QWORD PTR [rsp-0x38],rax
  0180e: 00 	mov    rdi,0x1
  01815:    	lea    r8,[rsp-0x40]
  0181a:    	mov    rax,QWORD PTR [rbp-0x58]
  0181e:    	mov    QWORD PTR [r8],rax
  01821:    	sub    r8,0x8
  01825: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0182e: 09 	movabs rax,0x900000041
  01838:    	mov    QWORD PTR [rsp-0x28],rax
  0183d: b5 	movabs r13,0x55b5b07a1dd0
  01847:    	call   0xfffdc921
  0184c:    	lea    rdi,[rbp-0x8]
  01850:    	mov    QWORD PTR [rbx],rdi
  01853:    	movq   xmm3,QWORD PTR [rsp]
  01858:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0185e:    	add    rsp,0x10
  01862: b5 	movabs r13,0x55b5b07d6860
  0186c:    	test   rax,rax
  0186f:    	je     0xfffcf8af
  01875:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01879:    	sub    rsp,0x10
  0187d:    	movq   QWORD PTR [rsp],xmm3
  01882:    	movq   QWORD PTR [rsp+0x8],xmm4
  01888:    	mov    rdx,QWORD PTR [rbp-0x30]
  0188c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01890:    	mov    r8,QWORD PTR [rbp-0x48]
  01894:    	mov    rdi,rbx
  01897:    	mov    rsi,r12
  0189a: b5 	movabs rax,0x55b5b0091bd0
  018a4:    	call   rax
  018a6:    	movq   xmm3,QWORD PTR [rsp]
  018ab:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018b1:    	add    rsp,0x10
  018b5: b5 	movabs r13,0x55b5b07d6880
  018bf:    	test   rax,rax
  018c2:    	je     0xfffcf8af
:00097 %3 = 0: i32
  018c8: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  018d0: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018d8:    	sub    rsp,0x10
  018dc:    	movq   QWORD PTR [rsp],xmm3
  018e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  018e7:    	mov    rdx,QWORD PTR [rbp-0x30]
  018eb:    	mov    rcx,QWORD PTR [rbp-0x50]
  018ef:    	mov    rdi,rbx
  018f2:    	mov    rsi,r12
  018f5: b5 	movabs r8,0x55b5b07d68a8
  018ff: b5 	movabs rax,0x55b5b0091aa0
  01909:    	call   rax
  0190b:    	movq   xmm3,QWORD PTR [rsp]
  01910:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01916:    	add    rsp,0x10
  0191a: b5 	movabs r13,0x55b5b07d68b0
  01924:    	test   rax,rax
  01927:    	je     0xfffcf8af
  0192d:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01931:    	mov    rdi,QWORD PTR [rbp-0x50]
  01935: 00 	test   rdi,0x7
  0193c:    	jne    0x2a47a
  01942:    	cmp    DWORD PTR [rdi+0x4],0x28
  01946:    	jne    0x2a47a
  0194c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd1046],0x26        # 0xfffd2999
  01953:    	jne    0x2a47a
  01959:    	sub    rsp,0x10
  0195d:    	movq   QWORD PTR [rsp],xmm3
  01962:    	movq   QWORD PTR [rsp+0x8],xmm4
  01968: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01971:    	mov    QWORD PTR [rsp-0x38],rcx
  01976:    	mov    rax,QWORD PTR [rbx]
  01979:    	lea    rsi,[rsp-0x18]
  0197e:    	mov    QWORD PTR [rsi],rax
  01981:    	mov    QWORD PTR [rbx],rsi
  01984:    	mov    rax,QWORD PTR [rbp-0x50]
  01988:    	mov    QWORD PTR [rsp-0x38],rax
  0198d: 00 	mov    rdi,0x0
  01994: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0199d: 07 	movabs rax,0x1000700000044
  019a7:    	mov    QWORD PTR [rsp-0x28],rax
  019ac: b5 	movabs r13,0x55b5b07ceca0
  019b6:    	call   0xfffd32de
  019bb:    	lea    rdi,[rbp-0x8]
  019bf:    	mov    QWORD PTR [rbx],rdi
  019c2:    	movq   xmm3,QWORD PTR [rsp]
  019c7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019cd:    	add    rsp,0x10
  019d1: b5 	movabs r13,0x55b5b07d68d0
  019db:    	test   rax,rax
  019de:    	je     0xfffcf8af
  019e4:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  019e8:    	sub    rsp,0x10
  019ec:    	movq   QWORD PTR [rsp],xmm3
  019f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  019f7:    	mov    rdx,QWORD PTR [rbp-0x30]
  019fb:    	mov    rcx,QWORD PTR [rbp-0x40]
  019ff:    	mov    r8,QWORD PTR [rbp-0x48]
  01a03:    	mov    rdi,rbx
  01a06:    	mov    rsi,r12
  01a09: b5 	movabs rax,0x55b5b0091bd0
  01a13:    	call   rax
  01a15:    	movq   xmm3,QWORD PTR [rsp]
  01a1a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a20:    	add    rsp,0x10
  01a24: b5 	movabs r13,0x55b5b07d68f0
  01a2e:    	test   rax,rax
  01a31:    	je     0xfffcf8af
:00104 %3 = 1: i32
  01a37: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a3f: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a47:    	sub    rsp,0x10
  01a4b:    	movq   QWORD PTR [rsp],xmm3
  01a50:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a56:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a5a:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a5e:    	mov    rdi,rbx
  01a61:    	mov    rsi,r12
  01a64: b5 	movabs r8,0x55b5b07d6918
  01a6e: b5 	movabs rax,0x55b5b0091aa0
  01a78:    	call   rax
  01a7a:    	movq   xmm3,QWORD PTR [rsp]
  01a7f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a85:    	add    rsp,0x10
  01a89: b5 	movabs r13,0x55b5b07d6920
  01a93:    	test   rax,rax
  01a96:    	je     0xfffcf8af
  01a9c:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01aa0: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01aa8:    	sub    rsp,0x10
  01aac:    	movq   QWORD PTR [rsp],xmm3
  01ab1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ab7:    	mov    rdx,QWORD PTR [rbp-0x30]
  01abb:    	mov    rcx,QWORD PTR [rbp-0x58]
  01abf:    	mov    rdi,rbx
  01ac2:    	mov    rsi,r12
  01ac5: b5 	movabs r8,0x55b5b07d6938
  01acf: b5 	movabs rax,0x55b5b0091aa0
  01ad9:    	call   rax
  01adb:    	movq   xmm3,QWORD PTR [rsp]
  01ae0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae6:    	add    rsp,0x10
  01aea: b5 	movabs r13,0x55b5b07d6940
  01af4:    	test   rax,rax
  01af7:    	je     0xfffcf8af
  01afd:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b01:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b05: 00 	test   rdi,0x7
  01b0c:    	jne    0x2a489
  01b12:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b16:    	jne    0x2a489
  01b1c: 26 	cmp    DWORD PTR [rip+0xfffffffffffd0e76],0x26        # 0xfffd2999
  01b23:    	jne    0x2a489
  01b29:    	sub    rsp,0x10
  01b2d:    	movq   QWORD PTR [rsp],xmm3
  01b32:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b38: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b41:    	mov    QWORD PTR [rsp-0x38],rcx
  01b46:    	mov    rax,QWORD PTR [rbx]
  01b49:    	lea    rsi,[rsp-0x18]
  01b4e:    	mov    QWORD PTR [rsi],rax
  01b51:    	mov    QWORD PTR [rbx],rsi
  01b54:    	mov    rax,QWORD PTR [rbp-0x50]
  01b58:    	mov    QWORD PTR [rsp-0x38],rax
  01b5d: 00 	mov    rdi,0x1
  01b64:    	lea    r8,[rsp-0x40]
  01b69:    	mov    rax,QWORD PTR [rbp-0x58]
  01b6d:    	mov    QWORD PTR [r8],rax
  01b70:    	sub    r8,0x8
  01b74: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b7d: 09 	movabs rax,0x900000041
  01b87:    	mov    QWORD PTR [rsp-0x28],rax
  01b8c: b5 	movabs r13,0x55b5b07a1dd0
  01b96:    	call   0xfffdc921
  01b9b:    	lea    rdi,[rbp-0x8]
  01b9f:    	mov    QWORD PTR [rbx],rdi
  01ba2:    	movq   xmm3,QWORD PTR [rsp]
  01ba7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bad:    	add    rsp,0x10
  01bb1: b5 	movabs r13,0x55b5b07d6960
  01bbb:    	test   rax,rax
  01bbe:    	je     0xfffcf8af
  01bc4:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bc8:    	sub    rsp,0x10
  01bcc:    	movq   QWORD PTR [rsp],xmm3
  01bd1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bd7:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bdb:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bdf:    	mov    r8,QWORD PTR [rbp-0x48]
  01be3:    	mov    rdi,rbx
  01be6:    	mov    rsi,r12
  01be9: b5 	movabs rax,0x55b5b0091bd0
  01bf3:    	call   rax
  01bf5:    	movq   xmm3,QWORD PTR [rsp]
  01bfa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c00:    	add    rsp,0x10
  01c04: b5 	movabs r13,0x55b5b07d6980
  01c0e:    	test   rax,rax
  01c11:    	je     0xfffcf8af
:00113 %3 = 1: i32
  01c17: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c1f: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c27:    	sub    rsp,0x10
  01c2b:    	movq   QWORD PTR [rsp],xmm3
  01c30:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c36:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c3a:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c3e:    	mov    rdi,rbx
  01c41:    	mov    rsi,r12
  01c44: b5 	movabs r8,0x55b5b07d69a8
  01c4e: b5 	movabs rax,0x55b5b0091aa0
  01c58:    	call   rax
  01c5a:    	movq   xmm3,QWORD PTR [rsp]
  01c5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c65:    	add    rsp,0x10
  01c69: b5 	movabs r13,0x55b5b07d69b0
  01c73:    	test   rax,rax
  01c76:    	je     0xfffcf8af
  01c7c:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c80:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c84: 00 	test   rdi,0x7
  01c8b:    	jne    0x2a498
  01c91:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c95:    	jne    0x2a498
  01c9b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd0cf7],0x26        # 0xfffd2999
  01ca2:    	jne    0x2a498
  01ca8:    	sub    rsp,0x10
  01cac:    	movq   QWORD PTR [rsp],xmm3
  01cb1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cb7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cc0:    	mov    QWORD PTR [rsp-0x38],rcx
  01cc5:    	mov    rax,QWORD PTR [rbx]
  01cc8:    	lea    rsi,[rsp-0x18]
  01ccd:    	mov    QWORD PTR [rsi],rax
  01cd0:    	mov    QWORD PTR [rbx],rsi
  01cd3:    	mov    rax,QWORD PTR [rbp-0x50]
  01cd7:    	mov    QWORD PTR [rsp-0x38],rax
  01cdc: 00 	mov    rdi,0x0
  01ce3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cec: 07 	movabs rax,0x1000700000044
  01cf6:    	mov    QWORD PTR [rsp-0x28],rax
  01cfb: b5 	movabs r13,0x55b5b07ceca0
  01d05:    	call   0xfffd32de
  01d0a:    	lea    rdi,[rbp-0x8]
  01d0e:    	mov    QWORD PTR [rbx],rdi
  01d11:    	movq   xmm3,QWORD PTR [rsp]
  01d16:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d1c:    	add    rsp,0x10
  01d20: b5 	movabs r13,0x55b5b07d69d0
  01d2a:    	test   rax,rax
  01d2d:    	je     0xfffcf8af
  01d33:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d37:    	sub    rsp,0x10
  01d3b:    	movq   QWORD PTR [rsp],xmm3
  01d40:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d46:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d4a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d4e:    	mov    r8,QWORD PTR [rbp-0x48]
  01d52:    	mov    rdi,rbx
  01d55:    	mov    rsi,r12
  01d58: b5 	movabs rax,0x55b5b0091bd0
  01d62:    	call   rax
  01d64:    	movq   xmm3,QWORD PTR [rsp]
  01d69:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d6f:    	add    rsp,0x10
  01d73: b5 	movabs r13,0x55b5b07d69f0
  01d7d:    	test   rax,rax
  01d80:    	je     0xfffcf8af
:00120 %3 = %4
  01d86:    	mov    rax,QWORD PTR [rbp-0x48]
  01d8a:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01d8e:    	mov    rax,QWORD PTR [rbp-0x40]
  01d92:    	leave  
  01d93:    	ret    
