==> start whole compile: initialize FuncId(89) self_class:Vec start:[00000] bytecode:0x55955e13a8a0
<== finished compile. elapsed:13.1µs
offset:Pos(18598) code: 105 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x3
  0000e: jne    0x3b84e
  00014: mov    QWORD PTR [r14-0x50],0x4
  0001c: mov    rdi,QWORD PTR [r14-0x30]
  00020: test   rdi,0x7
  00027: jne    0x3b85d
  0002d: cmp    DWORD PTR [rdi+0x4],0x2b
  00031: jne    0x3b85d
:00000 init_method reg:5 arg:3 pos:3 req:3 block:0 stack_offset:6
:00001 @x: Vec[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [r14-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [r14-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  0004f: mov    rdi,QWORD PTR [r14-0x30]
  00053: mov    rax,QWORD PTR [r14-0x48]
  00057: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  0005b: mov    rax,QWORD PTR [r14-0x48]
  0005f: mov    QWORD PTR [r14-0x50],rax
:00005 ret %4
  00063: mov    rax,QWORD PTR [r14-0x50]
  00067: leave  
  00068: ret    
==> start whole compile: vdot FuncId(93) self_class:Vec start:[00000] bytecode:0x55955e1715b0
<== finished compile. elapsed:42µs
offset:Pos(20460) code: 1092 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jne    0x3b126
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    rdi,QWORD PTR [r14-0x30]
  0002b: test   rdi,0x7
  00032: jne    0x3b135
  00038: cmp    DWORD PTR [rdi+0x4],0x2b
  0003c: jne    0x3b135
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %2 = @x: Vec[IvarId(0)]
  00042: mov    rdi,QWORD PTR [r14-0x30]
  00046: mov    rax,QWORD PTR [rdi+0x10]
  0004a: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = %1.call x()                     [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x38]
  00052: test   rdi,0x7
  00059: jne    0x3b144
  0005f: cmp    DWORD PTR [rdi+0x4],0x2b
  00063: jne    0x3b144
  00069: cmp    DWORD PTR [rip+0xfffffffffffff25f],0x26        # 0xfffff2cf
  00070: jne    0x3b144
  00076: mov    esi,DWORD PTR [rip+0x3cc]        # 0x448
  0007c: cmp    esi,0xffffffff
  0007f: je     0x3b153
  00085: cmp    WORD PTR [rdi+0x2],0x3
  0008a: jne    0xa3
  00090: cmp    esi,0x6
  00093: jge    0xa3
  00099: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009e: jmp    0xaf
  000a3: movabs rax,0x55955d9e0e20
  000ad: call   rax
  000af: mov    QWORD PTR [r14-0x48],rax
:00003 
:00004 %2 = %2 * %3                         [Float][Float]
  000b3: mov    rdi,QWORD PTR [r14-0x40]
  000b7: test   rdi,0x1
  000be: jne    0x3b17c
  000c4: test   rdi,0x2
  000cb: je     0x107
  000d1: xorps  xmm2,xmm2
  000d4: movabs rax,0x8000000000000002
  000de: cmp    rdi,rax
  000e1: je     0x119
  000e7: mov    rax,rdi
  000ea: sar    rax,0x3f
  000ee: add    rax,0x2
  000f2: and    rdi,0xfffffffffffffffc
  000f6: or     rdi,rax
  000f9: rol    rdi,0x3d
  000fd: movq   xmm2,rdi
  00102: jmp    0x119
  00107: call   0xffffb091
  0010c: test   rax,rax
  0010f: je     0x3b17c
  00115: movq   xmm2,xmm0
  00119: mov    rdi,QWORD PTR [r14-0x48]
  0011d: test   rdi,0x1
  00124: jne    0x3b18b
  0012a: test   rdi,0x2
  00131: je     0x16d
  00137: xorps  xmm3,xmm3
  0013a: movabs rax,0x8000000000000002
  00144: cmp    rdi,rax
  00147: je     0x17f
  0014d: mov    rax,rdi
  00150: sar    rax,0x3f
  00154: add    rax,0x2
  00158: and    rdi,0xfffffffffffffffc
  0015c: or     rdi,rax
  0015f: rol    rdi,0x3d
  00163: movq   xmm3,rdi
  00168: jmp    0x17f
  0016d: call   0xffffb091
  00172: test   rax,rax
  00175: je     0x3b18b
  0017b: movq   xmm3,xmm0
  0017f: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00183: mov    rdi,QWORD PTR [r14-0x30]
  00187: mov    rax,QWORD PTR [rdi+0x18]
  0018b: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = %1.call y()                     [Vec]
  0018f: mov    rdi,QWORD PTR [r14-0x38]
  00193: test   rdi,0x7
  0019a: jne    0x3b19a
  001a0: cmp    DWORD PTR [rdi+0x4],0x2b
  001a4: jne    0x3b19a
  001aa: cmp    DWORD PTR [rip+0xfffffffffffff11e],0x26        # 0xfffff2cf
  001b1: jne    0x3b19a
  001b7: mov    esi,DWORD PTR [rip+0x293]        # 0x450
  001bd: cmp    esi,0xffffffff
  001c0: je     0x3b1b6
  001c6: cmp    WORD PTR [rdi+0x2],0x3
  001cb: jne    0x1e4
  001d1: cmp    esi,0x6
  001d4: jge    0x1e4
  001da: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df: jmp    0x202
  001e4: sub    rsp,0x10
  001e8: movq   QWORD PTR [rsp],xmm2
  001ed: movabs rax,0x55955d9e0e20
  001f7: call   rax
  001f9: movq   xmm2,QWORD PTR [rsp]
  001fe: add    rsp,0x10
  00202: mov    QWORD PTR [r14-0x50],rax
:00007 
:00008 %3 = %3 * %4                         [Float][Float]
  00206: mov    rdi,QWORD PTR [r14-0x48]
  0020a: test   rdi,0x1
  00211: jne    0x3b1f1
  00217: test   rdi,0x2
  0021e: je     0x25a
  00224: xorps  xmm3,xmm3
  00227: movabs rax,0x8000000000000002
  00231: cmp    rdi,rax
  00234: je     0x26c
  0023a: mov    rax,rdi
  0023d: sar    rax,0x3f
  00241: add    rax,0x2
  00245: and    rdi,0xfffffffffffffffc
  00249: or     rdi,rax
  0024c: rol    rdi,0x3d
  00250: movq   xmm3,rdi
  00255: jmp    0x26c
  0025a: call   0xffffb091
  0025f: test   rax,rax
  00262: je     0x3b1f1
  00268: movq   xmm3,xmm0
  0026c: mov    rdi,QWORD PTR [r14-0x50]
  00270: test   rdi,0x1
  00277: jne    0x3b20d
  0027d: test   rdi,0x2
  00284: je     0x2c0
  0028a: xorps  xmm4,xmm4
  0028d: movabs rax,0x8000000000000002
  00297: cmp    rdi,rax
  0029a: je     0x2d2
  002a0: mov    rax,rdi
  002a3: sar    rax,0x3f
  002a7: add    rax,0x2
  002ab: and    rdi,0xfffffffffffffffc
  002af: or     rdi,rax
  002b2: rol    rdi,0x3d
  002b6: movq   xmm4,rdi
  002bb: jmp    0x2d2
  002c0: call   0xffffb091
  002c5: test   rax,rax
  002c8: je     0x3b20d
  002ce: movq   xmm4,xmm0
  002d2: mulsd  xmm3,xmm4
:00009 %2 = %2 + %3                         [Float][Float]
  002d6: addsd  xmm2,xmm3
:00010 %3 = @z: Vec[IvarId(2)]
  002da: mov    rdi,QWORD PTR [r14-0x30]
  002de: mov    rax,QWORD PTR [rdi+0x20]
  002e2: mov    QWORD PTR [r14-0x48],rax
:00011 %4 = %1.call z()                     [Vec]
  002e6: mov    rdi,QWORD PTR [r14-0x38]
  002ea: test   rdi,0x7
  002f1: jne    0x3b229
  002f7: cmp    DWORD PTR [rdi+0x4],0x2b
  002fb: jne    0x3b229
  00301: cmp    DWORD PTR [rip+0xffffffffffffefc7],0x26        # 0xfffff2cf
  00308: jne    0x3b229
  0030e: mov    esi,DWORD PTR [rip+0x144]        # 0x458
  00314: cmp    esi,0xffffffff
  00317: je     0x3b245
  0031d: cmp    WORD PTR [rdi+0x2],0x3
  00322: jne    0x33b
  00328: cmp    esi,0x6
  0032b: jge    0x33b
  00331: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00336: jmp    0x359
  0033b: sub    rsp,0x10
  0033f: movq   QWORD PTR [rsp],xmm2
  00344: movabs rax,0x55955d9e0e20
  0034e: call   rax
  00350: movq   xmm2,QWORD PTR [rsp]
  00355: add    rsp,0x10
  00359: mov    QWORD PTR [r14-0x50],rax
:00012 
:00013 %3 = %3 * %4                         [Float][Float]
  0035d: mov    rdi,QWORD PTR [r14-0x48]
  00361: test   rdi,0x1
  00368: jne    0x3b280
  0036e: test   rdi,0x2
  00375: je     0x3b1
  0037b: xorps  xmm3,xmm3
  0037e: movabs rax,0x8000000000000002
  00388: cmp    rdi,rax
  0038b: je     0x3c3
  00391: mov    rax,rdi
  00394: sar    rax,0x3f
  00398: add    rax,0x2
  0039c: and    rdi,0xfffffffffffffffc
  003a0: or     rdi,rax
  003a3: rol    rdi,0x3d
  003a7: movq   xmm3,rdi
  003ac: jmp    0x3c3
  003b1: call   0xffffb091
  003b6: test   rax,rax
  003b9: je     0x3b280
  003bf: movq   xmm3,xmm0
  003c3: mov    rdi,QWORD PTR [r14-0x50]
  003c7: test   rdi,0x1
  003ce: jne    0x3b29c
  003d4: test   rdi,0x2
  003db: je     0x417
  003e1: xorps  xmm4,xmm4
  003e4: movabs rax,0x8000000000000002
  003ee: cmp    rdi,rax
  003f1: je     0x429
  003f7: mov    rax,rdi
  003fa: sar    rax,0x3f
  003fe: add    rax,0x2
  00402: and    rdi,0xfffffffffffffffc
  00406: or     rdi,rax
  00409: rol    rdi,0x3d
  0040d: movq   xmm4,rdi
  00412: jmp    0x429
  00417: call   0xffffb091
  0041c: test   rax,rax
  0041f: je     0x3b29c
  00425: movq   xmm4,xmm0
  00429: mulsd  xmm3,xmm4
:00014 %2 = %2 + %3                         [Float][Float]
  0042d: addsd  xmm2,xmm3
:00015 ret %2
  00431: movq   xmm0,xmm2
  00435: call   0xffffb1b5
  0043a: mov    QWORD PTR [r14-0x40],rax
  0043e: mov    rax,QWORD PTR [r14-0x40]
  00442: leave  
  00443: ret    
==> start whole compile: intersect FuncId(97) self_class:Sphere start:[00000] bytecode:0x55955e16d0b0
<== finished compile. elapsed:130.4µs
offset:Pos(21718) code: 6370 bytes  data: 112 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3adce
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x3addd
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x3addd
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x3adec
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x3adec
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffffed55],0x26        # 0xffffede5
  00090:    	jne    0x3adec
  00096:    	mov    esi,DWORD PTR [rip+0x184a]        # 0x18e6
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x3adfb
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 95 	movabs rax,0x55955d9e0e20
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x3ae24
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x3ae24
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffffece4],0x26        # 0xffffede5
  00101:    	jne    0x3ae24
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffffecdb],0x0        # 0xffffede9
  0010e:    	je     0x126
  00114:    	mov    rdi,r12
  00117:    	mov    rsi,QWORD PTR [rbx]
  0011a: 95 	movabs rax,0x55955d9a3d50
  00124:    	call   rax
  00126: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0012f:    	mov    rax,QWORD PTR [r14-0x78]
  00133:    	mov    QWORD PTR [rsp-0x40],rax
  00138: 00 	mov    rdi,0x1
  0013f:    	mov    rax,QWORD PTR [r14-0x80]
  00143:    	mov    QWORD PTR [rsp-0x48],rax
  00148: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00151: 07 	movabs rax,0x70000005b
  0015b:    	mov    QWORD PTR [rsp-0x30],rax
  00160: 95 	movabs r13,0x55955e18a030
  0016a:    	mov    rsi,QWORD PTR [rbx]
  0016d:    	mov    QWORD PTR [rsp-0x18],rsi
  00172:    	lea    rsi,[rsp-0x18]
  00177:    	mov    QWORD PTR [rbx],rsi
  0017a:    	lea    r14,[rsp-0x10]
  0017f:    	mov    QWORD PTR [rsp-0x20],r14
  00184:    	call   0xfffffa34
  00189:    	lea    r14,[rbp-0x8]
  0018d:    	mov    QWORD PTR [rbx],r14
  00190:    	mov    r14,QWORD PTR [rbp-0x10]
  00194: 95 	movabs r13,0x55955e16d110
  0019e:    	test   rax,rax
  001a1:    	je     0xffffab4e
  001a7:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  001ab:    	mov    rdi,QWORD PTR [r14-0x38]
  001af: 00 	test   rdi,0x7
  001b6:    	jne    0x3ae33
  001bc:    	cmp    DWORD PTR [rdi+0x4],0x31
  001c0:    	jne    0x3ae33
  001c6: 26 	cmp    DWORD PTR [rip+0xffffffffffffec18],0x26        # 0xffffede5
  001cd:    	jne    0x3ae33
  001d3:    	mov    esi,DWORD PTR [rip+0x1715]        # 0x18ee
  001d9:    	cmp    esi,0xffffffff
  001dc:    	je     0x3ae42
  001e2:    	cmp    WORD PTR [rdi+0x2],0x3
  001e7:    	jne    0x200
  001ed:    	cmp    esi,0x6
  001f0:    	jge    0x200
  001f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fb:    	jmp    0x20c
  00200: 95 	movabs rax,0x55955d9e0e20
  0020a:    	call   rax
  0020c:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  00210:    	mov    rdi,QWORD PTR [r14-0x48]
  00214: 00 	test   rdi,0x7
  0021b:    	jne    0x3ae6b
  00221:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00225:    	jne    0x3ae6b
  0022b: 26 	cmp    DWORD PTR [rip+0xffffffffffffebb3],0x26        # 0xffffede5
  00232:    	jne    0x3ae6b
  00238: 00 	cmp    DWORD PTR [rip+0xffffffffffffebaa],0x0        # 0xffffede9
  0023f:    	je     0x257
  00245:    	mov    rdi,r12
  00248:    	mov    rsi,QWORD PTR [rbx]
  0024b: 95 	movabs rax,0x55955d9a3d50
  00255:    	call   rax
  00257: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00260:    	mov    rax,QWORD PTR [r14-0x48]
  00264:    	mov    QWORD PTR [rsp-0x40],rax
  00269: 00 	mov    rdi,0x1
  00270:    	mov    rax,QWORD PTR [r14-0x78]
  00274:    	mov    QWORD PTR [rsp-0x48],rax
  00279: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00282: 05 	movabs rax,0x100050000005d
  0028c:    	mov    QWORD PTR [rsp-0x30],rax
  00291: 95 	movabs r13,0x55955e1715b0
  0029b:    	mov    rsi,QWORD PTR [rbx]
  0029e:    	mov    QWORD PTR [rsp-0x18],rsi
  002a3:    	lea    rsi,[rsp-0x18]
  002a8:    	mov    QWORD PTR [rbx],rsi
  002ab:    	lea    r14,[rsp-0x10]
  002b0:    	mov    QWORD PTR [rsp-0x20],r14
  002b5:    	call   0xfffffac2
  002ba:    	lea    r14,[rbp-0x8]
  002be:    	mov    QWORD PTR [rbx],r14
  002c1:    	mov    r14,QWORD PTR [rbp-0x10]
  002c5: 95 	movabs r13,0x55955e16d150
  002cf:    	test   rax,rax
  002d2:    	je     0xffffab4e
  002d8:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002dc:    	mov    rax,QWORD PTR [r14-0x48]
  002e0:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002e4:    	mov    rdi,QWORD PTR [r14-0x48]
  002e8: 00 	test   rdi,0x7
  002ef:    	jne    0x3ae7a
  002f5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002f9:    	jne    0x3ae7a
  002ff: 26 	cmp    DWORD PTR [rip+0xffffffffffffeadf],0x26        # 0xffffede5
  00306:    	jne    0x3ae7a
  0030c: 00 	cmp    DWORD PTR [rip+0xffffffffffffead6],0x0        # 0xffffede9
  00313:    	je     0x32b
  00319:    	mov    rdi,r12
  0031c:    	mov    rsi,QWORD PTR [rbx]
  0031f: 95 	movabs rax,0x55955d9a3d50
  00329:    	call   rax
  0032b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00334:    	mov    rax,QWORD PTR [r14-0x48]
  00338:    	mov    QWORD PTR [rsp-0x40],rax
  0033d: 00 	mov    rdi,0x1
  00344:    	mov    rax,QWORD PTR [r14-0x78]
  00348:    	mov    QWORD PTR [rsp-0x48],rax
  0034d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00356: 05 	movabs rax,0x100050000005d
  00360:    	mov    QWORD PTR [rsp-0x30],rax
  00365: 95 	movabs r13,0x55955e1715b0
  0036f:    	mov    rsi,QWORD PTR [rbx]
  00372:    	mov    QWORD PTR [rsp-0x18],rsi
  00377:    	lea    rsi,[rsp-0x18]
  0037c:    	mov    QWORD PTR [rbx],rsi
  0037f:    	lea    r14,[rsp-0x10]
  00384:    	mov    QWORD PTR [rsp-0x20],r14
  00389:    	call   0xfffffac2
  0038e:    	lea    r14,[rbp-0x8]
  00392:    	mov    QWORD PTR [rbx],r14
  00395:    	mov    r14,QWORD PTR [rbp-0x10]
  00399: 95 	movabs r13,0x55955e16d180
  003a3:    	test   rax,rax
  003a6:    	je     0xffffab4e
  003ac:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  003b0:    	mov    rdi,QWORD PTR [r14-0x30]
  003b4:    	mov    rax,QWORD PTR [rdi+0x18]
  003b8:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  003bc:    	mov    rdi,QWORD PTR [r14-0x30]
  003c0:    	mov    rax,QWORD PTR [rdi+0x18]
  003c4: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  003cb:    	mov    rdi,QWORD PTR [r14-0x80]
  003cf: 00 	test   rdi,0x1
  003d6:    	jne    0x3ae89
  003dc: 00 	test   rdi,0x2
  003e3:    	je     0x41f
  003e9:    	xorps  xmm2,xmm2
  003ec: 00 	movabs rax,0x8000000000000002
  003f6:    	cmp    rdi,rax
  003f9:    	je     0x431
  003ff:    	mov    rax,rdi
  00402:    	sar    rax,0x3f
  00406:    	add    rax,0x2
  0040a:    	and    rdi,0xfffffffffffffffc
  0040e:    	or     rdi,rax
  00411:    	rol    rdi,0x3d
  00415:    	movq   xmm2,rdi
  0041a:    	jmp    0x431
  0041f:    	call   0xffffaba7
  00424:    	test   rax,rax
  00427:    	je     0x3ae89
  0042d:    	movq   xmm2,xmm0
  00431: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00438: 00 	test   rdi,0x1
  0043f:    	jne    0x3ae98
  00445: 00 	test   rdi,0x2
  0044c:    	je     0x488
  00452:    	xorps  xmm3,xmm3
  00455: 00 	movabs rax,0x8000000000000002
  0045f:    	cmp    rdi,rax
  00462:    	je     0x49a
  00468:    	mov    rax,rdi
  0046b:    	sar    rax,0x3f
  0046f:    	add    rax,0x2
  00473:    	and    rdi,0xfffffffffffffffc
  00477:    	or     rdi,rax
  0047a:    	rol    rdi,0x3d
  0047e:    	movq   xmm3,rdi
  00483:    	jmp    0x49a
  00488:    	call   0xffffaba7
  0048d:    	test   rax,rax
  00490:    	je     0x3ae98
  00496:    	movq   xmm3,xmm0
  0049a:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  0049e:    	mov    rdi,QWORD PTR [r14-0x78]
  004a2: 00 	test   rdi,0x1
  004a9:    	jne    0x3aea7
  004af: 00 	test   rdi,0x2
  004b6:    	je     0x4f2
  004bc:    	xorps  xmm4,xmm4
  004bf: 00 	movabs rax,0x8000000000000002
  004c9:    	cmp    rdi,rax
  004cc:    	je     0x504
  004d2:    	mov    rax,rdi
  004d5:    	sar    rax,0x3f
  004d9:    	add    rax,0x2
  004dd:    	and    rdi,0xfffffffffffffffc
  004e1:    	or     rdi,rax
  004e4:    	rol    rdi,0x3d
  004e8:    	movq   xmm4,rdi
  004ed:    	jmp    0x504
  004f2:    	call   0xffffaba7
  004f7:    	test   rax,rax
  004fa:    	je     0x3aea7
  00500:    	movq   xmm4,xmm0
  00504:    	movq   xmm5,xmm4
  00508:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  0050c:    	mov    rdi,QWORD PTR [r14-0x50]
  00510: 00 	test   rdi,0x1
  00517:    	jne    0x3aec3
  0051d: 00 	test   rdi,0x2
  00524:    	je     0x560
  0052a:    	xorps  xmm6,xmm6
  0052d: 00 	movabs rax,0x8000000000000002
  00537:    	cmp    rdi,rax
  0053a:    	je     0x572
  00540:    	mov    rax,rdi
  00543:    	sar    rax,0x3f
  00547:    	add    rax,0x2
  0054b:    	and    rdi,0xfffffffffffffffc
  0054f:    	or     rdi,rax
  00552:    	rol    rdi,0x3d
  00556:    	movq   xmm6,rdi
  0055b:    	jmp    0x572
  00560:    	call   0xffffaba7
  00565:    	test   rax,rax
  00568:    	je     0x3aec3
  0056e:    	movq   xmm6,xmm0
  00572:    	movq   xmm4,xmm6
  00576:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  0057a:    	movq   xmm7,xmm4
  0057e:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  00582: 00 	movq   xmm4,QWORD PTR [rip+0x1370]        # 0x18fa
  0058a: 00 	movabs rax,0x8000000000000002
  00594:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
:00021 condnotbr _%9 =>:00087
  00598:    	ucomisd xmm7,xmm4
  0059c:    	jbe    0x3b7d3
:00022 %9 = %4
:00023 %9 = neg %9                          [<INVALID>]
  005a2: 00 	cmp    DWORD PTR [rip+0x1359],0x0        # 0x1902
  005a9:    	jl     0x3aeec
  005af:    	je     0x3af2f
  005b5: 01 	sub    DWORD PTR [rip+0x1346],0x1        # 0x1902
  005bc:    	xor    rdi,rdi
  005bf:    	jmp    0x3aeec
  005c4:    	movq   xmm0,xmm6
  005c8:    	call   0xffffaccb
  005cd:    	mov    QWORD PTR [r14-0x78],rax
  005d1:    	sub    rsp,0x30
  005d5:    	movq   QWORD PTR [rsp],xmm2
  005da:    	movq   QWORD PTR [rsp+0x8],xmm3
  005e0:    	movq   QWORD PTR [rsp+0x10],xmm5
  005e6:    	movq   QWORD PTR [rsp+0x18],xmm6
  005ec:    	movq   QWORD PTR [rsp+0x20],xmm7
  005f2:    	mov    rdi,QWORD PTR [r14-0x78]
  005f6:    	mov    rdx,rdi
  005f9:    	mov    rdi,rbx
  005fc:    	mov    rsi,r12
  005ff: 95 	movabs rax,0x55955d959b90
  00609:    	call   rax
  0060b:    	movq   xmm2,QWORD PTR [rsp]
  00610:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00616:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0061c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00622:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00628:    	add    rsp,0x30
  0062c: 95 	movabs r13,0x55955e16d230
  00636:    	test   rax,rax
  00639:    	je     0xffffab4e
  0063f:    	mov    QWORD PTR [r14-0x78],rax
:00024 %10 = const[Math]                    [<INVALID>]
  00643: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe7b0]        # 0xffffedfa
  0064a: 00 	cmp    rax,QWORD PTR [rip+0x12c9]        # 0x191a
  00651:    	jne    0x3af4b
  00657: 00 	mov    rax,QWORD PTR [rip+0x12ac]        # 0x190a
  0065e:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.call sqrt(%11; 1)          [<INVALID>]
  00662:    	movq   xmm0,xmm7
  00666:    	call   0xffffaccb
  0066b: ff 	mov    QWORD PTR [r14-0x88],rax
  00672:    	movq   xmm0,xmm5
  00676:    	call   0xffffaccb
  0067b:    	mov    QWORD PTR [r14-0x58],rax
  0067f:    	movq   xmm0,xmm7
  00683:    	call   0xffffaccb
  00688:    	mov    QWORD PTR [r14-0x60],rax
  0068c:    	sub    rsp,0x10
  00690:    	movq   QWORD PTR [rsp],xmm7
  00695:    	mov    rdi,QWORD PTR [r14-0x80]
  00699: 95 	movabs rax,0x55955d949d50
  006a3:    	call   rax
  006a5:    	mov    r15d,eax
  006a8: 95 	movabs r13,0x55955e16d260
  006b2:    	cmp    QWORD PTR [r13+0x8],0x0
  006b7:    	je     0x3afc7
  006bd:    	cmp    r15d,DWORD PTR [r13-0x8]
  006c1:    	jne    0x3afc7
  006c7:    	mov    eax,DWORD PTR [rip+0xffffffffffffe718]        # 0xffffede5
  006cd:    	cmp    DWORD PTR [r13-0x4],eax
  006d1:    	jne    0x3afc7
  006d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006e0:    	mov    rax,QWORD PTR [r14-0x80]
  006e4:    	mov    QWORD PTR [rsp-0x40],rax
  006e9: 00 	mov    rdi,0x1
  006f0: ff 	mov    rax,QWORD PTR [r14-0x88]
  006f7:    	mov    QWORD PTR [rsp-0x48],rax
  006fc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00705:    	mov    r13,QWORD PTR [r13+0x8]
  00709:    	mov    rax,QWORD PTR [r13+0x8]
  0070d:    	mov    QWORD PTR [rsp-0x30],rax
  00712:    	mov    rax,QWORD PTR [r13+0x0]
  00716:    	mov    r13,QWORD PTR [r13+0x10]
  0071a:    	mov    rsi,QWORD PTR [rbx]
  0071d:    	mov    QWORD PTR [rsp-0x18],rsi
  00722:    	lea    rsi,[rsp-0x18]
  00727:    	mov    QWORD PTR [rbx],rsi
  0072a:    	lea    r14,[rsp-0x10]
  0072f:    	mov    QWORD PTR [rsp-0x20],r14
  00734:    	call   rax
  00736:    	lea    r14,[rbp-0x8]
  0073a:    	mov    QWORD PTR [rbx],r14
  0073d:    	mov    r14,QWORD PTR [rbp-0x10]
  00741:    	movq   xmm7,QWORD PTR [rsp]
  00746:    	add    rsp,0x10
  0074a:    	test   rax,rax
  0074d:    	je     0x3b008
  00753:    	mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00757:    	mov    rdi,QWORD PTR [r14-0x78]
  0075b:    	mov    rsi,QWORD PTR [r14-0x80]
  0075f:    	sub    rsp,0x10
  00763:    	movq   QWORD PTR [rsp],xmm7
  00768:    	mov    rdx,rdi
  0076b:    	mov    rcx,rsi
  0076e:    	mov    rdi,rbx
  00771:    	mov    rsi,r12
  00774: 95 	movabs rax,0x55955d95bbd0
  0077e:    	call   rax
  00780:    	movq   xmm7,QWORD PTR [rsp]
  00785:    	add    rsp,0x10
  00789: 95 	movabs r13,0x55955e16d280
  00793:    	test   rax,rax
  00796:    	je     0xffffab4e
  0079c:    	mov    QWORD PTR [r14-0x68],rax
:00029 %9 = literal[0.0]
  007a0: 00 	movq   xmm2,QWORD PTR [rip+0x1182]        # 0x192a
  007a8: 00 	movabs rax,0x8000000000000002
  007b2:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00031 condnotbr _%9 =>:00086
  007b6:    	mov    rdi,QWORD PTR [r14-0x68]
  007ba:    	mov    rsi,QWORD PTR [r14-0x78]
  007be: 00 	test   rdi,0x1
  007c5:    	je     0x3b017
  007cb: 00 	test   rsi,0x1
  007d2:    	je     0x3b017
  007d8:    	cmp    rdi,rsi
  007db:    	jle    0x3b788
:00032 %9 = %2.call t()                     [<INVALID>]
  007e1:    	sub    rsp,0x10
  007e5:    	movq   QWORD PTR [rsp],xmm7
  007ea:    	mov    rdi,QWORD PTR [r14-0x40]
  007ee: 95 	movabs rax,0x55955d949d50
  007f8:    	call   rax
  007fa:    	mov    r15d,eax
  007fd: 95 	movabs r13,0x55955e16d2c0
  00807:    	cmp    QWORD PTR [r13+0x8],0x0
  0080c:    	je     0x3b054
  00812:    	cmp    r15d,DWORD PTR [r13-0x8]
  00816:    	jne    0x3b054
  0081c:    	mov    eax,DWORD PTR [rip+0xffffffffffffe5c3]        # 0xffffede5
  00822:    	cmp    DWORD PTR [r13-0x4],eax
  00826:    	jne    0x3b054
  0082c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00835:    	mov    rax,QWORD PTR [r14-0x40]
  00839:    	mov    QWORD PTR [rsp-0x40],rax
  0083e: 00 	mov    rdi,0x0
  00845: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0084e:    	mov    r13,QWORD PTR [r13+0x8]
  00852:    	mov    rax,QWORD PTR [r13+0x8]
  00856:    	mov    QWORD PTR [rsp-0x30],rax
  0085b:    	mov    rax,QWORD PTR [r13+0x0]
  0085f:    	mov    r13,QWORD PTR [r13+0x10]
  00863:    	mov    rsi,QWORD PTR [rbx]
  00866:    	mov    QWORD PTR [rsp-0x18],rsi
  0086b:    	lea    rsi,[rsp-0x18]
  00870:    	mov    QWORD PTR [rbx],rsi
  00873:    	lea    r14,[rsp-0x10]
  00878:    	mov    QWORD PTR [rsp-0x20],r14
  0087d:    	call   rax
  0087f:    	lea    r14,[rbp-0x8]
  00883:    	mov    QWORD PTR [rbx],r14
  00886:    	mov    r14,QWORD PTR [rbp-0x10]
  0088a:    	movq   xmm7,QWORD PTR [rsp]
  0088f:    	add    rsp,0x10
  00893:    	test   rax,rax
  00896:    	je     0x3b095
  0089c:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00035 condnotbr _%9 =>:00086
  008a0:    	mov    rdi,QWORD PTR [r14-0x68]
  008a4:    	mov    rsi,QWORD PTR [r14-0x78]
  008a8: 00 	test   rdi,0x1
  008af:    	je     0x3b0a4
  008b5: 00 	test   rsi,0x1
  008bc:    	je     0x3b0a4
  008c2:    	cmp    rdi,rsi
  008c5:    	jge    0x3b7a1
:00036 _ = %2.call t=(%7; 1)                [<INVALID>]
  008cb:    	sub    rsp,0x10
  008cf:    	movq   QWORD PTR [rsp],xmm7
  008d4:    	mov    rdi,QWORD PTR [r14-0x40]
  008d8: 95 	movabs rax,0x55955d949d50
  008e2:    	call   rax
  008e4:    	mov    r15d,eax
  008e7: 95 	movabs r13,0x55955e16d300
  008f1:    	cmp    QWORD PTR [r13+0x8],0x0
  008f6:    	je     0x3b0e1
  008fc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00900:    	jne    0x3b0e1
  00906:    	mov    eax,DWORD PTR [rip+0xffffffffffffe4d9]        # 0xffffede5
  0090c:    	cmp    DWORD PTR [r13-0x4],eax
  00910:    	jne    0x3b0e1
  00916: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0091f:    	mov    rax,QWORD PTR [r14-0x40]
  00923:    	mov    QWORD PTR [rsp-0x40],rax
  00928: 00 	mov    rdi,0x1
  0092f:    	mov    rax,QWORD PTR [r14-0x68]
  00933:    	mov    QWORD PTR [rsp-0x48],rax
  00938: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00941:    	mov    r13,QWORD PTR [r13+0x8]
  00945:    	mov    rax,QWORD PTR [r13+0x8]
  00949:    	mov    QWORD PTR [rsp-0x30],rax
  0094e:    	mov    rax,QWORD PTR [r13+0x0]
  00952:    	mov    r13,QWORD PTR [r13+0x10]
  00956:    	mov    rsi,QWORD PTR [rbx]
  00959:    	mov    QWORD PTR [rsp-0x18],rsi
  0095e:    	lea    rsi,[rsp-0x18]
  00963:    	mov    QWORD PTR [rbx],rsi
  00966:    	lea    r14,[rsp-0x10]
  0096b:    	mov    QWORD PTR [rsp-0x20],r14
  00970:    	call   rax
  00972:    	lea    r14,[rbp-0x8]
  00976:    	mov    QWORD PTR [rbx],r14
  00979:    	mov    r14,QWORD PTR [rbp-0x10]
  0097d:    	movq   xmm7,QWORD PTR [rsp]
  00982:    	add    rsp,0x10
  00986:    	test   rax,rax
  00989:    	je     0x3b122
:00037 
:00038 %9 = literal[true]
  0098f: 00 	mov    rax,0x1c
  00996:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [<INVALID>]
  0099a:    	sub    rsp,0x10
  0099e:    	movq   QWORD PTR [rsp],xmm7
  009a3:    	mov    rdi,QWORD PTR [r14-0x40]
  009a7: 95 	movabs rax,0x55955d949d50
  009b1:    	call   rax
  009b3:    	mov    r15d,eax
  009b6: 95 	movabs r13,0x55955e16d330
  009c0:    	cmp    QWORD PTR [r13+0x8],0x0
  009c5:    	je     0x3b131
  009cb:    	cmp    r15d,DWORD PTR [r13-0x8]
  009cf:    	jne    0x3b131
  009d5:    	mov    eax,DWORD PTR [rip+0xffffffffffffe40a]        # 0xffffede5
  009db:    	cmp    DWORD PTR [r13-0x4],eax
  009df:    	jne    0x3b131
  009e5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009ee:    	mov    rax,QWORD PTR [r14-0x40]
  009f2:    	mov    QWORD PTR [rsp-0x40],rax
  009f7: 00 	mov    rdi,0x1
  009fe:    	mov    rax,QWORD PTR [r14-0x78]
  00a02:    	mov    QWORD PTR [rsp-0x48],rax
  00a07: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a10:    	mov    r13,QWORD PTR [r13+0x8]
  00a14:    	mov    rax,QWORD PTR [r13+0x8]
  00a18:    	mov    QWORD PTR [rsp-0x30],rax
  00a1d:    	mov    rax,QWORD PTR [r13+0x0]
  00a21:    	mov    r13,QWORD PTR [r13+0x10]
  00a25:    	mov    rsi,QWORD PTR [rbx]
  00a28:    	mov    QWORD PTR [rsp-0x18],rsi
  00a2d:    	lea    rsi,[rsp-0x18]
  00a32:    	mov    QWORD PTR [rbx],rsi
  00a35:    	lea    r14,[rsp-0x10]
  00a3a:    	mov    QWORD PTR [rsp-0x20],r14
  00a3f:    	call   rax
  00a41:    	lea    r14,[rbp-0x8]
  00a45:    	mov    QWORD PTR [rbx],r14
  00a48:    	mov    r14,QWORD PTR [rbp-0x10]
  00a4c:    	movq   xmm7,QWORD PTR [rsp]
  00a51:    	add    rsp,0x10
  00a55:    	test   rax,rax
  00a58:    	je     0x3b172
:00040 
:00041 %9 = const[Vec]                      [<INVALID>]
  00a5e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe395]        # 0xffffedfa
  00a65: 00 	cmp    rax,QWORD PTR [rip+0xede]        # 0x194a
  00a6c:    	jne    0x3b181
  00a72: 00 	mov    rax,QWORD PTR [rip+0xec1]        # 0x193a
  00a79:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [<INVALID>]
  00a7d:    	sub    rsp,0x10
  00a81:    	movq   QWORD PTR [rsp],xmm7
  00a86:    	mov    rdi,QWORD PTR [r14-0x38]
  00a8a: 95 	movabs rax,0x55955d949d50
  00a94:    	call   rax
  00a96:    	mov    r15d,eax
  00a99: 95 	movabs r13,0x55955e16d360
  00aa3:    	cmp    QWORD PTR [r13+0x8],0x0
  00aa8:    	je     0x3b1d9
  00aae:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ab2:    	jne    0x3b1d9
  00ab8:    	mov    eax,DWORD PTR [rip+0xffffffffffffe327]        # 0xffffede5
  00abe:    	cmp    DWORD PTR [r13-0x4],eax
  00ac2:    	jne    0x3b1d9
  00ac8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ad1:    	mov    rax,QWORD PTR [r14-0x38]
  00ad5:    	mov    QWORD PTR [rsp-0x40],rax
  00ada: 00 	mov    rdi,0x0
  00ae1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00aea:    	mov    r13,QWORD PTR [r13+0x8]
  00aee:    	mov    rax,QWORD PTR [r13+0x8]
  00af2:    	mov    QWORD PTR [rsp-0x30],rax
  00af7:    	mov    rax,QWORD PTR [r13+0x0]
  00afb:    	mov    r13,QWORD PTR [r13+0x10]
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   rax
  00b1b:    	lea    r14,[rbp-0x8]
  00b1f:    	mov    QWORD PTR [rbx],r14
  00b22:    	mov    r14,QWORD PTR [rbp-0x10]
  00b26:    	movq   xmm7,QWORD PTR [rsp]
  00b2b:    	add    rsp,0x10
  00b2f:    	test   rax,rax
  00b32:    	je     0x3b21a
  00b38:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [<INVALID>]
  00b3c:    	sub    rsp,0x10
  00b40:    	movq   QWORD PTR [rsp],xmm7
  00b45:    	mov    rdi,QWORD PTR [r14-0x80]
  00b49: 95 	movabs rax,0x55955d949d50
  00b53:    	call   rax
  00b55:    	mov    r15d,eax
  00b58: 95 	movabs r13,0x55955e16d380
  00b62:    	cmp    QWORD PTR [r13+0x8],0x0
  00b67:    	je     0x3b229
  00b6d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b71:    	jne    0x3b229
  00b77:    	mov    eax,DWORD PTR [rip+0xffffffffffffe268]        # 0xffffede5
  00b7d:    	cmp    DWORD PTR [r13-0x4],eax
  00b81:    	jne    0x3b229
  00b87: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b90:    	mov    rax,QWORD PTR [r14-0x80]
  00b94:    	mov    QWORD PTR [rsp-0x40],rax
  00b99: 00 	mov    rdi,0x0
  00ba0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ba9:    	mov    r13,QWORD PTR [r13+0x8]
  00bad:    	mov    rax,QWORD PTR [r13+0x8]
  00bb1:    	mov    QWORD PTR [rsp-0x30],rax
  00bb6:    	mov    rax,QWORD PTR [r13+0x0]
  00bba:    	mov    r13,QWORD PTR [r13+0x10]
  00bbe:    	mov    rsi,QWORD PTR [rbx]
  00bc1:    	mov    QWORD PTR [rsp-0x18],rsi
  00bc6:    	lea    rsi,[rsp-0x18]
  00bcb:    	mov    QWORD PTR [rbx],rsi
  00bce:    	lea    r14,[rsp-0x10]
  00bd3:    	mov    QWORD PTR [rsp-0x20],r14
  00bd8:    	call   rax
  00bda:    	lea    r14,[rbp-0x8]
  00bde:    	mov    QWORD PTR [rbx],r14
  00be1:    	mov    r14,QWORD PTR [rbp-0x10]
  00be5:    	movq   xmm7,QWORD PTR [rsp]
  00bea:    	add    rsp,0x10
  00bee:    	test   rax,rax
  00bf1:    	je     0x3b26a
  00bf7:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [<INVALID>]
  00bfb:    	mov    rdi,QWORD PTR [r14-0x38]
  00bff: 95 	movabs rax,0x55955d949d50
  00c09:    	call   rax
  00c0b:    	mov    r15d,eax
  00c0e: 95 	movabs r13,0x55955e16d3a0
  00c18:    	cmp    QWORD PTR [r13+0x8],0x0
  00c1d:    	je     0x3b279
  00c23:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c27:    	jne    0x3b279
  00c2d:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1b2]        # 0xffffede5
  00c33:    	cmp    DWORD PTR [r13-0x4],eax
  00c37:    	jne    0x3b279
  00c3d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c46:    	mov    rax,QWORD PTR [r14-0x38]
  00c4a:    	mov    QWORD PTR [rsp-0x40],rax
  00c4f: 00 	mov    rdi,0x0
  00c56: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c5f:    	mov    r13,QWORD PTR [r13+0x8]
  00c63:    	mov    rax,QWORD PTR [r13+0x8]
  00c67:    	mov    QWORD PTR [rsp-0x30],rax
  00c6c:    	mov    rax,QWORD PTR [r13+0x0]
  00c70:    	mov    r13,QWORD PTR [r13+0x10]
  00c74:    	mov    rsi,QWORD PTR [rbx]
  00c77:    	mov    QWORD PTR [rsp-0x18],rsi
  00c7c:    	lea    rsi,[rsp-0x18]
  00c81:    	mov    QWORD PTR [rbx],rsi
  00c84:    	lea    r14,[rsp-0x10]
  00c89:    	mov    QWORD PTR [rsp-0x20],r14
  00c8e:    	call   rax
  00c90:    	lea    r14,[rbp-0x8]
  00c94:    	mov    QWORD PTR [rbx],r14
  00c97:    	mov    r14,QWORD PTR [rbp-0x10]
  00c9b:    	test   rax,rax
  00c9e:    	je     0x3b2ba
  00ca4: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [<INVALID>]
  00cab: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00cb2: 95 	movabs rax,0x55955d949d50
  00cbc:    	call   rax
  00cbe:    	mov    r15d,eax
  00cc1: 95 	movabs r13,0x55955e16d3c0
  00ccb:    	cmp    QWORD PTR [r13+0x8],0x0
  00cd0:    	je     0x3b2c9
  00cd6:    	cmp    r15d,DWORD PTR [r13-0x8]
  00cda:    	jne    0x3b2c9
  00ce0:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0ff]        # 0xffffede5
  00ce6:    	cmp    DWORD PTR [r13-0x4],eax
  00cea:    	jne    0x3b2c9
  00cf0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00cf9: ff 	mov    rax,QWORD PTR [r14-0x88]
  00d00:    	mov    QWORD PTR [rsp-0x40],rax
  00d05: 00 	mov    rdi,0x0
  00d0c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d15:    	mov    r13,QWORD PTR [r13+0x8]
  00d19:    	mov    rax,QWORD PTR [r13+0x8]
  00d1d:    	mov    QWORD PTR [rsp-0x30],rax
  00d22:    	mov    rax,QWORD PTR [r13+0x0]
  00d26:    	mov    r13,QWORD PTR [r13+0x10]
  00d2a:    	mov    rsi,QWORD PTR [rbx]
  00d2d:    	mov    QWORD PTR [rsp-0x18],rsi
  00d32:    	lea    rsi,[rsp-0x18]
  00d37:    	mov    QWORD PTR [rbx],rsi
  00d3a:    	lea    r14,[rsp-0x10]
  00d3f:    	mov    QWORD PTR [rsp-0x20],r14
  00d44:    	call   rax
  00d46:    	lea    r14,[rbp-0x8]
  00d4a:    	mov    QWORD PTR [rbx],r14
  00d4d:    	mov    r14,QWORD PTR [rbp-0x10]
  00d51:    	test   rax,rax
  00d54:    	je     0x3b30d
  00d5a: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [<INVALID>][<INVALID>]
  00d61: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00d68:    	mov    rsi,QWORD PTR [r14-0x68]
  00d6c:    	mov    rdx,rdi
  00d6f:    	mov    rcx,rsi
  00d72:    	mov    rdi,rbx
  00d75:    	mov    rsi,r12
  00d78: 95 	movabs rax,0x55955d95cbb0
  00d82:    	call   rax
  00d84: 95 	movabs r13,0x55955e16d3e0
  00d8e:    	test   rax,rax
  00d91:    	je     0xffffab4e
  00d97: ff 	mov    QWORD PTR [r14-0x88],rax
:00051 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00d9e:    	mov    rdi,QWORD PTR [r14-0x80]
  00da2: ff 	mov    rsi,QWORD PTR [r14-0x88]
  00da9:    	mov    rdx,rdi
  00dac:    	mov    rcx,rsi
  00daf:    	mov    rdi,rbx
  00db2:    	mov    rsi,r12
  00db5: 95 	movabs rax,0x55955d95ac30
  00dbf:    	call   rax
  00dc1: 95 	movabs r13,0x55955e16d3f0
  00dcb:    	test   rax,rax
  00dce:    	je     0xffffab4e
  00dd4:    	mov    QWORD PTR [r14-0x80],rax
:00052 %11 = %1.call org()                  [<INVALID>]
  00dd8:    	mov    rdi,QWORD PTR [r14-0x38]
  00ddc: 95 	movabs rax,0x55955d949d50
  00de6:    	call   rax
  00de8:    	mov    r15d,eax
  00deb: 95 	movabs r13,0x55955e16d400
  00df5:    	cmp    QWORD PTR [r13+0x8],0x0
  00dfa:    	je     0x3b31c
  00e00:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e04:    	jne    0x3b31c
  00e0a:    	mov    eax,DWORD PTR [rip+0xffffffffffffdfd5]        # 0xffffede5
  00e10:    	cmp    DWORD PTR [r13-0x4],eax
  00e14:    	jne    0x3b31c
  00e1a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e23:    	mov    rax,QWORD PTR [r14-0x38]
  00e27:    	mov    QWORD PTR [rsp-0x40],rax
  00e2c: 00 	mov    rdi,0x0
  00e33: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e3c:    	mov    r13,QWORD PTR [r13+0x8]
  00e40:    	mov    rax,QWORD PTR [r13+0x8]
  00e44:    	mov    QWORD PTR [rsp-0x30],rax
  00e49:    	mov    rax,QWORD PTR [r13+0x0]
  00e4d:    	mov    r13,QWORD PTR [r13+0x10]
  00e51:    	mov    rsi,QWORD PTR [rbx]
  00e54:    	mov    QWORD PTR [rsp-0x18],rsi
  00e59:    	lea    rsi,[rsp-0x18]
  00e5e:    	mov    QWORD PTR [rbx],rsi
  00e61:    	lea    r14,[rsp-0x10]
  00e66:    	mov    QWORD PTR [rsp-0x20],r14
  00e6b:    	call   rax
  00e6d:    	lea    r14,[rbp-0x8]
  00e71:    	mov    QWORD PTR [rbx],r14
  00e74:    	mov    r14,QWORD PTR [rbp-0x10]
  00e78:    	test   rax,rax
  00e7b:    	je     0x3b35d
  00e81: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [<INVALID>]
  00e88: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e8f: 95 	movabs rax,0x55955d949d50
  00e99:    	call   rax
  00e9b:    	mov    r15d,eax
  00e9e: 95 	movabs r13,0x55955e16d420
  00ea8:    	cmp    QWORD PTR [r13+0x8],0x0
  00ead:    	je     0x3b36c
  00eb3:    	cmp    r15d,DWORD PTR [r13-0x8]
  00eb7:    	jne    0x3b36c
  00ebd:    	mov    eax,DWORD PTR [rip+0xffffffffffffdf22]        # 0xffffede5
  00ec3:    	cmp    DWORD PTR [r13-0x4],eax
  00ec7:    	jne    0x3b36c
  00ecd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ed6: ff 	mov    rax,QWORD PTR [r14-0x88]
  00edd:    	mov    QWORD PTR [rsp-0x40],rax
  00ee2: 00 	mov    rdi,0x0
  00ee9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ef2:    	mov    r13,QWORD PTR [r13+0x8]
  00ef6:    	mov    rax,QWORD PTR [r13+0x8]
  00efa:    	mov    QWORD PTR [rsp-0x30],rax
  00eff:    	mov    rax,QWORD PTR [r13+0x0]
  00f03:    	mov    r13,QWORD PTR [r13+0x10]
  00f07:    	mov    rsi,QWORD PTR [rbx]
  00f0a:    	mov    QWORD PTR [rsp-0x18],rsi
  00f0f:    	lea    rsi,[rsp-0x18]
  00f14:    	mov    QWORD PTR [rbx],rsi
  00f17:    	lea    r14,[rsp-0x10]
  00f1c:    	mov    QWORD PTR [rsp-0x20],r14
  00f21:    	call   rax
  00f23:    	lea    r14,[rbp-0x8]
  00f27:    	mov    QWORD PTR [rbx],r14
  00f2a:    	mov    r14,QWORD PTR [rbp-0x10]
  00f2e:    	test   rax,rax
  00f31:    	je     0x3b3b0
  00f37: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [<INVALID>]
  00f3e:    	mov    rdi,QWORD PTR [r14-0x38]
  00f42: 95 	movabs rax,0x55955d949d50
  00f4c:    	call   rax
  00f4e:    	mov    r15d,eax
  00f51: 95 	movabs r13,0x55955e16d440
  00f5b:    	cmp    QWORD PTR [r13+0x8],0x0
  00f60:    	je     0x3b3bf
  00f66:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f6a:    	jne    0x3b3bf
  00f70:    	mov    eax,DWORD PTR [rip+0xffffffffffffde6f]        # 0xffffede5
  00f76:    	cmp    DWORD PTR [r13-0x4],eax
  00f7a:    	jne    0x3b3bf
  00f80: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f89:    	mov    rax,QWORD PTR [r14-0x38]
  00f8d:    	mov    QWORD PTR [rsp-0x40],rax
  00f92: 00 	mov    rdi,0x0
  00f99: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fa2:    	mov    r13,QWORD PTR [r13+0x8]
  00fa6:    	mov    rax,QWORD PTR [r13+0x8]
  00faa:    	mov    QWORD PTR [rsp-0x30],rax
  00faf:    	mov    rax,QWORD PTR [r13+0x0]
  00fb3:    	mov    r13,QWORD PTR [r13+0x10]
  00fb7:    	mov    rsi,QWORD PTR [rbx]
  00fba:    	mov    QWORD PTR [rsp-0x18],rsi
  00fbf:    	lea    rsi,[rsp-0x18]
  00fc4:    	mov    QWORD PTR [rbx],rsi
  00fc7:    	lea    r14,[rsp-0x10]
  00fcc:    	mov    QWORD PTR [rsp-0x20],r14
  00fd1:    	call   rax
  00fd3:    	lea    r14,[rbp-0x8]
  00fd7:    	mov    QWORD PTR [rbx],r14
  00fda:    	mov    r14,QWORD PTR [rbp-0x10]
  00fde:    	test   rax,rax
  00fe1:    	je     0x3b400
  00fe7: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [<INVALID>]
  00fee: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ff5: 95 	movabs rax,0x55955d949d50
  00fff:    	call   rax
  01001:    	mov    r15d,eax
  01004: 95 	movabs r13,0x55955e16d460
  0100e:    	cmp    QWORD PTR [r13+0x8],0x0
  01013:    	je     0x3b40f
  01019:    	cmp    r15d,DWORD PTR [r13-0x8]
  0101d:    	jne    0x3b40f
  01023:    	mov    eax,DWORD PTR [rip+0xffffffffffffddbc]        # 0xffffede5
  01029:    	cmp    DWORD PTR [r13-0x4],eax
  0102d:    	jne    0x3b40f
  01033: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0103c: ff 	mov    rax,QWORD PTR [r14-0x90]
  01043:    	mov    QWORD PTR [rsp-0x40],rax
  01048: 00 	mov    rdi,0x0
  0104f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01058:    	mov    r13,QWORD PTR [r13+0x8]
  0105c:    	mov    rax,QWORD PTR [r13+0x8]
  01060:    	mov    QWORD PTR [rsp-0x30],rax
  01065:    	mov    rax,QWORD PTR [r13+0x0]
  01069:    	mov    r13,QWORD PTR [r13+0x10]
  0106d:    	mov    rsi,QWORD PTR [rbx]
  01070:    	mov    QWORD PTR [rsp-0x18],rsi
  01075:    	lea    rsi,[rsp-0x18]
  0107a:    	mov    QWORD PTR [rbx],rsi
  0107d:    	lea    r14,[rsp-0x10]
  01082:    	mov    QWORD PTR [rsp-0x20],r14
  01087:    	call   rax
  01089:    	lea    r14,[rbp-0x8]
  0108d:    	mov    QWORD PTR [rbx],r14
  01090:    	mov    r14,QWORD PTR [rbp-0x10]
  01094:    	test   rax,rax
  01097:    	je     0x3b453
  0109d: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  010a4: ff 	mov    rdi,QWORD PTR [r14-0x90]
  010ab:    	mov    rsi,QWORD PTR [r14-0x68]
  010af:    	mov    rdx,rdi
  010b2:    	mov    rcx,rsi
  010b5:    	mov    rdi,rbx
  010b8:    	mov    rsi,r12
  010bb: 95 	movabs rax,0x55955d95cbb0
  010c5:    	call   rax
  010c7: 95 	movabs r13,0x55955e16d480
  010d1:    	test   rax,rax
  010d4:    	je     0xffffab4e
  010da: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  010e1: ff 	mov    rdi,QWORD PTR [r14-0x88]
  010e8: ff 	mov    rsi,QWORD PTR [r14-0x90]
  010ef:    	mov    rdx,rdi
  010f2:    	mov    rcx,rsi
  010f5:    	mov    rdi,rbx
  010f8:    	mov    rsi,r12
  010fb: 95 	movabs rax,0x55955d95ac30
  01105:    	call   rax
  01107: 95 	movabs r13,0x55955e16d490
  01111:    	test   rax,rax
  01114:    	je     0xffffab4e
  0111a: ff 	mov    QWORD PTR [r14-0x88],rax
:00062 %12 = %1.call org()                  [<INVALID>]
  01121:    	mov    rdi,QWORD PTR [r14-0x38]
  01125: 95 	movabs rax,0x55955d949d50
  0112f:    	call   rax
  01131:    	mov    r15d,eax
  01134: 95 	movabs r13,0x55955e16d4a0
  0113e:    	cmp    QWORD PTR [r13+0x8],0x0
  01143:    	je     0x3b462
  01149:    	cmp    r15d,DWORD PTR [r13-0x8]
  0114d:    	jne    0x3b462
  01153:    	mov    eax,DWORD PTR [rip+0xffffffffffffdc8c]        # 0xffffede5
  01159:    	cmp    DWORD PTR [r13-0x4],eax
  0115d:    	jne    0x3b462
  01163: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0116c:    	mov    rax,QWORD PTR [r14-0x38]
  01170:    	mov    QWORD PTR [rsp-0x40],rax
  01175: 00 	mov    rdi,0x0
  0117c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01185:    	mov    r13,QWORD PTR [r13+0x8]
  01189:    	mov    rax,QWORD PTR [r13+0x8]
  0118d:    	mov    QWORD PTR [rsp-0x30],rax
  01192:    	mov    rax,QWORD PTR [r13+0x0]
  01196:    	mov    r13,QWORD PTR [r13+0x10]
  0119a:    	mov    rsi,QWORD PTR [rbx]
  0119d:    	mov    QWORD PTR [rsp-0x18],rsi
  011a2:    	lea    rsi,[rsp-0x18]
  011a7:    	mov    QWORD PTR [rbx],rsi
  011aa:    	lea    r14,[rsp-0x10]
  011af:    	mov    QWORD PTR [rsp-0x20],r14
  011b4:    	call   rax
  011b6:    	lea    r14,[rbp-0x8]
  011ba:    	mov    QWORD PTR [rbx],r14
  011bd:    	mov    r14,QWORD PTR [rbp-0x10]
  011c1:    	test   rax,rax
  011c4:    	je     0x3b4a3
  011ca: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [<INVALID>]
  011d1: ff 	mov    rdi,QWORD PTR [r14-0x90]
  011d8: 95 	movabs rax,0x55955d949d50
  011e2:    	call   rax
  011e4:    	mov    r15d,eax
  011e7: 95 	movabs r13,0x55955e16d4c0
  011f1:    	cmp    QWORD PTR [r13+0x8],0x0
  011f6:    	je     0x3b4b2
  011fc:    	cmp    r15d,DWORD PTR [r13-0x8]
  01200:    	jne    0x3b4b2
  01206:    	mov    eax,DWORD PTR [rip+0xffffffffffffdbd9]        # 0xffffede5
  0120c:    	cmp    DWORD PTR [r13-0x4],eax
  01210:    	jne    0x3b4b2
  01216: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0121f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01226:    	mov    QWORD PTR [rsp-0x40],rax
  0122b: 00 	mov    rdi,0x0
  01232: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0123b:    	mov    r13,QWORD PTR [r13+0x8]
  0123f:    	mov    rax,QWORD PTR [r13+0x8]
  01243:    	mov    QWORD PTR [rsp-0x30],rax
  01248:    	mov    rax,QWORD PTR [r13+0x0]
  0124c:    	mov    r13,QWORD PTR [r13+0x10]
  01250:    	mov    rsi,QWORD PTR [rbx]
  01253:    	mov    QWORD PTR [rsp-0x18],rsi
  01258:    	lea    rsi,[rsp-0x18]
  0125d:    	mov    QWORD PTR [rbx],rsi
  01260:    	lea    r14,[rsp-0x10]
  01265:    	mov    QWORD PTR [rsp-0x20],r14
  0126a:    	call   rax
  0126c:    	lea    r14,[rbp-0x8]
  01270:    	mov    QWORD PTR [rbx],r14
  01273:    	mov    r14,QWORD PTR [rbp-0x10]
  01277:    	test   rax,rax
  0127a:    	je     0x3b4f6
  01280: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [<INVALID>]
  01287:    	mov    rdi,QWORD PTR [r14-0x38]
  0128b: 95 	movabs rax,0x55955d949d50
  01295:    	call   rax
  01297:    	mov    r15d,eax
  0129a: 95 	movabs r13,0x55955e16d4e0
  012a4:    	cmp    QWORD PTR [r13+0x8],0x0
  012a9:    	je     0x3b505
  012af:    	cmp    r15d,DWORD PTR [r13-0x8]
  012b3:    	jne    0x3b505
  012b9:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb26]        # 0xffffede5
  012bf:    	cmp    DWORD PTR [r13-0x4],eax
  012c3:    	jne    0x3b505
  012c9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012d2:    	mov    rax,QWORD PTR [r14-0x38]
  012d6:    	mov    QWORD PTR [rsp-0x40],rax
  012db: 00 	mov    rdi,0x0
  012e2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012eb:    	mov    r13,QWORD PTR [r13+0x8]
  012ef:    	mov    rax,QWORD PTR [r13+0x8]
  012f3:    	mov    QWORD PTR [rsp-0x30],rax
  012f8:    	mov    rax,QWORD PTR [r13+0x0]
  012fc:    	mov    r13,QWORD PTR [r13+0x10]
  01300:    	mov    rsi,QWORD PTR [rbx]
  01303:    	mov    QWORD PTR [rsp-0x18],rsi
  01308:    	lea    rsi,[rsp-0x18]
  0130d:    	mov    QWORD PTR [rbx],rsi
  01310:    	lea    r14,[rsp-0x10]
  01315:    	mov    QWORD PTR [rsp-0x20],r14
  0131a:    	call   rax
  0131c:    	lea    r14,[rbp-0x8]
  01320:    	mov    QWORD PTR [rbx],r14
  01323:    	mov    r14,QWORD PTR [rbp-0x10]
  01327:    	test   rax,rax
  0132a:    	je     0x3b546
  01330: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [<INVALID>]
  01337: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0133e: 95 	movabs rax,0x55955d949d50
  01348:    	call   rax
  0134a:    	mov    r15d,eax
  0134d: 95 	movabs r13,0x55955e16d500
  01357:    	cmp    QWORD PTR [r13+0x8],0x0
  0135c:    	je     0x3b555
  01362:    	cmp    r15d,DWORD PTR [r13-0x8]
  01366:    	jne    0x3b555
  0136c:    	mov    eax,DWORD PTR [rip+0xffffffffffffda73]        # 0xffffede5
  01372:    	cmp    DWORD PTR [r13-0x4],eax
  01376:    	jne    0x3b555
  0137c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01385: ff 	mov    rax,QWORD PTR [r14-0x98]
  0138c:    	mov    QWORD PTR [rsp-0x40],rax
  01391: 00 	mov    rdi,0x0
  01398: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013a1:    	mov    r13,QWORD PTR [r13+0x8]
  013a5:    	mov    rax,QWORD PTR [r13+0x8]
  013a9:    	mov    QWORD PTR [rsp-0x30],rax
  013ae:    	mov    rax,QWORD PTR [r13+0x0]
  013b2:    	mov    r13,QWORD PTR [r13+0x10]
  013b6:    	mov    rsi,QWORD PTR [rbx]
  013b9:    	mov    QWORD PTR [rsp-0x18],rsi
  013be:    	lea    rsi,[rsp-0x18]
  013c3:    	mov    QWORD PTR [rbx],rsi
  013c6:    	lea    r14,[rsp-0x10]
  013cb:    	mov    QWORD PTR [rsp-0x20],r14
  013d0:    	call   rax
  013d2:    	lea    r14,[rbp-0x8]
  013d6:    	mov    QWORD PTR [rbx],r14
  013d9:    	mov    r14,QWORD PTR [rbp-0x10]
  013dd:    	test   rax,rax
  013e0:    	je     0x3b599
  013e6: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  013ed: ff 	mov    rdi,QWORD PTR [r14-0x98]
  013f4:    	mov    rsi,QWORD PTR [r14-0x68]
  013f8:    	mov    rdx,rdi
  013fb:    	mov    rcx,rsi
  013fe:    	mov    rdi,rbx
  01401:    	mov    rsi,r12
  01404: 95 	movabs rax,0x55955d95cbb0
  0140e:    	call   rax
  01410: 95 	movabs r13,0x55955e16d520
  0141a:    	test   rax,rax
  0141d:    	je     0xffffab4e
  01423: ff 	mov    QWORD PTR [r14-0x98],rax
:00071 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  0142a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01431: ff 	mov    rsi,QWORD PTR [r14-0x98]
  01438:    	mov    rdx,rdi
  0143b:    	mov    rcx,rsi
  0143e:    	mov    rdi,rbx
  01441:    	mov    rsi,r12
  01444: 95 	movabs rax,0x55955d95ac30
  0144e:    	call   rax
  01450: 95 	movabs r13,0x55955e16d530
  0145a:    	test   rax,rax
  0145d:    	je     0xffffab4e
  01463: ff 	mov    QWORD PTR [r14-0x90],rax
:00072 %9 = %9.call new(%10; 3)             [<INVALID>]
  0146a:    	mov    rdi,QWORD PTR [r14-0x78]
  0146e: 95 	movabs rax,0x55955d949d50
  01478:    	call   rax
  0147a:    	mov    r15d,eax
  0147d: 95 	movabs r13,0x55955e16d540
  01487:    	cmp    QWORD PTR [r13+0x8],0x0
  0148c:    	je     0x3b5a8
  01492:    	cmp    r15d,DWORD PTR [r13-0x8]
  01496:    	jne    0x3b5a8
  0149c:    	mov    eax,DWORD PTR [rip+0xffffffffffffd943]        # 0xffffede5
  014a2:    	cmp    DWORD PTR [r13-0x4],eax
  014a6:    	jne    0x3b5a8
  014ac: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014b5:    	mov    rax,QWORD PTR [r14-0x78]
  014b9:    	mov    QWORD PTR [rsp-0x40],rax
  014be: 00 	mov    rdi,0x3
  014c5:    	mov    rax,QWORD PTR [r14-0x80]
  014c9:    	mov    QWORD PTR [rsp-0x48],rax
  014ce: ff 	mov    rax,QWORD PTR [r14-0x88]
  014d5:    	mov    QWORD PTR [rsp-0x50],rax
  014da: ff 	mov    rax,QWORD PTR [r14-0x90]
  014e1:    	mov    QWORD PTR [rsp-0x58],rax
  014e6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014ef:    	mov    r13,QWORD PTR [r13+0x8]
  014f3:    	mov    rax,QWORD PTR [r13+0x8]
  014f7:    	mov    QWORD PTR [rsp-0x30],rax
  014fc:    	mov    rax,QWORD PTR [r13+0x0]
  01500:    	mov    r13,QWORD PTR [r13+0x10]
  01504:    	mov    rsi,QWORD PTR [rbx]
  01507:    	mov    QWORD PTR [rsp-0x18],rsi
  0150c:    	lea    rsi,[rsp-0x18]
  01511:    	mov    QWORD PTR [rbx],rsi
  01514:    	lea    r14,[rsp-0x10]
  01519:    	mov    QWORD PTR [rsp-0x20],r14
  0151e:    	call   rax
  01520:    	lea    r14,[rbp-0x8]
  01524:    	mov    QWORD PTR [rbx],r14
  01527:    	mov    r14,QWORD PTR [rbp-0x10]
  0152b:    	test   rax,rax
  0152e:    	je     0x3b5e9
  01534:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [<INVALID>]
  01538:    	mov    rdi,QWORD PTR [r14-0x40]
  0153c: 95 	movabs rax,0x55955d949d50
  01546:    	call   rax
  01548:    	mov    r15d,eax
  0154b: 95 	movabs r13,0x55955e16d560
  01555:    	cmp    QWORD PTR [r13+0x8],0x0
  0155a:    	je     0x3b5f8
  01560:    	cmp    r15d,DWORD PTR [r13-0x8]
  01564:    	jne    0x3b5f8
  0156a:    	mov    eax,DWORD PTR [rip+0xffffffffffffd875]        # 0xffffede5
  01570:    	cmp    DWORD PTR [r13-0x4],eax
  01574:    	jne    0x3b5f8
  0157a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01583:    	mov    rax,QWORD PTR [r14-0x40]
  01587:    	mov    QWORD PTR [rsp-0x40],rax
  0158c: 00 	mov    rdi,0x1
  01593:    	mov    rax,QWORD PTR [r14-0x78]
  01597:    	mov    QWORD PTR [rsp-0x48],rax
  0159c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015a5:    	mov    r13,QWORD PTR [r13+0x8]
  015a9:    	mov    rax,QWORD PTR [r13+0x8]
  015ad:    	mov    QWORD PTR [rsp-0x30],rax
  015b2:    	mov    rax,QWORD PTR [r13+0x0]
  015b6:    	mov    r13,QWORD PTR [r13+0x10]
  015ba:    	mov    rsi,QWORD PTR [rbx]
  015bd:    	mov    QWORD PTR [rsp-0x18],rsi
  015c2:    	lea    rsi,[rsp-0x18]
  015c7:    	mov    QWORD PTR [rbx],rsi
  015ca:    	lea    r14,[rsp-0x10]
  015cf:    	mov    QWORD PTR [rsp-0x20],r14
  015d4:    	call   rax
  015d6:    	lea    r14,[rbp-0x8]
  015da:    	mov    QWORD PTR [rbx],r14
  015dd:    	mov    r14,QWORD PTR [rbp-0x10]
  015e1:    	test   rax,rax
  015e4:    	je     0x3b639
:00075 
:00076 %9 = %2.call pl()                    [<INVALID>]
  015ea:    	mov    rdi,QWORD PTR [r14-0x40]
  015ee: 95 	movabs rax,0x55955d949d50
  015f8:    	call   rax
  015fa:    	mov    r15d,eax
  015fd: 95 	movabs r13,0x55955e16d580
  01607:    	cmp    QWORD PTR [r13+0x8],0x0
  0160c:    	je     0x3b648
  01612:    	cmp    r15d,DWORD PTR [r13-0x8]
  01616:    	jne    0x3b648
  0161c:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7c3]        # 0xffffede5
  01622:    	cmp    DWORD PTR [r13-0x4],eax
  01626:    	jne    0x3b648
  0162c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01635:    	mov    rax,QWORD PTR [r14-0x40]
  01639:    	mov    QWORD PTR [rsp-0x40],rax
  0163e: 00 	mov    rdi,0x0
  01645: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0164e:    	mov    r13,QWORD PTR [r13+0x8]
  01652:    	mov    rax,QWORD PTR [r13+0x8]
  01656:    	mov    QWORD PTR [rsp-0x30],rax
  0165b:    	mov    rax,QWORD PTR [r13+0x0]
  0165f:    	mov    r13,QWORD PTR [r13+0x10]
  01663:    	mov    rsi,QWORD PTR [rbx]
  01666:    	mov    QWORD PTR [rsp-0x18],rsi
  0166b:    	lea    rsi,[rsp-0x18]
  01670:    	mov    QWORD PTR [rbx],rsi
  01673:    	lea    r14,[rsp-0x10]
  01678:    	mov    QWORD PTR [rsp-0x20],r14
  0167d:    	call   rax
  0167f:    	lea    r14,[rbp-0x8]
  01683:    	mov    QWORD PTR [rbx],r14
  01686:    	mov    r14,QWORD PTR [rbp-0x10]
  0168a:    	test   rax,rax
  0168d:    	je     0x3b689
  01693:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: <INVALID>[IvarId(0)]
  01697:    	mov    rdi,QWORD PTR [r14-0x30]
  0169b: 00 	mov    rsi,0xa4
  016a2:    	mov    rdx,r12
  016a5: 95 	movabs rax,0x55955d9acee0
  016af:    	call   rax
  016b1:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  016b5:    	mov    rdi,QWORD PTR [r14-0x78]
  016b9: 95 	movabs rax,0x55955d949d50
  016c3:    	call   rax
  016c5:    	mov    r15d,eax
  016c8: 95 	movabs r13,0x55955e16d5b0
  016d2:    	cmp    QWORD PTR [r13+0x8],0x0
  016d7:    	je     0x3b698
  016dd:    	cmp    r15d,DWORD PTR [r13-0x8]
  016e1:    	jne    0x3b698
  016e7:    	mov    eax,DWORD PTR [rip+0xffffffffffffd6f8]        # 0xffffede5
  016ed:    	cmp    DWORD PTR [r13-0x4],eax
  016f1:    	jne    0x3b698
  016f7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01700:    	mov    rax,QWORD PTR [r14-0x78]
  01704:    	mov    QWORD PTR [rsp-0x40],rax
  01709: 00 	mov    rdi,0x1
  01710:    	mov    rax,QWORD PTR [r14-0x80]
  01714:    	mov    QWORD PTR [rsp-0x48],rax
  01719: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01722:    	mov    r13,QWORD PTR [r13+0x8]
  01726:    	mov    rax,QWORD PTR [r13+0x8]
  0172a:    	mov    QWORD PTR [rsp-0x30],rax
  0172f:    	mov    rax,QWORD PTR [r13+0x0]
  01733:    	mov    r13,QWORD PTR [r13+0x10]
  01737:    	mov    rsi,QWORD PTR [rbx]
  0173a:    	mov    QWORD PTR [rsp-0x18],rsi
  0173f:    	lea    rsi,[rsp-0x18]
  01744:    	mov    QWORD PTR [rbx],rsi
  01747:    	lea    r14,[rsp-0x10]
  0174c:    	mov    QWORD PTR [rsp-0x20],r14
  01751:    	call   rax
  01753:    	lea    r14,[rbp-0x8]
  01757:    	mov    QWORD PTR [rbx],r14
  0175a:    	mov    r14,QWORD PTR [rbp-0x10]
  0175e:    	test   rax,rax
  01761:    	je     0x3b6d9
  01767:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [<INVALID>]
  0176b:    	mov    rdi,QWORD PTR [r14-0x70]
  0176f: 95 	movabs rax,0x55955d949d50
  01779:    	call   rax
  0177b:    	mov    r15d,eax
  0177e: 95 	movabs r13,0x55955e16d5d0
  01788:    	cmp    QWORD PTR [r13+0x8],0x0
  0178d:    	je     0x3b6e8
  01793:    	cmp    r15d,DWORD PTR [r13-0x8]
  01797:    	jne    0x3b6e8
  0179d:    	mov    eax,DWORD PTR [rip+0xffffffffffffd642]        # 0xffffede5
  017a3:    	cmp    DWORD PTR [r13-0x4],eax
  017a7:    	jne    0x3b6e8
  017ad: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017b6:    	mov    rax,QWORD PTR [r14-0x70]
  017ba:    	mov    QWORD PTR [rsp-0x40],rax
  017bf: 00 	mov    rdi,0x0
  017c6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017cf:    	mov    r13,QWORD PTR [r13+0x8]
  017d3:    	mov    rax,QWORD PTR [r13+0x8]
  017d7:    	mov    QWORD PTR [rsp-0x30],rax
  017dc:    	mov    rax,QWORD PTR [r13+0x0]
  017e0:    	mov    r13,QWORD PTR [r13+0x10]
  017e4:    	mov    rsi,QWORD PTR [rbx]
  017e7:    	mov    QWORD PTR [rsp-0x18],rsi
  017ec:    	lea    rsi,[rsp-0x18]
  017f1:    	mov    QWORD PTR [rbx],rsi
  017f4:    	lea    r14,[rsp-0x10]
  017f9:    	mov    QWORD PTR [rsp-0x20],r14
  017fe:    	call   rax
  01800:    	lea    r14,[rbp-0x8]
  01804:    	mov    QWORD PTR [rbx],r14
  01807:    	mov    r14,QWORD PTR [rbp-0x10]
  0180b:    	test   rax,rax
  0180e:    	je     0x3b729
  01814:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [<INVALID>]
  01818:    	mov    rdi,QWORD PTR [r14-0x40]
  0181c: 95 	movabs rax,0x55955d949d50
  01826:    	call   rax
  01828:    	mov    r15d,eax
  0182b: 95 	movabs r13,0x55955e16d5f0
  01835:    	cmp    QWORD PTR [r13+0x8],0x0
  0183a:    	je     0x3b738
  01840:    	cmp    r15d,DWORD PTR [r13-0x8]
  01844:    	jne    0x3b738
  0184a:    	mov    eax,DWORD PTR [rip+0xffffffffffffd595]        # 0xffffede5
  01850:    	cmp    DWORD PTR [r13-0x4],eax
  01854:    	jne    0x3b738
  0185a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01863:    	mov    rax,QWORD PTR [r14-0x40]
  01867:    	mov    QWORD PTR [rsp-0x40],rax
  0186c: 00 	mov    rdi,0x1
  01873:    	mov    rax,QWORD PTR [r14-0x78]
  01877:    	mov    QWORD PTR [rsp-0x48],rax
  0187c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01885:    	mov    r13,QWORD PTR [r13+0x8]
  01889:    	mov    rax,QWORD PTR [r13+0x8]
  0188d:    	mov    QWORD PTR [rsp-0x30],rax
  01892:    	mov    rax,QWORD PTR [r13+0x0]
  01896:    	mov    r13,QWORD PTR [r13+0x10]
  0189a:    	mov    rsi,QWORD PTR [rbx]
  0189d:    	mov    QWORD PTR [rsp-0x18],rsi
  018a2:    	lea    rsi,[rsp-0x18]
  018a7:    	mov    QWORD PTR [rbx],rsi
  018aa:    	lea    r14,[rsp-0x10]
  018af:    	mov    QWORD PTR [rsp-0x20],r14
  018b4:    	call   rax
  018b6:    	lea    r14,[rbp-0x8]
  018ba:    	mov    QWORD PTR [rbx],r14
  018bd:    	mov    r14,QWORD PTR [rbp-0x10]
  018c1:    	test   rax,rax
  018c4:    	je     0x3b779
:00084 
:00085 br =>:00086
  018ca:    	jmp    0x3b7ba
:00086 br =>:00087
  018cf:    	jmp    0x3b813
:00087 %9 = nil
  018d4: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  018dc:    	mov    rax,QWORD PTR [r14-0x78]
  018e0:    	leave  
  018e1:    	ret    
==> start whole compile: vsub FuncId(91) self_class:Vec start:[00000] bytecode:0x55955e18a030
<== finished compile. elapsed:62.8µs
offset:Pos(28200) code: 1355 bytes  data: 61 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x39eda
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    rdi,QWORD PTR [r14-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x39ee9
  00040: cmp    DWORD PTR [rdi+0x4],0x2b
  00044: jne    0x39ee9
:00000 init_method reg:7 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffffd457]        # 0xffffd4a8
  00051: cmp    rax,QWORD PTR [rip+0x510]        # 0x568
  00058: jne    0x39ef8
  0005e: mov    rax,QWORD PTR [rip+0x4f3]        # 0x558
  00065: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [r14-0x30]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call x()                     [Vec]
  00075: mov    rdi,QWORD PTR [r14-0x38]
  00079: test   rdi,0x7
  00080: jne    0x39f3e
  00086: cmp    DWORD PTR [rdi+0x4],0x2b
  0008a: jne    0x39f3e
  00090: cmp    DWORD PTR [rip+0xffffffffffffd3fc],0x26        # 0xffffd493
  00097: jne    0x39f3e
  0009d: mov    esi,DWORD PTR [rip+0x4d1]        # 0x574
  000a3: cmp    esi,0xffffffff
  000a6: je     0x39f4d
  000ac: cmp    WORD PTR [rdi+0x2],0x3
  000b1: jne    0xca
  000b7: cmp    esi,0x6
  000ba: jge    0xca
  000c0: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c5: jmp    0xd6
  000ca: movabs rax,0x55955d9e0e20
  000d4: call   rax
  000d6: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 - %4                         [Float][Float]
  000da: mov    rdi,QWORD PTR [r14-0x48]
  000de: test   rdi,0x1
  000e5: jne    0x39f76
  000eb: test   rdi,0x2
  000f2: je     0x12e
  000f8: xorps  xmm2,xmm2
  000fb: movabs rax,0x8000000000000002
  00105: cmp    rdi,rax
  00108: je     0x140
  0010e: mov    rax,rdi
  00111: sar    rax,0x3f
  00115: add    rax,0x2
  00119: and    rdi,0xfffffffffffffffc
  0011d: or     rdi,rax
  00120: rol    rdi,0x3d
  00124: movq   xmm2,rdi
  00129: jmp    0x140
  0012e: call   0xffff9255
  00133: test   rax,rax
  00136: je     0x39f76
  0013c: movq   xmm2,xmm0
  00140: mov    rdi,QWORD PTR [r14-0x50]
  00144: test   rdi,0x1
  0014b: jne    0x39f85
  00151: test   rdi,0x2
  00158: je     0x194
  0015e: xorps  xmm3,xmm3
  00161: movabs rax,0x8000000000000002
  0016b: cmp    rdi,rax
  0016e: je     0x1a6
  00174: mov    rax,rdi
  00177: sar    rax,0x3f
  0017b: add    rax,0x2
  0017f: and    rdi,0xfffffffffffffffc
  00183: or     rdi,rax
  00186: rol    rdi,0x3d
  0018a: movq   xmm3,rdi
  0018f: jmp    0x1a6
  00194: call   0xffff9255
  00199: test   rax,rax
  0019c: je     0x39f85
  001a2: movq   xmm3,xmm0
  001a6: subsd  xmm2,xmm3
:00006 %4 = @y: Vec[IvarId(1)]
  001aa: mov    rdi,QWORD PTR [r14-0x30]
  001ae: mov    rax,QWORD PTR [rdi+0x18]
  001b2: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001b6: mov    rdi,QWORD PTR [r14-0x38]
  001ba: test   rdi,0x7
  001c1: jne    0x39f94
  001c7: cmp    DWORD PTR [rdi+0x4],0x2b
  001cb: jne    0x39f94
  001d1: cmp    DWORD PTR [rip+0xffffffffffffd2bb],0x26        # 0xffffd493
  001d8: jne    0x39f94
  001de: mov    esi,DWORD PTR [rip+0x398]        # 0x57c
  001e4: cmp    esi,0xffffffff
  001e7: je     0x39fb0
  001ed: cmp    WORD PTR [rdi+0x2],0x3
  001f2: jne    0x20b
  001f8: cmp    esi,0x6
  001fb: jge    0x20b
  00201: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00206: jmp    0x229
  0020b: sub    rsp,0x10
  0020f: movq   QWORD PTR [rsp],xmm2
  00214: movabs rax,0x55955d9e0e20
  0021e: call   rax
  00220: movq   xmm2,QWORD PTR [rsp]
  00225: add    rsp,0x10
  00229: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 - %5                         [Float][Float]
  0022d: mov    rdi,QWORD PTR [r14-0x50]
  00231: test   rdi,0x1
  00238: jne    0x39feb
  0023e: test   rdi,0x2
  00245: je     0x281
  0024b: xorps  xmm3,xmm3
  0024e: movabs rax,0x8000000000000002
  00258: cmp    rdi,rax
  0025b: je     0x293
  00261: mov    rax,rdi
  00264: sar    rax,0x3f
  00268: add    rax,0x2
  0026c: and    rdi,0xfffffffffffffffc
  00270: or     rdi,rax
  00273: rol    rdi,0x3d
  00277: movq   xmm3,rdi
  0027c: jmp    0x293
  00281: call   0xffff9255
  00286: test   rax,rax
  00289: je     0x39feb
  0028f: movq   xmm3,xmm0
  00293: mov    rdi,QWORD PTR [r14-0x58]
  00297: test   rdi,0x1
  0029e: jne    0x3a007
  002a4: test   rdi,0x2
  002ab: je     0x2e7
  002b1: xorps  xmm4,xmm4
  002b4: movabs rax,0x8000000000000002
  002be: cmp    rdi,rax
  002c1: je     0x2f9
  002c7: mov    rax,rdi
  002ca: sar    rax,0x3f
  002ce: add    rax,0x2
  002d2: and    rdi,0xfffffffffffffffc
  002d6: or     rdi,rax
  002d9: rol    rdi,0x3d
  002dd: movq   xmm4,rdi
  002e2: jmp    0x2f9
  002e7: call   0xffff9255
  002ec: test   rax,rax
  002ef: je     0x3a007
  002f5: movq   xmm4,xmm0
  002f9: subsd  xmm3,xmm4
:00010 %5 = @z: Vec[IvarId(2)]
  002fd: mov    rdi,QWORD PTR [r14-0x30]
  00301: mov    rax,QWORD PTR [rdi+0x20]
  00305: mov    QWORD PTR [r14-0x58],rax
:00011 %6 = %1.call z()                     [Vec]
  00309: mov    rdi,QWORD PTR [r14-0x38]
  0030d: test   rdi,0x7
  00314: jne    0x3a023
  0031a: cmp    DWORD PTR [rdi+0x4],0x2b
  0031e: jne    0x3a023
  00324: cmp    DWORD PTR [rip+0xffffffffffffd168],0x26        # 0xffffd493
  0032b: jne    0x3a023
  00331: mov    esi,DWORD PTR [rip+0x24d]        # 0x584
  00337: cmp    esi,0xffffffff
  0033a: je     0x3a04c
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x35e
  0034b: cmp    esi,0x6
  0034e: jge    0x35e
  00354: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00359: jmp    0x388
  0035e: sub    rsp,0x10
  00362: movq   QWORD PTR [rsp],xmm2
  00367: movq   QWORD PTR [rsp+0x8],xmm3
  0036d: movabs rax,0x55955d9e0e20
  00377: call   rax
  00379: movq   xmm2,QWORD PTR [rsp]
  0037e: movq   xmm3,QWORD PTR [rsp+0x8]
  00384: add    rsp,0x10
  00388: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %5 = %5 - %6                         [Float][Float]
  0038c: mov    rdi,QWORD PTR [r14-0x58]
  00390: test   rdi,0x1
  00397: jne    0x3a093
  0039d: test   rdi,0x2
  003a4: je     0x3e0
  003aa: xorps  xmm4,xmm4
  003ad: movabs rax,0x8000000000000002
  003b7: cmp    rdi,rax
  003ba: je     0x3f2
  003c0: mov    rax,rdi
  003c3: sar    rax,0x3f
  003c7: add    rax,0x2
  003cb: and    rdi,0xfffffffffffffffc
  003cf: or     rdi,rax
  003d2: rol    rdi,0x3d
  003d6: movq   xmm4,rdi
  003db: jmp    0x3f2
  003e0: call   0xffff9255
  003e5: test   rax,rax
  003e8: je     0x3a093
  003ee: movq   xmm4,xmm0
  003f2: mov    rdi,QWORD PTR [r14-0x60]
  003f6: test   rdi,0x1
  003fd: jne    0x3a0bc
  00403: test   rdi,0x2
  0040a: je     0x446
  00410: xorps  xmm5,xmm5
  00413: movabs rax,0x8000000000000002
  0041d: cmp    rdi,rax
  00420: je     0x458
  00426: mov    rax,rdi
  00429: sar    rax,0x3f
  0042d: add    rax,0x2
  00431: and    rdi,0xfffffffffffffffc
  00435: or     rdi,rax
  00438: rol    rdi,0x3d
  0043c: movq   xmm5,rdi
  00441: jmp    0x458
  00446: call   0xffff9255
  0044b: test   rax,rax
  0044e: je     0x3a0bc
  00454: movq   xmm5,xmm0
  00458: subsd  xmm4,xmm5
:00014 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  0045c: movq   xmm0,xmm2
  00460: call   0xffff9379
  00465: mov    QWORD PTR [r14-0x48],rax
  00469: movq   xmm0,xmm3
  0046d: call   0xffff9379
  00472: mov    QWORD PTR [r14-0x50],rax
  00476: movq   xmm0,xmm4
  0047a: call   0xffff9379
  0047f: mov    QWORD PTR [r14-0x58],rax
  00483: mov    rdi,QWORD PTR [r14-0x40]
  00487: test   rdi,0x7
  0048e: jne    0x3a0e5
  00494: cmp    DWORD PTR [rdi+0x4],0x2c
  00498: jne    0x3a0e5
  0049e: cmp    DWORD PTR [rip+0xffffffffffffcfee],0x26        # 0xffffd493
  004a5: jne    0x3a0e5
  004ab: mov    r9,0x0
  004b2: sub    rsp,0x20
  004b6: movq   QWORD PTR [rsp],xmm2
  004bb: movq   QWORD PTR [rsp+0x8],xmm3
  004c1: movq   QWORD PTR [rsp+0x10],xmm4
  004c7: movq   QWORD PTR [rsp+0x18],xmm5
  004cd: mov    rdx,rdi
  004d0: mov    QWORD PTR [rsp-0x40],rcx
  004d5: mov    QWORD PTR [rsp-0x28],0x0
  004de: lea    rcx,[r14-0x48]
  004e2: mov    r8,0x3
  004e9: mov    rsi,QWORD PTR [rbx]
  004ec: mov    QWORD PTR [rsp-0x18],rsi
  004f1: lea    rsi,[rsp-0x18]
  004f6: mov    QWORD PTR [rbx],rsi
  004f9: lea    r14,[rsp-0x10]
  004fe: mov    QWORD PTR [rsp-0x20],r14
  00503: call   0x3a0f4
  00508: lea    r14,[rbp-0x8]
  0050c: mov    QWORD PTR [rbx],r14
  0050f: mov    r14,QWORD PTR [rbp-0x10]
  00513: movq   xmm2,QWORD PTR [rsp]
  00518: movq   xmm3,QWORD PTR [rsp+0x8]
  0051e: movq   xmm4,QWORD PTR [rsp+0x10]
  00524: movq   xmm5,QWORD PTR [rsp+0x18]
  0052a: add    rsp,0x20
  0052e: movabs r13,0x55955e18a130
  00538: test   rax,rax
  0053b: je     0xffff91fc
  00541: mov    QWORD PTR [r14-0x40],rax
:00015 
:00016 ret %2
  00545: mov    rax,QWORD PTR [r14-0x40]
  00549: leave  
  0054a: ret    
==> start whole compile: <unnamed> FuncId(110) self_class:Scene start:[00000] bytecode:0x55955e17be90
<== finished compile. elapsed:107.6µs
offset:Pos(29886) code: 6852 bytes  data: 290 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x39a9f
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x39a9f
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.call to_f()                 [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x39aae
  000e7: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd0f],0x26        # 0xffffcdfd
  000ee:    	jne    0x39aae
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.call to_f()                 [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x39abd
  00128: 26 	cmp    DWORD PTR [rip+0xffffffffffffccce],0x26        # 0xffffcdfd
  0012f:    	jne    0x39abd
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.call to_f()                 [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x39ad9
  00163: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc93],0x26        # 0xffffcdfd
  0016a:    	jne    0x39ad9
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.call to_f()                 [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x39b02
  001a1: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc55],0x26        # 0xffffcdfd
  001a8:    	jne    0x39b02
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.call to_f()                  [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x39b38
  001c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc2f],0x26        # 0xffffcdfd
  001ce:    	jne    0x39b38
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.call to_f()                 [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x39b7b
  001ff: 26 	cmp    DWORD PTR [rip+0xffffffffffffcbf7],0x26        # 0xffffcdfd
  00206:    	jne    0x39b7b
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x39bcb
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xffff8bbf
  00289:    	test   rax,rax
  0028c:    	je     0x39bcb
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xffff8b8b
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 18 	movq   xmm9,QWORD PTR [rip+0x1811]        # 0x1ad2
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xffff8b8b
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 17 	movq   xmm9,QWORD PTR [rip+0x17e9]        # 0x1ae2
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xffff8b8b
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xffff8b8b
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x39c28
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xffff8bbf
  003b0:    	test   rax,rax
  003b3:    	je     0x39c28
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xffff8b8b
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 17 	movq   xmm9,QWORD PTR [rip+0x170a]        # 0x1af2
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xffff8b8b
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x16e3]        # 0x1b02
:00034 %15 = literal[2.0]
  0041f: 16 	movq   xmm9,QWORD PTR [rip+0x16ea]        # 0x1b12
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xffff8b8b
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xffff8b8b
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc9a1]        # 0xffffce12
  00471: 00 	cmp    rax,QWORD PTR [rip+0x16ba]        # 0x1b32
  00478:    	jne    0x39ca4
  0047e: 00 	mov    rax,QWORD PTR [rip+0x169d]        # 0x1b22
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 16 	movq   xmm8,QWORD PTR [rip+0x16ad]        # 0x1b42
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xffff8ce3
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xffff8ce3
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xffff8ce3
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xffff8ce3
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xffff8ce3
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xffff8ce3
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xffff8ce3
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xffff8ce3
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xffff8ce3
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xffff8ce3
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x39d62
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x39d62
  00550: 26 	cmp    DWORD PTR [rip+0xffffffffffffc8a6],0x26        # 0xffffcdfd
  00557:    	jne    0x39d62
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x39d71
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd: 95 	movabs r13,0x55955e17c140
  005e7:    	test   rax,rax
  005ea:    	je     0xffff8b66
  005f0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005f7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005fe: 00 	test   rdi,0x7
  00605:    	jne    0x39da3
  0060b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0060f:    	jne    0x39da3
  00615: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7e1],0x26        # 0xffffcdfd
  0061c:    	jne    0x39da3
  00622:    	sub    rsp,0x20
  00626:    	movq   QWORD PTR [rsp],xmm8
  0062c: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00633: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0063a: 00 	cmp    DWORD PTR [rip+0xffffffffffffc7c0],0x0        # 0xffffce01
  00641:    	je     0x659
  00647:    	mov    rdi,r12
  0064a:    	mov    rsi,QWORD PTR [rbx]
  0064d: 95 	movabs rax,0x55955d9a3d50
  00657:    	call   rax
  00659: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00662: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00669:    	mov    QWORD PTR [rsp-0x40],rax
  0066e: 00 	mov    rdi,0x0
  00675: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0067e: 07 	movabs rax,0x70000005f
  00688:    	mov    QWORD PTR [rsp-0x30],rax
  0068d: 95 	movabs r13,0x55955e168310
  00697:    	mov    rsi,QWORD PTR [rbx]
  0069a:    	mov    QWORD PTR [rsp-0x18],rsi
  0069f:    	lea    rsi,[rsp-0x18]
  006a4:    	mov    QWORD PTR [rbx],rsi
  006a7:    	lea    r14,[rsp-0x10]
  006ac:    	mov    QWORD PTR [rsp-0x20],r14
  006b1:    	call   0xffffd6c5
  006b6:    	lea    r14,[rbp-0x8]
  006ba:    	mov    QWORD PTR [rbx],r14
  006bd:    	mov    r14,QWORD PTR [rbp-0x10]
  006c1:    	movq   xmm8,QWORD PTR [rsp]
  006c7: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006ce: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006d5:    	add    rsp,0x20
  006d9: 95 	movabs r13,0x55955e17c160
  006e3:    	test   rax,rax
  006e6:    	je     0xffff8b66
  006ec:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006f0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc71b]        # 0xffffce12
  006f7: 00 	cmp    rax,QWORD PTR [rip+0x1464]        # 0x1b62
  006fe:    	jne    0x39db2
  00704: 00 	mov    rax,QWORD PTR [rip+0x1447]        # 0x1b52
  0070b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  00712: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc6f9]        # 0xffffce12
  00719: 00 	cmp    rax,QWORD PTR [rip+0x1462]        # 0x1b82
  00720:    	jne    0x39e28
  00726: 00 	mov    rax,QWORD PTR [rip+0x1445]        # 0x1b72
  0072d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  00734: 00 	movq   xmm2,QWORD PTR [rip+0x1456]        # 0x1b92
  0073c: 00 	movabs rax,0x8000000000000002
  00746: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  0074d: 00 	movq   xmm3,QWORD PTR [rip+0x144d]        # 0x1ba2
  00755: 00 	movabs rax,0x8000000000000002
  0075f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00766: 00 	movq   xmm4,QWORD PTR [rip+0x1444]        # 0x1bb2
  0076e: 00 	movabs rax,0x8000000000000002
  00778: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  0077f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00786: 00 	test   rdi,0x7
  0078d:    	jne    0x39e90
  00793:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00797:    	jne    0x39e90
  0079d: 26 	cmp    DWORD PTR [rip+0xffffffffffffc659],0x26        # 0xffffcdfd
  007a4:    	jne    0x39e90
  007aa: 00 	mov    r9,0x0
  007b1:    	sub    rsp,0x20
  007b5:    	movq   QWORD PTR [rsp],xmm2
  007ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  007c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  007c6:    	mov    rdx,rdi
  007c9:    	mov    QWORD PTR [rsp-0x40],rcx
  007ce: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007d7: ff 	lea    rcx,[r14-0xb0]
  007de: 00 	mov    r8,0x3
  007e5:    	mov    rsi,QWORD PTR [rbx]
  007e8:    	mov    QWORD PTR [rsp-0x18],rsi
  007ed:    	lea    rsi,[rsp-0x18]
  007f2:    	mov    QWORD PTR [rbx],rsi
  007f5:    	lea    r14,[rsp-0x10]
  007fa:    	mov    QWORD PTR [rsp-0x20],r14
  007ff:    	call   0x39e9f
  00804:    	lea    r14,[rbp-0x8]
  00808:    	mov    QWORD PTR [rbx],r14
  0080b:    	mov    r14,QWORD PTR [rbp-0x10]
  0080f:    	movq   xmm2,QWORD PTR [rsp]
  00814:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0081a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00820:    	add    rsp,0x20
  00824: 95 	movabs r13,0x55955e17c1d0
  0082e:    	test   rax,rax
  00831:    	je     0xffff8b66
  00837: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  0083e:    	mov    rax,QWORD PTR [r14-0x80]
  00842: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00849: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00850: 00 	test   rdi,0x7
  00857:    	jne    0x39ed1
  0085d:    	cmp    DWORD PTR [rdi+0x4],0x32
  00861:    	jne    0x39ed1
  00867: 26 	cmp    DWORD PTR [rip+0xffffffffffffc58f],0x26        # 0xffffcdfd
  0086e:    	jne    0x39ed1
  00874: 00 	mov    r9,0x0
  0087b:    	sub    rsp,0x10
  0087f:    	movq   QWORD PTR [rsp],xmm3
  00884:    	movq   QWORD PTR [rsp+0x8],xmm4
  0088a:    	mov    rdx,rdi
  0088d:    	mov    QWORD PTR [rsp-0x40],rcx
  00892: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0089b: ff 	lea    rcx,[r14-0xa8]
  008a2: 00 	mov    r8,0x2
  008a9:    	mov    rsi,QWORD PTR [rbx]
  008ac:    	mov    QWORD PTR [rsp-0x18],rsi
  008b1:    	lea    rsi,[rsp-0x18]
  008b6:    	mov    QWORD PTR [rbx],rsi
  008b9:    	lea    r14,[rsp-0x10]
  008be:    	mov    QWORD PTR [rsp-0x20],r14
  008c3:    	call   0x39ee0
  008c8:    	lea    r14,[rbp-0x8]
  008cc:    	mov    QWORD PTR [rbx],r14
  008cf:    	mov    r14,QWORD PTR [rbp-0x10]
  008d3:    	movq   xmm3,QWORD PTR [rsp]
  008d8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008de:    	add    rsp,0x10
  008e2: 95 	movabs r13,0x55955e17c200
  008ec:    	test   rax,rax
  008ef:    	je     0xffff8b66
  008f5: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008fc: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc50f]        # 0xffffce12
  00903: 00 	cmp    rax,QWORD PTR [rip+0x12c8]        # 0x1bd2
  0090a:    	jne    0x39f12
  00910: 00 	mov    rax,QWORD PTR [rip+0x12ab]        # 0x1bc2
  00917: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  0091e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00925: 00 	test   rdi,0x7
  0092c:    	jne    0x39f76
  00932:    	cmp    DWORD PTR [rdi+0x4],0x34
  00936:    	jne    0x39f76
  0093c: 26 	cmp    DWORD PTR [rip+0xffffffffffffc4ba],0x26        # 0xffffcdfd
  00943:    	jne    0x39f76
  00949: 00 	mov    r9,0x0
  00950:    	sub    rsp,0x10
  00954:    	movq   QWORD PTR [rsp],xmm3
  00959:    	movq   QWORD PTR [rsp+0x8],xmm4
  0095f:    	mov    rdx,rdi
  00962:    	mov    QWORD PTR [rsp-0x40],rcx
  00967: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00970: ff 	lea    rcx,[r14-0xa8]
  00977: 00 	mov    r8,0x0
  0097e:    	mov    rsi,QWORD PTR [rbx]
  00981:    	mov    QWORD PTR [rsp-0x18],rsi
  00986:    	lea    rsi,[rsp-0x18]
  0098b:    	mov    QWORD PTR [rbx],rsi
  0098e:    	lea    r14,[rsp-0x10]
  00993:    	mov    QWORD PTR [rsp-0x20],r14
  00998:    	call   0x39f85
  0099d:    	lea    r14,[rbp-0x8]
  009a1:    	mov    QWORD PTR [rbx],r14
  009a4:    	mov    r14,QWORD PTR [rbp-0x10]
  009a8:    	movq   xmm3,QWORD PTR [rsp]
  009ad:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009b3:    	add    rsp,0x10
  009b7: 95 	movabs r13,0x55955e17c230
  009c1:    	test   rax,rax
  009c4:    	je     0xffff8b66
  009ca: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  009d1:    	mov    rdi,QWORD PTR [r14-0x30]
  009d5:    	mov    rax,QWORD PTR [rdi+0x10]
  009d9: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  009e0: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009f2: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009f9: 00 	test   rdi,0x7
  00a00:    	jne    0x39fb7
  00a06:    	cmp    DWORD PTR [rdi+0x4],0xb
  00a0a:    	jne    0x39fb7
  00a10: 00 	test   rsi,0x1
  00a17:    	je     0x39fb7
  00a1d:    	sar    rsi,1
  00a20:    	sub    rsp,0x10
  00a24:    	movq   QWORD PTR [rsp],xmm3
  00a29:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a2f: 95 	movabs rax,0x55955d9acd00
  00a39:    	call   rax
  00a3b:    	movq   xmm3,QWORD PTR [rsp]
  00a40:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a46:    	add    rsp,0x10
  00a4a: 95 	movabs r13,0x55955e17c260
  00a54:    	test   rax,rax
  00a57:    	je     0xffff8b66
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a64: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a6b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a72: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a79: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a80: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a87: 00 	test   rdi,0x7
  00a8e:    	jne    0x39fc6
  00a94:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a98:    	jne    0x39fc6
  00a9e: 26 	cmp    DWORD PTR [rip+0xffffffffffffc358],0x26        # 0xffffcdfd
  00aa5:    	jne    0x39fc6
  00aab:    	sub    rsp,0x10
  00aaf:    	movq   QWORD PTR [rsp],xmm3
  00ab4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00aba: 00 	cmp    DWORD PTR [rip+0xffffffffffffc340],0x0        # 0xffffce01
  00ac1:    	je     0xad9
  00ac7:    	mov    rdi,r12
  00aca:    	mov    rsi,QWORD PTR [rbx]
  00acd: 95 	movabs rax,0x55955d9a3d50
  00ad7:    	call   rax
  00ad9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ae2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00ae9:    	mov    QWORD PTR [rsp-0x40],rax
  00aee: 00 	mov    rdi,0x2
  00af5: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00afc:    	mov    QWORD PTR [rsp-0x48],rax
  00b01: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00b08:    	mov    QWORD PTR [rsp-0x50],rax
  00b0d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b16: 0e 	movabs rax,0x1000e00000061
  00b20:    	mov    QWORD PTR [rsp-0x30],rax
  00b25: 95 	movabs r13,0x55955e16d0b0
  00b2f:    	mov    rsi,QWORD PTR [rbx]
  00b32:    	mov    QWORD PTR [rsp-0x18],rsi
  00b37:    	lea    rsi,[rsp-0x18]
  00b3c:    	mov    QWORD PTR [rbx],rsi
  00b3f:    	lea    r14,[rsp-0x10]
  00b44:    	mov    QWORD PTR [rsp-0x20],r14
  00b49:    	call   0xffffd9be
  00b4e:    	lea    r14,[rbp-0x8]
  00b52:    	mov    QWORD PTR [rbx],r14
  00b55:    	mov    r14,QWORD PTR [rbp-0x10]
  00b59:    	movq   xmm3,QWORD PTR [rsp]
  00b5e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b64:    	add    rsp,0x10
  00b68: 95 	movabs r13,0x55955e17c2a0
  00b72:    	test   rax,rax
  00b75:    	je     0xffff8b66
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b7b:    	mov    rdi,QWORD PTR [r14-0x30]
  00b7f:    	mov    rax,QWORD PTR [rdi+0x10]
  00b83: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b8a: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b95: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b9c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00ba3: 00 	test   rdi,0x7
  00baa:    	jne    0x39fd5
  00bb0:    	cmp    DWORD PTR [rdi+0x4],0xb
  00bb4:    	jne    0x39fd5
  00bba: 00 	test   rsi,0x1
  00bc1:    	je     0x39fd5
  00bc7:    	sar    rsi,1
  00bca:    	sub    rsp,0x10
  00bce:    	movq   QWORD PTR [rsp],xmm3
  00bd3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bd9: 95 	movabs rax,0x55955d9acd00
  00be3:    	call   rax
  00be5:    	movq   xmm3,QWORD PTR [rsp]
  00bea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bf0:    	add    rsp,0x10
  00bf4: 95 	movabs r13,0x55955e17c2d0
  00bfe:    	test   rax,rax
  00c01:    	je     0xffff8b66
  00c07: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00c0e: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c15: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00c1c: ff 	mov    rax,QWORD PTR [r14-0x90]
  00c23: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00c2a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00c31: 00 	test   rdi,0x7
  00c38:    	jne    0x39fe4
  00c3e:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00c42:    	jne    0x39fe4
  00c48: 26 	cmp    DWORD PTR [rip+0xffffffffffffc1ae],0x26        # 0xffffcdfd
  00c4f:    	jne    0x39fe4
  00c55:    	sub    rsp,0x10
  00c59:    	movq   QWORD PTR [rsp],xmm3
  00c5e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c64: 00 	cmp    DWORD PTR [rip+0xffffffffffffc196],0x0        # 0xffffce01
  00c6b:    	je     0xc83
  00c71:    	mov    rdi,r12
  00c74:    	mov    rsi,QWORD PTR [rbx]
  00c77: 95 	movabs rax,0x55955d9a3d50
  00c81:    	call   rax
  00c83: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c8c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c93:    	mov    QWORD PTR [rsp-0x40],rax
  00c98: 00 	mov    rdi,0x2
  00c9f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00ca6:    	mov    QWORD PTR [rsp-0x48],rax
  00cab: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00cb2:    	mov    QWORD PTR [rsp-0x50],rax
  00cb7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cc0: 0e 	movabs rax,0x1000e00000061
  00cca:    	mov    QWORD PTR [rsp-0x30],rax
  00ccf: 95 	movabs r13,0x55955e16d0b0
  00cd9:    	mov    rsi,QWORD PTR [rbx]
  00cdc:    	mov    QWORD PTR [rsp-0x18],rsi
  00ce1:    	lea    rsi,[rsp-0x18]
  00ce6:    	mov    QWORD PTR [rbx],rsi
  00ce9:    	lea    r14,[rsp-0x10]
  00cee:    	mov    QWORD PTR [rsp-0x20],r14
  00cf3:    	call   0xffffd9be
  00cf8:    	lea    r14,[rbp-0x8]
  00cfc:    	mov    QWORD PTR [rbx],r14
  00cff:    	mov    r14,QWORD PTR [rbp-0x10]
  00d03:    	movq   xmm3,QWORD PTR [rsp]
  00d08:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0e:    	add    rsp,0x10
  00d12: 95 	movabs r13,0x55955e17c310
  00d1c:    	test   rax,rax
  00d1f:    	je     0xffff8b66
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00d25:    	mov    rdi,QWORD PTR [r14-0x30]
  00d29:    	mov    rax,QWORD PTR [rdi+0x10]
  00d2d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00d34: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00d3f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d46: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d4d: 00 	test   rdi,0x7
  00d54:    	jne    0x39ff3
  00d5a:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d5e:    	jne    0x39ff3
  00d64: 00 	test   rsi,0x1
  00d6b:    	je     0x39ff3
  00d71:    	sar    rsi,1
  00d74:    	sub    rsp,0x10
  00d78:    	movq   QWORD PTR [rsp],xmm3
  00d7d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d83: 95 	movabs rax,0x55955d9acd00
  00d8d:    	call   rax
  00d8f:    	movq   xmm3,QWORD PTR [rsp]
  00d94:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d9a:    	add    rsp,0x10
  00d9e: 95 	movabs r13,0x55955e17c340
  00da8:    	test   rax,rax
  00dab:    	je     0xffff8b66
  00db1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00db8: ff 	mov    rax,QWORD PTR [r14-0x88]
  00dbf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00dc6: ff 	mov    rax,QWORD PTR [r14-0x90]
  00dcd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00dd4: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ddb: 00 	test   rdi,0x7
  00de2:    	jne    0x3a002
  00de8:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00dec:    	jne    0x3a002
  00df2: 26 	cmp    DWORD PTR [rip+0xffffffffffffc004],0x26        # 0xffffcdfd
  00df9:    	jne    0x3a002
  00dff:    	sub    rsp,0x10
  00e03:    	movq   QWORD PTR [rsp],xmm3
  00e08:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e0e: 00 	cmp    DWORD PTR [rip+0xffffffffffffbfec],0x0        # 0xffffce01
  00e15:    	je     0xe2d
  00e1b:    	mov    rdi,r12
  00e1e:    	mov    rsi,QWORD PTR [rbx]
  00e21: 95 	movabs rax,0x55955d9a3d50
  00e2b:    	call   rax
  00e2d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e36: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00e3d:    	mov    QWORD PTR [rsp-0x40],rax
  00e42: 00 	mov    rdi,0x2
  00e49: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00e50:    	mov    QWORD PTR [rsp-0x48],rax
  00e55: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00e5c:    	mov    QWORD PTR [rsp-0x50],rax
  00e61: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e6a: 0e 	movabs rax,0x1000e00000061
  00e74:    	mov    QWORD PTR [rsp-0x30],rax
  00e79: 95 	movabs r13,0x55955e16d0b0
  00e83:    	mov    rsi,QWORD PTR [rbx]
  00e86:    	mov    QWORD PTR [rsp-0x18],rsi
  00e8b:    	lea    rsi,[rsp-0x18]
  00e90:    	mov    QWORD PTR [rbx],rsi
  00e93:    	lea    r14,[rsp-0x10]
  00e98:    	mov    QWORD PTR [rsp-0x20],r14
  00e9d:    	call   0xffffd9be
  00ea2:    	lea    r14,[rbp-0x8]
  00ea6:    	mov    QWORD PTR [rbx],r14
  00ea9:    	mov    r14,QWORD PTR [rbp-0x10]
  00ead:    	movq   xmm3,QWORD PTR [rsp]
  00eb2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00eb8:    	add    rsp,0x10
  00ebc: 95 	movabs r13,0x55955e17c380
  00ec6:    	test   rax,rax
  00ec9:    	je     0xffff8b66
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00ecf:    	mov    rdi,QWORD PTR [r14-0x30]
  00ed3:    	mov    rax,QWORD PTR [rdi+0x18]
  00ed7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00ede: ff 	mov    rax,QWORD PTR [r14-0x88]
  00ee5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00eec: ff 	mov    rax,QWORD PTR [r14-0x90]
  00ef3: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00efa: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f01: 00 	test   rdi,0x7
  00f08:    	jne    0x3a011
  00f0e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00f12:    	jne    0x3a011
  00f18: 26 	cmp    DWORD PTR [rip+0xffffffffffffbede],0x26        # 0xffffcdfd
  00f1f:    	jne    0x3a011
  00f25:    	sub    rsp,0x10
  00f29:    	movq   QWORD PTR [rsp],xmm3
  00f2e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f34: 00 	cmp    DWORD PTR [rip+0xffffffffffffbec6],0x0        # 0xffffce01
  00f3b:    	je     0xf53
  00f41:    	mov    rdi,r12
  00f44:    	mov    rsi,QWORD PTR [rbx]
  00f47: 95 	movabs rax,0x55955d9a3d50
  00f51:    	call   rax
  00f53: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f5c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00f63:    	mov    QWORD PTR [rsp-0x40],rax
  00f68: 00 	mov    rdi,0x2
  00f6f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00f76:    	mov    QWORD PTR [rsp-0x48],rax
  00f7b: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00f82:    	mov    QWORD PTR [rsp-0x50],rax
  00f87: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f90: 0c 	movabs rax,0xc00000063
  00f9a:    	mov    QWORD PTR [rsp-0x30],rax
  00f9f: 95 	movabs r13,0x55955e173c50
  00fa9:    	mov    rsi,QWORD PTR [rbx]
  00fac:    	mov    QWORD PTR [rsp-0x18],rsi
  00fb1:    	lea    rsi,[rsp-0x18]
  00fb6:    	mov    QWORD PTR [rbx],rsi
  00fb9:    	lea    r14,[rsp-0x10]
  00fbe:    	mov    QWORD PTR [rsp-0x20],r14
  00fc3:    	call   0xffffdf8a
  00fc8:    	lea    r14,[rbp-0x8]
  00fcc:    	mov    QWORD PTR [rbx],r14
  00fcf:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd3:    	movq   xmm3,QWORD PTR [rsp]
  00fd8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fde:    	add    rsp,0x10
  00fe2: 95 	movabs r13,0x55955e17c3d0
  00fec:    	test   rax,rax
  00fef:    	je     0xffff8b66
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00ff5: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ffc: 00 	test   rdi,0x7
  01003:    	jne    0x3a020
  01009:    	cmp    DWORD PTR [rdi+0x4],0x33
  0100d:    	jne    0x3a020
  01013: 26 	cmp    DWORD PTR [rip+0xffffffffffffbde3],0x26        # 0xffffcdfd
  0101a:    	jne    0x3a020
  01020:    	mov    esi,DWORD PTR [rip+0xbb8]        # 0x1bde
  01026:    	cmp    esi,0xffffffff
  01029:    	je     0x3a02f
  0102f:    	cmp    WORD PTR [rdi+0x2],0x3
  01034:    	jne    0x104d
  0103a:    	cmp    esi,0x6
  0103d:    	jge    0x104d
  01043:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01048:    	jmp    0x1077
  0104d:    	sub    rsp,0x10
  01051:    	movq   QWORD PTR [rsp],xmm3
  01056:    	movq   QWORD PTR [rsp+0x8],xmm4
  0105c: 95 	movabs rax,0x55955d9e0e20
  01066:    	call   rax
  01068:    	movq   xmm3,QWORD PTR [rsp]
  0106d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01073:    	add    rsp,0x10
  01077: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00119
  0107e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01085:    	or     rax,0x10
  01089:    	cmp    rax,0x14
  0108d:    	je     0x1ab0
:00087 %14 = %12
  01093: ff 	mov    rax,QWORD PTR [r14-0x90]
  0109a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  010a1: 00 	cmp    DWORD PTR [rip+0xb3a],0x0        # 0x1be2
  010a8:    	jl     0x3a076
  010ae:    	je     0x3a085
  010b4: 01 	sub    DWORD PTR [rip+0xb27],0x1        # 0x1be2
  010bb:    	xor    rdi,rdi
  010be:    	jmp    0x3a076
  010c3:    	sub    rsp,0x10
  010c7:    	movq   QWORD PTR [rsp],xmm3
  010cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  010d2:    	mov    r15d,0x35
  010d8: 95 	movabs r13,0x55955e17c420
  010e2:    	cmp    QWORD PTR [r13+0x8],0x0
  010e7:    	je     0x3a0a1
  010ed:    	cmp    r15d,DWORD PTR [r13-0x8]
  010f1:    	jne    0x3a0a1
  010f7:    	mov    eax,DWORD PTR [rip+0xffffffffffffbd00]        # 0xffffcdfd
  010fd:    	cmp    DWORD PTR [r13-0x4],eax
  01101:    	jne    0x3a0a1
  01107: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01110:    	mov    rax,QWORD PTR [r14-0x30]
  01114:    	mov    QWORD PTR [rsp-0x40],rax
  01119: 00 	mov    rdi,0x1
  01120: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01127:    	mov    QWORD PTR [rsp-0x48],rax
  0112c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01135:    	mov    r13,QWORD PTR [r13+0x8]
  01139:    	mov    rax,QWORD PTR [r13+0x8]
  0113d:    	mov    QWORD PTR [rsp-0x30],rax
  01142:    	mov    rax,QWORD PTR [r13+0x0]
  01146:    	mov    r13,QWORD PTR [r13+0x10]
  0114a:    	mov    rsi,QWORD PTR [rbx]
  0114d:    	mov    QWORD PTR [rsp-0x18],rsi
  01152:    	lea    rsi,[rsp-0x18]
  01157:    	mov    QWORD PTR [rbx],rsi
  0115a:    	lea    r14,[rsp-0x10]
  0115f:    	mov    QWORD PTR [rsp-0x20],r14
  01164:    	call   rax
  01166:    	lea    r14,[rbp-0x8]
  0116a:    	mov    QWORD PTR [rbx],r14
  0116d:    	mov    r14,QWORD PTR [rbp-0x10]
  01171:    	movq   xmm3,QWORD PTR [rsp]
  01176:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0117c:    	add    rsp,0x10
  01180:    	test   rax,rax
  01183:    	je     0x3a0e2
  01189: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  01190:    	mov    rax,QWORD PTR [r14-0x18]
  01194:    	mov    rax,QWORD PTR [rax]
  01197:    	mov    rax,QWORD PTR [rax-0x28]
  0119b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  011a2:    	mov    rax,QWORD PTR [r14-0x18]
  011a6:    	mov    rax,QWORD PTR [rax]
  011a9:    	mov    rax,QWORD PTR [rax-0x28]
  011ad: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [<INVALID>]
  011b4:    	sub    rsp,0x10
  011b8:    	movq   QWORD PTR [rsp],xmm3
  011bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  011ca: 95 	movabs rax,0x55955d949d50
  011d4:    	call   rax
  011d6:    	mov    r15d,eax
  011d9: 95 	movabs r13,0x55955e17c460
  011e3:    	cmp    QWORD PTR [r13+0x8],0x0
  011e8:    	je     0x3a0f1
  011ee:    	cmp    r15d,DWORD PTR [r13-0x8]
  011f2:    	jne    0x3a0f1
  011f8:    	mov    eax,DWORD PTR [rip+0xffffffffffffbbff]        # 0xffffcdfd
  011fe:    	cmp    DWORD PTR [r13-0x4],eax
  01202:    	jne    0x3a0f1
  01208: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01211: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01218:    	mov    QWORD PTR [rsp-0x40],rax
  0121d: 00 	mov    rdi,0x0
  01224: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0122d:    	mov    r13,QWORD PTR [r13+0x8]
  01231:    	mov    rax,QWORD PTR [r13+0x8]
  01235:    	mov    QWORD PTR [rsp-0x30],rax
  0123a:    	mov    rax,QWORD PTR [r13+0x0]
  0123e:    	mov    r13,QWORD PTR [r13+0x10]
  01242:    	mov    rsi,QWORD PTR [rbx]
  01245:    	mov    QWORD PTR [rsp-0x18],rsi
  0124a:    	lea    rsi,[rsp-0x18]
  0124f:    	mov    QWORD PTR [rbx],rsi
  01252:    	lea    r14,[rsp-0x10]
  01257:    	mov    QWORD PTR [rsp-0x20],r14
  0125c:    	call   rax
  0125e:    	lea    r14,[rbp-0x8]
  01262:    	mov    QWORD PTR [rbx],r14
  01265:    	mov    r14,QWORD PTR [rbp-0x10]
  01269:    	movq   xmm3,QWORD PTR [rsp]
  0126e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01274:    	add    rsp,0x10
  01278:    	test   rax,rax
  0127b:    	je     0x3a135
  01281: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [<INVALID>]
  01288:    	sub    rsp,0x10
  0128c:    	movq   QWORD PTR [rsp],xmm3
  01291:    	movq   QWORD PTR [rsp+0x8],xmm4
  01297: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0129e: 95 	movabs rax,0x55955d949d50
  012a8:    	call   rax
  012aa:    	mov    r15d,eax
  012ad: 95 	movabs r13,0x55955e17c480
  012b7:    	cmp    QWORD PTR [r13+0x8],0x0
  012bc:    	je     0x3a144
  012c2:    	cmp    r15d,DWORD PTR [r13-0x8]
  012c6:    	jne    0x3a144
  012cc:    	mov    eax,DWORD PTR [rip+0xffffffffffffbb2b]        # 0xffffcdfd
  012d2:    	cmp    DWORD PTR [r13-0x4],eax
  012d6:    	jne    0x3a144
  012dc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  012e5: ff 	mov    rax,QWORD PTR [r14-0x98]
  012ec:    	mov    QWORD PTR [rsp-0x40],rax
  012f1: 00 	mov    rdi,0x0
  012f8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01301:    	mov    r13,QWORD PTR [r13+0x8]
  01305:    	mov    rax,QWORD PTR [r13+0x8]
  01309:    	mov    QWORD PTR [rsp-0x30],rax
  0130e:    	mov    rax,QWORD PTR [r13+0x0]
  01312:    	mov    r13,QWORD PTR [r13+0x10]
  01316:    	mov    rsi,QWORD PTR [rbx]
  01319:    	mov    QWORD PTR [rsp-0x18],rsi
  0131e:    	lea    rsi,[rsp-0x18]
  01323:    	mov    QWORD PTR [rbx],rsi
  01326:    	lea    r14,[rsp-0x10]
  0132b:    	mov    QWORD PTR [rsp-0x20],r14
  01330:    	call   rax
  01332:    	lea    r14,[rbp-0x8]
  01336:    	mov    QWORD PTR [rbx],r14
  01339:    	mov    r14,QWORD PTR [rbp-0x10]
  0133d:    	movq   xmm3,QWORD PTR [rsp]
  01342:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01348:    	add    rsp,0x10
  0134c:    	test   rax,rax
  0134f:    	je     0x3a188
  01355: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0135c: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01363: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0136a:    	sub    rsp,0x10
  0136e:    	movq   QWORD PTR [rsp],xmm3
  01373:    	movq   QWORD PTR [rsp+0x8],xmm4
  01379:    	mov    rdx,rdi
  0137c:    	mov    rcx,rsi
  0137f:    	mov    rdi,rbx
  01382:    	mov    rsi,r12
  01385: 95 	movabs rax,0x55955d95ac30
  0138f:    	call   rax
  01391:    	movq   xmm3,QWORD PTR [rsp]
  01396:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0139c:    	add    rsp,0x10
  013a0: 95 	movabs r13,0x55955e17c4a0
  013aa:    	test   rax,rax
  013ad:    	je     0xffff8b66
  013b3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 _ = %14.call x=(%15; 1)              [<INVALID>]
  013ba:    	sub    rsp,0x10
  013be:    	movq   QWORD PTR [rsp],xmm3
  013c3:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  013d0: 95 	movabs rax,0x55955d949d50
  013da:    	call   rax
  013dc:    	mov    r15d,eax
  013df: 95 	movabs r13,0x55955e17c4b0
  013e9:    	cmp    QWORD PTR [r13+0x8],0x0
  013ee:    	je     0x3a197
  013f4:    	cmp    r15d,DWORD PTR [r13-0x8]
  013f8:    	jne    0x3a197
  013fe:    	mov    eax,DWORD PTR [rip+0xffffffffffffb9f9]        # 0xffffcdfd
  01404:    	cmp    DWORD PTR [r13-0x4],eax
  01408:    	jne    0x3a197
  0140e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01417: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0141e:    	mov    QWORD PTR [rsp-0x40],rax
  01423: 00 	mov    rdi,0x1
  0142a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01431:    	mov    QWORD PTR [rsp-0x48],rax
  01436: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0143f:    	mov    r13,QWORD PTR [r13+0x8]
  01443:    	mov    rax,QWORD PTR [r13+0x8]
  01447:    	mov    QWORD PTR [rsp-0x30],rax
  0144c:    	mov    rax,QWORD PTR [r13+0x0]
  01450:    	mov    r13,QWORD PTR [r13+0x10]
  01454:    	mov    rsi,QWORD PTR [rbx]
  01457:    	mov    QWORD PTR [rsp-0x18],rsi
  0145c:    	lea    rsi,[rsp-0x18]
  01461:    	mov    QWORD PTR [rbx],rsi
  01464:    	lea    r14,[rsp-0x10]
  01469:    	mov    QWORD PTR [rsp-0x20],r14
  0146e:    	call   rax
  01470:    	lea    r14,[rbp-0x8]
  01474:    	mov    QWORD PTR [rbx],r14
  01477:    	mov    r14,QWORD PTR [rbp-0x10]
  0147b:    	movq   xmm3,QWORD PTR [rsp]
  01480:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01486:    	add    rsp,0x10
  0148a:    	test   rax,rax
  0148d:    	je     0x3a1db
:00098 
:00099 %14 = dynvar(2, %2)
  01493:    	mov    rax,QWORD PTR [r14-0x18]
  01497:    	mov    rax,QWORD PTR [rax]
  0149a:    	mov    rax,QWORD PTR [rax-0x28]
  0149e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  014a5:    	mov    rax,QWORD PTR [r14-0x18]
  014a9:    	mov    rax,QWORD PTR [rax]
  014ac:    	mov    rax,QWORD PTR [rax-0x28]
  014b0: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [<INVALID>]
  014b7:    	sub    rsp,0x10
  014bb:    	movq   QWORD PTR [rsp],xmm3
  014c0:    	movq   QWORD PTR [rsp+0x8],xmm4
  014c6: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  014cd: 95 	movabs rax,0x55955d949d50
  014d7:    	call   rax
  014d9:    	mov    r15d,eax
  014dc: 95 	movabs r13,0x55955e17c4f0
  014e6:    	cmp    QWORD PTR [r13+0x8],0x0
  014eb:    	je     0x3a1ea
  014f1:    	cmp    r15d,DWORD PTR [r13-0x8]
  014f5:    	jne    0x3a1ea
  014fb:    	mov    eax,DWORD PTR [rip+0xffffffffffffb8fc]        # 0xffffcdfd
  01501:    	cmp    DWORD PTR [r13-0x4],eax
  01505:    	jne    0x3a1ea
  0150b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01514: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0151b:    	mov    QWORD PTR [rsp-0x40],rax
  01520: 00 	mov    rdi,0x0
  01527: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01530:    	mov    r13,QWORD PTR [r13+0x8]
  01534:    	mov    rax,QWORD PTR [r13+0x8]
  01538:    	mov    QWORD PTR [rsp-0x30],rax
  0153d:    	mov    rax,QWORD PTR [r13+0x0]
  01541:    	mov    r13,QWORD PTR [r13+0x10]
  01545:    	mov    rsi,QWORD PTR [rbx]
  01548:    	mov    QWORD PTR [rsp-0x18],rsi
  0154d:    	lea    rsi,[rsp-0x18]
  01552:    	mov    QWORD PTR [rbx],rsi
  01555:    	lea    r14,[rsp-0x10]
  0155a:    	mov    QWORD PTR [rsp-0x20],r14
  0155f:    	call   rax
  01561:    	lea    r14,[rbp-0x8]
  01565:    	mov    QWORD PTR [rbx],r14
  01568:    	mov    r14,QWORD PTR [rbp-0x10]
  0156c:    	movq   xmm3,QWORD PTR [rsp]
  01571:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01577:    	add    rsp,0x10
  0157b:    	test   rax,rax
  0157e:    	je     0x3a22e
  01584: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [<INVALID>]
  0158b:    	sub    rsp,0x10
  0158f:    	movq   QWORD PTR [rsp],xmm3
  01594:    	movq   QWORD PTR [rsp+0x8],xmm4
  0159a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  015a1: 95 	movabs rax,0x55955d949d50
  015ab:    	call   rax
  015ad:    	mov    r15d,eax
  015b0: 95 	movabs r13,0x55955e17c510
  015ba:    	cmp    QWORD PTR [r13+0x8],0x0
  015bf:    	je     0x3a23d
  015c5:    	cmp    r15d,DWORD PTR [r13-0x8]
  015c9:    	jne    0x3a23d
  015cf:    	mov    eax,DWORD PTR [rip+0xffffffffffffb828]        # 0xffffcdfd
  015d5:    	cmp    DWORD PTR [r13-0x4],eax
  015d9:    	jne    0x3a23d
  015df: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015e8: ff 	mov    rax,QWORD PTR [r14-0x98]
  015ef:    	mov    QWORD PTR [rsp-0x40],rax
  015f4: 00 	mov    rdi,0x0
  015fb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01604:    	mov    r13,QWORD PTR [r13+0x8]
  01608:    	mov    rax,QWORD PTR [r13+0x8]
  0160c:    	mov    QWORD PTR [rsp-0x30],rax
  01611:    	mov    rax,QWORD PTR [r13+0x0]
  01615:    	mov    r13,QWORD PTR [r13+0x10]
  01619:    	mov    rsi,QWORD PTR [rbx]
  0161c:    	mov    QWORD PTR [rsp-0x18],rsi
  01621:    	lea    rsi,[rsp-0x18]
  01626:    	mov    QWORD PTR [rbx],rsi
  01629:    	lea    r14,[rsp-0x10]
  0162e:    	mov    QWORD PTR [rsp-0x20],r14
  01633:    	call   rax
  01635:    	lea    r14,[rbp-0x8]
  01639:    	mov    QWORD PTR [rbx],r14
  0163c:    	mov    r14,QWORD PTR [rbp-0x10]
  01640:    	movq   xmm3,QWORD PTR [rsp]
  01645:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0164b:    	add    rsp,0x10
  0164f:    	test   rax,rax
  01652:    	je     0x3a281
  01658: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0165f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01666: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0166d:    	sub    rsp,0x10
  01671:    	movq   QWORD PTR [rsp],xmm3
  01676:    	movq   QWORD PTR [rsp+0x8],xmm4
  0167c:    	mov    rdx,rdi
  0167f:    	mov    rcx,rsi
  01682:    	mov    rdi,rbx
  01685:    	mov    rsi,r12
  01688: 95 	movabs rax,0x55955d95ac30
  01692:    	call   rax
  01694:    	movq   xmm3,QWORD PTR [rsp]
  01699:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169f:    	add    rsp,0x10
  016a3: 95 	movabs r13,0x55955e17c530
  016ad:    	test   rax,rax
  016b0:    	je     0xffff8b66
  016b6: ff 	mov    QWORD PTR [r14-0xa8],rax
:00106 _ = %14.call y=(%15; 1)              [<INVALID>]
  016bd:    	sub    rsp,0x10
  016c1:    	movq   QWORD PTR [rsp],xmm3
  016c6:    	movq   QWORD PTR [rsp+0x8],xmm4
  016cc: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  016d3: 95 	movabs rax,0x55955d949d50
  016dd:    	call   rax
  016df:    	mov    r15d,eax
  016e2: 95 	movabs r13,0x55955e17c540
  016ec:    	cmp    QWORD PTR [r13+0x8],0x0
  016f1:    	je     0x3a290
  016f7:    	cmp    r15d,DWORD PTR [r13-0x8]
  016fb:    	jne    0x3a290
  01701:    	mov    eax,DWORD PTR [rip+0xffffffffffffb6f6]        # 0xffffcdfd
  01707:    	cmp    DWORD PTR [r13-0x4],eax
  0170b:    	jne    0x3a290
  01711: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0171a: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01721:    	mov    QWORD PTR [rsp-0x40],rax
  01726: 00 	mov    rdi,0x1
  0172d: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01734:    	mov    QWORD PTR [rsp-0x48],rax
  01739: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01742:    	mov    r13,QWORD PTR [r13+0x8]
  01746:    	mov    rax,QWORD PTR [r13+0x8]
  0174a:    	mov    QWORD PTR [rsp-0x30],rax
  0174f:    	mov    rax,QWORD PTR [r13+0x0]
  01753:    	mov    r13,QWORD PTR [r13+0x10]
  01757:    	mov    rsi,QWORD PTR [rbx]
  0175a:    	mov    QWORD PTR [rsp-0x18],rsi
  0175f:    	lea    rsi,[rsp-0x18]
  01764:    	mov    QWORD PTR [rbx],rsi
  01767:    	lea    r14,[rsp-0x10]
  0176c:    	mov    QWORD PTR [rsp-0x20],r14
  01771:    	call   rax
  01773:    	lea    r14,[rbp-0x8]
  01777:    	mov    QWORD PTR [rbx],r14
  0177a:    	mov    r14,QWORD PTR [rbp-0x10]
  0177e:    	movq   xmm3,QWORD PTR [rsp]
  01783:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01789:    	add    rsp,0x10
  0178d:    	test   rax,rax
  01790:    	je     0x3a2d4
:00107 
:00108 %14 = dynvar(2, %2)
  01796:    	mov    rax,QWORD PTR [r14-0x18]
  0179a:    	mov    rax,QWORD PTR [rax]
  0179d:    	mov    rax,QWORD PTR [rax-0x28]
  017a1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  017a8:    	mov    rax,QWORD PTR [r14-0x18]
  017ac:    	mov    rax,QWORD PTR [rax]
  017af:    	mov    rax,QWORD PTR [rax-0x28]
  017b3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [<INVALID>]
  017ba:    	sub    rsp,0x10
  017be:    	movq   QWORD PTR [rsp],xmm3
  017c3:    	movq   QWORD PTR [rsp+0x8],xmm4
  017c9: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  017d0: 95 	movabs rax,0x55955d949d50
  017da:    	call   rax
  017dc:    	mov    r15d,eax
  017df: 95 	movabs r13,0x55955e17c580
  017e9:    	cmp    QWORD PTR [r13+0x8],0x0
  017ee:    	je     0x3a2e3
  017f4:    	cmp    r15d,DWORD PTR [r13-0x8]
  017f8:    	jne    0x3a2e3
  017fe:    	mov    eax,DWORD PTR [rip+0xffffffffffffb5f9]        # 0xffffcdfd
  01804:    	cmp    DWORD PTR [r13-0x4],eax
  01808:    	jne    0x3a2e3
  0180e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01817: ff 	mov    rax,QWORD PTR [r14-0xa8]
  0181e:    	mov    QWORD PTR [rsp-0x40],rax
  01823: 00 	mov    rdi,0x0
  0182a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01833:    	mov    r13,QWORD PTR [r13+0x8]
  01837:    	mov    rax,QWORD PTR [r13+0x8]
  0183b:    	mov    QWORD PTR [rsp-0x30],rax
  01840:    	mov    rax,QWORD PTR [r13+0x0]
  01844:    	mov    r13,QWORD PTR [r13+0x10]
  01848:    	mov    rsi,QWORD PTR [rbx]
  0184b:    	mov    QWORD PTR [rsp-0x18],rsi
  01850:    	lea    rsi,[rsp-0x18]
  01855:    	mov    QWORD PTR [rbx],rsi
  01858:    	lea    r14,[rsp-0x10]
  0185d:    	mov    QWORD PTR [rsp-0x20],r14
  01862:    	call   rax
  01864:    	lea    r14,[rbp-0x8]
  01868:    	mov    QWORD PTR [rbx],r14
  0186b:    	mov    r14,QWORD PTR [rbp-0x10]
  0186f:    	movq   xmm3,QWORD PTR [rsp]
  01874:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0187a:    	add    rsp,0x10
  0187e:    	test   rax,rax
  01881:    	je     0x3a327
  01887: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [<INVALID>]
  0188e:    	sub    rsp,0x10
  01892:    	movq   QWORD PTR [rsp],xmm3
  01897:    	movq   QWORD PTR [rsp+0x8],xmm4
  0189d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018a4: 95 	movabs rax,0x55955d949d50
  018ae:    	call   rax
  018b0:    	mov    r15d,eax
  018b3: 95 	movabs r13,0x55955e17c5a0
  018bd:    	cmp    QWORD PTR [r13+0x8],0x0
  018c2:    	je     0x3a336
  018c8:    	cmp    r15d,DWORD PTR [r13-0x8]
  018cc:    	jne    0x3a336
  018d2:    	mov    eax,DWORD PTR [rip+0xffffffffffffb525]        # 0xffffcdfd
  018d8:    	cmp    DWORD PTR [r13-0x4],eax
  018dc:    	jne    0x3a336
  018e2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018eb: ff 	mov    rax,QWORD PTR [r14-0x98]
  018f2:    	mov    QWORD PTR [rsp-0x40],rax
  018f7: 00 	mov    rdi,0x0
  018fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01907:    	mov    r13,QWORD PTR [r13+0x8]
  0190b:    	mov    rax,QWORD PTR [r13+0x8]
  0190f:    	mov    QWORD PTR [rsp-0x30],rax
  01914:    	mov    rax,QWORD PTR [r13+0x0]
  01918:    	mov    r13,QWORD PTR [r13+0x10]
  0191c:    	mov    rsi,QWORD PTR [rbx]
  0191f:    	mov    QWORD PTR [rsp-0x18],rsi
  01924:    	lea    rsi,[rsp-0x18]
  01929:    	mov    QWORD PTR [rbx],rsi
  0192c:    	lea    r14,[rsp-0x10]
  01931:    	mov    QWORD PTR [rsp-0x20],r14
  01936:    	call   rax
  01938:    	lea    r14,[rbp-0x8]
  0193c:    	mov    QWORD PTR [rbx],r14
  0193f:    	mov    r14,QWORD PTR [rbp-0x10]
  01943:    	movq   xmm3,QWORD PTR [rsp]
  01948:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0194e:    	add    rsp,0x10
  01952:    	test   rax,rax
  01955:    	je     0x3a37a
  0195b: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01962: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01969: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01970:    	sub    rsp,0x10
  01974:    	movq   QWORD PTR [rsp],xmm3
  01979:    	movq   QWORD PTR [rsp+0x8],xmm4
  0197f:    	mov    rdx,rdi
  01982:    	mov    rcx,rsi
  01985:    	mov    rdi,rbx
  01988:    	mov    rsi,r12
  0198b: 95 	movabs rax,0x55955d95ac30
  01995:    	call   rax
  01997:    	movq   xmm3,QWORD PTR [rsp]
  0199c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019a2:    	add    rsp,0x10
  019a6: 95 	movabs r13,0x55955e17c5c0
  019b0:    	test   rax,rax
  019b3:    	je     0xffff8b66
  019b9: ff 	mov    QWORD PTR [r14-0xa8],rax
:00115 _ = %14.call z=(%15; 1)              [<INVALID>]
  019c0:    	sub    rsp,0x10
  019c4:    	movq   QWORD PTR [rsp],xmm3
  019c9:    	movq   QWORD PTR [rsp+0x8],xmm4
  019cf: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  019d6: 95 	movabs rax,0x55955d949d50
  019e0:    	call   rax
  019e2:    	mov    r15d,eax
  019e5: 95 	movabs r13,0x55955e17c5d0
  019ef:    	cmp    QWORD PTR [r13+0x8],0x0
  019f4:    	je     0x3a389
  019fa:    	cmp    r15d,DWORD PTR [r13-0x8]
  019fe:    	jne    0x3a389
  01a04:    	mov    eax,DWORD PTR [rip+0xffffffffffffb3f3]        # 0xffffcdfd
  01a0a:    	cmp    DWORD PTR [r13-0x4],eax
  01a0e:    	jne    0x3a389
  01a14: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a1d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a24:    	mov    QWORD PTR [rsp-0x40],rax
  01a29: 00 	mov    rdi,0x1
  01a30: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a37:    	mov    QWORD PTR [rsp-0x48],rax
  01a3c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a45:    	mov    r13,QWORD PTR [r13+0x8]
  01a49:    	mov    rax,QWORD PTR [r13+0x8]
  01a4d:    	mov    QWORD PTR [rsp-0x30],rax
  01a52:    	mov    rax,QWORD PTR [r13+0x0]
  01a56:    	mov    r13,QWORD PTR [r13+0x10]
  01a5a:    	mov    rsi,QWORD PTR [rbx]
  01a5d:    	mov    QWORD PTR [rsp-0x18],rsi
  01a62:    	lea    rsi,[rsp-0x18]
  01a67:    	mov    QWORD PTR [rbx],rsi
  01a6a:    	lea    r14,[rsp-0x10]
  01a6f:    	mov    QWORD PTR [rsp-0x20],r14
  01a74:    	call   rax
  01a76:    	lea    r14,[rbp-0x8]
  01a7a:    	mov    QWORD PTR [rbx],r14
  01a7d:    	mov    r14,QWORD PTR [rbp-0x10]
  01a81:    	movq   xmm3,QWORD PTR [rsp]
  01a86:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a8c:    	add    rsp,0x10
  01a90:    	test   rax,rax
  01a93:    	je     0x3a3cd
:00116 
:00117 %14 = %15
  01a99: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01aa0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00118 ret %14
  01aa7: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01aae:    	leave  
  01aaf:    	ret    
:00119 %14 = nil
  01ab0: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00120 ret %14
  01abb: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01ac2:    	leave  
  01ac3:    	ret    
==> start whole compile: vnormalize FuncId(95) self_class:Vec start:[00000] bytecode:0x55955e168310
<== finished compile. elapsed:51.7µs
offset:Pos(37028) code: 2044 bytes  data: 88 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x0
  0000e: jne    0x387f6
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    QWORD PTR [r14-0x60],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x38805
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x38805
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:7
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x30]
  00052: cmp    DWORD PTR [rip+0xffffffffffffb1be],0x26        # 0xffffb217
  00059: jne    0x38814
  0005f: cmp    DWORD PTR [rip+0xffffffffffffb1b5],0x0        # 0xffffb21b
  00066: je     0x7e
  0006c: mov    rdi,r12
  0006f: mov    rsi,QWORD PTR [rbx]
  00072: movabs rax,0x55955d9a3d50
  0007c: call   rax
  0007e: mov    QWORD PTR [rsp-0x28],0x0
  00087: mov    rax,QWORD PTR [r14-0x30]
  0008b: mov    QWORD PTR [rsp-0x40],rax
  00090: mov    rdi,0x0
  00097: mov    QWORD PTR [rsp-0x38],0x0
  000a0: movabs rax,0x50000005e
  000aa: mov    QWORD PTR [rsp-0x30],rax
  000af: movabs r13,0x55955e1b2df0
  000b9: mov    rsi,QWORD PTR [rbx]
  000bc: mov    QWORD PTR [rsp-0x18],rsi
  000c1: lea    rsi,[rsp-0x18]
  000c6: mov    QWORD PTR [rbx],rsi
  000c9: lea    r14,[rsp-0x10]
  000ce: mov    QWORD PTR [rsp-0x20],r14
  000d3: call   0xffffbb33
  000d8: lea    r14,[rbp-0x8]
  000dc: mov    QWORD PTR [rbx],r14
  000df: mov    r14,QWORD PTR [rbp-0x10]
  000e3: movabs r13,0x55955e168340
  000ed: test   rax,rax
  000f0: je     0xffff6f80
  000f6: mov    QWORD PTR [r14-0x48],rax
:00002 
:00003 %1 = %3
  000fa: mov    rax,QWORD PTR [r14-0x48]
  000fe: mov    QWORD PTR [r14-0x38],rax
:00004 %3 = const[Vec]                      [Vec]
  00102: mov    rax,QWORD PTR [rip+0xffffffffffffb123]        # 0xffffb22c
  00109: cmp    rax,QWORD PTR [rip+0x6fc]        # 0x80c
  00110: jne    0x38823
  00116: mov    rax,QWORD PTR [rip+0x6df]        # 0x7fc
  0011d: mov    QWORD PTR [r14-0x48],rax
:00005 %4 = @x: Vec[IvarId(0)]
  00121: mov    rdi,QWORD PTR [r14-0x30]
  00125: mov    rax,QWORD PTR [rdi+0x10]
  00129: mov    QWORD PTR [r14-0x50],rax
:00006 %5 = @y: Vec[IvarId(1)]
  0012d: mov    rdi,QWORD PTR [r14-0x30]
  00131: mov    rax,QWORD PTR [rdi+0x18]
  00135: mov    QWORD PTR [r14-0x58],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00139: mov    rdi,QWORD PTR [r14-0x30]
  0013d: mov    rax,QWORD PTR [rdi+0x20]
  00141: mov    QWORD PTR [r14-0x60],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00145: mov    rdi,QWORD PTR [r14-0x48]
  00149: test   rdi,0x7
  00150: jne    0x38869
  00156: cmp    DWORD PTR [rdi+0x4],0x2c
  0015a: jne    0x38869
  00160: cmp    DWORD PTR [rip+0xffffffffffffb0b0],0x26        # 0xffffb217
  00167: jne    0x38869
  0016d: mov    r9,0x0
  00174: mov    rdx,rdi
  00177: mov    QWORD PTR [rsp-0x40],rcx
  0017c: mov    QWORD PTR [rsp-0x28],0x0
  00185: lea    rcx,[r14-0x50]
  00189: mov    r8,0x3
  00190: mov    rsi,QWORD PTR [rbx]
  00193: mov    QWORD PTR [rsp-0x18],rsi
  00198: lea    rsi,[rsp-0x18]
  0019d: mov    QWORD PTR [rbx],rsi
  001a0: lea    r14,[rsp-0x10]
  001a5: mov    QWORD PTR [rsp-0x20],r14
  001aa: call   0x38878
  001af: lea    r14,[rbp-0x8]
  001b3: mov    QWORD PTR [rbx],r14
  001b6: mov    r14,QWORD PTR [rbp-0x10]
  001ba: movabs r13,0x55955e1683b0
  001c4: test   rax,rax
  001c7: je     0xffff6f80
  001cd: mov    QWORD PTR [r14-0x40],rax
:00009 
:00010 %3 = literal[1e-17]
  001d1: movq   xmm2,QWORD PTR [rip+0x643]        # 0x81c
  001d9: movabs rax,0xe33877aa3236a4ba
  001e3: mov    QWORD PTR [r14-0x48],rax
:00011 _%3 = %1 > %3                        [Float][Float]
:00012 condnotbr _%3 =>:00029
  001e7: mov    rdi,QWORD PTR [r14-0x38]
  001eb: test   rdi,0x1
  001f2: jne    0x388aa
  001f8: test   rdi,0x2
  001ff: je     0x23b
  00205: xorps  xmm3,xmm3
  00208: movabs rax,0x8000000000000002
  00212: cmp    rdi,rax
  00215: je     0x24d
  0021b: mov    rax,rdi
  0021e: sar    rax,0x3f
  00222: add    rax,0x2
  00226: and    rdi,0xfffffffffffffffc
  0022a: or     rdi,rax
  0022d: rol    rdi,0x3d
  00231: movq   xmm3,rdi
  00236: jmp    0x24d
  0023b: call   0xffff6fd9
  00240: test   rax,rax
  00243: je     0x388aa
  00249: movq   xmm3,xmm0
  0024d: ucomisd xmm3,xmm2
  00251: jbe    0x38aae
:00013 %3 = %2.call x()                     [Vec]
  00257: mov    rdi,QWORD PTR [r14-0x40]
  0025b: test   rdi,0x7
  00262: jne    0x388b9
  00268: cmp    DWORD PTR [rdi+0x4],0x2b
  0026c: jne    0x388b9
  00272: cmp    DWORD PTR [rip+0xffffffffffffaf9e],0x26        # 0xffffb217
  00279: jne    0x388b9
  0027f: mov    esi,DWORD PTR [rip+0x5a3]        # 0x828
  00285: cmp    esi,0xffffffff
  00288: je     0x388c8
  0028e: cmp    WORD PTR [rdi+0x2],0x3
  00293: jne    0x2ac
  00299: cmp    esi,0x6
  0029c: jge    0x2ac
  002a2: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002a7: jmp    0x2b8
  002ac: movabs rax,0x55955d9e0e20
  002b6: call   rax
  002b8: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 %3 = %3 / %1                         [Float][Float]
  002bc: mov    rdi,QWORD PTR [r14-0x48]
  002c0: test   rdi,0x1
  002c7: jne    0x388f1
  002cd: test   rdi,0x2
  002d4: je     0x310
  002da: xorps  xmm2,xmm2
  002dd: movabs rax,0x8000000000000002
  002e7: cmp    rdi,rax
  002ea: je     0x322
  002f0: mov    rax,rdi
  002f3: sar    rax,0x3f
  002f7: add    rax,0x2
  002fb: and    rdi,0xfffffffffffffffc
  002ff: or     rdi,rax
  00302: rol    rdi,0x3d
  00306: movq   xmm2,rdi
  0030b: jmp    0x322
  00310: call   0xffff6fd9
  00315: test   rax,rax
  00318: je     0x388f1
  0031e: movq   xmm2,xmm0
  00322: mov    rdi,QWORD PTR [r14-0x38]
  00326: test   rdi,0x1
  0032d: jne    0x38900
  00333: test   rdi,0x2
  0033a: je     0x376
  00340: xorps  xmm3,xmm3
  00343: movabs rax,0x8000000000000002
  0034d: cmp    rdi,rax
  00350: je     0x388
  00356: mov    rax,rdi
  00359: sar    rax,0x3f
  0035d: add    rax,0x2
  00361: and    rdi,0xfffffffffffffffc
  00365: or     rdi,rax
  00368: rol    rdi,0x3d
  0036c: movq   xmm3,rdi
  00371: jmp    0x388
  00376: call   0xffff6fd9
  0037b: test   rax,rax
  0037e: je     0x38900
  00384: movq   xmm3,xmm0
  00388: movq   rax,xmm3
  0038d: test   rax,rax
  00390: je     0xffff6fa5
  00396: divsd  xmm2,xmm3
:00016 _ = %2.call x=(%3; 1)                [Vec]
  0039a: movq   xmm0,xmm2
  0039e: call   0xffff70fd
  003a3: mov    QWORD PTR [r14-0x48],rax
  003a7: mov    rdi,QWORD PTR [r14-0x40]
  003ab: test   rdi,0x7
  003b2: jne    0x3890f
  003b8: cmp    DWORD PTR [rdi+0x4],0x2b
  003bc: jne    0x3890f
  003c2: cmp    DWORD PTR [rip+0xffffffffffffae4e],0x26        # 0xffffb217
  003c9: jne    0x3890f
  003cf: mov    esi,DWORD PTR [rip+0x45b]        # 0x830
  003d5: cmp    esi,0xffffffff
  003d8: je     0x3891e
  003de: cmp    WORD PTR [rdi+0x2],0x3
  003e3: jne    0x400
  003e9: cmp    esi,0x6
  003ec: jge    0x400
  003f2: mov    rax,QWORD PTR [r14-0x48]
  003f6: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  003fb: jmp    0x435
  00400: sub    rsp,0x10
  00404: movq   QWORD PTR [rsp],xmm2
  00409: mov    rdx,QWORD PTR [r14-0x48]
  0040d: movabs rax,0x55955d9e10a0
  00417: call   rax
  00419: movq   xmm2,QWORD PTR [rsp]
  0041e: add    rsp,0x10
  00422: movabs r13,0x55955e168430
  0042c: test   rax,rax
  0042f: je     0xffff6f80
:00017 
:00018 %3 = %2.call y()                     [Vec]
  00435: mov    rdi,QWORD PTR [r14-0x40]
  00439: test   rdi,0x7
  00440: jne    0x38960
  00446: cmp    DWORD PTR [rdi+0x4],0x2b
  0044a: jne    0x38960
  00450: cmp    DWORD PTR [rip+0xffffffffffffadc0],0x26        # 0xffffb217
  00457: jne    0x38960
  0045d: mov    esi,DWORD PTR [rip+0x3d5]        # 0x838
  00463: cmp    esi,0xffffffff
  00466: je     0x3896f
  0046c: cmp    WORD PTR [rdi+0x2],0x3
  00471: jne    0x48a
  00477: cmp    esi,0x6
  0047a: jge    0x48a
  00480: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00485: jmp    0x496
  0048a: movabs rax,0x55955d9e0e20
  00494: call   rax
  00496: mov    QWORD PTR [r14-0x48],rax
:00019 
:00020 %3 = %3 / %1                         [Float][Float]
  0049a: mov    rdi,QWORD PTR [r14-0x48]
  0049e: test   rdi,0x1
  004a5: jne    0x38998
  004ab: test   rdi,0x2
  004b2: je     0x4ee
  004b8: xorps  xmm2,xmm2
  004bb: movabs rax,0x8000000000000002
  004c5: cmp    rdi,rax
  004c8: je     0x500
  004ce: mov    rax,rdi
  004d1: sar    rax,0x3f
  004d5: add    rax,0x2
  004d9: and    rdi,0xfffffffffffffffc
  004dd: or     rdi,rax
  004e0: rol    rdi,0x3d
  004e4: movq   xmm2,rdi
  004e9: jmp    0x500
  004ee: call   0xffff6fd9
  004f3: test   rax,rax
  004f6: je     0x38998
  004fc: movq   xmm2,xmm0
  00500: mov    rdi,QWORD PTR [r14-0x38]
  00504: test   rdi,0x1
  0050b: jne    0x389a7
  00511: test   rdi,0x2
  00518: je     0x554
  0051e: xorps  xmm3,xmm3
  00521: movabs rax,0x8000000000000002
  0052b: cmp    rdi,rax
  0052e: je     0x566
  00534: mov    rax,rdi
  00537: sar    rax,0x3f
  0053b: add    rax,0x2
  0053f: and    rdi,0xfffffffffffffffc
  00543: or     rdi,rax
  00546: rol    rdi,0x3d
  0054a: movq   xmm3,rdi
  0054f: jmp    0x566
  00554: call   0xffff6fd9
  00559: test   rax,rax
  0055c: je     0x389a7
  00562: movq   xmm3,xmm0
  00566: movq   rax,xmm3
  0056b: test   rax,rax
  0056e: je     0xffff6fa5
  00574: divsd  xmm2,xmm3
:00021 _ = %2.call y=(%3; 1)                [Vec]
  00578: movq   xmm0,xmm2
  0057c: call   0xffff70fd
  00581: mov    QWORD PTR [r14-0x48],rax
  00585: mov    rdi,QWORD PTR [r14-0x40]
  00589: test   rdi,0x7
  00590: jne    0x389b6
  00596: cmp    DWORD PTR [rdi+0x4],0x2b
  0059a: jne    0x389b6
  005a0: cmp    DWORD PTR [rip+0xffffffffffffac70],0x26        # 0xffffb217
  005a7: jne    0x389b6
  005ad: mov    esi,DWORD PTR [rip+0x28d]        # 0x840
  005b3: cmp    esi,0xffffffff
  005b6: je     0x389c5
  005bc: cmp    WORD PTR [rdi+0x2],0x3
  005c1: jne    0x5de
  005c7: cmp    esi,0x6
  005ca: jge    0x5de
  005d0: mov    rax,QWORD PTR [r14-0x48]
  005d4: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  005d9: jmp    0x613
  005de: sub    rsp,0x10
  005e2: movq   QWORD PTR [rsp],xmm2
  005e7: mov    rdx,QWORD PTR [r14-0x48]
  005eb: movabs rax,0x55955d9e10a0
  005f5: call   rax
  005f7: movq   xmm2,QWORD PTR [rsp]
  005fc: add    rsp,0x10
  00600: movabs r13,0x55955e168480
  0060a: test   rax,rax
  0060d: je     0xffff6f80
:00022 
:00023 %3 = %2.call z()                     [Vec]
  00613: mov    rdi,QWORD PTR [r14-0x40]
  00617: test   rdi,0x7
  0061e: jne    0x38a07
  00624: cmp    DWORD PTR [rdi+0x4],0x2b
  00628: jne    0x38a07
  0062e: cmp    DWORD PTR [rip+0xffffffffffffabe2],0x26        # 0xffffb217
  00635: jne    0x38a07
  0063b: mov    esi,DWORD PTR [rip+0x207]        # 0x848
  00641: cmp    esi,0xffffffff
  00644: je     0x38a16
  0064a: cmp    WORD PTR [rdi+0x2],0x3
  0064f: jne    0x668
  00655: cmp    esi,0x6
  00658: jge    0x668
  0065e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00663: jmp    0x674
  00668: movabs rax,0x55955d9e0e20
  00672: call   rax
  00674: mov    QWORD PTR [r14-0x48],rax
:00024 
:00025 %3 = %3 / %1                         [Float][Float]
  00678: mov    rdi,QWORD PTR [r14-0x48]
  0067c: test   rdi,0x1
  00683: jne    0x38a3f
  00689: test   rdi,0x2
  00690: je     0x6cc
  00696: xorps  xmm2,xmm2
  00699: movabs rax,0x8000000000000002
  006a3: cmp    rdi,rax
  006a6: je     0x6de
  006ac: mov    rax,rdi
  006af: sar    rax,0x3f
  006b3: add    rax,0x2
  006b7: and    rdi,0xfffffffffffffffc
  006bb: or     rdi,rax
  006be: rol    rdi,0x3d
  006c2: movq   xmm2,rdi
  006c7: jmp    0x6de
  006cc: call   0xffff6fd9
  006d1: test   rax,rax
  006d4: je     0x38a3f
  006da: movq   xmm2,xmm0
  006de: mov    rdi,QWORD PTR [r14-0x38]
  006e2: test   rdi,0x1
  006e9: jne    0x38a4e
  006ef: test   rdi,0x2
  006f6: je     0x732
  006fc: xorps  xmm3,xmm3
  006ff: movabs rax,0x8000000000000002
  00709: cmp    rdi,rax
  0070c: je     0x744
  00712: mov    rax,rdi
  00715: sar    rax,0x3f
  00719: add    rax,0x2
  0071d: and    rdi,0xfffffffffffffffc
  00721: or     rdi,rax
  00724: rol    rdi,0x3d
  00728: movq   xmm3,rdi
  0072d: jmp    0x744
  00732: call   0xffff6fd9
  00737: test   rax,rax
  0073a: je     0x38a4e
  00740: movq   xmm3,xmm0
  00744: movq   rax,xmm3
  00749: test   rax,rax
  0074c: je     0xffff6fa5
  00752: divsd  xmm2,xmm3
:00026 _ = %2.call z=(%3; 1)                [Vec]
  00756: movq   xmm0,xmm2
  0075a: call   0xffff70fd
  0075f: mov    QWORD PTR [r14-0x48],rax
  00763: mov    rdi,QWORD PTR [r14-0x40]
  00767: test   rdi,0x7
  0076e: jne    0x38a5d
  00774: cmp    DWORD PTR [rdi+0x4],0x2b
  00778: jne    0x38a5d
  0077e: cmp    DWORD PTR [rip+0xffffffffffffaa92],0x26        # 0xffffb217
  00785: jne    0x38a5d
  0078b: mov    esi,DWORD PTR [rip+0xbf]        # 0x850
  00791: cmp    esi,0xffffffff
  00794: je     0x38a6c
  0079a: cmp    WORD PTR [rdi+0x2],0x3
  0079f: jne    0x7bc
  007a5: cmp    esi,0x6
  007a8: jge    0x7bc
  007ae: mov    rax,QWORD PTR [r14-0x48]
  007b2: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007b7: jmp    0x7f1
  007bc: sub    rsp,0x10
  007c0: movq   QWORD PTR [rsp],xmm2
  007c5: mov    rdx,QWORD PTR [r14-0x48]
  007c9: movabs rax,0x55955d9e10a0
  007d3: call   rax
  007d5: movq   xmm2,QWORD PTR [rsp]
  007da: add    rsp,0x10
  007de: movabs r13,0x55955e1684d0
  007e8: test   rax,rax
  007eb: je     0xffff6f80
:00027 
:00028 br =>:00029
  007f1: jmp    0x38ac7
:00029 ret %2
  007f6: mov    rax,QWORD PTR [r14-0x40]
  007fa: leave  
  007fb: ret    
==> start whole compile: vlength FuncId(94) self_class:Vec start:[00000] bytecode:0x55955e1b2df0
<== finished compile. elapsed:28.7µs
offset:Pos(39160) code: 868 bytes  data: 28 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x3828c
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x3829b
  0003c: cmp    DWORD PTR [rdi+0x4],0x2b
  00040: jne    0x3829b
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = const[Math]                     [Math]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffffa98b]        # 0xffffa9d8
  0004d: cmp    rax,QWORD PTR [rip+0x324]        # 0x378
  00054: jne    0x382aa
  0005a: mov    rax,QWORD PTR [rip+0x307]        # 0x368
  00061: mov    QWORD PTR [r14-0x38],rax
:00002 %2 = @x: Vec[IvarId(0)]
  00065: mov    rdi,QWORD PTR [r14-0x30]
  00069: mov    rax,QWORD PTR [rdi+0x10]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00003 %3 = @x: Vec[IvarId(0)]
  00071: mov    rdi,QWORD PTR [r14-0x30]
  00075: mov    rax,QWORD PTR [rdi+0x10]
  00079: mov    QWORD PTR [r14-0x48],rax
:00004 %2 = %2 * %3                         [Float][Float]
  0007d: mov    rdi,QWORD PTR [r14-0x40]
  00081: test   rdi,0x1
  00088: jne    0x382f0
  0008e: test   rdi,0x2
  00095: je     0xd1
  0009b: xorps  xmm2,xmm2
  0009e: movabs rax,0x8000000000000002
  000a8: cmp    rdi,rax
  000ab: je     0xe3
  000b1: mov    rax,rdi
  000b4: sar    rax,0x3f
  000b8: add    rax,0x2
  000bc: and    rdi,0xfffffffffffffffc
  000c0: or     rdi,rax
  000c3: rol    rdi,0x3d
  000c7: movq   xmm2,rdi
  000cc: jmp    0xe3
  000d1: call   0xffff6785
  000d6: test   rax,rax
  000d9: je     0x382f0
  000df: movq   xmm2,xmm0
  000e3: mov    rdi,QWORD PTR [r14-0x48]
  000e7: test   rdi,0x1
  000ee: jne    0x382ff
  000f4: test   rdi,0x2
  000fb: je     0x137
  00101: xorps  xmm3,xmm3
  00104: movabs rax,0x8000000000000002
  0010e: cmp    rdi,rax
  00111: je     0x149
  00117: mov    rax,rdi
  0011a: sar    rax,0x3f
  0011e: add    rax,0x2
  00122: and    rdi,0xfffffffffffffffc
  00126: or     rdi,rax
  00129: rol    rdi,0x3d
  0012d: movq   xmm3,rdi
  00132: jmp    0x149
  00137: call   0xffff6785
  0013c: test   rax,rax
  0013f: je     0x382ff
  00145: movq   xmm3,xmm0
  00149: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  0014d: mov    rdi,QWORD PTR [r14-0x30]
  00151: mov    rax,QWORD PTR [rdi+0x18]
  00155: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = @y: Vec[IvarId(1)]
  00159: mov    rdi,QWORD PTR [r14-0x30]
  0015d: mov    rax,QWORD PTR [rdi+0x18]
  00161: mov    QWORD PTR [r14-0x50],rax
:00007 %3 = %3 * %4                         [Float][Float]
  00165: mov    rdi,QWORD PTR [r14-0x48]
  00169: test   rdi,0x1
  00170: jne    0x3830e
  00176: test   rdi,0x2
  0017d: je     0x1b9
  00183: xorps  xmm3,xmm3
  00186: movabs rax,0x8000000000000002
  00190: cmp    rdi,rax
  00193: je     0x1cb
  00199: mov    rax,rdi
  0019c: sar    rax,0x3f
  001a0: add    rax,0x2
  001a4: and    rdi,0xfffffffffffffffc
  001a8: or     rdi,rax
  001ab: rol    rdi,0x3d
  001af: movq   xmm3,rdi
  001b4: jmp    0x1cb
  001b9: call   0xffff6785
  001be: test   rax,rax
  001c1: je     0x3830e
  001c7: movq   xmm3,xmm0
  001cb: mov    rdi,QWORD PTR [r14-0x50]
  001cf: test   rdi,0x1
  001d6: jne    0x3832a
  001dc: test   rdi,0x2
  001e3: je     0x21f
  001e9: xorps  xmm4,xmm4
  001ec: movabs rax,0x8000000000000002
  001f6: cmp    rdi,rax
  001f9: je     0x231
  001ff: mov    rax,rdi
  00202: sar    rax,0x3f
  00206: add    rax,0x2
  0020a: and    rdi,0xfffffffffffffffc
  0020e: or     rdi,rax
  00211: rol    rdi,0x3d
  00215: movq   xmm4,rdi
  0021a: jmp    0x231
  0021f: call   0xffff6785
  00224: test   rax,rax
  00227: je     0x3832a
  0022d: movq   xmm4,xmm0
  00231: mulsd  xmm3,xmm4
:00008 %2 = %2 + %3                         [Float][Float]
  00235: addsd  xmm2,xmm3
:00009 %3 = @z: Vec[IvarId(2)]
  00239: mov    rdi,QWORD PTR [r14-0x30]
  0023d: mov    rax,QWORD PTR [rdi+0x20]
  00241: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = @z: Vec[IvarId(2)]
  00245: mov    rdi,QWORD PTR [r14-0x30]
  00249: mov    rax,QWORD PTR [rdi+0x20]
  0024d: mov    QWORD PTR [r14-0x50],rax
:00011 %3 = %3 * %4                         [Float][Float]
  00251: mov    rdi,QWORD PTR [r14-0x48]
  00255: test   rdi,0x1
  0025c: jne    0x38346
  00262: test   rdi,0x2
  00269: je     0x2a5
  0026f: xorps  xmm3,xmm3
  00272: movabs rax,0x8000000000000002
  0027c: cmp    rdi,rax
  0027f: je     0x2b7
  00285: mov    rax,rdi
  00288: sar    rax,0x3f
  0028c: add    rax,0x2
  00290: and    rdi,0xfffffffffffffffc
  00294: or     rdi,rax
  00297: rol    rdi,0x3d
  0029b: movq   xmm3,rdi
  002a0: jmp    0x2b7
  002a5: call   0xffff6785
  002aa: test   rax,rax
  002ad: je     0x38346
  002b3: movq   xmm3,xmm0
  002b7: mov    rdi,QWORD PTR [r14-0x50]
  002bb: test   rdi,0x1
  002c2: jne    0x38362
  002c8: test   rdi,0x2
  002cf: je     0x30b
  002d5: xorps  xmm4,xmm4
  002d8: movabs rax,0x8000000000000002
  002e2: cmp    rdi,rax
  002e5: je     0x31d
  002eb: mov    rax,rdi
  002ee: sar    rax,0x3f
  002f2: add    rax,0x2
  002f6: and    rdi,0xfffffffffffffffc
  002fa: or     rdi,rax
  002fd: rol    rdi,0x3d
  00301: movq   xmm4,rdi
  00306: jmp    0x31d
  0030b: call   0xffff6785
  00310: test   rax,rax
  00313: je     0x38362
  00319: movq   xmm4,xmm0
  0031d: mulsd  xmm3,xmm4
:00012 %2 = %2 + %3                         [Float][Float]
  00321: addsd  xmm2,xmm3
:00013 %1 = %1.call sqrt(%2; 1)             [#<Class:Math>]
  00325: mov    rdi,QWORD PTR [r14-0x38]
  00329: test   rdi,0x7
  00330: jne    0x3837e
  00336: cmp    DWORD PTR [rdi+0x4],0x24
  0033a: jne    0x3837e
  00340: cmp    DWORD PTR [rip+0xffffffffffffa67c],0x26        # 0xffffa9c3
  00347: jne    0x3837e
  0034d: sqrtsd xmm5,xmm2
:00014 
:00015 ret %1
  00351: movq   xmm0,xmm5
  00355: call   0xffff68a9
  0035a: mov    QWORD PTR [r14-0x38],rax
  0035e: mov    rax,QWORD PTR [r14-0x38]
  00362: leave  
  00363: ret    
==> start whole compile: initialize FuncId(100) self_class:Ray start:[00000] bytecode:0x55955e167290
<== finished compile. elapsed:16.9µs
offset:Pos(40056) code: 93 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: jne    0x38027
  00014: mov    QWORD PTR [r14-0x48],0x4
  0001c: mov    rdi,QWORD PTR [r14-0x30]
  00020: test   rdi,0x7
  00027: jne    0x38036
  0002d: cmp    DWORD PTR [rdi+0x4],0x31
  00031: jne    0x38036
:00000 init_method reg:4 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [r14-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [r14-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  0004f: mov    rax,QWORD PTR [r14-0x40]
  00053: mov    QWORD PTR [r14-0x48],rax
:00004 ret %3
  00057: mov    rax,QWORD PTR [r14-0x48]
  0005b: leave  
  0005c: ret    
==> start whole compile: initialize FuncId(101) self_class:Isect start:[00000] bytecode:0x55955e154260
<== finished compile. elapsed:32.3µs
offset:Pos(40149) code: 715 bytes  data: 168 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x37fe8
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    rdi,QWORD PTR [r14-0x30]
  0002f: test   rdi,0x7
  00036: jne    0x37ff7
  0003c: cmp    DWORD PTR [rdi+0x4],0x33
  00040: jne    0x37ff7
:00000 init_method reg:5 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  00046: movq   xmm2,QWORD PTR [rip+0x27d]        # 0x2cb
  0004e: movabs rax,0xb18968000000002
  00058: mov    QWORD PTR [r14-0x38],rax
:00002 @t: Isect[IvarId(0)] = %1
  0005c: mov    rdi,QWORD PTR [r14-0x30]
  00060: mov    rax,QWORD PTR [r14-0x38]
  00064: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  00068: mov    rax,0x14
  0006f: mov    QWORD PTR [r14-0x38],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00073: mov    rdi,QWORD PTR [r14-0x30]
  00077: mov    rax,QWORD PTR [r14-0x38]
  0007b: mov    QWORD PTR [rdi+0x18],rax
:00005 %1 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffffa575]        # 0xffffa5fb
  00086: cmp    rax,QWORD PTR [rip+0x25e]        # 0x2eb
  0008d: jne    0x38006
  00093: mov    rax,QWORD PTR [rip+0x241]        # 0x2db
  0009a: mov    QWORD PTR [r14-0x38],rax
:00006 %2 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0x255]        # 0x2fb
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x40],rax
:00007 %3 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0x24f]        # 0x30b
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x48],rax
:00008 %4 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0x249]        # 0x31b
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x50],rax
:00009 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x38]
  000e4: test   rdi,0x7
  000eb: jne    0x3804c
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x3804c
  000fb: cmp    DWORD PTR [rip+0xffffffffffffa4e4],0x26        # 0xffffa5e6
  00102: jne    0x3804c
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x40]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x3805b
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: movabs r13,0x55955e154310
  00189: test   rax,rax
  0018c: je     0xffff634f
  00192: mov    QWORD PTR [r14-0x38],rax
:00010 
:00011 @pl: Isect[IvarId(2)] = %1
  00196: mov    rdi,QWORD PTR [r14-0x30]
  0019a: mov    rax,QWORD PTR [r14-0x38]
  0019e: mov    QWORD PTR [rdi+0x20],rax
:00012 %1 = const[Vec]                      [Vec]
  001a2: mov    rax,QWORD PTR [rip+0xffffffffffffa452]        # 0xffffa5fb
  001a9: cmp    rax,QWORD PTR [rip+0x18b]        # 0x33b
  001b0: jne    0x3808d
  001b6: mov    rax,QWORD PTR [rip+0x16e]        # 0x32b
  001bd: mov    QWORD PTR [r14-0x38],rax
:00013 %2 = literal[0.0]
  001c1: movq   xmm2,QWORD PTR [rip+0x182]        # 0x34b
  001c9: movabs rax,0x8000000000000002
  001d3: mov    QWORD PTR [r14-0x40],rax
:00014 %3 = literal[0.0]
  001d7: movq   xmm3,QWORD PTR [rip+0x17c]        # 0x35b
  001df: movabs rax,0x8000000000000002
  001e9: mov    QWORD PTR [r14-0x48],rax
:00015 %4 = literal[0.0]
  001ed: movq   xmm4,QWORD PTR [rip+0x176]        # 0x36b
  001f5: movabs rax,0x8000000000000002
  001ff: mov    QWORD PTR [r14-0x50],rax
:00016 %1 = %1.call new(%2; 3)              [#<Class:Vec>]
  00203: mov    rdi,QWORD PTR [r14-0x38]
  00207: test   rdi,0x7
  0020e: jne    0x380fd
  00214: cmp    DWORD PTR [rdi+0x4],0x2c
  00218: jne    0x380fd
  0021e: cmp    DWORD PTR [rip+0xffffffffffffa3c1],0x26        # 0xffffa5e6
  00225: jne    0x380fd
  0022b: mov    r9,0x0
  00232: sub    rsp,0x20
  00236: movq   QWORD PTR [rsp],xmm2
  0023b: movq   QWORD PTR [rsp+0x8],xmm3
  00241: movq   QWORD PTR [rsp+0x10],xmm4
  00247: mov    rdx,rdi
  0024a: mov    QWORD PTR [rsp-0x40],rcx
  0024f: mov    QWORD PTR [rsp-0x28],0x0
  00258: lea    rcx,[r14-0x40]
  0025c: mov    r8,0x3
  00263: mov    rsi,QWORD PTR [rbx]
  00266: mov    QWORD PTR [rsp-0x18],rsi
  0026b: lea    rsi,[rsp-0x18]
  00270: mov    QWORD PTR [rbx],rsi
  00273: lea    r14,[rsp-0x10]
  00278: mov    QWORD PTR [rsp-0x20],r14
  0027d: call   0x3810c
  00282: lea    r14,[rbp-0x8]
  00286: mov    QWORD PTR [rbx],r14
  00289: mov    r14,QWORD PTR [rbp-0x10]
  0028d: movq   xmm2,QWORD PTR [rsp]
  00292: movq   xmm3,QWORD PTR [rsp+0x8]
  00298: movq   xmm4,QWORD PTR [rsp+0x10]
  0029e: add    rsp,0x20
  002a2: movabs r13,0x55955e154380
  002ac: test   rax,rax
  002af: je     0xffff634f
  002b5: mov    QWORD PTR [r14-0x38],rax
:00017 
:00018 @n: Isect[IvarId(3)] = %1
  002b9: mov    rdi,QWORD PTR [r14-0x30]
  002bd: mov    rax,QWORD PTR [r14-0x38]
  002c1: mov    QWORD PTR [rdi+0x28],rax
:00019 ret %1
  002c5: mov    rax,QWORD PTR [r14-0x38]
  002c9: leave  
  002ca: ret    
==> start whole compile: intersect FuncId(99) self_class:Plane start:[00000] bytecode:0x55955e173c50
<== finished compile. elapsed:91.6µs
offset:Pos(41032) code: 5564 bytes  data: 116 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x37dcb
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x37dda
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x37dda
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x37de9
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x37de9
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffffa1d9],0x26        # 0xffffa273
  0009a:    	jne    0x37de9
  000a0: 00 	cmp    DWORD PTR [rip+0xffffffffffffa1d0],0x0        # 0xffffa277
  000a7:    	je     0xbf
  000ad:    	mov    rdi,r12
  000b0:    	mov    rsi,QWORD PTR [rbx]
  000b3: 95 	movabs rax,0x55955d9a3d50
  000bd:    	call   rax
  000bf: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000c8:    	mov    rax,QWORD PTR [r14-0x68]
  000cc:    	mov    QWORD PTR [rsp-0x40],rax
  000d1: 00 	mov    rdi,0x1
  000d8:    	mov    rax,QWORD PTR [r14-0x70]
  000dc:    	mov    QWORD PTR [rsp-0x48],rax
  000e1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000ea: 05 	movabs rax,0x100050000005d
  000f4:    	mov    QWORD PTR [rsp-0x30],rax
  000f9: 95 	movabs r13,0x55955e1715b0
  00103:    	mov    rsi,QWORD PTR [rbx]
  00106:    	mov    QWORD PTR [rsp-0x18],rsi
  0010b:    	lea    rsi,[rsp-0x18]
  00110:    	mov    QWORD PTR [rbx],rsi
  00113:    	lea    r14,[rsp-0x10]
  00118:    	mov    QWORD PTR [rsp-0x20],r14
  0011d:    	call   0xffffaf50
  00122:    	lea    r14,[rbp-0x8]
  00126:    	mov    QWORD PTR [rbx],r14
  00129:    	mov    r14,QWORD PTR [rbp-0x10]
  0012d: 95 	movabs r13,0x55955e173ca0
  00137:    	test   rax,rax
  0013a:    	je     0xffff5fdc
  00140:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  00144:    	mov    rdi,QWORD PTR [r14-0x48]
  00148: 00 	test   rdi,0x1
  0014f:    	jne    0x37df8
  00155: 00 	test   rdi,0x2
  0015c:    	je     0x198
  00162:    	xorps  xmm2,xmm2
  00165: 00 	movabs rax,0x8000000000000002
  0016f:    	cmp    rdi,rax
  00172:    	je     0x1aa
  00178:    	mov    rax,rdi
  0017b:    	sar    rax,0x3f
  0017f:    	add    rax,0x2
  00183:    	and    rdi,0xfffffffffffffffc
  00187:    	or     rdi,rax
  0018a:    	rol    rdi,0x3d
  0018e:    	movq   xmm2,rdi
  00193:    	jmp    0x1aa
  00198:    	call   0xffff6035
  0019d:    	test   rax,rax
  001a0:    	je     0x37df8
  001a6:    	movq   xmm2,xmm0
  001aa: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1417]        # 0x15c8
:00006 %7 = %1.call dir()                   [Ray]
  001b1:    	movq   xmm0,xmm2
  001b5:    	call   0xffff6159
  001ba:    	mov    QWORD PTR [r14-0x48],rax
  001be:    	mov    rdi,QWORD PTR [r14-0x38]
  001c2: 00 	test   rdi,0x7
  001c9:    	jne    0x37e07
  001cf:    	cmp    DWORD PTR [rdi+0x4],0x31
  001d3:    	jne    0x37e07
  001d9: 26 	cmp    DWORD PTR [rip+0xffffffffffffa093],0x26        # 0xffffa273
  001e0:    	jne    0x37e07
  001e6:    	mov    esi,DWORD PTR [rip+0x13e8]        # 0x15d4
  001ec:    	cmp    esi,0xffffffff
  001ef:    	je     0x37e16
  001f5:    	cmp    WORD PTR [rdi+0x2],0x3
  001fa:    	jne    0x213
  00200:    	cmp    esi,0x6
  00203:    	jge    0x213
  00209:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020e:    	jmp    0x21f
  00213: 95 	movabs rax,0x55955d9e0e20
  0021d:    	call   rax
  0021f:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00223:    	mov    rdi,QWORD PTR [r14-0x30]
  00227:    	mov    rax,QWORD PTR [rdi+0x18]
  0022b:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  0022f:    	mov    rdi,QWORD PTR [r14-0x68]
  00233: 00 	test   rdi,0x7
  0023a:    	jne    0x37e3f
  00240:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00244:    	jne    0x37e3f
  0024a: 26 	cmp    DWORD PTR [rip+0xffffffffffffa022],0x26        # 0xffffa273
  00251:    	jne    0x37e3f
  00257: 00 	cmp    DWORD PTR [rip+0xffffffffffffa019],0x0        # 0xffffa277
  0025e:    	je     0x276
  00264:    	mov    rdi,r12
  00267:    	mov    rsi,QWORD PTR [rbx]
  0026a: 95 	movabs rax,0x55955d9a3d50
  00274:    	call   rax
  00276: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0027f:    	mov    rax,QWORD PTR [r14-0x68]
  00283:    	mov    QWORD PTR [rsp-0x40],rax
  00288: 00 	mov    rdi,0x1
  0028f:    	mov    rax,QWORD PTR [r14-0x70]
  00293:    	mov    QWORD PTR [rsp-0x48],rax
  00298: 00 	mov    QWORD PTR [rsp-0x38],0x0
  002a1: 05 	movabs rax,0x100050000005d
  002ab:    	mov    QWORD PTR [rsp-0x30],rax
  002b0: 95 	movabs r13,0x55955e1715b0
  002ba:    	mov    rsi,QWORD PTR [rbx]
  002bd:    	mov    QWORD PTR [rsp-0x18],rsi
  002c2:    	lea    rsi,[rsp-0x18]
  002c7:    	mov    QWORD PTR [rbx],rsi
  002ca:    	lea    r14,[rsp-0x10]
  002cf:    	mov    QWORD PTR [rsp-0x20],r14
  002d4:    	call   0xffffaf50
  002d9:    	lea    r14,[rbp-0x8]
  002dd:    	mov    QWORD PTR [rbx],r14
  002e0:    	mov    r14,QWORD PTR [rbp-0x10]
  002e4: 95 	movabs r13,0x55955e173d00
  002ee:    	test   rax,rax
  002f1:    	je     0xffff5fdc
  002f7:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002fb:    	mov    rax,QWORD PTR [r14-0x50]
  002ff:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  00303: 00 	movq   xmm2,QWORD PTR [rip+0x12cd]        # 0x15d8
  0030b: 00 	movabs rax,0x8000000000000002
  00315:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
:00014 condnotbr _%7 =>:00018
  00319:    	mov    rdi,QWORD PTR [r14-0x50]
  0031d: 00 	test   rdi,0x1
  00324:    	jne    0x37e4e
  0032a: 00 	test   rdi,0x2
  00331:    	je     0x36d
  00337:    	xorps  xmm3,xmm3
  0033a: 00 	movabs rax,0x8000000000000002
  00344:    	cmp    rdi,rax
  00347:    	je     0x37f
  0034d:    	mov    rax,rdi
  00350:    	sar    rax,0x3f
  00354:    	add    rax,0x2
  00358:    	and    rdi,0xfffffffffffffffc
  0035c:    	or     rdi,rax
  0035f:    	rol    rdi,0x3d
  00363:    	movq   xmm3,rdi
  00368:    	jmp    0x37f
  0036d:    	call   0xffff6035
  00372:    	test   rax,rax
  00375:    	je     0x37e4e
  0037b:    	movq   xmm3,xmm0
  0037f:    	ucomisd xmm3,xmm2
  00383:    	jae    0x37e95
:00015 %5 = %4
:00016 %5 = neg %5                          [<INVALID>]
  00389: 00 	cmp    DWORD PTR [rip+0x1250],0x0        # 0x15e0
  00390:    	jl     0x37e5d
  00396:    	je     0x37e79
  0039c: 01 	sub    DWORD PTR [rip+0x123d],0x1        # 0x15e0
  003a3:    	xor    rdi,rdi
  003a6:    	jmp    0x37e5d
  003ab:    	movq   xmm0,xmm3
  003af:    	call   0xffff6159
  003b4:    	mov    QWORD PTR [r14-0x58],rax
  003b8:    	sub    rsp,0x10
  003bc:    	movq   QWORD PTR [rsp],xmm2
  003c1:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c7:    	mov    rdi,QWORD PTR [r14-0x58]
  003cb:    	mov    rdx,rdi
  003ce:    	mov    rdi,rbx
  003d1:    	mov    rsi,r12
  003d4: 95 	movabs rax,0x55955d959b90
  003de:    	call   rax
  003e0:    	movq   xmm2,QWORD PTR [rsp]
  003e5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003eb:    	add    rsp,0x10
  003ef: 95 	movabs r13,0x55955e173d60
  003f9:    	test   rax,rax
  003fc:    	je     0xffff5fdc
  00402:    	mov    QWORD PTR [r14-0x58],rax
:00017 br =>:00018
  00406:    	jmp    0x37eae
:00018 %7 = literal[1e-17]
  0040b: 00 	movq   xmm2,QWORD PTR [rip+0x11d5]        # 0x15e8
  00413: aa 	movabs rax,0xe33877aa3236a4ba
  0041d:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
:00020 condnotbr _%7 =>:00024
  00421:    	mov    rdi,QWORD PTR [r14-0x58]
  00425: 00 	test   rdi,0x1
  0042c:    	jne    0x37ec7
  00432: 00 	test   rdi,0x2
  00439:    	je     0x475
  0043f:    	xorps  xmm4,xmm4
  00442: 00 	movabs rax,0x8000000000000002
  0044c:    	cmp    rdi,rax
  0044f:    	je     0x487
  00455:    	mov    rax,rdi
  00458:    	sar    rax,0x3f
  0045c:    	add    rax,0x2
  00460:    	and    rdi,0xfffffffffffffffc
  00464:    	or     rdi,rax
  00467:    	rol    rdi,0x3d
  0046b:    	movq   xmm4,rdi
  00470:    	jmp    0x487
  00475:    	call   0xffff6035
  0047a:    	test   rax,rax
  0047d:    	je     0x37ec7
  00483:    	movq   xmm4,xmm0
  00487:    	ucomisd xmm4,xmm2
  0048b:    	jae    0x49f
:00021 %7 = nil
  00491: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  00499:    	mov    rax,QWORD PTR [r14-0x68]
  0049d:    	leave  
  0049e:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  0049f:    	mov    rdi,QWORD PTR [r14-0x38]
  004a3: 00 	test   rdi,0x7
  004aa:    	jne    0x37ed6
  004b0:    	cmp    DWORD PTR [rdi+0x4],0x31
  004b4:    	jne    0x37ed6
  004ba: 26 	cmp    DWORD PTR [rip+0xffffffffffff9db2],0x26        # 0xffffa273
  004c1:    	jne    0x37ed6
  004c7:    	mov    esi,DWORD PTR [rip+0x1127]        # 0x15f4
  004cd:    	cmp    esi,0xffffffff
  004d0:    	je     0x37ee5
  004d6:    	cmp    WORD PTR [rdi+0x2],0x3
  004db:    	jne    0x4f4
  004e1:    	cmp    esi,0x6
  004e4:    	jge    0x4f4
  004ea:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004ef:    	jmp    0x500
  004f4: 95 	movabs rax,0x55955d9e0e20
  004fe:    	call   rax
  00500:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  00504:    	mov    rdi,QWORD PTR [r14-0x30]
  00508:    	mov    rax,QWORD PTR [rdi+0x18]
  0050c:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  00510:    	mov    rdi,QWORD PTR [r14-0x68]
  00514: 00 	test   rdi,0x7
  0051b:    	jne    0x37f0e
  00521:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00525:    	jne    0x37f0e
  0052b: 26 	cmp    DWORD PTR [rip+0xffffffffffff9d41],0x26        # 0xffffa273
  00532:    	jne    0x37f0e
  00538: 00 	cmp    DWORD PTR [rip+0xffffffffffff9d38],0x0        # 0xffffa277
  0053f:    	je     0x557
  00545:    	mov    rdi,r12
  00548:    	mov    rsi,QWORD PTR [rbx]
  0054b: 95 	movabs rax,0x55955d9a3d50
  00555:    	call   rax
  00557: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00560:    	mov    rax,QWORD PTR [r14-0x68]
  00564:    	mov    QWORD PTR [rsp-0x40],rax
  00569: 00 	mov    rdi,0x1
  00570:    	mov    rax,QWORD PTR [r14-0x70]
  00574:    	mov    QWORD PTR [rsp-0x48],rax
  00579: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00582: 05 	movabs rax,0x100050000005d
  0058c:    	mov    QWORD PTR [rsp-0x30],rax
  00591: 95 	movabs r13,0x55955e1715b0
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0xffffaf50
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5: 95 	movabs r13,0x55955e173e20
  005cf:    	test   rax,rax
  005d2:    	je     0xffff5fdc
  005d8:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  005dc:    	mov    rdi,QWORD PTR [r14-0x68]
  005e0: 00 	test   rdi,0x1
  005e7:    	jne    0x37f1d
  005ed: 00 	test   rdi,0x2
  005f4:    	je     0x630
  005fa:    	xorps  xmm2,xmm2
  005fd: 00 	movabs rax,0x8000000000000002
  00607:    	cmp    rdi,rax
  0060a:    	je     0x642
  00610:    	mov    rax,rdi
  00613:    	sar    rax,0x3f
  00617:    	add    rax,0x2
  0061b:    	and    rdi,0xfffffffffffffffc
  0061f:    	or     rdi,rax
  00622:    	rol    rdi,0x3d
  00626:    	movq   xmm2,rdi
  0062b:    	jmp    0x642
  00630:    	call   0xffff6035
  00635:    	test   rax,rax
  00638:    	je     0x37f1d
  0063e:    	movq   xmm2,xmm0
  00642:    	mov    rdi,QWORD PTR [r14-0x48]
  00646: 00 	test   rdi,0x1
  0064d:    	jne    0x37f2c
  00653: 00 	test   rdi,0x2
  0065a:    	je     0x696
  00660:    	xorps  xmm3,xmm3
  00663: 00 	movabs rax,0x8000000000000002
  0066d:    	cmp    rdi,rax
  00670:    	je     0x6a8
  00676:    	mov    rax,rdi
  00679:    	sar    rax,0x3f
  0067d:    	add    rax,0x2
  00681:    	and    rdi,0xfffffffffffffffc
  00685:    	or     rdi,rax
  00688:    	rol    rdi,0x3d
  0068c:    	movq   xmm3,rdi
  00691:    	jmp    0x6a8
  00696:    	call   0xffff6035
  0069b:    	test   rax,rax
  0069e:    	je     0x37f2c
  006a4:    	movq   xmm3,xmm0
  006a8:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  006ac: 00 	xorps  xmm2,XMMWORD PTR [rip+0xf45]        # 0x15f8
:00031 %6 = %7 / %4                         [Float][Float]
  006b3:    	mov    rdi,QWORD PTR [r14-0x50]
  006b7: 00 	test   rdi,0x1
  006be:    	jne    0x37f3b
  006c4: 00 	test   rdi,0x2
  006cb:    	je     0x707
  006d1:    	xorps  xmm4,xmm4
  006d4: 00 	movabs rax,0x8000000000000002
  006de:    	cmp    rdi,rax
  006e1:    	je     0x719
  006e7:    	mov    rax,rdi
  006ea:    	sar    rax,0x3f
  006ee:    	add    rax,0x2
  006f2:    	and    rdi,0xfffffffffffffffc
  006f6:    	or     rdi,rax
  006f9:    	rol    rdi,0x3d
  006fd:    	movq   xmm4,rdi
  00702:    	jmp    0x719
  00707:    	call   0xffff6035
  0070c:    	test   rax,rax
  0070f:    	je     0x37f3b
  00715:    	movq   xmm4,xmm0
  00719:    	movq   xmm5,xmm2
  0071d:    	movq   rax,xmm4
  00722:    	test   rax,rax
  00725:    	je     0xffff6001
  0072b:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  0072f: 00 	movq   xmm2,QWORD PTR [rip+0xed1]        # 0x1608
  00737: 00 	movabs rax,0x8000000000000002
  00741:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
:00034 condnotbr _%7 =>:00083
  00745:    	ucomisd xmm5,xmm2
  00749:    	jbe    0x385a3
:00035 %7 = %2.call t()                     [<INVALID>]
  0074f: 00 	cmp    DWORD PTR [rip+0xeba],0x0        # 0x1610
  00756:    	jl     0x37f57
  0075c:    	je     0x37f73
  00762: 01 	sub    DWORD PTR [rip+0xea7],0x1        # 0x1610
  00769:    	xor    rdi,rdi
  0076c:    	jmp    0x37f57
  00771:    	movq   xmm0,xmm5
  00775:    	call   0xffff6159
  0077a:    	mov    QWORD PTR [r14-0x60],rax
  0077e:    	mov    rdi,QWORD PTR [r14-0x40]
  00782: 95 	movabs rax,0x55955d949d50
  0078c:    	call   rax
  0078e:    	mov    r15d,eax
  00791: 95 	movabs r13,0x55955e173e90
  0079b:    	cmp    QWORD PTR [r13+0x8],0x0
  007a0:    	je     0x37f8f
  007a6:    	cmp    r15d,DWORD PTR [r13-0x8]
  007aa:    	jne    0x37f8f
  007b0:    	mov    eax,DWORD PTR [rip+0xffffffffffff9abd]        # 0xffffa273
  007b6:    	cmp    DWORD PTR [r13-0x4],eax
  007ba:    	jne    0x37f8f
  007c0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007c9:    	mov    rax,QWORD PTR [r14-0x40]
  007cd:    	mov    QWORD PTR [rsp-0x40],rax
  007d2: 00 	mov    rdi,0x0
  007d9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  007e2:    	mov    r13,QWORD PTR [r13+0x8]
  007e6:    	mov    rax,QWORD PTR [r13+0x8]
  007ea:    	mov    QWORD PTR [rsp-0x30],rax
  007ef:    	mov    rax,QWORD PTR [r13+0x0]
  007f3:    	mov    r13,QWORD PTR [r13+0x10]
  007f7:    	mov    rsi,QWORD PTR [rbx]
  007fa:    	mov    QWORD PTR [rsp-0x18],rsi
  007ff:    	lea    rsi,[rsp-0x18]
  00804:    	mov    QWORD PTR [rbx],rsi
  00807:    	lea    r14,[rsp-0x10]
  0080c:    	mov    QWORD PTR [rsp-0x20],r14
  00811:    	call   rax
  00813:    	lea    r14,[rbp-0x8]
  00817:    	mov    QWORD PTR [rbx],r14
  0081a:    	mov    r14,QWORD PTR [rbp-0x10]
  0081e:    	test   rax,rax
  00821:    	je     0x37fd0
  00827:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00038 condnotbr _%7 =>:00083
  0082b:    	mov    rdi,QWORD PTR [r14-0x60]
  0082f:    	mov    rsi,QWORD PTR [r14-0x68]
  00833: 00 	test   rdi,0x1
  0083a:    	je     0x37fdf
  00840: 00 	test   rsi,0x1
  00847:    	je     0x37fdf
  0084d:    	cmp    rdi,rsi
  00850:    	jge    0x385c9
:00039 %7 = literal[true]
  00856: 00 	mov    rax,0x1c
  0085d:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [<INVALID>]
  00861:    	mov    rdi,QWORD PTR [r14-0x40]
  00865: 95 	movabs rax,0x55955d949d50
  0086f:    	call   rax
  00871:    	mov    r15d,eax
  00874: 95 	movabs r13,0x55955e173ee0
  0087e:    	cmp    QWORD PTR [r13+0x8],0x0
  00883:    	je     0x3800a
  00889:    	cmp    r15d,DWORD PTR [r13-0x8]
  0088d:    	jne    0x3800a
  00893:    	mov    eax,DWORD PTR [rip+0xffffffffffff99da]        # 0xffffa273
  00899:    	cmp    DWORD PTR [r13-0x4],eax
  0089d:    	jne    0x3800a
  008a3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  008ac:    	mov    rax,QWORD PTR [r14-0x40]
  008b0:    	mov    QWORD PTR [rsp-0x40],rax
  008b5: 00 	mov    rdi,0x1
  008bc:    	mov    rax,QWORD PTR [r14-0x68]
  008c0:    	mov    QWORD PTR [rsp-0x48],rax
  008c5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  008ce:    	mov    r13,QWORD PTR [r13+0x8]
  008d2:    	mov    rax,QWORD PTR [r13+0x8]
  008d6:    	mov    QWORD PTR [rsp-0x30],rax
  008db:    	mov    rax,QWORD PTR [r13+0x0]
  008df:    	mov    r13,QWORD PTR [r13+0x10]
  008e3:    	mov    rsi,QWORD PTR [rbx]
  008e6:    	mov    QWORD PTR [rsp-0x18],rsi
  008eb:    	lea    rsi,[rsp-0x18]
  008f0:    	mov    QWORD PTR [rbx],rsi
  008f3:    	lea    r14,[rsp-0x10]
  008f8:    	mov    QWORD PTR [rsp-0x20],r14
  008fd:    	call   rax
  008ff:    	lea    r14,[rbp-0x8]
  00903:    	mov    QWORD PTR [rbx],r14
  00906:    	mov    r14,QWORD PTR [rbp-0x10]
  0090a:    	test   rax,rax
  0090d:    	je     0x3804b
:00041 
:00042 _ = %2.call t=(%6; 1)                [<INVALID>]
  00913:    	mov    rdi,QWORD PTR [r14-0x40]
  00917: 95 	movabs rax,0x55955d949d50
  00921:    	call   rax
  00923:    	mov    r15d,eax
  00926: 95 	movabs r13,0x55955e173f00
  00930:    	cmp    QWORD PTR [r13+0x8],0x0
  00935:    	je     0x3805a
  0093b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0093f:    	jne    0x3805a
  00945:    	mov    eax,DWORD PTR [rip+0xffffffffffff9928]        # 0xffffa273
  0094b:    	cmp    DWORD PTR [r13-0x4],eax
  0094f:    	jne    0x3805a
  00955: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0095e:    	mov    rax,QWORD PTR [r14-0x40]
  00962:    	mov    QWORD PTR [rsp-0x40],rax
  00967: 00 	mov    rdi,0x1
  0096e:    	mov    rax,QWORD PTR [r14-0x60]
  00972:    	mov    QWORD PTR [rsp-0x48],rax
  00977: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00980:    	mov    r13,QWORD PTR [r13+0x8]
  00984:    	mov    rax,QWORD PTR [r13+0x8]
  00988:    	mov    QWORD PTR [rsp-0x30],rax
  0098d:    	mov    rax,QWORD PTR [r13+0x0]
  00991:    	mov    r13,QWORD PTR [r13+0x10]
  00995:    	mov    rsi,QWORD PTR [rbx]
  00998:    	mov    QWORD PTR [rsp-0x18],rsi
  0099d:    	lea    rsi,[rsp-0x18]
  009a2:    	mov    QWORD PTR [rbx],rsi
  009a5:    	lea    r14,[rsp-0x10]
  009aa:    	mov    QWORD PTR [rsp-0x20],r14
  009af:    	call   rax
  009b1:    	lea    r14,[rbp-0x8]
  009b5:    	mov    QWORD PTR [rbx],r14
  009b8:    	mov    r14,QWORD PTR [rbp-0x10]
  009bc:    	test   rax,rax
  009bf:    	je     0x3809b
:00043 
:00044 %7 = @n: <INVALID>[IvarId(0)]
  009c5:    	mov    rdi,QWORD PTR [r14-0x30]
  009c9: 00 	mov    rsi,0xab
  009d0:    	mov    rdx,r12
  009d3: 95 	movabs rax,0x55955d9acee0
  009dd:    	call   rax
  009df:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [<INVALID>]
  009e3:    	mov    rdi,QWORD PTR [r14-0x40]
  009e7: 95 	movabs rax,0x55955d949d50
  009f1:    	call   rax
  009f3:    	mov    r15d,eax
  009f6: 95 	movabs r13,0x55955e173f30
  00a00:    	cmp    QWORD PTR [r13+0x8],0x0
  00a05:    	je     0x380aa
  00a0b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a0f:    	jne    0x380aa
  00a15:    	mov    eax,DWORD PTR [rip+0xffffffffffff9858]        # 0xffffa273
  00a1b:    	cmp    DWORD PTR [r13-0x4],eax
  00a1f:    	jne    0x380aa
  00a25: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a2e:    	mov    rax,QWORD PTR [r14-0x40]
  00a32:    	mov    QWORD PTR [rsp-0x40],rax
  00a37: 00 	mov    rdi,0x1
  00a3e:    	mov    rax,QWORD PTR [r14-0x68]
  00a42:    	mov    QWORD PTR [rsp-0x48],rax
  00a47: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a50:    	mov    r13,QWORD PTR [r13+0x8]
  00a54:    	mov    rax,QWORD PTR [r13+0x8]
  00a58:    	mov    QWORD PTR [rsp-0x30],rax
  00a5d:    	mov    rax,QWORD PTR [r13+0x0]
  00a61:    	mov    r13,QWORD PTR [r13+0x10]
  00a65:    	mov    rsi,QWORD PTR [rbx]
  00a68:    	mov    QWORD PTR [rsp-0x18],rsi
  00a6d:    	lea    rsi,[rsp-0x18]
  00a72:    	mov    QWORD PTR [rbx],rsi
  00a75:    	lea    r14,[rsp-0x10]
  00a7a:    	mov    QWORD PTR [rsp-0x20],r14
  00a7f:    	call   rax
  00a81:    	lea    r14,[rbp-0x8]
  00a85:    	mov    QWORD PTR [rbx],r14
  00a88:    	mov    r14,QWORD PTR [rbp-0x10]
  00a8c:    	test   rax,rax
  00a8f:    	je     0x380eb
:00046 
:00047 %7 = const[Vec]                      [<INVALID>]
  00a95: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff97ec]        # 0xffffa288
  00a9c: 00 	cmp    rax,QWORD PTR [rip+0xb85]        # 0x1628
  00aa3:    	jne    0x380fa
  00aa9: 00 	mov    rax,QWORD PTR [rip+0xb68]        # 0x1618
  00ab0:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [<INVALID>]
  00ab4:    	mov    rdi,QWORD PTR [r14-0x38]
  00ab8: 95 	movabs rax,0x55955d949d50
  00ac2:    	call   rax
  00ac4:    	mov    r15d,eax
  00ac7: 95 	movabs r13,0x55955e173f60
  00ad1:    	cmp    QWORD PTR [r13+0x8],0x0
  00ad6:    	je     0x38140
  00adc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ae0:    	jne    0x38140
  00ae6:    	mov    eax,DWORD PTR [rip+0xffffffffffff9787]        # 0xffffa273
  00aec:    	cmp    DWORD PTR [r13-0x4],eax
  00af0:    	jne    0x38140
  00af6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00aff:    	mov    rax,QWORD PTR [r14-0x38]
  00b03:    	mov    QWORD PTR [rsp-0x40],rax
  00b08: 00 	mov    rdi,0x0
  00b0f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b18:    	mov    r13,QWORD PTR [r13+0x8]
  00b1c:    	mov    rax,QWORD PTR [r13+0x8]
  00b20:    	mov    QWORD PTR [rsp-0x30],rax
  00b25:    	mov    rax,QWORD PTR [r13+0x0]
  00b29:    	mov    r13,QWORD PTR [r13+0x10]
  00b2d:    	mov    rsi,QWORD PTR [rbx]
  00b30:    	mov    QWORD PTR [rsp-0x18],rsi
  00b35:    	lea    rsi,[rsp-0x18]
  00b3a:    	mov    QWORD PTR [rbx],rsi
  00b3d:    	lea    r14,[rsp-0x10]
  00b42:    	mov    QWORD PTR [rsp-0x20],r14
  00b47:    	call   rax
  00b49:    	lea    r14,[rbp-0x8]
  00b4d:    	mov    QWORD PTR [rbx],r14
  00b50:    	mov    r14,QWORD PTR [rbp-0x10]
  00b54:    	test   rax,rax
  00b57:    	je     0x38181
  00b5d:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [<INVALID>]
  00b61:    	mov    rdi,QWORD PTR [r14-0x70]
  00b65: 95 	movabs rax,0x55955d949d50
  00b6f:    	call   rax
  00b71:    	mov    r15d,eax
  00b74: 95 	movabs r13,0x55955e173f80
  00b7e:    	cmp    QWORD PTR [r13+0x8],0x0
  00b83:    	je     0x38190
  00b89:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b8d:    	jne    0x38190
  00b93:    	mov    eax,DWORD PTR [rip+0xffffffffffff96da]        # 0xffffa273
  00b99:    	cmp    DWORD PTR [r13-0x4],eax
  00b9d:    	jne    0x38190
  00ba3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00bac:    	mov    rax,QWORD PTR [r14-0x70]
  00bb0:    	mov    QWORD PTR [rsp-0x40],rax
  00bb5: 00 	mov    rdi,0x0
  00bbc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00bc5:    	mov    r13,QWORD PTR [r13+0x8]
  00bc9:    	mov    rax,QWORD PTR [r13+0x8]
  00bcd:    	mov    QWORD PTR [rsp-0x30],rax
  00bd2:    	mov    rax,QWORD PTR [r13+0x0]
  00bd6:    	mov    r13,QWORD PTR [r13+0x10]
  00bda:    	mov    rsi,QWORD PTR [rbx]
  00bdd:    	mov    QWORD PTR [rsp-0x18],rsi
  00be2:    	lea    rsi,[rsp-0x18]
  00be7:    	mov    QWORD PTR [rbx],rsi
  00bea:    	lea    r14,[rsp-0x10]
  00bef:    	mov    QWORD PTR [rsp-0x20],r14
  00bf4:    	call   rax
  00bf6:    	lea    r14,[rbp-0x8]
  00bfa:    	mov    QWORD PTR [rbx],r14
  00bfd:    	mov    r14,QWORD PTR [rbp-0x10]
  00c01:    	test   rax,rax
  00c04:    	je     0x381d1
  00c0a:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [<INVALID>]
  00c0e:    	mov    rdi,QWORD PTR [r14-0x38]
  00c12: 95 	movabs rax,0x55955d949d50
  00c1c:    	call   rax
  00c1e:    	mov    r15d,eax
  00c21: 95 	movabs r13,0x55955e173fa0
  00c2b:    	cmp    QWORD PTR [r13+0x8],0x0
  00c30:    	je     0x381e0
  00c36:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c3a:    	jne    0x381e0
  00c40:    	mov    eax,DWORD PTR [rip+0xffffffffffff962d]        # 0xffffa273
  00c46:    	cmp    DWORD PTR [r13-0x4],eax
  00c4a:    	jne    0x381e0
  00c50: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c59:    	mov    rax,QWORD PTR [r14-0x38]
  00c5d:    	mov    QWORD PTR [rsp-0x40],rax
  00c62: 00 	mov    rdi,0x0
  00c69: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c72:    	mov    r13,QWORD PTR [r13+0x8]
  00c76:    	mov    rax,QWORD PTR [r13+0x8]
  00c7a:    	mov    QWORD PTR [rsp-0x30],rax
  00c7f:    	mov    rax,QWORD PTR [r13+0x0]
  00c83:    	mov    r13,QWORD PTR [r13+0x10]
  00c87:    	mov    rsi,QWORD PTR [rbx]
  00c8a:    	mov    QWORD PTR [rsp-0x18],rsi
  00c8f:    	lea    rsi,[rsp-0x18]
  00c94:    	mov    QWORD PTR [rbx],rsi
  00c97:    	lea    r14,[rsp-0x10]
  00c9c:    	mov    QWORD PTR [rsp-0x20],r14
  00ca1:    	call   rax
  00ca3:    	lea    r14,[rbp-0x8]
  00ca7:    	mov    QWORD PTR [rbx],r14
  00caa:    	mov    r14,QWORD PTR [rbp-0x10]
  00cae:    	test   rax,rax
  00cb1:    	je     0x38221
  00cb7:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [<INVALID>]
  00cbb:    	mov    rdi,QWORD PTR [r14-0x78]
  00cbf: 95 	movabs rax,0x55955d949d50
  00cc9:    	call   rax
  00ccb:    	mov    r15d,eax
  00cce: 95 	movabs r13,0x55955e173fc0
  00cd8:    	cmp    QWORD PTR [r13+0x8],0x0
  00cdd:    	je     0x38230
  00ce3:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ce7:    	jne    0x38230
  00ced:    	mov    eax,DWORD PTR [rip+0xffffffffffff9580]        # 0xffffa273
  00cf3:    	cmp    DWORD PTR [r13-0x4],eax
  00cf7:    	jne    0x38230
  00cfd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d06:    	mov    rax,QWORD PTR [r14-0x78]
  00d0a:    	mov    QWORD PTR [rsp-0x40],rax
  00d0f: 00 	mov    rdi,0x0
  00d16: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d1f:    	mov    r13,QWORD PTR [r13+0x8]
  00d23:    	mov    rax,QWORD PTR [r13+0x8]
  00d27:    	mov    QWORD PTR [rsp-0x30],rax
  00d2c:    	mov    rax,QWORD PTR [r13+0x0]
  00d30:    	mov    r13,QWORD PTR [r13+0x10]
  00d34:    	mov    rsi,QWORD PTR [rbx]
  00d37:    	mov    QWORD PTR [rsp-0x18],rsi
  00d3c:    	lea    rsi,[rsp-0x18]
  00d41:    	mov    QWORD PTR [rbx],rsi
  00d44:    	lea    r14,[rsp-0x10]
  00d49:    	mov    QWORD PTR [rsp-0x20],r14
  00d4e:    	call   rax
  00d50:    	lea    r14,[rbp-0x8]
  00d54:    	mov    QWORD PTR [rbx],r14
  00d57:    	mov    r14,QWORD PTR [rbp-0x10]
  00d5b:    	test   rax,rax
  00d5e:    	je     0x38271
  00d64:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [<INVALID>][<INVALID>]
  00d68:    	mov    rdi,QWORD PTR [r14-0x60]
  00d6c:    	mov    rsi,QWORD PTR [r14-0x78]
  00d70:    	mov    rdx,rdi
  00d73:    	mov    rcx,rsi
  00d76:    	mov    rdi,rbx
  00d79:    	mov    rsi,r12
  00d7c: 95 	movabs rax,0x55955d95cbb0
  00d86:    	call   rax
  00d88: 95 	movabs r13,0x55955e173fe0
  00d92:    	test   rax,rax
  00d95:    	je     0xffff5fdc
  00d9b:    	mov    QWORD PTR [r14-0x78],rax
:00057 %8 = %8 + %9                         [<INVALID>][<INVALID>]
  00d9f:    	mov    rdi,QWORD PTR [r14-0x70]
  00da3:    	mov    rsi,QWORD PTR [r14-0x78]
  00da7:    	mov    rdx,rdi
  00daa:    	mov    rcx,rsi
  00dad:    	mov    rdi,rbx
  00db0:    	mov    rsi,r12
  00db3: 95 	movabs rax,0x55955d95ac30
  00dbd:    	call   rax
  00dbf: 95 	movabs r13,0x55955e173ff0
  00dc9:    	test   rax,rax
  00dcc:    	je     0xffff5fdc
  00dd2:    	mov    QWORD PTR [r14-0x70],rax
:00058 %9 = %1.call org()                   [<INVALID>]
  00dd6:    	mov    rdi,QWORD PTR [r14-0x38]
  00dda: 95 	movabs rax,0x55955d949d50
  00de4:    	call   rax
  00de6:    	mov    r15d,eax
  00de9: 95 	movabs r13,0x55955e174000
  00df3:    	cmp    QWORD PTR [r13+0x8],0x0
  00df8:    	je     0x38280
  00dfe:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e02:    	jne    0x38280
  00e08:    	mov    eax,DWORD PTR [rip+0xffffffffffff9465]        # 0xffffa273
  00e0e:    	cmp    DWORD PTR [r13-0x4],eax
  00e12:    	jne    0x38280
  00e18: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e21:    	mov    rax,QWORD PTR [r14-0x38]
  00e25:    	mov    QWORD PTR [rsp-0x40],rax
  00e2a: 00 	mov    rdi,0x0
  00e31: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e3a:    	mov    r13,QWORD PTR [r13+0x8]
  00e3e:    	mov    rax,QWORD PTR [r13+0x8]
  00e42:    	mov    QWORD PTR [rsp-0x30],rax
  00e47:    	mov    rax,QWORD PTR [r13+0x0]
  00e4b:    	mov    r13,QWORD PTR [r13+0x10]
  00e4f:    	mov    rsi,QWORD PTR [rbx]
  00e52:    	mov    QWORD PTR [rsp-0x18],rsi
  00e57:    	lea    rsi,[rsp-0x18]
  00e5c:    	mov    QWORD PTR [rbx],rsi
  00e5f:    	lea    r14,[rsp-0x10]
  00e64:    	mov    QWORD PTR [rsp-0x20],r14
  00e69:    	call   rax
  00e6b:    	lea    r14,[rbp-0x8]
  00e6f:    	mov    QWORD PTR [rbx],r14
  00e72:    	mov    r14,QWORD PTR [rbp-0x10]
  00e76:    	test   rax,rax
  00e79:    	je     0x382c1
  00e7f:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [<INVALID>]
  00e83:    	mov    rdi,QWORD PTR [r14-0x78]
  00e87: 95 	movabs rax,0x55955d949d50
  00e91:    	call   rax
  00e93:    	mov    r15d,eax
  00e96: 95 	movabs r13,0x55955e174020
  00ea0:    	cmp    QWORD PTR [r13+0x8],0x0
  00ea5:    	je     0x382d0
  00eab:    	cmp    r15d,DWORD PTR [r13-0x8]
  00eaf:    	jne    0x382d0
  00eb5:    	mov    eax,DWORD PTR [rip+0xffffffffffff93b8]        # 0xffffa273
  00ebb:    	cmp    DWORD PTR [r13-0x4],eax
  00ebf:    	jne    0x382d0
  00ec5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ece:    	mov    rax,QWORD PTR [r14-0x78]
  00ed2:    	mov    QWORD PTR [rsp-0x40],rax
  00ed7: 00 	mov    rdi,0x0
  00ede: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ee7:    	mov    r13,QWORD PTR [r13+0x8]
  00eeb:    	mov    rax,QWORD PTR [r13+0x8]
  00eef:    	mov    QWORD PTR [rsp-0x30],rax
  00ef4:    	mov    rax,QWORD PTR [r13+0x0]
  00ef8:    	mov    r13,QWORD PTR [r13+0x10]
  00efc:    	mov    rsi,QWORD PTR [rbx]
  00eff:    	mov    QWORD PTR [rsp-0x18],rsi
  00f04:    	lea    rsi,[rsp-0x18]
  00f09:    	mov    QWORD PTR [rbx],rsi
  00f0c:    	lea    r14,[rsp-0x10]
  00f11:    	mov    QWORD PTR [rsp-0x20],r14
  00f16:    	call   rax
  00f18:    	lea    r14,[rbp-0x8]
  00f1c:    	mov    QWORD PTR [rbx],r14
  00f1f:    	mov    r14,QWORD PTR [rbp-0x10]
  00f23:    	test   rax,rax
  00f26:    	je     0x38311
  00f2c:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [<INVALID>]
  00f30:    	mov    rdi,QWORD PTR [r14-0x38]
  00f34: 95 	movabs rax,0x55955d949d50
  00f3e:    	call   rax
  00f40:    	mov    r15d,eax
  00f43: 95 	movabs r13,0x55955e174040
  00f4d:    	cmp    QWORD PTR [r13+0x8],0x0
  00f52:    	je     0x38320
  00f58:    	cmp    r15d,DWORD PTR [r13-0x8]
  00f5c:    	jne    0x38320
  00f62:    	mov    eax,DWORD PTR [rip+0xffffffffffff930b]        # 0xffffa273
  00f68:    	cmp    DWORD PTR [r13-0x4],eax
  00f6c:    	jne    0x38320
  00f72: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f7b:    	mov    rax,QWORD PTR [r14-0x38]
  00f7f:    	mov    QWORD PTR [rsp-0x40],rax
  00f84: 00 	mov    rdi,0x0
  00f8b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f94:    	mov    r13,QWORD PTR [r13+0x8]
  00f98:    	mov    rax,QWORD PTR [r13+0x8]
  00f9c:    	mov    QWORD PTR [rsp-0x30],rax
  00fa1:    	mov    rax,QWORD PTR [r13+0x0]
  00fa5:    	mov    r13,QWORD PTR [r13+0x10]
  00fa9:    	mov    rsi,QWORD PTR [rbx]
  00fac:    	mov    QWORD PTR [rsp-0x18],rsi
  00fb1:    	lea    rsi,[rsp-0x18]
  00fb6:    	mov    QWORD PTR [rbx],rsi
  00fb9:    	lea    r14,[rsp-0x10]
  00fbe:    	mov    QWORD PTR [rsp-0x20],r14
  00fc3:    	call   rax
  00fc5:    	lea    r14,[rbp-0x8]
  00fc9:    	mov    QWORD PTR [rbx],r14
  00fcc:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd0:    	test   rax,rax
  00fd3:    	je     0x38361
  00fd9:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [<INVALID>]
  00fdd:    	mov    rdi,QWORD PTR [r14-0x80]
  00fe1: 95 	movabs rax,0x55955d949d50
  00feb:    	call   rax
  00fed:    	mov    r15d,eax
  00ff0: 95 	movabs r13,0x55955e174060
  00ffa:    	cmp    QWORD PTR [r13+0x8],0x0
  00fff:    	je     0x38370
  01005:    	cmp    r15d,DWORD PTR [r13-0x8]
  01009:    	jne    0x38370
  0100f:    	mov    eax,DWORD PTR [rip+0xffffffffffff925e]        # 0xffffa273
  01015:    	cmp    DWORD PTR [r13-0x4],eax
  01019:    	jne    0x38370
  0101f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01028:    	mov    rax,QWORD PTR [r14-0x80]
  0102c:    	mov    QWORD PTR [rsp-0x40],rax
  01031: 00 	mov    rdi,0x0
  01038: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01041:    	mov    r13,QWORD PTR [r13+0x8]
  01045:    	mov    rax,QWORD PTR [r13+0x8]
  01049:    	mov    QWORD PTR [rsp-0x30],rax
  0104e:    	mov    rax,QWORD PTR [r13+0x0]
  01052:    	mov    r13,QWORD PTR [r13+0x10]
  01056:    	mov    rsi,QWORD PTR [rbx]
  01059:    	mov    QWORD PTR [rsp-0x18],rsi
  0105e:    	lea    rsi,[rsp-0x18]
  01063:    	mov    QWORD PTR [rbx],rsi
  01066:    	lea    r14,[rsp-0x10]
  0106b:    	mov    QWORD PTR [rsp-0x20],r14
  01070:    	call   rax
  01072:    	lea    r14,[rbp-0x8]
  01076:    	mov    QWORD PTR [rbx],r14
  01079:    	mov    r14,QWORD PTR [rbp-0x10]
  0107d:    	test   rax,rax
  01080:    	je     0x383b1
  01086:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  0108a:    	mov    rdi,QWORD PTR [r14-0x60]
  0108e:    	mov    rsi,QWORD PTR [r14-0x80]
  01092:    	mov    rdx,rdi
  01095:    	mov    rcx,rsi
  01098:    	mov    rdi,rbx
  0109b:    	mov    rsi,r12
  0109e: 95 	movabs rax,0x55955d95cbb0
  010a8:    	call   rax
  010aa: 95 	movabs r13,0x55955e174080
  010b4:    	test   rax,rax
  010b7:    	je     0xffff5fdc
  010bd:    	mov    QWORD PTR [r14-0x80],rax
:00067 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  010c1:    	mov    rdi,QWORD PTR [r14-0x78]
  010c5:    	mov    rsi,QWORD PTR [r14-0x80]
  010c9:    	mov    rdx,rdi
  010cc:    	mov    rcx,rsi
  010cf:    	mov    rdi,rbx
  010d2:    	mov    rsi,r12
  010d5: 95 	movabs rax,0x55955d95ac30
  010df:    	call   rax
  010e1: 95 	movabs r13,0x55955e174090
  010eb:    	test   rax,rax
  010ee:    	je     0xffff5fdc
  010f4:    	mov    QWORD PTR [r14-0x78],rax
:00068 %10 = %1.call org()                  [<INVALID>]
  010f8:    	mov    rdi,QWORD PTR [r14-0x38]
  010fc: 95 	movabs rax,0x55955d949d50
  01106:    	call   rax
  01108:    	mov    r15d,eax
  0110b: 95 	movabs r13,0x55955e1740a0
  01115:    	cmp    QWORD PTR [r13+0x8],0x0
  0111a:    	je     0x383c0
  01120:    	cmp    r15d,DWORD PTR [r13-0x8]
  01124:    	jne    0x383c0
  0112a:    	mov    eax,DWORD PTR [rip+0xffffffffffff9143]        # 0xffffa273
  01130:    	cmp    DWORD PTR [r13-0x4],eax
  01134:    	jne    0x383c0
  0113a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01143:    	mov    rax,QWORD PTR [r14-0x38]
  01147:    	mov    QWORD PTR [rsp-0x40],rax
  0114c: 00 	mov    rdi,0x0
  01153: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0115c:    	mov    r13,QWORD PTR [r13+0x8]
  01160:    	mov    rax,QWORD PTR [r13+0x8]
  01164:    	mov    QWORD PTR [rsp-0x30],rax
  01169:    	mov    rax,QWORD PTR [r13+0x0]
  0116d:    	mov    r13,QWORD PTR [r13+0x10]
  01171:    	mov    rsi,QWORD PTR [rbx]
  01174:    	mov    QWORD PTR [rsp-0x18],rsi
  01179:    	lea    rsi,[rsp-0x18]
  0117e:    	mov    QWORD PTR [rbx],rsi
  01181:    	lea    r14,[rsp-0x10]
  01186:    	mov    QWORD PTR [rsp-0x20],r14
  0118b:    	call   rax
  0118d:    	lea    r14,[rbp-0x8]
  01191:    	mov    QWORD PTR [rbx],r14
  01194:    	mov    r14,QWORD PTR [rbp-0x10]
  01198:    	test   rax,rax
  0119b:    	je     0x38401
  011a1:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [<INVALID>]
  011a5:    	mov    rdi,QWORD PTR [r14-0x80]
  011a9: 95 	movabs rax,0x55955d949d50
  011b3:    	call   rax
  011b5:    	mov    r15d,eax
  011b8: 95 	movabs r13,0x55955e1740c0
  011c2:    	cmp    QWORD PTR [r13+0x8],0x0
  011c7:    	je     0x38410
  011cd:    	cmp    r15d,DWORD PTR [r13-0x8]
  011d1:    	jne    0x38410
  011d7:    	mov    eax,DWORD PTR [rip+0xffffffffffff9096]        # 0xffffa273
  011dd:    	cmp    DWORD PTR [r13-0x4],eax
  011e1:    	jne    0x38410
  011e7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011f0:    	mov    rax,QWORD PTR [r14-0x80]
  011f4:    	mov    QWORD PTR [rsp-0x40],rax
  011f9: 00 	mov    rdi,0x0
  01200: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01209:    	mov    r13,QWORD PTR [r13+0x8]
  0120d:    	mov    rax,QWORD PTR [r13+0x8]
  01211:    	mov    QWORD PTR [rsp-0x30],rax
  01216:    	mov    rax,QWORD PTR [r13+0x0]
  0121a:    	mov    r13,QWORD PTR [r13+0x10]
  0121e:    	mov    rsi,QWORD PTR [rbx]
  01221:    	mov    QWORD PTR [rsp-0x18],rsi
  01226:    	lea    rsi,[rsp-0x18]
  0122b:    	mov    QWORD PTR [rbx],rsi
  0122e:    	lea    r14,[rsp-0x10]
  01233:    	mov    QWORD PTR [rsp-0x20],r14
  01238:    	call   rax
  0123a:    	lea    r14,[rbp-0x8]
  0123e:    	mov    QWORD PTR [rbx],r14
  01241:    	mov    r14,QWORD PTR [rbp-0x10]
  01245:    	test   rax,rax
  01248:    	je     0x38451
  0124e:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [<INVALID>]
  01252:    	mov    rdi,QWORD PTR [r14-0x38]
  01256: 95 	movabs rax,0x55955d949d50
  01260:    	call   rax
  01262:    	mov    r15d,eax
  01265: 95 	movabs r13,0x55955e1740e0
  0126f:    	cmp    QWORD PTR [r13+0x8],0x0
  01274:    	je     0x38460
  0127a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0127e:    	jne    0x38460
  01284:    	mov    eax,DWORD PTR [rip+0xffffffffffff8fe9]        # 0xffffa273
  0128a:    	cmp    DWORD PTR [r13-0x4],eax
  0128e:    	jne    0x38460
  01294: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0129d:    	mov    rax,QWORD PTR [r14-0x38]
  012a1:    	mov    QWORD PTR [rsp-0x40],rax
  012a6: 00 	mov    rdi,0x0
  012ad: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012b6:    	mov    r13,QWORD PTR [r13+0x8]
  012ba:    	mov    rax,QWORD PTR [r13+0x8]
  012be:    	mov    QWORD PTR [rsp-0x30],rax
  012c3:    	mov    rax,QWORD PTR [r13+0x0]
  012c7:    	mov    r13,QWORD PTR [r13+0x10]
  012cb:    	mov    rsi,QWORD PTR [rbx]
  012ce:    	mov    QWORD PTR [rsp-0x18],rsi
  012d3:    	lea    rsi,[rsp-0x18]
  012d8:    	mov    QWORD PTR [rbx],rsi
  012db:    	lea    r14,[rsp-0x10]
  012e0:    	mov    QWORD PTR [rsp-0x20],r14
  012e5:    	call   rax
  012e7:    	lea    r14,[rbp-0x8]
  012eb:    	mov    QWORD PTR [rbx],r14
  012ee:    	mov    r14,QWORD PTR [rbp-0x10]
  012f2:    	test   rax,rax
  012f5:    	je     0x384a1
  012fb: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [<INVALID>]
  01302: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01309: 95 	movabs rax,0x55955d949d50
  01313:    	call   rax
  01315:    	mov    r15d,eax
  01318: 95 	movabs r13,0x55955e174100
  01322:    	cmp    QWORD PTR [r13+0x8],0x0
  01327:    	je     0x384b0
  0132d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01331:    	jne    0x384b0
  01337:    	mov    eax,DWORD PTR [rip+0xffffffffffff8f36]        # 0xffffa273
  0133d:    	cmp    DWORD PTR [r13-0x4],eax
  01341:    	jne    0x384b0
  01347: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01350: ff 	mov    rax,QWORD PTR [r14-0x88]
  01357:    	mov    QWORD PTR [rsp-0x40],rax
  0135c: 00 	mov    rdi,0x0
  01363: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0136c:    	mov    r13,QWORD PTR [r13+0x8]
  01370:    	mov    rax,QWORD PTR [r13+0x8]
  01374:    	mov    QWORD PTR [rsp-0x30],rax
  01379:    	mov    rax,QWORD PTR [r13+0x0]
  0137d:    	mov    r13,QWORD PTR [r13+0x10]
  01381:    	mov    rsi,QWORD PTR [rbx]
  01384:    	mov    QWORD PTR [rsp-0x18],rsi
  01389:    	lea    rsi,[rsp-0x18]
  0138e:    	mov    QWORD PTR [rbx],rsi
  01391:    	lea    r14,[rsp-0x10]
  01396:    	mov    QWORD PTR [rsp-0x20],r14
  0139b:    	call   rax
  0139d:    	lea    r14,[rbp-0x8]
  013a1:    	mov    QWORD PTR [rbx],r14
  013a4:    	mov    r14,QWORD PTR [rbp-0x10]
  013a8:    	test   rax,rax
  013ab:    	je     0x384f4
  013b1: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  013b8:    	mov    rdi,QWORD PTR [r14-0x60]
  013bc: ff 	mov    rsi,QWORD PTR [r14-0x88]
  013c3:    	mov    rdx,rdi
  013c6:    	mov    rcx,rsi
  013c9:    	mov    rdi,rbx
  013cc:    	mov    rsi,r12
  013cf: 95 	movabs rax,0x55955d95cbb0
  013d9:    	call   rax
  013db: 95 	movabs r13,0x55955e174120
  013e5:    	test   rax,rax
  013e8:    	je     0xffff5fdc
  013ee: ff 	mov    QWORD PTR [r14-0x88],rax
:00077 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  013f5:    	mov    rdi,QWORD PTR [r14-0x80]
  013f9: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01400:    	mov    rdx,rdi
  01403:    	mov    rcx,rsi
  01406:    	mov    rdi,rbx
  01409:    	mov    rsi,r12
  0140c: 95 	movabs rax,0x55955d95ac30
  01416:    	call   rax
  01418: 95 	movabs r13,0x55955e174130
  01422:    	test   rax,rax
  01425:    	je     0xffff5fdc
  0142b:    	mov    QWORD PTR [r14-0x80],rax
:00078 %7 = %7.call new(%8; 3)              [<INVALID>]
  0142f:    	mov    rdi,QWORD PTR [r14-0x68]
  01433: 95 	movabs rax,0x55955d949d50
  0143d:    	call   rax
  0143f:    	mov    r15d,eax
  01442: 95 	movabs r13,0x55955e174140
  0144c:    	cmp    QWORD PTR [r13+0x8],0x0
  01451:    	je     0x38503
  01457:    	cmp    r15d,DWORD PTR [r13-0x8]
  0145b:    	jne    0x38503
  01461:    	mov    eax,DWORD PTR [rip+0xffffffffffff8e0c]        # 0xffffa273
  01467:    	cmp    DWORD PTR [r13-0x4],eax
  0146b:    	jne    0x38503
  01471: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0147a:    	mov    rax,QWORD PTR [r14-0x68]
  0147e:    	mov    QWORD PTR [rsp-0x40],rax
  01483: 00 	mov    rdi,0x3
  0148a:    	mov    rax,QWORD PTR [r14-0x70]
  0148e:    	mov    QWORD PTR [rsp-0x48],rax
  01493:    	mov    rax,QWORD PTR [r14-0x78]
  01497:    	mov    QWORD PTR [rsp-0x50],rax
  0149c:    	mov    rax,QWORD PTR [r14-0x80]
  014a0:    	mov    QWORD PTR [rsp-0x58],rax
  014a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  014ae:    	mov    r13,QWORD PTR [r13+0x8]
  014b2:    	mov    rax,QWORD PTR [r13+0x8]
  014b6:    	mov    QWORD PTR [rsp-0x30],rax
  014bb:    	mov    rax,QWORD PTR [r13+0x0]
  014bf:    	mov    r13,QWORD PTR [r13+0x10]
  014c3:    	mov    rsi,QWORD PTR [rbx]
  014c6:    	mov    QWORD PTR [rsp-0x18],rsi
  014cb:    	lea    rsi,[rsp-0x18]
  014d0:    	mov    QWORD PTR [rbx],rsi
  014d3:    	lea    r14,[rsp-0x10]
  014d8:    	mov    QWORD PTR [rsp-0x20],r14
  014dd:    	call   rax
  014df:    	lea    r14,[rbp-0x8]
  014e3:    	mov    QWORD PTR [rbx],r14
  014e6:    	mov    r14,QWORD PTR [rbp-0x10]
  014ea:    	test   rax,rax
  014ed:    	je     0x38544
  014f3:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [<INVALID>]
  014f7:    	mov    rdi,QWORD PTR [r14-0x40]
  014fb: 95 	movabs rax,0x55955d949d50
  01505:    	call   rax
  01507:    	mov    r15d,eax
  0150a: 95 	movabs r13,0x55955e174160
  01514:    	cmp    QWORD PTR [r13+0x8],0x0
  01519:    	je     0x38553
  0151f:    	cmp    r15d,DWORD PTR [r13-0x8]
  01523:    	jne    0x38553
  01529:    	mov    eax,DWORD PTR [rip+0xffffffffffff8d44]        # 0xffffa273
  0152f:    	cmp    DWORD PTR [r13-0x4],eax
  01533:    	jne    0x38553
  01539: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01542:    	mov    rax,QWORD PTR [r14-0x40]
  01546:    	mov    QWORD PTR [rsp-0x40],rax
  0154b: 00 	mov    rdi,0x1
  01552:    	mov    rax,QWORD PTR [r14-0x68]
  01556:    	mov    QWORD PTR [rsp-0x48],rax
  0155b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01564:    	mov    r13,QWORD PTR [r13+0x8]
  01568:    	mov    rax,QWORD PTR [r13+0x8]
  0156c:    	mov    QWORD PTR [rsp-0x30],rax
  01571:    	mov    rax,QWORD PTR [r13+0x0]
  01575:    	mov    r13,QWORD PTR [r13+0x10]
  01579:    	mov    rsi,QWORD PTR [rbx]
  0157c:    	mov    QWORD PTR [rsp-0x18],rsi
  01581:    	lea    rsi,[rsp-0x18]
  01586:    	mov    QWORD PTR [rbx],rsi
  01589:    	lea    r14,[rsp-0x10]
  0158e:    	mov    QWORD PTR [rsp-0x20],r14
  01593:    	call   rax
  01595:    	lea    r14,[rbp-0x8]
  01599:    	mov    QWORD PTR [rbx],r14
  0159c:    	mov    r14,QWORD PTR [rbp-0x10]
  015a0:    	test   rax,rax
  015a3:    	je     0x38594
:00081 
:00082 br =>:00083
  015a9:    	jmp    0x385e2
:00083 %7 = nil
  015ae: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  015b6:    	mov    rax,QWORD PTR [r14-0x68]
  015ba:    	leave  
  015bb:    	ret    
==> start whole compile: clamp FuncId(86) self_class:Scene start:[00000] bytecode:0x55955e137360
<== finished compile. elapsed:34.9µs
offset:Pos(46712) code: 485 bytes  data: 75 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x36fcb
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x36fda
  00035: cmp    DWORD PTR [rdi+0x4],0x35
  00039: jne    0x36fda
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  0003f: movq   xmm2,QWORD PTR [rip+0x1a1]        # 0x1e8
  00047: movabs rax,0x37f800000000002
  00051: mov    QWORD PTR [r14-0x48],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00055: mov    rdi,QWORD PTR [r14-0x38]
  00059: test   rdi,0x1
  00060: jne    0x36fe9
  00066: test   rdi,0x2
  0006d: je     0xa9
  00073: xorps  xmm3,xmm3
  00076: movabs rax,0x8000000000000002
  00080: cmp    rdi,rax
  00083: je     0xbb
  00089: mov    rax,rdi
  0008c: sar    rax,0x3f
  00090: add    rax,0x2
  00094: and    rdi,0xfffffffffffffffc
  00098: or     rdi,rax
  0009b: rol    rdi,0x3d
  0009f: movq   xmm3,rdi
  000a4: jmp    0xbb
  000a9: call   0xffff4a05
  000ae: test   rax,rax
  000b1: je     0x36fe9
  000b7: movq   xmm3,xmm0
  000bb: movq   xmm4,xmm3
  000bf: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000c3: movq   xmm2,QWORD PTR [rip+0x12d]        # 0x1f8
  000cb: movabs rax,0x37f000000000002
  000d5: mov    QWORD PTR [r14-0x48],rax
:00004 _%3 = %2 > %3                        [Float][Float]
:00005 condnotbr _%3 =>:00008
  000d9: ucomisd xmm4,xmm2
  000dd: jbe    0x36ff8
:00006 %2 = literal[255.0]
  000e3: movq   xmm4,QWORD PTR [rip+0x11d]        # 0x208
  000eb: movabs rax,0x37f000000000002
  000f5: mov    QWORD PTR [r14-0x40],rax
:00007 br =>:00008
  000f9: jmp    0x3701e
:00008 %3 = literal[0.0]
  000fe: movq   xmm2,QWORD PTR [rip+0x112]        # 0x218
  00106: movabs rax,0x8000000000000002
  00110: mov    QWORD PTR [r14-0x48],rax
:00009 _%3 = %2 < %3                        [Float][Float]
:00010 condnotbr _%3 =>:00013
  00114: ucomisd xmm4,xmm2
  00118: jae    0x37037
:00011 %2 = literal[0.0]
  0011e: movq   xmm4,QWORD PTR [rip+0x102]        # 0x228
  00126: movabs rax,0x8000000000000002
  00130: mov    QWORD PTR [r14-0x40],rax
:00012 br =>:00013
  00134: jmp    0x37050
:00013 %3 = %2.call to_i()                  [Float]
  00139: mov    rdi,QWORD PTR [r14-0x40]
  0013d: test   rdi,0x1
  00144: jne    0x37069
  0014a: test   rdi,0x2
  00151: jne    0x16e
  00157: test   rdi,0x7
  0015e: jne    0x37069
  00164: cmp    DWORD PTR [rdi+0x4],0x7
  00168: jne    0x37069
  0016e: cmp    DWORD PTR [rip+0xffffffffffff8ace],0x26        # 0xffff8c43
  00175: jne    0x37069
  0017b: mov    r9,0x0
  00182: mov    rdx,rdi
  00185: mov    QWORD PTR [rsp-0x40],rcx
  0018a: mov    QWORD PTR [rsp-0x28],0x0
  00193: lea    rcx,[r14-0x48]
  00197: mov    r8,0x0
  0019e: mov    rsi,QWORD PTR [rbx]
  001a1: mov    QWORD PTR [rsp-0x18],rsi
  001a6: lea    rsi,[rsp-0x18]
  001ab: mov    QWORD PTR [rbx],rsi
  001ae: lea    r14,[rsp-0x10]
  001b3: mov    QWORD PTR [rsp-0x20],r14
  001b8: call   0x37078
  001bd: lea    r14,[rbp-0x8]
  001c1: mov    QWORD PTR [rbx],r14
  001c4: mov    r14,QWORD PTR [rbp-0x10]
  001c8: movabs r13,0x55955e137450
  001d2: test   rax,rax
  001d5: je     0xffff49ac
  001db: mov    QWORD PTR [r14-0x48],rax
:00014 
:00015 ret %3
  001df: mov    rax,QWORD PTR [r14-0x48]
  001e3: leave  
  001e4: ret    
==> start whole compile: <unnamed> FuncId(109) self_class:Scene start:[00000] bytecode:0x55955e1a4040
<== finished compile. elapsed:17.5µs
offset:Pos(47272) code: 263 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x36e89
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x36e89
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(3, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax]
  0006c: mov    rax,QWORD PTR [rax]
  0006f: mov    rax,QWORD PTR [rax-0x30]
  00073: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7208961]
  00077: mov    rax,0xdc0003
  0007e: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  00082: mov    rdi,QWORD PTR [r14-0x40]
  00086: test   rdi,0x1
  0008d: je     0x36e98
  00093: cmp    DWORD PTR [rip+0xffffffffffff8979],0x26        # 0xffff8a13
  0009a: jne    0x36e98
  000a0: mov    r9,QWORD PTR [r14-0x48]
  000a4: mov    rdx,rdi
  000a7: mov    QWORD PTR [rsp-0x40],rcx
  000ac: mov    QWORD PTR [rsp-0x28],0x0
  000b5: lea    rcx,[r14-0x50]
  000b9: mov    r8,0x0
  000c0: mov    rsi,QWORD PTR [rbx]
  000c3: mov    QWORD PTR [rsp-0x18],rsi
  000c8: lea    rsi,[rsp-0x18]
  000cd: mov    QWORD PTR [rbx],rsi
  000d0: lea    r14,[rsp-0x10]
  000d5: mov    QWORD PTR [rsp-0x20],r14
  000da: call   0x36ea7
  000df: lea    r14,[rbp-0x8]
  000e3: mov    QWORD PTR [rbx],r14
  000e6: mov    r14,QWORD PTR [rbp-0x10]
  000ea: movabs r13,0x55955e1a4090
  000f4: test   rax,rax
  000f7: je     0xffff477c
  000fd: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  00101: mov    rax,QWORD PTR [r14-0x40]
  00105: leave  
  00106: ret    
==> start whole compile: <unnamed> FuncId(108) self_class:Scene start:[00000] bytecode:0x55955e182080
<== finished compile. elapsed:79.9µs
offset:Pos(47535) code: 3811 bytes  data: 110 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jge    0x3d
  00017: mov    eax,0x1
  0001c: sub    eax,edx
  0001e: test   rax,rax
  00021: je     0x3d
  00027: lea    rdi,[r14-0x40]
  0002b: mov    QWORD PTR [rdi+rax*8],0x4
  00033: sub    rax,0x1
  00037: jne    0x2b
  0003d: mov    rax,0x4
  00044: mov    QWORD PTR [r14-0x40],rax
  00048: mov    QWORD PTR [r14-0x48],rax
  0004c: mov    QWORD PTR [r14-0x50],rax
  00050: mov    QWORD PTR [r14-0x58],rax
  00054: mov    QWORD PTR [r14-0x60],rax
  00058: mov    QWORD PTR [r14-0x68],rax
  0005c: mov    QWORD PTR [r14-0x70],rax
  00060: mov    QWORD PTR [r14-0x78],rax
  00064: mov    rdi,QWORD PTR [r14-0x30]
  00068: test   rdi,0x7
  0006f: jne    0x36de1
  00075: cmp    DWORD PTR [rdi+0x4],0x35
  00079: jne    0x36de1
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffff889b]        # 0xffff8921
  00086: cmp    rax,QWORD PTR [rip+0xe74]        # 0xf01
  0008d: jne    0x36df0
  00093: mov    rax,QWORD PTR [rip+0xe57]        # 0xef1
  0009a: mov    QWORD PTR [r14-0x60],rax
:00002 %7 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0xe6b]        # 0xf11
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x68],rax
:00003 %8 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0xe65]        # 0xf21
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x70],rax
:00004 %9 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0xe5f]        # 0xf31
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x78],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x60]
  000e4: test   rdi,0x7
  000eb: jne    0x36e36
  000f1: cmp    DWORD PTR [rdi+0x4],0x2c
  000f5: jne    0x36e36
  000fb: cmp    DWORD PTR [rip+0xffffffffffff880a],0x26        # 0xffff890c
  00102: jne    0x36e36
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x68]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x36e45
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: movabs r13,0x55955e1820f0
  00189: test   rax,rax
  0018c: je     0xffff4675
  00192: mov    QWORD PTR [r14-0x40],rax
:00006 
:00007 %6 = dynvar(2, %3)
  00196: mov    rax,QWORD PTR [r14-0x18]
  0019a: mov    rax,QWORD PTR [rax]
  0019d: mov    rax,QWORD PTR [rax-0x30]
  001a1: mov    QWORD PTR [r14-0x60],rax
:00008 %7 = literal[7143425]
  001a5: mov    rax,0xda0003
  001ac: mov    QWORD PTR [r14-0x68],rax
:00009 _ = %6.call times(&%7)               [Integer]
  001b0: mov    rdi,QWORD PTR [r14-0x60]
  001b4: test   rdi,0x1
  001bb: je     0x36e77
  001c1: cmp    DWORD PTR [rip+0xffffffffffff8744],0x26        # 0xffff890c
  001c8: jne    0x36e77
  001ce: mov    r9,QWORD PTR [r14-0x68]
  001d2: sub    rsp,0x10
  001d6: movq   QWORD PTR [rsp],xmm3
  001db: movq   QWORD PTR [rsp+0x8],xmm4
  001e1: mov    rdx,rdi
  001e4: mov    QWORD PTR [rsp-0x40],rcx
  001e9: mov    QWORD PTR [rsp-0x28],0x0
  001f2: lea    rcx,[r14-0x70]
  001f6: mov    r8,0x0
  001fd: mov    rsi,QWORD PTR [rbx]
  00200: mov    QWORD PTR [rsp-0x18],rsi
  00205: lea    rsi,[rsp-0x18]
  0020a: mov    QWORD PTR [rbx],rsi
  0020d: lea    r14,[rsp-0x10]
  00212: mov    QWORD PTR [rsp-0x20],r14
  00217: call   0x36e86
  0021c: lea    r14,[rbp-0x8]
  00220: mov    QWORD PTR [rbx],r14
  00223: mov    r14,QWORD PTR [rbp-0x10]
  00227: movq   xmm3,QWORD PTR [rsp]
  0022c: movq   xmm4,QWORD PTR [rsp+0x8]
  00232: add    rsp,0x10
  00236: movabs r13,0x55955e182130
  00240: test   rax,rax
  00243: je     0xffff4675
:00010 
:00011 %6 = %2.call x()                     [Vec]
  00249: mov    rdi,QWORD PTR [r14-0x40]
  0024d: test   rdi,0x7
  00254: jne    0x36eb8
  0025a: cmp    DWORD PTR [rdi+0x4],0x2b
  0025e: jne    0x36eb8
  00264: cmp    DWORD PTR [rip+0xffffffffffff86a1],0x26        # 0xffff890c
  0026b: jne    0x36eb8
  00271: mov    esi,DWORD PTR [rip+0xcc6]        # 0xf3d
  00277: cmp    esi,0xffffffff
  0027a: je     0x36ec7
  00280: cmp    WORD PTR [rdi+0x2],0x3
  00285: jne    0x29e
  0028b: cmp    esi,0x6
  0028e: jge    0x29e
  00294: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00299: jmp    0x2c8
  0029e: sub    rsp,0x10
  002a2: movq   QWORD PTR [rsp],xmm3
  002a7: movq   QWORD PTR [rsp+0x8],xmm4
  002ad: movabs rax,0x55955d9e0e20
  002b7: call   rax
  002b9: movq   xmm3,QWORD PTR [rsp]
  002be: movq   xmm4,QWORD PTR [rsp+0x8]
  002c4: add    rsp,0x10
  002c8: mov    QWORD PTR [r14-0x60],rax
:00012 
:00013 %7 = dynvar(2, %4)
  002cc: mov    rax,QWORD PTR [r14-0x18]
  002d0: mov    rax,QWORD PTR [rax]
  002d3: mov    rax,QWORD PTR [rax-0x38]
  002d7: mov    QWORD PTR [r14-0x68],rax
:00014 %8 = dynvar(2, %4)
  002db: mov    rax,QWORD PTR [r14-0x18]
  002df: mov    rax,QWORD PTR [rax]
  002e2: mov    rax,QWORD PTR [rax-0x38]
  002e6: mov    QWORD PTR [r14-0x70],rax
:00015 %7 = %7 * %8                         [Float][Float]
  002ea: mov    rdi,QWORD PTR [r14-0x68]
  002ee: test   rdi,0x1
  002f5: jne    0x36f0e
  002fb: test   rdi,0x2
  00302: je     0x33e
  00308: xorps  xmm2,xmm2
  0030b: movabs rax,0x8000000000000002
  00315: cmp    rdi,rax
  00318: je     0x350
  0031e: mov    rax,rdi
  00321: sar    rax,0x3f
  00325: add    rax,0x2
  00329: and    rdi,0xfffffffffffffffc
  0032d: or     rdi,rax
  00330: rol    rdi,0x3d
  00334: movq   xmm2,rdi
  00339: jmp    0x350
  0033e: call   0xffff46ce
  00343: test   rax,rax
  00346: je     0x36f0e
  0034c: movq   xmm2,xmm0
  00350: mov    rdi,QWORD PTR [r14-0x70]
  00354: test   rdi,0x1
  0035b: jne    0x36f1d
  00361: test   rdi,0x2
  00368: je     0x3a4
  0036e: xorps  xmm3,xmm3
  00371: movabs rax,0x8000000000000002
  0037b: cmp    rdi,rax
  0037e: je     0x3b6
  00384: mov    rax,rdi
  00387: sar    rax,0x3f
  0038b: add    rax,0x2
  0038f: and    rdi,0xfffffffffffffffc
  00393: or     rdi,rax
  00396: rol    rdi,0x3d
  0039a: movq   xmm3,rdi
  0039f: jmp    0x3b6
  003a4: call   0xffff46ce
  003a9: test   rax,rax
  003ac: je     0x36f1d
  003b2: movq   xmm3,xmm0
  003b6: mulsd  xmm2,xmm3
:00016 %3 = %6 / %7                         [Float][Float]
  003ba: mov    rdi,QWORD PTR [r14-0x60]
  003be: test   rdi,0x1
  003c5: jne    0x36f2c
  003cb: test   rdi,0x2
  003d2: je     0x40e
  003d8: xorps  xmm5,xmm5
  003db: movabs rax,0x8000000000000002
  003e5: cmp    rdi,rax
  003e8: je     0x420
  003ee: mov    rax,rdi
  003f1: sar    rax,0x3f
  003f5: add    rax,0x2
  003f9: and    rdi,0xfffffffffffffffc
  003fd: or     rdi,rax
  00400: rol    rdi,0x3d
  00404: movq   xmm5,rdi
  00409: jmp    0x420
  0040e: call   0xffff46ce
  00413: test   rax,rax
  00416: je     0x36f2c
  0041c: movq   xmm5,xmm0
  00420: movq   xmm6,xmm5
  00424: movq   rax,xmm2
  00429: test   rax,rax
  0042c: je     0xffff469a
  00432: divsd  xmm6,xmm2
:00017 %6 = %2.call y()                     [Vec]
  00436: movq   xmm0,xmm6
  0043a: call   0xffff47f2
  0043f: mov    QWORD PTR [r14-0x48],rax
  00443: mov    rdi,QWORD PTR [r14-0x40]
  00447: test   rdi,0x7
  0044e: jne    0x36f48
  00454: cmp    DWORD PTR [rdi+0x4],0x2b
  00458: jne    0x36f48
  0045e: cmp    DWORD PTR [rip+0xffffffffffff84a7],0x26        # 0xffff890c
  00465: jne    0x36f48
  0046b: mov    esi,DWORD PTR [rip+0xad4]        # 0xf45
  00471: cmp    esi,0xffffffff
  00474: je     0x36f64
  0047a: cmp    WORD PTR [rdi+0x2],0x3
  0047f: jne    0x498
  00485: cmp    esi,0x6
  00488: jge    0x498
  0048e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00493: jmp    0x4ce
  00498: sub    rsp,0x20
  0049c: movq   QWORD PTR [rsp],xmm2
  004a1: movq   QWORD PTR [rsp+0x8],xmm3
  004a7: movq   QWORD PTR [rsp+0x10],xmm4
  004ad: movabs rax,0x55955d9e0e20
  004b7: call   rax
  004b9: movq   xmm2,QWORD PTR [rsp]
  004be: movq   xmm3,QWORD PTR [rsp+0x8]
  004c4: movq   xmm4,QWORD PTR [rsp+0x10]
  004ca: add    rsp,0x20
  004ce: mov    QWORD PTR [r14-0x60],rax
:00018 
:00019 %7 = dynvar(2, %4)
  004d2: mov    rax,QWORD PTR [r14-0x18]
  004d6: mov    rax,QWORD PTR [rax]
  004d9: mov    rax,QWORD PTR [rax-0x38]
  004dd: mov    QWORD PTR [r14-0x68],rax
:00020 %8 = dynvar(2, %4)
  004e1: mov    rax,QWORD PTR [r14-0x18]
  004e5: mov    rax,QWORD PTR [rax]
  004e8: mov    rax,QWORD PTR [rax-0x38]
  004ec: mov    QWORD PTR [r14-0x70],rax
:00021 %7 = %7 * %8                         [Float][Float]
  004f0: mov    rdi,QWORD PTR [r14-0x68]
  004f4: test   rdi,0x1
  004fb: jne    0x36fb7
  00501: test   rdi,0x2
  00508: je     0x544
  0050e: xorps  xmm2,xmm2
  00511: movabs rax,0x8000000000000002
  0051b: cmp    rdi,rax
  0051e: je     0x556
  00524: mov    rax,rdi
  00527: sar    rax,0x3f
  0052b: add    rax,0x2
  0052f: and    rdi,0xfffffffffffffffc
  00533: or     rdi,rax
  00536: rol    rdi,0x3d
  0053a: movq   xmm2,rdi
  0053f: jmp    0x556
  00544: call   0xffff46ce
  00549: test   rax,rax
  0054c: je     0x36fb7
  00552: movq   xmm2,xmm0
  00556: mov    rdi,QWORD PTR [r14-0x70]
  0055a: test   rdi,0x1
  00561: jne    0x36fc6
  00567: test   rdi,0x2
  0056e: je     0x5aa
  00574: xorps  xmm3,xmm3
  00577: movabs rax,0x8000000000000002
  00581: cmp    rdi,rax
  00584: je     0x5bc
  0058a: mov    rax,rdi
  0058d: sar    rax,0x3f
  00591: add    rax,0x2
  00595: and    rdi,0xfffffffffffffffc
  00599: or     rdi,rax
  0059c: rol    rdi,0x3d
  005a0: movq   xmm3,rdi
  005a5: jmp    0x5bc
  005aa: call   0xffff46ce
  005af: test   rax,rax
  005b2: je     0x36fc6
  005b8: movq   xmm3,xmm0
  005bc: mulsd  xmm2,xmm3
:00022 %4 = %6 / %7                         [Float][Float]
  005c0: mov    rdi,QWORD PTR [r14-0x60]
  005c4: test   rdi,0x1
  005cb: jne    0x36fd5
  005d1: test   rdi,0x2
  005d8: je     0x614
  005de: xorps  xmm5,xmm5
  005e1: movabs rax,0x8000000000000002
  005eb: cmp    rdi,rax
  005ee: je     0x626
  005f4: mov    rax,rdi
  005f7: sar    rax,0x3f
  005fb: add    rax,0x2
  005ff: and    rdi,0xfffffffffffffffc
  00603: or     rdi,rax
  00606: rol    rdi,0x3d
  0060a: movq   xmm5,rdi
  0060f: jmp    0x626
  00614: call   0xffff46ce
  00619: test   rax,rax
  0061c: je     0x36fd5
  00622: movq   xmm5,xmm0
  00626: movq   xmm6,xmm5
  0062a: movq   rax,xmm2
  0062f: test   rax,rax
  00632: je     0xffff469a
  00638: divsd  xmm6,xmm2
:00023 %6 = %2.call z()                     [Vec]
  0063c: movq   xmm0,xmm6
  00640: call   0xffff47f2
  00645: mov    QWORD PTR [r14-0x50],rax
  00649: mov    rdi,QWORD PTR [r14-0x40]
  0064d: test   rdi,0x7
  00654: jne    0x36ff1
  0065a: cmp    DWORD PTR [rdi+0x4],0x2b
  0065e: jne    0x36ff1
  00664: cmp    DWORD PTR [rip+0xffffffffffff82a1],0x26        # 0xffff890c
  0066b: jne    0x36ff1
  00671: mov    esi,DWORD PTR [rip+0x8d6]        # 0xf4d
  00677: cmp    esi,0xffffffff
  0067a: je     0x3700d
  00680: cmp    WORD PTR [rdi+0x2],0x3
  00685: jne    0x69e
  0068b: cmp    esi,0x6
  0068e: jge    0x69e
  00694: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00699: jmp    0x6d4
  0069e: sub    rsp,0x20
  006a2: movq   QWORD PTR [rsp],xmm2
  006a7: movq   QWORD PTR [rsp+0x8],xmm3
  006ad: movq   QWORD PTR [rsp+0x10],xmm4
  006b3: movabs rax,0x55955d9e0e20
  006bd: call   rax
  006bf: movq   xmm2,QWORD PTR [rsp]
  006c4: movq   xmm3,QWORD PTR [rsp+0x8]
  006ca: movq   xmm4,QWORD PTR [rsp+0x10]
  006d0: add    rsp,0x20
  006d4: mov    QWORD PTR [r14-0x60],rax
:00024 
:00025 %7 = dynvar(2, %4)
  006d8: mov    rax,QWORD PTR [r14-0x18]
  006dc: mov    rax,QWORD PTR [rax]
  006df: mov    rax,QWORD PTR [rax-0x38]
  006e3: mov    QWORD PTR [r14-0x68],rax
:00026 %8 = dynvar(2, %4)
  006e7: mov    rax,QWORD PTR [r14-0x18]
  006eb: mov    rax,QWORD PTR [rax]
  006ee: mov    rax,QWORD PTR [rax-0x38]
  006f2: mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7 * %8                         [Float][Float]
  006f6: mov    rdi,QWORD PTR [r14-0x68]
  006fa: test   rdi,0x1
  00701: jne    0x37060
  00707: test   rdi,0x2
  0070e: je     0x74a
  00714: xorps  xmm2,xmm2
  00717: movabs rax,0x8000000000000002
  00721: cmp    rdi,rax
  00724: je     0x75c
  0072a: mov    rax,rdi
  0072d: sar    rax,0x3f
  00731: add    rax,0x2
  00735: and    rdi,0xfffffffffffffffc
  00739: or     rdi,rax
  0073c: rol    rdi,0x3d
  00740: movq   xmm2,rdi
  00745: jmp    0x75c
  0074a: call   0xffff46ce
  0074f: test   rax,rax
  00752: je     0x37060
  00758: movq   xmm2,xmm0
  0075c: mov    rdi,QWORD PTR [r14-0x70]
  00760: test   rdi,0x1
  00767: jne    0x3706f
  0076d: test   rdi,0x2
  00774: je     0x7b0
  0077a: xorps  xmm3,xmm3
  0077d: movabs rax,0x8000000000000002
  00787: cmp    rdi,rax
  0078a: je     0x7c2
  00790: mov    rax,rdi
  00793: sar    rax,0x3f
  00797: add    rax,0x2
  0079b: and    rdi,0xfffffffffffffffc
  0079f: or     rdi,rax
  007a2: rol    rdi,0x3d
  007a6: movq   xmm3,rdi
  007ab: jmp    0x7c2
  007b0: call   0xffff46ce
  007b5: test   rax,rax
  007b8: je     0x3706f
  007be: movq   xmm3,xmm0
  007c2: mulsd  xmm2,xmm3
:00028 %5 = %6 / %7                         [Float][Float]
  007c6: mov    rdi,QWORD PTR [r14-0x60]
  007ca: test   rdi,0x1
  007d1: jne    0x3707e
  007d7: test   rdi,0x2
  007de: je     0x81a
  007e4: xorps  xmm5,xmm5
  007e7: movabs rax,0x8000000000000002
  007f1: cmp    rdi,rax
  007f4: je     0x82c
  007fa: mov    rax,rdi
  007fd: sar    rax,0x3f
  00801: add    rax,0x2
  00805: and    rdi,0xfffffffffffffffc
  00809: or     rdi,rax
  0080c: rol    rdi,0x3d
  00810: movq   xmm5,rdi
  00815: jmp    0x82c
  0081a: call   0xffff46ce
  0081f: test   rax,rax
  00822: je     0x3707e
  00828: movq   xmm5,xmm0
  0082c: movq   xmm6,xmm5
  00830: movq   rax,xmm2
  00835: test   rax,rax
  00838: je     0xffff469a
  0083e: divsd  xmm6,xmm2
:00029 %6 = %4
  00842: mov    rax,QWORD PTR [r14-0x50]
  00846: mov    QWORD PTR [r14-0x60],rax
:00030 %6 = %0.call clamp(%6; 1)            [Scene]
  0084a: movq   xmm0,xmm6
  0084e: call   0xffff47f2
  00853: mov    QWORD PTR [r14-0x58],rax
  00857: mov    rdi,QWORD PTR [r14-0x30]
  0085b: cmp    DWORD PTR [rip+0xffffffffffff80aa],0x26        # 0xffff890c
  00862: jne    0x3709a
  00868: sub    rsp,0x20
  0086c: movq   QWORD PTR [rsp],xmm2
  00871: movq   QWORD PTR [rsp+0x8],xmm3
  00877: movq   QWORD PTR [rsp+0x10],xmm4
  0087d: cmp    DWORD PTR [rip+0xffffffffffff808c],0x0        # 0xffff8910
  00884: je     0x89c
  0088a: mov    rdi,r12
  0088d: mov    rsi,QWORD PTR [rbx]
  00890: movabs rax,0x55955d9a3d50
  0089a: call   rax
  0089c: mov    QWORD PTR [rsp-0x28],0x0
  008a5: mov    rax,QWORD PTR [r14-0x30]
  008a9: mov    QWORD PTR [rsp-0x40],rax
  008ae: mov    rdi,0x1
  008b5: mov    rax,QWORD PTR [r14-0x60]
  008b9: mov    QWORD PTR [rsp-0x48],rax
  008be: mov    QWORD PTR [rsp-0x38],0x0
  008c7: movabs rax,0x1000400000056
  008d1: mov    QWORD PTR [rsp-0x30],rax
  008d6: movabs r13,0x55955e137360
  008e0: mov    rsi,QWORD PTR [rbx]
  008e3: mov    QWORD PTR [rsp-0x18],rsi
  008e8: lea    rsi,[rsp-0x18]
  008ed: mov    QWORD PTR [rbx],rsi
  008f0: lea    r14,[rsp-0x10]
  008f5: mov    QWORD PTR [rsp-0x20],r14
  008fa: call   0xffffba01
  008ff: lea    r14,[rbp-0x8]
  00903: mov    QWORD PTR [rbx],r14
  00906: mov    r14,QWORD PTR [rbp-0x10]
  0090a: movq   xmm2,QWORD PTR [rsp]
  0090f: movq   xmm3,QWORD PTR [rsp+0x8]
  00915: movq   xmm4,QWORD PTR [rsp+0x10]
  0091b: add    rsp,0x20
  0091f: movabs r13,0x55955e182280
  00929: test   rax,rax
  0092c: je     0xffff4675
  00932: mov    QWORD PTR [r14-0x60],rax
:00031 
:00032 %6 = %6.call chr()                   [Integer]
  00936: mov    rdi,QWORD PTR [r14-0x60]
  0093a: test   rdi,0x1
  00941: je     0x370b6
  00947: cmp    DWORD PTR [rip+0xffffffffffff7fbe],0x26        # 0xffff890c
  0094e: jne    0x370b6
  00954: mov    r9,0x0
  0095b: sub    rsp,0x20
  0095f: movq   QWORD PTR [rsp],xmm2
  00964: movq   QWORD PTR [rsp+0x8],xmm3
  0096a: movq   QWORD PTR [rsp+0x10],xmm4
  00970: mov    rdx,rdi
  00973: mov    QWORD PTR [rsp-0x40],rcx
  00978: mov    QWORD PTR [rsp-0x28],0x0
  00981: lea    rcx,[r14-0x68]
  00985: mov    r8,0x0
  0098c: mov    rsi,QWORD PTR [rbx]
  0098f: mov    QWORD PTR [rsp-0x18],rsi
  00994: lea    rsi,[rsp-0x18]
  00999: mov    QWORD PTR [rbx],rsi
  0099c: lea    r14,[rsp-0x10]
  009a1: mov    QWORD PTR [rsp-0x20],r14
  009a6: call   0x370d2
  009ab: lea    r14,[rbp-0x8]
  009af: mov    QWORD PTR [rbx],r14
  009b2: mov    r14,QWORD PTR [rbp-0x10]
  009b6: movq   xmm2,QWORD PTR [rsp]
  009bb: movq   xmm3,QWORD PTR [rsp+0x8]
  009c1: movq   xmm4,QWORD PTR [rsp+0x10]
  009c7: add    rsp,0x20
  009cb: movabs r13,0x55955e1822a0
  009d5: test   rax,rax
  009d8: je     0xffff4675
  009de: mov    QWORD PTR [r14-0x60],rax
:00033 
:00034 _ = %0.call print(%6; 1)             [Scene]
  009e2: mov    rdi,QWORD PTR [r14-0x30]
  009e6: cmp    DWORD PTR [rip+0xffffffffffff7f1f],0x26        # 0xffff890c
  009ed: jne    0x37104
  009f3: mov    r9,0x0
  009fa: sub    rsp,0x20
  009fe: movq   QWORD PTR [rsp],xmm2
  00a03: movq   QWORD PTR [rsp+0x8],xmm3
  00a09: movq   QWORD PTR [rsp+0x10],xmm4
  00a0f: mov    rdx,rdi
  00a12: mov    QWORD PTR [rsp-0x40],rcx
  00a17: mov    QWORD PTR [rsp-0x28],0x0
  00a20: lea    rcx,[r14-0x60]
  00a24: mov    r8,0x1
  00a2b: mov    rsi,QWORD PTR [rbx]
  00a2e: mov    QWORD PTR [rsp-0x18],rsi
  00a33: lea    rsi,[rsp-0x18]
  00a38: mov    QWORD PTR [rbx],rsi
  00a3b: lea    r14,[rsp-0x10]
  00a40: mov    QWORD PTR [rsp-0x20],r14
  00a45: call   0x37120
  00a4a: lea    r14,[rbp-0x8]
  00a4e: mov    QWORD PTR [rbx],r14
  00a51: mov    r14,QWORD PTR [rbp-0x10]
  00a55: movq   xmm2,QWORD PTR [rsp]
  00a5a: movq   xmm3,QWORD PTR [rsp+0x8]
  00a60: movq   xmm4,QWORD PTR [rsp+0x10]
  00a66: add    rsp,0x20
  00a6a: movabs r13,0x55955e1822c0
  00a74: test   rax,rax
  00a77: je     0xffff4675
:00035 
:00036 %6 = %3
  00a7d: mov    rax,QWORD PTR [r14-0x48]
  00a81: mov    QWORD PTR [r14-0x60],rax
:00037 %6 = %0.call clamp(%6; 1)            [Scene]
  00a85: mov    rdi,QWORD PTR [r14-0x30]
  00a89: cmp    DWORD PTR [rip+0xffffffffffff7e7c],0x26        # 0xffff890c
  00a90: jne    0x37152
  00a96: sub    rsp,0x20
  00a9a: movq   QWORD PTR [rsp],xmm2
  00a9f: movq   QWORD PTR [rsp+0x8],xmm3
  00aa5: movq   QWORD PTR [rsp+0x10],xmm4
  00aab: cmp    DWORD PTR [rip+0xffffffffffff7e5e],0x0        # 0xffff8910
  00ab2: je     0xaca
  00ab8: mov    rdi,r12
  00abb: mov    rsi,QWORD PTR [rbx]
  00abe: movabs rax,0x55955d9a3d50
  00ac8: call   rax
  00aca: mov    QWORD PTR [rsp-0x28],0x0
  00ad3: mov    rax,QWORD PTR [r14-0x30]
  00ad7: mov    QWORD PTR [rsp-0x40],rax
  00adc: mov    rdi,0x1
  00ae3: mov    rax,QWORD PTR [r14-0x60]
  00ae7: mov    QWORD PTR [rsp-0x48],rax
  00aec: mov    QWORD PTR [rsp-0x38],0x0
  00af5: movabs rax,0x1000400000056
  00aff: mov    QWORD PTR [rsp-0x30],rax
  00b04: movabs r13,0x55955e137360
  00b0e: mov    rsi,QWORD PTR [rbx]
  00b11: mov    QWORD PTR [rsp-0x18],rsi
  00b16: lea    rsi,[rsp-0x18]
  00b1b: mov    QWORD PTR [rbx],rsi
  00b1e: lea    r14,[rsp-0x10]
  00b23: mov    QWORD PTR [rsp-0x20],r14
  00b28: call   0xffffba01
  00b2d: lea    r14,[rbp-0x8]
  00b31: mov    QWORD PTR [rbx],r14
  00b34: mov    r14,QWORD PTR [rbp-0x10]
  00b38: movq   xmm2,QWORD PTR [rsp]
  00b3d: movq   xmm3,QWORD PTR [rsp+0x8]
  00b43: movq   xmm4,QWORD PTR [rsp+0x10]
  00b49: add    rsp,0x20
  00b4d: movabs r13,0x55955e1822f0
  00b57: test   rax,rax
  00b5a: je     0xffff4675
  00b60: mov    QWORD PTR [r14-0x60],rax
:00038 
:00039 %6 = %6.call chr()                   [Integer]
  00b64: mov    rdi,QWORD PTR [r14-0x60]
  00b68: test   rdi,0x1
  00b6f: je     0x3716e
  00b75: cmp    DWORD PTR [rip+0xffffffffffff7d90],0x26        # 0xffff890c
  00b7c: jne    0x3716e
  00b82: mov    r9,0x0
  00b89: sub    rsp,0x20
  00b8d: movq   QWORD PTR [rsp],xmm2
  00b92: movq   QWORD PTR [rsp+0x8],xmm3
  00b98: movq   QWORD PTR [rsp+0x10],xmm4
  00b9e: mov    rdx,rdi
  00ba1: mov    QWORD PTR [rsp-0x40],rcx
  00ba6: mov    QWORD PTR [rsp-0x28],0x0
  00baf: lea    rcx,[r14-0x68]
  00bb3: mov    r8,0x0
  00bba: mov    rsi,QWORD PTR [rbx]
  00bbd: mov    QWORD PTR [rsp-0x18],rsi
  00bc2: lea    rsi,[rsp-0x18]
  00bc7: mov    QWORD PTR [rbx],rsi
  00bca: lea    r14,[rsp-0x10]
  00bcf: mov    QWORD PTR [rsp-0x20],r14
  00bd4: call   0x3718a
  00bd9: lea    r14,[rbp-0x8]
  00bdd: mov    QWORD PTR [rbx],r14
  00be0: mov    r14,QWORD PTR [rbp-0x10]
  00be4: movq   xmm2,QWORD PTR [rsp]
  00be9: movq   xmm3,QWORD PTR [rsp+0x8]
  00bef: movq   xmm4,QWORD PTR [rsp+0x10]
  00bf5: add    rsp,0x20
  00bf9: movabs r13,0x55955e182310
  00c03: test   rax,rax
  00c06: je     0xffff4675
  00c0c: mov    QWORD PTR [r14-0x60],rax
:00040 
:00041 _ = %0.call print(%6; 1)             [Scene]
  00c10: mov    rdi,QWORD PTR [r14-0x30]
  00c14: cmp    DWORD PTR [rip+0xffffffffffff7cf1],0x26        # 0xffff890c
  00c1b: jne    0x371bc
  00c21: mov    r9,0x0
  00c28: sub    rsp,0x20
  00c2c: movq   QWORD PTR [rsp],xmm2
  00c31: movq   QWORD PTR [rsp+0x8],xmm3
  00c37: movq   QWORD PTR [rsp+0x10],xmm4
  00c3d: mov    rdx,rdi
  00c40: mov    QWORD PTR [rsp-0x40],rcx
  00c45: mov    QWORD PTR [rsp-0x28],0x0
  00c4e: lea    rcx,[r14-0x60]
  00c52: mov    r8,0x1
  00c59: mov    rsi,QWORD PTR [rbx]
  00c5c: mov    QWORD PTR [rsp-0x18],rsi
  00c61: lea    rsi,[rsp-0x18]
  00c66: mov    QWORD PTR [rbx],rsi
  00c69: lea    r14,[rsp-0x10]
  00c6e: mov    QWORD PTR [rsp-0x20],r14
  00c73: call   0x371d8
  00c78: lea    r14,[rbp-0x8]
  00c7c: mov    QWORD PTR [rbx],r14
  00c7f: mov    r14,QWORD PTR [rbp-0x10]
  00c83: movq   xmm2,QWORD PTR [rsp]
  00c88: movq   xmm3,QWORD PTR [rsp+0x8]
  00c8e: movq   xmm4,QWORD PTR [rsp+0x10]
  00c94: add    rsp,0x20
  00c98: movabs r13,0x55955e182330
  00ca2: test   rax,rax
  00ca5: je     0xffff4675
:00042 
:00043 %6 = %5
  00cab: mov    rax,QWORD PTR [r14-0x58]
  00caf: mov    QWORD PTR [r14-0x60],rax
:00044 %6 = %0.call clamp(%6; 1)            [Scene]
  00cb3: mov    rdi,QWORD PTR [r14-0x30]
  00cb7: cmp    DWORD PTR [rip+0xffffffffffff7c4e],0x26        # 0xffff890c
  00cbe: jne    0x3720a
  00cc4: sub    rsp,0x20
  00cc8: movq   QWORD PTR [rsp],xmm2
  00ccd: movq   QWORD PTR [rsp+0x8],xmm3
  00cd3: movq   QWORD PTR [rsp+0x10],xmm4
  00cd9: cmp    DWORD PTR [rip+0xffffffffffff7c30],0x0        # 0xffff8910
  00ce0: je     0xcf8
  00ce6: mov    rdi,r12
  00ce9: mov    rsi,QWORD PTR [rbx]
  00cec: movabs rax,0x55955d9a3d50
  00cf6: call   rax
  00cf8: mov    QWORD PTR [rsp-0x28],0x0
  00d01: mov    rax,QWORD PTR [r14-0x30]
  00d05: mov    QWORD PTR [rsp-0x40],rax
  00d0a: mov    rdi,0x1
  00d11: mov    rax,QWORD PTR [r14-0x60]
  00d15: mov    QWORD PTR [rsp-0x48],rax
  00d1a: mov    QWORD PTR [rsp-0x38],0x0
  00d23: movabs rax,0x1000400000056
  00d2d: mov    QWORD PTR [rsp-0x30],rax
  00d32: movabs r13,0x55955e137360
  00d3c: mov    rsi,QWORD PTR [rbx]
  00d3f: mov    QWORD PTR [rsp-0x18],rsi
  00d44: lea    rsi,[rsp-0x18]
  00d49: mov    QWORD PTR [rbx],rsi
  00d4c: lea    r14,[rsp-0x10]
  00d51: mov    QWORD PTR [rsp-0x20],r14
  00d56: call   0xffffba01
  00d5b: lea    r14,[rbp-0x8]
  00d5f: mov    QWORD PTR [rbx],r14
  00d62: mov    r14,QWORD PTR [rbp-0x10]
  00d66: movq   xmm2,QWORD PTR [rsp]
  00d6b: movq   xmm3,QWORD PTR [rsp+0x8]
  00d71: movq   xmm4,QWORD PTR [rsp+0x10]
  00d77: add    rsp,0x20
  00d7b: movabs r13,0x55955e182360
  00d85: test   rax,rax
  00d88: je     0xffff4675
  00d8e: mov    QWORD PTR [r14-0x60],rax
:00045 
:00046 %6 = %6.call chr()                   [Integer]
  00d92: mov    rdi,QWORD PTR [r14-0x60]
  00d96: test   rdi,0x1
  00d9d: je     0x37226
  00da3: cmp    DWORD PTR [rip+0xffffffffffff7b62],0x26        # 0xffff890c
  00daa: jne    0x37226
  00db0: mov    r9,0x0
  00db7: sub    rsp,0x20
  00dbb: movq   QWORD PTR [rsp],xmm2
  00dc0: movq   QWORD PTR [rsp+0x8],xmm3
  00dc6: movq   QWORD PTR [rsp+0x10],xmm4
  00dcc: mov    rdx,rdi
  00dcf: mov    QWORD PTR [rsp-0x40],rcx
  00dd4: mov    QWORD PTR [rsp-0x28],0x0
  00ddd: lea    rcx,[r14-0x68]
  00de1: mov    r8,0x0
  00de8: mov    rsi,QWORD PTR [rbx]
  00deb: mov    QWORD PTR [rsp-0x18],rsi
  00df0: lea    rsi,[rsp-0x18]
  00df5: mov    QWORD PTR [rbx],rsi
  00df8: lea    r14,[rsp-0x10]
  00dfd: mov    QWORD PTR [rsp-0x20],r14
  00e02: call   0x37242
  00e07: lea    r14,[rbp-0x8]
  00e0b: mov    QWORD PTR [rbx],r14
  00e0e: mov    r14,QWORD PTR [rbp-0x10]
  00e12: movq   xmm2,QWORD PTR [rsp]
  00e17: movq   xmm3,QWORD PTR [rsp+0x8]
  00e1d: movq   xmm4,QWORD PTR [rsp+0x10]
  00e23: add    rsp,0x20
  00e27: movabs r13,0x55955e182380
  00e31: test   rax,rax
  00e34: je     0xffff4675
  00e3a: mov    QWORD PTR [r14-0x60],rax
:00047 
:00048 %6 = %0.call print(%6; 1)            [Scene]
  00e3e: mov    rdi,QWORD PTR [r14-0x30]
  00e42: cmp    DWORD PTR [rip+0xffffffffffff7ac3],0x26        # 0xffff890c
  00e49: jne    0x37274
  00e4f: mov    r9,0x0
  00e56: sub    rsp,0x20
  00e5a: movq   QWORD PTR [rsp],xmm2
  00e5f: movq   QWORD PTR [rsp+0x8],xmm3
  00e65: movq   QWORD PTR [rsp+0x10],xmm4
  00e6b: mov    rdx,rdi
  00e6e: mov    QWORD PTR [rsp-0x40],rcx
  00e73: mov    QWORD PTR [rsp-0x28],0x0
  00e7c: lea    rcx,[r14-0x60]
  00e80: mov    r8,0x1
  00e87: mov    rsi,QWORD PTR [rbx]
  00e8a: mov    QWORD PTR [rsp-0x18],rsi
  00e8f: lea    rsi,[rsp-0x18]
  00e94: mov    QWORD PTR [rbx],rsi
  00e97: lea    r14,[rsp-0x10]
  00e9c: mov    QWORD PTR [rsp-0x20],r14
  00ea1: call   0x37290
  00ea6: lea    r14,[rbp-0x8]
  00eaa: mov    QWORD PTR [rbx],r14
  00ead: mov    r14,QWORD PTR [rbp-0x10]
  00eb1: movq   xmm2,QWORD PTR [rsp]
  00eb6: movq   xmm3,QWORD PTR [rsp+0x8]
  00ebc: movq   xmm4,QWORD PTR [rsp+0x10]
  00ec2: add    rsp,0x20
  00ec6: movabs r13,0x55955e1823a0
  00ed0: test   rax,rax
  00ed3: je     0xffff4675
  00ed9: mov    QWORD PTR [r14-0x60],rax
:00049 
:00050 ret %6
  00edd: mov    rax,QWORD PTR [r14-0x60]
  00ee1: leave  
  00ee2: ret    
==> start whole compile: <unnamed> FuncId(106) self_class:Scene start:[00000] bytecode:0x55955e136480
<== finished compile. elapsed:26.9µs
offset:Pos(51456) code: 261 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x36380
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x36380
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x20]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7077889]
  00071: mov    rax,0xd80003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 _ = %2.call times(&%3)               [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x3638f
  0008d: cmp    DWORD PTR [rip+0xffffffffffff7927],0x26        # 0xffff79bb
  00094: jne    0x3638f
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x3639e
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: movabs r13,0x55955e1364d0
  000ee: test   rax,rax
  000f1: je     0xffff3724
:00004 
:00005 %2 = nil
  000f7: mov    QWORD PTR [r14-0x40],0x4
:00006 ret %2
  000ff: mov    rax,QWORD PTR [r14-0x40]
  00103: leave  
  00104: ret    
==> start whole compile: <unnamed> FuncId(107) self_class:Scene start:[00000] bytecode:0x55955e13b550
<== finished compile. elapsed:118.6µs
offset:Pos(52749) code: 8372 bytes  data: 423 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [r14-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x35ed2
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x35
  000a7:    	jne    0x35ed2
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff73f6],0x26        # 0xffff74ae
  000b8:    	jne    0x35ee1
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0x98]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x35ef0
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: 95 	movabs r13,0x55955e13b580
  00118:    	test   rax,rax
  0011b:    	je     0xffff3217
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00003 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00004 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x1f88]        # 0x20c3
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00005 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x1f82]        # 0x20d3
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00006 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xffffffffffff733d],0x26        # 0xffff74ae
  00171:    	jne    0x35f22
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa0]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x35f41
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: 95 	movabs r13,0x55955e13b5e0
  001e3:    	test   rax,rax
  001e6:    	je     0xffff3217
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 
:00009 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x35f73
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xffff3270
  0024f:    	test   rax,rax
  00252:    	je     0x35f73
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00010 %13 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7258]        # 0xffff74c3
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x1e81]        # 0x20f3
  00272:    	jne    0x35f92
  00278: 00 	mov    rax,QWORD PTR [rip+0x1e64]        # 0x20e3
  0027f: ff 	mov    QWORD PTR [r14-0x98],rax
:00011 %14 = %3
:00012 %13 = %13.call cos(%14; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x35ff6
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x24
  0029e:    	jne    0x35ff6
  002a4: 26 	cmp    DWORD PTR [rip+0xffffffffffff7203],0x26        # 0xffff74ae
  002ab:    	jne    0x35ff6
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: 95 	movabs rax,0x55955d9b4a10
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00013 
:00014 %14 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff71d9]        # 0xffff74c3
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x1e22]        # 0x2113
  002f1:    	jne    0x36019
  002f7: 00 	mov    rax,QWORD PTR [rip+0x1e05]        # 0x2103
  002fe: ff 	mov    QWORD PTR [r14-0xa0],rax
:00015 %15 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x1e16]        # 0x2123
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xa8],rax
:00016 %15 = %15 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x3607d
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xffff3270
  00377:    	test   rax,rax
  0037a:    	je     0x3607d
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00017 %14 = %14.call sqrt(%15; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x360a9
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x24
  003a0:    	jne    0x360a9
  003a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff7101],0x26        # 0xffff74ae
  003ad:    	jne    0x360a9
  003b3:    	sqrtsd xmm6,xmm3
:00018 
:00019 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00020 %13 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff70fd]        # 0xffff74c3
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x1d76]        # 0x2143
  003cd:    	jne    0x360e5
  003d3: 00 	mov    rax,QWORD PTR [rip+0x1d59]        # 0x2133
  003da: ff 	mov    QWORD PTR [r14-0x98],rax
:00021 %14 = %3
:00022 %13 = %13.call sin(%14; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x3616d
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x24
  003f9:    	jne    0x3616d
  003ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff70a8],0x26        # 0xffff74ae
  00406:    	jne    0x3616d
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: 95 	movabs rax,0x55955d9b4a20
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00023 
:00024 %14 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff705a]        # 0xffff74c3
  00469: 00 	cmp    rax,QWORD PTR [rip+0x1cf3]        # 0x2163
  00470:    	jne    0x361ad
  00476: 00 	mov    rax,QWORD PTR [rip+0x1cd6]        # 0x2153
  0047d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x1ce7]        # 0x2173
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xa8],rax
:00026 %15 = %15 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00027 %14 = %14.call sqrt(%15; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x36235
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x24
  004b9:    	jne    0x36235
  004bf: 26 	cmp    DWORD PTR [rip+0xffffffffffff6fe8],0x26        # 0xffff74ae
  004c6:    	jne    0x36235
  004cc:    	sqrtsd xmm6,xmm3
:00028 
:00029 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00030 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6fe2]        # 0xffff74c3
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x1cab]        # 0x2193
  004e8:    	jne    0x3627e
  004ee: 00 	mov    rax,QWORD PTR [rip+0x1c8e]        # 0x2183
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00031 %14 = %2
:00032 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x36314
  00510:    	cmp    DWORD PTR [rdi+0x4],0x24
  00514:    	jne    0x36314
  0051a: 26 	cmp    DWORD PTR [rip+0xffffffffffff6f8d],0x26        # 0xffff74ae
  00521:    	jne    0x36314
  00527:    	sqrtsd xmm2,xmm5
:00033 
:00034 %13 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [r14-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0x98],rax
:00035 %14 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00036 %13 = %13.[%14]                      [Array][Integer]
  00548: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0054f: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00556: 00 	test   rdi,0x7
  0055d:    	jne    0x3636b
  00563:    	cmp    DWORD PTR [rdi+0x4],0xb
  00567:    	jne    0x3636b
  0056d: 00 	test   rsi,0x1
  00574:    	je     0x3636b
  0057a:    	sar    rsi,1
  0057d:    	sub    rsp,0x30
  00581:    	movq   QWORD PTR [rsp],xmm2
  00586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0058c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00592:    	movq   QWORD PTR [rsp+0x18],xmm5
  00598:    	movq   QWORD PTR [rsp+0x20],xmm7
  0059e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005a5: 95 	movabs rax,0x55955d9acd00
  005af:    	call   rax
  005b1:    	movq   xmm2,QWORD PTR [rsp]
  005b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ce: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d5:    	add    rsp,0x30
  005d9: 95 	movabs r13,0x55955e13b7a0
  005e3:    	test   rax,rax
  005e6:    	je     0xffff3217
  005ec: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %13 = %13.call x()                   [Vec]
  005f3:    	movq   xmm0,xmm2
  005f7:    	call   0xffff3394
  005fc:    	mov    QWORD PTR [r14-0x60],rax
  00600:    	movq   xmm0,xmm4
  00604:    	call   0xffff3394
  00609:    	mov    QWORD PTR [r14-0x48],rax
  0060d:    	movq   xmm0,xmm7
  00611:    	call   0xffff3394
  00616:    	mov    QWORD PTR [r14-0x50],rax
  0061a:    	movq   xmm0,xmm8
  0061f:    	call   0xffff3394
  00624:    	mov    QWORD PTR [r14-0x58],rax
  00628: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0062f: 00 	test   rdi,0x7
  00636:    	jne    0x363bf
  0063c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00640:    	jne    0x363bf
  00646: 26 	cmp    DWORD PTR [rip+0xffffffffffff6e61],0x26        # 0xffff74ae
  0064d:    	jne    0x363bf
  00653:    	mov    esi,DWORD PTR [rip+0x1b46]        # 0x219f
  00659:    	cmp    esi,0xffffffff
  0065c:    	je     0x363de
  00662:    	cmp    WORD PTR [rdi+0x2],0x3
  00667:    	jne    0x680
  0066d:    	cmp    esi,0x6
  00670:    	jge    0x680
  00676:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0067b:    	jmp    0x69e
  00680:    	sub    rsp,0x10
  00684:    	movq   QWORD PTR [rsp],xmm3
  00689: 95 	movabs rax,0x55955d9e0e20
  00693:    	call   rax
  00695:    	movq   xmm3,QWORD PTR [rsp]
  0069a:    	add    rsp,0x10
  0069e: ff 	mov    QWORD PTR [r14-0x98],rax
:00038 
:00039 %13 = %4 * %13                       [Float][Float]
  006a5:    	mov    rdi,QWORD PTR [r14-0x50]
  006a9: 00 	test   rdi,0x1
  006b0:    	jne    0x36419
  006b6: 00 	test   rdi,0x2
  006bd:    	je     0x6f9
  006c3:    	xorps  xmm2,xmm2
  006c6: 00 	movabs rax,0x8000000000000002
  006d0:    	cmp    rdi,rax
  006d3:    	je     0x70b
  006d9:    	mov    rax,rdi
  006dc:    	sar    rax,0x3f
  006e0:    	add    rax,0x2
  006e4:    	and    rdi,0xfffffffffffffffc
  006e8:    	or     rdi,rax
  006eb:    	rol    rdi,0x3d
  006ef:    	movq   xmm2,rdi
  006f4:    	jmp    0x70b
  006f9:    	call   0xffff3270
  006fe:    	test   rax,rax
  00701:    	je     0x36419
  00707:    	movq   xmm2,xmm0
  0070b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00712: 00 	test   rdi,0x1
  00719:    	jne    0x36438
  0071f: 00 	test   rdi,0x2
  00726:    	je     0x762
  0072c:    	xorps  xmm4,xmm4
  0072f: 00 	movabs rax,0x8000000000000002
  00739:    	cmp    rdi,rax
  0073c:    	je     0x774
  00742:    	mov    rax,rdi
  00745:    	sar    rax,0x3f
  00749:    	add    rax,0x2
  0074d:    	and    rdi,0xfffffffffffffffc
  00751:    	or     rdi,rax
  00754:    	rol    rdi,0x3d
  00758:    	movq   xmm4,rdi
  0075d:    	jmp    0x774
  00762:    	call   0xffff3270
  00767:    	test   rax,rax
  0076a:    	je     0x36438
  00770:    	movq   xmm4,xmm0
  00774:    	mulsd  xmm4,xmm2
:00040 %14 = dynvar(2, %2)
  00778:    	mov    rax,QWORD PTR [r14-0x18]
  0077c:    	mov    rax,QWORD PTR [rax]
  0077f:    	mov    rax,QWORD PTR [rax-0x28]
  00783: ff 	mov    QWORD PTR [r14-0xa0],rax
:00041 %15 = 1: i32
  0078a: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00042 %14 = %14.[%15]                      [Array][Integer]
  00795: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0079c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  007a3: 00 	test   rdi,0x7
  007aa:    	jne    0x36457
  007b0:    	cmp    DWORD PTR [rdi+0x4],0xb
  007b4:    	jne    0x36457
  007ba: 00 	test   rsi,0x1
  007c1:    	je     0x36457
  007c7:    	sar    rsi,1
  007ca:    	sub    rsp,0x10
  007ce:    	movq   QWORD PTR [rsp],xmm2
  007d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  007d9: 95 	movabs rax,0x55955d9acd00
  007e3:    	call   rax
  007e5:    	movq   xmm2,QWORD PTR [rsp]
  007ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007f0:    	add    rsp,0x10
  007f4: 95 	movabs r13,0x55955e13b800
  007fe:    	test   rax,rax
  00801:    	je     0xffff3217
  00807: ff 	mov    QWORD PTR [r14-0xa0],rax
:00043 %14 = %14.call x()                   [Vec]
  0080e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00815: 00 	test   rdi,0x7
  0081c:    	jne    0x36476
  00822:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00826:    	jne    0x36476
  0082c: 26 	cmp    DWORD PTR [rip+0xffffffffffff6c7b],0x26        # 0xffff74ae
  00833:    	jne    0x36476
  00839:    	mov    esi,DWORD PTR [rip+0x1968]        # 0x21a7
  0083f:    	cmp    esi,0xffffffff
  00842:    	je     0x36495
  00848:    	cmp    WORD PTR [rdi+0x2],0x3
  0084d:    	jne    0x866
  00853:    	cmp    esi,0x6
  00856:    	jge    0x866
  0085c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00861:    	jmp    0x884
  00866:    	sub    rsp,0x10
  0086a:    	movq   QWORD PTR [rsp],xmm4
  0086f: 95 	movabs rax,0x55955d9e0e20
  00879:    	call   rax
  0087b:    	movq   xmm4,QWORD PTR [rsp]
  00880:    	add    rsp,0x10
  00884: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 
:00045 %14 = %5 * %14                       [Float][Float]
  0088b:    	mov    rdi,QWORD PTR [r14-0x58]
  0088f: 00 	test   rdi,0x1
  00896:    	jne    0x364d0
  0089c: 00 	test   rdi,0x2
  008a3:    	je     0x8df
  008a9:    	xorps  xmm2,xmm2
  008ac: 00 	movabs rax,0x8000000000000002
  008b6:    	cmp    rdi,rax
  008b9:    	je     0x8f1
  008bf:    	mov    rax,rdi
  008c2:    	sar    rax,0x3f
  008c6:    	add    rax,0x2
  008ca:    	and    rdi,0xfffffffffffffffc
  008ce:    	or     rdi,rax
  008d1:    	rol    rdi,0x3d
  008d5:    	movq   xmm2,rdi
  008da:    	jmp    0x8f1
  008df:    	call   0xffff3270
  008e4:    	test   rax,rax
  008e7:    	je     0x364d0
  008ed:    	movq   xmm2,xmm0
  008f1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008f8: 00 	test   rdi,0x1
  008ff:    	jne    0x364ef
  00905: 00 	test   rdi,0x2
  0090c:    	je     0x948
  00912:    	xorps  xmm3,xmm3
  00915: 00 	movabs rax,0x8000000000000002
  0091f:    	cmp    rdi,rax
  00922:    	je     0x95a
  00928:    	mov    rax,rdi
  0092b:    	sar    rax,0x3f
  0092f:    	add    rax,0x2
  00933:    	and    rdi,0xfffffffffffffffc
  00937:    	or     rdi,rax
  0093a:    	rol    rdi,0x3d
  0093e:    	movq   xmm3,rdi
  00943:    	jmp    0x95a
  00948:    	call   0xffff3270
  0094d:    	test   rax,rax
  00950:    	je     0x364ef
  00956:    	movq   xmm3,xmm0
  0095a:    	mulsd  xmm3,xmm2
:00046 %13 = %13 + %14                      [Float][Float]
  0095e:    	addsd  xmm4,xmm3
:00047 %14 = dynvar(2, %2)
  00962:    	mov    rax,QWORD PTR [r14-0x18]
  00966:    	mov    rax,QWORD PTR [rax]
  00969:    	mov    rax,QWORD PTR [rax-0x28]
  0096d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00048 %15 = 2: i32
  00974: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00049 %14 = %14.[%15]                      [Array][Integer]
  0097f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00986: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  0098d: 00 	test   rdi,0x7
  00994:    	jne    0x3650e
  0099a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0099e:    	jne    0x3650e
  009a4: 00 	test   rsi,0x1
  009ab:    	je     0x3650e
  009b1:    	sar    rsi,1
  009b4:    	sub    rsp,0x10
  009b8:    	movq   QWORD PTR [rsp],xmm2
  009bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  009c3: 95 	movabs rax,0x55955d9acd00
  009cd:    	call   rax
  009cf:    	movq   xmm2,QWORD PTR [rsp]
  009d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009da:    	add    rsp,0x10
  009de: 95 	movabs r13,0x55955e13b870
  009e8:    	test   rax,rax
  009eb:    	je     0xffff3217
  009f1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00050 %14 = %14.call x()                   [Vec]
  009f8: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009ff: 00 	test   rdi,0x7
  00a06:    	jne    0x3652d
  00a0c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a10:    	jne    0x3652d
  00a16: 26 	cmp    DWORD PTR [rip+0xffffffffffff6a91],0x26        # 0xffff74ae
  00a1d:    	jne    0x3652d
  00a23:    	mov    esi,DWORD PTR [rip+0x1786]        # 0x21af
  00a29:    	cmp    esi,0xffffffff
  00a2c:    	je     0x3654c
  00a32:    	cmp    WORD PTR [rdi+0x2],0x3
  00a37:    	jne    0xa50
  00a3d:    	cmp    esi,0x6
  00a40:    	jge    0xa50
  00a46:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a4b:    	jmp    0xa6e
  00a50:    	sub    rsp,0x10
  00a54:    	movq   QWORD PTR [rsp],xmm4
  00a59: 95 	movabs rax,0x55955d9e0e20
  00a63:    	call   rax
  00a65:    	movq   xmm4,QWORD PTR [rsp]
  00a6a:    	add    rsp,0x10
  00a6e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00052 %14 = %6 * %14                       [Float][Float]
  00a75:    	mov    rdi,QWORD PTR [r14-0x60]
  00a79: 00 	test   rdi,0x1
  00a80:    	jne    0x36587
  00a86: 00 	test   rdi,0x2
  00a8d:    	je     0xac9
  00a93:    	xorps  xmm2,xmm2
  00a96: 00 	movabs rax,0x8000000000000002
  00aa0:    	cmp    rdi,rax
  00aa3:    	je     0xadb
  00aa9:    	mov    rax,rdi
  00aac:    	sar    rax,0x3f
  00ab0:    	add    rax,0x2
  00ab4:    	and    rdi,0xfffffffffffffffc
  00ab8:    	or     rdi,rax
  00abb:    	rol    rdi,0x3d
  00abf:    	movq   xmm2,rdi
  00ac4:    	jmp    0xadb
  00ac9:    	call   0xffff3270
  00ace:    	test   rax,rax
  00ad1:    	je     0x36587
  00ad7:    	movq   xmm2,xmm0
  00adb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ae2: 00 	test   rdi,0x1
  00ae9:    	jne    0x365a6
  00aef: 00 	test   rdi,0x2
  00af6:    	je     0xb32
  00afc:    	xorps  xmm3,xmm3
  00aff: 00 	movabs rax,0x8000000000000002
  00b09:    	cmp    rdi,rax
  00b0c:    	je     0xb44
  00b12:    	mov    rax,rdi
  00b15:    	sar    rax,0x3f
  00b19:    	add    rax,0x2
  00b1d:    	and    rdi,0xfffffffffffffffc
  00b21:    	or     rdi,rax
  00b24:    	rol    rdi,0x3d
  00b28:    	movq   xmm3,rdi
  00b2d:    	jmp    0xb44
  00b32:    	call   0xffff3270
  00b37:    	test   rax,rax
  00b3a:    	je     0x365a6
  00b40:    	movq   xmm3,xmm0
  00b44:    	mulsd  xmm3,xmm2
:00053 %7 = %13 + %14                       [Float][Float]
  00b48:    	movq   xmm5,xmm4
  00b4c:    	addsd  xmm5,xmm3
:00054 %13 = dynvar(2, %2)
  00b50:    	mov    rax,QWORD PTR [r14-0x18]
  00b54:    	mov    rax,QWORD PTR [rax]
  00b57:    	mov    rax,QWORD PTR [rax-0x28]
  00b5b: ff 	mov    QWORD PTR [r14-0x98],rax
:00055 %14 = 0: i32
  00b62: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00056 %13 = %13.[%14]                      [Array][Integer]
  00b6d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b74: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00b7b: 00 	test   rdi,0x7
  00b82:    	jne    0x365c5
  00b88:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b8c:    	jne    0x365c5
  00b92: 00 	test   rsi,0x1
  00b99:    	je     0x365c5
  00b9f:    	sar    rsi,1
  00ba2:    	sub    rsp,0x10
  00ba6:    	movq   QWORD PTR [rsp],xmm2
  00bab:    	movq   QWORD PTR [rsp+0x8],xmm5
  00bb1: 95 	movabs rax,0x55955d9acd00
  00bbb:    	call   rax
  00bbd:    	movq   xmm2,QWORD PTR [rsp]
  00bc2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00bc8:    	add    rsp,0x10
  00bcc: 95 	movabs r13,0x55955e13b8e0
  00bd6:    	test   rax,rax
  00bd9:    	je     0xffff3217
  00bdf: ff 	mov    QWORD PTR [r14-0x98],rax
:00057 %13 = %13.call y()                   [Vec]
  00be6:    	movq   xmm0,xmm5
  00bea:    	call   0xffff3394
  00bef:    	mov    QWORD PTR [r14-0x68],rax
  00bf3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00bfa: 00 	test   rdi,0x7
  00c01:    	jne    0x365e1
  00c07:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c0b:    	jne    0x365e1
  00c11: 26 	cmp    DWORD PTR [rip+0xffffffffffff6896],0x26        # 0xffff74ae
  00c18:    	jne    0x365e1
  00c1e:    	mov    esi,DWORD PTR [rip+0x1593]        # 0x21b7
  00c24:    	cmp    esi,0xffffffff
  00c27:    	je     0x365f0
  00c2d:    	cmp    WORD PTR [rdi+0x2],0x3
  00c32:    	jne    0xc4b
  00c38:    	cmp    esi,0x6
  00c3b:    	jge    0xc4b
  00c41:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c46:    	jmp    0xc57
  00c4b: 95 	movabs rax,0x55955d9e0e20
  00c55:    	call   rax
  00c57: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00059 %13 = %4 * %13                       [Float][Float]
  00c5e:    	mov    rdi,QWORD PTR [r14-0x50]
  00c62: 00 	test   rdi,0x1
  00c69:    	jne    0x36619
  00c6f: 00 	test   rdi,0x2
  00c76:    	je     0xcb2
  00c7c:    	xorps  xmm2,xmm2
  00c7f: 00 	movabs rax,0x8000000000000002
  00c89:    	cmp    rdi,rax
  00c8c:    	je     0xcc4
  00c92:    	mov    rax,rdi
  00c95:    	sar    rax,0x3f
  00c99:    	add    rax,0x2
  00c9d:    	and    rdi,0xfffffffffffffffc
  00ca1:    	or     rdi,rax
  00ca4:    	rol    rdi,0x3d
  00ca8:    	movq   xmm2,rdi
  00cad:    	jmp    0xcc4
  00cb2:    	call   0xffff3270
  00cb7:    	test   rax,rax
  00cba:    	je     0x36619
  00cc0:    	movq   xmm2,xmm0
  00cc4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00ccb: 00 	test   rdi,0x1
  00cd2:    	jne    0x36628
  00cd8: 00 	test   rdi,0x2
  00cdf:    	je     0xd1b
  00ce5:    	xorps  xmm3,xmm3
  00ce8: 00 	movabs rax,0x8000000000000002
  00cf2:    	cmp    rdi,rax
  00cf5:    	je     0xd2d
  00cfb:    	mov    rax,rdi
  00cfe:    	sar    rax,0x3f
  00d02:    	add    rax,0x2
  00d06:    	and    rdi,0xfffffffffffffffc
  00d0a:    	or     rdi,rax
  00d0d:    	rol    rdi,0x3d
  00d11:    	movq   xmm3,rdi
  00d16:    	jmp    0xd2d
  00d1b:    	call   0xffff3270
  00d20:    	test   rax,rax
  00d23:    	je     0x36628
  00d29:    	movq   xmm3,xmm0
  00d2d:    	mulsd  xmm3,xmm2
:00060 %14 = dynvar(2, %2)
  00d31:    	mov    rax,QWORD PTR [r14-0x18]
  00d35:    	mov    rax,QWORD PTR [rax]
  00d38:    	mov    rax,QWORD PTR [rax-0x28]
  00d3c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = 1: i32
  00d43: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00062 %14 = %14.[%15]                      [Array][Integer]
  00d4e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d55: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d5c: 00 	test   rdi,0x7
  00d63:    	jne    0x36637
  00d69:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d6d:    	jne    0x36637
  00d73: 00 	test   rsi,0x1
  00d7a:    	je     0x36637
  00d80:    	sar    rsi,1
  00d83:    	sub    rsp,0x10
  00d87:    	movq   QWORD PTR [rsp],xmm2
  00d8c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d92: 95 	movabs rax,0x55955d9acd00
  00d9c:    	call   rax
  00d9e:    	movq   xmm2,QWORD PTR [rsp]
  00da3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00da9:    	add    rsp,0x10
  00dad: 95 	movabs r13,0x55955e13b940
  00db7:    	test   rax,rax
  00dba:    	je     0xffff3217
  00dc0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00063 %14 = %14.call y()                   [Vec]
  00dc7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00dce: 00 	test   rdi,0x7
  00dd5:    	jne    0x36656
  00ddb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ddf:    	jne    0x36656
  00de5: 26 	cmp    DWORD PTR [rip+0xffffffffffff66c2],0x26        # 0xffff74ae
  00dec:    	jne    0x36656
  00df2:    	mov    esi,DWORD PTR [rip+0x13c7]        # 0x21bf
  00df8:    	cmp    esi,0xffffffff
  00dfb:    	je     0x36675
  00e01:    	cmp    WORD PTR [rdi+0x2],0x3
  00e06:    	jne    0xe1f
  00e0c:    	cmp    esi,0x6
  00e0f:    	jge    0xe1f
  00e15:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e1a:    	jmp    0xe3d
  00e1f:    	sub    rsp,0x10
  00e23:    	movq   QWORD PTR [rsp],xmm3
  00e28: 95 	movabs rax,0x55955d9e0e20
  00e32:    	call   rax
  00e34:    	movq   xmm3,QWORD PTR [rsp]
  00e39:    	add    rsp,0x10
  00e3d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00064 
:00065 %14 = %5 * %14                       [Float][Float]
  00e44:    	mov    rdi,QWORD PTR [r14-0x58]
  00e48: 00 	test   rdi,0x1
  00e4f:    	jne    0x366b0
  00e55: 00 	test   rdi,0x2
  00e5c:    	je     0xe98
  00e62:    	xorps  xmm2,xmm2
  00e65: 00 	movabs rax,0x8000000000000002
  00e6f:    	cmp    rdi,rax
  00e72:    	je     0xeaa
  00e78:    	mov    rax,rdi
  00e7b:    	sar    rax,0x3f
  00e7f:    	add    rax,0x2
  00e83:    	and    rdi,0xfffffffffffffffc
  00e87:    	or     rdi,rax
  00e8a:    	rol    rdi,0x3d
  00e8e:    	movq   xmm2,rdi
  00e93:    	jmp    0xeaa
  00e98:    	call   0xffff3270
  00e9d:    	test   rax,rax
  00ea0:    	je     0x366b0
  00ea6:    	movq   xmm2,xmm0
  00eaa: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00eb1: 00 	test   rdi,0x1
  00eb8:    	jne    0x366cf
  00ebe: 00 	test   rdi,0x2
  00ec5:    	je     0xf01
  00ecb:    	xorps  xmm4,xmm4
  00ece: 00 	movabs rax,0x8000000000000002
  00ed8:    	cmp    rdi,rax
  00edb:    	je     0xf13
  00ee1:    	mov    rax,rdi
  00ee4:    	sar    rax,0x3f
  00ee8:    	add    rax,0x2
  00eec:    	and    rdi,0xfffffffffffffffc
  00ef0:    	or     rdi,rax
  00ef3:    	rol    rdi,0x3d
  00ef7:    	movq   xmm4,rdi
  00efc:    	jmp    0xf13
  00f01:    	call   0xffff3270
  00f06:    	test   rax,rax
  00f09:    	je     0x366cf
  00f0f:    	movq   xmm4,xmm0
  00f13:    	mulsd  xmm4,xmm2
:00066 %13 = %13 + %14                      [Float][Float]
  00f17:    	addsd  xmm3,xmm4
:00067 %14 = dynvar(2, %2)
  00f1b:    	mov    rax,QWORD PTR [r14-0x18]
  00f1f:    	mov    rax,QWORD PTR [rax]
  00f22:    	mov    rax,QWORD PTR [rax-0x28]
  00f26: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = 2: i32
  00f2d: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00069 %14 = %14.[%15]                      [Array][Integer]
  00f38: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f3f: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00f46: 00 	test   rdi,0x7
  00f4d:    	jne    0x366ee
  00f53:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f57:    	jne    0x366ee
  00f5d: 00 	test   rsi,0x1
  00f64:    	je     0x366ee
  00f6a:    	sar    rsi,1
  00f6d:    	sub    rsp,0x10
  00f71:    	movq   QWORD PTR [rsp],xmm2
  00f76:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f7c: 95 	movabs rax,0x55955d9acd00
  00f86:    	call   rax
  00f88:    	movq   xmm2,QWORD PTR [rsp]
  00f8d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f93:    	add    rsp,0x10
  00f97: 95 	movabs r13,0x55955e13b9b0
  00fa1:    	test   rax,rax
  00fa4:    	je     0xffff3217
  00faa: ff 	mov    QWORD PTR [r14-0xa0],rax
:00070 %14 = %14.call y()                   [Vec]
  00fb1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00fb8: 00 	test   rdi,0x7
  00fbf:    	jne    0x3670d
  00fc5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00fc9:    	jne    0x3670d
  00fcf: 26 	cmp    DWORD PTR [rip+0xffffffffffff64d8],0x26        # 0xffff74ae
  00fd6:    	jne    0x3670d
  00fdc:    	mov    esi,DWORD PTR [rip+0x11e5]        # 0x21c7
  00fe2:    	cmp    esi,0xffffffff
  00fe5:    	je     0x3672c
  00feb:    	cmp    WORD PTR [rdi+0x2],0x3
  00ff0:    	jne    0x1009
  00ff6:    	cmp    esi,0x6
  00ff9:    	jge    0x1009
  00fff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01004:    	jmp    0x1027
  01009:    	sub    rsp,0x10
  0100d:    	movq   QWORD PTR [rsp],xmm3
  01012: 95 	movabs rax,0x55955d9e0e20
  0101c:    	call   rax
  0101e:    	movq   xmm3,QWORD PTR [rsp]
  01023:    	add    rsp,0x10
  01027: ff 	mov    QWORD PTR [r14-0xa0],rax
:00071 
:00072 %14 = %6 * %14                       [Float][Float]
  0102e:    	mov    rdi,QWORD PTR [r14-0x60]
  01032: 00 	test   rdi,0x1
  01039:    	jne    0x36767
  0103f: 00 	test   rdi,0x2
  01046:    	je     0x1082
  0104c:    	xorps  xmm2,xmm2
  0104f: 00 	movabs rax,0x8000000000000002
  01059:    	cmp    rdi,rax
  0105c:    	je     0x1094
  01062:    	mov    rax,rdi
  01065:    	sar    rax,0x3f
  01069:    	add    rax,0x2
  0106d:    	and    rdi,0xfffffffffffffffc
  01071:    	or     rdi,rax
  01074:    	rol    rdi,0x3d
  01078:    	movq   xmm2,rdi
  0107d:    	jmp    0x1094
  01082:    	call   0xffff3270
  01087:    	test   rax,rax
  0108a:    	je     0x36767
  01090:    	movq   xmm2,xmm0
  01094: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0109b: 00 	test   rdi,0x1
  010a2:    	jne    0x36786
  010a8: 00 	test   rdi,0x2
  010af:    	je     0x10eb
  010b5:    	xorps  xmm4,xmm4
  010b8: 00 	movabs rax,0x8000000000000002
  010c2:    	cmp    rdi,rax
  010c5:    	je     0x10fd
  010cb:    	mov    rax,rdi
  010ce:    	sar    rax,0x3f
  010d2:    	add    rax,0x2
  010d6:    	and    rdi,0xfffffffffffffffc
  010da:    	or     rdi,rax
  010dd:    	rol    rdi,0x3d
  010e1:    	movq   xmm4,rdi
  010e6:    	jmp    0x10fd
  010eb:    	call   0xffff3270
  010f0:    	test   rax,rax
  010f3:    	je     0x36786
  010f9:    	movq   xmm4,xmm0
  010fd:    	mulsd  xmm4,xmm2
:00073 %8 = %13 + %14                       [Float][Float]
  01101:    	movq   xmm5,xmm3
  01105:    	addsd  xmm5,xmm4
:00074 %13 = dynvar(2, %2)
  01109:    	mov    rax,QWORD PTR [r14-0x18]
  0110d:    	mov    rax,QWORD PTR [rax]
  01110:    	mov    rax,QWORD PTR [rax-0x28]
  01114: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 %14 = 0: i32
  0111b: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00076 %13 = %13.[%14]                      [Array][Integer]
  01126: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0112d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01134: 00 	test   rdi,0x7
  0113b:    	jne    0x367a5
  01141:    	cmp    DWORD PTR [rdi+0x4],0xb
  01145:    	jne    0x367a5
  0114b: 00 	test   rsi,0x1
  01152:    	je     0x367a5
  01158:    	sar    rsi,1
  0115b:    	sub    rsp,0x10
  0115f:    	movq   QWORD PTR [rsp],xmm2
  01164:    	movq   QWORD PTR [rsp+0x8],xmm5
  0116a: 95 	movabs rax,0x55955d9acd00
  01174:    	call   rax
  01176:    	movq   xmm2,QWORD PTR [rsp]
  0117b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01181:    	add    rsp,0x10
  01185: 95 	movabs r13,0x55955e13ba20
  0118f:    	test   rax,rax
  01192:    	je     0xffff3217
  01198: ff 	mov    QWORD PTR [r14-0x98],rax
:00077 %13 = %13.call z()                   [Vec]
  0119f:    	movq   xmm0,xmm5
  011a3:    	call   0xffff3394
  011a8:    	mov    QWORD PTR [r14-0x70],rax
  011ac: ff 	mov    rdi,QWORD PTR [r14-0x98]
  011b3: 00 	test   rdi,0x7
  011ba:    	jne    0x367c1
  011c0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011c4:    	jne    0x367c1
  011ca: 26 	cmp    DWORD PTR [rip+0xffffffffffff62dd],0x26        # 0xffff74ae
  011d1:    	jne    0x367c1
  011d7:    	mov    esi,DWORD PTR [rip+0xff2]        # 0x21cf
  011dd:    	cmp    esi,0xffffffff
  011e0:    	je     0x367d0
  011e6:    	cmp    WORD PTR [rdi+0x2],0x3
  011eb:    	jne    0x1204
  011f1:    	cmp    esi,0x6
  011f4:    	jge    0x1204
  011fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011ff:    	jmp    0x1210
  01204: 95 	movabs rax,0x55955d9e0e20
  0120e:    	call   rax
  01210: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 
:00079 %13 = %4 * %13                       [Float][Float]
  01217:    	mov    rdi,QWORD PTR [r14-0x50]
  0121b: 00 	test   rdi,0x1
  01222:    	jne    0x367f9
  01228: 00 	test   rdi,0x2
  0122f:    	je     0x126b
  01235:    	xorps  xmm2,xmm2
  01238: 00 	movabs rax,0x8000000000000002
  01242:    	cmp    rdi,rax
  01245:    	je     0x127d
  0124b:    	mov    rax,rdi
  0124e:    	sar    rax,0x3f
  01252:    	add    rax,0x2
  01256:    	and    rdi,0xfffffffffffffffc
  0125a:    	or     rdi,rax
  0125d:    	rol    rdi,0x3d
  01261:    	movq   xmm2,rdi
  01266:    	jmp    0x127d
  0126b:    	call   0xffff3270
  01270:    	test   rax,rax
  01273:    	je     0x367f9
  01279:    	movq   xmm2,xmm0
  0127d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01284: 00 	test   rdi,0x1
  0128b:    	jne    0x36808
  01291: 00 	test   rdi,0x2
  01298:    	je     0x12d4
  0129e:    	xorps  xmm3,xmm3
  012a1: 00 	movabs rax,0x8000000000000002
  012ab:    	cmp    rdi,rax
  012ae:    	je     0x12e6
  012b4:    	mov    rax,rdi
  012b7:    	sar    rax,0x3f
  012bb:    	add    rax,0x2
  012bf:    	and    rdi,0xfffffffffffffffc
  012c3:    	or     rdi,rax
  012c6:    	rol    rdi,0x3d
  012ca:    	movq   xmm3,rdi
  012cf:    	jmp    0x12e6
  012d4:    	call   0xffff3270
  012d9:    	test   rax,rax
  012dc:    	je     0x36808
  012e2:    	movq   xmm3,xmm0
  012e6:    	mulsd  xmm3,xmm2
:00080 %14 = dynvar(2, %2)
  012ea:    	mov    rax,QWORD PTR [r14-0x18]
  012ee:    	mov    rax,QWORD PTR [rax]
  012f1:    	mov    rax,QWORD PTR [rax-0x28]
  012f5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  012fc: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  01307: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0130e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  01315: 00 	test   rdi,0x7
  0131c:    	jne    0x36817
  01322:    	cmp    DWORD PTR [rdi+0x4],0xb
  01326:    	jne    0x36817
  0132c: 00 	test   rsi,0x1
  01333:    	je     0x36817
  01339:    	sar    rsi,1
  0133c:    	sub    rsp,0x10
  01340:    	movq   QWORD PTR [rsp],xmm2
  01345:    	movq   QWORD PTR [rsp+0x8],xmm3
  0134b: 95 	movabs rax,0x55955d9acd00
  01355:    	call   rax
  01357:    	movq   xmm2,QWORD PTR [rsp]
  0135c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01362:    	add    rsp,0x10
  01366: 95 	movabs r13,0x55955e13ba80
  01370:    	test   rax,rax
  01373:    	je     0xffff3217
  01379: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %14 = %14.call z()                   [Vec]
  01380: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01387: 00 	test   rdi,0x7
  0138e:    	jne    0x36836
  01394:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01398:    	jne    0x36836
  0139e: 26 	cmp    DWORD PTR [rip+0xffffffffffff6109],0x26        # 0xffff74ae
  013a5:    	jne    0x36836
  013ab:    	mov    esi,DWORD PTR [rip+0xe26]        # 0x21d7
  013b1:    	cmp    esi,0xffffffff
  013b4:    	je     0x36855
  013ba:    	cmp    WORD PTR [rdi+0x2],0x3
  013bf:    	jne    0x13d8
  013c5:    	cmp    esi,0x6
  013c8:    	jge    0x13d8
  013ce:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013d3:    	jmp    0x13f6
  013d8:    	sub    rsp,0x10
  013dc:    	movq   QWORD PTR [rsp],xmm3
  013e1: 95 	movabs rax,0x55955d9e0e20
  013eb:    	call   rax
  013ed:    	movq   xmm3,QWORD PTR [rsp]
  013f2:    	add    rsp,0x10
  013f6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00084 
:00085 %14 = %5 * %14                       [Float][Float]
  013fd:    	mov    rdi,QWORD PTR [r14-0x58]
  01401: 00 	test   rdi,0x1
  01408:    	jne    0x36890
  0140e: 00 	test   rdi,0x2
  01415:    	je     0x1451
  0141b:    	xorps  xmm2,xmm2
  0141e: 00 	movabs rax,0x8000000000000002
  01428:    	cmp    rdi,rax
  0142b:    	je     0x1463
  01431:    	mov    rax,rdi
  01434:    	sar    rax,0x3f
  01438:    	add    rax,0x2
  0143c:    	and    rdi,0xfffffffffffffffc
  01440:    	or     rdi,rax
  01443:    	rol    rdi,0x3d
  01447:    	movq   xmm2,rdi
  0144c:    	jmp    0x1463
  01451:    	call   0xffff3270
  01456:    	test   rax,rax
  01459:    	je     0x36890
  0145f:    	movq   xmm2,xmm0
  01463: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0146a: 00 	test   rdi,0x1
  01471:    	jne    0x368af
  01477: 00 	test   rdi,0x2
  0147e:    	je     0x14ba
  01484:    	xorps  xmm4,xmm4
  01487: 00 	movabs rax,0x8000000000000002
  01491:    	cmp    rdi,rax
  01494:    	je     0x14cc
  0149a:    	mov    rax,rdi
  0149d:    	sar    rax,0x3f
  014a1:    	add    rax,0x2
  014a5:    	and    rdi,0xfffffffffffffffc
  014a9:    	or     rdi,rax
  014ac:    	rol    rdi,0x3d
  014b0:    	movq   xmm4,rdi
  014b5:    	jmp    0x14cc
  014ba:    	call   0xffff3270
  014bf:    	test   rax,rax
  014c2:    	je     0x368af
  014c8:    	movq   xmm4,xmm0
  014cc:    	mulsd  xmm4,xmm2
:00086 %13 = %13 + %14                      [Float][Float]
  014d0:    	addsd  xmm3,xmm4
:00087 %14 = dynvar(2, %2)
  014d4:    	mov    rax,QWORD PTR [r14-0x18]
  014d8:    	mov    rax,QWORD PTR [rax]
  014db:    	mov    rax,QWORD PTR [rax-0x28]
  014df: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 2: i32
  014e6: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00089 %14 = %14.[%15]                      [Array][Integer]
  014f1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  014f8: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  014ff: 00 	test   rdi,0x7
  01506:    	jne    0x368ce
  0150c:    	cmp    DWORD PTR [rdi+0x4],0xb
  01510:    	jne    0x368ce
  01516: 00 	test   rsi,0x1
  0151d:    	je     0x368ce
  01523:    	sar    rsi,1
  01526:    	sub    rsp,0x10
  0152a:    	movq   QWORD PTR [rsp],xmm2
  0152f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01535: 95 	movabs rax,0x55955d9acd00
  0153f:    	call   rax
  01541:    	movq   xmm2,QWORD PTR [rsp]
  01546:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0154c:    	add    rsp,0x10
  01550: 95 	movabs r13,0x55955e13baf0
  0155a:    	test   rax,rax
  0155d:    	je     0xffff3217
  01563: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %14 = %14.call z()                   [Vec]
  0156a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01571: 00 	test   rdi,0x7
  01578:    	jne    0x368ed
  0157e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01582:    	jne    0x368ed
  01588: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f1f],0x26        # 0xffff74ae
  0158f:    	jne    0x368ed
  01595:    	mov    esi,DWORD PTR [rip+0xc44]        # 0x21df
  0159b:    	cmp    esi,0xffffffff
  0159e:    	je     0x3690c
  015a4:    	cmp    WORD PTR [rdi+0x2],0x3
  015a9:    	jne    0x15c2
  015af:    	cmp    esi,0x6
  015b2:    	jge    0x15c2
  015b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  015bd:    	jmp    0x15e0
  015c2:    	sub    rsp,0x10
  015c6:    	movq   QWORD PTR [rsp],xmm3
  015cb: 95 	movabs rax,0x55955d9e0e20
  015d5:    	call   rax
  015d7:    	movq   xmm3,QWORD PTR [rsp]
  015dc:    	add    rsp,0x10
  015e0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 
:00092 %14 = %6 * %14                       [Float][Float]
  015e7:    	mov    rdi,QWORD PTR [r14-0x60]
  015eb: 00 	test   rdi,0x1
  015f2:    	jne    0x36947
  015f8: 00 	test   rdi,0x2
  015ff:    	je     0x163b
  01605:    	xorps  xmm2,xmm2
  01608: 00 	movabs rax,0x8000000000000002
  01612:    	cmp    rdi,rax
  01615:    	je     0x164d
  0161b:    	mov    rax,rdi
  0161e:    	sar    rax,0x3f
  01622:    	add    rax,0x2
  01626:    	and    rdi,0xfffffffffffffffc
  0162a:    	or     rdi,rax
  0162d:    	rol    rdi,0x3d
  01631:    	movq   xmm2,rdi
  01636:    	jmp    0x164d
  0163b:    	call   0xffff3270
  01640:    	test   rax,rax
  01643:    	je     0x36947
  01649:    	movq   xmm2,xmm0
  0164d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01654: 00 	test   rdi,0x1
  0165b:    	jne    0x36966
  01661: 00 	test   rdi,0x2
  01668:    	je     0x16a4
  0166e:    	xorps  xmm4,xmm4
  01671: 00 	movabs rax,0x8000000000000002
  0167b:    	cmp    rdi,rax
  0167e:    	je     0x16b6
  01684:    	mov    rax,rdi
  01687:    	sar    rax,0x3f
  0168b:    	add    rax,0x2
  0168f:    	and    rdi,0xfffffffffffffffc
  01693:    	or     rdi,rax
  01696:    	rol    rdi,0x3d
  0169a:    	movq   xmm4,rdi
  0169f:    	jmp    0x16b6
  016a4:    	call   0xffff3270
  016a9:    	test   rax,rax
  016ac:    	je     0x36966
  016b2:    	movq   xmm4,xmm0
  016b6:    	mulsd  xmm4,xmm2
:00093 %9 = %13 + %14                       [Float][Float]
  016ba:    	movq   xmm5,xmm3
  016be:    	addsd  xmm5,xmm4
:00094 %13 = const[Vec]                     [Vec]
  016c2: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5dfa]        # 0xffff74c3
  016c9: 00 	cmp    rax,QWORD PTR [rip+0xb23]        # 0x21f3
  016d0:    	jne    0x36985
  016d6: 00 	mov    rax,QWORD PTR [rip+0xb06]        # 0x21e3
  016dd: ff 	mov    QWORD PTR [r14-0x98],rax
:00095 %14 = %7
  016e4:    	mov    rax,QWORD PTR [r14-0x68]
  016e8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00096 %15 = %8
  016ef:    	mov    rax,QWORD PTR [r14-0x70]
  016f3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %16 = %9
:00098 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  016fa:    	movq   xmm0,xmm5
  016fe:    	call   0xffff3394
  01703: ff 	mov    QWORD PTR [r14-0xb0],rax
  0170a:    	movq   xmm0,xmm5
  0170e:    	call   0xffff3394
  01713:    	mov    QWORD PTR [r14-0x78],rax
  01717: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0171e: 00 	test   rdi,0x7
  01725:    	jne    0x369f5
  0172b:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0172f:    	jne    0x369f5
  01735: 26 	cmp    DWORD PTR [rip+0xffffffffffff5d72],0x26        # 0xffff74ae
  0173c:    	jne    0x369f5
  01742: 00 	mov    r9,0x0
  01749:    	sub    rsp,0x10
  0174d:    	movq   QWORD PTR [rsp],xmm5
  01752:    	mov    rdx,rdi
  01755:    	mov    QWORD PTR [rsp-0x40],rcx
  0175a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01763: ff 	lea    rcx,[r14-0xa0]
  0176a: 00 	mov    r8,0x3
  01771:    	mov    rsi,QWORD PTR [rbx]
  01774:    	mov    QWORD PTR [rsp-0x18],rsi
  01779:    	lea    rsi,[rsp-0x18]
  0177e:    	mov    QWORD PTR [rbx],rsi
  01781:    	lea    r14,[rsp-0x10]
  01786:    	mov    QWORD PTR [rsp-0x20],r14
  0178b:    	call   0x36a04
  01790:    	lea    r14,[rbp-0x8]
  01794:    	mov    QWORD PTR [rbx],r14
  01797:    	mov    r14,QWORD PTR [rbp-0x10]
  0179b:    	movq   xmm5,QWORD PTR [rsp]
  017a0:    	add    rsp,0x10
  017a4: 95 	movabs r13,0x55955e13bb90
  017ae:    	test   rax,rax
  017b1:    	je     0xffff3217
  017b7:    	mov    QWORD PTR [r14-0x80],rax
:00099 
:00100 %13 = const[Ray]                     [Ray]
  017bb: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5d01]        # 0xffff74c3
  017c2: 00 	cmp    rax,QWORD PTR [rip+0xa4a]        # 0x2213
  017c9:    	jne    0x36a36
  017cf: 00 	mov    rax,QWORD PTR [rip+0xa2d]        # 0x2203
  017d6: ff 	mov    QWORD PTR [r14-0x98],rax
:00101 %14 = dynvar(2, %7)
  017dd:    	mov    rax,QWORD PTR [r14-0x18]
  017e1:    	mov    rax,QWORD PTR [rax]
  017e4:    	mov    rax,QWORD PTR [rax-0x50]
  017e8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00102 %15 = %10
  017ef:    	mov    rax,QWORD PTR [r14-0x80]
  017f3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  017fa: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01801: 00 	test   rdi,0x7
  01808:    	jne    0x36a8e
  0180e:    	cmp    DWORD PTR [rdi+0x4],0x32
  01812:    	jne    0x36a8e
  01818: 26 	cmp    DWORD PTR [rip+0xffffffffffff5c8f],0x26        # 0xffff74ae
  0181f:    	jne    0x36a8e
  01825: 00 	mov    r9,0x0
  0182c:    	sub    rsp,0x10
  01830:    	movq   QWORD PTR [rsp],xmm5
  01835:    	mov    rdx,rdi
  01838:    	mov    QWORD PTR [rsp-0x40],rcx
  0183d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01846: ff 	lea    rcx,[r14-0xa0]
  0184d: 00 	mov    r8,0x2
  01854:    	mov    rsi,QWORD PTR [rbx]
  01857:    	mov    QWORD PTR [rsp-0x18],rsi
  0185c:    	lea    rsi,[rsp-0x18]
  01861:    	mov    QWORD PTR [rbx],rsi
  01864:    	lea    r14,[rsp-0x10]
  01869:    	mov    QWORD PTR [rsp-0x20],r14
  0186e:    	call   0x36a9d
  01873:    	lea    r14,[rbp-0x8]
  01877:    	mov    QWORD PTR [rbx],r14
  0187a:    	mov    r14,QWORD PTR [rbp-0x10]
  0187e:    	movq   xmm5,QWORD PTR [rsp]
  01883:    	add    rsp,0x10
  01887: 95 	movabs r13,0x55955e13bbe0
  01891:    	test   rax,rax
  01894:    	je     0xffff3217
  0189a: ff 	mov    QWORD PTR [r14-0x88],rax
:00104 
:00105 %13 = const[Isect]                   [Isect]
  018a1: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5c1b]        # 0xffff74c3
  018a8: 00 	cmp    rax,QWORD PTR [rip+0x984]        # 0x2233
  018af:    	jne    0x36acf
  018b5: 00 	mov    rax,QWORD PTR [rip+0x967]        # 0x2223
  018bc: ff 	mov    QWORD PTR [r14-0x98],rax
:00106 %12 = %13.call new()                 [#<Class:Isect>]
  018c3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ca: 00 	test   rdi,0x7
  018d1:    	jne    0x36b27
  018d7:    	cmp    DWORD PTR [rdi+0x4],0x34
  018db:    	jne    0x36b27
  018e1: 26 	cmp    DWORD PTR [rip+0xffffffffffff5bc6],0x26        # 0xffff74ae
  018e8:    	jne    0x36b27
  018ee: 00 	mov    r9,0x0
  018f5:    	sub    rsp,0x10
  018f9:    	movq   QWORD PTR [rsp],xmm5
  018fe:    	mov    rdx,rdi
  01901:    	mov    QWORD PTR [rsp-0x40],rcx
  01906: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0190f: ff 	lea    rcx,[r14-0xa0]
  01916: 00 	mov    r8,0x0
  0191d:    	mov    rsi,QWORD PTR [rbx]
  01920:    	mov    QWORD PTR [rsp-0x18],rsi
  01925:    	lea    rsi,[rsp-0x18]
  0192a:    	mov    QWORD PTR [rbx],rsi
  0192d:    	lea    r14,[rsp-0x10]
  01932:    	mov    QWORD PTR [rsp-0x20],r14
  01937:    	call   0x36b36
  0193c:    	lea    r14,[rbp-0x8]
  01940:    	mov    QWORD PTR [rbx],r14
  01943:    	mov    r14,QWORD PTR [rbp-0x10]
  01947:    	movq   xmm5,QWORD PTR [rsp]
  0194c:    	add    rsp,0x10
  01950: 95 	movabs r13,0x55955e13bc10
  0195a:    	test   rax,rax
  0195d:    	je     0xffff3217
  01963: ff 	mov    QWORD PTR [r14-0x90],rax
:00107 
:00108 %13 = @spheres: Scene[IvarId(0)]
  0196a:    	mov    rdi,QWORD PTR [r14-0x30]
  0196e:    	mov    rax,QWORD PTR [rdi+0x10]
  01972: ff 	mov    QWORD PTR [r14-0x98],rax
:00109 %14 = 0: i32
  01979: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00110 %13 = %13.[%14]                      [Array][Integer]
  01984: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0198b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01992: 00 	test   rdi,0x7
  01999:    	jne    0x36b68
  0199f:    	cmp    DWORD PTR [rdi+0x4],0xb
  019a3:    	jne    0x36b68
  019a9: 00 	test   rsi,0x1
  019b0:    	je     0x36b68
  019b6:    	sar    rsi,1
  019b9:    	sub    rsp,0x10
  019bd:    	movq   QWORD PTR [rsp],xmm5
  019c2: 95 	movabs rax,0x55955d9acd00
  019cc:    	call   rax
  019ce:    	movq   xmm5,QWORD PTR [rsp]
  019d3:    	add    rsp,0x10
  019d7: 95 	movabs r13,0x55955e13bc40
  019e1:    	test   rax,rax
  019e4:    	je     0xffff3217
  019ea: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %11
  019f1: ff 	mov    rax,QWORD PTR [r14-0x88]
  019f8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00112 %15 = %12
  019ff: ff 	mov    rax,QWORD PTR [r14-0x90]
  01a06: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 _ = %13.call intersect(%14; 2)       [Sphere]
  01a0d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a14: 00 	test   rdi,0x7
  01a1b:    	jne    0x36b77
  01a21:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01a25:    	jne    0x36b77
  01a2b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a7c],0x26        # 0xffff74ae
  01a32:    	jne    0x36b77
  01a38:    	sub    rsp,0x10
  01a3c:    	movq   QWORD PTR [rsp],xmm5
  01a41: 00 	cmp    DWORD PTR [rip+0xffffffffffff5a6a],0x0        # 0xffff74b2
  01a48:    	je     0x1a60
  01a4e:    	mov    rdi,r12
  01a51:    	mov    rsi,QWORD PTR [rbx]
  01a54: 95 	movabs rax,0x55955d9a3d50
  01a5e:    	call   rax
  01a60: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a69: ff 	mov    rax,QWORD PTR [r14-0x98]
  01a70:    	mov    QWORD PTR [rsp-0x40],rax
  01a75: 00 	mov    rdi,0x2
  01a7c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a83:    	mov    QWORD PTR [rsp-0x48],rax
  01a88: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a8f:    	mov    QWORD PTR [rsp-0x50],rax
  01a94: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a9d: 0e 	movabs rax,0x1000e00000061
  01aa7:    	mov    QWORD PTR [rsp-0x30],rax
  01aac: 95 	movabs r13,0x55955e16d0b0
  01ab6:    	mov    rsi,QWORD PTR [rbx]
  01ab9:    	mov    QWORD PTR [rsp-0x18],rsi
  01abe:    	lea    rsi,[rsp-0x18]
  01ac3:    	mov    QWORD PTR [rbx],rsi
  01ac6:    	lea    r14,[rsp-0x10]
  01acb:    	mov    QWORD PTR [rsp-0x20],r14
  01ad0:    	call   0xffff806f
  01ad5:    	lea    r14,[rbp-0x8]
  01ad9:    	mov    QWORD PTR [rbx],r14
  01adc:    	mov    r14,QWORD PTR [rbp-0x10]
  01ae0:    	movq   xmm5,QWORD PTR [rsp]
  01ae5:    	add    rsp,0x10
  01ae9: 95 	movabs r13,0x55955e13bc80
  01af3:    	test   rax,rax
  01af6:    	je     0xffff3217
:00114 
:00115 %13 = @spheres: Scene[IvarId(0)]
  01afc:    	mov    rdi,QWORD PTR [r14-0x30]
  01b00:    	mov    rax,QWORD PTR [rdi+0x10]
  01b04: ff 	mov    QWORD PTR [r14-0x98],rax
:00116 %14 = 1: i32
  01b0b: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00117 %13 = %13.[%14]                      [Array][Integer]
  01b16: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01b1d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01b24: 00 	test   rdi,0x7
  01b2b:    	jne    0x36b86
  01b31:    	cmp    DWORD PTR [rdi+0x4],0xb
  01b35:    	jne    0x36b86
  01b3b: 00 	test   rsi,0x1
  01b42:    	je     0x36b86
  01b48:    	sar    rsi,1
  01b4b:    	sub    rsp,0x10
  01b4f:    	movq   QWORD PTR [rsp],xmm5
  01b54: 95 	movabs rax,0x55955d9acd00
  01b5e:    	call   rax
  01b60:    	movq   xmm5,QWORD PTR [rsp]
  01b65:    	add    rsp,0x10
  01b69: 95 	movabs r13,0x55955e13bcb0
  01b73:    	test   rax,rax
  01b76:    	je     0xffff3217
  01b7c: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = %11
  01b83: ff 	mov    rax,QWORD PTR [r14-0x88]
  01b8a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %12
  01b91: ff 	mov    rax,QWORD PTR [r14-0x90]
  01b98: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 _ = %13.call intersect(%14; 2)       [Sphere]
  01b9f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ba6: 00 	test   rdi,0x7
  01bad:    	jne    0x36b95
  01bb3:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01bb7:    	jne    0x36b95
  01bbd: 26 	cmp    DWORD PTR [rip+0xffffffffffff58ea],0x26        # 0xffff74ae
  01bc4:    	jne    0x36b95
  01bca:    	sub    rsp,0x10
  01bce:    	movq   QWORD PTR [rsp],xmm5
  01bd3: 00 	cmp    DWORD PTR [rip+0xffffffffffff58d8],0x0        # 0xffff74b2
  01bda:    	je     0x1bf2
  01be0:    	mov    rdi,r12
  01be3:    	mov    rsi,QWORD PTR [rbx]
  01be6: 95 	movabs rax,0x55955d9a3d50
  01bf0:    	call   rax
  01bf2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01bfb: ff 	mov    rax,QWORD PTR [r14-0x98]
  01c02:    	mov    QWORD PTR [rsp-0x40],rax
  01c07: 00 	mov    rdi,0x2
  01c0e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01c15:    	mov    QWORD PTR [rsp-0x48],rax
  01c1a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01c21:    	mov    QWORD PTR [rsp-0x50],rax
  01c26: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c2f: 0e 	movabs rax,0x1000e00000061
  01c39:    	mov    QWORD PTR [rsp-0x30],rax
  01c3e: 95 	movabs r13,0x55955e16d0b0
  01c48:    	mov    rsi,QWORD PTR [rbx]
  01c4b:    	mov    QWORD PTR [rsp-0x18],rsi
  01c50:    	lea    rsi,[rsp-0x18]
  01c55:    	mov    QWORD PTR [rbx],rsi
  01c58:    	lea    r14,[rsp-0x10]
  01c5d:    	mov    QWORD PTR [rsp-0x20],r14
  01c62:    	call   0xffff806f
  01c67:    	lea    r14,[rbp-0x8]
  01c6b:    	mov    QWORD PTR [rbx],r14
  01c6e:    	mov    r14,QWORD PTR [rbp-0x10]
  01c72:    	movq   xmm5,QWORD PTR [rsp]
  01c77:    	add    rsp,0x10
  01c7b: 95 	movabs r13,0x55955e13bcf0
  01c85:    	test   rax,rax
  01c88:    	je     0xffff3217
:00121 
:00122 %13 = @spheres: Scene[IvarId(0)]
  01c8e:    	mov    rdi,QWORD PTR [r14-0x30]
  01c92:    	mov    rax,QWORD PTR [rdi+0x10]
  01c96: ff 	mov    QWORD PTR [r14-0x98],rax
:00123 %14 = 2: i32
  01c9d: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00124 %13 = %13.[%14]                      [Array][Integer]
  01ca8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01caf: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01cb6: 00 	test   rdi,0x7
  01cbd:    	jne    0x36ba4
  01cc3:    	cmp    DWORD PTR [rdi+0x4],0xb
  01cc7:    	jne    0x36ba4
  01ccd: 00 	test   rsi,0x1
  01cd4:    	je     0x36ba4
  01cda:    	sar    rsi,1
  01cdd:    	sub    rsp,0x10
  01ce1:    	movq   QWORD PTR [rsp],xmm5
  01ce6: 95 	movabs rax,0x55955d9acd00
  01cf0:    	call   rax
  01cf2:    	movq   xmm5,QWORD PTR [rsp]
  01cf7:    	add    rsp,0x10
  01cfb: 95 	movabs r13,0x55955e13bd20
  01d05:    	test   rax,rax
  01d08:    	je     0xffff3217
  01d0e: ff 	mov    QWORD PTR [r14-0x98],rax
:00125 %14 = %11
  01d15: ff 	mov    rax,QWORD PTR [r14-0x88]
  01d1c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00126 %15 = %12
  01d23: ff 	mov    rax,QWORD PTR [r14-0x90]
  01d2a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00127 _ = %13.call intersect(%14; 2)       [Sphere]
  01d31: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d38: 00 	test   rdi,0x7
  01d3f:    	jne    0x36bb3
  01d45:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01d49:    	jne    0x36bb3
  01d4f: 26 	cmp    DWORD PTR [rip+0xffffffffffff5758],0x26        # 0xffff74ae
  01d56:    	jne    0x36bb3
  01d5c:    	sub    rsp,0x10
  01d60:    	movq   QWORD PTR [rsp],xmm5
  01d65: 00 	cmp    DWORD PTR [rip+0xffffffffffff5746],0x0        # 0xffff74b2
  01d6c:    	je     0x1d84
  01d72:    	mov    rdi,r12
  01d75:    	mov    rsi,QWORD PTR [rbx]
  01d78: 95 	movabs rax,0x55955d9a3d50
  01d82:    	call   rax
  01d84: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d8d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01d94:    	mov    QWORD PTR [rsp-0x40],rax
  01d99: 00 	mov    rdi,0x2
  01da0: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01da7:    	mov    QWORD PTR [rsp-0x48],rax
  01dac: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01db3:    	mov    QWORD PTR [rsp-0x50],rax
  01db8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dc1: 0e 	movabs rax,0x1000e00000061
  01dcb:    	mov    QWORD PTR [rsp-0x30],rax
  01dd0: 95 	movabs r13,0x55955e16d0b0
  01dda:    	mov    rsi,QWORD PTR [rbx]
  01ddd:    	mov    QWORD PTR [rsp-0x18],rsi
  01de2:    	lea    rsi,[rsp-0x18]
  01de7:    	mov    QWORD PTR [rbx],rsi
  01dea:    	lea    r14,[rsp-0x10]
  01def:    	mov    QWORD PTR [rsp-0x20],r14
  01df4:    	call   0xffff806f
  01df9:    	lea    r14,[rbp-0x8]
  01dfd:    	mov    QWORD PTR [rbx],r14
  01e00:    	mov    r14,QWORD PTR [rbp-0x10]
  01e04:    	movq   xmm5,QWORD PTR [rsp]
  01e09:    	add    rsp,0x10
  01e0d: 95 	movabs r13,0x55955e13bd60
  01e17:    	test   rax,rax
  01e1a:    	je     0xffff3217
:00128 
:00129 %13 = @plane: Scene[IvarId(1)]
  01e20:    	mov    rdi,QWORD PTR [r14-0x30]
  01e24:    	mov    rax,QWORD PTR [rdi+0x18]
  01e28: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01e2f: ff 	mov    rax,QWORD PTR [r14-0x88]
  01e36: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01e3d: ff 	mov    rax,QWORD PTR [r14-0x90]
  01e44: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Plane]
  01e4b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01e52: 00 	test   rdi,0x7
  01e59:    	jne    0x36bc2
  01e5f:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01e63:    	jne    0x36bc2
  01e69: 26 	cmp    DWORD PTR [rip+0xffffffffffff563e],0x26        # 0xffff74ae
  01e70:    	jne    0x36bc2
  01e76:    	sub    rsp,0x10
  01e7a:    	movq   QWORD PTR [rsp],xmm5
  01e7f: 00 	cmp    DWORD PTR [rip+0xffffffffffff562c],0x0        # 0xffff74b2
  01e86:    	je     0x1e9e
  01e8c:    	mov    rdi,r12
  01e8f:    	mov    rsi,QWORD PTR [rbx]
  01e92: 95 	movabs rax,0x55955d9a3d50
  01e9c:    	call   rax
  01e9e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ea7: ff 	mov    rax,QWORD PTR [r14-0x98]
  01eae:    	mov    QWORD PTR [rsp-0x40],rax
  01eb3: 00 	mov    rdi,0x2
  01eba: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01ec1:    	mov    QWORD PTR [rsp-0x48],rax
  01ec6: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01ecd:    	mov    QWORD PTR [rsp-0x50],rax
  01ed2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01edb: 0c 	movabs rax,0x1000c00000063
  01ee5:    	mov    QWORD PTR [rsp-0x30],rax
  01eea: 95 	movabs r13,0x55955e173c50
  01ef4:    	mov    rsi,QWORD PTR [rbx]
  01ef7:    	mov    QWORD PTR [rsp-0x18],rsi
  01efc:    	lea    rsi,[rsp-0x18]
  01f01:    	mov    QWORD PTR [rbx],rsi
  01f04:    	lea    r14,[rsp-0x10]
  01f09:    	mov    QWORD PTR [rsp-0x20],r14
  01f0e:    	call   0xffff863b
  01f13:    	lea    r14,[rbp-0x8]
  01f17:    	mov    QWORD PTR [rbx],r14
  01f1a:    	mov    r14,QWORD PTR [rbp-0x10]
  01f1e:    	movq   xmm5,QWORD PTR [rsp]
  01f23:    	add    rsp,0x10
  01f27: 95 	movabs r13,0x55955e13bdb0
  01f31:    	test   rax,rax
  01f34:    	je     0xffff3217
:00133 
:00134 %13 = %12.call hit()                 [Isect]
  01f3a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01f41: 00 	test   rdi,0x7
  01f48:    	jne    0x36bd1
  01f4e:    	cmp    DWORD PTR [rdi+0x4],0x33
  01f52:    	jne    0x36bd1
  01f58: 26 	cmp    DWORD PTR [rip+0xffffffffffff554f],0x26        # 0xffff74ae
  01f5f:    	jne    0x36bd1
  01f65:    	mov    esi,DWORD PTR [rip+0x2d4]        # 0x223f
  01f6b:    	cmp    esi,0xffffffff
  01f6e:    	je     0x36be0
  01f74:    	cmp    WORD PTR [rdi+0x2],0x3
  01f79:    	jne    0x1f92
  01f7f:    	cmp    esi,0x6
  01f82:    	jge    0x1f92
  01f88:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f8d:    	jmp    0x1fb0
  01f92:    	sub    rsp,0x10
  01f96:    	movq   QWORD PTR [rsp],xmm5
  01f9b: 95 	movabs rax,0x55955d9e0e20
  01fa5:    	call   rax
  01fa7:    	movq   xmm5,QWORD PTR [rsp]
  01fac:    	add    rsp,0x10
  01fb0: ff 	mov    QWORD PTR [r14-0x98],rax
:00135 
:00136 condnotbr %13 =>:00142
  01fb7: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fbe:    	or     rax,0x10
  01fc2:    	cmp    rax,0x14
  01fc6:    	je     0x2092
:00137 %13 = dynvar(2, %6)
  01fcc:    	mov    rax,QWORD PTR [r14-0x18]
  01fd0:    	mov    rax,QWORD PTR [rax]
  01fd3:    	mov    rax,QWORD PTR [rax-0x48]
  01fd7: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = literal[1.0]
  01fde: 00 	movq   xmm2,QWORD PTR [rip+0x25d]        # 0x2243
  01fe6: 00 	movabs rax,0xff80000000000002
  01ff0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  01ff7: 00 	cmp    DWORD PTR [rip+0x24d],0x0        # 0x224b
  01ffe:    	jl     0x36c1b
  02004:    	je     0x36c2a
  0200a: 01 	sub    DWORD PTR [rip+0x23a],0x1        # 0x224b
  02011:    	xor    rdi,rdi
  02014:    	jmp    0x36c1b
  02019: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02020: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  02027:    	sub    rsp,0x10
  0202b:    	movq   QWORD PTR [rsp],xmm2
  02030:    	movq   QWORD PTR [rsp+0x8],xmm5
  02036:    	mov    rdx,rdi
  02039:    	mov    rcx,rsi
  0203c:    	mov    rdi,rbx
  0203f:    	mov    rsi,r12
  02042: 95 	movabs rax,0x55955d95ac30
  0204c:    	call   rax
  0204e:    	movq   xmm2,QWORD PTR [rsp]
  02053:    	movq   xmm5,QWORD PTR [rsp+0x8]
  02059:    	add    rsp,0x10
  0205d: 95 	movabs r13,0x55955e13be10
  02067:    	test   rax,rax
  0206a:    	je     0xffff3217
  02070: ff 	mov    QWORD PTR [r14-0x98],rax
:00140 dynvar(2, %6) = %13
  02077:    	mov    rax,QWORD PTR [r14-0x18]
  0207b:    	mov    rax,QWORD PTR [rax]
  0207e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02085:    	mov    QWORD PTR [rax-0x48],rdi
:00141 ret %13
  02089: ff 	mov    rax,QWORD PTR [r14-0x98]
  02090:    	leave  
  02091:    	ret    
:00142 %13 = literal[0.0]
  02092: 00 	movq   xmm2,QWORD PTR [rip+0x1b9]        # 0x2253
  0209a: 00 	movabs rax,0x8000000000000002
  020a4: ff 	mov    QWORD PTR [r14-0x98],rax
:00143 ret %13
  020ab: ff 	mov    rax,QWORD PTR [r14-0x98]
  020b2:    	leave  
  020b3:    	ret    
==> start whole compile: intersect FuncId(97) self_class:Sphere start:[00000] bytecode:0x55955e16d0b0
<== finished compile. elapsed:114.8µs
offset:Pos(61544) code: 6013 bytes  data: 267 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x349eb
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [r14-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x349fa
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00068:    	jne    0x349fa
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %9 = %1.call org()                   [Ray]
  0006e:    	mov    rdi,QWORD PTR [r14-0x38]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x34a09
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00083:    	jne    0x34a09
  00089: 26 	cmp    DWORD PTR [rip+0xffffffffffff51c3],0x26        # 0xffff5253
  00090:    	jne    0x34a09
  00096:    	mov    esi,DWORD PTR [rip+0x16e5]        # 0x1781
  0009c:    	cmp    esi,0xffffffff
  0009f:    	je     0x34a18
  000a5:    	cmp    WORD PTR [rdi+0x2],0x3
  000aa:    	jne    0xc3
  000b0:    	cmp    esi,0x6
  000b3:    	jge    0xc3
  000b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000be:    	jmp    0xcf
  000c3: 95 	movabs rax,0x55955d9e0e20
  000cd:    	call   rax
  000cf:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00003 %10 = @center: Sphere[IvarId(0)]
  000d3:    	mov    rdi,QWORD PTR [r14-0x30]
  000d7:    	mov    rax,QWORD PTR [rdi+0x10]
  000db:    	mov    QWORD PTR [r14-0x80],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
  000df:    	mov    rdi,QWORD PTR [r14-0x78]
  000e3: 00 	test   rdi,0x7
  000ea:    	jne    0x34a41
  000f0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000f4:    	jne    0x34a41
  000fa: 26 	cmp    DWORD PTR [rip+0xffffffffffff5152],0x26        # 0xffff5253
  00101:    	jne    0x34a41
  00107: 00 	cmp    DWORD PTR [rip+0xffffffffffff5149],0x0        # 0xffff5257
  0010e:    	je     0x126
  00114:    	mov    rdi,r12
  00117:    	mov    rsi,QWORD PTR [rbx]
  0011a: 95 	movabs rax,0x55955d9a3d50
  00124:    	call   rax
  00126: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0012f:    	mov    rax,QWORD PTR [r14-0x78]
  00133:    	mov    QWORD PTR [rsp-0x40],rax
  00138: 00 	mov    rdi,0x1
  0013f:    	mov    rax,QWORD PTR [r14-0x80]
  00143:    	mov    QWORD PTR [rsp-0x48],rax
  00148: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00151: 07 	movabs rax,0x100070000005b
  0015b:    	mov    QWORD PTR [rsp-0x30],rax
  00160: 95 	movabs r13,0x55955e18a030
  0016a:    	mov    rsi,QWORD PTR [rbx]
  0016d:    	mov    QWORD PTR [rsp-0x18],rsi
  00172:    	lea    rsi,[rsp-0x18]
  00177:    	mov    QWORD PTR [rbx],rsi
  0017a:    	lea    r14,[rsp-0x10]
  0017f:    	mov    QWORD PTR [rsp-0x20],r14
  00184:    	call   0xffff5ea2
  00189:    	lea    r14,[rbp-0x8]
  0018d:    	mov    QWORD PTR [rbx],r14
  00190:    	mov    r14,QWORD PTR [rbp-0x10]
  00194: 95 	movabs r13,0x55955e16d110
  0019e:    	test   rax,rax
  001a1:    	je     0xffff0fbc
  001a7:    	mov    QWORD PTR [r14-0x48],rax
:00005 
:00006 %9 = %1.call dir()                   [Ray]
  001ab:    	mov    rdi,QWORD PTR [r14-0x38]
  001af: 00 	test   rdi,0x7
  001b6:    	jne    0x34a50
  001bc:    	cmp    DWORD PTR [rdi+0x4],0x31
  001c0:    	jne    0x34a50
  001c6: 26 	cmp    DWORD PTR [rip+0xffffffffffff5086],0x26        # 0xffff5253
  001cd:    	jne    0x34a50
  001d3:    	mov    esi,DWORD PTR [rip+0x15b0]        # 0x1789
  001d9:    	cmp    esi,0xffffffff
  001dc:    	je     0x34a5f
  001e2:    	cmp    WORD PTR [rdi+0x2],0x3
  001e7:    	jne    0x200
  001ed:    	cmp    esi,0x6
  001f0:    	jge    0x200
  001f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fb:    	jmp    0x20c
  00200: 95 	movabs rax,0x55955d9e0e20
  0020a:    	call   rax
  0020c:    	mov    QWORD PTR [r14-0x78],rax
:00007 
:00008 %4 = %3.call vdot(%9; 1)             [Vec]
  00210:    	mov    rdi,QWORD PTR [r14-0x48]
  00214: 00 	test   rdi,0x7
  0021b:    	jne    0x34a88
  00221:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00225:    	jne    0x34a88
  0022b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5021],0x26        # 0xffff5253
  00232:    	jne    0x34a88
  00238: 00 	cmp    DWORD PTR [rip+0xffffffffffff5018],0x0        # 0xffff5257
  0023f:    	je     0x257
  00245:    	mov    rdi,r12
  00248:    	mov    rsi,QWORD PTR [rbx]
  0024b: 95 	movabs rax,0x55955d9a3d50
  00255:    	call   rax
  00257: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00260:    	mov    rax,QWORD PTR [r14-0x48]
  00264:    	mov    QWORD PTR [rsp-0x40],rax
  00269: 00 	mov    rdi,0x1
  00270:    	mov    rax,QWORD PTR [r14-0x78]
  00274:    	mov    QWORD PTR [rsp-0x48],rax
  00279: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00282: 05 	movabs rax,0x100050000005d
  0028c:    	mov    QWORD PTR [rsp-0x30],rax
  00291: 95 	movabs r13,0x55955e1715b0
  0029b:    	mov    rsi,QWORD PTR [rbx]
  0029e:    	mov    QWORD PTR [rsp-0x18],rsi
  002a3:    	lea    rsi,[rsp-0x18]
  002a8:    	mov    QWORD PTR [rbx],rsi
  002ab:    	lea    r14,[rsp-0x10]
  002b0:    	mov    QWORD PTR [rsp-0x20],r14
  002b5:    	call   0xffff5f30
  002ba:    	lea    r14,[rbp-0x8]
  002be:    	mov    QWORD PTR [rbx],r14
  002c1:    	mov    r14,QWORD PTR [rbp-0x10]
  002c5: 95 	movabs r13,0x55955e16d150
  002cf:    	test   rax,rax
  002d2:    	je     0xffff0fbc
  002d8:    	mov    QWORD PTR [r14-0x50],rax
:00009 
:00010 %9 = %3
  002dc:    	mov    rax,QWORD PTR [r14-0x48]
  002e0:    	mov    QWORD PTR [r14-0x78],rax
:00011 %9 = %3.call vdot(%9; 1)             [Vec]
  002e4:    	mov    rdi,QWORD PTR [r14-0x48]
  002e8: 00 	test   rdi,0x7
  002ef:    	jne    0x34a97
  002f5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  002f9:    	jne    0x34a97
  002ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff4f4d],0x26        # 0xffff5253
  00306:    	jne    0x34a97
  0030c: 00 	cmp    DWORD PTR [rip+0xffffffffffff4f44],0x0        # 0xffff5257
  00313:    	je     0x32b
  00319:    	mov    rdi,r12
  0031c:    	mov    rsi,QWORD PTR [rbx]
  0031f: 95 	movabs rax,0x55955d9a3d50
  00329:    	call   rax
  0032b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00334:    	mov    rax,QWORD PTR [r14-0x48]
  00338:    	mov    QWORD PTR [rsp-0x40],rax
  0033d: 00 	mov    rdi,0x1
  00344:    	mov    rax,QWORD PTR [r14-0x78]
  00348:    	mov    QWORD PTR [rsp-0x48],rax
  0034d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00356: 05 	movabs rax,0x100050000005d
  00360:    	mov    QWORD PTR [rsp-0x30],rax
  00365: 95 	movabs r13,0x55955e1715b0
  0036f:    	mov    rsi,QWORD PTR [rbx]
  00372:    	mov    QWORD PTR [rsp-0x18],rsi
  00377:    	lea    rsi,[rsp-0x18]
  0037c:    	mov    QWORD PTR [rbx],rsi
  0037f:    	lea    r14,[rsp-0x10]
  00384:    	mov    QWORD PTR [rsp-0x20],r14
  00389:    	call   0xffff5f30
  0038e:    	lea    r14,[rbp-0x8]
  00392:    	mov    QWORD PTR [rbx],r14
  00395:    	mov    r14,QWORD PTR [rbp-0x10]
  00399: 95 	movabs r13,0x55955e16d180
  003a3:    	test   rax,rax
  003a6:    	je     0xffff0fbc
  003ac:    	mov    QWORD PTR [r14-0x78],rax
:00012 
:00013 %10 = @radius: Sphere[IvarId(1)]
  003b0:    	mov    rdi,QWORD PTR [r14-0x30]
  003b4:    	mov    rax,QWORD PTR [rdi+0x18]
  003b8:    	mov    QWORD PTR [r14-0x80],rax
:00014 %11 = @radius: Sphere[IvarId(1)]
  003bc:    	mov    rdi,QWORD PTR [r14-0x30]
  003c0:    	mov    rax,QWORD PTR [rdi+0x18]
  003c4: ff 	mov    QWORD PTR [r14-0x88],rax
:00015 %10 = %10 * %11                      [Float][Float]
  003cb:    	mov    rdi,QWORD PTR [r14-0x80]
  003cf: 00 	test   rdi,0x1
  003d6:    	jne    0x34aa6
  003dc: 00 	test   rdi,0x2
  003e3:    	je     0x41f
  003e9:    	xorps  xmm2,xmm2
  003ec: 00 	movabs rax,0x8000000000000002
  003f6:    	cmp    rdi,rax
  003f9:    	je     0x431
  003ff:    	mov    rax,rdi
  00402:    	sar    rax,0x3f
  00406:    	add    rax,0x2
  0040a:    	and    rdi,0xfffffffffffffffc
  0040e:    	or     rdi,rax
  00411:    	rol    rdi,0x3d
  00415:    	movq   xmm2,rdi
  0041a:    	jmp    0x431
  0041f:    	call   0xffff1015
  00424:    	test   rax,rax
  00427:    	je     0x34aa6
  0042d:    	movq   xmm2,xmm0
  00431: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00438: 00 	test   rdi,0x1
  0043f:    	jne    0x34ab5
  00445: 00 	test   rdi,0x2
  0044c:    	je     0x488
  00452:    	xorps  xmm3,xmm3
  00455: 00 	movabs rax,0x8000000000000002
  0045f:    	cmp    rdi,rax
  00462:    	je     0x49a
  00468:    	mov    rax,rdi
  0046b:    	sar    rax,0x3f
  0046f:    	add    rax,0x2
  00473:    	and    rdi,0xfffffffffffffffc
  00477:    	or     rdi,rax
  0047a:    	rol    rdi,0x3d
  0047e:    	movq   xmm3,rdi
  00483:    	jmp    0x49a
  00488:    	call   0xffff1015
  0048d:    	test   rax,rax
  00490:    	je     0x34ab5
  00496:    	movq   xmm3,xmm0
  0049a:    	mulsd  xmm2,xmm3
:00016 %5 = %9 - %10                        [Float][Float]
  0049e:    	mov    rdi,QWORD PTR [r14-0x78]
  004a2: 00 	test   rdi,0x1
  004a9:    	jne    0x34ac4
  004af: 00 	test   rdi,0x2
  004b6:    	je     0x4f2
  004bc:    	xorps  xmm4,xmm4
  004bf: 00 	movabs rax,0x8000000000000002
  004c9:    	cmp    rdi,rax
  004cc:    	je     0x504
  004d2:    	mov    rax,rdi
  004d5:    	sar    rax,0x3f
  004d9:    	add    rax,0x2
  004dd:    	and    rdi,0xfffffffffffffffc
  004e1:    	or     rdi,rax
  004e4:    	rol    rdi,0x3d
  004e8:    	movq   xmm4,rdi
  004ed:    	jmp    0x504
  004f2:    	call   0xffff1015
  004f7:    	test   rax,rax
  004fa:    	je     0x34ac4
  00500:    	movq   xmm4,xmm0
  00504:    	movq   xmm5,xmm4
  00508:    	subsd  xmm5,xmm2
:00017 %9 = %4 * %4                         [Float][Float]
  0050c:    	mov    rdi,QWORD PTR [r14-0x50]
  00510: 00 	test   rdi,0x1
  00517:    	jne    0x34ae0
  0051d: 00 	test   rdi,0x2
  00524:    	je     0x560
  0052a:    	xorps  xmm6,xmm6
  0052d: 00 	movabs rax,0x8000000000000002
  00537:    	cmp    rdi,rax
  0053a:    	je     0x572
  00540:    	mov    rax,rdi
  00543:    	sar    rax,0x3f
  00547:    	add    rax,0x2
  0054b:    	and    rdi,0xfffffffffffffffc
  0054f:    	or     rdi,rax
  00552:    	rol    rdi,0x3d
  00556:    	movq   xmm6,rdi
  0055b:    	jmp    0x572
  00560:    	call   0xffff1015
  00565:    	test   rax,rax
  00568:    	je     0x34ae0
  0056e:    	movq   xmm6,xmm0
  00572:    	movq   xmm4,xmm6
  00576:    	mulsd  xmm4,xmm6
:00018 %6 = %9 - %5                         [Float][Float]
  0057a:    	movq   xmm7,xmm4
  0057e:    	subsd  xmm7,xmm5
:00019 %9 = literal[0.0]
  00582: 00 	movq   xmm4,QWORD PTR [rip+0x120e]        # 0x1798
  0058a: 00 	movabs rax,0x8000000000000002
  00594:    	mov    QWORD PTR [r14-0x78],rax
:00020 _%9 = %6 > %9                        [Float][Float]
:00021 condnotbr _%9 =>:00087
  00598:    	ucomisd xmm7,xmm4
  0059c:    	jbe    0x35640
:00022 %9 = %4
:00023 %9 = neg %9                          [Float]
  005a2:    	movq   xmm4,xmm6
  005a6: 00 	xorps  xmm4,XMMWORD PTR [rip+0x11fb]        # 0x17a8
:00024 %10 = const[Math]                    [Math]
  005ad: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4cb4]        # 0xffff5268
  005b4: 00 	cmp    rax,QWORD PTR [rip+0x120d]        # 0x17c8
  005bb:    	jne    0x34b09
  005c1: 00 	mov    rax,QWORD PTR [rip+0x11f0]        # 0x17b8
  005c8:    	mov    QWORD PTR [r14-0x80],rax
:00025 %11 = %6
:00026 %10 = %10.call sqrt(%11; 1)          [#<Class:Math>]
  005cc:    	mov    rdi,QWORD PTR [r14-0x80]
  005d0: 00 	test   rdi,0x7
  005d7:    	jne    0x34b91
  005dd:    	cmp    DWORD PTR [rdi+0x4],0x24
  005e1:    	jne    0x34b91
  005e7: 26 	cmp    DWORD PTR [rip+0xffffffffffff4c65],0x26        # 0xffff5253
  005ee:    	jne    0x34b91
  005f4:    	sqrtsd xmm2,xmm7
:00027 
:00028 %7 = %9 - %10                        [Float][Float]
  005f8:    	movq   xmm3,xmm4
  005fc:    	subsd  xmm3,xmm2
:00029 %9 = literal[0.0]
  00600: 00 	movq   xmm4,QWORD PTR [rip+0x11d0]        # 0x17d8
  00608: 00 	movabs rax,0x8000000000000002
  00612:    	mov    QWORD PTR [r14-0x78],rax
:00030 _%9 = %7 > %9                        [Float][Float]
:00031 condnotbr _%9 =>:00086
  00616:    	ucomisd xmm3,xmm4
  0061a:    	jbe    0x35589
:00032 %9 = %2.call t()                     [Isect]
  00620:    	movq   xmm0,xmm3
  00624:    	call   0xffff1139
  00629:    	mov    QWORD PTR [r14-0x68],rax
  0062d:    	movq   xmm0,xmm5
  00631:    	call   0xffff1139
  00636:    	mov    QWORD PTR [r14-0x58],rax
  0063a:    	movq   xmm0,xmm7
  0063e:    	call   0xffff1139
  00643:    	mov    QWORD PTR [r14-0x60],rax
  00647:    	mov    rdi,QWORD PTR [r14-0x40]
  0064b: 00 	test   rdi,0x7
  00652:    	jne    0x34bce
  00658:    	cmp    DWORD PTR [rdi+0x4],0x33
  0065c:    	jne    0x34bce
  00662: 26 	cmp    DWORD PTR [rip+0xffffffffffff4bea],0x26        # 0xffff5253
  00669:    	jne    0x34bce
  0066f:    	mov    esi,DWORD PTR [rip+0x116f]        # 0x17e4
  00675:    	cmp    esi,0xffffffff
  00678:    	je     0x34bfa
  0067e:    	cmp    WORD PTR [rdi+0x2],0x3
  00683:    	jne    0x69c
  00689:    	cmp    esi,0x6
  0068c:    	jge    0x69c
  00692:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00697:    	jmp    0x6c6
  0069c:    	sub    rsp,0x10
  006a0:    	movq   QWORD PTR [rsp],xmm2
  006a5:    	movq   QWORD PTR [rsp+0x8],xmm7
  006ab: 95 	movabs rax,0x55955d9e0e20
  006b5:    	call   rax
  006b7:    	movq   xmm2,QWORD PTR [rsp]
  006bc:    	movq   xmm7,QWORD PTR [rsp+0x8]
  006c2:    	add    rsp,0x10
  006c6:    	mov    QWORD PTR [r14-0x78],rax
:00033 
:00034 _%9 = %7 < %9                        [Float][Float]
:00035 condnotbr _%9 =>:00086
  006ca:    	mov    rdi,QWORD PTR [r14-0x68]
  006ce: 00 	test   rdi,0x1
  006d5:    	jne    0x34c41
  006db: 00 	test   rdi,0x2
  006e2:    	je     0x71e
  006e8:    	xorps  xmm3,xmm3
  006eb: 00 	movabs rax,0x8000000000000002
  006f5:    	cmp    rdi,rax
  006f8:    	je     0x730
  006fe:    	mov    rax,rdi
  00701:    	sar    rax,0x3f
  00705:    	add    rax,0x2
  00709:    	and    rdi,0xfffffffffffffffc
  0070d:    	or     rdi,rax
  00710:    	rol    rdi,0x3d
  00714:    	movq   xmm3,rdi
  00719:    	jmp    0x730
  0071e:    	call   0xffff1015
  00723:    	test   rax,rax
  00726:    	je     0x34c41
  0072c:    	movq   xmm3,xmm0
  00730:    	mov    rdi,QWORD PTR [r14-0x78]
  00734: 00 	test   rdi,0x1
  0073b:    	jne    0x34c6d
  00741: 00 	test   rdi,0x2
  00748:    	je     0x784
  0074e:    	xorps  xmm4,xmm4
  00751: 00 	movabs rax,0x8000000000000002
  0075b:    	cmp    rdi,rax
  0075e:    	je     0x796
  00764:    	mov    rax,rdi
  00767:    	sar    rax,0x3f
  0076b:    	add    rax,0x2
  0076f:    	and    rdi,0xfffffffffffffffc
  00773:    	or     rdi,rax
  00776:    	rol    rdi,0x3d
  0077a:    	movq   xmm4,rdi
  0077f:    	jmp    0x796
  00784:    	call   0xffff1015
  00789:    	test   rax,rax
  0078c:    	je     0x34c6d
  00792:    	movq   xmm4,xmm0
  00796:    	ucomisd xmm3,xmm4
  0079a:    	jae    0x355dd
:00036 _ = %2.call t=(%7; 1)                [Isect]
  007a0:    	mov    rdi,QWORD PTR [r14-0x40]
  007a4: 00 	test   rdi,0x7
  007ab:    	jne    0x34c99
  007b1:    	cmp    DWORD PTR [rdi+0x4],0x33
  007b5:    	jne    0x34c99
  007bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff4a91],0x26        # 0xffff5253
  007c2:    	jne    0x34c99
  007c8:    	mov    esi,DWORD PTR [rip+0x101e]        # 0x17ec
  007ce:    	cmp    esi,0xffffffff
  007d1:    	je     0x34cc5
  007d7:    	cmp    WORD PTR [rdi+0x2],0x3
  007dc:    	jne    0x7f9
  007e2:    	cmp    esi,0x6
  007e5:    	jge    0x7f9
  007eb:    	mov    rax,QWORD PTR [r14-0x68]
  007ef:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007f4:    	jmp    0x846
  007f9:    	sub    rsp,0x20
  007fd:    	movq   QWORD PTR [rsp],xmm2
  00802:    	movq   QWORD PTR [rsp+0x8],xmm4
  00808:    	movq   QWORD PTR [rsp+0x10],xmm7
  0080e:    	mov    rdx,QWORD PTR [r14-0x68]
  00812: 95 	movabs rax,0x55955d9e10a0
  0081c:    	call   rax
  0081e:    	movq   xmm2,QWORD PTR [rsp]
  00823:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00829:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0082f:    	add    rsp,0x20
  00833: 95 	movabs r13,0x55955e16d310
  0083d:    	test   rax,rax
  00840:    	je     0xffff0fbc
:00037 
:00038 %9 = literal[true]
  00846: 00 	mov    rax,0x1c
  0084d:    	mov    QWORD PTR [r14-0x78],rax
:00039 _ = %2.call hit=(%9; 1)              [Isect]
  00851:    	mov    rdi,QWORD PTR [r14-0x40]
  00855: 00 	test   rdi,0x7
  0085c:    	jne    0x34d1f
  00862:    	cmp    DWORD PTR [rdi+0x4],0x33
  00866:    	jne    0x34d1f
  0086c: 26 	cmp    DWORD PTR [rip+0xffffffffffff49e0],0x26        # 0xffff5253
  00873:    	jne    0x34d1f
  00879:    	mov    esi,DWORD PTR [rip+0xf75]        # 0x17f4
  0087f:    	cmp    esi,0xffffffff
  00882:    	je     0x34d4b
  00888:    	cmp    WORD PTR [rdi+0x2],0x3
  0088d:    	jne    0x8aa
  00893:    	cmp    esi,0x6
  00896:    	jge    0x8aa
  0089c:    	mov    rax,QWORD PTR [r14-0x78]
  008a0:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  008a5:    	jmp    0x8eb
  008aa:    	sub    rsp,0x10
  008ae:    	movq   QWORD PTR [rsp],xmm2
  008b3:    	movq   QWORD PTR [rsp+0x8],xmm7
  008b9:    	mov    rdx,QWORD PTR [r14-0x78]
  008bd: 95 	movabs rax,0x55955d9e10a0
  008c7:    	call   rax
  008c9:    	movq   xmm2,QWORD PTR [rsp]
  008ce:    	movq   xmm7,QWORD PTR [rsp+0x8]
  008d4:    	add    rsp,0x10
  008d8: 95 	movabs r13,0x55955e16d340
  008e2:    	test   rax,rax
  008e5:    	je     0xffff0fbc
:00040 
:00041 %9 = const[Vec]                      [Vec]
  008eb: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4976]        # 0xffff5268
  008f2: 00 	cmp    rax,QWORD PTR [rip+0xf0f]        # 0x1808
  008f9:    	jne    0x34d99
  008ff: 00 	mov    rax,QWORD PTR [rip+0xef2]        # 0x17f8
  00906:    	mov    QWORD PTR [r14-0x78],rax
:00042 %10 = %1.call org()                  [Ray]
  0090a:    	mov    rdi,QWORD PTR [r14-0x38]
  0090e: 00 	test   rdi,0x7
  00915:    	jne    0x34dfd
  0091b:    	cmp    DWORD PTR [rdi+0x4],0x31
  0091f:    	jne    0x34dfd
  00925: 26 	cmp    DWORD PTR [rip+0xffffffffffff4927],0x26        # 0xffff5253
  0092c:    	jne    0x34dfd
  00932:    	mov    esi,DWORD PTR [rip+0xedc]        # 0x1814
  00938:    	cmp    esi,0xffffffff
  0093b:    	je     0x34e1c
  00941:    	cmp    WORD PTR [rdi+0x2],0x3
  00946:    	jne    0x95f
  0094c:    	cmp    esi,0x6
  0094f:    	jge    0x95f
  00955:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0095a:    	jmp    0x97d
  0095f:    	sub    rsp,0x10
  00963:    	movq   QWORD PTR [rsp],xmm7
  00968: 95 	movabs rax,0x55955d9e0e20
  00972:    	call   rax
  00974:    	movq   xmm7,QWORD PTR [rsp]
  00979:    	add    rsp,0x10
  0097d:    	mov    QWORD PTR [r14-0x80],rax
:00043 
:00044 %10 = %10.call x()                   [Vec]
  00981:    	mov    rdi,QWORD PTR [r14-0x80]
  00985: 00 	test   rdi,0x7
  0098c:    	jne    0x34e57
  00992:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00996:    	jne    0x34e57
  0099c: 26 	cmp    DWORD PTR [rip+0xffffffffffff48b0],0x26        # 0xffff5253
  009a3:    	jne    0x34e57
  009a9:    	mov    esi,DWORD PTR [rip+0xe6d]        # 0x181c
  009af:    	cmp    esi,0xffffffff
  009b2:    	je     0x34e76
  009b8:    	cmp    WORD PTR [rdi+0x2],0x3
  009bd:    	jne    0x9d6
  009c3:    	cmp    esi,0x6
  009c6:    	jge    0x9d6
  009cc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009d1:    	jmp    0x9f4
  009d6:    	sub    rsp,0x10
  009da:    	movq   QWORD PTR [rsp],xmm7
  009df: 95 	movabs rax,0x55955d9e0e20
  009e9:    	call   rax
  009eb:    	movq   xmm7,QWORD PTR [rsp]
  009f0:    	add    rsp,0x10
  009f4:    	mov    QWORD PTR [r14-0x80],rax
:00045 
:00046 %11 = %1.call dir()                  [Ray]
  009f8:    	mov    rdi,QWORD PTR [r14-0x38]
  009fc: 00 	test   rdi,0x7
  00a03:    	jne    0x34eb1
  00a09:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a0d:    	jne    0x34eb1
  00a13: 26 	cmp    DWORD PTR [rip+0xffffffffffff4839],0x26        # 0xffff5253
  00a1a:    	jne    0x34eb1
  00a20:    	mov    esi,DWORD PTR [rip+0xdfe]        # 0x1824
  00a26:    	cmp    esi,0xffffffff
  00a29:    	je     0x34ec0
  00a2f:    	cmp    WORD PTR [rdi+0x2],0x3
  00a34:    	jne    0xa4d
  00a3a:    	cmp    esi,0x6
  00a3d:    	jge    0xa4d
  00a43:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a48:    	jmp    0xa59
  00a4d: 95 	movabs rax,0x55955d9e0e20
  00a57:    	call   rax
  00a59: ff 	mov    QWORD PTR [r14-0x88],rax
:00047 
:00048 %11 = %11.call x()                   [Vec]
  00a60: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00a67: 00 	test   rdi,0x7
  00a6e:    	jne    0x34ee9
  00a74:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a78:    	jne    0x34ee9
  00a7e: 26 	cmp    DWORD PTR [rip+0xffffffffffff47ce],0x26        # 0xffff5253
  00a85:    	jne    0x34ee9
  00a8b:    	mov    esi,DWORD PTR [rip+0xd9b]        # 0x182c
  00a91:    	cmp    esi,0xffffffff
  00a94:    	je     0x34ef8
  00a9a:    	cmp    WORD PTR [rdi+0x2],0x3
  00a9f:    	jne    0xab8
  00aa5:    	cmp    esi,0x6
  00aa8:    	jge    0xab8
  00aae:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ab3:    	jmp    0xac4
  00ab8: 95 	movabs rax,0x55955d9e0e20
  00ac2:    	call   rax
  00ac4: ff 	mov    QWORD PTR [r14-0x88],rax
:00049 
:00050 %11 = %11 * %7                       [Float][Float]
  00acb: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00ad2: 00 	test   rdi,0x1
  00ad9:    	jne    0x34f21
  00adf: 00 	test   rdi,0x2
  00ae6:    	je     0xb22
  00aec:    	xorps  xmm2,xmm2
  00aef: 00 	movabs rax,0x8000000000000002
  00af9:    	cmp    rdi,rax
  00afc:    	je     0xb34
  00b02:    	mov    rax,rdi
  00b05:    	sar    rax,0x3f
  00b09:    	add    rax,0x2
  00b0d:    	and    rdi,0xfffffffffffffffc
  00b11:    	or     rdi,rax
  00b14:    	rol    rdi,0x3d
  00b18:    	movq   xmm2,rdi
  00b1d:    	jmp    0xb34
  00b22:    	call   0xffff1015
  00b27:    	test   rax,rax
  00b2a:    	je     0x34f21
  00b30:    	movq   xmm2,xmm0
  00b34:    	mov    rdi,QWORD PTR [r14-0x68]
  00b38: 00 	test   rdi,0x1
  00b3f:    	jne    0x34f30
  00b45: 00 	test   rdi,0x2
  00b4c:    	je     0xb88
  00b52:    	xorps  xmm3,xmm3
  00b55: 00 	movabs rax,0x8000000000000002
  00b5f:    	cmp    rdi,rax
  00b62:    	je     0xb9a
  00b68:    	mov    rax,rdi
  00b6b:    	sar    rax,0x3f
  00b6f:    	add    rax,0x2
  00b73:    	and    rdi,0xfffffffffffffffc
  00b77:    	or     rdi,rax
  00b7a:    	rol    rdi,0x3d
  00b7e:    	movq   xmm3,rdi
  00b83:    	jmp    0xb9a
  00b88:    	call   0xffff1015
  00b8d:    	test   rax,rax
  00b90:    	je     0x34f30
  00b96:    	movq   xmm3,xmm0
  00b9a:    	mulsd  xmm2,xmm3
:00051 %10 = %10 + %11                      [Float][Float]
  00b9e:    	mov    rdi,QWORD PTR [r14-0x80]
  00ba2: 00 	test   rdi,0x1
  00ba9:    	jne    0x34f3f
  00baf: 00 	test   rdi,0x2
  00bb6:    	je     0xbf2
  00bbc:    	xorps  xmm4,xmm4
  00bbf: 00 	movabs rax,0x8000000000000002
  00bc9:    	cmp    rdi,rax
  00bcc:    	je     0xc04
  00bd2:    	mov    rax,rdi
  00bd5:    	sar    rax,0x3f
  00bd9:    	add    rax,0x2
  00bdd:    	and    rdi,0xfffffffffffffffc
  00be1:    	or     rdi,rax
  00be4:    	rol    rdi,0x3d
  00be8:    	movq   xmm4,rdi
  00bed:    	jmp    0xc04
  00bf2:    	call   0xffff1015
  00bf7:    	test   rax,rax
  00bfa:    	je     0x34f3f
  00c00:    	movq   xmm4,xmm0
  00c04:    	addsd  xmm4,xmm2
:00052 %11 = %1.call org()                  [Ray]
  00c08:    	mov    rdi,QWORD PTR [r14-0x38]
  00c0c: 00 	test   rdi,0x7
  00c13:    	jne    0x34f5e
  00c19:    	cmp    DWORD PTR [rdi+0x4],0x31
  00c1d:    	jne    0x34f5e
  00c23: 26 	cmp    DWORD PTR [rip+0xffffffffffff4629],0x26        # 0xffff5253
  00c2a:    	jne    0x34f5e
  00c30:    	mov    esi,DWORD PTR [rip+0xbfe]        # 0x1834
  00c36:    	cmp    esi,0xffffffff
  00c39:    	je     0x34f7a
  00c3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00c44:    	jne    0xc5d
  00c4a:    	cmp    esi,0x6
  00c4d:    	jge    0xc5d
  00c53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c58:    	jmp    0xc7b
  00c5d:    	sub    rsp,0x10
  00c61:    	movq   QWORD PTR [rsp],xmm4
  00c66: 95 	movabs rax,0x55955d9e0e20
  00c70:    	call   rax
  00c72:    	movq   xmm4,QWORD PTR [rsp]
  00c77:    	add    rsp,0x10
  00c7b: ff 	mov    QWORD PTR [r14-0x88],rax
:00053 
:00054 %11 = %11.call y()                   [Vec]
  00c82: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00c89: 00 	test   rdi,0x7
  00c90:    	jne    0x34fb5
  00c96:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c9a:    	jne    0x34fb5
  00ca0: 26 	cmp    DWORD PTR [rip+0xffffffffffff45ac],0x26        # 0xffff5253
  00ca7:    	jne    0x34fb5
  00cad:    	mov    esi,DWORD PTR [rip+0xb89]        # 0x183c
  00cb3:    	cmp    esi,0xffffffff
  00cb6:    	je     0x34fd1
  00cbc:    	cmp    WORD PTR [rdi+0x2],0x3
  00cc1:    	jne    0xcda
  00cc7:    	cmp    esi,0x6
  00cca:    	jge    0xcda
  00cd0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cd5:    	jmp    0xcf8
  00cda:    	sub    rsp,0x10
  00cde:    	movq   QWORD PTR [rsp],xmm4
  00ce3: 95 	movabs rax,0x55955d9e0e20
  00ced:    	call   rax
  00cef:    	movq   xmm4,QWORD PTR [rsp]
  00cf4:    	add    rsp,0x10
  00cf8: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00056 %12 = %1.call dir()                  [Ray]
  00cff:    	mov    rdi,QWORD PTR [r14-0x38]
  00d03: 00 	test   rdi,0x7
  00d0a:    	jne    0x3500c
  00d10:    	cmp    DWORD PTR [rdi+0x4],0x31
  00d14:    	jne    0x3500c
  00d1a: 26 	cmp    DWORD PTR [rip+0xffffffffffff4532],0x26        # 0xffff5253
  00d21:    	jne    0x3500c
  00d27:    	mov    esi,DWORD PTR [rip+0xb17]        # 0x1844
  00d2d:    	cmp    esi,0xffffffff
  00d30:    	je     0x35028
  00d36:    	cmp    WORD PTR [rdi+0x2],0x3
  00d3b:    	jne    0xd54
  00d41:    	cmp    esi,0x6
  00d44:    	jge    0xd54
  00d4a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d4f:    	jmp    0xd72
  00d54:    	sub    rsp,0x10
  00d58:    	movq   QWORD PTR [rsp],xmm4
  00d5d: 95 	movabs rax,0x55955d9e0e20
  00d67:    	call   rax
  00d69:    	movq   xmm4,QWORD PTR [rsp]
  00d6e:    	add    rsp,0x10
  00d72: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %12 = %12.call y()                   [Vec]
  00d79: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00d80: 00 	test   rdi,0x7
  00d87:    	jne    0x35063
  00d8d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d91:    	jne    0x35063
  00d97: 26 	cmp    DWORD PTR [rip+0xffffffffffff44b5],0x26        # 0xffff5253
  00d9e:    	jne    0x35063
  00da4:    	mov    esi,DWORD PTR [rip+0xaa2]        # 0x184c
  00daa:    	cmp    esi,0xffffffff
  00dad:    	je     0x3507f
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0xdd1
  00dbe:    	cmp    esi,0x6
  00dc1:    	jge    0xdd1
  00dc7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dcc:    	jmp    0xdef
  00dd1:    	sub    rsp,0x10
  00dd5:    	movq   QWORD PTR [rsp],xmm4
  00dda: 95 	movabs rax,0x55955d9e0e20
  00de4:    	call   rax
  00de6:    	movq   xmm4,QWORD PTR [rsp]
  00deb:    	add    rsp,0x10
  00def: ff 	mov    QWORD PTR [r14-0x90],rax
:00059 
:00060 %12 = %12 * %7                       [Float][Float]
  00df6: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00dfd: 00 	test   rdi,0x1
  00e04:    	jne    0x350ba
  00e0a: 00 	test   rdi,0x2
  00e11:    	je     0xe4d
  00e17:    	xorps  xmm2,xmm2
  00e1a: 00 	movabs rax,0x8000000000000002
  00e24:    	cmp    rdi,rax
  00e27:    	je     0xe5f
  00e2d:    	mov    rax,rdi
  00e30:    	sar    rax,0x3f
  00e34:    	add    rax,0x2
  00e38:    	and    rdi,0xfffffffffffffffc
  00e3c:    	or     rdi,rax
  00e3f:    	rol    rdi,0x3d
  00e43:    	movq   xmm2,rdi
  00e48:    	jmp    0xe5f
  00e4d:    	call   0xffff1015
  00e52:    	test   rax,rax
  00e55:    	je     0x350ba
  00e5b:    	movq   xmm2,xmm0
  00e5f:    	mov    rdi,QWORD PTR [r14-0x68]
  00e63: 00 	test   rdi,0x1
  00e6a:    	jne    0x350d6
  00e70: 00 	test   rdi,0x2
  00e77:    	je     0xeb3
  00e7d:    	xorps  xmm3,xmm3
  00e80: 00 	movabs rax,0x8000000000000002
  00e8a:    	cmp    rdi,rax
  00e8d:    	je     0xec5
  00e93:    	mov    rax,rdi
  00e96:    	sar    rax,0x3f
  00e9a:    	add    rax,0x2
  00e9e:    	and    rdi,0xfffffffffffffffc
  00ea2:    	or     rdi,rax
  00ea5:    	rol    rdi,0x3d
  00ea9:    	movq   xmm3,rdi
  00eae:    	jmp    0xec5
  00eb3:    	call   0xffff1015
  00eb8:    	test   rax,rax
  00ebb:    	je     0x350d6
  00ec1:    	movq   xmm3,xmm0
  00ec5:    	mulsd  xmm2,xmm3
:00061 %11 = %11 + %12                      [Float][Float]
  00ec9: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00ed0: 00 	test   rdi,0x1
  00ed7:    	jne    0x350f2
  00edd: 00 	test   rdi,0x2
  00ee4:    	je     0xf20
  00eea:    	xorps  xmm5,xmm5
  00eed: 00 	movabs rax,0x8000000000000002
  00ef7:    	cmp    rdi,rax
  00efa:    	je     0xf32
  00f00:    	mov    rax,rdi
  00f03:    	sar    rax,0x3f
  00f07:    	add    rax,0x2
  00f0b:    	and    rdi,0xfffffffffffffffc
  00f0f:    	or     rdi,rax
  00f12:    	rol    rdi,0x3d
  00f16:    	movq   xmm5,rdi
  00f1b:    	jmp    0xf32
  00f20:    	call   0xffff1015
  00f25:    	test   rax,rax
  00f28:    	je     0x350f2
  00f2e:    	movq   xmm5,xmm0
  00f32:    	addsd  xmm5,xmm2
:00062 %12 = %1.call org()                  [Ray]
  00f36:    	mov    rdi,QWORD PTR [r14-0x38]
  00f3a: 00 	test   rdi,0x7
  00f41:    	jne    0x3511e
  00f47:    	cmp    DWORD PTR [rdi+0x4],0x31
  00f4b:    	jne    0x3511e
  00f51: 26 	cmp    DWORD PTR [rip+0xffffffffffff42fb],0x26        # 0xffff5253
  00f58:    	jne    0x3511e
  00f5e:    	mov    esi,DWORD PTR [rip+0x8f0]        # 0x1854
  00f64:    	cmp    esi,0xffffffff
  00f67:    	je     0x3514a
  00f6d:    	cmp    WORD PTR [rdi+0x2],0x3
  00f72:    	jne    0xf8b
  00f78:    	cmp    esi,0x6
  00f7b:    	jge    0xf8b
  00f81:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f86:    	jmp    0xfb5
  00f8b:    	sub    rsp,0x10
  00f8f:    	movq   QWORD PTR [rsp],xmm4
  00f94:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f9a: 95 	movabs rax,0x55955d9e0e20
  00fa4:    	call   rax
  00fa6:    	movq   xmm4,QWORD PTR [rsp]
  00fab:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fb1:    	add    rsp,0x10
  00fb5: ff 	mov    QWORD PTR [r14-0x90],rax
:00063 
:00064 %12 = %12.call z()                   [Vec]
  00fbc: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00fc3: 00 	test   rdi,0x7
  00fca:    	jne    0x35191
  00fd0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00fd4:    	jne    0x35191
  00fda: 26 	cmp    DWORD PTR [rip+0xffffffffffff4272],0x26        # 0xffff5253
  00fe1:    	jne    0x35191
  00fe7:    	mov    esi,DWORD PTR [rip+0x86f]        # 0x185c
  00fed:    	cmp    esi,0xffffffff
  00ff0:    	je     0x351bd
  00ff6:    	cmp    WORD PTR [rdi+0x2],0x3
  00ffb:    	jne    0x1014
  01001:    	cmp    esi,0x6
  01004:    	jge    0x1014
  0100a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0100f:    	jmp    0x103e
  01014:    	sub    rsp,0x10
  01018:    	movq   QWORD PTR [rsp],xmm4
  0101d:    	movq   QWORD PTR [rsp+0x8],xmm5
  01023: 95 	movabs rax,0x55955d9e0e20
  0102d:    	call   rax
  0102f:    	movq   xmm4,QWORD PTR [rsp]
  01034:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0103a:    	add    rsp,0x10
  0103e: ff 	mov    QWORD PTR [r14-0x90],rax
:00065 
:00066 %13 = %1.call dir()                  [Ray]
  01045:    	mov    rdi,QWORD PTR [r14-0x38]
  01049: 00 	test   rdi,0x7
  01050:    	jne    0x35204
  01056:    	cmp    DWORD PTR [rdi+0x4],0x31
  0105a:    	jne    0x35204
  01060: 26 	cmp    DWORD PTR [rip+0xffffffffffff41ec],0x26        # 0xffff5253
  01067:    	jne    0x35204
  0106d:    	mov    esi,DWORD PTR [rip+0x7f1]        # 0x1864
  01073:    	cmp    esi,0xffffffff
  01076:    	je     0x35230
  0107c:    	cmp    WORD PTR [rdi+0x2],0x3
  01081:    	jne    0x109a
  01087:    	cmp    esi,0x6
  0108a:    	jge    0x109a
  01090:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01095:    	jmp    0x10c4
  0109a:    	sub    rsp,0x10
  0109e:    	movq   QWORD PTR [rsp],xmm4
  010a3:    	movq   QWORD PTR [rsp+0x8],xmm5
  010a9: 95 	movabs rax,0x55955d9e0e20
  010b3:    	call   rax
  010b5:    	movq   xmm4,QWORD PTR [rsp]
  010ba:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010c0:    	add    rsp,0x10
  010c4: ff 	mov    QWORD PTR [r14-0x98],rax
:00067 
:00068 %13 = %13.call z()                   [Vec]
  010cb: ff 	mov    rdi,QWORD PTR [r14-0x98]
  010d2: 00 	test   rdi,0x7
  010d9:    	jne    0x35277
  010df:    	cmp    DWORD PTR [rdi+0x4],0x2b
  010e3:    	jne    0x35277
  010e9: 26 	cmp    DWORD PTR [rip+0xffffffffffff4163],0x26        # 0xffff5253
  010f0:    	jne    0x35277
  010f6:    	mov    esi,DWORD PTR [rip+0x770]        # 0x186c
  010fc:    	cmp    esi,0xffffffff
  010ff:    	je     0x352a3
  01105:    	cmp    WORD PTR [rdi+0x2],0x3
  0110a:    	jne    0x1123
  01110:    	cmp    esi,0x6
  01113:    	jge    0x1123
  01119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0111e:    	jmp    0x114d
  01123:    	sub    rsp,0x10
  01127:    	movq   QWORD PTR [rsp],xmm4
  0112c:    	movq   QWORD PTR [rsp+0x8],xmm5
  01132: 95 	movabs rax,0x55955d9e0e20
  0113c:    	call   rax
  0113e:    	movq   xmm4,QWORD PTR [rsp]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01149:    	add    rsp,0x10
  0114d: ff 	mov    QWORD PTR [r14-0x98],rax
:00069 
:00070 %13 = %13 * %7                       [Float][Float]
  01154: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0115b: 00 	test   rdi,0x1
  01162:    	jne    0x352ea
  01168: 00 	test   rdi,0x2
  0116f:    	je     0x11ab
  01175:    	xorps  xmm2,xmm2
  01178: 00 	movabs rax,0x8000000000000002
  01182:    	cmp    rdi,rax
  01185:    	je     0x11bd
  0118b:    	mov    rax,rdi
  0118e:    	sar    rax,0x3f
  01192:    	add    rax,0x2
  01196:    	and    rdi,0xfffffffffffffffc
  0119a:    	or     rdi,rax
  0119d:    	rol    rdi,0x3d
  011a1:    	movq   xmm2,rdi
  011a6:    	jmp    0x11bd
  011ab:    	call   0xffff1015
  011b0:    	test   rax,rax
  011b3:    	je     0x352ea
  011b9:    	movq   xmm2,xmm0
  011bd:    	mov    rdi,QWORD PTR [r14-0x68]
  011c1: 00 	test   rdi,0x1
  011c8:    	jne    0x35316
  011ce: 00 	test   rdi,0x2
  011d5:    	je     0x1211
  011db:    	xorps  xmm3,xmm3
  011de: 00 	movabs rax,0x8000000000000002
  011e8:    	cmp    rdi,rax
  011eb:    	je     0x1223
  011f1:    	mov    rax,rdi
  011f4:    	sar    rax,0x3f
  011f8:    	add    rax,0x2
  011fc:    	and    rdi,0xfffffffffffffffc
  01200:    	or     rdi,rax
  01203:    	rol    rdi,0x3d
  01207:    	movq   xmm3,rdi
  0120c:    	jmp    0x1223
  01211:    	call   0xffff1015
  01216:    	test   rax,rax
  01219:    	je     0x35316
  0121f:    	movq   xmm3,xmm0
  01223:    	mulsd  xmm2,xmm3
:00071 %12 = %12 + %13                      [Float][Float]
  01227: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0122e: 00 	test   rdi,0x1
  01235:    	jne    0x35342
  0123b: 00 	test   rdi,0x2
  01242:    	je     0x127e
  01248:    	xorps  xmm6,xmm6
  0124b: 00 	movabs rax,0x8000000000000002
  01255:    	cmp    rdi,rax
  01258:    	je     0x1290
  0125e:    	mov    rax,rdi
  01261:    	sar    rax,0x3f
  01265:    	add    rax,0x2
  01269:    	and    rdi,0xfffffffffffffffc
  0126d:    	or     rdi,rax
  01270:    	rol    rdi,0x3d
  01274:    	movq   xmm6,rdi
  01279:    	jmp    0x1290
  0127e:    	call   0xffff1015
  01283:    	test   rax,rax
  01286:    	je     0x35342
  0128c:    	movq   xmm6,xmm0
  01290:    	addsd  xmm6,xmm2
:00072 %9 = %9.call new(%10; 3)             [#<Class:Vec>]
  01294:    	movq   xmm0,xmm4
  01298:    	call   0xffff1139
  0129d:    	mov    QWORD PTR [r14-0x80],rax
  012a1:    	movq   xmm0,xmm5
  012a5:    	call   0xffff1139
  012aa: ff 	mov    QWORD PTR [r14-0x88],rax
  012b1:    	movq   xmm0,xmm6
  012b5:    	call   0xffff1139
  012ba: ff 	mov    QWORD PTR [r14-0x90],rax
  012c1:    	mov    rdi,QWORD PTR [r14-0x78]
  012c5: 00 	test   rdi,0x7
  012cc:    	jne    0x3537e
  012d2:    	cmp    DWORD PTR [rdi+0x4],0x2c
  012d6:    	jne    0x3537e
  012dc: 26 	cmp    DWORD PTR [rip+0xffffffffffff3f70],0x26        # 0xffff5253
  012e3:    	jne    0x3537e
  012e9: 00 	mov    r9,0x0
  012f0:    	sub    rsp,0x20
  012f4:    	movq   QWORD PTR [rsp],xmm2
  012f9:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ff:    	movq   QWORD PTR [rsp+0x10],xmm5
  01305:    	movq   QWORD PTR [rsp+0x18],xmm6
  0130b:    	mov    rdx,rdi
  0130e:    	mov    QWORD PTR [rsp-0x40],rcx
  01313: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0131c:    	lea    rcx,[r14-0x80]
  01320: 00 	mov    r8,0x3
  01327:    	mov    rsi,QWORD PTR [rbx]
  0132a:    	mov    QWORD PTR [rsp-0x18],rsi
  0132f:    	lea    rsi,[rsp-0x18]
  01334:    	mov    QWORD PTR [rbx],rsi
  01337:    	lea    r14,[rsp-0x10]
  0133c:    	mov    QWORD PTR [rsp-0x20],r14
  01341:    	call   0x3539d
  01346:    	lea    r14,[rbp-0x8]
  0134a:    	mov    QWORD PTR [rbx],r14
  0134d:    	mov    r14,QWORD PTR [rbp-0x10]
  01351:    	movq   xmm2,QWORD PTR [rsp]
  01356:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0135c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01362:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01368:    	add    rsp,0x20
  0136c: 95 	movabs r13,0x55955e16d550
  01376:    	test   rax,rax
  01379:    	je     0xffff0fbc
  0137f:    	mov    QWORD PTR [r14-0x78],rax
:00073 
:00074 _ = %2.call pl=(%9; 1)               [Isect]
  01383:    	mov    rdi,QWORD PTR [r14-0x40]
  01387: 00 	test   rdi,0x7
  0138e:    	jne    0x353cf
  01394:    	cmp    DWORD PTR [rdi+0x4],0x33
  01398:    	jne    0x353cf
  0139e: 26 	cmp    DWORD PTR [rip+0xffffffffffff3eae],0x26        # 0xffff5253
  013a5:    	jne    0x353cf
  013ab:    	mov    esi,DWORD PTR [rip+0x4c3]        # 0x1874
  013b1:    	cmp    esi,0xffffffff
  013b4:    	je     0x353ee
  013ba:    	cmp    WORD PTR [rdi+0x2],0x3
  013bf:    	jne    0x13dc
  013c5:    	cmp    esi,0x6
  013c8:    	jge    0x13dc
  013ce:    	mov    rax,QWORD PTR [r14-0x78]
  013d2:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013d7:    	jmp    0x1435
  013dc:    	sub    rsp,0x20
  013e0:    	movq   QWORD PTR [rsp],xmm2
  013e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  013eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  013f1:    	movq   QWORD PTR [rsp+0x18],xmm6
  013f7:    	mov    rdx,QWORD PTR [r14-0x78]
  013fb: 95 	movabs rax,0x55955d9e10a0
  01405:    	call   rax
  01407:    	movq   xmm2,QWORD PTR [rsp]
  0140c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01412:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01418:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0141e:    	add    rsp,0x20
  01422: 95 	movabs r13,0x55955e16d570
  0142c:    	test   rax,rax
  0142f:    	je     0xffff0fbc
:00075 
:00076 %9 = %2.call pl()                    [Isect]
  01435:    	mov    rdi,QWORD PTR [r14-0x40]
  01439: 00 	test   rdi,0x7
  01440:    	jne    0x35454
  01446:    	cmp    DWORD PTR [rdi+0x4],0x33
  0144a:    	jne    0x35454
  01450: 26 	cmp    DWORD PTR [rip+0xffffffffffff3dfc],0x26        # 0xffff5253
  01457:    	jne    0x35454
  0145d:    	mov    esi,DWORD PTR [rip+0x419]        # 0x187c
  01463:    	cmp    esi,0xffffffff
  01466:    	je     0x35473
  0146c:    	cmp    WORD PTR [rdi+0x2],0x3
  01471:    	jne    0x148a
  01477:    	cmp    esi,0x6
  0147a:    	jge    0x148a
  01480:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01485:    	jmp    0x14cc
  0148a:    	sub    rsp,0x20
  0148e:    	movq   QWORD PTR [rsp],xmm2
  01493:    	movq   QWORD PTR [rsp+0x8],xmm4
  01499:    	movq   QWORD PTR [rsp+0x10],xmm5
  0149f:    	movq   QWORD PTR [rsp+0x18],xmm6
  014a5: 95 	movabs rax,0x55955d9e0e20
  014af:    	call   rax
  014b1:    	movq   xmm2,QWORD PTR [rsp]
  014b6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014bc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014c2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014c8:    	add    rsp,0x20
  014cc:    	mov    QWORD PTR [r14-0x78],rax
:00077 
:00078 %10 = @center: Sphere[IvarId(0)]
  014d0:    	mov    rdi,QWORD PTR [r14-0x30]
  014d4:    	mov    rax,QWORD PTR [rdi+0x10]
  014d8:    	mov    QWORD PTR [r14-0x80],rax
:00079 %8 = %9.call vsub(%10; 1)            [Vec]
  014dc:    	mov    rdi,QWORD PTR [r14-0x78]
  014e0: 00 	test   rdi,0x7
  014e7:    	jne    0x354d2
  014ed:    	cmp    DWORD PTR [rdi+0x4],0x2b
  014f1:    	jne    0x354d2
  014f7: 26 	cmp    DWORD PTR [rip+0xffffffffffff3d55],0x26        # 0xffff5253
  014fe:    	jne    0x354d2
  01504:    	sub    rsp,0x20
  01508:    	movq   QWORD PTR [rsp],xmm2
  0150d:    	movq   QWORD PTR [rsp+0x8],xmm5
  01513:    	movq   QWORD PTR [rsp+0x10],xmm6
  01519: 00 	cmp    DWORD PTR [rip+0xffffffffffff3d37],0x0        # 0xffff5257
  01520:    	je     0x1538
  01526:    	mov    rdi,r12
  01529:    	mov    rsi,QWORD PTR [rbx]
  0152c: 95 	movabs rax,0x55955d9a3d50
  01536:    	call   rax
  01538: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01541:    	mov    rax,QWORD PTR [r14-0x78]
  01545:    	mov    QWORD PTR [rsp-0x40],rax
  0154a: 00 	mov    rdi,0x1
  01551:    	mov    rax,QWORD PTR [r14-0x80]
  01555:    	mov    QWORD PTR [rsp-0x48],rax
  0155a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01563: 07 	movabs rax,0x100070000005b
  0156d:    	mov    QWORD PTR [rsp-0x30],rax
  01572: 95 	movabs r13,0x55955e18a030
  0157c:    	mov    rsi,QWORD PTR [rbx]
  0157f:    	mov    QWORD PTR [rsp-0x18],rsi
  01584:    	lea    rsi,[rsp-0x18]
  01589:    	mov    QWORD PTR [rbx],rsi
  0158c:    	lea    r14,[rsp-0x10]
  01591:    	mov    QWORD PTR [rsp-0x20],r14
  01596:    	call   0xffff5ea2
  0159b:    	lea    r14,[rbp-0x8]
  0159f:    	mov    QWORD PTR [rbx],r14
  015a2:    	mov    r14,QWORD PTR [rbp-0x10]
  015a6:    	movq   xmm2,QWORD PTR [rsp]
  015ab:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015b1:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015b7:    	add    rsp,0x20
  015bb: 95 	movabs r13,0x55955e16d5c0
  015c5:    	test   rax,rax
  015c8:    	je     0xffff0fbc
  015ce:    	mov    QWORD PTR [r14-0x70],rax
:00080 
:00081 %9 = %8.call vnormalize()            [Vec]
  015d2:    	mov    rdi,QWORD PTR [r14-0x70]
  015d6: 00 	test   rdi,0x7
  015dd:    	jne    0x354f1
  015e3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  015e7:    	jne    0x354f1
  015ed: 26 	cmp    DWORD PTR [rip+0xffffffffffff3c5f],0x26        # 0xffff5253
  015f4:    	jne    0x354f1
  015fa:    	sub    rsp,0x20
  015fe:    	movq   QWORD PTR [rsp],xmm2
  01603:    	movq   QWORD PTR [rsp+0x8],xmm5
  01609:    	movq   QWORD PTR [rsp+0x10],xmm6
  0160f: 00 	cmp    DWORD PTR [rip+0xffffffffffff3c41],0x0        # 0xffff5257
  01616:    	je     0x162e
  0161c:    	mov    rdi,r12
  0161f:    	mov    rsi,QWORD PTR [rbx]
  01622: 95 	movabs rax,0x55955d9a3d50
  0162c:    	call   rax
  0162e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01637:    	mov    rax,QWORD PTR [r14-0x70]
  0163b:    	mov    QWORD PTR [rsp-0x40],rax
  01640: 00 	mov    rdi,0x0
  01647: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01650: 07 	movabs rax,0x100070000005f
  0165a:    	mov    QWORD PTR [rsp-0x30],rax
  0165f: 95 	movabs r13,0x55955e168310
  01669:    	mov    rsi,QWORD PTR [rbx]
  0166c:    	mov    QWORD PTR [rsp-0x18],rsi
  01671:    	lea    rsi,[rsp-0x18]
  01676:    	mov    QWORD PTR [rbx],rsi
  01679:    	lea    r14,[rsp-0x10]
  0167e:    	mov    QWORD PTR [rsp-0x20],r14
  01683:    	call   0xffff5b1b
  01688:    	lea    r14,[rbp-0x8]
  0168c:    	mov    QWORD PTR [rbx],r14
  0168f:    	mov    r14,QWORD PTR [rbp-0x10]
  01693:    	movq   xmm2,QWORD PTR [rsp]
  01698:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0169e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  016a4:    	add    rsp,0x20
  016a8: 95 	movabs r13,0x55955e16d5e0
  016b2:    	test   rax,rax
  016b5:    	je     0xffff0fbc
  016bb:    	mov    QWORD PTR [r14-0x78],rax
:00082 
:00083 _ = %2.call n=(%9; 1)                [Isect]
  016bf:    	mov    rdi,QWORD PTR [r14-0x40]
  016c3: 00 	test   rdi,0x7
  016ca:    	jne    0x35510
  016d0:    	cmp    DWORD PTR [rdi+0x4],0x33
  016d4:    	jne    0x35510
  016da: 26 	cmp    DWORD PTR [rip+0xffffffffffff3b72],0x26        # 0xffff5253
  016e1:    	jne    0x35510
  016e7:    	mov    esi,DWORD PTR [rip+0x197]        # 0x1884
  016ed:    	cmp    esi,0xffffffff
  016f0:    	je     0x3552f
  016f6:    	cmp    WORD PTR [rdi+0x2],0x3
  016fb:    	jne    0x1718
  01701:    	cmp    esi,0x6
  01704:    	jge    0x1718
  0170a:    	mov    rax,QWORD PTR [r14-0x78]
  0170e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01713:    	jmp    0x1765
  01718:    	sub    rsp,0x20
  0171c:    	movq   QWORD PTR [rsp],xmm2
  01721:    	movq   QWORD PTR [rsp+0x8],xmm5
  01727:    	movq   QWORD PTR [rsp+0x10],xmm6
  0172d:    	mov    rdx,QWORD PTR [r14-0x78]
  01731: 95 	movabs rax,0x55955d9e10a0
  0173b:    	call   rax
  0173d:    	movq   xmm2,QWORD PTR [rsp]
  01742:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01748:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0174e:    	add    rsp,0x20
  01752: 95 	movabs r13,0x55955e16d600
  0175c:    	test   rax,rax
  0175f:    	je     0xffff0fbc
:00084 
:00085 br =>:00086
  01765:    	jmp    0x35613
:00086 br =>:00087
  0176a:    	jmp    0x35680
:00087 %9 = nil
  0176f: 00 	mov    QWORD PTR [r14-0x78],0x4
:00088 ret %9
  01777:    	mov    rax,QWORD PTR [r14-0x78]
  0177b:    	leave  
  0177c:    	ret    
==> start whole compile: <unnamed> FuncId(105) self_class:Scene start:[00000] bytecode:0x55955e1a3130
<== finished compile. elapsed:25.7µs
offset:Pos(67824) code: 257 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [r14-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x33e24
  0005b: cmp    DWORD PTR [rdi+0x4],0x35
  0005f: jne    0x33e24
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %3)
  00065: mov    rax,QWORD PTR [r14-0x18]
  00069: mov    rax,QWORD PTR [rax-0x30]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[7012353]
  00071: mov    rax,0xd60003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 %2 = %2.call times(&%3)              [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x33e33
  0008d: cmp    DWORD PTR [rip+0xffffffffffff3937],0x26        # 0xffff39cb
  00094: jne    0x33e33
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x33e42
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: movabs r13,0x55955e1a3180
  000ee: test   rax,rax
  000f1: je     0xfffef734
  000f7: mov    QWORD PTR [r14-0x40],rax
:00004 
:00005 ret %2
  000fb: mov    rax,QWORD PTR [r14-0x40]
  000ff: leave  
  00100: ret    
==> start whole compile: vcross FuncId(92) self_class:Vec start:[00000] bytecode:0x55955e137470
<== finished compile. elapsed:52.2µs
offset:Pos(68081) code: 2436 bytes  data: 83 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x33d73
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    QWORD PTR [r14-0x68],rax
  00033: mov    rdi,QWORD PTR [r14-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x33d82
  00044: cmp    DWORD PTR [rdi+0x4],0x2b
  00048: jne    0x33d82
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %2 = const[Vec]                      [Vec]
  0004e: mov    rax,QWORD PTR [rip+0xffffffffffff388a]        # 0xffff38df
  00055: cmp    rax,QWORD PTR [rip+0x943]        # 0x99f
  0005c: jne    0x33d91
  00062: mov    rax,QWORD PTR [rip+0x926]        # 0x98f
  00069: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @y: Vec[IvarId(1)]
  0006d: mov    rdi,QWORD PTR [r14-0x30]
  00071: mov    rax,QWORD PTR [rdi+0x18]
  00075: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = %1.call z()                     [Vec]
  00079: mov    rdi,QWORD PTR [r14-0x38]
  0007d: test   rdi,0x7
  00084: jne    0x33dd7
  0008a: cmp    DWORD PTR [rdi+0x4],0x2b
  0008e: jne    0x33dd7
  00094: cmp    DWORD PTR [rip+0xffffffffffff382f],0x26        # 0xffff38ca
  0009b: jne    0x33dd7
  000a1: mov    esi,DWORD PTR [rip+0x904]        # 0x9ab
  000a7: cmp    esi,0xffffffff
  000aa: je     0x33de6
  000b0: cmp    WORD PTR [rdi+0x2],0x3
  000b5: jne    0xce
  000bb: cmp    esi,0x6
  000be: jge    0xce
  000c4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c9: jmp    0xda
  000ce: movabs rax,0x55955d9e0e20
  000d8: call   rax
  000da: mov    QWORD PTR [r14-0x50],rax
:00004 
:00005 %3 = %3 * %4                         [Float][Float]
  000de: mov    rdi,QWORD PTR [r14-0x48]
  000e2: test   rdi,0x1
  000e9: jne    0x33e0f
  000ef: test   rdi,0x2
  000f6: je     0x132
  000fc: xorps  xmm2,xmm2
  000ff: movabs rax,0x8000000000000002
  00109: cmp    rdi,rax
  0010c: je     0x144
  00112: mov    rax,rdi
  00115: sar    rax,0x3f
  00119: add    rax,0x2
  0011d: and    rdi,0xfffffffffffffffc
  00121: or     rdi,rax
  00124: rol    rdi,0x3d
  00128: movq   xmm2,rdi
  0012d: jmp    0x144
  00132: call   0xfffef68c
  00137: test   rax,rax
  0013a: je     0x33e0f
  00140: movq   xmm2,xmm0
  00144: mov    rdi,QWORD PTR [r14-0x50]
  00148: test   rdi,0x1
  0014f: jne    0x33e1e
  00155: test   rdi,0x2
  0015c: je     0x198
  00162: xorps  xmm3,xmm3
  00165: movabs rax,0x8000000000000002
  0016f: cmp    rdi,rax
  00172: je     0x1aa
  00178: mov    rax,rdi
  0017b: sar    rax,0x3f
  0017f: add    rax,0x2
  00183: and    rdi,0xfffffffffffffffc
  00187: or     rdi,rax
  0018a: rol    rdi,0x3d
  0018e: movq   xmm3,rdi
  00193: jmp    0x1aa
  00198: call   0xfffef68c
  0019d: test   rax,rax
  001a0: je     0x33e1e
  001a6: movq   xmm3,xmm0
  001aa: mulsd  xmm2,xmm3
:00006 %4 = @z: Vec[IvarId(2)]
  001ae: mov    rdi,QWORD PTR [r14-0x30]
  001b2: mov    rax,QWORD PTR [rdi+0x20]
  001b6: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = %1.call y()                     [Vec]
  001ba: mov    rdi,QWORD PTR [r14-0x38]
  001be: test   rdi,0x7
  001c5: jne    0x33e2d
  001cb: cmp    DWORD PTR [rdi+0x4],0x2b
  001cf: jne    0x33e2d
  001d5: cmp    DWORD PTR [rip+0xffffffffffff36ee],0x26        # 0xffff38ca
  001dc: jne    0x33e2d
  001e2: mov    esi,DWORD PTR [rip+0x7cb]        # 0x9b3
  001e8: cmp    esi,0xffffffff
  001eb: je     0x33e49
  001f1: cmp    WORD PTR [rdi+0x2],0x3
  001f6: jne    0x20f
  001fc: cmp    esi,0x6
  001ff: jge    0x20f
  00205: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020a: jmp    0x22d
  0020f: sub    rsp,0x10
  00213: movq   QWORD PTR [rsp],xmm2
  00218: movabs rax,0x55955d9e0e20
  00222: call   rax
  00224: movq   xmm2,QWORD PTR [rsp]
  00229: add    rsp,0x10
  0022d: mov    QWORD PTR [r14-0x58],rax
:00008 
:00009 %4 = %4 * %5                         [Float][Float]
  00231: mov    rdi,QWORD PTR [r14-0x50]
  00235: test   rdi,0x1
  0023c: jne    0x33e84
  00242: test   rdi,0x2
  00249: je     0x285
  0024f: xorps  xmm3,xmm3
  00252: movabs rax,0x8000000000000002
  0025c: cmp    rdi,rax
  0025f: je     0x297
  00265: mov    rax,rdi
  00268: sar    rax,0x3f
  0026c: add    rax,0x2
  00270: and    rdi,0xfffffffffffffffc
  00274: or     rdi,rax
  00277: rol    rdi,0x3d
  0027b: movq   xmm3,rdi
  00280: jmp    0x297
  00285: call   0xfffef68c
  0028a: test   rax,rax
  0028d: je     0x33e84
  00293: movq   xmm3,xmm0
  00297: mov    rdi,QWORD PTR [r14-0x58]
  0029b: test   rdi,0x1
  002a2: jne    0x33ea0
  002a8: test   rdi,0x2
  002af: je     0x2eb
  002b5: xorps  xmm4,xmm4
  002b8: movabs rax,0x8000000000000002
  002c2: cmp    rdi,rax
  002c5: je     0x2fd
  002cb: mov    rax,rdi
  002ce: sar    rax,0x3f
  002d2: add    rax,0x2
  002d6: and    rdi,0xfffffffffffffffc
  002da: or     rdi,rax
  002dd: rol    rdi,0x3d
  002e1: movq   xmm4,rdi
  002e6: jmp    0x2fd
  002eb: call   0xfffef68c
  002f0: test   rax,rax
  002f3: je     0x33ea0
  002f9: movq   xmm4,xmm0
  002fd: mulsd  xmm3,xmm4
:00010 %3 = %3 - %4                         [Float][Float]
  00301: subsd  xmm2,xmm3
:00011 %4 = @z: Vec[IvarId(2)]
  00305: mov    rdi,QWORD PTR [r14-0x30]
  00309: mov    rax,QWORD PTR [rdi+0x20]
  0030d: mov    QWORD PTR [r14-0x50],rax
:00012 %5 = %1.call x()                     [Vec]
  00311: mov    rdi,QWORD PTR [r14-0x38]
  00315: test   rdi,0x7
  0031c: jne    0x33ebc
  00322: cmp    DWORD PTR [rdi+0x4],0x2b
  00326: jne    0x33ebc
  0032c: cmp    DWORD PTR [rip+0xffffffffffff3597],0x26        # 0xffff38ca
  00333: jne    0x33ebc
  00339: mov    esi,DWORD PTR [rip+0x67c]        # 0x9bb
  0033f: cmp    esi,0xffffffff
  00342: je     0x33ed8
  00348: cmp    WORD PTR [rdi+0x2],0x3
  0034d: jne    0x366
  00353: cmp    esi,0x6
  00356: jge    0x366
  0035c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00361: jmp    0x384
  00366: sub    rsp,0x10
  0036a: movq   QWORD PTR [rsp],xmm2
  0036f: movabs rax,0x55955d9e0e20
  00379: call   rax
  0037b: movq   xmm2,QWORD PTR [rsp]
  00380: add    rsp,0x10
  00384: mov    QWORD PTR [r14-0x58],rax
:00013 
:00014 %4 = %4 * %5                         [Float][Float]
  00388: mov    rdi,QWORD PTR [r14-0x50]
  0038c: test   rdi,0x1
  00393: jne    0x33f13
  00399: test   rdi,0x2
  003a0: je     0x3dc
  003a6: xorps  xmm3,xmm3
  003a9: movabs rax,0x8000000000000002
  003b3: cmp    rdi,rax
  003b6: je     0x3ee
  003bc: mov    rax,rdi
  003bf: sar    rax,0x3f
  003c3: add    rax,0x2
  003c7: and    rdi,0xfffffffffffffffc
  003cb: or     rdi,rax
  003ce: rol    rdi,0x3d
  003d2: movq   xmm3,rdi
  003d7: jmp    0x3ee
  003dc: call   0xfffef68c
  003e1: test   rax,rax
  003e4: je     0x33f13
  003ea: movq   xmm3,xmm0
  003ee: mov    rdi,QWORD PTR [r14-0x58]
  003f2: test   rdi,0x1
  003f9: jne    0x33f2f
  003ff: test   rdi,0x2
  00406: je     0x442
  0040c: xorps  xmm4,xmm4
  0040f: movabs rax,0x8000000000000002
  00419: cmp    rdi,rax
  0041c: je     0x454
  00422: mov    rax,rdi
  00425: sar    rax,0x3f
  00429: add    rax,0x2
  0042d: and    rdi,0xfffffffffffffffc
  00431: or     rdi,rax
  00434: rol    rdi,0x3d
  00438: movq   xmm4,rdi
  0043d: jmp    0x454
  00442: call   0xfffef68c
  00447: test   rax,rax
  0044a: je     0x33f2f
  00450: movq   xmm4,xmm0
  00454: mulsd  xmm3,xmm4
:00015 %5 = @x: Vec[IvarId(0)]
  00458: mov    rdi,QWORD PTR [r14-0x30]
  0045c: mov    rax,QWORD PTR [rdi+0x10]
  00460: mov    QWORD PTR [r14-0x58],rax
:00016 %6 = %1.call z()                     [Vec]
  00464: mov    rdi,QWORD PTR [r14-0x38]
  00468: test   rdi,0x7
  0046f: jne    0x33f4b
  00475: cmp    DWORD PTR [rdi+0x4],0x2b
  00479: jne    0x33f4b
  0047f: cmp    DWORD PTR [rip+0xffffffffffff3444],0x26        # 0xffff38ca
  00486: jne    0x33f4b
  0048c: mov    esi,DWORD PTR [rip+0x531]        # 0x9c3
  00492: cmp    esi,0xffffffff
  00495: je     0x33f74
  0049b: cmp    WORD PTR [rdi+0x2],0x3
  004a0: jne    0x4b9
  004a6: cmp    esi,0x6
  004a9: jge    0x4b9
  004af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004b4: jmp    0x4e3
  004b9: sub    rsp,0x10
  004bd: movq   QWORD PTR [rsp],xmm2
  004c2: movq   QWORD PTR [rsp+0x8],xmm3
  004c8: movabs rax,0x55955d9e0e20
  004d2: call   rax
  004d4: movq   xmm2,QWORD PTR [rsp]
  004d9: movq   xmm3,QWORD PTR [rsp+0x8]
  004df: add    rsp,0x10
  004e3: mov    QWORD PTR [r14-0x60],rax
:00017 
:00018 %5 = %5 * %6                         [Float][Float]
  004e7: mov    rdi,QWORD PTR [r14-0x58]
  004eb: test   rdi,0x1
  004f2: jne    0x33fbb
  004f8: test   rdi,0x2
  004ff: je     0x53b
  00505: xorps  xmm4,xmm4
  00508: movabs rax,0x8000000000000002
  00512: cmp    rdi,rax
  00515: je     0x54d
  0051b: mov    rax,rdi
  0051e: sar    rax,0x3f
  00522: add    rax,0x2
  00526: and    rdi,0xfffffffffffffffc
  0052a: or     rdi,rax
  0052d: rol    rdi,0x3d
  00531: movq   xmm4,rdi
  00536: jmp    0x54d
  0053b: call   0xfffef68c
  00540: test   rax,rax
  00543: je     0x33fbb
  00549: movq   xmm4,xmm0
  0054d: mov    rdi,QWORD PTR [r14-0x60]
  00551: test   rdi,0x1
  00558: jne    0x33fe4
  0055e: test   rdi,0x2
  00565: je     0x5a1
  0056b: xorps  xmm5,xmm5
  0056e: movabs rax,0x8000000000000002
  00578: cmp    rdi,rax
  0057b: je     0x5b3
  00581: mov    rax,rdi
  00584: sar    rax,0x3f
  00588: add    rax,0x2
  0058c: and    rdi,0xfffffffffffffffc
  00590: or     rdi,rax
  00593: rol    rdi,0x3d
  00597: movq   xmm5,rdi
  0059c: jmp    0x5b3
  005a1: call   0xfffef68c
  005a6: test   rax,rax
  005a9: je     0x33fe4
  005af: movq   xmm5,xmm0
  005b3: mulsd  xmm4,xmm5
:00019 %4 = %4 - %5                         [Float][Float]
  005b7: subsd  xmm3,xmm4
:00020 %5 = @x: Vec[IvarId(0)]
  005bb: mov    rdi,QWORD PTR [r14-0x30]
  005bf: mov    rax,QWORD PTR [rdi+0x10]
  005c3: mov    QWORD PTR [r14-0x58],rax
:00021 %6 = %1.call y()                     [Vec]
  005c7: mov    rdi,QWORD PTR [r14-0x38]
  005cb: test   rdi,0x7
  005d2: jne    0x3400d
  005d8: cmp    DWORD PTR [rdi+0x4],0x2b
  005dc: jne    0x3400d
  005e2: cmp    DWORD PTR [rip+0xffffffffffff32e1],0x26        # 0xffff38ca
  005e9: jne    0x3400d
  005ef: mov    esi,DWORD PTR [rip+0x3d6]        # 0x9cb
  005f5: cmp    esi,0xffffffff
  005f8: je     0x34036
  005fe: cmp    WORD PTR [rdi+0x2],0x3
  00603: jne    0x61c
  00609: cmp    esi,0x6
  0060c: jge    0x61c
  00612: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00617: jmp    0x646
  0061c: sub    rsp,0x10
  00620: movq   QWORD PTR [rsp],xmm2
  00625: movq   QWORD PTR [rsp+0x8],xmm3
  0062b: movabs rax,0x55955d9e0e20
  00635: call   rax
  00637: movq   xmm2,QWORD PTR [rsp]
  0063c: movq   xmm3,QWORD PTR [rsp+0x8]
  00642: add    rsp,0x10
  00646: mov    QWORD PTR [r14-0x60],rax
:00022 
:00023 %5 = %5 * %6                         [Float][Float]
  0064a: mov    rdi,QWORD PTR [r14-0x58]
  0064e: test   rdi,0x1
  00655: jne    0x3407d
  0065b: test   rdi,0x2
  00662: je     0x69e
  00668: xorps  xmm4,xmm4
  0066b: movabs rax,0x8000000000000002
  00675: cmp    rdi,rax
  00678: je     0x6b0
  0067e: mov    rax,rdi
  00681: sar    rax,0x3f
  00685: add    rax,0x2
  00689: and    rdi,0xfffffffffffffffc
  0068d: or     rdi,rax
  00690: rol    rdi,0x3d
  00694: movq   xmm4,rdi
  00699: jmp    0x6b0
  0069e: call   0xfffef68c
  006a3: test   rax,rax
  006a6: je     0x3407d
  006ac: movq   xmm4,xmm0
  006b0: mov    rdi,QWORD PTR [r14-0x60]
  006b4: test   rdi,0x1
  006bb: jne    0x340a6
  006c1: test   rdi,0x2
  006c8: je     0x704
  006ce: xorps  xmm5,xmm5
  006d1: movabs rax,0x8000000000000002
  006db: cmp    rdi,rax
  006de: je     0x716
  006e4: mov    rax,rdi
  006e7: sar    rax,0x3f
  006eb: add    rax,0x2
  006ef: and    rdi,0xfffffffffffffffc
  006f3: or     rdi,rax
  006f6: rol    rdi,0x3d
  006fa: movq   xmm5,rdi
  006ff: jmp    0x716
  00704: call   0xfffef68c
  00709: test   rax,rax
  0070c: je     0x340a6
  00712: movq   xmm5,xmm0
  00716: mulsd  xmm4,xmm5
:00024 %6 = @y: Vec[IvarId(1)]
  0071a: mov    rdi,QWORD PTR [r14-0x30]
  0071e: mov    rax,QWORD PTR [rdi+0x18]
  00722: mov    QWORD PTR [r14-0x60],rax
:00025 %7 = %1.call x()                     [Vec]
  00726: mov    rdi,QWORD PTR [r14-0x38]
  0072a: test   rdi,0x7
  00731: jne    0x340cf
  00737: cmp    DWORD PTR [rdi+0x4],0x2b
  0073b: jne    0x340cf
  00741: cmp    DWORD PTR [rip+0xffffffffffff3182],0x26        # 0xffff38ca
  00748: jne    0x340cf
  0074e: mov    esi,DWORD PTR [rip+0x27f]        # 0x9d3
  00754: cmp    esi,0xffffffff
  00757: je     0x34105
  0075d: cmp    WORD PTR [rdi+0x2],0x3
  00762: jne    0x77b
  00768: cmp    esi,0x6
  0076b: jge    0x77b
  00771: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00776: jmp    0x7b1
  0077b: sub    rsp,0x20
  0077f: movq   QWORD PTR [rsp],xmm2
  00784: movq   QWORD PTR [rsp+0x8],xmm3
  0078a: movq   QWORD PTR [rsp+0x10],xmm4
  00790: movabs rax,0x55955d9e0e20
  0079a: call   rax
  0079c: movq   xmm2,QWORD PTR [rsp]
  007a1: movq   xmm3,QWORD PTR [rsp+0x8]
  007a7: movq   xmm4,QWORD PTR [rsp+0x10]
  007ad: add    rsp,0x20
  007b1: mov    QWORD PTR [r14-0x68],rax
:00026 
:00027 %6 = %6 * %7                         [Float][Float]
  007b5: mov    rdi,QWORD PTR [r14-0x60]
  007b9: test   rdi,0x1
  007c0: jne    0x34158
  007c6: test   rdi,0x2
  007cd: je     0x809
  007d3: xorps  xmm5,xmm5
  007d6: movabs rax,0x8000000000000002
  007e0: cmp    rdi,rax
  007e3: je     0x81b
  007e9: mov    rax,rdi
  007ec: sar    rax,0x3f
  007f0: add    rax,0x2
  007f4: and    rdi,0xfffffffffffffffc
  007f8: or     rdi,rax
  007fb: rol    rdi,0x3d
  007ff: movq   xmm5,rdi
  00804: jmp    0x81b
  00809: call   0xfffef68c
  0080e: test   rax,rax
  00811: je     0x34158
  00817: movq   xmm5,xmm0
  0081b: mov    rdi,QWORD PTR [r14-0x68]
  0081f: test   rdi,0x1
  00826: jne    0x3418e
  0082c: test   rdi,0x2
  00833: je     0x86f
  00839: xorps  xmm6,xmm6
  0083c: movabs rax,0x8000000000000002
  00846: cmp    rdi,rax
  00849: je     0x881
  0084f: mov    rax,rdi
  00852: sar    rax,0x3f
  00856: add    rax,0x2
  0085a: and    rdi,0xfffffffffffffffc
  0085e: or     rdi,rax
  00861: rol    rdi,0x3d
  00865: movq   xmm6,rdi
  0086a: jmp    0x881
  0086f: call   0xfffef68c
  00874: test   rax,rax
  00877: je     0x3418e
  0087d: movq   xmm6,xmm0
  00881: mulsd  xmm5,xmm6
:00028 %5 = %5 - %6                         [Float][Float]
  00885: subsd  xmm4,xmm5
:00029 %2 = %2.call new(%3; 3)              [#<Class:Vec>]
  00889: movq   xmm0,xmm2
  0088d: call   0xfffef7b0
  00892: mov    QWORD PTR [r14-0x48],rax
  00896: movq   xmm0,xmm3
  0089a: call   0xfffef7b0
  0089f: mov    QWORD PTR [r14-0x50],rax
  008a3: movq   xmm0,xmm4
  008a7: call   0xfffef7b0
  008ac: mov    QWORD PTR [r14-0x58],rax
  008b0: mov    rdi,QWORD PTR [r14-0x40]
  008b4: test   rdi,0x7
  008bb: jne    0x341c4
  008c1: cmp    DWORD PTR [rdi+0x4],0x2c
  008c5: jne    0x341c4
  008cb: cmp    DWORD PTR [rip+0xffffffffffff2ff8],0x26        # 0xffff38ca
  008d2: jne    0x341c4
  008d8: mov    r9,0x0
  008df: sub    rsp,0x30
  008e3: movq   QWORD PTR [rsp],xmm2
  008e8: movq   QWORD PTR [rsp+0x8],xmm3
  008ee: movq   QWORD PTR [rsp+0x10],xmm4
  008f4: movq   QWORD PTR [rsp+0x18],xmm5
  008fa: movq   QWORD PTR [rsp+0x20],xmm6
  00900: mov    rdx,rdi
  00903: mov    QWORD PTR [rsp-0x40],rcx
  00908: mov    QWORD PTR [rsp-0x28],0x0
  00911: lea    rcx,[r14-0x48]
  00915: mov    r8,0x3
  0091c: mov    rsi,QWORD PTR [rbx]
  0091f: mov    QWORD PTR [rsp-0x18],rsi
  00924: lea    rsi,[rsp-0x18]
  00929: mov    QWORD PTR [rbx],rsi
  0092c: lea    r14,[rsp-0x10]
  00931: mov    QWORD PTR [rsp-0x20],r14
  00936: call   0x341e0
  0093b: lea    r14,[rbp-0x8]
  0093f: mov    QWORD PTR [rbx],r14
  00942: mov    r14,QWORD PTR [rbp-0x10]
  00946: movq   xmm2,QWORD PTR [rsp]
  0094b: movq   xmm3,QWORD PTR [rsp+0x8]
  00951: movq   xmm4,QWORD PTR [rsp+0x10]
  00957: movq   xmm5,QWORD PTR [rsp+0x18]
  0095d: movq   xmm6,QWORD PTR [rsp+0x20]
  00963: add    rsp,0x30
  00967: movabs r13,0x55955e137660
  00971: test   rax,rax
  00974: je     0xfffef633
  0097a: mov    QWORD PTR [r14-0x40],rax
:00030 
:00031 ret %2
  0097e: mov    rax,QWORD PTR [r14-0x40]
  00982: leave  
  00983: ret    
==> start whole compile: ambient_occlusion FuncId(103) self_class:Scene start:[00000] bytecode:0x55955e167a40
<== finished compile. elapsed:84.4µs
offset:Pos(70600) code: 4066 bytes  data: 286 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: jne    0x3383b
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    QWORD PTR [r14-0x78],rax
  0003e: mov    QWORD PTR [r14-0x80],rax
  00042: mov    QWORD PTR [r14-0x88],rax
  00049: mov    QWORD PTR [r14-0x90],rax
  00050: mov    rdi,QWORD PTR [r14-0x30]
  00054: test   rdi,0x7
  0005b: jne    0x3384a
  00061: cmp    DWORD PTR [rdi+0x4],0x35
  00065: jne    0x3384a
:00000 init_method reg:13 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  0006b: mov    rax,QWORD PTR [rip+0xffffffffffff2e96]        # 0xffff2f08
  00072: cmp    rax,QWORD PTR [rip+0xf7f]        # 0xff8
  00079: jne    0x33859
  0007f: mov    rax,QWORD PTR [rip+0xf62]        # 0xfe8
  00086: mov    QWORD PTR [r14-0x70],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  0008a: mov    rdi,QWORD PTR [r14-0x70]
  0008e: test   rdi,0x7
  00095: jne    0x3389f
  0009b: cmp    DWORD PTR [rdi+0x4],0x1e
  0009f: jne    0x3389f
  000a5: cmp    DWORD PTR [rip+0xffffffffffff2e47],0x26        # 0xffff2ef3
  000ac: jne    0x3389f
  000b2: mov    r9,0x0
  000b9: mov    rdx,rdi
  000bc: mov    QWORD PTR [rsp-0x40],rcx
  000c1: mov    QWORD PTR [rsp-0x28],0x0
  000ca: lea    rcx,[r14-0x78]
  000ce: mov    r8,0x0
  000d5: mov    rsi,QWORD PTR [rbx]
  000d8: mov    QWORD PTR [rsp-0x18],rsi
  000dd: lea    rsi,[rsp-0x18]
  000e2: mov    QWORD PTR [rbx],rsi
  000e5: lea    r14,[rsp-0x10]
  000ea: mov    QWORD PTR [rsp-0x20],r14
  000ef: call   0x338ae
  000f4: lea    r14,[rbp-0x8]
  000f8: mov    QWORD PTR [rbx],r14
  000fb: mov    r14,QWORD PTR [rbp-0x10]
  000ff: movabs r13,0x55955e167a80
  00109: test   rax,rax
  0010c: je     0xfffeec5c
  00112: mov    QWORD PTR [r14-0x40],rax
:00003 
:00004 %8 = %2
  00116: mov    rax,QWORD PTR [r14-0x40]
  0011a: mov    QWORD PTR [r14-0x70],rax
:00005 %9 = %1.call n()                     [Isect]
  0011e: mov    rdi,QWORD PTR [r14-0x38]
  00122: test   rdi,0x7
  00129: jne    0x338e0
  0012f: cmp    DWORD PTR [rdi+0x4],0x33
  00133: jne    0x338e0
  00139: cmp    DWORD PTR [rip+0xffffffffffff2db3],0x26        # 0xffff2ef3
  00140: jne    0x338e0
  00146: mov    esi,DWORD PTR [rip+0xeb8]        # 0x1004
  0014c: cmp    esi,0xffffffff
  0014f: je     0x338ef
  00155: cmp    WORD PTR [rdi+0x2],0x3
  0015a: jne    0x173
  00160: cmp    esi,0x6
  00163: jge    0x173
  00169: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0016e: jmp    0x17f
  00173: movabs rax,0x55955d9e0e20
  0017d: call   rax
  0017f: mov    QWORD PTR [r14-0x78],rax
:00006 
:00007 _ = %0.call otherBasis(%8; 2)        [Scene]
  00183: mov    rdi,QWORD PTR [r14-0x30]
  00187: cmp    DWORD PTR [rip+0xffffffffffff2d65],0x26        # 0xffff2ef3
  0018e: jne    0x33918
  00194: cmp    DWORD PTR [rip+0xffffffffffff2d5c],0x0        # 0xffff2ef7
  0019b: je     0x1b3
  001a1: mov    rdi,r12
  001a4: mov    rsi,QWORD PTR [rbx]
  001a7: movabs rax,0x55955d9a3d50
  001b1: call   rax
  001b3: mov    QWORD PTR [rsp-0x28],0x0
  001bc: mov    rax,QWORD PTR [r14-0x30]
  001c0: mov    QWORD PTR [rsp-0x40],rax
  001c5: mov    rdi,0x2
  001cc: mov    rax,QWORD PTR [r14-0x70]
  001d0: mov    QWORD PTR [rsp-0x48],rax
  001d5: mov    rax,QWORD PTR [r14-0x78]
  001d9: mov    QWORD PTR [rsp-0x50],rax
  001de: mov    QWORD PTR [rsp-0x38],0x0
  001e7: movabs rax,0x800000057
  001f1: mov    QWORD PTR [rsp-0x30],rax
  001f6: movabs r13,0x55955e1823e0
  00200: mov    rsi,QWORD PTR [rbx]
  00203: mov    QWORD PTR [rsp-0x18],rsi
  00208: lea    rsi,[rsp-0x18]
  0020d: mov    QWORD PTR [rbx],rsi
  00210: lea    r14,[rsp-0x10]
  00215: mov    QWORD PTR [rsp-0x20],r14
  0021a: call   0xffffb83b
  0021f: lea    r14,[rbp-0x8]
  00223: mov    QWORD PTR [rbx],r14
  00226: mov    r14,QWORD PTR [rbp-0x10]
  0022a: movabs r13,0x55955e167ad0
  00234: test   rax,rax
  00237: je     0xfffeec5c
:00008 
:00009 %3 = const[NAO_SAMPLES]              [8]
  0023d: mov    rax,QWORD PTR [rip+0xffffffffffff2cc4]        # 0xffff2f08
  00244: cmp    rax,QWORD PTR [rip+0xdcd]        # 0x1018
  0024b: jne    0x33927
  00251: mov    rax,QWORD PTR [rip+0xdb0]        # 0x1008
  00258: mov    QWORD PTR [r14-0x48],rax
:00010 %4 = const[NAO_SAMPLES]              [8]
  0025c: mov    rax,QWORD PTR [rip+0xffffffffffff2ca5]        # 0xffff2f08
  00263: cmp    rax,QWORD PTR [rip+0xdce]        # 0x1038
  0026a: jne    0x3396d
  00270: mov    rax,QWORD PTR [rip+0xdb1]        # 0x1028
  00277: mov    QWORD PTR [r14-0x50],rax
:00011 %5 = literal[0.0001]
  0027b: movq   xmm2,QWORD PTR [rip+0xdc5]        # 0x1048
  00283: movabs rax,0xf8d1b71758e2196a
  0028d: mov    QWORD PTR [r14-0x58],rax
:00012 %6 = literal[0.0]
  00291: movq   xmm3,QWORD PTR [rip+0xdbf]        # 0x1058
  00299: movabs rax,0x8000000000000002
  002a3: mov    QWORD PTR [r14-0x60],rax
:00013 %8 = const[Vec]                      [Vec]
  002a7: mov    rax,QWORD PTR [rip+0xffffffffffff2c5a]        # 0xffff2f08
  002ae: cmp    rax,QWORD PTR [rip+0xdc3]        # 0x1078
  002b5: jne    0x339b3
  002bb: mov    rax,QWORD PTR [rip+0xda6]        # 0x1068
  002c2: mov    QWORD PTR [r14-0x70],rax
:00014 %9 = %1.call pl()                    [Isect]
  002c6: mov    rdi,QWORD PTR [r14-0x38]
  002ca: test   rdi,0x7
  002d1: jne    0x33a17
  002d7: cmp    DWORD PTR [rdi+0x4],0x33
  002db: jne    0x33a17
  002e1: cmp    DWORD PTR [rip+0xffffffffffff2c0b],0x26        # 0xffff2ef3
  002e8: jne    0x33a17
  002ee: mov    esi,DWORD PTR [rip+0xd90]        # 0x1084
  002f4: cmp    esi,0xffffffff
  002f7: je     0x33a26
  002fd: cmp    WORD PTR [rdi+0x2],0x3
  00302: jne    0x31b
  00308: cmp    esi,0x6
  0030b: jge    0x31b
  00311: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00316: jmp    0x327
  0031b: movabs rax,0x55955d9e0e20
  00325: call   rax
  00327: mov    QWORD PTR [r14-0x78],rax
:00015 
:00016 %9 = %9.call x()                     [Vec]
  0032b: mov    rdi,QWORD PTR [r14-0x78]
  0032f: test   rdi,0x7
  00336: jne    0x33a4f
  0033c: cmp    DWORD PTR [rdi+0x4],0x2b
  00340: jne    0x33a4f
  00346: cmp    DWORD PTR [rip+0xffffffffffff2ba6],0x26        # 0xffff2ef3
  0034d: jne    0x33a4f
  00353: mov    esi,DWORD PTR [rip+0xd33]        # 0x108c
  00359: cmp    esi,0xffffffff
  0035c: je     0x33a5e
  00362: cmp    WORD PTR [rdi+0x2],0x3
  00367: jne    0x380
  0036d: cmp    esi,0x6
  00370: jge    0x380
  00376: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0037b: jmp    0x38c
  00380: movabs rax,0x55955d9e0e20
  0038a: call   rax
  0038c: mov    QWORD PTR [r14-0x78],rax
:00017 
:00018 %10 = %1.call n()                    [Isect]
  00390: mov    rdi,QWORD PTR [r14-0x38]
  00394: test   rdi,0x7
  0039b: jne    0x33a87
  003a1: cmp    DWORD PTR [rdi+0x4],0x33
  003a5: jne    0x33a87
  003ab: cmp    DWORD PTR [rip+0xffffffffffff2b41],0x26        # 0xffff2ef3
  003b2: jne    0x33a87
  003b8: mov    esi,DWORD PTR [rip+0xcd6]        # 0x1094
  003be: cmp    esi,0xffffffff
  003c1: je     0x33a96
  003c7: cmp    WORD PTR [rdi+0x2],0x3
  003cc: jne    0x3e5
  003d2: cmp    esi,0x6
  003d5: jge    0x3e5
  003db: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003e0: jmp    0x3f1
  003e5: movabs rax,0x55955d9e0e20
  003ef: call   rax
  003f1: mov    QWORD PTR [r14-0x80],rax
:00019 
:00020 %10 = %10.call x()                   [Vec]
  003f5: mov    rdi,QWORD PTR [r14-0x80]
  003f9: test   rdi,0x7
  00400: jne    0x33abf
  00406: cmp    DWORD PTR [rdi+0x4],0x2b
  0040a: jne    0x33abf
  00410: cmp    DWORD PTR [rip+0xffffffffffff2adc],0x26        # 0xffff2ef3
  00417: jne    0x33abf
  0041d: mov    esi,DWORD PTR [rip+0xc79]        # 0x109c
  00423: cmp    esi,0xffffffff
  00426: je     0x33ace
  0042c: cmp    WORD PTR [rdi+0x2],0x3
  00431: jne    0x44a
  00437: cmp    esi,0x6
  0043a: jge    0x44a
  00440: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00445: jmp    0x456
  0044a: movabs rax,0x55955d9e0e20
  00454: call   rax
  00456: mov    QWORD PTR [r14-0x80],rax
:00021 
:00022 %10 = %5 * %10                       [Float][Float]
  0045a: mov    rdi,QWORD PTR [r14-0x58]
  0045e: test   rdi,0x1
  00465: jne    0x33af7
  0046b: test   rdi,0x2
  00472: je     0x4ae
  00478: xorps  xmm2,xmm2
  0047b: movabs rax,0x8000000000000002
  00485: cmp    rdi,rax
  00488: je     0x4c0
  0048e: mov    rax,rdi
  00491: sar    rax,0x3f
  00495: add    rax,0x2
  00499: and    rdi,0xfffffffffffffffc
  0049d: or     rdi,rax
  004a0: rol    rdi,0x3d
  004a4: movq   xmm2,rdi
  004a9: jmp    0x4c0
  004ae: call   0xfffeecb5
  004b3: test   rax,rax
  004b6: je     0x33af7
  004bc: movq   xmm2,xmm0
  004c0: mov    rdi,QWORD PTR [r14-0x80]
  004c4: test   rdi,0x1
  004cb: jne    0x33b06
  004d1: test   rdi,0x2
  004d8: je     0x514
  004de: xorps  xmm3,xmm3
  004e1: movabs rax,0x8000000000000002
  004eb: cmp    rdi,rax
  004ee: je     0x526
  004f4: mov    rax,rdi
  004f7: sar    rax,0x3f
  004fb: add    rax,0x2
  004ff: and    rdi,0xfffffffffffffffc
  00503: or     rdi,rax
  00506: rol    rdi,0x3d
  0050a: movq   xmm3,rdi
  0050f: jmp    0x526
  00514: call   0xfffeecb5
  00519: test   rax,rax
  0051c: je     0x33b06
  00522: movq   xmm3,xmm0
  00526: mulsd  xmm3,xmm2
:00023 %9 = %9 + %10                        [Float][Float]
  0052a: mov    rdi,QWORD PTR [r14-0x78]
  0052e: test   rdi,0x1
  00535: jne    0x33b15
  0053b: test   rdi,0x2
  00542: je     0x57e
  00548: xorps  xmm4,xmm4
  0054b: movabs rax,0x8000000000000002
  00555: cmp    rdi,rax
  00558: je     0x590
  0055e: mov    rax,rdi
  00561: sar    rax,0x3f
  00565: add    rax,0x2
  00569: and    rdi,0xfffffffffffffffc
  0056d: or     rdi,rax
  00570: rol    rdi,0x3d
  00574: movq   xmm4,rdi
  00579: jmp    0x590
  0057e: call   0xfffeecb5
  00583: test   rax,rax
  00586: je     0x33b15
  0058c: movq   xmm4,xmm0
  00590: addsd  xmm4,xmm3
:00024 %10 = %1.call pl()                   [Isect]
  00594: mov    rdi,QWORD PTR [r14-0x38]
  00598: test   rdi,0x7
  0059f: jne    0x33b31
  005a5: cmp    DWORD PTR [rdi+0x4],0x33
  005a9: jne    0x33b31
  005af: cmp    DWORD PTR [rip+0xffffffffffff293d],0x26        # 0xffff2ef3
  005b6: jne    0x33b31
  005bc: mov    esi,DWORD PTR [rip+0xae2]        # 0x10a4
  005c2: cmp    esi,0xffffffff
  005c5: je     0x33b4d
  005cb: cmp    WORD PTR [rdi+0x2],0x3
  005d0: jne    0x5e9
  005d6: cmp    esi,0x6
  005d9: jge    0x5e9
  005df: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005e4: jmp    0x607
  005e9: sub    rsp,0x10
  005ed: movq   QWORD PTR [rsp],xmm4
  005f2: movabs rax,0x55955d9e0e20
  005fc: call   rax
  005fe: movq   xmm4,QWORD PTR [rsp]
  00603: add    rsp,0x10
  00607: mov    QWORD PTR [r14-0x80],rax
:00025 
:00026 %10 = %10.call y()                   [Vec]
  0060b: mov    rdi,QWORD PTR [r14-0x80]
  0060f: test   rdi,0x7
  00616: jne    0x33b88
  0061c: cmp    DWORD PTR [rdi+0x4],0x2b
  00620: jne    0x33b88
  00626: cmp    DWORD PTR [rip+0xffffffffffff28c6],0x26        # 0xffff2ef3
  0062d: jne    0x33b88
  00633: mov    esi,DWORD PTR [rip+0xa73]        # 0x10ac
  00639: cmp    esi,0xffffffff
  0063c: je     0x33ba4
  00642: cmp    WORD PTR [rdi+0x2],0x3
  00647: jne    0x660
  0064d: cmp    esi,0x6
  00650: jge    0x660
  00656: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065b: jmp    0x67e
  00660: sub    rsp,0x10
  00664: movq   QWORD PTR [rsp],xmm4
  00669: movabs rax,0x55955d9e0e20
  00673: call   rax
  00675: movq   xmm4,QWORD PTR [rsp]
  0067a: add    rsp,0x10
  0067e: mov    QWORD PTR [r14-0x80],rax
:00027 
:00028 %11 = %1.call n()                    [Isect]
  00682: mov    rdi,QWORD PTR [r14-0x38]
  00686: test   rdi,0x7
  0068d: jne    0x33bdf
  00693: cmp    DWORD PTR [rdi+0x4],0x33
  00697: jne    0x33bdf
  0069d: cmp    DWORD PTR [rip+0xffffffffffff284f],0x26        # 0xffff2ef3
  006a4: jne    0x33bdf
  006aa: mov    esi,DWORD PTR [rip+0xa04]        # 0x10b4
  006b0: cmp    esi,0xffffffff
  006b3: je     0x33bfb
  006b9: cmp    WORD PTR [rdi+0x2],0x3
  006be: jne    0x6d7
  006c4: cmp    esi,0x6
  006c7: jge    0x6d7
  006cd: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006d2: jmp    0x6f5
  006d7: sub    rsp,0x10
  006db: movq   QWORD PTR [rsp],xmm4
  006e0: movabs rax,0x55955d9e0e20
  006ea: call   rax
  006ec: movq   xmm4,QWORD PTR [rsp]
  006f1: add    rsp,0x10
  006f5: mov    QWORD PTR [r14-0x88],rax
:00029 
:00030 %11 = %11.call y()                   [Vec]
  006fc: mov    rdi,QWORD PTR [r14-0x88]
  00703: test   rdi,0x7
  0070a: jne    0x33c36
  00710: cmp    DWORD PTR [rdi+0x4],0x2b
  00714: jne    0x33c36
  0071a: cmp    DWORD PTR [rip+0xffffffffffff27d2],0x26        # 0xffff2ef3
  00721: jne    0x33c36
  00727: mov    esi,DWORD PTR [rip+0x98f]        # 0x10bc
  0072d: cmp    esi,0xffffffff
  00730: je     0x33c52
  00736: cmp    WORD PTR [rdi+0x2],0x3
  0073b: jne    0x754
  00741: cmp    esi,0x6
  00744: jge    0x754
  0074a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0074f: jmp    0x772
  00754: sub    rsp,0x10
  00758: movq   QWORD PTR [rsp],xmm4
  0075d: movabs rax,0x55955d9e0e20
  00767: call   rax
  00769: movq   xmm4,QWORD PTR [rsp]
  0076e: add    rsp,0x10
  00772: mov    QWORD PTR [r14-0x88],rax
:00031 
:00032 %11 = %5 * %11                       [Float][Float]
  00779: mov    rdi,QWORD PTR [r14-0x58]
  0077d: test   rdi,0x1
  00784: jne    0x33c8d
  0078a: test   rdi,0x2
  00791: je     0x7cd
  00797: xorps  xmm2,xmm2
  0079a: movabs rax,0x8000000000000002
  007a4: cmp    rdi,rax
  007a7: je     0x7df
  007ad: mov    rax,rdi
  007b0: sar    rax,0x3f
  007b4: add    rax,0x2
  007b8: and    rdi,0xfffffffffffffffc
  007bc: or     rdi,rax
  007bf: rol    rdi,0x3d
  007c3: movq   xmm2,rdi
  007c8: jmp    0x7df
  007cd: call   0xfffeecb5
  007d2: test   rax,rax
  007d5: je     0x33c8d
  007db: movq   xmm2,xmm0
  007df: mov    rdi,QWORD PTR [r14-0x88]
  007e6: test   rdi,0x1
  007ed: jne    0x33ca9
  007f3: test   rdi,0x2
  007fa: je     0x836
  00800: xorps  xmm3,xmm3
  00803: movabs rax,0x8000000000000002
  0080d: cmp    rdi,rax
  00810: je     0x848
  00816: mov    rax,rdi
  00819: sar    rax,0x3f
  0081d: add    rax,0x2
  00821: and    rdi,0xfffffffffffffffc
  00825: or     rdi,rax
  00828: rol    rdi,0x3d
  0082c: movq   xmm3,rdi
  00831: jmp    0x848
  00836: call   0xfffeecb5
  0083b: test   rax,rax
  0083e: je     0x33ca9
  00844: movq   xmm3,xmm0
  00848: mulsd  xmm3,xmm2
:00033 %10 = %10 + %11                      [Float][Float]
  0084c: mov    rdi,QWORD PTR [r14-0x80]
  00850: test   rdi,0x1
  00857: jne    0x33cc5
  0085d: test   rdi,0x2
  00864: je     0x8a0
  0086a: xorps  xmm5,xmm5
  0086d: movabs rax,0x8000000000000002
  00877: cmp    rdi,rax
  0087a: je     0x8b2
  00880: mov    rax,rdi
  00883: sar    rax,0x3f
  00887: add    rax,0x2
  0088b: and    rdi,0xfffffffffffffffc
  0088f: or     rdi,rax
  00892: rol    rdi,0x3d
  00896: movq   xmm5,rdi
  0089b: jmp    0x8b2
  008a0: call   0xfffeecb5
  008a5: test   rax,rax
  008a8: je     0x33cc5
  008ae: movq   xmm5,xmm0
  008b2: addsd  xmm5,xmm3
:00034 %11 = %1.call pl()                   [Isect]
  008b6: mov    rdi,QWORD PTR [r14-0x38]
  008ba: test   rdi,0x7
  008c1: jne    0x33cf1
  008c7: cmp    DWORD PTR [rdi+0x4],0x33
  008cb: jne    0x33cf1
  008d1: cmp    DWORD PTR [rip+0xffffffffffff261b],0x26        # 0xffff2ef3
  008d8: jne    0x33cf1
  008de: mov    esi,DWORD PTR [rip+0x7e0]        # 0x10c4
  008e4: cmp    esi,0xffffffff
  008e7: je     0x33d1a
  008ed: cmp    WORD PTR [rdi+0x2],0x3
  008f2: jne    0x90b
  008f8: cmp    esi,0x6
  008fb: jge    0x90b
  00901: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00906: jmp    0x935
  0090b: sub    rsp,0x10
  0090f: movq   QWORD PTR [rsp],xmm4
  00914: movq   QWORD PTR [rsp+0x8],xmm5
  0091a: movabs rax,0x55955d9e0e20
  00924: call   rax
  00926: movq   xmm4,QWORD PTR [rsp]
  0092b: movq   xmm5,QWORD PTR [rsp+0x8]
  00931: add    rsp,0x10
  00935: mov    QWORD PTR [r14-0x88],rax
:00035 
:00036 %11 = %11.call z()                   [Vec]
  0093c: mov    rdi,QWORD PTR [r14-0x88]
  00943: test   rdi,0x7
  0094a: jne    0x33d61
  00950: cmp    DWORD PTR [rdi+0x4],0x2b
  00954: jne    0x33d61
  0095a: cmp    DWORD PTR [rip+0xffffffffffff2592],0x26        # 0xffff2ef3
  00961: jne    0x33d61
  00967: mov    esi,DWORD PTR [rip+0x75f]        # 0x10cc
  0096d: cmp    esi,0xffffffff
  00970: je     0x33d8a
  00976: cmp    WORD PTR [rdi+0x2],0x3
  0097b: jne    0x994
  00981: cmp    esi,0x6
  00984: jge    0x994
  0098a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0098f: jmp    0x9be
  00994: sub    rsp,0x10
  00998: movq   QWORD PTR [rsp],xmm4
  0099d: movq   QWORD PTR [rsp+0x8],xmm5
  009a3: movabs rax,0x55955d9e0e20
  009ad: call   rax
  009af: movq   xmm4,QWORD PTR [rsp]
  009b4: movq   xmm5,QWORD PTR [rsp+0x8]
  009ba: add    rsp,0x10
  009be: mov    QWORD PTR [r14-0x88],rax
:00037 
:00038 %12 = %1.call n()                    [Isect]
  009c5: mov    rdi,QWORD PTR [r14-0x38]
  009c9: test   rdi,0x7
  009d0: jne    0x33dd1
  009d6: cmp    DWORD PTR [rdi+0x4],0x33
  009da: jne    0x33dd1
  009e0: cmp    DWORD PTR [rip+0xffffffffffff250c],0x26        # 0xffff2ef3
  009e7: jne    0x33dd1
  009ed: mov    esi,DWORD PTR [rip+0x6e1]        # 0x10d4
  009f3: cmp    esi,0xffffffff
  009f6: je     0x33dfa
  009fc: cmp    WORD PTR [rdi+0x2],0x3
  00a01: jne    0xa1a
  00a07: cmp    esi,0x6
  00a0a: jge    0xa1a
  00a10: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a15: jmp    0xa44
  00a1a: sub    rsp,0x10
  00a1e: movq   QWORD PTR [rsp],xmm4
  00a23: movq   QWORD PTR [rsp+0x8],xmm5
  00a29: movabs rax,0x55955d9e0e20
  00a33: call   rax
  00a35: movq   xmm4,QWORD PTR [rsp]
  00a3a: movq   xmm5,QWORD PTR [rsp+0x8]
  00a40: add    rsp,0x10
  00a44: mov    QWORD PTR [r14-0x90],rax
:00039 
:00040 %12 = %12.call z()                   [Vec]
  00a4b: mov    rdi,QWORD PTR [r14-0x90]
  00a52: test   rdi,0x7
  00a59: jne    0x33e41
  00a5f: cmp    DWORD PTR [rdi+0x4],0x2b
  00a63: jne    0x33e41
  00a69: cmp    DWORD PTR [rip+0xffffffffffff2483],0x26        # 0xffff2ef3
  00a70: jne    0x33e41
  00a76: mov    esi,DWORD PTR [rip+0x660]        # 0x10dc
  00a7c: cmp    esi,0xffffffff
  00a7f: je     0x33e6a
  00a85: cmp    WORD PTR [rdi+0x2],0x3
  00a8a: jne    0xaa3
  00a90: cmp    esi,0x6
  00a93: jge    0xaa3
  00a99: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a9e: jmp    0xacd
  00aa3: sub    rsp,0x10
  00aa7: movq   QWORD PTR [rsp],xmm4
  00aac: movq   QWORD PTR [rsp+0x8],xmm5
  00ab2: movabs rax,0x55955d9e0e20
  00abc: call   rax
  00abe: movq   xmm4,QWORD PTR [rsp]
  00ac3: movq   xmm5,QWORD PTR [rsp+0x8]
  00ac9: add    rsp,0x10
  00acd: mov    QWORD PTR [r14-0x90],rax
:00041 
:00042 %12 = %5 * %12                       [Float][Float]
  00ad4: mov    rdi,QWORD PTR [r14-0x58]
  00ad8: test   rdi,0x1
  00adf: jne    0x33eb1
  00ae5: test   rdi,0x2
  00aec: je     0xb28
  00af2: xorps  xmm2,xmm2
  00af5: movabs rax,0x8000000000000002
  00aff: cmp    rdi,rax
  00b02: je     0xb3a
  00b08: mov    rax,rdi
  00b0b: sar    rax,0x3f
  00b0f: add    rax,0x2
  00b13: and    rdi,0xfffffffffffffffc
  00b17: or     rdi,rax
  00b1a: rol    rdi,0x3d
  00b1e: movq   xmm2,rdi
  00b23: jmp    0xb3a
  00b28: call   0xfffeecb5
  00b2d: test   rax,rax
  00b30: je     0x33eb1
  00b36: movq   xmm2,xmm0
  00b3a: mov    rdi,QWORD PTR [r14-0x90]
  00b41: test   rdi,0x1
  00b48: jne    0x33eda
  00b4e: test   rdi,0x2
  00b55: je     0xb91
  00b5b: xorps  xmm3,xmm3
  00b5e: movabs rax,0x8000000000000002
  00b68: cmp    rdi,rax
  00b6b: je     0xba3
  00b71: mov    rax,rdi
  00b74: sar    rax,0x3f
  00b78: add    rax,0x2
  00b7c: and    rdi,0xfffffffffffffffc
  00b80: or     rdi,rax
  00b83: rol    rdi,0x3d
  00b87: movq   xmm3,rdi
  00b8c: jmp    0xba3
  00b91: call   0xfffeecb5
  00b96: test   rax,rax
  00b99: je     0x33eda
  00b9f: movq   xmm3,xmm0
  00ba3: mulsd  xmm3,xmm2
:00043 %11 = %11 + %12                      [Float][Float]
  00ba7: mov    rdi,QWORD PTR [r14-0x88]
  00bae: test   rdi,0x1
  00bb5: jne    0x33f03
  00bbb: test   rdi,0x2
  00bc2: je     0xbfe
  00bc8: xorps  xmm6,xmm6
  00bcb: movabs rax,0x8000000000000002
  00bd5: cmp    rdi,rax
  00bd8: je     0xc10
  00bde: mov    rax,rdi
  00be1: sar    rax,0x3f
  00be5: add    rax,0x2
  00be9: and    rdi,0xfffffffffffffffc
  00bed: or     rdi,rax
  00bf0: rol    rdi,0x3d
  00bf4: movq   xmm6,rdi
  00bf9: jmp    0xc10
  00bfe: call   0xfffeecb5
  00c03: test   rax,rax
  00c06: je     0x33f03
  00c0c: movq   xmm6,xmm0
  00c10: addsd  xmm6,xmm3
:00044 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c14: movq   xmm0,xmm4
  00c18: call   0xfffeedd9
  00c1d: mov    QWORD PTR [r14-0x78],rax
  00c21: movq   xmm0,xmm5
  00c25: call   0xfffeedd9
  00c2a: mov    QWORD PTR [r14-0x80],rax
  00c2e: movq   xmm0,xmm6
  00c32: call   0xfffeedd9
  00c37: mov    QWORD PTR [r14-0x88],rax
  00c3e: mov    rdi,QWORD PTR [r14-0x70]
  00c42: test   rdi,0x7
  00c49: jne    0x33f3c
  00c4f: cmp    DWORD PTR [rdi+0x4],0x2c
  00c53: jne    0x33f3c
  00c59: cmp    DWORD PTR [rip+0xffffffffffff2293],0x26        # 0xffff2ef3
  00c60: jne    0x33f3c
  00c66: mov    r9,0x0
  00c6d: sub    rsp,0x20
  00c71: movq   QWORD PTR [rsp],xmm3
  00c76: movq   QWORD PTR [rsp+0x8],xmm4
  00c7c: movq   QWORD PTR [rsp+0x10],xmm5
  00c82: movq   QWORD PTR [rsp+0x18],xmm6
  00c88: mov    rdx,rdi
  00c8b: mov    QWORD PTR [rsp-0x40],rcx
  00c90: mov    QWORD PTR [rsp-0x28],0x0
  00c99: lea    rcx,[r14-0x78]
  00c9d: mov    r8,0x3
  00ca4: mov    rsi,QWORD PTR [rbx]
  00ca7: mov    QWORD PTR [rsp-0x18],rsi
  00cac: lea    rsi,[rsp-0x18]
  00cb1: mov    QWORD PTR [rbx],rsi
  00cb4: lea    r14,[rsp-0x10]
  00cb9: mov    QWORD PTR [rsp-0x20],r14
  00cbe: call   0x33f5b
  00cc3: lea    r14,[rbp-0x8]
  00cc7: mov    QWORD PTR [rbx],r14
  00cca: mov    r14,QWORD PTR [rbp-0x10]
  00cce: movq   xmm3,QWORD PTR [rsp]
  00cd3: movq   xmm4,QWORD PTR [rsp+0x8]
  00cd9: movq   xmm5,QWORD PTR [rsp+0x10]
  00cdf: movq   xmm6,QWORD PTR [rsp+0x18]
  00ce5: add    rsp,0x20
  00ce9: movabs r13,0x55955e167d20
  00cf3: test   rax,rax
  00cf6: je     0xfffeec5c
  00cfc: mov    QWORD PTR [r14-0x68],rax
:00045 
:00046 %8 = literal[6881281]
  00d00: mov    rax,0xd20003
  00d07: mov    QWORD PTR [r14-0x70],rax
:00047 _ = %4.call times(&%8)               [Integer]
  00d0b: mov    rdi,QWORD PTR [r14-0x50]
  00d0f: test   rdi,0x1
  00d16: je     0x33f8d
  00d1c: cmp    DWORD PTR [rip+0xffffffffffff21d0],0x26        # 0xffff2ef3
  00d23: jne    0x33f8d
  00d29: mov    r9,QWORD PTR [r14-0x70]
  00d2d: sub    rsp,0x20
  00d31: movq   QWORD PTR [rsp],xmm3
  00d36: movq   QWORD PTR [rsp+0x8],xmm4
  00d3c: movq   QWORD PTR [rsp+0x10],xmm5
  00d42: movq   QWORD PTR [rsp+0x18],xmm6
  00d48: mov    rdx,rdi
  00d4b: mov    QWORD PTR [rsp-0x40],rcx
  00d50: mov    QWORD PTR [rsp-0x28],0x0
  00d59: lea    rcx,[r14-0x78]
  00d5d: mov    r8,0x0
  00d64: mov    rsi,QWORD PTR [rbx]
  00d67: mov    QWORD PTR [rsp-0x18],rsi
  00d6c: lea    rsi,[rsp-0x18]
  00d71: mov    QWORD PTR [rbx],rsi
  00d74: lea    r14,[rsp-0x10]
  00d79: mov    QWORD PTR [rsp-0x20],r14
  00d7e: call   0x33fac
  00d83: lea    r14,[rbp-0x8]
  00d87: mov    QWORD PTR [rbx],r14
  00d8a: mov    r14,QWORD PTR [rbp-0x10]
  00d8e: movq   xmm3,QWORD PTR [rsp]
  00d93: movq   xmm4,QWORD PTR [rsp+0x8]
  00d99: movq   xmm5,QWORD PTR [rsp+0x10]
  00d9f: movq   xmm6,QWORD PTR [rsp+0x18]
  00da5: add    rsp,0x20
  00da9: movabs r13,0x55955e167d50
  00db3: test   rax,rax
  00db6: je     0xfffeec5c
:00048 
:00049 %8 = %3.call to_f()                  [Integer]
  00dbc: mov    rdi,QWORD PTR [r14-0x48]
  00dc0: test   rdi,0x1
  00dc7: je     0x33fde
  00dcd: cmp    DWORD PTR [rip+0xffffffffffff211f],0x26        # 0xffff2ef3
  00dd4: jne    0x33fde
  00dda: sar    rdi,1
  00ddd: cvtsi2sd xmm2,rdi
:00050 
:00051 %9 = %4.call to_f()                  [Integer]
  00de2: mov    rdi,QWORD PTR [r14-0x50]
  00de6: test   rdi,0x1
  00ded: je     0x33ffd
  00df3: cmp    DWORD PTR [rip+0xffffffffffff20f9],0x26        # 0xffff2ef3
  00dfa: jne    0x33ffd
  00e00: sar    rdi,1
  00e03: cvtsi2sd xmm4,rdi
:00052 
:00053 %8 = %8 * %9                         [Float][Float]
  00e08: mulsd  xmm2,xmm4
:00054 %8 = %8 - %6                         [Float][Float]
  00e0c: mov    rdi,QWORD PTR [r14-0x60]
  00e10: test   rdi,0x1
  00e17: jne    0x34029
  00e1d: test   rdi,0x2
  00e24: je     0xe60
  00e2a: xorps  xmm7,xmm7
  00e2d: movabs rax,0x8000000000000002
  00e37: cmp    rdi,rax
  00e3a: je     0xe72
  00e40: mov    rax,rdi
  00e43: sar    rax,0x3f
  00e47: add    rax,0x2
  00e4b: and    rdi,0xfffffffffffffffc
  00e4f: or     rdi,rax
  00e52: rol    rdi,0x3d
  00e56: movq   xmm7,rdi
  00e5b: jmp    0xe72
  00e60: call   0xfffeecb5
  00e65: test   rax,rax
  00e68: je     0x34029
  00e6e: movq   xmm7,xmm0
  00e72: subsd  xmm2,xmm7
:00055 %9 = %3.call to_f()                  [Integer]
  00e76: mov    rdi,QWORD PTR [r14-0x48]
  00e7a: test   rdi,0x1
  00e81: je     0x34062
  00e87: cmp    DWORD PTR [rip+0xffffffffffff2065],0x26        # 0xffff2ef3
  00e8e: jne    0x34062
  00e94: sar    rdi,1
  00e97: cvtsi2sd xmm4,rdi
:00056 
:00057 %10 = %4.call to_f()                 [Integer]
  00e9c: mov    rdi,QWORD PTR [r14-0x50]
  00ea0: test   rdi,0x1
  00ea7: je     0x3409b
  00ead: cmp    DWORD PTR [rip+0xffffffffffff203f],0x26        # 0xffff2ef3
  00eb4: jne    0x3409b
  00eba: sar    rdi,1
  00ebd: cvtsi2sd xmm5,rdi
:00058 
:00059 %9 = %9 * %10                        [Float][Float]
  00ec2: mulsd  xmm4,xmm5
:00060 %6 = %8 / %9                         [Float][Float]
  00ec6: movq   xmm7,xmm2
  00eca: movq   rax,xmm4
  00ecf: test   rax,rax
  00ed2: je     0xfffeec81
  00ed8: divsd  xmm7,xmm4
:00061 %8 = const[Vec]                      [Vec]
  00edc: mov    rax,QWORD PTR [rip+0xffffffffffff2025]        # 0xffff2f08
  00ee3: cmp    rax,QWORD PTR [rip+0x20e]        # 0x10f8
  00eea: jne    0x340d4
  00ef0: mov    rax,QWORD PTR [rip+0x1f1]        # 0x10e8
  00ef7: mov    QWORD PTR [r14-0x70],rax
:00062 %9 = %6
:00063 %10 = %6
:00064 %11 = %6
:00065 %8 = %8.call new(%9; 3)              [#<Class:Vec>]
  00efb: movq   xmm0,xmm7
  00eff: call   0xfffeedd9
  00f04: mov    QWORD PTR [r14-0x78],rax
  00f08: movq   xmm0,xmm7
  00f0c: call   0xfffeedd9
  00f11: mov    QWORD PTR [r14-0x80],rax
  00f15: movq   xmm0,xmm7
  00f19: call   0xfffeedd9
  00f1e: mov    QWORD PTR [r14-0x88],rax
  00f25: movq   xmm0,xmm7
  00f29: call   0xfffeedd9
  00f2e: mov    QWORD PTR [r14-0x60],rax
  00f32: mov    rdi,QWORD PTR [r14-0x70]
  00f36: test   rdi,0x7
  00f3d: jne    0x3415c
  00f43: cmp    DWORD PTR [rdi+0x4],0x2c
  00f47: jne    0x3415c
  00f4d: cmp    DWORD PTR [rip+0xffffffffffff1f9f],0x26        # 0xffff2ef3
  00f54: jne    0x3415c
  00f5a: mov    r9,0x0
  00f61: sub    rsp,0x10
  00f65: movq   QWORD PTR [rsp],xmm3
  00f6a: movq   QWORD PTR [rsp+0x8],xmm7
  00f70: mov    rdx,rdi
  00f73: mov    QWORD PTR [rsp-0x40],rcx
  00f78: mov    QWORD PTR [rsp-0x28],0x0
  00f81: lea    rcx,[r14-0x78]
  00f85: mov    r8,0x3
  00f8c: mov    rsi,QWORD PTR [rbx]
  00f8f: mov    QWORD PTR [rsp-0x18],rsi
  00f94: lea    rsi,[rsp-0x18]
  00f99: mov    QWORD PTR [rbx],rsi
  00f9c: lea    r14,[rsp-0x10]
  00fa1: mov    QWORD PTR [rsp-0x20],r14
  00fa6: call   0x3417b
  00fab: lea    r14,[rbp-0x8]
  00faf: mov    QWORD PTR [rbx],r14
  00fb2: mov    r14,QWORD PTR [rbp-0x10]
  00fb6: movq   xmm3,QWORD PTR [rsp]
  00fbb: movq   xmm7,QWORD PTR [rsp+0x8]
  00fc1: add    rsp,0x10
  00fc5: movabs r13,0x55955e167e70
  00fcf: test   rax,rax
  00fd2: je     0xfffeec5c
  00fd8: mov    QWORD PTR [r14-0x70],rax
:00066 
:00067 ret %8
  00fdc: mov    rax,QWORD PTR [r14-0x70]
  00fe0: leave  
  00fe1: ret    
==> start whole compile: otherBasis FuncId(87) self_class:Scene start:[00000] bytecode:0x55955e1823e0
<== finished compile. elapsed:140.1µs
offset:Pos(74952) code: 6380 bytes  data: 312 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x330ad
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x330bc
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x330bc
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1daf]        # 0xffff1e08
  00059: 00 	cmp    rax,QWORD PTR [rip+0x18a8]        # 0x1908
  00060:    	jne    0x330cb
  00066: 00 	mov    rax,QWORD PTR [rip+0x188b]        # 0x18f8
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x33111
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x33111
  0008c: 26 	cmp    DWORD PTR [rip+0xffffffffffff1d60],0x26        # 0xffff1df3
  00093:    	jne    0x33111
  00099:    	mov    esi,DWORD PTR [rip+0x1875]        # 0x1914
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x33120
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 95 	movabs rax,0x55955d9e0e20
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x33149
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x33149
  000f1: 26 	cmp    DWORD PTR [rip+0xffffffffffff1cfb],0x26        # 0xffff1df3
  000f8:    	jne    0x33149
  000fe:    	mov    esi,DWORD PTR [rip+0x1818]        # 0x191c
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x33158
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 95 	movabs rax,0x55955d9e0e20
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x33181
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x33181
  00156: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c96],0x26        # 0xffff1df3
  0015d:    	jne    0x33181
  00163:    	mov    esi,DWORD PTR [rip+0x17bb]        # 0x1924
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x33190
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 95 	movabs rax,0x55955d9e0e20
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x331b9
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x331b9
  001bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c31],0x26        # 0xffff1df3
  001c2:    	jne    0x331b9
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x331c8
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215: 95 	movabs r13,0x55955e182490
  0021f:    	test   rax,rax
  00222:    	je     0xfffedb5c
  00228:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  0022c:    	mov    rdx,QWORD PTR [r14-0x38]
  00230:    	mov    rcx,QWORD PTR [r14-0x48]
  00234:    	mov    r8,QWORD PTR [r14-0x50]
  00238:    	mov    rdi,rbx
  0023b:    	mov    rsi,r12
  0023e: 95 	movabs r9,0x55955e182498
  00248: 95 	movabs rax,0x55955d9acd80
  00252:    	call   rax
  00254: 95 	movabs r13,0x55955e1824a0
  0025e:    	test   rax,rax
  00261:    	je     0xfffedb5c
:00012 %3 = 1: i32
  00267: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  0026f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1b92]        # 0xffff1e08
  00276: 00 	cmp    rax,QWORD PTR [rip+0x16bb]        # 0x1938
  0027d:    	jne    0x331fa
  00283: 00 	mov    rax,QWORD PTR [rip+0x169e]        # 0x1928
  0028a:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  0028e: 00 	movq   xmm2,QWORD PTR [rip+0x16b2]        # 0x1948
  00296: 00 	movabs rax,0x8000000000000002
  002a0:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002a4: 00 	movq   xmm3,QWORD PTR [rip+0x16ac]        # 0x1958
  002ac: 00 	movabs rax,0x8000000000000002
  002b6:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002ba: 00 	movq   xmm4,QWORD PTR [rip+0x16a6]        # 0x1968
  002c2: 00 	movabs rax,0x8000000000000002
  002cc:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002d0:    	mov    rdi,QWORD PTR [r14-0x50]
  002d4: 00 	test   rdi,0x7
  002db:    	jne    0x33240
  002e1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002e5:    	jne    0x33240
  002eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff1b01],0x26        # 0xffff1df3
  002f2:    	jne    0x33240
  002f8: 00 	mov    r9,0x0
  002ff:    	sub    rsp,0x20
  00303:    	movq   QWORD PTR [rsp],xmm2
  00308:    	movq   QWORD PTR [rsp+0x8],xmm3
  0030e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00314:    	mov    rdx,rdi
  00317:    	mov    QWORD PTR [rsp-0x40],rcx
  0031c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00325:    	lea    rcx,[r14-0x58]
  00329: 00 	mov    r8,0x3
  00330:    	mov    rsi,QWORD PTR [rbx]
  00333:    	mov    QWORD PTR [rsp-0x18],rsi
  00338:    	lea    rsi,[rsp-0x18]
  0033d:    	mov    QWORD PTR [rbx],rsi
  00340:    	lea    r14,[rsp-0x10]
  00345:    	mov    QWORD PTR [rsp-0x20],r14
  0034a:    	call   0x3324f
  0034f:    	lea    r14,[rbp-0x8]
  00353:    	mov    QWORD PTR [rbx],r14
  00356:    	mov    r14,QWORD PTR [rbp-0x10]
  0035a:    	movq   xmm2,QWORD PTR [rsp]
  0035f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00365:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0036b:    	add    rsp,0x20
  0036f: 95 	movabs r13,0x55955e182510
  00379:    	test   rax,rax
  0037c:    	je     0xfffedb5c
  00382:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  00386:    	sub    rsp,0x20
  0038a:    	movq   QWORD PTR [rsp],xmm2
  0038f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00395:    	movq   QWORD PTR [rsp+0x10],xmm4
  0039b:    	mov    rdx,QWORD PTR [r14-0x38]
  0039f:    	mov    rcx,QWORD PTR [r14-0x48]
  003a3:    	mov    r8,QWORD PTR [r14-0x50]
  003a7:    	mov    rdi,rbx
  003aa:    	mov    rsi,r12
  003ad: 95 	movabs r9,0x55955e182518
  003b7: 95 	movabs rax,0x55955d9acd80
  003c1:    	call   rax
  003c3:    	movq   xmm2,QWORD PTR [rsp]
  003c8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003ce:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003d4:    	add    rsp,0x20
  003d8: 95 	movabs r13,0x55955e182520
  003e2:    	test   rax,rax
  003e5:    	je     0xfffedb5c
:00020 %3 = %2.call x()                     [Vec]
  003eb:    	mov    rdi,QWORD PTR [r14-0x40]
  003ef: 00 	test   rdi,0x7
  003f6:    	jne    0x33281
  003fc:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00400:    	jne    0x33281
  00406: 26 	cmp    DWORD PTR [rip+0xffffffffffff19e6],0x26        # 0xffff1df3
  0040d:    	jne    0x33281
  00413:    	mov    esi,DWORD PTR [rip+0x155b]        # 0x1974
  00419:    	cmp    esi,0xffffffff
  0041c:    	je     0x33290
  00422:    	cmp    WORD PTR [rdi+0x2],0x3
  00427:    	jne    0x440
  0042d:    	cmp    esi,0x6
  00430:    	jge    0x440
  00436:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0043b:    	jmp    0x476
  00440:    	sub    rsp,0x20
  00444:    	movq   QWORD PTR [rsp],xmm2
  00449:    	movq   QWORD PTR [rsp+0x8],xmm3
  0044f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00455: 95 	movabs rax,0x55955d9e0e20
  0045f:    	call   rax
  00461:    	movq   xmm2,QWORD PTR [rsp]
  00466:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0046c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00472:    	add    rsp,0x20
  00476:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  0047a: 00 	movq   xmm5,QWORD PTR [rip+0x14f6]        # 0x1978
  00482: 99 	movabs rax,0xff1999999999999a
  0048c:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
:00024 condnotbr _%3 =>:00036
  00490:    	mov    rdi,QWORD PTR [r14-0x48]
  00494: 00 	test   rdi,0x1
  0049b:    	jne    0x332e3
  004a1: 00 	test   rdi,0x2
  004a8:    	je     0x4e4
  004ae:    	xorps  xmm6,xmm6
  004b1: 00 	movabs rax,0x8000000000000002
  004bb:    	cmp    rdi,rax
  004be:    	je     0x4f6
  004c4:    	mov    rax,rdi
  004c7:    	sar    rax,0x3f
  004cb:    	add    rax,0x2
  004cf:    	and    rdi,0xfffffffffffffffc
  004d3:    	or     rdi,rax
  004d6:    	rol    rdi,0x3d
  004da:    	movq   xmm6,rdi
  004df:    	jmp    0x4f6
  004e4:    	call   0xfffedbb5
  004e9:    	test   rax,rax
  004ec:    	je     0x332e3
  004f2:    	movq   xmm6,xmm0
  004f6:    	ucomisd xmm6,xmm5
  004fa:    	jae    0x333f3
:00025 %3 = %2.call x()                     [Vec]
  00500:    	mov    rdi,QWORD PTR [r14-0x40]
  00504: 00 	test   rdi,0x7
  0050b:    	jne    0x332f2
  00511:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00515:    	jne    0x332f2
  0051b: 26 	cmp    DWORD PTR [rip+0xffffffffffff18d1],0x26        # 0xffff1df3
  00522:    	jne    0x332f2
  00528:    	mov    esi,DWORD PTR [rip+0x1456]        # 0x1984
  0052e:    	cmp    esi,0xffffffff
  00531:    	je     0x33301
  00537:    	cmp    WORD PTR [rdi+0x2],0x3
  0053c:    	jne    0x555
  00542:    	cmp    esi,0x6
  00545:    	jge    0x555
  0054b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00550:    	jmp    0x597
  00555:    	sub    rsp,0x20
  00559:    	movq   QWORD PTR [rsp],xmm2
  0055e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00564:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00570: 95 	movabs rax,0x55955d9e0e20
  0057a:    	call   rax
  0057c:    	movq   xmm2,QWORD PTR [rsp]
  00581:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00587:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0058d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00593:    	add    rsp,0x20
  00597:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  0059b: 00 	movq   xmm5,QWORD PTR [rip+0x13e5]        # 0x1988
  005a3: 99 	movabs rax,0xff1999999999999e
  005ad:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
:00029 condnotbr _%3 =>:00036
  005b1:    	mov    rdi,QWORD PTR [r14-0x48]
  005b5: 00 	test   rdi,0x1
  005bc:    	jne    0x33360
  005c2: 00 	test   rdi,0x2
  005c9:    	je     0x605
  005cf:    	xorps  xmm6,xmm6
  005d2: 00 	movabs rax,0x8000000000000002
  005dc:    	cmp    rdi,rax
  005df:    	je     0x617
  005e5:    	mov    rax,rdi
  005e8:    	sar    rax,0x3f
  005ec:    	add    rax,0x2
  005f0:    	and    rdi,0xfffffffffffffffc
  005f4:    	or     rdi,rax
  005f7:    	rol    rdi,0x3d
  005fb:    	movq   xmm6,rdi
  00600:    	jmp    0x617
  00605:    	call   0xfffedbb5
  0060a:    	test   rax,rax
  0060d:    	je     0x33360
  00613:    	movq   xmm6,xmm0
  00617:    	ucomisd xmm6,xmm5
  0061b:    	jbe    0x3340c
:00030 %3 = 1: i32
  00621: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  00629:    	mov    rdi,QWORD PTR [r14-0x38]
  0062d:    	mov    rsi,QWORD PTR [r14-0x48]
  00631: 00 	test   rdi,0x7
  00638:    	jne    0x3336f
  0063e:    	cmp    DWORD PTR [rdi+0x4],0xb
  00642:    	jne    0x3336f
  00648: 00 	test   rsi,0x1
  0064f:    	je     0x3336f
  00655:    	sar    rsi,1
  00658:    	sub    rsp,0x20
  0065c:    	movq   QWORD PTR [rsp],xmm2
  00661:    	movq   QWORD PTR [rsp+0x8],xmm3
  00667:    	movq   QWORD PTR [rsp+0x10],xmm4
  0066d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00673: 95 	movabs rax,0x55955d9acd00
  0067d:    	call   rax
  0067f:    	movq   xmm2,QWORD PTR [rsp]
  00684:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00690:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00696:    	add    rsp,0x20
  0069a: 95 	movabs r13,0x55955e1825e0
  006a4:    	test   rax,rax
  006a7:    	je     0xfffedb5c
  006ad:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006b1: 00 	movq   xmm5,QWORD PTR [rip+0x12df]        # 0x1998
  006b9: 00 	movabs rax,0xff80000000000002
  006c3:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006c7:    	mov    rdi,QWORD PTR [r14-0x48]
  006cb: 00 	test   rdi,0x7
  006d2:    	jne    0x3337e
  006d8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  006dc:    	jne    0x3337e
  006e2: 26 	cmp    DWORD PTR [rip+0xffffffffffff170a],0x26        # 0xffff1df3
  006e9:    	jne    0x3337e
  006ef:    	mov    esi,DWORD PTR [rip+0x12af]        # 0x19a4
  006f5:    	cmp    esi,0xffffffff
  006f8:    	je     0x3338d
  006fe:    	cmp    WORD PTR [rdi+0x2],0x3
  00703:    	jne    0x720
  00709:    	cmp    esi,0x6
  0070c:    	jge    0x720
  00712:    	mov    rax,QWORD PTR [r14-0x50]
  00716:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0071b:    	jmp    0x779
  00720:    	sub    rsp,0x20
  00724:    	movq   QWORD PTR [rsp],xmm2
  00729:    	movq   QWORD PTR [rsp+0x8],xmm3
  0072f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00735:    	movq   QWORD PTR [rsp+0x18],xmm5
  0073b:    	mov    rdx,QWORD PTR [r14-0x50]
  0073f: 95 	movabs rax,0x55955d9e10a0
  00749:    	call   rax
  0074b:    	movq   xmm2,QWORD PTR [rsp]
  00750:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00756:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0075c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00762:    	add    rsp,0x20
  00766: 95 	movabs r13,0x55955e182610
  00770:    	test   rax,rax
  00773:    	je     0xfffedb5c
:00034 
:00035 br =>:00073
  00779:    	jmp    0x338be
:00036 %3 = %2.call y()                     [<INVALID>]
  0077e: 00 	cmp    DWORD PTR [rip+0x1223],0x0        # 0x19a8
  00785:    	jl     0x33425
  0078b:    	je     0x33434
  00791: 01 	sub    DWORD PTR [rip+0x1210],0x1        # 0x19a8
  00798:    	xor    rdi,rdi
  0079b:    	jmp    0x33425
  007a0:    	sub    rsp,0x20
  007a4:    	movq   QWORD PTR [rsp],xmm2
  007a9:    	movq   QWORD PTR [rsp+0x8],xmm3
  007af:    	movq   QWORD PTR [rsp+0x10],xmm4
  007b5:    	movq   QWORD PTR [rsp+0x18],xmm5
  007bb:    	mov    rdi,QWORD PTR [r14-0x40]
  007bf: 95 	movabs rax,0x55955d949d50
  007c9:    	call   rax
  007cb:    	mov    r15d,eax
  007ce: 95 	movabs r13,0x55955e182630
  007d8:    	cmp    QWORD PTR [r13+0x8],0x0
  007dd:    	je     0x33450
  007e3:    	cmp    r15d,DWORD PTR [r13-0x8]
  007e7:    	jne    0x33450
  007ed:    	mov    eax,DWORD PTR [rip+0xffffffffffff1600]        # 0xffff1df3
  007f3:    	cmp    DWORD PTR [r13-0x4],eax
  007f7:    	jne    0x33450
  007fd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00806:    	mov    rax,QWORD PTR [r14-0x40]
  0080a:    	mov    QWORD PTR [rsp-0x40],rax
  0080f: 00 	mov    rdi,0x0
  00816: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0081f:    	mov    r13,QWORD PTR [r13+0x8]
  00823:    	mov    rax,QWORD PTR [r13+0x8]
  00827:    	mov    QWORD PTR [rsp-0x30],rax
  0082c:    	mov    rax,QWORD PTR [r13+0x0]
  00830:    	mov    r13,QWORD PTR [r13+0x10]
  00834:    	mov    rsi,QWORD PTR [rbx]
  00837:    	mov    QWORD PTR [rsp-0x18],rsi
  0083c:    	lea    rsi,[rsp-0x18]
  00841:    	mov    QWORD PTR [rbx],rsi
  00844:    	lea    r14,[rsp-0x10]
  00849:    	mov    QWORD PTR [rsp-0x20],r14
  0084e:    	call   rax
  00850:    	lea    r14,[rbp-0x8]
  00854:    	mov    QWORD PTR [rbx],r14
  00857:    	mov    r14,QWORD PTR [rbp-0x10]
  0085b:    	movq   xmm2,QWORD PTR [rsp]
  00860:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00866:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0086c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00872:    	add    rsp,0x20
  00876:    	test   rax,rax
  00879:    	je     0x33491
  0087f:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  00883: 00 	movq   xmm5,QWORD PTR [rip+0x112d]        # 0x19b8
  0088b: 99 	movabs rax,0xff1999999999999a
  00895:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00040 condnotbr _%3 =>:00052
  00899:    	mov    rdi,QWORD PTR [r14-0x48]
  0089d:    	mov    rsi,QWORD PTR [r14-0x50]
  008a1: 00 	test   rdi,0x1
  008a8:    	je     0x334a0
  008ae: 00 	test   rsi,0x1
  008b5:    	je     0x334a0
  008bb:    	cmp    rdi,rsi
  008be:    	jge    0x33602
:00041 %3 = %2.call y()                     [<INVALID>]
  008c4:    	sub    rsp,0x20
  008c8:    	movq   QWORD PTR [rsp],xmm2
  008cd:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d3:    	movq   QWORD PTR [rsp+0x10],xmm4
  008d9:    	movq   QWORD PTR [rsp+0x18],xmm5
  008df:    	mov    rdi,QWORD PTR [r14-0x40]
  008e3: 95 	movabs rax,0x55955d949d50
  008ed:    	call   rax
  008ef:    	mov    r15d,eax
  008f2: 95 	movabs r13,0x55955e182680
  008fc:    	cmp    QWORD PTR [r13+0x8],0x0
  00901:    	je     0x33501
  00907:    	cmp    r15d,DWORD PTR [r13-0x8]
  0090b:    	jne    0x33501
  00911:    	mov    eax,DWORD PTR [rip+0xffffffffffff14dc]        # 0xffff1df3
  00917:    	cmp    DWORD PTR [r13-0x4],eax
  0091b:    	jne    0x33501
  00921: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0092a:    	mov    rax,QWORD PTR [r14-0x40]
  0092e:    	mov    QWORD PTR [rsp-0x40],rax
  00933: 00 	mov    rdi,0x0
  0093a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00943:    	mov    r13,QWORD PTR [r13+0x8]
  00947:    	mov    rax,QWORD PTR [r13+0x8]
  0094b:    	mov    QWORD PTR [rsp-0x30],rax
  00950:    	mov    rax,QWORD PTR [r13+0x0]
  00954:    	mov    r13,QWORD PTR [r13+0x10]
  00958:    	mov    rsi,QWORD PTR [rbx]
  0095b:    	mov    QWORD PTR [rsp-0x18],rsi
  00960:    	lea    rsi,[rsp-0x18]
  00965:    	mov    QWORD PTR [rbx],rsi
  00968:    	lea    r14,[rsp-0x10]
  0096d:    	mov    QWORD PTR [rsp-0x20],r14
  00972:    	call   rax
  00974:    	lea    r14,[rbp-0x8]
  00978:    	mov    QWORD PTR [rbx],r14
  0097b:    	mov    r14,QWORD PTR [rbp-0x10]
  0097f:    	movq   xmm2,QWORD PTR [rsp]
  00984:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0098a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00990:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00996:    	add    rsp,0x20
  0099a:    	test   rax,rax
  0099d:    	je     0x33542
  009a3:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  009a7: 00 	movq   xmm5,QWORD PTR [rip+0x1019]        # 0x19c8
  009af: 99 	movabs rax,0xff1999999999999e
  009b9:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00045 condnotbr _%3 =>:00052
  009bd:    	mov    rdi,QWORD PTR [r14-0x48]
  009c1:    	mov    rsi,QWORD PTR [r14-0x50]
  009c5: 00 	test   rdi,0x1
  009cc:    	je     0x33551
  009d2: 00 	test   rsi,0x1
  009d9:    	je     0x33551
  009df:    	cmp    rdi,rsi
  009e2:    	jle    0x3361b
:00046 %3 = 1: i32
  009e8: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009f0:    	sub    rsp,0x20
  009f4:    	movq   QWORD PTR [rsp],xmm2
  009f9:    	movq   QWORD PTR [rsp+0x8],xmm3
  009ff:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a05:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a0b:    	mov    rdi,rbx
  00a0e:    	mov    rsi,r12
  00a11:    	mov    rdx,QWORD PTR [r14-0x38]
  00a15:    	mov    rcx,QWORD PTR [r14-0x48]
  00a19: 95 	movabs r8,0x55955e1826d8
  00a23: 95 	movabs rax,0x55955d9acbd0
  00a2d:    	call   rax
  00a2f:    	movq   xmm2,QWORD PTR [rsp]
  00a34:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a3a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a40:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a46:    	add    rsp,0x20
  00a4a: 95 	movabs r13,0x55955e1826e0
  00a54:    	test   rax,rax
  00a57:    	je     0xfffedb5c
  00a5d:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a61: 00 	movq   xmm5,QWORD PTR [rip+0xf6f]        # 0x19d8
  00a69: 00 	movabs rax,0xff80000000000002
  00a73:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a77:    	sub    rsp,0x20
  00a7b:    	movq   QWORD PTR [rsp],xmm2
  00a80:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a86:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a8c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a92:    	mov    rdi,QWORD PTR [r14-0x48]
  00a96: 95 	movabs rax,0x55955d949d50
  00aa0:    	call   rax
  00aa2:    	mov    r15d,eax
  00aa5: 95 	movabs r13,0x55955e182700
  00aaf:    	cmp    QWORD PTR [r13+0x8],0x0
  00ab4:    	je     0x335b2
  00aba:    	cmp    r15d,DWORD PTR [r13-0x8]
  00abe:    	jne    0x335b2
  00ac4:    	mov    eax,DWORD PTR [rip+0xffffffffffff1329]        # 0xffff1df3
  00aca:    	cmp    DWORD PTR [r13-0x4],eax
  00ace:    	jne    0x335b2
  00ad4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00add:    	mov    rax,QWORD PTR [r14-0x48]
  00ae1:    	mov    QWORD PTR [rsp-0x40],rax
  00ae6: 00 	mov    rdi,0x1
  00aed:    	mov    rax,QWORD PTR [r14-0x50]
  00af1:    	mov    QWORD PTR [rsp-0x48],rax
  00af6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00aff:    	mov    r13,QWORD PTR [r13+0x8]
  00b03:    	mov    rax,QWORD PTR [r13+0x8]
  00b07:    	mov    QWORD PTR [rsp-0x30],rax
  00b0c:    	mov    rax,QWORD PTR [r13+0x0]
  00b10:    	mov    r13,QWORD PTR [r13+0x10]
  00b14:    	mov    rsi,QWORD PTR [rbx]
  00b17:    	mov    QWORD PTR [rsp-0x18],rsi
  00b1c:    	lea    rsi,[rsp-0x18]
  00b21:    	mov    QWORD PTR [rbx],rsi
  00b24:    	lea    r14,[rsp-0x10]
  00b29:    	mov    QWORD PTR [rsp-0x20],r14
  00b2e:    	call   rax
  00b30:    	lea    r14,[rbp-0x8]
  00b34:    	mov    QWORD PTR [rbx],r14
  00b37:    	mov    r14,QWORD PTR [rbp-0x10]
  00b3b:    	movq   xmm2,QWORD PTR [rsp]
  00b40:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b46:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b4c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b52:    	add    rsp,0x20
  00b56:    	test   rax,rax
  00b59:    	je     0x335f3
:00050 
:00051 br =>:00073
  00b5f:    	jmp    0x338d7
:00052 %3 = %2.call z()                     [<INVALID>]
  00b64: 00 	cmp    DWORD PTR [rip+0xe75],0x0        # 0x19e0
  00b6b:    	jl     0x33634
  00b71:    	je     0x33643
  00b77: 01 	sub    DWORD PTR [rip+0xe62],0x1        # 0x19e0
  00b7e:    	xor    rdi,rdi
  00b81:    	jmp    0x33634
  00b86:    	sub    rsp,0x20
  00b8a:    	movq   QWORD PTR [rsp],xmm2
  00b8f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b95:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b9b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ba1:    	mov    rdi,QWORD PTR [r14-0x40]
  00ba5: 95 	movabs rax,0x55955d949d50
  00baf:    	call   rax
  00bb1:    	mov    r15d,eax
  00bb4: 95 	movabs r13,0x55955e182730
  00bbe:    	cmp    QWORD PTR [r13+0x8],0x0
  00bc3:    	je     0x3365f
  00bc9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00bcd:    	jne    0x3365f
  00bd3:    	mov    eax,DWORD PTR [rip+0xffffffffffff121a]        # 0xffff1df3
  00bd9:    	cmp    DWORD PTR [r13-0x4],eax
  00bdd:    	jne    0x3365f
  00be3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00bec:    	mov    rax,QWORD PTR [r14-0x40]
  00bf0:    	mov    QWORD PTR [rsp-0x40],rax
  00bf5: 00 	mov    rdi,0x0
  00bfc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c05:    	mov    r13,QWORD PTR [r13+0x8]
  00c09:    	mov    rax,QWORD PTR [r13+0x8]
  00c0d:    	mov    QWORD PTR [rsp-0x30],rax
  00c12:    	mov    rax,QWORD PTR [r13+0x0]
  00c16:    	mov    r13,QWORD PTR [r13+0x10]
  00c1a:    	mov    rsi,QWORD PTR [rbx]
  00c1d:    	mov    QWORD PTR [rsp-0x18],rsi
  00c22:    	lea    rsi,[rsp-0x18]
  00c27:    	mov    QWORD PTR [rbx],rsi
  00c2a:    	lea    r14,[rsp-0x10]
  00c2f:    	mov    QWORD PTR [rsp-0x20],r14
  00c34:    	call   rax
  00c36:    	lea    r14,[rbp-0x8]
  00c3a:    	mov    QWORD PTR [rbx],r14
  00c3d:    	mov    r14,QWORD PTR [rbp-0x10]
  00c41:    	movq   xmm2,QWORD PTR [rsp]
  00c46:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c4c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c52:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c58:    	add    rsp,0x20
  00c5c:    	test   rax,rax
  00c5f:    	je     0x336a0
  00c65:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00c69: 00 	movq   xmm5,QWORD PTR [rip+0xd77]        # 0x19e8
  00c71: 99 	movabs rax,0xff1999999999999a
  00c7b:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00056 condnotbr _%3 =>:00068
  00c7f:    	mov    rdi,QWORD PTR [r14-0x48]
  00c83:    	mov    rsi,QWORD PTR [r14-0x50]
  00c87: 00 	test   rdi,0x1
  00c8e:    	je     0x336af
  00c94: 00 	test   rsi,0x1
  00c9b:    	je     0x336af
  00ca1:    	cmp    rdi,rsi
  00ca4:    	jge    0x33811
:00057 %3 = %2.call z()                     [<INVALID>]
  00caa:    	sub    rsp,0x20
  00cae:    	movq   QWORD PTR [rsp],xmm2
  00cb3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cbf:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc5:    	mov    rdi,QWORD PTR [r14-0x40]
  00cc9: 95 	movabs rax,0x55955d949d50
  00cd3:    	call   rax
  00cd5:    	mov    r15d,eax
  00cd8: 95 	movabs r13,0x55955e182780
  00ce2:    	cmp    QWORD PTR [r13+0x8],0x0
  00ce7:    	je     0x33710
  00ced:    	cmp    r15d,DWORD PTR [r13-0x8]
  00cf1:    	jne    0x33710
  00cf7:    	mov    eax,DWORD PTR [rip+0xffffffffffff10f6]        # 0xffff1df3
  00cfd:    	cmp    DWORD PTR [r13-0x4],eax
  00d01:    	jne    0x33710
  00d07: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d10:    	mov    rax,QWORD PTR [r14-0x40]
  00d14:    	mov    QWORD PTR [rsp-0x40],rax
  00d19: 00 	mov    rdi,0x0
  00d20: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d29:    	mov    r13,QWORD PTR [r13+0x8]
  00d2d:    	mov    rax,QWORD PTR [r13+0x8]
  00d31:    	mov    QWORD PTR [rsp-0x30],rax
  00d36:    	mov    rax,QWORD PTR [r13+0x0]
  00d3a:    	mov    r13,QWORD PTR [r13+0x10]
  00d3e:    	mov    rsi,QWORD PTR [rbx]
  00d41:    	mov    QWORD PTR [rsp-0x18],rsi
  00d46:    	lea    rsi,[rsp-0x18]
  00d4b:    	mov    QWORD PTR [rbx],rsi
  00d4e:    	lea    r14,[rsp-0x10]
  00d53:    	mov    QWORD PTR [rsp-0x20],r14
  00d58:    	call   rax
  00d5a:    	lea    r14,[rbp-0x8]
  00d5e:    	mov    QWORD PTR [rbx],r14
  00d61:    	mov    r14,QWORD PTR [rbp-0x10]
  00d65:    	movq   xmm2,QWORD PTR [rsp]
  00d6a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d70:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d76:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d7c:    	add    rsp,0x20
  00d80:    	test   rax,rax
  00d83:    	je     0x33751
  00d89:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00d8d: 00 	movq   xmm5,QWORD PTR [rip+0xc63]        # 0x19f8
  00d95: 99 	movabs rax,0xff1999999999999e
  00d9f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00061 condnotbr _%3 =>:00068
  00da3:    	mov    rdi,QWORD PTR [r14-0x48]
  00da7:    	mov    rsi,QWORD PTR [r14-0x50]
  00dab: 00 	test   rdi,0x1
  00db2:    	je     0x33760
  00db8: 00 	test   rsi,0x1
  00dbf:    	je     0x33760
  00dc5:    	cmp    rdi,rsi
  00dc8:    	jle    0x3382a
:00062 %3 = 1: i32
  00dce: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00dd6:    	sub    rsp,0x20
  00dda:    	movq   QWORD PTR [rsp],xmm2
  00ddf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00deb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00df1:    	mov    rdi,rbx
  00df4:    	mov    rsi,r12
  00df7:    	mov    rdx,QWORD PTR [r14-0x38]
  00dfb:    	mov    rcx,QWORD PTR [r14-0x48]
  00dff: 95 	movabs r8,0x55955e1827d8
  00e09: 95 	movabs rax,0x55955d9acbd0
  00e13:    	call   rax
  00e15:    	movq   xmm2,QWORD PTR [rsp]
  00e1a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e20:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e26:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e2c:    	add    rsp,0x20
  00e30: 95 	movabs r13,0x55955e1827e0
  00e3a:    	test   rax,rax
  00e3d:    	je     0xfffedb5c
  00e43:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00e47: 00 	movq   xmm5,QWORD PTR [rip+0xbb9]        # 0x1a08
  00e4f: 00 	movabs rax,0xff80000000000002
  00e59:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [<INVALID>]
  00e5d:    	sub    rsp,0x20
  00e61:    	movq   QWORD PTR [rsp],xmm2
  00e66:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e6c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e72:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e78:    	mov    rdi,QWORD PTR [r14-0x48]
  00e7c: 95 	movabs rax,0x55955d949d50
  00e86:    	call   rax
  00e88:    	mov    r15d,eax
  00e8b: 95 	movabs r13,0x55955e182800
  00e95:    	cmp    QWORD PTR [r13+0x8],0x0
  00e9a:    	je     0x337c1
  00ea0:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ea4:    	jne    0x337c1
  00eaa:    	mov    eax,DWORD PTR [rip+0xffffffffffff0f43]        # 0xffff1df3
  00eb0:    	cmp    DWORD PTR [r13-0x4],eax
  00eb4:    	jne    0x337c1
  00eba: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ec3:    	mov    rax,QWORD PTR [r14-0x48]
  00ec7:    	mov    QWORD PTR [rsp-0x40],rax
  00ecc: 00 	mov    rdi,0x1
  00ed3:    	mov    rax,QWORD PTR [r14-0x50]
  00ed7:    	mov    QWORD PTR [rsp-0x48],rax
  00edc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ee5:    	mov    r13,QWORD PTR [r13+0x8]
  00ee9:    	mov    rax,QWORD PTR [r13+0x8]
  00eed:    	mov    QWORD PTR [rsp-0x30],rax
  00ef2:    	mov    rax,QWORD PTR [r13+0x0]
  00ef6:    	mov    r13,QWORD PTR [r13+0x10]
  00efa:    	mov    rsi,QWORD PTR [rbx]
  00efd:    	mov    QWORD PTR [rsp-0x18],rsi
  00f02:    	lea    rsi,[rsp-0x18]
  00f07:    	mov    QWORD PTR [rbx],rsi
  00f0a:    	lea    r14,[rsp-0x10]
  00f0f:    	mov    QWORD PTR [rsp-0x20],r14
  00f14:    	call   rax
  00f16:    	lea    r14,[rbp-0x8]
  00f1a:    	mov    QWORD PTR [rbx],r14
  00f1d:    	mov    r14,QWORD PTR [rbp-0x10]
  00f21:    	movq   xmm2,QWORD PTR [rsp]
  00f26:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f2c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f32:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f38:    	add    rsp,0x20
  00f3c:    	test   rax,rax
  00f3f:    	je     0x33802
:00066 
:00067 br =>:00073
  00f45:    	jmp    0x338f0
:00068 %3 = 1: i32
  00f4a: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f52:    	sub    rsp,0x20
  00f56:    	movq   QWORD PTR [rsp],xmm2
  00f5b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f61:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f67:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f6d:    	mov    rdi,rbx
  00f70:    	mov    rsi,r12
  00f73:    	mov    rdx,QWORD PTR [r14-0x38]
  00f77:    	mov    rcx,QWORD PTR [r14-0x48]
  00f7b: 95 	movabs r8,0x55955e182838
  00f85: 95 	movabs rax,0x55955d9acbd0
  00f8f:    	call   rax
  00f91:    	movq   xmm2,QWORD PTR [rsp]
  00f96:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f9c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fa2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fa8:    	add    rsp,0x20
  00fac: 95 	movabs r13,0x55955e182840
  00fb6:    	test   rax,rax
  00fb9:    	je     0xfffedb5c
  00fbf:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00fc3: 00 	movq   xmm5,QWORD PTR [rip+0xa4d]        # 0x1a18
  00fcb: 00 	movabs rax,0xff80000000000002
  00fd5:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fd9: 00 	cmp    DWORD PTR [rip+0xa40],0x0        # 0x1a20
  00fe0:    	jl     0x33843
  00fe6:    	je     0x33852
  00fec: 01 	sub    DWORD PTR [rip+0xa2d],0x1        # 0x1a20
  00ff3:    	xor    rdi,rdi
  00ff6:    	jmp    0x33843
  00ffb:    	sub    rsp,0x20
  00fff:    	movq   QWORD PTR [rsp],xmm2
  01004:    	movq   QWORD PTR [rsp+0x8],xmm3
  0100a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01010:    	movq   QWORD PTR [rsp+0x18],xmm5
  01016:    	mov    rdi,QWORD PTR [r14-0x48]
  0101a: 95 	movabs rax,0x55955d949d50
  01024:    	call   rax
  01026:    	mov    r15d,eax
  01029: 95 	movabs r13,0x55955e182860
  01033:    	cmp    QWORD PTR [r13+0x8],0x0
  01038:    	je     0x3386e
  0103e:    	cmp    r15d,DWORD PTR [r13-0x8]
  01042:    	jne    0x3386e
  01048:    	mov    eax,DWORD PTR [rip+0xffffffffffff0da5]        # 0xffff1df3
  0104e:    	cmp    DWORD PTR [r13-0x4],eax
  01052:    	jne    0x3386e
  01058: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01061:    	mov    rax,QWORD PTR [r14-0x48]
  01065:    	mov    QWORD PTR [rsp-0x40],rax
  0106a: 00 	mov    rdi,0x1
  01071:    	mov    rax,QWORD PTR [r14-0x50]
  01075:    	mov    QWORD PTR [rsp-0x48],rax
  0107a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01083:    	mov    r13,QWORD PTR [r13+0x8]
  01087:    	mov    rax,QWORD PTR [r13+0x8]
  0108b:    	mov    QWORD PTR [rsp-0x30],rax
  01090:    	mov    rax,QWORD PTR [r13+0x0]
  01094:    	mov    r13,QWORD PTR [r13+0x10]
  01098:    	mov    rsi,QWORD PTR [rbx]
  0109b:    	mov    QWORD PTR [rsp-0x18],rsi
  010a0:    	lea    rsi,[rsp-0x18]
  010a5:    	mov    QWORD PTR [rbx],rsi
  010a8:    	lea    r14,[rsp-0x10]
  010ad:    	mov    QWORD PTR [rsp-0x20],r14
  010b2:    	call   rax
  010b4:    	lea    r14,[rbp-0x8]
  010b8:    	mov    QWORD PTR [rbx],r14
  010bb:    	mov    r14,QWORD PTR [rbp-0x10]
  010bf:    	movq   xmm2,QWORD PTR [rsp]
  010c4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010ca:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010d0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010d6:    	add    rsp,0x20
  010da:    	test   rax,rax
  010dd:    	je     0x338af
:00072 
  010e3:    	jmp    0x33909
:00073 %3 = 0: i32
  010e8: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  010f0: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  010f8:    	mov    rdi,QWORD PTR [r14-0x38]
  010fc:    	mov    rsi,QWORD PTR [r14-0x50]
  01100: 00 	test   rdi,0x7
  01107:    	jne    0x33922
  0110d:    	cmp    DWORD PTR [rdi+0x4],0xb
  01111:    	jne    0x33922
  01117: 00 	test   rsi,0x1
  0111e:    	je     0x33922
  01124:    	sar    rsi,1
  01127:    	sub    rsp,0x20
  0112b:    	movq   QWORD PTR [rsp],xmm2
  01130:    	movq   QWORD PTR [rsp+0x8],xmm3
  01136:    	movq   QWORD PTR [rsp+0x10],xmm4
  0113c: 95 	movabs rax,0x55955d9acd00
  01146:    	call   rax
  01148:    	movq   xmm2,QWORD PTR [rsp]
  0114d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01153:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01159:    	add    rsp,0x20
  0115d: 95 	movabs r13,0x55955e1828a0
  01167:    	test   rax,rax
  0116a:    	je     0xfffedb5c
  01170:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  01174: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  0117c:    	mov    rdi,QWORD PTR [r14-0x38]
  01180:    	mov    rsi,QWORD PTR [r14-0x58]
  01184: 00 	test   rdi,0x7
  0118b:    	jne    0x33931
  01191:    	cmp    DWORD PTR [rdi+0x4],0xb
  01195:    	jne    0x33931
  0119b: 00 	test   rsi,0x1
  011a2:    	je     0x33931
  011a8:    	sar    rsi,1
  011ab:    	sub    rsp,0x10
  011af:    	movq   QWORD PTR [rsp],xmm3
  011b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  011ba: 95 	movabs rax,0x55955d9acd00
  011c4:    	call   rax
  011c6:    	movq   xmm3,QWORD PTR [rsp]
  011cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011d1:    	add    rsp,0x10
  011d5: 95 	movabs r13,0x55955e1828c0
  011df:    	test   rax,rax
  011e2:    	je     0xfffedb5c
  011e8:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  011ec:    	mov    rdi,QWORD PTR [r14-0x50]
  011f0: 00 	test   rdi,0x7
  011f7:    	jne    0x33940
  011fd:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01201:    	jne    0x33940
  01207: 26 	cmp    DWORD PTR [rip+0xffffffffffff0be5],0x26        # 0xffff1df3
  0120e:    	jne    0x33940
  01214:    	sub    rsp,0x10
  01218:    	movq   QWORD PTR [rsp],xmm3
  0121d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01223: 00 	cmp    DWORD PTR [rip+0xffffffffffff0bcd],0x0        # 0xffff1df7
  0122a:    	je     0x1242
  01230:    	mov    rdi,r12
  01233:    	mov    rsi,QWORD PTR [rbx]
  01236: 95 	movabs rax,0x55955d9a3d50
  01240:    	call   rax
  01242: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0124b:    	mov    rax,QWORD PTR [r14-0x50]
  0124f:    	mov    QWORD PTR [rsp-0x40],rax
  01254: 00 	mov    rdi,0x1
  0125b:    	mov    rax,QWORD PTR [r14-0x58]
  0125f:    	mov    QWORD PTR [rsp-0x48],rax
  01264: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0126d: 08 	movabs rax,0x100080000005c
  01277:    	mov    QWORD PTR [rsp-0x30],rax
  0127c: 95 	movabs r13,0x55955e137470
  01286:    	mov    rsi,QWORD PTR [rbx]
  01289:    	mov    QWORD PTR [rsp-0x18],rsi
  0128e:    	lea    rsi,[rsp-0x18]
  01293:    	mov    QWORD PTR [rbx],rsi
  01296:    	lea    r14,[rsp-0x10]
  0129b:    	mov    QWORD PTR [rsp-0x20],r14
  012a0:    	call   0xffffa78f
  012a5:    	lea    r14,[rbp-0x8]
  012a9:    	mov    QWORD PTR [rbx],r14
  012ac:    	mov    r14,QWORD PTR [rbp-0x10]
  012b0:    	movq   xmm3,QWORD PTR [rsp]
  012b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012bb:    	add    rsp,0x10
  012bf: 95 	movabs r13,0x55955e1828e0
  012c9:    	test   rax,rax
  012cc:    	je     0xfffedb5c
  012d2:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  012d6:    	sub    rsp,0x10
  012da:    	movq   QWORD PTR [rsp],xmm3
  012df:    	movq   QWORD PTR [rsp+0x8],xmm4
  012e5:    	mov    rdx,QWORD PTR [r14-0x38]
  012e9:    	mov    rcx,QWORD PTR [r14-0x48]
  012ed:    	mov    r8,QWORD PTR [r14-0x50]
  012f1:    	mov    rdi,rbx
  012f4:    	mov    rsi,r12
  012f7: 95 	movabs r9,0x55955e1828e8
  01301: 95 	movabs rax,0x55955d9acd80
  0130b:    	call   rax
  0130d:    	movq   xmm3,QWORD PTR [rsp]
  01312:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01318:    	add    rsp,0x10
  0131c: 95 	movabs r13,0x55955e1828f0
  01326:    	test   rax,rax
  01329:    	je     0xfffedb5c
:00081 %3 = 0: i32
  0132f: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  01337: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  0133f:    	mov    rdi,QWORD PTR [r14-0x38]
  01343:    	mov    rsi,QWORD PTR [r14-0x50]
  01347: 00 	test   rdi,0x7
  0134e:    	jne    0x3394f
  01354:    	cmp    DWORD PTR [rdi+0x4],0xb
  01358:    	jne    0x3394f
  0135e: 00 	test   rsi,0x1
  01365:    	je     0x3394f
  0136b:    	sar    rsi,1
  0136e:    	sub    rsp,0x10
  01372:    	movq   QWORD PTR [rsp],xmm3
  01377:    	movq   QWORD PTR [rsp+0x8],xmm4
  0137d: 95 	movabs rax,0x55955d9acd00
  01387:    	call   rax
  01389:    	movq   xmm3,QWORD PTR [rsp]
  0138e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01394:    	add    rsp,0x10
  01398: 95 	movabs r13,0x55955e182920
  013a2:    	test   rax,rax
  013a5:    	je     0xfffedb5c
  013ab:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  013af:    	mov    rdi,QWORD PTR [r14-0x50]
  013b3: 00 	test   rdi,0x7
  013ba:    	jne    0x3395e
  013c0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  013c4:    	jne    0x3395e
  013ca: 26 	cmp    DWORD PTR [rip+0xffffffffffff0a22],0x26        # 0xffff1df3
  013d1:    	jne    0x3395e
  013d7:    	sub    rsp,0x10
  013db:    	movq   QWORD PTR [rsp],xmm3
  013e0:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e6: 00 	cmp    DWORD PTR [rip+0xffffffffffff0a0a],0x0        # 0xffff1df7
  013ed:    	je     0x1405
  013f3:    	mov    rdi,r12
  013f6:    	mov    rsi,QWORD PTR [rbx]
  013f9: 95 	movabs rax,0x55955d9a3d50
  01403:    	call   rax
  01405: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0140e:    	mov    rax,QWORD PTR [r14-0x50]
  01412:    	mov    QWORD PTR [rsp-0x40],rax
  01417: 00 	mov    rdi,0x0
  0141e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01427: 07 	movabs rax,0x100070000005f
  01431:    	mov    QWORD PTR [rsp-0x30],rax
  01436: 95 	movabs r13,0x55955e168310
  01440:    	mov    rsi,QWORD PTR [rbx]
  01443:    	mov    QWORD PTR [rsp-0x18],rsi
  01448:    	lea    rsi,[rsp-0x18]
  0144d:    	mov    QWORD PTR [rbx],rsi
  01450:    	lea    r14,[rsp-0x10]
  01455:    	mov    QWORD PTR [rsp-0x20],r14
  0145a:    	call   0xffff26bb
  0145f:    	lea    r14,[rbp-0x8]
  01463:    	mov    QWORD PTR [rbx],r14
  01466:    	mov    r14,QWORD PTR [rbp-0x10]
  0146a:    	movq   xmm3,QWORD PTR [rsp]
  0146f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01475:    	add    rsp,0x10
  01479: 95 	movabs r13,0x55955e182940
  01483:    	test   rax,rax
  01486:    	je     0xfffedb5c
  0148c:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01490:    	sub    rsp,0x10
  01494:    	movq   QWORD PTR [rsp],xmm3
  01499:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149f:    	mov    rdx,QWORD PTR [r14-0x38]
  014a3:    	mov    rcx,QWORD PTR [r14-0x48]
  014a7:    	mov    r8,QWORD PTR [r14-0x50]
  014ab:    	mov    rdi,rbx
  014ae:    	mov    rsi,r12
  014b1: 95 	movabs r9,0x55955e182948
  014bb: 95 	movabs rax,0x55955d9acd80
  014c5:    	call   rax
  014c7:    	movq   xmm3,QWORD PTR [rsp]
  014cc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014d2:    	add    rsp,0x10
  014d6: 95 	movabs r13,0x55955e182950
  014e0:    	test   rax,rax
  014e3:    	je     0xfffedb5c
:00087 %3 = 1: i32
  014e9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  014f1: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  014f9:    	mov    rdi,QWORD PTR [r14-0x38]
  014fd:    	mov    rsi,QWORD PTR [r14-0x50]
  01501: 00 	test   rdi,0x7
  01508:    	jne    0x3396d
  0150e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01512:    	jne    0x3396d
  01518: 00 	test   rsi,0x1
  0151f:    	je     0x3396d
  01525:    	sar    rsi,1
  01528:    	sub    rsp,0x10
  0152c:    	movq   QWORD PTR [rsp],xmm3
  01531:    	movq   QWORD PTR [rsp+0x8],xmm4
  01537: 95 	movabs rax,0x55955d9acd00
  01541:    	call   rax
  01543:    	movq   xmm3,QWORD PTR [rsp]
  01548:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0154e:    	add    rsp,0x10
  01552: 95 	movabs r13,0x55955e182980
  0155c:    	test   rax,rax
  0155f:    	je     0xfffedb5c
  01565:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01569: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  01571:    	mov    rdi,QWORD PTR [r14-0x38]
  01575:    	mov    rsi,QWORD PTR [r14-0x58]
  01579: 00 	test   rdi,0x7
  01580:    	jne    0x3397c
  01586:    	cmp    DWORD PTR [rdi+0x4],0xb
  0158a:    	jne    0x3397c
  01590: 00 	test   rsi,0x1
  01597:    	je     0x3397c
  0159d:    	sar    rsi,1
  015a0:    	sub    rsp,0x10
  015a4:    	movq   QWORD PTR [rsp],xmm3
  015a9:    	movq   QWORD PTR [rsp+0x8],xmm4
  015af: 95 	movabs rax,0x55955d9acd00
  015b9:    	call   rax
  015bb:    	movq   xmm3,QWORD PTR [rsp]
  015c0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c6:    	add    rsp,0x10
  015ca: 95 	movabs r13,0x55955e1829a0
  015d4:    	test   rax,rax
  015d7:    	je     0xfffedb5c
  015dd:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  015e1:    	mov    rdi,QWORD PTR [r14-0x50]
  015e5: 00 	test   rdi,0x7
  015ec:    	jne    0x3398b
  015f2:    	cmp    DWORD PTR [rdi+0x4],0x2b
  015f6:    	jne    0x3398b
  015fc: 26 	cmp    DWORD PTR [rip+0xffffffffffff07f0],0x26        # 0xffff1df3
  01603:    	jne    0x3398b
  01609:    	sub    rsp,0x10
  0160d:    	movq   QWORD PTR [rsp],xmm3
  01612:    	movq   QWORD PTR [rsp+0x8],xmm4
  01618: 00 	cmp    DWORD PTR [rip+0xffffffffffff07d8],0x0        # 0xffff1df7
  0161f:    	je     0x1637
  01625:    	mov    rdi,r12
  01628:    	mov    rsi,QWORD PTR [rbx]
  0162b: 95 	movabs rax,0x55955d9a3d50
  01635:    	call   rax
  01637: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01640:    	mov    rax,QWORD PTR [r14-0x50]
  01644:    	mov    QWORD PTR [rsp-0x40],rax
  01649: 00 	mov    rdi,0x1
  01650:    	mov    rax,QWORD PTR [r14-0x58]
  01654:    	mov    QWORD PTR [rsp-0x48],rax
  01659: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01662: 08 	movabs rax,0x100080000005c
  0166c:    	mov    QWORD PTR [rsp-0x30],rax
  01671: 95 	movabs r13,0x55955e137470
  0167b:    	mov    rsi,QWORD PTR [rbx]
  0167e:    	mov    QWORD PTR [rsp-0x18],rsi
  01683:    	lea    rsi,[rsp-0x18]
  01688:    	mov    QWORD PTR [rbx],rsi
  0168b:    	lea    r14,[rsp-0x10]
  01690:    	mov    QWORD PTR [rsp-0x20],r14
  01695:    	call   0xffffa78f
  0169a:    	lea    r14,[rbp-0x8]
  0169e:    	mov    QWORD PTR [rbx],r14
  016a1:    	mov    r14,QWORD PTR [rbp-0x10]
  016a5:    	movq   xmm3,QWORD PTR [rsp]
  016aa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016b0:    	add    rsp,0x10
  016b4: 95 	movabs r13,0x55955e1829c0
  016be:    	test   rax,rax
  016c1:    	je     0xfffedb5c
  016c7:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  016cb:    	sub    rsp,0x10
  016cf:    	movq   QWORD PTR [rsp],xmm3
  016d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  016da:    	mov    rdx,QWORD PTR [r14-0x38]
  016de:    	mov    rcx,QWORD PTR [r14-0x48]
  016e2:    	mov    r8,QWORD PTR [r14-0x50]
  016e6:    	mov    rdi,rbx
  016e9:    	mov    rsi,r12
  016ec: 95 	movabs r9,0x55955e1829c8
  016f6: 95 	movabs rax,0x55955d9acd80
  01700:    	call   rax
  01702:    	movq   xmm3,QWORD PTR [rsp]
  01707:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0170d:    	add    rsp,0x10
  01711: 95 	movabs r13,0x55955e1829d0
  0171b:    	test   rax,rax
  0171e:    	je     0xfffedb5c
:00095 %3 = 1: i32
  01724: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  0172c: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  01734:    	mov    rdi,QWORD PTR [r14-0x38]
  01738:    	mov    rsi,QWORD PTR [r14-0x50]
  0173c: 00 	test   rdi,0x7
  01743:    	jne    0x3399a
  01749:    	cmp    DWORD PTR [rdi+0x4],0xb
  0174d:    	jne    0x3399a
  01753: 00 	test   rsi,0x1
  0175a:    	je     0x3399a
  01760:    	sar    rsi,1
  01763:    	sub    rsp,0x10
  01767:    	movq   QWORD PTR [rsp],xmm3
  0176c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01772: 95 	movabs rax,0x55955d9acd00
  0177c:    	call   rax
  0177e:    	movq   xmm3,QWORD PTR [rsp]
  01783:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01789:    	add    rsp,0x10
  0178d: 95 	movabs r13,0x55955e182a00
  01797:    	test   rax,rax
  0179a:    	je     0xfffedb5c
  017a0:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  017a4:    	mov    rdi,QWORD PTR [r14-0x50]
  017a8: 00 	test   rdi,0x7
  017af:    	jne    0x339a9
  017b5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  017b9:    	jne    0x339a9
  017bf: 26 	cmp    DWORD PTR [rip+0xffffffffffff062d],0x26        # 0xffff1df3
  017c6:    	jne    0x339a9
  017cc:    	sub    rsp,0x10
  017d0:    	movq   QWORD PTR [rsp],xmm3
  017d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  017db: 00 	cmp    DWORD PTR [rip+0xffffffffffff0615],0x0        # 0xffff1df7
  017e2:    	je     0x17fa
  017e8:    	mov    rdi,r12
  017eb:    	mov    rsi,QWORD PTR [rbx]
  017ee: 95 	movabs rax,0x55955d9a3d50
  017f8:    	call   rax
  017fa: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01803:    	mov    rax,QWORD PTR [r14-0x50]
  01807:    	mov    QWORD PTR [rsp-0x40],rax
  0180c: 00 	mov    rdi,0x0
  01813: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0181c: 07 	movabs rax,0x100070000005f
  01826:    	mov    QWORD PTR [rsp-0x30],rax
  0182b: 95 	movabs r13,0x55955e168310
  01835:    	mov    rsi,QWORD PTR [rbx]
  01838:    	mov    QWORD PTR [rsp-0x18],rsi
  0183d:    	lea    rsi,[rsp-0x18]
  01842:    	mov    QWORD PTR [rbx],rsi
  01845:    	lea    r14,[rsp-0x10]
  0184a:    	mov    QWORD PTR [rsp-0x20],r14
  0184f:    	call   0xffff26bb
  01854:    	lea    r14,[rbp-0x8]
  01858:    	mov    QWORD PTR [rbx],r14
  0185b:    	mov    r14,QWORD PTR [rbp-0x10]
  0185f:    	movq   xmm3,QWORD PTR [rsp]
  01864:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0186a:    	add    rsp,0x10
  0186e: 95 	movabs r13,0x55955e182a20
  01878:    	test   rax,rax
  0187b:    	je     0xfffedb5c
  01881:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01885:    	sub    rsp,0x10
  01889:    	movq   QWORD PTR [rsp],xmm3
  0188e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01894:    	mov    rdx,QWORD PTR [r14-0x38]
  01898:    	mov    rcx,QWORD PTR [r14-0x48]
  0189c:    	mov    r8,QWORD PTR [r14-0x50]
  018a0:    	mov    rdi,rbx
  018a3:    	mov    rsi,r12
  018a6: 95 	movabs r9,0x55955e182a28
  018b0: 95 	movabs rax,0x55955d9acd80
  018ba:    	call   rax
  018bc:    	movq   xmm3,QWORD PTR [rsp]
  018c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018c7:    	add    rsp,0x10
  018cb: 95 	movabs r13,0x55955e182a30
  018d5:    	test   rax,rax
  018d8:    	je     0xfffedb5c
:00101 %3 = %4
  018de:    	mov    rax,QWORD PTR [r14-0x50]
  018e2:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  018e6:    	mov    rax,QWORD PTR [r14-0x48]
  018ea:    	leave  
  018eb:    	ret    
==> start whole compile: <unnamed> FuncId(110) self_class:Scene start:[00000] bytecode:0x55955e17be90
<== finished compile. elapsed:112.2µs
offset:Pos(81644) code: 6724 bytes  data: 344 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0:    	mov    rdi,QWORD PTR [r14-0x30]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x31fa3
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x35
  000b5:    	jne    0x31fa3
:00000 init_block reg:19 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %1)
  000bb:    	mov    rax,QWORD PTR [r14-0x18]
  000bf:    	mov    rax,QWORD PTR [rax]
  000c2:    	mov    rax,QWORD PTR [rax]
  000c5:    	mov    rax,QWORD PTR [rax]
  000c8:    	mov    rax,QWORD PTR [rax-0x20]
  000cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %2 = %14.call to_f()                 [Integer]
  000d3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000da: 00 	test   rdi,0x1
  000e1:    	je     0x31fb2
  000e7: 26 	cmp    DWORD PTR [rip+0xffffffffffff02e1],0x26        # 0xffff03cf
  000ee:    	jne    0x31fb2
  000f4:    	sar    rdi,1
  000f7:    	cvtsi2sd xmm2,rdi
:00003 
:00004 %14 = dynvar(4, %2)
  000fc:    	mov    rax,QWORD PTR [r14-0x18]
  00100:    	mov    rax,QWORD PTR [rax]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax-0x28]
  0010d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %3 = %14.call to_f()                 [Integer]
  00114: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0011b: 00 	test   rdi,0x1
  00122:    	je     0x31fc1
  00128: 26 	cmp    DWORD PTR [rip+0xffffffffffff02a0],0x26        # 0xffff03cf
  0012f:    	jne    0x31fc1
  00135:    	sar    rdi,1
  00138:    	cvtsi2sd xmm3,rdi
:00006 
:00007 %14 = dynvar(2, %1)
  0013d:    	mov    rax,QWORD PTR [r14-0x18]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax-0x20]
  00148: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 %4 = %14.call to_f()                 [Integer]
  0014f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00156: 00 	test   rdi,0x1
  0015d:    	je     0x31fdd
  00163: 26 	cmp    DWORD PTR [rip+0xffffffffffff0265],0x26        # 0xffff03cf
  0016a:    	jne    0x31fdd
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00009 
:00010 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [r14-0x18]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [r14-0xa0],rax
:00011 %5 = %14.call to_f()                 [Integer]
  0018d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x32006
  001a1: 26 	cmp    DWORD PTR [rip+0xffffffffffff0227],0x26        # 0xffff03cf
  001a8:    	jne    0x32006
  001ae:    	sar    rdi,1
  001b1:    	cvtsi2sd xmm5,rdi
:00012 
:00013 %6 = %1.call to_f()                  [Integer]
  001b6:    	mov    rdi,QWORD PTR [r14-0x38]
  001ba: 00 	test   rdi,0x1
  001c1:    	je     0x3203c
  001c7: 26 	cmp    DWORD PTR [rip+0xffffffffffff0201],0x26        # 0xffff03cf
  001ce:    	jne    0x3203c
  001d4:    	sar    rdi,1
  001d7:    	cvtsi2sd xmm6,rdi
:00014 
:00015 %14 = dynvar(1, %1)
  001dc:    	mov    rax,QWORD PTR [r14-0x18]
  001e0:    	mov    rax,QWORD PTR [rax-0x20]
  001e4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00016 %7 = %14.call to_f()                 [Integer]
  001eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f2: 00 	test   rdi,0x1
  001f9:    	je     0x3207f
  001ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff01c9],0x26        # 0xffff03cf
  00206:    	jne    0x3207f
  0020c:    	sar    rdi,1
  0020f:    	cvtsi2sd xmm7,rdi
:00017 
:00018 %14 = dynvar(4, %4)
  00214:    	mov    rax,QWORD PTR [r14-0x18]
  00218:    	mov    rax,QWORD PTR [rax]
  0021b:    	mov    rax,QWORD PTR [rax]
  0021e:    	mov    rax,QWORD PTR [rax]
  00221:    	mov    rax,QWORD PTR [rax-0x38]
  00225: ff 	mov    QWORD PTR [r14-0xa0],rax
:00019 %14 = %6 / %14                       [Float][Float]
  0022c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00233: 00 	test   rdi,0x1
  0023a:    	jne    0x320cf
  00240: 00 	test   rdi,0x2
  00247:    	je     0x284
  0024d:    	xorps  xmm8,xmm8
  00251: 00 	movabs rax,0x8000000000000002
  0025b:    	cmp    rdi,rax
  0025e:    	je     0x297
  00264:    	mov    rax,rdi
  00267:    	sar    rax,0x3f
  0026b:    	add    rax,0x2
  0026f:    	and    rdi,0xfffffffffffffffc
  00273:    	or     rdi,rax
  00276:    	rol    rdi,0x3d
  0027a:    	movq   xmm8,rdi
  0027f:    	jmp    0x297
  00284:    	call   0xfffec191
  00289:    	test   rax,rax
  0028c:    	je     0x320cf
  00292:    	movq   xmm8,xmm0
  00297:    	movq   rax,xmm8
  0029c:    	test   rax,rax
  0029f:    	je     0xfffec15d
  002a5:    	movq   xmm0,xmm6
  002a9:    	divsd  xmm0,xmm8
  002ae:    	movq   xmm8,xmm0
:00020 %14 = %4 + %14                       [Float][Float]
  002b3:    	addsd  xmm8,xmm4
:00021 %15 = literal[2.0]
  002b8: 17 	movq   xmm9,QWORD PTR [rip+0x1783]        # 0x1a44
  002c1: 00 	mov    rax,0x2
  002c8: ff 	mov    QWORD PTR [r14-0xa8],rax
:00022 %15 = %2 / %15                       [Float][Float]
  002cf:    	movq   rax,xmm9
  002d4:    	test   rax,rax
  002d7:    	je     0xfffec15d
  002dd:    	movq   xmm0,xmm2
  002e1:    	divsd  xmm0,xmm9
  002e6:    	movq   xmm9,xmm0
:00023 %14 = %14 - %15                      [Float][Float]
  002eb:    	subsd  xmm8,xmm9
:00024 %15 = literal[2.0]
  002f0: 17 	movq   xmm9,QWORD PTR [rip+0x175b]        # 0x1a54
  002f9: 00 	mov    rax,0x2
  00300: ff 	mov    QWORD PTR [r14-0xa8],rax
:00025 %15 = %2 / %15                       [Float][Float]
  00307:    	movq   rax,xmm9
  0030c:    	test   rax,rax
  0030f:    	je     0xfffec15d
  00315:    	movq   xmm0,xmm2
  00319:    	divsd  xmm0,xmm9
  0031e:    	movq   xmm9,xmm0
:00026 %8 = %14 / %15                       [Float][Float]
  00323:    	movq   xmm10,xmm8
  00328:    	movq   rax,xmm9
  0032d:    	test   rax,rax
  00330:    	je     0xfffec15d
  00336:    	divsd  xmm10,xmm9
:00027 %14 = dynvar(4, %4)
  0033b:    	mov    rax,QWORD PTR [r14-0x18]
  0033f:    	mov    rax,QWORD PTR [rax]
  00342:    	mov    rax,QWORD PTR [rax]
  00345:    	mov    rax,QWORD PTR [rax]
  00348:    	mov    rax,QWORD PTR [rax-0x38]
  0034c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %7 / %14                       [Float][Float]
  00353: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0035a: 00 	test   rdi,0x1
  00361:    	jne    0x3212c
  00367: 00 	test   rdi,0x2
  0036e:    	je     0x3ab
  00374:    	xorps  xmm8,xmm8
  00378: 00 	movabs rax,0x8000000000000002
  00382:    	cmp    rdi,rax
  00385:    	je     0x3be
  0038b:    	mov    rax,rdi
  0038e:    	sar    rax,0x3f
  00392:    	add    rax,0x2
  00396:    	and    rdi,0xfffffffffffffffc
  0039a:    	or     rdi,rax
  0039d:    	rol    rdi,0x3d
  003a1:    	movq   xmm8,rdi
  003a6:    	jmp    0x3be
  003ab:    	call   0xfffec191
  003b0:    	test   rax,rax
  003b3:    	je     0x3212c
  003b9:    	movq   xmm8,xmm0
  003be:    	movq   rax,xmm8
  003c3:    	test   rax,rax
  003c6:    	je     0xfffec15d
  003cc:    	movq   xmm0,xmm7
  003d0:    	divsd  xmm0,xmm8
  003d5:    	movq   xmm8,xmm0
:00029 %14 = %5 + %14                       [Float][Float]
  003da:    	addsd  xmm8,xmm5
:00030 %15 = literal[2.0]
  003df: 16 	movq   xmm9,QWORD PTR [rip+0x167c]        # 0x1a64
  003e8: 00 	mov    rax,0x2
  003ef: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %3 / %15                       [Float][Float]
  003f6:    	movq   rax,xmm9
  003fb:    	test   rax,rax
  003fe:    	je     0xfffec15d
  00404:    	movq   xmm0,xmm3
  00408:    	divsd  xmm0,xmm9
  0040d:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00412:    	subsd  xmm8,xmm9
:00033 %14 = neg %14                        [Float]
  00417: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1655]        # 0x1a74
:00034 %15 = literal[2.0]
  0041f: 16 	movq   xmm9,QWORD PTR [rip+0x165c]        # 0x1a84
  00428: 00 	mov    rax,0x2
  0042f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00035 %15 = %3 / %15                       [Float][Float]
  00436:    	movq   rax,xmm9
  0043b:    	test   rax,rax
  0043e:    	je     0xfffec15d
  00444:    	movq   xmm0,xmm3
  00448:    	divsd  xmm0,xmm9
  0044d:    	movq   xmm9,xmm0
:00036 %9 = %14 / %15                       [Float][Float]
  00452:    	movq   xmm11,xmm8
  00457:    	movq   rax,xmm9
  0045c:    	test   rax,rax
  0045f:    	je     0xfffec15d
  00465:    	divsd  xmm11,xmm9
:00037 %14 = const[Vec]                     [Vec]
  0046a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeff73]        # 0xffff03e4
  00471: 00 	cmp    rax,QWORD PTR [rip+0x162c]        # 0x1aa4
  00478:    	jne    0x321a8
  0047e: 00 	mov    rax,QWORD PTR [rip+0x160f]        # 0x1a94
  00485: ff 	mov    QWORD PTR [r14-0xa0],rax
:00038 %15 = %8
:00039 %16 = %9
:00040 %17 = literal[-1.0]
  0048c: 16 	movq   xmm8,QWORD PTR [rip+0x161f]        # 0x1ab4
  00495: 00 	movabs rax,0xff80000000000006
  0049f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00041 %14 = %14.call new(%15; 3)           [#<Class:Vec>]
  004a6:    	movq   xmm0,xmm10
  004ab:    	call   0xfffec2b5
  004b0: ff 	mov    QWORD PTR [r14-0xa8],rax
  004b7:    	movq   xmm0,xmm11
  004bc:    	call   0xfffec2b5
  004c1: ff 	mov    QWORD PTR [r14-0xb0],rax
  004c8:    	movq   xmm0,xmm2
  004cc:    	call   0xfffec2b5
  004d1:    	mov    QWORD PTR [r14-0x40],rax
  004d5:    	movq   xmm0,xmm3
  004d9:    	call   0xfffec2b5
  004de:    	mov    QWORD PTR [r14-0x48],rax
  004e2:    	movq   xmm0,xmm4
  004e6:    	call   0xfffec2b5
  004eb:    	mov    QWORD PTR [r14-0x50],rax
  004ef:    	movq   xmm0,xmm5
  004f3:    	call   0xfffec2b5
  004f8:    	mov    QWORD PTR [r14-0x58],rax
  004fc:    	movq   xmm0,xmm6
  00500:    	call   0xfffec2b5
  00505:    	mov    QWORD PTR [r14-0x60],rax
  00509:    	movq   xmm0,xmm7
  0050d:    	call   0xfffec2b5
  00512:    	mov    QWORD PTR [r14-0x68],rax
  00516:    	movq   xmm0,xmm10
  0051b:    	call   0xfffec2b5
  00520:    	mov    QWORD PTR [r14-0x70],rax
  00524:    	movq   xmm0,xmm11
  00529:    	call   0xfffec2b5
  0052e:    	mov    QWORD PTR [r14-0x78],rax
  00532: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x32266
  00546:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0054a:    	jne    0x32266
  00550: 26 	cmp    DWORD PTR [rip+0xfffffffffffefe78],0x26        # 0xffff03cf
  00557:    	jne    0x32266
  0055d: 00 	mov    r9,0x0
  00564:    	sub    rsp,0x20
  00568:    	movq   QWORD PTR [rsp],xmm8
  0056e: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00575: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0057c:    	mov    rdx,rdi
  0057f:    	mov    QWORD PTR [rsp-0x40],rcx
  00584: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0058d: ff 	lea    rcx,[r14-0xa8]
  00594: 00 	mov    r8,0x3
  0059b:    	mov    rsi,QWORD PTR [rbx]
  0059e:    	mov    QWORD PTR [rsp-0x18],rsi
  005a3:    	lea    rsi,[rsp-0x18]
  005a8:    	mov    QWORD PTR [rbx],rsi
  005ab:    	lea    r14,[rsp-0x10]
  005b0:    	mov    QWORD PTR [rsp-0x20],r14
  005b5:    	call   0x32275
  005ba:    	lea    r14,[rbp-0x8]
  005be:    	mov    QWORD PTR [rbx],r14
  005c1:    	mov    r14,QWORD PTR [rbp-0x10]
  005c5:    	movq   xmm8,QWORD PTR [rsp]
  005cb: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  005d2: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  005d9:    	add    rsp,0x20
  005dd: 95 	movabs r13,0x55955e17c140
  005e7:    	test   rax,rax
  005ea:    	je     0xfffec138
  005f0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 
:00043 %10 = %14.call vnormalize()          [Vec]
  005f7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005fe: 00 	test   rdi,0x7
  00605:    	jne    0x322a7
  0060b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0060f:    	jne    0x322a7
  00615: 26 	cmp    DWORD PTR [rip+0xfffffffffffefdb3],0x26        # 0xffff03cf
  0061c:    	jne    0x322a7
  00622:    	sub    rsp,0x20
  00626:    	movq   QWORD PTR [rsp],xmm8
  0062c: 08 	movq   QWORD PTR [rsp+0x8],xmm10
  00633: 10 	movq   QWORD PTR [rsp+0x10],xmm11
  0063a: 00 	cmp    DWORD PTR [rip+0xfffffffffffefd92],0x0        # 0xffff03d3
  00641:    	je     0x659
  00647:    	mov    rdi,r12
  0064a:    	mov    rsi,QWORD PTR [rbx]
  0064d: 95 	movabs rax,0x55955d9a3d50
  00657:    	call   rax
  00659: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00662: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00669:    	mov    QWORD PTR [rsp-0x40],rax
  0066e: 00 	mov    rdi,0x0
  00675: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0067e: 07 	movabs rax,0x100070000005f
  00688:    	mov    QWORD PTR [rsp-0x30],rax
  0068d: 95 	movabs r13,0x55955e168310
  00697:    	mov    rsi,QWORD PTR [rbx]
  0069a:    	mov    QWORD PTR [rsp-0x18],rsi
  0069f:    	lea    rsi,[rsp-0x18]
  006a4:    	mov    QWORD PTR [rbx],rsi
  006a7:    	lea    r14,[rsp-0x10]
  006ac:    	mov    QWORD PTR [rsp-0x20],r14
  006b1:    	call   0xffff0c97
  006b6:    	lea    r14,[rbp-0x8]
  006ba:    	mov    QWORD PTR [rbx],r14
  006bd:    	mov    r14,QWORD PTR [rbp-0x10]
  006c1:    	movq   xmm8,QWORD PTR [rsp]
  006c7: 08 	movq   xmm10,QWORD PTR [rsp+0x8]
  006ce: 10 	movq   xmm11,QWORD PTR [rsp+0x10]
  006d5:    	add    rsp,0x20
  006d9: 95 	movabs r13,0x55955e17c160
  006e3:    	test   rax,rax
  006e6:    	je     0xfffec138
  006ec:    	mov    QWORD PTR [r14-0x80],rax
:00044 
:00045 %14 = const[Ray]                     [Ray]
  006f0: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffefced]        # 0xffff03e4
  006f7: 00 	cmp    rax,QWORD PTR [rip+0x13d6]        # 0x1ad4
  006fe:    	jne    0x322b6
  00704: 00 	mov    rax,QWORD PTR [rip+0x13b9]        # 0x1ac4
  0070b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00046 %15 = const[Vec]                     [Vec]
  00712: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffefccb]        # 0xffff03e4
  00719: 00 	cmp    rax,QWORD PTR [rip+0x13d4]        # 0x1af4
  00720:    	jne    0x3232c
  00726: 00 	mov    rax,QWORD PTR [rip+0x13b7]        # 0x1ae4
  0072d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = literal[0.0]
  00734: 00 	movq   xmm2,QWORD PTR [rip+0x13c8]        # 0x1b04
  0073c: 00 	movabs rax,0x8000000000000002
  00746: ff 	mov    QWORD PTR [r14-0xb0],rax
:00048 %17 = literal[0.0]
  0074d: 00 	movq   xmm3,QWORD PTR [rip+0x13bf]        # 0x1b14
  00755: 00 	movabs rax,0x8000000000000002
  0075f: ff 	mov    QWORD PTR [r14-0xb8],rax
:00049 %18 = literal[0.0]
  00766: 00 	movq   xmm4,QWORD PTR [rip+0x13b6]        # 0x1b24
  0076e: 00 	movabs rax,0x8000000000000002
  00778: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %15 = %15.call new(%16; 3)           [#<Class:Vec>]
  0077f: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00786: 00 	test   rdi,0x7
  0078d:    	jne    0x32394
  00793:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00797:    	jne    0x32394
  0079d: 26 	cmp    DWORD PTR [rip+0xfffffffffffefc2b],0x26        # 0xffff03cf
  007a4:    	jne    0x32394
  007aa: 00 	mov    r9,0x0
  007b1:    	sub    rsp,0x20
  007b5:    	movq   QWORD PTR [rsp],xmm2
  007ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  007c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  007c6:    	mov    rdx,rdi
  007c9:    	mov    QWORD PTR [rsp-0x40],rcx
  007ce: 00 	mov    QWORD PTR [rsp-0x28],0x0
  007d7: ff 	lea    rcx,[r14-0xb0]
  007de: 00 	mov    r8,0x3
  007e5:    	mov    rsi,QWORD PTR [rbx]
  007e8:    	mov    QWORD PTR [rsp-0x18],rsi
  007ed:    	lea    rsi,[rsp-0x18]
  007f2:    	mov    QWORD PTR [rbx],rsi
  007f5:    	lea    r14,[rsp-0x10]
  007fa:    	mov    QWORD PTR [rsp-0x20],r14
  007ff:    	call   0x323a3
  00804:    	lea    r14,[rbp-0x8]
  00808:    	mov    QWORD PTR [rbx],r14
  0080b:    	mov    r14,QWORD PTR [rbp-0x10]
  0080f:    	movq   xmm2,QWORD PTR [rsp]
  00814:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0081a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00820:    	add    rsp,0x20
  00824: 95 	movabs r13,0x55955e17c1d0
  0082e:    	test   rax,rax
  00831:    	je     0xfffec138
  00837: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 
:00052 %16 = %10
  0083e:    	mov    rax,QWORD PTR [r14-0x80]
  00842: ff 	mov    QWORD PTR [r14-0xb0],rax
:00053 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00849: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00850: 00 	test   rdi,0x7
  00857:    	jne    0x323d5
  0085d:    	cmp    DWORD PTR [rdi+0x4],0x32
  00861:    	jne    0x323d5
  00867: 26 	cmp    DWORD PTR [rip+0xfffffffffffefb61],0x26        # 0xffff03cf
  0086e:    	jne    0x323d5
  00874: 00 	mov    r9,0x0
  0087b:    	sub    rsp,0x10
  0087f:    	movq   QWORD PTR [rsp],xmm3
  00884:    	movq   QWORD PTR [rsp+0x8],xmm4
  0088a:    	mov    rdx,rdi
  0088d:    	mov    QWORD PTR [rsp-0x40],rcx
  00892: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0089b: ff 	lea    rcx,[r14-0xa8]
  008a2: 00 	mov    r8,0x2
  008a9:    	mov    rsi,QWORD PTR [rbx]
  008ac:    	mov    QWORD PTR [rsp-0x18],rsi
  008b1:    	lea    rsi,[rsp-0x18]
  008b6:    	mov    QWORD PTR [rbx],rsi
  008b9:    	lea    r14,[rsp-0x10]
  008be:    	mov    QWORD PTR [rsp-0x20],r14
  008c3:    	call   0x323e4
  008c8:    	lea    r14,[rbp-0x8]
  008cc:    	mov    QWORD PTR [rbx],r14
  008cf:    	mov    r14,QWORD PTR [rbp-0x10]
  008d3:    	movq   xmm3,QWORD PTR [rsp]
  008d8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008de:    	add    rsp,0x10
  008e2: 95 	movabs r13,0x55955e17c200
  008ec:    	test   rax,rax
  008ef:    	je     0xfffec138
  008f5: ff 	mov    QWORD PTR [r14-0x88],rax
:00054 
:00055 %14 = const[Isect]                   [Isect]
  008fc: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffefae1]        # 0xffff03e4
  00903: 00 	cmp    rax,QWORD PTR [rip+0x123a]        # 0x1b44
  0090a:    	jne    0x32416
  00910: 00 	mov    rax,QWORD PTR [rip+0x121d]        # 0x1b34
  00917: ff 	mov    QWORD PTR [r14-0xa0],rax
:00056 %12 = %14.call new()                 [#<Class:Isect>]
  0091e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00925: 00 	test   rdi,0x7
  0092c:    	jne    0x3247a
  00932:    	cmp    DWORD PTR [rdi+0x4],0x34
  00936:    	jne    0x3247a
  0093c: 26 	cmp    DWORD PTR [rip+0xfffffffffffefa8c],0x26        # 0xffff03cf
  00943:    	jne    0x3247a
  00949: 00 	mov    r9,0x0
  00950:    	sub    rsp,0x10
  00954:    	movq   QWORD PTR [rsp],xmm3
  00959:    	movq   QWORD PTR [rsp+0x8],xmm4
  0095f:    	mov    rdx,rdi
  00962:    	mov    QWORD PTR [rsp-0x40],rcx
  00967: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00970: ff 	lea    rcx,[r14-0xa8]
  00977: 00 	mov    r8,0x0
  0097e:    	mov    rsi,QWORD PTR [rbx]
  00981:    	mov    QWORD PTR [rsp-0x18],rsi
  00986:    	lea    rsi,[rsp-0x18]
  0098b:    	mov    QWORD PTR [rbx],rsi
  0098e:    	lea    r14,[rsp-0x10]
  00993:    	mov    QWORD PTR [rsp-0x20],r14
  00998:    	call   0x32489
  0099d:    	lea    r14,[rbp-0x8]
  009a1:    	mov    QWORD PTR [rbx],r14
  009a4:    	mov    r14,QWORD PTR [rbp-0x10]
  009a8:    	movq   xmm3,QWORD PTR [rsp]
  009ad:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009b3:    	add    rsp,0x10
  009b7: 95 	movabs r13,0x55955e17c230
  009c1:    	test   rax,rax
  009c4:    	je     0xfffec138
  009ca: ff 	mov    QWORD PTR [r14-0x90],rax
:00057 
:00058 %14 = @spheres: Scene[IvarId(0)]
  009d1:    	mov    rdi,QWORD PTR [r14-0x30]
  009d5:    	mov    rax,QWORD PTR [rdi+0x10]
  009d9: ff 	mov    QWORD PTR [r14-0xa0],rax
:00059 %15 = 0: i32
  009e0: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00060 %14 = %14.[%15]                      [Array][Integer]
  009eb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009f2: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  009f9: 00 	test   rdi,0x7
  00a00:    	jne    0x324bb
  00a06:    	cmp    DWORD PTR [rdi+0x4],0xb
  00a0a:    	jne    0x324bb
  00a10: 00 	test   rsi,0x1
  00a17:    	je     0x324bb
  00a1d:    	sar    rsi,1
  00a20:    	sub    rsp,0x10
  00a24:    	movq   QWORD PTR [rsp],xmm3
  00a29:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a2f: 95 	movabs rax,0x55955d9acd00
  00a39:    	call   rax
  00a3b:    	movq   xmm3,QWORD PTR [rsp]
  00a40:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a46:    	add    rsp,0x10
  00a4a: 95 	movabs r13,0x55955e17c260
  00a54:    	test   rax,rax
  00a57:    	je     0xfffec138
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = %11
  00a64: ff 	mov    rax,QWORD PTR [r14-0x88]
  00a6b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 %16 = %12
  00a72: ff 	mov    rax,QWORD PTR [r14-0x90]
  00a79: ff 	mov    QWORD PTR [r14-0xb0],rax
:00063 _ = %14.call intersect(%15; 2)       [Sphere]
  00a80: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a87: 00 	test   rdi,0x7
  00a8e:    	jne    0x324ca
  00a94:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a98:    	jne    0x324ca
  00a9e: 26 	cmp    DWORD PTR [rip+0xfffffffffffef92a],0x26        # 0xffff03cf
  00aa5:    	jne    0x324ca
  00aab:    	sub    rsp,0x10
  00aaf:    	movq   QWORD PTR [rsp],xmm3
  00ab4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00aba: 00 	cmp    DWORD PTR [rip+0xfffffffffffef912],0x0        # 0xffff03d3
  00ac1:    	je     0xad9
  00ac7:    	mov    rdi,r12
  00aca:    	mov    rsi,QWORD PTR [rbx]
  00acd: 95 	movabs rax,0x55955d9a3d50
  00ad7:    	call   rax
  00ad9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ae2: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00ae9:    	mov    QWORD PTR [rsp-0x40],rax
  00aee: 00 	mov    rdi,0x2
  00af5: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00afc:    	mov    QWORD PTR [rsp-0x48],rax
  00b01: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00b08:    	mov    QWORD PTR [rsp-0x50],rax
  00b0d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b16: 0e 	movabs rax,0x1000e00000061
  00b20:    	mov    QWORD PTR [rsp-0x30],rax
  00b25: 95 	movabs r13,0x55955e16d0b0
  00b2f:    	mov    rsi,QWORD PTR [rbx]
  00b32:    	mov    QWORD PTR [rsp-0x18],rsi
  00b37:    	lea    rsi,[rsp-0x18]
  00b3c:    	mov    QWORD PTR [rbx],rsi
  00b3f:    	lea    r14,[rsp-0x10]
  00b44:    	mov    QWORD PTR [rsp-0x20],r14
  00b49:    	call   0xffff0f90
  00b4e:    	lea    r14,[rbp-0x8]
  00b52:    	mov    QWORD PTR [rbx],r14
  00b55:    	mov    r14,QWORD PTR [rbp-0x10]
  00b59:    	movq   xmm3,QWORD PTR [rsp]
  00b5e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b64:    	add    rsp,0x10
  00b68: 95 	movabs r13,0x55955e17c2a0
  00b72:    	test   rax,rax
  00b75:    	je     0xfffec138
:00064 
:00065 %14 = @spheres: Scene[IvarId(0)]
  00b7b:    	mov    rdi,QWORD PTR [r14-0x30]
  00b7f:    	mov    rax,QWORD PTR [rdi+0x10]
  00b83: ff 	mov    QWORD PTR [r14-0xa0],rax
:00066 %15 = 1: i32
  00b8a: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00067 %14 = %14.[%15]                      [Array][Integer]
  00b95: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b9c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00ba3: 00 	test   rdi,0x7
  00baa:    	jne    0x324d9
  00bb0:    	cmp    DWORD PTR [rdi+0x4],0xb
  00bb4:    	jne    0x324d9
  00bba: 00 	test   rsi,0x1
  00bc1:    	je     0x324d9
  00bc7:    	sar    rsi,1
  00bca:    	sub    rsp,0x10
  00bce:    	movq   QWORD PTR [rsp],xmm3
  00bd3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bd9: 95 	movabs rax,0x55955d9acd00
  00be3:    	call   rax
  00be5:    	movq   xmm3,QWORD PTR [rsp]
  00bea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bf0:    	add    rsp,0x10
  00bf4: 95 	movabs r13,0x55955e17c2d0
  00bfe:    	test   rax,rax
  00c01:    	je     0xfffec138
  00c07: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = %11
  00c0e: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c15: ff 	mov    QWORD PTR [r14-0xa8],rax
:00069 %16 = %12
  00c1c: ff 	mov    rax,QWORD PTR [r14-0x90]
  00c23: ff 	mov    QWORD PTR [r14-0xb0],rax
:00070 _ = %14.call intersect(%15; 2)       [Sphere]
  00c2a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00c31: 00 	test   rdi,0x7
  00c38:    	jne    0x324e8
  00c3e:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00c42:    	jne    0x324e8
  00c48: 26 	cmp    DWORD PTR [rip+0xfffffffffffef780],0x26        # 0xffff03cf
  00c4f:    	jne    0x324e8
  00c55:    	sub    rsp,0x10
  00c59:    	movq   QWORD PTR [rsp],xmm3
  00c5e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c64: 00 	cmp    DWORD PTR [rip+0xfffffffffffef768],0x0        # 0xffff03d3
  00c6b:    	je     0xc83
  00c71:    	mov    rdi,r12
  00c74:    	mov    rsi,QWORD PTR [rbx]
  00c77: 95 	movabs rax,0x55955d9a3d50
  00c81:    	call   rax
  00c83: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c8c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00c93:    	mov    QWORD PTR [rsp-0x40],rax
  00c98: 00 	mov    rdi,0x2
  00c9f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00ca6:    	mov    QWORD PTR [rsp-0x48],rax
  00cab: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00cb2:    	mov    QWORD PTR [rsp-0x50],rax
  00cb7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cc0: 0e 	movabs rax,0x1000e00000061
  00cca:    	mov    QWORD PTR [rsp-0x30],rax
  00ccf: 95 	movabs r13,0x55955e16d0b0
  00cd9:    	mov    rsi,QWORD PTR [rbx]
  00cdc:    	mov    QWORD PTR [rsp-0x18],rsi
  00ce1:    	lea    rsi,[rsp-0x18]
  00ce6:    	mov    QWORD PTR [rbx],rsi
  00ce9:    	lea    r14,[rsp-0x10]
  00cee:    	mov    QWORD PTR [rsp-0x20],r14
  00cf3:    	call   0xffff0f90
  00cf8:    	lea    r14,[rbp-0x8]
  00cfc:    	mov    QWORD PTR [rbx],r14
  00cff:    	mov    r14,QWORD PTR [rbp-0x10]
  00d03:    	movq   xmm3,QWORD PTR [rsp]
  00d08:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0e:    	add    rsp,0x10
  00d12: 95 	movabs r13,0x55955e17c310
  00d1c:    	test   rax,rax
  00d1f:    	je     0xfffec138
:00071 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00d25:    	mov    rdi,QWORD PTR [r14-0x30]
  00d29:    	mov    rax,QWORD PTR [rdi+0x10]
  00d2d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 2: i32
  00d34: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00074 %14 = %14.[%15]                      [Array][Integer]
  00d3f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d46: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d4d: 00 	test   rdi,0x7
  00d54:    	jne    0x324f7
  00d5a:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d5e:    	jne    0x324f7
  00d64: 00 	test   rsi,0x1
  00d6b:    	je     0x324f7
  00d71:    	sar    rsi,1
  00d74:    	sub    rsp,0x10
  00d78:    	movq   QWORD PTR [rsp],xmm3
  00d7d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d83: 95 	movabs rax,0x55955d9acd00
  00d8d:    	call   rax
  00d8f:    	movq   xmm3,QWORD PTR [rsp]
  00d94:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d9a:    	add    rsp,0x10
  00d9e: 95 	movabs r13,0x55955e17c340
  00da8:    	test   rax,rax
  00dab:    	je     0xfffec138
  00db1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00db8: ff 	mov    rax,QWORD PTR [r14-0x88]
  00dbf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00dc6: ff 	mov    rax,QWORD PTR [r14-0x90]
  00dcd: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00dd4: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ddb: 00 	test   rdi,0x7
  00de2:    	jne    0x32506
  00de8:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00dec:    	jne    0x32506
  00df2: 26 	cmp    DWORD PTR [rip+0xfffffffffffef5d6],0x26        # 0xffff03cf
  00df9:    	jne    0x32506
  00dff:    	sub    rsp,0x10
  00e03:    	movq   QWORD PTR [rsp],xmm3
  00e08:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e0e: 00 	cmp    DWORD PTR [rip+0xfffffffffffef5be],0x0        # 0xffff03d3
  00e15:    	je     0xe2d
  00e1b:    	mov    rdi,r12
  00e1e:    	mov    rsi,QWORD PTR [rbx]
  00e21: 95 	movabs rax,0x55955d9a3d50
  00e2b:    	call   rax
  00e2d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e36: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00e3d:    	mov    QWORD PTR [rsp-0x40],rax
  00e42: 00 	mov    rdi,0x2
  00e49: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00e50:    	mov    QWORD PTR [rsp-0x48],rax
  00e55: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00e5c:    	mov    QWORD PTR [rsp-0x50],rax
  00e61: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e6a: 0e 	movabs rax,0x1000e00000061
  00e74:    	mov    QWORD PTR [rsp-0x30],rax
  00e79: 95 	movabs r13,0x55955e16d0b0
  00e83:    	mov    rsi,QWORD PTR [rbx]
  00e86:    	mov    QWORD PTR [rsp-0x18],rsi
  00e8b:    	lea    rsi,[rsp-0x18]
  00e90:    	mov    QWORD PTR [rbx],rsi
  00e93:    	lea    r14,[rsp-0x10]
  00e98:    	mov    QWORD PTR [rsp-0x20],r14
  00e9d:    	call   0xffff0f90
  00ea2:    	lea    r14,[rbp-0x8]
  00ea6:    	mov    QWORD PTR [rbx],r14
  00ea9:    	mov    r14,QWORD PTR [rbp-0x10]
  00ead:    	movq   xmm3,QWORD PTR [rsp]
  00eb2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00eb8:    	add    rsp,0x10
  00ebc: 95 	movabs r13,0x55955e17c380
  00ec6:    	test   rax,rax
  00ec9:    	je     0xfffec138
:00078 
:00079 %14 = @plane: Scene[IvarId(1)]
  00ecf:    	mov    rdi,QWORD PTR [r14-0x30]
  00ed3:    	mov    rax,QWORD PTR [rdi+0x18]
  00ed7: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 %15 = %11
  00ede: ff 	mov    rax,QWORD PTR [r14-0x88]
  00ee5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00081 %16 = %12
  00eec: ff 	mov    rax,QWORD PTR [r14-0x90]
  00ef3: ff 	mov    QWORD PTR [r14-0xb0],rax
:00082 _ = %14.call intersect(%15; 2)       [Plane]
  00efa: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f01: 00 	test   rdi,0x7
  00f08:    	jne    0x32515
  00f0e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00f12:    	jne    0x32515
  00f18: 26 	cmp    DWORD PTR [rip+0xfffffffffffef4b0],0x26        # 0xffff03cf
  00f1f:    	jne    0x32515
  00f25:    	sub    rsp,0x10
  00f29:    	movq   QWORD PTR [rsp],xmm3
  00f2e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f34: 00 	cmp    DWORD PTR [rip+0xfffffffffffef498],0x0        # 0xffff03d3
  00f3b:    	je     0xf53
  00f41:    	mov    rdi,r12
  00f44:    	mov    rsi,QWORD PTR [rbx]
  00f47: 95 	movabs rax,0x55955d9a3d50
  00f51:    	call   rax
  00f53: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f5c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00f63:    	mov    QWORD PTR [rsp-0x40],rax
  00f68: 00 	mov    rdi,0x2
  00f6f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00f76:    	mov    QWORD PTR [rsp-0x48],rax
  00f7b: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00f82:    	mov    QWORD PTR [rsp-0x50],rax
  00f87: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f90: 0c 	movabs rax,0x1000c00000063
  00f9a:    	mov    QWORD PTR [rsp-0x30],rax
  00f9f: 95 	movabs r13,0x55955e173c50
  00fa9:    	mov    rsi,QWORD PTR [rbx]
  00fac:    	mov    QWORD PTR [rsp-0x18],rsi
  00fb1:    	lea    rsi,[rsp-0x18]
  00fb6:    	mov    QWORD PTR [rbx],rsi
  00fb9:    	lea    r14,[rsp-0x10]
  00fbe:    	mov    QWORD PTR [rsp-0x20],r14
  00fc3:    	call   0xffff155c
  00fc8:    	lea    r14,[rbp-0x8]
  00fcc:    	mov    QWORD PTR [rbx],r14
  00fcf:    	mov    r14,QWORD PTR [rbp-0x10]
  00fd3:    	movq   xmm3,QWORD PTR [rsp]
  00fd8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fde:    	add    rsp,0x10
  00fe2: 95 	movabs r13,0x55955e17c3d0
  00fec:    	test   rax,rax
  00fef:    	je     0xfffec138
:00083 
:00084 %14 = %12.call hit()                 [Isect]
  00ff5: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ffc: 00 	test   rdi,0x7
  01003:    	jne    0x32524
  01009:    	cmp    DWORD PTR [rdi+0x4],0x33
  0100d:    	jne    0x32524
  01013: 26 	cmp    DWORD PTR [rip+0xfffffffffffef3b5],0x26        # 0xffff03cf
  0101a:    	jne    0x32524
  01020:    	mov    esi,DWORD PTR [rip+0xb2a]        # 0x1b50
  01026:    	cmp    esi,0xffffffff
  01029:    	je     0x32533
  0102f:    	cmp    WORD PTR [rdi+0x2],0x3
  01034:    	jne    0x104d
  0103a:    	cmp    esi,0x6
  0103d:    	jge    0x104d
  01043:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01048:    	jmp    0x1077
  0104d:    	sub    rsp,0x10
  01051:    	movq   QWORD PTR [rsp],xmm3
  01056:    	movq   QWORD PTR [rsp+0x8],xmm4
  0105c: 95 	movabs rax,0x55955d9e0e20
  01066:    	call   rax
  01068:    	movq   xmm3,QWORD PTR [rsp]
  0106d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01073:    	add    rsp,0x10
  01077: ff 	mov    QWORD PTR [r14-0xa0],rax
:00085 
:00086 condnotbr %14 =>:00119
  0107e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01085:    	or     rax,0x10
  01089:    	cmp    rax,0x14
  0108d:    	je     0x1a30
:00087 %14 = %12
  01093: ff 	mov    rax,QWORD PTR [r14-0x90]
  0109a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  010a1:    	mov    rdi,QWORD PTR [r14-0x30]
  010a5: 26 	cmp    DWORD PTR [rip+0xfffffffffffef323],0x26        # 0xffff03cf
  010ac:    	jne    0x3257a
  010b2:    	sub    rsp,0x10
  010b6:    	movq   QWORD PTR [rsp],xmm3
  010bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  010c1: 00 	cmp    DWORD PTR [rip+0xfffffffffffef30b],0x0        # 0xffff03d3
  010c8:    	je     0x10e0
  010ce:    	mov    rdi,r12
  010d1:    	mov    rsi,QWORD PTR [rbx]
  010d4: 95 	movabs rax,0x55955d9a3d50
  010de:    	call   rax
  010e0: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010e9:    	mov    rax,QWORD PTR [r14-0x30]
  010ed:    	mov    QWORD PTR [rsp-0x40],rax
  010f2: 00 	mov    rdi,0x1
  010f9: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01100:    	mov    QWORD PTR [rsp-0x48],rax
  01105: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0110e: 0d 	movabs rax,0x1000d00000067
  01118:    	mov    QWORD PTR [rsp-0x30],rax
  0111d: 95 	movabs r13,0x55955e167a40
  01127:    	mov    rsi,QWORD PTR [rbx]
  0112a:    	mov    QWORD PTR [rsp-0x18],rsi
  0112f:    	lea    rsi,[rsp-0x18]
  01134:    	mov    QWORD PTR [rbx],rsi
  01137:    	lea    r14,[rsp-0x10]
  0113c:    	mov    QWORD PTR [rsp-0x20],r14
  01141:    	call   0xffff8c89
  01146:    	lea    r14,[rbp-0x8]
  0114a:    	mov    QWORD PTR [rbx],r14
  0114d:    	mov    r14,QWORD PTR [rbp-0x10]
  01151:    	movq   xmm3,QWORD PTR [rsp]
  01156:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0115c:    	add    rsp,0x10
  01160: 95 	movabs r13,0x55955e17c430
  0116a:    	test   rax,rax
  0116d:    	je     0xfffec138
  01173: ff 	mov    QWORD PTR [r14-0x98],rax
:00089 
:00090 %14 = dynvar(2, %2)
  0117a:    	mov    rax,QWORD PTR [r14-0x18]
  0117e:    	mov    rax,QWORD PTR [rax]
  01181:    	mov    rax,QWORD PTR [rax-0x28]
  01185: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = dynvar(2, %2)
  0118c:    	mov    rax,QWORD PTR [r14-0x18]
  01190:    	mov    rax,QWORD PTR [rax]
  01193:    	mov    rax,QWORD PTR [rax-0x28]
  01197: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %15 = %15.call x()                   [Vec]
  0119e: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  011a5: 00 	test   rdi,0x7
  011ac:    	jne    0x32589
  011b2:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011b6:    	jne    0x32589
  011bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffef20c],0x26        # 0xffff03cf
  011c3:    	jne    0x32589
  011c9:    	mov    esi,DWORD PTR [rip+0x989]        # 0x1b58
  011cf:    	cmp    esi,0xffffffff
  011d2:    	je     0x32598
  011d8:    	cmp    WORD PTR [rdi+0x2],0x3
  011dd:    	jne    0x11f6
  011e3:    	cmp    esi,0x6
  011e6:    	jge    0x11f6
  011ec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011f1:    	jmp    0x1220
  011f6:    	sub    rsp,0x10
  011fa:    	movq   QWORD PTR [rsp],xmm3
  011ff:    	movq   QWORD PTR [rsp+0x8],xmm4
  01205: 95 	movabs rax,0x55955d9e0e20
  0120f:    	call   rax
  01211:    	movq   xmm3,QWORD PTR [rsp]
  01216:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0121c:    	add    rsp,0x10
  01220: ff 	mov    QWORD PTR [r14-0xa8],rax
:00093 
:00094 %16 = %13.call x()                   [Vec]
  01227: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0122e: 00 	test   rdi,0x7
  01235:    	jne    0x325df
  0123b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0123f:    	jne    0x325df
  01245: 26 	cmp    DWORD PTR [rip+0xfffffffffffef183],0x26        # 0xffff03cf
  0124c:    	jne    0x325df
  01252:    	mov    esi,DWORD PTR [rip+0x908]        # 0x1b60
  01258:    	cmp    esi,0xffffffff
  0125b:    	je     0x325ee
  01261:    	cmp    WORD PTR [rdi+0x2],0x3
  01266:    	jne    0x127f
  0126c:    	cmp    esi,0x6
  0126f:    	jge    0x127f
  01275:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0127a:    	jmp    0x12a9
  0127f:    	sub    rsp,0x10
  01283:    	movq   QWORD PTR [rsp],xmm3
  01288:    	movq   QWORD PTR [rsp+0x8],xmm4
  0128e: 95 	movabs rax,0x55955d9e0e20
  01298:    	call   rax
  0129a:    	movq   xmm3,QWORD PTR [rsp]
  0129f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a5:    	add    rsp,0x10
  012a9: ff 	mov    QWORD PTR [r14-0xb0],rax
:00095 
:00096 %15 = %15 + %16                      [Float][Float]
  012b0: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  012b7: 00 	test   rdi,0x1
  012be:    	jne    0x32635
  012c4: 00 	test   rdi,0x2
  012cb:    	je     0x1307
  012d1:    	xorps  xmm2,xmm2
  012d4: 00 	movabs rax,0x8000000000000002
  012de:    	cmp    rdi,rax
  012e1:    	je     0x1319
  012e7:    	mov    rax,rdi
  012ea:    	sar    rax,0x3f
  012ee:    	add    rax,0x2
  012f2:    	and    rdi,0xfffffffffffffffc
  012f6:    	or     rdi,rax
  012f9:    	rol    rdi,0x3d
  012fd:    	movq   xmm2,rdi
  01302:    	jmp    0x1319
  01307:    	call   0xfffec191
  0130c:    	test   rax,rax
  0130f:    	je     0x32635
  01315:    	movq   xmm2,xmm0
  01319: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01320: 00 	test   rdi,0x1
  01327:    	jne    0x32644
  0132d: 00 	test   rdi,0x2
  01334:    	je     0x1370
  0133a:    	xorps  xmm5,xmm5
  0133d: 00 	movabs rax,0x8000000000000002
  01347:    	cmp    rdi,rax
  0134a:    	je     0x1382
  01350:    	mov    rax,rdi
  01353:    	sar    rax,0x3f
  01357:    	add    rax,0x2
  0135b:    	and    rdi,0xfffffffffffffffc
  0135f:    	or     rdi,rax
  01362:    	rol    rdi,0x3d
  01366:    	movq   xmm5,rdi
  0136b:    	jmp    0x1382
  01370:    	call   0xfffec191
  01375:    	test   rax,rax
  01378:    	je     0x32644
  0137e:    	movq   xmm5,xmm0
  01382:    	addsd  xmm2,xmm5
:00097 _ = %14.call x=(%15; 1)              [Vec]
  01386:    	movq   xmm0,xmm2
  0138a:    	call   0xfffec2b5
  0138f: ff 	mov    QWORD PTR [r14-0xa8],rax
  01396: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0139d: 00 	test   rdi,0x7
  013a4:    	jne    0x32653
  013aa:    	cmp    DWORD PTR [rdi+0x4],0x2b
  013ae:    	jne    0x32653
  013b4: 26 	cmp    DWORD PTR [rip+0xfffffffffffef014],0x26        # 0xffff03cf
  013bb:    	jne    0x32653
  013c1:    	mov    esi,DWORD PTR [rip+0x7a1]        # 0x1b68
  013c7:    	cmp    esi,0xffffffff
  013ca:    	je     0x32662
  013d0:    	cmp    WORD PTR [rdi+0x2],0x3
  013d5:    	jne    0x13f5
  013db:    	cmp    esi,0x6
  013de:    	jge    0x13f5
  013e4: ff 	mov    rax,QWORD PTR [r14-0xa8]
  013eb:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  013f0:    	jmp    0x1451
  013f5:    	sub    rsp,0x20
  013f9:    	movq   QWORD PTR [rsp],xmm2
  013fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  01404:    	movq   QWORD PTR [rsp+0x10],xmm4
  0140a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01410: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01417: 95 	movabs rax,0x55955d9e10a0
  01421:    	call   rax
  01423:    	movq   xmm2,QWORD PTR [rsp]
  01428:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0142e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01434:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0143a:    	add    rsp,0x20
  0143e: 95 	movabs r13,0x55955e17c4c0
  01448:    	test   rax,rax
  0144b:    	je     0xfffec138
:00098 
:00099 %14 = dynvar(2, %2)
  01451:    	mov    rax,QWORD PTR [r14-0x18]
  01455:    	mov    rax,QWORD PTR [rax]
  01458:    	mov    rax,QWORD PTR [rax-0x28]
  0145c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00100 %15 = dynvar(2, %2)
  01463:    	mov    rax,QWORD PTR [r14-0x18]
  01467:    	mov    rax,QWORD PTR [rax]
  0146a:    	mov    rax,QWORD PTR [rax-0x28]
  0146e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00101 %15 = %15.call y()                   [Vec]
  01475: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0147c: 00 	test   rdi,0x7
  01483:    	jne    0x326cb
  01489:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0148d:    	jne    0x326cb
  01493: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef35],0x26        # 0xffff03cf
  0149a:    	jne    0x326cb
  014a0:    	mov    esi,DWORD PTR [rip+0x6ca]        # 0x1b70
  014a6:    	cmp    esi,0xffffffff
  014a9:    	je     0x326da
  014af:    	cmp    WORD PTR [rdi+0x2],0x3
  014b4:    	jne    0x14cd
  014ba:    	cmp    esi,0x6
  014bd:    	jge    0x14cd
  014c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014c8:    	jmp    0x1503
  014cd:    	sub    rsp,0x20
  014d1:    	movq   QWORD PTR [rsp],xmm3
  014d6:    	movq   QWORD PTR [rsp+0x8],xmm4
  014dc:    	movq   QWORD PTR [rsp+0x10],xmm5
  014e2: 95 	movabs rax,0x55955d9e0e20
  014ec:    	call   rax
  014ee:    	movq   xmm3,QWORD PTR [rsp]
  014f3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014ff:    	add    rsp,0x20
  01503: ff 	mov    QWORD PTR [r14-0xa8],rax
:00102 
:00103 %16 = %13.call y()                   [Vec]
  0150a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01511: 00 	test   rdi,0x7
  01518:    	jne    0x3272d
  0151e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01522:    	jne    0x3272d
  01528: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeea0],0x26        # 0xffff03cf
  0152f:    	jne    0x3272d
  01535:    	mov    esi,DWORD PTR [rip+0x63d]        # 0x1b78
  0153b:    	cmp    esi,0xffffffff
  0153e:    	je     0x3273c
  01544:    	cmp    WORD PTR [rdi+0x2],0x3
  01549:    	jne    0x1562
  0154f:    	cmp    esi,0x6
  01552:    	jge    0x1562
  01558:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0155d:    	jmp    0x158c
  01562:    	sub    rsp,0x10
  01566:    	movq   QWORD PTR [rsp],xmm3
  0156b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01571: 95 	movabs rax,0x55955d9e0e20
  0157b:    	call   rax
  0157d:    	movq   xmm3,QWORD PTR [rsp]
  01582:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01588:    	add    rsp,0x10
  0158c: ff 	mov    QWORD PTR [r14-0xb0],rax
:00104 
:00105 %15 = %15 + %16                      [Float][Float]
  01593: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0159a: 00 	test   rdi,0x1
  015a1:    	jne    0x32783
  015a7: 00 	test   rdi,0x2
  015ae:    	je     0x15ea
  015b4:    	xorps  xmm2,xmm2
  015b7: 00 	movabs rax,0x8000000000000002
  015c1:    	cmp    rdi,rax
  015c4:    	je     0x15fc
  015ca:    	mov    rax,rdi
  015cd:    	sar    rax,0x3f
  015d1:    	add    rax,0x2
  015d5:    	and    rdi,0xfffffffffffffffc
  015d9:    	or     rdi,rax
  015dc:    	rol    rdi,0x3d
  015e0:    	movq   xmm2,rdi
  015e5:    	jmp    0x15fc
  015ea:    	call   0xfffec191
  015ef:    	test   rax,rax
  015f2:    	je     0x32783
  015f8:    	movq   xmm2,xmm0
  015fc: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01603: 00 	test   rdi,0x1
  0160a:    	jne    0x32792
  01610: 00 	test   rdi,0x2
  01617:    	je     0x1653
  0161d:    	xorps  xmm5,xmm5
  01620: 00 	movabs rax,0x8000000000000002
  0162a:    	cmp    rdi,rax
  0162d:    	je     0x1665
  01633:    	mov    rax,rdi
  01636:    	sar    rax,0x3f
  0163a:    	add    rax,0x2
  0163e:    	and    rdi,0xfffffffffffffffc
  01642:    	or     rdi,rax
  01645:    	rol    rdi,0x3d
  01649:    	movq   xmm5,rdi
  0164e:    	jmp    0x1665
  01653:    	call   0xfffec191
  01658:    	test   rax,rax
  0165b:    	je     0x32792
  01661:    	movq   xmm5,xmm0
  01665:    	addsd  xmm2,xmm5
:00106 _ = %14.call y=(%15; 1)              [Vec]
  01669:    	movq   xmm0,xmm2
  0166d:    	call   0xfffec2b5
  01672: ff 	mov    QWORD PTR [r14-0xa8],rax
  01679: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01680: 00 	test   rdi,0x7
  01687:    	jne    0x327a1
  0168d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01691:    	jne    0x327a1
  01697: 26 	cmp    DWORD PTR [rip+0xfffffffffffeed31],0x26        # 0xffff03cf
  0169e:    	jne    0x327a1
  016a4:    	mov    esi,DWORD PTR [rip+0x4d6]        # 0x1b80
  016aa:    	cmp    esi,0xffffffff
  016ad:    	je     0x327b0
  016b3:    	cmp    WORD PTR [rdi+0x2],0x3
  016b8:    	jne    0x16d8
  016be:    	cmp    esi,0x6
  016c1:    	jge    0x16d8
  016c7: ff 	mov    rax,QWORD PTR [r14-0xa8]
  016ce:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  016d3:    	jmp    0x1734
  016d8:    	sub    rsp,0x20
  016dc:    	movq   QWORD PTR [rsp],xmm2
  016e1:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e7:    	movq   QWORD PTR [rsp+0x10],xmm4
  016ed:    	movq   QWORD PTR [rsp+0x18],xmm5
  016f3: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  016fa: 95 	movabs rax,0x55955d9e10a0
  01704:    	call   rax
  01706:    	movq   xmm2,QWORD PTR [rsp]
  0170b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01711:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01717:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0171d:    	add    rsp,0x20
  01721: 95 	movabs r13,0x55955e17c550
  0172b:    	test   rax,rax
  0172e:    	je     0xfffec138
:00107 
:00108 %14 = dynvar(2, %2)
  01734:    	mov    rax,QWORD PTR [r14-0x18]
  01738:    	mov    rax,QWORD PTR [rax]
  0173b:    	mov    rax,QWORD PTR [rax-0x28]
  0173f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00109 %15 = dynvar(2, %2)
  01746:    	mov    rax,QWORD PTR [r14-0x18]
  0174a:    	mov    rax,QWORD PTR [rax]
  0174d:    	mov    rax,QWORD PTR [rax-0x28]
  01751: ff 	mov    QWORD PTR [r14-0xa8],rax
:00110 %15 = %15.call z()                   [Vec]
  01758: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0175f: 00 	test   rdi,0x7
  01766:    	jne    0x32819
  0176c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01770:    	jne    0x32819
  01776: 26 	cmp    DWORD PTR [rip+0xfffffffffffeec52],0x26        # 0xffff03cf
  0177d:    	jne    0x32819
  01783:    	mov    esi,DWORD PTR [rip+0x3ff]        # 0x1b88
  01789:    	cmp    esi,0xffffffff
  0178c:    	je     0x32828
  01792:    	cmp    WORD PTR [rdi+0x2],0x3
  01797:    	jne    0x17b0
  0179d:    	cmp    esi,0x6
  017a0:    	jge    0x17b0
  017a6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  017ab:    	jmp    0x17e6
  017b0:    	sub    rsp,0x20
  017b4:    	movq   QWORD PTR [rsp],xmm3
  017b9:    	movq   QWORD PTR [rsp+0x8],xmm4
  017bf:    	movq   QWORD PTR [rsp+0x10],xmm5
  017c5: 95 	movabs rax,0x55955d9e0e20
  017cf:    	call   rax
  017d1:    	movq   xmm3,QWORD PTR [rsp]
  017d6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017dc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017e2:    	add    rsp,0x20
  017e6: ff 	mov    QWORD PTR [r14-0xa8],rax
:00111 
:00112 %16 = %13.call z()                   [Vec]
  017ed: ff 	mov    rdi,QWORD PTR [r14-0x98]
  017f4: 00 	test   rdi,0x7
  017fb:    	jne    0x3287b
  01801:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01805:    	jne    0x3287b
  0180b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeebbd],0x26        # 0xffff03cf
  01812:    	jne    0x3287b
  01818:    	mov    esi,DWORD PTR [rip+0x372]        # 0x1b90
  0181e:    	cmp    esi,0xffffffff
  01821:    	je     0x3288a
  01827:    	cmp    WORD PTR [rdi+0x2],0x3
  0182c:    	jne    0x1845
  01832:    	cmp    esi,0x6
  01835:    	jge    0x1845
  0183b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01840:    	jmp    0x186f
  01845:    	sub    rsp,0x10
  01849:    	movq   QWORD PTR [rsp],xmm3
  0184e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01854: 95 	movabs rax,0x55955d9e0e20
  0185e:    	call   rax
  01860:    	movq   xmm3,QWORD PTR [rsp]
  01865:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0186b:    	add    rsp,0x10
  0186f: ff 	mov    QWORD PTR [r14-0xb0],rax
:00113 
:00114 %15 = %15 + %16                      [Float][Float]
  01876: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0187d: 00 	test   rdi,0x1
  01884:    	jne    0x328d1
  0188a: 00 	test   rdi,0x2
  01891:    	je     0x18cd
  01897:    	xorps  xmm2,xmm2
  0189a: 00 	movabs rax,0x8000000000000002
  018a4:    	cmp    rdi,rax
  018a7:    	je     0x18df
  018ad:    	mov    rax,rdi
  018b0:    	sar    rax,0x3f
  018b4:    	add    rax,0x2
  018b8:    	and    rdi,0xfffffffffffffffc
  018bc:    	or     rdi,rax
  018bf:    	rol    rdi,0x3d
  018c3:    	movq   xmm2,rdi
  018c8:    	jmp    0x18df
  018cd:    	call   0xfffec191
  018d2:    	test   rax,rax
  018d5:    	je     0x328d1
  018db:    	movq   xmm2,xmm0
  018df: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  018e6: 00 	test   rdi,0x1
  018ed:    	jne    0x328e0
  018f3: 00 	test   rdi,0x2
  018fa:    	je     0x1936
  01900:    	xorps  xmm5,xmm5
  01903: 00 	movabs rax,0x8000000000000002
  0190d:    	cmp    rdi,rax
  01910:    	je     0x1948
  01916:    	mov    rax,rdi
  01919:    	sar    rax,0x3f
  0191d:    	add    rax,0x2
  01921:    	and    rdi,0xfffffffffffffffc
  01925:    	or     rdi,rax
  01928:    	rol    rdi,0x3d
  0192c:    	movq   xmm5,rdi
  01931:    	jmp    0x1948
  01936:    	call   0xfffec191
  0193b:    	test   rax,rax
  0193e:    	je     0x328e0
  01944:    	movq   xmm5,xmm0
  01948:    	addsd  xmm2,xmm5
:00115 _ = %14.call z=(%15; 1)              [Vec]
  0194c:    	movq   xmm0,xmm2
  01950:    	call   0xfffec2b5
  01955: ff 	mov    QWORD PTR [r14-0xa8],rax
  0195c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01963: 00 	test   rdi,0x7
  0196a:    	jne    0x328ef
  01970:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01974:    	jne    0x328ef
  0197a: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea4e],0x26        # 0xffff03cf
  01981:    	jne    0x328ef
  01987:    	mov    esi,DWORD PTR [rip+0x20b]        # 0x1b98
  0198d:    	cmp    esi,0xffffffff
  01990:    	je     0x328fe
  01996:    	cmp    WORD PTR [rdi+0x2],0x3
  0199b:    	jne    0x19bb
  019a1:    	cmp    esi,0x6
  019a4:    	jge    0x19bb
  019aa: ff 	mov    rax,QWORD PTR [r14-0xa8]
  019b1:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  019b6:    	jmp    0x1a17
  019bb:    	sub    rsp,0x20
  019bf:    	movq   QWORD PTR [rsp],xmm2
  019c4:    	movq   QWORD PTR [rsp+0x8],xmm3
  019ca:    	movq   QWORD PTR [rsp+0x10],xmm4
  019d0:    	movq   QWORD PTR [rsp+0x18],xmm5
  019d6: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  019dd: 95 	movabs rax,0x55955d9e10a0
  019e7:    	call   rax
  019e9:    	movq   xmm2,QWORD PTR [rsp]
  019ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  019f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  019fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a00:    	add    rsp,0x20
  01a04: 95 	movabs r13,0x55955e17c5e0
  01a0e:    	test   rax,rax
  01a11:    	je     0xfffec138
:00116 
:00117 %14 = %15
:00118 ret %14
  01a17:    	movq   xmm0,xmm2
  01a1b:    	call   0xfffec2b5
  01a20: ff 	mov    QWORD PTR [r14-0xa0],rax
  01a27: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a2e:    	leave  
  01a2f:    	ret    
:00119 %14 = nil
  01a30: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00120 ret %14
  01a3b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a42:    	leave  
  01a43:    	ret    
==> start whole compile: intersect FuncId(99) self_class:Plane start:[00000] bytecode:0x55955e173c50
<== finished compile. elapsed:104.9µs
offset:Pos(88712) code: 5299 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x90
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x30dcb
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045:    	mov    rdi,QWORD PTR [r14-0x30]
  00049: 00 	test   rdi,0x7
  00050:    	jne    0x30dda
  00056:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005a:    	jne    0x30dda
:00000 init_method reg:12 arg:2 pos:2 req:2 block:0 stack_offset:9
:00001 %7 = @p: Plane[IvarId(0)]
  00060:    	mov    rdi,QWORD PTR [r14-0x30]
  00064:    	mov    rax,QWORD PTR [rdi+0x10]
  00068:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0006c:    	mov    rdi,QWORD PTR [r14-0x30]
  00070:    	mov    rax,QWORD PTR [rdi+0x18]
  00074:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x68]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x30de9
  00089:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0008d:    	jne    0x30de9
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffee799],0x26        # 0xfffee833
  0009a:    	jne    0x30de9
  000a0: 00 	cmp    DWORD PTR [rip+0xfffffffffffee790],0x0        # 0xfffee837
  000a7:    	je     0xbf
  000ad:    	mov    rdi,r12
  000b0:    	mov    rsi,QWORD PTR [rbx]
  000b3: 95 	movabs rax,0x55955d9a3d50
  000bd:    	call   rax
  000bf: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000c8:    	mov    rax,QWORD PTR [r14-0x68]
  000cc:    	mov    QWORD PTR [rsp-0x40],rax
  000d1: 00 	mov    rdi,0x1
  000d8:    	mov    rax,QWORD PTR [r14-0x70]
  000dc:    	mov    QWORD PTR [rsp-0x48],rax
  000e1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000ea: 05 	movabs rax,0x100050000005d
  000f4:    	mov    QWORD PTR [rsp-0x30],rax
  000f9: 95 	movabs r13,0x55955e1715b0
  00103:    	mov    rsi,QWORD PTR [rbx]
  00106:    	mov    QWORD PTR [rsp-0x18],rsi
  0010b:    	lea    rsi,[rsp-0x18]
  00110:    	mov    QWORD PTR [rbx],rsi
  00113:    	lea    r14,[rsp-0x10]
  00118:    	mov    QWORD PTR [rsp-0x20],r14
  0011d:    	call   0xfffef510
  00122:    	lea    r14,[rbp-0x8]
  00126:    	mov    QWORD PTR [rbx],r14
  00129:    	mov    r14,QWORD PTR [rbp-0x10]
  0012d: 95 	movabs r13,0x55955e173ca0
  00137:    	test   rax,rax
  0013a:    	je     0xfffea59c
  00140:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00005 %3 = neg %3                          [Float]
  00144:    	mov    rdi,QWORD PTR [r14-0x48]
  00148: 00 	test   rdi,0x1
  0014f:    	jne    0x30df8
  00155: 00 	test   rdi,0x2
  0015c:    	je     0x198
  00162:    	xorps  xmm2,xmm2
  00165: 00 	movabs rax,0x8000000000000002
  0016f:    	cmp    rdi,rax
  00172:    	je     0x1aa
  00178:    	mov    rax,rdi
  0017b:    	sar    rax,0x3f
  0017f:    	add    rax,0x2
  00183:    	and    rdi,0xfffffffffffffffc
  00187:    	or     rdi,rax
  0018a:    	rol    rdi,0x3d
  0018e:    	movq   xmm2,rdi
  00193:    	jmp    0x1aa
  00198:    	call   0xfffea5f5
  0019d:    	test   rax,rax
  001a0:    	je     0x30df8
  001a6:    	movq   xmm2,xmm0
  001aa: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1307]        # 0x14b8
:00006 %7 = %1.call dir()                   [Ray]
  001b1:    	movq   xmm0,xmm2
  001b5:    	call   0xfffea719
  001ba:    	mov    QWORD PTR [r14-0x48],rax
  001be:    	mov    rdi,QWORD PTR [r14-0x38]
  001c2: 00 	test   rdi,0x7
  001c9:    	jne    0x30e07
  001cf:    	cmp    DWORD PTR [rdi+0x4],0x31
  001d3:    	jne    0x30e07
  001d9: 26 	cmp    DWORD PTR [rip+0xfffffffffffee653],0x26        # 0xfffee833
  001e0:    	jne    0x30e07
  001e6:    	mov    esi,DWORD PTR [rip+0x12d8]        # 0x14c4
  001ec:    	cmp    esi,0xffffffff
  001ef:    	je     0x30e16
  001f5:    	cmp    WORD PTR [rdi+0x2],0x3
  001fa:    	jne    0x213
  00200:    	cmp    esi,0x6
  00203:    	jge    0x213
  00209:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020e:    	jmp    0x21f
  00213: 95 	movabs rax,0x55955d9e0e20
  0021d:    	call   rax
  0021f:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00008 %8 = @n: Plane[IvarId(1)]
  00223:    	mov    rdi,QWORD PTR [r14-0x30]
  00227:    	mov    rax,QWORD PTR [rdi+0x18]
  0022b:    	mov    QWORD PTR [r14-0x70],rax
:00009 %4 = %7.call vdot(%8; 1)             [Vec]
  0022f:    	mov    rdi,QWORD PTR [r14-0x68]
  00233: 00 	test   rdi,0x7
  0023a:    	jne    0x30e3f
  00240:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00244:    	jne    0x30e3f
  0024a: 26 	cmp    DWORD PTR [rip+0xfffffffffffee5e2],0x26        # 0xfffee833
  00251:    	jne    0x30e3f
  00257: 00 	cmp    DWORD PTR [rip+0xfffffffffffee5d9],0x0        # 0xfffee837
  0025e:    	je     0x276
  00264:    	mov    rdi,r12
  00267:    	mov    rsi,QWORD PTR [rbx]
  0026a: 95 	movabs rax,0x55955d9a3d50
  00274:    	call   rax
  00276: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0027f:    	mov    rax,QWORD PTR [r14-0x68]
  00283:    	mov    QWORD PTR [rsp-0x40],rax
  00288: 00 	mov    rdi,0x1
  0028f:    	mov    rax,QWORD PTR [r14-0x70]
  00293:    	mov    QWORD PTR [rsp-0x48],rax
  00298: 00 	mov    QWORD PTR [rsp-0x38],0x0
  002a1: 05 	movabs rax,0x100050000005d
  002ab:    	mov    QWORD PTR [rsp-0x30],rax
  002b0: 95 	movabs r13,0x55955e1715b0
  002ba:    	mov    rsi,QWORD PTR [rbx]
  002bd:    	mov    QWORD PTR [rsp-0x18],rsi
  002c2:    	lea    rsi,[rsp-0x18]
  002c7:    	mov    QWORD PTR [rbx],rsi
  002ca:    	lea    r14,[rsp-0x10]
  002cf:    	mov    QWORD PTR [rsp-0x20],r14
  002d4:    	call   0xfffef510
  002d9:    	lea    r14,[rbp-0x8]
  002dd:    	mov    QWORD PTR [rbx],r14
  002e0:    	mov    r14,QWORD PTR [rbp-0x10]
  002e4: 95 	movabs r13,0x55955e173d00
  002ee:    	test   rax,rax
  002f1:    	je     0xfffea59c
  002f7:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %5 = %4
  002fb:    	mov    rax,QWORD PTR [r14-0x50]
  002ff:    	mov    QWORD PTR [r14-0x58],rax
:00012 %7 = literal[0.0]
  00303: 00 	movq   xmm2,QWORD PTR [rip+0x11bd]        # 0x14c8
  0030b: 00 	movabs rax,0x8000000000000002
  00315:    	mov    QWORD PTR [r14-0x68],rax
:00013 _%7 = %4 < %7                        [Float][Float]
:00014 condnotbr _%7 =>:00018
  00319:    	mov    rdi,QWORD PTR [r14-0x50]
  0031d: 00 	test   rdi,0x1
  00324:    	jne    0x30e4e
  0032a: 00 	test   rdi,0x2
  00331:    	je     0x36d
  00337:    	xorps  xmm3,xmm3
  0033a: 00 	movabs rax,0x8000000000000002
  00344:    	cmp    rdi,rax
  00347:    	je     0x37f
  0034d:    	mov    rax,rdi
  00350:    	sar    rax,0x3f
  00354:    	add    rax,0x2
  00358:    	and    rdi,0xfffffffffffffffc
  0035c:    	or     rdi,rax
  0035f:    	rol    rdi,0x3d
  00363:    	movq   xmm3,rdi
  00368:    	jmp    0x37f
  0036d:    	call   0xfffea5f5
  00372:    	test   rax,rax
  00375:    	je     0x30e4e
  0037b:    	movq   xmm3,xmm0
  0037f:    	ucomisd xmm3,xmm2
  00383:    	jae    0x30e5d
:00015 %5 = %4
:00016 %5 = neg %5                          [Float]
  00389:    	movq   xmm4,xmm3
  0038d: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1144]        # 0x14d8
:00017 br =>:00018
  00394:    	jmp    0x30e76
:00018 %7 = literal[1e-17]
  00399: 00 	movq   xmm2,QWORD PTR [rip+0x1147]        # 0x14e8
  003a1: aa 	movabs rax,0xe33877aa3236a4ba
  003ab:    	mov    QWORD PTR [r14-0x68],rax
:00019 _%7 = %5 < %7                        [Float][Float]
:00020 condnotbr _%7 =>:00024
  003af:    	mov    rdi,QWORD PTR [r14-0x58]
  003b3: 00 	test   rdi,0x1
  003ba:    	jne    0x30e9c
  003c0: 00 	test   rdi,0x2
  003c7:    	je     0x403
  003cd:    	xorps  xmm4,xmm4
  003d0: 00 	movabs rax,0x8000000000000002
  003da:    	cmp    rdi,rax
  003dd:    	je     0x415
  003e3:    	mov    rax,rdi
  003e6:    	sar    rax,0x3f
  003ea:    	add    rax,0x2
  003ee:    	and    rdi,0xfffffffffffffffc
  003f2:    	or     rdi,rax
  003f5:    	rol    rdi,0x3d
  003f9:    	movq   xmm4,rdi
  003fe:    	jmp    0x415
  00403:    	call   0xfffea5f5
  00408:    	test   rax,rax
  0040b:    	je     0x30e9c
  00411:    	movq   xmm4,xmm0
  00415:    	ucomisd xmm4,xmm2
  00419:    	jae    0x42d
:00021 %7 = nil
  0041f: 00 	mov    QWORD PTR [r14-0x68],0x4
:00022 ret %7
  00427:    	mov    rax,QWORD PTR [r14-0x68]
  0042b:    	leave  
  0042c:    	ret    
:00024 %7 = %1.call org()                   [Ray]
  0042d:    	mov    rdi,QWORD PTR [r14-0x38]
  00431: 00 	test   rdi,0x7
  00438:    	jne    0x30eab
  0043e:    	cmp    DWORD PTR [rdi+0x4],0x31
  00442:    	jne    0x30eab
  00448: 26 	cmp    DWORD PTR [rip+0xfffffffffffee3e4],0x26        # 0xfffee833
  0044f:    	jne    0x30eab
  00455:    	mov    esi,DWORD PTR [rip+0x1099]        # 0x14f4
  0045b:    	cmp    esi,0xffffffff
  0045e:    	je     0x30eba
  00464:    	cmp    WORD PTR [rdi+0x2],0x3
  00469:    	jne    0x482
  0046f:    	cmp    esi,0x6
  00472:    	jge    0x482
  00478:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0047d:    	jmp    0x48e
  00482: 95 	movabs rax,0x55955d9e0e20
  0048c:    	call   rax
  0048e:    	mov    QWORD PTR [r14-0x68],rax
:00025 
:00026 %8 = @n: Plane[IvarId(1)]
  00492:    	mov    rdi,QWORD PTR [r14-0x30]
  00496:    	mov    rax,QWORD PTR [rdi+0x18]
  0049a:    	mov    QWORD PTR [r14-0x70],rax
:00027 %7 = %7.call vdot(%8; 1)             [Vec]
  0049e:    	mov    rdi,QWORD PTR [r14-0x68]
  004a2: 00 	test   rdi,0x7
  004a9:    	jne    0x30ee3
  004af:    	cmp    DWORD PTR [rdi+0x4],0x2b
  004b3:    	jne    0x30ee3
  004b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffee373],0x26        # 0xfffee833
  004c0:    	jne    0x30ee3
  004c6: 00 	cmp    DWORD PTR [rip+0xfffffffffffee36a],0x0        # 0xfffee837
  004cd:    	je     0x4e5
  004d3:    	mov    rdi,r12
  004d6:    	mov    rsi,QWORD PTR [rbx]
  004d9: 95 	movabs rax,0x55955d9a3d50
  004e3:    	call   rax
  004e5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  004ee:    	mov    rax,QWORD PTR [r14-0x68]
  004f2:    	mov    QWORD PTR [rsp-0x40],rax
  004f7: 00 	mov    rdi,0x1
  004fe:    	mov    rax,QWORD PTR [r14-0x70]
  00502:    	mov    QWORD PTR [rsp-0x48],rax
  00507: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00510: 05 	movabs rax,0x100050000005d
  0051a:    	mov    QWORD PTR [rsp-0x30],rax
  0051f: 95 	movabs r13,0x55955e1715b0
  00529:    	mov    rsi,QWORD PTR [rbx]
  0052c:    	mov    QWORD PTR [rsp-0x18],rsi
  00531:    	lea    rsi,[rsp-0x18]
  00536:    	mov    QWORD PTR [rbx],rsi
  00539:    	lea    r14,[rsp-0x10]
  0053e:    	mov    QWORD PTR [rsp-0x20],r14
  00543:    	call   0xfffef510
  00548:    	lea    r14,[rbp-0x8]
  0054c:    	mov    QWORD PTR [rbx],r14
  0054f:    	mov    r14,QWORD PTR [rbp-0x10]
  00553: 95 	movabs r13,0x55955e173e20
  0055d:    	test   rax,rax
  00560:    	je     0xfffea59c
  00566:    	mov    QWORD PTR [r14-0x68],rax
:00028 
:00029 %7 = %7 + %3                         [Float][Float]
  0056a:    	mov    rdi,QWORD PTR [r14-0x68]
  0056e: 00 	test   rdi,0x1
  00575:    	jne    0x30ef2
  0057b: 00 	test   rdi,0x2
  00582:    	je     0x5be
  00588:    	xorps  xmm2,xmm2
  0058b: 00 	movabs rax,0x8000000000000002
  00595:    	cmp    rdi,rax
  00598:    	je     0x5d0
  0059e:    	mov    rax,rdi
  005a1:    	sar    rax,0x3f
  005a5:    	add    rax,0x2
  005a9:    	and    rdi,0xfffffffffffffffc
  005ad:    	or     rdi,rax
  005b0:    	rol    rdi,0x3d
  005b4:    	movq   xmm2,rdi
  005b9:    	jmp    0x5d0
  005be:    	call   0xfffea5f5
  005c3:    	test   rax,rax
  005c6:    	je     0x30ef2
  005cc:    	movq   xmm2,xmm0
  005d0:    	mov    rdi,QWORD PTR [r14-0x48]
  005d4: 00 	test   rdi,0x1
  005db:    	jne    0x30f01
  005e1: 00 	test   rdi,0x2
  005e8:    	je     0x624
  005ee:    	xorps  xmm3,xmm3
  005f1: 00 	movabs rax,0x8000000000000002
  005fb:    	cmp    rdi,rax
  005fe:    	je     0x636
  00604:    	mov    rax,rdi
  00607:    	sar    rax,0x3f
  0060b:    	add    rax,0x2
  0060f:    	and    rdi,0xfffffffffffffffc
  00613:    	or     rdi,rax
  00616:    	rol    rdi,0x3d
  0061a:    	movq   xmm3,rdi
  0061f:    	jmp    0x636
  00624:    	call   0xfffea5f5
  00629:    	test   rax,rax
  0062c:    	je     0x30f01
  00632:    	movq   xmm3,xmm0
  00636:    	addsd  xmm2,xmm3
:00030 %7 = neg %7                          [Float]
  0063a: 00 	xorps  xmm2,XMMWORD PTR [rip+0xeb7]        # 0x14f8
:00031 %6 = %7 / %4                         [Float][Float]
  00641:    	mov    rdi,QWORD PTR [r14-0x50]
  00645: 00 	test   rdi,0x1
  0064c:    	jne    0x30f10
  00652: 00 	test   rdi,0x2
  00659:    	je     0x695
  0065f:    	xorps  xmm4,xmm4
  00662: 00 	movabs rax,0x8000000000000002
  0066c:    	cmp    rdi,rax
  0066f:    	je     0x6a7
  00675:    	mov    rax,rdi
  00678:    	sar    rax,0x3f
  0067c:    	add    rax,0x2
  00680:    	and    rdi,0xfffffffffffffffc
  00684:    	or     rdi,rax
  00687:    	rol    rdi,0x3d
  0068b:    	movq   xmm4,rdi
  00690:    	jmp    0x6a7
  00695:    	call   0xfffea5f5
  0069a:    	test   rax,rax
  0069d:    	je     0x30f10
  006a3:    	movq   xmm4,xmm0
  006a7:    	movq   xmm5,xmm2
  006ab:    	movq   rax,xmm4
  006b0:    	test   rax,rax
  006b3:    	je     0xfffea5c1
  006b9:    	divsd  xmm5,xmm4
:00032 %7 = literal[0.0]
  006bd: 00 	movq   xmm2,QWORD PTR [rip+0xe43]        # 0x1508
  006c5: 00 	movabs rax,0x8000000000000002
  006cf:    	mov    QWORD PTR [r14-0x68],rax
:00033 _%7 = %6 > %7                        [Float][Float]
:00034 condnotbr _%7 =>:00083
  006d3:    	ucomisd xmm5,xmm2
  006d7:    	jbe    0x3167d
:00035 %7 = %2.call t()                     [Isect]
  006dd:    	movq   xmm0,xmm5
  006e1:    	call   0xfffea719
  006e6:    	mov    QWORD PTR [r14-0x60],rax
  006ea:    	mov    rdi,QWORD PTR [r14-0x40]
  006ee: 00 	test   rdi,0x7
  006f5:    	jne    0x30f2c
  006fb:    	cmp    DWORD PTR [rdi+0x4],0x33
  006ff:    	jne    0x30f2c
  00705: 26 	cmp    DWORD PTR [rip+0xfffffffffffee127],0x26        # 0xfffee833
  0070c:    	jne    0x30f2c
  00712:    	mov    esi,DWORD PTR [rip+0xdfc]        # 0x1514
  00718:    	cmp    esi,0xffffffff
  0071b:    	je     0x30f3b
  00721:    	cmp    WORD PTR [rdi+0x2],0x3
  00726:    	jne    0x73f
  0072c:    	cmp    esi,0x6
  0072f:    	jge    0x73f
  00735:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0073a:    	jmp    0x74b
  0073f: 95 	movabs rax,0x55955d9e0e20
  00749:    	call   rax
  0074b:    	mov    QWORD PTR [r14-0x68],rax
:00036 
:00037 _%7 = %6 < %7                        [Float][Float]
:00038 condnotbr _%7 =>:00083
  0074f:    	mov    rdi,QWORD PTR [r14-0x60]
  00753: 00 	test   rdi,0x1
  0075a:    	jne    0x30f64
  00760: 00 	test   rdi,0x2
  00767:    	je     0x7a3
  0076d:    	xorps  xmm2,xmm2
  00770: 00 	movabs rax,0x8000000000000002
  0077a:    	cmp    rdi,rax
  0077d:    	je     0x7b5
  00783:    	mov    rax,rdi
  00786:    	sar    rax,0x3f
  0078a:    	add    rax,0x2
  0078e:    	and    rdi,0xfffffffffffffffc
  00792:    	or     rdi,rax
  00795:    	rol    rdi,0x3d
  00799:    	movq   xmm2,rdi
  0079e:    	jmp    0x7b5
  007a3:    	call   0xfffea5f5
  007a8:    	test   rax,rax
  007ab:    	je     0x30f64
  007b1:    	movq   xmm2,xmm0
  007b5:    	mov    rdi,QWORD PTR [r14-0x68]
  007b9: 00 	test   rdi,0x1
  007c0:    	jne    0x30f73
  007c6: 00 	test   rdi,0x2
  007cd:    	je     0x809
  007d3:    	xorps  xmm3,xmm3
  007d6: 00 	movabs rax,0x8000000000000002
  007e0:    	cmp    rdi,rax
  007e3:    	je     0x81b
  007e9:    	mov    rax,rdi
  007ec:    	sar    rax,0x3f
  007f0:    	add    rax,0x2
  007f4:    	and    rdi,0xfffffffffffffffc
  007f8:    	or     rdi,rax
  007fb:    	rol    rdi,0x3d
  007ff:    	movq   xmm3,rdi
  00804:    	jmp    0x81b
  00809:    	call   0xfffea5f5
  0080e:    	test   rax,rax
  00811:    	je     0x30f73
  00817:    	movq   xmm3,xmm0
  0081b:    	ucomisd xmm2,xmm3
  0081f:    	jae    0x316a3
:00039 %7 = literal[true]
  00825: 00 	mov    rax,0x1c
  0082c:    	mov    QWORD PTR [r14-0x68],rax
:00040 _ = %2.call hit=(%7; 1)              [Isect]
  00830:    	mov    rdi,QWORD PTR [r14-0x40]
  00834: 00 	test   rdi,0x7
  0083b:    	jne    0x30f82
  00841:    	cmp    DWORD PTR [rdi+0x4],0x33
  00845:    	jne    0x30f82
  0084b: 26 	cmp    DWORD PTR [rip+0xfffffffffffedfe1],0x26        # 0xfffee833
  00852:    	jne    0x30f82
  00858:    	mov    esi,DWORD PTR [rip+0xcbe]        # 0x151c
  0085e:    	cmp    esi,0xffffffff
  00861:    	je     0x30f91
  00867:    	cmp    WORD PTR [rdi+0x2],0x3
  0086c:    	jne    0x889
  00872:    	cmp    esi,0x6
  00875:    	jge    0x889
  0087b:    	mov    rax,QWORD PTR [r14-0x68]
  0087f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00884:    	jmp    0x8ac
  00889:    	mov    rdx,QWORD PTR [r14-0x68]
  0088d: 95 	movabs rax,0x55955d9e10a0
  00897:    	call   rax
  00899: 95 	movabs r13,0x55955e173ef0
  008a3:    	test   rax,rax
  008a6:    	je     0xfffea59c
:00041 
:00042 _ = %2.call t=(%6; 1)                [Isect]
  008ac:    	mov    rdi,QWORD PTR [r14-0x40]
  008b0: 00 	test   rdi,0x7
  008b7:    	jne    0x30fc1
  008bd:    	cmp    DWORD PTR [rdi+0x4],0x33
  008c1:    	jne    0x30fc1
  008c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffedf65],0x26        # 0xfffee833
  008ce:    	jne    0x30fc1
  008d4:    	mov    esi,DWORD PTR [rip+0xc4a]        # 0x1524
  008da:    	cmp    esi,0xffffffff
  008dd:    	je     0x30fd0
  008e3:    	cmp    WORD PTR [rdi+0x2],0x3
  008e8:    	jne    0x905
  008ee:    	cmp    esi,0x6
  008f1:    	jge    0x905
  008f7:    	mov    rax,QWORD PTR [r14-0x60]
  008fb:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00900:    	jmp    0x928
  00905:    	mov    rdx,QWORD PTR [r14-0x60]
  00909: 95 	movabs rax,0x55955d9e10a0
  00913:    	call   rax
  00915: 95 	movabs r13,0x55955e173f10
  0091f:    	test   rax,rax
  00922:    	je     0xfffea59c
:00043 
:00044 %7 = @n: Plane[IvarId(1)]
  00928:    	mov    rdi,QWORD PTR [r14-0x30]
  0092c:    	mov    rax,QWORD PTR [rdi+0x18]
  00930:    	mov    QWORD PTR [r14-0x68],rax
:00045 _ = %2.call n=(%7; 1)                [Isect]
  00934:    	mov    rdi,QWORD PTR [r14-0x40]
  00938: 00 	test   rdi,0x7
  0093f:    	jne    0x31000
  00945:    	cmp    DWORD PTR [rdi+0x4],0x33
  00949:    	jne    0x31000
  0094f: 26 	cmp    DWORD PTR [rip+0xfffffffffffededd],0x26        # 0xfffee833
  00956:    	jne    0x31000
  0095c:    	mov    esi,DWORD PTR [rip+0xbca]        # 0x152c
  00962:    	cmp    esi,0xffffffff
  00965:    	je     0x3100f
  0096b:    	cmp    WORD PTR [rdi+0x2],0x3
  00970:    	jne    0x98d
  00976:    	cmp    esi,0x6
  00979:    	jge    0x98d
  0097f:    	mov    rax,QWORD PTR [r14-0x68]
  00983:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00988:    	jmp    0x9b0
  0098d:    	mov    rdx,QWORD PTR [r14-0x68]
  00991: 95 	movabs rax,0x55955d9e10a0
  0099b:    	call   rax
  0099d: 95 	movabs r13,0x55955e173f40
  009a7:    	test   rax,rax
  009aa:    	je     0xfffea59c
:00046 
:00047 %7 = const[Vec]                      [Vec]
  009b0: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffede91]        # 0xfffee848
  009b7: 00 	cmp    rax,QWORD PTR [rip+0xb8a]        # 0x1548
  009be:    	jne    0x3103f
  009c4: 00 	mov    rax,QWORD PTR [rip+0xb6d]        # 0x1538
  009cb:    	mov    QWORD PTR [r14-0x68],rax
:00048 %8 = %1.call org()                   [Ray]
  009cf:    	mov    rdi,QWORD PTR [r14-0x38]
  009d3: 00 	test   rdi,0x7
  009da:    	jne    0x31085
  009e0:    	cmp    DWORD PTR [rdi+0x4],0x31
  009e4:    	jne    0x31085
  009ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffede42],0x26        # 0xfffee833
  009f1:    	jne    0x31085
  009f7:    	mov    esi,DWORD PTR [rip+0xb57]        # 0x1554
  009fd:    	cmp    esi,0xffffffff
  00a00:    	je     0x31094
  00a06:    	cmp    WORD PTR [rdi+0x2],0x3
  00a0b:    	jne    0xa24
  00a11:    	cmp    esi,0x6
  00a14:    	jge    0xa24
  00a1a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a1f:    	jmp    0xa30
  00a24: 95 	movabs rax,0x55955d9e0e20
  00a2e:    	call   rax
  00a30:    	mov    QWORD PTR [r14-0x70],rax
:00049 
:00050 %8 = %8.call x()                     [Vec]
  00a34:    	mov    rdi,QWORD PTR [r14-0x70]
  00a38: 00 	test   rdi,0x7
  00a3f:    	jne    0x310bd
  00a45:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a49:    	jne    0x310bd
  00a4f: 26 	cmp    DWORD PTR [rip+0xfffffffffffedddd],0x26        # 0xfffee833
  00a56:    	jne    0x310bd
  00a5c:    	mov    esi,DWORD PTR [rip+0xafa]        # 0x155c
  00a62:    	cmp    esi,0xffffffff
  00a65:    	je     0x310cc
  00a6b:    	cmp    WORD PTR [rdi+0x2],0x3
  00a70:    	jne    0xa89
  00a76:    	cmp    esi,0x6
  00a79:    	jge    0xa89
  00a7f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a84:    	jmp    0xa95
  00a89: 95 	movabs rax,0x55955d9e0e20
  00a93:    	call   rax
  00a95:    	mov    QWORD PTR [r14-0x70],rax
:00051 
:00052 %9 = %1.call dir()                   [Ray]
  00a99:    	mov    rdi,QWORD PTR [r14-0x38]
  00a9d: 00 	test   rdi,0x7
  00aa4:    	jne    0x310f5
  00aaa:    	cmp    DWORD PTR [rdi+0x4],0x31
  00aae:    	jne    0x310f5
  00ab4: 26 	cmp    DWORD PTR [rip+0xfffffffffffedd78],0x26        # 0xfffee833
  00abb:    	jne    0x310f5
  00ac1:    	mov    esi,DWORD PTR [rip+0xa9d]        # 0x1564
  00ac7:    	cmp    esi,0xffffffff
  00aca:    	je     0x31104
  00ad0:    	cmp    WORD PTR [rdi+0x2],0x3
  00ad5:    	jne    0xaee
  00adb:    	cmp    esi,0x6
  00ade:    	jge    0xaee
  00ae4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ae9:    	jmp    0xafa
  00aee: 95 	movabs rax,0x55955d9e0e20
  00af8:    	call   rax
  00afa:    	mov    QWORD PTR [r14-0x78],rax
:00053 
:00054 %9 = %9.call x()                     [Vec]
  00afe:    	mov    rdi,QWORD PTR [r14-0x78]
  00b02: 00 	test   rdi,0x7
  00b09:    	jne    0x3112d
  00b0f:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00b13:    	jne    0x3112d
  00b19: 26 	cmp    DWORD PTR [rip+0xfffffffffffedd13],0x26        # 0xfffee833
  00b20:    	jne    0x3112d
  00b26:    	mov    esi,DWORD PTR [rip+0xa40]        # 0x156c
  00b2c:    	cmp    esi,0xffffffff
  00b2f:    	je     0x3113c
  00b35:    	cmp    WORD PTR [rdi+0x2],0x3
  00b3a:    	jne    0xb53
  00b40:    	cmp    esi,0x6
  00b43:    	jge    0xb53
  00b49:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b4e:    	jmp    0xb5f
  00b53: 95 	movabs rax,0x55955d9e0e20
  00b5d:    	call   rax
  00b5f:    	mov    QWORD PTR [r14-0x78],rax
:00055 
:00056 %9 = %6 * %9                         [Float][Float]
  00b63:    	mov    rdi,QWORD PTR [r14-0x60]
  00b67: 00 	test   rdi,0x1
  00b6e:    	jne    0x31165
  00b74: 00 	test   rdi,0x2
  00b7b:    	je     0xbb7
  00b81:    	xorps  xmm2,xmm2
  00b84: 00 	movabs rax,0x8000000000000002
  00b8e:    	cmp    rdi,rax
  00b91:    	je     0xbc9
  00b97:    	mov    rax,rdi
  00b9a:    	sar    rax,0x3f
  00b9e:    	add    rax,0x2
  00ba2:    	and    rdi,0xfffffffffffffffc
  00ba6:    	or     rdi,rax
  00ba9:    	rol    rdi,0x3d
  00bad:    	movq   xmm2,rdi
  00bb2:    	jmp    0xbc9
  00bb7:    	call   0xfffea5f5
  00bbc:    	test   rax,rax
  00bbf:    	je     0x31165
  00bc5:    	movq   xmm2,xmm0
  00bc9:    	mov    rdi,QWORD PTR [r14-0x78]
  00bcd: 00 	test   rdi,0x1
  00bd4:    	jne    0x31174
  00bda: 00 	test   rdi,0x2
  00be1:    	je     0xc1d
  00be7:    	xorps  xmm3,xmm3
  00bea: 00 	movabs rax,0x8000000000000002
  00bf4:    	cmp    rdi,rax
  00bf7:    	je     0xc2f
  00bfd:    	mov    rax,rdi
  00c00:    	sar    rax,0x3f
  00c04:    	add    rax,0x2
  00c08:    	and    rdi,0xfffffffffffffffc
  00c0c:    	or     rdi,rax
  00c0f:    	rol    rdi,0x3d
  00c13:    	movq   xmm3,rdi
  00c18:    	jmp    0xc2f
  00c1d:    	call   0xfffea5f5
  00c22:    	test   rax,rax
  00c25:    	je     0x31174
  00c2b:    	movq   xmm3,xmm0
  00c2f:    	mulsd  xmm3,xmm2
:00057 %8 = %8 + %9                         [Float][Float]
  00c33:    	mov    rdi,QWORD PTR [r14-0x70]
  00c37: 00 	test   rdi,0x1
  00c3e:    	jne    0x31183
  00c44: 00 	test   rdi,0x2
  00c4b:    	je     0xc87
  00c51:    	xorps  xmm4,xmm4
  00c54: 00 	movabs rax,0x8000000000000002
  00c5e:    	cmp    rdi,rax
  00c61:    	je     0xc99
  00c67:    	mov    rax,rdi
  00c6a:    	sar    rax,0x3f
  00c6e:    	add    rax,0x2
  00c72:    	and    rdi,0xfffffffffffffffc
  00c76:    	or     rdi,rax
  00c79:    	rol    rdi,0x3d
  00c7d:    	movq   xmm4,rdi
  00c82:    	jmp    0xc99
  00c87:    	call   0xfffea5f5
  00c8c:    	test   rax,rax
  00c8f:    	je     0x31183
  00c95:    	movq   xmm4,xmm0
  00c99:    	addsd  xmm4,xmm3
:00058 %9 = %1.call org()                   [Ray]
  00c9d:    	mov    rdi,QWORD PTR [r14-0x38]
  00ca1: 00 	test   rdi,0x7
  00ca8:    	jne    0x3119f
  00cae:    	cmp    DWORD PTR [rdi+0x4],0x31
  00cb2:    	jne    0x3119f
  00cb8: 26 	cmp    DWORD PTR [rip+0xfffffffffffedb74],0x26        # 0xfffee833
  00cbf:    	jne    0x3119f
  00cc5:    	mov    esi,DWORD PTR [rip+0x8a9]        # 0x1574
  00ccb:    	cmp    esi,0xffffffff
  00cce:    	je     0x311bb
  00cd4:    	cmp    WORD PTR [rdi+0x2],0x3
  00cd9:    	jne    0xcf2
  00cdf:    	cmp    esi,0x6
  00ce2:    	jge    0xcf2
  00ce8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ced:    	jmp    0xd10
  00cf2:    	sub    rsp,0x10
  00cf6:    	movq   QWORD PTR [rsp],xmm4
  00cfb: 95 	movabs rax,0x55955d9e0e20
  00d05:    	call   rax
  00d07:    	movq   xmm4,QWORD PTR [rsp]
  00d0c:    	add    rsp,0x10
  00d10:    	mov    QWORD PTR [r14-0x78],rax
:00059 
:00060 %9 = %9.call y()                     [Vec]
  00d14:    	mov    rdi,QWORD PTR [r14-0x78]
  00d18: 00 	test   rdi,0x7
  00d1f:    	jne    0x311f6
  00d25:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d29:    	jne    0x311f6
  00d2f: 26 	cmp    DWORD PTR [rip+0xfffffffffffedafd],0x26        # 0xfffee833
  00d36:    	jne    0x311f6
  00d3c:    	mov    esi,DWORD PTR [rip+0x83a]        # 0x157c
  00d42:    	cmp    esi,0xffffffff
  00d45:    	je     0x31212
  00d4b:    	cmp    WORD PTR [rdi+0x2],0x3
  00d50:    	jne    0xd69
  00d56:    	cmp    esi,0x6
  00d59:    	jge    0xd69
  00d5f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d64:    	jmp    0xd87
  00d69:    	sub    rsp,0x10
  00d6d:    	movq   QWORD PTR [rsp],xmm4
  00d72: 95 	movabs rax,0x55955d9e0e20
  00d7c:    	call   rax
  00d7e:    	movq   xmm4,QWORD PTR [rsp]
  00d83:    	add    rsp,0x10
  00d87:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00062 %10 = %1.call dir()                  [Ray]
  00d8b:    	mov    rdi,QWORD PTR [r14-0x38]
  00d8f: 00 	test   rdi,0x7
  00d96:    	jne    0x3124d
  00d9c:    	cmp    DWORD PTR [rdi+0x4],0x31
  00da0:    	jne    0x3124d
  00da6: 26 	cmp    DWORD PTR [rip+0xfffffffffffeda86],0x26        # 0xfffee833
  00dad:    	jne    0x3124d
  00db3:    	mov    esi,DWORD PTR [rip+0x7cb]        # 0x1584
  00db9:    	cmp    esi,0xffffffff
  00dbc:    	je     0x31269
  00dc2:    	cmp    WORD PTR [rdi+0x2],0x3
  00dc7:    	jne    0xde0
  00dcd:    	cmp    esi,0x6
  00dd0:    	jge    0xde0
  00dd6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ddb:    	jmp    0xdfe
  00de0:    	sub    rsp,0x10
  00de4:    	movq   QWORD PTR [rsp],xmm4
  00de9: 95 	movabs rax,0x55955d9e0e20
  00df3:    	call   rax
  00df5:    	movq   xmm4,QWORD PTR [rsp]
  00dfa:    	add    rsp,0x10
  00dfe:    	mov    QWORD PTR [r14-0x80],rax
:00063 
:00064 %10 = %10.call y()                   [Vec]
  00e02:    	mov    rdi,QWORD PTR [r14-0x80]
  00e06: 00 	test   rdi,0x7
  00e0d:    	jne    0x312a4
  00e13:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e17:    	jne    0x312a4
  00e1d: 26 	cmp    DWORD PTR [rip+0xfffffffffffeda0f],0x26        # 0xfffee833
  00e24:    	jne    0x312a4
  00e2a:    	mov    esi,DWORD PTR [rip+0x75c]        # 0x158c
  00e30:    	cmp    esi,0xffffffff
  00e33:    	je     0x312c0
  00e39:    	cmp    WORD PTR [rdi+0x2],0x3
  00e3e:    	jne    0xe57
  00e44:    	cmp    esi,0x6
  00e47:    	jge    0xe57
  00e4d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e52:    	jmp    0xe75
  00e57:    	sub    rsp,0x10
  00e5b:    	movq   QWORD PTR [rsp],xmm4
  00e60: 95 	movabs rax,0x55955d9e0e20
  00e6a:    	call   rax
  00e6c:    	movq   xmm4,QWORD PTR [rsp]
  00e71:    	add    rsp,0x10
  00e75:    	mov    QWORD PTR [r14-0x80],rax
:00065 
:00066 %10 = %6 * %10                       [Float][Float]
  00e79:    	mov    rdi,QWORD PTR [r14-0x60]
  00e7d: 00 	test   rdi,0x1
  00e84:    	jne    0x312fb
  00e8a: 00 	test   rdi,0x2
  00e91:    	je     0xecd
  00e97:    	xorps  xmm2,xmm2
  00e9a: 00 	movabs rax,0x8000000000000002
  00ea4:    	cmp    rdi,rax
  00ea7:    	je     0xedf
  00ead:    	mov    rax,rdi
  00eb0:    	sar    rax,0x3f
  00eb4:    	add    rax,0x2
  00eb8:    	and    rdi,0xfffffffffffffffc
  00ebc:    	or     rdi,rax
  00ebf:    	rol    rdi,0x3d
  00ec3:    	movq   xmm2,rdi
  00ec8:    	jmp    0xedf
  00ecd:    	call   0xfffea5f5
  00ed2:    	test   rax,rax
  00ed5:    	je     0x312fb
  00edb:    	movq   xmm2,xmm0
  00edf:    	mov    rdi,QWORD PTR [r14-0x80]
  00ee3: 00 	test   rdi,0x1
  00eea:    	jne    0x31317
  00ef0: 00 	test   rdi,0x2
  00ef7:    	je     0xf33
  00efd:    	xorps  xmm3,xmm3
  00f00: 00 	movabs rax,0x8000000000000002
  00f0a:    	cmp    rdi,rax
  00f0d:    	je     0xf45
  00f13:    	mov    rax,rdi
  00f16:    	sar    rax,0x3f
  00f1a:    	add    rax,0x2
  00f1e:    	and    rdi,0xfffffffffffffffc
  00f22:    	or     rdi,rax
  00f25:    	rol    rdi,0x3d
  00f29:    	movq   xmm3,rdi
  00f2e:    	jmp    0xf45
  00f33:    	call   0xfffea5f5
  00f38:    	test   rax,rax
  00f3b:    	je     0x31317
  00f41:    	movq   xmm3,xmm0
  00f45:    	mulsd  xmm3,xmm2
:00067 %9 = %9 + %10                        [Float][Float]
  00f49:    	mov    rdi,QWORD PTR [r14-0x78]
  00f4d: 00 	test   rdi,0x1
  00f54:    	jne    0x31333
  00f5a: 00 	test   rdi,0x2
  00f61:    	je     0xf9d
  00f67:    	xorps  xmm5,xmm5
  00f6a: 00 	movabs rax,0x8000000000000002
  00f74:    	cmp    rdi,rax
  00f77:    	je     0xfaf
  00f7d:    	mov    rax,rdi
  00f80:    	sar    rax,0x3f
  00f84:    	add    rax,0x2
  00f88:    	and    rdi,0xfffffffffffffffc
  00f8c:    	or     rdi,rax
  00f8f:    	rol    rdi,0x3d
  00f93:    	movq   xmm5,rdi
  00f98:    	jmp    0xfaf
  00f9d:    	call   0xfffea5f5
  00fa2:    	test   rax,rax
  00fa5:    	je     0x31333
  00fab:    	movq   xmm5,xmm0
  00faf:    	addsd  xmm5,xmm3
:00068 %10 = %1.call org()                  [Ray]
  00fb3:    	mov    rdi,QWORD PTR [r14-0x38]
  00fb7: 00 	test   rdi,0x7
  00fbe:    	jne    0x3135c
  00fc4:    	cmp    DWORD PTR [rdi+0x4],0x31
  00fc8:    	jne    0x3135c
  00fce: 26 	cmp    DWORD PTR [rip+0xfffffffffffed85e],0x26        # 0xfffee833
  00fd5:    	jne    0x3135c
  00fdb:    	mov    esi,DWORD PTR [rip+0x5b3]        # 0x1594
  00fe1:    	cmp    esi,0xffffffff
  00fe4:    	je     0x31385
  00fea:    	cmp    WORD PTR [rdi+0x2],0x3
  00fef:    	jne    0x1008
  00ff5:    	cmp    esi,0x6
  00ff8:    	jge    0x1008
  00ffe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01003:    	jmp    0x1032
  01008:    	sub    rsp,0x10
  0100c:    	movq   QWORD PTR [rsp],xmm4
  01011:    	movq   QWORD PTR [rsp+0x8],xmm5
  01017: 95 	movabs rax,0x55955d9e0e20
  01021:    	call   rax
  01023:    	movq   xmm4,QWORD PTR [rsp]
  01028:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0102e:    	add    rsp,0x10
  01032:    	mov    QWORD PTR [r14-0x80],rax
:00069 
:00070 %10 = %10.call z()                   [Vec]
  01036:    	mov    rdi,QWORD PTR [r14-0x80]
  0103a: 00 	test   rdi,0x7
  01041:    	jne    0x313cc
  01047:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0104b:    	jne    0x313cc
  01051: 26 	cmp    DWORD PTR [rip+0xfffffffffffed7db],0x26        # 0xfffee833
  01058:    	jne    0x313cc
  0105e:    	mov    esi,DWORD PTR [rip+0x538]        # 0x159c
  01064:    	cmp    esi,0xffffffff
  01067:    	je     0x313f5
  0106d:    	cmp    WORD PTR [rdi+0x2],0x3
  01072:    	jne    0x108b
  01078:    	cmp    esi,0x6
  0107b:    	jge    0x108b
  01081:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01086:    	jmp    0x10b5
  0108b:    	sub    rsp,0x10
  0108f:    	movq   QWORD PTR [rsp],xmm4
  01094:    	movq   QWORD PTR [rsp+0x8],xmm5
  0109a: 95 	movabs rax,0x55955d9e0e20
  010a4:    	call   rax
  010a6:    	movq   xmm4,QWORD PTR [rsp]
  010ab:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010b1:    	add    rsp,0x10
  010b5:    	mov    QWORD PTR [r14-0x80],rax
:00071 
:00072 %11 = %1.call dir()                  [Ray]
  010b9:    	mov    rdi,QWORD PTR [r14-0x38]
  010bd: 00 	test   rdi,0x7
  010c4:    	jne    0x3143c
  010ca:    	cmp    DWORD PTR [rdi+0x4],0x31
  010ce:    	jne    0x3143c
  010d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffed758],0x26        # 0xfffee833
  010db:    	jne    0x3143c
  010e1:    	mov    esi,DWORD PTR [rip+0x4bd]        # 0x15a4
  010e7:    	cmp    esi,0xffffffff
  010ea:    	je     0x31465
  010f0:    	cmp    WORD PTR [rdi+0x2],0x3
  010f5:    	jne    0x110e
  010fb:    	cmp    esi,0x6
  010fe:    	jge    0x110e
  01104:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01109:    	jmp    0x1138
  0110e:    	sub    rsp,0x10
  01112:    	movq   QWORD PTR [rsp],xmm4
  01117:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111d: 95 	movabs rax,0x55955d9e0e20
  01127:    	call   rax
  01129:    	movq   xmm4,QWORD PTR [rsp]
  0112e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01134:    	add    rsp,0x10
  01138: ff 	mov    QWORD PTR [r14-0x88],rax
:00073 
:00074 %11 = %11.call z()                   [Vec]
  0113f: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01146: 00 	test   rdi,0x7
  0114d:    	jne    0x314ac
  01153:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01157:    	jne    0x314ac
  0115d: 26 	cmp    DWORD PTR [rip+0xfffffffffffed6cf],0x26        # 0xfffee833
  01164:    	jne    0x314ac
  0116a:    	mov    esi,DWORD PTR [rip+0x43c]        # 0x15ac
  01170:    	cmp    esi,0xffffffff
  01173:    	je     0x314d5
  01179:    	cmp    WORD PTR [rdi+0x2],0x3
  0117e:    	jne    0x1197
  01184:    	cmp    esi,0x6
  01187:    	jge    0x1197
  0118d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01192:    	jmp    0x11c1
  01197:    	sub    rsp,0x10
  0119b:    	movq   QWORD PTR [rsp],xmm4
  011a0:    	movq   QWORD PTR [rsp+0x8],xmm5
  011a6: 95 	movabs rax,0x55955d9e0e20
  011b0:    	call   rax
  011b2:    	movq   xmm4,QWORD PTR [rsp]
  011b7:    	movq   xmm5,QWORD PTR [rsp+0x8]
  011bd:    	add    rsp,0x10
  011c1: ff 	mov    QWORD PTR [r14-0x88],rax
:00075 
:00076 %11 = %6 * %11                       [Float][Float]
  011c8:    	mov    rdi,QWORD PTR [r14-0x60]
  011cc: 00 	test   rdi,0x1
  011d3:    	jne    0x3151c
  011d9: 00 	test   rdi,0x2
  011e0:    	je     0x121c
  011e6:    	xorps  xmm2,xmm2
  011e9: 00 	movabs rax,0x8000000000000002
  011f3:    	cmp    rdi,rax
  011f6:    	je     0x122e
  011fc:    	mov    rax,rdi
  011ff:    	sar    rax,0x3f
  01203:    	add    rax,0x2
  01207:    	and    rdi,0xfffffffffffffffc
  0120b:    	or     rdi,rax
  0120e:    	rol    rdi,0x3d
  01212:    	movq   xmm2,rdi
  01217:    	jmp    0x122e
  0121c:    	call   0xfffea5f5
  01221:    	test   rax,rax
  01224:    	je     0x3151c
  0122a:    	movq   xmm2,xmm0
  0122e: ff 	mov    rdi,QWORD PTR [r14-0x88]
  01235: 00 	test   rdi,0x1
  0123c:    	jne    0x31545
  01242: 00 	test   rdi,0x2
  01249:    	je     0x1285
  0124f:    	xorps  xmm3,xmm3
  01252: 00 	movabs rax,0x8000000000000002
  0125c:    	cmp    rdi,rax
  0125f:    	je     0x1297
  01265:    	mov    rax,rdi
  01268:    	sar    rax,0x3f
  0126c:    	add    rax,0x2
  01270:    	and    rdi,0xfffffffffffffffc
  01274:    	or     rdi,rax
  01277:    	rol    rdi,0x3d
  0127b:    	movq   xmm3,rdi
  01280:    	jmp    0x1297
  01285:    	call   0xfffea5f5
  0128a:    	test   rax,rax
  0128d:    	je     0x31545
  01293:    	movq   xmm3,xmm0
  01297:    	mulsd  xmm3,xmm2
:00077 %10 = %10 + %11                      [Float][Float]
  0129b:    	mov    rdi,QWORD PTR [r14-0x80]
  0129f: 00 	test   rdi,0x1
  012a6:    	jne    0x3156e
  012ac: 00 	test   rdi,0x2
  012b3:    	je     0x12ef
  012b9:    	xorps  xmm6,xmm6
  012bc: 00 	movabs rax,0x8000000000000002
  012c6:    	cmp    rdi,rax
  012c9:    	je     0x1301
  012cf:    	mov    rax,rdi
  012d2:    	sar    rax,0x3f
  012d6:    	add    rax,0x2
  012da:    	and    rdi,0xfffffffffffffffc
  012de:    	or     rdi,rax
  012e1:    	rol    rdi,0x3d
  012e5:    	movq   xmm6,rdi
  012ea:    	jmp    0x1301
  012ef:    	call   0xfffea5f5
  012f4:    	test   rax,rax
  012f7:    	je     0x3156e
  012fd:    	movq   xmm6,xmm0
  01301:    	addsd  xmm6,xmm3
:00078 %7 = %7.call new(%8; 3)              [#<Class:Vec>]
  01305:    	movq   xmm0,xmm4
  01309:    	call   0xfffea719
  0130e:    	mov    QWORD PTR [r14-0x70],rax
  01312:    	movq   xmm0,xmm5
  01316:    	call   0xfffea719
  0131b:    	mov    QWORD PTR [r14-0x78],rax
  0131f:    	movq   xmm0,xmm6
  01323:    	call   0xfffea719
  01328:    	mov    QWORD PTR [r14-0x80],rax
  0132c:    	mov    rdi,QWORD PTR [r14-0x68]
  01330: 00 	test   rdi,0x7
  01337:    	jne    0x315a7
  0133d:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01341:    	jne    0x315a7
  01347: 26 	cmp    DWORD PTR [rip+0xfffffffffffed4e5],0x26        # 0xfffee833
  0134e:    	jne    0x315a7
  01354: 00 	mov    r9,0x0
  0135b:    	sub    rsp,0x20
  0135f:    	movq   QWORD PTR [rsp],xmm3
  01364:    	movq   QWORD PTR [rsp+0x8],xmm4
  0136a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01370:    	movq   QWORD PTR [rsp+0x18],xmm6
  01376:    	mov    rdx,rdi
  01379:    	mov    QWORD PTR [rsp-0x40],rcx
  0137e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01387:    	lea    rcx,[r14-0x70]
  0138b: 00 	mov    r8,0x3
  01392:    	mov    rsi,QWORD PTR [rbx]
  01395:    	mov    QWORD PTR [rsp-0x18],rsi
  0139a:    	lea    rsi,[rsp-0x18]
  0139f:    	mov    QWORD PTR [rbx],rsi
  013a2:    	lea    r14,[rsp-0x10]
  013a7:    	mov    QWORD PTR [rsp-0x20],r14
  013ac:    	call   0x315c6
  013b1:    	lea    r14,[rbp-0x8]
  013b5:    	mov    QWORD PTR [rbx],r14
  013b8:    	mov    r14,QWORD PTR [rbp-0x10]
  013bc:    	movq   xmm3,QWORD PTR [rsp]
  013c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013c7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013cd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013d3:    	add    rsp,0x20
  013d7: 95 	movabs r13,0x55955e174150
  013e1:    	test   rax,rax
  013e4:    	je     0xfffea59c
  013ea:    	mov    QWORD PTR [r14-0x68],rax
:00079 
:00080 _ = %2.call pl=(%7; 1)               [Isect]
  013ee:    	mov    rdi,QWORD PTR [r14-0x40]
  013f2: 00 	test   rdi,0x7
  013f9:    	jne    0x315f8
  013ff:    	cmp    DWORD PTR [rdi+0x4],0x33
  01403:    	jne    0x315f8
  01409: 26 	cmp    DWORD PTR [rip+0xfffffffffffed423],0x26        # 0xfffee833
  01410:    	jne    0x315f8
  01416:    	mov    esi,DWORD PTR [rip+0x198]        # 0x15b4
  0141c:    	cmp    esi,0xffffffff
  0141f:    	je     0x31617
  01425:    	cmp    WORD PTR [rdi+0x2],0x3
  0142a:    	jne    0x1447
  01430:    	cmp    esi,0x6
  01433:    	jge    0x1447
  01439:    	mov    rax,QWORD PTR [r14-0x68]
  0143d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01442:    	jmp    0x14a0
  01447:    	sub    rsp,0x20
  0144b:    	movq   QWORD PTR [rsp],xmm3
  01450:    	movq   QWORD PTR [rsp+0x8],xmm4
  01456:    	movq   QWORD PTR [rsp+0x10],xmm5
  0145c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01462:    	mov    rdx,QWORD PTR [r14-0x68]
  01466: 95 	movabs rax,0x55955d9e10a0
  01470:    	call   rax
  01472:    	movq   xmm3,QWORD PTR [rsp]
  01477:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0147d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01483:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01489:    	add    rsp,0x20
  0148d: 95 	movabs r13,0x55955e174170
  01497:    	test   rax,rax
  0149a:    	je     0xfffea59c
:00081 
:00082 br =>:00083
  014a0:    	jmp    0x316bc
:00083 %7 = nil
  014a5: 00 	mov    QWORD PTR [r14-0x68],0x4
:00084 ret %7
  014ad:    	mov    rax,QWORD PTR [r14-0x68]
  014b1:    	leave  
  014b2:    	ret    
==> start whole compile: <unnamed> FuncId(107) self_class:Scene start:[00000] bytecode:0x55955e13b550
<== finished compile. elapsed:116.7µs
offset:Pos(94272) code: 8369 bytes  data: 423 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [r14-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x3013c
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x35
  000a7:    	jne    0x3013c
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xfffffffffffed1c3],0x26        # 0xfffed27b
  000b8:    	jne    0x3014b
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0x98]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x3015a
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: 95 	movabs r13,0x55955e13b580
  00118:    	test   rax,rax
  0011b:    	je     0xfffe8fe4
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00003 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00004 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x1f85]        # 0x20c0
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00005 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x1f7f]        # 0x20d0
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00006 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xfffffffffffed10a],0x26        # 0xfffed27b
  00171:    	jne    0x3018c
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa0]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x301ab
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: 95 	movabs r13,0x55955e13b5e0
  001e3:    	test   rax,rax
  001e6:    	je     0xfffe8fe4
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00008 
:00009 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x301dd
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xfffe903d
  0024f:    	test   rax,rax
  00252:    	je     0x301dd
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00010 %13 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed025]        # 0xfffed290
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x1e7e]        # 0x20f0
  00272:    	jne    0x301fc
  00278: 00 	mov    rax,QWORD PTR [rip+0x1e61]        # 0x20e0
  0027f: ff 	mov    QWORD PTR [r14-0x98],rax
:00011 %14 = %3
:00012 %13 = %13.call cos(%14; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x30260
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x24
  0029e:    	jne    0x30260
  002a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffecfd0],0x26        # 0xfffed27b
  002ab:    	jne    0x30260
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: 95 	movabs rax,0x55955d9b4a10
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00013 
:00014 %14 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffecfa6]        # 0xfffed290
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x1e1f]        # 0x2110
  002f1:    	jne    0x30283
  002f7: 00 	mov    rax,QWORD PTR [rip+0x1e02]        # 0x2100
  002fe: ff 	mov    QWORD PTR [r14-0xa0],rax
:00015 %15 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x1e13]        # 0x2120
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xa8],rax
:00016 %15 = %15 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x302e7
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xfffe903d
  00377:    	test   rax,rax
  0037a:    	je     0x302e7
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00017 %14 = %14.call sqrt(%15; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x30313
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x24
  003a0:    	jne    0x30313
  003a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffecece],0x26        # 0xfffed27b
  003ad:    	jne    0x30313
  003b3:    	sqrtsd xmm6,xmm3
:00018 
:00019 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00020 %13 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffececa]        # 0xfffed290
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x1d73]        # 0x2140
  003cd:    	jne    0x3034f
  003d3: 00 	mov    rax,QWORD PTR [rip+0x1d56]        # 0x2130
  003da: ff 	mov    QWORD PTR [r14-0x98],rax
:00021 %14 = %3
:00022 %13 = %13.call sin(%14; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x303d7
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x24
  003f9:    	jne    0x303d7
  003ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffece75],0x26        # 0xfffed27b
  00406:    	jne    0x303d7
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: 95 	movabs rax,0x55955d9b4a20
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00023 
:00024 %14 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffece27]        # 0xfffed290
  00469: 00 	cmp    rax,QWORD PTR [rip+0x1cf0]        # 0x2160
  00470:    	jne    0x30417
  00476: 00 	mov    rax,QWORD PTR [rip+0x1cd3]        # 0x2150
  0047d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x1ce4]        # 0x2170
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xa8],rax
:00026 %15 = %15 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00027 %14 = %14.call sqrt(%15; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x3049f
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x24
  004b9:    	jne    0x3049f
  004bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffecdb5],0x26        # 0xfffed27b
  004c6:    	jne    0x3049f
  004cc:    	sqrtsd xmm6,xmm3
:00028 
:00029 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00030 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffecdaf]        # 0xfffed290
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x1ca8]        # 0x2190
  004e8:    	jne    0x304e8
  004ee: 00 	mov    rax,QWORD PTR [rip+0x1c8b]        # 0x2180
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00031 %14 = %2
:00032 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x3057e
  00510:    	cmp    DWORD PTR [rdi+0x4],0x24
  00514:    	jne    0x3057e
  0051a: 26 	cmp    DWORD PTR [rip+0xfffffffffffecd5a],0x26        # 0xfffed27b
  00521:    	jne    0x3057e
  00527:    	sqrtsd xmm2,xmm5
:00033 
:00034 %13 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [r14-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0x98],rax
:00035 %14 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00036 %13 = %13.[%14]                      [Array][Integer]
  00548: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0054f: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00556: 00 	test   rdi,0x7
  0055d:    	jne    0x305d5
  00563:    	cmp    DWORD PTR [rdi+0x4],0xb
  00567:    	jne    0x305d5
  0056d: 00 	test   rsi,0x1
  00574:    	je     0x305d5
  0057a:    	sar    rsi,1
  0057d:    	sub    rsp,0x30
  00581:    	movq   QWORD PTR [rsp],xmm2
  00586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0058c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00592:    	movq   QWORD PTR [rsp+0x18],xmm5
  00598:    	movq   QWORD PTR [rsp+0x20],xmm7
  0059e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005a5: 95 	movabs rax,0x55955d9acd00
  005af:    	call   rax
  005b1:    	movq   xmm2,QWORD PTR [rsp]
  005b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ce: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d5:    	add    rsp,0x30
  005d9: 95 	movabs r13,0x55955e13b7a0
  005e3:    	test   rax,rax
  005e6:    	je     0xfffe8fe4
  005ec: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %13 = %13.call x()                   [Vec]
  005f3:    	movq   xmm0,xmm2
  005f7:    	call   0xfffe9161
  005fc:    	mov    QWORD PTR [r14-0x60],rax
  00600:    	movq   xmm0,xmm4
  00604:    	call   0xfffe9161
  00609:    	mov    QWORD PTR [r14-0x48],rax
  0060d:    	movq   xmm0,xmm7
  00611:    	call   0xfffe9161
  00616:    	mov    QWORD PTR [r14-0x50],rax
  0061a:    	movq   xmm0,xmm8
  0061f:    	call   0xfffe9161
  00624:    	mov    QWORD PTR [r14-0x58],rax
  00628: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0062f: 00 	test   rdi,0x7
  00636:    	jne    0x30629
  0063c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00640:    	jne    0x30629
  00646: 26 	cmp    DWORD PTR [rip+0xfffffffffffecc2e],0x26        # 0xfffed27b
  0064d:    	jne    0x30629
  00653:    	mov    esi,DWORD PTR [rip+0x1b43]        # 0x219c
  00659:    	cmp    esi,0xffffffff
  0065c:    	je     0x30648
  00662:    	cmp    WORD PTR [rdi+0x2],0x3
  00667:    	jne    0x680
  0066d:    	cmp    esi,0x6
  00670:    	jge    0x680
  00676:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0067b:    	jmp    0x69e
  00680:    	sub    rsp,0x10
  00684:    	movq   QWORD PTR [rsp],xmm3
  00689: 95 	movabs rax,0x55955d9e0e20
  00693:    	call   rax
  00695:    	movq   xmm3,QWORD PTR [rsp]
  0069a:    	add    rsp,0x10
  0069e: ff 	mov    QWORD PTR [r14-0x98],rax
:00038 
:00039 %13 = %4 * %13                       [Float][Float]
  006a5:    	mov    rdi,QWORD PTR [r14-0x50]
  006a9: 00 	test   rdi,0x1
  006b0:    	jne    0x30683
  006b6: 00 	test   rdi,0x2
  006bd:    	je     0x6f9
  006c3:    	xorps  xmm2,xmm2
  006c6: 00 	movabs rax,0x8000000000000002
  006d0:    	cmp    rdi,rax
  006d3:    	je     0x70b
  006d9:    	mov    rax,rdi
  006dc:    	sar    rax,0x3f
  006e0:    	add    rax,0x2
  006e4:    	and    rdi,0xfffffffffffffffc
  006e8:    	or     rdi,rax
  006eb:    	rol    rdi,0x3d
  006ef:    	movq   xmm2,rdi
  006f4:    	jmp    0x70b
  006f9:    	call   0xfffe903d
  006fe:    	test   rax,rax
  00701:    	je     0x30683
  00707:    	movq   xmm2,xmm0
  0070b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00712: 00 	test   rdi,0x1
  00719:    	jne    0x306a2
  0071f: 00 	test   rdi,0x2
  00726:    	je     0x762
  0072c:    	xorps  xmm4,xmm4
  0072f: 00 	movabs rax,0x8000000000000002
  00739:    	cmp    rdi,rax
  0073c:    	je     0x774
  00742:    	mov    rax,rdi
  00745:    	sar    rax,0x3f
  00749:    	add    rax,0x2
  0074d:    	and    rdi,0xfffffffffffffffc
  00751:    	or     rdi,rax
  00754:    	rol    rdi,0x3d
  00758:    	movq   xmm4,rdi
  0075d:    	jmp    0x774
  00762:    	call   0xfffe903d
  00767:    	test   rax,rax
  0076a:    	je     0x306a2
  00770:    	movq   xmm4,xmm0
  00774:    	mulsd  xmm4,xmm2
:00040 %14 = dynvar(2, %2)
  00778:    	mov    rax,QWORD PTR [r14-0x18]
  0077c:    	mov    rax,QWORD PTR [rax]
  0077f:    	mov    rax,QWORD PTR [rax-0x28]
  00783: ff 	mov    QWORD PTR [r14-0xa0],rax
:00041 %15 = 1: i32
  0078a: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00042 %14 = %14.[%15]                      [Array][Integer]
  00795: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0079c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  007a3: 00 	test   rdi,0x7
  007aa:    	jne    0x306c1
  007b0:    	cmp    DWORD PTR [rdi+0x4],0xb
  007b4:    	jne    0x306c1
  007ba: 00 	test   rsi,0x1
  007c1:    	je     0x306c1
  007c7:    	sar    rsi,1
  007ca:    	sub    rsp,0x10
  007ce:    	movq   QWORD PTR [rsp],xmm2
  007d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  007d9: 95 	movabs rax,0x55955d9acd00
  007e3:    	call   rax
  007e5:    	movq   xmm2,QWORD PTR [rsp]
  007ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007f0:    	add    rsp,0x10
  007f4: 95 	movabs r13,0x55955e13b800
  007fe:    	test   rax,rax
  00801:    	je     0xfffe8fe4
  00807: ff 	mov    QWORD PTR [r14-0xa0],rax
:00043 %14 = %14.call x()                   [Vec]
  0080e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00815: 00 	test   rdi,0x7
  0081c:    	jne    0x306e0
  00822:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00826:    	jne    0x306e0
  0082c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeca48],0x26        # 0xfffed27b
  00833:    	jne    0x306e0
  00839:    	mov    esi,DWORD PTR [rip+0x1965]        # 0x21a4
  0083f:    	cmp    esi,0xffffffff
  00842:    	je     0x306ff
  00848:    	cmp    WORD PTR [rdi+0x2],0x3
  0084d:    	jne    0x866
  00853:    	cmp    esi,0x6
  00856:    	jge    0x866
  0085c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00861:    	jmp    0x884
  00866:    	sub    rsp,0x10
  0086a:    	movq   QWORD PTR [rsp],xmm4
  0086f: 95 	movabs rax,0x55955d9e0e20
  00879:    	call   rax
  0087b:    	movq   xmm4,QWORD PTR [rsp]
  00880:    	add    rsp,0x10
  00884: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 
:00045 %14 = %5 * %14                       [Float][Float]
  0088b:    	mov    rdi,QWORD PTR [r14-0x58]
  0088f: 00 	test   rdi,0x1
  00896:    	jne    0x3073a
  0089c: 00 	test   rdi,0x2
  008a3:    	je     0x8df
  008a9:    	xorps  xmm2,xmm2
  008ac: 00 	movabs rax,0x8000000000000002
  008b6:    	cmp    rdi,rax
  008b9:    	je     0x8f1
  008bf:    	mov    rax,rdi
  008c2:    	sar    rax,0x3f
  008c6:    	add    rax,0x2
  008ca:    	and    rdi,0xfffffffffffffffc
  008ce:    	or     rdi,rax
  008d1:    	rol    rdi,0x3d
  008d5:    	movq   xmm2,rdi
  008da:    	jmp    0x8f1
  008df:    	call   0xfffe903d
  008e4:    	test   rax,rax
  008e7:    	je     0x3073a
  008ed:    	movq   xmm2,xmm0
  008f1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008f8: 00 	test   rdi,0x1
  008ff:    	jne    0x30759
  00905: 00 	test   rdi,0x2
  0090c:    	je     0x948
  00912:    	xorps  xmm3,xmm3
  00915: 00 	movabs rax,0x8000000000000002
  0091f:    	cmp    rdi,rax
  00922:    	je     0x95a
  00928:    	mov    rax,rdi
  0092b:    	sar    rax,0x3f
  0092f:    	add    rax,0x2
  00933:    	and    rdi,0xfffffffffffffffc
  00937:    	or     rdi,rax
  0093a:    	rol    rdi,0x3d
  0093e:    	movq   xmm3,rdi
  00943:    	jmp    0x95a
  00948:    	call   0xfffe903d
  0094d:    	test   rax,rax
  00950:    	je     0x30759
  00956:    	movq   xmm3,xmm0
  0095a:    	mulsd  xmm3,xmm2
:00046 %13 = %13 + %14                      [Float][Float]
  0095e:    	addsd  xmm4,xmm3
:00047 %14 = dynvar(2, %2)
  00962:    	mov    rax,QWORD PTR [r14-0x18]
  00966:    	mov    rax,QWORD PTR [rax]
  00969:    	mov    rax,QWORD PTR [rax-0x28]
  0096d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00048 %15 = 2: i32
  00974: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00049 %14 = %14.[%15]                      [Array][Integer]
  0097f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00986: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  0098d: 00 	test   rdi,0x7
  00994:    	jne    0x30778
  0099a:    	cmp    DWORD PTR [rdi+0x4],0xb
  0099e:    	jne    0x30778
  009a4: 00 	test   rsi,0x1
  009ab:    	je     0x30778
  009b1:    	sar    rsi,1
  009b4:    	sub    rsp,0x10
  009b8:    	movq   QWORD PTR [rsp],xmm2
  009bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  009c3: 95 	movabs rax,0x55955d9acd00
  009cd:    	call   rax
  009cf:    	movq   xmm2,QWORD PTR [rsp]
  009d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009da:    	add    rsp,0x10
  009de: 95 	movabs r13,0x55955e13b870
  009e8:    	test   rax,rax
  009eb:    	je     0xfffe8fe4
  009f1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00050 %14 = %14.call x()                   [Vec]
  009f8: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  009ff: 00 	test   rdi,0x7
  00a06:    	jne    0x30797
  00a0c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00a10:    	jne    0x30797
  00a16: 26 	cmp    DWORD PTR [rip+0xfffffffffffec85e],0x26        # 0xfffed27b
  00a1d:    	jne    0x30797
  00a23:    	mov    esi,DWORD PTR [rip+0x1783]        # 0x21ac
  00a29:    	cmp    esi,0xffffffff
  00a2c:    	je     0x307b6
  00a32:    	cmp    WORD PTR [rdi+0x2],0x3
  00a37:    	jne    0xa50
  00a3d:    	cmp    esi,0x6
  00a40:    	jge    0xa50
  00a46:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a4b:    	jmp    0xa6e
  00a50:    	sub    rsp,0x10
  00a54:    	movq   QWORD PTR [rsp],xmm4
  00a59: 95 	movabs rax,0x55955d9e0e20
  00a63:    	call   rax
  00a65:    	movq   xmm4,QWORD PTR [rsp]
  00a6a:    	add    rsp,0x10
  00a6e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00052 %14 = %6 * %14                       [Float][Float]
  00a75:    	mov    rdi,QWORD PTR [r14-0x60]
  00a79: 00 	test   rdi,0x1
  00a80:    	jne    0x307f1
  00a86: 00 	test   rdi,0x2
  00a8d:    	je     0xac9
  00a93:    	xorps  xmm2,xmm2
  00a96: 00 	movabs rax,0x8000000000000002
  00aa0:    	cmp    rdi,rax
  00aa3:    	je     0xadb
  00aa9:    	mov    rax,rdi
  00aac:    	sar    rax,0x3f
  00ab0:    	add    rax,0x2
  00ab4:    	and    rdi,0xfffffffffffffffc
  00ab8:    	or     rdi,rax
  00abb:    	rol    rdi,0x3d
  00abf:    	movq   xmm2,rdi
  00ac4:    	jmp    0xadb
  00ac9:    	call   0xfffe903d
  00ace:    	test   rax,rax
  00ad1:    	je     0x307f1
  00ad7:    	movq   xmm2,xmm0
  00adb: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ae2: 00 	test   rdi,0x1
  00ae9:    	jne    0x30810
  00aef: 00 	test   rdi,0x2
  00af6:    	je     0xb32
  00afc:    	xorps  xmm3,xmm3
  00aff: 00 	movabs rax,0x8000000000000002
  00b09:    	cmp    rdi,rax
  00b0c:    	je     0xb44
  00b12:    	mov    rax,rdi
  00b15:    	sar    rax,0x3f
  00b19:    	add    rax,0x2
  00b1d:    	and    rdi,0xfffffffffffffffc
  00b21:    	or     rdi,rax
  00b24:    	rol    rdi,0x3d
  00b28:    	movq   xmm3,rdi
  00b2d:    	jmp    0xb44
  00b32:    	call   0xfffe903d
  00b37:    	test   rax,rax
  00b3a:    	je     0x30810
  00b40:    	movq   xmm3,xmm0
  00b44:    	mulsd  xmm3,xmm2
:00053 %7 = %13 + %14                       [Float][Float]
  00b48:    	movq   xmm5,xmm4
  00b4c:    	addsd  xmm5,xmm3
:00054 %13 = dynvar(2, %2)
  00b50:    	mov    rax,QWORD PTR [r14-0x18]
  00b54:    	mov    rax,QWORD PTR [rax]
  00b57:    	mov    rax,QWORD PTR [rax-0x28]
  00b5b: ff 	mov    QWORD PTR [r14-0x98],rax
:00055 %14 = 0: i32
  00b62: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00056 %13 = %13.[%14]                      [Array][Integer]
  00b6d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00b74: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  00b7b: 00 	test   rdi,0x7
  00b82:    	jne    0x3082f
  00b88:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b8c:    	jne    0x3082f
  00b92: 00 	test   rsi,0x1
  00b99:    	je     0x3082f
  00b9f:    	sar    rsi,1
  00ba2:    	sub    rsp,0x10
  00ba6:    	movq   QWORD PTR [rsp],xmm2
  00bab:    	movq   QWORD PTR [rsp+0x8],xmm5
  00bb1: 95 	movabs rax,0x55955d9acd00
  00bbb:    	call   rax
  00bbd:    	movq   xmm2,QWORD PTR [rsp]
  00bc2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00bc8:    	add    rsp,0x10
  00bcc: 95 	movabs r13,0x55955e13b8e0
  00bd6:    	test   rax,rax
  00bd9:    	je     0xfffe8fe4
  00bdf: ff 	mov    QWORD PTR [r14-0x98],rax
:00057 %13 = %13.call y()                   [Vec]
  00be6:    	movq   xmm0,xmm5
  00bea:    	call   0xfffe9161
  00bef:    	mov    QWORD PTR [r14-0x68],rax
  00bf3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00bfa: 00 	test   rdi,0x7
  00c01:    	jne    0x3084b
  00c07:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c0b:    	jne    0x3084b
  00c11: 26 	cmp    DWORD PTR [rip+0xfffffffffffec663],0x26        # 0xfffed27b
  00c18:    	jne    0x3084b
  00c1e:    	mov    esi,DWORD PTR [rip+0x1590]        # 0x21b4
  00c24:    	cmp    esi,0xffffffff
  00c27:    	je     0x3085a
  00c2d:    	cmp    WORD PTR [rdi+0x2],0x3
  00c32:    	jne    0xc4b
  00c38:    	cmp    esi,0x6
  00c3b:    	jge    0xc4b
  00c41:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c46:    	jmp    0xc57
  00c4b: 95 	movabs rax,0x55955d9e0e20
  00c55:    	call   rax
  00c57: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00059 %13 = %4 * %13                       [Float][Float]
  00c5e:    	mov    rdi,QWORD PTR [r14-0x50]
  00c62: 00 	test   rdi,0x1
  00c69:    	jne    0x30883
  00c6f: 00 	test   rdi,0x2
  00c76:    	je     0xcb2
  00c7c:    	xorps  xmm2,xmm2
  00c7f: 00 	movabs rax,0x8000000000000002
  00c89:    	cmp    rdi,rax
  00c8c:    	je     0xcc4
  00c92:    	mov    rax,rdi
  00c95:    	sar    rax,0x3f
  00c99:    	add    rax,0x2
  00c9d:    	and    rdi,0xfffffffffffffffc
  00ca1:    	or     rdi,rax
  00ca4:    	rol    rdi,0x3d
  00ca8:    	movq   xmm2,rdi
  00cad:    	jmp    0xcc4
  00cb2:    	call   0xfffe903d
  00cb7:    	test   rax,rax
  00cba:    	je     0x30883
  00cc0:    	movq   xmm2,xmm0
  00cc4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00ccb: 00 	test   rdi,0x1
  00cd2:    	jne    0x30892
  00cd8: 00 	test   rdi,0x2
  00cdf:    	je     0xd1b
  00ce5:    	xorps  xmm3,xmm3
  00ce8: 00 	movabs rax,0x8000000000000002
  00cf2:    	cmp    rdi,rax
  00cf5:    	je     0xd2d
  00cfb:    	mov    rax,rdi
  00cfe:    	sar    rax,0x3f
  00d02:    	add    rax,0x2
  00d06:    	and    rdi,0xfffffffffffffffc
  00d0a:    	or     rdi,rax
  00d0d:    	rol    rdi,0x3d
  00d11:    	movq   xmm3,rdi
  00d16:    	jmp    0xd2d
  00d1b:    	call   0xfffe903d
  00d20:    	test   rax,rax
  00d23:    	je     0x30892
  00d29:    	movq   xmm3,xmm0
  00d2d:    	mulsd  xmm3,xmm2
:00060 %14 = dynvar(2, %2)
  00d31:    	mov    rax,QWORD PTR [r14-0x18]
  00d35:    	mov    rax,QWORD PTR [rax]
  00d38:    	mov    rax,QWORD PTR [rax-0x28]
  00d3c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00061 %15 = 1: i32
  00d43: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00062 %14 = %14.[%15]                      [Array][Integer]
  00d4e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00d55: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00d5c: 00 	test   rdi,0x7
  00d63:    	jne    0x308a1
  00d69:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d6d:    	jne    0x308a1
  00d73: 00 	test   rsi,0x1
  00d7a:    	je     0x308a1
  00d80:    	sar    rsi,1
  00d83:    	sub    rsp,0x10
  00d87:    	movq   QWORD PTR [rsp],xmm2
  00d8c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d92: 95 	movabs rax,0x55955d9acd00
  00d9c:    	call   rax
  00d9e:    	movq   xmm2,QWORD PTR [rsp]
  00da3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00da9:    	add    rsp,0x10
  00dad: 95 	movabs r13,0x55955e13b940
  00db7:    	test   rax,rax
  00dba:    	je     0xfffe8fe4
  00dc0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00063 %14 = %14.call y()                   [Vec]
  00dc7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00dce: 00 	test   rdi,0x7
  00dd5:    	jne    0x308c0
  00ddb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ddf:    	jne    0x308c0
  00de5: 26 	cmp    DWORD PTR [rip+0xfffffffffffec48f],0x26        # 0xfffed27b
  00dec:    	jne    0x308c0
  00df2:    	mov    esi,DWORD PTR [rip+0x13c4]        # 0x21bc
  00df8:    	cmp    esi,0xffffffff
  00dfb:    	je     0x308df
  00e01:    	cmp    WORD PTR [rdi+0x2],0x3
  00e06:    	jne    0xe1f
  00e0c:    	cmp    esi,0x6
  00e0f:    	jge    0xe1f
  00e15:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e1a:    	jmp    0xe3d
  00e1f:    	sub    rsp,0x10
  00e23:    	movq   QWORD PTR [rsp],xmm3
  00e28: 95 	movabs rax,0x55955d9e0e20
  00e32:    	call   rax
  00e34:    	movq   xmm3,QWORD PTR [rsp]
  00e39:    	add    rsp,0x10
  00e3d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00064 
:00065 %14 = %5 * %14                       [Float][Float]
  00e44:    	mov    rdi,QWORD PTR [r14-0x58]
  00e48: 00 	test   rdi,0x1
  00e4f:    	jne    0x3091a
  00e55: 00 	test   rdi,0x2
  00e5c:    	je     0xe98
  00e62:    	xorps  xmm2,xmm2
  00e65: 00 	movabs rax,0x8000000000000002
  00e6f:    	cmp    rdi,rax
  00e72:    	je     0xeaa
  00e78:    	mov    rax,rdi
  00e7b:    	sar    rax,0x3f
  00e7f:    	add    rax,0x2
  00e83:    	and    rdi,0xfffffffffffffffc
  00e87:    	or     rdi,rax
  00e8a:    	rol    rdi,0x3d
  00e8e:    	movq   xmm2,rdi
  00e93:    	jmp    0xeaa
  00e98:    	call   0xfffe903d
  00e9d:    	test   rax,rax
  00ea0:    	je     0x3091a
  00ea6:    	movq   xmm2,xmm0
  00eaa: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00eb1: 00 	test   rdi,0x1
  00eb8:    	jne    0x30939
  00ebe: 00 	test   rdi,0x2
  00ec5:    	je     0xf01
  00ecb:    	xorps  xmm4,xmm4
  00ece: 00 	movabs rax,0x8000000000000002
  00ed8:    	cmp    rdi,rax
  00edb:    	je     0xf13
  00ee1:    	mov    rax,rdi
  00ee4:    	sar    rax,0x3f
  00ee8:    	add    rax,0x2
  00eec:    	and    rdi,0xfffffffffffffffc
  00ef0:    	or     rdi,rax
  00ef3:    	rol    rdi,0x3d
  00ef7:    	movq   xmm4,rdi
  00efc:    	jmp    0xf13
  00f01:    	call   0xfffe903d
  00f06:    	test   rax,rax
  00f09:    	je     0x30939
  00f0f:    	movq   xmm4,xmm0
  00f13:    	mulsd  xmm4,xmm2
:00066 %13 = %13 + %14                      [Float][Float]
  00f17:    	addsd  xmm3,xmm4
:00067 %14 = dynvar(2, %2)
  00f1b:    	mov    rax,QWORD PTR [r14-0x18]
  00f1f:    	mov    rax,QWORD PTR [rax]
  00f22:    	mov    rax,QWORD PTR [rax-0x28]
  00f26: ff 	mov    QWORD PTR [r14-0xa0],rax
:00068 %15 = 2: i32
  00f2d: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00069 %14 = %14.[%15]                      [Array][Integer]
  00f38: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f3f: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00f46: 00 	test   rdi,0x7
  00f4d:    	jne    0x30958
  00f53:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f57:    	jne    0x30958
  00f5d: 00 	test   rsi,0x1
  00f64:    	je     0x30958
  00f6a:    	sar    rsi,1
  00f6d:    	sub    rsp,0x10
  00f71:    	movq   QWORD PTR [rsp],xmm2
  00f76:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f7c: 95 	movabs rax,0x55955d9acd00
  00f86:    	call   rax
  00f88:    	movq   xmm2,QWORD PTR [rsp]
  00f8d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f93:    	add    rsp,0x10
  00f97: 95 	movabs r13,0x55955e13b9b0
  00fa1:    	test   rax,rax
  00fa4:    	je     0xfffe8fe4
  00faa: ff 	mov    QWORD PTR [r14-0xa0],rax
:00070 %14 = %14.call y()                   [Vec]
  00fb1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00fb8: 00 	test   rdi,0x7
  00fbf:    	jne    0x30977
  00fc5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00fc9:    	jne    0x30977
  00fcf: 26 	cmp    DWORD PTR [rip+0xfffffffffffec2a5],0x26        # 0xfffed27b
  00fd6:    	jne    0x30977
  00fdc:    	mov    esi,DWORD PTR [rip+0x11e2]        # 0x21c4
  00fe2:    	cmp    esi,0xffffffff
  00fe5:    	je     0x30996
  00feb:    	cmp    WORD PTR [rdi+0x2],0x3
  00ff0:    	jne    0x1009
  00ff6:    	cmp    esi,0x6
  00ff9:    	jge    0x1009
  00fff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01004:    	jmp    0x1027
  01009:    	sub    rsp,0x10
  0100d:    	movq   QWORD PTR [rsp],xmm3
  01012: 95 	movabs rax,0x55955d9e0e20
  0101c:    	call   rax
  0101e:    	movq   xmm3,QWORD PTR [rsp]
  01023:    	add    rsp,0x10
  01027: ff 	mov    QWORD PTR [r14-0xa0],rax
:00071 
:00072 %14 = %6 * %14                       [Float][Float]
  0102e:    	mov    rdi,QWORD PTR [r14-0x60]
  01032: 00 	test   rdi,0x1
  01039:    	jne    0x309d1
  0103f: 00 	test   rdi,0x2
  01046:    	je     0x1082
  0104c:    	xorps  xmm2,xmm2
  0104f: 00 	movabs rax,0x8000000000000002
  01059:    	cmp    rdi,rax
  0105c:    	je     0x1094
  01062:    	mov    rax,rdi
  01065:    	sar    rax,0x3f
  01069:    	add    rax,0x2
  0106d:    	and    rdi,0xfffffffffffffffc
  01071:    	or     rdi,rax
  01074:    	rol    rdi,0x3d
  01078:    	movq   xmm2,rdi
  0107d:    	jmp    0x1094
  01082:    	call   0xfffe903d
  01087:    	test   rax,rax
  0108a:    	je     0x309d1
  01090:    	movq   xmm2,xmm0
  01094: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0109b: 00 	test   rdi,0x1
  010a2:    	jne    0x309f0
  010a8: 00 	test   rdi,0x2
  010af:    	je     0x10eb
  010b5:    	xorps  xmm4,xmm4
  010b8: 00 	movabs rax,0x8000000000000002
  010c2:    	cmp    rdi,rax
  010c5:    	je     0x10fd
  010cb:    	mov    rax,rdi
  010ce:    	sar    rax,0x3f
  010d2:    	add    rax,0x2
  010d6:    	and    rdi,0xfffffffffffffffc
  010da:    	or     rdi,rax
  010dd:    	rol    rdi,0x3d
  010e1:    	movq   xmm4,rdi
  010e6:    	jmp    0x10fd
  010eb:    	call   0xfffe903d
  010f0:    	test   rax,rax
  010f3:    	je     0x309f0
  010f9:    	movq   xmm4,xmm0
  010fd:    	mulsd  xmm4,xmm2
:00073 %8 = %13 + %14                       [Float][Float]
  01101:    	movq   xmm5,xmm3
  01105:    	addsd  xmm5,xmm4
:00074 %13 = dynvar(2, %2)
  01109:    	mov    rax,QWORD PTR [r14-0x18]
  0110d:    	mov    rax,QWORD PTR [rax]
  01110:    	mov    rax,QWORD PTR [rax-0x28]
  01114: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 %14 = 0: i32
  0111b: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00076 %13 = %13.[%14]                      [Array][Integer]
  01126: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0112d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01134: 00 	test   rdi,0x7
  0113b:    	jne    0x30a0f
  01141:    	cmp    DWORD PTR [rdi+0x4],0xb
  01145:    	jne    0x30a0f
  0114b: 00 	test   rsi,0x1
  01152:    	je     0x30a0f
  01158:    	sar    rsi,1
  0115b:    	sub    rsp,0x10
  0115f:    	movq   QWORD PTR [rsp],xmm2
  01164:    	movq   QWORD PTR [rsp+0x8],xmm5
  0116a: 95 	movabs rax,0x55955d9acd00
  01174:    	call   rax
  01176:    	movq   xmm2,QWORD PTR [rsp]
  0117b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01181:    	add    rsp,0x10
  01185: 95 	movabs r13,0x55955e13ba20
  0118f:    	test   rax,rax
  01192:    	je     0xfffe8fe4
  01198: ff 	mov    QWORD PTR [r14-0x98],rax
:00077 %13 = %13.call z()                   [Vec]
  0119f:    	movq   xmm0,xmm5
  011a3:    	call   0xfffe9161
  011a8:    	mov    QWORD PTR [r14-0x70],rax
  011ac: ff 	mov    rdi,QWORD PTR [r14-0x98]
  011b3: 00 	test   rdi,0x7
  011ba:    	jne    0x30a2b
  011c0:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011c4:    	jne    0x30a2b
  011ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffec0aa],0x26        # 0xfffed27b
  011d1:    	jne    0x30a2b
  011d7:    	mov    esi,DWORD PTR [rip+0xfef]        # 0x21cc
  011dd:    	cmp    esi,0xffffffff
  011e0:    	je     0x30a3a
  011e6:    	cmp    WORD PTR [rdi+0x2],0x3
  011eb:    	jne    0x1204
  011f1:    	cmp    esi,0x6
  011f4:    	jge    0x1204
  011fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011ff:    	jmp    0x1210
  01204: 95 	movabs rax,0x55955d9e0e20
  0120e:    	call   rax
  01210: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 
:00079 %13 = %4 * %13                       [Float][Float]
  01217:    	mov    rdi,QWORD PTR [r14-0x50]
  0121b: 00 	test   rdi,0x1
  01222:    	jne    0x30a63
  01228: 00 	test   rdi,0x2
  0122f:    	je     0x126b
  01235:    	xorps  xmm2,xmm2
  01238: 00 	movabs rax,0x8000000000000002
  01242:    	cmp    rdi,rax
  01245:    	je     0x127d
  0124b:    	mov    rax,rdi
  0124e:    	sar    rax,0x3f
  01252:    	add    rax,0x2
  01256:    	and    rdi,0xfffffffffffffffc
  0125a:    	or     rdi,rax
  0125d:    	rol    rdi,0x3d
  01261:    	movq   xmm2,rdi
  01266:    	jmp    0x127d
  0126b:    	call   0xfffe903d
  01270:    	test   rax,rax
  01273:    	je     0x30a63
  01279:    	movq   xmm2,xmm0
  0127d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01284: 00 	test   rdi,0x1
  0128b:    	jne    0x30a72
  01291: 00 	test   rdi,0x2
  01298:    	je     0x12d4
  0129e:    	xorps  xmm3,xmm3
  012a1: 00 	movabs rax,0x8000000000000002
  012ab:    	cmp    rdi,rax
  012ae:    	je     0x12e6
  012b4:    	mov    rax,rdi
  012b7:    	sar    rax,0x3f
  012bb:    	add    rax,0x2
  012bf:    	and    rdi,0xfffffffffffffffc
  012c3:    	or     rdi,rax
  012c6:    	rol    rdi,0x3d
  012ca:    	movq   xmm3,rdi
  012cf:    	jmp    0x12e6
  012d4:    	call   0xfffe903d
  012d9:    	test   rax,rax
  012dc:    	je     0x30a72
  012e2:    	movq   xmm3,xmm0
  012e6:    	mulsd  xmm3,xmm2
:00080 %14 = dynvar(2, %2)
  012ea:    	mov    rax,QWORD PTR [r14-0x18]
  012ee:    	mov    rax,QWORD PTR [rax]
  012f1:    	mov    rax,QWORD PTR [rax-0x28]
  012f5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  012fc: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  01307: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0130e: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  01315: 00 	test   rdi,0x7
  0131c:    	jne    0x30a81
  01322:    	cmp    DWORD PTR [rdi+0x4],0xb
  01326:    	jne    0x30a81
  0132c: 00 	test   rsi,0x1
  01333:    	je     0x30a81
  01339:    	sar    rsi,1
  0133c:    	sub    rsp,0x10
  01340:    	movq   QWORD PTR [rsp],xmm2
  01345:    	movq   QWORD PTR [rsp+0x8],xmm3
  0134b: 95 	movabs rax,0x55955d9acd00
  01355:    	call   rax
  01357:    	movq   xmm2,QWORD PTR [rsp]
  0135c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01362:    	add    rsp,0x10
  01366: 95 	movabs r13,0x55955e13ba80
  01370:    	test   rax,rax
  01373:    	je     0xfffe8fe4
  01379: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %14 = %14.call z()                   [Vec]
  01380: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01387: 00 	test   rdi,0x7
  0138e:    	jne    0x30aa0
  01394:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01398:    	jne    0x30aa0
  0139e: 26 	cmp    DWORD PTR [rip+0xfffffffffffebed6],0x26        # 0xfffed27b
  013a5:    	jne    0x30aa0
  013ab:    	mov    esi,DWORD PTR [rip+0xe23]        # 0x21d4
  013b1:    	cmp    esi,0xffffffff
  013b4:    	je     0x30abf
  013ba:    	cmp    WORD PTR [rdi+0x2],0x3
  013bf:    	jne    0x13d8
  013c5:    	cmp    esi,0x6
  013c8:    	jge    0x13d8
  013ce:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013d3:    	jmp    0x13f6
  013d8:    	sub    rsp,0x10
  013dc:    	movq   QWORD PTR [rsp],xmm3
  013e1: 95 	movabs rax,0x55955d9e0e20
  013eb:    	call   rax
  013ed:    	movq   xmm3,QWORD PTR [rsp]
  013f2:    	add    rsp,0x10
  013f6: ff 	mov    QWORD PTR [r14-0xa0],rax
:00084 
:00085 %14 = %5 * %14                       [Float][Float]
  013fd:    	mov    rdi,QWORD PTR [r14-0x58]
  01401: 00 	test   rdi,0x1
  01408:    	jne    0x30afa
  0140e: 00 	test   rdi,0x2
  01415:    	je     0x1451
  0141b:    	xorps  xmm2,xmm2
  0141e: 00 	movabs rax,0x8000000000000002
  01428:    	cmp    rdi,rax
  0142b:    	je     0x1463
  01431:    	mov    rax,rdi
  01434:    	sar    rax,0x3f
  01438:    	add    rax,0x2
  0143c:    	and    rdi,0xfffffffffffffffc
  01440:    	or     rdi,rax
  01443:    	rol    rdi,0x3d
  01447:    	movq   xmm2,rdi
  0144c:    	jmp    0x1463
  01451:    	call   0xfffe903d
  01456:    	test   rax,rax
  01459:    	je     0x30afa
  0145f:    	movq   xmm2,xmm0
  01463: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0146a: 00 	test   rdi,0x1
  01471:    	jne    0x30b19
  01477: 00 	test   rdi,0x2
  0147e:    	je     0x14ba
  01484:    	xorps  xmm4,xmm4
  01487: 00 	movabs rax,0x8000000000000002
  01491:    	cmp    rdi,rax
  01494:    	je     0x14cc
  0149a:    	mov    rax,rdi
  0149d:    	sar    rax,0x3f
  014a1:    	add    rax,0x2
  014a5:    	and    rdi,0xfffffffffffffffc
  014a9:    	or     rdi,rax
  014ac:    	rol    rdi,0x3d
  014b0:    	movq   xmm4,rdi
  014b5:    	jmp    0x14cc
  014ba:    	call   0xfffe903d
  014bf:    	test   rax,rax
  014c2:    	je     0x30b19
  014c8:    	movq   xmm4,xmm0
  014cc:    	mulsd  xmm4,xmm2
:00086 %13 = %13 + %14                      [Float][Float]
  014d0:    	addsd  xmm3,xmm4
:00087 %14 = dynvar(2, %2)
  014d4:    	mov    rax,QWORD PTR [r14-0x18]
  014d8:    	mov    rax,QWORD PTR [rax]
  014db:    	mov    rax,QWORD PTR [rax-0x28]
  014df: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 2: i32
  014e6: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00089 %14 = %14.[%15]                      [Array][Integer]
  014f1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  014f8: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  014ff: 00 	test   rdi,0x7
  01506:    	jne    0x30b38
  0150c:    	cmp    DWORD PTR [rdi+0x4],0xb
  01510:    	jne    0x30b38
  01516: 00 	test   rsi,0x1
  0151d:    	je     0x30b38
  01523:    	sar    rsi,1
  01526:    	sub    rsp,0x10
  0152a:    	movq   QWORD PTR [rsp],xmm2
  0152f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01535: 95 	movabs rax,0x55955d9acd00
  0153f:    	call   rax
  01541:    	movq   xmm2,QWORD PTR [rsp]
  01546:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0154c:    	add    rsp,0x10
  01550: 95 	movabs r13,0x55955e13baf0
  0155a:    	test   rax,rax
  0155d:    	je     0xfffe8fe4
  01563: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %14 = %14.call z()                   [Vec]
  0156a: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01571: 00 	test   rdi,0x7
  01578:    	jne    0x30b57
  0157e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01582:    	jne    0x30b57
  01588: 26 	cmp    DWORD PTR [rip+0xfffffffffffebcec],0x26        # 0xfffed27b
  0158f:    	jne    0x30b57
  01595:    	mov    esi,DWORD PTR [rip+0xc41]        # 0x21dc
  0159b:    	cmp    esi,0xffffffff
  0159e:    	je     0x30b76
  015a4:    	cmp    WORD PTR [rdi+0x2],0x3
  015a9:    	jne    0x15c2
  015af:    	cmp    esi,0x6
  015b2:    	jge    0x15c2
  015b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  015bd:    	jmp    0x15e0
  015c2:    	sub    rsp,0x10
  015c6:    	movq   QWORD PTR [rsp],xmm3
  015cb: 95 	movabs rax,0x55955d9e0e20
  015d5:    	call   rax
  015d7:    	movq   xmm3,QWORD PTR [rsp]
  015dc:    	add    rsp,0x10
  015e0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 
:00092 %14 = %6 * %14                       [Float][Float]
  015e7:    	mov    rdi,QWORD PTR [r14-0x60]
  015eb: 00 	test   rdi,0x1
  015f2:    	jne    0x30bb1
  015f8: 00 	test   rdi,0x2
  015ff:    	je     0x163b
  01605:    	xorps  xmm2,xmm2
  01608: 00 	movabs rax,0x8000000000000002
  01612:    	cmp    rdi,rax
  01615:    	je     0x164d
  0161b:    	mov    rax,rdi
  0161e:    	sar    rax,0x3f
  01622:    	add    rax,0x2
  01626:    	and    rdi,0xfffffffffffffffc
  0162a:    	or     rdi,rax
  0162d:    	rol    rdi,0x3d
  01631:    	movq   xmm2,rdi
  01636:    	jmp    0x164d
  0163b:    	call   0xfffe903d
  01640:    	test   rax,rax
  01643:    	je     0x30bb1
  01649:    	movq   xmm2,xmm0
  0164d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01654: 00 	test   rdi,0x1
  0165b:    	jne    0x30bd0
  01661: 00 	test   rdi,0x2
  01668:    	je     0x16a4
  0166e:    	xorps  xmm4,xmm4
  01671: 00 	movabs rax,0x8000000000000002
  0167b:    	cmp    rdi,rax
  0167e:    	je     0x16b6
  01684:    	mov    rax,rdi
  01687:    	sar    rax,0x3f
  0168b:    	add    rax,0x2
  0168f:    	and    rdi,0xfffffffffffffffc
  01693:    	or     rdi,rax
  01696:    	rol    rdi,0x3d
  0169a:    	movq   xmm4,rdi
  0169f:    	jmp    0x16b6
  016a4:    	call   0xfffe903d
  016a9:    	test   rax,rax
  016ac:    	je     0x30bd0
  016b2:    	movq   xmm4,xmm0
  016b6:    	mulsd  xmm4,xmm2
:00093 %9 = %13 + %14                       [Float][Float]
  016ba:    	movq   xmm5,xmm3
  016be:    	addsd  xmm5,xmm4
:00094 %13 = const[Vec]                     [Vec]
  016c2: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebbc7]        # 0xfffed290
  016c9: 00 	cmp    rax,QWORD PTR [rip+0xb20]        # 0x21f0
  016d0:    	jne    0x30bef
  016d6: 00 	mov    rax,QWORD PTR [rip+0xb03]        # 0x21e0
  016dd: ff 	mov    QWORD PTR [r14-0x98],rax
:00095 %14 = %7
  016e4:    	mov    rax,QWORD PTR [r14-0x68]
  016e8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00096 %15 = %8
  016ef:    	mov    rax,QWORD PTR [r14-0x70]
  016f3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %16 = %9
:00098 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  016fa:    	movq   xmm0,xmm5
  016fe:    	call   0xfffe9161
  01703: ff 	mov    QWORD PTR [r14-0xb0],rax
  0170a:    	movq   xmm0,xmm5
  0170e:    	call   0xfffe9161
  01713:    	mov    QWORD PTR [r14-0x78],rax
  01717: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0171e: 00 	test   rdi,0x7
  01725:    	jne    0x30c5f
  0172b:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0172f:    	jne    0x30c5f
  01735: 26 	cmp    DWORD PTR [rip+0xfffffffffffebb3f],0x26        # 0xfffed27b
  0173c:    	jne    0x30c5f
  01742: 00 	mov    r9,0x0
  01749:    	sub    rsp,0x10
  0174d:    	movq   QWORD PTR [rsp],xmm5
  01752:    	mov    rdx,rdi
  01755:    	mov    QWORD PTR [rsp-0x40],rcx
  0175a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01763: ff 	lea    rcx,[r14-0xa0]
  0176a: 00 	mov    r8,0x3
  01771:    	mov    rsi,QWORD PTR [rbx]
  01774:    	mov    QWORD PTR [rsp-0x18],rsi
  01779:    	lea    rsi,[rsp-0x18]
  0177e:    	mov    QWORD PTR [rbx],rsi
  01781:    	lea    r14,[rsp-0x10]
  01786:    	mov    QWORD PTR [rsp-0x20],r14
  0178b:    	call   0x30c6e
  01790:    	lea    r14,[rbp-0x8]
  01794:    	mov    QWORD PTR [rbx],r14
  01797:    	mov    r14,QWORD PTR [rbp-0x10]
  0179b:    	movq   xmm5,QWORD PTR [rsp]
  017a0:    	add    rsp,0x10
  017a4: 95 	movabs r13,0x55955e13bb90
  017ae:    	test   rax,rax
  017b1:    	je     0xfffe8fe4
  017b7:    	mov    QWORD PTR [r14-0x80],rax
:00099 
:00100 %13 = const[Ray]                     [Ray]
  017bb: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebace]        # 0xfffed290
  017c2: 00 	cmp    rax,QWORD PTR [rip+0xa47]        # 0x2210
  017c9:    	jne    0x30ca0
  017cf: 00 	mov    rax,QWORD PTR [rip+0xa2a]        # 0x2200
  017d6: ff 	mov    QWORD PTR [r14-0x98],rax
:00101 %14 = dynvar(2, %7)
  017dd:    	mov    rax,QWORD PTR [r14-0x18]
  017e1:    	mov    rax,QWORD PTR [rax]
  017e4:    	mov    rax,QWORD PTR [rax-0x50]
  017e8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00102 %15 = %10
  017ef:    	mov    rax,QWORD PTR [r14-0x80]
  017f3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  017fa: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01801: 00 	test   rdi,0x7
  01808:    	jne    0x30cf8
  0180e:    	cmp    DWORD PTR [rdi+0x4],0x32
  01812:    	jne    0x30cf8
  01818: 26 	cmp    DWORD PTR [rip+0xfffffffffffeba5c],0x26        # 0xfffed27b
  0181f:    	jne    0x30cf8
  01825: 00 	mov    r9,0x0
  0182c:    	sub    rsp,0x10
  01830:    	movq   QWORD PTR [rsp],xmm5
  01835:    	mov    rdx,rdi
  01838:    	mov    QWORD PTR [rsp-0x40],rcx
  0183d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01846: ff 	lea    rcx,[r14-0xa0]
  0184d: 00 	mov    r8,0x2
  01854:    	mov    rsi,QWORD PTR [rbx]
  01857:    	mov    QWORD PTR [rsp-0x18],rsi
  0185c:    	lea    rsi,[rsp-0x18]
  01861:    	mov    QWORD PTR [rbx],rsi
  01864:    	lea    r14,[rsp-0x10]
  01869:    	mov    QWORD PTR [rsp-0x20],r14
  0186e:    	call   0x30d07
  01873:    	lea    r14,[rbp-0x8]
  01877:    	mov    QWORD PTR [rbx],r14
  0187a:    	mov    r14,QWORD PTR [rbp-0x10]
  0187e:    	movq   xmm5,QWORD PTR [rsp]
  01883:    	add    rsp,0x10
  01887: 95 	movabs r13,0x55955e13bbe0
  01891:    	test   rax,rax
  01894:    	je     0xfffe8fe4
  0189a: ff 	mov    QWORD PTR [r14-0x88],rax
:00104 
:00105 %13 = const[Isect]                   [Isect]
  018a1: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb9e8]        # 0xfffed290
  018a8: 00 	cmp    rax,QWORD PTR [rip+0x981]        # 0x2230
  018af:    	jne    0x30d39
  018b5: 00 	mov    rax,QWORD PTR [rip+0x964]        # 0x2220
  018bc: ff 	mov    QWORD PTR [r14-0x98],rax
:00106 %12 = %13.call new()                 [#<Class:Isect>]
  018c3: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ca: 00 	test   rdi,0x7
  018d1:    	jne    0x30d91
  018d7:    	cmp    DWORD PTR [rdi+0x4],0x34
  018db:    	jne    0x30d91
  018e1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb993],0x26        # 0xfffed27b
  018e8:    	jne    0x30d91
  018ee: 00 	mov    r9,0x0
  018f5:    	sub    rsp,0x10
  018f9:    	movq   QWORD PTR [rsp],xmm5
  018fe:    	mov    rdx,rdi
  01901:    	mov    QWORD PTR [rsp-0x40],rcx
  01906: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0190f: ff 	lea    rcx,[r14-0xa0]
  01916: 00 	mov    r8,0x0
  0191d:    	mov    rsi,QWORD PTR [rbx]
  01920:    	mov    QWORD PTR [rsp-0x18],rsi
  01925:    	lea    rsi,[rsp-0x18]
  0192a:    	mov    QWORD PTR [rbx],rsi
  0192d:    	lea    r14,[rsp-0x10]
  01932:    	mov    QWORD PTR [rsp-0x20],r14
  01937:    	call   0x30da0
  0193c:    	lea    r14,[rbp-0x8]
  01940:    	mov    QWORD PTR [rbx],r14
  01943:    	mov    r14,QWORD PTR [rbp-0x10]
  01947:    	movq   xmm5,QWORD PTR [rsp]
  0194c:    	add    rsp,0x10
  01950: 95 	movabs r13,0x55955e13bc10
  0195a:    	test   rax,rax
  0195d:    	je     0xfffe8fe4
  01963: ff 	mov    QWORD PTR [r14-0x90],rax
:00107 
:00108 %13 = @spheres: Scene[IvarId(0)]
  0196a:    	mov    rdi,QWORD PTR [r14-0x30]
  0196e:    	mov    rax,QWORD PTR [rdi+0x10]
  01972: ff 	mov    QWORD PTR [r14-0x98],rax
:00109 %14 = 0: i32
  01979: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00110 %13 = %13.[%14]                      [Array][Integer]
  01984: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0198b: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01992: 00 	test   rdi,0x7
  01999:    	jne    0x30dd2
  0199f:    	cmp    DWORD PTR [rdi+0x4],0xb
  019a3:    	jne    0x30dd2
  019a9: 00 	test   rsi,0x1
  019b0:    	je     0x30dd2
  019b6:    	sar    rsi,1
  019b9:    	sub    rsp,0x10
  019bd:    	movq   QWORD PTR [rsp],xmm5
  019c2: 95 	movabs rax,0x55955d9acd00
  019cc:    	call   rax
  019ce:    	movq   xmm5,QWORD PTR [rsp]
  019d3:    	add    rsp,0x10
  019d7: 95 	movabs r13,0x55955e13bc40
  019e1:    	test   rax,rax
  019e4:    	je     0xfffe8fe4
  019ea: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %11
  019f1: ff 	mov    rax,QWORD PTR [r14-0x88]
  019f8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00112 %15 = %12
  019ff: ff 	mov    rax,QWORD PTR [r14-0x90]
  01a06: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 _ = %13.call intersect(%14; 2)       [Sphere]
  01a0d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a14: 00 	test   rdi,0x7
  01a1b:    	jne    0x30de1
  01a21:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01a25:    	jne    0x30de1
  01a2b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb849],0x26        # 0xfffed27b
  01a32:    	jne    0x30de1
  01a38:    	sub    rsp,0x10
  01a3c:    	movq   QWORD PTR [rsp],xmm5
  01a41: 00 	cmp    DWORD PTR [rip+0xfffffffffffeb837],0x0        # 0xfffed27f
  01a48:    	je     0x1a60
  01a4e:    	mov    rdi,r12
  01a51:    	mov    rsi,QWORD PTR [rbx]
  01a54: 95 	movabs rax,0x55955d9a3d50
  01a5e:    	call   rax
  01a60: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a69: ff 	mov    rax,QWORD PTR [r14-0x98]
  01a70:    	mov    QWORD PTR [rsp-0x40],rax
  01a75: 00 	mov    rdi,0x2
  01a7c: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01a83:    	mov    QWORD PTR [rsp-0x48],rax
  01a88: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a8f:    	mov    QWORD PTR [rsp-0x50],rax
  01a94: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a9d: 0e 	movabs rax,0x1000e00000061
  01aa7:    	mov    QWORD PTR [rsp-0x30],rax
  01aac: 95 	movabs r13,0x55955e16d0b0
  01ab6:    	mov    rsi,QWORD PTR [rbx]
  01ab9:    	mov    QWORD PTR [rsp-0x18],rsi
  01abe:    	lea    rsi,[rsp-0x18]
  01ac3:    	mov    QWORD PTR [rbx],rsi
  01ac6:    	lea    r14,[rsp-0x10]
  01acb:    	mov    QWORD PTR [rsp-0x20],r14
  01ad0:    	call   0xfffede3c
  01ad5:    	lea    r14,[rbp-0x8]
  01ad9:    	mov    QWORD PTR [rbx],r14
  01adc:    	mov    r14,QWORD PTR [rbp-0x10]
  01ae0:    	movq   xmm5,QWORD PTR [rsp]
  01ae5:    	add    rsp,0x10
  01ae9: 95 	movabs r13,0x55955e13bc80
  01af3:    	test   rax,rax
  01af6:    	je     0xfffe8fe4
:00114 
:00115 %13 = @spheres: Scene[IvarId(0)]
  01afc:    	mov    rdi,QWORD PTR [r14-0x30]
  01b00:    	mov    rax,QWORD PTR [rdi+0x10]
  01b04: ff 	mov    QWORD PTR [r14-0x98],rax
:00116 %14 = 1: i32
  01b0b: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00117 %13 = %13.[%14]                      [Array][Integer]
  01b16: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01b1d: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01b24: 00 	test   rdi,0x7
  01b2b:    	jne    0x30df0
  01b31:    	cmp    DWORD PTR [rdi+0x4],0xb
  01b35:    	jne    0x30df0
  01b3b: 00 	test   rsi,0x1
  01b42:    	je     0x30df0
  01b48:    	sar    rsi,1
  01b4b:    	sub    rsp,0x10
  01b4f:    	movq   QWORD PTR [rsp],xmm5
  01b54: 95 	movabs rax,0x55955d9acd00
  01b5e:    	call   rax
  01b60:    	movq   xmm5,QWORD PTR [rsp]
  01b65:    	add    rsp,0x10
  01b69: 95 	movabs r13,0x55955e13bcb0
  01b73:    	test   rax,rax
  01b76:    	je     0xfffe8fe4
  01b7c: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = %11
  01b83: ff 	mov    rax,QWORD PTR [r14-0x88]
  01b8a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %12
  01b91: ff 	mov    rax,QWORD PTR [r14-0x90]
  01b98: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 _ = %13.call intersect(%14; 2)       [Sphere]
  01b9f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ba6: 00 	test   rdi,0x7
  01bad:    	jne    0x30dff
  01bb3:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01bb7:    	jne    0x30dff
  01bbd: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb6b7],0x26        # 0xfffed27b
  01bc4:    	jne    0x30dff
  01bca:    	sub    rsp,0x10
  01bce:    	movq   QWORD PTR [rsp],xmm5
  01bd3: 00 	cmp    DWORD PTR [rip+0xfffffffffffeb6a5],0x0        # 0xfffed27f
  01bda:    	je     0x1bf2
  01be0:    	mov    rdi,r12
  01be3:    	mov    rsi,QWORD PTR [rbx]
  01be6: 95 	movabs rax,0x55955d9a3d50
  01bf0:    	call   rax
  01bf2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01bfb: ff 	mov    rax,QWORD PTR [r14-0x98]
  01c02:    	mov    QWORD PTR [rsp-0x40],rax
  01c07: 00 	mov    rdi,0x2
  01c0e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01c15:    	mov    QWORD PTR [rsp-0x48],rax
  01c1a: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01c21:    	mov    QWORD PTR [rsp-0x50],rax
  01c26: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c2f: 0e 	movabs rax,0x1000e00000061
  01c39:    	mov    QWORD PTR [rsp-0x30],rax
  01c3e: 95 	movabs r13,0x55955e16d0b0
  01c48:    	mov    rsi,QWORD PTR [rbx]
  01c4b:    	mov    QWORD PTR [rsp-0x18],rsi
  01c50:    	lea    rsi,[rsp-0x18]
  01c55:    	mov    QWORD PTR [rbx],rsi
  01c58:    	lea    r14,[rsp-0x10]
  01c5d:    	mov    QWORD PTR [rsp-0x20],r14
  01c62:    	call   0xfffede3c
  01c67:    	lea    r14,[rbp-0x8]
  01c6b:    	mov    QWORD PTR [rbx],r14
  01c6e:    	mov    r14,QWORD PTR [rbp-0x10]
  01c72:    	movq   xmm5,QWORD PTR [rsp]
  01c77:    	add    rsp,0x10
  01c7b: 95 	movabs r13,0x55955e13bcf0
  01c85:    	test   rax,rax
  01c88:    	je     0xfffe8fe4
:00121 
:00122 %13 = @spheres: Scene[IvarId(0)]
  01c8e:    	mov    rdi,QWORD PTR [r14-0x30]
  01c92:    	mov    rax,QWORD PTR [rdi+0x10]
  01c96: ff 	mov    QWORD PTR [r14-0x98],rax
:00123 %14 = 2: i32
  01c9d: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00124 %13 = %13.[%14]                      [Array][Integer]
  01ca8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01caf: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01cb6: 00 	test   rdi,0x7
  01cbd:    	jne    0x30e0e
  01cc3:    	cmp    DWORD PTR [rdi+0x4],0xb
  01cc7:    	jne    0x30e0e
  01ccd: 00 	test   rsi,0x1
  01cd4:    	je     0x30e0e
  01cda:    	sar    rsi,1
  01cdd:    	sub    rsp,0x10
  01ce1:    	movq   QWORD PTR [rsp],xmm5
  01ce6: 95 	movabs rax,0x55955d9acd00
  01cf0:    	call   rax
  01cf2:    	movq   xmm5,QWORD PTR [rsp]
  01cf7:    	add    rsp,0x10
  01cfb: 95 	movabs r13,0x55955e13bd20
  01d05:    	test   rax,rax
  01d08:    	je     0xfffe8fe4
  01d0e: ff 	mov    QWORD PTR [r14-0x98],rax
:00125 %14 = %11
  01d15: ff 	mov    rax,QWORD PTR [r14-0x88]
  01d1c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00126 %15 = %12
  01d23: ff 	mov    rax,QWORD PTR [r14-0x90]
  01d2a: ff 	mov    QWORD PTR [r14-0xa8],rax
:00127 _ = %13.call intersect(%14; 2)       [Sphere]
  01d31: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d38: 00 	test   rdi,0x7
  01d3f:    	jne    0x30e1d
  01d45:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01d49:    	jne    0x30e1d
  01d4f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb525],0x26        # 0xfffed27b
  01d56:    	jne    0x30e1d
  01d5c:    	sub    rsp,0x10
  01d60:    	movq   QWORD PTR [rsp],xmm5
  01d65: 00 	cmp    DWORD PTR [rip+0xfffffffffffeb513],0x0        # 0xfffed27f
  01d6c:    	je     0x1d84
  01d72:    	mov    rdi,r12
  01d75:    	mov    rsi,QWORD PTR [rbx]
  01d78: 95 	movabs rax,0x55955d9a3d50
  01d82:    	call   rax
  01d84: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d8d: ff 	mov    rax,QWORD PTR [r14-0x98]
  01d94:    	mov    QWORD PTR [rsp-0x40],rax
  01d99: 00 	mov    rdi,0x2
  01da0: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01da7:    	mov    QWORD PTR [rsp-0x48],rax
  01dac: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01db3:    	mov    QWORD PTR [rsp-0x50],rax
  01db8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dc1: 0e 	movabs rax,0x1000e00000061
  01dcb:    	mov    QWORD PTR [rsp-0x30],rax
  01dd0: 95 	movabs r13,0x55955e16d0b0
  01dda:    	mov    rsi,QWORD PTR [rbx]
  01ddd:    	mov    QWORD PTR [rsp-0x18],rsi
  01de2:    	lea    rsi,[rsp-0x18]
  01de7:    	mov    QWORD PTR [rbx],rsi
  01dea:    	lea    r14,[rsp-0x10]
  01def:    	mov    QWORD PTR [rsp-0x20],r14
  01df4:    	call   0xfffede3c
  01df9:    	lea    r14,[rbp-0x8]
  01dfd:    	mov    QWORD PTR [rbx],r14
  01e00:    	mov    r14,QWORD PTR [rbp-0x10]
  01e04:    	movq   xmm5,QWORD PTR [rsp]
  01e09:    	add    rsp,0x10
  01e0d: 95 	movabs r13,0x55955e13bd60
  01e17:    	test   rax,rax
  01e1a:    	je     0xfffe8fe4
:00128 
:00129 %13 = @plane: Scene[IvarId(1)]
  01e20:    	mov    rdi,QWORD PTR [r14-0x30]
  01e24:    	mov    rax,QWORD PTR [rdi+0x18]
  01e28: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01e2f: ff 	mov    rax,QWORD PTR [r14-0x88]
  01e36: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01e3d: ff 	mov    rax,QWORD PTR [r14-0x90]
  01e44: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Plane]
  01e4b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01e52: 00 	test   rdi,0x7
  01e59:    	jne    0x30e2c
  01e5f:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01e63:    	jne    0x30e2c
  01e69: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb40b],0x26        # 0xfffed27b
  01e70:    	jne    0x30e2c
  01e76:    	sub    rsp,0x10
  01e7a:    	movq   QWORD PTR [rsp],xmm5
  01e7f: 00 	cmp    DWORD PTR [rip+0xfffffffffffeb3f9],0x0        # 0xfffed27f
  01e86:    	je     0x1e9e
  01e8c:    	mov    rdi,r12
  01e8f:    	mov    rsi,QWORD PTR [rbx]
  01e92: 95 	movabs rax,0x55955d9a3d50
  01e9c:    	call   rax
  01e9e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ea7: ff 	mov    rax,QWORD PTR [r14-0x98]
  01eae:    	mov    QWORD PTR [rsp-0x40],rax
  01eb3: 00 	mov    rdi,0x2
  01eba: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01ec1:    	mov    QWORD PTR [rsp-0x48],rax
  01ec6: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01ecd:    	mov    QWORD PTR [rsp-0x50],rax
  01ed2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01edb: 0c 	movabs rax,0x1000c00000063
  01ee5:    	mov    QWORD PTR [rsp-0x30],rax
  01eea: 95 	movabs r13,0x55955e173c50
  01ef4:    	mov    rsi,QWORD PTR [rbx]
  01ef7:    	mov    QWORD PTR [rsp-0x18],rsi
  01efc:    	lea    rsi,[rsp-0x18]
  01f01:    	mov    QWORD PTR [rbx],rsi
  01f04:    	lea    r14,[rsp-0x10]
  01f09:    	mov    QWORD PTR [rsp-0x20],r14
  01f0e:    	call   0xfffee408
  01f13:    	lea    r14,[rbp-0x8]
  01f17:    	mov    QWORD PTR [rbx],r14
  01f1a:    	mov    r14,QWORD PTR [rbp-0x10]
  01f1e:    	movq   xmm5,QWORD PTR [rsp]
  01f23:    	add    rsp,0x10
  01f27: 95 	movabs r13,0x55955e13bdb0
  01f31:    	test   rax,rax
  01f34:    	je     0xfffe8fe4
:00133 
:00134 %13 = %12.call hit()                 [Isect]
  01f3a: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01f41: 00 	test   rdi,0x7
  01f48:    	jne    0x30e3b
  01f4e:    	cmp    DWORD PTR [rdi+0x4],0x33
  01f52:    	jne    0x30e3b
  01f58: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb31c],0x26        # 0xfffed27b
  01f5f:    	jne    0x30e3b
  01f65:    	mov    esi,DWORD PTR [rip+0x2d1]        # 0x223c
  01f6b:    	cmp    esi,0xffffffff
  01f6e:    	je     0x30e4a
  01f74:    	cmp    WORD PTR [rdi+0x2],0x3
  01f79:    	jne    0x1f92
  01f7f:    	cmp    esi,0x6
  01f82:    	jge    0x1f92
  01f88:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f8d:    	jmp    0x1fb0
  01f92:    	sub    rsp,0x10
  01f96:    	movq   QWORD PTR [rsp],xmm5
  01f9b: 95 	movabs rax,0x55955d9e0e20
  01fa5:    	call   rax
  01fa7:    	movq   xmm5,QWORD PTR [rsp]
  01fac:    	add    rsp,0x10
  01fb0: ff 	mov    QWORD PTR [r14-0x98],rax
:00135 
:00136 condnotbr %13 =>:00142
  01fb7: ff 	mov    rax,QWORD PTR [r14-0x98]
  01fbe:    	or     rax,0x10
  01fc2:    	cmp    rax,0x14
  01fc6:    	je     0x208f
:00137 %13 = dynvar(2, %6)
  01fcc:    	mov    rax,QWORD PTR [r14-0x18]
  01fd0:    	mov    rax,QWORD PTR [rax]
  01fd3:    	mov    rax,QWORD PTR [rax-0x48]
  01fd7: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = literal[1.0]
  01fde: 00 	movq   xmm2,QWORD PTR [rip+0x25a]        # 0x2240
  01fe6: 00 	movabs rax,0xff80000000000002
  01ff0: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %13 = %13 + %14                      [Float][Float]
  01ff7: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ffe: 00 	test   rdi,0x1
  02005:    	jne    0x30e85
  0200b: 00 	test   rdi,0x2
  02012:    	je     0x204e
  02018:    	xorps  xmm3,xmm3
  0201b: 00 	movabs rax,0x8000000000000002
  02025:    	cmp    rdi,rax
  02028:    	je     0x2060
  0202e:    	mov    rax,rdi
  02031:    	sar    rax,0x3f
  02035:    	add    rax,0x2
  02039:    	and    rdi,0xfffffffffffffffc
  0203d:    	or     rdi,rax
  02040:    	rol    rdi,0x3d
  02044:    	movq   xmm3,rdi
  02049:    	jmp    0x2060
  0204e:    	call   0xfffe903d
  02053:    	test   rax,rax
  02056:    	je     0x30e85
  0205c:    	movq   xmm3,xmm0
  02060:    	addsd  xmm3,xmm2
:00140 dynvar(2, %6) = %13
  02064:    	movq   xmm0,xmm3
  02068:    	call   0xfffe9161
  0206d: ff 	mov    QWORD PTR [r14-0x98],rax
  02074:    	mov    rax,QWORD PTR [r14-0x18]
  02078:    	mov    rax,QWORD PTR [rax]
  0207b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02082:    	mov    QWORD PTR [rax-0x48],rdi
:00141 ret %13
  02086: ff 	mov    rax,QWORD PTR [r14-0x98]
  0208d:    	leave  
  0208e:    	ret    
:00142 %13 = literal[0.0]
  0208f: 00 	movq   xmm2,QWORD PTR [rip+0x1b9]        # 0x2250
  02097: 00 	movabs rax,0x8000000000000002
  020a1: ff 	mov    QWORD PTR [r14-0x98],rax
:00143 ret %13
  020a8: ff 	mov    rax,QWORD PTR [r14-0x98]
  020af:    	leave  
  020b0:    	ret    
==> start whole compile: otherBasis FuncId(87) self_class:Scene start:[00000] bytecode:0x55955e1823e0
<== finished compile. elapsed:134µs
offset:Pos(103064) code: 6462 bytes  data: 310 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x2ec3c
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x2ec4b
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x2ec4b
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeafdf]        # 0xfffeb038
  00059: 00 	cmp    rax,QWORD PTR [rip+0x18f8]        # 0x1958
  00060:    	jne    0x2ec5a
  00066: 00 	mov    rax,QWORD PTR [rip+0x18db]        # 0x1948
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x2eca0
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x2eca0
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaf90],0x26        # 0xfffeb023
  00093:    	jne    0x2eca0
  00099:    	mov    esi,DWORD PTR [rip+0x18c5]        # 0x1964
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x2ecaf
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 95 	movabs rax,0x55955d9e0e20
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x2ecd8
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x2ecd8
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaf2b],0x26        # 0xfffeb023
  000f8:    	jne    0x2ecd8
  000fe:    	mov    esi,DWORD PTR [rip+0x1868]        # 0x196c
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x2ece7
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 95 	movabs rax,0x55955d9e0e20
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x2ed10
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x2ed10
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaec6],0x26        # 0xfffeb023
  0015d:    	jne    0x2ed10
  00163:    	mov    esi,DWORD PTR [rip+0x180b]        # 0x1974
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x2ed1f
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 95 	movabs rax,0x55955d9e0e20
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x2ed48
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x2ed48
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffeae61],0x26        # 0xfffeb023
  001c2:    	jne    0x2ed48
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x2ed57
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215: 95 	movabs r13,0x55955e182490
  0021f:    	test   rax,rax
  00222:    	je     0xfffe6d8c
  00228:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  0022c:    	mov    rdi,QWORD PTR [r14-0x38]
  00230:    	mov    rsi,QWORD PTR [r14-0x48]
  00234: 00 	test   rdi,0x7
  0023b:    	jne    0x2ed89
  00241:    	cmp    DWORD PTR [rdi+0x4],0xb
  00245:    	jne    0x2ed89
  0024b: 00 	test   rsi,0x1
  00252:    	je     0x2ed89
  00258:    	sar    rsi,1
  0025b:    	mov    rdx,r12
  0025e:    	mov    rcx,QWORD PTR [r14-0x50]
  00262: 95 	movabs rax,0x55955d9ace90
  0026c:    	call   rax
  0026e: 95 	movabs r13,0x55955e1824a0
  00278:    	test   rax,rax
  0027b:    	je     0xfffe6d8c
:00012 %3 = 1: i32
  00281: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00289: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeada8]        # 0xfffeb038
  00290: 00 	cmp    rax,QWORD PTR [rip+0x16f1]        # 0x1988
  00297:    	jne    0x2ed98
  0029d: 00 	mov    rax,QWORD PTR [rip+0x16d4]        # 0x1978
  002a4:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  002a8: 00 	movq   xmm2,QWORD PTR [rip+0x16e8]        # 0x1998
  002b0: 00 	movabs rax,0x8000000000000002
  002ba:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002be: 00 	movq   xmm3,QWORD PTR [rip+0x16e2]        # 0x19a8
  002c6: 00 	movabs rax,0x8000000000000002
  002d0:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002d4: 00 	movq   xmm4,QWORD PTR [rip+0x16dc]        # 0x19b8
  002dc: 00 	movabs rax,0x8000000000000002
  002e6:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002ea:    	mov    rdi,QWORD PTR [r14-0x50]
  002ee: 00 	test   rdi,0x7
  002f5:    	jne    0x2edde
  002fb:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002ff:    	jne    0x2edde
  00305: 26 	cmp    DWORD PTR [rip+0xfffffffffffead17],0x26        # 0xfffeb023
  0030c:    	jne    0x2edde
  00312: 00 	mov    r9,0x0
  00319:    	sub    rsp,0x20
  0031d:    	movq   QWORD PTR [rsp],xmm2
  00322:    	movq   QWORD PTR [rsp+0x8],xmm3
  00328:    	movq   QWORD PTR [rsp+0x10],xmm4
  0032e:    	mov    rdx,rdi
  00331:    	mov    QWORD PTR [rsp-0x40],rcx
  00336: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0033f:    	lea    rcx,[r14-0x58]
  00343: 00 	mov    r8,0x3
  0034a:    	mov    rsi,QWORD PTR [rbx]
  0034d:    	mov    QWORD PTR [rsp-0x18],rsi
  00352:    	lea    rsi,[rsp-0x18]
  00357:    	mov    QWORD PTR [rbx],rsi
  0035a:    	lea    r14,[rsp-0x10]
  0035f:    	mov    QWORD PTR [rsp-0x20],r14
  00364:    	call   0x2eded
  00369:    	lea    r14,[rbp-0x8]
  0036d:    	mov    QWORD PTR [rbx],r14
  00370:    	mov    r14,QWORD PTR [rbp-0x10]
  00374:    	movq   xmm2,QWORD PTR [rsp]
  00379:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0037f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00385:    	add    rsp,0x20
  00389: 95 	movabs r13,0x55955e182510
  00393:    	test   rax,rax
  00396:    	je     0xfffe6d8c
  0039c:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  003a0:    	mov    rdi,QWORD PTR [r14-0x38]
  003a4:    	mov    rsi,QWORD PTR [r14-0x48]
  003a8: 00 	test   rdi,0x7
  003af:    	jne    0x2ee1f
  003b5:    	cmp    DWORD PTR [rdi+0x4],0xb
  003b9:    	jne    0x2ee1f
  003bf: 00 	test   rsi,0x1
  003c6:    	je     0x2ee1f
  003cc:    	sar    rsi,1
  003cf:    	sub    rsp,0x20
  003d3:    	movq   QWORD PTR [rsp],xmm2
  003d8:    	movq   QWORD PTR [rsp+0x8],xmm3
  003de:    	movq   QWORD PTR [rsp+0x10],xmm4
  003e4:    	mov    rdx,r12
  003e7:    	mov    rcx,QWORD PTR [r14-0x50]
  003eb: 95 	movabs rax,0x55955d9ace90
  003f5:    	call   rax
  003f7:    	movq   xmm2,QWORD PTR [rsp]
  003fc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00402:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00408:    	add    rsp,0x20
  0040c: 95 	movabs r13,0x55955e182520
  00416:    	test   rax,rax
  00419:    	je     0xfffe6d8c
:00020 %3 = %2.call x()                     [Vec]
  0041f:    	mov    rdi,QWORD PTR [r14-0x40]
  00423: 00 	test   rdi,0x7
  0042a:    	jne    0x2ee2e
  00430:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00434:    	jne    0x2ee2e
  0043a: 26 	cmp    DWORD PTR [rip+0xfffffffffffeabe2],0x26        # 0xfffeb023
  00441:    	jne    0x2ee2e
  00447:    	mov    esi,DWORD PTR [rip+0x1577]        # 0x19c4
  0044d:    	cmp    esi,0xffffffff
  00450:    	je     0x2ee3d
  00456:    	cmp    WORD PTR [rdi+0x2],0x3
  0045b:    	jne    0x474
  00461:    	cmp    esi,0x6
  00464:    	jge    0x474
  0046a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0046f:    	jmp    0x4aa
  00474:    	sub    rsp,0x20
  00478:    	movq   QWORD PTR [rsp],xmm2
  0047d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00483:    	movq   QWORD PTR [rsp+0x10],xmm4
  00489: 95 	movabs rax,0x55955d9e0e20
  00493:    	call   rax
  00495:    	movq   xmm2,QWORD PTR [rsp]
  0049a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a6:    	add    rsp,0x20
  004aa:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  004ae: 00 	movq   xmm5,QWORD PTR [rip+0x1512]        # 0x19c8
  004b6: 99 	movabs rax,0xff1999999999999a
  004c0:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
:00024 condnotbr _%3 =>:00036
  004c4:    	mov    rdi,QWORD PTR [r14-0x48]
  004c8: 00 	test   rdi,0x1
  004cf:    	jne    0x2ee90
  004d5: 00 	test   rdi,0x2
  004dc:    	je     0x518
  004e2:    	xorps  xmm6,xmm6
  004e5: 00 	movabs rax,0x8000000000000002
  004ef:    	cmp    rdi,rax
  004f2:    	je     0x52a
  004f8:    	mov    rax,rdi
  004fb:    	sar    rax,0x3f
  004ff:    	add    rax,0x2
  00503:    	and    rdi,0xfffffffffffffffc
  00507:    	or     rdi,rax
  0050a:    	rol    rdi,0x3d
  0050e:    	movq   xmm6,rdi
  00513:    	jmp    0x52a
  00518:    	call   0xfffe6de5
  0051d:    	test   rax,rax
  00520:    	je     0x2ee90
  00526:    	movq   xmm6,xmm0
  0052a:    	ucomisd xmm6,xmm5
  0052e:    	jae    0x2efa0
:00025 %3 = %2.call x()                     [Vec]
  00534:    	mov    rdi,QWORD PTR [r14-0x40]
  00538: 00 	test   rdi,0x7
  0053f:    	jne    0x2ee9f
  00545:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00549:    	jne    0x2ee9f
  0054f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaacd],0x26        # 0xfffeb023
  00556:    	jne    0x2ee9f
  0055c:    	mov    esi,DWORD PTR [rip+0x1472]        # 0x19d4
  00562:    	cmp    esi,0xffffffff
  00565:    	je     0x2eeae
  0056b:    	cmp    WORD PTR [rdi+0x2],0x3
  00570:    	jne    0x589
  00576:    	cmp    esi,0x6
  00579:    	jge    0x589
  0057f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00584:    	jmp    0x5cb
  00589:    	sub    rsp,0x20
  0058d:    	movq   QWORD PTR [rsp],xmm2
  00592:    	movq   QWORD PTR [rsp+0x8],xmm3
  00598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0059e:    	movq   QWORD PTR [rsp+0x18],xmm5
  005a4: 95 	movabs rax,0x55955d9e0e20
  005ae:    	call   rax
  005b0:    	movq   xmm2,QWORD PTR [rsp]
  005b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c7:    	add    rsp,0x20
  005cb:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005cf: 00 	movq   xmm5,QWORD PTR [rip+0x1401]        # 0x19d8
  005d7: 99 	movabs rax,0xff1999999999999e
  005e1:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
:00029 condnotbr _%3 =>:00036
  005e5:    	mov    rdi,QWORD PTR [r14-0x48]
  005e9: 00 	test   rdi,0x1
  005f0:    	jne    0x2ef0d
  005f6: 00 	test   rdi,0x2
  005fd:    	je     0x639
  00603:    	xorps  xmm6,xmm6
  00606: 00 	movabs rax,0x8000000000000002
  00610:    	cmp    rdi,rax
  00613:    	je     0x64b
  00619:    	mov    rax,rdi
  0061c:    	sar    rax,0x3f
  00620:    	add    rax,0x2
  00624:    	and    rdi,0xfffffffffffffffc
  00628:    	or     rdi,rax
  0062b:    	rol    rdi,0x3d
  0062f:    	movq   xmm6,rdi
  00634:    	jmp    0x64b
  00639:    	call   0xfffe6de5
  0063e:    	test   rax,rax
  00641:    	je     0x2ef0d
  00647:    	movq   xmm6,xmm0
  0064b:    	ucomisd xmm6,xmm5
  0064f:    	jbe    0x2efb9
:00030 %3 = 1: i32
  00655: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  0065d:    	mov    rdi,QWORD PTR [r14-0x38]
  00661:    	mov    rsi,QWORD PTR [r14-0x48]
  00665: 00 	test   rdi,0x7
  0066c:    	jne    0x2ef1c
  00672:    	cmp    DWORD PTR [rdi+0x4],0xb
  00676:    	jne    0x2ef1c
  0067c: 00 	test   rsi,0x1
  00683:    	je     0x2ef1c
  00689:    	sar    rsi,1
  0068c:    	sub    rsp,0x20
  00690:    	movq   QWORD PTR [rsp],xmm2
  00695:    	movq   QWORD PTR [rsp+0x8],xmm3
  0069b:    	movq   QWORD PTR [rsp+0x10],xmm4
  006a1:    	movq   QWORD PTR [rsp+0x18],xmm5
  006a7: 95 	movabs rax,0x55955d9acd00
  006b1:    	call   rax
  006b3:    	movq   xmm2,QWORD PTR [rsp]
  006b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006be:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006c4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006ca:    	add    rsp,0x20
  006ce: 95 	movabs r13,0x55955e1825e0
  006d8:    	test   rax,rax
  006db:    	je     0xfffe6d8c
  006e1:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006e5: 00 	movq   xmm5,QWORD PTR [rip+0x12fb]        # 0x19e8
  006ed: 00 	movabs rax,0xff80000000000002
  006f7:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006fb:    	mov    rdi,QWORD PTR [r14-0x48]
  006ff: 00 	test   rdi,0x7
  00706:    	jne    0x2ef2b
  0070c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00710:    	jne    0x2ef2b
  00716: 26 	cmp    DWORD PTR [rip+0xfffffffffffea906],0x26        # 0xfffeb023
  0071d:    	jne    0x2ef2b
  00723:    	mov    esi,DWORD PTR [rip+0x12cb]        # 0x19f4
  00729:    	cmp    esi,0xffffffff
  0072c:    	je     0x2ef3a
  00732:    	cmp    WORD PTR [rdi+0x2],0x3
  00737:    	jne    0x754
  0073d:    	cmp    esi,0x6
  00740:    	jge    0x754
  00746:    	mov    rax,QWORD PTR [r14-0x50]
  0074a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0074f:    	jmp    0x7ad
  00754:    	sub    rsp,0x20
  00758:    	movq   QWORD PTR [rsp],xmm2
  0075d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00763:    	movq   QWORD PTR [rsp+0x10],xmm4
  00769:    	movq   QWORD PTR [rsp+0x18],xmm5
  0076f:    	mov    rdx,QWORD PTR [r14-0x50]
  00773: 95 	movabs rax,0x55955d9e10a0
  0077d:    	call   rax
  0077f:    	movq   xmm2,QWORD PTR [rsp]
  00784:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0078a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00790:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00796:    	add    rsp,0x20
  0079a: 95 	movabs r13,0x55955e182610
  007a4:    	test   rax,rax
  007a7:    	je     0xfffe6d8c
:00034 
:00035 br =>:00073
  007ad:    	jmp    0x2f3d8
:00036 %3 = %2.call y()                     [Vec]
  007b2:    	mov    rdi,QWORD PTR [r14-0x40]
  007b6: 00 	test   rdi,0x7
  007bd:    	jne    0x2efd2
  007c3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  007c7:    	jne    0x2efd2
  007cd: 26 	cmp    DWORD PTR [rip+0xfffffffffffea84f],0x26        # 0xfffeb023
  007d4:    	jne    0x2efd2
  007da:    	mov    esi,DWORD PTR [rip+0x121c]        # 0x19fc
  007e0:    	cmp    esi,0xffffffff
  007e3:    	je     0x2efe1
  007e9:    	cmp    WORD PTR [rdi+0x2],0x3
  007ee:    	jne    0x807
  007f4:    	cmp    esi,0x6
  007f7:    	jge    0x807
  007fd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00802:    	jmp    0x849
  00807:    	sub    rsp,0x20
  0080b:    	movq   QWORD PTR [rsp],xmm2
  00810:    	movq   QWORD PTR [rsp+0x8],xmm3
  00816:    	movq   QWORD PTR [rsp+0x10],xmm4
  0081c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00822: 95 	movabs rax,0x55955d9e0e20
  0082c:    	call   rax
  0082e:    	movq   xmm2,QWORD PTR [rsp]
  00833:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00839:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0083f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00845:    	add    rsp,0x20
  00849:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  0084d: 00 	movq   xmm5,QWORD PTR [rip+0x11b3]        # 0x1a08
  00855: 99 	movabs rax,0xff1999999999999a
  0085f:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
:00040 condnotbr _%3 =>:00052
  00863:    	mov    rdi,QWORD PTR [r14-0x48]
  00867: 00 	test   rdi,0x1
  0086e:    	jne    0x2f040
  00874: 00 	test   rdi,0x2
  0087b:    	je     0x8b7
  00881:    	xorps  xmm6,xmm6
  00884: 00 	movabs rax,0x8000000000000002
  0088e:    	cmp    rdi,rax
  00891:    	je     0x8c9
  00897:    	mov    rax,rdi
  0089a:    	sar    rax,0x3f
  0089e:    	add    rax,0x2
  008a2:    	and    rdi,0xfffffffffffffffc
  008a6:    	or     rdi,rax
  008a9:    	rol    rdi,0x3d
  008ad:    	movq   xmm6,rdi
  008b2:    	jmp    0x8c9
  008b7:    	call   0xfffe6de5
  008bc:    	test   rax,rax
  008bf:    	je     0x2f040
  008c5:    	movq   xmm6,xmm0
  008c9:    	ucomisd xmm6,xmm5
  008cd:    	jae    0x2f17b
:00041 %3 = %2.call y()                     [<INVALID>]
  008d3: 00 	cmp    DWORD PTR [rip+0x1136],0x0        # 0x1a10
  008da:    	jl     0x2f04f
  008e0:    	je     0x2f05e
  008e6: 01 	sub    DWORD PTR [rip+0x1123],0x1        # 0x1a10
  008ed:    	xor    rdi,rdi
  008f0:    	jmp    0x2f04f
  008f5:    	sub    rsp,0x20
  008f9:    	movq   QWORD PTR [rsp],xmm2
  008fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00904:    	movq   QWORD PTR [rsp+0x10],xmm4
  0090a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00910:    	mov    rdi,QWORD PTR [r14-0x40]
  00914: 95 	movabs rax,0x55955d949d50
  0091e:    	call   rax
  00920:    	mov    r15d,eax
  00923: 95 	movabs r13,0x55955e182680
  0092d:    	cmp    QWORD PTR [r13+0x8],0x0
  00932:    	je     0x2f07a
  00938:    	cmp    r15d,DWORD PTR [r13-0x8]
  0093c:    	jne    0x2f07a
  00942:    	mov    eax,DWORD PTR [rip+0xfffffffffffea6db]        # 0xfffeb023
  00948:    	cmp    DWORD PTR [r13-0x4],eax
  0094c:    	jne    0x2f07a
  00952: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0095b:    	mov    rax,QWORD PTR [r14-0x40]
  0095f:    	mov    QWORD PTR [rsp-0x40],rax
  00964: 00 	mov    rdi,0x0
  0096b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00974:    	mov    r13,QWORD PTR [r13+0x8]
  00978:    	mov    rax,QWORD PTR [r13+0x8]
  0097c:    	mov    QWORD PTR [rsp-0x30],rax
  00981:    	mov    rax,QWORD PTR [r13+0x0]
  00985:    	mov    r13,QWORD PTR [r13+0x10]
  00989:    	mov    rsi,QWORD PTR [rbx]
  0098c:    	mov    QWORD PTR [rsp-0x18],rsi
  00991:    	lea    rsi,[rsp-0x18]
  00996:    	mov    QWORD PTR [rbx],rsi
  00999:    	lea    r14,[rsp-0x10]
  0099e:    	mov    QWORD PTR [rsp-0x20],r14
  009a3:    	call   rax
  009a5:    	lea    r14,[rbp-0x8]
  009a9:    	mov    QWORD PTR [rbx],r14
  009ac:    	mov    r14,QWORD PTR [rbp-0x10]
  009b0:    	movq   xmm2,QWORD PTR [rsp]
  009b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009c7:    	add    rsp,0x20
  009cb:    	test   rax,rax
  009ce:    	je     0x2f0bb
  009d4:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  009d8: 00 	movq   xmm5,QWORD PTR [rip+0x1038]        # 0x1a18
  009e0: 99 	movabs rax,0xff1999999999999e
  009ea:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00045 condnotbr _%3 =>:00052
  009ee:    	mov    rdi,QWORD PTR [r14-0x48]
  009f2:    	mov    rsi,QWORD PTR [r14-0x50]
  009f6: 00 	test   rdi,0x1
  009fd:    	je     0x2f0ca
  00a03: 00 	test   rsi,0x1
  00a0a:    	je     0x2f0ca
  00a10:    	cmp    rdi,rsi
  00a13:    	jle    0x2f194
:00046 %3 = 1: i32
  00a19: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a21:    	sub    rsp,0x20
  00a25:    	movq   QWORD PTR [rsp],xmm2
  00a2a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a30:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a36:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a3c:    	mov    rdi,rbx
  00a3f:    	mov    rsi,r12
  00a42:    	mov    rdx,QWORD PTR [r14-0x38]
  00a46:    	mov    rcx,QWORD PTR [r14-0x48]
  00a4a: 95 	movabs r8,0x55955e1826d8
  00a54: 95 	movabs rax,0x55955d9acbd0
  00a5e:    	call   rax
  00a60:    	movq   xmm2,QWORD PTR [rsp]
  00a65:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a6b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a71:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a77:    	add    rsp,0x20
  00a7b: 95 	movabs r13,0x55955e1826e0
  00a85:    	test   rax,rax
  00a88:    	je     0xfffe6d8c
  00a8e:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a92: 00 	movq   xmm5,QWORD PTR [rip+0xf8e]        # 0x1a28
  00a9a: 00 	movabs rax,0xff80000000000002
  00aa4:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [<INVALID>]
  00aa8:    	sub    rsp,0x20
  00aac:    	movq   QWORD PTR [rsp],xmm2
  00ab1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ab7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00abd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac3:    	mov    rdi,QWORD PTR [r14-0x48]
  00ac7: 95 	movabs rax,0x55955d949d50
  00ad1:    	call   rax
  00ad3:    	mov    r15d,eax
  00ad6: 95 	movabs r13,0x55955e182700
  00ae0:    	cmp    QWORD PTR [r13+0x8],0x0
  00ae5:    	je     0x2f12b
  00aeb:    	cmp    r15d,DWORD PTR [r13-0x8]
  00aef:    	jne    0x2f12b
  00af5:    	mov    eax,DWORD PTR [rip+0xfffffffffffea528]        # 0xfffeb023
  00afb:    	cmp    DWORD PTR [r13-0x4],eax
  00aff:    	jne    0x2f12b
  00b05: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b0e:    	mov    rax,QWORD PTR [r14-0x48]
  00b12:    	mov    QWORD PTR [rsp-0x40],rax
  00b17: 00 	mov    rdi,0x1
  00b1e:    	mov    rax,QWORD PTR [r14-0x50]
  00b22:    	mov    QWORD PTR [rsp-0x48],rax
  00b27: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b30:    	mov    r13,QWORD PTR [r13+0x8]
  00b34:    	mov    rax,QWORD PTR [r13+0x8]
  00b38:    	mov    QWORD PTR [rsp-0x30],rax
  00b3d:    	mov    rax,QWORD PTR [r13+0x0]
  00b41:    	mov    r13,QWORD PTR [r13+0x10]
  00b45:    	mov    rsi,QWORD PTR [rbx]
  00b48:    	mov    QWORD PTR [rsp-0x18],rsi
  00b4d:    	lea    rsi,[rsp-0x18]
  00b52:    	mov    QWORD PTR [rbx],rsi
  00b55:    	lea    r14,[rsp-0x10]
  00b5a:    	mov    QWORD PTR [rsp-0x20],r14
  00b5f:    	call   rax
  00b61:    	lea    r14,[rbp-0x8]
  00b65:    	mov    QWORD PTR [rbx],r14
  00b68:    	mov    r14,QWORD PTR [rbp-0x10]
  00b6c:    	movq   xmm2,QWORD PTR [rsp]
  00b71:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b77:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b7d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b83:    	add    rsp,0x20
  00b87:    	test   rax,rax
  00b8a:    	je     0x2f16c
:00050 
:00051 br =>:00073
  00b90:    	jmp    0x2f3f1
:00052 %3 = %2.call z()                     [Vec]
  00b95:    	mov    rdi,QWORD PTR [r14-0x40]
  00b99: 00 	test   rdi,0x7
  00ba0:    	jne    0x2f1ad
  00ba6:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00baa:    	jne    0x2f1ad
  00bb0: 26 	cmp    DWORD PTR [rip+0xfffffffffffea46c],0x26        # 0xfffeb023
  00bb7:    	jne    0x2f1ad
  00bbd:    	mov    esi,DWORD PTR [rip+0xe71]        # 0x1a34
  00bc3:    	cmp    esi,0xffffffff
  00bc6:    	je     0x2f1bc
  00bcc:    	cmp    WORD PTR [rdi+0x2],0x3
  00bd1:    	jne    0xbea
  00bd7:    	cmp    esi,0x6
  00bda:    	jge    0xbea
  00be0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be5:    	jmp    0xc2c
  00bea:    	sub    rsp,0x20
  00bee:    	movq   QWORD PTR [rsp],xmm2
  00bf3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bf9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bff:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c05: 95 	movabs rax,0x55955d9e0e20
  00c0f:    	call   rax
  00c11:    	movq   xmm2,QWORD PTR [rsp]
  00c16:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c1c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c22:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c28:    	add    rsp,0x20
  00c2c:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00c30: 00 	movq   xmm5,QWORD PTR [rip+0xe00]        # 0x1a38
  00c38: 99 	movabs rax,0xff1999999999999a
  00c42:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
:00056 condnotbr _%3 =>:00068
  00c46:    	mov    rdi,QWORD PTR [r14-0x48]
  00c4a: 00 	test   rdi,0x1
  00c51:    	jne    0x2f21b
  00c57: 00 	test   rdi,0x2
  00c5e:    	je     0xc9a
  00c64:    	xorps  xmm6,xmm6
  00c67: 00 	movabs rax,0x8000000000000002
  00c71:    	cmp    rdi,rax
  00c74:    	je     0xcac
  00c7a:    	mov    rax,rdi
  00c7d:    	sar    rax,0x3f
  00c81:    	add    rax,0x2
  00c85:    	and    rdi,0xfffffffffffffffc
  00c89:    	or     rdi,rax
  00c8c:    	rol    rdi,0x3d
  00c90:    	movq   xmm6,rdi
  00c95:    	jmp    0xcac
  00c9a:    	call   0xfffe6de5
  00c9f:    	test   rax,rax
  00ca2:    	je     0x2f21b
  00ca8:    	movq   xmm6,xmm0
  00cac:    	ucomisd xmm6,xmm5
  00cb0:    	jae    0x2f32b
:00057 %3 = %2.call z()                     [Vec]
  00cb6:    	mov    rdi,QWORD PTR [r14-0x40]
  00cba: 00 	test   rdi,0x7
  00cc1:    	jne    0x2f22a
  00cc7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ccb:    	jne    0x2f22a
  00cd1: 26 	cmp    DWORD PTR [rip+0xfffffffffffea34b],0x26        # 0xfffeb023
  00cd8:    	jne    0x2f22a
  00cde:    	mov    esi,DWORD PTR [rip+0xd60]        # 0x1a44
  00ce4:    	cmp    esi,0xffffffff
  00ce7:    	je     0x2f239
  00ced:    	cmp    WORD PTR [rdi+0x2],0x3
  00cf2:    	jne    0xd0b
  00cf8:    	cmp    esi,0x6
  00cfb:    	jge    0xd0b
  00d01:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d06:    	jmp    0xd4d
  00d0b:    	sub    rsp,0x20
  00d0f:    	movq   QWORD PTR [rsp],xmm2
  00d14:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d1a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d20:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d26: 95 	movabs rax,0x55955d9e0e20
  00d30:    	call   rax
  00d32:    	movq   xmm2,QWORD PTR [rsp]
  00d37:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d43:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d49:    	add    rsp,0x20
  00d4d:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00d51: 00 	movq   xmm5,QWORD PTR [rip+0xcef]        # 0x1a48
  00d59: 99 	movabs rax,0xff1999999999999e
  00d63:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
:00061 condnotbr _%3 =>:00068
  00d67:    	mov    rdi,QWORD PTR [r14-0x48]
  00d6b: 00 	test   rdi,0x1
  00d72:    	jne    0x2f298
  00d78: 00 	test   rdi,0x2
  00d7f:    	je     0xdbb
  00d85:    	xorps  xmm6,xmm6
  00d88: 00 	movabs rax,0x8000000000000002
  00d92:    	cmp    rdi,rax
  00d95:    	je     0xdcd
  00d9b:    	mov    rax,rdi
  00d9e:    	sar    rax,0x3f
  00da2:    	add    rax,0x2
  00da6:    	and    rdi,0xfffffffffffffffc
  00daa:    	or     rdi,rax
  00dad:    	rol    rdi,0x3d
  00db1:    	movq   xmm6,rdi
  00db6:    	jmp    0xdcd
  00dbb:    	call   0xfffe6de5
  00dc0:    	test   rax,rax
  00dc3:    	je     0x2f298
  00dc9:    	movq   xmm6,xmm0
  00dcd:    	ucomisd xmm6,xmm5
  00dd1:    	jbe    0x2f344
:00062 %3 = 1: i32
  00dd7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00ddf:    	mov    rdi,QWORD PTR [r14-0x38]
  00de3:    	mov    rsi,QWORD PTR [r14-0x48]
  00de7: 00 	test   rdi,0x7
  00dee:    	jne    0x2f2a7
  00df4:    	cmp    DWORD PTR [rdi+0x4],0xb
  00df8:    	jne    0x2f2a7
  00dfe: 00 	test   rsi,0x1
  00e05:    	je     0x2f2a7
  00e0b:    	sar    rsi,1
  00e0e:    	sub    rsp,0x20
  00e12:    	movq   QWORD PTR [rsp],xmm2
  00e17:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e23:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e29: 95 	movabs rax,0x55955d9acd00
  00e33:    	call   rax
  00e35:    	movq   xmm2,QWORD PTR [rsp]
  00e3a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e40:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e46:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e4c:    	add    rsp,0x20
  00e50: 95 	movabs r13,0x55955e1827e0
  00e5a:    	test   rax,rax
  00e5d:    	je     0xfffe6d8c
  00e63:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00e67: 00 	movq   xmm5,QWORD PTR [rip+0xbe9]        # 0x1a58
  00e6f: 00 	movabs rax,0xff80000000000002
  00e79:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00e7d:    	mov    rdi,QWORD PTR [r14-0x48]
  00e81: 00 	test   rdi,0x7
  00e88:    	jne    0x2f2b6
  00e8e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e92:    	jne    0x2f2b6
  00e98: 26 	cmp    DWORD PTR [rip+0xfffffffffffea184],0x26        # 0xfffeb023
  00e9f:    	jne    0x2f2b6
  00ea5:    	mov    esi,DWORD PTR [rip+0xbb9]        # 0x1a64
  00eab:    	cmp    esi,0xffffffff
  00eae:    	je     0x2f2c5
  00eb4:    	cmp    WORD PTR [rdi+0x2],0x3
  00eb9:    	jne    0xed6
  00ebf:    	cmp    esi,0x6
  00ec2:    	jge    0xed6
  00ec8:    	mov    rax,QWORD PTR [r14-0x50]
  00ecc:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00ed1:    	jmp    0xf2f
  00ed6:    	sub    rsp,0x20
  00eda:    	movq   QWORD PTR [rsp],xmm2
  00edf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ee5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00eeb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ef1:    	mov    rdx,QWORD PTR [r14-0x50]
  00ef5: 95 	movabs rax,0x55955d9e10a0
  00eff:    	call   rax
  00f01:    	movq   xmm2,QWORD PTR [rsp]
  00f06:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f0c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f12:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f18:    	add    rsp,0x20
  00f1c: 95 	movabs r13,0x55955e182810
  00f26:    	test   rax,rax
  00f29:    	je     0xfffe6d8c
:00066 
:00067 br =>:00073
  00f2f:    	jmp    0x2f40a
:00068 %3 = 1: i32
  00f34: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f3c:    	sub    rsp,0x20
  00f40:    	movq   QWORD PTR [rsp],xmm2
  00f45:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f4b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f51:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f57:    	mov    rdi,rbx
  00f5a:    	mov    rsi,r12
  00f5d:    	mov    rdx,QWORD PTR [r14-0x38]
  00f61:    	mov    rcx,QWORD PTR [r14-0x48]
  00f65: 95 	movabs r8,0x55955e182838
  00f6f: 95 	movabs rax,0x55955d9acbd0
  00f79:    	call   rax
  00f7b:    	movq   xmm2,QWORD PTR [rsp]
  00f80:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f86:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f8c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f92:    	add    rsp,0x20
  00f96: 95 	movabs r13,0x55955e182840
  00fa0:    	test   rax,rax
  00fa3:    	je     0xfffe6d8c
  00fa9:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00fad: 00 	movq   xmm5,QWORD PTR [rip+0xab3]        # 0x1a68
  00fb5: 00 	movabs rax,0xff80000000000002
  00fbf:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fc3: 00 	cmp    DWORD PTR [rip+0xaa6],0x0        # 0x1a70
  00fca:    	jl     0x2f35d
  00fd0:    	je     0x2f36c
  00fd6: 01 	sub    DWORD PTR [rip+0xa93],0x1        # 0x1a70
  00fdd:    	xor    rdi,rdi
  00fe0:    	jmp    0x2f35d
  00fe5:    	sub    rsp,0x20
  00fe9:    	movq   QWORD PTR [rsp],xmm2
  00fee:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ffa:    	movq   QWORD PTR [rsp+0x18],xmm5
  01000:    	mov    rdi,QWORD PTR [r14-0x48]
  01004: 95 	movabs rax,0x55955d949d50
  0100e:    	call   rax
  01010:    	mov    r15d,eax
  01013: 95 	movabs r13,0x55955e182860
  0101d:    	cmp    QWORD PTR [r13+0x8],0x0
  01022:    	je     0x2f388
  01028:    	cmp    r15d,DWORD PTR [r13-0x8]
  0102c:    	jne    0x2f388
  01032:    	mov    eax,DWORD PTR [rip+0xfffffffffffe9feb]        # 0xfffeb023
  01038:    	cmp    DWORD PTR [r13-0x4],eax
  0103c:    	jne    0x2f388
  01042: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0104b:    	mov    rax,QWORD PTR [r14-0x48]
  0104f:    	mov    QWORD PTR [rsp-0x40],rax
  01054: 00 	mov    rdi,0x1
  0105b:    	mov    rax,QWORD PTR [r14-0x50]
  0105f:    	mov    QWORD PTR [rsp-0x48],rax
  01064: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0106d:    	mov    r13,QWORD PTR [r13+0x8]
  01071:    	mov    rax,QWORD PTR [r13+0x8]
  01075:    	mov    QWORD PTR [rsp-0x30],rax
  0107a:    	mov    rax,QWORD PTR [r13+0x0]
  0107e:    	mov    r13,QWORD PTR [r13+0x10]
  01082:    	mov    rsi,QWORD PTR [rbx]
  01085:    	mov    QWORD PTR [rsp-0x18],rsi
  0108a:    	lea    rsi,[rsp-0x18]
  0108f:    	mov    QWORD PTR [rbx],rsi
  01092:    	lea    r14,[rsp-0x10]
  01097:    	mov    QWORD PTR [rsp-0x20],r14
  0109c:    	call   rax
  0109e:    	lea    r14,[rbp-0x8]
  010a2:    	mov    QWORD PTR [rbx],r14
  010a5:    	mov    r14,QWORD PTR [rbp-0x10]
  010a9:    	movq   xmm2,QWORD PTR [rsp]
  010ae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010b4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010c0:    	add    rsp,0x20
  010c4:    	test   rax,rax
  010c7:    	je     0x2f3c9
:00072 
  010cd:    	jmp    0x2f423
:00073 %3 = 0: i32
  010d2: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  010da: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  010e2:    	mov    rdi,QWORD PTR [r14-0x38]
  010e6:    	mov    rsi,QWORD PTR [r14-0x50]
  010ea: 00 	test   rdi,0x7
  010f1:    	jne    0x2f43c
  010f7:    	cmp    DWORD PTR [rdi+0x4],0xb
  010fb:    	jne    0x2f43c
  01101: 00 	test   rsi,0x1
  01108:    	je     0x2f43c
  0110e:    	sar    rsi,1
  01111:    	sub    rsp,0x20
  01115:    	movq   QWORD PTR [rsp],xmm2
  0111a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01120:    	movq   QWORD PTR [rsp+0x10],xmm4
  01126: 95 	movabs rax,0x55955d9acd00
  01130:    	call   rax
  01132:    	movq   xmm2,QWORD PTR [rsp]
  01137:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0113d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01143:    	add    rsp,0x20
  01147: 95 	movabs r13,0x55955e1828a0
  01151:    	test   rax,rax
  01154:    	je     0xfffe6d8c
  0115a:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  0115e: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  01166:    	mov    rdi,QWORD PTR [r14-0x38]
  0116a:    	mov    rsi,QWORD PTR [r14-0x58]
  0116e: 00 	test   rdi,0x7
  01175:    	jne    0x2f44b
  0117b:    	cmp    DWORD PTR [rdi+0x4],0xb
  0117f:    	jne    0x2f44b
  01185: 00 	test   rsi,0x1
  0118c:    	je     0x2f44b
  01192:    	sar    rsi,1
  01195:    	sub    rsp,0x10
  01199:    	movq   QWORD PTR [rsp],xmm3
  0119e:    	movq   QWORD PTR [rsp+0x8],xmm4
  011a4: 95 	movabs rax,0x55955d9acd00
  011ae:    	call   rax
  011b0:    	movq   xmm3,QWORD PTR [rsp]
  011b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011bb:    	add    rsp,0x10
  011bf: 95 	movabs r13,0x55955e1828c0
  011c9:    	test   rax,rax
  011cc:    	je     0xfffe6d8c
  011d2:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  011d6:    	mov    rdi,QWORD PTR [r14-0x50]
  011da: 00 	test   rdi,0x7
  011e1:    	jne    0x2f45a
  011e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011eb:    	jne    0x2f45a
  011f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9e2b],0x26        # 0xfffeb023
  011f8:    	jne    0x2f45a
  011fe:    	sub    rsp,0x10
  01202:    	movq   QWORD PTR [rsp],xmm3
  01207:    	movq   QWORD PTR [rsp+0x8],xmm4
  0120d: 00 	cmp    DWORD PTR [rip+0xfffffffffffe9e13],0x0        # 0xfffeb027
  01214:    	je     0x122c
  0121a:    	mov    rdi,r12
  0121d:    	mov    rsi,QWORD PTR [rbx]
  01220: 95 	movabs rax,0x55955d9a3d50
  0122a:    	call   rax
  0122c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01235:    	mov    rax,QWORD PTR [r14-0x50]
  01239:    	mov    QWORD PTR [rsp-0x40],rax
  0123e: 00 	mov    rdi,0x1
  01245:    	mov    rax,QWORD PTR [r14-0x58]
  01249:    	mov    QWORD PTR [rsp-0x48],rax
  0124e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01257: 08 	movabs rax,0x100080000005c
  01261:    	mov    QWORD PTR [rsp-0x30],rax
  01266: 95 	movabs r13,0x55955e137470
  01270:    	mov    rsi,QWORD PTR [rbx]
  01273:    	mov    QWORD PTR [rsp-0x18],rsi
  01278:    	lea    rsi,[rsp-0x18]
  0127d:    	mov    QWORD PTR [rbx],rsi
  01280:    	lea    r14,[rsp-0x10]
  01285:    	mov    QWORD PTR [rsp-0x20],r14
  0128a:    	call   0xffff39bf
  0128f:    	lea    r14,[rbp-0x8]
  01293:    	mov    QWORD PTR [rbx],r14
  01296:    	mov    r14,QWORD PTR [rbp-0x10]
  0129a:    	movq   xmm3,QWORD PTR [rsp]
  0129f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a5:    	add    rsp,0x10
  012a9: 95 	movabs r13,0x55955e1828e0
  012b3:    	test   rax,rax
  012b6:    	je     0xfffe6d8c
  012bc:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  012c0:    	mov    rdi,QWORD PTR [r14-0x38]
  012c4:    	mov    rsi,QWORD PTR [r14-0x48]
  012c8: 00 	test   rdi,0x7
  012cf:    	jne    0x2f469
  012d5:    	cmp    DWORD PTR [rdi+0x4],0xb
  012d9:    	jne    0x2f469
  012df: 00 	test   rsi,0x1
  012e6:    	je     0x2f469
  012ec:    	sar    rsi,1
  012ef:    	sub    rsp,0x10
  012f3:    	movq   QWORD PTR [rsp],xmm3
  012f8:    	movq   QWORD PTR [rsp+0x8],xmm4
  012fe:    	mov    rdx,r12
  01301:    	mov    rcx,QWORD PTR [r14-0x50]
  01305: 95 	movabs rax,0x55955d9ace90
  0130f:    	call   rax
  01311:    	movq   xmm3,QWORD PTR [rsp]
  01316:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0131c:    	add    rsp,0x10
  01320: 95 	movabs r13,0x55955e1828f0
  0132a:    	test   rax,rax
  0132d:    	je     0xfffe6d8c
:00081 %3 = 0: i32
  01333: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  0133b: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  01343:    	mov    rdi,QWORD PTR [r14-0x38]
  01347:    	mov    rsi,QWORD PTR [r14-0x50]
  0134b: 00 	test   rdi,0x7
  01352:    	jne    0x2f478
  01358:    	cmp    DWORD PTR [rdi+0x4],0xb
  0135c:    	jne    0x2f478
  01362: 00 	test   rsi,0x1
  01369:    	je     0x2f478
  0136f:    	sar    rsi,1
  01372:    	sub    rsp,0x10
  01376:    	movq   QWORD PTR [rsp],xmm3
  0137b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01381: 95 	movabs rax,0x55955d9acd00
  0138b:    	call   rax
  0138d:    	movq   xmm3,QWORD PTR [rsp]
  01392:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01398:    	add    rsp,0x10
  0139c: 95 	movabs r13,0x55955e182920
  013a6:    	test   rax,rax
  013a9:    	je     0xfffe6d8c
  013af:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  013b3:    	mov    rdi,QWORD PTR [r14-0x50]
  013b7: 00 	test   rdi,0x7
  013be:    	jne    0x2f487
  013c4:    	cmp    DWORD PTR [rdi+0x4],0x2b
  013c8:    	jne    0x2f487
  013ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9c4e],0x26        # 0xfffeb023
  013d5:    	jne    0x2f487
  013db:    	sub    rsp,0x10
  013df:    	movq   QWORD PTR [rsp],xmm3
  013e4:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ea: 00 	cmp    DWORD PTR [rip+0xfffffffffffe9c36],0x0        # 0xfffeb027
  013f1:    	je     0x1409
  013f7:    	mov    rdi,r12
  013fa:    	mov    rsi,QWORD PTR [rbx]
  013fd: 95 	movabs rax,0x55955d9a3d50
  01407:    	call   rax
  01409: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01412:    	mov    rax,QWORD PTR [r14-0x50]
  01416:    	mov    QWORD PTR [rsp-0x40],rax
  0141b: 00 	mov    rdi,0x0
  01422: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0142b: 07 	movabs rax,0x100070000005f
  01435:    	mov    QWORD PTR [rsp-0x30],rax
  0143a: 95 	movabs r13,0x55955e168310
  01444:    	mov    rsi,QWORD PTR [rbx]
  01447:    	mov    QWORD PTR [rsp-0x18],rsi
  0144c:    	lea    rsi,[rsp-0x18]
  01451:    	mov    QWORD PTR [rbx],rsi
  01454:    	lea    r14,[rsp-0x10]
  01459:    	mov    QWORD PTR [rsp-0x20],r14
  0145e:    	call   0xfffeb8eb
  01463:    	lea    r14,[rbp-0x8]
  01467:    	mov    QWORD PTR [rbx],r14
  0146a:    	mov    r14,QWORD PTR [rbp-0x10]
  0146e:    	movq   xmm3,QWORD PTR [rsp]
  01473:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01479:    	add    rsp,0x10
  0147d: 95 	movabs r13,0x55955e182940
  01487:    	test   rax,rax
  0148a:    	je     0xfffe6d8c
  01490:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01494:    	mov    rdi,QWORD PTR [r14-0x38]
  01498:    	mov    rsi,QWORD PTR [r14-0x48]
  0149c: 00 	test   rdi,0x7
  014a3:    	jne    0x2f496
  014a9:    	cmp    DWORD PTR [rdi+0x4],0xb
  014ad:    	jne    0x2f496
  014b3: 00 	test   rsi,0x1
  014ba:    	je     0x2f496
  014c0:    	sar    rsi,1
  014c3:    	sub    rsp,0x10
  014c7:    	movq   QWORD PTR [rsp],xmm3
  014cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  014d2:    	mov    rdx,r12
  014d5:    	mov    rcx,QWORD PTR [r14-0x50]
  014d9: 95 	movabs rax,0x55955d9ace90
  014e3:    	call   rax
  014e5:    	movq   xmm3,QWORD PTR [rsp]
  014ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f0:    	add    rsp,0x10
  014f4: 95 	movabs r13,0x55955e182950
  014fe:    	test   rax,rax
  01501:    	je     0xfffe6d8c
:00087 %3 = 1: i32
  01507: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  0150f: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  01517:    	mov    rdi,QWORD PTR [r14-0x38]
  0151b:    	mov    rsi,QWORD PTR [r14-0x50]
  0151f: 00 	test   rdi,0x7
  01526:    	jne    0x2f4a5
  0152c:    	cmp    DWORD PTR [rdi+0x4],0xb
  01530:    	jne    0x2f4a5
  01536: 00 	test   rsi,0x1
  0153d:    	je     0x2f4a5
  01543:    	sar    rsi,1
  01546:    	sub    rsp,0x10
  0154a:    	movq   QWORD PTR [rsp],xmm3
  0154f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01555: 95 	movabs rax,0x55955d9acd00
  0155f:    	call   rax
  01561:    	movq   xmm3,QWORD PTR [rsp]
  01566:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0156c:    	add    rsp,0x10
  01570: 95 	movabs r13,0x55955e182980
  0157a:    	test   rax,rax
  0157d:    	je     0xfffe6d8c
  01583:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01587: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  0158f:    	mov    rdi,QWORD PTR [r14-0x38]
  01593:    	mov    rsi,QWORD PTR [r14-0x58]
  01597: 00 	test   rdi,0x7
  0159e:    	jne    0x2f4b4
  015a4:    	cmp    DWORD PTR [rdi+0x4],0xb
  015a8:    	jne    0x2f4b4
  015ae: 00 	test   rsi,0x1
  015b5:    	je     0x2f4b4
  015bb:    	sar    rsi,1
  015be:    	sub    rsp,0x10
  015c2:    	movq   QWORD PTR [rsp],xmm3
  015c7:    	movq   QWORD PTR [rsp+0x8],xmm4
  015cd: 95 	movabs rax,0x55955d9acd00
  015d7:    	call   rax
  015d9:    	movq   xmm3,QWORD PTR [rsp]
  015de:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015e4:    	add    rsp,0x10
  015e8: 95 	movabs r13,0x55955e1829a0
  015f2:    	test   rax,rax
  015f5:    	je     0xfffe6d8c
  015fb:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  015ff:    	mov    rdi,QWORD PTR [r14-0x50]
  01603: 00 	test   rdi,0x7
  0160a:    	jne    0x2f4c3
  01610:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01614:    	jne    0x2f4c3
  0161a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9a02],0x26        # 0xfffeb023
  01621:    	jne    0x2f4c3
  01627:    	sub    rsp,0x10
  0162b:    	movq   QWORD PTR [rsp],xmm3
  01630:    	movq   QWORD PTR [rsp+0x8],xmm4
  01636: 00 	cmp    DWORD PTR [rip+0xfffffffffffe99ea],0x0        # 0xfffeb027
  0163d:    	je     0x1655
  01643:    	mov    rdi,r12
  01646:    	mov    rsi,QWORD PTR [rbx]
  01649: 95 	movabs rax,0x55955d9a3d50
  01653:    	call   rax
  01655: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0165e:    	mov    rax,QWORD PTR [r14-0x50]
  01662:    	mov    QWORD PTR [rsp-0x40],rax
  01667: 00 	mov    rdi,0x1
  0166e:    	mov    rax,QWORD PTR [r14-0x58]
  01672:    	mov    QWORD PTR [rsp-0x48],rax
  01677: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01680: 08 	movabs rax,0x100080000005c
  0168a:    	mov    QWORD PTR [rsp-0x30],rax
  0168f: 95 	movabs r13,0x55955e137470
  01699:    	mov    rsi,QWORD PTR [rbx]
  0169c:    	mov    QWORD PTR [rsp-0x18],rsi
  016a1:    	lea    rsi,[rsp-0x18]
  016a6:    	mov    QWORD PTR [rbx],rsi
  016a9:    	lea    r14,[rsp-0x10]
  016ae:    	mov    QWORD PTR [rsp-0x20],r14
  016b3:    	call   0xffff39bf
  016b8:    	lea    r14,[rbp-0x8]
  016bc:    	mov    QWORD PTR [rbx],r14
  016bf:    	mov    r14,QWORD PTR [rbp-0x10]
  016c3:    	movq   xmm3,QWORD PTR [rsp]
  016c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016ce:    	add    rsp,0x10
  016d2: 95 	movabs r13,0x55955e1829c0
  016dc:    	test   rax,rax
  016df:    	je     0xfffe6d8c
  016e5:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  016e9:    	mov    rdi,QWORD PTR [r14-0x38]
  016ed:    	mov    rsi,QWORD PTR [r14-0x48]
  016f1: 00 	test   rdi,0x7
  016f8:    	jne    0x2f4d2
  016fe:    	cmp    DWORD PTR [rdi+0x4],0xb
  01702:    	jne    0x2f4d2
  01708: 00 	test   rsi,0x1
  0170f:    	je     0x2f4d2
  01715:    	sar    rsi,1
  01718:    	sub    rsp,0x10
  0171c:    	movq   QWORD PTR [rsp],xmm3
  01721:    	movq   QWORD PTR [rsp+0x8],xmm4
  01727:    	mov    rdx,r12
  0172a:    	mov    rcx,QWORD PTR [r14-0x50]
  0172e: 95 	movabs rax,0x55955d9ace90
  01738:    	call   rax
  0173a:    	movq   xmm3,QWORD PTR [rsp]
  0173f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01745:    	add    rsp,0x10
  01749: 95 	movabs r13,0x55955e1829d0
  01753:    	test   rax,rax
  01756:    	je     0xfffe6d8c
:00095 %3 = 1: i32
  0175c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  01764: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  0176c:    	mov    rdi,QWORD PTR [r14-0x38]
  01770:    	mov    rsi,QWORD PTR [r14-0x50]
  01774: 00 	test   rdi,0x7
  0177b:    	jne    0x2f4e1
  01781:    	cmp    DWORD PTR [rdi+0x4],0xb
  01785:    	jne    0x2f4e1
  0178b: 00 	test   rsi,0x1
  01792:    	je     0x2f4e1
  01798:    	sar    rsi,1
  0179b:    	sub    rsp,0x10
  0179f:    	movq   QWORD PTR [rsp],xmm3
  017a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  017aa: 95 	movabs rax,0x55955d9acd00
  017b4:    	call   rax
  017b6:    	movq   xmm3,QWORD PTR [rsp]
  017bb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017c1:    	add    rsp,0x10
  017c5: 95 	movabs r13,0x55955e182a00
  017cf:    	test   rax,rax
  017d2:    	je     0xfffe6d8c
  017d8:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  017dc:    	mov    rdi,QWORD PTR [r14-0x50]
  017e0: 00 	test   rdi,0x7
  017e7:    	jne    0x2f4f0
  017ed:    	cmp    DWORD PTR [rdi+0x4],0x2b
  017f1:    	jne    0x2f4f0
  017f7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9825],0x26        # 0xfffeb023
  017fe:    	jne    0x2f4f0
  01804:    	sub    rsp,0x10
  01808:    	movq   QWORD PTR [rsp],xmm3
  0180d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01813: 00 	cmp    DWORD PTR [rip+0xfffffffffffe980d],0x0        # 0xfffeb027
  0181a:    	je     0x1832
  01820:    	mov    rdi,r12
  01823:    	mov    rsi,QWORD PTR [rbx]
  01826: 95 	movabs rax,0x55955d9a3d50
  01830:    	call   rax
  01832: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0183b:    	mov    rax,QWORD PTR [r14-0x50]
  0183f:    	mov    QWORD PTR [rsp-0x40],rax
  01844: 00 	mov    rdi,0x0
  0184b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01854: 07 	movabs rax,0x100070000005f
  0185e:    	mov    QWORD PTR [rsp-0x30],rax
  01863: 95 	movabs r13,0x55955e168310
  0186d:    	mov    rsi,QWORD PTR [rbx]
  01870:    	mov    QWORD PTR [rsp-0x18],rsi
  01875:    	lea    rsi,[rsp-0x18]
  0187a:    	mov    QWORD PTR [rbx],rsi
  0187d:    	lea    r14,[rsp-0x10]
  01882:    	mov    QWORD PTR [rsp-0x20],r14
  01887:    	call   0xfffeb8eb
  0188c:    	lea    r14,[rbp-0x8]
  01890:    	mov    QWORD PTR [rbx],r14
  01893:    	mov    r14,QWORD PTR [rbp-0x10]
  01897:    	movq   xmm3,QWORD PTR [rsp]
  0189c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018a2:    	add    rsp,0x10
  018a6: 95 	movabs r13,0x55955e182a20
  018b0:    	test   rax,rax
  018b3:    	je     0xfffe6d8c
  018b9:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  018bd:    	mov    rdi,QWORD PTR [r14-0x38]
  018c1:    	mov    rsi,QWORD PTR [r14-0x48]
  018c5: 00 	test   rdi,0x7
  018cc:    	jne    0x2f4ff
  018d2:    	cmp    DWORD PTR [rdi+0x4],0xb
  018d6:    	jne    0x2f4ff
  018dc: 00 	test   rsi,0x1
  018e3:    	je     0x2f4ff
  018e9:    	sar    rsi,1
  018ec:    	sub    rsp,0x10
  018f0:    	movq   QWORD PTR [rsp],xmm3
  018f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  018fb:    	mov    rdx,r12
  018fe:    	mov    rcx,QWORD PTR [r14-0x50]
  01902: 95 	movabs rax,0x55955d9ace90
  0190c:    	call   rax
  0190e:    	movq   xmm3,QWORD PTR [rsp]
  01913:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01919:    	add    rsp,0x10
  0191d: 95 	movabs r13,0x55955e182a30
  01927:    	test   rax,rax
  0192a:    	je     0xfffe6d8c
:00101 %3 = %4
  01930:    	mov    rax,QWORD PTR [r14-0x50]
  01934:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  01938:    	mov    rax,QWORD PTR [r14-0x48]
  0193c:    	leave  
  0193d:    	ret    
==> start whole compile: otherBasis FuncId(87) self_class:Scene start:[00000] bytecode:0x55955e1823e0
<== finished compile. elapsed:119.1µs
offset:Pos(109836) code: 6394 bytes  data: 326 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	cmp    edx,0x2
  0000e:    	jne    0x2da9a
  00014: 00 	mov    rax,0x4
  0001b:    	mov    QWORD PTR [r14-0x48],rax
  0001f:    	mov    QWORD PTR [r14-0x50],rax
  00023:    	mov    QWORD PTR [r14-0x58],rax
  00027:    	mov    QWORD PTR [r14-0x60],rax
  0002b:    	mov    QWORD PTR [r14-0x68],rax
  0002f:    	mov    rdi,QWORD PTR [r14-0x30]
  00033: 00 	test   rdi,0x7
  0003a:    	jne    0x2daa9
  00040:    	cmp    DWORD PTR [rdi+0x4],0x35
  00044:    	jne    0x2daa9
:00000 init_method reg:8 arg:2 pos:2 req:2 block:0 stack_offset:7
:00001 %3 = 2: i32
  0004a: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %4 = const[Vec]                      [Vec]
  00052: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe956b]        # 0xfffe95c4
  00059: 00 	cmp    rax,QWORD PTR [rip+0x18b4]        # 0x1914
  00060:    	jne    0x2dab8
  00066: 00 	mov    rax,QWORD PTR [rip+0x1897]        # 0x1904
  0006d:    	mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %2.call x()                     [Vec]
  00071:    	mov    rdi,QWORD PTR [r14-0x40]
  00075: 00 	test   rdi,0x7
  0007c:    	jne    0x2dafe
  00082:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00086:    	jne    0x2dafe
  0008c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe951c],0x26        # 0xfffe95af
  00093:    	jne    0x2dafe
  00099:    	mov    esi,DWORD PTR [rip+0x1881]        # 0x1920
  0009f:    	cmp    esi,0xffffffff
  000a2:    	je     0x2db0d
  000a8:    	cmp    WORD PTR [rdi+0x2],0x3
  000ad:    	jne    0xc6
  000b3:    	cmp    esi,0x6
  000b6:    	jge    0xc6
  000bc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c1:    	jmp    0xd2
  000c6: 95 	movabs rax,0x55955d9e0e20
  000d0:    	call   rax
  000d2:    	mov    QWORD PTR [r14-0x58],rax
:00004 
:00005 %6 = %2.call y()                     [Vec]
  000d6:    	mov    rdi,QWORD PTR [r14-0x40]
  000da: 00 	test   rdi,0x7
  000e1:    	jne    0x2db36
  000e7:    	cmp    DWORD PTR [rdi+0x4],0x2b
  000eb:    	jne    0x2db36
  000f1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe94b7],0x26        # 0xfffe95af
  000f8:    	jne    0x2db36
  000fe:    	mov    esi,DWORD PTR [rip+0x1824]        # 0x1928
  00104:    	cmp    esi,0xffffffff
  00107:    	je     0x2db45
  0010d:    	cmp    WORD PTR [rdi+0x2],0x3
  00112:    	jne    0x12b
  00118:    	cmp    esi,0x6
  0011b:    	jge    0x12b
  00121:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00126:    	jmp    0x137
  0012b: 95 	movabs rax,0x55955d9e0e20
  00135:    	call   rax
  00137:    	mov    QWORD PTR [r14-0x60],rax
:00006 
:00007 %7 = %2.call z()                     [Vec]
  0013b:    	mov    rdi,QWORD PTR [r14-0x40]
  0013f: 00 	test   rdi,0x7
  00146:    	jne    0x2db6e
  0014c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00150:    	jne    0x2db6e
  00156: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9452],0x26        # 0xfffe95af
  0015d:    	jne    0x2db6e
  00163:    	mov    esi,DWORD PTR [rip+0x17c7]        # 0x1930
  00169:    	cmp    esi,0xffffffff
  0016c:    	je     0x2db7d
  00172:    	cmp    WORD PTR [rdi+0x2],0x3
  00177:    	jne    0x190
  0017d:    	cmp    esi,0x6
  00180:    	jge    0x190
  00186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0018b:    	jmp    0x19c
  00190: 95 	movabs rax,0x55955d9e0e20
  0019a:    	call   rax
  0019c:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00009 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  001a0:    	mov    rdi,QWORD PTR [r14-0x50]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x2dba6
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2c
  001b5:    	jne    0x2dba6
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe93ed],0x26        # 0xfffe95af
  001c2:    	jne    0x2dba6
  001c8: 00 	mov    r9,0x0
  001cf:    	mov    rdx,rdi
  001d2:    	mov    QWORD PTR [rsp-0x40],rcx
  001d7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e0:    	lea    rcx,[r14-0x58]
  001e4: 00 	mov    r8,0x3
  001eb:    	mov    rsi,QWORD PTR [rbx]
  001ee:    	mov    QWORD PTR [rsp-0x18],rsi
  001f3:    	lea    rsi,[rsp-0x18]
  001f8:    	mov    QWORD PTR [rbx],rsi
  001fb:    	lea    r14,[rsp-0x10]
  00200:    	mov    QWORD PTR [rsp-0x20],r14
  00205:    	call   0x2dbb5
  0020a:    	lea    r14,[rbp-0x8]
  0020e:    	mov    QWORD PTR [rbx],r14
  00211:    	mov    r14,QWORD PTR [rbp-0x10]
  00215: 95 	movabs r13,0x55955e182490
  0021f:    	test   rax,rax
  00222:    	je     0xfffe5318
  00228:    	mov    QWORD PTR [r14-0x50],rax
:00010 
:00011 %1:.[%3:] = %4
  0022c:    	mov    rdi,QWORD PTR [r14-0x38]
  00230:    	mov    rsi,QWORD PTR [r14-0x48]
  00234: 00 	test   rdi,0x7
  0023b:    	jne    0x2dbe7
  00241:    	cmp    DWORD PTR [rdi+0x4],0xb
  00245:    	jne    0x2dbe7
  0024b: 00 	test   rsi,0x1
  00252:    	je     0x2dbe7
  00258:    	sar    rsi,1
  0025b:    	mov    rdx,r12
  0025e:    	mov    rcx,QWORD PTR [r14-0x50]
  00262: 95 	movabs rax,0x55955d9ace90
  0026c:    	call   rax
  0026e: 95 	movabs r13,0x55955e1824a0
  00278:    	test   rax,rax
  0027b:    	je     0xfffe5318
:00012 %3 = 1: i32
  00281: 00 	mov    QWORD PTR [r14-0x48],0x3
:00013 %4 = const[Vec]                      [Vec]
  00289: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9334]        # 0xfffe95c4
  00290: 00 	cmp    rax,QWORD PTR [rip+0x16ad]        # 0x1944
  00297:    	jne    0x2dbf6
  0029d: 00 	mov    rax,QWORD PTR [rip+0x1690]        # 0x1934
  002a4:    	mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0]
  002a8: 00 	movq   xmm2,QWORD PTR [rip+0x16a4]        # 0x1954
  002b0: 00 	movabs rax,0x8000000000000002
  002ba:    	mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  002be: 00 	movq   xmm3,QWORD PTR [rip+0x169e]        # 0x1964
  002c6: 00 	movabs rax,0x8000000000000002
  002d0:    	mov    QWORD PTR [r14-0x60],rax
:00016 %7 = literal[0.0]
  002d4: 00 	movq   xmm4,QWORD PTR [rip+0x1698]        # 0x1974
  002dc: 00 	movabs rax,0x8000000000000002
  002e6:    	mov    QWORD PTR [r14-0x68],rax
:00017 %4 = %4.call new(%5; 3)              [#<Class:Vec>]
  002ea:    	mov    rdi,QWORD PTR [r14-0x50]
  002ee: 00 	test   rdi,0x7
  002f5:    	jne    0x2dc3c
  002fb:    	cmp    DWORD PTR [rdi+0x4],0x2c
  002ff:    	jne    0x2dc3c
  00305: 26 	cmp    DWORD PTR [rip+0xfffffffffffe92a3],0x26        # 0xfffe95af
  0030c:    	jne    0x2dc3c
  00312: 00 	mov    r9,0x0
  00319:    	sub    rsp,0x20
  0031d:    	movq   QWORD PTR [rsp],xmm2
  00322:    	movq   QWORD PTR [rsp+0x8],xmm3
  00328:    	movq   QWORD PTR [rsp+0x10],xmm4
  0032e:    	mov    rdx,rdi
  00331:    	mov    QWORD PTR [rsp-0x40],rcx
  00336: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0033f:    	lea    rcx,[r14-0x58]
  00343: 00 	mov    r8,0x3
  0034a:    	mov    rsi,QWORD PTR [rbx]
  0034d:    	mov    QWORD PTR [rsp-0x18],rsi
  00352:    	lea    rsi,[rsp-0x18]
  00357:    	mov    QWORD PTR [rbx],rsi
  0035a:    	lea    r14,[rsp-0x10]
  0035f:    	mov    QWORD PTR [rsp-0x20],r14
  00364:    	call   0x2dc4b
  00369:    	lea    r14,[rbp-0x8]
  0036d:    	mov    QWORD PTR [rbx],r14
  00370:    	mov    r14,QWORD PTR [rbp-0x10]
  00374:    	movq   xmm2,QWORD PTR [rsp]
  00379:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0037f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00385:    	add    rsp,0x20
  00389: 95 	movabs r13,0x55955e182510
  00393:    	test   rax,rax
  00396:    	je     0xfffe5318
  0039c:    	mov    QWORD PTR [r14-0x50],rax
:00018 
:00019 %1:.[%3:] = %4
  003a0:    	mov    rdi,QWORD PTR [r14-0x38]
  003a4:    	mov    rsi,QWORD PTR [r14-0x48]
  003a8: 00 	test   rdi,0x7
  003af:    	jne    0x2dc7d
  003b5:    	cmp    DWORD PTR [rdi+0x4],0xb
  003b9:    	jne    0x2dc7d
  003bf: 00 	test   rsi,0x1
  003c6:    	je     0x2dc7d
  003cc:    	sar    rsi,1
  003cf:    	sub    rsp,0x20
  003d3:    	movq   QWORD PTR [rsp],xmm2
  003d8:    	movq   QWORD PTR [rsp+0x8],xmm3
  003de:    	movq   QWORD PTR [rsp+0x10],xmm4
  003e4:    	mov    rdx,r12
  003e7:    	mov    rcx,QWORD PTR [r14-0x50]
  003eb: 95 	movabs rax,0x55955d9ace90
  003f5:    	call   rax
  003f7:    	movq   xmm2,QWORD PTR [rsp]
  003fc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00402:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00408:    	add    rsp,0x20
  0040c: 95 	movabs r13,0x55955e182520
  00416:    	test   rax,rax
  00419:    	je     0xfffe5318
:00020 %3 = %2.call x()                     [Vec]
  0041f:    	mov    rdi,QWORD PTR [r14-0x40]
  00423: 00 	test   rdi,0x7
  0042a:    	jne    0x2dc8c
  00430:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00434:    	jne    0x2dc8c
  0043a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe916e],0x26        # 0xfffe95af
  00441:    	jne    0x2dc8c
  00447:    	mov    esi,DWORD PTR [rip+0x1533]        # 0x1980
  0044d:    	cmp    esi,0xffffffff
  00450:    	je     0x2dc9b
  00456:    	cmp    WORD PTR [rdi+0x2],0x3
  0045b:    	jne    0x474
  00461:    	cmp    esi,0x6
  00464:    	jge    0x474
  0046a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0046f:    	jmp    0x4aa
  00474:    	sub    rsp,0x20
  00478:    	movq   QWORD PTR [rsp],xmm2
  0047d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00483:    	movq   QWORD PTR [rsp+0x10],xmm4
  00489: 95 	movabs rax,0x55955d9e0e20
  00493:    	call   rax
  00495:    	movq   xmm2,QWORD PTR [rsp]
  0049a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a6:    	add    rsp,0x20
  004aa:    	mov    QWORD PTR [r14-0x48],rax
:00021 
:00022 %4 = literal[0.6]
  004ae: 00 	movq   xmm5,QWORD PTR [rip+0x14ce]        # 0x1984
  004b6: 99 	movabs rax,0xff1999999999999a
  004c0:    	mov    QWORD PTR [r14-0x50],rax
:00023 _%3 = %3 < %4                        [Float][Float]
:00024 condnotbr _%3 =>:00036
  004c4:    	mov    rdi,QWORD PTR [r14-0x48]
  004c8: 00 	test   rdi,0x1
  004cf:    	jne    0x2dcee
  004d5: 00 	test   rdi,0x2
  004dc:    	je     0x518
  004e2:    	xorps  xmm6,xmm6
  004e5: 00 	movabs rax,0x8000000000000002
  004ef:    	cmp    rdi,rax
  004f2:    	je     0x52a
  004f8:    	mov    rax,rdi
  004fb:    	sar    rax,0x3f
  004ff:    	add    rax,0x2
  00503:    	and    rdi,0xfffffffffffffffc
  00507:    	or     rdi,rax
  0050a:    	rol    rdi,0x3d
  0050e:    	movq   xmm6,rdi
  00513:    	jmp    0x52a
  00518:    	call   0xfffe5371
  0051d:    	test   rax,rax
  00520:    	je     0x2dcee
  00526:    	movq   xmm6,xmm0
  0052a:    	ucomisd xmm6,xmm5
  0052e:    	jae    0x2ddfe
:00025 %3 = %2.call x()                     [Vec]
  00534:    	mov    rdi,QWORD PTR [r14-0x40]
  00538: 00 	test   rdi,0x7
  0053f:    	jne    0x2dcfd
  00545:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00549:    	jne    0x2dcfd
  0054f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9059],0x26        # 0xfffe95af
  00556:    	jne    0x2dcfd
  0055c:    	mov    esi,DWORD PTR [rip+0x142e]        # 0x1990
  00562:    	cmp    esi,0xffffffff
  00565:    	je     0x2dd0c
  0056b:    	cmp    WORD PTR [rdi+0x2],0x3
  00570:    	jne    0x589
  00576:    	cmp    esi,0x6
  00579:    	jge    0x589
  0057f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00584:    	jmp    0x5cb
  00589:    	sub    rsp,0x20
  0058d:    	movq   QWORD PTR [rsp],xmm2
  00592:    	movq   QWORD PTR [rsp+0x8],xmm3
  00598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0059e:    	movq   QWORD PTR [rsp+0x18],xmm5
  005a4: 95 	movabs rax,0x55955d9e0e20
  005ae:    	call   rax
  005b0:    	movq   xmm2,QWORD PTR [rsp]
  005b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c7:    	add    rsp,0x20
  005cb:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00027 %4 = literal[-0.6]
  005cf: 00 	movq   xmm5,QWORD PTR [rip+0x13bd]        # 0x1994
  005d7: 99 	movabs rax,0xff1999999999999e
  005e1:    	mov    QWORD PTR [r14-0x50],rax
:00028 _%3 = %3 > %4                        [Float][Float]
:00029 condnotbr _%3 =>:00036
  005e5:    	mov    rdi,QWORD PTR [r14-0x48]
  005e9: 00 	test   rdi,0x1
  005f0:    	jne    0x2dd6b
  005f6: 00 	test   rdi,0x2
  005fd:    	je     0x639
  00603:    	xorps  xmm6,xmm6
  00606: 00 	movabs rax,0x8000000000000002
  00610:    	cmp    rdi,rax
  00613:    	je     0x64b
  00619:    	mov    rax,rdi
  0061c:    	sar    rax,0x3f
  00620:    	add    rax,0x2
  00624:    	and    rdi,0xfffffffffffffffc
  00628:    	or     rdi,rax
  0062b:    	rol    rdi,0x3d
  0062f:    	movq   xmm6,rdi
  00634:    	jmp    0x64b
  00639:    	call   0xfffe5371
  0063e:    	test   rax,rax
  00641:    	je     0x2dd6b
  00647:    	movq   xmm6,xmm0
  0064b:    	ucomisd xmm6,xmm5
  0064f:    	jbe    0x2de17
:00030 %3 = 1: i32
  00655: 00 	mov    QWORD PTR [r14-0x48],0x3
:00031 %3 = %1.[%3]                         [Array][Integer]
  0065d:    	mov    rdi,QWORD PTR [r14-0x38]
  00661:    	mov    rsi,QWORD PTR [r14-0x48]
  00665: 00 	test   rdi,0x7
  0066c:    	jne    0x2dd7a
  00672:    	cmp    DWORD PTR [rdi+0x4],0xb
  00676:    	jne    0x2dd7a
  0067c: 00 	test   rsi,0x1
  00683:    	je     0x2dd7a
  00689:    	sar    rsi,1
  0068c:    	sub    rsp,0x20
  00690:    	movq   QWORD PTR [rsp],xmm2
  00695:    	movq   QWORD PTR [rsp+0x8],xmm3
  0069b:    	movq   QWORD PTR [rsp+0x10],xmm4
  006a1:    	movq   QWORD PTR [rsp+0x18],xmm5
  006a7: 95 	movabs rax,0x55955d9acd00
  006b1:    	call   rax
  006b3:    	movq   xmm2,QWORD PTR [rsp]
  006b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006be:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006c4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006ca:    	add    rsp,0x20
  006ce: 95 	movabs r13,0x55955e1825e0
  006d8:    	test   rax,rax
  006db:    	je     0xfffe5318
  006e1:    	mov    QWORD PTR [r14-0x48],rax
:00032 %4 = literal[1.0]
  006e5: 00 	movq   xmm5,QWORD PTR [rip+0x12b7]        # 0x19a4
  006ed: 00 	movabs rax,0xff80000000000002
  006f7:    	mov    QWORD PTR [r14-0x50],rax
:00033 _ = %3.call x=(%4; 1)                [Vec]
  006fb:    	mov    rdi,QWORD PTR [r14-0x48]
  006ff: 00 	test   rdi,0x7
  00706:    	jne    0x2dd89
  0070c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00710:    	jne    0x2dd89
  00716: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8e92],0x26        # 0xfffe95af
  0071d:    	jne    0x2dd89
  00723:    	mov    esi,DWORD PTR [rip+0x1287]        # 0x19b0
  00729:    	cmp    esi,0xffffffff
  0072c:    	je     0x2dd98
  00732:    	cmp    WORD PTR [rdi+0x2],0x3
  00737:    	jne    0x754
  0073d:    	cmp    esi,0x6
  00740:    	jge    0x754
  00746:    	mov    rax,QWORD PTR [r14-0x50]
  0074a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0074f:    	jmp    0x7ad
  00754:    	sub    rsp,0x20
  00758:    	movq   QWORD PTR [rsp],xmm2
  0075d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00763:    	movq   QWORD PTR [rsp+0x10],xmm4
  00769:    	movq   QWORD PTR [rsp+0x18],xmm5
  0076f:    	mov    rdx,QWORD PTR [r14-0x50]
  00773: 95 	movabs rax,0x55955d9e10a0
  0077d:    	call   rax
  0077f:    	movq   xmm2,QWORD PTR [rsp]
  00784:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0078a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00790:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00796:    	add    rsp,0x20
  0079a: 95 	movabs r13,0x55955e182610
  007a4:    	test   rax,rax
  007a7:    	je     0xfffe5318
:00034 
:00035 br =>:00073
  007ad:    	jmp    0x2e20b
:00036 %3 = %2.call y()                     [Vec]
  007b2:    	mov    rdi,QWORD PTR [r14-0x40]
  007b6: 00 	test   rdi,0x7
  007bd:    	jne    0x2de30
  007c3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  007c7:    	jne    0x2de30
  007cd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8ddb],0x26        # 0xfffe95af
  007d4:    	jne    0x2de30
  007da:    	mov    esi,DWORD PTR [rip+0x11d8]        # 0x19b8
  007e0:    	cmp    esi,0xffffffff
  007e3:    	je     0x2de3f
  007e9:    	cmp    WORD PTR [rdi+0x2],0x3
  007ee:    	jne    0x807
  007f4:    	cmp    esi,0x6
  007f7:    	jge    0x807
  007fd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00802:    	jmp    0x849
  00807:    	sub    rsp,0x20
  0080b:    	movq   QWORD PTR [rsp],xmm2
  00810:    	movq   QWORD PTR [rsp+0x8],xmm3
  00816:    	movq   QWORD PTR [rsp+0x10],xmm4
  0081c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00822: 95 	movabs rax,0x55955d9e0e20
  0082c:    	call   rax
  0082e:    	movq   xmm2,QWORD PTR [rsp]
  00833:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00839:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0083f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00845:    	add    rsp,0x20
  00849:    	mov    QWORD PTR [r14-0x48],rax
:00037 
:00038 %4 = literal[0.6]
  0084d: 00 	movq   xmm5,QWORD PTR [rip+0x116f]        # 0x19c4
  00855: 99 	movabs rax,0xff1999999999999a
  0085f:    	mov    QWORD PTR [r14-0x50],rax
:00039 _%3 = %3 < %4                        [Float][Float]
:00040 condnotbr _%3 =>:00052
  00863:    	mov    rdi,QWORD PTR [r14-0x48]
  00867: 00 	test   rdi,0x1
  0086e:    	jne    0x2de9e
  00874: 00 	test   rdi,0x2
  0087b:    	je     0x8b7
  00881:    	xorps  xmm6,xmm6
  00884: 00 	movabs rax,0x8000000000000002
  0088e:    	cmp    rdi,rax
  00891:    	je     0x8c9
  00897:    	mov    rax,rdi
  0089a:    	sar    rax,0x3f
  0089e:    	add    rax,0x2
  008a2:    	and    rdi,0xfffffffffffffffc
  008a6:    	or     rdi,rax
  008a9:    	rol    rdi,0x3d
  008ad:    	movq   xmm6,rdi
  008b2:    	jmp    0x8c9
  008b7:    	call   0xfffe5371
  008bc:    	test   rax,rax
  008bf:    	je     0x2de9e
  008c5:    	movq   xmm6,xmm0
  008c9:    	ucomisd xmm6,xmm5
  008cd:    	jae    0x2dfae
:00041 %3 = %2.call y()                     [Vec]
  008d3:    	mov    rdi,QWORD PTR [r14-0x40]
  008d7: 00 	test   rdi,0x7
  008de:    	jne    0x2dead
  008e4:    	cmp    DWORD PTR [rdi+0x4],0x2b
  008e8:    	jne    0x2dead
  008ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8cba],0x26        # 0xfffe95af
  008f5:    	jne    0x2dead
  008fb:    	mov    esi,DWORD PTR [rip+0x10cf]        # 0x19d0
  00901:    	cmp    esi,0xffffffff
  00904:    	je     0x2debc
  0090a:    	cmp    WORD PTR [rdi+0x2],0x3
  0090f:    	jne    0x928
  00915:    	cmp    esi,0x6
  00918:    	jge    0x928
  0091e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00923:    	jmp    0x96a
  00928:    	sub    rsp,0x20
  0092c:    	movq   QWORD PTR [rsp],xmm2
  00931:    	movq   QWORD PTR [rsp+0x8],xmm3
  00937:    	movq   QWORD PTR [rsp+0x10],xmm4
  0093d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00943: 95 	movabs rax,0x55955d9e0e20
  0094d:    	call   rax
  0094f:    	movq   xmm2,QWORD PTR [rsp]
  00954:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0095a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00960:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00966:    	add    rsp,0x20
  0096a:    	mov    QWORD PTR [r14-0x48],rax
:00042 
:00043 %4 = literal[-0.6]
  0096e: 00 	movq   xmm5,QWORD PTR [rip+0x105e]        # 0x19d4
  00976: 99 	movabs rax,0xff1999999999999e
  00980:    	mov    QWORD PTR [r14-0x50],rax
:00044 _%3 = %3 > %4                        [Float][Float]
:00045 condnotbr _%3 =>:00052
  00984:    	mov    rdi,QWORD PTR [r14-0x48]
  00988: 00 	test   rdi,0x1
  0098f:    	jne    0x2df1b
  00995: 00 	test   rdi,0x2
  0099c:    	je     0x9d8
  009a2:    	xorps  xmm6,xmm6
  009a5: 00 	movabs rax,0x8000000000000002
  009af:    	cmp    rdi,rax
  009b2:    	je     0x9ea
  009b8:    	mov    rax,rdi
  009bb:    	sar    rax,0x3f
  009bf:    	add    rax,0x2
  009c3:    	and    rdi,0xfffffffffffffffc
  009c7:    	or     rdi,rax
  009ca:    	rol    rdi,0x3d
  009ce:    	movq   xmm6,rdi
  009d3:    	jmp    0x9ea
  009d8:    	call   0xfffe5371
  009dd:    	test   rax,rax
  009e0:    	je     0x2df1b
  009e6:    	movq   xmm6,xmm0
  009ea:    	ucomisd xmm6,xmm5
  009ee:    	jbe    0x2dfc7
:00046 %3 = 1: i32
  009f4: 00 	mov    QWORD PTR [r14-0x48],0x3
:00047 %3 = %1.[%3]                         [Array][Integer]
  009fc:    	mov    rdi,QWORD PTR [r14-0x38]
  00a00:    	mov    rsi,QWORD PTR [r14-0x48]
  00a04: 00 	test   rdi,0x7
  00a0b:    	jne    0x2df2a
  00a11:    	cmp    DWORD PTR [rdi+0x4],0xb
  00a15:    	jne    0x2df2a
  00a1b: 00 	test   rsi,0x1
  00a22:    	je     0x2df2a
  00a28:    	sar    rsi,1
  00a2b:    	sub    rsp,0x20
  00a2f:    	movq   QWORD PTR [rsp],xmm2
  00a34:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a40:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a46: 95 	movabs rax,0x55955d9acd00
  00a50:    	call   rax
  00a52:    	movq   xmm2,QWORD PTR [rsp]
  00a57:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a5d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a63:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a69:    	add    rsp,0x20
  00a6d: 95 	movabs r13,0x55955e1826e0
  00a77:    	test   rax,rax
  00a7a:    	je     0xfffe5318
  00a80:    	mov    QWORD PTR [r14-0x48],rax
:00048 %4 = literal[1.0]
  00a84: 00 	movq   xmm5,QWORD PTR [rip+0xf58]        # 0x19e4
  00a8c: 00 	movabs rax,0xff80000000000002
  00a96:    	mov    QWORD PTR [r14-0x50],rax
:00049 _ = %3.call y=(%4; 1)                [Vec]
  00a9a:    	mov    rdi,QWORD PTR [r14-0x48]
  00a9e: 00 	test   rdi,0x7
  00aa5:    	jne    0x2df39
  00aab:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00aaf:    	jne    0x2df39
  00ab5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8af3],0x26        # 0xfffe95af
  00abc:    	jne    0x2df39
  00ac2:    	mov    esi,DWORD PTR [rip+0xf28]        # 0x19f0
  00ac8:    	cmp    esi,0xffffffff
  00acb:    	je     0x2df48
  00ad1:    	cmp    WORD PTR [rdi+0x2],0x3
  00ad6:    	jne    0xaf3
  00adc:    	cmp    esi,0x6
  00adf:    	jge    0xaf3
  00ae5:    	mov    rax,QWORD PTR [r14-0x50]
  00ae9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00aee:    	jmp    0xb4c
  00af3:    	sub    rsp,0x20
  00af7:    	movq   QWORD PTR [rsp],xmm2
  00afc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b02:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b08:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b0e:    	mov    rdx,QWORD PTR [r14-0x50]
  00b12: 95 	movabs rax,0x55955d9e10a0
  00b1c:    	call   rax
  00b1e:    	movq   xmm2,QWORD PTR [rsp]
  00b23:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b29:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b35:    	add    rsp,0x20
  00b39: 95 	movabs r13,0x55955e182710
  00b43:    	test   rax,rax
  00b46:    	je     0xfffe5318
:00050 
:00051 br =>:00073
  00b4c:    	jmp    0x2e224
:00052 %3 = %2.call z()                     [Vec]
  00b51:    	mov    rdi,QWORD PTR [r14-0x40]
  00b55: 00 	test   rdi,0x7
  00b5c:    	jne    0x2dfe0
  00b62:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00b66:    	jne    0x2dfe0
  00b6c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8a3c],0x26        # 0xfffe95af
  00b73:    	jne    0x2dfe0
  00b79:    	mov    esi,DWORD PTR [rip+0xe79]        # 0x19f8
  00b7f:    	cmp    esi,0xffffffff
  00b82:    	je     0x2dfef
  00b88:    	cmp    WORD PTR [rdi+0x2],0x3
  00b8d:    	jne    0xba6
  00b93:    	cmp    esi,0x6
  00b96:    	jge    0xba6
  00b9c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ba1:    	jmp    0xbe8
  00ba6:    	sub    rsp,0x20
  00baa:    	movq   QWORD PTR [rsp],xmm2
  00baf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bb5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bbb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bc1: 95 	movabs rax,0x55955d9e0e20
  00bcb:    	call   rax
  00bcd:    	movq   xmm2,QWORD PTR [rsp]
  00bd2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bd8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bde:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00be4:    	add    rsp,0x20
  00be8:    	mov    QWORD PTR [r14-0x48],rax
:00053 
:00054 %4 = literal[0.6]
  00bec: 00 	movq   xmm5,QWORD PTR [rip+0xe10]        # 0x1a04
  00bf4: 99 	movabs rax,0xff1999999999999a
  00bfe:    	mov    QWORD PTR [r14-0x50],rax
:00055 _%3 = %3 < %4                        [Float][Float]
:00056 condnotbr _%3 =>:00068
  00c02:    	mov    rdi,QWORD PTR [r14-0x48]
  00c06: 00 	test   rdi,0x1
  00c0d:    	jne    0x2e04e
  00c13: 00 	test   rdi,0x2
  00c1a:    	je     0xc56
  00c20:    	xorps  xmm6,xmm6
  00c23: 00 	movabs rax,0x8000000000000002
  00c2d:    	cmp    rdi,rax
  00c30:    	je     0xc68
  00c36:    	mov    rax,rdi
  00c39:    	sar    rax,0x3f
  00c3d:    	add    rax,0x2
  00c41:    	and    rdi,0xfffffffffffffffc
  00c45:    	or     rdi,rax
  00c48:    	rol    rdi,0x3d
  00c4c:    	movq   xmm6,rdi
  00c51:    	jmp    0xc68
  00c56:    	call   0xfffe5371
  00c5b:    	test   rax,rax
  00c5e:    	je     0x2e04e
  00c64:    	movq   xmm6,xmm0
  00c68:    	ucomisd xmm6,xmm5
  00c6c:    	jae    0x2e15e
:00057 %3 = %2.call z()                     [Vec]
  00c72:    	mov    rdi,QWORD PTR [r14-0x40]
  00c76: 00 	test   rdi,0x7
  00c7d:    	jne    0x2e05d
  00c83:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00c87:    	jne    0x2e05d
  00c8d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe891b],0x26        # 0xfffe95af
  00c94:    	jne    0x2e05d
  00c9a:    	mov    esi,DWORD PTR [rip+0xd70]        # 0x1a10
  00ca0:    	cmp    esi,0xffffffff
  00ca3:    	je     0x2e06c
  00ca9:    	cmp    WORD PTR [rdi+0x2],0x3
  00cae:    	jne    0xcc7
  00cb4:    	cmp    esi,0x6
  00cb7:    	jge    0xcc7
  00cbd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cc2:    	jmp    0xd09
  00cc7:    	sub    rsp,0x20
  00ccb:    	movq   QWORD PTR [rsp],xmm2
  00cd0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cd6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cdc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce2: 95 	movabs rax,0x55955d9e0e20
  00cec:    	call   rax
  00cee:    	movq   xmm2,QWORD PTR [rsp]
  00cf3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cf9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d05:    	add    rsp,0x20
  00d09:    	mov    QWORD PTR [r14-0x48],rax
:00058 
:00059 %4 = literal[-0.6]
  00d0d: 00 	movq   xmm5,QWORD PTR [rip+0xcff]        # 0x1a14
  00d15: 99 	movabs rax,0xff1999999999999e
  00d1f:    	mov    QWORD PTR [r14-0x50],rax
:00060 _%3 = %3 > %4                        [Float][Float]
:00061 condnotbr _%3 =>:00068
  00d23:    	mov    rdi,QWORD PTR [r14-0x48]
  00d27: 00 	test   rdi,0x1
  00d2e:    	jne    0x2e0cb
  00d34: 00 	test   rdi,0x2
  00d3b:    	je     0xd77
  00d41:    	xorps  xmm6,xmm6
  00d44: 00 	movabs rax,0x8000000000000002
  00d4e:    	cmp    rdi,rax
  00d51:    	je     0xd89
  00d57:    	mov    rax,rdi
  00d5a:    	sar    rax,0x3f
  00d5e:    	add    rax,0x2
  00d62:    	and    rdi,0xfffffffffffffffc
  00d66:    	or     rdi,rax
  00d69:    	rol    rdi,0x3d
  00d6d:    	movq   xmm6,rdi
  00d72:    	jmp    0xd89
  00d77:    	call   0xfffe5371
  00d7c:    	test   rax,rax
  00d7f:    	je     0x2e0cb
  00d85:    	movq   xmm6,xmm0
  00d89:    	ucomisd xmm6,xmm5
  00d8d:    	jbe    0x2e177
:00062 %3 = 1: i32
  00d93: 00 	mov    QWORD PTR [r14-0x48],0x3
:00063 %3 = %1.[%3]                         [Array][Integer]
  00d9b:    	mov    rdi,QWORD PTR [r14-0x38]
  00d9f:    	mov    rsi,QWORD PTR [r14-0x48]
  00da3: 00 	test   rdi,0x7
  00daa:    	jne    0x2e0da
  00db0:    	cmp    DWORD PTR [rdi+0x4],0xb
  00db4:    	jne    0x2e0da
  00dba: 00 	test   rsi,0x1
  00dc1:    	je     0x2e0da
  00dc7:    	sar    rsi,1
  00dca:    	sub    rsp,0x20
  00dce:    	movq   QWORD PTR [rsp],xmm2
  00dd3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dd9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ddf:    	movq   QWORD PTR [rsp+0x18],xmm5
  00de5: 95 	movabs rax,0x55955d9acd00
  00def:    	call   rax
  00df1:    	movq   xmm2,QWORD PTR [rsp]
  00df6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e08:    	add    rsp,0x20
  00e0c: 95 	movabs r13,0x55955e1827e0
  00e16:    	test   rax,rax
  00e19:    	je     0xfffe5318
  00e1f:    	mov    QWORD PTR [r14-0x48],rax
:00064 %4 = literal[1.0]
  00e23: 00 	movq   xmm5,QWORD PTR [rip+0xbf9]        # 0x1a24
  00e2b: 00 	movabs rax,0xff80000000000002
  00e35:    	mov    QWORD PTR [r14-0x50],rax
:00065 _ = %3.call z=(%4; 1)                [Vec]
  00e39:    	mov    rdi,QWORD PTR [r14-0x48]
  00e3d: 00 	test   rdi,0x7
  00e44:    	jne    0x2e0e9
  00e4a:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e4e:    	jne    0x2e0e9
  00e54: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8754],0x26        # 0xfffe95af
  00e5b:    	jne    0x2e0e9
  00e61:    	mov    esi,DWORD PTR [rip+0xbc9]        # 0x1a30
  00e67:    	cmp    esi,0xffffffff
  00e6a:    	je     0x2e0f8
  00e70:    	cmp    WORD PTR [rdi+0x2],0x3
  00e75:    	jne    0xe92
  00e7b:    	cmp    esi,0x6
  00e7e:    	jge    0xe92
  00e84:    	mov    rax,QWORD PTR [r14-0x50]
  00e88:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e8d:    	jmp    0xeeb
  00e92:    	sub    rsp,0x20
  00e96:    	movq   QWORD PTR [rsp],xmm2
  00e9b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea1:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ea7:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ead:    	mov    rdx,QWORD PTR [r14-0x50]
  00eb1: 95 	movabs rax,0x55955d9e10a0
  00ebb:    	call   rax
  00ebd:    	movq   xmm2,QWORD PTR [rsp]
  00ec2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ec8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ece:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ed4:    	add    rsp,0x20
  00ed8: 95 	movabs r13,0x55955e182810
  00ee2:    	test   rax,rax
  00ee5:    	je     0xfffe5318
:00066 
:00067 br =>:00073
  00eeb:    	jmp    0x2e23d
:00068 %3 = 1: i32
  00ef0: 00 	mov    QWORD PTR [r14-0x48],0x3
:00069 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00ef8:    	sub    rsp,0x20
  00efc:    	movq   QWORD PTR [rsp],xmm2
  00f01:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f07:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f0d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f13:    	mov    rdi,rbx
  00f16:    	mov    rsi,r12
  00f19:    	mov    rdx,QWORD PTR [r14-0x38]
  00f1d:    	mov    rcx,QWORD PTR [r14-0x48]
  00f21: 95 	movabs r8,0x55955e182838
  00f2b: 95 	movabs rax,0x55955d9acbd0
  00f35:    	call   rax
  00f37:    	movq   xmm2,QWORD PTR [rsp]
  00f3c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f42:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f48:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f4e:    	add    rsp,0x20
  00f52: 95 	movabs r13,0x55955e182840
  00f5c:    	test   rax,rax
  00f5f:    	je     0xfffe5318
  00f65:    	mov    QWORD PTR [r14-0x48],rax
:00070 %4 = literal[1.0]
  00f69: 00 	movq   xmm5,QWORD PTR [rip+0xac3]        # 0x1a34
  00f71: 00 	movabs rax,0xff80000000000002
  00f7b:    	mov    QWORD PTR [r14-0x50],rax
:00071 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f7f: 00 	cmp    DWORD PTR [rip+0xab6],0x0        # 0x1a3c
  00f86:    	jl     0x2e190
  00f8c:    	je     0x2e19f
  00f92: 01 	sub    DWORD PTR [rip+0xaa3],0x1        # 0x1a3c
  00f99:    	xor    rdi,rdi
  00f9c:    	jmp    0x2e190
  00fa1:    	sub    rsp,0x20
  00fa5:    	movq   QWORD PTR [rsp],xmm2
  00faa:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fb0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fb6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fbc:    	mov    rdi,QWORD PTR [r14-0x48]
  00fc0: 95 	movabs rax,0x55955d949d50
  00fca:    	call   rax
  00fcc:    	mov    r15d,eax
  00fcf: 95 	movabs r13,0x55955e182860
  00fd9:    	cmp    QWORD PTR [r13+0x8],0x0
  00fde:    	je     0x2e1bb
  00fe4:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fe8:    	jne    0x2e1bb
  00fee:    	mov    eax,DWORD PTR [rip+0xfffffffffffe85bb]        # 0xfffe95af
  00ff4:    	cmp    DWORD PTR [r13-0x4],eax
  00ff8:    	jne    0x2e1bb
  00ffe: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01007:    	mov    rax,QWORD PTR [r14-0x48]
  0100b:    	mov    QWORD PTR [rsp-0x40],rax
  01010: 00 	mov    rdi,0x1
  01017:    	mov    rax,QWORD PTR [r14-0x50]
  0101b:    	mov    QWORD PTR [rsp-0x48],rax
  01020: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01029:    	mov    r13,QWORD PTR [r13+0x8]
  0102d:    	mov    rax,QWORD PTR [r13+0x8]
  01031:    	mov    QWORD PTR [rsp-0x30],rax
  01036:    	mov    rax,QWORD PTR [r13+0x0]
  0103a:    	mov    r13,QWORD PTR [r13+0x10]
  0103e:    	mov    rsi,QWORD PTR [rbx]
  01041:    	mov    QWORD PTR [rsp-0x18],rsi
  01046:    	lea    rsi,[rsp-0x18]
  0104b:    	mov    QWORD PTR [rbx],rsi
  0104e:    	lea    r14,[rsp-0x10]
  01053:    	mov    QWORD PTR [rsp-0x20],r14
  01058:    	call   rax
  0105a:    	lea    r14,[rbp-0x8]
  0105e:    	mov    QWORD PTR [rbx],r14
  01061:    	mov    r14,QWORD PTR [rbp-0x10]
  01065:    	movq   xmm2,QWORD PTR [rsp]
  0106a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01070:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01076:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0107c:    	add    rsp,0x20
  01080:    	test   rax,rax
  01083:    	je     0x2e1fc
:00072 
  01089:    	jmp    0x2e256
:00073 %3 = 0: i32
  0108e: 00 	mov    QWORD PTR [r14-0x48],0x1
:00074 %4 = 1: i32
  01096: 00 	mov    QWORD PTR [r14-0x50],0x3
:00075 %4 = %1.[%4]                         [Array][Integer]
  0109e:    	mov    rdi,QWORD PTR [r14-0x38]
  010a2:    	mov    rsi,QWORD PTR [r14-0x50]
  010a6: 00 	test   rdi,0x7
  010ad:    	jne    0x2e26f
  010b3:    	cmp    DWORD PTR [rdi+0x4],0xb
  010b7:    	jne    0x2e26f
  010bd: 00 	test   rsi,0x1
  010c4:    	je     0x2e26f
  010ca:    	sar    rsi,1
  010cd:    	sub    rsp,0x20
  010d1:    	movq   QWORD PTR [rsp],xmm2
  010d6:    	movq   QWORD PTR [rsp+0x8],xmm3
  010dc:    	movq   QWORD PTR [rsp+0x10],xmm4
  010e2: 95 	movabs rax,0x55955d9acd00
  010ec:    	call   rax
  010ee:    	movq   xmm2,QWORD PTR [rsp]
  010f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ff:    	add    rsp,0x20
  01103: 95 	movabs r13,0x55955e1828a0
  0110d:    	test   rax,rax
  01110:    	je     0xfffe5318
  01116:    	mov    QWORD PTR [r14-0x50],rax
:00076 %5 = 2: i32
  0111a: 00 	mov    QWORD PTR [r14-0x58],0x5
:00077 %5 = %1.[%5]                         [Array][Integer]
  01122:    	mov    rdi,QWORD PTR [r14-0x38]
  01126:    	mov    rsi,QWORD PTR [r14-0x58]
  0112a: 00 	test   rdi,0x7
  01131:    	jne    0x2e27e
  01137:    	cmp    DWORD PTR [rdi+0x4],0xb
  0113b:    	jne    0x2e27e
  01141: 00 	test   rsi,0x1
  01148:    	je     0x2e27e
  0114e:    	sar    rsi,1
  01151:    	sub    rsp,0x10
  01155:    	movq   QWORD PTR [rsp],xmm3
  0115a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01160: 95 	movabs rax,0x55955d9acd00
  0116a:    	call   rax
  0116c:    	movq   xmm3,QWORD PTR [rsp]
  01171:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01177:    	add    rsp,0x10
  0117b: 95 	movabs r13,0x55955e1828c0
  01185:    	test   rax,rax
  01188:    	je     0xfffe5318
  0118e:    	mov    QWORD PTR [r14-0x58],rax
:00078 %4 = %4.call vcross(%5; 1)           [Vec]
  01192:    	mov    rdi,QWORD PTR [r14-0x50]
  01196: 00 	test   rdi,0x7
  0119d:    	jne    0x2e28d
  011a3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011a7:    	jne    0x2e28d
  011ad: 26 	cmp    DWORD PTR [rip+0xfffffffffffe83fb],0x26        # 0xfffe95af
  011b4:    	jne    0x2e28d
  011ba:    	sub    rsp,0x10
  011be:    	movq   QWORD PTR [rsp],xmm3
  011c3:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c9: 00 	cmp    DWORD PTR [rip+0xfffffffffffe83e3],0x0        # 0xfffe95b3
  011d0:    	je     0x11e8
  011d6:    	mov    rdi,r12
  011d9:    	mov    rsi,QWORD PTR [rbx]
  011dc: 95 	movabs rax,0x55955d9a3d50
  011e6:    	call   rax
  011e8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011f1:    	mov    rax,QWORD PTR [r14-0x50]
  011f5:    	mov    QWORD PTR [rsp-0x40],rax
  011fa: 00 	mov    rdi,0x1
  01201:    	mov    rax,QWORD PTR [r14-0x58]
  01205:    	mov    QWORD PTR [rsp-0x48],rax
  0120a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01213: 08 	movabs rax,0x100080000005c
  0121d:    	mov    QWORD PTR [rsp-0x30],rax
  01222: 95 	movabs r13,0x55955e137470
  0122c:    	mov    rsi,QWORD PTR [rbx]
  0122f:    	mov    QWORD PTR [rsp-0x18],rsi
  01234:    	lea    rsi,[rsp-0x18]
  01239:    	mov    QWORD PTR [rbx],rsi
  0123c:    	lea    r14,[rsp-0x10]
  01241:    	mov    QWORD PTR [rsp-0x20],r14
  01246:    	call   0xffff1f4b
  0124b:    	lea    r14,[rbp-0x8]
  0124f:    	mov    QWORD PTR [rbx],r14
  01252:    	mov    r14,QWORD PTR [rbp-0x10]
  01256:    	movq   xmm3,QWORD PTR [rsp]
  0125b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01261:    	add    rsp,0x10
  01265: 95 	movabs r13,0x55955e1828e0
  0126f:    	test   rax,rax
  01272:    	je     0xfffe5318
  01278:    	mov    QWORD PTR [r14-0x50],rax
:00079 
:00080 %1:.[%3:] = %4
  0127c:    	mov    rdi,QWORD PTR [r14-0x38]
  01280:    	mov    rsi,QWORD PTR [r14-0x48]
  01284: 00 	test   rdi,0x7
  0128b:    	jne    0x2e29c
  01291:    	cmp    DWORD PTR [rdi+0x4],0xb
  01295:    	jne    0x2e29c
  0129b: 00 	test   rsi,0x1
  012a2:    	je     0x2e29c
  012a8:    	sar    rsi,1
  012ab:    	sub    rsp,0x10
  012af:    	movq   QWORD PTR [rsp],xmm3
  012b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ba:    	mov    rdx,r12
  012bd:    	mov    rcx,QWORD PTR [r14-0x50]
  012c1: 95 	movabs rax,0x55955d9ace90
  012cb:    	call   rax
  012cd:    	movq   xmm3,QWORD PTR [rsp]
  012d2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d8:    	add    rsp,0x10
  012dc: 95 	movabs r13,0x55955e1828f0
  012e6:    	test   rax,rax
  012e9:    	je     0xfffe5318
:00081 %3 = 0: i32
  012ef: 00 	mov    QWORD PTR [r14-0x48],0x1
:00082 %4 = 0: i32
  012f7: 00 	mov    QWORD PTR [r14-0x50],0x1
:00083 %4 = %1.[%4]                         [Array][Integer]
  012ff:    	mov    rdi,QWORD PTR [r14-0x38]
  01303:    	mov    rsi,QWORD PTR [r14-0x50]
  01307: 00 	test   rdi,0x7
  0130e:    	jne    0x2e2ab
  01314:    	cmp    DWORD PTR [rdi+0x4],0xb
  01318:    	jne    0x2e2ab
  0131e: 00 	test   rsi,0x1
  01325:    	je     0x2e2ab
  0132b:    	sar    rsi,1
  0132e:    	sub    rsp,0x10
  01332:    	movq   QWORD PTR [rsp],xmm3
  01337:    	movq   QWORD PTR [rsp+0x8],xmm4
  0133d: 95 	movabs rax,0x55955d9acd00
  01347:    	call   rax
  01349:    	movq   xmm3,QWORD PTR [rsp]
  0134e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01354:    	add    rsp,0x10
  01358: 95 	movabs r13,0x55955e182920
  01362:    	test   rax,rax
  01365:    	je     0xfffe5318
  0136b:    	mov    QWORD PTR [r14-0x50],rax
:00084 %4 = %4.call vnormalize()            [Vec]
  0136f:    	mov    rdi,QWORD PTR [r14-0x50]
  01373: 00 	test   rdi,0x7
  0137a:    	jne    0x2e2ba
  01380:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01384:    	jne    0x2e2ba
  0138a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe821e],0x26        # 0xfffe95af
  01391:    	jne    0x2e2ba
  01397:    	sub    rsp,0x10
  0139b:    	movq   QWORD PTR [rsp],xmm3
  013a0:    	movq   QWORD PTR [rsp+0x8],xmm4
  013a6: 00 	cmp    DWORD PTR [rip+0xfffffffffffe8206],0x0        # 0xfffe95b3
  013ad:    	je     0x13c5
  013b3:    	mov    rdi,r12
  013b6:    	mov    rsi,QWORD PTR [rbx]
  013b9: 95 	movabs rax,0x55955d9a3d50
  013c3:    	call   rax
  013c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013ce:    	mov    rax,QWORD PTR [r14-0x50]
  013d2:    	mov    QWORD PTR [rsp-0x40],rax
  013d7: 00 	mov    rdi,0x0
  013de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013e7: 07 	movabs rax,0x100070000005f
  013f1:    	mov    QWORD PTR [rsp-0x30],rax
  013f6: 95 	movabs r13,0x55955e168310
  01400:    	mov    rsi,QWORD PTR [rbx]
  01403:    	mov    QWORD PTR [rsp-0x18],rsi
  01408:    	lea    rsi,[rsp-0x18]
  0140d:    	mov    QWORD PTR [rbx],rsi
  01410:    	lea    r14,[rsp-0x10]
  01415:    	mov    QWORD PTR [rsp-0x20],r14
  0141a:    	call   0xfffe9e77
  0141f:    	lea    r14,[rbp-0x8]
  01423:    	mov    QWORD PTR [rbx],r14
  01426:    	mov    r14,QWORD PTR [rbp-0x10]
  0142a:    	movq   xmm3,QWORD PTR [rsp]
  0142f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01435:    	add    rsp,0x10
  01439: 95 	movabs r13,0x55955e182940
  01443:    	test   rax,rax
  01446:    	je     0xfffe5318
  0144c:    	mov    QWORD PTR [r14-0x50],rax
:00085 
:00086 %1:.[%3:] = %4
  01450:    	mov    rdi,QWORD PTR [r14-0x38]
  01454:    	mov    rsi,QWORD PTR [r14-0x48]
  01458: 00 	test   rdi,0x7
  0145f:    	jne    0x2e2c9
  01465:    	cmp    DWORD PTR [rdi+0x4],0xb
  01469:    	jne    0x2e2c9
  0146f: 00 	test   rsi,0x1
  01476:    	je     0x2e2c9
  0147c:    	sar    rsi,1
  0147f:    	sub    rsp,0x10
  01483:    	movq   QWORD PTR [rsp],xmm3
  01488:    	movq   QWORD PTR [rsp+0x8],xmm4
  0148e:    	mov    rdx,r12
  01491:    	mov    rcx,QWORD PTR [r14-0x50]
  01495: 95 	movabs rax,0x55955d9ace90
  0149f:    	call   rax
  014a1:    	movq   xmm3,QWORD PTR [rsp]
  014a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014ac:    	add    rsp,0x10
  014b0: 95 	movabs r13,0x55955e182950
  014ba:    	test   rax,rax
  014bd:    	je     0xfffe5318
:00087 %3 = 1: i32
  014c3: 00 	mov    QWORD PTR [r14-0x48],0x3
:00088 %4 = 2: i32
  014cb: 00 	mov    QWORD PTR [r14-0x50],0x5
:00089 %4 = %1.[%4]                         [Array][Integer]
  014d3:    	mov    rdi,QWORD PTR [r14-0x38]
  014d7:    	mov    rsi,QWORD PTR [r14-0x50]
  014db: 00 	test   rdi,0x7
  014e2:    	jne    0x2e2d8
  014e8:    	cmp    DWORD PTR [rdi+0x4],0xb
  014ec:    	jne    0x2e2d8
  014f2: 00 	test   rsi,0x1
  014f9:    	je     0x2e2d8
  014ff:    	sar    rsi,1
  01502:    	sub    rsp,0x10
  01506:    	movq   QWORD PTR [rsp],xmm3
  0150b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01511: 95 	movabs rax,0x55955d9acd00
  0151b:    	call   rax
  0151d:    	movq   xmm3,QWORD PTR [rsp]
  01522:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01528:    	add    rsp,0x10
  0152c: 95 	movabs r13,0x55955e182980
  01536:    	test   rax,rax
  01539:    	je     0xfffe5318
  0153f:    	mov    QWORD PTR [r14-0x50],rax
:00090 %5 = 0: i32
  01543: 00 	mov    QWORD PTR [r14-0x58],0x1
:00091 %5 = %1.[%5]                         [Array][Integer]
  0154b:    	mov    rdi,QWORD PTR [r14-0x38]
  0154f:    	mov    rsi,QWORD PTR [r14-0x58]
  01553: 00 	test   rdi,0x7
  0155a:    	jne    0x2e2e7
  01560:    	cmp    DWORD PTR [rdi+0x4],0xb
  01564:    	jne    0x2e2e7
  0156a: 00 	test   rsi,0x1
  01571:    	je     0x2e2e7
  01577:    	sar    rsi,1
  0157a:    	sub    rsp,0x10
  0157e:    	movq   QWORD PTR [rsp],xmm3
  01583:    	movq   QWORD PTR [rsp+0x8],xmm4
  01589: 95 	movabs rax,0x55955d9acd00
  01593:    	call   rax
  01595:    	movq   xmm3,QWORD PTR [rsp]
  0159a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015a0:    	add    rsp,0x10
  015a4: 95 	movabs r13,0x55955e1829a0
  015ae:    	test   rax,rax
  015b1:    	je     0xfffe5318
  015b7:    	mov    QWORD PTR [r14-0x58],rax
:00092 %4 = %4.call vcross(%5; 1)           [Vec]
  015bb:    	mov    rdi,QWORD PTR [r14-0x50]
  015bf: 00 	test   rdi,0x7
  015c6:    	jne    0x2e2f6
  015cc:    	cmp    DWORD PTR [rdi+0x4],0x2b
  015d0:    	jne    0x2e2f6
  015d6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7fd2],0x26        # 0xfffe95af
  015dd:    	jne    0x2e2f6
  015e3:    	sub    rsp,0x10
  015e7:    	movq   QWORD PTR [rsp],xmm3
  015ec:    	movq   QWORD PTR [rsp+0x8],xmm4
  015f2: 00 	cmp    DWORD PTR [rip+0xfffffffffffe7fba],0x0        # 0xfffe95b3
  015f9:    	je     0x1611
  015ff:    	mov    rdi,r12
  01602:    	mov    rsi,QWORD PTR [rbx]
  01605: 95 	movabs rax,0x55955d9a3d50
  0160f:    	call   rax
  01611: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0161a:    	mov    rax,QWORD PTR [r14-0x50]
  0161e:    	mov    QWORD PTR [rsp-0x40],rax
  01623: 00 	mov    rdi,0x1
  0162a:    	mov    rax,QWORD PTR [r14-0x58]
  0162e:    	mov    QWORD PTR [rsp-0x48],rax
  01633: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0163c: 08 	movabs rax,0x100080000005c
  01646:    	mov    QWORD PTR [rsp-0x30],rax
  0164b: 95 	movabs r13,0x55955e137470
  01655:    	mov    rsi,QWORD PTR [rbx]
  01658:    	mov    QWORD PTR [rsp-0x18],rsi
  0165d:    	lea    rsi,[rsp-0x18]
  01662:    	mov    QWORD PTR [rbx],rsi
  01665:    	lea    r14,[rsp-0x10]
  0166a:    	mov    QWORD PTR [rsp-0x20],r14
  0166f:    	call   0xffff1f4b
  01674:    	lea    r14,[rbp-0x8]
  01678:    	mov    QWORD PTR [rbx],r14
  0167b:    	mov    r14,QWORD PTR [rbp-0x10]
  0167f:    	movq   xmm3,QWORD PTR [rsp]
  01684:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0168a:    	add    rsp,0x10
  0168e: 95 	movabs r13,0x55955e1829c0
  01698:    	test   rax,rax
  0169b:    	je     0xfffe5318
  016a1:    	mov    QWORD PTR [r14-0x50],rax
:00093 
:00094 %1:.[%3:] = %4
  016a5:    	mov    rdi,QWORD PTR [r14-0x38]
  016a9:    	mov    rsi,QWORD PTR [r14-0x48]
  016ad: 00 	test   rdi,0x7
  016b4:    	jne    0x2e305
  016ba:    	cmp    DWORD PTR [rdi+0x4],0xb
  016be:    	jne    0x2e305
  016c4: 00 	test   rsi,0x1
  016cb:    	je     0x2e305
  016d1:    	sar    rsi,1
  016d4:    	sub    rsp,0x10
  016d8:    	movq   QWORD PTR [rsp],xmm3
  016dd:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e3:    	mov    rdx,r12
  016e6:    	mov    rcx,QWORD PTR [r14-0x50]
  016ea: 95 	movabs rax,0x55955d9ace90
  016f4:    	call   rax
  016f6:    	movq   xmm3,QWORD PTR [rsp]
  016fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01701:    	add    rsp,0x10
  01705: 95 	movabs r13,0x55955e1829d0
  0170f:    	test   rax,rax
  01712:    	je     0xfffe5318
:00095 %3 = 1: i32
  01718: 00 	mov    QWORD PTR [r14-0x48],0x3
:00096 %4 = 1: i32
  01720: 00 	mov    QWORD PTR [r14-0x50],0x3
:00097 %4 = %1.[%4]                         [Array][Integer]
  01728:    	mov    rdi,QWORD PTR [r14-0x38]
  0172c:    	mov    rsi,QWORD PTR [r14-0x50]
  01730: 00 	test   rdi,0x7
  01737:    	jne    0x2e314
  0173d:    	cmp    DWORD PTR [rdi+0x4],0xb
  01741:    	jne    0x2e314
  01747: 00 	test   rsi,0x1
  0174e:    	je     0x2e314
  01754:    	sar    rsi,1
  01757:    	sub    rsp,0x10
  0175b:    	movq   QWORD PTR [rsp],xmm3
  01760:    	movq   QWORD PTR [rsp+0x8],xmm4
  01766: 95 	movabs rax,0x55955d9acd00
  01770:    	call   rax
  01772:    	movq   xmm3,QWORD PTR [rsp]
  01777:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0177d:    	add    rsp,0x10
  01781: 95 	movabs r13,0x55955e182a00
  0178b:    	test   rax,rax
  0178e:    	je     0xfffe5318
  01794:    	mov    QWORD PTR [r14-0x50],rax
:00098 %4 = %4.call vnormalize()            [Vec]
  01798:    	mov    rdi,QWORD PTR [r14-0x50]
  0179c: 00 	test   rdi,0x7
  017a3:    	jne    0x2e323
  017a9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  017ad:    	jne    0x2e323
  017b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7df5],0x26        # 0xfffe95af
  017ba:    	jne    0x2e323
  017c0:    	sub    rsp,0x10
  017c4:    	movq   QWORD PTR [rsp],xmm3
  017c9:    	movq   QWORD PTR [rsp+0x8],xmm4
  017cf: 00 	cmp    DWORD PTR [rip+0xfffffffffffe7ddd],0x0        # 0xfffe95b3
  017d6:    	je     0x17ee
  017dc:    	mov    rdi,r12
  017df:    	mov    rsi,QWORD PTR [rbx]
  017e2: 95 	movabs rax,0x55955d9a3d50
  017ec:    	call   rax
  017ee: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017f7:    	mov    rax,QWORD PTR [r14-0x50]
  017fb:    	mov    QWORD PTR [rsp-0x40],rax
  01800: 00 	mov    rdi,0x0
  01807: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01810: 07 	movabs rax,0x100070000005f
  0181a:    	mov    QWORD PTR [rsp-0x30],rax
  0181f: 95 	movabs r13,0x55955e168310
  01829:    	mov    rsi,QWORD PTR [rbx]
  0182c:    	mov    QWORD PTR [rsp-0x18],rsi
  01831:    	lea    rsi,[rsp-0x18]
  01836:    	mov    QWORD PTR [rbx],rsi
  01839:    	lea    r14,[rsp-0x10]
  0183e:    	mov    QWORD PTR [rsp-0x20],r14
  01843:    	call   0xfffe9e77
  01848:    	lea    r14,[rbp-0x8]
  0184c:    	mov    QWORD PTR [rbx],r14
  0184f:    	mov    r14,QWORD PTR [rbp-0x10]
  01853:    	movq   xmm3,QWORD PTR [rsp]
  01858:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0185e:    	add    rsp,0x10
  01862: 95 	movabs r13,0x55955e182a20
  0186c:    	test   rax,rax
  0186f:    	je     0xfffe5318
  01875:    	mov    QWORD PTR [r14-0x50],rax
:00099 
:00100 %1:.[%3:] = %4
  01879:    	mov    rdi,QWORD PTR [r14-0x38]
  0187d:    	mov    rsi,QWORD PTR [r14-0x48]
  01881: 00 	test   rdi,0x7
  01888:    	jne    0x2e332
  0188e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01892:    	jne    0x2e332
  01898: 00 	test   rsi,0x1
  0189f:    	je     0x2e332
  018a5:    	sar    rsi,1
  018a8:    	sub    rsp,0x10
  018ac:    	movq   QWORD PTR [rsp],xmm3
  018b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  018b7:    	mov    rdx,r12
  018ba:    	mov    rcx,QWORD PTR [r14-0x50]
  018be: 95 	movabs rax,0x55955d9ace90
  018c8:    	call   rax
  018ca:    	movq   xmm3,QWORD PTR [rsp]
  018cf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018d5:    	add    rsp,0x10
  018d9: 95 	movabs r13,0x55955e182a30
  018e3:    	test   rax,rax
  018e6:    	je     0xfffe5318
:00101 %3 = %4
  018ec:    	mov    rax,QWORD PTR [r14-0x50]
  018f0:    	mov    QWORD PTR [r14-0x48],rax
:00102 ret %3
  018f4:    	mov    rax,QWORD PTR [r14-0x48]
  018f8:    	leave  
  018f9:    	ret    
