==> start whole compile: initialize FuncId(62) self_class:Vec start:[00000] bytecode:0x564da0e63e50
<== finished compile. elapsed:8.8µs
offset:Pos(14737) code: 105 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x3
  0000e: jne    0x3cc67
  00014: mov    QWORD PTR [r14-0x50],0x4
  0001c: mov    rdi,QWORD PTR [rbp-0x30]
  00020: test   rdi,0x7
  00027: jne    0x3cc76
  0002d: cmp    DWORD PTR [rdi+0x4],0x28
  00031: jne    0x3cc76
:00000 init_method reg:5 arg:3 pos:3 req:3 block:0 stack_offset:6
:00001 @x: Vec[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [rbp-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [rbp-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  0004f: mov    rdi,QWORD PTR [rbp-0x30]
  00053: mov    rax,QWORD PTR [r14-0x48]
  00057: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  0005b: mov    rax,QWORD PTR [r14-0x48]
  0005f: mov    QWORD PTR [r14-0x50],rax
:00005 ret %4
  00063: mov    rax,QWORD PTR [r14-0x50]
  00067: leave  
  00068: ret    
==> start whole compile: vdot FuncId(66) self_class:Vec start:[00000] bytecode:0x564da0e78160
<== finished compile. elapsed:40.2µs
offset:Pos(16596) code: 1092 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jne    0x3c542
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    rdi,QWORD PTR [rbp-0x30]
  0002b: test   rdi,0x7
  00032: jne    0x3c551
  00038: cmp    DWORD PTR [rdi+0x4],0x28
  0003c: jne    0x3c551
:00000 init_method reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %2 = @x: Vec[IvarId(0)]
  00042: mov    rdi,QWORD PTR [rbp-0x30]
  00046: mov    rax,QWORD PTR [rdi+0x10]
  0004a: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = %1.call x()                     [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x38]
  00052: test   rdi,0x7
  00059: jne    0x3c560
  0005f: cmp    DWORD PTR [rdi+0x4],0x28
  00063: jne    0x3c560
  00069: cmp    DWORD PTR [rip+0xfffffffffffff275],0x26        # 0xfffff2e5
  00070: jne    0x3c560
  00076: mov    esi,DWORD PTR [rip+0x3cc]        # 0x448
  0007c: cmp    esi,0xffffffff
  0007f: je     0x3c56f
  00085: cmp    WORD PTR [rdi+0x2],0x3
  0008a: jne    0xa3
  00090: cmp    esi,0x6
  00093: jge    0xa3
  00099: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009e: jmp    0xaf
  000a3: movabs rax,0x564da0797d70
  000ad: call   rax
  000af: mov    QWORD PTR [r14-0x48],rax
:00003 
:00005 %2 = %2 * %3                         [Float][Float]
  000b3: mov    rdi,QWORD PTR [r14-0x40]
  000b7: test   rdi,0x1
  000be: jne    0x3c598
  000c4: test   rdi,0x2
  000cb: je     0x107
  000d1: xorps  xmm2,xmm2
  000d4: movabs rax,0x8000000000000002
  000de: cmp    rdi,rax
  000e1: je     0x119
  000e7: mov    rax,rdi
  000ea: sar    rax,0x3f
  000ee: add    rax,0x2
  000f2: and    rdi,0xfffffffffffffffc
  000f6: or     rdi,rax
  000f9: rol    rdi,0x3d
  000fd: movq   xmm2,rdi
  00102: jmp    0x119
  00107: call   0xffffbfb8
  0010c: test   rax,rax
  0010f: je     0x3c598
  00115: movq   xmm2,xmm0
  00119: mov    rdi,QWORD PTR [r14-0x48]
  0011d: test   rdi,0x1
  00124: jne    0x3c5a7
  0012a: test   rdi,0x2
  00131: je     0x16d
  00137: xorps  xmm3,xmm3
  0013a: movabs rax,0x8000000000000002
  00144: cmp    rdi,rax
  00147: je     0x17f
  0014d: mov    rax,rdi
  00150: sar    rax,0x3f
  00154: add    rax,0x2
  00158: and    rdi,0xfffffffffffffffc
  0015c: or     rdi,rax
  0015f: rol    rdi,0x3d
  00163: movq   xmm3,rdi
  00168: jmp    0x17f
  0016d: call   0xffffbfb8
  00172: test   rax,rax
  00175: je     0x3c5a7
  0017b: movq   xmm3,xmm0
  0017f: mulsd  xmm2,xmm3
:00006 %3 = @y: Vec[IvarId(1)]
  00183: mov    rdi,QWORD PTR [rbp-0x30]
  00187: mov    rax,QWORD PTR [rdi+0x18]
  0018b: mov    QWORD PTR [r14-0x48],rax
:00007 %4 = %1.call y()                     [Vec]
  0018f: mov    rdi,QWORD PTR [r14-0x38]
  00193: test   rdi,0x7
  0019a: jne    0x3c5b6
  001a0: cmp    DWORD PTR [rdi+0x4],0x28
  001a4: jne    0x3c5b6
  001aa: cmp    DWORD PTR [rip+0xfffffffffffff134],0x26        # 0xfffff2e5
  001b1: jne    0x3c5b6
  001b7: mov    esi,DWORD PTR [rip+0x293]        # 0x450
  001bd: cmp    esi,0xffffffff
  001c0: je     0x3c5d2
  001c6: cmp    WORD PTR [rdi+0x2],0x3
  001cb: jne    0x1e4
  001d1: cmp    esi,0x6
  001d4: jge    0x1e4
  001da: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001df: jmp    0x202
  001e4: sub    rsp,0x10
  001e8: movq   QWORD PTR [rsp],xmm2
  001ed: movabs rax,0x564da0797d70
  001f7: call   rax
  001f9: movq   xmm2,QWORD PTR [rsp]
  001fe: add    rsp,0x10
  00202: mov    QWORD PTR [r14-0x50],rax
:00008 
:00010 %3 = %3 * %4                         [Float][Float]
  00206: mov    rdi,QWORD PTR [r14-0x48]
  0020a: test   rdi,0x1
  00211: jne    0x3c60d
  00217: test   rdi,0x2
  0021e: je     0x25a
  00224: xorps  xmm3,xmm3
  00227: movabs rax,0x8000000000000002
  00231: cmp    rdi,rax
  00234: je     0x26c
  0023a: mov    rax,rdi
  0023d: sar    rax,0x3f
  00241: add    rax,0x2
  00245: and    rdi,0xfffffffffffffffc
  00249: or     rdi,rax
  0024c: rol    rdi,0x3d
  00250: movq   xmm3,rdi
  00255: jmp    0x26c
  0025a: call   0xffffbfb8
  0025f: test   rax,rax
  00262: je     0x3c60d
  00268: movq   xmm3,xmm0
  0026c: mov    rdi,QWORD PTR [r14-0x50]
  00270: test   rdi,0x1
  00277: jne    0x3c629
  0027d: test   rdi,0x2
  00284: je     0x2c0
  0028a: xorps  xmm4,xmm4
  0028d: movabs rax,0x8000000000000002
  00297: cmp    rdi,rax
  0029a: je     0x2d2
  002a0: mov    rax,rdi
  002a3: sar    rax,0x3f
  002a7: add    rax,0x2
  002ab: and    rdi,0xfffffffffffffffc
  002af: or     rdi,rax
  002b2: rol    rdi,0x3d
  002b6: movq   xmm4,rdi
  002bb: jmp    0x2d2
  002c0: call   0xffffbfb8
  002c5: test   rax,rax
  002c8: je     0x3c629
  002ce: movq   xmm4,xmm0
  002d2: mulsd  xmm3,xmm4
:00011 %2 = %2 + %3                         [Float][Float]
  002d6: addsd  xmm2,xmm3
:00012 %3 = @z: Vec[IvarId(2)]
  002da: mov    rdi,QWORD PTR [rbp-0x30]
  002de: mov    rax,QWORD PTR [rdi+0x20]
  002e2: mov    QWORD PTR [r14-0x48],rax
:00013 %4 = %1.call z()                     [Vec]
  002e6: mov    rdi,QWORD PTR [r14-0x38]
  002ea: test   rdi,0x7
  002f1: jne    0x3c645
  002f7: cmp    DWORD PTR [rdi+0x4],0x28
  002fb: jne    0x3c645
  00301: cmp    DWORD PTR [rip+0xffffffffffffefdd],0x26        # 0xfffff2e5
  00308: jne    0x3c645
  0030e: mov    esi,DWORD PTR [rip+0x144]        # 0x458
  00314: cmp    esi,0xffffffff
  00317: je     0x3c661
  0031d: cmp    WORD PTR [rdi+0x2],0x3
  00322: jne    0x33b
  00328: cmp    esi,0x6
  0032b: jge    0x33b
  00331: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00336: jmp    0x359
  0033b: sub    rsp,0x10
  0033f: movq   QWORD PTR [rsp],xmm2
  00344: movabs rax,0x564da0797d70
  0034e: call   rax
  00350: movq   xmm2,QWORD PTR [rsp]
  00355: add    rsp,0x10
  00359: mov    QWORD PTR [r14-0x50],rax
:00014 
:00016 %3 = %3 * %4                         [Float][Float]
  0035d: mov    rdi,QWORD PTR [r14-0x48]
  00361: test   rdi,0x1
  00368: jne    0x3c69c
  0036e: test   rdi,0x2
  00375: je     0x3b1
  0037b: xorps  xmm3,xmm3
  0037e: movabs rax,0x8000000000000002
  00388: cmp    rdi,rax
  0038b: je     0x3c3
  00391: mov    rax,rdi
  00394: sar    rax,0x3f
  00398: add    rax,0x2
  0039c: and    rdi,0xfffffffffffffffc
  003a0: or     rdi,rax
  003a3: rol    rdi,0x3d
  003a7: movq   xmm3,rdi
  003ac: jmp    0x3c3
  003b1: call   0xffffbfb8
  003b6: test   rax,rax
  003b9: je     0x3c69c
  003bf: movq   xmm3,xmm0
  003c3: mov    rdi,QWORD PTR [r14-0x50]
  003c7: test   rdi,0x1
  003ce: jne    0x3c6b8
  003d4: test   rdi,0x2
  003db: je     0x417
  003e1: xorps  xmm4,xmm4
  003e4: movabs rax,0x8000000000000002
  003ee: cmp    rdi,rax
  003f1: je     0x429
  003f7: mov    rax,rdi
  003fa: sar    rax,0x3f
  003fe: add    rax,0x2
  00402: and    rdi,0xfffffffffffffffc
  00406: or     rdi,rax
  00409: rol    rdi,0x3d
  0040d: movq   xmm4,rdi
  00412: jmp    0x429
  00417: call   0xffffbfb8
  0041c: test   rax,rax
  0041f: je     0x3c6b8
  00425: movq   xmm4,xmm0
  00429: mulsd  xmm3,xmm4
:00017 %2 = %2 + %3                         [Float][Float]
  0042d: addsd  xmm2,xmm3
:00018 ret %2
  00431: movq   xmm0,xmm2
  00435: call   0xffffc0dc
  0043a: mov    QWORD PTR [r14-0x40],rax
  0043e: mov    rax,QWORD PTR [r14-0x40]
  00442: leave  
  00443: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x564da0e8bc90
<== finished compile. elapsed:446.4µs
offset:Pos(17854) code: 7341 bytes  data: 109 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3c1ea
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x3c1f9
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x3c1f9
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x3c208
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x3c208
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffffed5d],0x26        # 0xffffedfb
  0009e:    	jne    0x3c208
  000a4:    	mov    esi,DWORD PTR [rip+0x1c07]        # 0x1cb1
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x3c217
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: 4d 	movabs rax,0x564da0797d70
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x3c240
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x3c240
  00108: 26 	cmp    DWORD PTR [rip+0xffffffffffffecec],0x26        # 0xffffedfb
  0010f:    	jne    0x3c240
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	mov    rax,QWORD PTR [r14-0x80]
  00132:    	mov    QWORD PTR [rsp-0x48],rax
  00137: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00140: 08 	movabs rax,0x800000040
  0014a:    	mov    QWORD PTR [rsp-0x30],rax
  0014f: 4d 	movabs r13,0x564da0ed55e0
  00159:    	mov    rsi,QWORD PTR [rbx]
  0015c:    	mov    QWORD PTR [rsp-0x18],rsi
  00161:    	lea    rsi,[rsp-0x18]
  00166:    	mov    QWORD PTR [rbx],rsi
  00169:    	lea    r14,[rsp-0x10]
  0016e:    	mov    QWORD PTR [rsp-0x20],r14
  00173:    	call   0xfffffa34
  00178:    	lea    r14,[rbp-0x8]
  0017c:    	mov    QWORD PTR [rbx],r14
  0017f:    	mov    r14,QWORD PTR [rbp-0x10]
  00183: 4d 	movabs r13,0x564da0e8bd00
  0018d:    	test   rax,rax
  00190:    	je     0xffffba75
  00196:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  0019a:    	mov    rdi,QWORD PTR [r14-0x38]
  0019e: 00 	test   rdi,0x7
  001a5:    	jne    0x3c24f
  001ab:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001af:    	jne    0x3c24f
  001b5: 26 	cmp    DWORD PTR [rip+0xffffffffffffec3f],0x26        # 0xffffedfb
  001bc:    	jne    0x3c24f
  001c2:    	mov    esi,DWORD PTR [rip+0x1af1]        # 0x1cb9
  001c8:    	cmp    esi,0xffffffff
  001cb:    	je     0x3c25e
  001d1:    	cmp    WORD PTR [rdi+0x2],0x3
  001d6:    	jne    0x1ef
  001dc:    	cmp    esi,0x6
  001df:    	jge    0x1ef
  001e5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ea:    	jmp    0x1fb
  001ef: 4d 	movabs rax,0x564da0797d70
  001f9:    	call   rax
  001fb:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  001ff:    	mov    rdi,QWORD PTR [r14-0x48]
  00203: 00 	test   rdi,0x7
  0020a:    	jne    0x3c287
  00210:    	cmp    DWORD PTR [rdi+0x4],0x28
  00214:    	jne    0x3c287
  0021a: 26 	cmp    DWORD PTR [rip+0xffffffffffffebda],0x26        # 0xffffedfb
  00221:    	jne    0x3c287
  00227: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00230:    	mov    rax,QWORD PTR [r14-0x48]
  00234:    	mov    QWORD PTR [rsp-0x40],rax
  00239: 00 	mov    rdi,0x1
  00240:    	mov    rax,QWORD PTR [r14-0x78]
  00244:    	mov    QWORD PTR [rsp-0x48],rax
  00249: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00252: 05 	movabs rax,0x500000042
  0025c:    	mov    QWORD PTR [rsp-0x30],rax
  00261: 4d 	movabs r13,0x564da0e78160
  0026b:    	mov    rsi,QWORD PTR [rbx]
  0026e:    	mov    QWORD PTR [rsp-0x18],rsi
  00273:    	lea    rsi,[rsp-0x18]
  00278:    	mov    QWORD PTR [rbx],rsi
  0027b:    	lea    r14,[rsp-0x10]
  00280:    	mov    QWORD PTR [rsp-0x20],r14
  00285:    	call   0xfffffac2
  0028a:    	lea    r14,[rbp-0x8]
  0028e:    	mov    QWORD PTR [rbx],r14
  00291:    	mov    r14,QWORD PTR [rbp-0x10]
  00295: 4d 	movabs r13,0x564da0e8bd60
  0029f:    	test   rax,rax
  002a2:    	je     0xffffba75
  002a8:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ac:    	mov    rax,QWORD PTR [r14-0x48]
  002b0:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b4:    	mov    rdi,QWORD PTR [r14-0x48]
  002b8: 00 	test   rdi,0x7
  002bf:    	jne    0x3c296
  002c5:    	cmp    DWORD PTR [rdi+0x4],0x28
  002c9:    	jne    0x3c296
  002cf: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb25],0x26        # 0xffffedfb
  002d6:    	jne    0x3c296
  002dc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002e5:    	mov    rax,QWORD PTR [r14-0x48]
  002e9:    	mov    QWORD PTR [rsp-0x40],rax
  002ee: 00 	mov    rdi,0x1
  002f5:    	mov    rax,QWORD PTR [r14-0x80]
  002f9:    	mov    QWORD PTR [rsp-0x48],rax
  002fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00307: 05 	movabs rax,0x500000042
  00311:    	mov    QWORD PTR [rsp-0x30],rax
  00316: 4d 	movabs r13,0x564da0e78160
  00320:    	mov    rsi,QWORD PTR [rbx]
  00323:    	mov    QWORD PTR [rsp-0x18],rsi
  00328:    	lea    rsi,[rsp-0x18]
  0032d:    	mov    QWORD PTR [rbx],rsi
  00330:    	lea    r14,[rsp-0x10]
  00335:    	mov    QWORD PTR [rsp-0x20],r14
  0033a:    	call   0xfffffac2
  0033f:    	lea    r14,[rbp-0x8]
  00343:    	mov    QWORD PTR [rbx],r14
  00346:    	mov    r14,QWORD PTR [rbp-0x10]
  0034a: 4d 	movabs r13,0x564da0e8bda0
  00354:    	test   rax,rax
  00357:    	je     0xffffba75
  0035d:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00361:    	mov    rdi,QWORD PTR [rbp-0x30]
  00365:    	mov    rax,QWORD PTR [rdi+0x18]
  00369:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  0036d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00371:    	mov    rax,QWORD PTR [rdi+0x18]
  00375: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  0037c:    	mov    rdi,QWORD PTR [r14-0x80]
  00380: 00 	test   rdi,0x1
  00387:    	jne    0x3c2a5
  0038d: 00 	test   rdi,0x2
  00394:    	je     0x3d0
  0039a:    	xorps  xmm2,xmm2
  0039d: 00 	movabs rax,0x8000000000000002
  003a7:    	cmp    rdi,rax
  003aa:    	je     0x3e2
  003b0:    	mov    rax,rdi
  003b3:    	sar    rax,0x3f
  003b7:    	add    rax,0x2
  003bb:    	and    rdi,0xfffffffffffffffc
  003bf:    	or     rdi,rax
  003c2:    	rol    rdi,0x3d
  003c6:    	movq   xmm2,rdi
  003cb:    	jmp    0x3e2
  003d0:    	call   0xffffbace
  003d5:    	test   rax,rax
  003d8:    	je     0x3c2a5
  003de:    	movq   xmm2,xmm0
  003e2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003e9: 00 	test   rdi,0x1
  003f0:    	jne    0x3c2b4
  003f6: 00 	test   rdi,0x2
  003fd:    	je     0x439
  00403:    	xorps  xmm3,xmm3
  00406: 00 	movabs rax,0x8000000000000002
  00410:    	cmp    rdi,rax
  00413:    	je     0x44b
  00419:    	mov    rax,rdi
  0041c:    	sar    rax,0x3f
  00420:    	add    rax,0x2
  00424:    	and    rdi,0xfffffffffffffffc
  00428:    	or     rdi,rax
  0042b:    	rol    rdi,0x3d
  0042f:    	movq   xmm3,rdi
  00434:    	jmp    0x44b
  00439:    	call   0xffffbace
  0043e:    	test   rax,rax
  00441:    	je     0x3c2b4
  00447:    	movq   xmm3,xmm0
  0044b:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  0044f:    	mov    rdi,QWORD PTR [r14-0x78]
  00453: 00 	test   rdi,0x1
  0045a:    	jne    0x3c2c3
  00460: 00 	test   rdi,0x2
  00467:    	je     0x4a3
  0046d:    	xorps  xmm4,xmm4
  00470: 00 	movabs rax,0x8000000000000002
  0047a:    	cmp    rdi,rax
  0047d:    	je     0x4b5
  00483:    	mov    rax,rdi
  00486:    	sar    rax,0x3f
  0048a:    	add    rax,0x2
  0048e:    	and    rdi,0xfffffffffffffffc
  00492:    	or     rdi,rax
  00495:    	rol    rdi,0x3d
  00499:    	movq   xmm4,rdi
  0049e:    	jmp    0x4b5
  004a3:    	call   0xffffbace
  004a8:    	test   rax,rax
  004ab:    	je     0x3c2c3
  004b1:    	movq   xmm4,xmm0
  004b5:    	movq   xmm5,xmm4
  004b9:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004bd:    	mov    rdi,QWORD PTR [r14-0x50]
  004c1: 00 	test   rdi,0x1
  004c8:    	jne    0x3c2df
  004ce: 00 	test   rdi,0x2
  004d5:    	je     0x511
  004db:    	xorps  xmm6,xmm6
  004de: 00 	movabs rax,0x8000000000000002
  004e8:    	cmp    rdi,rax
  004eb:    	je     0x523
  004f1:    	mov    rax,rdi
  004f4:    	sar    rax,0x3f
  004f8:    	add    rax,0x2
  004fc:    	and    rdi,0xfffffffffffffffc
  00500:    	or     rdi,rax
  00503:    	rol    rdi,0x3d
  00507:    	movq   xmm6,rdi
  0050c:    	jmp    0x523
  00511:    	call   0xffffbace
  00516:    	test   rax,rax
  00519:    	je     0x3c2df
  0051f:    	movq   xmm6,xmm0
  00523:    	movq   xmm4,xmm6
  00527:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0052b:    	movq   xmm7,xmm4
  0052f:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00533: 00 	movq   xmm4,QWORD PTR [rip+0x1787]        # 0x1cc2
  0053b: 00 	movabs rax,0x8000000000000002
  00545:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  00549:    	ucomisd xmm7,xmm4
  0054d:    	jbe    0x3cd38
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00553: 00 	cmp    DWORD PTR [rip+0x1770],0x0        # 0x1cca
  0055a:    	jl     0x3c308
  00560:    	je     0x3c34b
  00566: 01 	sub    DWORD PTR [rip+0x175d],0x1        # 0x1cca
  0056d:    	xor    rdi,rdi
  00570:    	jmp    0x3c308
  00575:    	movq   xmm0,xmm6
  00579:    	call   0xffffbbf2
  0057e:    	mov    QWORD PTR [r14-0x78],rax
  00582:    	sub    rsp,0x30
  00586:    	movq   QWORD PTR [rsp],xmm2
  0058b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00591:    	movq   QWORD PTR [rsp+0x10],xmm5
  00597:    	movq   QWORD PTR [rsp+0x18],xmm6
  0059d:    	movq   QWORD PTR [rsp+0x20],xmm7
  005a3:    	mov    rdi,QWORD PTR [r14-0x78]
  005a7:    	mov    rdx,rdi
  005aa:    	mov    rdi,rbx
  005ad:    	mov    rsi,r12
  005b0: 4d 	movabs rax,0x564da07d8d00
  005ba:    	call   rax
  005bc:    	movq   xmm2,QWORD PTR [rsp]
  005c1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005cd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005d3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005d9:    	add    rsp,0x30
  005dd: 4d 	movabs r13,0x564da0e8be60
  005e7:    	test   rax,rax
  005ea:    	je     0xffffba75
  005f0:    	mov    QWORD PTR [r14-0x78],rax
:00029 %11 = const[Math]                    [<INVALID>]
  005f4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe807]        # 0xffffee02
  005fb: 00 	cmp    rax,QWORD PTR [rip+0x16e0]        # 0x1ce2
  00602:    	jne    0x3c366
  00608: 00 	mov    rax,QWORD PTR [rip+0x16c3]        # 0x1cd2
  0060f: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  00616:    	movq   xmm0,xmm7
  0061a:    	call   0xffffbbf2
  0061f: ff 	mov    QWORD PTR [r14-0x90],rax
  00626:    	sub    rsp,0x20
  0062a:    	movq   QWORD PTR [rsp],xmm5
  0062f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00635:    	movq   QWORD PTR [rsp+0x10],xmm7
  0063b: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00642: 4d 	movabs rax,0x564da0826bb0
  0064c:    	call   rax
  0064e:    	mov    r15d,eax
  00651: 4d 	movabs r13,0x564da0e8be90
  0065b:    	cmp    QWORD PTR [r13+0x8],0x0
  00660:    	je     0x3c3e2
  00666:    	cmp    r15d,DWORD PTR [r13-0x8]
  0066a:    	jne    0x3c3e2
  00670:    	mov    eax,DWORD PTR [rip+0xffffffffffffe785]        # 0xffffedfb
  00676:    	cmp    DWORD PTR [r13-0x4],eax
  0067a:    	jne    0x3c3e2
  00680: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00689: ff 	mov    rax,QWORD PTR [r14-0x88]
  00690:    	mov    QWORD PTR [rsp-0x40],rax
  00695: 00 	mov    rdi,0x1
  0069c: ff 	mov    rax,QWORD PTR [r14-0x90]
  006a3:    	mov    QWORD PTR [rsp-0x48],rax
  006a8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006b1:    	mov    rax,QWORD PTR [r13+0x10]
  006b5:    	mov    QWORD PTR [rsp-0x30],rax
  006ba:    	mov    rax,QWORD PTR [r13+0x8]
  006be:    	mov    r13,QWORD PTR [r13+0x18]
  006c2:    	mov    rsi,QWORD PTR [rbx]
  006c5:    	mov    QWORD PTR [rsp-0x18],rsi
  006ca:    	lea    rsi,[rsp-0x18]
  006cf:    	mov    QWORD PTR [rbx],rsi
  006d2:    	lea    r14,[rsp-0x10]
  006d7:    	mov    QWORD PTR [rsp-0x20],r14
  006dc:    	call   rax
  006de:    	lea    r14,[rbp-0x8]
  006e2:    	mov    QWORD PTR [rbx],r14
  006e5:    	mov    r14,QWORD PTR [rbp-0x10]
  006e9:    	movq   xmm5,QWORD PTR [rsp]
  006ee:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006f4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006fa:    	add    rsp,0x20
  006fe:    	test   rax,rax
  00701:    	je     0x3c42f
  00707:    	mov    QWORD PTR [r14-0x80],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  0070b:    	mov    rdi,QWORD PTR [r14-0x78]
  0070f:    	mov    rsi,QWORD PTR [r14-0x80]
  00713:    	sub    rsp,0x20
  00717:    	movq   QWORD PTR [rsp],xmm5
  0071c:    	movq   QWORD PTR [rsp+0x8],xmm6
  00722:    	movq   QWORD PTR [rsp+0x10],xmm7
  00728:    	mov    rdx,rdi
  0072b:    	mov    rcx,rsi
  0072e:    	mov    rdi,rbx
  00731:    	mov    rsi,r12
  00734: 4d 	movabs rax,0x564da07db070
  0073e:    	call   rax
  00740:    	movq   xmm5,QWORD PTR [rsp]
  00745:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0074b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00751:    	add    rsp,0x20
  00755: 4d 	movabs r13,0x564da0e8bec0
  0075f:    	test   rax,rax
  00762:    	je     0xffffba75
  00768:    	mov    QWORD PTR [r14-0x68],rax
:00035 %9 = literal[0.0]
  0076c: 00 	movq   xmm2,QWORD PTR [rip+0x157e]        # 0x1cf2
  00774: 00 	movabs rax,0x8000000000000002
  0077e:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00782:    	mov    rdi,QWORD PTR [r14-0x68]
  00786:    	mov    rsi,QWORD PTR [r14-0x78]
  0078a: 00 	test   rdi,0x1
  00791:    	je     0x3c43e
  00797: 00 	test   rsi,0x1
  0079e:    	je     0x3c43e
  007a4:    	cmp    rdi,rsi
  007a7:    	jle    0x3cc9f
:00038 %9 = %2.call t()                     [<INVALID>]
  007ad:    	sub    rsp,0x20
  007b1:    	movq   QWORD PTR [rsp],xmm5
  007b6:    	movq   QWORD PTR [rsp+0x8],xmm6
  007bc:    	movq   QWORD PTR [rsp+0x10],xmm7
  007c2:    	mov    rdi,QWORD PTR [r14-0x40]
  007c6: 4d 	movabs rax,0x564da0826bb0
  007d0:    	call   rax
  007d2:    	mov    r15d,eax
  007d5: 4d 	movabs r13,0x564da0e8bf00
  007df:    	cmp    QWORD PTR [r13+0x8],0x0
  007e4:    	je     0x3c487
  007ea:    	cmp    r15d,DWORD PTR [r13-0x8]
  007ee:    	jne    0x3c487
  007f4:    	mov    eax,DWORD PTR [rip+0xffffffffffffe601]        # 0xffffedfb
  007fa:    	cmp    DWORD PTR [r13-0x4],eax
  007fe:    	jne    0x3c487
  00804: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0080d:    	mov    rax,QWORD PTR [r14-0x40]
  00811:    	mov    QWORD PTR [rsp-0x40],rax
  00816: 00 	mov    rdi,0x0
  0081d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00826:    	mov    rax,QWORD PTR [r13+0x10]
  0082a:    	mov    QWORD PTR [rsp-0x30],rax
  0082f:    	mov    rax,QWORD PTR [r13+0x8]
  00833:    	mov    r13,QWORD PTR [r13+0x18]
  00837:    	mov    rsi,QWORD PTR [rbx]
  0083a:    	mov    QWORD PTR [rsp-0x18],rsi
  0083f:    	lea    rsi,[rsp-0x18]
  00844:    	mov    QWORD PTR [rbx],rsi
  00847:    	lea    r14,[rsp-0x10]
  0084c:    	mov    QWORD PTR [rsp-0x20],r14
  00851:    	call   rax
  00853:    	lea    r14,[rbp-0x8]
  00857:    	mov    QWORD PTR [rbx],r14
  0085a:    	mov    r14,QWORD PTR [rbp-0x10]
  0085e:    	movq   xmm5,QWORD PTR [rsp]
  00863:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00869:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0086f:    	add    rsp,0x20
  00873:    	test   rax,rax
  00876:    	je     0x3c4d1
  0087c:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  00880:    	mov    rdi,QWORD PTR [r14-0x68]
  00884:    	mov    rsi,QWORD PTR [r14-0x78]
  00888: 00 	test   rdi,0x1
  0088f:    	je     0x3c4e0
  00895: 00 	test   rsi,0x1
  0089c:    	je     0x3c4e0
  008a2:    	cmp    rdi,rsi
  008a5:    	jge    0x3ccd2
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  008ab:    	sub    rsp,0x20
  008af:    	movq   QWORD PTR [rsp],xmm5
  008b4:    	movq   QWORD PTR [rsp+0x8],xmm6
  008ba:    	movq   QWORD PTR [rsp+0x10],xmm7
  008c0:    	mov    rdi,QWORD PTR [r14-0x40]
  008c4: 4d 	movabs rax,0x564da0826bb0
  008ce:    	call   rax
  008d0:    	mov    r15d,eax
  008d3: 4d 	movabs r13,0x564da0e8bf50
  008dd:    	cmp    QWORD PTR [r13+0x8],0x0
  008e2:    	je     0x3c529
  008e8:    	cmp    r15d,DWORD PTR [r13-0x8]
  008ec:    	jne    0x3c529
  008f2:    	mov    eax,DWORD PTR [rip+0xffffffffffffe503]        # 0xffffedfb
  008f8:    	cmp    DWORD PTR [r13-0x4],eax
  008fc:    	jne    0x3c529
  00902: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0090b:    	mov    rax,QWORD PTR [r14-0x40]
  0090f:    	mov    QWORD PTR [rsp-0x40],rax
  00914: 00 	mov    rdi,0x1
  0091b:    	mov    rax,QWORD PTR [r14-0x68]
  0091f:    	mov    QWORD PTR [rsp-0x48],rax
  00924: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0092d:    	mov    rax,QWORD PTR [r13+0x10]
  00931:    	mov    QWORD PTR [rsp-0x30],rax
  00936:    	mov    rax,QWORD PTR [r13+0x8]
  0093a:    	mov    r13,QWORD PTR [r13+0x18]
  0093e:    	mov    rsi,QWORD PTR [rbx]
  00941:    	mov    QWORD PTR [rsp-0x18],rsi
  00946:    	lea    rsi,[rsp-0x18]
  0094b:    	mov    QWORD PTR [rbx],rsi
  0094e:    	lea    r14,[rsp-0x10]
  00953:    	mov    QWORD PTR [rsp-0x20],r14
  00958:    	call   rax
  0095a:    	lea    r14,[rbp-0x8]
  0095e:    	mov    QWORD PTR [rbx],r14
  00961:    	mov    r14,QWORD PTR [rbp-0x10]
  00965:    	movq   xmm5,QWORD PTR [rsp]
  0096a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00970:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00976:    	add    rsp,0x20
  0097a:    	test   rax,rax
  0097d:    	je     0x3c573
:00044 
:00046 %9 = literal[true]
  00983: 00 	mov    rax,0x1c
  0098a:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  0098e:    	sub    rsp,0x20
  00992:    	movq   QWORD PTR [rsp],xmm5
  00997:    	movq   QWORD PTR [rsp+0x8],xmm6
  0099d:    	movq   QWORD PTR [rsp+0x10],xmm7
  009a3:    	mov    rdi,QWORD PTR [r14-0x40]
  009a7: 4d 	movabs rax,0x564da0826bb0
  009b1:    	call   rax
  009b3:    	mov    r15d,eax
  009b6: 4d 	movabs r13,0x564da0e8bf90
  009c0:    	cmp    QWORD PTR [r13+0x8],0x0
  009c5:    	je     0x3c582
  009cb:    	cmp    r15d,DWORD PTR [r13-0x8]
  009cf:    	jne    0x3c582
  009d5:    	mov    eax,DWORD PTR [rip+0xffffffffffffe420]        # 0xffffedfb
  009db:    	cmp    DWORD PTR [r13-0x4],eax
  009df:    	jne    0x3c582
  009e5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009ee:    	mov    rax,QWORD PTR [r14-0x40]
  009f2:    	mov    QWORD PTR [rsp-0x40],rax
  009f7: 00 	mov    rdi,0x1
  009fe:    	mov    rax,QWORD PTR [r14-0x78]
  00a02:    	mov    QWORD PTR [rsp-0x48],rax
  00a07: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a10:    	mov    rax,QWORD PTR [r13+0x10]
  00a14:    	mov    QWORD PTR [rsp-0x30],rax
  00a19:    	mov    rax,QWORD PTR [r13+0x8]
  00a1d:    	mov    r13,QWORD PTR [r13+0x18]
  00a21:    	mov    rsi,QWORD PTR [rbx]
  00a24:    	mov    QWORD PTR [rsp-0x18],rsi
  00a29:    	lea    rsi,[rsp-0x18]
  00a2e:    	mov    QWORD PTR [rbx],rsi
  00a31:    	lea    r14,[rsp-0x10]
  00a36:    	mov    QWORD PTR [rsp-0x20],r14
  00a3b:    	call   rax
  00a3d:    	lea    r14,[rbp-0x8]
  00a41:    	mov    QWORD PTR [rbx],r14
  00a44:    	mov    r14,QWORD PTR [rbp-0x10]
  00a48:    	movq   xmm5,QWORD PTR [rsp]
  00a4d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a53:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a59:    	add    rsp,0x20
  00a5d:    	test   rax,rax
  00a60:    	je     0x3c5cc
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a66: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe395]        # 0xffffee02
  00a6d: 00 	cmp    rax,QWORD PTR [rip+0x129e]        # 0x1d12
  00a74:    	jne    0x3c5db
  00a7a: 00 	mov    rax,QWORD PTR [rip+0x1281]        # 0x1d02
  00a81:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a85:    	sub    rsp,0x20
  00a89:    	movq   QWORD PTR [rsp],xmm5
  00a8e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a94:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a9a:    	mov    rdi,QWORD PTR [r14-0x38]
  00a9e: 4d 	movabs rax,0x564da0826bb0
  00aa8:    	call   rax
  00aaa:    	mov    r15d,eax
  00aad: 4d 	movabs r13,0x564da0e8bfd0
  00ab7:    	cmp    QWORD PTR [r13+0x8],0x0
  00abc:    	je     0x3c64b
  00ac2:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ac6:    	jne    0x3c64b
  00acc:    	mov    eax,DWORD PTR [rip+0xffffffffffffe329]        # 0xffffedfb
  00ad2:    	cmp    DWORD PTR [r13-0x4],eax
  00ad6:    	jne    0x3c64b
  00adc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ae5:    	mov    rax,QWORD PTR [r14-0x38]
  00ae9:    	mov    QWORD PTR [rsp-0x40],rax
  00aee: 00 	mov    rdi,0x0
  00af5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00afe:    	mov    rax,QWORD PTR [r13+0x10]
  00b02:    	mov    QWORD PTR [rsp-0x30],rax
  00b07:    	mov    rax,QWORD PTR [r13+0x8]
  00b0b:    	mov    r13,QWORD PTR [r13+0x18]
  00b0f:    	mov    rsi,QWORD PTR [rbx]
  00b12:    	mov    QWORD PTR [rsp-0x18],rsi
  00b17:    	lea    rsi,[rsp-0x18]
  00b1c:    	mov    QWORD PTR [rbx],rsi
  00b1f:    	lea    r14,[rsp-0x10]
  00b24:    	mov    QWORD PTR [rsp-0x20],r14
  00b29:    	call   rax
  00b2b:    	lea    r14,[rbp-0x8]
  00b2f:    	mov    QWORD PTR [rbx],r14
  00b32:    	mov    r14,QWORD PTR [rbp-0x10]
  00b36:    	movq   xmm5,QWORD PTR [rsp]
  00b3b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b41:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b47:    	add    rsp,0x20
  00b4b:    	test   rax,rax
  00b4e:    	je     0x3c695
  00b54: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b5b:    	sub    rsp,0x20
  00b5f:    	movq   QWORD PTR [rsp],xmm5
  00b64:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b6a:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b70: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00b77: 4d 	movabs rax,0x564da0826bb0
  00b81:    	call   rax
  00b83:    	mov    r15d,eax
  00b86: 4d 	movabs r13,0x564da0e8c000
  00b90:    	cmp    QWORD PTR [r13+0x8],0x0
  00b95:    	je     0x3c6a4
  00b9b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b9f:    	jne    0x3c6a4
  00ba5:    	mov    eax,DWORD PTR [rip+0xffffffffffffe250]        # 0xffffedfb
  00bab:    	cmp    DWORD PTR [r13-0x4],eax
  00baf:    	jne    0x3c6a4
  00bb5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00bbe: ff 	mov    rax,QWORD PTR [r14-0x90]
  00bc5:    	mov    QWORD PTR [rsp-0x40],rax
  00bca: 00 	mov    rdi,0x0
  00bd1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00bda:    	mov    rax,QWORD PTR [r13+0x10]
  00bde:    	mov    QWORD PTR [rsp-0x30],rax
  00be3:    	mov    rax,QWORD PTR [r13+0x8]
  00be7:    	mov    r13,QWORD PTR [r13+0x18]
  00beb:    	mov    rsi,QWORD PTR [rbx]
  00bee:    	mov    QWORD PTR [rsp-0x18],rsi
  00bf3:    	lea    rsi,[rsp-0x18]
  00bf8:    	mov    QWORD PTR [rbx],rsi
  00bfb:    	lea    r14,[rsp-0x10]
  00c00:    	mov    QWORD PTR [rsp-0x20],r14
  00c05:    	call   rax
  00c07:    	lea    r14,[rbp-0x8]
  00c0b:    	mov    QWORD PTR [rbx],r14
  00c0e:    	mov    r14,QWORD PTR [rbp-0x10]
  00c12:    	movq   xmm5,QWORD PTR [rsp]
  00c17:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c1d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c23:    	add    rsp,0x20
  00c27:    	test   rax,rax
  00c2a:    	je     0x3c6f1
  00c30: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c37:    	sub    rsp,0x20
  00c3b:    	movq   QWORD PTR [rsp],xmm5
  00c40:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c46:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c4c:    	mov    rdi,QWORD PTR [r14-0x38]
  00c50: 4d 	movabs rax,0x564da0826bb0
  00c5a:    	call   rax
  00c5c:    	mov    r15d,eax
  00c5f: 4d 	movabs r13,0x564da0e8c030
  00c69:    	cmp    QWORD PTR [r13+0x8],0x0
  00c6e:    	je     0x3c700
  00c74:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c78:    	jne    0x3c700
  00c7e:    	mov    eax,DWORD PTR [rip+0xffffffffffffe177]        # 0xffffedfb
  00c84:    	cmp    DWORD PTR [r13-0x4],eax
  00c88:    	jne    0x3c700
  00c8e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c97:    	mov    rax,QWORD PTR [r14-0x38]
  00c9b:    	mov    QWORD PTR [rsp-0x40],rax
  00ca0: 00 	mov    rdi,0x0
  00ca7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00cb0:    	mov    rax,QWORD PTR [r13+0x10]
  00cb4:    	mov    QWORD PTR [rsp-0x30],rax
  00cb9:    	mov    rax,QWORD PTR [r13+0x8]
  00cbd:    	mov    r13,QWORD PTR [r13+0x18]
  00cc1:    	mov    rsi,QWORD PTR [rbx]
  00cc4:    	mov    QWORD PTR [rsp-0x18],rsi
  00cc9:    	lea    rsi,[rsp-0x18]
  00cce:    	mov    QWORD PTR [rbx],rsi
  00cd1:    	lea    r14,[rsp-0x10]
  00cd6:    	mov    QWORD PTR [rsp-0x20],r14
  00cdb:    	call   rax
  00cdd:    	lea    r14,[rbp-0x8]
  00ce1:    	mov    QWORD PTR [rbx],r14
  00ce4:    	mov    r14,QWORD PTR [rbp-0x10]
  00ce8:    	movq   xmm5,QWORD PTR [rsp]
  00ced:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00cf3:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00cf9:    	add    rsp,0x20
  00cfd:    	test   rax,rax
  00d00:    	je     0x3c74a
  00d06: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00d0d:    	sub    rsp,0x20
  00d11:    	movq   QWORD PTR [rsp],xmm5
  00d16:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d1c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d22: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00d29: 4d 	movabs rax,0x564da0826bb0
  00d33:    	call   rax
  00d35:    	mov    r15d,eax
  00d38: 4d 	movabs r13,0x564da0e8c060
  00d42:    	cmp    QWORD PTR [r13+0x8],0x0
  00d47:    	je     0x3c759
  00d4d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d51:    	jne    0x3c759
  00d57:    	mov    eax,DWORD PTR [rip+0xffffffffffffe09e]        # 0xffffedfb
  00d5d:    	cmp    DWORD PTR [r13-0x4],eax
  00d61:    	jne    0x3c759
  00d67: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d70: ff 	mov    rax,QWORD PTR [r14-0x98]
  00d77:    	mov    QWORD PTR [rsp-0x40],rax
  00d7c: 00 	mov    rdi,0x0
  00d83: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d8c:    	mov    rax,QWORD PTR [r13+0x10]
  00d90:    	mov    QWORD PTR [rsp-0x30],rax
  00d95:    	mov    rax,QWORD PTR [r13+0x8]
  00d99:    	mov    r13,QWORD PTR [r13+0x18]
  00d9d:    	mov    rsi,QWORD PTR [rbx]
  00da0:    	mov    QWORD PTR [rsp-0x18],rsi
  00da5:    	lea    rsi,[rsp-0x18]
  00daa:    	mov    QWORD PTR [rbx],rsi
  00dad:    	lea    r14,[rsp-0x10]
  00db2:    	mov    QWORD PTR [rsp-0x20],r14
  00db7:    	call   rax
  00db9:    	lea    r14,[rbp-0x8]
  00dbd:    	mov    QWORD PTR [rbx],r14
  00dc0:    	mov    r14,QWORD PTR [rbp-0x10]
  00dc4:    	movq   xmm5,QWORD PTR [rsp]
  00dc9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00dcf:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00dd5:    	add    rsp,0x20
  00dd9:    	test   rax,rax
  00ddc:    	je     0x3c7a6
  00de2: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00de9: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00df0:    	mov    rsi,QWORD PTR [r14-0x68]
  00df4:    	sub    rsp,0x20
  00df8:    	movq   QWORD PTR [rsp],xmm5
  00dfd:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e03:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e09:    	mov    rdx,rdi
  00e0c:    	mov    rcx,rsi
  00e0f:    	mov    rdi,rbx
  00e12:    	mov    rsi,r12
  00e15: 4d 	movabs rax,0x564da07dc050
  00e1f:    	call   rax
  00e21:    	movq   xmm5,QWORD PTR [rsp]
  00e26:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e2c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e32:    	add    rsp,0x20
  00e36: 4d 	movabs r13,0x564da0e8c090
  00e40:    	test   rax,rax
  00e43:    	je     0xffffba75
  00e49: ff 	mov    QWORD PTR [r14-0x90],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e50: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00e57: ff 	mov    rsi,QWORD PTR [r14-0x90]
  00e5e:    	sub    rsp,0x20
  00e62:    	movq   QWORD PTR [rsp],xmm5
  00e67:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e6d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e73:    	mov    rdx,rdi
  00e76:    	mov    rcx,rsi
  00e79:    	mov    rdi,rbx
  00e7c:    	mov    rsi,r12
  00e7f: 4d 	movabs rax,0x564da07da0d0
  00e89:    	call   rax
  00e8b:    	movq   xmm5,QWORD PTR [rsp]
  00e90:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e96:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e9c:    	add    rsp,0x20
  00ea0: 4d 	movabs r13,0x564da0e8c0a0
  00eaa:    	test   rax,rax
  00ead:    	je     0xffffba75
  00eb3: ff 	mov    QWORD PTR [r14-0x88],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00eba:    	sub    rsp,0x20
  00ebe:    	movq   QWORD PTR [rsp],xmm5
  00ec3:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ec9:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ecf:    	mov    rdi,QWORD PTR [r14-0x38]
  00ed3: 4d 	movabs rax,0x564da0826bb0
  00edd:    	call   rax
  00edf:    	mov    r15d,eax
  00ee2: 4d 	movabs r13,0x564da0e8c0b0
  00eec:    	cmp    QWORD PTR [r13+0x8],0x0
  00ef1:    	je     0x3c7b5
  00ef7:    	cmp    r15d,DWORD PTR [r13-0x8]
  00efb:    	jne    0x3c7b5
  00f01:    	mov    eax,DWORD PTR [rip+0xffffffffffffdef4]        # 0xffffedfb
  00f07:    	cmp    DWORD PTR [r13-0x4],eax
  00f0b:    	jne    0x3c7b5
  00f11: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00f1a:    	mov    rax,QWORD PTR [r14-0x38]
  00f1e:    	mov    QWORD PTR [rsp-0x40],rax
  00f23: 00 	mov    rdi,0x0
  00f2a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00f33:    	mov    rax,QWORD PTR [r13+0x10]
  00f37:    	mov    QWORD PTR [rsp-0x30],rax
  00f3c:    	mov    rax,QWORD PTR [r13+0x8]
  00f40:    	mov    r13,QWORD PTR [r13+0x18]
  00f44:    	mov    rsi,QWORD PTR [rbx]
  00f47:    	mov    QWORD PTR [rsp-0x18],rsi
  00f4c:    	lea    rsi,[rsp-0x18]
  00f51:    	mov    QWORD PTR [rbx],rsi
  00f54:    	lea    r14,[rsp-0x10]
  00f59:    	mov    QWORD PTR [rsp-0x20],r14
  00f5e:    	call   rax
  00f60:    	lea    r14,[rbp-0x8]
  00f64:    	mov    QWORD PTR [rbx],r14
  00f67:    	mov    r14,QWORD PTR [rbp-0x10]
  00f6b:    	movq   xmm5,QWORD PTR [rsp]
  00f70:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f76:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f7c:    	add    rsp,0x20
  00f80:    	test   rax,rax
  00f83:    	je     0x3c7ff
  00f89: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00f90:    	sub    rsp,0x20
  00f94:    	movq   QWORD PTR [rsp],xmm5
  00f99:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f9f:    	movq   QWORD PTR [rsp+0x10],xmm7
  00fa5: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00fac: 4d 	movabs rax,0x564da0826bb0
  00fb6:    	call   rax
  00fb8:    	mov    r15d,eax
  00fbb: 4d 	movabs r13,0x564da0e8c0e0
  00fc5:    	cmp    QWORD PTR [r13+0x8],0x0
  00fca:    	je     0x3c80e
  00fd0:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fd4:    	jne    0x3c80e
  00fda:    	mov    eax,DWORD PTR [rip+0xffffffffffffde1b]        # 0xffffedfb
  00fe0:    	cmp    DWORD PTR [r13-0x4],eax
  00fe4:    	jne    0x3c80e
  00fea: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00ff3: ff 	mov    rax,QWORD PTR [r14-0x98]
  00ffa:    	mov    QWORD PTR [rsp-0x40],rax
  00fff: 00 	mov    rdi,0x0
  01006: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0100f:    	mov    rax,QWORD PTR [r13+0x10]
  01013:    	mov    QWORD PTR [rsp-0x30],rax
  01018:    	mov    rax,QWORD PTR [r13+0x8]
  0101c:    	mov    r13,QWORD PTR [r13+0x18]
  01020:    	mov    rsi,QWORD PTR [rbx]
  01023:    	mov    QWORD PTR [rsp-0x18],rsi
  01028:    	lea    rsi,[rsp-0x18]
  0102d:    	mov    QWORD PTR [rbx],rsi
  01030:    	lea    r14,[rsp-0x10]
  01035:    	mov    QWORD PTR [rsp-0x20],r14
  0103a:    	call   rax
  0103c:    	lea    r14,[rbp-0x8]
  01040:    	mov    QWORD PTR [rbx],r14
  01043:    	mov    r14,QWORD PTR [rbp-0x10]
  01047:    	movq   xmm5,QWORD PTR [rsp]
  0104c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01052:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01058:    	add    rsp,0x20
  0105c:    	test   rax,rax
  0105f:    	je     0x3c85b
  01065: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  0106c:    	sub    rsp,0x20
  01070:    	movq   QWORD PTR [rsp],xmm5
  01075:    	movq   QWORD PTR [rsp+0x8],xmm6
  0107b:    	movq   QWORD PTR [rsp+0x10],xmm7
  01081:    	mov    rdi,QWORD PTR [r14-0x38]
  01085: 4d 	movabs rax,0x564da0826bb0
  0108f:    	call   rax
  01091:    	mov    r15d,eax
  01094: 4d 	movabs r13,0x564da0e8c110
  0109e:    	cmp    QWORD PTR [r13+0x8],0x0
  010a3:    	je     0x3c86a
  010a9:    	cmp    r15d,DWORD PTR [r13-0x8]
  010ad:    	jne    0x3c86a
  010b3:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd42]        # 0xffffedfb
  010b9:    	cmp    DWORD PTR [r13-0x4],eax
  010bd:    	jne    0x3c86a
  010c3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010cc:    	mov    rax,QWORD PTR [r14-0x38]
  010d0:    	mov    QWORD PTR [rsp-0x40],rax
  010d5: 00 	mov    rdi,0x0
  010dc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010e5:    	mov    rax,QWORD PTR [r13+0x10]
  010e9:    	mov    QWORD PTR [rsp-0x30],rax
  010ee:    	mov    rax,QWORD PTR [r13+0x8]
  010f2:    	mov    r13,QWORD PTR [r13+0x18]
  010f6:    	mov    rsi,QWORD PTR [rbx]
  010f9:    	mov    QWORD PTR [rsp-0x18],rsi
  010fe:    	lea    rsi,[rsp-0x18]
  01103:    	mov    QWORD PTR [rbx],rsi
  01106:    	lea    r14,[rsp-0x10]
  0110b:    	mov    QWORD PTR [rsp-0x20],r14
  01110:    	call   rax
  01112:    	lea    r14,[rbp-0x8]
  01116:    	mov    QWORD PTR [rbx],r14
  01119:    	mov    r14,QWORD PTR [rbp-0x10]
  0111d:    	movq   xmm5,QWORD PTR [rsp]
  01122:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01128:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0112e:    	add    rsp,0x20
  01132:    	test   rax,rax
  01135:    	je     0x3c8b4
  0113b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01142:    	sub    rsp,0x20
  01146:    	movq   QWORD PTR [rsp],xmm5
  0114b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01151:    	movq   QWORD PTR [rsp+0x10],xmm7
  01157: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0115e: 4d 	movabs rax,0x564da0826bb0
  01168:    	call   rax
  0116a:    	mov    r15d,eax
  0116d: 4d 	movabs r13,0x564da0e8c140
  01177:    	cmp    QWORD PTR [r13+0x8],0x0
  0117c:    	je     0x3c8c3
  01182:    	cmp    r15d,DWORD PTR [r13-0x8]
  01186:    	jne    0x3c8c3
  0118c:    	mov    eax,DWORD PTR [rip+0xffffffffffffdc69]        # 0xffffedfb
  01192:    	cmp    DWORD PTR [r13-0x4],eax
  01196:    	jne    0x3c8c3
  0119c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011a5: ff 	mov    rax,QWORD PTR [r14-0xa0]
  011ac:    	mov    QWORD PTR [rsp-0x40],rax
  011b1: 00 	mov    rdi,0x0
  011b8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011c1:    	mov    rax,QWORD PTR [r13+0x10]
  011c5:    	mov    QWORD PTR [rsp-0x30],rax
  011ca:    	mov    rax,QWORD PTR [r13+0x8]
  011ce:    	mov    r13,QWORD PTR [r13+0x18]
  011d2:    	mov    rsi,QWORD PTR [rbx]
  011d5:    	mov    QWORD PTR [rsp-0x18],rsi
  011da:    	lea    rsi,[rsp-0x18]
  011df:    	mov    QWORD PTR [rbx],rsi
  011e2:    	lea    r14,[rsp-0x10]
  011e7:    	mov    QWORD PTR [rsp-0x20],r14
  011ec:    	call   rax
  011ee:    	lea    r14,[rbp-0x8]
  011f2:    	mov    QWORD PTR [rbx],r14
  011f5:    	mov    r14,QWORD PTR [rbp-0x10]
  011f9:    	movq   xmm5,QWORD PTR [rsp]
  011fe:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01204:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0120a:    	add    rsp,0x20
  0120e:    	test   rax,rax
  01211:    	je     0x3c910
  01217: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  0121e: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01225:    	mov    rsi,QWORD PTR [r14-0x68]
  01229:    	sub    rsp,0x20
  0122d:    	movq   QWORD PTR [rsp],xmm5
  01232:    	movq   QWORD PTR [rsp+0x8],xmm6
  01238:    	movq   QWORD PTR [rsp+0x10],xmm7
  0123e:    	mov    rdx,rdi
  01241:    	mov    rcx,rsi
  01244:    	mov    rdi,rbx
  01247:    	mov    rsi,r12
  0124a: 4d 	movabs rax,0x564da07dc050
  01254:    	call   rax
  01256:    	movq   xmm5,QWORD PTR [rsp]
  0125b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01261:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01267:    	add    rsp,0x20
  0126b: 4d 	movabs r13,0x564da0e8c170
  01275:    	test   rax,rax
  01278:    	je     0xffffba75
  0127e: ff 	mov    QWORD PTR [r14-0x98],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01285: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0128c: ff 	mov    rsi,QWORD PTR [r14-0x98]
  01293:    	sub    rsp,0x20
  01297:    	movq   QWORD PTR [rsp],xmm5
  0129c:    	movq   QWORD PTR [rsp+0x8],xmm6
  012a2:    	movq   QWORD PTR [rsp+0x10],xmm7
  012a8:    	mov    rdx,rdi
  012ab:    	mov    rcx,rsi
  012ae:    	mov    rdi,rbx
  012b1:    	mov    rsi,r12
  012b4: 4d 	movabs rax,0x564da07da0d0
  012be:    	call   rax
  012c0:    	movq   xmm5,QWORD PTR [rsp]
  012c5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012cb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012d1:    	add    rsp,0x20
  012d5: 4d 	movabs r13,0x564da0e8c180
  012df:    	test   rax,rax
  012e2:    	je     0xffffba75
  012e8: ff 	mov    QWORD PTR [r14-0x90],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  012ef:    	sub    rsp,0x20
  012f3:    	movq   QWORD PTR [rsp],xmm5
  012f8:    	movq   QWORD PTR [rsp+0x8],xmm6
  012fe:    	movq   QWORD PTR [rsp+0x10],xmm7
  01304:    	mov    rdi,QWORD PTR [r14-0x38]
  01308: 4d 	movabs rax,0x564da0826bb0
  01312:    	call   rax
  01314:    	mov    r15d,eax
  01317: 4d 	movabs r13,0x564da0e8c190
  01321:    	cmp    QWORD PTR [r13+0x8],0x0
  01326:    	je     0x3c91f
  0132c:    	cmp    r15d,DWORD PTR [r13-0x8]
  01330:    	jne    0x3c91f
  01336:    	mov    eax,DWORD PTR [rip+0xffffffffffffdabf]        # 0xffffedfb
  0133c:    	cmp    DWORD PTR [r13-0x4],eax
  01340:    	jne    0x3c91f
  01346: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0134f:    	mov    rax,QWORD PTR [r14-0x38]
  01353:    	mov    QWORD PTR [rsp-0x40],rax
  01358: 00 	mov    rdi,0x0
  0135f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01368:    	mov    rax,QWORD PTR [r13+0x10]
  0136c:    	mov    QWORD PTR [rsp-0x30],rax
  01371:    	mov    rax,QWORD PTR [r13+0x8]
  01375:    	mov    r13,QWORD PTR [r13+0x18]
  01379:    	mov    rsi,QWORD PTR [rbx]
  0137c:    	mov    QWORD PTR [rsp-0x18],rsi
  01381:    	lea    rsi,[rsp-0x18]
  01386:    	mov    QWORD PTR [rbx],rsi
  01389:    	lea    r14,[rsp-0x10]
  0138e:    	mov    QWORD PTR [rsp-0x20],r14
  01393:    	call   rax
  01395:    	lea    r14,[rbp-0x8]
  01399:    	mov    QWORD PTR [rbx],r14
  0139c:    	mov    r14,QWORD PTR [rbp-0x10]
  013a0:    	movq   xmm5,QWORD PTR [rsp]
  013a5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013ab:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013b1:    	add    rsp,0x20
  013b5:    	test   rax,rax
  013b8:    	je     0x3c969
  013be: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013c5:    	sub    rsp,0x20
  013c9:    	movq   QWORD PTR [rsp],xmm5
  013ce:    	movq   QWORD PTR [rsp+0x8],xmm6
  013d4:    	movq   QWORD PTR [rsp+0x10],xmm7
  013da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  013e1: 4d 	movabs rax,0x564da0826bb0
  013eb:    	call   rax
  013ed:    	mov    r15d,eax
  013f0: 4d 	movabs r13,0x564da0e8c1c0
  013fa:    	cmp    QWORD PTR [r13+0x8],0x0
  013ff:    	je     0x3c978
  01405:    	cmp    r15d,DWORD PTR [r13-0x8]
  01409:    	jne    0x3c978
  0140f:    	mov    eax,DWORD PTR [rip+0xffffffffffffd9e6]        # 0xffffedfb
  01415:    	cmp    DWORD PTR [r13-0x4],eax
  01419:    	jne    0x3c978
  0141f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01428: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0142f:    	mov    QWORD PTR [rsp-0x40],rax
  01434: 00 	mov    rdi,0x0
  0143b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01444:    	mov    rax,QWORD PTR [r13+0x10]
  01448:    	mov    QWORD PTR [rsp-0x30],rax
  0144d:    	mov    rax,QWORD PTR [r13+0x8]
  01451:    	mov    r13,QWORD PTR [r13+0x18]
  01455:    	mov    rsi,QWORD PTR [rbx]
  01458:    	mov    QWORD PTR [rsp-0x18],rsi
  0145d:    	lea    rsi,[rsp-0x18]
  01462:    	mov    QWORD PTR [rbx],rsi
  01465:    	lea    r14,[rsp-0x10]
  0146a:    	mov    QWORD PTR [rsp-0x20],r14
  0146f:    	call   rax
  01471:    	lea    r14,[rbp-0x8]
  01475:    	mov    QWORD PTR [rbx],r14
  01478:    	mov    r14,QWORD PTR [rbp-0x10]
  0147c:    	movq   xmm5,QWORD PTR [rsp]
  01481:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01487:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0148d:    	add    rsp,0x20
  01491:    	test   rax,rax
  01494:    	je     0x3c9c5
  0149a: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  014a1:    	sub    rsp,0x20
  014a5:    	movq   QWORD PTR [rsp],xmm5
  014aa:    	movq   QWORD PTR [rsp+0x8],xmm6
  014b0:    	movq   QWORD PTR [rsp+0x10],xmm7
  014b6:    	mov    rdi,QWORD PTR [r14-0x38]
  014ba: 4d 	movabs rax,0x564da0826bb0
  014c4:    	call   rax
  014c6:    	mov    r15d,eax
  014c9: 4d 	movabs r13,0x564da0e8c1f0
  014d3:    	cmp    QWORD PTR [r13+0x8],0x0
  014d8:    	je     0x3c9d4
  014de:    	cmp    r15d,DWORD PTR [r13-0x8]
  014e2:    	jne    0x3c9d4
  014e8:    	mov    eax,DWORD PTR [rip+0xffffffffffffd90d]        # 0xffffedfb
  014ee:    	cmp    DWORD PTR [r13-0x4],eax
  014f2:    	jne    0x3c9d4
  014f8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01501:    	mov    rax,QWORD PTR [r14-0x38]
  01505:    	mov    QWORD PTR [rsp-0x40],rax
  0150a: 00 	mov    rdi,0x0
  01511: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0151a:    	mov    rax,QWORD PTR [r13+0x10]
  0151e:    	mov    QWORD PTR [rsp-0x30],rax
  01523:    	mov    rax,QWORD PTR [r13+0x8]
  01527:    	mov    r13,QWORD PTR [r13+0x18]
  0152b:    	mov    rsi,QWORD PTR [rbx]
  0152e:    	mov    QWORD PTR [rsp-0x18],rsi
  01533:    	lea    rsi,[rsp-0x18]
  01538:    	mov    QWORD PTR [rbx],rsi
  0153b:    	lea    r14,[rsp-0x10]
  01540:    	mov    QWORD PTR [rsp-0x20],r14
  01545:    	call   rax
  01547:    	lea    r14,[rbp-0x8]
  0154b:    	mov    QWORD PTR [rbx],r14
  0154e:    	mov    r14,QWORD PTR [rbp-0x10]
  01552:    	movq   xmm5,QWORD PTR [rsp]
  01557:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0155d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01563:    	add    rsp,0x20
  01567:    	test   rax,rax
  0156a:    	je     0x3ca1e
  01570: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  01577:    	sub    rsp,0x20
  0157b:    	movq   QWORD PTR [rsp],xmm5
  01580:    	movq   QWORD PTR [rsp+0x8],xmm6
  01586:    	movq   QWORD PTR [rsp+0x10],xmm7
  0158c: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01593: 4d 	movabs rax,0x564da0826bb0
  0159d:    	call   rax
  0159f:    	mov    r15d,eax
  015a2: 4d 	movabs r13,0x564da0e8c220
  015ac:    	cmp    QWORD PTR [r13+0x8],0x0
  015b1:    	je     0x3ca2d
  015b7:    	cmp    r15d,DWORD PTR [r13-0x8]
  015bb:    	jne    0x3ca2d
  015c1:    	mov    eax,DWORD PTR [rip+0xffffffffffffd834]        # 0xffffedfb
  015c7:    	cmp    DWORD PTR [r13-0x4],eax
  015cb:    	jne    0x3ca2d
  015d1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015da: ff 	mov    rax,QWORD PTR [r14-0xa8]
  015e1:    	mov    QWORD PTR [rsp-0x40],rax
  015e6: 00 	mov    rdi,0x0
  015ed: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015f6:    	mov    rax,QWORD PTR [r13+0x10]
  015fa:    	mov    QWORD PTR [rsp-0x30],rax
  015ff:    	mov    rax,QWORD PTR [r13+0x8]
  01603:    	mov    r13,QWORD PTR [r13+0x18]
  01607:    	mov    rsi,QWORD PTR [rbx]
  0160a:    	mov    QWORD PTR [rsp-0x18],rsi
  0160f:    	lea    rsi,[rsp-0x18]
  01614:    	mov    QWORD PTR [rbx],rsi
  01617:    	lea    r14,[rsp-0x10]
  0161c:    	mov    QWORD PTR [rsp-0x20],r14
  01621:    	call   rax
  01623:    	lea    r14,[rbp-0x8]
  01627:    	mov    QWORD PTR [rbx],r14
  0162a:    	mov    r14,QWORD PTR [rbp-0x10]
  0162e:    	movq   xmm5,QWORD PTR [rsp]
  01633:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01639:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0163f:    	add    rsp,0x20
  01643:    	test   rax,rax
  01646:    	je     0x3ca7a
  0164c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01653: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0165a:    	mov    rsi,QWORD PTR [r14-0x68]
  0165e:    	sub    rsp,0x20
  01662:    	movq   QWORD PTR [rsp],xmm5
  01667:    	movq   QWORD PTR [rsp+0x8],xmm6
  0166d:    	movq   QWORD PTR [rsp+0x10],xmm7
  01673:    	mov    rdx,rdi
  01676:    	mov    rcx,rsi
  01679:    	mov    rdi,rbx
  0167c:    	mov    rsi,r12
  0167f: 4d 	movabs rax,0x564da07dc050
  01689:    	call   rax
  0168b:    	movq   xmm5,QWORD PTR [rsp]
  01690:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01696:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0169c:    	add    rsp,0x20
  016a0: 4d 	movabs r13,0x564da0e8c250
  016aa:    	test   rax,rax
  016ad:    	je     0xffffba75
  016b3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016ba: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016c1: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  016c8:    	sub    rsp,0x20
  016cc:    	movq   QWORD PTR [rsp],xmm5
  016d1:    	movq   QWORD PTR [rsp+0x8],xmm6
  016d7:    	movq   QWORD PTR [rsp+0x10],xmm7
  016dd:    	mov    rdx,rdi
  016e0:    	mov    rcx,rsi
  016e3:    	mov    rdi,rbx
  016e6:    	mov    rsi,r12
  016e9: 4d 	movabs rax,0x564da07da0d0
  016f3:    	call   rax
  016f5:    	movq   xmm5,QWORD PTR [rsp]
  016fa:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01700:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01706:    	add    rsp,0x20
  0170a: 4d 	movabs r13,0x564da0e8c260
  01714:    	test   rax,rax
  01717:    	je     0xffffba75
  0171d: ff 	mov    QWORD PTR [r14-0x98],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  01724:    	sub    rsp,0x20
  01728:    	movq   QWORD PTR [rsp],xmm5
  0172d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01733:    	movq   QWORD PTR [rsp+0x10],xmm7
  01739:    	mov    rdi,QWORD PTR [r14-0x80]
  0173d: 4d 	movabs rax,0x564da0826bb0
  01747:    	call   rax
  01749:    	mov    r15d,eax
  0174c: 4d 	movabs r13,0x564da0e8c270
  01756:    	cmp    QWORD PTR [r13+0x8],0x0
  0175b:    	je     0x3ca89
  01761:    	cmp    r15d,DWORD PTR [r13-0x8]
  01765:    	jne    0x3ca89
  0176b:    	mov    eax,DWORD PTR [rip+0xffffffffffffd68a]        # 0xffffedfb
  01771:    	cmp    DWORD PTR [r13-0x4],eax
  01775:    	jne    0x3ca89
  0177b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01784:    	mov    rax,QWORD PTR [r14-0x80]
  01788:    	mov    QWORD PTR [rsp-0x40],rax
  0178d: 00 	mov    rdi,0x3
  01794: ff 	mov    rax,QWORD PTR [r14-0x88]
  0179b:    	mov    QWORD PTR [rsp-0x48],rax
  017a0: ff 	mov    rax,QWORD PTR [r14-0x90]
  017a7:    	mov    QWORD PTR [rsp-0x50],rax
  017ac: ff 	mov    rax,QWORD PTR [r14-0x98]
  017b3:    	mov    QWORD PTR [rsp-0x58],rax
  017b8: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017c1:    	mov    rax,QWORD PTR [r13+0x10]
  017c5:    	mov    QWORD PTR [rsp-0x30],rax
  017ca:    	mov    rax,QWORD PTR [r13+0x8]
  017ce:    	mov    r13,QWORD PTR [r13+0x18]
  017d2:    	mov    rsi,QWORD PTR [rbx]
  017d5:    	mov    QWORD PTR [rsp-0x18],rsi
  017da:    	lea    rsi,[rsp-0x18]
  017df:    	mov    QWORD PTR [rbx],rsi
  017e2:    	lea    r14,[rsp-0x10]
  017e7:    	mov    QWORD PTR [rsp-0x20],r14
  017ec:    	call   rax
  017ee:    	lea    r14,[rbp-0x8]
  017f2:    	mov    QWORD PTR [rbx],r14
  017f5:    	mov    r14,QWORD PTR [rbp-0x10]
  017f9:    	movq   xmm5,QWORD PTR [rsp]
  017fe:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01804:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0180a:    	add    rsp,0x20
  0180e:    	test   rax,rax
  01811:    	je     0x3cad3
  01817:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0181b:    	sub    rsp,0x20
  0181f:    	movq   QWORD PTR [rsp],xmm5
  01824:    	movq   QWORD PTR [rsp+0x8],xmm6
  0182a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01830:    	mov    rdi,QWORD PTR [r14-0x40]
  01834: 4d 	movabs rax,0x564da0826bb0
  0183e:    	call   rax
  01840:    	mov    r15d,eax
  01843: 4d 	movabs r13,0x564da0e8c2a0
  0184d:    	cmp    QWORD PTR [r13+0x8],0x0
  01852:    	je     0x3cae2
  01858:    	cmp    r15d,DWORD PTR [r13-0x8]
  0185c:    	jne    0x3cae2
  01862:    	mov    eax,DWORD PTR [rip+0xffffffffffffd593]        # 0xffffedfb
  01868:    	cmp    DWORD PTR [r13-0x4],eax
  0186c:    	jne    0x3cae2
  01872: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0187b:    	mov    rax,QWORD PTR [r14-0x40]
  0187f:    	mov    QWORD PTR [rsp-0x40],rax
  01884: 00 	mov    rdi,0x1
  0188b:    	mov    rax,QWORD PTR [r14-0x78]
  0188f:    	mov    QWORD PTR [rsp-0x48],rax
  01894: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0189d:    	mov    rax,QWORD PTR [r13+0x10]
  018a1:    	mov    QWORD PTR [rsp-0x30],rax
  018a6:    	mov    rax,QWORD PTR [r13+0x8]
  018aa:    	mov    r13,QWORD PTR [r13+0x18]
  018ae:    	mov    rsi,QWORD PTR [rbx]
  018b1:    	mov    QWORD PTR [rsp-0x18],rsi
  018b6:    	lea    rsi,[rsp-0x18]
  018bb:    	mov    QWORD PTR [rbx],rsi
  018be:    	lea    r14,[rsp-0x10]
  018c3:    	mov    QWORD PTR [rsp-0x20],r14
  018c8:    	call   rax
  018ca:    	lea    r14,[rbp-0x8]
  018ce:    	mov    QWORD PTR [rbx],r14
  018d1:    	mov    r14,QWORD PTR [rbp-0x10]
  018d5:    	movq   xmm5,QWORD PTR [rsp]
  018da:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018e0:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018e6:    	add    rsp,0x20
  018ea:    	test   rax,rax
  018ed:    	je     0x3cb2c
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  018f3:    	sub    rsp,0x20
  018f7:    	movq   QWORD PTR [rsp],xmm5
  018fc:    	movq   QWORD PTR [rsp+0x8],xmm6
  01902:    	movq   QWORD PTR [rsp+0x10],xmm7
  01908:    	mov    rdi,QWORD PTR [r14-0x40]
  0190c: 4d 	movabs rax,0x564da0826bb0
  01916:    	call   rax
  01918:    	mov    r15d,eax
  0191b: 4d 	movabs r13,0x564da0e8c2d0
  01925:    	cmp    QWORD PTR [r13+0x8],0x0
  0192a:    	je     0x3cb3b
  01930:    	cmp    r15d,DWORD PTR [r13-0x8]
  01934:    	jne    0x3cb3b
  0193a:    	mov    eax,DWORD PTR [rip+0xffffffffffffd4bb]        # 0xffffedfb
  01940:    	cmp    DWORD PTR [r13-0x4],eax
  01944:    	jne    0x3cb3b
  0194a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01953:    	mov    rax,QWORD PTR [r14-0x40]
  01957:    	mov    QWORD PTR [rsp-0x40],rax
  0195c: 00 	mov    rdi,0x0
  01963: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0196c:    	mov    rax,QWORD PTR [r13+0x10]
  01970:    	mov    QWORD PTR [rsp-0x30],rax
  01975:    	mov    rax,QWORD PTR [r13+0x8]
  01979:    	mov    r13,QWORD PTR [r13+0x18]
  0197d:    	mov    rsi,QWORD PTR [rbx]
  01980:    	mov    QWORD PTR [rsp-0x18],rsi
  01985:    	lea    rsi,[rsp-0x18]
  0198a:    	mov    QWORD PTR [rbx],rsi
  0198d:    	lea    r14,[rsp-0x10]
  01992:    	mov    QWORD PTR [rsp-0x20],r14
  01997:    	call   rax
  01999:    	lea    r14,[rbp-0x8]
  0199d:    	mov    QWORD PTR [rbx],r14
  019a0:    	mov    r14,QWORD PTR [rbp-0x10]
  019a4:    	movq   xmm5,QWORD PTR [rsp]
  019a9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019af:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019b5:    	add    rsp,0x20
  019b9:    	test   rax,rax
  019bc:    	je     0x3cb85
  019c2:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  019c6:    	mov    rdi,QWORD PTR [rbp-0x30]
  019ca:    	sub    rsp,0x20
  019ce:    	movq   QWORD PTR [rsp],xmm5
  019d3:    	movq   QWORD PTR [rsp+0x8],xmm6
  019d9:    	movq   QWORD PTR [rsp+0x10],xmm7
  019df: 00 	mov    rsi,0x90
  019e6:    	mov    rdx,r12
  019e9: 4d 	movabs rax,0x564da0819e20
  019f3:    	call   rax
  019f5:    	movq   xmm5,QWORD PTR [rsp]
  019fa:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a00:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a06:    	add    rsp,0x20
  01a0a:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  01a0e:    	sub    rsp,0x20
  01a12:    	movq   QWORD PTR [rsp],xmm5
  01a17:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a1d:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a23:    	mov    rdi,QWORD PTR [r14-0x78]
  01a27: 4d 	movabs rax,0x564da0826bb0
  01a31:    	call   rax
  01a33:    	mov    r15d,eax
  01a36: 4d 	movabs r13,0x564da0e8c310
  01a40:    	cmp    QWORD PTR [r13+0x8],0x0
  01a45:    	je     0x3cb94
  01a4b:    	cmp    r15d,DWORD PTR [r13-0x8]
  01a4f:    	jne    0x3cb94
  01a55:    	mov    eax,DWORD PTR [rip+0xffffffffffffd3a0]        # 0xffffedfb
  01a5b:    	cmp    DWORD PTR [r13-0x4],eax
  01a5f:    	jne    0x3cb94
  01a65: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a6e:    	mov    rax,QWORD PTR [r14-0x78]
  01a72:    	mov    QWORD PTR [rsp-0x40],rax
  01a77: 00 	mov    rdi,0x1
  01a7e:    	mov    rax,QWORD PTR [r14-0x80]
  01a82:    	mov    QWORD PTR [rsp-0x48],rax
  01a87: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a90:    	mov    rax,QWORD PTR [r13+0x10]
  01a94:    	mov    QWORD PTR [rsp-0x30],rax
  01a99:    	mov    rax,QWORD PTR [r13+0x8]
  01a9d:    	mov    r13,QWORD PTR [r13+0x18]
  01aa1:    	mov    rsi,QWORD PTR [rbx]
  01aa4:    	mov    QWORD PTR [rsp-0x18],rsi
  01aa9:    	lea    rsi,[rsp-0x18]
  01aae:    	mov    QWORD PTR [rbx],rsi
  01ab1:    	lea    r14,[rsp-0x10]
  01ab6:    	mov    QWORD PTR [rsp-0x20],r14
  01abb:    	call   rax
  01abd:    	lea    r14,[rbp-0x8]
  01ac1:    	mov    QWORD PTR [rbx],r14
  01ac4:    	mov    r14,QWORD PTR [rbp-0x10]
  01ac8:    	movq   xmm5,QWORD PTR [rsp]
  01acd:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01ad3:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01ad9:    	add    rsp,0x20
  01add:    	test   rax,rax
  01ae0:    	je     0x3cbde
  01ae6:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01aea:    	sub    rsp,0x20
  01aee:    	movq   QWORD PTR [rsp],xmm5
  01af3:    	movq   QWORD PTR [rsp+0x8],xmm6
  01af9:    	movq   QWORD PTR [rsp+0x10],xmm7
  01aff:    	mov    rdi,QWORD PTR [r14-0x70]
  01b03: 4d 	movabs rax,0x564da0826bb0
  01b0d:    	call   rax
  01b0f:    	mov    r15d,eax
  01b12: 4d 	movabs r13,0x564da0e8c340
  01b1c:    	cmp    QWORD PTR [r13+0x8],0x0
  01b21:    	je     0x3cbed
  01b27:    	cmp    r15d,DWORD PTR [r13-0x8]
  01b2b:    	jne    0x3cbed
  01b31:    	mov    eax,DWORD PTR [rip+0xffffffffffffd2c4]        # 0xffffedfb
  01b37:    	cmp    DWORD PTR [r13-0x4],eax
  01b3b:    	jne    0x3cbed
  01b41: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b4a:    	mov    rax,QWORD PTR [r14-0x70]
  01b4e:    	mov    QWORD PTR [rsp-0x40],rax
  01b53: 00 	mov    rdi,0x0
  01b5a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b63:    	mov    rax,QWORD PTR [r13+0x10]
  01b67:    	mov    QWORD PTR [rsp-0x30],rax
  01b6c:    	mov    rax,QWORD PTR [r13+0x8]
  01b70:    	mov    r13,QWORD PTR [r13+0x18]
  01b74:    	mov    rsi,QWORD PTR [rbx]
  01b77:    	mov    QWORD PTR [rsp-0x18],rsi
  01b7c:    	lea    rsi,[rsp-0x18]
  01b81:    	mov    QWORD PTR [rbx],rsi
  01b84:    	lea    r14,[rsp-0x10]
  01b89:    	mov    QWORD PTR [rsp-0x20],r14
  01b8e:    	call   rax
  01b90:    	lea    r14,[rbp-0x8]
  01b94:    	mov    QWORD PTR [rbx],r14
  01b97:    	mov    r14,QWORD PTR [rbp-0x10]
  01b9b:    	movq   xmm5,QWORD PTR [rsp]
  01ba0:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01ba6:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01bac:    	add    rsp,0x20
  01bb0:    	test   rax,rax
  01bb3:    	je     0x3cc37
  01bb9:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01bbd:    	sub    rsp,0x20
  01bc1:    	movq   QWORD PTR [rsp],xmm5
  01bc6:    	movq   QWORD PTR [rsp+0x8],xmm6
  01bcc:    	movq   QWORD PTR [rsp+0x10],xmm7
  01bd2:    	mov    rdi,QWORD PTR [r14-0x40]
  01bd6: 4d 	movabs rax,0x564da0826bb0
  01be0:    	call   rax
  01be2:    	mov    r15d,eax
  01be5: 4d 	movabs r13,0x564da0e8c370
  01bef:    	cmp    QWORD PTR [r13+0x8],0x0
  01bf4:    	je     0x3cc46
  01bfa:    	cmp    r15d,DWORD PTR [r13-0x8]
  01bfe:    	jne    0x3cc46
  01c04:    	mov    eax,DWORD PTR [rip+0xffffffffffffd1f1]        # 0xffffedfb
  01c0a:    	cmp    DWORD PTR [r13-0x4],eax
  01c0e:    	jne    0x3cc46
  01c14: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c1d:    	mov    rax,QWORD PTR [r14-0x40]
  01c21:    	mov    QWORD PTR [rsp-0x40],rax
  01c26: 00 	mov    rdi,0x1
  01c2d:    	mov    rax,QWORD PTR [r14-0x78]
  01c31:    	mov    QWORD PTR [rsp-0x48],rax
  01c36: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c3f:    	mov    rax,QWORD PTR [r13+0x10]
  01c43:    	mov    QWORD PTR [rsp-0x30],rax
  01c48:    	mov    rax,QWORD PTR [r13+0x8]
  01c4c:    	mov    r13,QWORD PTR [r13+0x18]
  01c50:    	mov    rsi,QWORD PTR [rbx]
  01c53:    	mov    QWORD PTR [rsp-0x18],rsi
  01c58:    	lea    rsi,[rsp-0x18]
  01c5d:    	mov    QWORD PTR [rbx],rsi
  01c60:    	lea    r14,[rsp-0x10]
  01c65:    	mov    QWORD PTR [rsp-0x20],r14
  01c6a:    	call   rax
  01c6c:    	lea    r14,[rbp-0x8]
  01c70:    	mov    QWORD PTR [rbx],r14
  01c73:    	mov    r14,QWORD PTR [rbp-0x10]
  01c77:    	movq   xmm5,QWORD PTR [rsp]
  01c7c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01c82:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01c88:    	add    rsp,0x20
  01c8c:    	test   rax,rax
  01c8f:    	je     0x3cc90
:00110 
:00112 br =>:00113
  01c95:    	jmp    0x3cd05
:00113 br =>:00114
  01c9a:    	jmp    0x3cd78
:00114 %9 = nil
  01c9f: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  01ca7:    	mov    rax,QWORD PTR [r14-0x78]
  01cab:    	leave  
  01cac:    	ret    
==> start whole compile: vsub FuncId(64) self_class:Vec start:[00000] bytecode:0x564da0ed55e0
<== finished compile. elapsed:41.8µs
offset:Pos(25304) code: 1359 bytes  data: 57 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x1
  0000e: jne    0x3b091
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x40],rax
  0001f: mov    QWORD PTR [r14-0x48],rax
  00023: mov    QWORD PTR [r14-0x50],rax
  00027: mov    QWORD PTR [r14-0x58],rax
  0002b: mov    QWORD PTR [r14-0x60],rax
  0002f: mov    QWORD PTR [r14-0x68],rax
  00033: mov    rdi,QWORD PTR [rbp-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x3b0a0
  00044: cmp    DWORD PTR [rdi+0x4],0x28
  00048: jne    0x3b0a0
:00000 init_method reg:8 arg:1 pos:1 req:1 block:0 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  0004e: mov    rax,QWORD PTR [rip+0xffffffffffffd093]        # 0xffffd0e8
  00055: cmp    rax,QWORD PTR [rip+0x50c]        # 0x568
  0005c: jne    0x3b0af
  00062: mov    rax,QWORD PTR [rip+0x4ef]        # 0x558
  00069: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0006d: mov    rdi,QWORD PTR [rbp-0x30]
  00071: mov    rax,QWORD PTR [rdi+0x10]
  00075: mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %1.call x()                     [Vec]
  00079: mov    rdi,QWORD PTR [r14-0x38]
  0007d: test   rdi,0x7
  00084: jne    0x3b0f5
  0008a: cmp    DWORD PTR [rdi+0x4],0x28
  0008e: jne    0x3b0f5
  00094: cmp    DWORD PTR [rip+0xffffffffffffd046],0x26        # 0xffffd0e1
  0009b: jne    0x3b0f5
  000a1: mov    esi,DWORD PTR [rip+0x4cd]        # 0x574
  000a7: cmp    esi,0xffffffff
  000aa: je     0x3b104
  000b0: cmp    WORD PTR [rdi+0x2],0x3
  000b5: jne    0xce
  000bb: cmp    esi,0x6
  000be: jge    0xce
  000c4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c9: jmp    0xda
  000ce: movabs rax,0x564da0797d70
  000d8: call   rax
  000da: mov    QWORD PTR [r14-0x58],rax
:00004 
:00006 %4 = %4 - %5                         [Float][Float]
  000de: mov    rdi,QWORD PTR [r14-0x50]
  000e2: test   rdi,0x1
  000e9: jne    0x3b12d
  000ef: test   rdi,0x2
  000f6: je     0x132
  000fc: xorps  xmm2,xmm2
  000ff: movabs rax,0x8000000000000002
  00109: cmp    rdi,rax
  0010c: je     0x144
  00112: mov    rax,rdi
  00115: sar    rax,0x3f
  00119: add    rax,0x2
  0011d: and    rdi,0xfffffffffffffffc
  00121: or     rdi,rax
  00124: rol    rdi,0x3d
  00128: movq   xmm2,rdi
  0012d: jmp    0x144
  00132: call   0xffff9db4
  00137: test   rax,rax
  0013a: je     0x3b12d
  00140: movq   xmm2,xmm0
  00144: mov    rdi,QWORD PTR [r14-0x58]
  00148: test   rdi,0x1
  0014f: jne    0x3b13c
  00155: test   rdi,0x2
  0015c: je     0x198
  00162: xorps  xmm3,xmm3
  00165: movabs rax,0x8000000000000002
  0016f: cmp    rdi,rax
  00172: je     0x1aa
  00178: mov    rax,rdi
  0017b: sar    rax,0x3f
  0017f: add    rax,0x2
  00183: and    rdi,0xfffffffffffffffc
  00187: or     rdi,rax
  0018a: rol    rdi,0x3d
  0018e: movq   xmm3,rdi
  00193: jmp    0x1aa
  00198: call   0xffff9db4
  0019d: test   rax,rax
  001a0: je     0x3b13c
  001a6: movq   xmm3,xmm0
  001aa: subsd  xmm2,xmm3
:00007 %5 = @y: Vec[IvarId(1)]
  001ae: mov    rdi,QWORD PTR [rbp-0x30]
  001b2: mov    rax,QWORD PTR [rdi+0x18]
  001b6: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = %1.call y()                     [Vec]
  001ba: mov    rdi,QWORD PTR [r14-0x38]
  001be: test   rdi,0x7
  001c5: jne    0x3b14b
  001cb: cmp    DWORD PTR [rdi+0x4],0x28
  001cf: jne    0x3b14b
  001d5: cmp    DWORD PTR [rip+0xffffffffffffcf05],0x26        # 0xffffd0e1
  001dc: jne    0x3b14b
  001e2: mov    esi,DWORD PTR [rip+0x394]        # 0x57c
  001e8: cmp    esi,0xffffffff
  001eb: je     0x3b167
  001f1: cmp    WORD PTR [rdi+0x2],0x3
  001f6: jne    0x20f
  001fc: cmp    esi,0x6
  001ff: jge    0x20f
  00205: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020a: jmp    0x22d
  0020f: sub    rsp,0x10
  00213: movq   QWORD PTR [rsp],xmm2
  00218: movabs rax,0x564da0797d70
  00222: call   rax
  00224: movq   xmm2,QWORD PTR [rsp]
  00229: add    rsp,0x10
  0022d: mov    QWORD PTR [r14-0x60],rax
:00009 
:00011 %5 = %5 - %6                         [Float][Float]
  00231: mov    rdi,QWORD PTR [r14-0x58]
  00235: test   rdi,0x1
  0023c: jne    0x3b1a2
  00242: test   rdi,0x2
  00249: je     0x285
  0024f: xorps  xmm3,xmm3
  00252: movabs rax,0x8000000000000002
  0025c: cmp    rdi,rax
  0025f: je     0x297
  00265: mov    rax,rdi
  00268: sar    rax,0x3f
  0026c: add    rax,0x2
  00270: and    rdi,0xfffffffffffffffc
  00274: or     rdi,rax
  00277: rol    rdi,0x3d
  0027b: movq   xmm3,rdi
  00280: jmp    0x297
  00285: call   0xffff9db4
  0028a: test   rax,rax
  0028d: je     0x3b1a2
  00293: movq   xmm3,xmm0
  00297: mov    rdi,QWORD PTR [r14-0x60]
  0029b: test   rdi,0x1
  002a2: jne    0x3b1be
  002a8: test   rdi,0x2
  002af: je     0x2eb
  002b5: xorps  xmm4,xmm4
  002b8: movabs rax,0x8000000000000002
  002c2: cmp    rdi,rax
  002c5: je     0x2fd
  002cb: mov    rax,rdi
  002ce: sar    rax,0x3f
  002d2: add    rax,0x2
  002d6: and    rdi,0xfffffffffffffffc
  002da: or     rdi,rax
  002dd: rol    rdi,0x3d
  002e1: movq   xmm4,rdi
  002e6: jmp    0x2fd
  002eb: call   0xffff9db4
  002f0: test   rax,rax
  002f3: je     0x3b1be
  002f9: movq   xmm4,xmm0
  002fd: subsd  xmm3,xmm4
:00012 %6 = @z: Vec[IvarId(2)]
  00301: mov    rdi,QWORD PTR [rbp-0x30]
  00305: mov    rax,QWORD PTR [rdi+0x20]
  00309: mov    QWORD PTR [r14-0x60],rax
:00013 %7 = %1.call z()                     [Vec]
  0030d: mov    rdi,QWORD PTR [r14-0x38]
  00311: test   rdi,0x7
  00318: jne    0x3b1da
  0031e: cmp    DWORD PTR [rdi+0x4],0x28
  00322: jne    0x3b1da
  00328: cmp    DWORD PTR [rip+0xffffffffffffcdb2],0x26        # 0xffffd0e1
  0032f: jne    0x3b1da
  00335: mov    esi,DWORD PTR [rip+0x249]        # 0x584
  0033b: cmp    esi,0xffffffff
  0033e: je     0x3b203
  00344: cmp    WORD PTR [rdi+0x2],0x3
  00349: jne    0x362
  0034f: cmp    esi,0x6
  00352: jge    0x362
  00358: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0035d: jmp    0x38c
  00362: sub    rsp,0x10
  00366: movq   QWORD PTR [rsp],xmm2
  0036b: movq   QWORD PTR [rsp+0x8],xmm3
  00371: movabs rax,0x564da0797d70
  0037b: call   rax
  0037d: movq   xmm2,QWORD PTR [rsp]
  00382: movq   xmm3,QWORD PTR [rsp+0x8]
  00388: add    rsp,0x10
  0038c: mov    QWORD PTR [r14-0x68],rax
:00014 
:00016 %6 = %6 - %7                         [Float][Float]
  00390: mov    rdi,QWORD PTR [r14-0x60]
  00394: test   rdi,0x1
  0039b: jne    0x3b24a
  003a1: test   rdi,0x2
  003a8: je     0x3e4
  003ae: xorps  xmm4,xmm4
  003b1: movabs rax,0x8000000000000002
  003bb: cmp    rdi,rax
  003be: je     0x3f6
  003c4: mov    rax,rdi
  003c7: sar    rax,0x3f
  003cb: add    rax,0x2
  003cf: and    rdi,0xfffffffffffffffc
  003d3: or     rdi,rax
  003d6: rol    rdi,0x3d
  003da: movq   xmm4,rdi
  003df: jmp    0x3f6
  003e4: call   0xffff9db4
  003e9: test   rax,rax
  003ec: je     0x3b24a
  003f2: movq   xmm4,xmm0
  003f6: mov    rdi,QWORD PTR [r14-0x68]
  003fa: test   rdi,0x1
  00401: jne    0x3b273
  00407: test   rdi,0x2
  0040e: je     0x44a
  00414: xorps  xmm5,xmm5
  00417: movabs rax,0x8000000000000002
  00421: cmp    rdi,rax
  00424: je     0x45c
  0042a: mov    rax,rdi
  0042d: sar    rax,0x3f
  00431: add    rax,0x2
  00435: and    rdi,0xfffffffffffffffc
  00439: or     rdi,rax
  0043c: rol    rdi,0x3d
  00440: movq   xmm5,rdi
  00445: jmp    0x45c
  0044a: call   0xffff9db4
  0044f: test   rax,rax
  00452: je     0x3b273
  00458: movq   xmm5,xmm0
  0045c: subsd  xmm4,xmm5
:00017 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00460: movq   xmm0,xmm2
  00464: call   0xffff9ed8
  00469: mov    QWORD PTR [r14-0x50],rax
  0046d: movq   xmm0,xmm3
  00471: call   0xffff9ed8
  00476: mov    QWORD PTR [r14-0x58],rax
  0047a: movq   xmm0,xmm4
  0047e: call   0xffff9ed8
  00483: mov    QWORD PTR [r14-0x60],rax
  00487: mov    rdi,QWORD PTR [r14-0x48]
  0048b: test   rdi,0x7
  00492: jne    0x3b29c
  00498: cmp    DWORD PTR [rdi+0x4],0x29
  0049c: jne    0x3b29c
  004a2: cmp    DWORD PTR [rip+0xffffffffffffcc38],0x26        # 0xffffd0e1
  004a9: jne    0x3b29c
  004af: mov    r9,0x0
  004b6: sub    rsp,0x20
  004ba: movq   QWORD PTR [rsp],xmm2
  004bf: movq   QWORD PTR [rsp+0x8],xmm3
  004c5: movq   QWORD PTR [rsp+0x10],xmm4
  004cb: movq   QWORD PTR [rsp+0x18],xmm5
  004d1: mov    rdx,rdi
  004d4: mov    QWORD PTR [rsp-0x40],rcx
  004d9: mov    QWORD PTR [rsp-0x28],0x0
  004e2: lea    rcx,[r14-0x50]
  004e6: mov    r8,0x3
  004ed: mov    rsi,QWORD PTR [rbx]
  004f0: mov    QWORD PTR [rsp-0x18],rsi
  004f5: lea    rsi,[rsp-0x18]
  004fa: mov    QWORD PTR [rbx],rsi
  004fd: lea    r14,[rsp-0x10]
  00502: mov    QWORD PTR [rsp-0x20],r14
  00507: call   0x3b2ab
  0050c: lea    r14,[rbp-0x8]
  00510: mov    QWORD PTR [rbx],r14
  00513: mov    r14,QWORD PTR [rbp-0x10]
  00517: movq   xmm2,QWORD PTR [rsp]
  0051c: movq   xmm3,QWORD PTR [rsp+0x8]
  00522: movq   xmm4,QWORD PTR [rsp+0x10]
  00528: movq   xmm5,QWORD PTR [rsp+0x18]
  0052e: add    rsp,0x20
  00532: movabs r13,0x564da0ed5710
  0053c: test   rax,rax
  0053f: je     0xffff9d5b
  00545: mov    QWORD PTR [r14-0x40],rax
:00018 
:00020 ret %2
  00549: mov    rax,QWORD PTR [r14-0x40]
  0054d: leave  
  0054e: ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x564da0e75040
<== finished compile. elapsed:126.7µs
offset:Pos(26987) code: 9610 bytes  data: 287 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0: ff 	mov    QWORD PTR [r14-0xc8],rax
  000a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  000ab: 00 	test   rdi,0x7
  000b2:    	jne    0x3ac59
  000b8:    	cmp    DWORD PTR [rdi+0x4],0x32
  000bc:    	jne    0x3ac59
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000c2:    	mov    rax,QWORD PTR [rbp-0x18]
  000c6:    	mov    rax,QWORD PTR [rax]
  000c9:    	mov    rax,QWORD PTR [rax]
  000cc:    	mov    rax,QWORD PTR [rax]
  000cf:    	mov    rax,QWORD PTR [rax-0x38]
  000d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000e1: 00 	test   rdi,0x1
  000e8:    	je     0x3ac68
  000ee:    	add    rdi,0x2
  000f2:    	jo     0x3ac68
  000f8: ff 	mov    QWORD PTR [r14-0xa0],rdi
:00003 dynvar(4, %4) = %14
  000ff:    	mov    rax,QWORD PTR [rbp-0x18]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax]
  0010c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00113:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  00117:    	mov    rax,QWORD PTR [rbp-0x18]
  0011b:    	mov    rax,QWORD PTR [rax]
  0011e:    	mov    rax,QWORD PTR [rax]
  00121:    	mov    rax,QWORD PTR [rax]
  00124:    	mov    rax,QWORD PTR [rax-0x20]
  00128: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %2 = %14.call to_f()                 [Integer]
  0012f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00136: 00 	test   rdi,0x1
  0013d:    	je     0x3ac77
  00143: 26 	cmp    DWORD PTR [rip+0xffffffffffffc904],0x26        # 0xffffca4e
  0014a:    	jne    0x3ac77
  00150:    	sar    rdi,1
  00153:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  00158:    	mov    rax,QWORD PTR [rbp-0x18]
  0015c:    	mov    rax,QWORD PTR [rax]
  0015f:    	mov    rax,QWORD PTR [rax]
  00162:    	mov    rax,QWORD PTR [rax]
  00165:    	mov    rax,QWORD PTR [rax-0x28]
  00169: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00170: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00177: 00 	test   rdi,0x1
  0017e:    	je     0x3ac86
  00184: 26 	cmp    DWORD PTR [rip+0xffffffffffffc8c3],0x26        # 0xffffca4e
  0018b:    	jne    0x3ac86
  00191:    	sar    rdi,1
  00194:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  00199:    	mov    rax,QWORD PTR [rbp-0x18]
  0019d:    	mov    rax,QWORD PTR [rax]
  001a0:    	mov    rax,QWORD PTR [rax-0x20]
  001a4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001ab: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001b2: 00 	test   rdi,0x1
  001b9:    	je     0x3aca2
  001bf: 26 	cmp    DWORD PTR [rip+0xffffffffffffc888],0x26        # 0xffffca4e
  001c6:    	jne    0x3aca2
  001cc:    	sar    rdi,1
  001cf:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001d4:    	mov    rax,QWORD PTR [rbp-0x18]
  001d8:    	mov    rax,QWORD PTR [rax]
  001db:    	mov    rax,QWORD PTR [rax]
  001de:    	mov    rax,QWORD PTR [rax-0x20]
  001e2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001e9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f0: 00 	test   rdi,0x1
  001f7:    	je     0x3accb
  001fd: 26 	cmp    DWORD PTR [rip+0xffffffffffffc84a],0x26        # 0xffffca4e
  00204:    	jne    0x3accb
  0020a:    	sar    rdi,1
  0020d:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00212:    	mov    rdi,QWORD PTR [r14-0x38]
  00216: 00 	test   rdi,0x1
  0021d:    	je     0x3ad01
  00223: 26 	cmp    DWORD PTR [rip+0xffffffffffffc824],0x26        # 0xffffca4e
  0022a:    	jne    0x3ad01
  00230:    	sar    rdi,1
  00233:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  00238:    	mov    rax,QWORD PTR [rbp-0x18]
  0023c:    	mov    rax,QWORD PTR [rax-0x20]
  00240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00024 %7 = %14.call to_f()                 [Integer]
  00247: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0024e: 00 	test   rdi,0x1
  00255:    	je     0x3ad44
  0025b: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7ec],0x26        # 0xffffca4e
  00262:    	jne    0x3ad44
  00268:    	sar    rdi,1
  0026b:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00270:    	mov    rax,QWORD PTR [rbp-0x18]
  00274:    	mov    rax,QWORD PTR [rax]
  00277:    	mov    rax,QWORD PTR [rax]
  0027a:    	mov    rax,QWORD PTR [rax]
  0027d:    	mov    rax,QWORD PTR [rax-0x40]
  00281: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %6 / %14                       [Float][Float]
  00288: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028f: 00 	test   rdi,0x1
  00296:    	jne    0x3ad94
  0029c: 00 	test   rdi,0x2
  002a3:    	je     0x2e0
  002a9:    	xorps  xmm8,xmm8
  002ad: 00 	movabs rax,0x8000000000000002
  002b7:    	cmp    rdi,rax
  002ba:    	je     0x2f3
  002c0:    	mov    rax,rdi
  002c3:    	sar    rax,0x3f
  002c7:    	add    rax,0x2
  002cb:    	and    rdi,0xfffffffffffffffc
  002cf:    	or     rdi,rax
  002d2:    	rol    rdi,0x3d
  002d6:    	movq   xmm8,rdi
  002db:    	jmp    0x2f3
  002e0:    	call   0xffff9721
  002e5:    	test   rax,rax
  002e8:    	je     0x3ad94
  002ee:    	movq   xmm8,xmm0
  002f3:    	movq   rax,xmm8
  002f8:    	test   rax,rax
  002fb:    	je     0xffff96ed
  00301:    	movq   xmm0,xmm6
  00305:    	divsd  xmm0,xmm8
  0030a:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  0030f:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00314: 22 	movq   xmm9,QWORD PTR [rip+0x2278]        # 0x2595
  0031d: 00 	mov    rax,0x2
  00324: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0032b:    	movq   rax,xmm9
  00330:    	test   rax,rax
  00333:    	je     0xffff96ed
  00339:    	movq   xmm0,xmm2
  0033d:    	divsd  xmm0,xmm9
  00342:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00347:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0034c: 22 	movq   xmm9,QWORD PTR [rip+0x2250]        # 0x25a5
  00355: 00 	mov    rax,0x2
  0035c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00363:    	movq   rax,xmm9
  00368:    	test   rax,rax
  0036b:    	je     0xffff96ed
  00371:    	movq   xmm0,xmm2
  00375:    	divsd  xmm0,xmm9
  0037a:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  0037f:    	movq   xmm10,xmm8
  00384:    	movq   rax,xmm9
  00389:    	test   rax,rax
  0038c:    	je     0xffff96ed
  00392:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  00397:    	mov    rax,QWORD PTR [rbp-0x18]
  0039b:    	mov    rax,QWORD PTR [rax]
  0039e:    	mov    rax,QWORD PTR [rax]
  003a1:    	mov    rax,QWORD PTR [rax]
  003a4:    	mov    rax,QWORD PTR [rax-0x40]
  003a8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003af: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x3adf1
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x407
  003d0:    	xorps  xmm8,xmm8
  003d4: 00 	movabs rax,0x8000000000000002
  003de:    	cmp    rdi,rax
  003e1:    	je     0x41a
  003e7:    	mov    rax,rdi
  003ea:    	sar    rax,0x3f
  003ee:    	add    rax,0x2
  003f2:    	and    rdi,0xfffffffffffffffc
  003f6:    	or     rdi,rax
  003f9:    	rol    rdi,0x3d
  003fd:    	movq   xmm8,rdi
  00402:    	jmp    0x41a
  00407:    	call   0xffff9721
  0040c:    	test   rax,rax
  0040f:    	je     0x3adf1
  00415:    	movq   xmm8,xmm0
  0041a:    	movq   rax,xmm8
  0041f:    	test   rax,rax
  00422:    	je     0xffff96ed
  00428:    	movq   xmm0,xmm7
  0042c:    	divsd  xmm0,xmm8
  00431:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00436:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0043b: 21 	movq   xmm9,QWORD PTR [rip+0x2171]        # 0x25b5
  00444: 00 	mov    rax,0x2
  0044b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00452:    	movq   rax,xmm9
  00457:    	test   rax,rax
  0045a:    	je     0xffff96ed
  00460:    	movq   xmm0,xmm3
  00464:    	divsd  xmm0,xmm9
  00469:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  0046e:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00473: 00 	xorps  xmm8,XMMWORD PTR [rip+0x214a]        # 0x25c5
:00043 %15 = literal[2.0]
  0047b: 21 	movq   xmm9,QWORD PTR [rip+0x2151]        # 0x25d5
  00484: 00 	mov    rax,0x2
  0048b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00492:    	movq   rax,xmm9
  00497:    	test   rax,rax
  0049a:    	je     0xffff96ed
  004a0:    	movq   xmm0,xmm3
  004a4:    	divsd  xmm0,xmm9
  004a9:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004ae:    	movq   xmm11,xmm8
  004b3:    	movq   rax,xmm9
  004b8:    	test   rax,rax
  004bb:    	je     0xffff96ed
  004c1:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc588]        # 0xffffca55
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x2121]        # 0x25f5
  004d4:    	jne    0x3ae6d
  004da: 00 	mov    rax,QWORD PTR [rip+0x2104]        # 0x25e5
  004e1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004e8: 21 	movq   xmm9,QWORD PTR [rip+0x2114]        # 0x2605
  004f1: 00 	movabs rax,0xff80000000000006
  004fb: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00502:    	movq   xmm0,xmm10
  00507:    	call   0xffff9845
  0050c: ff 	mov    QWORD PTR [r14-0xb0],rax
  00513:    	movq   xmm0,xmm11
  00518:    	call   0xffff9845
  0051d: ff 	mov    QWORD PTR [r14-0xb8],rax
  00524: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0052b: 00 	test   rdi,0x7
  00532:    	jne    0x3af2b
  00538:    	cmp    DWORD PTR [rdi+0x4],0x29
  0053c:    	jne    0x3af2b
  00542: 26 	cmp    DWORD PTR [rip+0xffffffffffffc505],0x26        # 0xffffca4e
  00549:    	jne    0x3af2b
  0054f: 00 	mov    r9,0x0
  00556:    	sub    rsp,0x50
  0055a:    	movq   QWORD PTR [rsp],xmm2
  0055f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00565:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00571:    	movq   QWORD PTR [rsp+0x20],xmm6
  00577:    	movq   QWORD PTR [rsp+0x28],xmm7
  0057d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00584: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0058b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00592:    	mov    rdx,rdi
  00595:    	mov    QWORD PTR [rsp-0x40],rcx
  0059a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  005a3: ff 	lea    rcx,[r14-0xb0]
  005aa: 00 	mov    r8,0x3
  005b1:    	mov    rsi,QWORD PTR [rbx]
  005b4:    	mov    QWORD PTR [rsp-0x18],rsi
  005b9:    	lea    rsi,[rsp-0x18]
  005be:    	mov    QWORD PTR [rbx],rsi
  005c1:    	lea    r14,[rsp-0x10]
  005c6:    	mov    QWORD PTR [rsp-0x20],r14
  005cb:    	call   0x3afa4
  005d0:    	lea    r14,[rbp-0x8]
  005d4:    	mov    QWORD PTR [rbx],r14
  005d7:    	mov    r14,QWORD PTR [rbp-0x10]
  005db:    	movq   xmm2,QWORD PTR [rsp]
  005e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005fe: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00605: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0060c: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00613:    	add    rsp,0x50
  00617: 4d 	movabs r13,0x564da0e75380
  00621:    	test   rax,rax
  00624:    	je     0xffff96c8
  0062a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00631: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x3afd6
  00645:    	cmp    DWORD PTR [rdi+0x4],0x28
  00649:    	jne    0x3afd6
  0064f: 26 	cmp    DWORD PTR [rip+0xffffffffffffc3f8],0x26        # 0xffffca4e
  00656:    	jne    0x3afd6
  0065c:    	sub    rsp,0x50
  00660:    	movq   QWORD PTR [rsp],xmm2
  00665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00671:    	movq   QWORD PTR [rsp+0x18],xmm5
  00677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0067d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00683: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0068a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00691: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00698: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006a1: ff 	mov    rax,QWORD PTR [r14-0xa0]
  006a8:    	mov    QWORD PTR [rsp-0x40],rax
  006ad: 00 	mov    rdi,0x0
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd: 07 	movabs rax,0x700000044
  006c7:    	mov    QWORD PTR [rsp-0x30],rax
  006cc: 4d 	movabs r13,0x564da0e6bec0
  006d6:    	mov    rsi,QWORD PTR [rbx]
  006d9:    	mov    QWORD PTR [rsp-0x18],rsi
  006de:    	lea    rsi,[rsp-0x18]
  006e3:    	mov    QWORD PTR [rbx],rsi
  006e6:    	lea    r14,[rsp-0x10]
  006eb:    	mov    QWORD PTR [rsp-0x20],r14
  006f0:    	call   0xffffd301
  006f5:    	lea    r14,[rbp-0x8]
  006f9:    	mov    QWORD PTR [rbx],r14
  006fc:    	mov    r14,QWORD PTR [rbp-0x10]
  00700:    	movq   xmm2,QWORD PTR [rsp]
  00705:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00711:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00717:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00723: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00731: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00738:    	add    rsp,0x50
  0073c: 4d 	movabs r13,0x564da0e753b0
  00746:    	test   rax,rax
  00749:    	je     0xffff96c8
  0074f:    	mov    QWORD PTR [r14-0x80],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  00753: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc2fb]        # 0xffffca55
  0075a: 00 	cmp    rax,QWORD PTR [rip+0x1ec4]        # 0x2625
  00761:    	jne    0x3b04f
  00767: 00 	mov    rax,QWORD PTR [rip+0x1ea7]        # 0x2615
  0076e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00057 %16 = const[Vec]                     [Vec]
  00775: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc2d9]        # 0xffffca55
  0077c: 00 	cmp    rax,QWORD PTR [rip+0x1ec2]        # 0x2645
  00783:    	jne    0x3b10d
  00789: 00 	mov    rax,QWORD PTR [rip+0x1ea5]        # 0x2635
  00790: ff 	mov    QWORD PTR [r14-0xb0],rax
:00058 %17 = literal[0.0]
  00797: 1e 	movq   xmm8,QWORD PTR [rip+0x1eb5]        # 0x2655
  007a0: 00 	movabs rax,0x8000000000000002
  007aa: ff 	mov    QWORD PTR [r14-0xb8],rax
:00059 %18 = literal[0.0]
  007b1: 1e 	movq   xmm9,QWORD PTR [rip+0x1eab]        # 0x2665
  007ba: 00 	movabs rax,0x8000000000000002
  007c4: ff 	mov    QWORD PTR [r14-0xc0],rax
:00060 %19 = literal[0.0]
  007cb: 1e 	movq   xmm12,QWORD PTR [rip+0x1ea1]        # 0x2675
  007d4: 00 	movabs rax,0x8000000000000002
  007de: ff 	mov    QWORD PTR [r14-0xc8],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  007ec: 00 	test   rdi,0x7
  007f3:    	jne    0x3b1cb
  007f9:    	cmp    DWORD PTR [rdi+0x4],0x29
  007fd:    	jne    0x3b1cb
  00803: 26 	cmp    DWORD PTR [rip+0xffffffffffffc244],0x26        # 0xffffca4e
  0080a:    	jne    0x3b1cb
  00810: 00 	mov    r9,0x0
  00817:    	sub    rsp,0x60
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	movq   QWORD PTR [rsp+0x20],xmm6
  00838:    	movq   QWORD PTR [rsp+0x28],xmm7
  0083e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00845: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00853: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00861:    	mov    rdx,rdi
  00864:    	mov    QWORD PTR [rsp-0x40],rcx
  00869: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00872: ff 	lea    rcx,[r14-0xb8]
  00879: 00 	mov    r8,0x3
  00880:    	mov    rsi,QWORD PTR [rbx]
  00883:    	mov    QWORD PTR [rsp-0x18],rsi
  00888:    	lea    rsi,[rsp-0x18]
  0088d:    	mov    QWORD PTR [rbx],rsi
  00890:    	lea    r14,[rsp-0x10]
  00895:    	mov    QWORD PTR [rsp-0x20],r14
  0089a:    	call   0x3b244
  0089f:    	lea    r14,[rbp-0x8]
  008a3:    	mov    QWORD PTR [rbx],r14
  008a6:    	mov    r14,QWORD PTR [rbp-0x10]
  008aa:    	movq   xmm2,QWORD PTR [rsp]
  008af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f0:    	add    rsp,0x60
  008f4: 4d 	movabs r13,0x564da0e75430
  008fe:    	test   rax,rax
  00901:    	je     0xffff96c8
  00907: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 
:00064 %16 = %10
  0090e:    	mov    rax,QWORD PTR [r14-0x80]
  00912: ff 	mov    QWORD PTR [r14-0xb0],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00919: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00920: 00 	test   rdi,0x7
  00927:    	jne    0x3b276
  0092d:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00931:    	jne    0x3b276
  00937: 26 	cmp    DWORD PTR [rip+0xffffffffffffc110],0x26        # 0xffffca4e
  0093e:    	jne    0x3b276
  00944: 00 	mov    r9,0x0
  0094b:    	sub    rsp,0x60
  0094f:    	movq   QWORD PTR [rsp],xmm2
  00954:    	movq   QWORD PTR [rsp+0x8],xmm3
  0095a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00960:    	movq   QWORD PTR [rsp+0x18],xmm5
  00966:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00972: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00979: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00980: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00987: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0098e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00995:    	mov    rdx,rdi
  00998:    	mov    QWORD PTR [rsp-0x40],rcx
  0099d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009a6: ff 	lea    rcx,[r14-0xa8]
  009ad: 00 	mov    r8,0x2
  009b4:    	mov    rsi,QWORD PTR [rbx]
  009b7:    	mov    QWORD PTR [rsp-0x18],rsi
  009bc:    	lea    rsi,[rsp-0x18]
  009c1:    	mov    QWORD PTR [rbx],rsi
  009c4:    	lea    r14,[rsp-0x10]
  009c9:    	mov    QWORD PTR [rsp-0x20],r14
  009ce:    	call   0x3b2ef
  009d3:    	lea    r14,[rbp-0x8]
  009d7:    	mov    QWORD PTR [rbx],r14
  009da:    	mov    r14,QWORD PTR [rbp-0x10]
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009fb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a01: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a08: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a0f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a16: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a1d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a24:    	add    rsp,0x60
  00a28: 4d 	movabs r13,0x564da0e75470
  00a32:    	test   rax,rax
  00a35:    	je     0xffff96c8
  00a3b: ff 	mov    QWORD PTR [r14-0x88],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a42: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc00c]        # 0xffffca55
  00a49: 00 	cmp    rax,QWORD PTR [rip+0x1c45]        # 0x2695
  00a50:    	jne    0x3b321
  00a56: 00 	mov    rax,QWORD PTR [rip+0x1c28]        # 0x2685
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a6b: 00 	test   rdi,0x7
  00a72:    	jne    0x3b3fb
  00a78:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a7c:    	jne    0x3b3fb
  00a82: 26 	cmp    DWORD PTR [rip+0xffffffffffffbfc5],0x26        # 0xffffca4e
  00a89:    	jne    0x3b3fb
  00a8f: 00 	mov    r9,0x0
  00a96:    	sub    rsp,0x60
  00a9a:    	movq   QWORD PTR [rsp],xmm2
  00a9f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aab:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ab7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00abd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ac4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00acb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ad2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ad9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ae0:    	mov    rdx,rdi
  00ae3:    	mov    QWORD PTR [rsp-0x40],rcx
  00ae8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00af1: ff 	lea    rcx,[r14-0xa8]
  00af8: 00 	mov    r8,0x0
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   0x3b474
  00b1e:    	lea    r14,[rbp-0x8]
  00b22:    	mov    QWORD PTR [rbx],r14
  00b25:    	mov    r14,QWORD PTR [rbp-0x10]
  00b29:    	movq   xmm2,QWORD PTR [rsp]
  00b2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b6f:    	add    rsp,0x60
  00b73: 4d 	movabs r13,0x564da0e754b0
  00b7d:    	test   rax,rax
  00b80:    	je     0xffff96c8
  00b86: ff 	mov    QWORD PTR [r14-0x90],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b8d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b91:    	mov    rax,QWORD PTR [rdi+0x10]
  00b95: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 0: i32
  00b9c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ba7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bae: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00bb5: 00 	test   rdi,0x7
  00bbc:    	jne    0x3b4a6
  00bc2:    	cmp    DWORD PTR [rdi+0x4],0xb
  00bc6:    	jne    0x3b4a6
  00bcc: 00 	test   rsi,0x1
  00bd3:    	je     0x3b4a6
  00bd9:    	sar    rsi,1
  00bdc:    	sub    rsp,0x60
  00be0:    	movq   QWORD PTR [rsp],xmm2
  00be5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00beb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bf1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bf7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bfd:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c03: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c0a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c11: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00c18: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00c1f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00c26: 4d 	movabs rax,0x564da0819c40
  00c30:    	call   rax
  00c32:    	movq   xmm2,QWORD PTR [rsp]
  00c37:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c3d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c43:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c49:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c4f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c55: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c5c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c63: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c6a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c71: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c78:    	add    rsp,0x60
  00c7c: 4d 	movabs r13,0x564da0e754f0
  00c86:    	test   rax,rax
  00c89:    	je     0xffff96c8
  00c8f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00c96: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c9d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00ca4: ff 	mov    rax,QWORD PTR [r14-0x90]
  00cab: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00cb2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cb9: 00 	test   rdi,0x7
  00cc0:    	jne    0x3b51f
  00cc6:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00cca:    	jne    0x3b51f
  00cd0: 26 	cmp    DWORD PTR [rip+0xffffffffffffbd77],0x26        # 0xffffca4e
  00cd7:    	jne    0x3b51f
  00cdd:    	sub    rsp,0x60
  00ce1:    	movq   QWORD PTR [rsp],xmm2
  00ce6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cec:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cf2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cf8:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cfe:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d04: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00d0b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d12: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d19: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d20: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d27: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d30: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d37:    	mov    QWORD PTR [rsp-0x40],rax
  00d3c: 00 	mov    rdi,0x2
  00d43: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00d4a:    	mov    QWORD PTR [rsp-0x48],rax
  00d4f: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00d56:    	mov    QWORD PTR [rsp-0x50],rax
  00d5b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d64: 10 	movabs rax,0x1000000046
  00d6e:    	mov    QWORD PTR [rsp-0x30],rax
  00d73: 4d 	movabs r13,0x564da0e8bc90
  00d7d:    	mov    rsi,QWORD PTR [rbx]
  00d80:    	mov    QWORD PTR [rsp-0x18],rsi
  00d85:    	lea    rsi,[rsp-0x18]
  00d8a:    	mov    QWORD PTR [rbx],rsi
  00d8d:    	lea    r14,[rsp-0x10]
  00d92:    	mov    QWORD PTR [rsp-0x20],r14
  00d97:    	call   0xffffd5f9
  00d9c:    	lea    r14,[rbp-0x8]
  00da0:    	mov    QWORD PTR [rbx],r14
  00da3:    	mov    r14,QWORD PTR [rbp-0x10]
  00da7:    	movq   xmm2,QWORD PTR [rsp]
  00dac:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00db2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dbe:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00dc4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dca: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00dd1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dd8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ddf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00de6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ded:    	add    rsp,0x60
  00df1: 4d 	movabs r13,0x564da0e75530
  00dfb:    	test   rax,rax
  00dfe:    	je     0xffff96c8
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00e04:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e08:    	mov    rax,QWORD PTR [rdi+0x10]
  00e0c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  00e13: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00e1e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e25: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00e2c: 00 	test   rdi,0x7
  00e33:    	jne    0x3b598
  00e39:    	cmp    DWORD PTR [rdi+0x4],0xb
  00e3d:    	jne    0x3b598
  00e43: 00 	test   rsi,0x1
  00e4a:    	je     0x3b598
  00e50:    	sar    rsi,1
  00e53:    	sub    rsp,0x60
  00e57:    	movq   QWORD PTR [rsp],xmm2
  00e5c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e62:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e68:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e6e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e74:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e7a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e81: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e88: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e8f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e96: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e9d: 4d 	movabs rax,0x564da0819c40
  00ea7:    	call   rax
  00ea9:    	movq   xmm2,QWORD PTR [rsp]
  00eae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eb4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ec0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ec6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ecc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ed3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00eda: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ee1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00ee8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00eef:    	add    rsp,0x60
  00ef3: 4d 	movabs r13,0x564da0e75570
  00efd:    	test   rax,rax
  00f00:    	je     0xffff96c8
  00f06: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %15 = %11
  00f0d: ff 	mov    rax,QWORD PTR [r14-0x88]
  00f14: ff 	mov    QWORD PTR [r14-0xa8],rax
:00084 %16 = %12
  00f1b: ff 	mov    rax,QWORD PTR [r14-0x90]
  00f22: ff 	mov    QWORD PTR [r14-0xb0],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00f29: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f30: 00 	test   rdi,0x7
  00f37:    	jne    0x3b611
  00f3d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00f41:    	jne    0x3b611
  00f47: 26 	cmp    DWORD PTR [rip+0xffffffffffffbb00],0x26        # 0xffffca4e
  00f4e:    	jne    0x3b611
  00f54:    	sub    rsp,0x60
  00f58:    	movq   QWORD PTR [rsp],xmm2
  00f5d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f63:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f69:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f6f:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f75:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f7b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f82: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f89: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f90: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f97: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f9e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fa7: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00fae:    	mov    QWORD PTR [rsp-0x40],rax
  00fb3: 00 	mov    rdi,0x2
  00fba: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00fc1:    	mov    QWORD PTR [rsp-0x48],rax
  00fc6: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00fcd:    	mov    QWORD PTR [rsp-0x50],rax
  00fd2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fdb: 10 	movabs rax,0x1000000046
  00fe5:    	mov    QWORD PTR [rsp-0x30],rax
  00fea: 4d 	movabs r13,0x564da0e8bc90
  00ff4:    	mov    rsi,QWORD PTR [rbx]
  00ff7:    	mov    QWORD PTR [rsp-0x18],rsi
  00ffc:    	lea    rsi,[rsp-0x18]
  01001:    	mov    QWORD PTR [rbx],rsi
  01004:    	lea    r14,[rsp-0x10]
  01009:    	mov    QWORD PTR [rsp-0x20],r14
  0100e:    	call   0xffffd5f9
  01013:    	lea    r14,[rbp-0x8]
  01017:    	mov    QWORD PTR [rbx],r14
  0101a:    	mov    r14,QWORD PTR [rbp-0x10]
  0101e:    	movq   xmm2,QWORD PTR [rsp]
  01023:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01029:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0102f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01035:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0103b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01041: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01048: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0104f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01056: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0105d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01064:    	add    rsp,0x60
  01068: 4d 	movabs r13,0x564da0e755b0
  01072:    	test   rax,rax
  01075:    	je     0xffff96c8
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  0107b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0107f:    	mov    rax,QWORD PTR [rdi+0x10]
  01083: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 %15 = 2: i32
  0108a: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01095: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0109c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  010a3: 00 	test   rdi,0x7
  010aa:    	jne    0x3b68a
  010b0:    	cmp    DWORD PTR [rdi+0x4],0xb
  010b4:    	jne    0x3b68a
  010ba: 00 	test   rsi,0x1
  010c1:    	je     0x3b68a
  010c7:    	sar    rsi,1
  010ca:    	sub    rsp,0x60
  010ce:    	movq   QWORD PTR [rsp],xmm2
  010d3:    	movq   QWORD PTR [rsp+0x8],xmm3
  010d9:    	movq   QWORD PTR [rsp+0x10],xmm4
  010df:    	movq   QWORD PTR [rsp+0x18],xmm5
  010e5:    	movq   QWORD PTR [rsp+0x20],xmm6
  010eb:    	movq   QWORD PTR [rsp+0x28],xmm7
  010f1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010f8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010ff: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01106: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0110d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01114: 4d 	movabs rax,0x564da0819c40
  0111e:    	call   rax
  01120:    	movq   xmm2,QWORD PTR [rsp]
  01125:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0112b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01131:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01137:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0113d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01143: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0114a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01151: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01158: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0115f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01166:    	add    rsp,0x60
  0116a: 4d 	movabs r13,0x564da0e755f0
  01174:    	test   rax,rax
  01177:    	je     0xffff96c8
  0117d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = %11
  01184: ff 	mov    rax,QWORD PTR [r14-0x88]
  0118b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %16 = %12
  01192: ff 	mov    rax,QWORD PTR [r14-0x90]
  01199: ff 	mov    QWORD PTR [r14-0xb0],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  011a0: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  011a7: 00 	test   rdi,0x7
  011ae:    	jne    0x3b703
  011b4:    	cmp    DWORD PTR [rdi+0x4],0x2a
  011b8:    	jne    0x3b703
  011be: 26 	cmp    DWORD PTR [rip+0xffffffffffffb889],0x26        # 0xffffca4e
  011c5:    	jne    0x3b703
  011cb:    	sub    rsp,0x60
  011cf:    	movq   QWORD PTR [rsp],xmm2
  011d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  011da:    	movq   QWORD PTR [rsp+0x10],xmm4
  011e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  011e6:    	movq   QWORD PTR [rsp+0x20],xmm6
  011ec:    	movq   QWORD PTR [rsp+0x28],xmm7
  011f2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  011f9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01200: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01207: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0120e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01215: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0121e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01225:    	mov    QWORD PTR [rsp-0x40],rax
  0122a: 00 	mov    rdi,0x2
  01231: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01238:    	mov    QWORD PTR [rsp-0x48],rax
  0123d: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01244:    	mov    QWORD PTR [rsp-0x50],rax
  01249: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01252: 10 	movabs rax,0x1000000046
  0125c:    	mov    QWORD PTR [rsp-0x30],rax
  01261: 4d 	movabs r13,0x564da0e8bc90
  0126b:    	mov    rsi,QWORD PTR [rbx]
  0126e:    	mov    QWORD PTR [rsp-0x18],rsi
  01273:    	lea    rsi,[rsp-0x18]
  01278:    	mov    QWORD PTR [rbx],rsi
  0127b:    	lea    r14,[rsp-0x10]
  01280:    	mov    QWORD PTR [rsp-0x20],r14
  01285:    	call   0xffffd5f9
  0128a:    	lea    r14,[rbp-0x8]
  0128e:    	mov    QWORD PTR [rbx],r14
  01291:    	mov    r14,QWORD PTR [rbp-0x10]
  01295:    	movq   xmm2,QWORD PTR [rsp]
  0129a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012a6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012ac:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012b2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012b8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012bf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012c6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012cd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012d4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012db:    	add    rsp,0x60
  012df: 4d 	movabs r13,0x564da0e75630
  012e9:    	test   rax,rax
  012ec:    	je     0xffff96c8
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  012f2:    	mov    rdi,QWORD PTR [rbp-0x30]
  012f6:    	mov    rax,QWORD PTR [rdi+0x18]
  012fa: ff 	mov    QWORD PTR [r14-0xa0],rax
:00097 %15 = %11
  01301: ff 	mov    rax,QWORD PTR [r14-0x88]
  01308: ff 	mov    QWORD PTR [r14-0xa8],rax
:00098 %16 = %12
  0130f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01316: ff 	mov    QWORD PTR [r14-0xb0],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  0131d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01324: 00 	test   rdi,0x7
  0132b:    	jne    0x3b77c
  01331:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01335:    	jne    0x3b77c
  0133b: 26 	cmp    DWORD PTR [rip+0xffffffffffffb70c],0x26        # 0xffffca4e
  01342:    	jne    0x3b77c
  01348:    	sub    rsp,0x60
  0134c:    	movq   QWORD PTR [rsp],xmm2
  01351:    	movq   QWORD PTR [rsp+0x8],xmm3
  01357:    	movq   QWORD PTR [rsp+0x10],xmm4
  0135d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01363:    	movq   QWORD PTR [rsp+0x20],xmm6
  01369:    	movq   QWORD PTR [rsp+0x28],xmm7
  0136f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01376: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0137d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01384: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0138b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01392: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0139b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  013a2:    	mov    QWORD PTR [rsp-0x40],rax
  013a7: 00 	mov    rdi,0x2
  013ae: ff 	mov    rax,QWORD PTR [r14-0xa8]
  013b5:    	mov    QWORD PTR [rsp-0x48],rax
  013ba: ff 	mov    rax,QWORD PTR [r14-0xb0]
  013c1:    	mov    QWORD PTR [rsp-0x50],rax
  013c6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013cf: 0e 	movabs rax,0xe00000048
  013d9:    	mov    QWORD PTR [rsp-0x30],rax
  013de: 4d 	movabs r13,0x564da0e92080
  013e8:    	mov    rsi,QWORD PTR [rbx]
  013eb:    	mov    QWORD PTR [rsp-0x18],rsi
  013f0:    	lea    rsi,[rsp-0x18]
  013f5:    	mov    QWORD PTR [rbx],rsi
  013f8:    	lea    r14,[rsp-0x10]
  013fd:    	mov    QWORD PTR [rsp-0x20],r14
  01402:    	call   0xffffdbc5
  01407:    	lea    r14,[rbp-0x8]
  0140b:    	mov    QWORD PTR [rbx],r14
  0140e:    	mov    r14,QWORD PTR [rbp-0x10]
  01412:    	movq   xmm2,QWORD PTR [rsp]
  01417:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0141d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01423:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01429:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0142f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01435: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0143c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01443: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0144a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01451: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01458:    	add    rsp,0x60
  0145c: 4d 	movabs r13,0x564da0e75690
  01466:    	test   rax,rax
  01469:    	je     0xffff96c8
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  0146f: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01476: 00 	test   rdi,0x7
  0147d:    	jne    0x3b7f5
  01483:    	cmp    DWORD PTR [rdi+0x4],0x30
  01487:    	jne    0x3b7f5
  0148d: 26 	cmp    DWORD PTR [rip+0xffffffffffffb5ba],0x26        # 0xffffca4e
  01494:    	jne    0x3b7f5
  0149a:    	mov    esi,DWORD PTR [rip+0x1201]        # 0x26a1
  014a0:    	cmp    esi,0xffffffff
  014a3:    	je     0x3b86e
  014a9:    	cmp    WORD PTR [rdi+0x2],0x3
  014ae:    	jne    0x14c7
  014b4:    	cmp    esi,0x6
  014b7:    	jge    0x14c7
  014bd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014c2:    	jmp    0x1567
  014c7:    	sub    rsp,0x60
  014cb:    	movq   QWORD PTR [rsp],xmm2
  014d0:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d6:    	movq   QWORD PTR [rsp+0x10],xmm4
  014dc:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e2:    	movq   QWORD PTR [rsp+0x20],xmm6
  014e8:    	movq   QWORD PTR [rsp+0x28],xmm7
  014ee: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014f5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014fc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01503: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0150a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01511: 4d 	movabs rax,0x564da0797d70
  0151b:    	call   rax
  0151d:    	movq   xmm2,QWORD PTR [rsp]
  01522:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01528:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0152e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01534:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0153a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01540: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01547: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0154e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01555: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0155c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01563:    	add    rsp,0x60
  01567: ff 	mov    QWORD PTR [r14-0xa0],rax
:00103 
:00105 condnotbr %14 =>:00148
  0156e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01575:    	or     rax,0x10
  01579:    	cmp    rax,0x14
  0157d:    	je     0x2576
:00106 %14 = %12
  01583: ff 	mov    rax,QWORD PTR [r14-0x90]
  0158a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  01591: 00 	cmp    DWORD PTR [rip+0x110d],0x0        # 0x26a5
  01598:    	jl     0x3b92b
  0159e:    	je     0x3b9a4
  015a4: 01 	sub    DWORD PTR [rip+0x10fa],0x1        # 0x26a5
  015ab:    	xor    rdi,rdi
  015ae:    	jmp    0x3b92b
  015b3:    	sub    rsp,0x60
  015b7:    	movq   QWORD PTR [rsp],xmm2
  015bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  015c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  015c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  015ce:    	movq   QWORD PTR [rsp+0x20],xmm6
  015d4:    	movq   QWORD PTR [rsp+0x28],xmm7
  015da: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015e1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015e8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015ef: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015f6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015fd:    	mov    r15d,0x32
  01603: 4d 	movabs r13,0x564da0e75700
  0160d:    	cmp    QWORD PTR [r13+0x8],0x0
  01612:    	je     0x3b9bf
  01618:    	cmp    r15d,DWORD PTR [r13-0x8]
  0161c:    	jne    0x3b9bf
  01622:    	mov    eax,DWORD PTR [rip+0xffffffffffffb426]        # 0xffffca4e
  01628:    	cmp    DWORD PTR [r13-0x4],eax
  0162c:    	jne    0x3b9bf
  01632: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0163b:    	mov    rax,QWORD PTR [r14-0x30]
  0163f:    	mov    QWORD PTR [rsp-0x40],rax
  01644: 00 	mov    rdi,0x1
  0164b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01652:    	mov    QWORD PTR [rsp-0x48],rax
  01657: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01660:    	mov    rax,QWORD PTR [r13+0x10]
  01664:    	mov    QWORD PTR [rsp-0x30],rax
  01669:    	mov    rax,QWORD PTR [r13+0x8]
  0166d:    	mov    r13,QWORD PTR [r13+0x18]
  01671:    	mov    rsi,QWORD PTR [rbx]
  01674:    	mov    QWORD PTR [rsp-0x18],rsi
  01679:    	lea    rsi,[rsp-0x18]
  0167e:    	mov    QWORD PTR [rbx],rsi
  01681:    	lea    r14,[rsp-0x10]
  01686:    	mov    QWORD PTR [rsp-0x20],r14
  0168b:    	call   rax
  0168d:    	lea    r14,[rbp-0x8]
  01691:    	mov    QWORD PTR [rbx],r14
  01694:    	mov    r14,QWORD PTR [rbp-0x10]
  01698:    	movq   xmm2,QWORD PTR [rsp]
  0169d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016af:    	movq   xmm6,QWORD PTR [rsp+0x20]
  016b5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  016bb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  016c2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  016c9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  016d0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  016d7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  016de:    	add    rsp,0x60
  016e2:    	test   rax,rax
  016e5:    	je     0x3ba09
  016eb: ff 	mov    QWORD PTR [r14-0x98],rax
:00108 
:00110 %14 = dynvar(2, %2)
  016f2:    	mov    rax,QWORD PTR [rbp-0x18]
  016f6:    	mov    rax,QWORD PTR [rax]
  016f9:    	mov    rax,QWORD PTR [rax-0x28]
  016fd: ff 	mov    QWORD PTR [r14-0xa0],rax
:00111 %16 = dynvar(2, %2)
  01704:    	mov    rax,QWORD PTR [rbp-0x18]
  01708:    	mov    rax,QWORD PTR [rax]
  0170b:    	mov    rax,QWORD PTR [rax-0x28]
  0170f: ff 	mov    QWORD PTR [r14-0xb0],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  01716:    	sub    rsp,0x60
  0171a:    	movq   QWORD PTR [rsp],xmm2
  0171f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01725:    	movq   QWORD PTR [rsp+0x10],xmm4
  0172b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01731:    	movq   QWORD PTR [rsp+0x20],xmm6
  01737:    	movq   QWORD PTR [rsp+0x28],xmm7
  0173d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01744: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0174b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01752: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01759: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01760: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01767: 4d 	movabs rax,0x564da0826bb0
  01771:    	call   rax
  01773:    	mov    r15d,eax
  01776: 4d 	movabs r13,0x564da0e75750
  01780:    	cmp    QWORD PTR [r13+0x8],0x0
  01785:    	je     0x3ba18
  0178b:    	cmp    r15d,DWORD PTR [r13-0x8]
  0178f:    	jne    0x3ba18
  01795:    	mov    eax,DWORD PTR [rip+0xffffffffffffb2b3]        # 0xffffca4e
  0179b:    	cmp    DWORD PTR [r13-0x4],eax
  0179f:    	jne    0x3ba18
  017a5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017ae: ff 	mov    rax,QWORD PTR [r14-0xb0]
  017b5:    	mov    QWORD PTR [rsp-0x40],rax
  017ba: 00 	mov    rdi,0x0
  017c1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017ca:    	mov    rax,QWORD PTR [r13+0x10]
  017ce:    	mov    QWORD PTR [rsp-0x30],rax
  017d3:    	mov    rax,QWORD PTR [r13+0x8]
  017d7:    	mov    r13,QWORD PTR [r13+0x18]
  017db:    	mov    rsi,QWORD PTR [rbx]
  017de:    	mov    QWORD PTR [rsp-0x18],rsi
  017e3:    	lea    rsi,[rsp-0x18]
  017e8:    	mov    QWORD PTR [rbx],rsi
  017eb:    	lea    r14,[rsp-0x10]
  017f0:    	mov    QWORD PTR [rsp-0x20],r14
  017f5:    	call   rax
  017f7:    	lea    r14,[rbp-0x8]
  017fb:    	mov    QWORD PTR [rbx],r14
  017fe:    	mov    r14,QWORD PTR [rbp-0x10]
  01802:    	movq   xmm2,QWORD PTR [rsp]
  01807:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0180d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01813:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01819:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0181f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01825: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0182c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01833: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0183a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01841: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01848:    	add    rsp,0x60
  0184c:    	test   rax,rax
  0184f:    	je     0x3ba65
  01855: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  0185c:    	sub    rsp,0x60
  01860:    	movq   QWORD PTR [rsp],xmm2
  01865:    	movq   QWORD PTR [rsp+0x8],xmm3
  0186b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01871:    	movq   QWORD PTR [rsp+0x18],xmm5
  01877:    	movq   QWORD PTR [rsp+0x20],xmm6
  0187d:    	movq   QWORD PTR [rsp+0x28],xmm7
  01883: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0188a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01891: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01898: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0189f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  018a6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  018ad: 4d 	movabs rax,0x564da0826bb0
  018b7:    	call   rax
  018b9:    	mov    r15d,eax
  018bc: 4d 	movabs r13,0x564da0e75780
  018c6:    	cmp    QWORD PTR [r13+0x8],0x0
  018cb:    	je     0x3ba74
  018d1:    	cmp    r15d,DWORD PTR [r13-0x8]
  018d5:    	jne    0x3ba74
  018db:    	mov    eax,DWORD PTR [rip+0xffffffffffffb16d]        # 0xffffca4e
  018e1:    	cmp    DWORD PTR [r13-0x4],eax
  018e5:    	jne    0x3ba74
  018eb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018f4: ff 	mov    rax,QWORD PTR [r14-0x98]
  018fb:    	mov    QWORD PTR [rsp-0x40],rax
  01900: 00 	mov    rdi,0x0
  01907: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01910:    	mov    rax,QWORD PTR [r13+0x10]
  01914:    	mov    QWORD PTR [rsp-0x30],rax
  01919:    	mov    rax,QWORD PTR [r13+0x8]
  0191d:    	mov    r13,QWORD PTR [r13+0x18]
  01921:    	mov    rsi,QWORD PTR [rbx]
  01924:    	mov    QWORD PTR [rsp-0x18],rsi
  01929:    	lea    rsi,[rsp-0x18]
  0192e:    	mov    QWORD PTR [rbx],rsi
  01931:    	lea    r14,[rsp-0x10]
  01936:    	mov    QWORD PTR [rsp-0x20],r14
  0193b:    	call   rax
  0193d:    	lea    r14,[rbp-0x8]
  01941:    	mov    QWORD PTR [rbx],r14
  01944:    	mov    r14,QWORD PTR [rbp-0x10]
  01948:    	movq   xmm2,QWORD PTR [rsp]
  0194d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01953:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01959:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0195f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01965:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0196b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01972: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01979: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01980: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01987: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0198e:    	add    rsp,0x60
  01992:    	test   rax,rax
  01995:    	je     0x3bac1
  0199b: ff 	mov    QWORD PTR [r14-0xb0],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  019a2: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  019a9: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  019b0:    	sub    rsp,0x60
  019b4:    	movq   QWORD PTR [rsp],xmm2
  019b9:    	movq   QWORD PTR [rsp+0x8],xmm3
  019bf:    	movq   QWORD PTR [rsp+0x10],xmm4
  019c5:    	movq   QWORD PTR [rsp+0x18],xmm5
  019cb:    	movq   QWORD PTR [rsp+0x20],xmm6
  019d1:    	movq   QWORD PTR [rsp+0x28],xmm7
  019d7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019de: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019e5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019ec: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019f3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019fa:    	mov    rdx,rdi
  019fd:    	mov    rcx,rsi
  01a00:    	mov    rdi,rbx
  01a03:    	mov    rsi,r12
  01a06: 4d 	movabs rax,0x564da07da0d0
  01a10:    	call   rax
  01a12:    	movq   xmm2,QWORD PTR [rsp]
  01a17:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a1d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a23:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a29:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a2f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a35: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a3c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a43: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a4a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a51: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a58:    	add    rsp,0x60
  01a5c: 4d 	movabs r13,0x564da0e757b0
  01a66:    	test   rax,rax
  01a69:    	je     0xffff96c8
  01a6f: ff 	mov    QWORD PTR [r14-0xa8],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  01a76:    	sub    rsp,0x60
  01a7a:    	movq   QWORD PTR [rsp],xmm2
  01a7f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a85:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a8b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a91:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a97:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a9d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01aa4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01aab: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ab2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ab9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ac0: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01ac7: 4d 	movabs rax,0x564da0826bb0
  01ad1:    	call   rax
  01ad3:    	mov    r15d,eax
  01ad6: 4d 	movabs r13,0x564da0e757c0
  01ae0:    	cmp    QWORD PTR [r13+0x8],0x0
  01ae5:    	je     0x3bad0
  01aeb:    	cmp    r15d,DWORD PTR [r13-0x8]
  01aef:    	jne    0x3bad0
  01af5:    	mov    eax,DWORD PTR [rip+0xffffffffffffaf53]        # 0xffffca4e
  01afb:    	cmp    DWORD PTR [r13-0x4],eax
  01aff:    	jne    0x3bad0
  01b05: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b0e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01b15:    	mov    QWORD PTR [rsp-0x40],rax
  01b1a: 00 	mov    rdi,0x1
  01b21: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01b28:    	mov    QWORD PTR [rsp-0x48],rax
  01b2d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b36:    	mov    rax,QWORD PTR [r13+0x10]
  01b3a:    	mov    QWORD PTR [rsp-0x30],rax
  01b3f:    	mov    rax,QWORD PTR [r13+0x8]
  01b43:    	mov    r13,QWORD PTR [r13+0x18]
  01b47:    	mov    rsi,QWORD PTR [rbx]
  01b4a:    	mov    QWORD PTR [rsp-0x18],rsi
  01b4f:    	lea    rsi,[rsp-0x18]
  01b54:    	mov    QWORD PTR [rbx],rsi
  01b57:    	lea    r14,[rsp-0x10]
  01b5c:    	mov    QWORD PTR [rsp-0x20],r14
  01b61:    	call   rax
  01b63:    	lea    r14,[rbp-0x8]
  01b67:    	mov    QWORD PTR [rbx],r14
  01b6a:    	mov    r14,QWORD PTR [rbp-0x10]
  01b6e:    	movq   xmm2,QWORD PTR [rsp]
  01b73:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b79:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b7f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b85:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b8b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b91: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b98: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b9f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ba6: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01bad: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01bb4:    	add    rsp,0x60
  01bb8:    	test   rax,rax
  01bbb:    	je     0x3bb1d
:00120 
:00122 %14 = dynvar(2, %2)
  01bc1:    	mov    rax,QWORD PTR [rbp-0x18]
  01bc5:    	mov    rax,QWORD PTR [rax]
  01bc8:    	mov    rax,QWORD PTR [rax-0x28]
  01bcc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00123 %16 = dynvar(2, %2)
  01bd3:    	mov    rax,QWORD PTR [rbp-0x18]
  01bd7:    	mov    rax,QWORD PTR [rax]
  01bda:    	mov    rax,QWORD PTR [rax-0x28]
  01bde: ff 	mov    QWORD PTR [r14-0xb0],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01be5:    	sub    rsp,0x60
  01be9:    	movq   QWORD PTR [rsp],xmm2
  01bee:    	movq   QWORD PTR [rsp+0x8],xmm3
  01bf4:    	movq   QWORD PTR [rsp+0x10],xmm4
  01bfa:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c00:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c06:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c0c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c13: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c1a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c21: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c28: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c2f: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01c36: 4d 	movabs rax,0x564da0826bb0
  01c40:    	call   rax
  01c42:    	mov    r15d,eax
  01c45: 4d 	movabs r13,0x564da0e75810
  01c4f:    	cmp    QWORD PTR [r13+0x8],0x0
  01c54:    	je     0x3bb2c
  01c5a:    	cmp    r15d,DWORD PTR [r13-0x8]
  01c5e:    	jne    0x3bb2c
  01c64:    	mov    eax,DWORD PTR [rip+0xffffffffffffade4]        # 0xffffca4e
  01c6a:    	cmp    DWORD PTR [r13-0x4],eax
  01c6e:    	jne    0x3bb2c
  01c74: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01c7d: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01c84:    	mov    QWORD PTR [rsp-0x40],rax
  01c89: 00 	mov    rdi,0x0
  01c90: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c99:    	mov    rax,QWORD PTR [r13+0x10]
  01c9d:    	mov    QWORD PTR [rsp-0x30],rax
  01ca2:    	mov    rax,QWORD PTR [r13+0x8]
  01ca6:    	mov    r13,QWORD PTR [r13+0x18]
  01caa:    	mov    rsi,QWORD PTR [rbx]
  01cad:    	mov    QWORD PTR [rsp-0x18],rsi
  01cb2:    	lea    rsi,[rsp-0x18]
  01cb7:    	mov    QWORD PTR [rbx],rsi
  01cba:    	lea    r14,[rsp-0x10]
  01cbf:    	mov    QWORD PTR [rsp-0x20],r14
  01cc4:    	call   rax
  01cc6:    	lea    r14,[rbp-0x8]
  01cca:    	mov    QWORD PTR [rbx],r14
  01ccd:    	mov    r14,QWORD PTR [rbp-0x10]
  01cd1:    	movq   xmm2,QWORD PTR [rsp]
  01cd6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cdc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ce2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ce8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cee:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01cf4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cfb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d02: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d09: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d10: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d17:    	add    rsp,0x60
  01d1b:    	test   rax,rax
  01d1e:    	je     0x3bb79
  01d24: ff 	mov    QWORD PTR [r14-0xa8],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01d2b:    	sub    rsp,0x60
  01d2f:    	movq   QWORD PTR [rsp],xmm2
  01d34:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d40:    	movq   QWORD PTR [rsp+0x18],xmm5
  01d46:    	movq   QWORD PTR [rsp+0x20],xmm6
  01d4c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01d52: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01d59: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01d60: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01d67: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01d6e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01d75: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01d7c: 4d 	movabs rax,0x564da0826bb0
  01d86:    	call   rax
  01d88:    	mov    r15d,eax
  01d8b: 4d 	movabs r13,0x564da0e75840
  01d95:    	cmp    QWORD PTR [r13+0x8],0x0
  01d9a:    	je     0x3bb88
  01da0:    	cmp    r15d,DWORD PTR [r13-0x8]
  01da4:    	jne    0x3bb88
  01daa:    	mov    eax,DWORD PTR [rip+0xffffffffffffac9e]        # 0xffffca4e
  01db0:    	cmp    DWORD PTR [r13-0x4],eax
  01db4:    	jne    0x3bb88
  01dba: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01dc3: ff 	mov    rax,QWORD PTR [r14-0x98]
  01dca:    	mov    QWORD PTR [rsp-0x40],rax
  01dcf: 00 	mov    rdi,0x0
  01dd6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01ddf:    	mov    rax,QWORD PTR [r13+0x10]
  01de3:    	mov    QWORD PTR [rsp-0x30],rax
  01de8:    	mov    rax,QWORD PTR [r13+0x8]
  01dec:    	mov    r13,QWORD PTR [r13+0x18]
  01df0:    	mov    rsi,QWORD PTR [rbx]
  01df3:    	mov    QWORD PTR [rsp-0x18],rsi
  01df8:    	lea    rsi,[rsp-0x18]
  01dfd:    	mov    QWORD PTR [rbx],rsi
  01e00:    	lea    r14,[rsp-0x10]
  01e05:    	mov    QWORD PTR [rsp-0x20],r14
  01e0a:    	call   rax
  01e0c:    	lea    r14,[rbp-0x8]
  01e10:    	mov    QWORD PTR [rbx],r14
  01e13:    	mov    r14,QWORD PTR [rbp-0x10]
  01e17:    	movq   xmm2,QWORD PTR [rsp]
  01e1c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e22:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e28:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e2e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e34:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e3a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e41: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e48: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e4f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e56: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e5d:    	add    rsp,0x60
  01e61:    	test   rax,rax
  01e64:    	je     0x3bbd5
  01e6a: ff 	mov    QWORD PTR [r14-0xb0],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01e71: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01e78: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01e7f:    	sub    rsp,0x60
  01e83:    	movq   QWORD PTR [rsp],xmm2
  01e88:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e8e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e94:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e9a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ea0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ea6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ead: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01eb4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ebb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ec2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ec9:    	mov    rdx,rdi
  01ecc:    	mov    rcx,rsi
  01ecf:    	mov    rdi,rbx
  01ed2:    	mov    rsi,r12
  01ed5: 4d 	movabs rax,0x564da07da0d0
  01edf:    	call   rax
  01ee1:    	movq   xmm2,QWORD PTR [rsp]
  01ee6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01eec:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ef2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ef8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01efe:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f04: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f0b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f12: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01f19: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f20: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f27:    	add    rsp,0x60
  01f2b: 4d 	movabs r13,0x564da0e75870
  01f35:    	test   rax,rax
  01f38:    	je     0xffff96c8
  01f3e: ff 	mov    QWORD PTR [r14-0xa8],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01f45:    	sub    rsp,0x60
  01f49:    	movq   QWORD PTR [rsp],xmm2
  01f4e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f54:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f5a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f60:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f66:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f6c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f73: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f7a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f81: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f88: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f8f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01f96: 4d 	movabs rax,0x564da0826bb0
  01fa0:    	call   rax
  01fa2:    	mov    r15d,eax
  01fa5: 4d 	movabs r13,0x564da0e75880
  01faf:    	cmp    QWORD PTR [r13+0x8],0x0
  01fb4:    	je     0x3bbe4
  01fba:    	cmp    r15d,DWORD PTR [r13-0x8]
  01fbe:    	jne    0x3bbe4
  01fc4:    	mov    eax,DWORD PTR [rip+0xffffffffffffaa84]        # 0xffffca4e
  01fca:    	cmp    DWORD PTR [r13-0x4],eax
  01fce:    	jne    0x3bbe4
  01fd4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01fdd: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01fe4:    	mov    QWORD PTR [rsp-0x40],rax
  01fe9: 00 	mov    rdi,0x1
  01ff0: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01ff7:    	mov    QWORD PTR [rsp-0x48],rax
  01ffc: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02005:    	mov    rax,QWORD PTR [r13+0x10]
  02009:    	mov    QWORD PTR [rsp-0x30],rax
  0200e:    	mov    rax,QWORD PTR [r13+0x8]
  02012:    	mov    r13,QWORD PTR [r13+0x18]
  02016:    	mov    rsi,QWORD PTR [rbx]
  02019:    	mov    QWORD PTR [rsp-0x18],rsi
  0201e:    	lea    rsi,[rsp-0x18]
  02023:    	mov    QWORD PTR [rbx],rsi
  02026:    	lea    r14,[rsp-0x10]
  0202b:    	mov    QWORD PTR [rsp-0x20],r14
  02030:    	call   rax
  02032:    	lea    r14,[rbp-0x8]
  02036:    	mov    QWORD PTR [rbx],r14
  02039:    	mov    r14,QWORD PTR [rbp-0x10]
  0203d:    	movq   xmm2,QWORD PTR [rsp]
  02042:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02048:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0204e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02054:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0205a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02060: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02067: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0206e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02075: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0207c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02083:    	add    rsp,0x60
  02087:    	test   rax,rax
  0208a:    	je     0x3bc31
:00132 
:00134 %14 = dynvar(2, %2)
  02090:    	mov    rax,QWORD PTR [rbp-0x18]
  02094:    	mov    rax,QWORD PTR [rax]
  02097:    	mov    rax,QWORD PTR [rax-0x28]
  0209b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00135 %16 = dynvar(2, %2)
  020a2:    	mov    rax,QWORD PTR [rbp-0x18]
  020a6:    	mov    rax,QWORD PTR [rax]
  020a9:    	mov    rax,QWORD PTR [rax-0x28]
  020ad: ff 	mov    QWORD PTR [r14-0xb0],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  020b4:    	sub    rsp,0x60
  020b8:    	movq   QWORD PTR [rsp],xmm2
  020bd:    	movq   QWORD PTR [rsp+0x8],xmm3
  020c3:    	movq   QWORD PTR [rsp+0x10],xmm4
  020c9:    	movq   QWORD PTR [rsp+0x18],xmm5
  020cf:    	movq   QWORD PTR [rsp+0x20],xmm6
  020d5:    	movq   QWORD PTR [rsp+0x28],xmm7
  020db: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  020e2: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  020e9: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  020f0: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  020f7: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  020fe: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  02105: 4d 	movabs rax,0x564da0826bb0
  0210f:    	call   rax
  02111:    	mov    r15d,eax
  02114: 4d 	movabs r13,0x564da0e758d0
  0211e:    	cmp    QWORD PTR [r13+0x8],0x0
  02123:    	je     0x3bc40
  02129:    	cmp    r15d,DWORD PTR [r13-0x8]
  0212d:    	jne    0x3bc40
  02133:    	mov    eax,DWORD PTR [rip+0xffffffffffffa915]        # 0xffffca4e
  02139:    	cmp    DWORD PTR [r13-0x4],eax
  0213d:    	jne    0x3bc40
  02143: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0214c: ff 	mov    rax,QWORD PTR [r14-0xb0]
  02153:    	mov    QWORD PTR [rsp-0x40],rax
  02158: 00 	mov    rdi,0x0
  0215f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02168:    	mov    rax,QWORD PTR [r13+0x10]
  0216c:    	mov    QWORD PTR [rsp-0x30],rax
  02171:    	mov    rax,QWORD PTR [r13+0x8]
  02175:    	mov    r13,QWORD PTR [r13+0x18]
  02179:    	mov    rsi,QWORD PTR [rbx]
  0217c:    	mov    QWORD PTR [rsp-0x18],rsi
  02181:    	lea    rsi,[rsp-0x18]
  02186:    	mov    QWORD PTR [rbx],rsi
  02189:    	lea    r14,[rsp-0x10]
  0218e:    	mov    QWORD PTR [rsp-0x20],r14
  02193:    	call   rax
  02195:    	lea    r14,[rbp-0x8]
  02199:    	mov    QWORD PTR [rbx],r14
  0219c:    	mov    r14,QWORD PTR [rbp-0x10]
  021a0:    	movq   xmm2,QWORD PTR [rsp]
  021a5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  021ab:    	movq   xmm4,QWORD PTR [rsp+0x10]
  021b1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  021b7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  021bd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  021c3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  021ca: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  021d1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  021d8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  021df: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  021e6:    	add    rsp,0x60
  021ea:    	test   rax,rax
  021ed:    	je     0x3bc8d
  021f3: ff 	mov    QWORD PTR [r14-0xa8],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  021fa:    	sub    rsp,0x60
  021fe:    	movq   QWORD PTR [rsp],xmm2
  02203:    	movq   QWORD PTR [rsp+0x8],xmm3
  02209:    	movq   QWORD PTR [rsp+0x10],xmm4
  0220f:    	movq   QWORD PTR [rsp+0x18],xmm5
  02215:    	movq   QWORD PTR [rsp+0x20],xmm6
  0221b:    	movq   QWORD PTR [rsp+0x28],xmm7
  02221: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02228: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0222f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02236: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0223d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02244: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0224b: 4d 	movabs rax,0x564da0826bb0
  02255:    	call   rax
  02257:    	mov    r15d,eax
  0225a: 4d 	movabs r13,0x564da0e75900
  02264:    	cmp    QWORD PTR [r13+0x8],0x0
  02269:    	je     0x3bc9c
  0226f:    	cmp    r15d,DWORD PTR [r13-0x8]
  02273:    	jne    0x3bc9c
  02279:    	mov    eax,DWORD PTR [rip+0xffffffffffffa7cf]        # 0xffffca4e
  0227f:    	cmp    DWORD PTR [r13-0x4],eax
  02283:    	jne    0x3bc9c
  02289: 00 	mov    QWORD PTR [rsp-0x28],0x0
  02292: ff 	mov    rax,QWORD PTR [r14-0x98]
  02299:    	mov    QWORD PTR [rsp-0x40],rax
  0229e: 00 	mov    rdi,0x0
  022a5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  022ae:    	mov    rax,QWORD PTR [r13+0x10]
  022b2:    	mov    QWORD PTR [rsp-0x30],rax
  022b7:    	mov    rax,QWORD PTR [r13+0x8]
  022bb:    	mov    r13,QWORD PTR [r13+0x18]
  022bf:    	mov    rsi,QWORD PTR [rbx]
  022c2:    	mov    QWORD PTR [rsp-0x18],rsi
  022c7:    	lea    rsi,[rsp-0x18]
  022cc:    	mov    QWORD PTR [rbx],rsi
  022cf:    	lea    r14,[rsp-0x10]
  022d4:    	mov    QWORD PTR [rsp-0x20],r14
  022d9:    	call   rax
  022db:    	lea    r14,[rbp-0x8]
  022df:    	mov    QWORD PTR [rbx],r14
  022e2:    	mov    r14,QWORD PTR [rbp-0x10]
  022e6:    	movq   xmm2,QWORD PTR [rsp]
  022eb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022f1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022f7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022fd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02303:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02309: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02310: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02317: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0231e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02325: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0232c:    	add    rsp,0x60
  02330:    	test   rax,rax
  02333:    	je     0x3bce9
  02339: ff 	mov    QWORD PTR [r14-0xb0],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  02340: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  02347: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0234e:    	sub    rsp,0x60
  02352:    	movq   QWORD PTR [rsp],xmm2
  02357:    	movq   QWORD PTR [rsp+0x8],xmm3
  0235d:    	movq   QWORD PTR [rsp+0x10],xmm4
  02363:    	movq   QWORD PTR [rsp+0x18],xmm5
  02369:    	movq   QWORD PTR [rsp+0x20],xmm6
  0236f:    	movq   QWORD PTR [rsp+0x28],xmm7
  02375: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0237c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02383: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0238a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02391: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02398:    	mov    rdx,rdi
  0239b:    	mov    rcx,rsi
  0239e:    	mov    rdi,rbx
  023a1:    	mov    rsi,r12
  023a4: 4d 	movabs rax,0x564da07da0d0
  023ae:    	call   rax
  023b0:    	movq   xmm2,QWORD PTR [rsp]
  023b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  023bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  023c1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  023c7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  023cd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  023d3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  023da: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  023e1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  023e8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  023ef: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  023f6:    	add    rsp,0x60
  023fa: 4d 	movabs r13,0x564da0e75930
  02404:    	test   rax,rax
  02407:    	je     0xffff96c8
  0240d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  02414:    	sub    rsp,0x60
  02418:    	movq   QWORD PTR [rsp],xmm2
  0241d:    	movq   QWORD PTR [rsp+0x8],xmm3
  02423:    	movq   QWORD PTR [rsp+0x10],xmm4
  02429:    	movq   QWORD PTR [rsp+0x18],xmm5
  0242f:    	movq   QWORD PTR [rsp+0x20],xmm6
  02435:    	movq   QWORD PTR [rsp+0x28],xmm7
  0243b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02442: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02449: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02450: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02457: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0245e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  02465: 4d 	movabs rax,0x564da0826bb0
  0246f:    	call   rax
  02471:    	mov    r15d,eax
  02474: 4d 	movabs r13,0x564da0e75940
  0247e:    	cmp    QWORD PTR [r13+0x8],0x0
  02483:    	je     0x3bcf8
  02489:    	cmp    r15d,DWORD PTR [r13-0x8]
  0248d:    	jne    0x3bcf8
  02493:    	mov    eax,DWORD PTR [rip+0xffffffffffffa5b5]        # 0xffffca4e
  02499:    	cmp    DWORD PTR [r13-0x4],eax
  0249d:    	jne    0x3bcf8
  024a3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  024ac: ff 	mov    rax,QWORD PTR [r14-0xa0]
  024b3:    	mov    QWORD PTR [rsp-0x40],rax
  024b8: 00 	mov    rdi,0x1
  024bf: ff 	mov    rax,QWORD PTR [r14-0xa8]
  024c6:    	mov    QWORD PTR [rsp-0x48],rax
  024cb: 00 	mov    QWORD PTR [rsp-0x38],0x0
  024d4:    	mov    rax,QWORD PTR [r13+0x10]
  024d8:    	mov    QWORD PTR [rsp-0x30],rax
  024dd:    	mov    rax,QWORD PTR [r13+0x8]
  024e1:    	mov    r13,QWORD PTR [r13+0x18]
  024e5:    	mov    rsi,QWORD PTR [rbx]
  024e8:    	mov    QWORD PTR [rsp-0x18],rsi
  024ed:    	lea    rsi,[rsp-0x18]
  024f2:    	mov    QWORD PTR [rbx],rsi
  024f5:    	lea    r14,[rsp-0x10]
  024fa:    	mov    QWORD PTR [rsp-0x20],r14
  024ff:    	call   rax
  02501:    	lea    r14,[rbp-0x8]
  02505:    	mov    QWORD PTR [rbx],r14
  02508:    	mov    r14,QWORD PTR [rbp-0x10]
  0250c:    	movq   xmm2,QWORD PTR [rsp]
  02511:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02517:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0251d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02523:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02529:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0252f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02536: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0253d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02544: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0254b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02552:    	add    rsp,0x60
  02556:    	test   rax,rax
  02559:    	je     0x3bd45
:00144 
:00146 %14 = %15
  0255f: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02566: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 ret %14
  0256d: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02574:    	leave  
  02575:    	ret    
:00148 %14 = nil
  02576: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00149 ret %14
  02581: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02588:    	leave  
  02589:    	ret    
==> start whole compile: vnormalize FuncId(68) self_class:Vec start:[00000] bytecode:0x564da0e6bec0
<== finished compile. elapsed:49.6µs
offset:Pos(36884) code: 1797 bytes  data: 95 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: cmp    edx,0x0
  0000e: jne    0x396ab
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    QWORD PTR [r14-0x60],rax
  00033: mov    rdi,QWORD PTR [rbp-0x30]
  00037: test   rdi,0x7
  0003e: jne    0x396ba
  00044: cmp    DWORD PTR [rdi+0x4],0x28
  00048: jne    0x396ba
:00000 init_method reg:7 arg:0 pos:0 req:0 block:0 stack_offset:7
:00001 %3 = %0.call vlength()               [Vec]
  0004e: mov    rdi,QWORD PTR [r14-0x30]
  00052: cmp    DWORD PTR [rip+0xffffffffffffa34c],0x26        # 0xffffa3a5
  00059: jne    0x396c9
  0005f: mov    QWORD PTR [rsp-0x28],0x0
  00068: mov    rax,QWORD PTR [r14-0x30]
  0006c: mov    QWORD PTR [rsp-0x40],rax
  00071: mov    rdi,0x0
  00078: mov    QWORD PTR [rsp-0x38],0x0
  00081: movabs rax,0x600000043
  0008b: mov    QWORD PTR [rsp-0x30],rax
  00090: movabs r13,0x564da0e63260
  0009a: mov    rsi,QWORD PTR [rbx]
  0009d: mov    QWORD PTR [rsp-0x18],rsi
  000a2: lea    rsi,[rsp-0x18]
  000a7: mov    QWORD PTR [rbx],rsi
  000aa: lea    r14,[rsp-0x10]
  000af: mov    QWORD PTR [rsp-0x20],r14
  000b4: call   0xffffacac
  000b9: lea    r14,[rbp-0x8]
  000bd: mov    QWORD PTR [rbx],r14
  000c0: mov    r14,QWORD PTR [rbp-0x10]
  000c4: movabs r13,0x564da0e6bef0
  000ce: test   rax,rax
  000d1: je     0xffff701f
  000d7: mov    QWORD PTR [r14-0x48],rax
:00002 
:00004 %1 = %3
  000db: mov    rax,QWORD PTR [r14-0x48]
  000df: mov    QWORD PTR [r14-0x38],rax
:00005 %3 = const[Vec]                      [Vec]
  000e3: mov    rax,QWORD PTR [rip+0xffffffffffffa2c2]        # 0xffffa3ac
  000ea: cmp    rax,QWORD PTR [rip+0x62b]        # 0x71c
  000f1: jne    0x396d8
  000f7: mov    rax,QWORD PTR [rip+0x60e]        # 0x70c
  000fe: mov    QWORD PTR [r14-0x48],rax
:00006 %4 = @x: Vec[IvarId(0)]
  00102: mov    rdi,QWORD PTR [rbp-0x30]
  00106: mov    rax,QWORD PTR [rdi+0x10]
  0010a: mov    QWORD PTR [r14-0x50],rax
:00007 %5 = @y: Vec[IvarId(1)]
  0010e: mov    rdi,QWORD PTR [rbp-0x30]
  00112: mov    rax,QWORD PTR [rdi+0x18]
  00116: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = @z: Vec[IvarId(2)]
  0011a: mov    rdi,QWORD PTR [rbp-0x30]
  0011e: mov    rax,QWORD PTR [rdi+0x20]
  00122: mov    QWORD PTR [r14-0x60],rax
:00009 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00126: mov    rdi,QWORD PTR [r14-0x48]
  0012a: test   rdi,0x7
  00131: jne    0x3971e
  00137: cmp    DWORD PTR [rdi+0x4],0x29
  0013b: jne    0x3971e
  00141: cmp    DWORD PTR [rip+0xffffffffffffa25d],0x26        # 0xffffa3a5
  00148: jne    0x3971e
  0014e: mov    r9,0x0
  00155: mov    rdx,rdi
  00158: mov    QWORD PTR [rsp-0x40],rcx
  0015d: mov    QWORD PTR [rsp-0x28],0x0
  00166: lea    rcx,[r14-0x50]
  0016a: mov    r8,0x3
  00171: mov    rsi,QWORD PTR [rbx]
  00174: mov    QWORD PTR [rsp-0x18],rsi
  00179: lea    rsi,[rsp-0x18]
  0017e: mov    QWORD PTR [rbx],rsi
  00181: lea    r14,[rsp-0x10]
  00186: mov    QWORD PTR [rsp-0x20],r14
  0018b: call   0x3972d
  00190: lea    r14,[rbp-0x8]
  00194: mov    QWORD PTR [rbx],r14
  00197: mov    r14,QWORD PTR [rbp-0x10]
  0019b: movabs r13,0x564da0e6bf70
  001a5: test   rax,rax
  001a8: je     0xffff701f
  001ae: mov    QWORD PTR [r14-0x40],rax
:00010 
:00012 %3 = literal[1e-17]
  001b2: movq   xmm2,QWORD PTR [rip+0x572]        # 0x72c
  001ba: movabs rax,0xe33877aa3236a4ba
  001c4: mov    QWORD PTR [r14-0x48],rax
:00013 _%3 = %1 > %3                        [Float][Float]
:00014 condnotbr _%3 =>:00037
  001c8: mov    rdi,QWORD PTR [r14-0x38]
  001cc: test   rdi,0x1
  001d3: jne    0x3975f
  001d9: test   rdi,0x2
  001e0: je     0x21c
  001e6: xorps  xmm3,xmm3
  001e9: movabs rax,0x8000000000000002
  001f3: cmp    rdi,rax
  001f6: je     0x22e
  001fc: mov    rax,rdi
  001ff: sar    rax,0x3f
  00203: add    rax,0x2
  00207: and    rdi,0xfffffffffffffffc
  0020b: or     rdi,rax
  0020e: rol    rdi,0x3d
  00212: movq   xmm3,rdi
  00217: jmp    0x22e
  0021c: call   0xffff7078
  00221: test   rax,rax
  00224: je     0x3975f
  0022a: movq   xmm3,xmm0
  0022e: ucomisd xmm3,xmm2
  00232: jbe    0x39990
:00015 %3 = %2.call x()                     [Vec]
  00238: mov    rdi,QWORD PTR [r14-0x40]
  0023c: test   rdi,0x7
  00243: jne    0x3976e
  00249: cmp    DWORD PTR [rdi+0x4],0x28
  0024d: jne    0x3976e
  00253: cmp    DWORD PTR [rip+0xffffffffffffa14b],0x26        # 0xffffa3a5
  0025a: jne    0x3976e
  00260: mov    esi,DWORD PTR [rip+0x4d2]        # 0x738
  00266: cmp    esi,0xffffffff
  00269: je     0x3977d
  0026f: cmp    WORD PTR [rdi+0x2],0x3
  00274: jne    0x28d
  0027a: cmp    esi,0x6
  0027d: jge    0x28d
  00283: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00288: jmp    0x2ab
  0028d: sub    rsp,0x10
  00291: movq   QWORD PTR [rsp],xmm3
  00296: movabs rax,0x564da0797d70
  002a0: call   rax
  002a2: movq   xmm3,QWORD PTR [rsp]
  002a7: add    rsp,0x10
  002ab: mov    QWORD PTR [r14-0x48],rax
:00016 
:00018 %3 = %3 / %1                         [Float][Float]
  002af: mov    rdi,QWORD PTR [r14-0x48]
  002b3: test   rdi,0x1
  002ba: jne    0x397b8
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm2,xmm2
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm2,rdi
  002fe: jmp    0x315
  00303: call   0xffff7078
  00308: test   rax,rax
  0030b: je     0x397b8
  00311: movq   xmm2,xmm0
  00315: movq   rax,xmm3
  0031a: test   rax,rax
  0031d: je     0xffff7044
  00323: divsd  xmm2,xmm3
:00019 _ = %2.call x=(%3; 1)                [Vec]
  00327: movq   xmm0,xmm2
  0032b: call   0xffff719c
  00330: mov    QWORD PTR [r14-0x48],rax
  00334: mov    rdi,QWORD PTR [r14-0x40]
  00338: test   rdi,0x7
  0033f: jne    0x397c7
  00345: cmp    DWORD PTR [rdi+0x4],0x28
  00349: jne    0x397c7
  0034f: cmp    DWORD PTR [rip+0xffffffffffffa04f],0x26        # 0xffffa3a5
  00356: jne    0x397c7
  0035c: mov    esi,DWORD PTR [rip+0x3de]        # 0x740
  00362: cmp    esi,0xffffffff
  00365: je     0x397d6
  0036b: cmp    WORD PTR [rdi+0x2],0x3
  00370: jne    0x38d
  00376: cmp    esi,0x6
  00379: jge    0x38d
  0037f: mov    rax,QWORD PTR [r14-0x48]
  00383: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00388: jmp    0x3ce
  0038d: sub    rsp,0x10
  00391: movq   QWORD PTR [rsp],xmm2
  00396: movq   QWORD PTR [rsp+0x8],xmm3
  0039c: mov    rdx,QWORD PTR [r14-0x48]
  003a0: movabs rax,0x564da0797ff0
  003aa: call   rax
  003ac: movq   xmm2,QWORD PTR [rsp]
  003b1: movq   xmm3,QWORD PTR [rsp+0x8]
  003b7: add    rsp,0x10
  003bb: movabs r13,0x564da0e6c010
  003c5: test   rax,rax
  003c8: je     0xffff701f
:00020 
:00022 %3 = %2.call y()                     [Vec]
  003ce: mov    rdi,QWORD PTR [r14-0x40]
  003d2: test   rdi,0x7
  003d9: jne    0x39824
  003df: cmp    DWORD PTR [rdi+0x4],0x28
  003e3: jne    0x39824
  003e9: cmp    DWORD PTR [rip+0xffffffffffff9fb5],0x26        # 0xffffa3a5
  003f0: jne    0x39824
  003f6: mov    esi,DWORD PTR [rip+0x34c]        # 0x748
  003fc: cmp    esi,0xffffffff
  003ff: je     0x39833
  00405: cmp    WORD PTR [rdi+0x2],0x3
  0040a: jne    0x423
  00410: cmp    esi,0x6
  00413: jge    0x423
  00419: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0041e: jmp    0x441
  00423: sub    rsp,0x10
  00427: movq   QWORD PTR [rsp],xmm3
  0042c: movabs rax,0x564da0797d70
  00436: call   rax
  00438: movq   xmm3,QWORD PTR [rsp]
  0043d: add    rsp,0x10
  00441: mov    QWORD PTR [r14-0x48],rax
:00023 
:00025 %3 = %3 / %1                         [Float][Float]
  00445: mov    rdi,QWORD PTR [r14-0x48]
  00449: test   rdi,0x1
  00450: jne    0x3986e
  00456: test   rdi,0x2
  0045d: je     0x499
  00463: xorps  xmm2,xmm2
  00466: movabs rax,0x8000000000000002
  00470: cmp    rdi,rax
  00473: je     0x4ab
  00479: mov    rax,rdi
  0047c: sar    rax,0x3f
  00480: add    rax,0x2
  00484: and    rdi,0xfffffffffffffffc
  00488: or     rdi,rax
  0048b: rol    rdi,0x3d
  0048f: movq   xmm2,rdi
  00494: jmp    0x4ab
  00499: call   0xffff7078
  0049e: test   rax,rax
  004a1: je     0x3986e
  004a7: movq   xmm2,xmm0
  004ab: movq   rax,xmm3
  004b0: test   rax,rax
  004b3: je     0xffff7044
  004b9: divsd  xmm2,xmm3
:00026 _ = %2.call y=(%3; 1)                [Vec]
  004bd: movq   xmm0,xmm2
  004c1: call   0xffff719c
  004c6: mov    QWORD PTR [r14-0x48],rax
  004ca: mov    rdi,QWORD PTR [r14-0x40]
  004ce: test   rdi,0x7
  004d5: jne    0x3987d
  004db: cmp    DWORD PTR [rdi+0x4],0x28
  004df: jne    0x3987d
  004e5: cmp    DWORD PTR [rip+0xffffffffffff9eb9],0x26        # 0xffffa3a5
  004ec: jne    0x3987d
  004f2: mov    esi,DWORD PTR [rip+0x258]        # 0x750
  004f8: cmp    esi,0xffffffff
  004fb: je     0x3988c
  00501: cmp    WORD PTR [rdi+0x2],0x3
  00506: jne    0x523
  0050c: cmp    esi,0x6
  0050f: jge    0x523
  00515: mov    rax,QWORD PTR [r14-0x48]
  00519: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0051e: jmp    0x564
  00523: sub    rsp,0x10
  00527: movq   QWORD PTR [rsp],xmm2
  0052c: movq   QWORD PTR [rsp+0x8],xmm3
  00532: mov    rdx,QWORD PTR [r14-0x48]
  00536: movabs rax,0x564da0797ff0
  00540: call   rax
  00542: movq   xmm2,QWORD PTR [rsp]
  00547: movq   xmm3,QWORD PTR [rsp+0x8]
  0054d: add    rsp,0x10
  00551: movabs r13,0x564da0e6c080
  0055b: test   rax,rax
  0055e: je     0xffff701f
:00027 
:00029 %3 = %2.call z()                     [Vec]
  00564: mov    rdi,QWORD PTR [r14-0x40]
  00568: test   rdi,0x7
  0056f: jne    0x398da
  00575: cmp    DWORD PTR [rdi+0x4],0x28
  00579: jne    0x398da
  0057f: cmp    DWORD PTR [rip+0xffffffffffff9e1f],0x26        # 0xffffa3a5
  00586: jne    0x398da
  0058c: mov    esi,DWORD PTR [rip+0x1c6]        # 0x758
  00592: cmp    esi,0xffffffff
  00595: je     0x398e9
  0059b: cmp    WORD PTR [rdi+0x2],0x3
  005a0: jne    0x5b9
  005a6: cmp    esi,0x6
  005a9: jge    0x5b9
  005af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005b4: jmp    0x5d7
  005b9: sub    rsp,0x10
  005bd: movq   QWORD PTR [rsp],xmm3
  005c2: movabs rax,0x564da0797d70
  005cc: call   rax
  005ce: movq   xmm3,QWORD PTR [rsp]
  005d3: add    rsp,0x10
  005d7: mov    QWORD PTR [r14-0x48],rax
:00030 
:00032 %3 = %3 / %1                         [Float][Float]
  005db: mov    rdi,QWORD PTR [r14-0x48]
  005df: test   rdi,0x1
  005e6: jne    0x39924
  005ec: test   rdi,0x2
  005f3: je     0x62f
  005f9: xorps  xmm2,xmm2
  005fc: movabs rax,0x8000000000000002
  00606: cmp    rdi,rax
  00609: je     0x641
  0060f: mov    rax,rdi
  00612: sar    rax,0x3f
  00616: add    rax,0x2
  0061a: and    rdi,0xfffffffffffffffc
  0061e: or     rdi,rax
  00621: rol    rdi,0x3d
  00625: movq   xmm2,rdi
  0062a: jmp    0x641
  0062f: call   0xffff7078
  00634: test   rax,rax
  00637: je     0x39924
  0063d: movq   xmm2,xmm0
  00641: movq   rax,xmm3
  00646: test   rax,rax
  00649: je     0xffff7044
  0064f: divsd  xmm2,xmm3
:00033 _ = %2.call z=(%3; 1)                [Vec]
  00653: movq   xmm0,xmm2
  00657: call   0xffff719c
  0065c: mov    QWORD PTR [r14-0x48],rax
  00660: mov    rdi,QWORD PTR [r14-0x40]
  00664: test   rdi,0x7
  0066b: jne    0x39933
  00671: cmp    DWORD PTR [rdi+0x4],0x28
  00675: jne    0x39933
  0067b: cmp    DWORD PTR [rip+0xffffffffffff9d23],0x26        # 0xffffa3a5
  00682: jne    0x39933
  00688: mov    esi,DWORD PTR [rip+0xd2]        # 0x760
  0068e: cmp    esi,0xffffffff
  00691: je     0x39942
  00697: cmp    WORD PTR [rdi+0x2],0x3
  0069c: jne    0x6b9
  006a2: cmp    esi,0x6
  006a5: jge    0x6b9
  006ab: mov    rax,QWORD PTR [r14-0x48]
  006af: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006b4: jmp    0x6fa
  006b9: sub    rsp,0x10
  006bd: movq   QWORD PTR [rsp],xmm2
  006c2: movq   QWORD PTR [rsp+0x8],xmm3
  006c8: mov    rdx,QWORD PTR [r14-0x48]
  006cc: movabs rax,0x564da0797ff0
  006d6: call   rax
  006d8: movq   xmm2,QWORD PTR [rsp]
  006dd: movq   xmm3,QWORD PTR [rsp+0x8]
  006e3: add    rsp,0x10
  006e7: movabs r13,0x564da0e6c0f0
  006f1: test   rax,rax
  006f4: je     0xffff701f
:00034 
:00036 br =>:00037
  006fa: jmp    0x399a9
:00037 ret %2
  006ff: mov    rax,QWORD PTR [r14-0x40]
  00703: leave  
  00704: ret    
==> start whole compile: vlength FuncId(67) self_class:Vec start:[00000] bytecode:0x564da0e63260
<== finished compile. elapsed:23.6µs
offset:Pos(38776) code: 872 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x3925e
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x3926d
  00040: cmp    DWORD PTR [rdi+0x4],0x28
  00044: jne    0x3926d
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %2 = const[Math]                     [Math]
  0004a: mov    rax,QWORD PTR [rip+0xffffffffffff9bf7]        # 0xffff9c48
  00051: cmp    rax,QWORD PTR [rip+0x320]        # 0x378
  00058: jne    0x3927c
  0005e: mov    rax,QWORD PTR [rip+0x303]        # 0x368
  00065: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00069: mov    rdi,QWORD PTR [rbp-0x30]
  0006d: mov    rax,QWORD PTR [rdi+0x10]
  00071: mov    QWORD PTR [r14-0x48],rax
:00003 %4 = @x: Vec[IvarId(0)]
  00075: mov    rdi,QWORD PTR [rbp-0x30]
  00079: mov    rax,QWORD PTR [rdi+0x10]
  0007d: mov    QWORD PTR [r14-0x50],rax
:00004 %3 = %3 * %4                         [Float][Float]
  00081: mov    rdi,QWORD PTR [r14-0x48]
  00085: test   rdi,0x1
  0008c: jne    0x392c2
  00092: test   rdi,0x2
  00099: je     0xd5
  0009f: xorps  xmm2,xmm2
  000a2: movabs rax,0x8000000000000002
  000ac: cmp    rdi,rax
  000af: je     0xe7
  000b5: mov    rax,rdi
  000b8: sar    rax,0x3f
  000bc: add    rax,0x2
  000c0: and    rdi,0xfffffffffffffffc
  000c4: or     rdi,rax
  000c7: rol    rdi,0x3d
  000cb: movq   xmm2,rdi
  000d0: jmp    0xe7
  000d5: call   0xffff6914
  000da: test   rax,rax
  000dd: je     0x392c2
  000e3: movq   xmm2,xmm0
  000e7: mov    rdi,QWORD PTR [r14-0x50]
  000eb: test   rdi,0x1
  000f2: jne    0x392d1
  000f8: test   rdi,0x2
  000ff: je     0x13b
  00105: xorps  xmm3,xmm3
  00108: movabs rax,0x8000000000000002
  00112: cmp    rdi,rax
  00115: je     0x14d
  0011b: mov    rax,rdi
  0011e: sar    rax,0x3f
  00122: add    rax,0x2
  00126: and    rdi,0xfffffffffffffffc
  0012a: or     rdi,rax
  0012d: rol    rdi,0x3d
  00131: movq   xmm3,rdi
  00136: jmp    0x14d
  0013b: call   0xffff6914
  00140: test   rax,rax
  00143: je     0x392d1
  00149: movq   xmm3,xmm0
  0014d: mulsd  xmm2,xmm3
:00005 %4 = @y: Vec[IvarId(1)]
  00151: mov    rdi,QWORD PTR [rbp-0x30]
  00155: mov    rax,QWORD PTR [rdi+0x18]
  00159: mov    QWORD PTR [r14-0x50],rax
:00006 %5 = @y: Vec[IvarId(1)]
  0015d: mov    rdi,QWORD PTR [rbp-0x30]
  00161: mov    rax,QWORD PTR [rdi+0x18]
  00165: mov    QWORD PTR [r14-0x58],rax
:00007 %4 = %4 * %5                         [Float][Float]
  00169: mov    rdi,QWORD PTR [r14-0x50]
  0016d: test   rdi,0x1
  00174: jne    0x392e0
  0017a: test   rdi,0x2
  00181: je     0x1bd
  00187: xorps  xmm3,xmm3
  0018a: movabs rax,0x8000000000000002
  00194: cmp    rdi,rax
  00197: je     0x1cf
  0019d: mov    rax,rdi
  001a0: sar    rax,0x3f
  001a4: add    rax,0x2
  001a8: and    rdi,0xfffffffffffffffc
  001ac: or     rdi,rax
  001af: rol    rdi,0x3d
  001b3: movq   xmm3,rdi
  001b8: jmp    0x1cf
  001bd: call   0xffff6914
  001c2: test   rax,rax
  001c5: je     0x392e0
  001cb: movq   xmm3,xmm0
  001cf: mov    rdi,QWORD PTR [r14-0x58]
  001d3: test   rdi,0x1
  001da: jne    0x392fc
  001e0: test   rdi,0x2
  001e7: je     0x223
  001ed: xorps  xmm4,xmm4
  001f0: movabs rax,0x8000000000000002
  001fa: cmp    rdi,rax
  001fd: je     0x235
  00203: mov    rax,rdi
  00206: sar    rax,0x3f
  0020a: add    rax,0x2
  0020e: and    rdi,0xfffffffffffffffc
  00212: or     rdi,rax
  00215: rol    rdi,0x3d
  00219: movq   xmm4,rdi
  0021e: jmp    0x235
  00223: call   0xffff6914
  00228: test   rax,rax
  0022b: je     0x392fc
  00231: movq   xmm4,xmm0
  00235: mulsd  xmm3,xmm4
:00008 %3 = %3 + %4                         [Float][Float]
  00239: addsd  xmm2,xmm3
:00009 %4 = @z: Vec[IvarId(2)]
  0023d: mov    rdi,QWORD PTR [rbp-0x30]
  00241: mov    rax,QWORD PTR [rdi+0x20]
  00245: mov    QWORD PTR [r14-0x50],rax
:00010 %5 = @z: Vec[IvarId(2)]
  00249: mov    rdi,QWORD PTR [rbp-0x30]
  0024d: mov    rax,QWORD PTR [rdi+0x20]
  00251: mov    QWORD PTR [r14-0x58],rax
:00011 %4 = %4 * %5                         [Float][Float]
  00255: mov    rdi,QWORD PTR [r14-0x50]
  00259: test   rdi,0x1
  00260: jne    0x39318
  00266: test   rdi,0x2
  0026d: je     0x2a9
  00273: xorps  xmm3,xmm3
  00276: movabs rax,0x8000000000000002
  00280: cmp    rdi,rax
  00283: je     0x2bb
  00289: mov    rax,rdi
  0028c: sar    rax,0x3f
  00290: add    rax,0x2
  00294: and    rdi,0xfffffffffffffffc
  00298: or     rdi,rax
  0029b: rol    rdi,0x3d
  0029f: movq   xmm3,rdi
  002a4: jmp    0x2bb
  002a9: call   0xffff6914
  002ae: test   rax,rax
  002b1: je     0x39318
  002b7: movq   xmm3,xmm0
  002bb: mov    rdi,QWORD PTR [r14-0x58]
  002bf: test   rdi,0x1
  002c6: jne    0x39334
  002cc: test   rdi,0x2
  002d3: je     0x30f
  002d9: xorps  xmm4,xmm4
  002dc: movabs rax,0x8000000000000002
  002e6: cmp    rdi,rax
  002e9: je     0x321
  002ef: mov    rax,rdi
  002f2: sar    rax,0x3f
  002f6: add    rax,0x2
  002fa: and    rdi,0xfffffffffffffffc
  002fe: or     rdi,rax
  00301: rol    rdi,0x3d
  00305: movq   xmm4,rdi
  0030a: jmp    0x321
  0030f: call   0xffff6914
  00314: test   rax,rax
  00317: je     0x39334
  0031d: movq   xmm4,xmm0
  00321: mulsd  xmm3,xmm4
:00012 %3 = %3 + %4                         [Float][Float]
  00325: addsd  xmm2,xmm3
:00013 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
  00329: mov    rdi,QWORD PTR [r14-0x40]
  0032d: test   rdi,0x7
  00334: jne    0x39350
  0033a: cmp    DWORD PTR [rdi+0x4],0x21
  0033e: jne    0x39350
  00344: cmp    DWORD PTR [rip+0xffffffffffff98f6],0x26        # 0xffff9c41
  0034b: jne    0x39350
  00351: sqrtsd xmm5,xmm2
:00014 
:00016 ret %1
  00355: movq   xmm0,xmm5
  00359: call   0xffff6a38
  0035e: mov    QWORD PTR [r14-0x38],rax
  00362: mov    rax,QWORD PTR [r14-0x38]
  00366: leave  
  00367: ret    
==> start whole compile: initialize FuncId(73) self_class:Ray start:[00000] bytecode:0x564da0e88420
<== finished compile. elapsed:9.9µs
offset:Pos(39672) code: 93 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x2
  0000e: jne    0x38ff9
  00014: mov    QWORD PTR [r14-0x48],0x4
  0001c: mov    rdi,QWORD PTR [rbp-0x30]
  00020: test   rdi,0x7
  00027: jne    0x39008
  0002d: cmp    DWORD PTR [rdi+0x4],0x2e
  00031: jne    0x39008
:00000 init_method reg:4 arg:2 pos:2 req:2 block:0 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  00037: mov    rdi,QWORD PTR [rbp-0x30]
  0003b: mov    rax,QWORD PTR [r14-0x38]
  0003f: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00043: mov    rdi,QWORD PTR [rbp-0x30]
  00047: mov    rax,QWORD PTR [r14-0x40]
  0004b: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  0004f: mov    rax,QWORD PTR [r14-0x40]
  00053: mov    QWORD PTR [r14-0x48],rax
:00004 ret %3
  00057: mov    rax,QWORD PTR [r14-0x48]
  0005b: leave  
  0005c: ret    
==> start whole compile: initialize FuncId(74) self_class:Isect start:[00000] bytecode:0x564da0e72f60
<== finished compile. elapsed:21.8µs
offset:Pos(39765) code: 719 bytes  data: 180 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x0
  0000e: jne    0x38fba
  00014: mov    rax,0x4
  0001b: mov    QWORD PTR [r14-0x38],rax
  0001f: mov    QWORD PTR [r14-0x40],rax
  00023: mov    QWORD PTR [r14-0x48],rax
  00027: mov    QWORD PTR [r14-0x50],rax
  0002b: mov    QWORD PTR [r14-0x58],rax
  0002f: mov    rdi,QWORD PTR [rbp-0x30]
  00033: test   rdi,0x7
  0003a: jne    0x38fc9
  00040: cmp    DWORD PTR [rdi+0x4],0x30
  00044: jne    0x38fc9
:00000 init_method reg:6 arg:0 pos:0 req:0 block:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  0004a: movq   xmm2,QWORD PTR [rip+0x289]        # 0x2db
  00052: movabs rax,0xb18968000000002
  0005c: mov    QWORD PTR [r14-0x38],rax
:00002 @t: Isect[IvarId(0)] = %1
  00060: mov    rdi,QWORD PTR [rbp-0x30]
  00064: mov    rax,QWORD PTR [r14-0x38]
  00068: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  0006c: mov    rax,0x14
  00073: mov    QWORD PTR [r14-0x38],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00077: mov    rdi,QWORD PTR [rbp-0x30]
  0007b: mov    rax,QWORD PTR [r14-0x38]
  0007f: mov    QWORD PTR [rdi+0x18],rax
:00005 %2 = const[Vec]                      [Vec]
  00083: mov    rax,QWORD PTR [rip+0xffffffffffff97e1]        # 0xffff986b
  0008a: cmp    rax,QWORD PTR [rip+0x26a]        # 0x2fb
  00091: jne    0x38fd8
  00097: mov    rax,QWORD PTR [rip+0x24d]        # 0x2eb
  0009e: mov    QWORD PTR [r14-0x40],rax
:00006 %3 = literal[0.0]
  000a2: movq   xmm2,QWORD PTR [rip+0x261]        # 0x30b
  000aa: movabs rax,0x8000000000000002
  000b4: mov    QWORD PTR [r14-0x48],rax
:00007 %4 = literal[0.0]
  000b8: movq   xmm3,QWORD PTR [rip+0x25b]        # 0x31b
  000c0: movabs rax,0x8000000000000002
  000ca: mov    QWORD PTR [r14-0x50],rax
:00008 %5 = literal[0.0]
  000ce: movq   xmm4,QWORD PTR [rip+0x255]        # 0x32b
  000d6: movabs rax,0x8000000000000002
  000e0: mov    QWORD PTR [r14-0x58],rax
:00009 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  000e4: mov    rdi,QWORD PTR [r14-0x40]
  000e8: test   rdi,0x7
  000ef: jne    0x3901e
  000f5: cmp    DWORD PTR [rdi+0x4],0x29
  000f9: jne    0x3901e
  000ff: cmp    DWORD PTR [rip+0xffffffffffff975e],0x26        # 0xffff9864
  00106: jne    0x3901e
  0010c: mov    r9,0x0
  00113: sub    rsp,0x20
  00117: movq   QWORD PTR [rsp],xmm2
  0011c: movq   QWORD PTR [rsp+0x8],xmm3
  00122: movq   QWORD PTR [rsp+0x10],xmm4
  00128: mov    rdx,rdi
  0012b: mov    QWORD PTR [rsp-0x40],rcx
  00130: mov    QWORD PTR [rsp-0x28],0x0
  00139: lea    rcx,[r14-0x48]
  0013d: mov    r8,0x3
  00144: mov    rsi,QWORD PTR [rbx]
  00147: mov    QWORD PTR [rsp-0x18],rsi
  0014c: lea    rsi,[rsp-0x18]
  00151: mov    QWORD PTR [rbx],rsi
  00154: lea    r14,[rsp-0x10]
  00159: mov    QWORD PTR [rsp-0x20],r14
  0015e: call   0x3902d
  00163: lea    r14,[rbp-0x8]
  00167: mov    QWORD PTR [rbx],r14
  0016a: mov    r14,QWORD PTR [rbp-0x10]
  0016e: movq   xmm2,QWORD PTR [rsp]
  00173: movq   xmm3,QWORD PTR [rsp+0x8]
  00179: movq   xmm4,QWORD PTR [rsp+0x10]
  0017f: add    rsp,0x20
  00183: movabs r13,0x564da0e73010
  0018d: test   rax,rax
  00190: je     0xffff64de
  00196: mov    QWORD PTR [r14-0x38],rax
:00010 
:00012 @pl: Isect[IvarId(2)] = %1
  0019a: mov    rdi,QWORD PTR [rbp-0x30]
  0019e: mov    rax,QWORD PTR [r14-0x38]
  001a2: mov    QWORD PTR [rdi+0x20],rax
:00013 %2 = const[Vec]                      [Vec]
  001a6: mov    rax,QWORD PTR [rip+0xffffffffffff96be]        # 0xffff986b
  001ad: cmp    rax,QWORD PTR [rip+0x197]        # 0x34b
  001b4: jne    0x3905f
  001ba: mov    rax,QWORD PTR [rip+0x17a]        # 0x33b
  001c1: mov    QWORD PTR [r14-0x40],rax
:00014 %3 = literal[0.0]
  001c5: movq   xmm2,QWORD PTR [rip+0x18e]        # 0x35b
  001cd: movabs rax,0x8000000000000002
  001d7: mov    QWORD PTR [r14-0x48],rax
:00015 %4 = literal[0.0]
  001db: movq   xmm3,QWORD PTR [rip+0x188]        # 0x36b
  001e3: movabs rax,0x8000000000000002
  001ed: mov    QWORD PTR [r14-0x50],rax
:00016 %5 = literal[0.0]
  001f1: movq   xmm4,QWORD PTR [rip+0x182]        # 0x37b
  001f9: movabs rax,0x8000000000000002
  00203: mov    QWORD PTR [r14-0x58],rax
:00017 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  00207: mov    rdi,QWORD PTR [r14-0x40]
  0020b: test   rdi,0x7
  00212: jne    0x390cf
  00218: cmp    DWORD PTR [rdi+0x4],0x29
  0021c: jne    0x390cf
  00222: cmp    DWORD PTR [rip+0xffffffffffff963b],0x26        # 0xffff9864
  00229: jne    0x390cf
  0022f: mov    r9,0x0
  00236: sub    rsp,0x20
  0023a: movq   QWORD PTR [rsp],xmm2
  0023f: movq   QWORD PTR [rsp+0x8],xmm3
  00245: movq   QWORD PTR [rsp+0x10],xmm4
  0024b: mov    rdx,rdi
  0024e: mov    QWORD PTR [rsp-0x40],rcx
  00253: mov    QWORD PTR [rsp-0x28],0x0
  0025c: lea    rcx,[r14-0x48]
  00260: mov    r8,0x3
  00267: mov    rsi,QWORD PTR [rbx]
  0026a: mov    QWORD PTR [rsp-0x18],rsi
  0026f: lea    rsi,[rsp-0x18]
  00274: mov    QWORD PTR [rbx],rsi
  00277: lea    r14,[rsp-0x10]
  0027c: mov    QWORD PTR [rsp-0x20],r14
  00281: call   0x390de
  00286: lea    r14,[rbp-0x8]
  0028a: mov    QWORD PTR [rbx],r14
  0028d: mov    r14,QWORD PTR [rbp-0x10]
  00291: movq   xmm2,QWORD PTR [rsp]
  00296: movq   xmm3,QWORD PTR [rsp+0x8]
  0029c: movq   xmm4,QWORD PTR [rsp+0x10]
  002a2: add    rsp,0x20
  002a6: movabs r13,0x564da0e73090
  002b0: test   rax,rax
  002b3: je     0xffff64de
  002b9: mov    QWORD PTR [r14-0x38],rax
:00018 
:00020 @n: Isect[IvarId(3)] = %1
  002bd: mov    rdi,QWORD PTR [rbp-0x30]
  002c1: mov    rax,QWORD PTR [r14-0x38]
  002c5: mov    QWORD PTR [rdi+0x28],rax
:00021 ret %1
  002c9: mov    rax,QWORD PTR [r14-0x38]
  002cd: leave  
  002ce: ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x564da0e92080
<== finished compile. elapsed:96.8µs
offset:Pos(40664) code: 6750 bytes  data: 114 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x38d8d
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x38d9c
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x38d9c
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x38dab
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x38dab
  000a1: 26 	cmp    DWORD PTR [rip+0xffffffffffff9439],0x26        # 0xffff94e1
  000a8:    	jne    0x38dab
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	mov    rax,QWORD PTR [r14-0x70]
  000cb:    	mov    QWORD PTR [rsp-0x48],rax
  000d0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000d9: 05 	movabs rax,0x1000500000042
  000e3:    	mov    QWORD PTR [rsp-0x30],rax
  000e8: 4d 	movabs r13,0x564da0e78160
  000f2:    	mov    rsi,QWORD PTR [rbx]
  000f5:    	mov    QWORD PTR [rsp-0x18],rsi
  000fa:    	lea    rsi,[rsp-0x18]
  000ff:    	mov    QWORD PTR [rbx],rsi
  00102:    	lea    r14,[rsp-0x10]
  00107:    	mov    QWORD PTR [rsp-0x20],r14
  0010c:    	call   0xffffa1a8
  00111:    	lea    r14,[rbp-0x8]
  00115:    	mov    QWORD PTR [rbx],r14
  00118:    	mov    r14,QWORD PTR [rbp-0x10]
  0011c: 4d 	movabs r13,0x564da0e920d0
  00126:    	test   rax,rax
  00129:    	je     0xffff615b
  0012f:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00133:    	mov    rdi,QWORD PTR [r14-0x48]
  00137: 00 	test   rdi,0x1
  0013e:    	jne    0x38dba
  00144: 00 	test   rdi,0x2
  0014b:    	je     0x187
  00151:    	xorps  xmm2,xmm2
  00154: 00 	movabs rax,0x8000000000000002
  0015e:    	cmp    rdi,rax
  00161:    	je     0x199
  00167:    	mov    rax,rdi
  0016a:    	sar    rax,0x3f
  0016e:    	add    rax,0x2
  00172:    	and    rdi,0xfffffffffffffffc
  00176:    	or     rdi,rax
  00179:    	rol    rdi,0x3d
  0017d:    	movq   xmm2,rdi
  00182:    	jmp    0x199
  00187:    	call   0xffff61b4
  0018c:    	test   rax,rax
  0018f:    	je     0x38dba
  00195:    	movq   xmm2,xmm0
  00199: 00 	xorps  xmm2,XMMWORD PTR [rip+0x18c8]        # 0x1a68
:00007 %7 = %1.call dir()                   [Ray]
  001a0:    	mov    rdi,QWORD PTR [r14-0x38]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x38dc9
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b5:    	jne    0x38dc9
  001bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff931f],0x26        # 0xffff94e1
  001c2:    	jne    0x38dc9
  001c8:    	mov    esi,DWORD PTR [rip+0x18a6]        # 0x1a74
  001ce:    	cmp    esi,0xffffffff
  001d1:    	je     0x38de5
  001d7:    	cmp    WORD PTR [rdi+0x2],0x3
  001dc:    	jne    0x1f5
  001e2:    	cmp    esi,0x6
  001e5:    	jge    0x1f5
  001eb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f0:    	jmp    0x213
  001f5:    	sub    rsp,0x10
  001f9:    	movq   QWORD PTR [rsp],xmm2
  001fe: 4d 	movabs rax,0x564da0797d70
  00208:    	call   rax
  0020a:    	movq   xmm2,QWORD PTR [rsp]
  0020f:    	add    rsp,0x10
  00213:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00217:    	mov    rdi,QWORD PTR [rbp-0x30]
  0021b:    	mov    rax,QWORD PTR [rdi+0x18]
  0021f:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00223:    	mov    rdi,QWORD PTR [r14-0x68]
  00227: 00 	test   rdi,0x7
  0022e:    	jne    0x38e20
  00234:    	cmp    DWORD PTR [rdi+0x4],0x28
  00238:    	jne    0x38e20
  0023e: 26 	cmp    DWORD PTR [rip+0xffffffffffff929c],0x26        # 0xffff94e1
  00245:    	jne    0x38e20
  0024b:    	sub    rsp,0x10
  0024f:    	movq   QWORD PTR [rsp],xmm2
  00254: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0025d:    	mov    rax,QWORD PTR [r14-0x68]
  00261:    	mov    QWORD PTR [rsp-0x40],rax
  00266: 00 	mov    rdi,0x1
  0026d:    	mov    rax,QWORD PTR [r14-0x70]
  00271:    	mov    QWORD PTR [rsp-0x48],rax
  00276: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0027f: 05 	movabs rax,0x1000500000042
  00289:    	mov    QWORD PTR [rsp-0x30],rax
  0028e: 4d 	movabs r13,0x564da0e78160
  00298:    	mov    rsi,QWORD PTR [rbx]
  0029b:    	mov    QWORD PTR [rsp-0x18],rsi
  002a0:    	lea    rsi,[rsp-0x18]
  002a5:    	mov    QWORD PTR [rbx],rsi
  002a8:    	lea    r14,[rsp-0x10]
  002ad:    	mov    QWORD PTR [rsp-0x20],r14
  002b2:    	call   0xffffa1a8
  002b7:    	lea    r14,[rbp-0x8]
  002bb:    	mov    QWORD PTR [rbx],r14
  002be:    	mov    r14,QWORD PTR [rbp-0x10]
  002c2:    	movq   xmm2,QWORD PTR [rsp]
  002c7:    	add    rsp,0x10
  002cb: 4d 	movabs r13,0x564da0e92150
  002d5:    	test   rax,rax
  002d8:    	je     0xffff615b
  002de:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002e2:    	mov    rax,QWORD PTR [r14-0x50]
  002e6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002ea: 00 	movq   xmm3,QWORD PTR [rip+0x1786]        # 0x1a78
  002f2: 00 	movabs rax,0x8000000000000002
  002fc:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00300:    	mov    rdi,QWORD PTR [r14-0x50]
  00304: 00 	test   rdi,0x1
  0030b:    	jne    0x38e3c
  00311: 00 	test   rdi,0x2
  00318:    	je     0x354
  0031e:    	xorps  xmm4,xmm4
  00321: 00 	movabs rax,0x8000000000000002
  0032b:    	cmp    rdi,rax
  0032e:    	je     0x366
  00334:    	mov    rax,rdi
  00337:    	sar    rax,0x3f
  0033b:    	add    rax,0x2
  0033f:    	and    rdi,0xfffffffffffffffc
  00343:    	or     rdi,rax
  00346:    	rol    rdi,0x3d
  0034a:    	movq   xmm4,rdi
  0034f:    	jmp    0x366
  00354:    	call   0xffff61b4
  00359:    	test   rax,rax
  0035c:    	je     0x38e3c
  00362:    	movq   xmm4,xmm0
  00366:    	ucomisd xmm4,xmm3
  0036a:    	jae    0x38e9c
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  00370: 00 	cmp    DWORD PTR [rip+0x1709],0x0        # 0x1a80
  00377:    	jl     0x38e58
  0037d:    	je     0x38e81
  00383: 01 	sub    DWORD PTR [rip+0x16f6],0x1        # 0x1a80
  0038a:    	xor    rdi,rdi
  0038d:    	jmp    0x38e58
  00392:    	movq   xmm0,xmm4
  00396:    	call   0xffff62d8
  0039b:    	mov    QWORD PTR [r14-0x58],rax
  0039f:    	sub    rsp,0x20
  003a3:    	movq   QWORD PTR [rsp],xmm2
  003a8:    	movq   QWORD PTR [rsp+0x8],xmm3
  003ae:    	movq   QWORD PTR [rsp+0x10],xmm4
  003b4:    	mov    rdi,QWORD PTR [r14-0x58]
  003b8:    	mov    rdx,rdi
  003bb:    	mov    rdi,rbx
  003be:    	mov    rsi,r12
  003c1: 4d 	movabs rax,0x564da07d8d00
  003cb:    	call   rax
  003cd:    	movq   xmm2,QWORD PTR [rsp]
  003d2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003de:    	add    rsp,0x20
  003e2: 4d 	movabs r13,0x564da0e921c0
  003ec:    	test   rax,rax
  003ef:    	je     0xffff615b
  003f5:    	mov    QWORD PTR [r14-0x58],rax
:00020 br =>:00021
  003f9:    	jmp    0x38ec2
:00021 %7 = literal[1e-17]
  003fe: 00 	movq   xmm3,QWORD PTR [rip+0x1682]        # 0x1a88
  00406: aa 	movabs rax,0xe33877aa3236a4ba
  00410:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  00414:    	mov    rdi,QWORD PTR [r14-0x58]
  00418: 00 	test   rdi,0x1
  0041f:    	jne    0x38ee8
  00425: 00 	test   rdi,0x2
  0042c:    	je     0x468
  00432:    	xorps  xmm5,xmm5
  00435: 00 	movabs rax,0x8000000000000002
  0043f:    	cmp    rdi,rax
  00442:    	je     0x47a
  00448:    	mov    rax,rdi
  0044b:    	sar    rax,0x3f
  0044f:    	add    rax,0x2
  00453:    	and    rdi,0xfffffffffffffffc
  00457:    	or     rdi,rax
  0045a:    	rol    rdi,0x3d
  0045e:    	movq   xmm5,rdi
  00463:    	jmp    0x47a
  00468:    	call   0xffff61b4
  0046d:    	test   rax,rax
  00470:    	je     0x38ee8
  00476:    	movq   xmm5,xmm0
  0047a:    	ucomisd xmm5,xmm3
  0047e:    	jae    0x492
:00024 %7 = nil
  00484: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  0048c:    	mov    rax,QWORD PTR [r14-0x68]
  00490:    	leave  
  00491:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00492:    	mov    rdi,QWORD PTR [r14-0x38]
  00496: 00 	test   rdi,0x7
  0049d:    	jne    0x38f04
  004a3:    	cmp    DWORD PTR [rdi+0x4],0x2e
  004a7:    	jne    0x38f04
  004ad: 26 	cmp    DWORD PTR [rip+0xffffffffffff902d],0x26        # 0xffff94e1
  004b4:    	jne    0x38f04
  004ba:    	mov    esi,DWORD PTR [rip+0x15d4]        # 0x1a94
  004c0:    	cmp    esi,0xffffffff
  004c3:    	je     0x38f20
  004c9:    	cmp    WORD PTR [rdi+0x2],0x3
  004ce:    	jne    0x4e7
  004d4:    	cmp    esi,0x6
  004d7:    	jge    0x4e7
  004dd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004e2:    	jmp    0x529
  004e7:    	sub    rsp,0x20
  004eb:    	movq   QWORD PTR [rsp],xmm2
  004f0:    	movq   QWORD PTR [rsp+0x8],xmm3
  004f6:    	movq   QWORD PTR [rsp+0x10],xmm4
  004fc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00502: 4d 	movabs rax,0x564da0797d70
  0050c:    	call   rax
  0050e:    	movq   xmm2,QWORD PTR [rsp]
  00513:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00519:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0051f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00525:    	add    rsp,0x20
  00529:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  0052d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00531:    	mov    rax,QWORD PTR [rdi+0x18]
  00535:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  00539:    	mov    rdi,QWORD PTR [r14-0x70]
  0053d: 00 	test   rdi,0x7
  00544:    	jne    0x38f7f
  0054a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0054e:    	jne    0x38f7f
  00554: 26 	cmp    DWORD PTR [rip+0xffffffffffff8f86],0x26        # 0xffff94e1
  0055b:    	jne    0x38f7f
  00561:    	sub    rsp,0x20
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00570:    	movq   QWORD PTR [rsp+0x10],xmm5
  00576: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0057f:    	mov    rax,QWORD PTR [r14-0x70]
  00583:    	mov    QWORD PTR [rsp-0x40],rax
  00588: 00 	mov    rdi,0x1
  0058f:    	mov    rax,QWORD PTR [r14-0x78]
  00593:    	mov    QWORD PTR [rsp-0x48],rax
  00598: 00 	mov    QWORD PTR [rsp-0x38],0x0
  005a1: 05 	movabs rax,0x1000500000042
  005ab:    	mov    QWORD PTR [rsp-0x30],rax
  005b0: 4d 	movabs r13,0x564da0e78160
  005ba:    	mov    rsi,QWORD PTR [rbx]
  005bd:    	mov    QWORD PTR [rsp-0x18],rsi
  005c2:    	lea    rsi,[rsp-0x18]
  005c7:    	mov    QWORD PTR [rbx],rsi
  005ca:    	lea    r14,[rsp-0x10]
  005cf:    	mov    QWORD PTR [rsp-0x20],r14
  005d4:    	call   0xffffa1a8
  005d9:    	lea    r14,[rbp-0x8]
  005dd:    	mov    QWORD PTR [rbx],r14
  005e0:    	mov    r14,QWORD PTR [rbp-0x10]
  005e4:    	movq   xmm2,QWORD PTR [rsp]
  005e9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005ef:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005f5:    	add    rsp,0x20
  005f9: 4d 	movabs r13,0x564da0e92290
  00603:    	test   rax,rax
  00606:    	je     0xffff615b
  0060c:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00610:    	mov    rdi,QWORD PTR [r14-0x68]
  00614: 00 	test   rdi,0x1
  0061b:    	jne    0x38f9b
  00621: 00 	test   rdi,0x2
  00628:    	je     0x664
  0062e:    	xorps  xmm3,xmm3
  00631: 00 	movabs rax,0x8000000000000002
  0063b:    	cmp    rdi,rax
  0063e:    	je     0x676
  00644:    	mov    rax,rdi
  00647:    	sar    rax,0x3f
  0064b:    	add    rax,0x2
  0064f:    	and    rdi,0xfffffffffffffffc
  00653:    	or     rdi,rax
  00656:    	rol    rdi,0x3d
  0065a:    	movq   xmm3,rdi
  0065f:    	jmp    0x676
  00664:    	call   0xffff61b4
  00669:    	test   rax,rax
  0066c:    	je     0x38f9b
  00672:    	movq   xmm3,xmm0
  00676:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0067a: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1417]        # 0x1a98
:00036 %6 = %7 / %4                         [Float][Float]
  00681:    	movq   xmm6,xmm3
  00685:    	movq   rax,xmm4
  0068a:    	test   rax,rax
  0068d:    	je     0xffff6180
  00693:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00697: 00 	movq   xmm3,QWORD PTR [rip+0x1409]        # 0x1aa8
  0069f: 00 	movabs rax,0x8000000000000002
  006a9:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  006ad:    	ucomisd xmm6,xmm3
  006b1:    	jbe    0x3971d
:00040 %7 = %2.call t()                     [<INVALID>]
  006b7: 00 	cmp    DWORD PTR [rip+0x13f2],0x0        # 0x1ab0
  006be:    	jl     0x38fb7
  006c4:    	je     0x38fe0
  006ca: 01 	sub    DWORD PTR [rip+0x13df],0x1        # 0x1ab0
  006d1:    	xor    rdi,rdi
  006d4:    	jmp    0x38fb7
  006d9:    	sub    rsp,0x20
  006dd:    	movq   QWORD PTR [rsp],xmm2
  006e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  006e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  006ee:    	movq   QWORD PTR [rsp+0x18],xmm6
  006f4:    	mov    rdi,QWORD PTR [r14-0x40]
  006f8: 4d 	movabs rax,0x564da0826bb0
  00702:    	call   rax
  00704:    	mov    r15d,eax
  00707: 4d 	movabs r13,0x564da0e92310
  00711:    	cmp    QWORD PTR [r13+0x8],0x0
  00716:    	je     0x38ffb
  0071c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00720:    	jne    0x38ffb
  00726:    	mov    eax,DWORD PTR [rip+0xffffffffffff8db5]        # 0xffff94e1
  0072c:    	cmp    DWORD PTR [r13-0x4],eax
  00730:    	jne    0x38ffb
  00736: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0073f:    	mov    rax,QWORD PTR [r14-0x40]
  00743:    	mov    QWORD PTR [rsp-0x40],rax
  00748: 00 	mov    rdi,0x0
  0074f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00758:    	mov    rax,QWORD PTR [r13+0x10]
  0075c:    	mov    QWORD PTR [rsp-0x30],rax
  00761:    	mov    rax,QWORD PTR [r13+0x8]
  00765:    	mov    r13,QWORD PTR [r13+0x18]
  00769:    	mov    rsi,QWORD PTR [rbx]
  0076c:    	mov    QWORD PTR [rsp-0x18],rsi
  00771:    	lea    rsi,[rsp-0x18]
  00776:    	mov    QWORD PTR [rbx],rsi
  00779:    	lea    r14,[rsp-0x10]
  0077e:    	mov    QWORD PTR [rsp-0x20],r14
  00783:    	call   rax
  00785:    	lea    r14,[rbp-0x8]
  00789:    	mov    QWORD PTR [rbx],r14
  0078c:    	mov    r14,QWORD PTR [rbp-0x10]
  00790:    	movq   xmm2,QWORD PTR [rsp]
  00795:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0079b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007a1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007a7:    	add    rsp,0x20
  007ab:    	test   rax,rax
  007ae:    	je     0x39045
  007b4:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  007b8:    	movq   xmm0,xmm6
  007bc:    	call   0xffff62d8
  007c1:    	mov    QWORD PTR [r14-0x60],rax
  007c5:    	mov    rdi,QWORD PTR [r14-0x60]
  007c9:    	mov    rsi,QWORD PTR [r14-0x68]
  007cd: 00 	test   rdi,0x1
  007d4:    	je     0x39054
  007da: 00 	test   rsi,0x1
  007e1:    	je     0x39054
  007e7:    	cmp    rdi,rsi
  007ea:    	jge    0x39750
:00045 %7 = literal[true]
  007f0: 00 	mov    rax,0x1c
  007f7:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007fb:    	sub    rsp,0x20
  007ff:    	movq   QWORD PTR [rsp],xmm2
  00804:    	movq   QWORD PTR [rsp+0x8],xmm4
  0080a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00810:    	movq   QWORD PTR [rsp+0x18],xmm6
  00816:    	mov    rdi,QWORD PTR [r14-0x40]
  0081a: 4d 	movabs rax,0x564da0826bb0
  00824:    	call   rax
  00826:    	mov    r15d,eax
  00829: 4d 	movabs r13,0x564da0e92370
  00833:    	cmp    QWORD PTR [r13+0x8],0x0
  00838:    	je     0x390a9
  0083e:    	cmp    r15d,DWORD PTR [r13-0x8]
  00842:    	jne    0x390a9
  00848:    	mov    eax,DWORD PTR [rip+0xffffffffffff8c93]        # 0xffff94e1
  0084e:    	cmp    DWORD PTR [r13-0x4],eax
  00852:    	jne    0x390a9
  00858: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00861:    	mov    rax,QWORD PTR [r14-0x40]
  00865:    	mov    QWORD PTR [rsp-0x40],rax
  0086a: 00 	mov    rdi,0x1
  00871:    	mov    rax,QWORD PTR [r14-0x68]
  00875:    	mov    QWORD PTR [rsp-0x48],rax
  0087a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00883:    	mov    rax,QWORD PTR [r13+0x10]
  00887:    	mov    QWORD PTR [rsp-0x30],rax
  0088c:    	mov    rax,QWORD PTR [r13+0x8]
  00890:    	mov    r13,QWORD PTR [r13+0x18]
  00894:    	mov    rsi,QWORD PTR [rbx]
  00897:    	mov    QWORD PTR [rsp-0x18],rsi
  0089c:    	lea    rsi,[rsp-0x18]
  008a1:    	mov    QWORD PTR [rbx],rsi
  008a4:    	lea    r14,[rsp-0x10]
  008a9:    	mov    QWORD PTR [rsp-0x20],r14
  008ae:    	call   rax
  008b0:    	lea    r14,[rbp-0x8]
  008b4:    	mov    QWORD PTR [rbx],r14
  008b7:    	mov    r14,QWORD PTR [rbp-0x10]
  008bb:    	movq   xmm2,QWORD PTR [rsp]
  008c0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008c6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008cc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008d2:    	add    rsp,0x20
  008d6:    	test   rax,rax
  008d9:    	je     0x390f3
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  008df:    	sub    rsp,0x20
  008e3:    	movq   QWORD PTR [rsp],xmm2
  008e8:    	movq   QWORD PTR [rsp+0x8],xmm4
  008ee:    	movq   QWORD PTR [rsp+0x10],xmm5
  008f4:    	movq   QWORD PTR [rsp+0x18],xmm6
  008fa:    	mov    rdi,QWORD PTR [r14-0x40]
  008fe: 4d 	movabs rax,0x564da0826bb0
  00908:    	call   rax
  0090a:    	mov    r15d,eax
  0090d: 4d 	movabs r13,0x564da0e923a0
  00917:    	cmp    QWORD PTR [r13+0x8],0x0
  0091c:    	je     0x39102
  00922:    	cmp    r15d,DWORD PTR [r13-0x8]
  00926:    	jne    0x39102
  0092c:    	mov    eax,DWORD PTR [rip+0xffffffffffff8baf]        # 0xffff94e1
  00932:    	cmp    DWORD PTR [r13-0x4],eax
  00936:    	jne    0x39102
  0093c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00945:    	mov    rax,QWORD PTR [r14-0x40]
  00949:    	mov    QWORD PTR [rsp-0x40],rax
  0094e: 00 	mov    rdi,0x1
  00955:    	mov    rax,QWORD PTR [r14-0x60]
  00959:    	mov    QWORD PTR [rsp-0x48],rax
  0095e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00967:    	mov    rax,QWORD PTR [r13+0x10]
  0096b:    	mov    QWORD PTR [rsp-0x30],rax
  00970:    	mov    rax,QWORD PTR [r13+0x8]
  00974:    	mov    r13,QWORD PTR [r13+0x18]
  00978:    	mov    rsi,QWORD PTR [rbx]
  0097b:    	mov    QWORD PTR [rsp-0x18],rsi
  00980:    	lea    rsi,[rsp-0x18]
  00985:    	mov    QWORD PTR [rbx],rsi
  00988:    	lea    r14,[rsp-0x10]
  0098d:    	mov    QWORD PTR [rsp-0x20],r14
  00992:    	call   rax
  00994:    	lea    r14,[rbp-0x8]
  00998:    	mov    QWORD PTR [rbx],r14
  0099b:    	mov    r14,QWORD PTR [rbp-0x10]
  0099f:    	movq   xmm2,QWORD PTR [rsp]
  009a4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009aa:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009b0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009b6:    	add    rsp,0x20
  009ba:    	test   rax,rax
  009bd:    	je     0x3914c
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  009c3:    	mov    rdi,QWORD PTR [rbp-0x30]
  009c7:    	sub    rsp,0x20
  009cb:    	movq   QWORD PTR [rsp],xmm2
  009d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  009d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  009dc:    	movq   QWORD PTR [rsp+0x18],xmm6
  009e2: 00 	mov    rsi,0x97
  009e9:    	mov    rdx,r12
  009ec: 4d 	movabs rax,0x564da0819e20
  009f6:    	call   rax
  009f8:    	movq   xmm2,QWORD PTR [rsp]
  009fd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a03:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a09:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a0f:    	add    rsp,0x20
  00a13:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00a17:    	sub    rsp,0x20
  00a1b:    	movq   QWORD PTR [rsp],xmm2
  00a20:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a26:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a2c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a32:    	mov    rdi,QWORD PTR [r14-0x40]
  00a36: 4d 	movabs rax,0x564da0826bb0
  00a40:    	call   rax
  00a42:    	mov    r15d,eax
  00a45: 4d 	movabs r13,0x564da0e923e0
  00a4f:    	cmp    QWORD PTR [r13+0x8],0x0
  00a54:    	je     0x3915b
  00a5a:    	cmp    r15d,DWORD PTR [r13-0x8]
  00a5e:    	jne    0x3915b
  00a64:    	mov    eax,DWORD PTR [rip+0xffffffffffff8a77]        # 0xffff94e1
  00a6a:    	cmp    DWORD PTR [r13-0x4],eax
  00a6e:    	jne    0x3915b
  00a74: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00a7d:    	mov    rax,QWORD PTR [r14-0x40]
  00a81:    	mov    QWORD PTR [rsp-0x40],rax
  00a86: 00 	mov    rdi,0x1
  00a8d:    	mov    rax,QWORD PTR [r14-0x68]
  00a91:    	mov    QWORD PTR [rsp-0x48],rax
  00a96: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00a9f:    	mov    rax,QWORD PTR [r13+0x10]
  00aa3:    	mov    QWORD PTR [rsp-0x30],rax
  00aa8:    	mov    rax,QWORD PTR [r13+0x8]
  00aac:    	mov    r13,QWORD PTR [r13+0x18]
  00ab0:    	mov    rsi,QWORD PTR [rbx]
  00ab3:    	mov    QWORD PTR [rsp-0x18],rsi
  00ab8:    	lea    rsi,[rsp-0x18]
  00abd:    	mov    QWORD PTR [rbx],rsi
  00ac0:    	lea    r14,[rsp-0x10]
  00ac5:    	mov    QWORD PTR [rsp-0x20],r14
  00aca:    	call   rax
  00acc:    	lea    r14,[rbp-0x8]
  00ad0:    	mov    QWORD PTR [rbx],r14
  00ad3:    	mov    r14,QWORD PTR [rbp-0x10]
  00ad7:    	movq   xmm2,QWORD PTR [rsp]
  00adc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ae2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ae8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aee:    	add    rsp,0x20
  00af2:    	test   rax,rax
  00af5:    	je     0x391a5
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00afb: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff89e6]        # 0xffff94e8
  00b02: 00 	cmp    rax,QWORD PTR [rip+0xfbf]        # 0x1ac8
  00b09:    	jne    0x391b4
  00b0f: 00 	mov    rax,QWORD PTR [rip+0xfa2]        # 0x1ab8
  00b16:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00b1a:    	sub    rsp,0x20
  00b1e:    	movq   QWORD PTR [rsp],xmm2
  00b23:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b29:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b2f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b35:    	mov    rdi,QWORD PTR [r14-0x38]
  00b39: 4d 	movabs rax,0x564da0826bb0
  00b43:    	call   rax
  00b45:    	mov    r15d,eax
  00b48: 4d 	movabs r13,0x564da0e92420
  00b52:    	cmp    QWORD PTR [r13+0x8],0x0
  00b57:    	je     0x39230
  00b5d:    	cmp    r15d,DWORD PTR [r13-0x8]
  00b61:    	jne    0x39230
  00b67:    	mov    eax,DWORD PTR [rip+0xffffffffffff8974]        # 0xffff94e1
  00b6d:    	cmp    DWORD PTR [r13-0x4],eax
  00b71:    	jne    0x39230
  00b77: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b80:    	mov    rax,QWORD PTR [r14-0x38]
  00b84:    	mov    QWORD PTR [rsp-0x40],rax
  00b89: 00 	mov    rdi,0x0
  00b90: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b99:    	mov    rax,QWORD PTR [r13+0x10]
  00b9d:    	mov    QWORD PTR [rsp-0x30],rax
  00ba2:    	mov    rax,QWORD PTR [r13+0x8]
  00ba6:    	mov    r13,QWORD PTR [r13+0x18]
  00baa:    	mov    rsi,QWORD PTR [rbx]
  00bad:    	mov    QWORD PTR [rsp-0x18],rsi
  00bb2:    	lea    rsi,[rsp-0x18]
  00bb7:    	mov    QWORD PTR [rbx],rsi
  00bba:    	lea    r14,[rsp-0x10]
  00bbf:    	mov    QWORD PTR [rsp-0x20],r14
  00bc4:    	call   rax
  00bc6:    	lea    r14,[rbp-0x8]
  00bca:    	mov    QWORD PTR [rbx],r14
  00bcd:    	mov    r14,QWORD PTR [rbp-0x10]
  00bd1:    	movq   xmm2,QWORD PTR [rsp]
  00bd6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bdc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00be2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00be8:    	add    rsp,0x20
  00bec:    	test   rax,rax
  00bef:    	je     0x3927a
  00bf5:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bf9:    	sub    rsp,0x20
  00bfd:    	movq   QWORD PTR [rsp],xmm2
  00c02:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c08:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c0e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c14:    	mov    rdi,QWORD PTR [r14-0x80]
  00c18: 4d 	movabs rax,0x564da0826bb0
  00c22:    	call   rax
  00c24:    	mov    r15d,eax
  00c27: 4d 	movabs r13,0x564da0e92450
  00c31:    	cmp    QWORD PTR [r13+0x8],0x0
  00c36:    	je     0x39289
  00c3c:    	cmp    r15d,DWORD PTR [r13-0x8]
  00c40:    	jne    0x39289
  00c46:    	mov    eax,DWORD PTR [rip+0xffffffffffff8895]        # 0xffff94e1
  00c4c:    	cmp    DWORD PTR [r13-0x4],eax
  00c50:    	jne    0x39289
  00c56: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00c5f:    	mov    rax,QWORD PTR [r14-0x80]
  00c63:    	mov    QWORD PTR [rsp-0x40],rax
  00c68: 00 	mov    rdi,0x0
  00c6f: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c78:    	mov    rax,QWORD PTR [r13+0x10]
  00c7c:    	mov    QWORD PTR [rsp-0x30],rax
  00c81:    	mov    rax,QWORD PTR [r13+0x8]
  00c85:    	mov    r13,QWORD PTR [r13+0x18]
  00c89:    	mov    rsi,QWORD PTR [rbx]
  00c8c:    	mov    QWORD PTR [rsp-0x18],rsi
  00c91:    	lea    rsi,[rsp-0x18]
  00c96:    	mov    QWORD PTR [rbx],rsi
  00c99:    	lea    r14,[rsp-0x10]
  00c9e:    	mov    QWORD PTR [rsp-0x20],r14
  00ca3:    	call   rax
  00ca5:    	lea    r14,[rbp-0x8]
  00ca9:    	mov    QWORD PTR [rbx],r14
  00cac:    	mov    r14,QWORD PTR [rbp-0x10]
  00cb0:    	movq   xmm2,QWORD PTR [rsp]
  00cb5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cbb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00cc1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00cc7:    	add    rsp,0x20
  00ccb:    	test   rax,rax
  00cce:    	je     0x392d3
  00cd4:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00cd8:    	sub    rsp,0x20
  00cdc:    	movq   QWORD PTR [rsp],xmm2
  00ce1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ced:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf3:    	mov    rdi,QWORD PTR [r14-0x38]
  00cf7: 4d 	movabs rax,0x564da0826bb0
  00d01:    	call   rax
  00d03:    	mov    r15d,eax
  00d06: 4d 	movabs r13,0x564da0e92480
  00d10:    	cmp    QWORD PTR [r13+0x8],0x0
  00d15:    	je     0x392e2
  00d1b:    	cmp    r15d,DWORD PTR [r13-0x8]
  00d1f:    	jne    0x392e2
  00d25:    	mov    eax,DWORD PTR [rip+0xffffffffffff87b6]        # 0xffff94e1
  00d2b:    	cmp    DWORD PTR [r13-0x4],eax
  00d2f:    	jne    0x392e2
  00d35: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d3e:    	mov    rax,QWORD PTR [r14-0x38]
  00d42:    	mov    QWORD PTR [rsp-0x40],rax
  00d47: 00 	mov    rdi,0x0
  00d4e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d57:    	mov    rax,QWORD PTR [r13+0x10]
  00d5b:    	mov    QWORD PTR [rsp-0x30],rax
  00d60:    	mov    rax,QWORD PTR [r13+0x8]
  00d64:    	mov    r13,QWORD PTR [r13+0x18]
  00d68:    	mov    rsi,QWORD PTR [rbx]
  00d6b:    	mov    QWORD PTR [rsp-0x18],rsi
  00d70:    	lea    rsi,[rsp-0x18]
  00d75:    	mov    QWORD PTR [rbx],rsi
  00d78:    	lea    r14,[rsp-0x10]
  00d7d:    	mov    QWORD PTR [rsp-0x20],r14
  00d82:    	call   rax
  00d84:    	lea    r14,[rbp-0x8]
  00d88:    	mov    QWORD PTR [rbx],r14
  00d8b:    	mov    r14,QWORD PTR [rbp-0x10]
  00d8f:    	movq   xmm2,QWORD PTR [rsp]
  00d94:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d9a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00da0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00da6:    	add    rsp,0x20
  00daa:    	test   rax,rax
  00dad:    	je     0x3932c
  00db3: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00dba:    	sub    rsp,0x20
  00dbe:    	movq   QWORD PTR [rsp],xmm2
  00dc3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dc9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dcf:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dd5: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00ddc: 4d 	movabs rax,0x564da0826bb0
  00de6:    	call   rax
  00de8:    	mov    r15d,eax
  00deb: 4d 	movabs r13,0x564da0e924b0
  00df5:    	cmp    QWORD PTR [r13+0x8],0x0
  00dfa:    	je     0x3933b
  00e00:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e04:    	jne    0x3933b
  00e0a:    	mov    eax,DWORD PTR [rip+0xffffffffffff86d1]        # 0xffff94e1
  00e10:    	cmp    DWORD PTR [r13-0x4],eax
  00e14:    	jne    0x3933b
  00e1a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00e23: ff 	mov    rax,QWORD PTR [r14-0x88]
  00e2a:    	mov    QWORD PTR [rsp-0x40],rax
  00e2f: 00 	mov    rdi,0x0
  00e36: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00e3f:    	mov    rax,QWORD PTR [r13+0x10]
  00e43:    	mov    QWORD PTR [rsp-0x30],rax
  00e48:    	mov    rax,QWORD PTR [r13+0x8]
  00e4c:    	mov    r13,QWORD PTR [r13+0x18]
  00e50:    	mov    rsi,QWORD PTR [rbx]
  00e53:    	mov    QWORD PTR [rsp-0x18],rsi
  00e58:    	lea    rsi,[rsp-0x18]
  00e5d:    	mov    QWORD PTR [rbx],rsi
  00e60:    	lea    r14,[rsp-0x10]
  00e65:    	mov    QWORD PTR [rsp-0x20],r14
  00e6a:    	call   rax
  00e6c:    	lea    r14,[rbp-0x8]
  00e70:    	mov    QWORD PTR [rbx],r14
  00e73:    	mov    r14,QWORD PTR [rbp-0x10]
  00e77:    	movq   xmm2,QWORD PTR [rsp]
  00e7c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e82:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e88:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e8e:    	add    rsp,0x20
  00e92:    	test   rax,rax
  00e95:    	je     0x39388
  00e9b:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e9f:    	mov    rdi,QWORD PTR [r14-0x60]
  00ea3:    	mov    rsi,QWORD PTR [r14-0x80]
  00ea7:    	sub    rsp,0x20
  00eab:    	movq   QWORD PTR [rsp],xmm2
  00eb0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eb6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ebc:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec2:    	mov    rdx,rdi
  00ec5:    	mov    rcx,rsi
  00ec8:    	mov    rdi,rbx
  00ecb:    	mov    rsi,r12
  00ece: 4d 	movabs rax,0x564da07dc050
  00ed8:    	call   rax
  00eda:    	movq   xmm2,QWORD PTR [rsp]
  00edf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ee5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eeb:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ef1:    	add    rsp,0x20
  00ef5: 4d 	movabs r13,0x564da0e924e0
  00eff:    	test   rax,rax
  00f02:    	je     0xffff615b
  00f08:    	mov    QWORD PTR [r14-0x80],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00f0c:    	mov    rdi,QWORD PTR [r14-0x78]
  00f10:    	mov    rsi,QWORD PTR [r14-0x80]
  00f14:    	sub    rsp,0x20
  00f18:    	movq   QWORD PTR [rsp],xmm2
  00f1d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f23:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f29:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f2f:    	mov    rdx,rdi
  00f32:    	mov    rcx,rsi
  00f35:    	mov    rdi,rbx
  00f38:    	mov    rsi,r12
  00f3b: 4d 	movabs rax,0x564da07da0d0
  00f45:    	call   rax
  00f47:    	movq   xmm2,QWORD PTR [rsp]
  00f4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f58:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f5e:    	add    rsp,0x20
  00f62: 4d 	movabs r13,0x564da0e924f0
  00f6c:    	test   rax,rax
  00f6f:    	je     0xffff615b
  00f75:    	mov    QWORD PTR [r14-0x78],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f79:    	sub    rsp,0x20
  00f7d:    	movq   QWORD PTR [rsp],xmm2
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f8e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f94:    	mov    rdi,QWORD PTR [r14-0x38]
  00f98: 4d 	movabs rax,0x564da0826bb0
  00fa2:    	call   rax
  00fa4:    	mov    r15d,eax
  00fa7: 4d 	movabs r13,0x564da0e92500
  00fb1:    	cmp    QWORD PTR [r13+0x8],0x0
  00fb6:    	je     0x39397
  00fbc:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fc0:    	jne    0x39397
  00fc6:    	mov    eax,DWORD PTR [rip+0xffffffffffff8515]        # 0xffff94e1
  00fcc:    	cmp    DWORD PTR [r13-0x4],eax
  00fd0:    	jne    0x39397
  00fd6: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fdf:    	mov    rax,QWORD PTR [r14-0x38]
  00fe3:    	mov    QWORD PTR [rsp-0x40],rax
  00fe8: 00 	mov    rdi,0x0
  00fef: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ff8:    	mov    rax,QWORD PTR [r13+0x10]
  00ffc:    	mov    QWORD PTR [rsp-0x30],rax
  01001:    	mov    rax,QWORD PTR [r13+0x8]
  01005:    	mov    r13,QWORD PTR [r13+0x18]
  01009:    	mov    rsi,QWORD PTR [rbx]
  0100c:    	mov    QWORD PTR [rsp-0x18],rsi
  01011:    	lea    rsi,[rsp-0x18]
  01016:    	mov    QWORD PTR [rbx],rsi
  01019:    	lea    r14,[rsp-0x10]
  0101e:    	mov    QWORD PTR [rsp-0x20],r14
  01023:    	call   rax
  01025:    	lea    r14,[rbp-0x8]
  01029:    	mov    QWORD PTR [rbx],r14
  0102c:    	mov    r14,QWORD PTR [rbp-0x10]
  01030:    	movq   xmm2,QWORD PTR [rsp]
  01035:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0103b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01041:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01047:    	add    rsp,0x20
  0104b:    	test   rax,rax
  0104e:    	je     0x393e1
  01054: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  0105b:    	sub    rsp,0x20
  0105f:    	movq   QWORD PTR [rsp],xmm2
  01064:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01070:    	movq   QWORD PTR [rsp+0x18],xmm6
  01076: ff 	mov    rdi,QWORD PTR [r14-0x88]
  0107d: 4d 	movabs rax,0x564da0826bb0
  01087:    	call   rax
  01089:    	mov    r15d,eax
  0108c: 4d 	movabs r13,0x564da0e92530
  01096:    	cmp    QWORD PTR [r13+0x8],0x0
  0109b:    	je     0x393f0
  010a1:    	cmp    r15d,DWORD PTR [r13-0x8]
  010a5:    	jne    0x393f0
  010ab:    	mov    eax,DWORD PTR [rip+0xffffffffffff8430]        # 0xffff94e1
  010b1:    	cmp    DWORD PTR [r13-0x4],eax
  010b5:    	jne    0x393f0
  010bb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  010c4: ff 	mov    rax,QWORD PTR [r14-0x88]
  010cb:    	mov    QWORD PTR [rsp-0x40],rax
  010d0: 00 	mov    rdi,0x0
  010d7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  010e0:    	mov    rax,QWORD PTR [r13+0x10]
  010e4:    	mov    QWORD PTR [rsp-0x30],rax
  010e9:    	mov    rax,QWORD PTR [r13+0x8]
  010ed:    	mov    r13,QWORD PTR [r13+0x18]
  010f1:    	mov    rsi,QWORD PTR [rbx]
  010f4:    	mov    QWORD PTR [rsp-0x18],rsi
  010f9:    	lea    rsi,[rsp-0x18]
  010fe:    	mov    QWORD PTR [rbx],rsi
  01101:    	lea    r14,[rsp-0x10]
  01106:    	mov    QWORD PTR [rsp-0x20],r14
  0110b:    	call   rax
  0110d:    	lea    r14,[rbp-0x8]
  01111:    	mov    QWORD PTR [rbx],r14
  01114:    	mov    r14,QWORD PTR [rbp-0x10]
  01118:    	movq   xmm2,QWORD PTR [rsp]
  0111d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01123:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01129:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0112f:    	add    rsp,0x20
  01133:    	test   rax,rax
  01136:    	je     0x3943d
  0113c:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  01140:    	sub    rsp,0x20
  01144:    	movq   QWORD PTR [rsp],xmm2
  01149:    	movq   QWORD PTR [rsp+0x8],xmm4
  0114f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01155:    	movq   QWORD PTR [rsp+0x18],xmm6
  0115b:    	mov    rdi,QWORD PTR [r14-0x38]
  0115f: 4d 	movabs rax,0x564da0826bb0
  01169:    	call   rax
  0116b:    	mov    r15d,eax
  0116e: 4d 	movabs r13,0x564da0e92560
  01178:    	cmp    QWORD PTR [r13+0x8],0x0
  0117d:    	je     0x3944c
  01183:    	cmp    r15d,DWORD PTR [r13-0x8]
  01187:    	jne    0x3944c
  0118d:    	mov    eax,DWORD PTR [rip+0xffffffffffff834e]        # 0xffff94e1
  01193:    	cmp    DWORD PTR [r13-0x4],eax
  01197:    	jne    0x3944c
  0119d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011a6:    	mov    rax,QWORD PTR [r14-0x38]
  011aa:    	mov    QWORD PTR [rsp-0x40],rax
  011af: 00 	mov    rdi,0x0
  011b6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  011bf:    	mov    rax,QWORD PTR [r13+0x10]
  011c3:    	mov    QWORD PTR [rsp-0x30],rax
  011c8:    	mov    rax,QWORD PTR [r13+0x8]
  011cc:    	mov    r13,QWORD PTR [r13+0x18]
  011d0:    	mov    rsi,QWORD PTR [rbx]
  011d3:    	mov    QWORD PTR [rsp-0x18],rsi
  011d8:    	lea    rsi,[rsp-0x18]
  011dd:    	mov    QWORD PTR [rbx],rsi
  011e0:    	lea    r14,[rsp-0x10]
  011e5:    	mov    QWORD PTR [rsp-0x20],r14
  011ea:    	call   rax
  011ec:    	lea    r14,[rbp-0x8]
  011f0:    	mov    QWORD PTR [rbx],r14
  011f3:    	mov    r14,QWORD PTR [rbp-0x10]
  011f7:    	movq   xmm2,QWORD PTR [rsp]
  011fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01202:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01208:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0120e:    	add    rsp,0x20
  01212:    	test   rax,rax
  01215:    	je     0x39496
  0121b: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  01222:    	sub    rsp,0x20
  01226:    	movq   QWORD PTR [rsp],xmm2
  0122b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01231:    	movq   QWORD PTR [rsp+0x10],xmm5
  01237:    	movq   QWORD PTR [rsp+0x18],xmm6
  0123d: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01244: 4d 	movabs rax,0x564da0826bb0
  0124e:    	call   rax
  01250:    	mov    r15d,eax
  01253: 4d 	movabs r13,0x564da0e92590
  0125d:    	cmp    QWORD PTR [r13+0x8],0x0
  01262:    	je     0x394a5
  01268:    	cmp    r15d,DWORD PTR [r13-0x8]
  0126c:    	jne    0x394a5
  01272:    	mov    eax,DWORD PTR [rip+0xffffffffffff8269]        # 0xffff94e1
  01278:    	cmp    DWORD PTR [r13-0x4],eax
  0127c:    	jne    0x394a5
  01282: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0128b: ff 	mov    rax,QWORD PTR [r14-0x90]
  01292:    	mov    QWORD PTR [rsp-0x40],rax
  01297: 00 	mov    rdi,0x0
  0129e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  012a7:    	mov    rax,QWORD PTR [r13+0x10]
  012ab:    	mov    QWORD PTR [rsp-0x30],rax
  012b0:    	mov    rax,QWORD PTR [r13+0x8]
  012b4:    	mov    r13,QWORD PTR [r13+0x18]
  012b8:    	mov    rsi,QWORD PTR [rbx]
  012bb:    	mov    QWORD PTR [rsp-0x18],rsi
  012c0:    	lea    rsi,[rsp-0x18]
  012c5:    	mov    QWORD PTR [rbx],rsi
  012c8:    	lea    r14,[rsp-0x10]
  012cd:    	mov    QWORD PTR [rsp-0x20],r14
  012d2:    	call   rax
  012d4:    	lea    r14,[rbp-0x8]
  012d8:    	mov    QWORD PTR [rbx],r14
  012db:    	mov    r14,QWORD PTR [rbp-0x10]
  012df:    	movq   xmm2,QWORD PTR [rsp]
  012e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ea:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012f0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012f6:    	add    rsp,0x20
  012fa:    	test   rax,rax
  012fd:    	je     0x394f2
  01303: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  0130a:    	mov    rdi,QWORD PTR [r14-0x60]
  0130e: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01315:    	sub    rsp,0x20
  01319:    	movq   QWORD PTR [rsp],xmm2
  0131e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01324:    	movq   QWORD PTR [rsp+0x10],xmm5
  0132a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01330:    	mov    rdx,rdi
  01333:    	mov    rcx,rsi
  01336:    	mov    rdi,rbx
  01339:    	mov    rsi,r12
  0133c: 4d 	movabs rax,0x564da07dc050
  01346:    	call   rax
  01348:    	movq   xmm2,QWORD PTR [rsp]
  0134d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01353:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01359:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0135f:    	add    rsp,0x20
  01363: 4d 	movabs r13,0x564da0e925c0
  0136d:    	test   rax,rax
  01370:    	je     0xffff615b
  01376: ff 	mov    QWORD PTR [r14-0x88],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  0137d:    	mov    rdi,QWORD PTR [r14-0x80]
  01381: ff 	mov    rsi,QWORD PTR [r14-0x88]
  01388:    	sub    rsp,0x20
  0138c:    	movq   QWORD PTR [rsp],xmm2
  01391:    	movq   QWORD PTR [rsp+0x8],xmm4
  01397:    	movq   QWORD PTR [rsp+0x10],xmm5
  0139d:    	movq   QWORD PTR [rsp+0x18],xmm6
  013a3:    	mov    rdx,rdi
  013a6:    	mov    rcx,rsi
  013a9:    	mov    rdi,rbx
  013ac:    	mov    rsi,r12
  013af: 4d 	movabs rax,0x564da07da0d0
  013b9:    	call   rax
  013bb:    	movq   xmm2,QWORD PTR [rsp]
  013c0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013c6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013cc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013d2:    	add    rsp,0x20
  013d6: 4d 	movabs r13,0x564da0e925d0
  013e0:    	test   rax,rax
  013e3:    	je     0xffff615b
  013e9:    	mov    QWORD PTR [r14-0x80],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013ed:    	sub    rsp,0x20
  013f1:    	movq   QWORD PTR [rsp],xmm2
  013f6:    	movq   QWORD PTR [rsp+0x8],xmm4
  013fc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01402:    	movq   QWORD PTR [rsp+0x18],xmm6
  01408:    	mov    rdi,QWORD PTR [r14-0x38]
  0140c: 4d 	movabs rax,0x564da0826bb0
  01416:    	call   rax
  01418:    	mov    r15d,eax
  0141b: 4d 	movabs r13,0x564da0e925e0
  01425:    	cmp    QWORD PTR [r13+0x8],0x0
  0142a:    	je     0x39501
  01430:    	cmp    r15d,DWORD PTR [r13-0x8]
  01434:    	jne    0x39501
  0143a:    	mov    eax,DWORD PTR [rip+0xffffffffffff80a1]        # 0xffff94e1
  01440:    	cmp    DWORD PTR [r13-0x4],eax
  01444:    	jne    0x39501
  0144a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01453:    	mov    rax,QWORD PTR [r14-0x38]
  01457:    	mov    QWORD PTR [rsp-0x40],rax
  0145c: 00 	mov    rdi,0x0
  01463: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0146c:    	mov    rax,QWORD PTR [r13+0x10]
  01470:    	mov    QWORD PTR [rsp-0x30],rax
  01475:    	mov    rax,QWORD PTR [r13+0x8]
  01479:    	mov    r13,QWORD PTR [r13+0x18]
  0147d:    	mov    rsi,QWORD PTR [rbx]
  01480:    	mov    QWORD PTR [rsp-0x18],rsi
  01485:    	lea    rsi,[rsp-0x18]
  0148a:    	mov    QWORD PTR [rbx],rsi
  0148d:    	lea    r14,[rsp-0x10]
  01492:    	mov    QWORD PTR [rsp-0x20],r14
  01497:    	call   rax
  01499:    	lea    r14,[rbp-0x8]
  0149d:    	mov    QWORD PTR [rbx],r14
  014a0:    	mov    r14,QWORD PTR [rbp-0x10]
  014a4:    	movq   xmm2,QWORD PTR [rsp]
  014a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014af:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014b5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014bb:    	add    rsp,0x20
  014bf:    	test   rax,rax
  014c2:    	je     0x3954b
  014c8: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  014cf:    	sub    rsp,0x20
  014d3:    	movq   QWORD PTR [rsp],xmm2
  014d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  014de:    	movq   QWORD PTR [rsp+0x10],xmm5
  014e4:    	movq   QWORD PTR [rsp+0x18],xmm6
  014ea: ff 	mov    rdi,QWORD PTR [r14-0x90]
  014f1: 4d 	movabs rax,0x564da0826bb0
  014fb:    	call   rax
  014fd:    	mov    r15d,eax
  01500: 4d 	movabs r13,0x564da0e92610
  0150a:    	cmp    QWORD PTR [r13+0x8],0x0
  0150f:    	je     0x3955a
  01515:    	cmp    r15d,DWORD PTR [r13-0x8]
  01519:    	jne    0x3955a
  0151f:    	mov    eax,DWORD PTR [rip+0xffffffffffff7fbc]        # 0xffff94e1
  01525:    	cmp    DWORD PTR [r13-0x4],eax
  01529:    	jne    0x3955a
  0152f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01538: ff 	mov    rax,QWORD PTR [r14-0x90]
  0153f:    	mov    QWORD PTR [rsp-0x40],rax
  01544: 00 	mov    rdi,0x0
  0154b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01554:    	mov    rax,QWORD PTR [r13+0x10]
  01558:    	mov    QWORD PTR [rsp-0x30],rax
  0155d:    	mov    rax,QWORD PTR [r13+0x8]
  01561:    	mov    r13,QWORD PTR [r13+0x18]
  01565:    	mov    rsi,QWORD PTR [rbx]
  01568:    	mov    QWORD PTR [rsp-0x18],rsi
  0156d:    	lea    rsi,[rsp-0x18]
  01572:    	mov    QWORD PTR [rbx],rsi
  01575:    	lea    r14,[rsp-0x10]
  0157a:    	mov    QWORD PTR [rsp-0x20],r14
  0157f:    	call   rax
  01581:    	lea    r14,[rbp-0x8]
  01585:    	mov    QWORD PTR [rbx],r14
  01588:    	mov    r14,QWORD PTR [rbp-0x10]
  0158c:    	movq   xmm2,QWORD PTR [rsp]
  01591:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01597:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0159d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015a3:    	add    rsp,0x20
  015a7:    	test   rax,rax
  015aa:    	je     0x395a7
  015b0: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  015b7:    	sub    rsp,0x20
  015bb:    	movq   QWORD PTR [rsp],xmm2
  015c0:    	movq   QWORD PTR [rsp+0x8],xmm4
  015c6:    	movq   QWORD PTR [rsp+0x10],xmm5
  015cc:    	movq   QWORD PTR [rsp+0x18],xmm6
  015d2:    	mov    rdi,QWORD PTR [r14-0x38]
  015d6: 4d 	movabs rax,0x564da0826bb0
  015e0:    	call   rax
  015e2:    	mov    r15d,eax
  015e5: 4d 	movabs r13,0x564da0e92640
  015ef:    	cmp    QWORD PTR [r13+0x8],0x0
  015f4:    	je     0x395b6
  015fa:    	cmp    r15d,DWORD PTR [r13-0x8]
  015fe:    	jne    0x395b6
  01604:    	mov    eax,DWORD PTR [rip+0xffffffffffff7ed7]        # 0xffff94e1
  0160a:    	cmp    DWORD PTR [r13-0x4],eax
  0160e:    	jne    0x395b6
  01614: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0161d:    	mov    rax,QWORD PTR [r14-0x38]
  01621:    	mov    QWORD PTR [rsp-0x40],rax
  01626: 00 	mov    rdi,0x0
  0162d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01636:    	mov    rax,QWORD PTR [r13+0x10]
  0163a:    	mov    QWORD PTR [rsp-0x30],rax
  0163f:    	mov    rax,QWORD PTR [r13+0x8]
  01643:    	mov    r13,QWORD PTR [r13+0x18]
  01647:    	mov    rsi,QWORD PTR [rbx]
  0164a:    	mov    QWORD PTR [rsp-0x18],rsi
  0164f:    	lea    rsi,[rsp-0x18]
  01654:    	mov    QWORD PTR [rbx],rsi
  01657:    	lea    r14,[rsp-0x10]
  0165c:    	mov    QWORD PTR [rsp-0x20],r14
  01661:    	call   rax
  01663:    	lea    r14,[rbp-0x8]
  01667:    	mov    QWORD PTR [rbx],r14
  0166a:    	mov    r14,QWORD PTR [rbp-0x10]
  0166e:    	movq   xmm2,QWORD PTR [rsp]
  01673:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01679:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0167f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01685:    	add    rsp,0x20
  01689:    	test   rax,rax
  0168c:    	je     0x39600
  01692: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01699:    	sub    rsp,0x20
  0169d:    	movq   QWORD PTR [rsp],xmm2
  016a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a8:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ae:    	movq   QWORD PTR [rsp+0x18],xmm6
  016b4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  016bb: 4d 	movabs rax,0x564da0826bb0
  016c5:    	call   rax
  016c7:    	mov    r15d,eax
  016ca: 4d 	movabs r13,0x564da0e92670
  016d4:    	cmp    QWORD PTR [r13+0x8],0x0
  016d9:    	je     0x3960f
  016df:    	cmp    r15d,DWORD PTR [r13-0x8]
  016e3:    	jne    0x3960f
  016e9:    	mov    eax,DWORD PTR [rip+0xffffffffffff7df2]        # 0xffff94e1
  016ef:    	cmp    DWORD PTR [r13-0x4],eax
  016f3:    	jne    0x3960f
  016f9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01702: ff 	mov    rax,QWORD PTR [r14-0x98]
  01709:    	mov    QWORD PTR [rsp-0x40],rax
  0170e: 00 	mov    rdi,0x0
  01715: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0171e:    	mov    rax,QWORD PTR [r13+0x10]
  01722:    	mov    QWORD PTR [rsp-0x30],rax
  01727:    	mov    rax,QWORD PTR [r13+0x8]
  0172b:    	mov    r13,QWORD PTR [r13+0x18]
  0172f:    	mov    rsi,QWORD PTR [rbx]
  01732:    	mov    QWORD PTR [rsp-0x18],rsi
  01737:    	lea    rsi,[rsp-0x18]
  0173c:    	mov    QWORD PTR [rbx],rsi
  0173f:    	lea    r14,[rsp-0x10]
  01744:    	mov    QWORD PTR [rsp-0x20],r14
  01749:    	call   rax
  0174b:    	lea    r14,[rbp-0x8]
  0174f:    	mov    QWORD PTR [rbx],r14
  01752:    	mov    r14,QWORD PTR [rbp-0x10]
  01756:    	movq   xmm2,QWORD PTR [rsp]
  0175b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01761:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01767:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0176d:    	add    rsp,0x20
  01771:    	test   rax,rax
  01774:    	je     0x3965c
  0177a: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01781:    	mov    rdi,QWORD PTR [r14-0x60]
  01785: ff 	mov    rsi,QWORD PTR [r14-0x90]
  0178c:    	sub    rsp,0x20
  01790:    	movq   QWORD PTR [rsp],xmm2
  01795:    	movq   QWORD PTR [rsp+0x8],xmm4
  0179b:    	movq   QWORD PTR [rsp+0x10],xmm5
  017a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  017a7:    	mov    rdx,rdi
  017aa:    	mov    rcx,rsi
  017ad:    	mov    rdi,rbx
  017b0:    	mov    rsi,r12
  017b3: 4d 	movabs rax,0x564da07dc050
  017bd:    	call   rax
  017bf:    	movq   xmm2,QWORD PTR [rsp]
  017c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ca:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017d0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017d6:    	add    rsp,0x20
  017da: 4d 	movabs r13,0x564da0e926a0
  017e4:    	test   rax,rax
  017e7:    	je     0xffff615b
  017ed: ff 	mov    QWORD PTR [r14-0x90],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017f4: ff 	mov    rdi,QWORD PTR [r14-0x88]
  017fb: ff 	mov    rsi,QWORD PTR [r14-0x90]
  01802:    	sub    rsp,0x20
  01806:    	movq   QWORD PTR [rsp],xmm2
  0180b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01811:    	movq   QWORD PTR [rsp+0x10],xmm5
  01817:    	movq   QWORD PTR [rsp+0x18],xmm6
  0181d:    	mov    rdx,rdi
  01820:    	mov    rcx,rsi
  01823:    	mov    rdi,rbx
  01826:    	mov    rsi,r12
  01829: 4d 	movabs rax,0x564da07da0d0
  01833:    	call   rax
  01835:    	movq   xmm2,QWORD PTR [rsp]
  0183a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01840:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01846:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0184c:    	add    rsp,0x20
  01850: 4d 	movabs r13,0x564da0e926b0
  0185a:    	test   rax,rax
  0185d:    	je     0xffff615b
  01863: ff 	mov    QWORD PTR [r14-0x88],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  0186a:    	sub    rsp,0x20
  0186e:    	movq   QWORD PTR [rsp],xmm2
  01873:    	movq   QWORD PTR [rsp+0x8],xmm4
  01879:    	movq   QWORD PTR [rsp+0x10],xmm5
  0187f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01885:    	mov    rdi,QWORD PTR [r14-0x70]
  01889: 4d 	movabs rax,0x564da0826bb0
  01893:    	call   rax
  01895:    	mov    r15d,eax
  01898: 4d 	movabs r13,0x564da0e926c0
  018a2:    	cmp    QWORD PTR [r13+0x8],0x0
  018a7:    	je     0x3966b
  018ad:    	cmp    r15d,DWORD PTR [r13-0x8]
  018b1:    	jne    0x3966b
  018b7:    	mov    eax,DWORD PTR [rip+0xffffffffffff7c24]        # 0xffff94e1
  018bd:    	cmp    DWORD PTR [r13-0x4],eax
  018c1:    	jne    0x3966b
  018c7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  018d0:    	mov    rax,QWORD PTR [r14-0x70]
  018d4:    	mov    QWORD PTR [rsp-0x40],rax
  018d9: 00 	mov    rdi,0x3
  018e0:    	mov    rax,QWORD PTR [r14-0x78]
  018e4:    	mov    QWORD PTR [rsp-0x48],rax
  018e9:    	mov    rax,QWORD PTR [r14-0x80]
  018ed:    	mov    QWORD PTR [rsp-0x50],rax
  018f2: ff 	mov    rax,QWORD PTR [r14-0x88]
  018f9:    	mov    QWORD PTR [rsp-0x58],rax
  018fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01907:    	mov    rax,QWORD PTR [r13+0x10]
  0190b:    	mov    QWORD PTR [rsp-0x30],rax
  01910:    	mov    rax,QWORD PTR [r13+0x8]
  01914:    	mov    r13,QWORD PTR [r13+0x18]
  01918:    	mov    rsi,QWORD PTR [rbx]
  0191b:    	mov    QWORD PTR [rsp-0x18],rsi
  01920:    	lea    rsi,[rsp-0x18]
  01925:    	mov    QWORD PTR [rbx],rsi
  01928:    	lea    r14,[rsp-0x10]
  0192d:    	mov    QWORD PTR [rsp-0x20],r14
  01932:    	call   rax
  01934:    	lea    r14,[rbp-0x8]
  01938:    	mov    QWORD PTR [rbx],r14
  0193b:    	mov    r14,QWORD PTR [rbp-0x10]
  0193f:    	movq   xmm2,QWORD PTR [rsp]
  01944:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0194a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01950:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01956:    	add    rsp,0x20
  0195a:    	test   rax,rax
  0195d:    	je     0x396b5
  01963:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  01967:    	sub    rsp,0x20
  0196b:    	movq   QWORD PTR [rsp],xmm2
  01970:    	movq   QWORD PTR [rsp+0x8],xmm4
  01976:    	movq   QWORD PTR [rsp+0x10],xmm5
  0197c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01982:    	mov    rdi,QWORD PTR [r14-0x40]
  01986: 4d 	movabs rax,0x564da0826bb0
  01990:    	call   rax
  01992:    	mov    r15d,eax
  01995: 4d 	movabs r13,0x564da0e926f0
  0199f:    	cmp    QWORD PTR [r13+0x8],0x0
  019a4:    	je     0x396c4
  019aa:    	cmp    r15d,DWORD PTR [r13-0x8]
  019ae:    	jne    0x396c4
  019b4:    	mov    eax,DWORD PTR [rip+0xffffffffffff7b27]        # 0xffff94e1
  019ba:    	cmp    DWORD PTR [r13-0x4],eax
  019be:    	jne    0x396c4
  019c4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019cd:    	mov    rax,QWORD PTR [r14-0x40]
  019d1:    	mov    QWORD PTR [rsp-0x40],rax
  019d6: 00 	mov    rdi,0x1
  019dd:    	mov    rax,QWORD PTR [r14-0x68]
  019e1:    	mov    QWORD PTR [rsp-0x48],rax
  019e6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  019ef:    	mov    rax,QWORD PTR [r13+0x10]
  019f3:    	mov    QWORD PTR [rsp-0x30],rax
  019f8:    	mov    rax,QWORD PTR [r13+0x8]
  019fc:    	mov    r13,QWORD PTR [r13+0x18]
  01a00:    	mov    rsi,QWORD PTR [rbx]
  01a03:    	mov    QWORD PTR [rsp-0x18],rsi
  01a08:    	lea    rsi,[rsp-0x18]
  01a0d:    	mov    QWORD PTR [rbx],rsi
  01a10:    	lea    r14,[rsp-0x10]
  01a15:    	mov    QWORD PTR [rsp-0x20],r14
  01a1a:    	call   rax
  01a1c:    	lea    r14,[rbp-0x8]
  01a20:    	mov    QWORD PTR [rbx],r14
  01a23:    	mov    r14,QWORD PTR [rbp-0x10]
  01a27:    	movq   xmm2,QWORD PTR [rsp]
  01a2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a32:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a38:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01a3e:    	add    rsp,0x20
  01a42:    	test   rax,rax
  01a45:    	je     0x3970e
:00103 
:00105 br =>:00106
  01a4b:    	jmp    0x39776
:00106 %7 = nil
  01a50: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01a58:    	mov    rax,QWORD PTR [r14-0x68]
  01a5c:    	leave  
  01a5d:    	ret    
==> start whole compile: clamp FuncId(59) self_class:Scene start:[00000] bytecode:0x564da0ed7c00
<== finished compile. elapsed:32.5µs
offset:Pos(47528) code: 515 bytes  data: 77 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x37ccc
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [rbp-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x37cdb
  00035: cmp    DWORD PTR [rdi+0x4],0x32
  00039: jne    0x37cdb
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %3 = literal[255.5]
  0003f: movq   xmm2,QWORD PTR [rip+0x1c1]        # 0x208
  00047: movabs rax,0x37f800000000002
  00051: mov    QWORD PTR [r14-0x48],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00055: mov    rdi,QWORD PTR [r14-0x38]
  00059: test   rdi,0x1
  00060: jne    0x37cea
  00066: test   rdi,0x2
  0006d: je     0xa9
  00073: xorps  xmm3,xmm3
  00076: movabs rax,0x8000000000000002
  00080: cmp    rdi,rax
  00083: je     0xbb
  00089: mov    rax,rdi
  0008c: sar    rax,0x3f
  00090: add    rax,0x2
  00094: and    rdi,0xfffffffffffffffc
  00098: or     rdi,rax
  0009b: rol    rdi,0x3d
  0009f: movq   xmm3,rdi
  000a4: jmp    0xbb
  000a9: call   0xffff46e4
  000ae: test   rax,rax
  000b1: je     0x37cea
  000b7: movq   xmm3,xmm0
  000bb: movq   xmm4,xmm3
  000bf: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000c3: movq   xmm2,QWORD PTR [rip+0x14d]        # 0x218
  000cb: movabs rax,0x37f000000000002
  000d5: mov    QWORD PTR [r14-0x48],rax
:00004 _%3 = %2 > %3                        [Float][Float]
:00005 condnotbr _%3 =>:00008
  000d9: ucomisd xmm4,xmm2
  000dd: jbe    0x37cf9
:00006 %2 = literal[255.0]
  000e3: movq   xmm4,QWORD PTR [rip+0x13d]        # 0x228
  000eb: movabs rax,0x37f000000000002
  000f5: mov    QWORD PTR [r14-0x40],rax
:00007 br =>:00008
  000f9: jmp    0x37d1f
:00008 %3 = literal[0.0]
  000fe: movq   xmm2,QWORD PTR [rip+0x132]        # 0x238
  00106: movabs rax,0x8000000000000002
  00110: mov    QWORD PTR [r14-0x48],rax
:00009 _%3 = %2 < %3                        [Float][Float]
:00010 condnotbr _%3 =>:00013
  00114: ucomisd xmm4,xmm2
  00118: jae    0x37d38
:00011 %2 = literal[0.0]
  0011e: movq   xmm4,QWORD PTR [rip+0x122]        # 0x248
  00126: movabs rax,0x8000000000000002
  00130: mov    QWORD PTR [r14-0x40],rax
:00012 br =>:00013
  00134: jmp    0x37d51
:00013 %3 = %2.call to_i()                  [Float]
  00139: mov    rdi,QWORD PTR [r14-0x40]
  0013d: test   rdi,0x1
  00144: jne    0x37d6a
  0014a: test   rdi,0x2
  00151: jne    0x16e
  00157: test   rdi,0x7
  0015e: jne    0x37d6a
  00164: cmp    DWORD PTR [rdi+0x4],0x7
  00168: jne    0x37d6a
  0016e: cmp    DWORD PTR [rip+0xffffffffffff789c],0x26        # 0xffff7a11
  00175: jne    0x37d6a
  0017b: mov    r9,0x0
  00182: sub    rsp,0x10
  00186: movq   QWORD PTR [rsp],xmm3
  0018b: movq   QWORD PTR [rsp+0x8],xmm4
  00191: mov    rdx,rdi
  00194: mov    QWORD PTR [rsp-0x40],rcx
  00199: mov    QWORD PTR [rsp-0x28],0x0
  001a2: lea    rcx,[r14-0x50]
  001a6: mov    r8,0x0
  001ad: mov    rsi,QWORD PTR [rbx]
  001b0: mov    QWORD PTR [rsp-0x18],rsi
  001b5: lea    rsi,[rsp-0x18]
  001ba: mov    QWORD PTR [rbx],rsi
  001bd: lea    r14,[rsp-0x10]
  001c2: mov    QWORD PTR [rsp-0x20],r14
  001c7: call   0x37d79
  001cc: lea    r14,[rbp-0x8]
  001d0: mov    QWORD PTR [rbx],r14
  001d3: mov    r14,QWORD PTR [rbp-0x10]
  001d7: movq   xmm3,QWORD PTR [rsp]
  001dc: movq   xmm4,QWORD PTR [rsp+0x8]
  001e2: add    rsp,0x10
  001e6: movabs r13,0x564da0ed7cf0
  001f0: test   rax,rax
  001f3: je     0xffff468b
  001f9: mov    QWORD PTR [r14-0x48],rax
:00014 
:00016 ret %3
  001fd: mov    rax,QWORD PTR [r14-0x48]
  00201: leave  
  00202: ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x564da0ed7b80
<== finished compile. elapsed:19.5µs
offset:Pos(48120) code: 266 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    rax,0x4
  00041: mov    QWORD PTR [r14-0x40],rax
  00045: mov    QWORD PTR [r14-0x48],rax
  00049: mov    QWORD PTR [r14-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x37b6a
  0005e: cmp    DWORD PTR [rdi+0x4],0x32
  00062: jne    0x37b6a
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %3 = dynvar(3, %3)
  00068: mov    rax,QWORD PTR [rbp-0x18]
  0006c: mov    rax,QWORD PTR [rax]
  0006f: mov    rax,QWORD PTR [rax]
  00072: mov    rax,QWORD PTR [rax-0x30]
  00076: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = literal[5439489]
  0007a: mov    rax,0xa60003
  00081: mov    QWORD PTR [r14-0x50],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  00085: mov    rdi,QWORD PTR [r14-0x48]
  00089: test   rdi,0x1
  00090: je     0x37b79
  00096: cmp    DWORD PTR [rip+0xffffffffffff7724],0x26        # 0xffff77c1
  0009d: jne    0x37b79
  000a3: mov    r9,QWORD PTR [r14-0x50]
  000a7: mov    rdx,rdi
  000aa: mov    QWORD PTR [rsp-0x40],rcx
  000af: mov    QWORD PTR [rsp-0x28],0x0
  000b8: lea    rcx,[r14-0x58]
  000bc: mov    r8,0x0
  000c3: mov    rsi,QWORD PTR [rbx]
  000c6: mov    QWORD PTR [rsp-0x18],rsi
  000cb: lea    rsi,[rsp-0x18]
  000d0: mov    QWORD PTR [rbx],rsi
  000d3: lea    r14,[rsp-0x10]
  000d8: mov    QWORD PTR [rsp-0x20],r14
  000dd: call   0x37b88
  000e2: lea    r14,[rbp-0x8]
  000e6: mov    QWORD PTR [rbx],r14
  000e9: mov    r14,QWORD PTR [rbp-0x10]
  000ed: movabs r13,0x564da0ed7bd0
  000f7: test   rax,rax
  000fa: je     0xffff443b
  00100: mov    QWORD PTR [r14-0x40],rax
:00004 
:00006 ret %2
  00104: mov    rax,QWORD PTR [r14-0x40]
  00108: leave  
  00109: ret    
==> start whole compile: <unnamed> FuncId(81) self_class:Scene start:[00000] bytecode:0x564da0e72240
<== finished compile. elapsed:63.9µs
offset:Pos(48386) code: 3835 bytes  data: 99 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jge    0x3d
  00017: mov    eax,0x1
  0001c: sub    eax,edx
  0001e: test   rax,rax
  00021: je     0x3d
  00027: lea    rdi,[r14-0x40]
  0002b: mov    QWORD PTR [rdi+rax*8],0x4
  00033: sub    rax,0x1
  00037: jne    0x2b
  0003d: mov    rax,0x4
  00044: mov    QWORD PTR [r14-0x40],rax
  00048: mov    QWORD PTR [r14-0x48],rax
  0004c: mov    QWORD PTR [r14-0x50],rax
  00050: mov    QWORD PTR [r14-0x58],rax
  00054: mov    QWORD PTR [r14-0x60],rax
  00058: mov    QWORD PTR [r14-0x68],rax
  0005c: mov    QWORD PTR [r14-0x70],rax
  00060: mov    QWORD PTR [r14-0x78],rax
  00064: mov    rdi,QWORD PTR [rbp-0x30]
  00068: test   rdi,0x7
  0006f: jne    0x37abf
  00075: cmp    DWORD PTR [rdi+0x4],0x32
  00079: jne    0x37abf
:00000 init_block reg:10 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  0007f: mov    rax,QWORD PTR [rip+0xffffffffffff7638]        # 0xffff76be
  00086: cmp    rax,QWORD PTR [rip+0xe81]        # 0xf0e
  0008d: jne    0x37ace
  00093: mov    rax,QWORD PTR [rip+0xe64]        # 0xefe
  0009a: mov    QWORD PTR [r14-0x60],rax
:00002 %7 = literal[0.0]
  0009e: movq   xmm2,QWORD PTR [rip+0xe78]        # 0xf1e
  000a6: movabs rax,0x8000000000000002
  000b0: mov    QWORD PTR [r14-0x68],rax
:00003 %8 = literal[0.0]
  000b4: movq   xmm3,QWORD PTR [rip+0xe72]        # 0xf2e
  000bc: movabs rax,0x8000000000000002
  000c6: mov    QWORD PTR [r14-0x70],rax
:00004 %9 = literal[0.0]
  000ca: movq   xmm4,QWORD PTR [rip+0xe6c]        # 0xf3e
  000d2: movabs rax,0x8000000000000002
  000dc: mov    QWORD PTR [r14-0x78],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000e0: mov    rdi,QWORD PTR [r14-0x60]
  000e4: test   rdi,0x7
  000eb: jne    0x37b14
  000f1: cmp    DWORD PTR [rdi+0x4],0x29
  000f5: jne    0x37b14
  000fb: cmp    DWORD PTR [rip+0xffffffffffff75b5],0x26        # 0xffff76b7
  00102: jne    0x37b14
  00108: mov    r9,0x0
  0010f: sub    rsp,0x20
  00113: movq   QWORD PTR [rsp],xmm2
  00118: movq   QWORD PTR [rsp+0x8],xmm3
  0011e: movq   QWORD PTR [rsp+0x10],xmm4
  00124: mov    rdx,rdi
  00127: mov    QWORD PTR [rsp-0x40],rcx
  0012c: mov    QWORD PTR [rsp-0x28],0x0
  00135: lea    rcx,[r14-0x68]
  00139: mov    r8,0x3
  00140: mov    rsi,QWORD PTR [rbx]
  00143: mov    QWORD PTR [rsp-0x18],rsi
  00148: lea    rsi,[rsp-0x18]
  0014d: mov    QWORD PTR [rbx],rsi
  00150: lea    r14,[rsp-0x10]
  00155: mov    QWORD PTR [rsp-0x20],r14
  0015a: call   0x37b23
  0015f: lea    r14,[rbp-0x8]
  00163: mov    QWORD PTR [rbx],r14
  00166: mov    r14,QWORD PTR [rbp-0x10]
  0016a: movq   xmm2,QWORD PTR [rsp]
  0016f: movq   xmm3,QWORD PTR [rsp+0x8]
  00175: movq   xmm4,QWORD PTR [rsp+0x10]
  0017b: add    rsp,0x20
  0017f: movabs r13,0x564da0e722b0
  00189: test   rax,rax
  0018c: je     0xffff4331
  00192: mov    QWORD PTR [r14-0x40],rax
:00006 
:00008 %6 = dynvar(2, %3)
  00196: mov    rax,QWORD PTR [rbp-0x18]
  0019a: mov    rax,QWORD PTR [rax]
  0019d: mov    rax,QWORD PTR [rax-0x30]
  001a1: mov    QWORD PTR [r14-0x60],rax
:00009 %7 = literal[5373953]
  001a5: mov    rax,0xa40003
  001ac: mov    QWORD PTR [r14-0x68],rax
:00010 _ = %6.call times(&%7)               [Integer]
  001b0: mov    rdi,QWORD PTR [r14-0x60]
  001b4: test   rdi,0x1
  001bb: je     0x37b55
  001c1: cmp    DWORD PTR [rip+0xffffffffffff74ef],0x26        # 0xffff76b7
  001c8: jne    0x37b55
  001ce: mov    r9,QWORD PTR [r14-0x68]
  001d2: sub    rsp,0x10
  001d6: movq   QWORD PTR [rsp],xmm3
  001db: movq   QWORD PTR [rsp+0x8],xmm4
  001e1: mov    rdx,rdi
  001e4: mov    QWORD PTR [rsp-0x40],rcx
  001e9: mov    QWORD PTR [rsp-0x28],0x0
  001f2: lea    rcx,[r14-0x70]
  001f6: mov    r8,0x0
  001fd: mov    rsi,QWORD PTR [rbx]
  00200: mov    QWORD PTR [rsp-0x18],rsi
  00205: lea    rsi,[rsp-0x18]
  0020a: mov    QWORD PTR [rbx],rsi
  0020d: lea    r14,[rsp-0x10]
  00212: mov    QWORD PTR [rsp-0x20],r14
  00217: call   0x37b64
  0021c: lea    r14,[rbp-0x8]
  00220: mov    QWORD PTR [rbx],r14
  00223: mov    r14,QWORD PTR [rbp-0x10]
  00227: movq   xmm3,QWORD PTR [rsp]
  0022c: movq   xmm4,QWORD PTR [rsp+0x8]
  00232: add    rsp,0x10
  00236: movabs r13,0x564da0e72300
  00240: test   rax,rax
  00243: je     0xffff4331
:00011 
:00013 %6 = %2.call x()                     [Vec]
  00249: mov    rdi,QWORD PTR [r14-0x40]
  0024d: test   rdi,0x7
  00254: jne    0x37b96
  0025a: cmp    DWORD PTR [rdi+0x4],0x28
  0025e: jne    0x37b96
  00264: cmp    DWORD PTR [rip+0xffffffffffff744c],0x26        # 0xffff76b7
  0026b: jne    0x37b96
  00271: mov    esi,DWORD PTR [rip+0xcd3]        # 0xf4a
  00277: cmp    esi,0xffffffff
  0027a: je     0x37ba5
  00280: cmp    WORD PTR [rdi+0x2],0x3
  00285: jne    0x29e
  0028b: cmp    esi,0x6
  0028e: jge    0x29e
  00294: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00299: jmp    0x2c8
  0029e: sub    rsp,0x10
  002a2: movq   QWORD PTR [rsp],xmm3
  002a7: movq   QWORD PTR [rsp+0x8],xmm4
  002ad: movabs rax,0x564da0797d70
  002b7: call   rax
  002b9: movq   xmm3,QWORD PTR [rsp]
  002be: movq   xmm4,QWORD PTR [rsp+0x8]
  002c4: add    rsp,0x10
  002c8: mov    QWORD PTR [r14-0x60],rax
:00014 
:00016 %7 = dynvar(2, %5)
  002cc: mov    rax,QWORD PTR [rbp-0x18]
  002d0: mov    rax,QWORD PTR [rax]
  002d3: mov    rax,QWORD PTR [rax-0x40]
  002d7: mov    QWORD PTR [r14-0x68],rax
:00017 %8 = dynvar(2, %5)
  002db: mov    rax,QWORD PTR [rbp-0x18]
  002df: mov    rax,QWORD PTR [rax]
  002e2: mov    rax,QWORD PTR [rax-0x40]
  002e6: mov    QWORD PTR [r14-0x70],rax
:00018 %7 = %7 * %8                         [Float][Float]
  002ea: mov    rdi,QWORD PTR [r14-0x68]
  002ee: test   rdi,0x1
  002f5: jne    0x37bec
  002fb: test   rdi,0x2
  00302: je     0x33e
  00308: xorps  xmm2,xmm2
  0030b: movabs rax,0x8000000000000002
  00315: cmp    rdi,rax
  00318: je     0x350
  0031e: mov    rax,rdi
  00321: sar    rax,0x3f
  00325: add    rax,0x2
  00329: and    rdi,0xfffffffffffffffc
  0032d: or     rdi,rax
  00330: rol    rdi,0x3d
  00334: movq   xmm2,rdi
  00339: jmp    0x350
  0033e: call   0xffff438a
  00343: test   rax,rax
  00346: je     0x37bec
  0034c: movq   xmm2,xmm0
  00350: mov    rdi,QWORD PTR [r14-0x70]
  00354: test   rdi,0x1
  0035b: jne    0x37bfb
  00361: test   rdi,0x2
  00368: je     0x3a4
  0036e: xorps  xmm3,xmm3
  00371: movabs rax,0x8000000000000002
  0037b: cmp    rdi,rax
  0037e: je     0x3b6
  00384: mov    rax,rdi
  00387: sar    rax,0x3f
  0038b: add    rax,0x2
  0038f: and    rdi,0xfffffffffffffffc
  00393: or     rdi,rax
  00396: rol    rdi,0x3d
  0039a: movq   xmm3,rdi
  0039f: jmp    0x3b6
  003a4: call   0xffff438a
  003a9: test   rax,rax
  003ac: je     0x37bfb
  003b2: movq   xmm3,xmm0
  003b6: mulsd  xmm2,xmm3
:00019 %3 = %6 / %7                         [Float][Float]
  003ba: mov    rdi,QWORD PTR [r14-0x60]
  003be: test   rdi,0x1
  003c5: jne    0x37c0a
  003cb: test   rdi,0x2
  003d2: je     0x40e
  003d8: xorps  xmm5,xmm5
  003db: movabs rax,0x8000000000000002
  003e5: cmp    rdi,rax
  003e8: je     0x420
  003ee: mov    rax,rdi
  003f1: sar    rax,0x3f
  003f5: add    rax,0x2
  003f9: and    rdi,0xfffffffffffffffc
  003fd: or     rdi,rax
  00400: rol    rdi,0x3d
  00404: movq   xmm5,rdi
  00409: jmp    0x420
  0040e: call   0xffff438a
  00413: test   rax,rax
  00416: je     0x37c0a
  0041c: movq   xmm5,xmm0
  00420: movq   xmm6,xmm5
  00424: movq   rax,xmm2
  00429: test   rax,rax
  0042c: je     0xffff4356
  00432: divsd  xmm6,xmm2
:00020 %6 = %2.call y()                     [Vec]
  00436: mov    rdi,QWORD PTR [r14-0x40]
  0043a: test   rdi,0x7
  00441: jne    0x37c26
  00447: cmp    DWORD PTR [rdi+0x4],0x28
  0044b: jne    0x37c26
  00451: cmp    DWORD PTR [rip+0xffffffffffff725f],0x26        # 0xffff76b7
  00458: jne    0x37c26
  0045e: mov    esi,DWORD PTR [rip+0xaee]        # 0xf52
  00464: cmp    esi,0xffffffff
  00467: je     0x37c4f
  0046d: cmp    WORD PTR [rdi+0x2],0x3
  00472: jne    0x48b
  00478: cmp    esi,0x6
  0047b: jge    0x48b
  00481: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00486: jmp    0x4cd
  0048b: sub    rsp,0x20
  0048f: movq   QWORD PTR [rsp],xmm2
  00494: movq   QWORD PTR [rsp+0x8],xmm3
  0049a: movq   QWORD PTR [rsp+0x10],xmm4
  004a0: movq   QWORD PTR [rsp+0x18],xmm6
  004a6: movabs rax,0x564da0797d70
  004b0: call   rax
  004b2: movq   xmm2,QWORD PTR [rsp]
  004b7: movq   xmm3,QWORD PTR [rsp+0x8]
  004bd: movq   xmm4,QWORD PTR [rsp+0x10]
  004c3: movq   xmm6,QWORD PTR [rsp+0x18]
  004c9: add    rsp,0x20
  004cd: mov    QWORD PTR [r14-0x60],rax
:00021 
:00023 %7 = dynvar(2, %5)
  004d1: mov    rax,QWORD PTR [rbp-0x18]
  004d5: mov    rax,QWORD PTR [rax]
  004d8: mov    rax,QWORD PTR [rax-0x40]
  004dc: mov    QWORD PTR [r14-0x68],rax
:00024 %8 = dynvar(2, %5)
  004e0: mov    rax,QWORD PTR [rbp-0x18]
  004e4: mov    rax,QWORD PTR [rax]
  004e7: mov    rax,QWORD PTR [rax-0x40]
  004eb: mov    QWORD PTR [r14-0x70],rax
:00025 %7 = %7 * %8                         [Float][Float]
  004ef: mov    rdi,QWORD PTR [r14-0x68]
  004f3: test   rdi,0x1
  004fa: jne    0x37cae
  00500: test   rdi,0x2
  00507: je     0x543
  0050d: xorps  xmm2,xmm2
  00510: movabs rax,0x8000000000000002
  0051a: cmp    rdi,rax
  0051d: je     0x555
  00523: mov    rax,rdi
  00526: sar    rax,0x3f
  0052a: add    rax,0x2
  0052e: and    rdi,0xfffffffffffffffc
  00532: or     rdi,rax
  00535: rol    rdi,0x3d
  00539: movq   xmm2,rdi
  0053e: jmp    0x555
  00543: call   0xffff438a
  00548: test   rax,rax
  0054b: je     0x37cae
  00551: movq   xmm2,xmm0
  00555: mov    rdi,QWORD PTR [r14-0x70]
  00559: test   rdi,0x1
  00560: jne    0x37cca
  00566: test   rdi,0x2
  0056d: je     0x5a9
  00573: xorps  xmm3,xmm3
  00576: movabs rax,0x8000000000000002
  00580: cmp    rdi,rax
  00583: je     0x5bb
  00589: mov    rax,rdi
  0058c: sar    rax,0x3f
  00590: add    rax,0x2
  00594: and    rdi,0xfffffffffffffffc
  00598: or     rdi,rax
  0059b: rol    rdi,0x3d
  0059f: movq   xmm3,rdi
  005a4: jmp    0x5bb
  005a9: call   0xffff438a
  005ae: test   rax,rax
  005b1: je     0x37cca
  005b7: movq   xmm3,xmm0
  005bb: mulsd  xmm2,xmm3
:00026 %4 = %6 / %7                         [Float][Float]
  005bf: mov    rdi,QWORD PTR [r14-0x60]
  005c3: test   rdi,0x1
  005ca: jne    0x37ce6
  005d0: test   rdi,0x2
  005d7: je     0x613
  005dd: xorps  xmm5,xmm5
  005e0: movabs rax,0x8000000000000002
  005ea: cmp    rdi,rax
  005ed: je     0x625
  005f3: mov    rax,rdi
  005f6: sar    rax,0x3f
  005fa: add    rax,0x2
  005fe: and    rdi,0xfffffffffffffffc
  00602: or     rdi,rax
  00605: rol    rdi,0x3d
  00609: movq   xmm5,rdi
  0060e: jmp    0x625
  00613: call   0xffff438a
  00618: test   rax,rax
  0061b: je     0x37ce6
  00621: movq   xmm5,xmm0
  00625: movq   xmm7,xmm5
  00629: movq   rax,xmm2
  0062e: test   rax,rax
  00631: je     0xffff4356
  00637: divsd  xmm7,xmm2
:00027 %6 = %2.call z()                     [Vec]
  0063b: mov    rdi,QWORD PTR [r14-0x40]
  0063f: test   rdi,0x7
  00646: jne    0x37d0f
  0064c: cmp    DWORD PTR [rdi+0x4],0x28
  00650: jne    0x37d0f
  00656: cmp    DWORD PTR [rip+0xffffffffffff705a],0x26        # 0xffff76b7
  0065d: jne    0x37d0f
  00663: mov    esi,DWORD PTR [rip+0x8f1]        # 0xf5a
  00669: cmp    esi,0xffffffff
  0066c: je     0x37d45
  00672: cmp    WORD PTR [rdi+0x2],0x3
  00677: jne    0x690
  0067d: cmp    esi,0x6
  00680: jge    0x690
  00686: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0068b: jmp    0x6de
  00690: sub    rsp,0x30
  00694: movq   QWORD PTR [rsp],xmm2
  00699: movq   QWORD PTR [rsp+0x8],xmm3
  0069f: movq   QWORD PTR [rsp+0x10],xmm4
  006a5: movq   QWORD PTR [rsp+0x18],xmm6
  006ab: movq   QWORD PTR [rsp+0x20],xmm7
  006b1: movabs rax,0x564da0797d70
  006bb: call   rax
  006bd: movq   xmm2,QWORD PTR [rsp]
  006c2: movq   xmm3,QWORD PTR [rsp+0x8]
  006c8: movq   xmm4,QWORD PTR [rsp+0x10]
  006ce: movq   xmm6,QWORD PTR [rsp+0x18]
  006d4: movq   xmm7,QWORD PTR [rsp+0x20]
  006da: add    rsp,0x30
  006de: mov    QWORD PTR [r14-0x60],rax
:00028 
:00030 %7 = dynvar(2, %5)
  006e2: mov    rax,QWORD PTR [rbp-0x18]
  006e6: mov    rax,QWORD PTR [rax]
  006e9: mov    rax,QWORD PTR [rax-0x40]
  006ed: mov    QWORD PTR [r14-0x68],rax
:00031 %8 = dynvar(2, %5)
  006f1: mov    rax,QWORD PTR [rbp-0x18]
  006f5: mov    rax,QWORD PTR [rax]
  006f8: mov    rax,QWORD PTR [rax-0x40]
  006fc: mov    QWORD PTR [r14-0x70],rax
:00032 %7 = %7 * %8                         [Float][Float]
  00700: mov    rdi,QWORD PTR [r14-0x68]
  00704: test   rdi,0x1
  0070b: jne    0x37db0
  00711: test   rdi,0x2
  00718: je     0x754
  0071e: xorps  xmm2,xmm2
  00721: movabs rax,0x8000000000000002
  0072b: cmp    rdi,rax
  0072e: je     0x766
  00734: mov    rax,rdi
  00737: sar    rax,0x3f
  0073b: add    rax,0x2
  0073f: and    rdi,0xfffffffffffffffc
  00743: or     rdi,rax
  00746: rol    rdi,0x3d
  0074a: movq   xmm2,rdi
  0074f: jmp    0x766
  00754: call   0xffff438a
  00759: test   rax,rax
  0075c: je     0x37db0
  00762: movq   xmm2,xmm0
  00766: mov    rdi,QWORD PTR [r14-0x70]
  0076a: test   rdi,0x1
  00771: jne    0x37dd9
  00777: test   rdi,0x2
  0077e: je     0x7ba
  00784: xorps  xmm3,xmm3
  00787: movabs rax,0x8000000000000002
  00791: cmp    rdi,rax
  00794: je     0x7cc
  0079a: mov    rax,rdi
  0079d: sar    rax,0x3f
  007a1: add    rax,0x2
  007a5: and    rdi,0xfffffffffffffffc
  007a9: or     rdi,rax
  007ac: rol    rdi,0x3d
  007b0: movq   xmm3,rdi
  007b5: jmp    0x7cc
  007ba: call   0xffff438a
  007bf: test   rax,rax
  007c2: je     0x37dd9
  007c8: movq   xmm3,xmm0
  007cc: mulsd  xmm2,xmm3
:00033 %5 = %6 / %7                         [Float][Float]
  007d0: mov    rdi,QWORD PTR [r14-0x60]
  007d4: test   rdi,0x1
  007db: jne    0x37e02
  007e1: test   rdi,0x2
  007e8: je     0x824
  007ee: xorps  xmm5,xmm5
  007f1: movabs rax,0x8000000000000002
  007fb: cmp    rdi,rax
  007fe: je     0x836
  00804: mov    rax,rdi
  00807: sar    rax,0x3f
  0080b: add    rax,0x2
  0080f: and    rdi,0xfffffffffffffffc
  00813: or     rdi,rax
  00816: rol    rdi,0x3d
  0081a: movq   xmm5,rdi
  0081f: jmp    0x836
  00824: call   0xffff438a
  00829: test   rax,rax
  0082c: je     0x37e02
  00832: movq   xmm5,xmm0
  00836: movq   xmm8,xmm5
  0083b: movq   rax,xmm2
  00840: test   rax,rax
  00843: je     0xffff4356
  00849: divsd  xmm8,xmm2
:00034 %8 = %4
:00035 %7 = %0.call clamp(%8; 1)            [Scene]
  0084e: movq   xmm0,xmm7
  00852: call   0xffff44ae
  00857: mov    QWORD PTR [r14-0x70],rax
  0085b: mov    rdi,QWORD PTR [r14-0x30]
  0085f: cmp    DWORD PTR [rip+0xffffffffffff6e51],0x26        # 0xffff76b7
  00866: jne    0x37e38
  0086c: sub    rsp,0x30
  00870: movq   QWORD PTR [rsp],xmm4
  00875: movq   QWORD PTR [rsp+0x8],xmm5
  0087b: movq   QWORD PTR [rsp+0x10],xmm6
  00881: movq   QWORD PTR [rsp+0x18],xmm7
  00887: movq   QWORD PTR [rsp+0x20],xmm8
  0088e: mov    QWORD PTR [rsp-0x28],0x0
  00897: mov    rax,QWORD PTR [r14-0x30]
  0089b: mov    QWORD PTR [rsp-0x40],rax
  008a0: mov    rdi,0x1
  008a7: mov    rax,QWORD PTR [r14-0x70]
  008ab: mov    QWORD PTR [rsp-0x48],rax
  008b0: mov    QWORD PTR [rsp-0x38],0x0
  008b9: movabs rax,0x40000003b
  008c3: mov    QWORD PTR [rsp-0x30],rax
  008c8: movabs r13,0x564da0ed7c00
  008d2: mov    rsi,QWORD PTR [rbx]
  008d5: mov    QWORD PTR [rsp-0x18],rsi
  008da: lea    rsi,[rsp-0x18]
  008df: mov    QWORD PTR [rbx],rsi
  008e2: lea    r14,[rsp-0x10]
  008e7: mov    QWORD PTR [rsp-0x20],r14
  008ec: call   0xffffab5e
  008f1: lea    r14,[rbp-0x8]
  008f5: mov    QWORD PTR [rbx],r14
  008f8: mov    r14,QWORD PTR [rbp-0x10]
  008fc: movq   xmm4,QWORD PTR [rsp]
  00901: movq   xmm5,QWORD PTR [rsp+0x8]
  00907: movq   xmm6,QWORD PTR [rsp+0x10]
  0090d: movq   xmm7,QWORD PTR [rsp+0x18]
  00913: movq   xmm8,QWORD PTR [rsp+0x20]
  0091a: add    rsp,0x30
  0091e: movabs r13,0x564da0e72490
  00928: test   rax,rax
  0092b: je     0xffff4331
  00931: mov    QWORD PTR [r14-0x68],rax
:00036 
:00038 %6 = %7.call chr()                   [Integer]
  00935: mov    rdi,QWORD PTR [r14-0x68]
  00939: test   rdi,0x1
  00940: je     0x37e6f
  00946: cmp    DWORD PTR [rip+0xffffffffffff6d6a],0x26        # 0xffff76b7
  0094d: jne    0x37e6f
  00953: mov    r9,0x0
  0095a: sub    rsp,0x20
  0095e: movq   QWORD PTR [rsp],xmm4
  00963: movq   QWORD PTR [rsp+0x8],xmm6
  00969: movq   QWORD PTR [rsp+0x10],xmm7
  0096f: movq   QWORD PTR [rsp+0x18],xmm8
  00976: mov    rdx,rdi
  00979: mov    QWORD PTR [rsp-0x40],rcx
  0097e: mov    QWORD PTR [rsp-0x28],0x0
  00987: lea    rcx,[r14-0x70]
  0098b: mov    r8,0x0
  00992: mov    rsi,QWORD PTR [rbx]
  00995: mov    QWORD PTR [rsp-0x18],rsi
  0099a: lea    rsi,[rsp-0x18]
  0099f: mov    QWORD PTR [rbx],rsi
  009a2: lea    r14,[rsp-0x10]
  009a7: mov    QWORD PTR [rsp-0x20],r14
  009ac: call   0x37ea6
  009b1: lea    r14,[rbp-0x8]
  009b5: mov    QWORD PTR [rbx],r14
  009b8: mov    r14,QWORD PTR [rbp-0x10]
  009bc: movq   xmm4,QWORD PTR [rsp]
  009c1: movq   xmm6,QWORD PTR [rsp+0x8]
  009c7: movq   xmm7,QWORD PTR [rsp+0x10]
  009cd: movq   xmm8,QWORD PTR [rsp+0x18]
  009d4: add    rsp,0x20
  009d8: movabs r13,0x564da0e724c0
  009e2: test   rax,rax
  009e5: je     0xffff4331
  009eb: mov    QWORD PTR [r14-0x60],rax
:00039 
:00041 _ = %0.call print(%6; 1)             [Scene]
  009ef: mov    rdi,QWORD PTR [r14-0x30]
  009f3: cmp    DWORD PTR [rip+0xffffffffffff6cbd],0x26        # 0xffff76b7
  009fa: jne    0x37ed8
  00a00: mov    r9,0x0
  00a07: sub    rsp,0x20
  00a0b: movq   QWORD PTR [rsp],xmm4
  00a10: movq   QWORD PTR [rsp+0x8],xmm6
  00a16: movq   QWORD PTR [rsp+0x10],xmm7
  00a1c: movq   QWORD PTR [rsp+0x18],xmm8
  00a23: mov    rdx,rdi
  00a26: mov    QWORD PTR [rsp-0x40],rcx
  00a2b: mov    QWORD PTR [rsp-0x28],0x0
  00a34: lea    rcx,[r14-0x60]
  00a38: mov    r8,0x1
  00a3f: mov    rsi,QWORD PTR [rbx]
  00a42: mov    QWORD PTR [rsp-0x18],rsi
  00a47: lea    rsi,[rsp-0x18]
  00a4c: mov    QWORD PTR [rbx],rsi
  00a4f: lea    r14,[rsp-0x10]
  00a54: mov    QWORD PTR [rsp-0x20],r14
  00a59: call   0x37f0f
  00a5e: lea    r14,[rbp-0x8]
  00a62: mov    QWORD PTR [rbx],r14
  00a65: mov    r14,QWORD PTR [rbp-0x10]
  00a69: movq   xmm4,QWORD PTR [rsp]
  00a6e: movq   xmm6,QWORD PTR [rsp+0x8]
  00a74: movq   xmm7,QWORD PTR [rsp+0x10]
  00a7a: movq   xmm8,QWORD PTR [rsp+0x18]
  00a81: add    rsp,0x20
  00a85: movabs r13,0x564da0e724f0
  00a8f: test   rax,rax
  00a92: je     0xffff4331
:00042 
:00044 %8 = %3
:00045 %7 = %0.call clamp(%8; 1)            [Scene]
  00a98: movq   xmm0,xmm6
  00a9c: call   0xffff44ae
  00aa1: mov    QWORD PTR [r14-0x70],rax
  00aa5: mov    rdi,QWORD PTR [r14-0x30]
  00aa9: cmp    DWORD PTR [rip+0xffffffffffff6c07],0x26        # 0xffff76b7
  00ab0: jne    0x37f41
  00ab6: sub    rsp,0x20
  00aba: movq   QWORD PTR [rsp],xmm4
  00abf: movq   QWORD PTR [rsp+0x8],xmm6
  00ac5: movq   QWORD PTR [rsp+0x10],xmm7
  00acb: movq   QWORD PTR [rsp+0x18],xmm8
  00ad2: mov    QWORD PTR [rsp-0x28],0x0
  00adb: mov    rax,QWORD PTR [r14-0x30]
  00adf: mov    QWORD PTR [rsp-0x40],rax
  00ae4: mov    rdi,0x1
  00aeb: mov    rax,QWORD PTR [r14-0x70]
  00aef: mov    QWORD PTR [rsp-0x48],rax
  00af4: mov    QWORD PTR [rsp-0x38],0x0
  00afd: movabs rax,0x40000003b
  00b07: mov    QWORD PTR [rsp-0x30],rax
  00b0c: movabs r13,0x564da0ed7c00
  00b16: mov    rsi,QWORD PTR [rbx]
  00b19: mov    QWORD PTR [rsp-0x18],rsi
  00b1e: lea    rsi,[rsp-0x18]
  00b23: mov    QWORD PTR [rbx],rsi
  00b26: lea    r14,[rsp-0x10]
  00b2b: mov    QWORD PTR [rsp-0x20],r14
  00b30: call   0xffffab5e
  00b35: lea    r14,[rbp-0x8]
  00b39: mov    QWORD PTR [rbx],r14
  00b3c: mov    r14,QWORD PTR [rbp-0x10]
  00b40: movq   xmm4,QWORD PTR [rsp]
  00b45: movq   xmm6,QWORD PTR [rsp+0x8]
  00b4b: movq   xmm7,QWORD PTR [rsp+0x10]
  00b51: movq   xmm8,QWORD PTR [rsp+0x18]
  00b58: add    rsp,0x20
  00b5c: movabs r13,0x564da0e72530
  00b66: test   rax,rax
  00b69: je     0xffff4331
  00b6f: mov    QWORD PTR [r14-0x68],rax
:00046 
:00048 %6 = %7.call chr()                   [Integer]
  00b73: mov    rdi,QWORD PTR [r14-0x68]
  00b77: test   rdi,0x1
  00b7e: je     0x37f78
  00b84: cmp    DWORD PTR [rip+0xffffffffffff6b2c],0x26        # 0xffff76b7
  00b8b: jne    0x37f78
  00b91: mov    r9,0x0
  00b98: sub    rsp,0x20
  00b9c: movq   QWORD PTR [rsp],xmm4
  00ba1: movq   QWORD PTR [rsp+0x8],xmm6
  00ba7: movq   QWORD PTR [rsp+0x10],xmm7
  00bad: movq   QWORD PTR [rsp+0x18],xmm8
  00bb4: mov    rdx,rdi
  00bb7: mov    QWORD PTR [rsp-0x40],rcx
  00bbc: mov    QWORD PTR [rsp-0x28],0x0
  00bc5: lea    rcx,[r14-0x70]
  00bc9: mov    r8,0x0
  00bd0: mov    rsi,QWORD PTR [rbx]
  00bd3: mov    QWORD PTR [rsp-0x18],rsi
  00bd8: lea    rsi,[rsp-0x18]
  00bdd: mov    QWORD PTR [rbx],rsi
  00be0: lea    r14,[rsp-0x10]
  00be5: mov    QWORD PTR [rsp-0x20],r14
  00bea: call   0x37faf
  00bef: lea    r14,[rbp-0x8]
  00bf3: mov    QWORD PTR [rbx],r14
  00bf6: mov    r14,QWORD PTR [rbp-0x10]
  00bfa: movq   xmm4,QWORD PTR [rsp]
  00bff: movq   xmm6,QWORD PTR [rsp+0x8]
  00c05: movq   xmm7,QWORD PTR [rsp+0x10]
  00c0b: movq   xmm8,QWORD PTR [rsp+0x18]
  00c12: add    rsp,0x20
  00c16: movabs r13,0x564da0e72560
  00c20: test   rax,rax
  00c23: je     0xffff4331
  00c29: mov    QWORD PTR [r14-0x60],rax
:00049 
:00051 _ = %0.call print(%6; 1)             [Scene]
  00c2d: mov    rdi,QWORD PTR [r14-0x30]
  00c31: cmp    DWORD PTR [rip+0xffffffffffff6a7f],0x26        # 0xffff76b7
  00c38: jne    0x37fe1
  00c3e: mov    r9,0x0
  00c45: sub    rsp,0x20
  00c49: movq   QWORD PTR [rsp],xmm4
  00c4e: movq   QWORD PTR [rsp+0x8],xmm6
  00c54: movq   QWORD PTR [rsp+0x10],xmm7
  00c5a: movq   QWORD PTR [rsp+0x18],xmm8
  00c61: mov    rdx,rdi
  00c64: mov    QWORD PTR [rsp-0x40],rcx
  00c69: mov    QWORD PTR [rsp-0x28],0x0
  00c72: lea    rcx,[r14-0x60]
  00c76: mov    r8,0x1
  00c7d: mov    rsi,QWORD PTR [rbx]
  00c80: mov    QWORD PTR [rsp-0x18],rsi
  00c85: lea    rsi,[rsp-0x18]
  00c8a: mov    QWORD PTR [rbx],rsi
  00c8d: lea    r14,[rsp-0x10]
  00c92: mov    QWORD PTR [rsp-0x20],r14
  00c97: call   0x38018
  00c9c: lea    r14,[rbp-0x8]
  00ca0: mov    QWORD PTR [rbx],r14
  00ca3: mov    r14,QWORD PTR [rbp-0x10]
  00ca7: movq   xmm4,QWORD PTR [rsp]
  00cac: movq   xmm6,QWORD PTR [rsp+0x8]
  00cb2: movq   xmm7,QWORD PTR [rsp+0x10]
  00cb8: movq   xmm8,QWORD PTR [rsp+0x18]
  00cbf: add    rsp,0x20
  00cc3: movabs r13,0x564da0e72590
  00ccd: test   rax,rax
  00cd0: je     0xffff4331
:00052 
:00054 %9 = %5
:00055 %8 = %0.call clamp(%9; 1)            [Scene]
  00cd6: movq   xmm0,xmm8
  00cdb: call   0xffff44ae
  00ce0: mov    QWORD PTR [r14-0x78],rax
  00ce4: mov    rdi,QWORD PTR [r14-0x30]
  00ce8: cmp    DWORD PTR [rip+0xffffffffffff69c8],0x26        # 0xffff76b7
  00cef: jne    0x3804a
  00cf5: sub    rsp,0x20
  00cf9: movq   QWORD PTR [rsp],xmm6
  00cfe: movq   QWORD PTR [rsp+0x8],xmm7
  00d04: movq   QWORD PTR [rsp+0x10],xmm8
  00d0b: mov    QWORD PTR [rsp-0x28],0x0
  00d14: mov    rax,QWORD PTR [r14-0x30]
  00d18: mov    QWORD PTR [rsp-0x40],rax
  00d1d: mov    rdi,0x1
  00d24: mov    rax,QWORD PTR [r14-0x78]
  00d28: mov    QWORD PTR [rsp-0x48],rax
  00d2d: mov    QWORD PTR [rsp-0x38],0x0
  00d36: movabs rax,0x40000003b
  00d40: mov    QWORD PTR [rsp-0x30],rax
  00d45: movabs r13,0x564da0ed7c00
  00d4f: mov    rsi,QWORD PTR [rbx]
  00d52: mov    QWORD PTR [rsp-0x18],rsi
  00d57: lea    rsi,[rsp-0x18]
  00d5c: mov    QWORD PTR [rbx],rsi
  00d5f: lea    r14,[rsp-0x10]
  00d64: mov    QWORD PTR [rsp-0x20],r14
  00d69: call   0xffffab5e
  00d6e: lea    r14,[rbp-0x8]
  00d72: mov    QWORD PTR [rbx],r14
  00d75: mov    r14,QWORD PTR [rbp-0x10]
  00d79: movq   xmm6,QWORD PTR [rsp]
  00d7e: movq   xmm7,QWORD PTR [rsp+0x8]
  00d84: movq   xmm8,QWORD PTR [rsp+0x10]
  00d8b: add    rsp,0x20
  00d8f: movabs r13,0x564da0e725d0
  00d99: test   rax,rax
  00d9c: je     0xffff4331
  00da2: mov    QWORD PTR [r14-0x70],rax
:00056 
:00058 %7 = %8.call chr()                   [Integer]
  00da6: mov    rdi,QWORD PTR [r14-0x70]
  00daa: test   rdi,0x1
  00db1: je     0x38081
  00db7: cmp    DWORD PTR [rip+0xffffffffffff68f9],0x26        # 0xffff76b7
  00dbe: jne    0x38081
  00dc4: mov    r9,0x0
  00dcb: sub    rsp,0x20
  00dcf: movq   QWORD PTR [rsp],xmm6
  00dd4: movq   QWORD PTR [rsp+0x8],xmm7
  00dda: movq   QWORD PTR [rsp+0x10],xmm8
  00de1: mov    rdx,rdi
  00de4: mov    QWORD PTR [rsp-0x40],rcx
  00de9: mov    QWORD PTR [rsp-0x28],0x0
  00df2: lea    rcx,[r14-0x78]
  00df6: mov    r8,0x0
  00dfd: mov    rsi,QWORD PTR [rbx]
  00e00: mov    QWORD PTR [rsp-0x18],rsi
  00e05: lea    rsi,[rsp-0x18]
  00e0a: mov    QWORD PTR [rbx],rsi
  00e0d: lea    r14,[rsp-0x10]
  00e12: mov    QWORD PTR [rsp-0x20],r14
  00e17: call   0x380b8
  00e1c: lea    r14,[rbp-0x8]
  00e20: mov    QWORD PTR [rbx],r14
  00e23: mov    r14,QWORD PTR [rbp-0x10]
  00e27: movq   xmm6,QWORD PTR [rsp]
  00e2c: movq   xmm7,QWORD PTR [rsp+0x8]
  00e32: movq   xmm8,QWORD PTR [rsp+0x10]
  00e39: add    rsp,0x20
  00e3d: movabs r13,0x564da0e72600
  00e47: test   rax,rax
  00e4a: je     0xffff4331
  00e50: mov    QWORD PTR [r14-0x68],rax
:00059 
:00061 %6 = %0.call print(%7; 1)            [Scene]
  00e54: mov    rdi,QWORD PTR [r14-0x30]
  00e58: cmp    DWORD PTR [rip+0xffffffffffff6858],0x26        # 0xffff76b7
  00e5f: jne    0x380ea
  00e65: mov    r9,0x0
  00e6c: sub    rsp,0x20
  00e70: movq   QWORD PTR [rsp],xmm6
  00e75: movq   QWORD PTR [rsp+0x8],xmm7
  00e7b: movq   QWORD PTR [rsp+0x10],xmm8
  00e82: mov    rdx,rdi
  00e85: mov    QWORD PTR [rsp-0x40],rcx
  00e8a: mov    QWORD PTR [rsp-0x28],0x0
  00e93: lea    rcx,[r14-0x68]
  00e97: mov    r8,0x1
  00e9e: mov    rsi,QWORD PTR [rbx]
  00ea1: mov    QWORD PTR [rsp-0x18],rsi
  00ea6: lea    rsi,[rsp-0x18]
  00eab: mov    QWORD PTR [rbx],rsi
  00eae: lea    r14,[rsp-0x10]
  00eb3: mov    QWORD PTR [rsp-0x20],r14
  00eb8: call   0x38121
  00ebd: lea    r14,[rbp-0x8]
  00ec1: mov    QWORD PTR [rbx],r14
  00ec4: mov    r14,QWORD PTR [rbp-0x10]
  00ec8: movq   xmm6,QWORD PTR [rsp]
  00ecd: movq   xmm7,QWORD PTR [rsp+0x8]
  00ed3: movq   xmm8,QWORD PTR [rsp+0x10]
  00eda: add    rsp,0x20
  00ede: movabs r13,0x564da0e72630
  00ee8: test   rax,rax
  00eeb: je     0xffff4331
  00ef1: mov    QWORD PTR [r14-0x60],rax
:00062 
:00064 ret %6
  00ef5: mov    rax,QWORD PTR [r14-0x60]
  00ef9: leave  
  00efa: ret    
==> start whole compile: <unnamed> FuncId(79) self_class:Scene start:[00000] bytecode:0x564da0e92bc0
<== finished compile. elapsed:24.2µs
offset:Pos(52320) code: 261 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    QWORD PTR [r14-0x40],0x4
  00042: mov    QWORD PTR [r14-0x48],0x4
  0004a: mov    rdi,QWORD PTR [rbp-0x30]
  0004e: test   rdi,0x7
  00055: jne    0x37204
  0005b: cmp    DWORD PTR [rdi+0x4],0x32
  0005f: jne    0x37204
:00000 init_block reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 %2 = dynvar(1, %1)
  00065: mov    rax,QWORD PTR [rbp-0x18]
  00069: mov    rax,QWORD PTR [rax-0x20]
  0006d: mov    QWORD PTR [r14-0x40],rax
:00002 %3 = literal[5308417]
  00071: mov    rax,0xa20003
  00078: mov    QWORD PTR [r14-0x48],rax
:00003 _ = %2.call times(&%3)               [Integer]
  0007c: mov    rdi,QWORD PTR [r14-0x40]
  00080: test   rdi,0x1
  00087: je     0x37213
  0008d: cmp    DWORD PTR [rip+0xffffffffffff66c5],0x26        # 0xffff6759
  00094: jne    0x37213
  0009a: mov    r9,QWORD PTR [r14-0x48]
  0009e: mov    rdx,rdi
  000a1: mov    QWORD PTR [rsp-0x40],rcx
  000a6: mov    QWORD PTR [rsp-0x28],0x0
  000af: lea    rcx,[r14-0x50]
  000b3: mov    r8,0x0
  000ba: mov    rsi,QWORD PTR [rbx]
  000bd: mov    QWORD PTR [rsp-0x18],rsi
  000c2: lea    rsi,[rsp-0x18]
  000c7: mov    QWORD PTR [rbx],rsi
  000ca: lea    r14,[rsp-0x10]
  000cf: mov    QWORD PTR [rsp-0x20],r14
  000d4: call   0x37222
  000d9: lea    r14,[rbp-0x8]
  000dd: mov    QWORD PTR [rbx],r14
  000e0: mov    r14,QWORD PTR [rbp-0x10]
  000e4: movabs r13,0x564da0e92c10
  000ee: test   rax,rax
  000f1: je     0xffff33d3
:00004 
:00006 %2 = nil
  000f7: mov    QWORD PTR [r14-0x40],0x4
:00007 ret %2
  000ff: mov    rax,QWORD PTR [r14-0x40]
  00103: leave  
  00104: ret    
==> start whole compile: intersect FuncId(70) self_class:Sphere start:[00000] bytecode:0x564da0e8bc90
<== finished compile. elapsed:119.6µs
offset:Pos(53610) code: 6522 bytes  data: 268 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x36d4a
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053: ff 	mov    QWORD PTR [r14-0xa0],rax
  0005a: ff 	mov    QWORD PTR [r14-0xa8],rax
  00061:    	mov    rdi,QWORD PTR [rbp-0x30]
  00065: 00 	test   rdi,0x7
  0006c:    	jne    0x36d59
  00072:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00076:    	jne    0x36d59
:00000 init_method reg:16 arg:2 pos:2 req:2 block:0 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  0007c:    	mov    rdi,QWORD PTR [r14-0x38]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x36d68
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00091:    	jne    0x36d68
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffff61b1],0x26        # 0xffff624f
  0009e:    	jne    0x36d68
  000a4:    	mov    esi,DWORD PTR [rip+0x18d4]        # 0x197e
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x36d77
  000b3:    	cmp    WORD PTR [rdi+0x2],0x3
  000b8:    	jne    0xd1
  000be:    	cmp    esi,0x6
  000c1:    	jge    0xd1
  000c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc:    	jmp    0xdd
  000d1: 4d 	movabs rax,0x564da0797d70
  000db:    	call   rax
  000dd:    	mov    QWORD PTR [r14-0x78],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000e1:    	mov    rdi,QWORD PTR [rbp-0x30]
  000e5:    	mov    rax,QWORD PTR [rdi+0x10]
  000e9:    	mov    QWORD PTR [r14-0x80],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  000ed:    	mov    rdi,QWORD PTR [r14-0x78]
  000f1: 00 	test   rdi,0x7
  000f8:    	jne    0x36da0
  000fe:    	cmp    DWORD PTR [rdi+0x4],0x28
  00102:    	jne    0x36da0
  00108: 26 	cmp    DWORD PTR [rip+0xffffffffffff6140],0x26        # 0xffff624f
  0010f:    	jne    0x36da0
  00115: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0011e:    	mov    rax,QWORD PTR [r14-0x78]
  00122:    	mov    QWORD PTR [rsp-0x40],rax
  00127: 00 	mov    rdi,0x1
  0012e:    	mov    rax,QWORD PTR [r14-0x80]
  00132:    	mov    QWORD PTR [rsp-0x48],rax
  00137: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00140: 08 	movabs rax,0x800000040
  0014a:    	mov    QWORD PTR [rsp-0x30],rax
  0014f: 4d 	movabs r13,0x564da0ed55e0
  00159:    	mov    rsi,QWORD PTR [rbx]
  0015c:    	mov    QWORD PTR [rsp-0x18],rsi
  00161:    	lea    rsi,[rsp-0x18]
  00166:    	mov    QWORD PTR [rbx],rsi
  00169:    	lea    r14,[rsp-0x10]
  0016e:    	mov    QWORD PTR [rsp-0x20],r14
  00173:    	call   0xffff6e88
  00178:    	lea    r14,[rbp-0x8]
  0017c:    	mov    QWORD PTR [rbx],r14
  0017f:    	mov    r14,QWORD PTR [rbp-0x10]
  00183: 4d 	movabs r13,0x564da0e8bd00
  0018d:    	test   rax,rax
  00190:    	je     0xffff2ec9
  00196:    	mov    QWORD PTR [r14-0x48],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  0019a:    	mov    rdi,QWORD PTR [r14-0x38]
  0019e: 00 	test   rdi,0x7
  001a5:    	jne    0x36daf
  001ab:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001af:    	jne    0x36daf
  001b5: 26 	cmp    DWORD PTR [rip+0xffffffffffff6093],0x26        # 0xffff624f
  001bc:    	jne    0x36daf
  001c2:    	mov    esi,DWORD PTR [rip+0x17be]        # 0x1986
  001c8:    	cmp    esi,0xffffffff
  001cb:    	je     0x36dbe
  001d1:    	cmp    WORD PTR [rdi+0x2],0x3
  001d6:    	jne    0x1ef
  001dc:    	cmp    esi,0x6
  001df:    	jge    0x1ef
  001e5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ea:    	jmp    0x1fb
  001ef: 4d 	movabs rax,0x564da0797d70
  001f9:    	call   rax
  001fb:    	mov    QWORD PTR [r14-0x78],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  001ff:    	mov    rdi,QWORD PTR [r14-0x48]
  00203: 00 	test   rdi,0x7
  0020a:    	jne    0x36de7
  00210:    	cmp    DWORD PTR [rdi+0x4],0x28
  00214:    	jne    0x36de7
  0021a: 26 	cmp    DWORD PTR [rip+0xffffffffffff602e],0x26        # 0xffff624f
  00221:    	jne    0x36de7
  00227: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00230:    	mov    rax,QWORD PTR [r14-0x48]
  00234:    	mov    QWORD PTR [rsp-0x40],rax
  00239: 00 	mov    rdi,0x1
  00240:    	mov    rax,QWORD PTR [r14-0x78]
  00244:    	mov    QWORD PTR [rsp-0x48],rax
  00249: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00252: 05 	movabs rax,0x500000042
  0025c:    	mov    QWORD PTR [rsp-0x30],rax
  00261: 4d 	movabs r13,0x564da0e78160
  0026b:    	mov    rsi,QWORD PTR [rbx]
  0026e:    	mov    QWORD PTR [rsp-0x18],rsi
  00273:    	lea    rsi,[rsp-0x18]
  00278:    	mov    QWORD PTR [rbx],rsi
  0027b:    	lea    r14,[rsp-0x10]
  00280:    	mov    QWORD PTR [rsp-0x20],r14
  00285:    	call   0xffff6f16
  0028a:    	lea    r14,[rbp-0x8]
  0028e:    	mov    QWORD PTR [rbx],r14
  00291:    	mov    r14,QWORD PTR [rbp-0x10]
  00295: 4d 	movabs r13,0x564da0e8bd60
  0029f:    	test   rax,rax
  002a2:    	je     0xffff2ec9
  002a8:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %10 = %3
  002ac:    	mov    rax,QWORD PTR [r14-0x48]
  002b0:    	mov    QWORD PTR [r14-0x80],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b4:    	mov    rdi,QWORD PTR [r14-0x48]
  002b8: 00 	test   rdi,0x7
  002bf:    	jne    0x36df6
  002c5:    	cmp    DWORD PTR [rdi+0x4],0x28
  002c9:    	jne    0x36df6
  002cf: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f79],0x26        # 0xffff624f
  002d6:    	jne    0x36df6
  002dc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  002e5:    	mov    rax,QWORD PTR [r14-0x48]
  002e9:    	mov    QWORD PTR [rsp-0x40],rax
  002ee: 00 	mov    rdi,0x1
  002f5:    	mov    rax,QWORD PTR [r14-0x80]
  002f9:    	mov    QWORD PTR [rsp-0x48],rax
  002fe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00307: 05 	movabs rax,0x500000042
  00311:    	mov    QWORD PTR [rsp-0x30],rax
  00316: 4d 	movabs r13,0x564da0e78160
  00320:    	mov    rsi,QWORD PTR [rbx]
  00323:    	mov    QWORD PTR [rsp-0x18],rsi
  00328:    	lea    rsi,[rsp-0x18]
  0032d:    	mov    QWORD PTR [rbx],rsi
  00330:    	lea    r14,[rsp-0x10]
  00335:    	mov    QWORD PTR [rsp-0x20],r14
  0033a:    	call   0xffff6f16
  0033f:    	lea    r14,[rbp-0x8]
  00343:    	mov    QWORD PTR [rbx],r14
  00346:    	mov    r14,QWORD PTR [rbp-0x10]
  0034a: 4d 	movabs r13,0x564da0e8bda0
  00354:    	test   rax,rax
  00357:    	je     0xffff2ec9
  0035d:    	mov    QWORD PTR [r14-0x78],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  00361:    	mov    rdi,QWORD PTR [rbp-0x30]
  00365:    	mov    rax,QWORD PTR [rdi+0x18]
  00369:    	mov    QWORD PTR [r14-0x80],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  0036d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00371:    	mov    rax,QWORD PTR [rdi+0x18]
  00375: ff 	mov    QWORD PTR [r14-0x88],rax
:00020 %10 = %10 * %11                      [Float][Float]
  0037c:    	mov    rdi,QWORD PTR [r14-0x80]
  00380: 00 	test   rdi,0x1
  00387:    	jne    0x36e05
  0038d: 00 	test   rdi,0x2
  00394:    	je     0x3d0
  0039a:    	xorps  xmm2,xmm2
  0039d: 00 	movabs rax,0x8000000000000002
  003a7:    	cmp    rdi,rax
  003aa:    	je     0x3e2
  003b0:    	mov    rax,rdi
  003b3:    	sar    rax,0x3f
  003b7:    	add    rax,0x2
  003bb:    	and    rdi,0xfffffffffffffffc
  003bf:    	or     rdi,rax
  003c2:    	rol    rdi,0x3d
  003c6:    	movq   xmm2,rdi
  003cb:    	jmp    0x3e2
  003d0:    	call   0xffff2f22
  003d5:    	test   rax,rax
  003d8:    	je     0x36e05
  003de:    	movq   xmm2,xmm0
  003e2: ff 	mov    rdi,QWORD PTR [r14-0x88]
  003e9: 00 	test   rdi,0x1
  003f0:    	jne    0x36e14
  003f6: 00 	test   rdi,0x2
  003fd:    	je     0x439
  00403:    	xorps  xmm3,xmm3
  00406: 00 	movabs rax,0x8000000000000002
  00410:    	cmp    rdi,rax
  00413:    	je     0x44b
  00419:    	mov    rax,rdi
  0041c:    	sar    rax,0x3f
  00420:    	add    rax,0x2
  00424:    	and    rdi,0xfffffffffffffffc
  00428:    	or     rdi,rax
  0042b:    	rol    rdi,0x3d
  0042f:    	movq   xmm3,rdi
  00434:    	jmp    0x44b
  00439:    	call   0xffff2f22
  0043e:    	test   rax,rax
  00441:    	je     0x36e14
  00447:    	movq   xmm3,xmm0
  0044b:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  0044f:    	mov    rdi,QWORD PTR [r14-0x78]
  00453: 00 	test   rdi,0x1
  0045a:    	jne    0x36e23
  00460: 00 	test   rdi,0x2
  00467:    	je     0x4a3
  0046d:    	xorps  xmm4,xmm4
  00470: 00 	movabs rax,0x8000000000000002
  0047a:    	cmp    rdi,rax
  0047d:    	je     0x4b5
  00483:    	mov    rax,rdi
  00486:    	sar    rax,0x3f
  0048a:    	add    rax,0x2
  0048e:    	and    rdi,0xfffffffffffffffc
  00492:    	or     rdi,rax
  00495:    	rol    rdi,0x3d
  00499:    	movq   xmm4,rdi
  0049e:    	jmp    0x4b5
  004a3:    	call   0xffff2f22
  004a8:    	test   rax,rax
  004ab:    	je     0x36e23
  004b1:    	movq   xmm4,xmm0
  004b5:    	movq   xmm5,xmm4
  004b9:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004bd:    	mov    rdi,QWORD PTR [r14-0x50]
  004c1: 00 	test   rdi,0x1
  004c8:    	jne    0x36e3f
  004ce: 00 	test   rdi,0x2
  004d5:    	je     0x511
  004db:    	xorps  xmm6,xmm6
  004de: 00 	movabs rax,0x8000000000000002
  004e8:    	cmp    rdi,rax
  004eb:    	je     0x523
  004f1:    	mov    rax,rdi
  004f4:    	sar    rax,0x3f
  004f8:    	add    rax,0x2
  004fc:    	and    rdi,0xfffffffffffffffc
  00500:    	or     rdi,rax
  00503:    	rol    rdi,0x3d
  00507:    	movq   xmm6,rdi
  0050c:    	jmp    0x523
  00511:    	call   0xffff2f22
  00516:    	test   rax,rax
  00519:    	je     0x36e3f
  0051f:    	movq   xmm6,xmm0
  00523:    	movq   xmm4,xmm6
  00527:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0052b:    	movq   xmm7,xmm4
  0052f:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00533: 00 	movq   xmm4,QWORD PTR [rip+0x145b]        # 0x1996
  0053b: 00 	movabs rax,0x8000000000000002
  00545:    	mov    QWORD PTR [r14-0x78],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  00549:    	ucomisd xmm7,xmm4
  0054d:    	jbe    0x37fe9
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00553:    	movq   xmm4,xmm6
  00557: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1448]        # 0x19a6
:00029 %11 = const[Math]                    [Math]
  0055e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5cf1]        # 0xffff6256
  00565: 00 	cmp    rax,QWORD PTR [rip+0x145a]        # 0x19c6
  0056c:    	jne    0x36e68
  00572: 00 	mov    rax,QWORD PTR [rip+0x143d]        # 0x19b6
  00579: ff 	mov    QWORD PTR [r14-0x88],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00580: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00587: 00 	test   rdi,0x7
  0058e:    	jne    0x36ef0
  00594:    	cmp    DWORD PTR [rdi+0x4],0x21
  00598:    	jne    0x36ef0
  0059e: 26 	cmp    DWORD PTR [rip+0xffffffffffff5caa],0x26        # 0xffff624f
  005a5:    	jne    0x36ef0
  005ab:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  005af:    	movq   xmm3,xmm4
  005b3:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005b7: 00 	movq   xmm4,QWORD PTR [rip+0x1417]        # 0x19d6
  005bf: 00 	movabs rax,0x8000000000000002
  005c9:    	mov    QWORD PTR [r14-0x78],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005cd:    	ucomisd xmm3,xmm4
  005d1:    	jbe    0x37edd
:00038 %9 = %2.call t()                     [Isect]
  005d7:    	mov    rdi,QWORD PTR [r14-0x40]
  005db: 00 	test   rdi,0x7
  005e2:    	jne    0x36f2d
  005e8:    	cmp    DWORD PTR [rdi+0x4],0x30
  005ec:    	jne    0x36f2d
  005f2: 26 	cmp    DWORD PTR [rip+0xffffffffffff5c56],0x26        # 0xffff624f
  005f9:    	jne    0x36f2d
  005ff:    	mov    esi,DWORD PTR [rip+0x13dd]        # 0x19e2
  00605:    	cmp    esi,0xffffffff
  00608:    	je     0x36f77
  0060e:    	cmp    WORD PTR [rdi+0x2],0x3
  00613:    	jne    0x62c
  00619:    	cmp    esi,0x6
  0061c:    	jge    0x62c
  00622:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00627:    	jmp    0x67a
  0062c:    	sub    rsp,0x30
  00630:    	movq   QWORD PTR [rsp],xmm2
  00635:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00641:    	movq   QWORD PTR [rsp+0x18],xmm6
  00647:    	movq   QWORD PTR [rsp+0x20],xmm7
  0064d: 4d 	movabs rax,0x564da0797d70
  00657:    	call   rax
  00659:    	movq   xmm2,QWORD PTR [rsp]
  0065e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00664:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0066a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00670:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00676:    	add    rsp,0x30
  0067a:    	mov    QWORD PTR [r14-0x78],rax
:00039 
:00041 _%9 = %7 < %9                        [Float][Float]
:00042 condnotbr _%9 =>:00113
  0067e:    	mov    rdi,QWORD PTR [r14-0x78]
  00682: 00 	test   rdi,0x1
  00689:    	jne    0x36fe2
  0068f: 00 	test   rdi,0x2
  00696:    	je     0x6d2
  0069c:    	xorps  xmm4,xmm4
  0069f: 00 	movabs rax,0x8000000000000002
  006a9:    	cmp    rdi,rax
  006ac:    	je     0x6e4
  006b2:    	mov    rax,rdi
  006b5:    	sar    rax,0x3f
  006b9:    	add    rax,0x2
  006bd:    	and    rdi,0xfffffffffffffffc
  006c1:    	or     rdi,rax
  006c4:    	rol    rdi,0x3d
  006c8:    	movq   xmm4,rdi
  006cd:    	jmp    0x6e4
  006d2:    	call   0xffff2f22
  006d7:    	test   rax,rax
  006da:    	je     0x36fe2
  006e0:    	movq   xmm4,xmm0
  006e4:    	ucomisd xmm3,xmm4
  006e8:    	jae    0x37f3a
:00043 _ = %2.call t=(%7; 1)                [Isect]
  006ee:    	movq   xmm0,xmm3
  006f2:    	call   0xffff3046
  006f7:    	mov    QWORD PTR [r14-0x68],rax
  006fb:    	mov    rdi,QWORD PTR [r14-0x40]
  006ff: 00 	test   rdi,0x7
  00706:    	jne    0x3702c
  0070c:    	cmp    DWORD PTR [rdi+0x4],0x30
  00710:    	jne    0x3702c
  00716: 26 	cmp    DWORD PTR [rip+0xffffffffffff5b32],0x26        # 0xffff624f
  0071d:    	jne    0x3702c
  00723:    	mov    esi,DWORD PTR [rip+0x12c1]        # 0x19ea
  00729:    	cmp    esi,0xffffffff
  0072c:    	je     0x37069
  00732:    	cmp    WORD PTR [rdi+0x2],0x3
  00737:    	jne    0x754
  0073d:    	cmp    esi,0x6
  00740:    	jge    0x754
  00746:    	mov    rax,QWORD PTR [r14-0x68]
  0074a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0074f:    	jmp    0x7c5
  00754:    	sub    rsp,0x30
  00758:    	movq   QWORD PTR [rsp],xmm2
  0075d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00763:    	movq   QWORD PTR [rsp+0x10],xmm4
  00769:    	movq   QWORD PTR [rsp+0x18],xmm5
  0076f:    	movq   QWORD PTR [rsp+0x20],xmm6
  00775:    	movq   QWORD PTR [rsp+0x28],xmm7
  0077b:    	mov    rdx,QWORD PTR [r14-0x68]
  0077f: 4d 	movabs rax,0x564da0797ff0
  00789:    	call   rax
  0078b:    	movq   xmm2,QWORD PTR [rsp]
  00790:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00796:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0079c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007a2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  007a8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  007ae:    	add    rsp,0x30
  007b2: 4d 	movabs r13,0x564da0e8bf60
  007bc:    	test   rax,rax
  007bf:    	je     0xffff2ec9
:00044 
:00046 %9 = literal[true]
  007c5: 00 	mov    rax,0x1c
  007cc:    	mov    QWORD PTR [r14-0x78],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  007d0:    	mov    rdi,QWORD PTR [r14-0x40]
  007d4: 00 	test   rdi,0x7
  007db:    	jne    0x370e7
  007e1:    	cmp    DWORD PTR [rdi+0x4],0x30
  007e5:    	jne    0x370e7
  007eb: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a5d],0x26        # 0xffff624f
  007f2:    	jne    0x370e7
  007f8:    	mov    esi,DWORD PTR [rip+0x11f4]        # 0x19f2
  007fe:    	cmp    esi,0xffffffff
  00801:    	je     0x37124
  00807:    	cmp    WORD PTR [rdi+0x2],0x3
  0080c:    	jne    0x829
  00812:    	cmp    esi,0x6
  00815:    	jge    0x829
  0081b:    	mov    rax,QWORD PTR [r14-0x78]
  0081f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00824:    	jmp    0x88e
  00829:    	sub    rsp,0x30
  0082d:    	movq   QWORD PTR [rsp],xmm2
  00832:    	movq   QWORD PTR [rsp+0x8],xmm3
  00838:    	movq   QWORD PTR [rsp+0x10],xmm5
  0083e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00844:    	movq   QWORD PTR [rsp+0x20],xmm7
  0084a:    	mov    rdx,QWORD PTR [r14-0x78]
  0084e: 4d 	movabs rax,0x564da0797ff0
  00858:    	call   rax
  0085a:    	movq   xmm2,QWORD PTR [rsp]
  0085f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00865:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0086b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00871:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00877:    	add    rsp,0x30
  0087b: 4d 	movabs r13,0x564da0e8bfa0
  00885:    	test   rax,rax
  00888:    	je     0xffff2ec9
:00048 
:00050 %10 = const[Vec]                     [Vec]
  0088e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff59c1]        # 0xffff6256
  00895: 00 	cmp    rax,QWORD PTR [rip+0x116a]        # 0x1a06
  0089c:    	jne    0x37196
  008a2: 00 	mov    rax,QWORD PTR [rip+0x114d]        # 0x19f6
  008a9:    	mov    QWORD PTR [r14-0x80],rax
:00051 %12 = %1.call org()                  [Ray]
  008ad:    	mov    rdi,QWORD PTR [r14-0x38]
  008b1: 00 	test   rdi,0x7
  008b8:    	jne    0x37212
  008be:    	cmp    DWORD PTR [rdi+0x4],0x2e
  008c2:    	jne    0x37212
  008c8: 26 	cmp    DWORD PTR [rip+0xffffffffffff5980],0x26        # 0xffff624f
  008cf:    	jne    0x37212
  008d5:    	mov    esi,DWORD PTR [rip+0x1137]        # 0x1a12
  008db:    	cmp    esi,0xffffffff
  008de:    	je     0x3723b
  008e4:    	cmp    WORD PTR [rdi+0x2],0x3
  008e9:    	jne    0x902
  008ef:    	cmp    esi,0x6
  008f2:    	jge    0x902
  008f8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008fd:    	jmp    0x944
  00902:    	sub    rsp,0x20
  00906:    	movq   QWORD PTR [rsp],xmm3
  0090b:    	movq   QWORD PTR [rsp+0x8],xmm5
  00911:    	movq   QWORD PTR [rsp+0x10],xmm6
  00917:    	movq   QWORD PTR [rsp+0x18],xmm7
  0091d: 4d 	movabs rax,0x564da0797d70
  00927:    	call   rax
  00929:    	movq   xmm3,QWORD PTR [rsp]
  0092e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00934:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0093a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00940:    	add    rsp,0x20
  00944: ff 	mov    QWORD PTR [r14-0x90],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  0094b: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00952: 00 	test   rdi,0x7
  00959:    	jne    0x3729a
  0095f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00963:    	jne    0x3729a
  00969: 26 	cmp    DWORD PTR [rip+0xffffffffffff58df],0x26        # 0xffff624f
  00970:    	jne    0x3729a
  00976:    	mov    esi,DWORD PTR [rip+0x109e]        # 0x1a1a
  0097c:    	cmp    esi,0xffffffff
  0097f:    	je     0x372c3
  00985:    	cmp    WORD PTR [rdi+0x2],0x3
  0098a:    	jne    0x9a3
  00990:    	cmp    esi,0x6
  00993:    	jge    0x9a3
  00999:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0099e:    	jmp    0x9e5
  009a3:    	sub    rsp,0x20
  009a7:    	movq   QWORD PTR [rsp],xmm3
  009ac:    	movq   QWORD PTR [rsp+0x8],xmm5
  009b2:    	movq   QWORD PTR [rsp+0x10],xmm6
  009b8:    	movq   QWORD PTR [rsp+0x18],xmm7
  009be: 4d 	movabs rax,0x564da0797d70
  009c8:    	call   rax
  009ca:    	movq   xmm3,QWORD PTR [rsp]
  009cf:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009d5:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009db:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009e1:    	add    rsp,0x20
  009e5: ff 	mov    QWORD PTR [r14-0x88],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  009ec:    	mov    rdi,QWORD PTR [r14-0x38]
  009f0: 00 	test   rdi,0x7
  009f7:    	jne    0x37322
  009fd:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a01:    	jne    0x37322
  00a07: 26 	cmp    DWORD PTR [rip+0xffffffffffff5841],0x26        # 0xffff624f
  00a0e:    	jne    0x37322
  00a14:    	mov    esi,DWORD PTR [rip+0x1008]        # 0x1a22
  00a1a:    	cmp    esi,0xffffffff
  00a1d:    	je     0x3734b
  00a23:    	cmp    WORD PTR [rdi+0x2],0x3
  00a28:    	jne    0xa41
  00a2e:    	cmp    esi,0x6
  00a31:    	jge    0xa41
  00a37:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a3c:    	jmp    0xa83
  00a41:    	sub    rsp,0x20
  00a45:    	movq   QWORD PTR [rsp],xmm3
  00a4a:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a50:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a56:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a5c: 4d 	movabs rax,0x564da0797d70
  00a66:    	call   rax
  00a68:    	movq   xmm3,QWORD PTR [rsp]
  00a6d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a73:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a79:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a7f:    	add    rsp,0x20
  00a83: ff 	mov    QWORD PTR [r14-0x98],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00a8a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00a91: 00 	test   rdi,0x7
  00a98:    	jne    0x373aa
  00a9e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00aa2:    	jne    0x373aa
  00aa8: 26 	cmp    DWORD PTR [rip+0xffffffffffff57a0],0x26        # 0xffff624f
  00aaf:    	jne    0x373aa
  00ab5:    	mov    esi,DWORD PTR [rip+0xf6f]        # 0x1a2a
  00abb:    	cmp    esi,0xffffffff
  00abe:    	je     0x373d3
  00ac4:    	cmp    WORD PTR [rdi+0x2],0x3
  00ac9:    	jne    0xae2
  00acf:    	cmp    esi,0x6
  00ad2:    	jge    0xae2
  00ad8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00add:    	jmp    0xb24
  00ae2:    	sub    rsp,0x20
  00ae6:    	movq   QWORD PTR [rsp],xmm3
  00aeb:    	movq   QWORD PTR [rsp+0x8],xmm5
  00af1:    	movq   QWORD PTR [rsp+0x10],xmm6
  00af7:    	movq   QWORD PTR [rsp+0x18],xmm7
  00afd: 4d 	movabs rax,0x564da0797d70
  00b07:    	call   rax
  00b09:    	movq   xmm3,QWORD PTR [rsp]
  00b0e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b14:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b1a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b20:    	add    rsp,0x20
  00b24: ff 	mov    QWORD PTR [r14-0x90],rax
:00061 
:00063 %12 = %12 * %7                       [Float][Float]
  00b2b: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00b32: 00 	test   rdi,0x1
  00b39:    	jne    0x37432
  00b3f: 00 	test   rdi,0x2
  00b46:    	je     0xb82
  00b4c:    	xorps  xmm2,xmm2
  00b4f: 00 	movabs rax,0x8000000000000002
  00b59:    	cmp    rdi,rax
  00b5c:    	je     0xb94
  00b62:    	mov    rax,rdi
  00b65:    	sar    rax,0x3f
  00b69:    	add    rax,0x2
  00b6d:    	and    rdi,0xfffffffffffffffc
  00b71:    	or     rdi,rax
  00b74:    	rol    rdi,0x3d
  00b78:    	movq   xmm2,rdi
  00b7d:    	jmp    0xb94
  00b82:    	call   0xffff2f22
  00b87:    	test   rax,rax
  00b8a:    	je     0x37432
  00b90:    	movq   xmm2,xmm0
  00b94:    	mulsd  xmm2,xmm3
:00064 %11 = %11 + %12                      [Float][Float]
  00b98: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b9f: 00 	test   rdi,0x1
  00ba6:    	jne    0x3745b
  00bac: 00 	test   rdi,0x2
  00bb3:    	je     0xbef
  00bb9:    	xorps  xmm4,xmm4
  00bbc: 00 	movabs rax,0x8000000000000002
  00bc6:    	cmp    rdi,rax
  00bc9:    	je     0xc01
  00bcf:    	mov    rax,rdi
  00bd2:    	sar    rax,0x3f
  00bd6:    	add    rax,0x2
  00bda:    	and    rdi,0xfffffffffffffffc
  00bde:    	or     rdi,rax
  00be1:    	rol    rdi,0x3d
  00be5:    	movq   xmm4,rdi
  00bea:    	jmp    0xc01
  00bef:    	call   0xffff2f22
  00bf4:    	test   rax,rax
  00bf7:    	je     0x3745b
  00bfd:    	movq   xmm4,xmm0
  00c01:    	addsd  xmm4,xmm2
:00065 %13 = %1.call org()                  [Ray]
  00c05:    	mov    rdi,QWORD PTR [r14-0x38]
  00c09: 00 	test   rdi,0x7
  00c10:    	jne    0x37494
  00c16:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00c1a:    	jne    0x37494
  00c20: 26 	cmp    DWORD PTR [rip+0xffffffffffff5628],0x26        # 0xffff624f
  00c27:    	jne    0x37494
  00c2d:    	mov    esi,DWORD PTR [rip+0xdff]        # 0x1a32
  00c33:    	cmp    esi,0xffffffff
  00c36:    	je     0x374dd
  00c3c:    	cmp    WORD PTR [rdi+0x2],0x3
  00c41:    	jne    0xc5a
  00c47:    	cmp    esi,0x6
  00c4a:    	jge    0xc5a
  00c50:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c55:    	jmp    0xcb4
  00c5a:    	sub    rsp,0x30
  00c5e:    	movq   QWORD PTR [rsp],xmm2
  00c63:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c69:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c6f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c75:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c7b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c81: 4d 	movabs rax,0x564da0797d70
  00c8b:    	call   rax
  00c8d:    	movq   xmm2,QWORD PTR [rsp]
  00c92:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c98:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c9e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ca4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00caa:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00cb0:    	add    rsp,0x30
  00cb4: ff 	mov    QWORD PTR [r14-0x98],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00cbb: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00cc2: 00 	test   rdi,0x7
  00cc9:    	jne    0x37554
  00ccf:    	cmp    DWORD PTR [rdi+0x4],0x28
  00cd3:    	jne    0x37554
  00cd9: 26 	cmp    DWORD PTR [rip+0xffffffffffff556f],0x26        # 0xffff624f
  00ce0:    	jne    0x37554
  00ce6:    	mov    esi,DWORD PTR [rip+0xd4e]        # 0x1a3a
  00cec:    	cmp    esi,0xffffffff
  00cef:    	je     0x3758d
  00cf5:    	cmp    WORD PTR [rdi+0x2],0x3
  00cfa:    	jne    0xd13
  00d00:    	cmp    esi,0x6
  00d03:    	jge    0xd13
  00d09:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d0e:    	jmp    0xd61
  00d13:    	sub    rsp,0x30
  00d17:    	movq   QWORD PTR [rsp],xmm3
  00d1c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d22:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d28:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d2e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d34: 4d 	movabs rax,0x564da0797d70
  00d3e:    	call   rax
  00d40:    	movq   xmm3,QWORD PTR [rsp]
  00d45:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d4b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d51:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d57:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d5d:    	add    rsp,0x30
  00d61: ff 	mov    QWORD PTR [r14-0x90],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d68:    	mov    rdi,QWORD PTR [r14-0x38]
  00d6c: 00 	test   rdi,0x7
  00d73:    	jne    0x375f8
  00d79:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d7d:    	jne    0x375f8
  00d83: 26 	cmp    DWORD PTR [rip+0xffffffffffff54c5],0x26        # 0xffff624f
  00d8a:    	jne    0x375f8
  00d90:    	mov    esi,DWORD PTR [rip+0xcac]        # 0x1a42
  00d96:    	cmp    esi,0xffffffff
  00d99:    	je     0x37631
  00d9f:    	cmp    WORD PTR [rdi+0x2],0x3
  00da4:    	jne    0xdbd
  00daa:    	cmp    esi,0x6
  00dad:    	jge    0xdbd
  00db3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00db8:    	jmp    0xe0b
  00dbd:    	sub    rsp,0x30
  00dc1:    	movq   QWORD PTR [rsp],xmm3
  00dc6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dcc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dd2:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dd8:    	movq   QWORD PTR [rsp+0x20],xmm7
  00dde: 4d 	movabs rax,0x564da0797d70
  00de8:    	call   rax
  00dea:    	movq   xmm3,QWORD PTR [rsp]
  00def:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00df5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dfb:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e01:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e07:    	add    rsp,0x30
  00e0b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00e12: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e19: 00 	test   rdi,0x7
  00e20:    	jne    0x3769c
  00e26:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e2a:    	jne    0x3769c
  00e30: 26 	cmp    DWORD PTR [rip+0xffffffffffff5418],0x26        # 0xffff624f
  00e37:    	jne    0x3769c
  00e3d:    	mov    esi,DWORD PTR [rip+0xc07]        # 0x1a4a
  00e43:    	cmp    esi,0xffffffff
  00e46:    	je     0x376d5
  00e4c:    	cmp    WORD PTR [rdi+0x2],0x3
  00e51:    	jne    0xe6a
  00e57:    	cmp    esi,0x6
  00e5a:    	jge    0xe6a
  00e60:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e65:    	jmp    0xeb8
  00e6a:    	sub    rsp,0x30
  00e6e:    	movq   QWORD PTR [rsp],xmm3
  00e73:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e79:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e7f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e85:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e8b: 4d 	movabs rax,0x564da0797d70
  00e95:    	call   rax
  00e97:    	movq   xmm3,QWORD PTR [rsp]
  00e9c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ea2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ea8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00eae:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00eb4:    	add    rsp,0x30
  00eb8: ff 	mov    QWORD PTR [r14-0x98],rax
:00075 
:00077 %13 = %13 * %7                       [Float][Float]
  00ebf: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00ec6: 00 	test   rdi,0x1
  00ecd:    	jne    0x37740
  00ed3: 00 	test   rdi,0x2
  00eda:    	je     0xf16
  00ee0:    	xorps  xmm2,xmm2
  00ee3: 00 	movabs rax,0x8000000000000002
  00eed:    	cmp    rdi,rax
  00ef0:    	je     0xf28
  00ef6:    	mov    rax,rdi
  00ef9:    	sar    rax,0x3f
  00efd:    	add    rax,0x2
  00f01:    	and    rdi,0xfffffffffffffffc
  00f05:    	or     rdi,rax
  00f08:    	rol    rdi,0x3d
  00f0c:    	movq   xmm2,rdi
  00f11:    	jmp    0xf28
  00f16:    	call   0xffff2f22
  00f1b:    	test   rax,rax
  00f1e:    	je     0x37740
  00f24:    	movq   xmm2,xmm0
  00f28:    	mulsd  xmm2,xmm3
:00078 %12 = %12 + %13                      [Float][Float]
  00f2c: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00f33: 00 	test   rdi,0x1
  00f3a:    	jne    0x37779
  00f40: 00 	test   rdi,0x2
  00f47:    	je     0xf84
  00f4d:    	xorps  xmm8,xmm8
  00f51: 00 	movabs rax,0x8000000000000002
  00f5b:    	cmp    rdi,rax
  00f5e:    	je     0xf97
  00f64:    	mov    rax,rdi
  00f67:    	sar    rax,0x3f
  00f6b:    	add    rax,0x2
  00f6f:    	and    rdi,0xfffffffffffffffc
  00f73:    	or     rdi,rax
  00f76:    	rol    rdi,0x3d
  00f7a:    	movq   xmm8,rdi
  00f7f:    	jmp    0xf97
  00f84:    	call   0xffff2f22
  00f89:    	test   rax,rax
  00f8c:    	je     0x37779
  00f92:    	movq   xmm8,xmm0
  00f97:    	addsd  xmm8,xmm2
:00079 %14 = %1.call org()                  [Ray]
  00f9c:    	mov    rdi,QWORD PTR [r14-0x38]
  00fa0: 00 	test   rdi,0x7
  00fa7:    	jne    0x377c2
  00fad:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00fb1:    	jne    0x377c2
  00fb7: 26 	cmp    DWORD PTR [rip+0xffffffffffff5291],0x26        # 0xffff624f
  00fbe:    	jne    0x377c2
  00fc4:    	mov    esi,DWORD PTR [rip+0xa88]        # 0x1a52
  00fca:    	cmp    esi,0xffffffff
  00fcd:    	je     0x3781c
  00fd3:    	cmp    WORD PTR [rdi+0x2],0x3
  00fd8:    	jne    0xff1
  00fde:    	cmp    esi,0x6
  00fe1:    	jge    0xff1
  00fe7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fec:    	jmp    0x1059
  00ff1:    	sub    rsp,0x40
  00ff5:    	movq   QWORD PTR [rsp],xmm2
  00ffa:    	movq   QWORD PTR [rsp+0x8],xmm3
  01000:    	movq   QWORD PTR [rsp+0x10],xmm4
  01006:    	movq   QWORD PTR [rsp+0x18],xmm5
  0100c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01012:    	movq   QWORD PTR [rsp+0x28],xmm7
  01018: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0101f: 4d 	movabs rax,0x564da0797d70
  01029:    	call   rax
  0102b:    	movq   xmm2,QWORD PTR [rsp]
  01030:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01036:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0103c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01042:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01048:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0104e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01055:    	add    rsp,0x40
  01059: ff 	mov    QWORD PTR [r14-0xa0],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  01060: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01067: 00 	test   rdi,0x7
  0106e:    	jne    0x378a1
  01074:    	cmp    DWORD PTR [rdi+0x4],0x28
  01078:    	jne    0x378a1
  0107e: 26 	cmp    DWORD PTR [rip+0xffffffffffff51ca],0x26        # 0xffff624f
  01085:    	jne    0x378a1
  0108b:    	mov    esi,DWORD PTR [rip+0x9c9]        # 0x1a5a
  01091:    	cmp    esi,0xffffffff
  01094:    	je     0x378eb
  0109a:    	cmp    WORD PTR [rdi+0x2],0x3
  0109f:    	jne    0x10b8
  010a5:    	cmp    esi,0x6
  010a8:    	jge    0x10b8
  010ae:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010b3:    	jmp    0x1114
  010b8:    	sub    rsp,0x30
  010bc:    	movq   QWORD PTR [rsp],xmm3
  010c1:    	movq   QWORD PTR [rsp+0x8],xmm4
  010c7:    	movq   QWORD PTR [rsp+0x10],xmm5
  010cd:    	movq   QWORD PTR [rsp+0x18],xmm6
  010d3:    	movq   QWORD PTR [rsp+0x20],xmm7
  010d9: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010e0: 4d 	movabs rax,0x564da0797d70
  010ea:    	call   rax
  010ec:    	movq   xmm3,QWORD PTR [rsp]
  010f1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010fd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01103:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01109: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01110:    	add    rsp,0x30
  01114: ff 	mov    QWORD PTR [r14-0x98],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  0111b:    	mov    rdi,QWORD PTR [r14-0x38]
  0111f: 00 	test   rdi,0x7
  01126:    	jne    0x37964
  0112c:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01130:    	jne    0x37964
  01136: 26 	cmp    DWORD PTR [rip+0xffffffffffff5112],0x26        # 0xffff624f
  0113d:    	jne    0x37964
  01143:    	mov    esi,DWORD PTR [rip+0x919]        # 0x1a62
  01149:    	cmp    esi,0xffffffff
  0114c:    	je     0x379ae
  01152:    	cmp    WORD PTR [rdi+0x2],0x3
  01157:    	jne    0x1170
  0115d:    	cmp    esi,0x6
  01160:    	jge    0x1170
  01166:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0116b:    	jmp    0x11cc
  01170:    	sub    rsp,0x30
  01174:    	movq   QWORD PTR [rsp],xmm3
  01179:    	movq   QWORD PTR [rsp+0x8],xmm4
  0117f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01185:    	movq   QWORD PTR [rsp+0x18],xmm6
  0118b:    	movq   QWORD PTR [rsp+0x20],xmm7
  01191: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01198: 4d 	movabs rax,0x564da0797d70
  011a2:    	call   rax
  011a4:    	movq   xmm3,QWORD PTR [rsp]
  011a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011af:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011b5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011bb:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011c1: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011c8:    	add    rsp,0x30
  011cc: ff 	mov    QWORD PTR [r14-0xa8],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  011d3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  011da: 00 	test   rdi,0x7
  011e1:    	jne    0x37a27
  011e7:    	cmp    DWORD PTR [rdi+0x4],0x28
  011eb:    	jne    0x37a27
  011f1: 26 	cmp    DWORD PTR [rip+0xffffffffffff5057],0x26        # 0xffff624f
  011f8:    	jne    0x37a27
  011fe:    	mov    esi,DWORD PTR [rip+0x866]        # 0x1a6a
  01204:    	cmp    esi,0xffffffff
  01207:    	je     0x37a71
  0120d:    	cmp    WORD PTR [rdi+0x2],0x3
  01212:    	jne    0x122b
  01218:    	cmp    esi,0x6
  0121b:    	jge    0x122b
  01221:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01226:    	jmp    0x1287
  0122b:    	sub    rsp,0x30
  0122f:    	movq   QWORD PTR [rsp],xmm3
  01234:    	movq   QWORD PTR [rsp+0x8],xmm4
  0123a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01240:    	movq   QWORD PTR [rsp+0x18],xmm6
  01246:    	movq   QWORD PTR [rsp+0x20],xmm7
  0124c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01253: 4d 	movabs rax,0x564da0797d70
  0125d:    	call   rax
  0125f:    	movq   xmm3,QWORD PTR [rsp]
  01264:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01270:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01276:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0127c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01283:    	add    rsp,0x30
  01287: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 
:00091 %14 = %14 * %7                       [Float][Float]
  0128e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01295: 00 	test   rdi,0x1
  0129c:    	jne    0x37aea
  012a2: 00 	test   rdi,0x2
  012a9:    	je     0x12e5
  012af:    	xorps  xmm2,xmm2
  012b2: 00 	movabs rax,0x8000000000000002
  012bc:    	cmp    rdi,rax
  012bf:    	je     0x12f7
  012c5:    	mov    rax,rdi
  012c8:    	sar    rax,0x3f
  012cc:    	add    rax,0x2
  012d0:    	and    rdi,0xfffffffffffffffc
  012d4:    	or     rdi,rax
  012d7:    	rol    rdi,0x3d
  012db:    	movq   xmm2,rdi
  012e0:    	jmp    0x12f7
  012e5:    	call   0xffff2f22
  012ea:    	test   rax,rax
  012ed:    	je     0x37aea
  012f3:    	movq   xmm2,xmm0
  012f7:    	mulsd  xmm2,xmm3
:00092 %13 = %13 + %14                      [Float][Float]
  012fb: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01302: 00 	test   rdi,0x1
  01309:    	jne    0x37b34
  0130f: 00 	test   rdi,0x2
  01316:    	je     0x1353
  0131c:    	xorps  xmm9,xmm9
  01320: 00 	movabs rax,0x8000000000000002
  0132a:    	cmp    rdi,rax
  0132d:    	je     0x1366
  01333:    	mov    rax,rdi
  01336:    	sar    rax,0x3f
  0133a:    	add    rax,0x2
  0133e:    	and    rdi,0xfffffffffffffffc
  01342:    	or     rdi,rax
  01345:    	rol    rdi,0x3d
  01349:    	movq   xmm9,rdi
  0134e:    	jmp    0x1366
  01353:    	call   0xffff2f22
  01358:    	test   rax,rax
  0135b:    	je     0x37b34
  01361:    	movq   xmm9,xmm0
  01366:    	addsd  xmm9,xmm2
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  0136b:    	movq   xmm0,xmm4
  0136f:    	call   0xffff3046
  01374: ff 	mov    QWORD PTR [r14-0x88],rax
  0137b:    	movq   xmm0,xmm8
  01380:    	call   0xffff3046
  01385: ff 	mov    QWORD PTR [r14-0x90],rax
  0138c:    	movq   xmm0,xmm9
  01391:    	call   0xffff3046
  01396: ff 	mov    QWORD PTR [r14-0x98],rax
  0139d:    	mov    rdi,QWORD PTR [r14-0x80]
  013a1: 00 	test   rdi,0x7
  013a8:    	jne    0x37b8e
  013ae:    	cmp    DWORD PTR [rdi+0x4],0x29
  013b2:    	jne    0x37b8e
  013b8: 26 	cmp    DWORD PTR [rip+0xffffffffffff4e90],0x26        # 0xffff624f
  013bf:    	jne    0x37b8e
  013c5: 00 	mov    r9,0x0
  013cc:    	sub    rsp,0x40
  013d0:    	movq   QWORD PTR [rsp],xmm2
  013d5:    	movq   QWORD PTR [rsp+0x8],xmm3
  013db:    	movq   QWORD PTR [rsp+0x10],xmm4
  013e1:    	movq   QWORD PTR [rsp+0x18],xmm5
  013e7:    	movq   QWORD PTR [rsp+0x20],xmm6
  013ed:    	movq   QWORD PTR [rsp+0x28],xmm7
  013f3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  013fa: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01401:    	mov    rdx,rdi
  01404:    	mov    QWORD PTR [rsp-0x40],rcx
  01409: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01412: ff 	lea    rcx,[r14-0x88]
  01419: 00 	mov    r8,0x3
  01420:    	mov    rsi,QWORD PTR [rbx]
  01423:    	mov    QWORD PTR [rsp-0x18],rsi
  01428:    	lea    rsi,[rsp-0x18]
  0142d:    	mov    QWORD PTR [rbx],rsi
  01430:    	lea    r14,[rsp-0x10]
  01435:    	mov    QWORD PTR [rsp-0x20],r14
  0143a:    	call   0x37bc7
  0143f:    	lea    r14,[rbp-0x8]
  01443:    	mov    QWORD PTR [rbx],r14
  01446:    	mov    r14,QWORD PTR [rbp-0x10]
  0144a:    	movq   xmm2,QWORD PTR [rsp]
  0144f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01455:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0145b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01461:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01467:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0146d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01474: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0147b:    	add    rsp,0x40
  0147f: 4d 	movabs r13,0x564da0e8c280
  01489:    	test   rax,rax
  0148c:    	je     0xffff2ec9
  01492:    	mov    QWORD PTR [r14-0x78],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  01496:    	mov    rdi,QWORD PTR [r14-0x40]
  0149a: 00 	test   rdi,0x7
  014a1:    	jne    0x37bf9
  014a7:    	cmp    DWORD PTR [rdi+0x4],0x30
  014ab:    	jne    0x37bf9
  014b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff4d97],0x26        # 0xffff624f
  014b8:    	jne    0x37bf9
  014be:    	mov    esi,DWORD PTR [rip+0x5ae]        # 0x1a72
  014c4:    	cmp    esi,0xffffffff
  014c7:    	je     0x37c32
  014cd:    	cmp    WORD PTR [rdi+0x2],0x3
  014d2:    	jne    0x14ef
  014d8:    	cmp    esi,0x6
  014db:    	jge    0x14ef
  014e1:    	mov    rax,QWORD PTR [r14-0x78]
  014e5:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014ea:    	jmp    0x157c
  014ef:    	sub    rsp,0x40
  014f3:    	movq   QWORD PTR [rsp],xmm2
  014f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  014fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01504:    	movq   QWORD PTR [rsp+0x18],xmm5
  0150a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01510:    	movq   QWORD PTR [rsp+0x28],xmm7
  01516: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0151d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01524:    	mov    rdx,QWORD PTR [r14-0x78]
  01528: 4d 	movabs rax,0x564da0797ff0
  01532:    	call   rax
  01534:    	movq   xmm2,QWORD PTR [rsp]
  01539:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0153f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01545:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0154b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01551:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01557: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0155e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01565:    	add    rsp,0x40
  01569: 4d 	movabs r13,0x564da0e8c2b0
  01573:    	test   rax,rax
  01576:    	je     0xffff2ec9
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  0157c:    	mov    rdi,QWORD PTR [r14-0x40]
  01580: 00 	test   rdi,0x7
  01587:    	jne    0x37ccc
  0158d:    	cmp    DWORD PTR [rdi+0x4],0x30
  01591:    	jne    0x37ccc
  01597: 26 	cmp    DWORD PTR [rip+0xffffffffffff4cb1],0x26        # 0xffff624f
  0159e:    	jne    0x37ccc
  015a4:    	mov    esi,DWORD PTR [rip+0x4d0]        # 0x1a7a
  015aa:    	cmp    esi,0xffffffff
  015ad:    	je     0x37d05
  015b3:    	cmp    WORD PTR [rdi+0x2],0x3
  015b8:    	jne    0x15d1
  015be:    	cmp    esi,0x6
  015c1:    	jge    0x15d1
  015c7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  015cc:    	jmp    0x1647
  015d1:    	sub    rsp,0x40
  015d5:    	movq   QWORD PTR [rsp],xmm2
  015da:    	movq   QWORD PTR [rsp+0x8],xmm3
  015e0:    	movq   QWORD PTR [rsp+0x10],xmm4
  015e6:    	movq   QWORD PTR [rsp+0x18],xmm5
  015ec:    	movq   QWORD PTR [rsp+0x20],xmm6
  015f2:    	movq   QWORD PTR [rsp+0x28],xmm7
  015f8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015ff: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01606: 4d 	movabs rax,0x564da0797d70
  01610:    	call   rax
  01612:    	movq   xmm2,QWORD PTR [rsp]
  01617:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0161d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01623:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01629:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0162f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01635: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0163c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01643:    	add    rsp,0x40
  01647:    	mov    QWORD PTR [r14-0x78],rax
:00100 
:00102 %10 = @center: Sphere[IvarId(0)]
  0164b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0164f:    	mov    rax,QWORD PTR [rdi+0x10]
  01653:    	mov    QWORD PTR [r14-0x80],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  01657:    	mov    rdi,QWORD PTR [r14-0x78]
  0165b: 00 	test   rdi,0x7
  01662:    	jne    0x37d98
  01668:    	cmp    DWORD PTR [rdi+0x4],0x28
  0166c:    	jne    0x37d98
  01672: 26 	cmp    DWORD PTR [rip+0xffffffffffff4bd6],0x26        # 0xffff624f
  01679:    	jne    0x37d98
  0167f:    	sub    rsp,0x40
  01683:    	movq   QWORD PTR [rsp],xmm2
  01688:    	movq   QWORD PTR [rsp+0x8],xmm3
  0168e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01694:    	movq   QWORD PTR [rsp+0x18],xmm5
  0169a:    	movq   QWORD PTR [rsp+0x20],xmm6
  016a0:    	movq   QWORD PTR [rsp+0x28],xmm7
  016a6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016ad: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016b4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  016bd:    	mov    rax,QWORD PTR [r14-0x78]
  016c1:    	mov    QWORD PTR [rsp-0x40],rax
  016c6: 00 	mov    rdi,0x1
  016cd:    	mov    rax,QWORD PTR [r14-0x80]
  016d1:    	mov    QWORD PTR [rsp-0x48],rax
  016d6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  016df: 08 	movabs rax,0x1000800000040
  016e9:    	mov    QWORD PTR [rsp-0x30],rax
  016ee: 4d 	movabs r13,0x564da0ed55e0
  016f8:    	mov    rsi,QWORD PTR [rbx]
  016fb:    	mov    QWORD PTR [rsp-0x18],rsi
  01700:    	lea    rsi,[rsp-0x18]
  01705:    	mov    QWORD PTR [rbx],rsi
  01708:    	lea    r14,[rsp-0x10]
  0170d:    	mov    QWORD PTR [rsp-0x20],r14
  01712:    	call   0xffff6e88
  01717:    	lea    r14,[rbp-0x8]
  0171b:    	mov    QWORD PTR [rbx],r14
  0171e:    	mov    r14,QWORD PTR [rbp-0x10]
  01722:    	movq   xmm2,QWORD PTR [rsp]
  01727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0172d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01739:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0173f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01745: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0174c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01753:    	add    rsp,0x40
  01757: 4d 	movabs r13,0x564da0e8c320
  01761:    	test   rax,rax
  01764:    	je     0xffff2ec9
  0176a:    	mov    QWORD PTR [r14-0x70],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  0176e:    	mov    rdi,QWORD PTR [r14-0x70]
  01772: 00 	test   rdi,0x7
  01779:    	jne    0x37dd1
  0177f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01783:    	jne    0x37dd1
  01789: 26 	cmp    DWORD PTR [rip+0xffffffffffff4abf],0x26        # 0xffff624f
  01790:    	jne    0x37dd1
  01796:    	sub    rsp,0x40
  0179a:    	movq   QWORD PTR [rsp],xmm2
  0179f:    	movq   QWORD PTR [rsp+0x8],xmm3
  017a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  017ab:    	movq   QWORD PTR [rsp+0x18],xmm5
  017b1:    	movq   QWORD PTR [rsp+0x20],xmm6
  017b7:    	movq   QWORD PTR [rsp+0x28],xmm7
  017bd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  017c4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017cb: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017d4:    	mov    rax,QWORD PTR [r14-0x70]
  017d8:    	mov    QWORD PTR [rsp-0x40],rax
  017dd: 00 	mov    rdi,0x0
  017e4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017ed: 07 	movabs rax,0x1000700000044
  017f7:    	mov    QWORD PTR [rsp-0x30],rax
  017fc: 4d 	movabs r13,0x564da0e6bec0
  01806:    	mov    rsi,QWORD PTR [rbx]
  01809:    	mov    QWORD PTR [rsp-0x18],rsi
  0180e:    	lea    rsi,[rsp-0x18]
  01813:    	mov    QWORD PTR [rbx],rsi
  01816:    	lea    r14,[rsp-0x10]
  0181b:    	mov    QWORD PTR [rsp-0x20],r14
  01820:    	call   0xffff6b02
  01825:    	lea    r14,[rbp-0x8]
  01829:    	mov    QWORD PTR [rbx],r14
  0182c:    	mov    r14,QWORD PTR [rbp-0x10]
  01830:    	movq   xmm2,QWORD PTR [rsp]
  01835:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0183b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01841:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01847:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0184d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01853: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0185a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01861:    	add    rsp,0x40
  01865: 4d 	movabs r13,0x564da0e8c350
  0186f:    	test   rax,rax
  01872:    	je     0xffff2ec9
  01878:    	mov    QWORD PTR [r14-0x78],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  0187c:    	mov    rdi,QWORD PTR [r14-0x40]
  01880: 00 	test   rdi,0x7
  01887:    	jne    0x37e0a
  0188d:    	cmp    DWORD PTR [rdi+0x4],0x30
  01891:    	jne    0x37e0a
  01897: 26 	cmp    DWORD PTR [rip+0xffffffffffff49b1],0x26        # 0xffff624f
  0189e:    	jne    0x37e0a
  018a4:    	mov    esi,DWORD PTR [rip+0x1d8]        # 0x1a82
  018aa:    	cmp    esi,0xffffffff
  018ad:    	je     0x37e43
  018b3:    	cmp    WORD PTR [rdi+0x2],0x3
  018b8:    	jne    0x18d5
  018be:    	cmp    esi,0x6
  018c1:    	jge    0x18d5
  018c7:    	mov    rax,QWORD PTR [r14-0x78]
  018cb:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  018d0:    	jmp    0x1962
  018d5:    	sub    rsp,0x40
  018d9:    	movq   QWORD PTR [rsp],xmm2
  018de:    	movq   QWORD PTR [rsp+0x8],xmm3
  018e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  018ea:    	movq   QWORD PTR [rsp+0x18],xmm5
  018f0:    	movq   QWORD PTR [rsp+0x20],xmm6
  018f6:    	movq   QWORD PTR [rsp+0x28],xmm7
  018fc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01903: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0190a:    	mov    rdx,QWORD PTR [r14-0x78]
  0190e: 4d 	movabs rax,0x564da0797ff0
  01918:    	call   rax
  0191a:    	movq   xmm2,QWORD PTR [rsp]
  0191f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01925:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0192b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01931:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01937:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0193d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01944: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0194b:    	add    rsp,0x40
  0194f: 4d 	movabs r13,0x564da0e8c380
  01959:    	test   rax,rax
  0195c:    	je     0xffff2ec9
:00110 
:00112 br =>:00113
  01962:    	jmp    0x37f97
:00113 br =>:00114
  01967:    	jmp    0x38029
:00114 %9 = nil
  0196c: 00 	mov    QWORD PTR [r14-0x78],0x4
:00115 ret %9
  01974:    	mov    rax,QWORD PTR [r14-0x78]
  01978:    	leave  
  01979:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x564da0e84560
<== finished compile. elapsed:160.2µs
offset:Pos(60400) code: 9622 bytes  data: 418 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [rbp-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x365e5
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x32
  000a7:    	jne    0x365e5
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xffffffffffff4711],0x26        # 0xffff47c9
  000b8:    	jne    0x365f4
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0xa0]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x36603
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: 4d 	movabs r13,0x564da0e84590
  00118:    	test   rax,rax
  0011b:    	je     0xffff1443
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00004 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00005 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x2465]        # 0x25a0
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00006 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x245f]        # 0x25b0
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xffffffffffff4658],0x26        # 0xffff47c9
  00171:    	jne    0x36635
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa8]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x36654
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: 4d 	movabs r13,0x564da0e84600
  001e3:    	test   rax,rax
  001e6:    	je     0xffff1443
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x36686
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xffff149c
  0024f:    	test   rax,rax
  00252:    	je     0x36686
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4565]        # 0xffff47d0
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x235e]        # 0x25d0
  00272:    	jne    0x366a5
  00278: 00 	mov    rax,QWORD PTR [rip+0x2341]        # 0x25c0
  0027f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x36709
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0029e:    	jne    0x36709
  002a4: 26 	cmp    DWORD PTR [rip+0xffffffffffff451e],0x26        # 0xffff47c9
  002ab:    	jne    0x36709
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: 4d 	movabs rax,0x564da07f6f70
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff44e6]        # 0xffff47d0
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x22ff]        # 0x25f0
  002f1:    	jne    0x3672c
  002f7: 00 	mov    rax,QWORD PTR [rip+0x22e2]        # 0x25e0
  002fe: ff 	mov    QWORD PTR [r14-0xa8],rax
:00018 %16 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x22f3]        # 0x2600
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xb0],rax
:00019 %16 = %16 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x36790
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xffff149c
  00377:    	test   rax,rax
  0037a:    	je     0x36790
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x367bc
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x21
  003a0:    	jne    0x367bc
  003a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff441c],0x26        # 0xffff47c9
  003ad:    	jne    0x367bc
  003b3:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff440a]        # 0xffff47d0
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x2253]        # 0x2620
  003cd:    	jne    0x367f8
  003d3: 00 	mov    rax,QWORD PTR [rip+0x2236]        # 0x2610
  003da: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x36880
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x21
  003f9:    	jne    0x36880
  003ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff43c3],0x26        # 0xffff47c9
  00406:    	jne    0x36880
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: 4d 	movabs rax,0x564da07f6f80
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4367]        # 0xffff47d0
  00469: 00 	cmp    rax,QWORD PTR [rip+0x21d0]        # 0x2640
  00470:    	jne    0x368c0
  00476: 00 	mov    rax,QWORD PTR [rip+0x21b3]        # 0x2630
  0047d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00030 %16 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x21c4]        # 0x2650
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xb0],rax
:00031 %16 = %16 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x36948
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004b9:    	jne    0x36948
  004bf: 26 	cmp    DWORD PTR [rip+0xffffffffffff4303],0x26        # 0xffff47c9
  004c6:    	jne    0x36948
  004cc:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff42ef]        # 0xffff47d0
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x2188]        # 0x2670
  004e8:    	jne    0x36991
  004ee: 00 	mov    rax,QWORD PTR [rip+0x216b]        # 0x2660
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x36a27
  00510:    	cmp    DWORD PTR [rdi+0x4],0x21
  00514:    	jne    0x36a27
  0051a: 26 	cmp    DWORD PTR [rip+0xffffffffffff42a8],0x26        # 0xffff47c9
  00521:    	jne    0x36a27
  00527:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [rbp-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 %15 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  00548: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0054f: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00556: 00 	test   rdi,0x7
  0055d:    	jne    0x36a7e
  00563:    	cmp    DWORD PTR [rdi+0x4],0xb
  00567:    	jne    0x36a7e
  0056d: 00 	test   rsi,0x1
  00574:    	je     0x36a7e
  0057a:    	sar    rsi,1
  0057d:    	sub    rsp,0x30
  00581:    	movq   QWORD PTR [rsp],xmm2
  00586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0058c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00592:    	movq   QWORD PTR [rsp+0x18],xmm5
  00598:    	movq   QWORD PTR [rsp+0x20],xmm7
  0059e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005a5: 4d 	movabs rax,0x564da0819c40
  005af:    	call   rax
  005b1:    	movq   xmm2,QWORD PTR [rsp]
  005b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ce: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d5:    	add    rsp,0x30
  005d9: 4d 	movabs r13,0x564da0e84820
  005e3:    	test   rax,rax
  005e6:    	je     0xffff1443
  005ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 %13 = %14.call x()                   [Vec]
  005f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005fa: 00 	test   rdi,0x7
  00601:    	jne    0x36ad2
  00607:    	cmp    DWORD PTR [rdi+0x4],0x28
  0060b:    	jne    0x36ad2
  00611: 26 	cmp    DWORD PTR [rip+0xffffffffffff41b1],0x26        # 0xffff47c9
  00618:    	jne    0x36ad2
  0061e:    	mov    esi,DWORD PTR [rip+0x2058]        # 0x267c
  00624:    	cmp    esi,0xffffffff
  00627:    	je     0x36b26
  0062d:    	cmp    WORD PTR [rdi+0x2],0x3
  00632:    	jne    0x64b
  00638:    	cmp    esi,0x6
  0063b:    	jge    0x64b
  00641:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00646:    	jmp    0x6a7
  0064b:    	sub    rsp,0x30
  0064f:    	movq   QWORD PTR [rsp],xmm2
  00654:    	movq   QWORD PTR [rsp+0x8],xmm3
  0065a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00660:    	movq   QWORD PTR [rsp+0x18],xmm5
  00666:    	movq   QWORD PTR [rsp+0x20],xmm7
  0066c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00673: 4d 	movabs rax,0x564da0797d70
  0067d:    	call   rax
  0067f:    	movq   xmm2,QWORD PTR [rsp]
  00684:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00690:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00696:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0069c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  006a3:    	add    rsp,0x30
  006a7: ff 	mov    QWORD PTR [r14-0x98],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  006ae: ff 	mov    rdi,QWORD PTR [r14-0x98]
  006b5: 00 	test   rdi,0x1
  006bc:    	jne    0x36b9f
  006c2: 00 	test   rdi,0x2
  006c9:    	je     0x705
  006cf:    	xorps  xmm6,xmm6
  006d2: 00 	movabs rax,0x8000000000000002
  006dc:    	cmp    rdi,rax
  006df:    	je     0x717
  006e5:    	mov    rax,rdi
  006e8:    	sar    rax,0x3f
  006ec:    	add    rax,0x2
  006f0:    	and    rdi,0xfffffffffffffffc
  006f4:    	or     rdi,rax
  006f7:    	rol    rdi,0x3d
  006fb:    	movq   xmm6,rdi
  00700:    	jmp    0x717
  00705:    	call   0xffff149c
  0070a:    	test   rax,rax
  0070d:    	je     0x36b9f
  00713:    	movq   xmm6,xmm0
  00717:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  0071b:    	mov    rax,QWORD PTR [rbp-0x18]
  0071f:    	mov    rax,QWORD PTR [rax]
  00722:    	mov    rax,QWORD PTR [rax-0x28]
  00726: ff 	mov    QWORD PTR [r14-0xa8],rax
:00049 %16 = 1: i32
  0072d: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00738: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0073f: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00746: 00 	test   rdi,0x7
  0074d:    	jne    0x36bf3
  00753:    	cmp    DWORD PTR [rdi+0x4],0xb
  00757:    	jne    0x36bf3
  0075d: 00 	test   rsi,0x1
  00764:    	je     0x36bf3
  0076a:    	sar    rsi,1
  0076d:    	sub    rsp,0x30
  00771:    	movq   QWORD PTR [rsp],xmm2
  00776:    	movq   QWORD PTR [rsp+0x8],xmm4
  0077c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00782:    	movq   QWORD PTR [rsp+0x18],xmm6
  00788:    	movq   QWORD PTR [rsp+0x20],xmm7
  0078e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00795: 4d 	movabs rax,0x564da0819c40
  0079f:    	call   rax
  007a1:    	movq   xmm2,QWORD PTR [rsp]
  007a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007ac:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007b2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007b8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007be: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007c5:    	add    rsp,0x30
  007c9: 4d 	movabs r13,0x564da0e84890
  007d3:    	test   rax,rax
  007d6:    	je     0xffff1443
  007dc: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 %14 = %15.call x()                   [Vec]
  007e3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  007ea: 00 	test   rdi,0x7
  007f1:    	jne    0x36c47
  007f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  007fb:    	jne    0x36c47
  00801: 26 	cmp    DWORD PTR [rip+0xffffffffffff3fc1],0x26        # 0xffff47c9
  00808:    	jne    0x36c47
  0080e:    	mov    esi,DWORD PTR [rip+0x1e70]        # 0x2684
  00814:    	cmp    esi,0xffffffff
  00817:    	je     0x36c9b
  0081d:    	cmp    WORD PTR [rdi+0x2],0x3
  00822:    	jne    0x83b
  00828:    	cmp    esi,0x6
  0082b:    	jge    0x83b
  00831:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00836:    	jmp    0x897
  0083b:    	sub    rsp,0x30
  0083f:    	movq   QWORD PTR [rsp],xmm2
  00844:    	movq   QWORD PTR [rsp+0x8],xmm4
  0084a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00850:    	movq   QWORD PTR [rsp+0x18],xmm6
  00856:    	movq   QWORD PTR [rsp+0x20],xmm7
  0085c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00863: 4d 	movabs rax,0x564da0797d70
  0086d:    	call   rax
  0086f:    	movq   xmm2,QWORD PTR [rsp]
  00874:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0087a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00880:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00886:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0088c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00893:    	add    rsp,0x30
  00897: ff 	mov    QWORD PTR [r14-0xa0],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  0089e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008a5: 00 	test   rdi,0x1
  008ac:    	jne    0x36d14
  008b2: 00 	test   rdi,0x2
  008b9:    	je     0x8f5
  008bf:    	xorps  xmm3,xmm3
  008c2: 00 	movabs rax,0x8000000000000002
  008cc:    	cmp    rdi,rax
  008cf:    	je     0x907
  008d5:    	mov    rax,rdi
  008d8:    	sar    rax,0x3f
  008dc:    	add    rax,0x2
  008e0:    	and    rdi,0xfffffffffffffffc
  008e4:    	or     rdi,rax
  008e7:    	rol    rdi,0x3d
  008eb:    	movq   xmm3,rdi
  008f0:    	jmp    0x907
  008f5:    	call   0xffff149c
  008fa:    	test   rax,rax
  008fd:    	je     0x36d14
  00903:    	movq   xmm3,xmm0
  00907:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  0090c:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  00910:    	mov    rax,QWORD PTR [rbp-0x18]
  00914:    	mov    rax,QWORD PTR [rax]
  00917:    	mov    rax,QWORD PTR [rax-0x28]
  0091b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00057 %16 = 2: i32
  00922: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  0092d: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00934: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0093b: 00 	test   rdi,0x7
  00942:    	jne    0x36d68
  00948:    	cmp    DWORD PTR [rdi+0x4],0xb
  0094c:    	jne    0x36d68
  00952: 00 	test   rsi,0x1
  00959:    	je     0x36d68
  0095f:    	sar    rsi,1
  00962:    	sub    rsp,0x40
  00966:    	movq   QWORD PTR [rsp],xmm2
  0096b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00971:    	movq   QWORD PTR [rsp+0x10],xmm4
  00977:    	movq   QWORD PTR [rsp+0x18],xmm5
  0097d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00983:    	movq   QWORD PTR [rsp+0x28],xmm7
  00989: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00990: 4d 	movabs rax,0x564da0819c40
  0099a:    	call   rax
  0099c:    	movq   xmm2,QWORD PTR [rsp]
  009a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009b3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009bf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c6:    	add    rsp,0x40
  009ca: 4d 	movabs r13,0x564da0e84910
  009d4:    	test   rax,rax
  009d7:    	je     0xffff1443
  009dd: ff 	mov    QWORD PTR [r14-0xa8],rax
:00059 %14 = %15.call x()                   [Vec]
  009e4: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  009eb: 00 	test   rdi,0x7
  009f2:    	jne    0x36dcc
  009f8:    	cmp    DWORD PTR [rdi+0x4],0x28
  009fc:    	jne    0x36dcc
  00a02: 26 	cmp    DWORD PTR [rip+0xffffffffffff3dc0],0x26        # 0xffff47c9
  00a09:    	jne    0x36dcc
  00a0f:    	mov    esi,DWORD PTR [rip+0x1c77]        # 0x268c
  00a15:    	cmp    esi,0xffffffff
  00a18:    	je     0x36e20
  00a1e:    	cmp    WORD PTR [rdi+0x2],0x3
  00a23:    	jne    0xa3c
  00a29:    	cmp    esi,0x6
  00a2c:    	jge    0xa3c
  00a32:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a37:    	jmp    0xa98
  00a3c:    	sub    rsp,0x30
  00a40:    	movq   QWORD PTR [rsp],xmm2
  00a45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a57:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a5d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a64: 4d 	movabs rax,0x564da0797d70
  00a6e:    	call   rax
  00a70:    	movq   xmm2,QWORD PTR [rsp]
  00a75:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a7b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a81:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a87:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a8d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a94:    	add    rsp,0x30
  00a98: ff 	mov    QWORD PTR [r14-0xa0],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a9f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00aa6: 00 	test   rdi,0x1
  00aad:    	jne    0x36e99
  00ab3: 00 	test   rdi,0x2
  00aba:    	je     0xaf6
  00ac0:    	xorps  xmm3,xmm3
  00ac3: 00 	movabs rax,0x8000000000000002
  00acd:    	cmp    rdi,rax
  00ad0:    	je     0xb08
  00ad6:    	mov    rax,rdi
  00ad9:    	sar    rax,0x3f
  00add:    	add    rax,0x2
  00ae1:    	and    rdi,0xfffffffffffffffc
  00ae5:    	or     rdi,rax
  00ae8:    	rol    rdi,0x3d
  00aec:    	movq   xmm3,rdi
  00af1:    	jmp    0xb08
  00af6:    	call   0xffff149c
  00afb:    	test   rax,rax
  00afe:    	je     0x36e99
  00b04:    	movq   xmm3,xmm0
  00b08:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00b0c:    	movq   xmm9,xmm6
  00b11:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00b16:    	mov    rax,QWORD PTR [rbp-0x18]
  00b1a:    	mov    rax,QWORD PTR [rax]
  00b1d:    	mov    rax,QWORD PTR [rax-0x28]
  00b21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00065 %15 = 0: i32
  00b28: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00b33: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b3a: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b41: 00 	test   rdi,0x7
  00b48:    	jne    0x36eed
  00b4e:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b52:    	jne    0x36eed
  00b58: 00 	test   rsi,0x1
  00b5f:    	je     0x36eed
  00b65:    	sar    rsi,1
  00b68:    	sub    rsp,0x40
  00b6c:    	movq   QWORD PTR [rsp],xmm2
  00b71:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b77:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b7d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b83:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b89: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b90: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b97: 4d 	movabs rax,0x564da0819c40
  00ba1:    	call   rax
  00ba3:    	movq   xmm2,QWORD PTR [rsp]
  00ba8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bae:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bb4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bba:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00bc0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00bc7: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00bce:    	add    rsp,0x40
  00bd2: 4d 	movabs r13,0x564da0e84990
  00bdc:    	test   rax,rax
  00bdf:    	je     0xffff1443
  00be5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00067 %13 = %14.call y()                   [Vec]
  00bec: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bf3: 00 	test   rdi,0x7
  00bfa:    	jne    0x36f4f
  00c00:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c04:    	jne    0x36f4f
  00c0a: 26 	cmp    DWORD PTR [rip+0xffffffffffff3bb8],0x26        # 0xffff47c9
  00c11:    	jne    0x36f4f
  00c17:    	mov    esi,DWORD PTR [rip+0x1a77]        # 0x2694
  00c1d:    	cmp    esi,0xffffffff
  00c20:    	je     0x36fa1
  00c26:    	cmp    WORD PTR [rdi+0x2],0x3
  00c2b:    	jne    0xc44
  00c31:    	cmp    esi,0x6
  00c34:    	jge    0xc44
  00c3a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c3f:    	jmp    0xca2
  00c44:    	sub    rsp,0x30
  00c48:    	movq   QWORD PTR [rsp],xmm2
  00c4d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c53:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c59:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c5f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c66: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c6d: 4d 	movabs rax,0x564da0797d70
  00c77:    	call   rax
  00c79:    	movq   xmm2,QWORD PTR [rsp]
  00c7e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c84:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c8a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c90: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c97: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c9e:    	add    rsp,0x30
  00ca2: ff 	mov    QWORD PTR [r14-0x98],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00ca9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00cb0: 00 	test   rdi,0x1
  00cb7:    	jne    0x3701c
  00cbd: 00 	test   rdi,0x2
  00cc4:    	je     0xd00
  00cca:    	xorps  xmm3,xmm3
  00ccd: 00 	movabs rax,0x8000000000000002
  00cd7:    	cmp    rdi,rax
  00cda:    	je     0xd12
  00ce0:    	mov    rax,rdi
  00ce3:    	sar    rax,0x3f
  00ce7:    	add    rax,0x2
  00ceb:    	and    rdi,0xfffffffffffffffc
  00cef:    	or     rdi,rax
  00cf2:    	rol    rdi,0x3d
  00cf6:    	movq   xmm3,rdi
  00cfb:    	jmp    0xd12
  00d00:    	call   0xffff149c
  00d05:    	test   rax,rax
  00d08:    	je     0x3701c
  00d0e:    	movq   xmm3,xmm0
  00d12:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00d16:    	mov    rax,QWORD PTR [rbp-0x18]
  00d1a:    	mov    rax,QWORD PTR [rax]
  00d1d:    	mov    rax,QWORD PTR [rax-0x28]
  00d21: ff 	mov    QWORD PTR [r14-0xa8],rax
:00072 %16 = 1: i32
  00d28: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00d33: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00d3a: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00d41: 00 	test   rdi,0x7
  00d48:    	jne    0x3706e
  00d4e:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d52:    	jne    0x3706e
  00d58: 00 	test   rsi,0x1
  00d5f:    	je     0x3706e
  00d65:    	sar    rsi,1
  00d68:    	sub    rsp,0x40
  00d6c:    	movq   QWORD PTR [rsp],xmm2
  00d71:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d77:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d7d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d83:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d89: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d90: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d97: 4d 	movabs rax,0x564da0819c40
  00da1:    	call   rax
  00da3:    	movq   xmm2,QWORD PTR [rsp]
  00da8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dba:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00dc0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00dc7: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00dce:    	add    rsp,0x40
  00dd2: 4d 	movabs r13,0x564da0e84a00
  00ddc:    	test   rax,rax
  00ddf:    	je     0xffff1443
  00de5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00074 %14 = %15.call y()                   [Vec]
  00dec: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00df3: 00 	test   rdi,0x7
  00dfa:    	jne    0x370d0
  00e00:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e04:    	jne    0x370d0
  00e0a: 26 	cmp    DWORD PTR [rip+0xffffffffffff39b8],0x26        # 0xffff47c9
  00e11:    	jne    0x370d0
  00e17:    	mov    esi,DWORD PTR [rip+0x187f]        # 0x269c
  00e1d:    	cmp    esi,0xffffffff
  00e20:    	je     0x37132
  00e26:    	cmp    WORD PTR [rdi+0x2],0x3
  00e2b:    	jne    0xe44
  00e31:    	cmp    esi,0x6
  00e34:    	jge    0xe44
  00e3a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e3f:    	jmp    0xeae
  00e44:    	sub    rsp,0x40
  00e48:    	movq   QWORD PTR [rsp],xmm2
  00e4d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e53:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e59:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e5f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e65: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e6c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e73: 4d 	movabs rax,0x564da0797d70
  00e7d:    	call   rax
  00e7f:    	movq   xmm2,QWORD PTR [rsp]
  00e84:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e8a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e90:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e96:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e9c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ea3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00eaa:    	add    rsp,0x40
  00eae: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00eb5: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ebc: 00 	test   rdi,0x1
  00ec3:    	jne    0x371b9
  00ec9: 00 	test   rdi,0x2
  00ed0:    	je     0xf0c
  00ed6:    	xorps  xmm6,xmm6
  00ed9: 00 	movabs rax,0x8000000000000002
  00ee3:    	cmp    rdi,rax
  00ee6:    	je     0xf1e
  00eec:    	mov    rax,rdi
  00eef:    	sar    rax,0x3f
  00ef3:    	add    rax,0x2
  00ef7:    	and    rdi,0xfffffffffffffffc
  00efb:    	or     rdi,rax
  00efe:    	rol    rdi,0x3d
  00f02:    	movq   xmm6,rdi
  00f07:    	jmp    0xf1e
  00f0c:    	call   0xffff149c
  00f11:    	test   rax,rax
  00f14:    	je     0x371b9
  00f1a:    	movq   xmm6,xmm0
  00f1e:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00f23:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00f27:    	mov    rax,QWORD PTR [rbp-0x18]
  00f2b:    	mov    rax,QWORD PTR [rax]
  00f2e:    	mov    rax,QWORD PTR [rax-0x28]
  00f32: ff 	mov    QWORD PTR [r14-0xa8],rax
:00080 %16 = 2: i32
  00f39: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00f44: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00f4b: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00f52: 00 	test   rdi,0x7
  00f59:    	jne    0x3721b
  00f5f:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f63:    	jne    0x3721b
  00f69: 00 	test   rsi,0x1
  00f70:    	je     0x3721b
  00f76:    	sar    rsi,1
  00f79:    	sub    rsp,0x40
  00f7d:    	movq   QWORD PTR [rsp],xmm2
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f8e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f94:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f9a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00fa0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00fa7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00fae: 4d 	movabs rax,0x564da0819c40
  00fb8:    	call   rax
  00fba:    	movq   xmm2,QWORD PTR [rsp]
  00fbf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fc5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fcb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fd1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fd7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fdd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fe4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00feb:    	add    rsp,0x40
  00fef: 4d 	movabs r13,0x564da0e84a80
  00ff9:    	test   rax,rax
  00ffc:    	je     0xffff1443
  01002: ff 	mov    QWORD PTR [r14-0xa8],rax
:00082 %14 = %15.call y()                   [Vec]
  01009: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01010: 00 	test   rdi,0x7
  01017:    	jne    0x3728d
  0101d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01021:    	jne    0x3728d
  01027: 26 	cmp    DWORD PTR [rip+0xffffffffffff379b],0x26        # 0xffff47c9
  0102e:    	jne    0x3728d
  01034:    	mov    esi,DWORD PTR [rip+0x166a]        # 0x26a4
  0103a:    	cmp    esi,0xffffffff
  0103d:    	je     0x372ef
  01043:    	cmp    WORD PTR [rdi+0x2],0x3
  01048:    	jne    0x1061
  0104e:    	cmp    esi,0x6
  01051:    	jge    0x1061
  01057:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0105c:    	jmp    0x10cb
  01061:    	sub    rsp,0x40
  01065:    	movq   QWORD PTR [rsp],xmm2
  0106a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01070:    	movq   QWORD PTR [rsp+0x10],xmm4
  01076:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107c:    	movq   QWORD PTR [rsp+0x20],xmm7
  01082: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01089: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01090: 4d 	movabs rax,0x564da0797d70
  0109a:    	call   rax
  0109c:    	movq   xmm2,QWORD PTR [rsp]
  010a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010b9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010c0: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  010c7:    	add    rsp,0x40
  010cb: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  010d2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  010d9: 00 	test   rdi,0x1
  010e0:    	jne    0x37376
  010e6: 00 	test   rdi,0x2
  010ed:    	je     0x1129
  010f3:    	xorps  xmm6,xmm6
  010f6: 00 	movabs rax,0x8000000000000002
  01100:    	cmp    rdi,rax
  01103:    	je     0x113b
  01109:    	mov    rax,rdi
  0110c:    	sar    rax,0x3f
  01110:    	add    rax,0x2
  01114:    	and    rdi,0xfffffffffffffffc
  01118:    	or     rdi,rax
  0111b:    	rol    rdi,0x3d
  0111f:    	movq   xmm6,rdi
  01124:    	jmp    0x113b
  01129:    	call   0xffff149c
  0112e:    	test   rax,rax
  01131:    	je     0x37376
  01137:    	movq   xmm6,xmm0
  0113b:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  0113f:    	movq   xmm10,xmm3
  01144:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  01149:    	mov    rax,QWORD PTR [rbp-0x18]
  0114d:    	mov    rax,QWORD PTR [rax]
  01150:    	mov    rax,QWORD PTR [rax-0x28]
  01154: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 0: i32
  0115b: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  01166: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0116d: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  01174: 00 	test   rdi,0x7
  0117b:    	jne    0x373d8
  01181:    	cmp    DWORD PTR [rdi+0x4],0xb
  01185:    	jne    0x373d8
  0118b: 00 	test   rsi,0x1
  01192:    	je     0x373d8
  01198:    	sar    rsi,1
  0119b:    	sub    rsp,0x40
  0119f:    	movq   QWORD PTR [rsp],xmm2
  011a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  011aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  011b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b6:    	movq   QWORD PTR [rsp+0x20],xmm7
  011bc: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011c3: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  011ca: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  011d1: 4d 	movabs rax,0x564da0819c40
  011db:    	call   rax
  011dd:    	movq   xmm2,QWORD PTR [rsp]
  011e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011e8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011ee:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011f4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011fa: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01201: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01208: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0120f:    	add    rsp,0x40
  01213: 4d 	movabs r13,0x564da0e84b00
  0121d:    	test   rax,rax
  01220:    	je     0xffff1443
  01226: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %13 = %14.call z()                   [Vec]
  0122d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01234: 00 	test   rdi,0x7
  0123b:    	jne    0x37448
  01241:    	cmp    DWORD PTR [rdi+0x4],0x28
  01245:    	jne    0x37448
  0124b: 26 	cmp    DWORD PTR [rip+0xffffffffffff3577],0x26        # 0xffff47c9
  01252:    	jne    0x37448
  01258:    	mov    esi,DWORD PTR [rip+0x144e]        # 0x26ac
  0125e:    	cmp    esi,0xffffffff
  01261:    	je     0x374a8
  01267:    	cmp    WORD PTR [rdi+0x2],0x3
  0126c:    	jne    0x1285
  01272:    	cmp    esi,0x6
  01275:    	jge    0x1285
  0127b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01280:    	jmp    0x12f1
  01285:    	sub    rsp,0x40
  01289:    	movq   QWORD PTR [rsp],xmm2
  0128e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01294:    	movq   QWORD PTR [rsp+0x10],xmm5
  0129a:    	movq   QWORD PTR [rsp+0x18],xmm7
  012a0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  012a7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  012ae: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  012b5: 4d 	movabs rax,0x564da0797d70
  012bf:    	call   rax
  012c1:    	movq   xmm2,QWORD PTR [rsp]
  012c6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012cc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012d8: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  012df: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  012e6: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  012ed:    	add    rsp,0x40
  012f1: ff 	mov    QWORD PTR [r14-0x98],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  012f8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012ff: 00 	test   rdi,0x1
  01306:    	jne    0x37531
  0130c: 00 	test   rdi,0x2
  01313:    	je     0x134f
  01319:    	xorps  xmm3,xmm3
  0131c: 00 	movabs rax,0x8000000000000002
  01326:    	cmp    rdi,rax
  01329:    	je     0x1361
  0132f:    	mov    rax,rdi
  01332:    	sar    rax,0x3f
  01336:    	add    rax,0x2
  0133a:    	and    rdi,0xfffffffffffffffc
  0133e:    	or     rdi,rax
  01341:    	rol    rdi,0x3d
  01345:    	movq   xmm3,rdi
  0134a:    	jmp    0x1361
  0134f:    	call   0xffff149c
  01354:    	test   rax,rax
  01357:    	je     0x37531
  0135d:    	movq   xmm3,xmm0
  01361:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  01365:    	mov    rax,QWORD PTR [rbp-0x18]
  01369:    	mov    rax,QWORD PTR [rax]
  0136c:    	mov    rax,QWORD PTR [rax-0x28]
  01370: ff 	mov    QWORD PTR [r14-0xa8],rax
:00095 %16 = 1: i32
  01377: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  01382: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01389: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01390: 00 	test   rdi,0x7
  01397:    	jne    0x37591
  0139d:    	cmp    DWORD PTR [rdi+0x4],0xb
  013a1:    	jne    0x37591
  013a7: 00 	test   rsi,0x1
  013ae:    	je     0x37591
  013b4:    	sar    rsi,1
  013b7:    	sub    rsp,0x40
  013bb:    	movq   QWORD PTR [rsp],xmm2
  013c0:    	movq   QWORD PTR [rsp+0x8],xmm3
  013c6:    	movq   QWORD PTR [rsp+0x10],xmm4
  013cc:    	movq   QWORD PTR [rsp+0x18],xmm5
  013d2:    	movq   QWORD PTR [rsp+0x20],xmm7
  013d8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  013df: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  013e6: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  013ed: 4d 	movabs rax,0x564da0819c40
  013f7:    	call   rax
  013f9:    	movq   xmm2,QWORD PTR [rsp]
  013fe:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01404:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0140a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01410:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01416: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0141d: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01424: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0142b:    	add    rsp,0x40
  0142f: 4d 	movabs r13,0x564da0e84b70
  01439:    	test   rax,rax
  0143c:    	je     0xffff1443
  01442: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %14 = %15.call z()                   [Vec]
  01449: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01450: 00 	test   rdi,0x7
  01457:    	jne    0x37601
  0145d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01461:    	jne    0x37601
  01467: 26 	cmp    DWORD PTR [rip+0xffffffffffff335b],0x26        # 0xffff47c9
  0146e:    	jne    0x37601
  01474:    	mov    esi,DWORD PTR [rip+0x123a]        # 0x26b4
  0147a:    	cmp    esi,0xffffffff
  0147d:    	je     0x37671
  01483:    	cmp    WORD PTR [rdi+0x2],0x3
  01488:    	jne    0x14a1
  0148e:    	cmp    esi,0x6
  01491:    	jge    0x14a1
  01497:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0149c:    	jmp    0x1519
  014a1:    	sub    rsp,0x40
  014a5:    	movq   QWORD PTR [rsp],xmm2
  014aa:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b0:    	movq   QWORD PTR [rsp+0x10],xmm4
  014b6:    	movq   QWORD PTR [rsp+0x18],xmm5
  014bc:    	movq   QWORD PTR [rsp+0x20],xmm7
  014c2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  014c9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  014d0: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  014d7: 4d 	movabs rax,0x564da0797d70
  014e1:    	call   rax
  014e3:    	movq   xmm2,QWORD PTR [rsp]
  014e8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014ee:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014f4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014fa:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01500: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01507: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0150e: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01515:    	add    rsp,0x40
  01519: ff 	mov    QWORD PTR [r14-0xa0],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  01520: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01527: 00 	test   rdi,0x1
  0152e:    	jne    0x37706
  01534: 00 	test   rdi,0x2
  0153b:    	je     0x1577
  01541:    	xorps  xmm6,xmm6
  01544: 00 	movabs rax,0x8000000000000002
  0154e:    	cmp    rdi,rax
  01551:    	je     0x1589
  01557:    	mov    rax,rdi
  0155a:    	sar    rax,0x3f
  0155e:    	add    rax,0x2
  01562:    	and    rdi,0xfffffffffffffffc
  01566:    	or     rdi,rax
  01569:    	rol    rdi,0x3d
  0156d:    	movq   xmm6,rdi
  01572:    	jmp    0x1589
  01577:    	call   0xffff149c
  0157c:    	test   rax,rax
  0157f:    	je     0x37706
  01585:    	movq   xmm6,xmm0
  01589:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  0158e:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  01592:    	mov    rax,QWORD PTR [rbp-0x18]
  01596:    	mov    rax,QWORD PTR [rax]
  01599:    	mov    rax,QWORD PTR [rax-0x28]
  0159d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %16 = 2: i32
  015a4: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  015af: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015b6: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  015bd: 00 	test   rdi,0x7
  015c4:    	jne    0x37776
  015ca:    	cmp    DWORD PTR [rdi+0x4],0xb
  015ce:    	jne    0x37776
  015d4: 00 	test   rsi,0x1
  015db:    	je     0x37776
  015e1:    	sar    rsi,1
  015e4:    	sub    rsp,0x50
  015e8:    	movq   QWORD PTR [rsp],xmm2
  015ed:    	movq   QWORD PTR [rsp+0x8],xmm3
  015f3:    	movq   QWORD PTR [rsp+0x10],xmm4
  015f9:    	movq   QWORD PTR [rsp+0x18],xmm5
  015ff:    	movq   QWORD PTR [rsp+0x20],xmm6
  01605:    	movq   QWORD PTR [rsp+0x28],xmm7
  0160b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01612: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01619: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01620: 4d 	movabs rax,0x564da0819c40
  0162a:    	call   rax
  0162c:    	movq   xmm2,QWORD PTR [rsp]
  01631:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01637:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0163d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01643:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01649:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0164f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01656: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0165d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01664:    	add    rsp,0x50
  01668: 4d 	movabs r13,0x564da0e84bf0
  01672:    	test   rax,rax
  01675:    	je     0xffff1443
  0167b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00105 %14 = %15.call z()                   [Vec]
  01682: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01689: 00 	test   rdi,0x7
  01690:    	jne    0x377f6
  01696:    	cmp    DWORD PTR [rdi+0x4],0x28
  0169a:    	jne    0x377f6
  016a0: 26 	cmp    DWORD PTR [rip+0xffffffffffff3122],0x26        # 0xffff47c9
  016a7:    	jne    0x377f6
  016ad:    	mov    esi,DWORD PTR [rip+0x1009]        # 0x26bc
  016b3:    	cmp    esi,0xffffffff
  016b6:    	je     0x37866
  016bc:    	cmp    WORD PTR [rdi+0x2],0x3
  016c1:    	jne    0x16da
  016c7:    	cmp    esi,0x6
  016ca:    	jge    0x16da
  016d0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  016d5:    	jmp    0x1752
  016da:    	sub    rsp,0x40
  016de:    	movq   QWORD PTR [rsp],xmm2
  016e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  016ef:    	movq   QWORD PTR [rsp+0x18],xmm5
  016f5:    	movq   QWORD PTR [rsp+0x20],xmm7
  016fb: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01702: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01709: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01710: 4d 	movabs rax,0x564da0797d70
  0171a:    	call   rax
  0171c:    	movq   xmm2,QWORD PTR [rsp]
  01721:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01727:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0172d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01733:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01739: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01740: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01747: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0174e:    	add    rsp,0x40
  01752: ff 	mov    QWORD PTR [r14-0xa0],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  01759: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01760: 00 	test   rdi,0x1
  01767:    	jne    0x378fb
  0176d: 00 	test   rdi,0x2
  01774:    	je     0x17b0
  0177a:    	xorps  xmm6,xmm6
  0177d: 00 	movabs rax,0x8000000000000002
  01787:    	cmp    rdi,rax
  0178a:    	je     0x17c2
  01790:    	mov    rax,rdi
  01793:    	sar    rax,0x3f
  01797:    	add    rax,0x2
  0179b:    	and    rdi,0xfffffffffffffffc
  0179f:    	or     rdi,rax
  017a2:    	rol    rdi,0x3d
  017a6:    	movq   xmm6,rdi
  017ab:    	jmp    0x17c2
  017b0:    	call   0xffff149c
  017b5:    	test   rax,rax
  017b8:    	je     0x378fb
  017be:    	movq   xmm6,xmm0
  017c2:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  017c6:    	movq   xmm11,xmm3
  017cb:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  017d0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2ff9]        # 0xffff47d0
  017d7: 00 	cmp    rax,QWORD PTR [rip+0xef2]        # 0x26d0
  017de:    	jne    0x3796b
  017e4: 00 	mov    rax,QWORD PTR [rip+0xed5]        # 0x26c0
  017eb: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  017f2:    	movq   xmm0,xmm9
  017f7:    	call   0xffff15c0
  017fc: ff 	mov    QWORD PTR [r14-0xa0],rax
  01803:    	movq   xmm0,xmm10
  01808:    	call   0xffff15c0
  0180d: ff 	mov    QWORD PTR [r14-0xa8],rax
  01814:    	movq   xmm0,xmm11
  01819:    	call   0xffff15c0
  0181e: ff 	mov    QWORD PTR [r14-0xb0],rax
  01825: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0182c: 00 	test   rdi,0x7
  01833:    	jne    0x37a2b
  01839:    	cmp    DWORD PTR [rdi+0x4],0x29
  0183d:    	jne    0x37a2b
  01843: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f7f],0x26        # 0xffff47c9
  0184a:    	jne    0x37a2b
  01850: 00 	mov    r9,0x0
  01857:    	sub    rsp,0x40
  0185b:    	movq   QWORD PTR [rsp],xmm2
  01860:    	movq   QWORD PTR [rsp+0x8],xmm4
  01866:    	movq   QWORD PTR [rsp+0x10],xmm5
  0186c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01872: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01879: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01880: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01887: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0188e:    	mov    rdx,rdi
  01891:    	mov    QWORD PTR [rsp-0x40],rcx
  01896: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0189f: ff 	lea    rcx,[r14-0xa0]
  018a6: 00 	mov    r8,0x3
  018ad:    	mov    rsi,QWORD PTR [rbx]
  018b0:    	mov    QWORD PTR [rsp-0x18],rsi
  018b5:    	lea    rsi,[rsp-0x18]
  018ba:    	mov    QWORD PTR [rbx],rsi
  018bd:    	lea    r14,[rsp-0x10]
  018c2:    	mov    QWORD PTR [rsp-0x20],r14
  018c7:    	call   0x37a99
  018cc:    	lea    r14,[rbp-0x8]
  018d0:    	mov    QWORD PTR [rbx],r14
  018d3:    	mov    r14,QWORD PTR [rbp-0x10]
  018d7:    	movq   xmm2,QWORD PTR [rsp]
  018dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  018e8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  018ee: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  018f5: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  018fc: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01903: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0190a:    	add    rsp,0x40
  0190e: 4d 	movabs r13,0x564da0e84ca0
  01918:    	test   rax,rax
  0191b:    	je     0xffff1443
  01921:    	mov    QWORD PTR [r14-0x80],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01925: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2ea4]        # 0xffff47d0
  0192c: 00 	cmp    rax,QWORD PTR [rip+0xdbd]        # 0x26f0
  01933:    	jne    0x37acb
  01939: 00 	mov    rax,QWORD PTR [rip+0xda0]        # 0x26e0
  01940: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = dynvar(2, %7)
  01947:    	mov    rax,QWORD PTR [rbp-0x18]
  0194b:    	mov    rax,QWORD PTR [rax]
  0194e:    	mov    rax,QWORD PTR [rax-0x50]
  01952: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %10
  01959:    	mov    rax,QWORD PTR [r14-0x80]
  0195d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01964: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0196b: 00 	test   rdi,0x7
  01972:    	jne    0x37b7f
  01978:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0197c:    	jne    0x37b7f
  01982: 26 	cmp    DWORD PTR [rip+0xffffffffffff2e40],0x26        # 0xffff47c9
  01989:    	jne    0x37b7f
  0198f: 00 	mov    r9,0x0
  01996:    	sub    rsp,0x40
  0199a:    	movq   QWORD PTR [rsp],xmm2
  0199f:    	movq   QWORD PTR [rsp+0x8],xmm4
  019a5:    	movq   QWORD PTR [rsp+0x10],xmm5
  019ab:    	movq   QWORD PTR [rsp+0x18],xmm7
  019b1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019b8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  019bf: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  019c6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  019cd:    	mov    rdx,rdi
  019d0:    	mov    QWORD PTR [rsp-0x40],rcx
  019d5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019de: ff 	lea    rcx,[r14-0xa0]
  019e5: 00 	mov    r8,0x2
  019ec:    	mov    rsi,QWORD PTR [rbx]
  019ef:    	mov    QWORD PTR [rsp-0x18],rsi
  019f4:    	lea    rsi,[rsp-0x18]
  019f9:    	mov    QWORD PTR [rbx],rsi
  019fc:    	lea    r14,[rsp-0x10]
  01a01:    	mov    QWORD PTR [rsp-0x20],r14
  01a06:    	call   0x37bed
  01a0b:    	lea    r14,[rbp-0x8]
  01a0f:    	mov    QWORD PTR [rbx],r14
  01a12:    	mov    r14,QWORD PTR [rbp-0x10]
  01a16:    	movq   xmm2,QWORD PTR [rsp]
  01a1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a27:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a2d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a34: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a3b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a42: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a49:    	add    rsp,0x40
  01a4d: 4d 	movabs r13,0x564da0e84d00
  01a57:    	test   rax,rax
  01a5a:    	je     0xffff1443
  01a60: ff 	mov    QWORD PTR [r14-0x88],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01a67: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2d62]        # 0xffff47d0
  01a6e: 00 	cmp    rax,QWORD PTR [rip+0xc9b]        # 0x2710
  01a75:    	jne    0x37c1f
  01a7b: 00 	mov    rax,QWORD PTR [rip+0xc7e]        # 0x2700
  01a82: ff 	mov    QWORD PTR [r14-0x98],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  01a89: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a90: 00 	test   rdi,0x7
  01a97:    	jne    0x37cd3
  01a9d:    	cmp    DWORD PTR [rdi+0x4],0x31
  01aa1:    	jne    0x37cd3
  01aa7: 26 	cmp    DWORD PTR [rip+0xffffffffffff2d1b],0x26        # 0xffff47c9
  01aae:    	jne    0x37cd3
  01ab4: 00 	mov    r9,0x0
  01abb:    	sub    rsp,0x40
  01abf:    	movq   QWORD PTR [rsp],xmm2
  01ac4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aca:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ad0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ad6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01add: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ae4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01aeb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01af2:    	mov    rdx,rdi
  01af5:    	mov    QWORD PTR [rsp-0x40],rcx
  01afa: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b03: ff 	lea    rcx,[r14-0xa0]
  01b0a: 00 	mov    r8,0x0
  01b11:    	mov    rsi,QWORD PTR [rbx]
  01b14:    	mov    QWORD PTR [rsp-0x18],rsi
  01b19:    	lea    rsi,[rsp-0x18]
  01b1e:    	mov    QWORD PTR [rbx],rsi
  01b21:    	lea    r14,[rsp-0x10]
  01b26:    	mov    QWORD PTR [rsp-0x20],r14
  01b2b:    	call   0x37d41
  01b30:    	lea    r14,[rbp-0x8]
  01b34:    	mov    QWORD PTR [rbx],r14
  01b37:    	mov    r14,QWORD PTR [rbp-0x10]
  01b3b:    	movq   xmm2,QWORD PTR [rsp]
  01b40:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b46:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b4c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b52: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b59: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b60: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b67: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6e:    	add    rsp,0x40
  01b72: 4d 	movabs r13,0x564da0e84d40
  01b7c:    	test   rax,rax
  01b7f:    	je     0xffff1443
  01b85: ff 	mov    QWORD PTR [r14-0x90],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01b8c:    	mov    rdi,QWORD PTR [rbp-0x30]
  01b90:    	mov    rax,QWORD PTR [rdi+0x10]
  01b94: ff 	mov    QWORD PTR [r14-0x98],rax
:00128 %14 = 0: i32
  01b9b: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ba6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bad: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01bb4: 00 	test   rdi,0x7
  01bbb:    	jne    0x37d73
  01bc1:    	cmp    DWORD PTR [rdi+0x4],0xb
  01bc5:    	jne    0x37d73
  01bcb: 00 	test   rsi,0x1
  01bd2:    	je     0x37d73
  01bd8:    	sar    rsi,1
  01bdb:    	sub    rsp,0x40
  01bdf:    	movq   QWORD PTR [rsp],xmm2
  01be4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bea:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bf0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bf6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bfd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01c04: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c0b: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c12: 4d 	movabs rax,0x564da0819c40
  01c1c:    	call   rax
  01c1e:    	movq   xmm2,QWORD PTR [rsp]
  01c23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c29:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c2f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c35: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c3c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c43: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c4a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c51:    	add    rsp,0x40
  01c55: 4d 	movabs r13,0x564da0e84d80
  01c5f:    	test   rax,rax
  01c62:    	je     0xffff1443
  01c68: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01c6f: ff 	mov    rax,QWORD PTR [r14-0x88]
  01c76: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01c7d: ff 	mov    rax,QWORD PTR [r14-0x90]
  01c84: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01c8b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c92: 00 	test   rdi,0x7
  01c99:    	jne    0x37de1
  01c9f:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ca3:    	jne    0x37de1
  01ca9: 26 	cmp    DWORD PTR [rip+0xffffffffffff2b19],0x26        # 0xffff47c9
  01cb0:    	jne    0x37de1
  01cb6:    	sub    rsp,0x40
  01cba:    	movq   QWORD PTR [rsp],xmm2
  01cbf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cc5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ccb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01cd1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01cd8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cdf: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ce6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ced: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01cf6: ff 	mov    rax,QWORD PTR [r14-0x98]
  01cfd:    	mov    QWORD PTR [rsp-0x40],rax
  01d02: 00 	mov    rdi,0x2
  01d09: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01d10:    	mov    QWORD PTR [rsp-0x48],rax
  01d15: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01d1c:    	mov    QWORD PTR [rsp-0x50],rax
  01d21: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01d2a: 10 	movabs rax,0x1001000000046
  01d34:    	mov    QWORD PTR [rsp-0x30],rax
  01d39: 4d 	movabs r13,0x564da0e8bc90
  01d43:    	mov    rsi,QWORD PTR [rbx]
  01d46:    	mov    QWORD PTR [rsp-0x18],rsi
  01d4b:    	lea    rsi,[rsp-0x18]
  01d50:    	mov    QWORD PTR [rbx],rsi
  01d53:    	lea    r14,[rsp-0x10]
  01d58:    	mov    QWORD PTR [rsp-0x20],r14
  01d5d:    	call   0xffff5374
  01d62:    	lea    r14,[rbp-0x8]
  01d66:    	mov    QWORD PTR [rbx],r14
  01d69:    	mov    r14,QWORD PTR [rbp-0x10]
  01d6d:    	movq   xmm2,QWORD PTR [rsp]
  01d72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d78:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d7e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d84: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d8b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d92: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d99: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01da0:    	add    rsp,0x40
  01da4: 4d 	movabs r13,0x564da0e84dc0
  01dae:    	test   rax,rax
  01db1:    	je     0xffff1443
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01db7:    	mov    rdi,QWORD PTR [rbp-0x30]
  01dbb:    	mov    rax,QWORD PTR [rdi+0x10]
  01dbf: ff 	mov    QWORD PTR [r14-0x98],rax
:00136 %14 = 1: i32
  01dc6: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01dd1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01dd8: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01ddf: 00 	test   rdi,0x7
  01de6:    	jne    0x37e4f
  01dec:    	cmp    DWORD PTR [rdi+0x4],0xb
  01df0:    	jne    0x37e4f
  01df6: 00 	test   rsi,0x1
  01dfd:    	je     0x37e4f
  01e03:    	sar    rsi,1
  01e06:    	sub    rsp,0x40
  01e0a:    	movq   QWORD PTR [rsp],xmm2
  01e0f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e15:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e1b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e21: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e28: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e2f: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e36: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e3d: 4d 	movabs rax,0x564da0819c40
  01e47:    	call   rax
  01e49:    	movq   xmm2,QWORD PTR [rsp]
  01e4e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e54:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e5a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e60: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e67: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e6e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e75: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e7c:    	add    rsp,0x40
  01e80: 4d 	movabs r13,0x564da0e84e00
  01e8a:    	test   rax,rax
  01e8d:    	je     0xffff1443
  01e93: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = %11
  01e9a: ff 	mov    rax,QWORD PTR [r14-0x88]
  01ea1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %15 = %12
  01ea8: ff 	mov    rax,QWORD PTR [r14-0x90]
  01eaf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01eb6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ebd: 00 	test   rdi,0x7
  01ec4:    	jne    0x37ebd
  01eca:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ece:    	jne    0x37ebd
  01ed4: 26 	cmp    DWORD PTR [rip+0xffffffffffff28ee],0x26        # 0xffff47c9
  01edb:    	jne    0x37ebd
  01ee1:    	sub    rsp,0x40
  01ee5:    	movq   QWORD PTR [rsp],xmm2
  01eea:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ef0:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ef6:    	movq   QWORD PTR [rsp+0x18],xmm7
  01efc: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f03: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f0a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f11: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f18: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01f21: ff 	mov    rax,QWORD PTR [r14-0x98]
  01f28:    	mov    QWORD PTR [rsp-0x40],rax
  01f2d: 00 	mov    rdi,0x2
  01f34: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01f3b:    	mov    QWORD PTR [rsp-0x48],rax
  01f40: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01f47:    	mov    QWORD PTR [rsp-0x50],rax
  01f4c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01f55: 10 	movabs rax,0x1001000000046
  01f5f:    	mov    QWORD PTR [rsp-0x30],rax
  01f64: 4d 	movabs r13,0x564da0e8bc90
  01f6e:    	mov    rsi,QWORD PTR [rbx]
  01f71:    	mov    QWORD PTR [rsp-0x18],rsi
  01f76:    	lea    rsi,[rsp-0x18]
  01f7b:    	mov    QWORD PTR [rbx],rsi
  01f7e:    	lea    r14,[rsp-0x10]
  01f83:    	mov    QWORD PTR [rsp-0x20],r14
  01f88:    	call   0xffff5374
  01f8d:    	lea    r14,[rbp-0x8]
  01f91:    	mov    QWORD PTR [rbx],r14
  01f94:    	mov    r14,QWORD PTR [rbp-0x10]
  01f98:    	movq   xmm2,QWORD PTR [rsp]
  01f9d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01fa3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01fa9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01faf: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01fb6: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01fbd: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01fc4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fcb:    	add    rsp,0x40
  01fcf: 4d 	movabs r13,0x564da0e84e40
  01fd9:    	test   rax,rax
  01fdc:    	je     0xffff1443
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01fe2:    	mov    rdi,QWORD PTR [rbp-0x30]
  01fe6:    	mov    rax,QWORD PTR [rdi+0x10]
  01fea: ff 	mov    QWORD PTR [r14-0x98],rax
:00144 %14 = 2: i32
  01ff1: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01ffc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02003: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  0200a: 00 	test   rdi,0x7
  02011:    	jne    0x37f2b
  02017:    	cmp    DWORD PTR [rdi+0x4],0xb
  0201b:    	jne    0x37f2b
  02021: 00 	test   rsi,0x1
  02028:    	je     0x37f2b
  0202e:    	sar    rsi,1
  02031:    	sub    rsp,0x40
  02035:    	movq   QWORD PTR [rsp],xmm2
  0203a:    	movq   QWORD PTR [rsp+0x8],xmm4
  02040:    	movq   QWORD PTR [rsp+0x10],xmm5
  02046:    	movq   QWORD PTR [rsp+0x18],xmm7
  0204c: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02053: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0205a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02061: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02068: 4d 	movabs rax,0x564da0819c40
  02072:    	call   rax
  02074:    	movq   xmm2,QWORD PTR [rsp]
  02079:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0207f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02085:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0208b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02092: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02099: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020a0: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020a7:    	add    rsp,0x40
  020ab: 4d 	movabs r13,0x564da0e84e80
  020b5:    	test   rax,rax
  020b8:    	je     0xffff1443
  020be: ff 	mov    QWORD PTR [r14-0x98],rax
:00146 %14 = %11
  020c5: ff 	mov    rax,QWORD PTR [r14-0x88]
  020cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 %15 = %12
  020d3: ff 	mov    rax,QWORD PTR [r14-0x90]
  020da: ff 	mov    QWORD PTR [r14-0xa8],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  020e1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  020e8: 00 	test   rdi,0x7
  020ef:    	jne    0x37f99
  020f5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  020f9:    	jne    0x37f99
  020ff: 26 	cmp    DWORD PTR [rip+0xffffffffffff26c3],0x26        # 0xffff47c9
  02106:    	jne    0x37f99
  0210c:    	sub    rsp,0x40
  02110:    	movq   QWORD PTR [rsp],xmm2
  02115:    	movq   QWORD PTR [rsp+0x8],xmm4
  0211b:    	movq   QWORD PTR [rsp+0x10],xmm5
  02121:    	movq   QWORD PTR [rsp+0x18],xmm7
  02127: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0212e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02135: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0213c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02143: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0214c: ff 	mov    rax,QWORD PTR [r14-0x98]
  02153:    	mov    QWORD PTR [rsp-0x40],rax
  02158: 00 	mov    rdi,0x2
  0215f: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02166:    	mov    QWORD PTR [rsp-0x48],rax
  0216b: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02172:    	mov    QWORD PTR [rsp-0x50],rax
  02177: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02180: 10 	movabs rax,0x1001000000046
  0218a:    	mov    QWORD PTR [rsp-0x30],rax
  0218f: 4d 	movabs r13,0x564da0e8bc90
  02199:    	mov    rsi,QWORD PTR [rbx]
  0219c:    	mov    QWORD PTR [rsp-0x18],rsi
  021a1:    	lea    rsi,[rsp-0x18]
  021a6:    	mov    QWORD PTR [rbx],rsi
  021a9:    	lea    r14,[rsp-0x10]
  021ae:    	mov    QWORD PTR [rsp-0x20],r14
  021b3:    	call   0xffff5374
  021b8:    	lea    r14,[rbp-0x8]
  021bc:    	mov    QWORD PTR [rbx],r14
  021bf:    	mov    r14,QWORD PTR [rbp-0x10]
  021c3:    	movq   xmm2,QWORD PTR [rsp]
  021c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021ce:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021d4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021da: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021e1: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021e8: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021ef: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  021f6:    	add    rsp,0x40
  021fa: 4d 	movabs r13,0x564da0e84ec0
  02204:    	test   rax,rax
  02207:    	je     0xffff1443
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  0220d:    	mov    rdi,QWORD PTR [rbp-0x30]
  02211:    	mov    rax,QWORD PTR [rdi+0x18]
  02215: ff 	mov    QWORD PTR [r14-0x98],rax
:00152 %14 = %11
  0221c: ff 	mov    rax,QWORD PTR [r14-0x88]
  02223: ff 	mov    QWORD PTR [r14-0xa0],rax
:00153 %15 = %12
  0222a: ff 	mov    rax,QWORD PTR [r14-0x90]
  02231: ff 	mov    QWORD PTR [r14-0xa8],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  02238: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0223f: 00 	test   rdi,0x7
  02246:    	jne    0x38007
  0224c:    	cmp    DWORD PTR [rdi+0x4],0x2c
  02250:    	jne    0x38007
  02256: 26 	cmp    DWORD PTR [rip+0xffffffffffff256c],0x26        # 0xffff47c9
  0225d:    	jne    0x38007
  02263:    	sub    rsp,0x40
  02267:    	movq   QWORD PTR [rsp],xmm2
  0226c:    	movq   QWORD PTR [rsp+0x8],xmm4
  02272:    	movq   QWORD PTR [rsp+0x10],xmm5
  02278:    	movq   QWORD PTR [rsp+0x18],xmm7
  0227e: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02285: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0228c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02293: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0229a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  022a3: ff 	mov    rax,QWORD PTR [r14-0x98]
  022aa:    	mov    QWORD PTR [rsp-0x40],rax
  022af: 00 	mov    rdi,0x2
  022b6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  022bd:    	mov    QWORD PTR [rsp-0x48],rax
  022c2: ff 	mov    rax,QWORD PTR [r14-0xa8]
  022c9:    	mov    QWORD PTR [rsp-0x50],rax
  022ce: 00 	mov    QWORD PTR [rsp-0x38],0x0
  022d7: 0e 	movabs rax,0x1000e00000048
  022e1:    	mov    QWORD PTR [rsp-0x30],rax
  022e6: 4d 	movabs r13,0x564da0e92080
  022f0:    	mov    rsi,QWORD PTR [rbx]
  022f3:    	mov    QWORD PTR [rsp-0x18],rsi
  022f8:    	lea    rsi,[rsp-0x18]
  022fd:    	mov    QWORD PTR [rbx],rsi
  02300:    	lea    r14,[rsp-0x10]
  02305:    	mov    QWORD PTR [rsp-0x20],r14
  0230a:    	call   0xffff5940
  0230f:    	lea    r14,[rbp-0x8]
  02313:    	mov    QWORD PTR [rbx],r14
  02316:    	mov    r14,QWORD PTR [rbp-0x10]
  0231a:    	movq   xmm2,QWORD PTR [rsp]
  0231f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02325:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0232b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02331: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02338: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0233f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02346: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0234d:    	add    rsp,0x40
  02351: 4d 	movabs r13,0x564da0e84f20
  0235b:    	test   rax,rax
  0235e:    	je     0xffff1443
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  02364: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0236b: 00 	test   rdi,0x7
  02372:    	jne    0x38075
  02378:    	cmp    DWORD PTR [rdi+0x4],0x30
  0237c:    	jne    0x38075
  02382: 26 	cmp    DWORD PTR [rip+0xffffffffffff2440],0x26        # 0xffff47c9
  02389:    	jne    0x38075
  0238f:    	mov    esi,DWORD PTR [rip+0x387]        # 0x271c
  02395:    	cmp    esi,0xffffffff
  02398:    	je     0x380e3
  0239e:    	cmp    WORD PTR [rdi+0x2],0x3
  023a3:    	jne    0x23bc
  023a9:    	cmp    esi,0x6
  023ac:    	jge    0x23bc
  023b2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  023b7:    	jmp    0x2436
  023bc:    	sub    rsp,0x40
  023c0:    	movq   QWORD PTR [rsp],xmm2
  023c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  023cb:    	movq   QWORD PTR [rsp+0x10],xmm5
  023d1:    	movq   QWORD PTR [rsp+0x18],xmm7
  023d7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  023de: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  023e5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  023ec: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  023f3: 4d 	movabs rax,0x564da0797d70
  023fd:    	call   rax
  023ff:    	movq   xmm2,QWORD PTR [rsp]
  02404:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0240a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02410:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02416: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0241d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02424: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0242b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02432:    	add    rsp,0x40
  02436: ff 	mov    QWORD PTR [r14-0x98],rax
:00158 
:00160 condnotbr %13 =>:00166
  0243d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02444:    	or     rax,0x10
  02448:    	cmp    rax,0x14
  0244c:    	je     0x2574
:00161 %13 = dynvar(2, %6)
  02452:    	mov    rax,QWORD PTR [rbp-0x18]
  02456:    	mov    rax,QWORD PTR [rax]
  02459:    	mov    rax,QWORD PTR [rax-0x48]
  0245d: ff 	mov    QWORD PTR [r14-0x98],rax
:00162 %14 = literal[1.0]
  02464: 00 	movq   xmm3,QWORD PTR [rip+0x2b4]        # 0x2720
  0246c: 00 	movabs rax,0xff80000000000002
  02476: ff 	mov    QWORD PTR [r14-0xa0],rax
:00163 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0247d: 00 	cmp    DWORD PTR [rip+0x2a4],0x0        # 0x2728
  02484:    	jl     0x3817a
  0248a:    	je     0x381e8
  02490: 01 	sub    DWORD PTR [rip+0x291],0x1        # 0x2728
  02497:    	xor    rdi,rdi
  0249a:    	jmp    0x3817a
  0249f: ff 	mov    rdi,QWORD PTR [r14-0x98]
  024a6: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  024ad:    	sub    rsp,0x50
  024b1:    	movq   QWORD PTR [rsp],xmm2
  024b6:    	movq   QWORD PTR [rsp+0x8],xmm3
  024bc:    	movq   QWORD PTR [rsp+0x10],xmm4
  024c2:    	movq   QWORD PTR [rsp+0x18],xmm5
  024c8:    	movq   QWORD PTR [rsp+0x20],xmm7
  024ce: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  024d5: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  024dc: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  024e3: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  024ea:    	mov    rdx,rdi
  024ed:    	mov    rcx,rsi
  024f0:    	mov    rdi,rbx
  024f3:    	mov    rsi,r12
  024f6: 4d 	movabs rax,0x564da07da0d0
  02500:    	call   rax
  02502:    	movq   xmm2,QWORD PTR [rsp]
  02507:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0250d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02513:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02519:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0251f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  02526: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0252d: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  02534: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  0253b:    	add    rsp,0x50
  0253f: 4d 	movabs r13,0x564da0e84fa0
  02549:    	test   rax,rax
  0254c:    	je     0xffff1443
  02552: ff 	mov    QWORD PTR [r14-0x98],rax
:00164 dynvar(2, %6) = %13
  02559:    	mov    rax,QWORD PTR [rbp-0x18]
  0255d:    	mov    rax,QWORD PTR [rax]
  02560: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02567:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  0256b: ff 	mov    rax,QWORD PTR [r14-0x98]
  02572:    	leave  
  02573:    	ret    
:00166 %13 = literal[0.0]
  02574: 00 	movq   xmm3,QWORD PTR [rip+0x1b4]        # 0x2730
  0257c: 00 	movabs rax,0x8000000000000002
  02586: ff 	mov    QWORD PTR [r14-0x98],rax
:00167 ret %13
  0258d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02594:    	leave  
  02595:    	ret    
==> start whole compile: <unnamed> FuncId(78) self_class:Scene start:[00000] bytecode:0x564da0e60480
<== finished compile. elapsed:26.1µs
offset:Pos(70440) code: 260 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: cmp    edx,0x1
  0000e: jge    0x3a
  00014: mov    eax,0x1
  00019: sub    eax,edx
  0001b: test   rax,rax
  0001e: je     0x3a
  00024: lea    rdi,[r14-0x40]
  00028: mov    QWORD PTR [rdi+rax*8],0x4
  00030: sub    rax,0x1
  00034: jne    0x28
  0003a: mov    rax,0x4
  00041: mov    QWORD PTR [r14-0x40],rax
  00045: mov    QWORD PTR [r14-0x48],rax
  00049: mov    QWORD PTR [r14-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x35ada
  0005e: cmp    DWORD PTR [rdi+0x4],0x32
  00062: jne    0x35ada
:00000 init_block reg:5 arg:1 pos:1 req:1 block:0 stack_offset:6
:00001 %3 = dynvar(1, %3)
  00068: mov    rax,QWORD PTR [rbp-0x18]
  0006c: mov    rax,QWORD PTR [rax-0x30]
  00070: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = literal[5242881]
  00074: mov    rax,0xa00003
  0007b: mov    QWORD PTR [r14-0x50],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  0007f: mov    rdi,QWORD PTR [r14-0x48]
  00083: test   rdi,0x1
  0008a: je     0x35ae9
  00090: cmp    DWORD PTR [rip+0xffffffffffff1ffa],0x26        # 0xffff2091
  00097: jne    0x35ae9
  0009d: mov    r9,QWORD PTR [r14-0x50]
  000a1: mov    rdx,rdi
  000a4: mov    QWORD PTR [rsp-0x40],rcx
  000a9: mov    QWORD PTR [rsp-0x28],0x0
  000b2: lea    rcx,[r14-0x58]
  000b6: mov    r8,0x0
  000bd: mov    rsi,QWORD PTR [rbx]
  000c0: mov    QWORD PTR [rsp-0x18],rsi
  000c5: lea    rsi,[rsp-0x18]
  000ca: mov    QWORD PTR [rbx],rsi
  000cd: lea    r14,[rsp-0x10]
  000d2: mov    QWORD PTR [rsp-0x20],r14
  000d7: call   0x35af8
  000dc: lea    r14,[rbp-0x8]
  000e0: mov    QWORD PTR [rbx],r14
  000e3: mov    r14,QWORD PTR [rbp-0x10]
  000e7: movabs r13,0x564da0e604d0
  000f1: test   rax,rax
  000f4: je     0xfffeed0b
  000fa: mov    QWORD PTR [r14-0x40],rax
:00004 
:00006 ret %2
  000fe: mov    rax,QWORD PTR [r14-0x40]
  00102: leave  
  00103: ret    
==> start whole compile: vcross FuncId(65) self_class:Vec start:[00000] bytecode:0x564da0e89170
<== finished compile. elapsed:49µs
offset:Pos(70700) code: 2443 bytes  data: 81 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: cmp    edx,0x1
  00011: jne    0x35a26
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    rdi,QWORD PTR [rbp-0x30]
  0003e: test   rdi,0x7
  00045: jne    0x35a35
  0004b: cmp    DWORD PTR [rdi+0x4],0x28
  0004f: jne    0x35a35
:00000 init_method reg:9 arg:1 pos:1 req:1 block:0 stack_offset:8
:00001 %3 = const[Vec]                      [Vec]
  00055: mov    rax,QWORD PTR [rip+0xffffffffffff1f38]        # 0xffff1f94
  0005c: cmp    rax,QWORD PTR [rip+0x941]        # 0x9a4
  00063: jne    0x35a44
  00069: mov    rax,QWORD PTR [rip+0x924]        # 0x994
  00070: mov    QWORD PTR [r14-0x48],rax
:00002 %4 = @y: Vec[IvarId(1)]
  00074: mov    rdi,QWORD PTR [rbp-0x30]
  00078: mov    rax,QWORD PTR [rdi+0x18]
  0007c: mov    QWORD PTR [r14-0x50],rax
:00003 %5 = %1.call z()                     [Vec]
  00080: mov    rdi,QWORD PTR [r14-0x38]
  00084: test   rdi,0x7
  0008b: jne    0x35a8a
  00091: cmp    DWORD PTR [rdi+0x4],0x28
  00095: jne    0x35a8a
  0009b: cmp    DWORD PTR [rip+0xffffffffffff1eeb],0x26        # 0xffff1f8d
  000a2: jne    0x35a8a
  000a8: mov    esi,DWORD PTR [rip+0x902]        # 0x9b0
  000ae: cmp    esi,0xffffffff
  000b1: je     0x35a99
  000b7: cmp    WORD PTR [rdi+0x2],0x3
  000bc: jne    0xd5
  000c2: cmp    esi,0x6
  000c5: jge    0xd5
  000cb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d0: jmp    0xe1
  000d5: movabs rax,0x564da0797d70
  000df: call   rax
  000e1: mov    QWORD PTR [r14-0x58],rax
:00004 
:00006 %4 = %4 * %5                         [Float][Float]
  000e5: mov    rdi,QWORD PTR [r14-0x50]
  000e9: test   rdi,0x1
  000f0: jne    0x35ac2
  000f6: test   rdi,0x2
  000fd: je     0x139
  00103: xorps  xmm2,xmm2
  00106: movabs rax,0x8000000000000002
  00110: cmp    rdi,rax
  00113: je     0x14b
  00119: mov    rax,rdi
  0011c: sar    rax,0x3f
  00120: add    rax,0x2
  00124: and    rdi,0xfffffffffffffffc
  00128: or     rdi,rax
  0012b: rol    rdi,0x3d
  0012f: movq   xmm2,rdi
  00134: jmp    0x14b
  00139: call   0xfffeec60
  0013e: test   rax,rax
  00141: je     0x35ac2
  00147: movq   xmm2,xmm0
  0014b: mov    rdi,QWORD PTR [r14-0x58]
  0014f: test   rdi,0x1
  00156: jne    0x35ad1
  0015c: test   rdi,0x2
  00163: je     0x19f
  00169: xorps  xmm3,xmm3
  0016c: movabs rax,0x8000000000000002
  00176: cmp    rdi,rax
  00179: je     0x1b1
  0017f: mov    rax,rdi
  00182: sar    rax,0x3f
  00186: add    rax,0x2
  0018a: and    rdi,0xfffffffffffffffc
  0018e: or     rdi,rax
  00191: rol    rdi,0x3d
  00195: movq   xmm3,rdi
  0019a: jmp    0x1b1
  0019f: call   0xfffeec60
  001a4: test   rax,rax
  001a7: je     0x35ad1
  001ad: movq   xmm3,xmm0
  001b1: mulsd  xmm2,xmm3
:00007 %5 = @z: Vec[IvarId(2)]
  001b5: mov    rdi,QWORD PTR [rbp-0x30]
  001b9: mov    rax,QWORD PTR [rdi+0x20]
  001bd: mov    QWORD PTR [r14-0x58],rax
:00008 %6 = %1.call y()                     [Vec]
  001c1: mov    rdi,QWORD PTR [r14-0x38]
  001c5: test   rdi,0x7
  001cc: jne    0x35ae0
  001d2: cmp    DWORD PTR [rdi+0x4],0x28
  001d6: jne    0x35ae0
  001dc: cmp    DWORD PTR [rip+0xffffffffffff1daa],0x26        # 0xffff1f8d
  001e3: jne    0x35ae0
  001e9: mov    esi,DWORD PTR [rip+0x7c9]        # 0x9b8
  001ef: cmp    esi,0xffffffff
  001f2: je     0x35afc
  001f8: cmp    WORD PTR [rdi+0x2],0x3
  001fd: jne    0x216
  00203: cmp    esi,0x6
  00206: jge    0x216
  0020c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00211: jmp    0x234
  00216: sub    rsp,0x10
  0021a: movq   QWORD PTR [rsp],xmm2
  0021f: movabs rax,0x564da0797d70
  00229: call   rax
  0022b: movq   xmm2,QWORD PTR [rsp]
  00230: add    rsp,0x10
  00234: mov    QWORD PTR [r14-0x60],rax
:00009 
:00011 %5 = %5 * %6                         [Float][Float]
  00238: mov    rdi,QWORD PTR [r14-0x58]
  0023c: test   rdi,0x1
  00243: jne    0x35b37
  00249: test   rdi,0x2
  00250: je     0x28c
  00256: xorps  xmm3,xmm3
  00259: movabs rax,0x8000000000000002
  00263: cmp    rdi,rax
  00266: je     0x29e
  0026c: mov    rax,rdi
  0026f: sar    rax,0x3f
  00273: add    rax,0x2
  00277: and    rdi,0xfffffffffffffffc
  0027b: or     rdi,rax
  0027e: rol    rdi,0x3d
  00282: movq   xmm3,rdi
  00287: jmp    0x29e
  0028c: call   0xfffeec60
  00291: test   rax,rax
  00294: je     0x35b37
  0029a: movq   xmm3,xmm0
  0029e: mov    rdi,QWORD PTR [r14-0x60]
  002a2: test   rdi,0x1
  002a9: jne    0x35b53
  002af: test   rdi,0x2
  002b6: je     0x2f2
  002bc: xorps  xmm4,xmm4
  002bf: movabs rax,0x8000000000000002
  002c9: cmp    rdi,rax
  002cc: je     0x304
  002d2: mov    rax,rdi
  002d5: sar    rax,0x3f
  002d9: add    rax,0x2
  002dd: and    rdi,0xfffffffffffffffc
  002e1: or     rdi,rax
  002e4: rol    rdi,0x3d
  002e8: movq   xmm4,rdi
  002ed: jmp    0x304
  002f2: call   0xfffeec60
  002f7: test   rax,rax
  002fa: je     0x35b53
  00300: movq   xmm4,xmm0
  00304: mulsd  xmm3,xmm4
:00012 %4 = %4 - %5                         [Float][Float]
  00308: subsd  xmm2,xmm3
:00013 %5 = @z: Vec[IvarId(2)]
  0030c: mov    rdi,QWORD PTR [rbp-0x30]
  00310: mov    rax,QWORD PTR [rdi+0x20]
  00314: mov    QWORD PTR [r14-0x58],rax
:00014 %6 = %1.call x()                     [Vec]
  00318: mov    rdi,QWORD PTR [r14-0x38]
  0031c: test   rdi,0x7
  00323: jne    0x35b6f
  00329: cmp    DWORD PTR [rdi+0x4],0x28
  0032d: jne    0x35b6f
  00333: cmp    DWORD PTR [rip+0xffffffffffff1c53],0x26        # 0xffff1f8d
  0033a: jne    0x35b6f
  00340: mov    esi,DWORD PTR [rip+0x67a]        # 0x9c0
  00346: cmp    esi,0xffffffff
  00349: je     0x35b8b
  0034f: cmp    WORD PTR [rdi+0x2],0x3
  00354: jne    0x36d
  0035a: cmp    esi,0x6
  0035d: jge    0x36d
  00363: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00368: jmp    0x38b
  0036d: sub    rsp,0x10
  00371: movq   QWORD PTR [rsp],xmm2
  00376: movabs rax,0x564da0797d70
  00380: call   rax
  00382: movq   xmm2,QWORD PTR [rsp]
  00387: add    rsp,0x10
  0038b: mov    QWORD PTR [r14-0x60],rax
:00015 
:00017 %5 = %5 * %6                         [Float][Float]
  0038f: mov    rdi,QWORD PTR [r14-0x58]
  00393: test   rdi,0x1
  0039a: jne    0x35bc6
  003a0: test   rdi,0x2
  003a7: je     0x3e3
  003ad: xorps  xmm3,xmm3
  003b0: movabs rax,0x8000000000000002
  003ba: cmp    rdi,rax
  003bd: je     0x3f5
  003c3: mov    rax,rdi
  003c6: sar    rax,0x3f
  003ca: add    rax,0x2
  003ce: and    rdi,0xfffffffffffffffc
  003d2: or     rdi,rax
  003d5: rol    rdi,0x3d
  003d9: movq   xmm3,rdi
  003de: jmp    0x3f5
  003e3: call   0xfffeec60
  003e8: test   rax,rax
  003eb: je     0x35bc6
  003f1: movq   xmm3,xmm0
  003f5: mov    rdi,QWORD PTR [r14-0x60]
  003f9: test   rdi,0x1
  00400: jne    0x35be2
  00406: test   rdi,0x2
  0040d: je     0x449
  00413: xorps  xmm4,xmm4
  00416: movabs rax,0x8000000000000002
  00420: cmp    rdi,rax
  00423: je     0x45b
  00429: mov    rax,rdi
  0042c: sar    rax,0x3f
  00430: add    rax,0x2
  00434: and    rdi,0xfffffffffffffffc
  00438: or     rdi,rax
  0043b: rol    rdi,0x3d
  0043f: movq   xmm4,rdi
  00444: jmp    0x45b
  00449: call   0xfffeec60
  0044e: test   rax,rax
  00451: je     0x35be2
  00457: movq   xmm4,xmm0
  0045b: mulsd  xmm3,xmm4
:00018 %6 = @x: Vec[IvarId(0)]
  0045f: mov    rdi,QWORD PTR [rbp-0x30]
  00463: mov    rax,QWORD PTR [rdi+0x10]
  00467: mov    QWORD PTR [r14-0x60],rax
:00019 %7 = %1.call z()                     [Vec]
  0046b: mov    rdi,QWORD PTR [r14-0x38]
  0046f: test   rdi,0x7
  00476: jne    0x35bfe
  0047c: cmp    DWORD PTR [rdi+0x4],0x28
  00480: jne    0x35bfe
  00486: cmp    DWORD PTR [rip+0xffffffffffff1b00],0x26        # 0xffff1f8d
  0048d: jne    0x35bfe
  00493: mov    esi,DWORD PTR [rip+0x52f]        # 0x9c8
  00499: cmp    esi,0xffffffff
  0049c: je     0x35c27
  004a2: cmp    WORD PTR [rdi+0x2],0x3
  004a7: jne    0x4c0
  004ad: cmp    esi,0x6
  004b0: jge    0x4c0
  004b6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004bb: jmp    0x4ea
  004c0: sub    rsp,0x10
  004c4: movq   QWORD PTR [rsp],xmm2
  004c9: movq   QWORD PTR [rsp+0x8],xmm3
  004cf: movabs rax,0x564da0797d70
  004d9: call   rax
  004db: movq   xmm2,QWORD PTR [rsp]
  004e0: movq   xmm3,QWORD PTR [rsp+0x8]
  004e6: add    rsp,0x10
  004ea: mov    QWORD PTR [r14-0x68],rax
:00020 
:00022 %6 = %6 * %7                         [Float][Float]
  004ee: mov    rdi,QWORD PTR [r14-0x60]
  004f2: test   rdi,0x1
  004f9: jne    0x35c6e
  004ff: test   rdi,0x2
  00506: je     0x542
  0050c: xorps  xmm4,xmm4
  0050f: movabs rax,0x8000000000000002
  00519: cmp    rdi,rax
  0051c: je     0x554
  00522: mov    rax,rdi
  00525: sar    rax,0x3f
  00529: add    rax,0x2
  0052d: and    rdi,0xfffffffffffffffc
  00531: or     rdi,rax
  00534: rol    rdi,0x3d
  00538: movq   xmm4,rdi
  0053d: jmp    0x554
  00542: call   0xfffeec60
  00547: test   rax,rax
  0054a: je     0x35c6e
  00550: movq   xmm4,xmm0
  00554: mov    rdi,QWORD PTR [r14-0x68]
  00558: test   rdi,0x1
  0055f: jne    0x35c97
  00565: test   rdi,0x2
  0056c: je     0x5a8
  00572: xorps  xmm5,xmm5
  00575: movabs rax,0x8000000000000002
  0057f: cmp    rdi,rax
  00582: je     0x5ba
  00588: mov    rax,rdi
  0058b: sar    rax,0x3f
  0058f: add    rax,0x2
  00593: and    rdi,0xfffffffffffffffc
  00597: or     rdi,rax
  0059a: rol    rdi,0x3d
  0059e: movq   xmm5,rdi
  005a3: jmp    0x5ba
  005a8: call   0xfffeec60
  005ad: test   rax,rax
  005b0: je     0x35c97
  005b6: movq   xmm5,xmm0
  005ba: mulsd  xmm4,xmm5
:00023 %5 = %5 - %6                         [Float][Float]
  005be: subsd  xmm3,xmm4
:00024 %6 = @x: Vec[IvarId(0)]
  005c2: mov    rdi,QWORD PTR [rbp-0x30]
  005c6: mov    rax,QWORD PTR [rdi+0x10]
  005ca: mov    QWORD PTR [r14-0x60],rax
:00025 %7 = %1.call y()                     [Vec]
  005ce: mov    rdi,QWORD PTR [r14-0x38]
  005d2: test   rdi,0x7
  005d9: jne    0x35cc0
  005df: cmp    DWORD PTR [rdi+0x4],0x28
  005e3: jne    0x35cc0
  005e9: cmp    DWORD PTR [rip+0xffffffffffff199d],0x26        # 0xffff1f8d
  005f0: jne    0x35cc0
  005f6: mov    esi,DWORD PTR [rip+0x3d4]        # 0x9d0
  005fc: cmp    esi,0xffffffff
  005ff: je     0x35ce9
  00605: cmp    WORD PTR [rdi+0x2],0x3
  0060a: jne    0x623
  00610: cmp    esi,0x6
  00613: jge    0x623
  00619: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0061e: jmp    0x64d
  00623: sub    rsp,0x10
  00627: movq   QWORD PTR [rsp],xmm2
  0062c: movq   QWORD PTR [rsp+0x8],xmm3
  00632: movabs rax,0x564da0797d70
  0063c: call   rax
  0063e: movq   xmm2,QWORD PTR [rsp]
  00643: movq   xmm3,QWORD PTR [rsp+0x8]
  00649: add    rsp,0x10
  0064d: mov    QWORD PTR [r14-0x68],rax
:00026 
:00028 %6 = %6 * %7                         [Float][Float]
  00651: mov    rdi,QWORD PTR [r14-0x60]
  00655: test   rdi,0x1
  0065c: jne    0x35d30
  00662: test   rdi,0x2
  00669: je     0x6a5
  0066f: xorps  xmm4,xmm4
  00672: movabs rax,0x8000000000000002
  0067c: cmp    rdi,rax
  0067f: je     0x6b7
  00685: mov    rax,rdi
  00688: sar    rax,0x3f
  0068c: add    rax,0x2
  00690: and    rdi,0xfffffffffffffffc
  00694: or     rdi,rax
  00697: rol    rdi,0x3d
  0069b: movq   xmm4,rdi
  006a0: jmp    0x6b7
  006a5: call   0xfffeec60
  006aa: test   rax,rax
  006ad: je     0x35d30
  006b3: movq   xmm4,xmm0
  006b7: mov    rdi,QWORD PTR [r14-0x68]
  006bb: test   rdi,0x1
  006c2: jne    0x35d59
  006c8: test   rdi,0x2
  006cf: je     0x70b
  006d5: xorps  xmm5,xmm5
  006d8: movabs rax,0x8000000000000002
  006e2: cmp    rdi,rax
  006e5: je     0x71d
  006eb: mov    rax,rdi
  006ee: sar    rax,0x3f
  006f2: add    rax,0x2
  006f6: and    rdi,0xfffffffffffffffc
  006fa: or     rdi,rax
  006fd: rol    rdi,0x3d
  00701: movq   xmm5,rdi
  00706: jmp    0x71d
  0070b: call   0xfffeec60
  00710: test   rax,rax
  00713: je     0x35d59
  00719: movq   xmm5,xmm0
  0071d: mulsd  xmm4,xmm5
:00029 %7 = @y: Vec[IvarId(1)]
  00721: mov    rdi,QWORD PTR [rbp-0x30]
  00725: mov    rax,QWORD PTR [rdi+0x18]
  00729: mov    QWORD PTR [r14-0x68],rax
:00030 %8 = %1.call x()                     [Vec]
  0072d: mov    rdi,QWORD PTR [r14-0x38]
  00731: test   rdi,0x7
  00738: jne    0x35d82
  0073e: cmp    DWORD PTR [rdi+0x4],0x28
  00742: jne    0x35d82
  00748: cmp    DWORD PTR [rip+0xffffffffffff183e],0x26        # 0xffff1f8d
  0074f: jne    0x35d82
  00755: mov    esi,DWORD PTR [rip+0x27d]        # 0x9d8
  0075b: cmp    esi,0xffffffff
  0075e: je     0x35db8
  00764: cmp    WORD PTR [rdi+0x2],0x3
  00769: jne    0x782
  0076f: cmp    esi,0x6
  00772: jge    0x782
  00778: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0077d: jmp    0x7b8
  00782: sub    rsp,0x20
  00786: movq   QWORD PTR [rsp],xmm2
  0078b: movq   QWORD PTR [rsp+0x8],xmm3
  00791: movq   QWORD PTR [rsp+0x10],xmm4
  00797: movabs rax,0x564da0797d70
  007a1: call   rax
  007a3: movq   xmm2,QWORD PTR [rsp]
  007a8: movq   xmm3,QWORD PTR [rsp+0x8]
  007ae: movq   xmm4,QWORD PTR [rsp+0x10]
  007b4: add    rsp,0x20
  007b8: mov    QWORD PTR [r14-0x70],rax
:00031 
:00033 %7 = %7 * %8                         [Float][Float]
  007bc: mov    rdi,QWORD PTR [r14-0x68]
  007c0: test   rdi,0x1
  007c7: jne    0x35e0b
  007cd: test   rdi,0x2
  007d4: je     0x810
  007da: xorps  xmm5,xmm5
  007dd: movabs rax,0x8000000000000002
  007e7: cmp    rdi,rax
  007ea: je     0x822
  007f0: mov    rax,rdi
  007f3: sar    rax,0x3f
  007f7: add    rax,0x2
  007fb: and    rdi,0xfffffffffffffffc
  007ff: or     rdi,rax
  00802: rol    rdi,0x3d
  00806: movq   xmm5,rdi
  0080b: jmp    0x822
  00810: call   0xfffeec60
  00815: test   rax,rax
  00818: je     0x35e0b
  0081e: movq   xmm5,xmm0
  00822: mov    rdi,QWORD PTR [r14-0x70]
  00826: test   rdi,0x1
  0082d: jne    0x35e41
  00833: test   rdi,0x2
  0083a: je     0x876
  00840: xorps  xmm6,xmm6
  00843: movabs rax,0x8000000000000002
  0084d: cmp    rdi,rax
  00850: je     0x888
  00856: mov    rax,rdi
  00859: sar    rax,0x3f
  0085d: add    rax,0x2
  00861: and    rdi,0xfffffffffffffffc
  00865: or     rdi,rax
  00868: rol    rdi,0x3d
  0086c: movq   xmm6,rdi
  00871: jmp    0x888
  00876: call   0xfffeec60
  0087b: test   rax,rax
  0087e: je     0x35e41
  00884: movq   xmm6,xmm0
  00888: mulsd  xmm5,xmm6
:00034 %6 = %6 - %7                         [Float][Float]
  0088c: subsd  xmm4,xmm5
:00035 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00890: movq   xmm0,xmm2
  00894: call   0xfffeed84
  00899: mov    QWORD PTR [r14-0x50],rax
  0089d: movq   xmm0,xmm3
  008a1: call   0xfffeed84
  008a6: mov    QWORD PTR [r14-0x58],rax
  008aa: movq   xmm0,xmm4
  008ae: call   0xfffeed84
  008b3: mov    QWORD PTR [r14-0x60],rax
  008b7: mov    rdi,QWORD PTR [r14-0x48]
  008bb: test   rdi,0x7
  008c2: jne    0x35e77
  008c8: cmp    DWORD PTR [rdi+0x4],0x29
  008cc: jne    0x35e77
  008d2: cmp    DWORD PTR [rip+0xffffffffffff16b4],0x26        # 0xffff1f8d
  008d9: jne    0x35e77
  008df: mov    r9,0x0
  008e6: sub    rsp,0x30
  008ea: movq   QWORD PTR [rsp],xmm2
  008ef: movq   QWORD PTR [rsp+0x8],xmm3
  008f5: movq   QWORD PTR [rsp+0x10],xmm4
  008fb: movq   QWORD PTR [rsp+0x18],xmm5
  00901: movq   QWORD PTR [rsp+0x20],xmm6
  00907: mov    rdx,rdi
  0090a: mov    QWORD PTR [rsp-0x40],rcx
  0090f: mov    QWORD PTR [rsp-0x28],0x0
  00918: lea    rcx,[r14-0x50]
  0091c: mov    r8,0x3
  00923: mov    rsi,QWORD PTR [rbx]
  00926: mov    QWORD PTR [rsp-0x18],rsi
  0092b: lea    rsi,[rsp-0x18]
  00930: mov    QWORD PTR [rbx],rsi
  00933: lea    r14,[rsp-0x10]
  00938: mov    QWORD PTR [rsp-0x20],r14
  0093d: call   0x35e93
  00942: lea    r14,[rbp-0x8]
  00946: mov    QWORD PTR [rbx],r14
  00949: mov    r14,QWORD PTR [rbp-0x10]
  0094d: movq   xmm2,QWORD PTR [rsp]
  00952: movq   xmm3,QWORD PTR [rsp+0x8]
  00958: movq   xmm4,QWORD PTR [rsp+0x10]
  0095e: movq   xmm5,QWORD PTR [rsp+0x18]
  00964: movq   xmm6,QWORD PTR [rsp+0x20]
  0096a: add    rsp,0x30
  0096e: movabs r13,0x564da0e893c0
  00978: test   rax,rax
  0097b: je     0xfffeec07
  00981: mov    QWORD PTR [r14-0x40],rax
:00036 
:00038 ret %2
  00985: mov    rax,QWORD PTR [r14-0x40]
  00989: leave  
  0098a: ret    
==> start whole compile: ambient_occlusion FuncId(76) self_class:Scene start:[00000] bytecode:0x564da0e94e00
<== finished compile. elapsed:79.8µs
offset:Pos(73224) code: 4086 bytes  data: 282 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: cmp    edx,0x1
  00011: jne    0x354e9
  00017: mov    rax,0x4
  0001e: mov    QWORD PTR [r14-0x40],rax
  00022: mov    QWORD PTR [r14-0x48],rax
  00026: mov    QWORD PTR [r14-0x50],rax
  0002a: mov    QWORD PTR [r14-0x58],rax
  0002e: mov    QWORD PTR [r14-0x60],rax
  00032: mov    QWORD PTR [r14-0x68],rax
  00036: mov    QWORD PTR [r14-0x70],rax
  0003a: mov    QWORD PTR [r14-0x78],rax
  0003e: mov    QWORD PTR [r14-0x80],rax
  00042: mov    QWORD PTR [r14-0x88],rax
  00049: mov    QWORD PTR [r14-0x90],rax
  00050: mov    QWORD PTR [r14-0x98],rax
  00057: mov    rdi,QWORD PTR [rbp-0x30]
  0005b: test   rdi,0x7
  00062: jne    0x354f8
  00068: cmp    DWORD PTR [rdi+0x4],0x32
  0006c: jne    0x354f8
:00000 init_method reg:14 arg:1 pos:1 req:1 block:0 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  00072: mov    rax,QWORD PTR [rip+0xffffffffffff153f]        # 0xffff15b8
  00079: cmp    rax,QWORD PTR [rip+0xf88]        # 0x1008
  00080: jne    0x35507
  00086: mov    rax,QWORD PTR [rip+0xf6b]        # 0xff8
  0008d: mov    QWORD PTR [r14-0x70],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  00091: mov    rdi,QWORD PTR [r14-0x70]
  00095: test   rdi,0x7
  0009c: jne    0x3554d
  000a2: cmp    DWORD PTR [rdi+0x4],0x1e
  000a6: jne    0x3554d
  000ac: cmp    DWORD PTR [rip+0xffffffffffff14fe],0x26        # 0xffff15b1
  000b3: jne    0x3554d
  000b9: mov    r9,0x0
  000c0: mov    rdx,rdi
  000c3: mov    QWORD PTR [rsp-0x40],rcx
  000c8: mov    QWORD PTR [rsp-0x28],0x0
  000d1: lea    rcx,[r14-0x78]
  000d5: mov    r8,0x0
  000dc: mov    rsi,QWORD PTR [rbx]
  000df: mov    QWORD PTR [rsp-0x18],rsi
  000e4: lea    rsi,[rsp-0x18]
  000e9: mov    QWORD PTR [rbx],rsi
  000ec: lea    r14,[rsp-0x10]
  000f1: mov    QWORD PTR [rsp-0x20],r14
  000f6: call   0x3555c
  000fb: lea    r14,[rbp-0x8]
  000ff: mov    QWORD PTR [rbx],r14
  00102: mov    r14,QWORD PTR [rbp-0x10]
  00106: movabs r13,0x564da0e94e40
  00110: test   rax,rax
  00113: je     0xfffee22b
  00119: mov    QWORD PTR [r14-0x40],rax
:00003 
:00005 %8 = %2
  0011d: mov    rax,QWORD PTR [r14-0x40]
  00121: mov    QWORD PTR [r14-0x70],rax
:00006 %9 = %1.call n()                     [Isect]
  00125: mov    rdi,QWORD PTR [r14-0x38]
  00129: test   rdi,0x7
  00130: jne    0x3558e
  00136: cmp    DWORD PTR [rdi+0x4],0x30
  0013a: jne    0x3558e
  00140: cmp    DWORD PTR [rip+0xffffffffffff146a],0x26        # 0xffff15b1
  00147: jne    0x3558e
  0014d: mov    esi,DWORD PTR [rip+0xec1]        # 0x1014
  00153: cmp    esi,0xffffffff
  00156: je     0x3559d
  0015c: cmp    WORD PTR [rdi+0x2],0x3
  00161: jne    0x17a
  00167: cmp    esi,0x6
  0016a: jge    0x17a
  00170: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00175: jmp    0x186
  0017a: movabs rax,0x564da0797d70
  00184: call   rax
  00186: mov    QWORD PTR [r14-0x78],rax
:00007 
:00009 _ = %0.call otherBasis(%8; 2)        [Scene]
  0018a: mov    rdi,QWORD PTR [r14-0x30]
  0018e: cmp    DWORD PTR [rip+0xffffffffffff141c],0x26        # 0xffff15b1
  00195: jne    0x355c6
  0019b: mov    QWORD PTR [rsp-0x28],0x0
  001a4: mov    rax,QWORD PTR [r14-0x30]
  001a8: mov    QWORD PTR [rsp-0x40],rax
  001ad: mov    rdi,0x2
  001b4: mov    rax,QWORD PTR [r14-0x70]
  001b8: mov    QWORD PTR [rsp-0x48],rax
  001bd: mov    rax,QWORD PTR [r14-0x78]
  001c1: mov    QWORD PTR [rsp-0x50],rax
  001c6: mov    QWORD PTR [rsp-0x38],0x0
  001cf: movabs rax,0x90000003c
  001d9: mov    QWORD PTR [rsp-0x30],rax
  001de: movabs r13,0x564da0eaa9d0
  001e8: mov    rsi,QWORD PTR [rbx]
  001eb: mov    QWORD PTR [rsp-0x18],rsi
  001f0: lea    rsi,[rsp-0x18]
  001f5: mov    QWORD PTR [rbx],rsi
  001f8: lea    r14,[rsp-0x10]
  001fd: mov    QWORD PTR [rsp-0x20],r14
  00202: call   0xffffb15b
  00207: lea    r14,[rbp-0x8]
  0020b: mov    QWORD PTR [rbx],r14
  0020e: mov    r14,QWORD PTR [rbp-0x10]
  00212: movabs r13,0x564da0e94eb0
  0021c: test   rax,rax
  0021f: je     0xfffee22b
:00010 
:00012 %3 = const[NAO_SAMPLES]              [8]
  00225: mov    rax,QWORD PTR [rip+0xffffffffffff138c]        # 0xffff15b8
  0022c: cmp    rax,QWORD PTR [rip+0xdf5]        # 0x1028
  00233: jne    0x355d5
  00239: mov    rax,QWORD PTR [rip+0xdd8]        # 0x1018
  00240: mov    QWORD PTR [r14-0x48],rax
:00013 %4 = const[NAO_SAMPLES]              [8]
  00244: mov    rax,QWORD PTR [rip+0xffffffffffff136d]        # 0xffff15b8
  0024b: cmp    rax,QWORD PTR [rip+0xdf6]        # 0x1048
  00252: jne    0x3561b
  00258: mov    rax,QWORD PTR [rip+0xdd9]        # 0x1038
  0025f: mov    QWORD PTR [r14-0x50],rax
:00014 %5 = literal[0.0001]
  00263: movq   xmm2,QWORD PTR [rip+0xded]        # 0x1058
  0026b: movabs rax,0xf8d1b71758e2196a
  00275: mov    QWORD PTR [r14-0x58],rax
:00015 %6 = literal[0.0]
  00279: movq   xmm3,QWORD PTR [rip+0xde7]        # 0x1068
  00281: movabs rax,0x8000000000000002
  0028b: mov    QWORD PTR [r14-0x60],rax
:00016 %8 = const[Vec]                      [Vec]
  0028f: mov    rax,QWORD PTR [rip+0xffffffffffff1322]        # 0xffff15b8
  00296: cmp    rax,QWORD PTR [rip+0xdeb]        # 0x1088
  0029d: jne    0x35661
  002a3: mov    rax,QWORD PTR [rip+0xdce]        # 0x1078
  002aa: mov    QWORD PTR [r14-0x70],rax
:00017 %10 = %1.call pl()                   [Isect]
  002ae: mov    rdi,QWORD PTR [r14-0x38]
  002b2: test   rdi,0x7
  002b9: jne    0x356c5
  002bf: cmp    DWORD PTR [rdi+0x4],0x30
  002c3: jne    0x356c5
  002c9: cmp    DWORD PTR [rip+0xffffffffffff12e1],0x26        # 0xffff15b1
  002d0: jne    0x356c5
  002d6: mov    esi,DWORD PTR [rip+0xdb8]        # 0x1094
  002dc: cmp    esi,0xffffffff
  002df: je     0x356d4
  002e5: cmp    WORD PTR [rdi+0x2],0x3
  002ea: jne    0x303
  002f0: cmp    esi,0x6
  002f3: jge    0x303
  002f9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002fe: jmp    0x32d
  00303: sub    rsp,0x10
  00307: movq   QWORD PTR [rsp],xmm2
  0030c: movq   QWORD PTR [rsp+0x8],xmm3
  00312: movabs rax,0x564da0797d70
  0031c: call   rax
  0031e: movq   xmm2,QWORD PTR [rsp]
  00323: movq   xmm3,QWORD PTR [rsp+0x8]
  00329: add    rsp,0x10
  0032d: mov    QWORD PTR [r14-0x80],rax
:00018 
:00020 %9 = %10.call x()                    [Vec]
  00331: mov    rdi,QWORD PTR [r14-0x80]
  00335: test   rdi,0x7
  0033c: jne    0x3571b
  00342: cmp    DWORD PTR [rdi+0x4],0x28
  00346: jne    0x3571b
  0034c: cmp    DWORD PTR [rip+0xffffffffffff125e],0x26        # 0xffff15b1
  00353: jne    0x3571b
  00359: mov    esi,DWORD PTR [rip+0xd3d]        # 0x109c
  0035f: cmp    esi,0xffffffff
  00362: je     0x3572a
  00368: cmp    WORD PTR [rdi+0x2],0x3
  0036d: jne    0x386
  00373: cmp    esi,0x6
  00376: jge    0x386
  0037c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00381: jmp    0x3b0
  00386: sub    rsp,0x10
  0038a: movq   QWORD PTR [rsp],xmm2
  0038f: movq   QWORD PTR [rsp+0x8],xmm3
  00395: movabs rax,0x564da0797d70
  0039f: call   rax
  003a1: movq   xmm2,QWORD PTR [rsp]
  003a6: movq   xmm3,QWORD PTR [rsp+0x8]
  003ac: add    rsp,0x10
  003b0: mov    QWORD PTR [r14-0x78],rax
:00021 
:00023 %11 = %1.call n()                    [Isect]
  003b4: mov    rdi,QWORD PTR [r14-0x38]
  003b8: test   rdi,0x7
  003bf: jne    0x35771
  003c5: cmp    DWORD PTR [rdi+0x4],0x30
  003c9: jne    0x35771
  003cf: cmp    DWORD PTR [rip+0xffffffffffff11db],0x26        # 0xffff15b1
  003d6: jne    0x35771
  003dc: mov    esi,DWORD PTR [rip+0xcc2]        # 0x10a4
  003e2: cmp    esi,0xffffffff
  003e5: je     0x35780
  003eb: cmp    WORD PTR [rdi+0x2],0x3
  003f0: jne    0x409
  003f6: cmp    esi,0x6
  003f9: jge    0x409
  003ff: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00404: jmp    0x433
  00409: sub    rsp,0x10
  0040d: movq   QWORD PTR [rsp],xmm2
  00412: movq   QWORD PTR [rsp+0x8],xmm3
  00418: movabs rax,0x564da0797d70
  00422: call   rax
  00424: movq   xmm2,QWORD PTR [rsp]
  00429: movq   xmm3,QWORD PTR [rsp+0x8]
  0042f: add    rsp,0x10
  00433: mov    QWORD PTR [r14-0x88],rax
:00024 
:00026 %10 = %11.call x()                   [Vec]
  0043a: mov    rdi,QWORD PTR [r14-0x88]
  00441: test   rdi,0x7
  00448: jne    0x357c7
  0044e: cmp    DWORD PTR [rdi+0x4],0x28
  00452: jne    0x357c7
  00458: cmp    DWORD PTR [rip+0xffffffffffff1152],0x26        # 0xffff15b1
  0045f: jne    0x357c7
  00465: mov    esi,DWORD PTR [rip+0xc41]        # 0x10ac
  0046b: cmp    esi,0xffffffff
  0046e: je     0x357d6
  00474: cmp    WORD PTR [rdi+0x2],0x3
  00479: jne    0x492
  0047f: cmp    esi,0x6
  00482: jge    0x492
  00488: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0048d: jmp    0x4bc
  00492: sub    rsp,0x10
  00496: movq   QWORD PTR [rsp],xmm2
  0049b: movq   QWORD PTR [rsp+0x8],xmm3
  004a1: movabs rax,0x564da0797d70
  004ab: call   rax
  004ad: movq   xmm2,QWORD PTR [rsp]
  004b2: movq   xmm3,QWORD PTR [rsp+0x8]
  004b8: add    rsp,0x10
  004bc: mov    QWORD PTR [r14-0x80],rax
:00027 
:00029 %10 = %5 * %10                       [Float][Float]
  004c0: mov    rdi,QWORD PTR [r14-0x80]
  004c4: test   rdi,0x1
  004cb: jne    0x3581d
  004d1: test   rdi,0x2
  004d8: je     0x514
  004de: xorps  xmm4,xmm4
  004e1: movabs rax,0x8000000000000002
  004eb: cmp    rdi,rax
  004ee: je     0x526
  004f4: mov    rax,rdi
  004f7: sar    rax,0x3f
  004fb: add    rax,0x2
  004ff: and    rdi,0xfffffffffffffffc
  00503: or     rdi,rax
  00506: rol    rdi,0x3d
  0050a: movq   xmm4,rdi
  0050f: jmp    0x526
  00514: call   0xfffee284
  00519: test   rax,rax
  0051c: je     0x3581d
  00522: movq   xmm4,xmm0
  00526: mulsd  xmm4,xmm2
:00030 %9 = %9 + %10                        [Float][Float]
  0052a: mov    rdi,QWORD PTR [r14-0x78]
  0052e: test   rdi,0x1
  00535: jne    0x3582c
  0053b: test   rdi,0x2
  00542: je     0x57e
  00548: xorps  xmm5,xmm5
  0054b: movabs rax,0x8000000000000002
  00555: cmp    rdi,rax
  00558: je     0x590
  0055e: mov    rax,rdi
  00561: sar    rax,0x3f
  00565: add    rax,0x2
  00569: and    rdi,0xfffffffffffffffc
  0056d: or     rdi,rax
  00570: rol    rdi,0x3d
  00574: movq   xmm5,rdi
  00579: jmp    0x590
  0057e: call   0xfffee284
  00583: test   rax,rax
  00586: je     0x3582c
  0058c: movq   xmm5,xmm0
  00590: addsd  xmm5,xmm4
:00031 %11 = %1.call pl()                   [Isect]
  00594: mov    rdi,QWORD PTR [r14-0x38]
  00598: test   rdi,0x7
  0059f: jne    0x35848
  005a5: cmp    DWORD PTR [rdi+0x4],0x30
  005a9: jne    0x35848
  005af: cmp    DWORD PTR [rip+0xffffffffffff0ffb],0x26        # 0xffff15b1
  005b6: jne    0x35848
  005bc: mov    esi,DWORD PTR [rip+0xaf2]        # 0x10b4
  005c2: cmp    esi,0xffffffff
  005c5: je     0x35871
  005cb: cmp    WORD PTR [rdi+0x2],0x3
  005d0: jne    0x5e9
  005d6: cmp    esi,0x6
  005d9: jge    0x5e9
  005df: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005e4: jmp    0x62b
  005e9: sub    rsp,0x20
  005ed: movq   QWORD PTR [rsp],xmm2
  005f2: movq   QWORD PTR [rsp+0x8],xmm3
  005f8: movq   QWORD PTR [rsp+0x10],xmm4
  005fe: movq   QWORD PTR [rsp+0x18],xmm5
  00604: movabs rax,0x564da0797d70
  0060e: call   rax
  00610: movq   xmm2,QWORD PTR [rsp]
  00615: movq   xmm3,QWORD PTR [rsp+0x8]
  0061b: movq   xmm4,QWORD PTR [rsp+0x10]
  00621: movq   xmm5,QWORD PTR [rsp+0x18]
  00627: add    rsp,0x20
  0062b: mov    QWORD PTR [r14-0x88],rax
:00032 
:00034 %10 = %11.call y()                   [Vec]
  00632: mov    rdi,QWORD PTR [r14-0x88]
  00639: test   rdi,0x7
  00640: jne    0x358d0
  00646: cmp    DWORD PTR [rdi+0x4],0x28
  0064a: jne    0x358d0
  00650: cmp    DWORD PTR [rip+0xffffffffffff0f5a],0x26        # 0xffff15b1
  00657: jne    0x358d0
  0065d: mov    esi,DWORD PTR [rip+0xa59]        # 0x10bc
  00663: cmp    esi,0xffffffff
  00666: je     0x358ec
  0066c: cmp    WORD PTR [rdi+0x2],0x3
  00671: jne    0x68a
  00677: cmp    esi,0x6
  0067a: jge    0x68a
  00680: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00685: jmp    0x6c0
  0068a: sub    rsp,0x20
  0068e: movq   QWORD PTR [rsp],xmm2
  00693: movq   QWORD PTR [rsp+0x8],xmm3
  00699: movq   QWORD PTR [rsp+0x10],xmm5
  0069f: movabs rax,0x564da0797d70
  006a9: call   rax
  006ab: movq   xmm2,QWORD PTR [rsp]
  006b0: movq   xmm3,QWORD PTR [rsp+0x8]
  006b6: movq   xmm5,QWORD PTR [rsp+0x10]
  006bc: add    rsp,0x20
  006c0: mov    QWORD PTR [r14-0x80],rax
:00035 
:00037 %12 = %1.call n()                    [Isect]
  006c4: mov    rdi,QWORD PTR [r14-0x38]
  006c8: test   rdi,0x7
  006cf: jne    0x3593f
  006d5: cmp    DWORD PTR [rdi+0x4],0x30
  006d9: jne    0x3593f
  006df: cmp    DWORD PTR [rip+0xffffffffffff0ecb],0x26        # 0xffff15b1
  006e6: jne    0x3593f
  006ec: mov    esi,DWORD PTR [rip+0x9d2]        # 0x10c4
  006f2: cmp    esi,0xffffffff
  006f5: je     0x3595b
  006fb: cmp    WORD PTR [rdi+0x2],0x3
  00700: jne    0x719
  00706: cmp    esi,0x6
  00709: jge    0x719
  0070f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00714: jmp    0x74f
  00719: sub    rsp,0x20
  0071d: movq   QWORD PTR [rsp],xmm2
  00722: movq   QWORD PTR [rsp+0x8],xmm3
  00728: movq   QWORD PTR [rsp+0x10],xmm5
  0072e: movabs rax,0x564da0797d70
  00738: call   rax
  0073a: movq   xmm2,QWORD PTR [rsp]
  0073f: movq   xmm3,QWORD PTR [rsp+0x8]
  00745: movq   xmm5,QWORD PTR [rsp+0x10]
  0074b: add    rsp,0x20
  0074f: mov    QWORD PTR [r14-0x90],rax
:00038 
:00040 %11 = %12.call y()                   [Vec]
  00756: mov    rdi,QWORD PTR [r14-0x90]
  0075d: test   rdi,0x7
  00764: jne    0x359ae
  0076a: cmp    DWORD PTR [rdi+0x4],0x28
  0076e: jne    0x359ae
  00774: cmp    DWORD PTR [rip+0xffffffffffff0e36],0x26        # 0xffff15b1
  0077b: jne    0x359ae
  00781: mov    esi,DWORD PTR [rip+0x945]        # 0x10cc
  00787: cmp    esi,0xffffffff
  0078a: je     0x359ca
  00790: cmp    WORD PTR [rdi+0x2],0x3
  00795: jne    0x7ae
  0079b: cmp    esi,0x6
  0079e: jge    0x7ae
  007a4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007a9: jmp    0x7e4
  007ae: sub    rsp,0x20
  007b2: movq   QWORD PTR [rsp],xmm2
  007b7: movq   QWORD PTR [rsp+0x8],xmm3
  007bd: movq   QWORD PTR [rsp+0x10],xmm5
  007c3: movabs rax,0x564da0797d70
  007cd: call   rax
  007cf: movq   xmm2,QWORD PTR [rsp]
  007d4: movq   xmm3,QWORD PTR [rsp+0x8]
  007da: movq   xmm5,QWORD PTR [rsp+0x10]
  007e0: add    rsp,0x20
  007e4: mov    QWORD PTR [r14-0x88],rax
:00041 
:00043 %11 = %5 * %11                       [Float][Float]
  007eb: mov    rdi,QWORD PTR [r14-0x88]
  007f2: test   rdi,0x1
  007f9: jne    0x35a1d
  007ff: test   rdi,0x2
  00806: je     0x842
  0080c: xorps  xmm4,xmm4
  0080f: movabs rax,0x8000000000000002
  00819: cmp    rdi,rax
  0081c: je     0x854
  00822: mov    rax,rdi
  00825: sar    rax,0x3f
  00829: add    rax,0x2
  0082d: and    rdi,0xfffffffffffffffc
  00831: or     rdi,rax
  00834: rol    rdi,0x3d
  00838: movq   xmm4,rdi
  0083d: jmp    0x854
  00842: call   0xfffee284
  00847: test   rax,rax
  0084a: je     0x35a1d
  00850: movq   xmm4,xmm0
  00854: mulsd  xmm4,xmm2
:00044 %10 = %10 + %11                      [Float][Float]
  00858: mov    rdi,QWORD PTR [r14-0x80]
  0085c: test   rdi,0x1
  00863: jne    0x35a39
  00869: test   rdi,0x2
  00870: je     0x8ac
  00876: xorps  xmm6,xmm6
  00879: movabs rax,0x8000000000000002
  00883: cmp    rdi,rax
  00886: je     0x8be
  0088c: mov    rax,rdi
  0088f: sar    rax,0x3f
  00893: add    rax,0x2
  00897: and    rdi,0xfffffffffffffffc
  0089b: or     rdi,rax
  0089e: rol    rdi,0x3d
  008a2: movq   xmm6,rdi
  008a7: jmp    0x8be
  008ac: call   0xfffee284
  008b1: test   rax,rax
  008b4: je     0x35a39
  008ba: movq   xmm6,xmm0
  008be: addsd  xmm6,xmm4
:00045 %12 = %1.call pl()                   [Isect]
  008c2: mov    rdi,QWORD PTR [r14-0x38]
  008c6: test   rdi,0x7
  008cd: jne    0x35a65
  008d3: cmp    DWORD PTR [rdi+0x4],0x30
  008d7: jne    0x35a65
  008dd: cmp    DWORD PTR [rip+0xffffffffffff0ccd],0x26        # 0xffff15b1
  008e4: jne    0x35a65
  008ea: mov    esi,DWORD PTR [rip+0x7e4]        # 0x10d4
  008f0: cmp    esi,0xffffffff
  008f3: je     0x35a9e
  008f9: cmp    WORD PTR [rdi+0x2],0x3
  008fe: jne    0x917
  00904: cmp    esi,0x6
  00907: jge    0x917
  0090d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00912: jmp    0x965
  00917: sub    rsp,0x30
  0091b: movq   QWORD PTR [rsp],xmm2
  00920: movq   QWORD PTR [rsp+0x8],xmm3
  00926: movq   QWORD PTR [rsp+0x10],xmm4
  0092c: movq   QWORD PTR [rsp+0x18],xmm5
  00932: movq   QWORD PTR [rsp+0x20],xmm6
  00938: movabs rax,0x564da0797d70
  00942: call   rax
  00944: movq   xmm2,QWORD PTR [rsp]
  00949: movq   xmm3,QWORD PTR [rsp+0x8]
  0094f: movq   xmm4,QWORD PTR [rsp+0x10]
  00955: movq   xmm5,QWORD PTR [rsp+0x18]
  0095b: movq   xmm6,QWORD PTR [rsp+0x20]
  00961: add    rsp,0x30
  00965: mov    QWORD PTR [r14-0x90],rax
:00046 
:00048 %11 = %12.call z()                   [Vec]
  0096c: mov    rdi,QWORD PTR [r14-0x90]
  00973: test   rdi,0x7
  0097a: jne    0x35b09
  00980: cmp    DWORD PTR [rdi+0x4],0x28
  00984: jne    0x35b09
  0098a: cmp    DWORD PTR [rip+0xffffffffffff0c20],0x26        # 0xffff15b1
  00991: jne    0x35b09
  00997: mov    esi,DWORD PTR [rip+0x73f]        # 0x10dc
  0099d: cmp    esi,0xffffffff
  009a0: je     0x35b32
  009a6: cmp    WORD PTR [rdi+0x2],0x3
  009ab: jne    0x9c4
  009b1: cmp    esi,0x6
  009b4: jge    0x9c4
  009ba: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009bf: jmp    0xa06
  009c4: sub    rsp,0x20
  009c8: movq   QWORD PTR [rsp],xmm2
  009cd: movq   QWORD PTR [rsp+0x8],xmm3
  009d3: movq   QWORD PTR [rsp+0x10],xmm5
  009d9: movq   QWORD PTR [rsp+0x18],xmm6
  009df: movabs rax,0x564da0797d70
  009e9: call   rax
  009eb: movq   xmm2,QWORD PTR [rsp]
  009f0: movq   xmm3,QWORD PTR [rsp+0x8]
  009f6: movq   xmm5,QWORD PTR [rsp+0x10]
  009fc: movq   xmm6,QWORD PTR [rsp+0x18]
  00a02: add    rsp,0x20
  00a06: mov    QWORD PTR [r14-0x88],rax
:00049 
:00051 %13 = %1.call n()                    [Isect]
  00a0d: mov    rdi,QWORD PTR [r14-0x38]
  00a11: test   rdi,0x7
  00a18: jne    0x35b91
  00a1e: cmp    DWORD PTR [rdi+0x4],0x30
  00a22: jne    0x35b91
  00a28: cmp    DWORD PTR [rip+0xffffffffffff0b82],0x26        # 0xffff15b1
  00a2f: jne    0x35b91
  00a35: mov    esi,DWORD PTR [rip+0x6a9]        # 0x10e4
  00a3b: cmp    esi,0xffffffff
  00a3e: je     0x35bba
  00a44: cmp    WORD PTR [rdi+0x2],0x3
  00a49: jne    0xa62
  00a4f: cmp    esi,0x6
  00a52: jge    0xa62
  00a58: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a5d: jmp    0xaa4
  00a62: sub    rsp,0x20
  00a66: movq   QWORD PTR [rsp],xmm2
  00a6b: movq   QWORD PTR [rsp+0x8],xmm3
  00a71: movq   QWORD PTR [rsp+0x10],xmm5
  00a77: movq   QWORD PTR [rsp+0x18],xmm6
  00a7d: movabs rax,0x564da0797d70
  00a87: call   rax
  00a89: movq   xmm2,QWORD PTR [rsp]
  00a8e: movq   xmm3,QWORD PTR [rsp+0x8]
  00a94: movq   xmm5,QWORD PTR [rsp+0x10]
  00a9a: movq   xmm6,QWORD PTR [rsp+0x18]
  00aa0: add    rsp,0x20
  00aa4: mov    QWORD PTR [r14-0x98],rax
:00052 
:00054 %12 = %13.call z()                   [Vec]
  00aab: mov    rdi,QWORD PTR [r14-0x98]
  00ab2: test   rdi,0x7
  00ab9: jne    0x35c19
  00abf: cmp    DWORD PTR [rdi+0x4],0x28
  00ac3: jne    0x35c19
  00ac9: cmp    DWORD PTR [rip+0xffffffffffff0ae1],0x26        # 0xffff15b1
  00ad0: jne    0x35c19
  00ad6: mov    esi,DWORD PTR [rip+0x610]        # 0x10ec
  00adc: cmp    esi,0xffffffff
  00adf: je     0x35c42
  00ae5: cmp    WORD PTR [rdi+0x2],0x3
  00aea: jne    0xb03
  00af0: cmp    esi,0x6
  00af3: jge    0xb03
  00af9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00afe: jmp    0xb45
  00b03: sub    rsp,0x20
  00b07: movq   QWORD PTR [rsp],xmm2
  00b0c: movq   QWORD PTR [rsp+0x8],xmm3
  00b12: movq   QWORD PTR [rsp+0x10],xmm5
  00b18: movq   QWORD PTR [rsp+0x18],xmm6
  00b1e: movabs rax,0x564da0797d70
  00b28: call   rax
  00b2a: movq   xmm2,QWORD PTR [rsp]
  00b2f: movq   xmm3,QWORD PTR [rsp+0x8]
  00b35: movq   xmm5,QWORD PTR [rsp+0x10]
  00b3b: movq   xmm6,QWORD PTR [rsp+0x18]
  00b41: add    rsp,0x20
  00b45: mov    QWORD PTR [r14-0x90],rax
:00055 
:00057 %12 = %5 * %12                       [Float][Float]
  00b4c: mov    rdi,QWORD PTR [r14-0x90]
  00b53: test   rdi,0x1
  00b5a: jne    0x35ca1
  00b60: test   rdi,0x2
  00b67: je     0xba3
  00b6d: xorps  xmm4,xmm4
  00b70: movabs rax,0x8000000000000002
  00b7a: cmp    rdi,rax
  00b7d: je     0xbb5
  00b83: mov    rax,rdi
  00b86: sar    rax,0x3f
  00b8a: add    rax,0x2
  00b8e: and    rdi,0xfffffffffffffffc
  00b92: or     rdi,rax
  00b95: rol    rdi,0x3d
  00b99: movq   xmm4,rdi
  00b9e: jmp    0xbb5
  00ba3: call   0xfffee284
  00ba8: test   rax,rax
  00bab: je     0x35ca1
  00bb1: movq   xmm4,xmm0
  00bb5: mulsd  xmm4,xmm2
:00058 %11 = %11 + %12                      [Float][Float]
  00bb9: mov    rdi,QWORD PTR [r14-0x88]
  00bc0: test   rdi,0x1
  00bc7: jne    0x35cca
  00bcd: test   rdi,0x2
  00bd4: je     0xc10
  00bda: xorps  xmm7,xmm7
  00bdd: movabs rax,0x8000000000000002
  00be7: cmp    rdi,rax
  00bea: je     0xc22
  00bf0: mov    rax,rdi
  00bf3: sar    rax,0x3f
  00bf7: add    rax,0x2
  00bfb: and    rdi,0xfffffffffffffffc
  00bff: or     rdi,rax
  00c02: rol    rdi,0x3d
  00c06: movq   xmm7,rdi
  00c0b: jmp    0xc22
  00c10: call   0xfffee284
  00c15: test   rax,rax
  00c18: je     0x35cca
  00c1e: movq   xmm7,xmm0
  00c22: addsd  xmm7,xmm4
:00059 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c26: movq   xmm0,xmm5
  00c2a: call   0xfffee3a8
  00c2f: mov    QWORD PTR [r14-0x78],rax
  00c33: movq   xmm0,xmm6
  00c37: call   0xfffee3a8
  00c3c: mov    QWORD PTR [r14-0x80],rax
  00c40: movq   xmm0,xmm7
  00c44: call   0xfffee3a8
  00c49: mov    QWORD PTR [r14-0x88],rax
  00c50: mov    rdi,QWORD PTR [r14-0x70]
  00c54: test   rdi,0x7
  00c5b: jne    0x35d03
  00c61: cmp    DWORD PTR [rdi+0x4],0x29
  00c65: jne    0x35d03
  00c6b: cmp    DWORD PTR [rip+0xffffffffffff093f],0x26        # 0xffff15b1
  00c72: jne    0x35d03
  00c78: mov    r9,0x0
  00c7f: sub    rsp,0x30
  00c83: movq   QWORD PTR [rsp],xmm2
  00c88: movq   QWORD PTR [rsp+0x8],xmm3
  00c8e: movq   QWORD PTR [rsp+0x10],xmm4
  00c94: movq   QWORD PTR [rsp+0x18],xmm5
  00c9a: movq   QWORD PTR [rsp+0x20],xmm6
  00ca0: movq   QWORD PTR [rsp+0x28],xmm7
  00ca6: mov    rdx,rdi
  00ca9: mov    QWORD PTR [rsp-0x40],rcx
  00cae: mov    QWORD PTR [rsp-0x28],0x0
  00cb7: lea    rcx,[r14-0x78]
  00cbb: mov    r8,0x3
  00cc2: mov    rsi,QWORD PTR [rbx]
  00cc5: mov    QWORD PTR [rsp-0x18],rsi
  00cca: lea    rsi,[rsp-0x18]
  00ccf: mov    QWORD PTR [rbx],rsi
  00cd2: lea    r14,[rsp-0x10]
  00cd7: mov    QWORD PTR [rsp-0x20],r14
  00cdc: call   0x35d22
  00ce1: lea    r14,[rbp-0x8]
  00ce5: mov    QWORD PTR [rbx],r14
  00ce8: mov    r14,QWORD PTR [rbp-0x10]
  00cec: movq   xmm2,QWORD PTR [rsp]
  00cf1: movq   xmm3,QWORD PTR [rsp+0x8]
  00cf7: movq   xmm4,QWORD PTR [rsp+0x10]
  00cfd: movq   xmm5,QWORD PTR [rsp+0x18]
  00d03: movq   xmm6,QWORD PTR [rsp+0x20]
  00d09: movq   xmm7,QWORD PTR [rsp+0x28]
  00d0f: add    rsp,0x30
  00d13: movabs r13,0x564da0e951d0
  00d1d: test   rax,rax
  00d20: je     0xfffee22b
  00d26: mov    QWORD PTR [r14-0x68],rax
:00060 
:00062 %8 = literal[5111809]
  00d2a: mov    rax,0x9c0003
  00d31: mov    QWORD PTR [r14-0x70],rax
:00063 _ = %4.call times(&%8)               [Integer]
  00d35: mov    rdi,QWORD PTR [r14-0x50]
  00d39: test   rdi,0x1
  00d40: je     0x35d54
  00d46: cmp    DWORD PTR [rip+0xffffffffffff0864],0x26        # 0xffff15b1
  00d4d: jne    0x35d54
  00d53: mov    r9,QWORD PTR [r14-0x70]
  00d57: sub    rsp,0x20
  00d5b: movq   QWORD PTR [rsp],xmm4
  00d60: movq   QWORD PTR [rsp+0x8],xmm5
  00d66: movq   QWORD PTR [rsp+0x10],xmm6
  00d6c: movq   QWORD PTR [rsp+0x18],xmm7
  00d72: mov    rdx,rdi
  00d75: mov    QWORD PTR [rsp-0x40],rcx
  00d7a: mov    QWORD PTR [rsp-0x28],0x0
  00d83: lea    rcx,[r14-0x78]
  00d87: mov    r8,0x0
  00d8e: mov    rsi,QWORD PTR [rbx]
  00d91: mov    QWORD PTR [rsp-0x18],rsi
  00d96: lea    rsi,[rsp-0x18]
  00d9b: mov    QWORD PTR [rbx],rsi
  00d9e: lea    r14,[rsp-0x10]
  00da3: mov    QWORD PTR [rsp-0x20],r14
  00da8: call   0x35d73
  00dad: lea    r14,[rbp-0x8]
  00db1: mov    QWORD PTR [rbx],r14
  00db4: mov    r14,QWORD PTR [rbp-0x10]
  00db8: movq   xmm4,QWORD PTR [rsp]
  00dbd: movq   xmm5,QWORD PTR [rsp+0x8]
  00dc3: movq   xmm6,QWORD PTR [rsp+0x10]
  00dc9: movq   xmm7,QWORD PTR [rsp+0x18]
  00dcf: add    rsp,0x20
  00dd3: movabs r13,0x564da0e95210
  00ddd: test   rax,rax
  00de0: je     0xfffee22b
:00064 
:00066 %8 = %3.call to_f()                  [Integer]
  00de6: mov    rdi,QWORD PTR [r14-0x48]
  00dea: test   rdi,0x1
  00df1: je     0x35da5
  00df7: cmp    DWORD PTR [rip+0xffffffffffff07b3],0x26        # 0xffff15b1
  00dfe: jne    0x35da5
  00e04: sar    rdi,1
  00e07: cvtsi2sd xmm2,rdi
:00067 
:00069 %9 = %4.call to_f()                  [Integer]
  00e0c: mov    rdi,QWORD PTR [r14-0x50]
  00e10: test   rdi,0x1
  00e17: je     0x35dc4
  00e1d: cmp    DWORD PTR [rip+0xffffffffffff078d],0x26        # 0xffff15b1
  00e24: jne    0x35dc4
  00e2a: sar    rdi,1
  00e2d: cvtsi2sd xmm3,rdi
:00070 
:00072 %8 = %8 * %9                         [Float][Float]
  00e32: mulsd  xmm2,xmm3
:00073 %8 = %8 - %6                         [Float][Float]
  00e36: mov    rdi,QWORD PTR [r14-0x60]
  00e3a: test   rdi,0x1
  00e41: jne    0x35df0
  00e47: test   rdi,0x2
  00e4e: je     0xe8a
  00e54: xorps  xmm5,xmm5
  00e57: movabs rax,0x8000000000000002
  00e61: cmp    rdi,rax
  00e64: je     0xe9c
  00e6a: mov    rax,rdi
  00e6d: sar    rax,0x3f
  00e71: add    rax,0x2
  00e75: and    rdi,0xfffffffffffffffc
  00e79: or     rdi,rax
  00e7c: rol    rdi,0x3d
  00e80: movq   xmm5,rdi
  00e85: jmp    0xe9c
  00e8a: call   0xfffee284
  00e8f: test   rax,rax
  00e92: je     0x35df0
  00e98: movq   xmm5,xmm0
  00e9c: subsd  xmm2,xmm5
:00074 %9 = %3.call to_f()                  [Integer]
  00ea0: mov    rdi,QWORD PTR [r14-0x48]
  00ea4: test   rdi,0x1
  00eab: je     0x35e29
  00eb1: cmp    DWORD PTR [rip+0xffffffffffff06f9],0x26        # 0xffff15b1
  00eb8: jne    0x35e29
  00ebe: sar    rdi,1
  00ec1: cvtsi2sd xmm3,rdi
:00075 
:00077 %10 = %4.call to_f()                 [Integer]
  00ec6: mov    rdi,QWORD PTR [r14-0x50]
  00eca: test   rdi,0x1
  00ed1: je     0x35e55
  00ed7: cmp    DWORD PTR [rip+0xffffffffffff06d3],0x26        # 0xffff15b1
  00ede: jne    0x35e55
  00ee4: sar    rdi,1
  00ee7: cvtsi2sd xmm6,rdi
:00078 
:00080 %9 = %9 * %10                        [Float][Float]
  00eec: mulsd  xmm3,xmm6
:00081 %6 = %8 / %9                         [Float][Float]
  00ef0: movq   xmm5,xmm2
  00ef4: movq   rax,xmm3
  00ef9: test   rax,rax
  00efc: je     0xfffee250
  00f02: divsd  xmm5,xmm3
:00082 %9 = const[Vec]                      [Vec]
  00f06: mov    rax,QWORD PTR [rip+0xffffffffffff06ab]        # 0xffff15b8
  00f0d: cmp    rax,QWORD PTR [rip+0x1f4]        # 0x1108
  00f14: jne    0x35e8e
  00f1a: mov    rax,QWORD PTR [rip+0x1d7]        # 0x10f8
  00f21: mov    QWORD PTR [r14-0x78],rax
:00083 %10 = %6
:00084 %11 = %6
:00085 %12 = %6
:00086 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
  00f25: movq   xmm0,xmm5
  00f29: call   0xfffee3a8
  00f2e: mov    QWORD PTR [r14-0x80],rax
  00f32: movq   xmm0,xmm5
  00f36: call   0xfffee3a8
  00f3b: mov    QWORD PTR [r14-0x88],rax
  00f42: movq   xmm0,xmm5
  00f46: call   0xfffee3a8
  00f4b: mov    QWORD PTR [r14-0x90],rax
  00f52: mov    rdi,QWORD PTR [r14-0x78]
  00f56: test   rdi,0x7
  00f5d: jne    0x35f16
  00f63: cmp    DWORD PTR [rdi+0x4],0x29
  00f67: jne    0x35f16
  00f6d: cmp    DWORD PTR [rip+0xffffffffffff063d],0x26        # 0xffff15b1
  00f74: jne    0x35f16
  00f7a: mov    r9,0x0
  00f81: sub    rsp,0x10
  00f85: movq   QWORD PTR [rsp],xmm5
  00f8a: mov    rdx,rdi
  00f8d: mov    QWORD PTR [rsp-0x40],rcx
  00f92: mov    QWORD PTR [rsp-0x28],0x0
  00f9b: lea    rcx,[r14-0x80]
  00f9f: mov    r8,0x3
  00fa6: mov    rsi,QWORD PTR [rbx]
  00fa9: mov    QWORD PTR [rsp-0x18],rsi
  00fae: lea    rsi,[rsp-0x18]
  00fb3: mov    QWORD PTR [rbx],rsi
  00fb6: lea    r14,[rsp-0x10]
  00fbb: mov    QWORD PTR [rsp-0x20],r14
  00fc0: call   0x35f32
  00fc5: lea    r14,[rbp-0x8]
  00fc9: mov    QWORD PTR [rbx],r14
  00fcc: mov    r14,QWORD PTR [rbp-0x10]
  00fd0: movq   xmm5,QWORD PTR [rsp]
  00fd5: add    rsp,0x10
  00fd9: movabs r13,0x564da0e95380
  00fe3: test   rax,rax
  00fe6: je     0xfffee22b
  00fec: mov    QWORD PTR [r14-0x70],rax
:00087 
:00089 ret %8
  00ff0: mov    rax,QWORD PTR [r14-0x70]
  00ff4: leave  
  00ff5: ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x564da0eaa9d0
<== finished compile. elapsed:112.9µs
offset:Pos(77592) code: 8206 bytes  data: 310 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x34e54
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x34e63
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x34e63
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0448]        # 0xffff04a8
  00060: 00 	cmp    rax,QWORD PTR [rip+0x1fc1]        # 0x2028
  00067:    	jne    0x34e72
  0006d: 00 	mov    rax,QWORD PTR [rip+0x1fa4]        # 0x2018
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x34eb8
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x34eb8
  00093: 26 	cmp    DWORD PTR [rip+0xffffffffffff0407],0x26        # 0xffff04a1
  0009a:    	jne    0x34eb8
  000a0:    	mov    esi,DWORD PTR [rip+0x1f8e]        # 0x2034
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x34ec7
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: 4d 	movabs rax,0x564da0797d70
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x34ef0
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x34ef0
  000f8: 26 	cmp    DWORD PTR [rip+0xffffffffffff03a2],0x26        # 0xffff04a1
  000ff:    	jne    0x34ef0
  00105:    	mov    esi,DWORD PTR [rip+0x1f31]        # 0x203c
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x34eff
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: 4d 	movabs rax,0x564da0797d70
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x34f28
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x34f28
  0015d: 26 	cmp    DWORD PTR [rip+0xffffffffffff033d],0x26        # 0xffff04a1
  00164:    	jne    0x34f28
  0016a:    	mov    esi,DWORD PTR [rip+0x1ed4]        # 0x2044
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x34f37
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: 4d 	movabs rax,0x564da0797d70
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x34f60
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x34f60
  001c2: 26 	cmp    DWORD PTR [rip+0xffffffffffff02d8],0x26        # 0xffff04a1
  001c9:    	jne    0x34f60
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x34f6f
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: 4d 	movabs r13,0x564da0eaaab0
  00226:    	test   rax,rax
  00229:    	je     0xfffed11b
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdx,QWORD PTR [r14-0x38]
  00237:    	mov    rcx,QWORD PTR [r14-0x48]
  0023b:    	mov    r8,QWORD PTR [r14-0x50]
  0023f:    	mov    rdi,rbx
  00242:    	mov    rsi,r12
  00245: 4d 	movabs r9,0x564da0eaaac8
  0024f: 4d 	movabs rax,0x564da0819cc0
  00259:    	call   rax
  0025b: 4d 	movabs r13,0x564da0eaaad0
  00265:    	test   rax,rax
  00268:    	je     0xfffed11b
:00016 %3 = 1: i32
  0026e: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  00276: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff022b]        # 0xffff04a8
  0027d: 00 	cmp    rax,QWORD PTR [rip+0x1dd4]        # 0x2058
  00284:    	jne    0x34fa1
  0028a: 00 	mov    rax,QWORD PTR [rip+0x1db7]        # 0x2048
  00291:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  00295: 00 	movq   xmm2,QWORD PTR [rip+0x1dcb]        # 0x2068
  0029d: 00 	movabs rax,0x8000000000000002
  002a7:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002ab: 00 	movq   xmm3,QWORD PTR [rip+0x1dc5]        # 0x2078
  002b3: 00 	movabs rax,0x8000000000000002
  002bd:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002c1: 00 	movq   xmm4,QWORD PTR [rip+0x1dbf]        # 0x2088
  002c9: 00 	movabs rax,0x8000000000000002
  002d3:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d7:    	mov    rdi,QWORD PTR [r14-0x58]
  002db: 00 	test   rdi,0x7
  002e2:    	jne    0x34fe7
  002e8:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ec:    	jne    0x34fe7
  002f2: 26 	cmp    DWORD PTR [rip+0xffffffffffff01a8],0x26        # 0xffff04a1
  002f9:    	jne    0x34fe7
  002ff: 00 	mov    r9,0x0
  00306:    	sub    rsp,0x20
  0030a:    	movq   QWORD PTR [rsp],xmm2
  0030f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00315:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031b:    	mov    rdx,rdi
  0031e:    	mov    QWORD PTR [rsp-0x40],rcx
  00323: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0032c:    	lea    rcx,[r14-0x60]
  00330: 00 	mov    r8,0x3
  00337:    	mov    rsi,QWORD PTR [rbx]
  0033a:    	mov    QWORD PTR [rsp-0x18],rsi
  0033f:    	lea    rsi,[rsp-0x18]
  00344:    	mov    QWORD PTR [rbx],rsi
  00347:    	lea    r14,[rsp-0x10]
  0034c:    	mov    QWORD PTR [rsp-0x20],r14
  00351:    	call   0x34ff6
  00356:    	lea    r14,[rbp-0x8]
  0035a:    	mov    QWORD PTR [rbx],r14
  0035d:    	mov    r14,QWORD PTR [rbp-0x10]
  00361:    	movq   xmm2,QWORD PTR [rsp]
  00366:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0036c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00372:    	add    rsp,0x20
  00376: 4d 	movabs r13,0x564da0eaab40
  00380:    	test   rax,rax
  00383:    	je     0xfffed11b
  00389:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  0038d:    	sub    rsp,0x20
  00391:    	movq   QWORD PTR [rsp],xmm2
  00396:    	movq   QWORD PTR [rsp+0x8],xmm3
  0039c:    	movq   QWORD PTR [rsp+0x10],xmm4
  003a2:    	mov    rdx,QWORD PTR [r14-0x38]
  003a6:    	mov    rcx,QWORD PTR [r14-0x48]
  003aa:    	mov    r8,QWORD PTR [r14-0x50]
  003ae:    	mov    rdi,rbx
  003b1:    	mov    rsi,r12
  003b4: 4d 	movabs r9,0x564da0eaab58
  003be: 4d 	movabs rax,0x564da0819cc0
  003c8:    	call   rax
  003ca:    	movq   xmm2,QWORD PTR [rsp]
  003cf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003d5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003db:    	add    rsp,0x20
  003df: 4d 	movabs r13,0x564da0eaab60
  003e9:    	test   rax,rax
  003ec:    	je     0xfffed11b
:00025 %3 = %2.call x()                     [Vec]
  003f2:    	mov    rdi,QWORD PTR [r14-0x40]
  003f6: 00 	test   rdi,0x7
  003fd:    	jne    0x35028
  00403:    	cmp    DWORD PTR [rdi+0x4],0x28
  00407:    	jne    0x35028
  0040d: 26 	cmp    DWORD PTR [rip+0xffffffffffff008d],0x26        # 0xffff04a1
  00414:    	jne    0x35028
  0041a:    	mov    esi,DWORD PTR [rip+0x1c74]        # 0x2094
  00420:    	cmp    esi,0xffffffff
  00423:    	je     0x35037
  00429:    	cmp    WORD PTR [rdi+0x2],0x3
  0042e:    	jne    0x447
  00434:    	cmp    esi,0x6
  00437:    	jge    0x447
  0043d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00442:    	jmp    0x47d
  00447:    	sub    rsp,0x20
  0044b:    	movq   QWORD PTR [rsp],xmm2
  00450:    	movq   QWORD PTR [rsp+0x8],xmm3
  00456:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045c: 4d 	movabs rax,0x564da0797d70
  00466:    	call   rax
  00468:    	movq   xmm2,QWORD PTR [rsp]
  0046d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00473:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00479:    	add    rsp,0x20
  0047d:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  00481: 00 	movq   xmm5,QWORD PTR [rip+0x1c0f]        # 0x2098
  00489: 99 	movabs rax,0xff1999999999999a
  00493:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  00497:    	mov    rdi,QWORD PTR [r14-0x48]
  0049b: 00 	test   rdi,0x1
  004a2:    	jne    0x3508a
  004a8: 00 	test   rdi,0x2
  004af:    	je     0x4eb
  004b5:    	xorps  xmm6,xmm6
  004b8: 00 	movabs rax,0x8000000000000002
  004c2:    	cmp    rdi,rax
  004c5:    	je     0x4fd
  004cb:    	mov    rax,rdi
  004ce:    	sar    rax,0x3f
  004d2:    	add    rax,0x2
  004d6:    	and    rdi,0xfffffffffffffffc
  004da:    	or     rdi,rax
  004dd:    	rol    rdi,0x3d
  004e1:    	movq   xmm6,rdi
  004e6:    	jmp    0x4fd
  004eb:    	call   0xfffed174
  004f0:    	test   rax,rax
  004f3:    	je     0x3508a
  004f9:    	movq   xmm6,xmm0
  004fd:    	ucomisd xmm6,xmm5
  00501:    	jae    0x3519a
:00031 %3 = %2.call x()                     [Vec]
  00507:    	mov    rdi,QWORD PTR [r14-0x40]
  0050b: 00 	test   rdi,0x7
  00512:    	jne    0x35099
  00518:    	cmp    DWORD PTR [rdi+0x4],0x28
  0051c:    	jne    0x35099
  00522: 26 	cmp    DWORD PTR [rip+0xfffffffffffeff78],0x26        # 0xffff04a1
  00529:    	jne    0x35099
  0052f:    	mov    esi,DWORD PTR [rip+0x1b6f]        # 0x20a4
  00535:    	cmp    esi,0xffffffff
  00538:    	je     0x350a8
  0053e:    	cmp    WORD PTR [rdi+0x2],0x3
  00543:    	jne    0x55c
  00549:    	cmp    esi,0x6
  0054c:    	jge    0x55c
  00552:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00557:    	jmp    0x59e
  0055c:    	sub    rsp,0x20
  00560:    	movq   QWORD PTR [rsp],xmm2
  00565:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00571:    	movq   QWORD PTR [rsp+0x18],xmm5
  00577: 4d 	movabs rax,0x564da0797d70
  00581:    	call   rax
  00583:    	movq   xmm2,QWORD PTR [rsp]
  00588:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0058e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00594:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0059a:    	add    rsp,0x20
  0059e:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  005a2: 00 	movq   xmm5,QWORD PTR [rip+0x1afe]        # 0x20a8
  005aa: 99 	movabs rax,0xff1999999999999e
  005b4:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005b8:    	mov    rdi,QWORD PTR [r14-0x48]
  005bc: 00 	test   rdi,0x1
  005c3:    	jne    0x35107
  005c9: 00 	test   rdi,0x2
  005d0:    	je     0x60c
  005d6:    	xorps  xmm6,xmm6
  005d9: 00 	movabs rax,0x8000000000000002
  005e3:    	cmp    rdi,rax
  005e6:    	je     0x61e
  005ec:    	mov    rax,rdi
  005ef:    	sar    rax,0x3f
  005f3:    	add    rax,0x2
  005f7:    	and    rdi,0xfffffffffffffffc
  005fb:    	or     rdi,rax
  005fe:    	rol    rdi,0x3d
  00602:    	movq   xmm6,rdi
  00607:    	jmp    0x61e
  0060c:    	call   0xfffed174
  00611:    	test   rax,rax
  00614:    	je     0x35107
  0061a:    	movq   xmm6,xmm0
  0061e:    	ucomisd xmm6,xmm5
  00622:    	jbe    0x351b3
:00037 %3 = 1: i32
  00628: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00630:    	mov    rdi,QWORD PTR [r14-0x38]
  00634:    	mov    rsi,QWORD PTR [r14-0x48]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x35116
  00645:    	cmp    DWORD PTR [rdi+0x4],0xb
  00649:    	jne    0x35116
  0064f: 00 	test   rsi,0x1
  00656:    	je     0x35116
  0065c:    	sar    rsi,1
  0065f:    	sub    rsp,0x20
  00663:    	movq   QWORD PTR [rsp],xmm2
  00668:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00674:    	movq   QWORD PTR [rsp+0x18],xmm5
  0067a: 4d 	movabs rax,0x564da0819c40
  00684:    	call   rax
  00686:    	movq   xmm2,QWORD PTR [rsp]
  0068b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00691:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00697:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0069d:    	add    rsp,0x20
  006a1: 4d 	movabs r13,0x564da0eaac40
  006ab:    	test   rax,rax
  006ae:    	je     0xfffed11b
  006b4:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  006b8: 00 	movq   xmm5,QWORD PTR [rip+0x19f8]        # 0x20b8
  006c0: 00 	movabs rax,0xff80000000000002
  006ca:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  006ce:    	mov    rdi,QWORD PTR [r14-0x48]
  006d2: 00 	test   rdi,0x7
  006d9:    	jne    0x35125
  006df:    	cmp    DWORD PTR [rdi+0x4],0x28
  006e3:    	jne    0x35125
  006e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffefdb1],0x26        # 0xffff04a1
  006f0:    	jne    0x35125
  006f6:    	mov    esi,DWORD PTR [rip+0x19c8]        # 0x20c4
  006fc:    	cmp    esi,0xffffffff
  006ff:    	je     0x35134
  00705:    	cmp    WORD PTR [rdi+0x2],0x3
  0070a:    	jne    0x727
  00710:    	cmp    esi,0x6
  00713:    	jge    0x727
  00719:    	mov    rax,QWORD PTR [r14-0x50]
  0071d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00722:    	jmp    0x780
  00727:    	sub    rsp,0x20
  0072b:    	movq   QWORD PTR [rsp],xmm2
  00730:    	movq   QWORD PTR [rsp+0x8],xmm3
  00736:    	movq   QWORD PTR [rsp+0x10],xmm4
  0073c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00742:    	mov    rdx,QWORD PTR [r14-0x50]
  00746: 4d 	movabs rax,0x564da0797ff0
  00750:    	call   rax
  00752:    	movq   xmm2,QWORD PTR [rsp]
  00757:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0075d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00763:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00769:    	add    rsp,0x20
  0076d: 4d 	movabs r13,0x564da0eaac70
  00777:    	test   rax,rax
  0077a:    	je     0xfffed11b
:00041 
:00043 br =>:00088
  00780:    	jmp    0x35707
:00044 %3 = %2.call y()                     [<INVALID>]
  00785: 00 	cmp    DWORD PTR [rip+0x193c],0x0        # 0x20c8
  0078c:    	jl     0x351cc
  00792:    	je     0x351db
  00798: 01 	sub    DWORD PTR [rip+0x1929],0x1        # 0x20c8
  0079f:    	xor    rdi,rdi
  007a2:    	jmp    0x351cc
  007a7:    	sub    rsp,0x20
  007ab:    	movq   QWORD PTR [rsp],xmm2
  007b0:    	movq   QWORD PTR [rsp+0x8],xmm3
  007b6:    	movq   QWORD PTR [rsp+0x10],xmm4
  007bc:    	movq   QWORD PTR [rsp+0x18],xmm5
  007c2:    	mov    rdi,QWORD PTR [r14-0x40]
  007c6: 4d 	movabs rax,0x564da0826bb0
  007d0:    	call   rax
  007d2:    	mov    r15d,eax
  007d5: 4d 	movabs r13,0x564da0eaaca0
  007df:    	cmp    QWORD PTR [r13+0x8],0x0
  007e4:    	je     0x351f6
  007ea:    	cmp    r15d,DWORD PTR [r13-0x8]
  007ee:    	jne    0x351f6
  007f4:    	mov    eax,DWORD PTR [rip+0xfffffffffffefca7]        # 0xffff04a1
  007fa:    	cmp    DWORD PTR [r13-0x4],eax
  007fe:    	jne    0x351f6
  00804: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0080d:    	mov    rax,QWORD PTR [r14-0x40]
  00811:    	mov    QWORD PTR [rsp-0x40],rax
  00816: 00 	mov    rdi,0x0
  0081d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00826:    	mov    rax,QWORD PTR [r13+0x10]
  0082a:    	mov    QWORD PTR [rsp-0x30],rax
  0082f:    	mov    rax,QWORD PTR [r13+0x8]
  00833:    	mov    r13,QWORD PTR [r13+0x18]
  00837:    	mov    rsi,QWORD PTR [rbx]
  0083a:    	mov    QWORD PTR [rsp-0x18],rsi
  0083f:    	lea    rsi,[rsp-0x18]
  00844:    	mov    QWORD PTR [rbx],rsi
  00847:    	lea    r14,[rsp-0x10]
  0084c:    	mov    QWORD PTR [rsp-0x20],r14
  00851:    	call   rax
  00853:    	lea    r14,[rbp-0x8]
  00857:    	mov    QWORD PTR [rbx],r14
  0085a:    	mov    r14,QWORD PTR [rbp-0x10]
  0085e:    	movq   xmm2,QWORD PTR [rsp]
  00863:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00869:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0086f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00875:    	add    rsp,0x20
  00879:    	test   rax,rax
  0087c:    	je     0x35240
  00882:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  00886: 00 	movq   xmm5,QWORD PTR [rip+0x184a]        # 0x20d8
  0088e: 99 	movabs rax,0xff1999999999999a
  00898:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  0089c:    	mov    rdi,QWORD PTR [r14-0x48]
  008a0:    	mov    rsi,QWORD PTR [r14-0x50]
  008a4: 00 	test   rdi,0x1
  008ab:    	je     0x3524f
  008b1: 00 	test   rsi,0x1
  008b8:    	je     0x3524f
  008be:    	cmp    rdi,rsi
  008c1:    	jge    0x353ab
:00050 %3 = %2.call y()                     [<INVALID>]
  008c7:    	sub    rsp,0x20
  008cb:    	movq   QWORD PTR [rsp],xmm2
  008d0:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d6:    	movq   QWORD PTR [rsp+0x10],xmm4
  008dc:    	movq   QWORD PTR [rsp+0x18],xmm5
  008e2:    	mov    rdi,QWORD PTR [r14-0x40]
  008e6: 4d 	movabs rax,0x564da0826bb0
  008f0:    	call   rax
  008f2:    	mov    r15d,eax
  008f5: 4d 	movabs r13,0x564da0eaad00
  008ff:    	cmp    QWORD PTR [r13+0x8],0x0
  00904:    	je     0x352a4
  0090a:    	cmp    r15d,DWORD PTR [r13-0x8]
  0090e:    	jne    0x352a4
  00914:    	mov    eax,DWORD PTR [rip+0xfffffffffffefb87]        # 0xffff04a1
  0091a:    	cmp    DWORD PTR [r13-0x4],eax
  0091e:    	jne    0x352a4
  00924: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0092d:    	mov    rax,QWORD PTR [r14-0x40]
  00931:    	mov    QWORD PTR [rsp-0x40],rax
  00936: 00 	mov    rdi,0x0
  0093d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00946:    	mov    rax,QWORD PTR [r13+0x10]
  0094a:    	mov    QWORD PTR [rsp-0x30],rax
  0094f:    	mov    rax,QWORD PTR [r13+0x8]
  00953:    	mov    r13,QWORD PTR [r13+0x18]
  00957:    	mov    rsi,QWORD PTR [rbx]
  0095a:    	mov    QWORD PTR [rsp-0x18],rsi
  0095f:    	lea    rsi,[rsp-0x18]
  00964:    	mov    QWORD PTR [rbx],rsi
  00967:    	lea    r14,[rsp-0x10]
  0096c:    	mov    QWORD PTR [rsp-0x20],r14
  00971:    	call   rax
  00973:    	lea    r14,[rbp-0x8]
  00977:    	mov    QWORD PTR [rbx],r14
  0097a:    	mov    r14,QWORD PTR [rbp-0x10]
  0097e:    	movq   xmm2,QWORD PTR [rsp]
  00983:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00989:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0098f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00995:    	add    rsp,0x20
  00999:    	test   rax,rax
  0099c:    	je     0x352ee
  009a2:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  009a6: 00 	movq   xmm5,QWORD PTR [rip+0x173a]        # 0x20e8
  009ae: 99 	movabs rax,0xff1999999999999e
  009b8:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  009bc:    	mov    rdi,QWORD PTR [r14-0x48]
  009c0:    	mov    rsi,QWORD PTR [r14-0x50]
  009c4: 00 	test   rdi,0x1
  009cb:    	je     0x352fd
  009d1: 00 	test   rsi,0x1
  009d8:    	je     0x352fd
  009de:    	cmp    rdi,rsi
  009e1:    	jle    0x353c4
:00056 %3 = 1: i32
  009e7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  009ef:    	sub    rsp,0x20
  009f3:    	movq   QWORD PTR [rsp],xmm2
  009f8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009fe:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a04:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a0a:    	mov    rdi,rbx
  00a0d:    	mov    rsi,r12
  00a10:    	mov    rdx,QWORD PTR [r14-0x38]
  00a14:    	mov    rcx,QWORD PTR [r14-0x48]
  00a18: 4d 	movabs r8,0x564da0eaad68
  00a22: 4d 	movabs rax,0x564da0819b10
  00a2c:    	call   rax
  00a2e:    	movq   xmm2,QWORD PTR [rsp]
  00a33:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a39:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a3f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a45:    	add    rsp,0x20
  00a49: 4d 	movabs r13,0x564da0eaad70
  00a53:    	test   rax,rax
  00a56:    	je     0xfffed11b
  00a5c:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  00a60: 00 	movq   xmm5,QWORD PTR [rip+0x1690]        # 0x20f8
  00a68: 00 	movabs rax,0xff80000000000002
  00a72:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a76:    	sub    rsp,0x20
  00a7a:    	movq   QWORD PTR [rsp],xmm2
  00a7f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a85:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a8b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a91:    	mov    rdi,QWORD PTR [r14-0x48]
  00a95: 4d 	movabs rax,0x564da0826bb0
  00a9f:    	call   rax
  00aa1:    	mov    r15d,eax
  00aa4: 4d 	movabs r13,0x564da0eaad90
  00aae:    	cmp    QWORD PTR [r13+0x8],0x0
  00ab3:    	je     0x35352
  00ab9:    	cmp    r15d,DWORD PTR [r13-0x8]
  00abd:    	jne    0x35352
  00ac3:    	mov    eax,DWORD PTR [rip+0xfffffffffffef9d8]        # 0xffff04a1
  00ac9:    	cmp    DWORD PTR [r13-0x4],eax
  00acd:    	jne    0x35352
  00ad3: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00adc:    	mov    rax,QWORD PTR [r14-0x48]
  00ae0:    	mov    QWORD PTR [rsp-0x40],rax
  00ae5: 00 	mov    rdi,0x1
  00aec:    	mov    rax,QWORD PTR [r14-0x50]
  00af0:    	mov    QWORD PTR [rsp-0x48],rax
  00af5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00afe:    	mov    rax,QWORD PTR [r13+0x10]
  00b02:    	mov    QWORD PTR [rsp-0x30],rax
  00b07:    	mov    rax,QWORD PTR [r13+0x8]
  00b0b:    	mov    r13,QWORD PTR [r13+0x18]
  00b0f:    	mov    rsi,QWORD PTR [rbx]
  00b12:    	mov    QWORD PTR [rsp-0x18],rsi
  00b17:    	lea    rsi,[rsp-0x18]
  00b1c:    	mov    QWORD PTR [rbx],rsi
  00b1f:    	lea    r14,[rsp-0x10]
  00b24:    	mov    QWORD PTR [rsp-0x20],r14
  00b29:    	call   rax
  00b2b:    	lea    r14,[rbp-0x8]
  00b2f:    	mov    QWORD PTR [rbx],r14
  00b32:    	mov    r14,QWORD PTR [rbp-0x10]
  00b36:    	movq   xmm2,QWORD PTR [rsp]
  00b3b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b41:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b47:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b4d:    	add    rsp,0x20
  00b51:    	test   rax,rax
  00b54:    	je     0x3539c
:00060 
:00062 br =>:00088
  00b5a:    	jmp    0x35720
:00063 %3 = %2.call z()                     [<INVALID>]
  00b5f: 00 	cmp    DWORD PTR [rip+0x159a],0x0        # 0x2100
  00b66:    	jl     0x353dd
  00b6c:    	je     0x353ec
  00b72: 01 	sub    DWORD PTR [rip+0x1587],0x1        # 0x2100
  00b79:    	xor    rdi,rdi
  00b7c:    	jmp    0x353dd
  00b81:    	sub    rsp,0x20
  00b85:    	movq   QWORD PTR [rsp],xmm2
  00b8a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b90:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b96:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b9c:    	mov    rdi,QWORD PTR [r14-0x40]
  00ba0: 4d 	movabs rax,0x564da0826bb0
  00baa:    	call   rax
  00bac:    	mov    r15d,eax
  00baf: 4d 	movabs r13,0x564da0eaadd0
  00bb9:    	cmp    QWORD PTR [r13+0x8],0x0
  00bbe:    	je     0x35407
  00bc4:    	cmp    r15d,DWORD PTR [r13-0x8]
  00bc8:    	jne    0x35407
  00bce:    	mov    eax,DWORD PTR [rip+0xfffffffffffef8cd]        # 0xffff04a1
  00bd4:    	cmp    DWORD PTR [r13-0x4],eax
  00bd8:    	jne    0x35407
  00bde: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00be7:    	mov    rax,QWORD PTR [r14-0x40]
  00beb:    	mov    QWORD PTR [rsp-0x40],rax
  00bf0: 00 	mov    rdi,0x0
  00bf7: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00c00:    	mov    rax,QWORD PTR [r13+0x10]
  00c04:    	mov    QWORD PTR [rsp-0x30],rax
  00c09:    	mov    rax,QWORD PTR [r13+0x8]
  00c0d:    	mov    r13,QWORD PTR [r13+0x18]
  00c11:    	mov    rsi,QWORD PTR [rbx]
  00c14:    	mov    QWORD PTR [rsp-0x18],rsi
  00c19:    	lea    rsi,[rsp-0x18]
  00c1e:    	mov    QWORD PTR [rbx],rsi
  00c21:    	lea    r14,[rsp-0x10]
  00c26:    	mov    QWORD PTR [rsp-0x20],r14
  00c2b:    	call   rax
  00c2d:    	lea    r14,[rbp-0x8]
  00c31:    	mov    QWORD PTR [rbx],r14
  00c34:    	mov    r14,QWORD PTR [rbp-0x10]
  00c38:    	movq   xmm2,QWORD PTR [rsp]
  00c3d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c43:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c49:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c4f:    	add    rsp,0x20
  00c53:    	test   rax,rax
  00c56:    	je     0x35451
  00c5c:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00c60: 00 	movq   xmm5,QWORD PTR [rip+0x14a0]        # 0x2108
  00c68: 99 	movabs rax,0xff1999999999999a
  00c72:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00c76:    	mov    rdi,QWORD PTR [r14-0x48]
  00c7a:    	mov    rsi,QWORD PTR [r14-0x50]
  00c7e: 00 	test   rdi,0x1
  00c85:    	je     0x35460
  00c8b: 00 	test   rsi,0x1
  00c92:    	je     0x35460
  00c98:    	cmp    rdi,rsi
  00c9b:    	jge    0x355bc
:00069 %3 = %2.call z()                     [<INVALID>]
  00ca1:    	sub    rsp,0x20
  00ca5:    	movq   QWORD PTR [rsp],xmm2
  00caa:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cb6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cbc:    	mov    rdi,QWORD PTR [r14-0x40]
  00cc0: 4d 	movabs rax,0x564da0826bb0
  00cca:    	call   rax
  00ccc:    	mov    r15d,eax
  00ccf: 4d 	movabs r13,0x564da0eaae30
  00cd9:    	cmp    QWORD PTR [r13+0x8],0x0
  00cde:    	je     0x354b5
  00ce4:    	cmp    r15d,DWORD PTR [r13-0x8]
  00ce8:    	jne    0x354b5
  00cee:    	mov    eax,DWORD PTR [rip+0xfffffffffffef7ad]        # 0xffff04a1
  00cf4:    	cmp    DWORD PTR [r13-0x4],eax
  00cf8:    	jne    0x354b5
  00cfe: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d07:    	mov    rax,QWORD PTR [r14-0x40]
  00d0b:    	mov    QWORD PTR [rsp-0x40],rax
  00d10: 00 	mov    rdi,0x0
  00d17: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d20:    	mov    rax,QWORD PTR [r13+0x10]
  00d24:    	mov    QWORD PTR [rsp-0x30],rax
  00d29:    	mov    rax,QWORD PTR [r13+0x8]
  00d2d:    	mov    r13,QWORD PTR [r13+0x18]
  00d31:    	mov    rsi,QWORD PTR [rbx]
  00d34:    	mov    QWORD PTR [rsp-0x18],rsi
  00d39:    	lea    rsi,[rsp-0x18]
  00d3e:    	mov    QWORD PTR [rbx],rsi
  00d41:    	lea    r14,[rsp-0x10]
  00d46:    	mov    QWORD PTR [rsp-0x20],r14
  00d4b:    	call   rax
  00d4d:    	lea    r14,[rbp-0x8]
  00d51:    	mov    QWORD PTR [rbx],r14
  00d54:    	mov    r14,QWORD PTR [rbp-0x10]
  00d58:    	movq   xmm2,QWORD PTR [rsp]
  00d5d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d63:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d69:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d6f:    	add    rsp,0x20
  00d73:    	test   rax,rax
  00d76:    	je     0x354ff
  00d7c:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00d80: 00 	movq   xmm5,QWORD PTR [rip+0x1390]        # 0x2118
  00d88: 99 	movabs rax,0xff1999999999999e
  00d92:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d96:    	mov    rdi,QWORD PTR [r14-0x48]
  00d9a:    	mov    rsi,QWORD PTR [r14-0x50]
  00d9e: 00 	test   rdi,0x1
  00da5:    	je     0x3550e
  00dab: 00 	test   rsi,0x1
  00db2:    	je     0x3550e
  00db8:    	cmp    rdi,rsi
  00dbb:    	jle    0x355d5
:00075 %3 = 1: i32
  00dc1: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00dc9:    	sub    rsp,0x20
  00dcd:    	movq   QWORD PTR [rsp],xmm2
  00dd2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dd8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dde:    	movq   QWORD PTR [rsp+0x18],xmm5
  00de4:    	mov    rdi,rbx
  00de7:    	mov    rsi,r12
  00dea:    	mov    rdx,QWORD PTR [r14-0x38]
  00dee:    	mov    rcx,QWORD PTR [r14-0x48]
  00df2: 4d 	movabs r8,0x564da0eaae98
  00dfc: 4d 	movabs rax,0x564da0819b10
  00e06:    	call   rax
  00e08:    	movq   xmm2,QWORD PTR [rsp]
  00e0d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e13:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e19:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e1f:    	add    rsp,0x20
  00e23: 4d 	movabs r13,0x564da0eaaea0
  00e2d:    	test   rax,rax
  00e30:    	je     0xfffed11b
  00e36:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00e3a: 00 	movq   xmm5,QWORD PTR [rip+0x12e6]        # 0x2128
  00e42: 00 	movabs rax,0xff80000000000002
  00e4c:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00e50:    	sub    rsp,0x20
  00e54:    	movq   QWORD PTR [rsp],xmm2
  00e59:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e5f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e65:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e6b:    	mov    rdi,QWORD PTR [r14-0x48]
  00e6f: 4d 	movabs rax,0x564da0826bb0
  00e79:    	call   rax
  00e7b:    	mov    r15d,eax
  00e7e: 4d 	movabs r13,0x564da0eaaec0
  00e88:    	cmp    QWORD PTR [r13+0x8],0x0
  00e8d:    	je     0x35563
  00e93:    	cmp    r15d,DWORD PTR [r13-0x8]
  00e97:    	jne    0x35563
  00e9d:    	mov    eax,DWORD PTR [rip+0xfffffffffffef5fe]        # 0xffff04a1
  00ea3:    	cmp    DWORD PTR [r13-0x4],eax
  00ea7:    	jne    0x35563
  00ead: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00eb6:    	mov    rax,QWORD PTR [r14-0x48]
  00eba:    	mov    QWORD PTR [rsp-0x40],rax
  00ebf: 00 	mov    rdi,0x1
  00ec6:    	mov    rax,QWORD PTR [r14-0x50]
  00eca:    	mov    QWORD PTR [rsp-0x48],rax
  00ecf: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00ed8:    	mov    rax,QWORD PTR [r13+0x10]
  00edc:    	mov    QWORD PTR [rsp-0x30],rax
  00ee1:    	mov    rax,QWORD PTR [r13+0x8]
  00ee5:    	mov    r13,QWORD PTR [r13+0x18]
  00ee9:    	mov    rsi,QWORD PTR [rbx]
  00eec:    	mov    QWORD PTR [rsp-0x18],rsi
  00ef1:    	lea    rsi,[rsp-0x18]
  00ef6:    	mov    QWORD PTR [rbx],rsi
  00ef9:    	lea    r14,[rsp-0x10]
  00efe:    	mov    QWORD PTR [rsp-0x20],r14
  00f03:    	call   rax
  00f05:    	lea    r14,[rbp-0x8]
  00f09:    	mov    QWORD PTR [rbx],r14
  00f0c:    	mov    r14,QWORD PTR [rbp-0x10]
  00f10:    	movq   xmm2,QWORD PTR [rsp]
  00f15:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f1b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f21:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f27:    	add    rsp,0x20
  00f2b:    	test   rax,rax
  00f2e:    	je     0x355ad
:00079 
:00081 br =>:00088
  00f34:    	jmp    0x35739
:00082 %3 = 1: i32
  00f39: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f41:    	sub    rsp,0x20
  00f45:    	movq   QWORD PTR [rsp],xmm2
  00f4a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f50:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f56:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f5c:    	mov    rdi,rbx
  00f5f:    	mov    rsi,r12
  00f62:    	mov    rdx,QWORD PTR [r14-0x38]
  00f66:    	mov    rcx,QWORD PTR [r14-0x48]
  00f6a: 4d 	movabs r8,0x564da0eaaf08
  00f74: 4d 	movabs rax,0x564da0819b10
  00f7e:    	call   rax
  00f80:    	movq   xmm2,QWORD PTR [rsp]
  00f85:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f8b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f91:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f97:    	add    rsp,0x20
  00f9b: 4d 	movabs r13,0x564da0eaaf10
  00fa5:    	test   rax,rax
  00fa8:    	je     0xfffed11b
  00fae:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00fb2: 00 	movq   xmm5,QWORD PTR [rip+0x117e]        # 0x2138
  00fba: 00 	movabs rax,0xff80000000000002
  00fc4:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fc8: 00 	cmp    DWORD PTR [rip+0x1171],0x0        # 0x2140
  00fcf:    	jl     0x355ee
  00fd5:    	je     0x355fd
  00fdb: 01 	sub    DWORD PTR [rip+0x115e],0x1        # 0x2140
  00fe2:    	xor    rdi,rdi
  00fe5:    	jmp    0x355ee
  00fea:    	sub    rsp,0x20
  00fee:    	movq   QWORD PTR [rsp],xmm2
  00ff3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fff:    	movq   QWORD PTR [rsp+0x18],xmm5
  01005:    	mov    rdi,QWORD PTR [r14-0x48]
  01009: 4d 	movabs rax,0x564da0826bb0
  01013:    	call   rax
  01015:    	mov    r15d,eax
  01018: 4d 	movabs r13,0x564da0eaaf30
  01022:    	cmp    QWORD PTR [r13+0x8],0x0
  01027:    	je     0x35618
  0102d:    	cmp    r15d,DWORD PTR [r13-0x8]
  01031:    	jne    0x35618
  01037:    	mov    eax,DWORD PTR [rip+0xfffffffffffef464]        # 0xffff04a1
  0103d:    	cmp    DWORD PTR [r13-0x4],eax
  01041:    	jne    0x35618
  01047: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01050:    	mov    rax,QWORD PTR [r14-0x48]
  01054:    	mov    QWORD PTR [rsp-0x40],rax
  01059: 00 	mov    rdi,0x1
  01060:    	mov    rax,QWORD PTR [r14-0x50]
  01064:    	mov    QWORD PTR [rsp-0x48],rax
  01069: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01072:    	mov    rax,QWORD PTR [r13+0x10]
  01076:    	mov    QWORD PTR [rsp-0x30],rax
  0107b:    	mov    rax,QWORD PTR [r13+0x8]
  0107f:    	mov    r13,QWORD PTR [r13+0x18]
  01083:    	mov    rsi,QWORD PTR [rbx]
  01086:    	mov    QWORD PTR [rsp-0x18],rsi
  0108b:    	lea    rsi,[rsp-0x18]
  01090:    	mov    QWORD PTR [rbx],rsi
  01093:    	lea    r14,[rsp-0x10]
  01098:    	mov    QWORD PTR [rsp-0x20],r14
  0109d:    	call   rax
  0109f:    	lea    r14,[rbp-0x8]
  010a3:    	mov    QWORD PTR [rbx],r14
  010a6:    	mov    r14,QWORD PTR [rbp-0x10]
  010aa:    	movq   xmm2,QWORD PTR [rsp]
  010af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010c1:    	add    rsp,0x20
  010c5:    	test   rax,rax
  010c8:    	je     0x35662
:00086 
:00088 %3 = 0: i32
  010ce: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  010d6: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  010de:    	mov    rdi,QWORD PTR [r14-0x38]
  010e2:    	mov    rsi,QWORD PTR [r14-0x58]
  010e6: 00 	test   rdi,0x7
  010ed:    	jne    0x35671
  010f3:    	cmp    DWORD PTR [rdi+0x4],0xb
  010f7:    	jne    0x35671
  010fd: 00 	test   rsi,0x1
  01104:    	je     0x35671
  0110a:    	sar    rsi,1
  0110d:    	sub    rsp,0x20
  01111:    	movq   QWORD PTR [rsp],xmm2
  01116:    	movq   QWORD PTR [rsp+0x8],xmm3
  0111c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01122:    	movq   QWORD PTR [rsp+0x18],xmm5
  01128: 4d 	movabs rax,0x564da0819c40
  01132:    	call   rax
  01134:    	movq   xmm2,QWORD PTR [rsp]
  01139:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0113f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01145:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0114b:    	add    rsp,0x20
  0114f: 4d 	movabs r13,0x564da0eaaf80
  01159:    	test   rax,rax
  0115c:    	je     0xfffed11b
  01162:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01166: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0116e:    	mov    rdi,QWORD PTR [r14-0x38]
  01172:    	mov    rsi,QWORD PTR [r14-0x60]
  01176: 00 	test   rdi,0x7
  0117d:    	jne    0x35680
  01183:    	cmp    DWORD PTR [rdi+0x4],0xb
  01187:    	jne    0x35680
  0118d: 00 	test   rsi,0x1
  01194:    	je     0x35680
  0119a:    	sar    rsi,1
  0119d:    	sub    rsp,0x20
  011a1:    	movq   QWORD PTR [rsp],xmm3
  011a6:    	movq   QWORD PTR [rsp+0x8],xmm4
  011ac:    	movq   QWORD PTR [rsp+0x10],xmm5
  011b2: 4d 	movabs rax,0x564da0819c40
  011bc:    	call   rax
  011be:    	movq   xmm3,QWORD PTR [rsp]
  011c3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011cf:    	add    rsp,0x20
  011d3: 4d 	movabs r13,0x564da0eaafa0
  011dd:    	test   rax,rax
  011e0:    	je     0xfffed11b
  011e6:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  011ea:    	mov    rdi,QWORD PTR [r14-0x58]
  011ee: 00 	test   rdi,0x7
  011f5:    	jne    0x3568f
  011fb:    	cmp    DWORD PTR [rdi+0x4],0x28
  011ff:    	jne    0x3568f
  01205: 26 	cmp    DWORD PTR [rip+0xfffffffffffef295],0x26        # 0xffff04a1
  0120c:    	jne    0x3568f
  01212:    	sub    rsp,0x10
  01216:    	movq   QWORD PTR [rsp],xmm3
  0121b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01221: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0122a:    	mov    rax,QWORD PTR [r14-0x58]
  0122e:    	mov    QWORD PTR [rsp-0x40],rax
  01233: 00 	mov    rdi,0x1
  0123a:    	mov    rax,QWORD PTR [r14-0x60]
  0123e:    	mov    QWORD PTR [rsp-0x48],rax
  01243: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0124c: 09 	movabs rax,0x900000041
  01256:    	mov    QWORD PTR [rsp-0x30],rax
  0125b: 4d 	movabs r13,0x564da0e89170
  01265:    	mov    rsi,QWORD PTR [rbx]
  01268:    	mov    QWORD PTR [rsp-0x18],rsi
  0126d:    	lea    rsi,[rsp-0x18]
  01272:    	mov    QWORD PTR [rbx],rsi
  01275:    	lea    r14,[rsp-0x10]
  0127a:    	mov    QWORD PTR [rsp-0x20],r14
  0127f:    	call   0xffffa09f
  01284:    	lea    r14,[rbp-0x8]
  01288:    	mov    QWORD PTR [rbx],r14
  0128b:    	mov    r14,QWORD PTR [rbp-0x10]
  0128f:    	movq   xmm3,QWORD PTR [rsp]
  01294:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0129a:    	add    rsp,0x10
  0129e: 4d 	movabs r13,0x564da0eaafc0
  012a8:    	test   rax,rax
  012ab:    	je     0xfffed11b
  012b1:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  012b5:    	sub    rsp,0x10
  012b9:    	movq   QWORD PTR [rsp],xmm3
  012be:    	movq   QWORD PTR [rsp+0x8],xmm4
  012c4:    	mov    rdx,QWORD PTR [r14-0x38]
  012c8:    	mov    rcx,QWORD PTR [r14-0x48]
  012cc:    	mov    r8,QWORD PTR [r14-0x50]
  012d0:    	mov    rdi,rbx
  012d3:    	mov    rsi,r12
  012d6: 4d 	movabs r9,0x564da0eaafd8
  012e0: 4d 	movabs rax,0x564da0819cc0
  012ea:    	call   rax
  012ec:    	movq   xmm3,QWORD PTR [rsp]
  012f1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012f7:    	add    rsp,0x10
  012fb: 4d 	movabs r13,0x564da0eaafe0
  01305:    	test   rax,rax
  01308:    	je     0xfffed11b
:00097 %3 = 0: i32
  0130e: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  01316: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0131e:    	mov    rdi,QWORD PTR [r14-0x38]
  01322:    	mov    rsi,QWORD PTR [r14-0x58]
  01326: 00 	test   rdi,0x7
  0132d:    	jne    0x3569e
  01333:    	cmp    DWORD PTR [rdi+0x4],0xb
  01337:    	jne    0x3569e
  0133d: 00 	test   rsi,0x1
  01344:    	je     0x3569e
  0134a:    	sar    rsi,1
  0134d:    	sub    rsp,0x10
  01351:    	movq   QWORD PTR [rsp],xmm3
  01356:    	movq   QWORD PTR [rsp+0x8],xmm4
  0135c: 4d 	movabs rax,0x564da0819c40
  01366:    	call   rax
  01368:    	movq   xmm3,QWORD PTR [rsp]
  0136d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01373:    	add    rsp,0x10
  01377: 4d 	movabs r13,0x564da0eab010
  01381:    	test   rax,rax
  01384:    	je     0xfffed11b
  0138a:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0138e:    	mov    rdi,QWORD PTR [r14-0x58]
  01392: 00 	test   rdi,0x7
  01399:    	jne    0x356ad
  0139f:    	cmp    DWORD PTR [rdi+0x4],0x28
  013a3:    	jne    0x356ad
  013a9: 26 	cmp    DWORD PTR [rip+0xfffffffffffef0f1],0x26        # 0xffff04a1
  013b0:    	jne    0x356ad
  013b6:    	sub    rsp,0x10
  013ba:    	movq   QWORD PTR [rsp],xmm3
  013bf:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013ce:    	mov    rax,QWORD PTR [r14-0x58]
  013d2:    	mov    QWORD PTR [rsp-0x40],rax
  013d7: 00 	mov    rdi,0x0
  013de: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013e7: 07 	movabs rax,0x1000700000044
  013f1:    	mov    QWORD PTR [rsp-0x30],rax
  013f6: 4d 	movabs r13,0x564da0e6bec0
  01400:    	mov    rsi,QWORD PTR [rbx]
  01403:    	mov    QWORD PTR [rsp-0x18],rsi
  01408:    	lea    rsi,[rsp-0x18]
  0140d:    	mov    QWORD PTR [rbx],rsi
  01410:    	lea    r14,[rsp-0x10]
  01415:    	mov    QWORD PTR [rsp-0x20],r14
  0141a:    	call   0xffff0d54
  0141f:    	lea    r14,[rbp-0x8]
  01423:    	mov    QWORD PTR [rbx],r14
  01426:    	mov    r14,QWORD PTR [rbp-0x10]
  0142a:    	movq   xmm3,QWORD PTR [rsp]
  0142f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01435:    	add    rsp,0x10
  01439: 4d 	movabs r13,0x564da0eab030
  01443:    	test   rax,rax
  01446:    	je     0xfffed11b
  0144c:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01450:    	sub    rsp,0x10
  01454:    	movq   QWORD PTR [rsp],xmm3
  01459:    	movq   QWORD PTR [rsp+0x8],xmm4
  0145f:    	mov    rdx,QWORD PTR [r14-0x38]
  01463:    	mov    rcx,QWORD PTR [r14-0x48]
  01467:    	mov    r8,QWORD PTR [r14-0x50]
  0146b:    	mov    rdi,rbx
  0146e:    	mov    rsi,r12
  01471: 4d 	movabs r9,0x564da0eab048
  0147b: 4d 	movabs rax,0x564da0819cc0
  01485:    	call   rax
  01487:    	movq   xmm3,QWORD PTR [rsp]
  0148c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01492:    	add    rsp,0x10
  01496: 4d 	movabs r13,0x564da0eab050
  014a0:    	test   rax,rax
  014a3:    	je     0xfffed11b
:00104 %3 = 1: i32
  014a9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  014b1: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  014b9:    	mov    rdi,QWORD PTR [r14-0x38]
  014bd:    	mov    rsi,QWORD PTR [r14-0x58]
  014c1: 00 	test   rdi,0x7
  014c8:    	jne    0x356bc
  014ce:    	cmp    DWORD PTR [rdi+0x4],0xb
  014d2:    	jne    0x356bc
  014d8: 00 	test   rsi,0x1
  014df:    	je     0x356bc
  014e5:    	sar    rsi,1
  014e8:    	sub    rsp,0x10
  014ec:    	movq   QWORD PTR [rsp],xmm3
  014f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  014f7: 4d 	movabs rax,0x564da0819c40
  01501:    	call   rax
  01503:    	movq   xmm3,QWORD PTR [rsp]
  01508:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0150e:    	add    rsp,0x10
  01512: 4d 	movabs r13,0x564da0eab080
  0151c:    	test   rax,rax
  0151f:    	je     0xfffed11b
  01525:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01529: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01531:    	mov    rdi,QWORD PTR [r14-0x38]
  01535:    	mov    rsi,QWORD PTR [r14-0x60]
  01539: 00 	test   rdi,0x7
  01540:    	jne    0x356cb
  01546:    	cmp    DWORD PTR [rdi+0x4],0xb
  0154a:    	jne    0x356cb
  01550: 00 	test   rsi,0x1
  01557:    	je     0x356cb
  0155d:    	sar    rsi,1
  01560:    	sub    rsp,0x10
  01564:    	movq   QWORD PTR [rsp],xmm3
  01569:    	movq   QWORD PTR [rsp+0x8],xmm4
  0156f: 4d 	movabs rax,0x564da0819c40
  01579:    	call   rax
  0157b:    	movq   xmm3,QWORD PTR [rsp]
  01580:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01586:    	add    rsp,0x10
  0158a: 4d 	movabs r13,0x564da0eab0a0
  01594:    	test   rax,rax
  01597:    	je     0xfffed11b
  0159d:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  015a1:    	mov    rdi,QWORD PTR [r14-0x58]
  015a5: 00 	test   rdi,0x7
  015ac:    	jne    0x356da
  015b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  015b6:    	jne    0x356da
  015bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeede],0x26        # 0xffff04a1
  015c3:    	jne    0x356da
  015c9:    	sub    rsp,0x10
  015cd:    	movq   QWORD PTR [rsp],xmm3
  015d2:    	movq   QWORD PTR [rsp+0x8],xmm4
  015d8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015e1:    	mov    rax,QWORD PTR [r14-0x58]
  015e5:    	mov    QWORD PTR [rsp-0x40],rax
  015ea: 00 	mov    rdi,0x1
  015f1:    	mov    rax,QWORD PTR [r14-0x60]
  015f5:    	mov    QWORD PTR [rsp-0x48],rax
  015fa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01603: 09 	movabs rax,0x900000041
  0160d:    	mov    QWORD PTR [rsp-0x30],rax
  01612: 4d 	movabs r13,0x564da0e89170
  0161c:    	mov    rsi,QWORD PTR [rbx]
  0161f:    	mov    QWORD PTR [rsp-0x18],rsi
  01624:    	lea    rsi,[rsp-0x18]
  01629:    	mov    QWORD PTR [rbx],rsi
  0162c:    	lea    r14,[rsp-0x10]
  01631:    	mov    QWORD PTR [rsp-0x20],r14
  01636:    	call   0xffffa09f
  0163b:    	lea    r14,[rbp-0x8]
  0163f:    	mov    QWORD PTR [rbx],r14
  01642:    	mov    r14,QWORD PTR [rbp-0x10]
  01646:    	movq   xmm3,QWORD PTR [rsp]
  0164b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01651:    	add    rsp,0x10
  01655: 4d 	movabs r13,0x564da0eab0c0
  0165f:    	test   rax,rax
  01662:    	je     0xfffed11b
  01668:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  0166c:    	sub    rsp,0x10
  01670:    	movq   QWORD PTR [rsp],xmm3
  01675:    	movq   QWORD PTR [rsp+0x8],xmm4
  0167b:    	mov    rdx,QWORD PTR [r14-0x38]
  0167f:    	mov    rcx,QWORD PTR [r14-0x48]
  01683:    	mov    r8,QWORD PTR [r14-0x50]
  01687:    	mov    rdi,rbx
  0168a:    	mov    rsi,r12
  0168d: 4d 	movabs r9,0x564da0eab0d8
  01697: 4d 	movabs rax,0x564da0819cc0
  016a1:    	call   rax
  016a3:    	movq   xmm3,QWORD PTR [rsp]
  016a8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016ae:    	add    rsp,0x10
  016b2: 4d 	movabs r13,0x564da0eab0e0
  016bc:    	test   rax,rax
  016bf:    	je     0xfffed11b
:00113 %3 = 1: i32
  016c5: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  016cd: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  016d5:    	mov    rdi,QWORD PTR [r14-0x38]
  016d9:    	mov    rsi,QWORD PTR [r14-0x58]
  016dd: 00 	test   rdi,0x7
  016e4:    	jne    0x356e9
  016ea:    	cmp    DWORD PTR [rdi+0x4],0xb
  016ee:    	jne    0x356e9
  016f4: 00 	test   rsi,0x1
  016fb:    	je     0x356e9
  01701:    	sar    rsi,1
  01704:    	sub    rsp,0x10
  01708:    	movq   QWORD PTR [rsp],xmm3
  0170d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01713: 4d 	movabs rax,0x564da0819c40
  0171d:    	call   rax
  0171f:    	movq   xmm3,QWORD PTR [rsp]
  01724:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0172a:    	add    rsp,0x10
  0172e: 4d 	movabs r13,0x564da0eab110
  01738:    	test   rax,rax
  0173b:    	je     0xfffed11b
  01741:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01745:    	mov    rdi,QWORD PTR [r14-0x58]
  01749: 00 	test   rdi,0x7
  01750:    	jne    0x356f8
  01756:    	cmp    DWORD PTR [rdi+0x4],0x28
  0175a:    	jne    0x356f8
  01760: 26 	cmp    DWORD PTR [rip+0xfffffffffffeed3a],0x26        # 0xffff04a1
  01767:    	jne    0x356f8
  0176d:    	sub    rsp,0x10
  01771:    	movq   QWORD PTR [rsp],xmm3
  01776:    	movq   QWORD PTR [rsp+0x8],xmm4
  0177c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01785:    	mov    rax,QWORD PTR [r14-0x58]
  01789:    	mov    QWORD PTR [rsp-0x40],rax
  0178e: 00 	mov    rdi,0x0
  01795: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0179e: 07 	movabs rax,0x1000700000044
  017a8:    	mov    QWORD PTR [rsp-0x30],rax
  017ad: 4d 	movabs r13,0x564da0e6bec0
  017b7:    	mov    rsi,QWORD PTR [rbx]
  017ba:    	mov    QWORD PTR [rsp-0x18],rsi
  017bf:    	lea    rsi,[rsp-0x18]
  017c4:    	mov    QWORD PTR [rbx],rsi
  017c7:    	lea    r14,[rsp-0x10]
  017cc:    	mov    QWORD PTR [rsp-0x20],r14
  017d1:    	call   0xffff0d54
  017d6:    	lea    r14,[rbp-0x8]
  017da:    	mov    QWORD PTR [rbx],r14
  017dd:    	mov    r14,QWORD PTR [rbp-0x10]
  017e1:    	movq   xmm3,QWORD PTR [rsp]
  017e6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ec:    	add    rsp,0x10
  017f0: 4d 	movabs r13,0x564da0eab130
  017fa:    	test   rax,rax
  017fd:    	je     0xfffed11b
  01803:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01807:    	sub    rsp,0x10
  0180b:    	movq   QWORD PTR [rsp],xmm3
  01810:    	movq   QWORD PTR [rsp+0x8],xmm4
  01816:    	mov    rdx,QWORD PTR [r14-0x38]
  0181a:    	mov    rcx,QWORD PTR [r14-0x48]
  0181e:    	mov    r8,QWORD PTR [r14-0x50]
  01822:    	mov    rdi,rbx
  01825:    	mov    rsi,r12
  01828: 4d 	movabs r9,0x564da0eab148
  01832: 4d 	movabs rax,0x564da0819cc0
  0183c:    	call   rax
  0183e:    	movq   xmm3,QWORD PTR [rsp]
  01843:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01849:    	add    rsp,0x10
  0184d: 4d 	movabs r13,0x564da0eab150
  01857:    	test   rax,rax
  0185a:    	je     0xfffed11b
:00120 %3 = %4
  01860:    	mov    rax,QWORD PTR [r14-0x50]
  01864:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  01868:    	mov    rax,QWORD PTR [r14-0x48]
  0186c:    	leave  
  0186d:    	ret    
:00088 %3 = 0: i32
  0186e: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  01876: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  0187e:    	mov    rdi,QWORD PTR [r14-0x38]
  01882:    	mov    rsi,QWORD PTR [r14-0x58]
  01886: 00 	test   rdi,0x7
  0188d:    	jne    0x35752
  01893:    	cmp    DWORD PTR [rdi+0x4],0xb
  01897:    	jne    0x35752
  0189d: 00 	test   rsi,0x1
  018a4:    	je     0x35752
  018aa:    	sar    rsi,1
  018ad:    	sub    rsp,0x20
  018b1:    	movq   QWORD PTR [rsp],xmm2
  018b6:    	movq   QWORD PTR [rsp+0x8],xmm3
  018bc:    	movq   QWORD PTR [rsp+0x10],xmm4
  018c2:    	movq   QWORD PTR [rsp+0x18],xmm5
  018c8: 4d 	movabs rax,0x564da0819c40
  018d2:    	call   rax
  018d4:    	movq   xmm2,QWORD PTR [rsp]
  018d9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018df:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018e5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018eb:    	add    rsp,0x20
  018ef: 4d 	movabs r13,0x564da0eaaf80
  018f9:    	test   rax,rax
  018fc:    	je     0xfffed11b
  01902:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01906: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0190e:    	mov    rdi,QWORD PTR [r14-0x38]
  01912:    	mov    rsi,QWORD PTR [r14-0x60]
  01916: 00 	test   rdi,0x7
  0191d:    	jne    0x35761
  01923:    	cmp    DWORD PTR [rdi+0x4],0xb
  01927:    	jne    0x35761
  0192d: 00 	test   rsi,0x1
  01934:    	je     0x35761
  0193a:    	sar    rsi,1
  0193d:    	sub    rsp,0x20
  01941:    	movq   QWORD PTR [rsp],xmm3
  01946:    	movq   QWORD PTR [rsp+0x8],xmm4
  0194c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01952: 4d 	movabs rax,0x564da0819c40
  0195c:    	call   rax
  0195e:    	movq   xmm3,QWORD PTR [rsp]
  01963:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01969:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0196f:    	add    rsp,0x20
  01973: 4d 	movabs r13,0x564da0eaafa0
  0197d:    	test   rax,rax
  01980:    	je     0xfffed11b
  01986:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  0198a:    	mov    rdi,QWORD PTR [r14-0x58]
  0198e: 00 	test   rdi,0x7
  01995:    	jne    0x35770
  0199b:    	cmp    DWORD PTR [rdi+0x4],0x28
  0199f:    	jne    0x35770
  019a5: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeaf5],0x26        # 0xffff04a1
  019ac:    	jne    0x35770
  019b2:    	sub    rsp,0x10
  019b6:    	movq   QWORD PTR [rsp],xmm3
  019bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  019c1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019ca:    	mov    rax,QWORD PTR [r14-0x58]
  019ce:    	mov    QWORD PTR [rsp-0x40],rax
  019d3: 00 	mov    rdi,0x1
  019da:    	mov    rax,QWORD PTR [r14-0x60]
  019de:    	mov    QWORD PTR [rsp-0x48],rax
  019e3: 00 	mov    QWORD PTR [rsp-0x38],0x0
  019ec: 09 	movabs rax,0x900000041
  019f6:    	mov    QWORD PTR [rsp-0x30],rax
  019fb: 4d 	movabs r13,0x564da0e89170
  01a05:    	mov    rsi,QWORD PTR [rbx]
  01a08:    	mov    QWORD PTR [rsp-0x18],rsi
  01a0d:    	lea    rsi,[rsp-0x18]
  01a12:    	mov    QWORD PTR [rbx],rsi
  01a15:    	lea    r14,[rsp-0x10]
  01a1a:    	mov    QWORD PTR [rsp-0x20],r14
  01a1f:    	call   0xffffa09f
  01a24:    	lea    r14,[rbp-0x8]
  01a28:    	mov    QWORD PTR [rbx],r14
  01a2b:    	mov    r14,QWORD PTR [rbp-0x10]
  01a2f:    	movq   xmm3,QWORD PTR [rsp]
  01a34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a3a:    	add    rsp,0x10
  01a3e: 4d 	movabs r13,0x564da0eaafc0
  01a48:    	test   rax,rax
  01a4b:    	je     0xfffed11b
  01a51:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01a55:    	sub    rsp,0x10
  01a59:    	movq   QWORD PTR [rsp],xmm3
  01a5e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a64:    	mov    rdx,QWORD PTR [r14-0x38]
  01a68:    	mov    rcx,QWORD PTR [r14-0x48]
  01a6c:    	mov    r8,QWORD PTR [r14-0x50]
  01a70:    	mov    rdi,rbx
  01a73:    	mov    rsi,r12
  01a76: 4d 	movabs r9,0x564da0eaafd8
  01a80: 4d 	movabs rax,0x564da0819cc0
  01a8a:    	call   rax
  01a8c:    	movq   xmm3,QWORD PTR [rsp]
  01a91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a97:    	add    rsp,0x10
  01a9b: 4d 	movabs r13,0x564da0eaafe0
  01aa5:    	test   rax,rax
  01aa8:    	je     0xfffed11b
:00097 %3 = 0: i32
  01aae: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  01ab6: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01abe:    	mov    rdi,QWORD PTR [r14-0x38]
  01ac2:    	mov    rsi,QWORD PTR [r14-0x58]
  01ac6: 00 	test   rdi,0x7
  01acd:    	jne    0x3577f
  01ad3:    	cmp    DWORD PTR [rdi+0x4],0xb
  01ad7:    	jne    0x3577f
  01add: 00 	test   rsi,0x1
  01ae4:    	je     0x3577f
  01aea:    	sar    rsi,1
  01aed:    	sub    rsp,0x10
  01af1:    	movq   QWORD PTR [rsp],xmm3
  01af6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01afc: 4d 	movabs rax,0x564da0819c40
  01b06:    	call   rax
  01b08:    	movq   xmm3,QWORD PTR [rsp]
  01b0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b13:    	add    rsp,0x10
  01b17: 4d 	movabs r13,0x564da0eab010
  01b21:    	test   rax,rax
  01b24:    	je     0xfffed11b
  01b2a:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01b2e:    	mov    rdi,QWORD PTR [r14-0x58]
  01b32: 00 	test   rdi,0x7
  01b39:    	jne    0x3578e
  01b3f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b43:    	jne    0x3578e
  01b49: 26 	cmp    DWORD PTR [rip+0xfffffffffffee951],0x26        # 0xffff04a1
  01b50:    	jne    0x3578e
  01b56:    	sub    rsp,0x10
  01b5a:    	movq   QWORD PTR [rsp],xmm3
  01b5f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b65: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b6e:    	mov    rax,QWORD PTR [r14-0x58]
  01b72:    	mov    QWORD PTR [rsp-0x40],rax
  01b77: 00 	mov    rdi,0x0
  01b7e: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01b87: 07 	movabs rax,0x1000700000044
  01b91:    	mov    QWORD PTR [rsp-0x30],rax
  01b96: 4d 	movabs r13,0x564da0e6bec0
  01ba0:    	mov    rsi,QWORD PTR [rbx]
  01ba3:    	mov    QWORD PTR [rsp-0x18],rsi
  01ba8:    	lea    rsi,[rsp-0x18]
  01bad:    	mov    QWORD PTR [rbx],rsi
  01bb0:    	lea    r14,[rsp-0x10]
  01bb5:    	mov    QWORD PTR [rsp-0x20],r14
  01bba:    	call   0xffff0d54
  01bbf:    	lea    r14,[rbp-0x8]
  01bc3:    	mov    QWORD PTR [rbx],r14
  01bc6:    	mov    r14,QWORD PTR [rbp-0x10]
  01bca:    	movq   xmm3,QWORD PTR [rsp]
  01bcf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bd5:    	add    rsp,0x10
  01bd9: 4d 	movabs r13,0x564da0eab030
  01be3:    	test   rax,rax
  01be6:    	je     0xfffed11b
  01bec:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01bf0:    	sub    rsp,0x10
  01bf4:    	movq   QWORD PTR [rsp],xmm3
  01bf9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bff:    	mov    rdx,QWORD PTR [r14-0x38]
  01c03:    	mov    rcx,QWORD PTR [r14-0x48]
  01c07:    	mov    r8,QWORD PTR [r14-0x50]
  01c0b:    	mov    rdi,rbx
  01c0e:    	mov    rsi,r12
  01c11: 4d 	movabs r9,0x564da0eab048
  01c1b: 4d 	movabs rax,0x564da0819cc0
  01c25:    	call   rax
  01c27:    	movq   xmm3,QWORD PTR [rsp]
  01c2c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c32:    	add    rsp,0x10
  01c36: 4d 	movabs r13,0x564da0eab050
  01c40:    	test   rax,rax
  01c43:    	je     0xfffed11b
:00104 %3 = 1: i32
  01c49: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  01c51: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01c59:    	mov    rdi,QWORD PTR [r14-0x38]
  01c5d:    	mov    rsi,QWORD PTR [r14-0x58]
  01c61: 00 	test   rdi,0x7
  01c68:    	jne    0x3579d
  01c6e:    	cmp    DWORD PTR [rdi+0x4],0xb
  01c72:    	jne    0x3579d
  01c78: 00 	test   rsi,0x1
  01c7f:    	je     0x3579d
  01c85:    	sar    rsi,1
  01c88:    	sub    rsp,0x10
  01c8c:    	movq   QWORD PTR [rsp],xmm3
  01c91:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c97: 4d 	movabs rax,0x564da0819c40
  01ca1:    	call   rax
  01ca3:    	movq   xmm3,QWORD PTR [rsp]
  01ca8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01cae:    	add    rsp,0x10
  01cb2: 4d 	movabs r13,0x564da0eab080
  01cbc:    	test   rax,rax
  01cbf:    	je     0xfffed11b
  01cc5:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01cc9: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01cd1:    	mov    rdi,QWORD PTR [r14-0x38]
  01cd5:    	mov    rsi,QWORD PTR [r14-0x60]
  01cd9: 00 	test   rdi,0x7
  01ce0:    	jne    0x357ac
  01ce6:    	cmp    DWORD PTR [rdi+0x4],0xb
  01cea:    	jne    0x357ac
  01cf0: 00 	test   rsi,0x1
  01cf7:    	je     0x357ac
  01cfd:    	sar    rsi,1
  01d00:    	sub    rsp,0x10
  01d04:    	movq   QWORD PTR [rsp],xmm3
  01d09:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d0f: 4d 	movabs rax,0x564da0819c40
  01d19:    	call   rax
  01d1b:    	movq   xmm3,QWORD PTR [rsp]
  01d20:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d26:    	add    rsp,0x10
  01d2a: 4d 	movabs r13,0x564da0eab0a0
  01d34:    	test   rax,rax
  01d37:    	je     0xfffed11b
  01d3d:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01d41:    	mov    rdi,QWORD PTR [r14-0x58]
  01d45: 00 	test   rdi,0x7
  01d4c:    	jne    0x357bb
  01d52:    	cmp    DWORD PTR [rdi+0x4],0x28
  01d56:    	jne    0x357bb
  01d5c: 26 	cmp    DWORD PTR [rip+0xfffffffffffee73e],0x26        # 0xffff04a1
  01d63:    	jne    0x357bb
  01d69:    	sub    rsp,0x10
  01d6d:    	movq   QWORD PTR [rsp],xmm3
  01d72:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d78: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01d81:    	mov    rax,QWORD PTR [r14-0x58]
  01d85:    	mov    QWORD PTR [rsp-0x40],rax
  01d8a: 00 	mov    rdi,0x1
  01d91:    	mov    rax,QWORD PTR [r14-0x60]
  01d95:    	mov    QWORD PTR [rsp-0x48],rax
  01d9a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01da3: 09 	movabs rax,0x900000041
  01dad:    	mov    QWORD PTR [rsp-0x30],rax
  01db2: 4d 	movabs r13,0x564da0e89170
  01dbc:    	mov    rsi,QWORD PTR [rbx]
  01dbf:    	mov    QWORD PTR [rsp-0x18],rsi
  01dc4:    	lea    rsi,[rsp-0x18]
  01dc9:    	mov    QWORD PTR [rbx],rsi
  01dcc:    	lea    r14,[rsp-0x10]
  01dd1:    	mov    QWORD PTR [rsp-0x20],r14
  01dd6:    	call   0xffffa09f
  01ddb:    	lea    r14,[rbp-0x8]
  01ddf:    	mov    QWORD PTR [rbx],r14
  01de2:    	mov    r14,QWORD PTR [rbp-0x10]
  01de6:    	movq   xmm3,QWORD PTR [rsp]
  01deb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01df1:    	add    rsp,0x10
  01df5: 4d 	movabs r13,0x564da0eab0c0
  01dff:    	test   rax,rax
  01e02:    	je     0xfffed11b
  01e08:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01e0c:    	sub    rsp,0x10
  01e10:    	movq   QWORD PTR [rsp],xmm3
  01e15:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e1b:    	mov    rdx,QWORD PTR [r14-0x38]
  01e1f:    	mov    rcx,QWORD PTR [r14-0x48]
  01e23:    	mov    r8,QWORD PTR [r14-0x50]
  01e27:    	mov    rdi,rbx
  01e2a:    	mov    rsi,r12
  01e2d: 4d 	movabs r9,0x564da0eab0d8
  01e37: 4d 	movabs rax,0x564da0819cc0
  01e41:    	call   rax
  01e43:    	movq   xmm3,QWORD PTR [rsp]
  01e48:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e4e:    	add    rsp,0x10
  01e52: 4d 	movabs r13,0x564da0eab0e0
  01e5c:    	test   rax,rax
  01e5f:    	je     0xfffed11b
:00113 %3 = 1: i32
  01e65: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01e6d: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01e75:    	mov    rdi,QWORD PTR [r14-0x38]
  01e79:    	mov    rsi,QWORD PTR [r14-0x58]
  01e7d: 00 	test   rdi,0x7
  01e84:    	jne    0x357ca
  01e8a:    	cmp    DWORD PTR [rdi+0x4],0xb
  01e8e:    	jne    0x357ca
  01e94: 00 	test   rsi,0x1
  01e9b:    	je     0x357ca
  01ea1:    	sar    rsi,1
  01ea4:    	sub    rsp,0x10
  01ea8:    	movq   QWORD PTR [rsp],xmm3
  01ead:    	movq   QWORD PTR [rsp+0x8],xmm4
  01eb3: 4d 	movabs rax,0x564da0819c40
  01ebd:    	call   rax
  01ebf:    	movq   xmm3,QWORD PTR [rsp]
  01ec4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01eca:    	add    rsp,0x10
  01ece: 4d 	movabs r13,0x564da0eab110
  01ed8:    	test   rax,rax
  01edb:    	je     0xfffed11b
  01ee1:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01ee5:    	mov    rdi,QWORD PTR [r14-0x58]
  01ee9: 00 	test   rdi,0x7
  01ef0:    	jne    0x357d9
  01ef6:    	cmp    DWORD PTR [rdi+0x4],0x28
  01efa:    	jne    0x357d9
  01f00: 26 	cmp    DWORD PTR [rip+0xfffffffffffee59a],0x26        # 0xffff04a1
  01f07:    	jne    0x357d9
  01f0d:    	sub    rsp,0x10
  01f11:    	movq   QWORD PTR [rsp],xmm3
  01f16:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f1c: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01f25:    	mov    rax,QWORD PTR [r14-0x58]
  01f29:    	mov    QWORD PTR [rsp-0x40],rax
  01f2e: 00 	mov    rdi,0x0
  01f35: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01f3e: 07 	movabs rax,0x1000700000044
  01f48:    	mov    QWORD PTR [rsp-0x30],rax
  01f4d: 4d 	movabs r13,0x564da0e6bec0
  01f57:    	mov    rsi,QWORD PTR [rbx]
  01f5a:    	mov    QWORD PTR [rsp-0x18],rsi
  01f5f:    	lea    rsi,[rsp-0x18]
  01f64:    	mov    QWORD PTR [rbx],rsi
  01f67:    	lea    r14,[rsp-0x10]
  01f6c:    	mov    QWORD PTR [rsp-0x20],r14
  01f71:    	call   0xffff0d54
  01f76:    	lea    r14,[rbp-0x8]
  01f7a:    	mov    QWORD PTR [rbx],r14
  01f7d:    	mov    r14,QWORD PTR [rbp-0x10]
  01f81:    	movq   xmm3,QWORD PTR [rsp]
  01f86:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f8c:    	add    rsp,0x10
  01f90: 4d 	movabs r13,0x564da0eab130
  01f9a:    	test   rax,rax
  01f9d:    	je     0xfffed11b
  01fa3:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01fa7:    	sub    rsp,0x10
  01fab:    	movq   QWORD PTR [rsp],xmm3
  01fb0:    	movq   QWORD PTR [rsp+0x8],xmm4
  01fb6:    	mov    rdx,QWORD PTR [r14-0x38]
  01fba:    	mov    rcx,QWORD PTR [r14-0x48]
  01fbe:    	mov    r8,QWORD PTR [r14-0x50]
  01fc2:    	mov    rdi,rbx
  01fc5:    	mov    rsi,r12
  01fc8: 4d 	movabs r9,0x564da0eab148
  01fd2: 4d 	movabs rax,0x564da0819cc0
  01fdc:    	call   rax
  01fde:    	movq   xmm3,QWORD PTR [rsp]
  01fe3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01fe9:    	add    rsp,0x10
  01fed: 4d 	movabs r13,0x564da0eab150
  01ff7:    	test   rax,rax
  01ffa:    	je     0xfffed11b
:00120 %3 = %4
  02000:    	mov    rax,QWORD PTR [r14-0x50]
  02004:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  02008:    	mov    rax,QWORD PTR [r14-0x48]
  0200c:    	leave  
  0200d:    	ret    
==> start whole compile: <unnamed> FuncId(83) self_class:Scene start:[00000] bytecode:0x564da0e75040
<== finished compile. elapsed:192.3µs
offset:Pos(86108) code: 9144 bytes  data: 356 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092: ff 	mov    QWORD PTR [r14-0xb8],rax
  00099: ff 	mov    QWORD PTR [r14-0xc0],rax
  000a0: ff 	mov    QWORD PTR [r14-0xc8],rax
  000a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  000ab: 00 	test   rdi,0x7
  000b2:    	jne    0x336b3
  000b8:    	cmp    DWORD PTR [rdi+0x4],0x32
  000bc:    	jne    0x336b3
:00000 init_block reg:20 arg:1 pos:1 req:1 block:0 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000c2:    	mov    rax,QWORD PTR [rbp-0x18]
  000c6:    	mov    rax,QWORD PTR [rax]
  000c9:    	mov    rax,QWORD PTR [rax]
  000cc:    	mov    rax,QWORD PTR [rax]
  000cf:    	mov    rax,QWORD PTR [rax-0x38]
  000d3: ff 	mov    QWORD PTR [r14-0xa0],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000da: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  000e1: 00 	test   rdi,0x1
  000e8:    	je     0x336c2
  000ee:    	add    rdi,0x2
  000f2:    	jo     0x336c2
  000f8: ff 	mov    QWORD PTR [r14-0xa0],rdi
:00003 dynvar(4, %4) = %14
  000ff:    	mov    rax,QWORD PTR [rbp-0x18]
  00103:    	mov    rax,QWORD PTR [rax]
  00106:    	mov    rax,QWORD PTR [rax]
  00109:    	mov    rax,QWORD PTR [rax]
  0010c: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00113:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  00117:    	mov    rax,QWORD PTR [rbp-0x18]
  0011b:    	mov    rax,QWORD PTR [rax]
  0011e:    	mov    rax,QWORD PTR [rax]
  00121:    	mov    rax,QWORD PTR [rax]
  00124:    	mov    rax,QWORD PTR [rax-0x20]
  00128: ff 	mov    QWORD PTR [r14-0xa0],rax
:00005 %2 = %14.call to_f()                 [Integer]
  0012f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00136: 00 	test   rdi,0x1
  0013d:    	je     0x336d1
  00143: 26 	cmp    DWORD PTR [rip+0xfffffffffffee213],0x26        # 0xfffee35d
  0014a:    	jne    0x336d1
  00150:    	sar    rdi,1
  00153:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  00158:    	mov    rax,QWORD PTR [rbp-0x18]
  0015c:    	mov    rax,QWORD PTR [rax]
  0015f:    	mov    rax,QWORD PTR [rax]
  00162:    	mov    rax,QWORD PTR [rax]
  00165:    	mov    rax,QWORD PTR [rax-0x28]
  00169: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00170: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00177: 00 	test   rdi,0x1
  0017e:    	je     0x336e0
  00184: 26 	cmp    DWORD PTR [rip+0xfffffffffffee1d2],0x26        # 0xfffee35d
  0018b:    	jne    0x336e0
  00191:    	sar    rdi,1
  00194:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  00199:    	mov    rax,QWORD PTR [rbp-0x18]
  0019d:    	mov    rax,QWORD PTR [rax]
  001a0:    	mov    rax,QWORD PTR [rax-0x20]
  001a4: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001ab: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001b2: 00 	test   rdi,0x1
  001b9:    	je     0x336fc
  001bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffee197],0x26        # 0xfffee35d
  001c6:    	jne    0x336fc
  001cc:    	sar    rdi,1
  001cf:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001d4:    	mov    rax,QWORD PTR [rbp-0x18]
  001d8:    	mov    rax,QWORD PTR [rax]
  001db:    	mov    rax,QWORD PTR [rax]
  001de:    	mov    rax,QWORD PTR [rax-0x20]
  001e2: ff 	mov    QWORD PTR [r14-0xa0],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001e9: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001f0: 00 	test   rdi,0x1
  001f7:    	je     0x33725
  001fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffee159],0x26        # 0xfffee35d
  00204:    	jne    0x33725
  0020a:    	sar    rdi,1
  0020d:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00212:    	mov    rdi,QWORD PTR [r14-0x38]
  00216: 00 	test   rdi,0x1
  0021d:    	je     0x3375b
  00223: 26 	cmp    DWORD PTR [rip+0xfffffffffffee133],0x26        # 0xfffee35d
  0022a:    	jne    0x3375b
  00230:    	sar    rdi,1
  00233:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  00238:    	mov    rax,QWORD PTR [rbp-0x18]
  0023c:    	mov    rax,QWORD PTR [rax-0x20]
  00240: ff 	mov    QWORD PTR [r14-0xa0],rax
:00024 %7 = %14.call to_f()                 [Integer]
  00247: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0024e: 00 	test   rdi,0x1
  00255:    	je     0x3379e
  0025b: 26 	cmp    DWORD PTR [rip+0xfffffffffffee0fb],0x26        # 0xfffee35d
  00262:    	jne    0x3379e
  00268:    	sar    rdi,1
  0026b:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00270:    	mov    rax,QWORD PTR [rbp-0x18]
  00274:    	mov    rax,QWORD PTR [rax]
  00277:    	mov    rax,QWORD PTR [rax]
  0027a:    	mov    rax,QWORD PTR [rax]
  0027d:    	mov    rax,QWORD PTR [rax-0x40]
  00281: ff 	mov    QWORD PTR [r14-0xa0],rax
:00028 %14 = %6 / %14                       [Float][Float]
  00288: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028f: 00 	test   rdi,0x1
  00296:    	jne    0x337ee
  0029c: 00 	test   rdi,0x2
  002a3:    	je     0x2e0
  002a9:    	xorps  xmm8,xmm8
  002ad: 00 	movabs rax,0x8000000000000002
  002b7:    	cmp    rdi,rax
  002ba:    	je     0x2f3
  002c0:    	mov    rax,rdi
  002c3:    	sar    rax,0x3f
  002c7:    	add    rax,0x2
  002cb:    	and    rdi,0xfffffffffffffffc
  002cf:    	or     rdi,rax
  002d2:    	rol    rdi,0x3d
  002d6:    	movq   xmm8,rdi
  002db:    	jmp    0x2f3
  002e0:    	call   0xfffeb030
  002e5:    	test   rax,rax
  002e8:    	je     0x337ee
  002ee:    	movq   xmm8,xmm0
  002f3:    	movq   rax,xmm8
  002f8:    	test   rax,rax
  002fb:    	je     0xfffeaffc
  00301:    	movq   xmm0,xmm6
  00305:    	divsd  xmm0,xmm8
  0030a:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  0030f:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00314: 20 	movq   xmm9,QWORD PTR [rip+0x20a7]        # 0x23c4
  0031d: 00 	mov    rax,0x2
  00324: ff 	mov    QWORD PTR [r14-0xa8],rax
:00031 %15 = %2 / %15                       [Float][Float]
  0032b:    	movq   rax,xmm9
  00330:    	test   rax,rax
  00333:    	je     0xfffeaffc
  00339:    	movq   xmm0,xmm2
  0033d:    	divsd  xmm0,xmm9
  00342:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  00347:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  0034c: 20 	movq   xmm9,QWORD PTR [rip+0x207f]        # 0x23d4
  00355: 00 	mov    rax,0x2
  0035c: ff 	mov    QWORD PTR [r14-0xa8],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00363:    	movq   rax,xmm9
  00368:    	test   rax,rax
  0036b:    	je     0xfffeaffc
  00371:    	movq   xmm0,xmm2
  00375:    	divsd  xmm0,xmm9
  0037a:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  0037f:    	movq   xmm10,xmm8
  00384:    	movq   rax,xmm9
  00389:    	test   rax,rax
  0038c:    	je     0xfffeaffc
  00392:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  00397:    	mov    rax,QWORD PTR [rbp-0x18]
  0039b:    	mov    rax,QWORD PTR [rax]
  0039e:    	mov    rax,QWORD PTR [rax]
  003a1:    	mov    rax,QWORD PTR [rax]
  003a4:    	mov    rax,QWORD PTR [rax-0x40]
  003a8: ff 	mov    QWORD PTR [r14-0xa0],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003af: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x3384b
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x407
  003d0:    	xorps  xmm8,xmm8
  003d4: 00 	movabs rax,0x8000000000000002
  003de:    	cmp    rdi,rax
  003e1:    	je     0x41a
  003e7:    	mov    rax,rdi
  003ea:    	sar    rax,0x3f
  003ee:    	add    rax,0x2
  003f2:    	and    rdi,0xfffffffffffffffc
  003f6:    	or     rdi,rax
  003f9:    	rol    rdi,0x3d
  003fd:    	movq   xmm8,rdi
  00402:    	jmp    0x41a
  00407:    	call   0xfffeb030
  0040c:    	test   rax,rax
  0040f:    	je     0x3384b
  00415:    	movq   xmm8,xmm0
  0041a:    	movq   rax,xmm8
  0041f:    	test   rax,rax
  00422:    	je     0xfffeaffc
  00428:    	movq   xmm0,xmm7
  0042c:    	divsd  xmm0,xmm8
  00431:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  00436:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  0043b: 1f 	movq   xmm9,QWORD PTR [rip+0x1fa0]        # 0x23e4
  00444: 00 	mov    rax,0x2
  0044b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00452:    	movq   rax,xmm9
  00457:    	test   rax,rax
  0045a:    	je     0xfffeaffc
  00460:    	movq   xmm0,xmm3
  00464:    	divsd  xmm0,xmm9
  00469:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  0046e:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00473: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1f79]        # 0x23f4
:00043 %15 = literal[2.0]
  0047b: 1f 	movq   xmm9,QWORD PTR [rip+0x1f80]        # 0x2404
  00484: 00 	mov    rax,0x2
  0048b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00492:    	movq   rax,xmm9
  00497:    	test   rax,rax
  0049a:    	je     0xfffeaffc
  004a0:    	movq   xmm0,xmm3
  004a4:    	divsd  xmm0,xmm9
  004a9:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004ae:    	movq   xmm11,xmm8
  004b3:    	movq   rax,xmm9
  004b8:    	test   rax,rax
  004bb:    	je     0xfffeaffc
  004c1:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004c6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffede97]        # 0xfffee364
  004cd: 00 	cmp    rax,QWORD PTR [rip+0x1f50]        # 0x2424
  004d4:    	jne    0x338c7
  004da: 00 	mov    rax,QWORD PTR [rip+0x1f33]        # 0x2414
  004e1: ff 	mov    QWORD PTR [r14-0xa8],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004e8: 1f 	movq   xmm9,QWORD PTR [rip+0x1f43]        # 0x2434
  004f1: 00 	movabs rax,0xff80000000000006
  004fb: ff 	mov    QWORD PTR [r14-0xc0],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  00502:    	movq   xmm0,xmm10
  00507:    	call   0xfffeb154
  0050c: ff 	mov    QWORD PTR [r14-0xb0],rax
  00513:    	movq   xmm0,xmm11
  00518:    	call   0xfffeb154
  0051d: ff 	mov    QWORD PTR [r14-0xb8],rax
  00524: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0052b: 00 	test   rdi,0x7
  00532:    	jne    0x33985
  00538:    	cmp    DWORD PTR [rdi+0x4],0x29
  0053c:    	jne    0x33985
  00542: 26 	cmp    DWORD PTR [rip+0xfffffffffffede14],0x26        # 0xfffee35d
  00549:    	jne    0x33985
  0054f: 00 	mov    r9,0x0
  00556:    	sub    rsp,0x50
  0055a:    	movq   QWORD PTR [rsp],xmm2
  0055f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00565:    	movq   QWORD PTR [rsp+0x10],xmm4
  0056b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00571:    	movq   QWORD PTR [rsp+0x20],xmm6
  00577:    	movq   QWORD PTR [rsp+0x28],xmm7
  0057d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00584: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0058b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00592:    	mov    rdx,rdi
  00595:    	mov    QWORD PTR [rsp-0x40],rcx
  0059a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  005a3: ff 	lea    rcx,[r14-0xb0]
  005aa: 00 	mov    r8,0x3
  005b1:    	mov    rsi,QWORD PTR [rbx]
  005b4:    	mov    QWORD PTR [rsp-0x18],rsi
  005b9:    	lea    rsi,[rsp-0x18]
  005be:    	mov    QWORD PTR [rbx],rsi
  005c1:    	lea    r14,[rsp-0x10]
  005c6:    	mov    QWORD PTR [rsp-0x20],r14
  005cb:    	call   0x339fe
  005d0:    	lea    r14,[rbp-0x8]
  005d4:    	mov    QWORD PTR [rbx],r14
  005d7:    	mov    r14,QWORD PTR [rbp-0x10]
  005db:    	movq   xmm2,QWORD PTR [rsp]
  005e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005fe: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00605: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0060c: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00613:    	add    rsp,0x50
  00617: 4d 	movabs r13,0x564da0e75380
  00621:    	test   rax,rax
  00624:    	je     0xfffeafd7
  0062a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00631: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00638: 00 	test   rdi,0x7
  0063f:    	jne    0x33a30
  00645:    	cmp    DWORD PTR [rdi+0x4],0x28
  00649:    	jne    0x33a30
  0064f: 26 	cmp    DWORD PTR [rip+0xfffffffffffedd07],0x26        # 0xfffee35d
  00656:    	jne    0x33a30
  0065c:    	sub    rsp,0x50
  00660:    	movq   QWORD PTR [rsp],xmm2
  00665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0066b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00671:    	movq   QWORD PTR [rsp+0x18],xmm5
  00677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0067d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00683: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0068a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00691: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00698: 00 	mov    QWORD PTR [rsp-0x28],0x0
  006a1: ff 	mov    rax,QWORD PTR [r14-0xa0]
  006a8:    	mov    QWORD PTR [rsp-0x40],rax
  006ad: 00 	mov    rdi,0x0
  006b4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  006bd: 07 	movabs rax,0x700000044
  006c7:    	mov    QWORD PTR [rsp-0x30],rax
  006cc: 4d 	movabs r13,0x564da0e6bec0
  006d6:    	mov    rsi,QWORD PTR [rbx]
  006d9:    	mov    QWORD PTR [rsp-0x18],rsi
  006de:    	lea    rsi,[rsp-0x18]
  006e3:    	mov    QWORD PTR [rbx],rsi
  006e6:    	lea    r14,[rsp-0x10]
  006eb:    	mov    QWORD PTR [rsp-0x20],r14
  006f0:    	call   0xfffeec10
  006f5:    	lea    r14,[rbp-0x8]
  006f9:    	mov    QWORD PTR [rbx],r14
  006fc:    	mov    r14,QWORD PTR [rbp-0x10]
  00700:    	movq   xmm2,QWORD PTR [rsp]
  00705:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00711:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00717:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00723: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00731: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00738:    	add    rsp,0x50
  0073c: 4d 	movabs r13,0x564da0e753b0
  00746:    	test   rax,rax
  00749:    	je     0xfffeafd7
  0074f:    	mov    QWORD PTR [r14-0x80],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  00753: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedc0a]        # 0xfffee364
  0075a: 00 	cmp    rax,QWORD PTR [rip+0x1cf3]        # 0x2454
  00761:    	jne    0x33aa9
  00767: 00 	mov    rax,QWORD PTR [rip+0x1cd6]        # 0x2444
  0076e: ff 	mov    QWORD PTR [r14-0xa0],rax
:00057 %16 = const[Vec]                     [Vec]
  00775: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedbe8]        # 0xfffee364
  0077c: 00 	cmp    rax,QWORD PTR [rip+0x1cf1]        # 0x2474
  00783:    	jne    0x33b67
  00789: 00 	mov    rax,QWORD PTR [rip+0x1cd4]        # 0x2464
  00790: ff 	mov    QWORD PTR [r14-0xb0],rax
:00058 %17 = literal[0.0]
  00797: 1c 	movq   xmm8,QWORD PTR [rip+0x1ce4]        # 0x2484
  007a0: 00 	movabs rax,0x8000000000000002
  007aa: ff 	mov    QWORD PTR [r14-0xb8],rax
:00059 %18 = literal[0.0]
  007b1: 1c 	movq   xmm9,QWORD PTR [rip+0x1cda]        # 0x2494
  007ba: 00 	movabs rax,0x8000000000000002
  007c4: ff 	mov    QWORD PTR [r14-0xc0],rax
:00060 %19 = literal[0.0]
  007cb: 1c 	movq   xmm12,QWORD PTR [rip+0x1cd0]        # 0x24a4
  007d4: 00 	movabs rax,0x8000000000000002
  007de: ff 	mov    QWORD PTR [r14-0xc8],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  007ec: 00 	test   rdi,0x7
  007f3:    	jne    0x33c25
  007f9:    	cmp    DWORD PTR [rdi+0x4],0x29
  007fd:    	jne    0x33c25
  00803: 26 	cmp    DWORD PTR [rip+0xfffffffffffedb53],0x26        # 0xfffee35d
  0080a:    	jne    0x33c25
  00810: 00 	mov    r9,0x0
  00817:    	sub    rsp,0x60
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	movq   QWORD PTR [rsp+0x20],xmm6
  00838:    	movq   QWORD PTR [rsp+0x28],xmm7
  0083e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00845: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00853: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00861:    	mov    rdx,rdi
  00864:    	mov    QWORD PTR [rsp-0x40],rcx
  00869: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00872: ff 	lea    rcx,[r14-0xb8]
  00879: 00 	mov    r8,0x3
  00880:    	mov    rsi,QWORD PTR [rbx]
  00883:    	mov    QWORD PTR [rsp-0x18],rsi
  00888:    	lea    rsi,[rsp-0x18]
  0088d:    	mov    QWORD PTR [rbx],rsi
  00890:    	lea    r14,[rsp-0x10]
  00895:    	mov    QWORD PTR [rsp-0x20],r14
  0089a:    	call   0x33c9e
  0089f:    	lea    r14,[rbp-0x8]
  008a3:    	mov    QWORD PTR [rbx],r14
  008a6:    	mov    r14,QWORD PTR [rbp-0x10]
  008aa:    	movq   xmm2,QWORD PTR [rsp]
  008af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008f0:    	add    rsp,0x60
  008f4: 4d 	movabs r13,0x564da0e75430
  008fe:    	test   rax,rax
  00901:    	je     0xfffeafd7
  00907: ff 	mov    QWORD PTR [r14-0xa8],rax
:00062 
:00064 %16 = %10
  0090e:    	mov    rax,QWORD PTR [r14-0x80]
  00912: ff 	mov    QWORD PTR [r14-0xb0],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  00919: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00920: 00 	test   rdi,0x7
  00927:    	jne    0x33cd0
  0092d:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00931:    	jne    0x33cd0
  00937: 26 	cmp    DWORD PTR [rip+0xfffffffffffeda1f],0x26        # 0xfffee35d
  0093e:    	jne    0x33cd0
  00944: 00 	mov    r9,0x0
  0094b:    	sub    rsp,0x60
  0094f:    	movq   QWORD PTR [rsp],xmm2
  00954:    	movq   QWORD PTR [rsp+0x8],xmm3
  0095a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00960:    	movq   QWORD PTR [rsp+0x18],xmm5
  00966:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00972: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00979: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00980: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00987: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0098e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00995:    	mov    rdx,rdi
  00998:    	mov    QWORD PTR [rsp-0x40],rcx
  0099d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  009a6: ff 	lea    rcx,[r14-0xa8]
  009ad: 00 	mov    r8,0x2
  009b4:    	mov    rsi,QWORD PTR [rbx]
  009b7:    	mov    QWORD PTR [rsp-0x18],rsi
  009bc:    	lea    rsi,[rsp-0x18]
  009c1:    	mov    QWORD PTR [rbx],rsi
  009c4:    	lea    r14,[rsp-0x10]
  009c9:    	mov    QWORD PTR [rsp-0x20],r14
  009ce:    	call   0x33d49
  009d3:    	lea    r14,[rbp-0x8]
  009d7:    	mov    QWORD PTR [rbx],r14
  009da:    	mov    r14,QWORD PTR [rbp-0x10]
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009fb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a01: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a08: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a0f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a16: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a1d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a24:    	add    rsp,0x60
  00a28: 4d 	movabs r13,0x564da0e75470
  00a32:    	test   rax,rax
  00a35:    	je     0xfffeafd7
  00a3b: ff 	mov    QWORD PTR [r14-0x88],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  00a42: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed91b]        # 0xfffee364
  00a49: 00 	cmp    rax,QWORD PTR [rip+0x1a74]        # 0x24c4
  00a50:    	jne    0x33d7b
  00a56: 00 	mov    rax,QWORD PTR [rip+0x1a57]        # 0x24b4
  00a5d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a64: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00a6b: 00 	test   rdi,0x7
  00a72:    	jne    0x33e55
  00a78:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a7c:    	jne    0x33e55
  00a82: 26 	cmp    DWORD PTR [rip+0xfffffffffffed8d4],0x26        # 0xfffee35d
  00a89:    	jne    0x33e55
  00a8f: 00 	mov    r9,0x0
  00a96:    	sub    rsp,0x60
  00a9a:    	movq   QWORD PTR [rsp],xmm2
  00a9f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aa5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00aab:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ab1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ab7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00abd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ac4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00acb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ad2: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ad9: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ae0:    	mov    rdx,rdi
  00ae3:    	mov    QWORD PTR [rsp-0x40],rcx
  00ae8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00af1: ff 	lea    rcx,[r14-0xa8]
  00af8: 00 	mov    r8,0x0
  00aff:    	mov    rsi,QWORD PTR [rbx]
  00b02:    	mov    QWORD PTR [rsp-0x18],rsi
  00b07:    	lea    rsi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rbx],rsi
  00b0f:    	lea    r14,[rsp-0x10]
  00b14:    	mov    QWORD PTR [rsp-0x20],r14
  00b19:    	call   0x33ece
  00b1e:    	lea    r14,[rbp-0x8]
  00b22:    	mov    QWORD PTR [rbx],r14
  00b25:    	mov    r14,QWORD PTR [rbp-0x10]
  00b29:    	movq   xmm2,QWORD PTR [rsp]
  00b2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b6f:    	add    rsp,0x60
  00b73: 4d 	movabs r13,0x564da0e754b0
  00b7d:    	test   rax,rax
  00b80:    	je     0xfffeafd7
  00b86: ff 	mov    QWORD PTR [r14-0x90],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b8d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00b91:    	mov    rax,QWORD PTR [rdi+0x10]
  00b95: ff 	mov    QWORD PTR [r14-0xa0],rax
:00073 %15 = 0: i32
  00b9c: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00ba7: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bae: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00bb5: 00 	test   rdi,0x7
  00bbc:    	jne    0x33f00
  00bc2:    	cmp    DWORD PTR [rdi+0x4],0xb
  00bc6:    	jne    0x33f00
  00bcc: 00 	test   rsi,0x1
  00bd3:    	je     0x33f00
  00bd9:    	sar    rsi,1
  00bdc:    	sub    rsp,0x60
  00be0:    	movq   QWORD PTR [rsp],xmm2
  00be5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00beb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bf1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bf7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bfd:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c03: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c0a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c11: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00c18: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00c1f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00c26: 4d 	movabs rax,0x564da0819c40
  00c30:    	call   rax
  00c32:    	movq   xmm2,QWORD PTR [rsp]
  00c37:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c3d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c43:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c49:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c4f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c55: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c5c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c63: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c6a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c71: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c78:    	add    rsp,0x60
  00c7c: 4d 	movabs r13,0x564da0e754f0
  00c86:    	test   rax,rax
  00c89:    	je     0xfffeafd7
  00c8f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 %15 = %11
  00c96: ff 	mov    rax,QWORD PTR [r14-0x88]
  00c9d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00076 %16 = %12
  00ca4: ff 	mov    rax,QWORD PTR [r14-0x90]
  00cab: ff 	mov    QWORD PTR [r14-0xb0],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00cb2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00cb9: 00 	test   rdi,0x7
  00cc0:    	jne    0x33f79
  00cc6:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00cca:    	jne    0x33f79
  00cd0: 26 	cmp    DWORD PTR [rip+0xfffffffffffed686],0x26        # 0xfffee35d
  00cd7:    	jne    0x33f79
  00cdd:    	sub    rsp,0x60
  00ce1:    	movq   QWORD PTR [rsp],xmm2
  00ce6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cec:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cf2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cf8:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cfe:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d04: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00d0b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d12: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d19: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d20: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d27: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00d30: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00d37:    	mov    QWORD PTR [rsp-0x40],rax
  00d3c: 00 	mov    rdi,0x2
  00d43: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00d4a:    	mov    QWORD PTR [rsp-0x48],rax
  00d4f: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00d56:    	mov    QWORD PTR [rsp-0x50],rax
  00d5b: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00d64: 10 	movabs rax,0x1000000046
  00d6e:    	mov    QWORD PTR [rsp-0x30],rax
  00d73: 4d 	movabs r13,0x564da0e8bc90
  00d7d:    	mov    rsi,QWORD PTR [rbx]
  00d80:    	mov    QWORD PTR [rsp-0x18],rsi
  00d85:    	lea    rsi,[rsp-0x18]
  00d8a:    	mov    QWORD PTR [rbx],rsi
  00d8d:    	lea    r14,[rsp-0x10]
  00d92:    	mov    QWORD PTR [rsp-0x20],r14
  00d97:    	call   0xfffeef08
  00d9c:    	lea    r14,[rbp-0x8]
  00da0:    	mov    QWORD PTR [rbx],r14
  00da3:    	mov    r14,QWORD PTR [rbp-0x10]
  00da7:    	movq   xmm2,QWORD PTR [rsp]
  00dac:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00db2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dbe:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00dc4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dca: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00dd1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dd8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ddf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00de6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ded:    	add    rsp,0x60
  00df1: 4d 	movabs r13,0x564da0e75530
  00dfb:    	test   rax,rax
  00dfe:    	je     0xfffeafd7
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00e04:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e08:    	mov    rax,QWORD PTR [rdi+0x10]
  00e0c: ff 	mov    QWORD PTR [r14-0xa0],rax
:00081 %15 = 1: i32
  00e13: ff 	mov    QWORD PTR [r14-0xa8],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00e1e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00e25: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00e2c: 00 	test   rdi,0x7
  00e33:    	jne    0x33ff2
  00e39:    	cmp    DWORD PTR [rdi+0x4],0xb
  00e3d:    	jne    0x33ff2
  00e43: 00 	test   rsi,0x1
  00e4a:    	je     0x33ff2
  00e50:    	sar    rsi,1
  00e53:    	sub    rsp,0x60
  00e57:    	movq   QWORD PTR [rsp],xmm2
  00e5c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e62:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e68:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e6e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e74:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e7a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e81: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e88: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e8f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e96: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e9d: 4d 	movabs rax,0x564da0819c40
  00ea7:    	call   rax
  00ea9:    	movq   xmm2,QWORD PTR [rsp]
  00eae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eb4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ec0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ec6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ecc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ed3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00eda: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00ee1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00ee8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00eef:    	add    rsp,0x60
  00ef3: 4d 	movabs r13,0x564da0e75570
  00efd:    	test   rax,rax
  00f00:    	je     0xfffeafd7
  00f06: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 %15 = %11
  00f0d: ff 	mov    rax,QWORD PTR [r14-0x88]
  00f14: ff 	mov    QWORD PTR [r14-0xa8],rax
:00084 %16 = %12
  00f1b: ff 	mov    rax,QWORD PTR [r14-0x90]
  00f22: ff 	mov    QWORD PTR [r14-0xb0],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00f29: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00f30: 00 	test   rdi,0x7
  00f37:    	jne    0x3406b
  00f3d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00f41:    	jne    0x3406b
  00f47: 26 	cmp    DWORD PTR [rip+0xfffffffffffed40f],0x26        # 0xfffee35d
  00f4e:    	jne    0x3406b
  00f54:    	sub    rsp,0x60
  00f58:    	movq   QWORD PTR [rsp],xmm2
  00f5d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f63:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f69:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f6f:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f75:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f7b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f82: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f89: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f90: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f97: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f9e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00fa7: ff 	mov    rax,QWORD PTR [r14-0xa0]
  00fae:    	mov    QWORD PTR [rsp-0x40],rax
  00fb3: 00 	mov    rdi,0x2
  00fba: ff 	mov    rax,QWORD PTR [r14-0xa8]
  00fc1:    	mov    QWORD PTR [rsp-0x48],rax
  00fc6: ff 	mov    rax,QWORD PTR [r14-0xb0]
  00fcd:    	mov    QWORD PTR [rsp-0x50],rax
  00fd2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00fdb: 10 	movabs rax,0x1000000046
  00fe5:    	mov    QWORD PTR [rsp-0x30],rax
  00fea: 4d 	movabs r13,0x564da0e8bc90
  00ff4:    	mov    rsi,QWORD PTR [rbx]
  00ff7:    	mov    QWORD PTR [rsp-0x18],rsi
  00ffc:    	lea    rsi,[rsp-0x18]
  01001:    	mov    QWORD PTR [rbx],rsi
  01004:    	lea    r14,[rsp-0x10]
  01009:    	mov    QWORD PTR [rsp-0x20],r14
  0100e:    	call   0xfffeef08
  01013:    	lea    r14,[rbp-0x8]
  01017:    	mov    QWORD PTR [rbx],r14
  0101a:    	mov    r14,QWORD PTR [rbp-0x10]
  0101e:    	movq   xmm2,QWORD PTR [rsp]
  01023:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01029:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0102f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01035:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0103b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01041: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01048: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0104f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01056: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0105d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01064:    	add    rsp,0x60
  01068: 4d 	movabs r13,0x564da0e755b0
  01072:    	test   rax,rax
  01075:    	je     0xfffeafd7
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  0107b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0107f:    	mov    rax,QWORD PTR [rdi+0x10]
  01083: ff 	mov    QWORD PTR [r14-0xa0],rax
:00089 %15 = 2: i32
  0108a: ff 	mov    QWORD PTR [r14-0xa8],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  01095: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0109c: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  010a3: 00 	test   rdi,0x7
  010aa:    	jne    0x340e4
  010b0:    	cmp    DWORD PTR [rdi+0x4],0xb
  010b4:    	jne    0x340e4
  010ba: 00 	test   rsi,0x1
  010c1:    	je     0x340e4
  010c7:    	sar    rsi,1
  010ca:    	sub    rsp,0x60
  010ce:    	movq   QWORD PTR [rsp],xmm2
  010d3:    	movq   QWORD PTR [rsp+0x8],xmm3
  010d9:    	movq   QWORD PTR [rsp+0x10],xmm4
  010df:    	movq   QWORD PTR [rsp+0x18],xmm5
  010e5:    	movq   QWORD PTR [rsp+0x20],xmm6
  010eb:    	movq   QWORD PTR [rsp+0x28],xmm7
  010f1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010f8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010ff: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01106: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0110d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01114: 4d 	movabs rax,0x564da0819c40
  0111e:    	call   rax
  01120:    	movq   xmm2,QWORD PTR [rsp]
  01125:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0112b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01131:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01137:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0113d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01143: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0114a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01151: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01158: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0115f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01166:    	add    rsp,0x60
  0116a: 4d 	movabs r13,0x564da0e755f0
  01174:    	test   rax,rax
  01177:    	je     0xfffeafd7
  0117d: ff 	mov    QWORD PTR [r14-0xa0],rax
:00091 %15 = %11
  01184: ff 	mov    rax,QWORD PTR [r14-0x88]
  0118b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00092 %16 = %12
  01192: ff 	mov    rax,QWORD PTR [r14-0x90]
  01199: ff 	mov    QWORD PTR [r14-0xb0],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  011a0: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  011a7: 00 	test   rdi,0x7
  011ae:    	jne    0x3415d
  011b4:    	cmp    DWORD PTR [rdi+0x4],0x2a
  011b8:    	jne    0x3415d
  011be: 26 	cmp    DWORD PTR [rip+0xfffffffffffed198],0x26        # 0xfffee35d
  011c5:    	jne    0x3415d
  011cb:    	sub    rsp,0x60
  011cf:    	movq   QWORD PTR [rsp],xmm2
  011d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  011da:    	movq   QWORD PTR [rsp+0x10],xmm4
  011e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  011e6:    	movq   QWORD PTR [rsp+0x20],xmm6
  011ec:    	movq   QWORD PTR [rsp+0x28],xmm7
  011f2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  011f9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01200: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01207: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0120e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01215: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0121e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01225:    	mov    QWORD PTR [rsp-0x40],rax
  0122a: 00 	mov    rdi,0x2
  01231: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01238:    	mov    QWORD PTR [rsp-0x48],rax
  0123d: ff 	mov    rax,QWORD PTR [r14-0xb0]
  01244:    	mov    QWORD PTR [rsp-0x50],rax
  01249: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01252: 10 	movabs rax,0x1000000046
  0125c:    	mov    QWORD PTR [rsp-0x30],rax
  01261: 4d 	movabs r13,0x564da0e8bc90
  0126b:    	mov    rsi,QWORD PTR [rbx]
  0126e:    	mov    QWORD PTR [rsp-0x18],rsi
  01273:    	lea    rsi,[rsp-0x18]
  01278:    	mov    QWORD PTR [rbx],rsi
  0127b:    	lea    r14,[rsp-0x10]
  01280:    	mov    QWORD PTR [rsp-0x20],r14
  01285:    	call   0xfffeef08
  0128a:    	lea    r14,[rbp-0x8]
  0128e:    	mov    QWORD PTR [rbx],r14
  01291:    	mov    r14,QWORD PTR [rbp-0x10]
  01295:    	movq   xmm2,QWORD PTR [rsp]
  0129a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012a6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012ac:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012b2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012b8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012bf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012c6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012cd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012d4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012db:    	add    rsp,0x60
  012df: 4d 	movabs r13,0x564da0e75630
  012e9:    	test   rax,rax
  012ec:    	je     0xfffeafd7
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  012f2:    	mov    rdi,QWORD PTR [rbp-0x30]
  012f6:    	mov    rax,QWORD PTR [rdi+0x18]
  012fa: ff 	mov    QWORD PTR [r14-0xa0],rax
:00097 %15 = %11
  01301: ff 	mov    rax,QWORD PTR [r14-0x88]
  01308: ff 	mov    QWORD PTR [r14-0xa8],rax
:00098 %16 = %12
  0130f: ff 	mov    rax,QWORD PTR [r14-0x90]
  01316: ff 	mov    QWORD PTR [r14-0xb0],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  0131d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01324: 00 	test   rdi,0x7
  0132b:    	jne    0x341d6
  01331:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01335:    	jne    0x341d6
  0133b: 26 	cmp    DWORD PTR [rip+0xfffffffffffed01b],0x26        # 0xfffee35d
  01342:    	jne    0x341d6
  01348:    	sub    rsp,0x60
  0134c:    	movq   QWORD PTR [rsp],xmm2
  01351:    	movq   QWORD PTR [rsp+0x8],xmm3
  01357:    	movq   QWORD PTR [rsp+0x10],xmm4
  0135d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01363:    	movq   QWORD PTR [rsp+0x20],xmm6
  01369:    	movq   QWORD PTR [rsp+0x28],xmm7
  0136f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01376: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0137d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01384: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0138b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01392: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0139b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  013a2:    	mov    QWORD PTR [rsp-0x40],rax
  013a7: 00 	mov    rdi,0x2
  013ae: ff 	mov    rax,QWORD PTR [r14-0xa8]
  013b5:    	mov    QWORD PTR [rsp-0x48],rax
  013ba: ff 	mov    rax,QWORD PTR [r14-0xb0]
  013c1:    	mov    QWORD PTR [rsp-0x50],rax
  013c6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013cf: 0e 	movabs rax,0xe00000048
  013d9:    	mov    QWORD PTR [rsp-0x30],rax
  013de: 4d 	movabs r13,0x564da0e92080
  013e8:    	mov    rsi,QWORD PTR [rbx]
  013eb:    	mov    QWORD PTR [rsp-0x18],rsi
  013f0:    	lea    rsi,[rsp-0x18]
  013f5:    	mov    QWORD PTR [rbx],rsi
  013f8:    	lea    r14,[rsp-0x10]
  013fd:    	mov    QWORD PTR [rsp-0x20],r14
  01402:    	call   0xfffef4d4
  01407:    	lea    r14,[rbp-0x8]
  0140b:    	mov    QWORD PTR [rbx],r14
  0140e:    	mov    r14,QWORD PTR [rbp-0x10]
  01412:    	movq   xmm2,QWORD PTR [rsp]
  01417:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0141d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01423:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01429:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0142f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01435: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0143c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01443: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0144a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01451: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01458:    	add    rsp,0x60
  0145c: 4d 	movabs r13,0x564da0e75690
  01466:    	test   rax,rax
  01469:    	je     0xfffeafd7
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  0146f: ff 	mov    rdi,QWORD PTR [r14-0x90]
  01476: 00 	test   rdi,0x7
  0147d:    	jne    0x3424f
  01483:    	cmp    DWORD PTR [rdi+0x4],0x30
  01487:    	jne    0x3424f
  0148d: 26 	cmp    DWORD PTR [rip+0xfffffffffffecec9],0x26        # 0xfffee35d
  01494:    	jne    0x3424f
  0149a:    	mov    esi,DWORD PTR [rip+0x1030]        # 0x24d0
  014a0:    	cmp    esi,0xffffffff
  014a3:    	je     0x342c8
  014a9:    	cmp    WORD PTR [rdi+0x2],0x3
  014ae:    	jne    0x14c7
  014b4:    	cmp    esi,0x6
  014b7:    	jge    0x14c7
  014bd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  014c2:    	jmp    0x1567
  014c7:    	sub    rsp,0x60
  014cb:    	movq   QWORD PTR [rsp],xmm2
  014d0:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d6:    	movq   QWORD PTR [rsp+0x10],xmm4
  014dc:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e2:    	movq   QWORD PTR [rsp+0x20],xmm6
  014e8:    	movq   QWORD PTR [rsp+0x28],xmm7
  014ee: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014f5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014fc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01503: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0150a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01511: 4d 	movabs rax,0x564da0797d70
  0151b:    	call   rax
  0151d:    	movq   xmm2,QWORD PTR [rsp]
  01522:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01528:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0152e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01534:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0153a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01540: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01547: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0154e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01555: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0155c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01563:    	add    rsp,0x60
  01567: ff 	mov    QWORD PTR [r14-0xa0],rax
:00103 
:00105 condnotbr %14 =>:00148
  0156e: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01575:    	or     rax,0x10
  01579:    	cmp    rax,0x14
  0157d:    	je     0x23a4
:00106 %14 = %12
  01583: ff 	mov    rax,QWORD PTR [r14-0x90]
  0158a: ff 	mov    QWORD PTR [r14-0xa0],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  01591:    	mov    rdi,QWORD PTR [r14-0x30]
  01595: 26 	cmp    DWORD PTR [rip+0xfffffffffffecdc1],0x26        # 0xfffee35d
  0159c:    	jne    0x34385
  015a2:    	sub    rsp,0x60
  015a6:    	movq   QWORD PTR [rsp],xmm2
  015ab:    	movq   QWORD PTR [rsp+0x8],xmm3
  015b1:    	movq   QWORD PTR [rsp+0x10],xmm4
  015b7:    	movq   QWORD PTR [rsp+0x18],xmm5
  015bd:    	movq   QWORD PTR [rsp+0x20],xmm6
  015c3:    	movq   QWORD PTR [rsp+0x28],xmm7
  015c9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015d0: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015d7: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015de: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015e5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015ec: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015f5:    	mov    rax,QWORD PTR [r14-0x30]
  015f9:    	mov    QWORD PTR [rsp-0x40],rax
  015fe: 00 	mov    rdi,0x1
  01605: ff 	mov    rax,QWORD PTR [r14-0xa0]
  0160c:    	mov    QWORD PTR [rsp-0x48],rax
  01611: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0161a: 0e 	movabs rax,0xe0000004c
  01624:    	mov    QWORD PTR [rsp-0x30],rax
  01629: 4d 	movabs r13,0x564da0e94e00
  01633:    	mov    rsi,QWORD PTR [rbx]
  01636:    	mov    QWORD PTR [rsp-0x18],rsi
  0163b:    	lea    rsi,[rsp-0x18]
  01640:    	mov    QWORD PTR [rbx],rsi
  01643:    	lea    r14,[rsp-0x10]
  01648:    	mov    QWORD PTR [rsp-0x20],r14
  0164d:    	call   0xffff7e79
  01652:    	lea    r14,[rbp-0x8]
  01656:    	mov    QWORD PTR [rbx],r14
  01659:    	mov    r14,QWORD PTR [rbp-0x10]
  0165d:    	movq   xmm2,QWORD PTR [rsp]
  01662:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01668:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0166e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01674:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0167a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01680: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01687: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0168e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01695: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0169c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  016a3:    	add    rsp,0x60
  016a7: 4d 	movabs r13,0x564da0e75710
  016b1:    	test   rax,rax
  016b4:    	je     0xfffeafd7
  016ba: ff 	mov    QWORD PTR [r14-0x98],rax
:00108 
:00110 %14 = dynvar(2, %2)
  016c1:    	mov    rax,QWORD PTR [rbp-0x18]
  016c5:    	mov    rax,QWORD PTR [rax]
  016c8:    	mov    rax,QWORD PTR [rax-0x28]
  016cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00111 %16 = dynvar(2, %2)
  016d3:    	mov    rax,QWORD PTR [rbp-0x18]
  016d7:    	mov    rax,QWORD PTR [rax]
  016da:    	mov    rax,QWORD PTR [rax-0x28]
  016de: ff 	mov    QWORD PTR [r14-0xb0],rax
:00112 %15 = %16.call x()                   [Vec]
  016e5: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  016ec: 00 	test   rdi,0x7
  016f3:    	jne    0x343fe
  016f9:    	cmp    DWORD PTR [rdi+0x4],0x28
  016fd:    	jne    0x343fe
  01703: 26 	cmp    DWORD PTR [rip+0xfffffffffffecc53],0x26        # 0xfffee35d
  0170a:    	jne    0x343fe
  01710:    	mov    esi,DWORD PTR [rip+0xdc2]        # 0x24d8
  01716:    	cmp    esi,0xffffffff
  01719:    	je     0x34477
  0171f:    	cmp    WORD PTR [rdi+0x2],0x3
  01724:    	jne    0x173d
  0172a:    	cmp    esi,0x6
  0172d:    	jge    0x173d
  01733:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01738:    	jmp    0x17dd
  0173d:    	sub    rsp,0x60
  01741:    	movq   QWORD PTR [rsp],xmm2
  01746:    	movq   QWORD PTR [rsp+0x8],xmm3
  0174c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01752:    	movq   QWORD PTR [rsp+0x18],xmm5
  01758:    	movq   QWORD PTR [rsp+0x20],xmm6
  0175e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01764: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0176b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01772: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01779: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01780: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01787: 4d 	movabs rax,0x564da0797d70
  01791:    	call   rax
  01793:    	movq   xmm2,QWORD PTR [rsp]
  01798:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0179e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017a4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017aa:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017b0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017b6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017bd: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  017c4: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017cb: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017d2: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017d9:    	add    rsp,0x60
  017dd: ff 	mov    QWORD PTR [r14-0xa8],rax
:00113 
:00115 %16 = %13.call x()                   [Vec]
  017e4: ff 	mov    rdi,QWORD PTR [r14-0x98]
  017eb: 00 	test   rdi,0x7
  017f2:    	jne    0x34534
  017f8:    	cmp    DWORD PTR [rdi+0x4],0x28
  017fc:    	jne    0x34534
  01802: 26 	cmp    DWORD PTR [rip+0xfffffffffffecb54],0x26        # 0xfffee35d
  01809:    	jne    0x34534
  0180f:    	mov    esi,DWORD PTR [rip+0xccb]        # 0x24e0
  01815:    	cmp    esi,0xffffffff
  01818:    	je     0x345ad
  0181e:    	cmp    WORD PTR [rdi+0x2],0x3
  01823:    	jne    0x183c
  01829:    	cmp    esi,0x6
  0182c:    	jge    0x183c
  01832:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01837:    	jmp    0x18dc
  0183c:    	sub    rsp,0x60
  01840:    	movq   QWORD PTR [rsp],xmm2
  01845:    	movq   QWORD PTR [rsp+0x8],xmm3
  0184b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01851:    	movq   QWORD PTR [rsp+0x18],xmm5
  01857:    	movq   QWORD PTR [rsp+0x20],xmm6
  0185d:    	movq   QWORD PTR [rsp+0x28],xmm7
  01863: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0186a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01871: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01878: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0187f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01886: 4d 	movabs rax,0x564da0797d70
  01890:    	call   rax
  01892:    	movq   xmm2,QWORD PTR [rsp]
  01897:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0189d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018a3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018a9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018af:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018b5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018bc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018c3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  018ca: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  018d1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  018d8:    	add    rsp,0x60
  018dc: ff 	mov    QWORD PTR [r14-0xb0],rax
:00116 
:00118 %15 = %15 + %16                      [Float][Float]
  018e3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  018ea: 00 	test   rdi,0x1
  018f1:    	jne    0x3466a
  018f7: 00 	test   rdi,0x2
  018fe:    	je     0x193b
  01904:    	xorps  xmm13,xmm13
  01908: 00 	movabs rax,0x8000000000000002
  01912:    	cmp    rdi,rax
  01915:    	je     0x194e
  0191b:    	mov    rax,rdi
  0191e:    	sar    rax,0x3f
  01922:    	add    rax,0x2
  01926:    	and    rdi,0xfffffffffffffffc
  0192a:    	or     rdi,rax
  0192d:    	rol    rdi,0x3d
  01931:    	movq   xmm13,rdi
  01936:    	jmp    0x194e
  0193b:    	call   0xfffeb030
  01940:    	test   rax,rax
  01943:    	je     0x3466a
  01949:    	movq   xmm13,xmm0
  0194e: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01955: 00 	test   rdi,0x1
  0195c:    	jne    0x346e3
  01962: 00 	test   rdi,0x2
  01969:    	je     0x19a6
  0196f:    	xorps  xmm14,xmm14
  01973: 00 	movabs rax,0x8000000000000002
  0197d:    	cmp    rdi,rax
  01980:    	je     0x19b9
  01986:    	mov    rax,rdi
  01989:    	sar    rax,0x3f
  0198d:    	add    rax,0x2
  01991:    	and    rdi,0xfffffffffffffffc
  01995:    	or     rdi,rax
  01998:    	rol    rdi,0x3d
  0199c:    	movq   xmm14,rdi
  019a1:    	jmp    0x19b9
  019a6:    	call   0xfffeb030
  019ab:    	test   rax,rax
  019ae:    	je     0x346e3
  019b4:    	movq   xmm14,xmm0
  019b9:    	addsd  xmm13,xmm14
:00119 _ = %14.call x=(%15; 1)              [Vec]
  019be:    	movq   xmm0,xmm13
  019c3:    	call   0xfffeb154
  019c8: ff 	mov    QWORD PTR [r14-0xa8],rax
  019cf: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  019d6: 00 	test   rdi,0x7
  019dd:    	jne    0x3475c
  019e3:    	cmp    DWORD PTR [rdi+0x4],0x28
  019e7:    	jne    0x3475c
  019ed: 26 	cmp    DWORD PTR [rip+0xfffffffffffec969],0x26        # 0xfffee35d
  019f4:    	jne    0x3475c
  019fa:    	mov    esi,DWORD PTR [rip+0xae8]        # 0x24e8
  01a00:    	cmp    esi,0xffffffff
  01a03:    	je     0x347d5
  01a09:    	cmp    WORD PTR [rdi+0x2],0x3
  01a0e:    	jne    0x1a2e
  01a14:    	cmp    esi,0x6
  01a17:    	jge    0x1a2e
  01a1d: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01a24:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01a29:    	jmp    0x1b04
  01a2e:    	sub    rsp,0x70
  01a32:    	movq   QWORD PTR [rsp],xmm2
  01a37:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a3d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a43:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a49:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a4f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a55: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a5c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01a63: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01a6a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01a71: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a78: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01a7f: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01a86: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01a8d: 4d 	movabs rax,0x564da0797ff0
  01a97:    	call   rax
  01a99:    	movq   xmm2,QWORD PTR [rsp]
  01a9e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01aa4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01aaa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ab0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01ab6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01abc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01ac3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01aca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ad1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ad8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01adf: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01ae6: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01aed:    	add    rsp,0x70
  01af1: 4d 	movabs r13,0x564da0e757d0
  01afb:    	test   rax,rax
  01afe:    	je     0xfffeafd7
:00120 
:00122 %14 = dynvar(2, %2)
  01b04:    	mov    rax,QWORD PTR [rbp-0x18]
  01b08:    	mov    rax,QWORD PTR [rax]
  01b0b:    	mov    rax,QWORD PTR [rax-0x28]
  01b0f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00123 %16 = dynvar(2, %2)
  01b16:    	mov    rax,QWORD PTR [rbp-0x18]
  01b1a:    	mov    rax,QWORD PTR [rax]
  01b1d:    	mov    rax,QWORD PTR [rax-0x28]
  01b21: ff 	mov    QWORD PTR [r14-0xb0],rax
:00124 %15 = %16.call y()                   [Vec]
  01b28: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01b2f: 00 	test   rdi,0x7
  01b36:    	jne    0x348b8
  01b3c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b40:    	jne    0x348b8
  01b46: 26 	cmp    DWORD PTR [rip+0xfffffffffffec810],0x26        # 0xfffee35d
  01b4d:    	jne    0x348b8
  01b53:    	mov    esi,DWORD PTR [rip+0x997]        # 0x24f0
  01b59:    	cmp    esi,0xffffffff
  01b5c:    	je     0x34931
  01b62:    	cmp    WORD PTR [rdi+0x2],0x3
  01b67:    	jne    0x1b80
  01b6d:    	cmp    esi,0x6
  01b70:    	jge    0x1b80
  01b76:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b7b:    	jmp    0x1c20
  01b80:    	sub    rsp,0x60
  01b84:    	movq   QWORD PTR [rsp],xmm2
  01b89:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b8f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b95:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b9b:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ba1:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ba7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01bae: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01bb5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01bbc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01bc3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01bca: 4d 	movabs rax,0x564da0797d70
  01bd4:    	call   rax
  01bd6:    	movq   xmm2,QWORD PTR [rsp]
  01bdb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01be1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01be7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bf3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bf9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c00: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c07: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c0e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c15: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c1c:    	add    rsp,0x60
  01c20: ff 	mov    QWORD PTR [r14-0xa8],rax
:00125 
:00127 %16 = %13.call y()                   [Vec]
  01c27: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c2e: 00 	test   rdi,0x7
  01c35:    	jne    0x349ee
  01c3b:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c3f:    	jne    0x349ee
  01c45: 26 	cmp    DWORD PTR [rip+0xfffffffffffec711],0x26        # 0xfffee35d
  01c4c:    	jne    0x349ee
  01c52:    	mov    esi,DWORD PTR [rip+0x8a0]        # 0x24f8
  01c58:    	cmp    esi,0xffffffff
  01c5b:    	je     0x34a67
  01c61:    	cmp    WORD PTR [rdi+0x2],0x3
  01c66:    	jne    0x1c7f
  01c6c:    	cmp    esi,0x6
  01c6f:    	jge    0x1c7f
  01c75:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01c7a:    	jmp    0x1d1f
  01c7f:    	sub    rsp,0x60
  01c83:    	movq   QWORD PTR [rsp],xmm2
  01c88:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c8e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c94:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c9a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ca0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ca6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01cad: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01cb4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01cbb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01cc2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01cc9: 4d 	movabs rax,0x564da0797d70
  01cd3:    	call   rax
  01cd5:    	movq   xmm2,QWORD PTR [rsp]
  01cda:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ce0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ce6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01cec:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cf2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01cf8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cff: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d06: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d0d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d14: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d1b:    	add    rsp,0x60
  01d1f: ff 	mov    QWORD PTR [r14-0xb0],rax
:00128 
:00130 %15 = %15 + %16                      [Float][Float]
  01d26: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01d2d: 00 	test   rdi,0x1
  01d34:    	jne    0x34b24
  01d3a: 00 	test   rdi,0x2
  01d41:    	je     0x1d7e
  01d47:    	xorps  xmm13,xmm13
  01d4b: 00 	movabs rax,0x8000000000000002
  01d55:    	cmp    rdi,rax
  01d58:    	je     0x1d91
  01d5e:    	mov    rax,rdi
  01d61:    	sar    rax,0x3f
  01d65:    	add    rax,0x2
  01d69:    	and    rdi,0xfffffffffffffffc
  01d6d:    	or     rdi,rax
  01d70:    	rol    rdi,0x3d
  01d74:    	movq   xmm13,rdi
  01d79:    	jmp    0x1d91
  01d7e:    	call   0xfffeb030
  01d83:    	test   rax,rax
  01d86:    	je     0x34b24
  01d8c:    	movq   xmm13,xmm0
  01d91: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01d98: 00 	test   rdi,0x1
  01d9f:    	jne    0x34b9d
  01da5: 00 	test   rdi,0x2
  01dac:    	je     0x1de9
  01db2:    	xorps  xmm14,xmm14
  01db6: 00 	movabs rax,0x8000000000000002
  01dc0:    	cmp    rdi,rax
  01dc3:    	je     0x1dfc
  01dc9:    	mov    rax,rdi
  01dcc:    	sar    rax,0x3f
  01dd0:    	add    rax,0x2
  01dd4:    	and    rdi,0xfffffffffffffffc
  01dd8:    	or     rdi,rax
  01ddb:    	rol    rdi,0x3d
  01ddf:    	movq   xmm14,rdi
  01de4:    	jmp    0x1dfc
  01de9:    	call   0xfffeb030
  01dee:    	test   rax,rax
  01df1:    	je     0x34b9d
  01df7:    	movq   xmm14,xmm0
  01dfc:    	addsd  xmm13,xmm14
:00131 _ = %14.call y=(%15; 1)              [Vec]
  01e01:    	movq   xmm0,xmm13
  01e06:    	call   0xfffeb154
  01e0b: ff 	mov    QWORD PTR [r14-0xa8],rax
  01e12: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01e19: 00 	test   rdi,0x7
  01e20:    	jne    0x34c16
  01e26:    	cmp    DWORD PTR [rdi+0x4],0x28
  01e2a:    	jne    0x34c16
  01e30: 26 	cmp    DWORD PTR [rip+0xfffffffffffec526],0x26        # 0xfffee35d
  01e37:    	jne    0x34c16
  01e3d:    	mov    esi,DWORD PTR [rip+0x6bd]        # 0x2500
  01e43:    	cmp    esi,0xffffffff
  01e46:    	je     0x34c8f
  01e4c:    	cmp    WORD PTR [rdi+0x2],0x3
  01e51:    	jne    0x1e71
  01e57:    	cmp    esi,0x6
  01e5a:    	jge    0x1e71
  01e60: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01e67:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01e6c:    	jmp    0x1f47
  01e71:    	sub    rsp,0x70
  01e75:    	movq   QWORD PTR [rsp],xmm2
  01e7a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e80:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e86:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e8c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e92:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e98: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e9f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ea6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01ead: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01eb4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ebb: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01ec2: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01ec9: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  01ed0: 4d 	movabs rax,0x564da0797ff0
  01eda:    	call   rax
  01edc:    	movq   xmm2,QWORD PTR [rsp]
  01ee1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ee7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01eed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ef3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01ef9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01eff: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f06: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f0d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01f14: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f1b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f22: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01f29: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01f30:    	add    rsp,0x70
  01f34: 4d 	movabs r13,0x564da0e75890
  01f3e:    	test   rax,rax
  01f41:    	je     0xfffeafd7
:00132 
:00134 %14 = dynvar(2, %2)
  01f47:    	mov    rax,QWORD PTR [rbp-0x18]
  01f4b:    	mov    rax,QWORD PTR [rax]
  01f4e:    	mov    rax,QWORD PTR [rax-0x28]
  01f52: ff 	mov    QWORD PTR [r14-0xa0],rax
:00135 %16 = dynvar(2, %2)
  01f59:    	mov    rax,QWORD PTR [rbp-0x18]
  01f5d:    	mov    rax,QWORD PTR [rax]
  01f60:    	mov    rax,QWORD PTR [rax-0x28]
  01f64: ff 	mov    QWORD PTR [r14-0xb0],rax
:00136 %15 = %16.call z()                   [Vec]
  01f6b: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  01f72: 00 	test   rdi,0x7
  01f79:    	jne    0x34d72
  01f7f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01f83:    	jne    0x34d72
  01f89: 26 	cmp    DWORD PTR [rip+0xfffffffffffec3cd],0x26        # 0xfffee35d
  01f90:    	jne    0x34d72
  01f96:    	mov    esi,DWORD PTR [rip+0x56c]        # 0x2508
  01f9c:    	cmp    esi,0xffffffff
  01f9f:    	je     0x34deb
  01fa5:    	cmp    WORD PTR [rdi+0x2],0x3
  01faa:    	jne    0x1fc3
  01fb0:    	cmp    esi,0x6
  01fb3:    	jge    0x1fc3
  01fb9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01fbe:    	jmp    0x2063
  01fc3:    	sub    rsp,0x60
  01fc7:    	movq   QWORD PTR [rsp],xmm2
  01fcc:    	movq   QWORD PTR [rsp+0x8],xmm3
  01fd2:    	movq   QWORD PTR [rsp+0x10],xmm4
  01fd8:    	movq   QWORD PTR [rsp+0x18],xmm5
  01fde:    	movq   QWORD PTR [rsp+0x20],xmm6
  01fe4:    	movq   QWORD PTR [rsp+0x28],xmm7
  01fea: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ff1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ff8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01fff: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02006: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0200d: 4d 	movabs rax,0x564da0797d70
  02017:    	call   rax
  02019:    	movq   xmm2,QWORD PTR [rsp]
  0201e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02024:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0202a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02030:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02036:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0203c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02043: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0204a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02051: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02058: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0205f:    	add    rsp,0x60
  02063: ff 	mov    QWORD PTR [r14-0xa8],rax
:00137 
:00139 %16 = %13.call z()                   [Vec]
  0206a: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02071: 00 	test   rdi,0x7
  02078:    	jne    0x34ea8
  0207e:    	cmp    DWORD PTR [rdi+0x4],0x28
  02082:    	jne    0x34ea8
  02088: 26 	cmp    DWORD PTR [rip+0xfffffffffffec2ce],0x26        # 0xfffee35d
  0208f:    	jne    0x34ea8
  02095:    	mov    esi,DWORD PTR [rip+0x475]        # 0x2510
  0209b:    	cmp    esi,0xffffffff
  0209e:    	je     0x34f21
  020a4:    	cmp    WORD PTR [rdi+0x2],0x3
  020a9:    	jne    0x20c2
  020af:    	cmp    esi,0x6
  020b2:    	jge    0x20c2
  020b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  020bd:    	jmp    0x2162
  020c2:    	sub    rsp,0x60
  020c6:    	movq   QWORD PTR [rsp],xmm2
  020cb:    	movq   QWORD PTR [rsp+0x8],xmm3
  020d1:    	movq   QWORD PTR [rsp+0x10],xmm4
  020d7:    	movq   QWORD PTR [rsp+0x18],xmm5
  020dd:    	movq   QWORD PTR [rsp+0x20],xmm6
  020e3:    	movq   QWORD PTR [rsp+0x28],xmm7
  020e9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  020f0: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  020f7: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  020fe: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02105: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0210c: 4d 	movabs rax,0x564da0797d70
  02116:    	call   rax
  02118:    	movq   xmm2,QWORD PTR [rsp]
  0211d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02123:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02129:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0212f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02135:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0213b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02142: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02149: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02150: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02157: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0215e:    	add    rsp,0x60
  02162: ff 	mov    QWORD PTR [r14-0xb0],rax
:00140 
:00142 %15 = %15 + %16                      [Float][Float]
  02169: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  02170: 00 	test   rdi,0x1
  02177:    	jne    0x34fde
  0217d: 00 	test   rdi,0x2
  02184:    	je     0x21c1
  0218a:    	xorps  xmm13,xmm13
  0218e: 00 	movabs rax,0x8000000000000002
  02198:    	cmp    rdi,rax
  0219b:    	je     0x21d4
  021a1:    	mov    rax,rdi
  021a4:    	sar    rax,0x3f
  021a8:    	add    rax,0x2
  021ac:    	and    rdi,0xfffffffffffffffc
  021b0:    	or     rdi,rax
  021b3:    	rol    rdi,0x3d
  021b7:    	movq   xmm13,rdi
  021bc:    	jmp    0x21d4
  021c1:    	call   0xfffeb030
  021c6:    	test   rax,rax
  021c9:    	je     0x34fde
  021cf:    	movq   xmm13,xmm0
  021d4: ff 	mov    rdi,QWORD PTR [r14-0xb0]
  021db: 00 	test   rdi,0x1
  021e2:    	jne    0x35057
  021e8: 00 	test   rdi,0x2
  021ef:    	je     0x222c
  021f5:    	xorps  xmm14,xmm14
  021f9: 00 	movabs rax,0x8000000000000002
  02203:    	cmp    rdi,rax
  02206:    	je     0x223f
  0220c:    	mov    rax,rdi
  0220f:    	sar    rax,0x3f
  02213:    	add    rax,0x2
  02217:    	and    rdi,0xfffffffffffffffc
  0221b:    	or     rdi,rax
  0221e:    	rol    rdi,0x3d
  02222:    	movq   xmm14,rdi
  02227:    	jmp    0x223f
  0222c:    	call   0xfffeb030
  02231:    	test   rax,rax
  02234:    	je     0x35057
  0223a:    	movq   xmm14,xmm0
  0223f:    	addsd  xmm13,xmm14
:00143 _ = %14.call z=(%15; 1)              [Vec]
  02244:    	movq   xmm0,xmm13
  02249:    	call   0xfffeb154
  0224e: ff 	mov    QWORD PTR [r14-0xa8],rax
  02255: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0225c: 00 	test   rdi,0x7
  02263:    	jne    0x350d0
  02269:    	cmp    DWORD PTR [rdi+0x4],0x28
  0226d:    	jne    0x350d0
  02273: 26 	cmp    DWORD PTR [rip+0xfffffffffffec0e3],0x26        # 0xfffee35d
  0227a:    	jne    0x350d0
  02280:    	mov    esi,DWORD PTR [rip+0x292]        # 0x2518
  02286:    	cmp    esi,0xffffffff
  02289:    	je     0x35149
  0228f:    	cmp    WORD PTR [rdi+0x2],0x3
  02294:    	jne    0x22b4
  0229a:    	cmp    esi,0x6
  0229d:    	jge    0x22b4
  022a3: ff 	mov    rax,QWORD PTR [r14-0xa8]
  022aa:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  022af:    	jmp    0x238a
  022b4:    	sub    rsp,0x70
  022b8:    	movq   QWORD PTR [rsp],xmm2
  022bd:    	movq   QWORD PTR [rsp+0x8],xmm3
  022c3:    	movq   QWORD PTR [rsp+0x10],xmm4
  022c9:    	movq   QWORD PTR [rsp+0x18],xmm5
  022cf:    	movq   QWORD PTR [rsp+0x20],xmm6
  022d5:    	movq   QWORD PTR [rsp+0x28],xmm7
  022db: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  022e2: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  022e9: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  022f0: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  022f7: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  022fe: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  02305: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  0230c: ff 	mov    rdx,QWORD PTR [r14-0xa8]
  02313: 4d 	movabs rax,0x564da0797ff0
  0231d:    	call   rax
  0231f:    	movq   xmm2,QWORD PTR [rsp]
  02324:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0232a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02330:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02336:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0233c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02342: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02349: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02350: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02357: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0235e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02365: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  0236c: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  02373:    	add    rsp,0x70
  02377: 4d 	movabs r13,0x564da0e75950
  02381:    	test   rax,rax
  02384:    	je     0xfffeafd7
:00144 
:00146 %14 = %15
:00147 ret %14
  0238a:    	movq   xmm0,xmm13
  0238f:    	call   0xfffeb154
  02394: ff 	mov    QWORD PTR [r14-0xa0],rax
  0239b: ff 	mov    rax,QWORD PTR [r14-0xa0]
  023a2:    	leave  
  023a3:    	ret    
:00148 %14 = nil
  023a4: ff 	mov    QWORD PTR [r14-0xa0],0x4
:00149 ret %14
  023af: ff 	mov    rax,QWORD PTR [r14-0xa0]
  023b6:    	leave  
  023b7:    	ret    
==> start whole compile: intersect FuncId(72) self_class:Plane start:[00000] bytecode:0x564da0e92080
<== finished compile. elapsed:110.9µs
offset:Pos(95608) code: 5726 bytes  data: 266 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x32d10
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    QWORD PTR [r14-0x78],rax
  0003a:    	mov    QWORD PTR [r14-0x80],rax
  0003e: ff 	mov    QWORD PTR [r14-0x88],rax
  00045: ff 	mov    QWORD PTR [r14-0x90],rax
  0004c: ff 	mov    QWORD PTR [r14-0x98],rax
  00053:    	mov    rdi,QWORD PTR [rbp-0x30]
  00057: 00 	test   rdi,0x7
  0005e:    	jne    0x32d1f
  00064:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00068:    	jne    0x32d1f
:00000 init_method reg:14 arg:2 pos:2 req:2 block:0 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  0006e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00072:    	mov    rax,QWORD PTR [rdi+0x10]
  00076:    	mov    QWORD PTR [r14-0x68],rax
:00002 %8 = @n: Plane[IvarId(1)]
  0007a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0007e:    	mov    rax,QWORD PTR [rdi+0x18]
  00082:    	mov    QWORD PTR [r14-0x70],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  00086:    	mov    rdi,QWORD PTR [r14-0x68]
  0008a: 00 	test   rdi,0x7
  00091:    	jne    0x32d2e
  00097:    	cmp    DWORD PTR [rdi+0x4],0x28
  0009b:    	jne    0x32d2e
  000a1: 26 	cmp    DWORD PTR [rip+0xfffffffffffebd99],0x26        # 0xfffebe41
  000a8:    	jne    0x32d2e
  000ae: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000b7:    	mov    rax,QWORD PTR [r14-0x68]
  000bb:    	mov    QWORD PTR [rsp-0x40],rax
  000c0: 00 	mov    rdi,0x1
  000c7:    	mov    rax,QWORD PTR [r14-0x70]
  000cb:    	mov    QWORD PTR [rsp-0x48],rax
  000d0: 00 	mov    QWORD PTR [rsp-0x38],0x0
  000d9: 05 	movabs rax,0x1000500000042
  000e3:    	mov    QWORD PTR [rsp-0x30],rax
  000e8: 4d 	movabs r13,0x564da0e78160
  000f2:    	mov    rsi,QWORD PTR [rbx]
  000f5:    	mov    QWORD PTR [rsp-0x18],rsi
  000fa:    	lea    rsi,[rsp-0x18]
  000ff:    	mov    QWORD PTR [rbx],rsi
  00102:    	lea    r14,[rsp-0x10]
  00107:    	mov    QWORD PTR [rsp-0x20],r14
  0010c:    	call   0xfffecb08
  00111:    	lea    r14,[rbp-0x8]
  00115:    	mov    QWORD PTR [rbx],r14
  00118:    	mov    r14,QWORD PTR [rbp-0x10]
  0011c: 4d 	movabs r13,0x564da0e920d0
  00126:    	test   rax,rax
  00129:    	je     0xfffe8abb
  0012f:    	mov    QWORD PTR [r14-0x48],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00133:    	mov    rdi,QWORD PTR [r14-0x48]
  00137: 00 	test   rdi,0x1
  0013e:    	jne    0x32d3d
  00144: 00 	test   rdi,0x2
  0014b:    	je     0x187
  00151:    	xorps  xmm2,xmm2
  00154: 00 	movabs rax,0x8000000000000002
  0015e:    	cmp    rdi,rax
  00161:    	je     0x199
  00167:    	mov    rax,rdi
  0016a:    	sar    rax,0x3f
  0016e:    	add    rax,0x2
  00172:    	and    rdi,0xfffffffffffffffc
  00176:    	or     rdi,rax
  00179:    	rol    rdi,0x3d
  0017d:    	movq   xmm2,rdi
  00182:    	jmp    0x199
  00187:    	call   0xfffe8b14
  0018c:    	test   rax,rax
  0018f:    	je     0x32d3d
  00195:    	movq   xmm2,xmm0
  00199: 00 	xorps  xmm2,XMMWORD PTR [rip+0x14c8]        # 0x1668
:00007 %7 = %1.call dir()                   [Ray]
  001a0:    	mov    rdi,QWORD PTR [r14-0x38]
  001a4: 00 	test   rdi,0x7
  001ab:    	jne    0x32d4c
  001b1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001b5:    	jne    0x32d4c
  001bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc7f],0x26        # 0xfffebe41
  001c2:    	jne    0x32d4c
  001c8:    	mov    esi,DWORD PTR [rip+0x14a6]        # 0x1674
  001ce:    	cmp    esi,0xffffffff
  001d1:    	je     0x32d68
  001d7:    	cmp    WORD PTR [rdi+0x2],0x3
  001dc:    	jne    0x1f5
  001e2:    	cmp    esi,0x6
  001e5:    	jge    0x1f5
  001eb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001f0:    	jmp    0x213
  001f5:    	sub    rsp,0x10
  001f9:    	movq   QWORD PTR [rsp],xmm2
  001fe: 4d 	movabs rax,0x564da0797d70
  00208:    	call   rax
  0020a:    	movq   xmm2,QWORD PTR [rsp]
  0020f:    	add    rsp,0x10
  00213:    	mov    QWORD PTR [r14-0x68],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00217:    	mov    rdi,QWORD PTR [rbp-0x30]
  0021b:    	mov    rax,QWORD PTR [rdi+0x18]
  0021f:    	mov    QWORD PTR [r14-0x70],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00223:    	mov    rdi,QWORD PTR [r14-0x68]
  00227: 00 	test   rdi,0x7
  0022e:    	jne    0x32da3
  00234:    	cmp    DWORD PTR [rdi+0x4],0x28
  00238:    	jne    0x32da3
  0023e: 26 	cmp    DWORD PTR [rip+0xfffffffffffebbfc],0x26        # 0xfffebe41
  00245:    	jne    0x32da3
  0024b:    	sub    rsp,0x10
  0024f:    	movq   QWORD PTR [rsp],xmm2
  00254: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0025d:    	mov    rax,QWORD PTR [r14-0x68]
  00261:    	mov    QWORD PTR [rsp-0x40],rax
  00266: 00 	mov    rdi,0x1
  0026d:    	mov    rax,QWORD PTR [r14-0x70]
  00271:    	mov    QWORD PTR [rsp-0x48],rax
  00276: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0027f: 05 	movabs rax,0x1000500000042
  00289:    	mov    QWORD PTR [rsp-0x30],rax
  0028e: 4d 	movabs r13,0x564da0e78160
  00298:    	mov    rsi,QWORD PTR [rbx]
  0029b:    	mov    QWORD PTR [rsp-0x18],rsi
  002a0:    	lea    rsi,[rsp-0x18]
  002a5:    	mov    QWORD PTR [rbx],rsi
  002a8:    	lea    r14,[rsp-0x10]
  002ad:    	mov    QWORD PTR [rsp-0x20],r14
  002b2:    	call   0xfffecb08
  002b7:    	lea    r14,[rbp-0x8]
  002bb:    	mov    QWORD PTR [rbx],r14
  002be:    	mov    r14,QWORD PTR [rbp-0x10]
  002c2:    	movq   xmm2,QWORD PTR [rsp]
  002c7:    	add    rsp,0x10
  002cb: 4d 	movabs r13,0x564da0e92150
  002d5:    	test   rax,rax
  002d8:    	je     0xfffe8abb
  002de:    	mov    QWORD PTR [r14-0x50],rax
:00012 
:00014 %5 = %4
  002e2:    	mov    rax,QWORD PTR [r14-0x50]
  002e6:    	mov    QWORD PTR [r14-0x58],rax
:00015 %7 = literal[0.0]
  002ea: 00 	movq   xmm3,QWORD PTR [rip+0x1386]        # 0x1678
  002f2: 00 	movabs rax,0x8000000000000002
  002fc:    	mov    QWORD PTR [r14-0x68],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00300:    	mov    rdi,QWORD PTR [r14-0x50]
  00304: 00 	test   rdi,0x1
  0030b:    	jne    0x32dbf
  00311: 00 	test   rdi,0x2
  00318:    	je     0x354
  0031e:    	xorps  xmm4,xmm4
  00321: 00 	movabs rax,0x8000000000000002
  0032b:    	cmp    rdi,rax
  0032e:    	je     0x366
  00334:    	mov    rax,rdi
  00337:    	sar    rax,0x3f
  0033b:    	add    rax,0x2
  0033f:    	and    rdi,0xfffffffffffffffc
  00343:    	or     rdi,rax
  00346:    	rol    rdi,0x3d
  0034a:    	movq   xmm4,rdi
  0034f:    	jmp    0x366
  00354:    	call   0xfffe8b14
  00359:    	test   rax,rax
  0035c:    	je     0x32dbf
  00362:    	movq   xmm4,xmm0
  00366:    	ucomisd xmm4,xmm3
  0036a:    	jae    0x32ddb
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  00370:    	movq   xmm5,xmm4
  00374: 00 	xorps  xmm5,XMMWORD PTR [rip+0x130d]        # 0x1688
:00020 br =>:00021
  0037b:    	jmp    0x32e01
:00021 %7 = literal[1e-17]
  00380: 00 	movq   xmm3,QWORD PTR [rip+0x1310]        # 0x1698
  00388: aa 	movabs rax,0xe33877aa3236a4ba
  00392:    	mov    QWORD PTR [r14-0x68],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  00396:    	mov    rdi,QWORD PTR [r14-0x58]
  0039a: 00 	test   rdi,0x1
  003a1:    	jne    0x32e34
  003a7: 00 	test   rdi,0x2
  003ae:    	je     0x3ea
  003b4:    	xorps  xmm5,xmm5
  003b7: 00 	movabs rax,0x8000000000000002
  003c1:    	cmp    rdi,rax
  003c4:    	je     0x3fc
  003ca:    	mov    rax,rdi
  003cd:    	sar    rax,0x3f
  003d1:    	add    rax,0x2
  003d5:    	and    rdi,0xfffffffffffffffc
  003d9:    	or     rdi,rax
  003dc:    	rol    rdi,0x3d
  003e0:    	movq   xmm5,rdi
  003e5:    	jmp    0x3fc
  003ea:    	call   0xfffe8b14
  003ef:    	test   rax,rax
  003f2:    	je     0x32e34
  003f8:    	movq   xmm5,xmm0
  003fc:    	ucomisd xmm5,xmm3
  00400:    	jae    0x414
:00024 %7 = nil
  00406: 00 	mov    QWORD PTR [r14-0x68],0x4
:00025 ret %7
  0040e:    	mov    rax,QWORD PTR [r14-0x68]
  00412:    	leave  
  00413:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00414:    	mov    rdi,QWORD PTR [r14-0x38]
  00418: 00 	test   rdi,0x7
  0041f:    	jne    0x32e50
  00425:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00429:    	jne    0x32e50
  0042f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeba0b],0x26        # 0xfffebe41
  00436:    	jne    0x32e50
  0043c:    	mov    esi,DWORD PTR [rip+0x1262]        # 0x16a4
  00442:    	cmp    esi,0xffffffff
  00445:    	je     0x32e6c
  0044b:    	cmp    WORD PTR [rdi+0x2],0x3
  00450:    	jne    0x469
  00456:    	cmp    esi,0x6
  00459:    	jge    0x469
  0045f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00464:    	jmp    0x4ab
  00469:    	sub    rsp,0x20
  0046d:    	movq   QWORD PTR [rsp],xmm2
  00472:    	movq   QWORD PTR [rsp+0x8],xmm3
  00478:    	movq   QWORD PTR [rsp+0x10],xmm4
  0047e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00484: 4d 	movabs rax,0x564da0797d70
  0048e:    	call   rax
  00490:    	movq   xmm2,QWORD PTR [rsp]
  00495:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0049b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004a7:    	add    rsp,0x20
  004ab:    	mov    QWORD PTR [r14-0x70],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004af:    	mov    rdi,QWORD PTR [rbp-0x30]
  004b3:    	mov    rax,QWORD PTR [rdi+0x18]
  004b7:    	mov    QWORD PTR [r14-0x78],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004bb:    	mov    rdi,QWORD PTR [r14-0x70]
  004bf: 00 	test   rdi,0x7
  004c6:    	jne    0x32ecb
  004cc:    	cmp    DWORD PTR [rdi+0x4],0x28
  004d0:    	jne    0x32ecb
  004d6: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb964],0x26        # 0xfffebe41
  004dd:    	jne    0x32ecb
  004e3:    	sub    rsp,0x20
  004e7:    	movq   QWORD PTR [rsp],xmm2
  004ec:    	movq   QWORD PTR [rsp+0x8],xmm4
  004f2:    	movq   QWORD PTR [rsp+0x10],xmm5
  004f8: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00501:    	mov    rax,QWORD PTR [r14-0x70]
  00505:    	mov    QWORD PTR [rsp-0x40],rax
  0050a: 00 	mov    rdi,0x1
  00511:    	mov    rax,QWORD PTR [r14-0x78]
  00515:    	mov    QWORD PTR [rsp-0x48],rax
  0051a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00523: 05 	movabs rax,0x1000500000042
  0052d:    	mov    QWORD PTR [rsp-0x30],rax
  00532: 4d 	movabs r13,0x564da0e78160
  0053c:    	mov    rsi,QWORD PTR [rbx]
  0053f:    	mov    QWORD PTR [rsp-0x18],rsi
  00544:    	lea    rsi,[rsp-0x18]
  00549:    	mov    QWORD PTR [rbx],rsi
  0054c:    	lea    r14,[rsp-0x10]
  00551:    	mov    QWORD PTR [rsp-0x20],r14
  00556:    	call   0xfffecb08
  0055b:    	lea    r14,[rbp-0x8]
  0055f:    	mov    QWORD PTR [rbx],r14
  00562:    	mov    r14,QWORD PTR [rbp-0x10]
  00566:    	movq   xmm2,QWORD PTR [rsp]
  0056b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00571:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00577:    	add    rsp,0x20
  0057b: 4d 	movabs r13,0x564da0e92290
  00585:    	test   rax,rax
  00588:    	je     0xfffe8abb
  0058e:    	mov    QWORD PTR [r14-0x68],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  00592:    	mov    rdi,QWORD PTR [r14-0x68]
  00596: 00 	test   rdi,0x1
  0059d:    	jne    0x32ee7
  005a3: 00 	test   rdi,0x2
  005aa:    	je     0x5e6
  005b0:    	xorps  xmm3,xmm3
  005b3: 00 	movabs rax,0x8000000000000002
  005bd:    	cmp    rdi,rax
  005c0:    	je     0x5f8
  005c6:    	mov    rax,rdi
  005c9:    	sar    rax,0x3f
  005cd:    	add    rax,0x2
  005d1:    	and    rdi,0xfffffffffffffffc
  005d5:    	or     rdi,rax
  005d8:    	rol    rdi,0x3d
  005dc:    	movq   xmm3,rdi
  005e1:    	jmp    0x5f8
  005e6:    	call   0xfffe8b14
  005eb:    	test   rax,rax
  005ee:    	je     0x32ee7
  005f4:    	movq   xmm3,xmm0
  005f8:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  005fc: 00 	xorps  xmm3,XMMWORD PTR [rip+0x10a5]        # 0x16a8
:00036 %6 = %7 / %4                         [Float][Float]
  00603:    	movq   xmm6,xmm3
  00607:    	movq   rax,xmm4
  0060c:    	test   rax,rax
  0060f:    	je     0xfffe8ae0
  00615:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00619: 00 	movq   xmm3,QWORD PTR [rip+0x1097]        # 0x16b8
  00621: 00 	movabs rax,0x8000000000000002
  0062b:    	mov    QWORD PTR [r14-0x68],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  0062f:    	ucomisd xmm6,xmm3
  00633:    	jbe    0x33b3d
:00040 %7 = %2.call t()                     [Isect]
  00639:    	mov    rdi,QWORD PTR [r14-0x40]
  0063d: 00 	test   rdi,0x7
  00644:    	jne    0x32f03
  0064a:    	cmp    DWORD PTR [rdi+0x4],0x30
  0064e:    	jne    0x32f03
  00654: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb7e6],0x26        # 0xfffebe41
  0065b:    	jne    0x32f03
  00661:    	mov    esi,DWORD PTR [rip+0x105d]        # 0x16c4
  00667:    	cmp    esi,0xffffffff
  0066a:    	je     0x32f2c
  00670:    	cmp    WORD PTR [rdi+0x2],0x3
  00675:    	jne    0x68e
  0067b:    	cmp    esi,0x6
  0067e:    	jge    0x68e
  00684:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00689:    	jmp    0x6d0
  0068e:    	sub    rsp,0x20
  00692:    	movq   QWORD PTR [rsp],xmm2
  00697:    	movq   QWORD PTR [rsp+0x8],xmm4
  0069d:    	movq   QWORD PTR [rsp+0x10],xmm5
  006a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  006a9: 4d 	movabs rax,0x564da0797d70
  006b3:    	call   rax
  006b5:    	movq   xmm2,QWORD PTR [rsp]
  006ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006c0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006c6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006cc:    	add    rsp,0x20
  006d0:    	mov    QWORD PTR [r14-0x68],rax
:00041 
:00043 _%7 = %6 < %7                        [Float][Float]
:00044 condnotbr _%7 =>:00106
  006d4:    	mov    rdi,QWORD PTR [r14-0x68]
  006d8: 00 	test   rdi,0x1
  006df:    	jne    0x32f8b
  006e5: 00 	test   rdi,0x2
  006ec:    	je     0x728
  006f2:    	xorps  xmm3,xmm3
  006f5: 00 	movabs rax,0x8000000000000002
  006ff:    	cmp    rdi,rax
  00702:    	je     0x73a
  00708:    	mov    rax,rdi
  0070b:    	sar    rax,0x3f
  0070f:    	add    rax,0x2
  00713:    	and    rdi,0xfffffffffffffffc
  00717:    	or     rdi,rax
  0071a:    	rol    rdi,0x3d
  0071e:    	movq   xmm3,rdi
  00723:    	jmp    0x73a
  00728:    	call   0xfffe8b14
  0072d:    	test   rax,rax
  00730:    	je     0x32f8b
  00736:    	movq   xmm3,xmm0
  0073a:    	ucomisd xmm6,xmm3
  0073e:    	jae    0x33b70
:00045 %7 = literal[true]
  00744: 00 	mov    rax,0x1c
  0074b:    	mov    QWORD PTR [r14-0x68],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  0074f:    	mov    rdi,QWORD PTR [r14-0x40]
  00753: 00 	test   rdi,0x7
  0075a:    	jne    0x32fb4
  00760:    	cmp    DWORD PTR [rdi+0x4],0x30
  00764:    	jne    0x32fb4
  0076a: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb6d0],0x26        # 0xfffebe41
  00771:    	jne    0x32fb4
  00777:    	mov    esi,DWORD PTR [rip+0xf4f]        # 0x16cc
  0077d:    	cmp    esi,0xffffffff
  00780:    	je     0x32fdd
  00786:    	cmp    WORD PTR [rdi+0x2],0x3
  0078b:    	jne    0x7a8
  00791:    	cmp    esi,0x6
  00794:    	jge    0x7a8
  0079a:    	mov    rax,QWORD PTR [r14-0x68]
  0079e:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007a3:    	jmp    0x801
  007a8:    	sub    rsp,0x20
  007ac:    	movq   QWORD PTR [rsp],xmm2
  007b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  007b7:    	movq   QWORD PTR [rsp+0x10],xmm5
  007bd:    	movq   QWORD PTR [rsp+0x18],xmm6
  007c3:    	mov    rdx,QWORD PTR [r14-0x68]
  007c7: 4d 	movabs rax,0x564da0797ff0
  007d1:    	call   rax
  007d3:    	movq   xmm2,QWORD PTR [rsp]
  007d8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007de:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007e4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ea:    	add    rsp,0x20
  007ee: 4d 	movabs r13,0x564da0e92380
  007f8:    	test   rax,rax
  007fb:    	je     0xfffe8abb
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  00801:    	movq   xmm0,xmm6
  00805:    	call   0xfffe8c38
  0080a:    	mov    QWORD PTR [r14-0x60],rax
  0080e:    	mov    rdi,QWORD PTR [r14-0x40]
  00812: 00 	test   rdi,0x7
  00819:    	jne    0x33043
  0081f:    	cmp    DWORD PTR [rdi+0x4],0x30
  00823:    	jne    0x33043
  00829: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb611],0x26        # 0xfffebe41
  00830:    	jne    0x33043
  00836:    	mov    esi,DWORD PTR [rip+0xe98]        # 0x16d4
  0083c:    	cmp    esi,0xffffffff
  0083f:    	je     0x3305f
  00845:    	cmp    WORD PTR [rdi+0x2],0x3
  0084a:    	jne    0x867
  00850:    	cmp    esi,0x6
  00853:    	jge    0x867
  00859:    	mov    rax,QWORD PTR [r14-0x60]
  0085d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00862:    	jmp    0x8c0
  00867:    	sub    rsp,0x20
  0086b:    	movq   QWORD PTR [rsp],xmm2
  00870:    	movq   QWORD PTR [rsp+0x8],xmm4
  00876:    	movq   QWORD PTR [rsp+0x10],xmm5
  0087c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00882:    	mov    rdx,QWORD PTR [r14-0x60]
  00886: 4d 	movabs rax,0x564da0797ff0
  00890:    	call   rax
  00892:    	movq   xmm2,QWORD PTR [rsp]
  00897:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0089d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008a3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a9:    	add    rsp,0x20
  008ad: 4d 	movabs r13,0x564da0e923b0
  008b7:    	test   rax,rax
  008ba:    	je     0xfffe8abb
:00050 
:00052 %7 = @n: Plane[IvarId(1)]
  008c0:    	mov    rdi,QWORD PTR [rbp-0x30]
  008c4:    	mov    rax,QWORD PTR [rdi+0x18]
  008c8:    	mov    QWORD PTR [r14-0x68],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008cc:    	mov    rdi,QWORD PTR [r14-0x40]
  008d0: 00 	test   rdi,0x7
  008d7:    	jne    0x330c5
  008dd:    	cmp    DWORD PTR [rdi+0x4],0x30
  008e1:    	jne    0x330c5
  008e7: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb553],0x26        # 0xfffebe41
  008ee:    	jne    0x330c5
  008f4:    	mov    esi,DWORD PTR [rip+0xde2]        # 0x16dc
  008fa:    	cmp    esi,0xffffffff
  008fd:    	je     0x330e1
  00903:    	cmp    WORD PTR [rdi+0x2],0x3
  00908:    	jne    0x925
  0090e:    	cmp    esi,0x6
  00911:    	jge    0x925
  00917:    	mov    rax,QWORD PTR [r14-0x68]
  0091b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00920:    	jmp    0x97e
  00925:    	sub    rsp,0x20
  00929:    	movq   QWORD PTR [rsp],xmm2
  0092e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00934:    	movq   QWORD PTR [rsp+0x10],xmm5
  0093a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00940:    	mov    rdx,QWORD PTR [r14-0x68]
  00944: 4d 	movabs rax,0x564da0797ff0
  0094e:    	call   rax
  00950:    	movq   xmm2,QWORD PTR [rsp]
  00955:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0095b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00961:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00967:    	add    rsp,0x20
  0096b: 4d 	movabs r13,0x564da0e923f0
  00975:    	test   rax,rax
  00978:    	je     0xfffe8abb
:00054 
:00056 %8 = const[Vec]                      [Vec]
  0097e: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb4c3]        # 0xfffebe48
  00985: 00 	cmp    rax,QWORD PTR [rip+0xd6c]        # 0x16f8
  0098c:    	jne    0x33147
  00992: 00 	mov    rax,QWORD PTR [rip+0xd4f]        # 0x16e8
  00999:    	mov    QWORD PTR [r14-0x70],rax
:00057 %10 = %1.call org()                  [Ray]
  0099d:    	mov    rdi,QWORD PTR [r14-0x38]
  009a1: 00 	test   rdi,0x7
  009a8:    	jne    0x331c3
  009ae:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009b2:    	jne    0x331c3
  009b8: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb482],0x26        # 0xfffebe41
  009bf:    	jne    0x331c3
  009c5:    	mov    esi,DWORD PTR [rip+0xd39]        # 0x1704
  009cb:    	cmp    esi,0xffffffff
  009ce:    	je     0x331df
  009d4:    	cmp    WORD PTR [rdi+0x2],0x3
  009d9:    	jne    0x9f2
  009df:    	cmp    esi,0x6
  009e2:    	jge    0x9f2
  009e8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ed:    	jmp    0xa34
  009f2:    	sub    rsp,0x20
  009f6:    	movq   QWORD PTR [rsp],xmm2
  009fb:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a01:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a07:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a0d: 4d 	movabs rax,0x564da0797d70
  00a17:    	call   rax
  00a19:    	movq   xmm2,QWORD PTR [rsp]
  00a1e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a24:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a2a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a30:    	add    rsp,0x20
  00a34:    	mov    QWORD PTR [r14-0x80],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a38:    	mov    rdi,QWORD PTR [r14-0x80]
  00a3c: 00 	test   rdi,0x7
  00a43:    	jne    0x3323e
  00a49:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a4d:    	jne    0x3323e
  00a53: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb3e7],0x26        # 0xfffebe41
  00a5a:    	jne    0x3323e
  00a60:    	mov    esi,DWORD PTR [rip+0xca6]        # 0x170c
  00a66:    	cmp    esi,0xffffffff
  00a69:    	je     0x3325a
  00a6f:    	cmp    WORD PTR [rdi+0x2],0x3
  00a74:    	jne    0xa8d
  00a7a:    	cmp    esi,0x6
  00a7d:    	jge    0xa8d
  00a83:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a88:    	jmp    0xacf
  00a8d:    	sub    rsp,0x20
  00a91:    	movq   QWORD PTR [rsp],xmm2
  00a96:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a9c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00aa2:    	movq   QWORD PTR [rsp+0x18],xmm6
  00aa8: 4d 	movabs rax,0x564da0797d70
  00ab2:    	call   rax
  00ab4:    	movq   xmm2,QWORD PTR [rsp]
  00ab9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00abf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ac5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00acb:    	add    rsp,0x20
  00acf:    	mov    QWORD PTR [r14-0x78],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00ad3:    	mov    rdi,QWORD PTR [r14-0x38]
  00ad7: 00 	test   rdi,0x7
  00ade:    	jne    0x332b9
  00ae4:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00ae8:    	jne    0x332b9
  00aee: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb34c],0x26        # 0xfffebe41
  00af5:    	jne    0x332b9
  00afb:    	mov    esi,DWORD PTR [rip+0xc13]        # 0x1714
  00b01:    	cmp    esi,0xffffffff
  00b04:    	je     0x332d5
  00b0a:    	cmp    WORD PTR [rdi+0x2],0x3
  00b0f:    	jne    0xb28
  00b15:    	cmp    esi,0x6
  00b18:    	jge    0xb28
  00b1e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b23:    	jmp    0xb6a
  00b28:    	sub    rsp,0x20
  00b2c:    	movq   QWORD PTR [rsp],xmm2
  00b31:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b37:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b3d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b43: 4d 	movabs rax,0x564da0797d70
  00b4d:    	call   rax
  00b4f:    	movq   xmm2,QWORD PTR [rsp]
  00b54:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b5a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b60:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b66:    	add    rsp,0x20
  00b6a: ff 	mov    QWORD PTR [r14-0x88],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b71: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00b78: 00 	test   rdi,0x7
  00b7f:    	jne    0x33334
  00b85:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b89:    	jne    0x33334
  00b8f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb2ab],0x26        # 0xfffebe41
  00b96:    	jne    0x33334
  00b9c:    	mov    esi,DWORD PTR [rip+0xb7a]        # 0x171c
  00ba2:    	cmp    esi,0xffffffff
  00ba5:    	je     0x33350
  00bab:    	cmp    WORD PTR [rdi+0x2],0x3
  00bb0:    	jne    0xbc9
  00bb6:    	cmp    esi,0x6
  00bb9:    	jge    0xbc9
  00bbf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bc4:    	jmp    0xc0b
  00bc9:    	sub    rsp,0x20
  00bcd:    	movq   QWORD PTR [rsp],xmm2
  00bd2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bd8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bde:    	movq   QWORD PTR [rsp+0x18],xmm6
  00be4: 4d 	movabs rax,0x564da0797d70
  00bee:    	call   rax
  00bf0:    	movq   xmm2,QWORD PTR [rsp]
  00bf5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bfb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c01:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c07:    	add    rsp,0x20
  00c0b:    	mov    QWORD PTR [r14-0x80],rax
:00067 
:00069 %10 = %6 * %10                       [Float][Float]
  00c0f:    	mov    rdi,QWORD PTR [r14-0x80]
  00c13: 00 	test   rdi,0x1
  00c1a:    	jne    0x333af
  00c20: 00 	test   rdi,0x2
  00c27:    	je     0xc63
  00c2d:    	xorps  xmm3,xmm3
  00c30: 00 	movabs rax,0x8000000000000002
  00c3a:    	cmp    rdi,rax
  00c3d:    	je     0xc75
  00c43:    	mov    rax,rdi
  00c46:    	sar    rax,0x3f
  00c4a:    	add    rax,0x2
  00c4e:    	and    rdi,0xfffffffffffffffc
  00c52:    	or     rdi,rax
  00c55:    	rol    rdi,0x3d
  00c59:    	movq   xmm3,rdi
  00c5e:    	jmp    0xc75
  00c63:    	call   0xfffe8b14
  00c68:    	test   rax,rax
  00c6b:    	je     0x333af
  00c71:    	movq   xmm3,xmm0
  00c75:    	mulsd  xmm3,xmm6
:00070 %9 = %9 + %10                        [Float][Float]
  00c79:    	mov    rdi,QWORD PTR [r14-0x78]
  00c7d: 00 	test   rdi,0x1
  00c84:    	jne    0x333cb
  00c8a: 00 	test   rdi,0x2
  00c91:    	je     0xccd
  00c97:    	xorps  xmm7,xmm7
  00c9a: 00 	movabs rax,0x8000000000000002
  00ca4:    	cmp    rdi,rax
  00ca7:    	je     0xcdf
  00cad:    	mov    rax,rdi
  00cb0:    	sar    rax,0x3f
  00cb4:    	add    rax,0x2
  00cb8:    	and    rdi,0xfffffffffffffffc
  00cbc:    	or     rdi,rax
  00cbf:    	rol    rdi,0x3d
  00cc3:    	movq   xmm7,rdi
  00cc8:    	jmp    0xcdf
  00ccd:    	call   0xfffe8b14
  00cd2:    	test   rax,rax
  00cd5:    	je     0x333cb
  00cdb:    	movq   xmm7,xmm0
  00cdf:    	addsd  xmm7,xmm3
:00071 %11 = %1.call org()                  [Ray]
  00ce3:    	mov    rdi,QWORD PTR [r14-0x38]
  00ce7: 00 	test   rdi,0x7
  00cee:    	jne    0x333f4
  00cf4:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00cf8:    	jne    0x333f4
  00cfe: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb13c],0x26        # 0xfffebe41
  00d05:    	jne    0x333f4
  00d0b:    	mov    esi,DWORD PTR [rip+0xa13]        # 0x1724
  00d11:    	cmp    esi,0xffffffff
  00d14:    	je     0x3342a
  00d1a:    	cmp    WORD PTR [rdi+0x2],0x3
  00d1f:    	jne    0xd38
  00d25:    	cmp    esi,0x6
  00d28:    	jge    0xd38
  00d2e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d33:    	jmp    0xd92
  00d38:    	sub    rsp,0x30
  00d3c:    	movq   QWORD PTR [rsp],xmm2
  00d41:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d47:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d4d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d53:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d59:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d5f: 4d 	movabs rax,0x564da0797d70
  00d69:    	call   rax
  00d6b:    	movq   xmm2,QWORD PTR [rsp]
  00d70:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d76:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d7c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d82:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d88:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d8e:    	add    rsp,0x30
  00d92: ff 	mov    QWORD PTR [r14-0x88],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00d99: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00da0: 00 	test   rdi,0x7
  00da7:    	jne    0x334a1
  00dad:    	cmp    DWORD PTR [rdi+0x4],0x28
  00db1:    	jne    0x334a1
  00db7: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb083],0x26        # 0xfffebe41
  00dbe:    	jne    0x334a1
  00dc4:    	mov    esi,DWORD PTR [rip+0x962]        # 0x172c
  00dca:    	cmp    esi,0xffffffff
  00dcd:    	je     0x334ca
  00dd3:    	cmp    WORD PTR [rdi+0x2],0x3
  00dd8:    	jne    0xdf1
  00dde:    	cmp    esi,0x6
  00de1:    	jge    0xdf1
  00de7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dec:    	jmp    0xe3f
  00df1:    	sub    rsp,0x30
  00df5:    	movq   QWORD PTR [rsp],xmm2
  00dfa:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e00:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e06:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e0c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e12: 4d 	movabs rax,0x564da0797d70
  00e1c:    	call   rax
  00e1e:    	movq   xmm2,QWORD PTR [rsp]
  00e23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e29:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e2f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e35:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e3b:    	add    rsp,0x30
  00e3f:    	mov    QWORD PTR [r14-0x80],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e43:    	mov    rdi,QWORD PTR [r14-0x38]
  00e47: 00 	test   rdi,0x7
  00e4e:    	jne    0x33535
  00e54:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e58:    	jne    0x33535
  00e5e: 26 	cmp    DWORD PTR [rip+0xfffffffffffeafdc],0x26        # 0xfffebe41
  00e65:    	jne    0x33535
  00e6b:    	mov    esi,DWORD PTR [rip+0x8c3]        # 0x1734
  00e71:    	cmp    esi,0xffffffff
  00e74:    	je     0x3355e
  00e7a:    	cmp    WORD PTR [rdi+0x2],0x3
  00e7f:    	jne    0xe98
  00e85:    	cmp    esi,0x6
  00e88:    	jge    0xe98
  00e8e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e93:    	jmp    0xee6
  00e98:    	sub    rsp,0x30
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eb3:    	movq   QWORD PTR [rsp+0x20],xmm7
  00eb9: 4d 	movabs rax,0x564da0797d70
  00ec3:    	call   rax
  00ec5:    	movq   xmm2,QWORD PTR [rsp]
  00eca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ed6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00edc:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ee2:    	add    rsp,0x30
  00ee6: ff 	mov    QWORD PTR [r14-0x90],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00eed: ff 	mov    rdi,QWORD PTR [r14-0x90]
  00ef4: 00 	test   rdi,0x7
  00efb:    	jne    0x335c9
  00f01:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f05:    	jne    0x335c9
  00f0b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaf2f],0x26        # 0xfffebe41
  00f12:    	jne    0x335c9
  00f18:    	mov    esi,DWORD PTR [rip+0x81e]        # 0x173c
  00f1e:    	cmp    esi,0xffffffff
  00f21:    	je     0x335f2
  00f27:    	cmp    WORD PTR [rdi+0x2],0x3
  00f2c:    	jne    0xf45
  00f32:    	cmp    esi,0x6
  00f35:    	jge    0xf45
  00f3b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f40:    	jmp    0xf93
  00f45:    	sub    rsp,0x30
  00f49:    	movq   QWORD PTR [rsp],xmm2
  00f4e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f54:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f5a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f60:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f66: 4d 	movabs rax,0x564da0797d70
  00f70:    	call   rax
  00f72:    	movq   xmm2,QWORD PTR [rsp]
  00f77:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f7d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f83:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f89:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f8f:    	add    rsp,0x30
  00f93: ff 	mov    QWORD PTR [r14-0x88],rax
:00081 
:00083 %11 = %6 * %11                       [Float][Float]
  00f9a: ff 	mov    rdi,QWORD PTR [r14-0x88]
  00fa1: 00 	test   rdi,0x1
  00fa8:    	jne    0x3365d
  00fae: 00 	test   rdi,0x2
  00fb5:    	je     0xff1
  00fbb:    	xorps  xmm3,xmm3
  00fbe: 00 	movabs rax,0x8000000000000002
  00fc8:    	cmp    rdi,rax
  00fcb:    	je     0x1003
  00fd1:    	mov    rax,rdi
  00fd4:    	sar    rax,0x3f
  00fd8:    	add    rax,0x2
  00fdc:    	and    rdi,0xfffffffffffffffc
  00fe0:    	or     rdi,rax
  00fe3:    	rol    rdi,0x3d
  00fe7:    	movq   xmm3,rdi
  00fec:    	jmp    0x1003
  00ff1:    	call   0xfffe8b14
  00ff6:    	test   rax,rax
  00ff9:    	je     0x3365d
  00fff:    	movq   xmm3,xmm0
  01003:    	mulsd  xmm3,xmm6
:00084 %10 = %10 + %11                      [Float][Float]
  01007:    	mov    rdi,QWORD PTR [r14-0x80]
  0100b: 00 	test   rdi,0x1
  01012:    	jne    0x33686
  01018: 00 	test   rdi,0x2
  0101f:    	je     0x105c
  01025:    	xorps  xmm8,xmm8
  01029: 00 	movabs rax,0x8000000000000002
  01033:    	cmp    rdi,rax
  01036:    	je     0x106f
  0103c:    	mov    rax,rdi
  0103f:    	sar    rax,0x3f
  01043:    	add    rax,0x2
  01047:    	and    rdi,0xfffffffffffffffc
  0104b:    	or     rdi,rax
  0104e:    	rol    rdi,0x3d
  01052:    	movq   xmm8,rdi
  01057:    	jmp    0x106f
  0105c:    	call   0xfffe8b14
  01061:    	test   rax,rax
  01064:    	je     0x33686
  0106a:    	movq   xmm8,xmm0
  0106f:    	addsd  xmm8,xmm3
:00085 %12 = %1.call org()                  [Ray]
  01074:    	mov    rdi,QWORD PTR [r14-0x38]
  01078: 00 	test   rdi,0x7
  0107f:    	jne    0x336bf
  01085:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01089:    	jne    0x336bf
  0108f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeadab],0x26        # 0xfffebe41
  01096:    	jne    0x336bf
  0109c:    	mov    esi,DWORD PTR [rip+0x6a2]        # 0x1744
  010a2:    	cmp    esi,0xffffffff
  010a5:    	je     0x33706
  010ab:    	cmp    WORD PTR [rdi+0x2],0x3
  010b0:    	jne    0x10c9
  010b6:    	cmp    esi,0x6
  010b9:    	jge    0x10c9
  010bf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010c4:    	jmp    0x1131
  010c9:    	sub    rsp,0x40
  010cd:    	movq   QWORD PTR [rsp],xmm2
  010d2:    	movq   QWORD PTR [rsp+0x8],xmm3
  010d8:    	movq   QWORD PTR [rsp+0x10],xmm4
  010de:    	movq   QWORD PTR [rsp+0x18],xmm5
  010e4:    	movq   QWORD PTR [rsp+0x20],xmm6
  010ea:    	movq   QWORD PTR [rsp+0x28],xmm7
  010f0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010f7: 4d 	movabs rax,0x564da0797d70
  01101:    	call   rax
  01103:    	movq   xmm2,QWORD PTR [rsp]
  01108:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0110e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01114:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0111a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01120:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01126: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0112d:    	add    rsp,0x40
  01131: ff 	mov    QWORD PTR [r14-0x90],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  01138: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0113f: 00 	test   rdi,0x7
  01146:    	jne    0x3378b
  0114c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01150:    	jne    0x3378b
  01156: 26 	cmp    DWORD PTR [rip+0xfffffffffffeace4],0x26        # 0xfffebe41
  0115d:    	jne    0x3378b
  01163:    	mov    esi,DWORD PTR [rip+0x5e3]        # 0x174c
  01169:    	cmp    esi,0xffffffff
  0116c:    	je     0x337c2
  01172:    	cmp    WORD PTR [rdi+0x2],0x3
  01177:    	jne    0x1190
  0117d:    	cmp    esi,0x6
  01180:    	jge    0x1190
  01186:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0118b:    	jmp    0x11ec
  01190:    	sub    rsp,0x30
  01194:    	movq   QWORD PTR [rsp],xmm2
  01199:    	movq   QWORD PTR [rsp+0x8],xmm4
  0119f:    	movq   QWORD PTR [rsp+0x10],xmm5
  011a5:    	movq   QWORD PTR [rsp+0x18],xmm6
  011ab:    	movq   QWORD PTR [rsp+0x20],xmm7
  011b1: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011b8: 4d 	movabs rax,0x564da0797d70
  011c2:    	call   rax
  011c4:    	movq   xmm2,QWORD PTR [rsp]
  011c9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011cf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011d5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011db:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011e1: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011e8:    	add    rsp,0x30
  011ec: ff 	mov    QWORD PTR [r14-0x88],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  011f3:    	mov    rdi,QWORD PTR [r14-0x38]
  011f7: 00 	test   rdi,0x7
  011fe:    	jne    0x3383b
  01204:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01208:    	jne    0x3383b
  0120e: 26 	cmp    DWORD PTR [rip+0xfffffffffffeac2c],0x26        # 0xfffebe41
  01215:    	jne    0x3383b
  0121b:    	mov    esi,DWORD PTR [rip+0x533]        # 0x1754
  01221:    	cmp    esi,0xffffffff
  01224:    	je     0x33872
  0122a:    	cmp    WORD PTR [rdi+0x2],0x3
  0122f:    	jne    0x1248
  01235:    	cmp    esi,0x6
  01238:    	jge    0x1248
  0123e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01243:    	jmp    0x12a4
  01248:    	sub    rsp,0x30
  0124c:    	movq   QWORD PTR [rsp],xmm2
  01251:    	movq   QWORD PTR [rsp+0x8],xmm4
  01257:    	movq   QWORD PTR [rsp+0x10],xmm5
  0125d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01263:    	movq   QWORD PTR [rsp+0x20],xmm7
  01269: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01270: 4d 	movabs rax,0x564da0797d70
  0127a:    	call   rax
  0127c:    	movq   xmm2,QWORD PTR [rsp]
  01281:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01287:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0128d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01293:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01299: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  012a0:    	add    rsp,0x30
  012a4: ff 	mov    QWORD PTR [r14-0x98],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  012ab: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x338eb
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x28
  012c3:    	jne    0x338eb
  012c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeab71],0x26        # 0xfffebe41
  012d0:    	jne    0x338eb
  012d6:    	mov    esi,DWORD PTR [rip+0x480]        # 0x175c
  012dc:    	cmp    esi,0xffffffff
  012df:    	je     0x33922
  012e5:    	cmp    WORD PTR [rdi+0x2],0x3
  012ea:    	jne    0x1303
  012f0:    	cmp    esi,0x6
  012f3:    	jge    0x1303
  012f9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012fe:    	jmp    0x135f
  01303:    	sub    rsp,0x30
  01307:    	movq   QWORD PTR [rsp],xmm2
  0130c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01312:    	movq   QWORD PTR [rsp+0x10],xmm5
  01318:    	movq   QWORD PTR [rsp+0x18],xmm6
  0131e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01324: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0132b: 4d 	movabs rax,0x564da0797d70
  01335:    	call   rax
  01337:    	movq   xmm2,QWORD PTR [rsp]
  0133c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01342:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01348:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0134e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01354: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0135b:    	add    rsp,0x30
  0135f: ff 	mov    QWORD PTR [r14-0x90],rax
:00095 
:00097 %12 = %6 * %12                       [Float][Float]
  01366: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0136d: 00 	test   rdi,0x1
  01374:    	jne    0x3399b
  0137a: 00 	test   rdi,0x2
  01381:    	je     0x13bd
  01387:    	xorps  xmm3,xmm3
  0138a: 00 	movabs rax,0x8000000000000002
  01394:    	cmp    rdi,rax
  01397:    	je     0x13cf
  0139d:    	mov    rax,rdi
  013a0:    	sar    rax,0x3f
  013a4:    	add    rax,0x2
  013a8:    	and    rdi,0xfffffffffffffffc
  013ac:    	or     rdi,rax
  013af:    	rol    rdi,0x3d
  013b3:    	movq   xmm3,rdi
  013b8:    	jmp    0x13cf
  013bd:    	call   0xfffe8b14
  013c2:    	test   rax,rax
  013c5:    	je     0x3399b
  013cb:    	movq   xmm3,xmm0
  013cf:    	mulsd  xmm3,xmm6
:00098 %11 = %11 + %12                      [Float][Float]
  013d3: ff 	mov    rdi,QWORD PTR [r14-0x88]
  013da: 00 	test   rdi,0x1
  013e1:    	jne    0x339d2
  013e7: 00 	test   rdi,0x2
  013ee:    	je     0x142b
  013f4:    	xorps  xmm9,xmm9
  013f8: 00 	movabs rax,0x8000000000000002
  01402:    	cmp    rdi,rax
  01405:    	je     0x143e
  0140b:    	mov    rax,rdi
  0140e:    	sar    rax,0x3f
  01412:    	add    rax,0x2
  01416:    	and    rdi,0xfffffffffffffffc
  0141a:    	or     rdi,rax
  0141d:    	rol    rdi,0x3d
  01421:    	movq   xmm9,rdi
  01426:    	jmp    0x143e
  0142b:    	call   0xfffe8b14
  01430:    	test   rax,rax
  01433:    	je     0x339d2
  01439:    	movq   xmm9,xmm0
  0143e:    	addsd  xmm9,xmm3
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  01443:    	movq   xmm0,xmm7
  01447:    	call   0xfffe8c38
  0144c:    	mov    QWORD PTR [r14-0x78],rax
  01450:    	movq   xmm0,xmm8
  01455:    	call   0xfffe8c38
  0145a:    	mov    QWORD PTR [r14-0x80],rax
  0145e:    	movq   xmm0,xmm9
  01463:    	call   0xfffe8c38
  01468: ff 	mov    QWORD PTR [r14-0x88],rax
  0146f:    	mov    rdi,QWORD PTR [r14-0x70]
  01473: 00 	test   rdi,0x7
  0147a:    	jne    0x33a19
  01480:    	cmp    DWORD PTR [rdi+0x4],0x29
  01484:    	jne    0x33a19
  0148a: 26 	cmp    DWORD PTR [rip+0xfffffffffffea9b0],0x26        # 0xfffebe41
  01491:    	jne    0x33a19
  01497: 00 	mov    r9,0x0
  0149e:    	sub    rsp,0x40
  014a2:    	movq   QWORD PTR [rsp],xmm2
  014a7:    	movq   QWORD PTR [rsp+0x8],xmm3
  014ad:    	movq   QWORD PTR [rsp+0x10],xmm4
  014b3:    	movq   QWORD PTR [rsp+0x18],xmm5
  014b9:    	movq   QWORD PTR [rsp+0x20],xmm6
  014bf:    	movq   QWORD PTR [rsp+0x28],xmm7
  014c5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014cc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014d3:    	mov    rdx,rdi
  014d6:    	mov    QWORD PTR [rsp-0x40],rcx
  014db: 00 	mov    QWORD PTR [rsp-0x28],0x0
  014e4:    	lea    rcx,[r14-0x78]
  014e8: 00 	mov    r8,0x3
  014ef:    	mov    rsi,QWORD PTR [rbx]
  014f2:    	mov    QWORD PTR [rsp-0x18],rsi
  014f7:    	lea    rsi,[rsp-0x18]
  014fc:    	mov    QWORD PTR [rbx],rsi
  014ff:    	lea    r14,[rsp-0x10]
  01504:    	mov    QWORD PTR [rsp-0x20],r14
  01509:    	call   0x33a45
  0150e:    	lea    r14,[rbp-0x8]
  01512:    	mov    QWORD PTR [rbx],r14
  01515:    	mov    r14,QWORD PTR [rbp-0x10]
  01519:    	movq   xmm2,QWORD PTR [rsp]
  0151e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01524:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0152a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01530:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01536:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0153c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01543: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0154a:    	add    rsp,0x40
  0154e: 4d 	movabs r13,0x564da0e926d0
  01558:    	test   rax,rax
  0155b:    	je     0xfffe8abb
  01561:    	mov    QWORD PTR [r14-0x68],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  01565:    	mov    rdi,QWORD PTR [r14-0x40]
  01569: 00 	test   rdi,0x7
  01570:    	jne    0x33a77
  01576:    	cmp    DWORD PTR [rdi+0x4],0x30
  0157a:    	jne    0x33a77
  01580: 26 	cmp    DWORD PTR [rip+0xfffffffffffea8ba],0x26        # 0xfffebe41
  01587:    	jne    0x33a77
  0158d:    	mov    esi,DWORD PTR [rip+0x1d1]        # 0x1764
  01593:    	cmp    esi,0xffffffff
  01596:    	je     0x33aa3
  0159c:    	cmp    WORD PTR [rdi+0x2],0x3
  015a1:    	jne    0x15be
  015a7:    	cmp    esi,0x6
  015aa:    	jge    0x15be
  015b0:    	mov    rax,QWORD PTR [r14-0x68]
  015b4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  015b9:    	jmp    0x164b
  015be:    	sub    rsp,0x40
  015c2:    	movq   QWORD PTR [rsp],xmm2
  015c7:    	movq   QWORD PTR [rsp+0x8],xmm3
  015cd:    	movq   QWORD PTR [rsp+0x10],xmm4
  015d3:    	movq   QWORD PTR [rsp+0x18],xmm5
  015d9:    	movq   QWORD PTR [rsp+0x20],xmm6
  015df:    	movq   QWORD PTR [rsp+0x28],xmm7
  015e5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015ec: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015f3:    	mov    rdx,QWORD PTR [r14-0x68]
  015f7: 4d 	movabs rax,0x564da0797ff0
  01601:    	call   rax
  01603:    	movq   xmm2,QWORD PTR [rsp]
  01608:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0160e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01614:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0161a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01620:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01626: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0162d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01634:    	add    rsp,0x40
  01638: 4d 	movabs r13,0x564da0e92700
  01642:    	test   rax,rax
  01645:    	je     0xfffe8abb
:00103 
:00105 br =>:00106
  0164b:    	jmp    0x33ba3
:00106 %7 = nil
  01650: 00 	mov    QWORD PTR [r14-0x68],0x4
:00107 ret %7
  01658:    	mov    rax,QWORD PTR [r14-0x68]
  0165c:    	leave  
  0165d:    	ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x564da0e84560
<== finished compile. elapsed:158.4µs
offset:Pos(101600) code: 9527 bytes  data: 417 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xc0
  0000e:    	cmp    edx,0x1
  00011:    	jge    0x3d
  00017:    	mov    eax,0x1
  0001c:    	sub    eax,edx
  0001e:    	test   rax,rax
  00021:    	je     0x3d
  00027:    	lea    rdi,[r14-0x40]
  0002b: 00 	mov    QWORD PTR [rdi+rax*8],0x4
  00033:    	sub    rax,0x1
  00037:    	jne    0x2b
  0003d: 00 	mov    rax,0x4
  00044:    	mov    QWORD PTR [r14-0x40],rax
  00048:    	mov    QWORD PTR [r14-0x48],rax
  0004c:    	mov    QWORD PTR [r14-0x50],rax
  00050:    	mov    QWORD PTR [r14-0x58],rax
  00054:    	mov    QWORD PTR [r14-0x60],rax
  00058:    	mov    QWORD PTR [r14-0x68],rax
  0005c:    	mov    QWORD PTR [r14-0x70],rax
  00060:    	mov    QWORD PTR [r14-0x78],rax
  00064:    	mov    QWORD PTR [r14-0x80],rax
  00068: ff 	mov    QWORD PTR [r14-0x88],rax
  0006f: ff 	mov    QWORD PTR [r14-0x90],rax
  00076: ff 	mov    QWORD PTR [r14-0x98],rax
  0007d: ff 	mov    QWORD PTR [r14-0xa0],rax
  00084: ff 	mov    QWORD PTR [r14-0xa8],rax
  0008b: ff 	mov    QWORD PTR [r14-0xb0],rax
  00092:    	mov    rdi,QWORD PTR [rbp-0x30]
  00096: 00 	test   rdi,0x7
  0009d:    	jne    0x32480
  000a3:    	cmp    DWORD PTR [rdi+0x4],0x32
  000a7:    	jne    0x32480
:00000 init_block reg:17 arg:1 pos:1 req:1 block:0 stack_offset:12
:00001 %13 = %0.call rand()                 [Scene]
  000ad:    	mov    rdi,QWORD PTR [r14-0x30]
  000b1: 26 	cmp    DWORD PTR [rip+0xfffffffffffea621],0x26        # 0xfffea6d9
  000b8:    	jne    0x3248f
  000be: 00 	mov    r9,0x0
  000c5:    	mov    rdx,rdi
  000c8:    	mov    QWORD PTR [rsp-0x40],rcx
  000cd: 00 	mov    QWORD PTR [rsp-0x28],0x0
  000d6: ff 	lea    rcx,[r14-0xa0]
  000dd: 00 	mov    r8,0x0
  000e4:    	mov    rsi,QWORD PTR [rbx]
  000e7:    	mov    QWORD PTR [rsp-0x18],rsi
  000ec:    	lea    rsi,[rsp-0x18]
  000f1:    	mov    QWORD PTR [rbx],rsi
  000f4:    	lea    r14,[rsp-0x10]
  000f9:    	mov    QWORD PTR [rsp-0x20],r14
  000fe:    	call   0x3249e
  00103:    	lea    r14,[rbp-0x8]
  00107:    	mov    QWORD PTR [rbx],r14
  0010a:    	mov    r14,QWORD PTR [rbp-0x10]
  0010e: 4d 	movabs r13,0x564da0e84590
  00118:    	test   rax,rax
  0011b:    	je     0xfffe7353
  00121: ff 	mov    QWORD PTR [r14-0x98],rax
:00002 
:00004 %2 = %13
  00128: ff 	mov    rax,QWORD PTR [r14-0x98]
  0012f:    	mov    QWORD PTR [r14-0x40],rax
:00005 %13 = literal[2.0]
  00133: 00 	movq   xmm2,QWORD PTR [rip+0x2405]        # 0x2540
  0013b: 00 	mov    rax,0x2
  00142: ff 	mov    QWORD PTR [r14-0x98],rax
:00006 %14 = literal[3.14159265]
  00149: 00 	movq   xmm3,QWORD PTR [rip+0x23ff]        # 0x2550
  00151: da 	movabs rax,0x490fda9e46a78a
  0015b: ff 	mov    QWORD PTR [r14-0xa0],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00162:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  00166:    	mov    rdi,QWORD PTR [r14-0x30]
  0016a: 26 	cmp    DWORD PTR [rip+0xfffffffffffea568],0x26        # 0xfffea6d9
  00171:    	jne    0x324d0
  00177: 00 	mov    r9,0x0
  0017e:    	sub    rsp,0x10
  00182:    	movq   QWORD PTR [rsp],xmm2
  00187:    	mov    rdx,rdi
  0018a:    	mov    QWORD PTR [rsp-0x40],rcx
  0018f: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00198: ff 	lea    rcx,[r14-0xa8]
  0019f: 00 	mov    r8,0x0
  001a6:    	mov    rsi,QWORD PTR [rbx]
  001a9:    	mov    QWORD PTR [rsp-0x18],rsi
  001ae:    	lea    rsi,[rsp-0x18]
  001b3:    	mov    QWORD PTR [rbx],rsi
  001b6:    	lea    r14,[rsp-0x10]
  001bb:    	mov    QWORD PTR [rsp-0x20],r14
  001c0:    	call   0x324ef
  001c5:    	lea    r14,[rbp-0x8]
  001c9:    	mov    QWORD PTR [rbx],r14
  001cc:    	mov    r14,QWORD PTR [rbp-0x10]
  001d0:    	movq   xmm2,QWORD PTR [rsp]
  001d5:    	add    rsp,0x10
  001d9: 4d 	movabs r13,0x564da0e84600
  001e3:    	test   rax,rax
  001e6:    	je     0xfffe7353
  001ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  001fa: 00 	test   rdi,0x1
  00201:    	jne    0x32521
  00207: 00 	test   rdi,0x2
  0020e:    	je     0x24a
  00214:    	xorps  xmm3,xmm3
  00217: 00 	movabs rax,0x8000000000000002
  00221:    	cmp    rdi,rax
  00224:    	je     0x25c
  0022a:    	mov    rax,rdi
  0022d:    	sar    rax,0x3f
  00231:    	add    rax,0x2
  00235:    	and    rdi,0xfffffffffffffffc
  00239:    	or     rdi,rax
  0023c:    	rol    rdi,0x3d
  00240:    	movq   xmm3,rdi
  00245:    	jmp    0x25c
  0024a:    	call   0xfffe73ac
  0024f:    	test   rax,rax
  00252:    	je     0x32521
  00258:    	movq   xmm3,xmm0
  0025c:    	movq   xmm4,xmm2
  00260:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00264: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea475]        # 0xfffea6e0
  0026b: 00 	cmp    rax,QWORD PTR [rip+0x22fe]        # 0x2570
  00272:    	jne    0x32540
  00278: 00 	mov    rax,QWORD PTR [rip+0x22e1]        # 0x2560
  0027f: ff 	mov    QWORD PTR [r14-0xa0],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  00286: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0028d: 00 	test   rdi,0x7
  00294:    	jne    0x325a4
  0029a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0029e:    	jne    0x325a4
  002a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffea42e],0x26        # 0xfffea6d9
  002ab:    	jne    0x325a4
  002b1:    	sub    rsp,0x10
  002b5:    	movq   QWORD PTR [rsp],xmm2
  002ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  002c0:    	movq   xmm0,xmm4
  002c4: 4d 	movabs rax,0x564da07f6f70
  002ce:    	call   rax
  002d0:    	movq   xmm2,QWORD PTR [rsp]
  002d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002db:    	add    rsp,0x10
  002df:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002e3: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea3f6]        # 0xfffea6e0
  002ea: 00 	cmp    rax,QWORD PTR [rip+0x229f]        # 0x2590
  002f1:    	jne    0x325c7
  002f7: 00 	mov    rax,QWORD PTR [rip+0x2282]        # 0x2580
  002fe: ff 	mov    QWORD PTR [r14-0xa8],rax
:00018 %16 = literal[1.0]
  00305: 00 	movq   xmm3,QWORD PTR [rip+0x2293]        # 0x25a0
  0030d: 00 	movabs rax,0xff80000000000002
  00317: ff 	mov    QWORD PTR [r14-0xb0],rax
:00019 %16 = %16 - %2                       [Float][Float]
  0031e:    	mov    rdi,QWORD PTR [r14-0x40]
  00322: 00 	test   rdi,0x1
  00329:    	jne    0x3262b
  0032f: 00 	test   rdi,0x2
  00336:    	je     0x372
  0033c:    	xorps  xmm5,xmm5
  0033f: 00 	movabs rax,0x8000000000000002
  00349:    	cmp    rdi,rax
  0034c:    	je     0x384
  00352:    	mov    rax,rdi
  00355:    	sar    rax,0x3f
  00359:    	add    rax,0x2
  0035d:    	and    rdi,0xfffffffffffffffc
  00361:    	or     rdi,rax
  00364:    	rol    rdi,0x3d
  00368:    	movq   xmm5,rdi
  0036d:    	jmp    0x384
  00372:    	call   0xfffe73ac
  00377:    	test   rax,rax
  0037a:    	je     0x3262b
  00380:    	movq   xmm5,xmm0
  00384:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00388: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0038f: 00 	test   rdi,0x7
  00396:    	jne    0x32657
  0039c:    	cmp    DWORD PTR [rdi+0x4],0x21
  003a0:    	jne    0x32657
  003a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffea32c],0x26        # 0xfffea6d9
  003ad:    	jne    0x32657
  003b3:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  003b7:    	movq   xmm7,xmm2
  003bb:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  003bf: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea31a]        # 0xfffea6e0
  003c6: 00 	cmp    rax,QWORD PTR [rip+0x21f3]        # 0x25c0
  003cd:    	jne    0x32693
  003d3: 00 	mov    rax,QWORD PTR [rip+0x21d6]        # 0x25b0
  003da: ff 	mov    QWORD PTR [r14-0xa0],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003e1: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  003e8: 00 	test   rdi,0x7
  003ef:    	jne    0x3271b
  003f5:    	cmp    DWORD PTR [rdi+0x4],0x21
  003f9:    	jne    0x3271b
  003ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffea2d3],0x26        # 0xfffea6d9
  00406:    	jne    0x3271b
  0040c:    	sub    rsp,0x30
  00410:    	movq   QWORD PTR [rsp],xmm2
  00415:    	movq   QWORD PTR [rsp+0x8],xmm3
  0041b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00421:    	movq   QWORD PTR [rsp+0x18],xmm5
  00427:    	movq   QWORD PTR [rsp+0x20],xmm7
  0042d:    	movq   xmm0,xmm4
  00431: 4d 	movabs rax,0x564da07f6f80
  0043b:    	call   rax
  0043d:    	movq   xmm2,QWORD PTR [rsp]
  00442:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00448:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00454:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0045a:    	add    rsp,0x30
  0045e:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00462: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea277]        # 0xfffea6e0
  00469: 00 	cmp    rax,QWORD PTR [rip+0x2170]        # 0x25e0
  00470:    	jne    0x3275b
  00476: 00 	mov    rax,QWORD PTR [rip+0x2153]        # 0x25d0
  0047d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00030 %16 = literal[1.0]
  00484: 00 	movq   xmm3,QWORD PTR [rip+0x2164]        # 0x25f0
  0048c: 00 	movabs rax,0xff80000000000002
  00496: ff 	mov    QWORD PTR [r14-0xb0],rax
:00031 %16 = %16 - %2                       [Float][Float]
  0049d:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  004a1: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  004a8: 00 	test   rdi,0x7
  004af:    	jne    0x327e3
  004b5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004b9:    	jne    0x327e3
  004bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffea213],0x26        # 0xfffea6d9
  004c6:    	jne    0x327e3
  004cc:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004d0:    	movq   xmm8,xmm2
  004d5:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004da: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffea1ff]        # 0xfffea6e0
  004e1: 00 	cmp    rax,QWORD PTR [rip+0x2128]        # 0x2610
  004e8:    	jne    0x3282c
  004ee: 00 	mov    rax,QWORD PTR [rip+0x210b]        # 0x2600
  004f5: ff 	mov    QWORD PTR [r14-0x98],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004fc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00503: 00 	test   rdi,0x7
  0050a:    	jne    0x328c2
  00510:    	cmp    DWORD PTR [rdi+0x4],0x21
  00514:    	jne    0x328c2
  0051a: 26 	cmp    DWORD PTR [rip+0xfffffffffffea1b8],0x26        # 0xfffea6d9
  00521:    	jne    0x328c2
  00527:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  0052b:    	mov    rax,QWORD PTR [rbp-0x18]
  0052f:    	mov    rax,QWORD PTR [rax]
  00532:    	mov    rax,QWORD PTR [rax-0x28]
  00536: ff 	mov    QWORD PTR [r14-0xa0],rax
:00042 %15 = 0: i32
  0053d: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  00548: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0054f: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00556: 00 	test   rdi,0x7
  0055d:    	jne    0x32919
  00563:    	cmp    DWORD PTR [rdi+0x4],0xb
  00567:    	jne    0x32919
  0056d: 00 	test   rsi,0x1
  00574:    	je     0x32919
  0057a:    	sar    rsi,1
  0057d:    	sub    rsp,0x30
  00581:    	movq   QWORD PTR [rsp],xmm2
  00586:    	movq   QWORD PTR [rsp+0x8],xmm3
  0058c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00592:    	movq   QWORD PTR [rsp+0x18],xmm5
  00598:    	movq   QWORD PTR [rsp+0x20],xmm7
  0059e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005a5: 4d 	movabs rax,0x564da0819c40
  005af:    	call   rax
  005b1:    	movq   xmm2,QWORD PTR [rsp]
  005b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005c8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ce: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005d5:    	add    rsp,0x30
  005d9: 4d 	movabs r13,0x564da0e84820
  005e3:    	test   rax,rax
  005e6:    	je     0xfffe7353
  005ec: ff 	mov    QWORD PTR [r14-0xa0],rax
:00044 %13 = %14.call x()                   [Vec]
  005f3: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  005fa: 00 	test   rdi,0x7
  00601:    	jne    0x3296d
  00607:    	cmp    DWORD PTR [rdi+0x4],0x28
  0060b:    	jne    0x3296d
  00611: 26 	cmp    DWORD PTR [rip+0xfffffffffffea0c1],0x26        # 0xfffea6d9
  00618:    	jne    0x3296d
  0061e:    	mov    esi,DWORD PTR [rip+0x1ff8]        # 0x261c
  00624:    	cmp    esi,0xffffffff
  00627:    	je     0x329c1
  0062d:    	cmp    WORD PTR [rdi+0x2],0x3
  00632:    	jne    0x64b
  00638:    	cmp    esi,0x6
  0063b:    	jge    0x64b
  00641:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00646:    	jmp    0x6a7
  0064b:    	sub    rsp,0x30
  0064f:    	movq   QWORD PTR [rsp],xmm2
  00654:    	movq   QWORD PTR [rsp+0x8],xmm3
  0065a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00660:    	movq   QWORD PTR [rsp+0x18],xmm5
  00666:    	movq   QWORD PTR [rsp+0x20],xmm7
  0066c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00673: 4d 	movabs rax,0x564da0797d70
  0067d:    	call   rax
  0067f:    	movq   xmm2,QWORD PTR [rsp]
  00684:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00690:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00696:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0069c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  006a3:    	add    rsp,0x30
  006a7: ff 	mov    QWORD PTR [r14-0x98],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  006ae: ff 	mov    rdi,QWORD PTR [r14-0x98]
  006b5: 00 	test   rdi,0x1
  006bc:    	jne    0x32a3a
  006c2: 00 	test   rdi,0x2
  006c9:    	je     0x705
  006cf:    	xorps  xmm6,xmm6
  006d2: 00 	movabs rax,0x8000000000000002
  006dc:    	cmp    rdi,rax
  006df:    	je     0x717
  006e5:    	mov    rax,rdi
  006e8:    	sar    rax,0x3f
  006ec:    	add    rax,0x2
  006f0:    	and    rdi,0xfffffffffffffffc
  006f4:    	or     rdi,rax
  006f7:    	rol    rdi,0x3d
  006fb:    	movq   xmm6,rdi
  00700:    	jmp    0x717
  00705:    	call   0xfffe73ac
  0070a:    	test   rax,rax
  0070d:    	je     0x32a3a
  00713:    	movq   xmm6,xmm0
  00717:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  0071b:    	mov    rax,QWORD PTR [rbp-0x18]
  0071f:    	mov    rax,QWORD PTR [rax]
  00722:    	mov    rax,QWORD PTR [rax-0x28]
  00726: ff 	mov    QWORD PTR [r14-0xa8],rax
:00049 %16 = 1: i32
  0072d: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  00738: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  0073f: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00746: 00 	test   rdi,0x7
  0074d:    	jne    0x32a8e
  00753:    	cmp    DWORD PTR [rdi+0x4],0xb
  00757:    	jne    0x32a8e
  0075d: 00 	test   rsi,0x1
  00764:    	je     0x32a8e
  0076a:    	sar    rsi,1
  0076d:    	sub    rsp,0x30
  00771:    	movq   QWORD PTR [rsp],xmm2
  00776:    	movq   QWORD PTR [rsp+0x8],xmm4
  0077c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00782:    	movq   QWORD PTR [rsp+0x18],xmm6
  00788:    	movq   QWORD PTR [rsp+0x20],xmm7
  0078e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00795: 4d 	movabs rax,0x564da0819c40
  0079f:    	call   rax
  007a1:    	movq   xmm2,QWORD PTR [rsp]
  007a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007ac:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007b2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007b8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007be: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007c5:    	add    rsp,0x30
  007c9: 4d 	movabs r13,0x564da0e84890
  007d3:    	test   rax,rax
  007d6:    	je     0xfffe7353
  007dc: ff 	mov    QWORD PTR [r14-0xa8],rax
:00051 %14 = %15.call x()                   [Vec]
  007e3: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  007ea: 00 	test   rdi,0x7
  007f1:    	jne    0x32ae2
  007f7:    	cmp    DWORD PTR [rdi+0x4],0x28
  007fb:    	jne    0x32ae2
  00801: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9ed1],0x26        # 0xfffea6d9
  00808:    	jne    0x32ae2
  0080e:    	mov    esi,DWORD PTR [rip+0x1e10]        # 0x2624
  00814:    	cmp    esi,0xffffffff
  00817:    	je     0x32b36
  0081d:    	cmp    WORD PTR [rdi+0x2],0x3
  00822:    	jne    0x83b
  00828:    	cmp    esi,0x6
  0082b:    	jge    0x83b
  00831:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00836:    	jmp    0x897
  0083b:    	sub    rsp,0x30
  0083f:    	movq   QWORD PTR [rsp],xmm2
  00844:    	movq   QWORD PTR [rsp+0x8],xmm4
  0084a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00850:    	movq   QWORD PTR [rsp+0x18],xmm6
  00856:    	movq   QWORD PTR [rsp+0x20],xmm7
  0085c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00863: 4d 	movabs rax,0x564da0797d70
  0086d:    	call   rax
  0086f:    	movq   xmm2,QWORD PTR [rsp]
  00874:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0087a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00880:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00886:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0088c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00893:    	add    rsp,0x30
  00897: ff 	mov    QWORD PTR [r14-0xa0],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  0089e: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  008a5: 00 	test   rdi,0x1
  008ac:    	jne    0x32baf
  008b2: 00 	test   rdi,0x2
  008b9:    	je     0x8f5
  008bf:    	xorps  xmm3,xmm3
  008c2: 00 	movabs rax,0x8000000000000002
  008cc:    	cmp    rdi,rax
  008cf:    	je     0x907
  008d5:    	mov    rax,rdi
  008d8:    	sar    rax,0x3f
  008dc:    	add    rax,0x2
  008e0:    	and    rdi,0xfffffffffffffffc
  008e4:    	or     rdi,rax
  008e7:    	rol    rdi,0x3d
  008eb:    	movq   xmm3,rdi
  008f0:    	jmp    0x907
  008f5:    	call   0xfffe73ac
  008fa:    	test   rax,rax
  008fd:    	je     0x32baf
  00903:    	movq   xmm3,xmm0
  00907:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  0090c:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  00910:    	mov    rax,QWORD PTR [rbp-0x18]
  00914:    	mov    rax,QWORD PTR [rax]
  00917:    	mov    rax,QWORD PTR [rax-0x28]
  0091b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00057 %16 = 2: i32
  00922: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  0092d: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00934: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  0093b: 00 	test   rdi,0x7
  00942:    	jne    0x32c03
  00948:    	cmp    DWORD PTR [rdi+0x4],0xb
  0094c:    	jne    0x32c03
  00952: 00 	test   rsi,0x1
  00959:    	je     0x32c03
  0095f:    	sar    rsi,1
  00962:    	sub    rsp,0x40
  00966:    	movq   QWORD PTR [rsp],xmm2
  0096b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00971:    	movq   QWORD PTR [rsp+0x10],xmm4
  00977:    	movq   QWORD PTR [rsp+0x18],xmm5
  0097d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00983:    	movq   QWORD PTR [rsp+0x28],xmm7
  00989: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00990: 4d 	movabs rax,0x564da0819c40
  0099a:    	call   rax
  0099c:    	movq   xmm2,QWORD PTR [rsp]
  009a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009b3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009bf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c6:    	add    rsp,0x40
  009ca: 4d 	movabs r13,0x564da0e84910
  009d4:    	test   rax,rax
  009d7:    	je     0xfffe7353
  009dd: ff 	mov    QWORD PTR [r14-0xa8],rax
:00059 %14 = %15.call x()                   [Vec]
  009e4: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  009eb: 00 	test   rdi,0x7
  009f2:    	jne    0x32c67
  009f8:    	cmp    DWORD PTR [rdi+0x4],0x28
  009fc:    	jne    0x32c67
  00a02: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9cd0],0x26        # 0xfffea6d9
  00a09:    	jne    0x32c67
  00a0f:    	mov    esi,DWORD PTR [rip+0x1c17]        # 0x262c
  00a15:    	cmp    esi,0xffffffff
  00a18:    	je     0x32cbb
  00a1e:    	cmp    WORD PTR [rdi+0x2],0x3
  00a23:    	jne    0xa3c
  00a29:    	cmp    esi,0x6
  00a2c:    	jge    0xa3c
  00a32:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a37:    	jmp    0xa98
  00a3c:    	sub    rsp,0x30
  00a40:    	movq   QWORD PTR [rsp],xmm2
  00a45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a57:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a5d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a64: 4d 	movabs rax,0x564da0797d70
  00a6e:    	call   rax
  00a70:    	movq   xmm2,QWORD PTR [rsp]
  00a75:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a7b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a81:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a87:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a8d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a94:    	add    rsp,0x30
  00a98: ff 	mov    QWORD PTR [r14-0xa0],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a9f: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00aa6: 00 	test   rdi,0x1
  00aad:    	jne    0x32d34
  00ab3: 00 	test   rdi,0x2
  00aba:    	je     0xaf6
  00ac0:    	xorps  xmm3,xmm3
  00ac3: 00 	movabs rax,0x8000000000000002
  00acd:    	cmp    rdi,rax
  00ad0:    	je     0xb08
  00ad6:    	mov    rax,rdi
  00ad9:    	sar    rax,0x3f
  00add:    	add    rax,0x2
  00ae1:    	and    rdi,0xfffffffffffffffc
  00ae5:    	or     rdi,rax
  00ae8:    	rol    rdi,0x3d
  00aec:    	movq   xmm3,rdi
  00af1:    	jmp    0xb08
  00af6:    	call   0xfffe73ac
  00afb:    	test   rax,rax
  00afe:    	je     0x32d34
  00b04:    	movq   xmm3,xmm0
  00b08:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00b0c:    	movq   xmm9,xmm6
  00b11:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00b16:    	mov    rax,QWORD PTR [rbp-0x18]
  00b1a:    	mov    rax,QWORD PTR [rax]
  00b1d:    	mov    rax,QWORD PTR [rax-0x28]
  00b21: ff 	mov    QWORD PTR [r14-0xa0],rax
:00065 %15 = 0: i32
  00b28: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00b33: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00b3a: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  00b41: 00 	test   rdi,0x7
  00b48:    	jne    0x32d88
  00b4e:    	cmp    DWORD PTR [rdi+0x4],0xb
  00b52:    	jne    0x32d88
  00b58: 00 	test   rsi,0x1
  00b5f:    	je     0x32d88
  00b65:    	sar    rsi,1
  00b68:    	sub    rsp,0x40
  00b6c:    	movq   QWORD PTR [rsp],xmm2
  00b71:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b77:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b7d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b83:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b89: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b90: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b97: 4d 	movabs rax,0x564da0819c40
  00ba1:    	call   rax
  00ba3:    	movq   xmm2,QWORD PTR [rsp]
  00ba8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bae:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bb4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bba:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00bc0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00bc7: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00bce:    	add    rsp,0x40
  00bd2: 4d 	movabs r13,0x564da0e84990
  00bdc:    	test   rax,rax
  00bdf:    	je     0xfffe7353
  00be5: ff 	mov    QWORD PTR [r14-0xa0],rax
:00067 %13 = %14.call y()                   [Vec]
  00bec: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00bf3: 00 	test   rdi,0x7
  00bfa:    	jne    0x32dea
  00c00:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c04:    	jne    0x32dea
  00c0a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9ac8],0x26        # 0xfffea6d9
  00c11:    	jne    0x32dea
  00c17:    	mov    esi,DWORD PTR [rip+0x1a17]        # 0x2634
  00c1d:    	cmp    esi,0xffffffff
  00c20:    	je     0x32e3c
  00c26:    	cmp    WORD PTR [rdi+0x2],0x3
  00c2b:    	jne    0xc44
  00c31:    	cmp    esi,0x6
  00c34:    	jge    0xc44
  00c3a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c3f:    	jmp    0xca2
  00c44:    	sub    rsp,0x30
  00c48:    	movq   QWORD PTR [rsp],xmm2
  00c4d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c53:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c59:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c5f: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c66: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c6d: 4d 	movabs rax,0x564da0797d70
  00c77:    	call   rax
  00c79:    	movq   xmm2,QWORD PTR [rsp]
  00c7e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c84:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c8a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c90: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c97: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c9e:    	add    rsp,0x30
  00ca2: ff 	mov    QWORD PTR [r14-0x98],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00ca9: ff 	mov    rdi,QWORD PTR [r14-0x98]
  00cb0: 00 	test   rdi,0x1
  00cb7:    	jne    0x32eb7
  00cbd: 00 	test   rdi,0x2
  00cc4:    	je     0xd00
  00cca:    	xorps  xmm3,xmm3
  00ccd: 00 	movabs rax,0x8000000000000002
  00cd7:    	cmp    rdi,rax
  00cda:    	je     0xd12
  00ce0:    	mov    rax,rdi
  00ce3:    	sar    rax,0x3f
  00ce7:    	add    rax,0x2
  00ceb:    	and    rdi,0xfffffffffffffffc
  00cef:    	or     rdi,rax
  00cf2:    	rol    rdi,0x3d
  00cf6:    	movq   xmm3,rdi
  00cfb:    	jmp    0xd12
  00d00:    	call   0xfffe73ac
  00d05:    	test   rax,rax
  00d08:    	je     0x32eb7
  00d0e:    	movq   xmm3,xmm0
  00d12:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00d16:    	mov    rax,QWORD PTR [rbp-0x18]
  00d1a:    	mov    rax,QWORD PTR [rax]
  00d1d:    	mov    rax,QWORD PTR [rax-0x28]
  00d21: ff 	mov    QWORD PTR [r14-0xa8],rax
:00072 %16 = 1: i32
  00d28: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00d33: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00d3a: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00d41: 00 	test   rdi,0x7
  00d48:    	jne    0x32f09
  00d4e:    	cmp    DWORD PTR [rdi+0x4],0xb
  00d52:    	jne    0x32f09
  00d58: 00 	test   rsi,0x1
  00d5f:    	je     0x32f09
  00d65:    	sar    rsi,1
  00d68:    	sub    rsp,0x40
  00d6c:    	movq   QWORD PTR [rsp],xmm2
  00d71:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d77:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d7d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d83:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d89: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d90: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d97: 4d 	movabs rax,0x564da0819c40
  00da1:    	call   rax
  00da3:    	movq   xmm2,QWORD PTR [rsp]
  00da8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00db4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dba:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00dc0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00dc7: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00dce:    	add    rsp,0x40
  00dd2: 4d 	movabs r13,0x564da0e84a00
  00ddc:    	test   rax,rax
  00ddf:    	je     0xfffe7353
  00de5: ff 	mov    QWORD PTR [r14-0xa8],rax
:00074 %14 = %15.call y()                   [Vec]
  00dec: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00df3: 00 	test   rdi,0x7
  00dfa:    	jne    0x32f6b
  00e00:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e04:    	jne    0x32f6b
  00e0a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe98c8],0x26        # 0xfffea6d9
  00e11:    	jne    0x32f6b
  00e17:    	mov    esi,DWORD PTR [rip+0x181f]        # 0x263c
  00e1d:    	cmp    esi,0xffffffff
  00e20:    	je     0x32fcd
  00e26:    	cmp    WORD PTR [rdi+0x2],0x3
  00e2b:    	jne    0xe44
  00e31:    	cmp    esi,0x6
  00e34:    	jge    0xe44
  00e3a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e3f:    	jmp    0xeae
  00e44:    	sub    rsp,0x40
  00e48:    	movq   QWORD PTR [rsp],xmm2
  00e4d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e53:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e59:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e5f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e65: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e6c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e73: 4d 	movabs rax,0x564da0797d70
  00e7d:    	call   rax
  00e7f:    	movq   xmm2,QWORD PTR [rsp]
  00e84:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e8a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e90:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e96:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e9c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ea3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00eaa:    	add    rsp,0x40
  00eae: ff 	mov    QWORD PTR [r14-0xa0],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00eb5: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  00ebc: 00 	test   rdi,0x1
  00ec3:    	jne    0x33054
  00ec9: 00 	test   rdi,0x2
  00ed0:    	je     0xf0c
  00ed6:    	xorps  xmm6,xmm6
  00ed9: 00 	movabs rax,0x8000000000000002
  00ee3:    	cmp    rdi,rax
  00ee6:    	je     0xf1e
  00eec:    	mov    rax,rdi
  00eef:    	sar    rax,0x3f
  00ef3:    	add    rax,0x2
  00ef7:    	and    rdi,0xfffffffffffffffc
  00efb:    	or     rdi,rax
  00efe:    	rol    rdi,0x3d
  00f02:    	movq   xmm6,rdi
  00f07:    	jmp    0xf1e
  00f0c:    	call   0xfffe73ac
  00f11:    	test   rax,rax
  00f14:    	je     0x33054
  00f1a:    	movq   xmm6,xmm0
  00f1e:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00f23:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00f27:    	mov    rax,QWORD PTR [rbp-0x18]
  00f2b:    	mov    rax,QWORD PTR [rax]
  00f2e:    	mov    rax,QWORD PTR [rax-0x28]
  00f32: ff 	mov    QWORD PTR [r14-0xa8],rax
:00080 %16 = 2: i32
  00f39: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00f44: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  00f4b: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  00f52: 00 	test   rdi,0x7
  00f59:    	jne    0x330b6
  00f5f:    	cmp    DWORD PTR [rdi+0x4],0xb
  00f63:    	jne    0x330b6
  00f69: 00 	test   rsi,0x1
  00f70:    	je     0x330b6
  00f76:    	sar    rsi,1
  00f79:    	sub    rsp,0x40
  00f7d:    	movq   QWORD PTR [rsp],xmm2
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f8e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f94:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f9a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00fa0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00fa7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00fae: 4d 	movabs rax,0x564da0819c40
  00fb8:    	call   rax
  00fba:    	movq   xmm2,QWORD PTR [rsp]
  00fbf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fc5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fcb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fd1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fd7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fdd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fe4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00feb:    	add    rsp,0x40
  00fef: 4d 	movabs r13,0x564da0e84a80
  00ff9:    	test   rax,rax
  00ffc:    	je     0xfffe7353
  01002: ff 	mov    QWORD PTR [r14-0xa8],rax
:00082 %14 = %15.call y()                   [Vec]
  01009: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01010: 00 	test   rdi,0x7
  01017:    	jne    0x33128
  0101d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01021:    	jne    0x33128
  01027: 26 	cmp    DWORD PTR [rip+0xfffffffffffe96ab],0x26        # 0xfffea6d9
  0102e:    	jne    0x33128
  01034:    	mov    esi,DWORD PTR [rip+0x160a]        # 0x2644
  0103a:    	cmp    esi,0xffffffff
  0103d:    	je     0x3318a
  01043:    	cmp    WORD PTR [rdi+0x2],0x3
  01048:    	jne    0x1061
  0104e:    	cmp    esi,0x6
  01051:    	jge    0x1061
  01057:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0105c:    	jmp    0x10cb
  01061:    	sub    rsp,0x40
  01065:    	movq   QWORD PTR [rsp],xmm2
  0106a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01070:    	movq   QWORD PTR [rsp+0x10],xmm4
  01076:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107c:    	movq   QWORD PTR [rsp+0x20],xmm7
  01082: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01089: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01090: 4d 	movabs rax,0x564da0797d70
  0109a:    	call   rax
  0109c:    	movq   xmm2,QWORD PTR [rsp]
  010a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010b9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010c0: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  010c7:    	add    rsp,0x40
  010cb: ff 	mov    QWORD PTR [r14-0xa0],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  010d2: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  010d9: 00 	test   rdi,0x1
  010e0:    	jne    0x33211
  010e6: 00 	test   rdi,0x2
  010ed:    	je     0x1129
  010f3:    	xorps  xmm6,xmm6
  010f6: 00 	movabs rax,0x8000000000000002
  01100:    	cmp    rdi,rax
  01103:    	je     0x113b
  01109:    	mov    rax,rdi
  0110c:    	sar    rax,0x3f
  01110:    	add    rax,0x2
  01114:    	and    rdi,0xfffffffffffffffc
  01118:    	or     rdi,rax
  0111b:    	rol    rdi,0x3d
  0111f:    	movq   xmm6,rdi
  01124:    	jmp    0x113b
  01129:    	call   0xfffe73ac
  0112e:    	test   rax,rax
  01131:    	je     0x33211
  01137:    	movq   xmm6,xmm0
  0113b:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  0113f:    	movq   xmm10,xmm3
  01144:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  01149:    	mov    rax,QWORD PTR [rbp-0x18]
  0114d:    	mov    rax,QWORD PTR [rax]
  01150:    	mov    rax,QWORD PTR [rax-0x28]
  01154: ff 	mov    QWORD PTR [r14-0xa0],rax
:00088 %15 = 0: i32
  0115b: ff 	mov    QWORD PTR [r14-0xa8],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  01166: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  0116d: ff 	mov    rsi,QWORD PTR [r14-0xa8]
  01174: 00 	test   rdi,0x7
  0117b:    	jne    0x33273
  01181:    	cmp    DWORD PTR [rdi+0x4],0xb
  01185:    	jne    0x33273
  0118b: 00 	test   rsi,0x1
  01192:    	je     0x33273
  01198:    	sar    rsi,1
  0119b:    	sub    rsp,0x40
  0119f:    	movq   QWORD PTR [rsp],xmm2
  011a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  011aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  011b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b6:    	movq   QWORD PTR [rsp+0x20],xmm7
  011bc: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011c3: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  011ca: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  011d1: 4d 	movabs rax,0x564da0819c40
  011db:    	call   rax
  011dd:    	movq   xmm2,QWORD PTR [rsp]
  011e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011e8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011ee:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011f4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011fa: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01201: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01208: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0120f:    	add    rsp,0x40
  01213: 4d 	movabs r13,0x564da0e84b00
  0121d:    	test   rax,rax
  01220:    	je     0xfffe7353
  01226: ff 	mov    QWORD PTR [r14-0xa0],rax
:00090 %13 = %14.call z()                   [Vec]
  0122d: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01234: 00 	test   rdi,0x7
  0123b:    	jne    0x332e3
  01241:    	cmp    DWORD PTR [rdi+0x4],0x28
  01245:    	jne    0x332e3
  0124b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9487],0x26        # 0xfffea6d9
  01252:    	jne    0x332e3
  01258:    	mov    esi,DWORD PTR [rip+0x13ee]        # 0x264c
  0125e:    	cmp    esi,0xffffffff
  01261:    	je     0x33343
  01267:    	cmp    WORD PTR [rdi+0x2],0x3
  0126c:    	jne    0x1285
  01272:    	cmp    esi,0x6
  01275:    	jge    0x1285
  0127b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01280:    	jmp    0x12f1
  01285:    	sub    rsp,0x40
  01289:    	movq   QWORD PTR [rsp],xmm2
  0128e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01294:    	movq   QWORD PTR [rsp+0x10],xmm5
  0129a:    	movq   QWORD PTR [rsp+0x18],xmm7
  012a0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  012a7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  012ae: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  012b5: 4d 	movabs rax,0x564da0797d70
  012bf:    	call   rax
  012c1:    	movq   xmm2,QWORD PTR [rsp]
  012c6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012cc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012d2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012d8: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  012df: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  012e6: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  012ed:    	add    rsp,0x40
  012f1: ff 	mov    QWORD PTR [r14-0x98],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  012f8: ff 	mov    rdi,QWORD PTR [r14-0x98]
  012ff: 00 	test   rdi,0x1
  01306:    	jne    0x333cc
  0130c: 00 	test   rdi,0x2
  01313:    	je     0x134f
  01319:    	xorps  xmm3,xmm3
  0131c: 00 	movabs rax,0x8000000000000002
  01326:    	cmp    rdi,rax
  01329:    	je     0x1361
  0132f:    	mov    rax,rdi
  01332:    	sar    rax,0x3f
  01336:    	add    rax,0x2
  0133a:    	and    rdi,0xfffffffffffffffc
  0133e:    	or     rdi,rax
  01341:    	rol    rdi,0x3d
  01345:    	movq   xmm3,rdi
  0134a:    	jmp    0x1361
  0134f:    	call   0xfffe73ac
  01354:    	test   rax,rax
  01357:    	je     0x333cc
  0135d:    	movq   xmm3,xmm0
  01361:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  01365:    	mov    rax,QWORD PTR [rbp-0x18]
  01369:    	mov    rax,QWORD PTR [rax]
  0136c:    	mov    rax,QWORD PTR [rax-0x28]
  01370: ff 	mov    QWORD PTR [r14-0xa8],rax
:00095 %16 = 1: i32
  01377: ff 	mov    QWORD PTR [r14-0xb0],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  01382: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01389: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  01390: 00 	test   rdi,0x7
  01397:    	jne    0x3342c
  0139d:    	cmp    DWORD PTR [rdi+0x4],0xb
  013a1:    	jne    0x3342c
  013a7: 00 	test   rsi,0x1
  013ae:    	je     0x3342c
  013b4:    	sar    rsi,1
  013b7:    	sub    rsp,0x40
  013bb:    	movq   QWORD PTR [rsp],xmm2
  013c0:    	movq   QWORD PTR [rsp+0x8],xmm3
  013c6:    	movq   QWORD PTR [rsp+0x10],xmm4
  013cc:    	movq   QWORD PTR [rsp+0x18],xmm5
  013d2:    	movq   QWORD PTR [rsp+0x20],xmm7
  013d8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  013df: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  013e6: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  013ed: 4d 	movabs rax,0x564da0819c40
  013f7:    	call   rax
  013f9:    	movq   xmm2,QWORD PTR [rsp]
  013fe:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01404:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0140a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01410:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01416: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0141d: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01424: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0142b:    	add    rsp,0x40
  0142f: 4d 	movabs r13,0x564da0e84b70
  01439:    	test   rax,rax
  0143c:    	je     0xfffe7353
  01442: ff 	mov    QWORD PTR [r14-0xa8],rax
:00097 %14 = %15.call z()                   [Vec]
  01449: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01450: 00 	test   rdi,0x7
  01457:    	jne    0x3349c
  0145d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01461:    	jne    0x3349c
  01467: 26 	cmp    DWORD PTR [rip+0xfffffffffffe926b],0x26        # 0xfffea6d9
  0146e:    	jne    0x3349c
  01474:    	mov    esi,DWORD PTR [rip+0x11da]        # 0x2654
  0147a:    	cmp    esi,0xffffffff
  0147d:    	je     0x3350c
  01483:    	cmp    WORD PTR [rdi+0x2],0x3
  01488:    	jne    0x14a1
  0148e:    	cmp    esi,0x6
  01491:    	jge    0x14a1
  01497:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0149c:    	jmp    0x1519
  014a1:    	sub    rsp,0x40
  014a5:    	movq   QWORD PTR [rsp],xmm2
  014aa:    	movq   QWORD PTR [rsp+0x8],xmm3
  014b0:    	movq   QWORD PTR [rsp+0x10],xmm4
  014b6:    	movq   QWORD PTR [rsp+0x18],xmm5
  014bc:    	movq   QWORD PTR [rsp+0x20],xmm7
  014c2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  014c9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  014d0: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  014d7: 4d 	movabs rax,0x564da0797d70
  014e1:    	call   rax
  014e3:    	movq   xmm2,QWORD PTR [rsp]
  014e8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014ee:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014f4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014fa:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01500: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01507: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0150e: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01515:    	add    rsp,0x40
  01519: ff 	mov    QWORD PTR [r14-0xa0],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  01520: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01527: 00 	test   rdi,0x1
  0152e:    	jne    0x335a1
  01534: 00 	test   rdi,0x2
  0153b:    	je     0x1577
  01541:    	xorps  xmm6,xmm6
  01544: 00 	movabs rax,0x8000000000000002
  0154e:    	cmp    rdi,rax
  01551:    	je     0x1589
  01557:    	mov    rax,rdi
  0155a:    	sar    rax,0x3f
  0155e:    	add    rax,0x2
  01562:    	and    rdi,0xfffffffffffffffc
  01566:    	or     rdi,rax
  01569:    	rol    rdi,0x3d
  0156d:    	movq   xmm6,rdi
  01572:    	jmp    0x1589
  01577:    	call   0xfffe73ac
  0157c:    	test   rax,rax
  0157f:    	je     0x335a1
  01585:    	movq   xmm6,xmm0
  01589:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  0158e:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  01592:    	mov    rax,QWORD PTR [rbp-0x18]
  01596:    	mov    rax,QWORD PTR [rax]
  01599:    	mov    rax,QWORD PTR [rax-0x28]
  0159d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00103 %16 = 2: i32
  015a4: ff 	mov    QWORD PTR [r14-0xb0],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  015af: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  015b6: ff 	mov    rsi,QWORD PTR [r14-0xb0]
  015bd: 00 	test   rdi,0x7
  015c4:    	jne    0x33611
  015ca:    	cmp    DWORD PTR [rdi+0x4],0xb
  015ce:    	jne    0x33611
  015d4: 00 	test   rsi,0x1
  015db:    	je     0x33611
  015e1:    	sar    rsi,1
  015e4:    	sub    rsp,0x50
  015e8:    	movq   QWORD PTR [rsp],xmm2
  015ed:    	movq   QWORD PTR [rsp+0x8],xmm3
  015f3:    	movq   QWORD PTR [rsp+0x10],xmm4
  015f9:    	movq   QWORD PTR [rsp+0x18],xmm5
  015ff:    	movq   QWORD PTR [rsp+0x20],xmm6
  01605:    	movq   QWORD PTR [rsp+0x28],xmm7
  0160b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01612: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01619: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01620: 4d 	movabs rax,0x564da0819c40
  0162a:    	call   rax
  0162c:    	movq   xmm2,QWORD PTR [rsp]
  01631:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01637:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0163d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01643:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01649:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0164f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01656: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0165d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01664:    	add    rsp,0x50
  01668: 4d 	movabs r13,0x564da0e84bf0
  01672:    	test   rax,rax
  01675:    	je     0xfffe7353
  0167b: ff 	mov    QWORD PTR [r14-0xa8],rax
:00105 %14 = %15.call z()                   [Vec]
  01682: ff 	mov    rdi,QWORD PTR [r14-0xa8]
  01689: 00 	test   rdi,0x7
  01690:    	jne    0x33691
  01696:    	cmp    DWORD PTR [rdi+0x4],0x28
  0169a:    	jne    0x33691
  016a0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9032],0x26        # 0xfffea6d9
  016a7:    	jne    0x33691
  016ad:    	mov    esi,DWORD PTR [rip+0xfa9]        # 0x265c
  016b3:    	cmp    esi,0xffffffff
  016b6:    	je     0x33701
  016bc:    	cmp    WORD PTR [rdi+0x2],0x3
  016c1:    	jne    0x16da
  016c7:    	cmp    esi,0x6
  016ca:    	jge    0x16da
  016d0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  016d5:    	jmp    0x1752
  016da:    	sub    rsp,0x40
  016de:    	movq   QWORD PTR [rsp],xmm2
  016e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  016ef:    	movq   QWORD PTR [rsp+0x18],xmm5
  016f5:    	movq   QWORD PTR [rsp+0x20],xmm7
  016fb: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01702: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01709: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01710: 4d 	movabs rax,0x564da0797d70
  0171a:    	call   rax
  0171c:    	movq   xmm2,QWORD PTR [rsp]
  01721:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01727:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0172d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01733:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01739: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01740: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01747: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0174e:    	add    rsp,0x40
  01752: ff 	mov    QWORD PTR [r14-0xa0],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  01759: ff 	mov    rdi,QWORD PTR [r14-0xa0]
  01760: 00 	test   rdi,0x1
  01767:    	jne    0x33796
  0176d: 00 	test   rdi,0x2
  01774:    	je     0x17b0
  0177a:    	xorps  xmm6,xmm6
  0177d: 00 	movabs rax,0x8000000000000002
  01787:    	cmp    rdi,rax
  0178a:    	je     0x17c2
  01790:    	mov    rax,rdi
  01793:    	sar    rax,0x3f
  01797:    	add    rax,0x2
  0179b:    	and    rdi,0xfffffffffffffffc
  0179f:    	or     rdi,rax
  017a2:    	rol    rdi,0x3d
  017a6:    	movq   xmm6,rdi
  017ab:    	jmp    0x17c2
  017b0:    	call   0xfffe73ac
  017b5:    	test   rax,rax
  017b8:    	je     0x33796
  017be:    	movq   xmm6,xmm0
  017c2:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  017c6:    	movq   xmm11,xmm3
  017cb:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  017d0: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8f09]        # 0xfffea6e0
  017d7: 00 	cmp    rax,QWORD PTR [rip+0xe92]        # 0x2670
  017de:    	jne    0x33806
  017e4: 00 	mov    rax,QWORD PTR [rip+0xe75]        # 0x2660
  017eb: ff 	mov    QWORD PTR [r14-0x98],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  017f2:    	movq   xmm0,xmm9
  017f7:    	call   0xfffe74d0
  017fc: ff 	mov    QWORD PTR [r14-0xa0],rax
  01803:    	movq   xmm0,xmm10
  01808:    	call   0xfffe74d0
  0180d: ff 	mov    QWORD PTR [r14-0xa8],rax
  01814:    	movq   xmm0,xmm11
  01819:    	call   0xfffe74d0
  0181e: ff 	mov    QWORD PTR [r14-0xb0],rax
  01825: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0182c: 00 	test   rdi,0x7
  01833:    	jne    0x338c6
  01839:    	cmp    DWORD PTR [rdi+0x4],0x29
  0183d:    	jne    0x338c6
  01843: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8e8f],0x26        # 0xfffea6d9
  0184a:    	jne    0x338c6
  01850: 00 	mov    r9,0x0
  01857:    	sub    rsp,0x40
  0185b:    	movq   QWORD PTR [rsp],xmm2
  01860:    	movq   QWORD PTR [rsp+0x8],xmm4
  01866:    	movq   QWORD PTR [rsp+0x10],xmm5
  0186c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01872: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01879: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01880: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01887: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0188e:    	mov    rdx,rdi
  01891:    	mov    QWORD PTR [rsp-0x40],rcx
  01896: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0189f: ff 	lea    rcx,[r14-0xa0]
  018a6: 00 	mov    r8,0x3
  018ad:    	mov    rsi,QWORD PTR [rbx]
  018b0:    	mov    QWORD PTR [rsp-0x18],rsi
  018b5:    	lea    rsi,[rsp-0x18]
  018ba:    	mov    QWORD PTR [rbx],rsi
  018bd:    	lea    r14,[rsp-0x10]
  018c2:    	mov    QWORD PTR [rsp-0x20],r14
  018c7:    	call   0x33934
  018cc:    	lea    r14,[rbp-0x8]
  018d0:    	mov    QWORD PTR [rbx],r14
  018d3:    	mov    r14,QWORD PTR [rbp-0x10]
  018d7:    	movq   xmm2,QWORD PTR [rsp]
  018dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  018e8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  018ee: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  018f5: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  018fc: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01903: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0190a:    	add    rsp,0x40
  0190e: 4d 	movabs r13,0x564da0e84ca0
  01918:    	test   rax,rax
  0191b:    	je     0xfffe7353
  01921:    	mov    QWORD PTR [r14-0x80],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  01925: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8db4]        # 0xfffea6e0
  0192c: 00 	cmp    rax,QWORD PTR [rip+0xd5d]        # 0x2690
  01933:    	jne    0x33966
  01939: 00 	mov    rax,QWORD PTR [rip+0xd40]        # 0x2680
  01940: ff 	mov    QWORD PTR [r14-0x98],rax
:00118 %14 = dynvar(2, %7)
  01947:    	mov    rax,QWORD PTR [rbp-0x18]
  0194b:    	mov    rax,QWORD PTR [rax]
  0194e:    	mov    rax,QWORD PTR [rax-0x50]
  01952: ff 	mov    QWORD PTR [r14-0xa0],rax
:00119 %15 = %10
  01959:    	mov    rax,QWORD PTR [r14-0x80]
  0195d: ff 	mov    QWORD PTR [r14-0xa8],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  01964: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0196b: 00 	test   rdi,0x7
  01972:    	jne    0x33a1a
  01978:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0197c:    	jne    0x33a1a
  01982: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8d50],0x26        # 0xfffea6d9
  01989:    	jne    0x33a1a
  0198f: 00 	mov    r9,0x0
  01996:    	sub    rsp,0x40
  0199a:    	movq   QWORD PTR [rsp],xmm2
  0199f:    	movq   QWORD PTR [rsp+0x8],xmm4
  019a5:    	movq   QWORD PTR [rsp+0x10],xmm5
  019ab:    	movq   QWORD PTR [rsp+0x18],xmm7
  019b1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019b8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  019bf: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  019c6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  019cd:    	mov    rdx,rdi
  019d0:    	mov    QWORD PTR [rsp-0x40],rcx
  019d5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019de: ff 	lea    rcx,[r14-0xa0]
  019e5: 00 	mov    r8,0x2
  019ec:    	mov    rsi,QWORD PTR [rbx]
  019ef:    	mov    QWORD PTR [rsp-0x18],rsi
  019f4:    	lea    rsi,[rsp-0x18]
  019f9:    	mov    QWORD PTR [rbx],rsi
  019fc:    	lea    r14,[rsp-0x10]
  01a01:    	mov    QWORD PTR [rsp-0x20],r14
  01a06:    	call   0x33a88
  01a0b:    	lea    r14,[rbp-0x8]
  01a0f:    	mov    QWORD PTR [rbx],r14
  01a12:    	mov    r14,QWORD PTR [rbp-0x10]
  01a16:    	movq   xmm2,QWORD PTR [rsp]
  01a1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a27:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a2d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a34: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a3b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a42: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a49:    	add    rsp,0x40
  01a4d: 4d 	movabs r13,0x564da0e84d00
  01a57:    	test   rax,rax
  01a5a:    	je     0xfffe7353
  01a60: ff 	mov    QWORD PTR [r14-0x88],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  01a67: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe8c72]        # 0xfffea6e0
  01a6e: 00 	cmp    rax,QWORD PTR [rip+0xc3b]        # 0x26b0
  01a75:    	jne    0x33aba
  01a7b: 00 	mov    rax,QWORD PTR [rip+0xc1e]        # 0x26a0
  01a82: ff 	mov    QWORD PTR [r14-0x98],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  01a89: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01a90: 00 	test   rdi,0x7
  01a97:    	jne    0x33b6e
  01a9d:    	cmp    DWORD PTR [rdi+0x4],0x31
  01aa1:    	jne    0x33b6e
  01aa7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8c2b],0x26        # 0xfffea6d9
  01aae:    	jne    0x33b6e
  01ab4: 00 	mov    r9,0x0
  01abb:    	sub    rsp,0x40
  01abf:    	movq   QWORD PTR [rsp],xmm2
  01ac4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aca:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ad0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ad6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01add: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ae4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01aeb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01af2:    	mov    rdx,rdi
  01af5:    	mov    QWORD PTR [rsp-0x40],rcx
  01afa: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01b03: ff 	lea    rcx,[r14-0xa0]
  01b0a: 00 	mov    r8,0x0
  01b11:    	mov    rsi,QWORD PTR [rbx]
  01b14:    	mov    QWORD PTR [rsp-0x18],rsi
  01b19:    	lea    rsi,[rsp-0x18]
  01b1e:    	mov    QWORD PTR [rbx],rsi
  01b21:    	lea    r14,[rsp-0x10]
  01b26:    	mov    QWORD PTR [rsp-0x20],r14
  01b2b:    	call   0x33bdc
  01b30:    	lea    r14,[rbp-0x8]
  01b34:    	mov    QWORD PTR [rbx],r14
  01b37:    	mov    r14,QWORD PTR [rbp-0x10]
  01b3b:    	movq   xmm2,QWORD PTR [rsp]
  01b40:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b46:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b4c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b52: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b59: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b60: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b67: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6e:    	add    rsp,0x40
  01b72: 4d 	movabs r13,0x564da0e84d40
  01b7c:    	test   rax,rax
  01b7f:    	je     0xfffe7353
  01b85: ff 	mov    QWORD PTR [r14-0x90],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01b8c:    	mov    rdi,QWORD PTR [rbp-0x30]
  01b90:    	mov    rax,QWORD PTR [rdi+0x10]
  01b94: ff 	mov    QWORD PTR [r14-0x98],rax
:00128 %14 = 0: i32
  01b9b: ff 	mov    QWORD PTR [r14-0xa0],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01ba6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01bad: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01bb4: 00 	test   rdi,0x7
  01bbb:    	jne    0x33c0e
  01bc1:    	cmp    DWORD PTR [rdi+0x4],0xb
  01bc5:    	jne    0x33c0e
  01bcb: 00 	test   rsi,0x1
  01bd2:    	je     0x33c0e
  01bd8:    	sar    rsi,1
  01bdb:    	sub    rsp,0x40
  01bdf:    	movq   QWORD PTR [rsp],xmm2
  01be4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bea:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bf0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bf6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bfd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01c04: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c0b: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c12: 4d 	movabs rax,0x564da0819c40
  01c1c:    	call   rax
  01c1e:    	movq   xmm2,QWORD PTR [rsp]
  01c23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c29:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c2f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c35: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c3c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c43: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c4a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c51:    	add    rsp,0x40
  01c55: 4d 	movabs r13,0x564da0e84d80
  01c5f:    	test   rax,rax
  01c62:    	je     0xfffe7353
  01c68: ff 	mov    QWORD PTR [r14-0x98],rax
:00130 %14 = %11
  01c6f: ff 	mov    rax,QWORD PTR [r14-0x88]
  01c76: ff 	mov    QWORD PTR [r14-0xa0],rax
:00131 %15 = %12
  01c7d: ff 	mov    rax,QWORD PTR [r14-0x90]
  01c84: ff 	mov    QWORD PTR [r14-0xa8],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01c8b: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01c92: 00 	test   rdi,0x7
  01c99:    	jne    0x33c7c
  01c9f:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ca3:    	jne    0x33c7c
  01ca9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8a29],0x26        # 0xfffea6d9
  01cb0:    	jne    0x33c7c
  01cb6:    	sub    rsp,0x40
  01cba:    	movq   QWORD PTR [rsp],xmm2
  01cbf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cc5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ccb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01cd1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01cd8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cdf: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ce6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ced: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01cf6: ff 	mov    rax,QWORD PTR [r14-0x98]
  01cfd:    	mov    QWORD PTR [rsp-0x40],rax
  01d02: 00 	mov    rdi,0x2
  01d09: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01d10:    	mov    QWORD PTR [rsp-0x48],rax
  01d15: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01d1c:    	mov    QWORD PTR [rsp-0x50],rax
  01d21: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01d2a: 10 	movabs rax,0x1001000000046
  01d34:    	mov    QWORD PTR [rsp-0x30],rax
  01d39: 4d 	movabs r13,0x564da0e8bc90
  01d43:    	mov    rsi,QWORD PTR [rbx]
  01d46:    	mov    QWORD PTR [rsp-0x18],rsi
  01d4b:    	lea    rsi,[rsp-0x18]
  01d50:    	mov    QWORD PTR [rbx],rsi
  01d53:    	lea    r14,[rsp-0x10]
  01d58:    	mov    QWORD PTR [rsp-0x20],r14
  01d5d:    	call   0xfffeb284
  01d62:    	lea    r14,[rbp-0x8]
  01d66:    	mov    QWORD PTR [rbx],r14
  01d69:    	mov    r14,QWORD PTR [rbp-0x10]
  01d6d:    	movq   xmm2,QWORD PTR [rsp]
  01d72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d78:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d7e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d84: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d8b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d92: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d99: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01da0:    	add    rsp,0x40
  01da4: 4d 	movabs r13,0x564da0e84dc0
  01dae:    	test   rax,rax
  01db1:    	je     0xfffe7353
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01db7:    	mov    rdi,QWORD PTR [rbp-0x30]
  01dbb:    	mov    rax,QWORD PTR [rdi+0x10]
  01dbf: ff 	mov    QWORD PTR [r14-0x98],rax
:00136 %14 = 1: i32
  01dc6: ff 	mov    QWORD PTR [r14-0xa0],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01dd1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01dd8: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  01ddf: 00 	test   rdi,0x7
  01de6:    	jne    0x33cea
  01dec:    	cmp    DWORD PTR [rdi+0x4],0xb
  01df0:    	jne    0x33cea
  01df6: 00 	test   rsi,0x1
  01dfd:    	je     0x33cea
  01e03:    	sar    rsi,1
  01e06:    	sub    rsp,0x40
  01e0a:    	movq   QWORD PTR [rsp],xmm2
  01e0f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e15:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e1b:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e21: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e28: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e2f: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e36: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e3d: 4d 	movabs rax,0x564da0819c40
  01e47:    	call   rax
  01e49:    	movq   xmm2,QWORD PTR [rsp]
  01e4e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e54:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e5a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e60: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e67: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e6e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e75: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e7c:    	add    rsp,0x40
  01e80: 4d 	movabs r13,0x564da0e84e00
  01e8a:    	test   rax,rax
  01e8d:    	je     0xfffe7353
  01e93: ff 	mov    QWORD PTR [r14-0x98],rax
:00138 %14 = %11
  01e9a: ff 	mov    rax,QWORD PTR [r14-0x88]
  01ea1: ff 	mov    QWORD PTR [r14-0xa0],rax
:00139 %15 = %12
  01ea8: ff 	mov    rax,QWORD PTR [r14-0x90]
  01eaf: ff 	mov    QWORD PTR [r14-0xa8],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01eb6: ff 	mov    rdi,QWORD PTR [r14-0x98]
  01ebd: 00 	test   rdi,0x7
  01ec4:    	jne    0x33d58
  01eca:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01ece:    	jne    0x33d58
  01ed4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe87fe],0x26        # 0xfffea6d9
  01edb:    	jne    0x33d58
  01ee1:    	sub    rsp,0x40
  01ee5:    	movq   QWORD PTR [rsp],xmm2
  01eea:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ef0:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ef6:    	movq   QWORD PTR [rsp+0x18],xmm7
  01efc: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f03: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f0a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f11: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f18: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01f21: ff 	mov    rax,QWORD PTR [r14-0x98]
  01f28:    	mov    QWORD PTR [rsp-0x40],rax
  01f2d: 00 	mov    rdi,0x2
  01f34: ff 	mov    rax,QWORD PTR [r14-0xa0]
  01f3b:    	mov    QWORD PTR [rsp-0x48],rax
  01f40: ff 	mov    rax,QWORD PTR [r14-0xa8]
  01f47:    	mov    QWORD PTR [rsp-0x50],rax
  01f4c: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01f55: 10 	movabs rax,0x1001000000046
  01f5f:    	mov    QWORD PTR [rsp-0x30],rax
  01f64: 4d 	movabs r13,0x564da0e8bc90
  01f6e:    	mov    rsi,QWORD PTR [rbx]
  01f71:    	mov    QWORD PTR [rsp-0x18],rsi
  01f76:    	lea    rsi,[rsp-0x18]
  01f7b:    	mov    QWORD PTR [rbx],rsi
  01f7e:    	lea    r14,[rsp-0x10]
  01f83:    	mov    QWORD PTR [rsp-0x20],r14
  01f88:    	call   0xfffeb284
  01f8d:    	lea    r14,[rbp-0x8]
  01f91:    	mov    QWORD PTR [rbx],r14
  01f94:    	mov    r14,QWORD PTR [rbp-0x10]
  01f98:    	movq   xmm2,QWORD PTR [rsp]
  01f9d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01fa3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01fa9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01faf: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01fb6: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01fbd: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01fc4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fcb:    	add    rsp,0x40
  01fcf: 4d 	movabs r13,0x564da0e84e40
  01fd9:    	test   rax,rax
  01fdc:    	je     0xfffe7353
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01fe2:    	mov    rdi,QWORD PTR [rbp-0x30]
  01fe6:    	mov    rax,QWORD PTR [rdi+0x10]
  01fea: ff 	mov    QWORD PTR [r14-0x98],rax
:00144 %14 = 2: i32
  01ff1: ff 	mov    QWORD PTR [r14-0xa0],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01ffc: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02003: ff 	mov    rsi,QWORD PTR [r14-0xa0]
  0200a: 00 	test   rdi,0x7
  02011:    	jne    0x33dc6
  02017:    	cmp    DWORD PTR [rdi+0x4],0xb
  0201b:    	jne    0x33dc6
  02021: 00 	test   rsi,0x1
  02028:    	je     0x33dc6
  0202e:    	sar    rsi,1
  02031:    	sub    rsp,0x40
  02035:    	movq   QWORD PTR [rsp],xmm2
  0203a:    	movq   QWORD PTR [rsp+0x8],xmm4
  02040:    	movq   QWORD PTR [rsp+0x10],xmm5
  02046:    	movq   QWORD PTR [rsp+0x18],xmm7
  0204c: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02053: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0205a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02061: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02068: 4d 	movabs rax,0x564da0819c40
  02072:    	call   rax
  02074:    	movq   xmm2,QWORD PTR [rsp]
  02079:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0207f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02085:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0208b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02092: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02099: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020a0: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020a7:    	add    rsp,0x40
  020ab: 4d 	movabs r13,0x564da0e84e80
  020b5:    	test   rax,rax
  020b8:    	je     0xfffe7353
  020be: ff 	mov    QWORD PTR [r14-0x98],rax
:00146 %14 = %11
  020c5: ff 	mov    rax,QWORD PTR [r14-0x88]
  020cc: ff 	mov    QWORD PTR [r14-0xa0],rax
:00147 %15 = %12
  020d3: ff 	mov    rax,QWORD PTR [r14-0x90]
  020da: ff 	mov    QWORD PTR [r14-0xa8],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  020e1: ff 	mov    rdi,QWORD PTR [r14-0x98]
  020e8: 00 	test   rdi,0x7
  020ef:    	jne    0x33e34
  020f5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  020f9:    	jne    0x33e34
  020ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffe85d3],0x26        # 0xfffea6d9
  02106:    	jne    0x33e34
  0210c:    	sub    rsp,0x40
  02110:    	movq   QWORD PTR [rsp],xmm2
  02115:    	movq   QWORD PTR [rsp+0x8],xmm4
  0211b:    	movq   QWORD PTR [rsp+0x10],xmm5
  02121:    	movq   QWORD PTR [rsp+0x18],xmm7
  02127: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0212e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02135: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0213c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02143: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0214c: ff 	mov    rax,QWORD PTR [r14-0x98]
  02153:    	mov    QWORD PTR [rsp-0x40],rax
  02158: 00 	mov    rdi,0x2
  0215f: ff 	mov    rax,QWORD PTR [r14-0xa0]
  02166:    	mov    QWORD PTR [rsp-0x48],rax
  0216b: ff 	mov    rax,QWORD PTR [r14-0xa8]
  02172:    	mov    QWORD PTR [rsp-0x50],rax
  02177: 00 	mov    QWORD PTR [rsp-0x38],0x0
  02180: 10 	movabs rax,0x1001000000046
  0218a:    	mov    QWORD PTR [rsp-0x30],rax
  0218f: 4d 	movabs r13,0x564da0e8bc90
  02199:    	mov    rsi,QWORD PTR [rbx]
  0219c:    	mov    QWORD PTR [rsp-0x18],rsi
  021a1:    	lea    rsi,[rsp-0x18]
  021a6:    	mov    QWORD PTR [rbx],rsi
  021a9:    	lea    r14,[rsp-0x10]
  021ae:    	mov    QWORD PTR [rsp-0x20],r14
  021b3:    	call   0xfffeb284
  021b8:    	lea    r14,[rbp-0x8]
  021bc:    	mov    QWORD PTR [rbx],r14
  021bf:    	mov    r14,QWORD PTR [rbp-0x10]
  021c3:    	movq   xmm2,QWORD PTR [rsp]
  021c8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021ce:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021d4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021da: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021e1: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021e8: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021ef: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  021f6:    	add    rsp,0x40
  021fa: 4d 	movabs r13,0x564da0e84ec0
  02204:    	test   rax,rax
  02207:    	je     0xfffe7353
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  0220d:    	mov    rdi,QWORD PTR [rbp-0x30]
  02211:    	mov    rax,QWORD PTR [rdi+0x18]
  02215: ff 	mov    QWORD PTR [r14-0x98],rax
:00152 %14 = %11
  0221c: ff 	mov    rax,QWORD PTR [r14-0x88]
  02223: ff 	mov    QWORD PTR [r14-0xa0],rax
:00153 %15 = %12
  0222a: ff 	mov    rax,QWORD PTR [r14-0x90]
  02231: ff 	mov    QWORD PTR [r14-0xa8],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  02238: ff 	mov    rdi,QWORD PTR [r14-0x98]
  0223f: 00 	test   rdi,0x7
  02246:    	jne    0x33ea2
  0224c:    	cmp    DWORD PTR [rdi+0x4],0x2c
  02250:    	jne    0x33ea2
  02256: 26 	cmp    DWORD PTR [rip+0xfffffffffffe847c],0x26        # 0xfffea6d9
  0225d:    	jne    0x33ea2
  02263:    	sub    rsp,0x40
  02267:    	movq   QWORD PTR [rsp],xmm2
  0226c:    	movq   QWORD PTR [rsp+0x8],xmm4
  02272:    	movq   QWORD PTR [rsp+0x10],xmm5
  02278:    	movq   QWORD PTR [rsp+0x18],xmm7
  0227e: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02285: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0228c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02293: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0229a: 00 	mov    QWORD PTR [rsp-0x28],0x0
  022a3: ff 	mov    rax,QWORD PTR [r14-0x98]
  022aa:    	mov    QWORD PTR [rsp-0x40],rax
  022af: 00 	mov    rdi,0x2
  022b6: ff 	mov    rax,QWORD PTR [r14-0xa0]
  022bd:    	mov    QWORD PTR [rsp-0x48],rax
  022c2: ff 	mov    rax,QWORD PTR [r14-0xa8]
  022c9:    	mov    QWORD PTR [rsp-0x50],rax
  022ce: 00 	mov    QWORD PTR [rsp-0x38],0x0
  022d7: 0e 	movabs rax,0x1000e00000048
  022e1:    	mov    QWORD PTR [rsp-0x30],rax
  022e6: 4d 	movabs r13,0x564da0e92080
  022f0:    	mov    rsi,QWORD PTR [rbx]
  022f3:    	mov    QWORD PTR [rsp-0x18],rsi
  022f8:    	lea    rsi,[rsp-0x18]
  022fd:    	mov    QWORD PTR [rbx],rsi
  02300:    	lea    r14,[rsp-0x10]
  02305:    	mov    QWORD PTR [rsp-0x20],r14
  0230a:    	call   0xfffeb850
  0230f:    	lea    r14,[rbp-0x8]
  02313:    	mov    QWORD PTR [rbx],r14
  02316:    	mov    r14,QWORD PTR [rbp-0x10]
  0231a:    	movq   xmm2,QWORD PTR [rsp]
  0231f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02325:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0232b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02331: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02338: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0233f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02346: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0234d:    	add    rsp,0x40
  02351: 4d 	movabs r13,0x564da0e84f20
  0235b:    	test   rax,rax
  0235e:    	je     0xfffe7353
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  02364: ff 	mov    rdi,QWORD PTR [r14-0x90]
  0236b: 00 	test   rdi,0x7
  02372:    	jne    0x33f10
  02378:    	cmp    DWORD PTR [rdi+0x4],0x30
  0237c:    	jne    0x33f10
  02382: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8350],0x26        # 0xfffea6d9
  02389:    	jne    0x33f10
  0238f:    	mov    esi,DWORD PTR [rip+0x327]        # 0x26bc
  02395:    	cmp    esi,0xffffffff
  02398:    	je     0x33f7e
  0239e:    	cmp    WORD PTR [rdi+0x2],0x3
  023a3:    	jne    0x23bc
  023a9:    	cmp    esi,0x6
  023ac:    	jge    0x23bc
  023b2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  023b7:    	jmp    0x2436
  023bc:    	sub    rsp,0x40
  023c0:    	movq   QWORD PTR [rsp],xmm2
  023c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  023cb:    	movq   QWORD PTR [rsp+0x10],xmm5
  023d1:    	movq   QWORD PTR [rsp+0x18],xmm7
  023d7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  023de: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  023e5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  023ec: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  023f3: 4d 	movabs rax,0x564da0797d70
  023fd:    	call   rax
  023ff:    	movq   xmm2,QWORD PTR [rsp]
  02404:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0240a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02410:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02416: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0241d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02424: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0242b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02432:    	add    rsp,0x40
  02436: ff 	mov    QWORD PTR [r14-0x98],rax
:00158 
:00160 condnotbr %13 =>:00166
  0243d: ff 	mov    rax,QWORD PTR [r14-0x98]
  02444:    	or     rax,0x10
  02448:    	cmp    rax,0x14
  0244c:    	je     0x2515
:00161 %13 = dynvar(2, %6)
  02452:    	mov    rax,QWORD PTR [rbp-0x18]
  02456:    	mov    rax,QWORD PTR [rax]
  02459:    	mov    rax,QWORD PTR [rax-0x48]
  0245d: ff 	mov    QWORD PTR [r14-0x98],rax
:00162 %14 = literal[1.0]
  02464: 00 	movq   xmm3,QWORD PTR [rip+0x254]        # 0x26c0
  0246c: 00 	movabs rax,0xff80000000000002
  02476: ff 	mov    QWORD PTR [r14-0xa0],rax
:00163 %13 = %13 + %14                      [Float][Float]
  0247d: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02484: 00 	test   rdi,0x1
  0248b:    	jne    0x34015
  02491: 00 	test   rdi,0x2
  02498:    	je     0x24d4
  0249e:    	xorps  xmm6,xmm6
  024a1: 00 	movabs rax,0x8000000000000002
  024ab:    	cmp    rdi,rax
  024ae:    	je     0x24e6
  024b4:    	mov    rax,rdi
  024b7:    	sar    rax,0x3f
  024bb:    	add    rax,0x2
  024bf:    	and    rdi,0xfffffffffffffffc
  024c3:    	or     rdi,rax
  024c6:    	rol    rdi,0x3d
  024ca:    	movq   xmm6,rdi
  024cf:    	jmp    0x24e6
  024d4:    	call   0xfffe73ac
  024d9:    	test   rax,rax
  024dc:    	je     0x34015
  024e2:    	movq   xmm6,xmm0
  024e6:    	addsd  xmm6,xmm3
:00164 dynvar(2, %6) = %13
  024ea:    	movq   xmm0,xmm6
  024ee:    	call   0xfffe74d0
  024f3: ff 	mov    QWORD PTR [r14-0x98],rax
  024fa:    	mov    rax,QWORD PTR [rbp-0x18]
  024fe:    	mov    rax,QWORD PTR [rax]
  02501: ff 	mov    rdi,QWORD PTR [r14-0x98]
  02508:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  0250c: ff 	mov    rax,QWORD PTR [r14-0x98]
  02513:    	leave  
  02514:    	ret    
:00166 %13 = literal[0.0]
  02515: 00 	movq   xmm3,QWORD PTR [rip+0x1b3]        # 0x26d0
  0251d: 00 	movabs rax,0x8000000000000002
  02527: ff 	mov    QWORD PTR [r14-0x98],rax
:00167 ret %13
  0252e: ff 	mov    rax,QWORD PTR [r14-0x98]
  02535:    	leave  
  02536:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x564da0eaa9d0
<== finished compile. elapsed:128.6µs
offset:Pos(111544) code: 8408 bytes  data: 300 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x319ab
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x319ba
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x319ba
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7fa8]        # 0xfffe8008
  00060: 00 	cmp    rax,QWORD PTR [rip+0x2081]        # 0x20e8
  00067:    	jne    0x319c9
  0006d: 00 	mov    rax,QWORD PTR [rip+0x2064]        # 0x20d8
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x31a0f
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x31a0f
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7f67],0x26        # 0xfffe8001
  0009a:    	jne    0x31a0f
  000a0:    	mov    esi,DWORD PTR [rip+0x204e]        # 0x20f4
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x31a1e
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: 4d 	movabs rax,0x564da0797d70
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x31a47
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x31a47
  000f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7f02],0x26        # 0xfffe8001
  000ff:    	jne    0x31a47
  00105:    	mov    esi,DWORD PTR [rip+0x1ff1]        # 0x20fc
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x31a56
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: 4d 	movabs rax,0x564da0797d70
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x31a7f
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x31a7f
  0015d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7e9d],0x26        # 0xfffe8001
  00164:    	jne    0x31a7f
  0016a:    	mov    esi,DWORD PTR [rip+0x1f94]        # 0x2104
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x31a8e
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: 4d 	movabs rax,0x564da0797d70
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x31ab7
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x31ab7
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7e38],0x26        # 0xfffe8001
  001c9:    	jne    0x31ab7
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x31ac6
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: 4d 	movabs r13,0x564da0eaaab0
  00226:    	test   rax,rax
  00229:    	je     0xfffe4c7b
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdi,QWORD PTR [r14-0x38]
  00237:    	mov    rsi,QWORD PTR [r14-0x48]
  0023b: 00 	test   rdi,0x7
  00242:    	jne    0x31af8
  00248:    	cmp    DWORD PTR [rdi+0x4],0xb
  0024c:    	jne    0x31af8
  00252: 00 	test   rsi,0x1
  00259:    	je     0x31af8
  0025f:    	sar    rsi,1
  00262:    	mov    rdx,r12
  00265:    	mov    rcx,QWORD PTR [r14-0x50]
  00269: 4d 	movabs rax,0x564da0819dd0
  00273:    	call   rax
  00275: 4d 	movabs r13,0x564da0eaaad0
  0027f:    	test   rax,rax
  00282:    	je     0xfffe4c7b
:00016 %3 = 1: i32
  00288: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  00290: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe7d71]        # 0xfffe8008
  00297: 00 	cmp    rax,QWORD PTR [rip+0x1e7a]        # 0x2118
  0029e:    	jne    0x31b07
  002a4: 00 	mov    rax,QWORD PTR [rip+0x1e5d]        # 0x2108
  002ab:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  002af: 00 	movq   xmm2,QWORD PTR [rip+0x1e71]        # 0x2128
  002b7: 00 	movabs rax,0x8000000000000002
  002c1:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002c5: 00 	movq   xmm3,QWORD PTR [rip+0x1e6b]        # 0x2138
  002cd: 00 	movabs rax,0x8000000000000002
  002d7:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002db: 00 	movq   xmm4,QWORD PTR [rip+0x1e65]        # 0x2148
  002e3: 00 	movabs rax,0x8000000000000002
  002ed:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f1:    	mov    rdi,QWORD PTR [r14-0x58]
  002f5: 00 	test   rdi,0x7
  002fc:    	jne    0x31b4d
  00302:    	cmp    DWORD PTR [rdi+0x4],0x29
  00306:    	jne    0x31b4d
  0030c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7cee],0x26        # 0xfffe8001
  00313:    	jne    0x31b4d
  00319: 00 	mov    r9,0x0
  00320:    	sub    rsp,0x20
  00324:    	movq   QWORD PTR [rsp],xmm2
  00329:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00335:    	mov    rdx,rdi
  00338:    	mov    QWORD PTR [rsp-0x40],rcx
  0033d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00346:    	lea    rcx,[r14-0x60]
  0034a: 00 	mov    r8,0x3
  00351:    	mov    rsi,QWORD PTR [rbx]
  00354:    	mov    QWORD PTR [rsp-0x18],rsi
  00359:    	lea    rsi,[rsp-0x18]
  0035e:    	mov    QWORD PTR [rbx],rsi
  00361:    	lea    r14,[rsp-0x10]
  00366:    	mov    QWORD PTR [rsp-0x20],r14
  0036b:    	call   0x31b5c
  00370:    	lea    r14,[rbp-0x8]
  00374:    	mov    QWORD PTR [rbx],r14
  00377:    	mov    r14,QWORD PTR [rbp-0x10]
  0037b:    	movq   xmm2,QWORD PTR [rsp]
  00380:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00386:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0038c:    	add    rsp,0x20
  00390: 4d 	movabs r13,0x564da0eaab40
  0039a:    	test   rax,rax
  0039d:    	je     0xfffe4c7b
  003a3:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  003a7:    	mov    rdi,QWORD PTR [r14-0x38]
  003ab:    	mov    rsi,QWORD PTR [r14-0x48]
  003af: 00 	test   rdi,0x7
  003b6:    	jne    0x31b8e
  003bc:    	cmp    DWORD PTR [rdi+0x4],0xb
  003c0:    	jne    0x31b8e
  003c6: 00 	test   rsi,0x1
  003cd:    	je     0x31b8e
  003d3:    	sar    rsi,1
  003d6:    	sub    rsp,0x20
  003da:    	movq   QWORD PTR [rsp],xmm2
  003df:    	movq   QWORD PTR [rsp+0x8],xmm3
  003e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003eb:    	mov    rdx,r12
  003ee:    	mov    rcx,QWORD PTR [r14-0x50]
  003f2: 4d 	movabs rax,0x564da0819dd0
  003fc:    	call   rax
  003fe:    	movq   xmm2,QWORD PTR [rsp]
  00403:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00409:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0040f:    	add    rsp,0x20
  00413: 4d 	movabs r13,0x564da0eaab60
  0041d:    	test   rax,rax
  00420:    	je     0xfffe4c7b
:00025 %3 = %2.call x()                     [Vec]
  00426:    	mov    rdi,QWORD PTR [r14-0x40]
  0042a: 00 	test   rdi,0x7
  00431:    	jne    0x31b9d
  00437:    	cmp    DWORD PTR [rdi+0x4],0x28
  0043b:    	jne    0x31b9d
  00441: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7bb9],0x26        # 0xfffe8001
  00448:    	jne    0x31b9d
  0044e:    	mov    esi,DWORD PTR [rip+0x1d00]        # 0x2154
  00454:    	cmp    esi,0xffffffff
  00457:    	je     0x31bac
  0045d:    	cmp    WORD PTR [rdi+0x2],0x3
  00462:    	jne    0x47b
  00468:    	cmp    esi,0x6
  0046b:    	jge    0x47b
  00471:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00476:    	jmp    0x4b1
  0047b:    	sub    rsp,0x20
  0047f:    	movq   QWORD PTR [rsp],xmm2
  00484:    	movq   QWORD PTR [rsp+0x8],xmm3
  0048a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00490: 4d 	movabs rax,0x564da0797d70
  0049a:    	call   rax
  0049c:    	movq   xmm2,QWORD PTR [rsp]
  004a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004ad:    	add    rsp,0x20
  004b1:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  004b5: 00 	movq   xmm5,QWORD PTR [rip+0x1c9b]        # 0x2158
  004bd: 99 	movabs rax,0xff1999999999999a
  004c7:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  004cb:    	mov    rdi,QWORD PTR [r14-0x48]
  004cf: 00 	test   rdi,0x1
  004d6:    	jne    0x31bff
  004dc: 00 	test   rdi,0x2
  004e3:    	je     0x51f
  004e9:    	xorps  xmm6,xmm6
  004ec: 00 	movabs rax,0x8000000000000002
  004f6:    	cmp    rdi,rax
  004f9:    	je     0x531
  004ff:    	mov    rax,rdi
  00502:    	sar    rax,0x3f
  00506:    	add    rax,0x2
  0050a:    	and    rdi,0xfffffffffffffffc
  0050e:    	or     rdi,rax
  00511:    	rol    rdi,0x3d
  00515:    	movq   xmm6,rdi
  0051a:    	jmp    0x531
  0051f:    	call   0xfffe4cd4
  00524:    	test   rax,rax
  00527:    	je     0x31bff
  0052d:    	movq   xmm6,xmm0
  00531:    	ucomisd xmm6,xmm5
  00535:    	jae    0x31d0f
:00031 %3 = %2.call x()                     [Vec]
  0053b:    	mov    rdi,QWORD PTR [r14-0x40]
  0053f: 00 	test   rdi,0x7
  00546:    	jne    0x31c0e
  0054c:    	cmp    DWORD PTR [rdi+0x4],0x28
  00550:    	jne    0x31c0e
  00556: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7aa4],0x26        # 0xfffe8001
  0055d:    	jne    0x31c0e
  00563:    	mov    esi,DWORD PTR [rip+0x1bfb]        # 0x2164
  00569:    	cmp    esi,0xffffffff
  0056c:    	je     0x31c1d
  00572:    	cmp    WORD PTR [rdi+0x2],0x3
  00577:    	jne    0x590
  0057d:    	cmp    esi,0x6
  00580:    	jge    0x590
  00586:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0058b:    	jmp    0x5d2
  00590:    	sub    rsp,0x20
  00594:    	movq   QWORD PTR [rsp],xmm2
  00599:    	movq   QWORD PTR [rsp+0x8],xmm3
  0059f:    	movq   QWORD PTR [rsp+0x10],xmm4
  005a5:    	movq   QWORD PTR [rsp+0x18],xmm5
  005ab: 4d 	movabs rax,0x564da0797d70
  005b5:    	call   rax
  005b7:    	movq   xmm2,QWORD PTR [rsp]
  005bc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005ce:    	add    rsp,0x20
  005d2:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  005d6: 00 	movq   xmm5,QWORD PTR [rip+0x1b8a]        # 0x2168
  005de: 99 	movabs rax,0xff1999999999999e
  005e8:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005ec:    	mov    rdi,QWORD PTR [r14-0x48]
  005f0: 00 	test   rdi,0x1
  005f7:    	jne    0x31c7c
  005fd: 00 	test   rdi,0x2
  00604:    	je     0x640
  0060a:    	xorps  xmm6,xmm6
  0060d: 00 	movabs rax,0x8000000000000002
  00617:    	cmp    rdi,rax
  0061a:    	je     0x652
  00620:    	mov    rax,rdi
  00623:    	sar    rax,0x3f
  00627:    	add    rax,0x2
  0062b:    	and    rdi,0xfffffffffffffffc
  0062f:    	or     rdi,rax
  00632:    	rol    rdi,0x3d
  00636:    	movq   xmm6,rdi
  0063b:    	jmp    0x652
  00640:    	call   0xfffe4cd4
  00645:    	test   rax,rax
  00648:    	je     0x31c7c
  0064e:    	movq   xmm6,xmm0
  00652:    	ucomisd xmm6,xmm5
  00656:    	jbe    0x31d28
:00037 %3 = 1: i32
  0065c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00664:    	mov    rdi,QWORD PTR [r14-0x38]
  00668:    	mov    rsi,QWORD PTR [r14-0x48]
  0066c: 00 	test   rdi,0x7
  00673:    	jne    0x31c8b
  00679:    	cmp    DWORD PTR [rdi+0x4],0xb
  0067d:    	jne    0x31c8b
  00683: 00 	test   rsi,0x1
  0068a:    	je     0x31c8b
  00690:    	sar    rsi,1
  00693:    	sub    rsp,0x20
  00697:    	movq   QWORD PTR [rsp],xmm2
  0069c:    	movq   QWORD PTR [rsp+0x8],xmm3
  006a2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006a8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006ae: 4d 	movabs rax,0x564da0819c40
  006b8:    	call   rax
  006ba:    	movq   xmm2,QWORD PTR [rsp]
  006bf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006c5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006cb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006d1:    	add    rsp,0x20
  006d5: 4d 	movabs r13,0x564da0eaac40
  006df:    	test   rax,rax
  006e2:    	je     0xfffe4c7b
  006e8:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  006ec: 00 	movq   xmm5,QWORD PTR [rip+0x1a84]        # 0x2178
  006f4: 00 	movabs rax,0xff80000000000002
  006fe:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  00702:    	mov    rdi,QWORD PTR [r14-0x48]
  00706: 00 	test   rdi,0x7
  0070d:    	jne    0x31c9a
  00713:    	cmp    DWORD PTR [rdi+0x4],0x28
  00717:    	jne    0x31c9a
  0071d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe78dd],0x26        # 0xfffe8001
  00724:    	jne    0x31c9a
  0072a:    	mov    esi,DWORD PTR [rip+0x1a54]        # 0x2184
  00730:    	cmp    esi,0xffffffff
  00733:    	je     0x31ca9
  00739:    	cmp    WORD PTR [rdi+0x2],0x3
  0073e:    	jne    0x75b
  00744:    	cmp    esi,0x6
  00747:    	jge    0x75b
  0074d:    	mov    rax,QWORD PTR [r14-0x50]
  00751:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00756:    	jmp    0x7b4
  0075b:    	sub    rsp,0x20
  0075f:    	movq   QWORD PTR [rsp],xmm2
  00764:    	movq   QWORD PTR [rsp+0x8],xmm3
  0076a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00770:    	movq   QWORD PTR [rsp+0x18],xmm5
  00776:    	mov    rdx,QWORD PTR [r14-0x50]
  0077a: 4d 	movabs rax,0x564da0797ff0
  00784:    	call   rax
  00786:    	movq   xmm2,QWORD PTR [rsp]
  0078b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00791:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00797:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0079d:    	add    rsp,0x20
  007a1: 4d 	movabs r13,0x564da0eaac70
  007ab:    	test   rax,rax
  007ae:    	je     0xfffe4c7b
:00041 
:00043 br =>:00088
  007b4:    	jmp    0x32226
:00044 %3 = %2.call y()                     [Vec]
  007b9:    	mov    rdi,QWORD PTR [r14-0x40]
  007bd: 00 	test   rdi,0x7
  007c4:    	jne    0x31d41
  007ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  007ce:    	jne    0x31d41
  007d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7826],0x26        # 0xfffe8001
  007db:    	jne    0x31d41
  007e1:    	mov    esi,DWORD PTR [rip+0x19a5]        # 0x218c
  007e7:    	cmp    esi,0xffffffff
  007ea:    	je     0x31d50
  007f0:    	cmp    WORD PTR [rdi+0x2],0x3
  007f5:    	jne    0x80e
  007fb:    	cmp    esi,0x6
  007fe:    	jge    0x80e
  00804:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00809:    	jmp    0x850
  0080e:    	sub    rsp,0x20
  00812:    	movq   QWORD PTR [rsp],xmm2
  00817:    	movq   QWORD PTR [rsp+0x8],xmm3
  0081d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00823:    	movq   QWORD PTR [rsp+0x18],xmm5
  00829: 4d 	movabs rax,0x564da0797d70
  00833:    	call   rax
  00835:    	movq   xmm2,QWORD PTR [rsp]
  0083a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00840:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00846:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0084c:    	add    rsp,0x20
  00850:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  00854: 00 	movq   xmm5,QWORD PTR [rip+0x193c]        # 0x2198
  0085c: 99 	movabs rax,0xff1999999999999a
  00866:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0086a:    	mov    rdi,QWORD PTR [r14-0x48]
  0086e: 00 	test   rdi,0x1
  00875:    	jne    0x31daf
  0087b: 00 	test   rdi,0x2
  00882:    	je     0x8be
  00888:    	xorps  xmm6,xmm6
  0088b: 00 	movabs rax,0x8000000000000002
  00895:    	cmp    rdi,rax
  00898:    	je     0x8d0
  0089e:    	mov    rax,rdi
  008a1:    	sar    rax,0x3f
  008a5:    	add    rax,0x2
  008a9:    	and    rdi,0xfffffffffffffffc
  008ad:    	or     rdi,rax
  008b0:    	rol    rdi,0x3d
  008b4:    	movq   xmm6,rdi
  008b9:    	jmp    0x8d0
  008be:    	call   0xfffe4cd4
  008c3:    	test   rax,rax
  008c6:    	je     0x31daf
  008cc:    	movq   xmm6,xmm0
  008d0:    	ucomisd xmm6,xmm5
  008d4:    	jae    0x31eef
:00050 %3 = %2.call y()                     [<INVALID>]
  008da: 00 	cmp    DWORD PTR [rip+0x18bf],0x0        # 0x21a0
  008e1:    	jl     0x31dbe
  008e7:    	je     0x31dcd
  008ed: 01 	sub    DWORD PTR [rip+0x18ac],0x1        # 0x21a0
  008f4:    	xor    rdi,rdi
  008f7:    	jmp    0x31dbe
  008fc:    	sub    rsp,0x20
  00900:    	movq   QWORD PTR [rsp],xmm2
  00905:    	movq   QWORD PTR [rsp+0x8],xmm3
  0090b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00911:    	movq   QWORD PTR [rsp+0x18],xmm5
  00917:    	mov    rdi,QWORD PTR [r14-0x40]
  0091b: 4d 	movabs rax,0x564da0826bb0
  00925:    	call   rax
  00927:    	mov    r15d,eax
  0092a: 4d 	movabs r13,0x564da0eaad00
  00934:    	cmp    QWORD PTR [r13+0x8],0x0
  00939:    	je     0x31de8
  0093f:    	cmp    r15d,DWORD PTR [r13-0x8]
  00943:    	jne    0x31de8
  00949:    	mov    eax,DWORD PTR [rip+0xfffffffffffe76b2]        # 0xfffe8001
  0094f:    	cmp    DWORD PTR [r13-0x4],eax
  00953:    	jne    0x31de8
  00959: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00962:    	mov    rax,QWORD PTR [r14-0x40]
  00966:    	mov    QWORD PTR [rsp-0x40],rax
  0096b: 00 	mov    rdi,0x0
  00972: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0097b:    	mov    rax,QWORD PTR [r13+0x10]
  0097f:    	mov    QWORD PTR [rsp-0x30],rax
  00984:    	mov    rax,QWORD PTR [r13+0x8]
  00988:    	mov    r13,QWORD PTR [r13+0x18]
  0098c:    	mov    rsi,QWORD PTR [rbx]
  0098f:    	mov    QWORD PTR [rsp-0x18],rsi
  00994:    	lea    rsi,[rsp-0x18]
  00999:    	mov    QWORD PTR [rbx],rsi
  0099c:    	lea    r14,[rsp-0x10]
  009a1:    	mov    QWORD PTR [rsp-0x20],r14
  009a6:    	call   rax
  009a8:    	lea    r14,[rbp-0x8]
  009ac:    	mov    QWORD PTR [rbx],r14
  009af:    	mov    r14,QWORD PTR [rbp-0x10]
  009b3:    	movq   xmm2,QWORD PTR [rsp]
  009b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009be:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009c4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ca:    	add    rsp,0x20
  009ce:    	test   rax,rax
  009d1:    	je     0x31e32
  009d7:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  009db: 00 	movq   xmm5,QWORD PTR [rip+0x17c5]        # 0x21a8
  009e3: 99 	movabs rax,0xff1999999999999e
  009ed:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  009f1:    	mov    rdi,QWORD PTR [r14-0x48]
  009f5:    	mov    rsi,QWORD PTR [r14-0x50]
  009f9: 00 	test   rdi,0x1
  00a00:    	je     0x31e41
  00a06: 00 	test   rsi,0x1
  00a0d:    	je     0x31e41
  00a13:    	cmp    rdi,rsi
  00a16:    	jle    0x31f08
:00056 %3 = 1: i32
  00a1c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00a24:    	sub    rsp,0x20
  00a28:    	movq   QWORD PTR [rsp],xmm2
  00a2d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a33:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a39:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a3f:    	mov    rdi,rbx
  00a42:    	mov    rsi,r12
  00a45:    	mov    rdx,QWORD PTR [r14-0x38]
  00a49:    	mov    rcx,QWORD PTR [r14-0x48]
  00a4d: 4d 	movabs r8,0x564da0eaad68
  00a57: 4d 	movabs rax,0x564da0819b10
  00a61:    	call   rax
  00a63:    	movq   xmm2,QWORD PTR [rsp]
  00a68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a7a:    	add    rsp,0x20
  00a7e: 4d 	movabs r13,0x564da0eaad70
  00a88:    	test   rax,rax
  00a8b:    	je     0xfffe4c7b
  00a91:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  00a95: 00 	movq   xmm5,QWORD PTR [rip+0x171b]        # 0x21b8
  00a9d: 00 	movabs rax,0xff80000000000002
  00aa7:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00aab:    	sub    rsp,0x20
  00aaf:    	movq   QWORD PTR [rsp],xmm2
  00ab4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00aba:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac6:    	mov    rdi,QWORD PTR [r14-0x48]
  00aca: 4d 	movabs rax,0x564da0826bb0
  00ad4:    	call   rax
  00ad6:    	mov    r15d,eax
  00ad9: 4d 	movabs r13,0x564da0eaad90
  00ae3:    	cmp    QWORD PTR [r13+0x8],0x0
  00ae8:    	je     0x31e96
  00aee:    	cmp    r15d,DWORD PTR [r13-0x8]
  00af2:    	jne    0x31e96
  00af8:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7503]        # 0xfffe8001
  00afe:    	cmp    DWORD PTR [r13-0x4],eax
  00b02:    	jne    0x31e96
  00b08: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00b11:    	mov    rax,QWORD PTR [r14-0x48]
  00b15:    	mov    QWORD PTR [rsp-0x40],rax
  00b1a: 00 	mov    rdi,0x1
  00b21:    	mov    rax,QWORD PTR [r14-0x50]
  00b25:    	mov    QWORD PTR [rsp-0x48],rax
  00b2a: 00 	mov    QWORD PTR [rsp-0x38],0x0
  00b33:    	mov    rax,QWORD PTR [r13+0x10]
  00b37:    	mov    QWORD PTR [rsp-0x30],rax
  00b3c:    	mov    rax,QWORD PTR [r13+0x8]
  00b40:    	mov    r13,QWORD PTR [r13+0x18]
  00b44:    	mov    rsi,QWORD PTR [rbx]
  00b47:    	mov    QWORD PTR [rsp-0x18],rsi
  00b4c:    	lea    rsi,[rsp-0x18]
  00b51:    	mov    QWORD PTR [rbx],rsi
  00b54:    	lea    r14,[rsp-0x10]
  00b59:    	mov    QWORD PTR [rsp-0x20],r14
  00b5e:    	call   rax
  00b60:    	lea    r14,[rbp-0x8]
  00b64:    	mov    QWORD PTR [rbx],r14
  00b67:    	mov    r14,QWORD PTR [rbp-0x10]
  00b6b:    	movq   xmm2,QWORD PTR [rsp]
  00b70:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b76:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b7c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b82:    	add    rsp,0x20
  00b86:    	test   rax,rax
  00b89:    	je     0x31ee0
:00060 
:00062 br =>:00088
  00b8f:    	jmp    0x3223f
:00063 %3 = %2.call z()                     [Vec]
  00b94:    	mov    rdi,QWORD PTR [r14-0x40]
  00b98: 00 	test   rdi,0x7
  00b9f:    	jne    0x31f21
  00ba5:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ba9:    	jne    0x31f21
  00baf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe744b],0x26        # 0xfffe8001
  00bb6:    	jne    0x31f21
  00bbc:    	mov    esi,DWORD PTR [rip+0x1602]        # 0x21c4
  00bc2:    	cmp    esi,0xffffffff
  00bc5:    	je     0x31f30
  00bcb:    	cmp    WORD PTR [rdi+0x2],0x3
  00bd0:    	jne    0xbe9
  00bd6:    	cmp    esi,0x6
  00bd9:    	jge    0xbe9
  00bdf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00be4:    	jmp    0xc2b
  00be9:    	sub    rsp,0x20
  00bed:    	movq   QWORD PTR [rsp],xmm2
  00bf2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bf8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bfe:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c04: 4d 	movabs rax,0x564da0797d70
  00c0e:    	call   rax
  00c10:    	movq   xmm2,QWORD PTR [rsp]
  00c15:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c1b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c21:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c27:    	add    rsp,0x20
  00c2b:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00c2f: 00 	movq   xmm5,QWORD PTR [rip+0x1591]        # 0x21c8
  00c37: 99 	movabs rax,0xff1999999999999a
  00c41:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00c45:    	mov    rdi,QWORD PTR [r14-0x48]
  00c49: 00 	test   rdi,0x1
  00c50:    	jne    0x31f8f
  00c56: 00 	test   rdi,0x2
  00c5d:    	je     0xc99
  00c63:    	xorps  xmm6,xmm6
  00c66: 00 	movabs rax,0x8000000000000002
  00c70:    	cmp    rdi,rax
  00c73:    	je     0xcab
  00c79:    	mov    rax,rdi
  00c7c:    	sar    rax,0x3f
  00c80:    	add    rax,0x2
  00c84:    	and    rdi,0xfffffffffffffffc
  00c88:    	or     rdi,rax
  00c8b:    	rol    rdi,0x3d
  00c8f:    	movq   xmm6,rdi
  00c94:    	jmp    0xcab
  00c99:    	call   0xfffe4cd4
  00c9e:    	test   rax,rax
  00ca1:    	je     0x31f8f
  00ca7:    	movq   xmm6,xmm0
  00cab:    	ucomisd xmm6,xmm5
  00caf:    	jae    0x3209f
:00069 %3 = %2.call z()                     [Vec]
  00cb5:    	mov    rdi,QWORD PTR [r14-0x40]
  00cb9: 00 	test   rdi,0x7
  00cc0:    	jne    0x31f9e
  00cc6:    	cmp    DWORD PTR [rdi+0x4],0x28
  00cca:    	jne    0x31f9e
  00cd0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe732a],0x26        # 0xfffe8001
  00cd7:    	jne    0x31f9e
  00cdd:    	mov    esi,DWORD PTR [rip+0x14f1]        # 0x21d4
  00ce3:    	cmp    esi,0xffffffff
  00ce6:    	je     0x31fad
  00cec:    	cmp    WORD PTR [rdi+0x2],0x3
  00cf1:    	jne    0xd0a
  00cf7:    	cmp    esi,0x6
  00cfa:    	jge    0xd0a
  00d00:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d05:    	jmp    0xd4c
  00d0a:    	sub    rsp,0x20
  00d0e:    	movq   QWORD PTR [rsp],xmm2
  00d13:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d19:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d25: 4d 	movabs rax,0x564da0797d70
  00d2f:    	call   rax
  00d31:    	movq   xmm2,QWORD PTR [rsp]
  00d36:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d42:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d48:    	add    rsp,0x20
  00d4c:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00d50: 00 	movq   xmm5,QWORD PTR [rip+0x1480]        # 0x21d8
  00d58: 99 	movabs rax,0xff1999999999999e
  00d62:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00d66:    	mov    rdi,QWORD PTR [r14-0x48]
  00d6a: 00 	test   rdi,0x1
  00d71:    	jne    0x3200c
  00d77: 00 	test   rdi,0x2
  00d7e:    	je     0xdba
  00d84:    	xorps  xmm6,xmm6
  00d87: 00 	movabs rax,0x8000000000000002
  00d91:    	cmp    rdi,rax
  00d94:    	je     0xdcc
  00d9a:    	mov    rax,rdi
  00d9d:    	sar    rax,0x3f
  00da1:    	add    rax,0x2
  00da5:    	and    rdi,0xfffffffffffffffc
  00da9:    	or     rdi,rax
  00dac:    	rol    rdi,0x3d
  00db0:    	movq   xmm6,rdi
  00db5:    	jmp    0xdcc
  00dba:    	call   0xfffe4cd4
  00dbf:    	test   rax,rax
  00dc2:    	je     0x3200c
  00dc8:    	movq   xmm6,xmm0
  00dcc:    	ucomisd xmm6,xmm5
  00dd0:    	jbe    0x320b8
:00075 %3 = 1: i32
  00dd6: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00dde:    	mov    rdi,QWORD PTR [r14-0x38]
  00de2:    	mov    rsi,QWORD PTR [r14-0x48]
  00de6: 00 	test   rdi,0x7
  00ded:    	jne    0x3201b
  00df3:    	cmp    DWORD PTR [rdi+0x4],0xb
  00df7:    	jne    0x3201b
  00dfd: 00 	test   rsi,0x1
  00e04:    	je     0x3201b
  00e0a:    	sar    rsi,1
  00e0d:    	sub    rsp,0x20
  00e11:    	movq   QWORD PTR [rsp],xmm2
  00e16:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e22:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e28: 4d 	movabs rax,0x564da0819c40
  00e32:    	call   rax
  00e34:    	movq   xmm2,QWORD PTR [rsp]
  00e39:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e3f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e45:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e4b:    	add    rsp,0x20
  00e4f: 4d 	movabs r13,0x564da0eaaea0
  00e59:    	test   rax,rax
  00e5c:    	je     0xfffe4c7b
  00e62:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00e66: 00 	movq   xmm5,QWORD PTR [rip+0x137a]        # 0x21e8
  00e6e: 00 	movabs rax,0xff80000000000002
  00e78:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00e7c:    	mov    rdi,QWORD PTR [r14-0x48]
  00e80: 00 	test   rdi,0x7
  00e87:    	jne    0x3202a
  00e8d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e91:    	jne    0x3202a
  00e97: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7163],0x26        # 0xfffe8001
  00e9e:    	jne    0x3202a
  00ea4:    	mov    esi,DWORD PTR [rip+0x134a]        # 0x21f4
  00eaa:    	cmp    esi,0xffffffff
  00ead:    	je     0x32039
  00eb3:    	cmp    WORD PTR [rdi+0x2],0x3
  00eb8:    	jne    0xed5
  00ebe:    	cmp    esi,0x6
  00ec1:    	jge    0xed5
  00ec7:    	mov    rax,QWORD PTR [r14-0x50]
  00ecb:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00ed0:    	jmp    0xf2e
  00ed5:    	sub    rsp,0x20
  00ed9:    	movq   QWORD PTR [rsp],xmm2
  00ede:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ee4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00eea:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ef0:    	mov    rdx,QWORD PTR [r14-0x50]
  00ef4: 4d 	movabs rax,0x564da0797ff0
  00efe:    	call   rax
  00f00:    	movq   xmm2,QWORD PTR [rsp]
  00f05:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f0b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f11:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f17:    	add    rsp,0x20
  00f1b: 4d 	movabs r13,0x564da0eaaed0
  00f25:    	test   rax,rax
  00f28:    	je     0xfffe4c7b
:00079 
:00081 br =>:00088
  00f2e:    	jmp    0x32258
:00082 %3 = 1: i32
  00f33: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00f3b:    	sub    rsp,0x20
  00f3f:    	movq   QWORD PTR [rsp],xmm2
  00f44:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f4a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f50:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f56:    	mov    rdi,rbx
  00f59:    	mov    rsi,r12
  00f5c:    	mov    rdx,QWORD PTR [r14-0x38]
  00f60:    	mov    rcx,QWORD PTR [r14-0x48]
  00f64: 4d 	movabs r8,0x564da0eaaf08
  00f6e: 4d 	movabs rax,0x564da0819b10
  00f78:    	call   rax
  00f7a:    	movq   xmm2,QWORD PTR [rsp]
  00f7f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f85:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f8b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f91:    	add    rsp,0x20
  00f95: 4d 	movabs r13,0x564da0eaaf10
  00f9f:    	test   rax,rax
  00fa2:    	je     0xfffe4c7b
  00fa8:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00fac: 00 	movq   xmm5,QWORD PTR [rip+0x1244]        # 0x21f8
  00fb4: 00 	movabs rax,0xff80000000000002
  00fbe:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00fc2: 00 	cmp    DWORD PTR [rip+0x1237],0x0        # 0x2200
  00fc9:    	jl     0x320d1
  00fcf:    	je     0x320e0
  00fd5: 01 	sub    DWORD PTR [rip+0x1224],0x1        # 0x2200
  00fdc:    	xor    rdi,rdi
  00fdf:    	jmp    0x320d1
  00fe4:    	sub    rsp,0x20
  00fe8:    	movq   QWORD PTR [rsp],xmm2
  00fed:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ff9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fff:    	mov    rdi,QWORD PTR [r14-0x48]
  01003: 4d 	movabs rax,0x564da0826bb0
  0100d:    	call   rax
  0100f:    	mov    r15d,eax
  01012: 4d 	movabs r13,0x564da0eaaf30
  0101c:    	cmp    QWORD PTR [r13+0x8],0x0
  01021:    	je     0x320fb
  01027:    	cmp    r15d,DWORD PTR [r13-0x8]
  0102b:    	jne    0x320fb
  01031:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6fca]        # 0xfffe8001
  01037:    	cmp    DWORD PTR [r13-0x4],eax
  0103b:    	jne    0x320fb
  01041: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0104a:    	mov    rax,QWORD PTR [r14-0x48]
  0104e:    	mov    QWORD PTR [rsp-0x40],rax
  01053: 00 	mov    rdi,0x1
  0105a:    	mov    rax,QWORD PTR [r14-0x50]
  0105e:    	mov    QWORD PTR [rsp-0x48],rax
  01063: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0106c:    	mov    rax,QWORD PTR [r13+0x10]
  01070:    	mov    QWORD PTR [rsp-0x30],rax
  01075:    	mov    rax,QWORD PTR [r13+0x8]
  01079:    	mov    r13,QWORD PTR [r13+0x18]
  0107d:    	mov    rsi,QWORD PTR [rbx]
  01080:    	mov    QWORD PTR [rsp-0x18],rsi
  01085:    	lea    rsi,[rsp-0x18]
  0108a:    	mov    QWORD PTR [rbx],rsi
  0108d:    	lea    r14,[rsp-0x10]
  01092:    	mov    QWORD PTR [rsp-0x20],r14
  01097:    	call   rax
  01099:    	lea    r14,[rbp-0x8]
  0109d:    	mov    QWORD PTR [rbx],r14
  010a0:    	mov    r14,QWORD PTR [rbp-0x10]
  010a4:    	movq   xmm2,QWORD PTR [rsp]
  010a9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010af:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010b5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010bb:    	add    rsp,0x20
  010bf:    	test   rax,rax
  010c2:    	je     0x32145
:00086 
:00088 %3 = 0: i32
  010c8: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  010d0: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  010d8:    	mov    rdi,QWORD PTR [r14-0x38]
  010dc:    	mov    rsi,QWORD PTR [r14-0x58]
  010e0: 00 	test   rdi,0x7
  010e7:    	jne    0x32154
  010ed:    	cmp    DWORD PTR [rdi+0x4],0xb
  010f1:    	jne    0x32154
  010f7: 00 	test   rsi,0x1
  010fe:    	je     0x32154
  01104:    	sar    rsi,1
  01107:    	sub    rsp,0x20
  0110b:    	movq   QWORD PTR [rsp],xmm2
  01110:    	movq   QWORD PTR [rsp+0x8],xmm3
  01116:    	movq   QWORD PTR [rsp+0x10],xmm4
  0111c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01122: 4d 	movabs rax,0x564da0819c40
  0112c:    	call   rax
  0112e:    	movq   xmm2,QWORD PTR [rsp]
  01133:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01139:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0113f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01145:    	add    rsp,0x20
  01149: 4d 	movabs r13,0x564da0eaaf80
  01153:    	test   rax,rax
  01156:    	je     0xfffe4c7b
  0115c:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01160: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01168:    	mov    rdi,QWORD PTR [r14-0x38]
  0116c:    	mov    rsi,QWORD PTR [r14-0x60]
  01170: 00 	test   rdi,0x7
  01177:    	jne    0x32163
  0117d:    	cmp    DWORD PTR [rdi+0x4],0xb
  01181:    	jne    0x32163
  01187: 00 	test   rsi,0x1
  0118e:    	je     0x32163
  01194:    	sar    rsi,1
  01197:    	sub    rsp,0x20
  0119b:    	movq   QWORD PTR [rsp],xmm3
  011a0:    	movq   QWORD PTR [rsp+0x8],xmm4
  011a6:    	movq   QWORD PTR [rsp+0x10],xmm5
  011ac: 4d 	movabs rax,0x564da0819c40
  011b6:    	call   rax
  011b8:    	movq   xmm3,QWORD PTR [rsp]
  011bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011c9:    	add    rsp,0x20
  011cd: 4d 	movabs r13,0x564da0eaafa0
  011d7:    	test   rax,rax
  011da:    	je     0xfffe4c7b
  011e0:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  011e4:    	mov    rdi,QWORD PTR [r14-0x58]
  011e8: 00 	test   rdi,0x7
  011ef:    	jne    0x32172
  011f5:    	cmp    DWORD PTR [rdi+0x4],0x28
  011f9:    	jne    0x32172
  011ff: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6dfb],0x26        # 0xfffe8001
  01206:    	jne    0x32172
  0120c:    	sub    rsp,0x10
  01210:    	movq   QWORD PTR [rsp],xmm3
  01215:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121b: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01224:    	mov    rax,QWORD PTR [r14-0x58]
  01228:    	mov    QWORD PTR [rsp-0x40],rax
  0122d: 00 	mov    rdi,0x1
  01234:    	mov    rax,QWORD PTR [r14-0x60]
  01238:    	mov    QWORD PTR [rsp-0x48],rax
  0123d: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01246: 09 	movabs rax,0x900000041
  01250:    	mov    QWORD PTR [rsp-0x30],rax
  01255: 4d 	movabs r13,0x564da0e89170
  0125f:    	mov    rsi,QWORD PTR [rbx]
  01262:    	mov    QWORD PTR [rsp-0x18],rsi
  01267:    	lea    rsi,[rsp-0x18]
  0126c:    	mov    QWORD PTR [rbx],rsi
  0126f:    	lea    r14,[rsp-0x10]
  01274:    	mov    QWORD PTR [rsp-0x20],r14
  01279:    	call   0xffff1bff
  0127e:    	lea    r14,[rbp-0x8]
  01282:    	mov    QWORD PTR [rbx],r14
  01285:    	mov    r14,QWORD PTR [rbp-0x10]
  01289:    	movq   xmm3,QWORD PTR [rsp]
  0128e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01294:    	add    rsp,0x10
  01298: 4d 	movabs r13,0x564da0eaafc0
  012a2:    	test   rax,rax
  012a5:    	je     0xfffe4c7b
  012ab:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  012af:    	mov    rdi,QWORD PTR [r14-0x38]
  012b3:    	mov    rsi,QWORD PTR [r14-0x48]
  012b7: 00 	test   rdi,0x7
  012be:    	jne    0x32181
  012c4:    	cmp    DWORD PTR [rdi+0x4],0xb
  012c8:    	jne    0x32181
  012ce: 00 	test   rsi,0x1
  012d5:    	je     0x32181
  012db:    	sar    rsi,1
  012de:    	sub    rsp,0x10
  012e2:    	movq   QWORD PTR [rsp],xmm3
  012e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ed:    	mov    rdx,r12
  012f0:    	mov    rcx,QWORD PTR [r14-0x50]
  012f4: 4d 	movabs rax,0x564da0819dd0
  012fe:    	call   rax
  01300:    	movq   xmm3,QWORD PTR [rsp]
  01305:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0130b:    	add    rsp,0x10
  0130f: 4d 	movabs r13,0x564da0eaafe0
  01319:    	test   rax,rax
  0131c:    	je     0xfffe4c7b
:00097 %3 = 0: i32
  01322: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  0132a: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01332:    	mov    rdi,QWORD PTR [r14-0x38]
  01336:    	mov    rsi,QWORD PTR [r14-0x58]
  0133a: 00 	test   rdi,0x7
  01341:    	jne    0x32190
  01347:    	cmp    DWORD PTR [rdi+0x4],0xb
  0134b:    	jne    0x32190
  01351: 00 	test   rsi,0x1
  01358:    	je     0x32190
  0135e:    	sar    rsi,1
  01361:    	sub    rsp,0x10
  01365:    	movq   QWORD PTR [rsp],xmm3
  0136a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01370: 4d 	movabs rax,0x564da0819c40
  0137a:    	call   rax
  0137c:    	movq   xmm3,QWORD PTR [rsp]
  01381:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01387:    	add    rsp,0x10
  0138b: 4d 	movabs r13,0x564da0eab010
  01395:    	test   rax,rax
  01398:    	je     0xfffe4c7b
  0139e:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  013a2:    	mov    rdi,QWORD PTR [r14-0x58]
  013a6: 00 	test   rdi,0x7
  013ad:    	jne    0x3219f
  013b3:    	cmp    DWORD PTR [rdi+0x4],0x28
  013b7:    	jne    0x3219f
  013bd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6c3d],0x26        # 0xfffe8001
  013c4:    	jne    0x3219f
  013ca:    	sub    rsp,0x10
  013ce:    	movq   QWORD PTR [rsp],xmm3
  013d3:    	movq   QWORD PTR [rsp+0x8],xmm4
  013d9: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013e2:    	mov    rax,QWORD PTR [r14-0x58]
  013e6:    	mov    QWORD PTR [rsp-0x40],rax
  013eb: 00 	mov    rdi,0x0
  013f2: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013fb: 07 	movabs rax,0x1000700000044
  01405:    	mov    QWORD PTR [rsp-0x30],rax
  0140a: 4d 	movabs r13,0x564da0e6bec0
  01414:    	mov    rsi,QWORD PTR [rbx]
  01417:    	mov    QWORD PTR [rsp-0x18],rsi
  0141c:    	lea    rsi,[rsp-0x18]
  01421:    	mov    QWORD PTR [rbx],rsi
  01424:    	lea    r14,[rsp-0x10]
  01429:    	mov    QWORD PTR [rsp-0x20],r14
  0142e:    	call   0xfffe88b4
  01433:    	lea    r14,[rbp-0x8]
  01437:    	mov    QWORD PTR [rbx],r14
  0143a:    	mov    r14,QWORD PTR [rbp-0x10]
  0143e:    	movq   xmm3,QWORD PTR [rsp]
  01443:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01449:    	add    rsp,0x10
  0144d: 4d 	movabs r13,0x564da0eab030
  01457:    	test   rax,rax
  0145a:    	je     0xfffe4c7b
  01460:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01464:    	mov    rdi,QWORD PTR [r14-0x38]
  01468:    	mov    rsi,QWORD PTR [r14-0x48]
  0146c: 00 	test   rdi,0x7
  01473:    	jne    0x321ae
  01479:    	cmp    DWORD PTR [rdi+0x4],0xb
  0147d:    	jne    0x321ae
  01483: 00 	test   rsi,0x1
  0148a:    	je     0x321ae
  01490:    	sar    rsi,1
  01493:    	sub    rsp,0x10
  01497:    	movq   QWORD PTR [rsp],xmm3
  0149c:    	movq   QWORD PTR [rsp+0x8],xmm4
  014a2:    	mov    rdx,r12
  014a5:    	mov    rcx,QWORD PTR [r14-0x50]
  014a9: 4d 	movabs rax,0x564da0819dd0
  014b3:    	call   rax
  014b5:    	movq   xmm3,QWORD PTR [rsp]
  014ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014c0:    	add    rsp,0x10
  014c4: 4d 	movabs r13,0x564da0eab050
  014ce:    	test   rax,rax
  014d1:    	je     0xfffe4c7b
:00104 %3 = 1: i32
  014d7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  014df: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  014e7:    	mov    rdi,QWORD PTR [r14-0x38]
  014eb:    	mov    rsi,QWORD PTR [r14-0x58]
  014ef: 00 	test   rdi,0x7
  014f6:    	jne    0x321bd
  014fc:    	cmp    DWORD PTR [rdi+0x4],0xb
  01500:    	jne    0x321bd
  01506: 00 	test   rsi,0x1
  0150d:    	je     0x321bd
  01513:    	sar    rsi,1
  01516:    	sub    rsp,0x10
  0151a:    	movq   QWORD PTR [rsp],xmm3
  0151f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01525: 4d 	movabs rax,0x564da0819c40
  0152f:    	call   rax
  01531:    	movq   xmm3,QWORD PTR [rsp]
  01536:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0153c:    	add    rsp,0x10
  01540: 4d 	movabs r13,0x564da0eab080
  0154a:    	test   rax,rax
  0154d:    	je     0xfffe4c7b
  01553:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01557: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  0155f:    	mov    rdi,QWORD PTR [r14-0x38]
  01563:    	mov    rsi,QWORD PTR [r14-0x60]
  01567: 00 	test   rdi,0x7
  0156e:    	jne    0x321cc
  01574:    	cmp    DWORD PTR [rdi+0x4],0xb
  01578:    	jne    0x321cc
  0157e: 00 	test   rsi,0x1
  01585:    	je     0x321cc
  0158b:    	sar    rsi,1
  0158e:    	sub    rsp,0x10
  01592:    	movq   QWORD PTR [rsp],xmm3
  01597:    	movq   QWORD PTR [rsp+0x8],xmm4
  0159d: 4d 	movabs rax,0x564da0819c40
  015a7:    	call   rax
  015a9:    	movq   xmm3,QWORD PTR [rsp]
  015ae:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b4:    	add    rsp,0x10
  015b8: 4d 	movabs r13,0x564da0eab0a0
  015c2:    	test   rax,rax
  015c5:    	je     0xfffe4c7b
  015cb:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  015cf:    	mov    rdi,QWORD PTR [r14-0x58]
  015d3: 00 	test   rdi,0x7
  015da:    	jne    0x321db
  015e0:    	cmp    DWORD PTR [rdi+0x4],0x28
  015e4:    	jne    0x321db
  015ea: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6a10],0x26        # 0xfffe8001
  015f1:    	jne    0x321db
  015f7:    	sub    rsp,0x10
  015fb:    	movq   QWORD PTR [rsp],xmm3
  01600:    	movq   QWORD PTR [rsp+0x8],xmm4
  01606: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0160f:    	mov    rax,QWORD PTR [r14-0x58]
  01613:    	mov    QWORD PTR [rsp-0x40],rax
  01618: 00 	mov    rdi,0x1
  0161f:    	mov    rax,QWORD PTR [r14-0x60]
  01623:    	mov    QWORD PTR [rsp-0x48],rax
  01628: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01631: 09 	movabs rax,0x900000041
  0163b:    	mov    QWORD PTR [rsp-0x30],rax
  01640: 4d 	movabs r13,0x564da0e89170
  0164a:    	mov    rsi,QWORD PTR [rbx]
  0164d:    	mov    QWORD PTR [rsp-0x18],rsi
  01652:    	lea    rsi,[rsp-0x18]
  01657:    	mov    QWORD PTR [rbx],rsi
  0165a:    	lea    r14,[rsp-0x10]
  0165f:    	mov    QWORD PTR [rsp-0x20],r14
  01664:    	call   0xffff1bff
  01669:    	lea    r14,[rbp-0x8]
  0166d:    	mov    QWORD PTR [rbx],r14
  01670:    	mov    r14,QWORD PTR [rbp-0x10]
  01674:    	movq   xmm3,QWORD PTR [rsp]
  01679:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0167f:    	add    rsp,0x10
  01683: 4d 	movabs r13,0x564da0eab0c0
  0168d:    	test   rax,rax
  01690:    	je     0xfffe4c7b
  01696:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  0169a:    	mov    rdi,QWORD PTR [r14-0x38]
  0169e:    	mov    rsi,QWORD PTR [r14-0x48]
  016a2: 00 	test   rdi,0x7
  016a9:    	jne    0x321ea
  016af:    	cmp    DWORD PTR [rdi+0x4],0xb
  016b3:    	jne    0x321ea
  016b9: 00 	test   rsi,0x1
  016c0:    	je     0x321ea
  016c6:    	sar    rsi,1
  016c9:    	sub    rsp,0x10
  016cd:    	movq   QWORD PTR [rsp],xmm3
  016d2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016d8:    	mov    rdx,r12
  016db:    	mov    rcx,QWORD PTR [r14-0x50]
  016df: 4d 	movabs rax,0x564da0819dd0
  016e9:    	call   rax
  016eb:    	movq   xmm3,QWORD PTR [rsp]
  016f0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016f6:    	add    rsp,0x10
  016fa: 4d 	movabs r13,0x564da0eab0e0
  01704:    	test   rax,rax
  01707:    	je     0xfffe4c7b
:00113 %3 = 1: i32
  0170d: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01715: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  0171d:    	mov    rdi,QWORD PTR [r14-0x38]
  01721:    	mov    rsi,QWORD PTR [r14-0x58]
  01725: 00 	test   rdi,0x7
  0172c:    	jne    0x321f9
  01732:    	cmp    DWORD PTR [rdi+0x4],0xb
  01736:    	jne    0x321f9
  0173c: 00 	test   rsi,0x1
  01743:    	je     0x321f9
  01749:    	sar    rsi,1
  0174c:    	sub    rsp,0x10
  01750:    	movq   QWORD PTR [rsp],xmm3
  01755:    	movq   QWORD PTR [rsp+0x8],xmm4
  0175b: 4d 	movabs rax,0x564da0819c40
  01765:    	call   rax
  01767:    	movq   xmm3,QWORD PTR [rsp]
  0176c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01772:    	add    rsp,0x10
  01776: 4d 	movabs r13,0x564da0eab110
  01780:    	test   rax,rax
  01783:    	je     0xfffe4c7b
  01789:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  0178d:    	mov    rdi,QWORD PTR [r14-0x58]
  01791: 00 	test   rdi,0x7
  01798:    	jne    0x32208
  0179e:    	cmp    DWORD PTR [rdi+0x4],0x28
  017a2:    	jne    0x32208
  017a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6852],0x26        # 0xfffe8001
  017af:    	jne    0x32208
  017b5:    	sub    rsp,0x10
  017b9:    	movq   QWORD PTR [rsp],xmm3
  017be:    	movq   QWORD PTR [rsp+0x8],xmm4
  017c4: 00 	mov    QWORD PTR [rsp-0x28],0x0
  017cd:    	mov    rax,QWORD PTR [r14-0x58]
  017d1:    	mov    QWORD PTR [rsp-0x40],rax
  017d6: 00 	mov    rdi,0x0
  017dd: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017e6: 07 	movabs rax,0x1000700000044
  017f0:    	mov    QWORD PTR [rsp-0x30],rax
  017f5: 4d 	movabs r13,0x564da0e6bec0
  017ff:    	mov    rsi,QWORD PTR [rbx]
  01802:    	mov    QWORD PTR [rsp-0x18],rsi
  01807:    	lea    rsi,[rsp-0x18]
  0180c:    	mov    QWORD PTR [rbx],rsi
  0180f:    	lea    r14,[rsp-0x10]
  01814:    	mov    QWORD PTR [rsp-0x20],r14
  01819:    	call   0xfffe88b4
  0181e:    	lea    r14,[rbp-0x8]
  01822:    	mov    QWORD PTR [rbx],r14
  01825:    	mov    r14,QWORD PTR [rbp-0x10]
  01829:    	movq   xmm3,QWORD PTR [rsp]
  0182e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01834:    	add    rsp,0x10
  01838: 4d 	movabs r13,0x564da0eab130
  01842:    	test   rax,rax
  01845:    	je     0xfffe4c7b
  0184b:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  0184f:    	mov    rdi,QWORD PTR [r14-0x38]
  01853:    	mov    rsi,QWORD PTR [r14-0x48]
  01857: 00 	test   rdi,0x7
  0185e:    	jne    0x32217
  01864:    	cmp    DWORD PTR [rdi+0x4],0xb
  01868:    	jne    0x32217
  0186e: 00 	test   rsi,0x1
  01875:    	je     0x32217
  0187b:    	sar    rsi,1
  0187e:    	sub    rsp,0x10
  01882:    	movq   QWORD PTR [rsp],xmm3
  01887:    	movq   QWORD PTR [rsp+0x8],xmm4
  0188d:    	mov    rdx,r12
  01890:    	mov    rcx,QWORD PTR [r14-0x50]
  01894: 4d 	movabs rax,0x564da0819dd0
  0189e:    	call   rax
  018a0:    	movq   xmm3,QWORD PTR [rsp]
  018a5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018ab:    	add    rsp,0x10
  018af: 4d 	movabs r13,0x564da0eab150
  018b9:    	test   rax,rax
  018bc:    	je     0xfffe4c7b
:00120 %3 = %4
  018c2:    	mov    rax,QWORD PTR [r14-0x50]
  018c6:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  018ca:    	mov    rax,QWORD PTR [r14-0x48]
  018ce:    	leave  
  018cf:    	ret    
:00088 %3 = 0: i32
  018d0: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  018d8: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  018e0:    	mov    rdi,QWORD PTR [r14-0x38]
  018e4:    	mov    rsi,QWORD PTR [r14-0x58]
  018e8: 00 	test   rdi,0x7
  018ef:    	jne    0x32271
  018f5:    	cmp    DWORD PTR [rdi+0x4],0xb
  018f9:    	jne    0x32271
  018ff: 00 	test   rsi,0x1
  01906:    	je     0x32271
  0190c:    	sar    rsi,1
  0190f:    	sub    rsp,0x20
  01913:    	movq   QWORD PTR [rsp],xmm2
  01918:    	movq   QWORD PTR [rsp+0x8],xmm3
  0191e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01924:    	movq   QWORD PTR [rsp+0x18],xmm5
  0192a: 4d 	movabs rax,0x564da0819c40
  01934:    	call   rax
  01936:    	movq   xmm2,QWORD PTR [rsp]
  0193b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01941:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01947:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0194d:    	add    rsp,0x20
  01951: 4d 	movabs r13,0x564da0eaaf80
  0195b:    	test   rax,rax
  0195e:    	je     0xfffe4c7b
  01964:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01968: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01970:    	mov    rdi,QWORD PTR [r14-0x38]
  01974:    	mov    rsi,QWORD PTR [r14-0x60]
  01978: 00 	test   rdi,0x7
  0197f:    	jne    0x32280
  01985:    	cmp    DWORD PTR [rdi+0x4],0xb
  01989:    	jne    0x32280
  0198f: 00 	test   rsi,0x1
  01996:    	je     0x32280
  0199c:    	sar    rsi,1
  0199f:    	sub    rsp,0x20
  019a3:    	movq   QWORD PTR [rsp],xmm3
  019a8:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ae:    	movq   QWORD PTR [rsp+0x10],xmm5
  019b4: 4d 	movabs rax,0x564da0819c40
  019be:    	call   rax
  019c0:    	movq   xmm3,QWORD PTR [rsp]
  019c5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019cb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  019d1:    	add    rsp,0x20
  019d5: 4d 	movabs r13,0x564da0eaafa0
  019df:    	test   rax,rax
  019e2:    	je     0xfffe4c7b
  019e8:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  019ec:    	mov    rdi,QWORD PTR [r14-0x58]
  019f0: 00 	test   rdi,0x7
  019f7:    	jne    0x3228f
  019fd:    	cmp    DWORD PTR [rdi+0x4],0x28
  01a01:    	jne    0x3228f
  01a07: 26 	cmp    DWORD PTR [rip+0xfffffffffffe65f3],0x26        # 0xfffe8001
  01a0e:    	jne    0x3228f
  01a14:    	sub    rsp,0x10
  01a18:    	movq   QWORD PTR [rsp],xmm3
  01a1d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a23: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01a2c:    	mov    rax,QWORD PTR [r14-0x58]
  01a30:    	mov    QWORD PTR [rsp-0x40],rax
  01a35: 00 	mov    rdi,0x1
  01a3c:    	mov    rax,QWORD PTR [r14-0x60]
  01a40:    	mov    QWORD PTR [rsp-0x48],rax
  01a45: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a4e: 09 	movabs rax,0x900000041
  01a58:    	mov    QWORD PTR [rsp-0x30],rax
  01a5d: 4d 	movabs r13,0x564da0e89170
  01a67:    	mov    rsi,QWORD PTR [rbx]
  01a6a:    	mov    QWORD PTR [rsp-0x18],rsi
  01a6f:    	lea    rsi,[rsp-0x18]
  01a74:    	mov    QWORD PTR [rbx],rsi
  01a77:    	lea    r14,[rsp-0x10]
  01a7c:    	mov    QWORD PTR [rsp-0x20],r14
  01a81:    	call   0xffff1bff
  01a86:    	lea    r14,[rbp-0x8]
  01a8a:    	mov    QWORD PTR [rbx],r14
  01a8d:    	mov    r14,QWORD PTR [rbp-0x10]
  01a91:    	movq   xmm3,QWORD PTR [rsp]
  01a96:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a9c:    	add    rsp,0x10
  01aa0: 4d 	movabs r13,0x564da0eaafc0
  01aaa:    	test   rax,rax
  01aad:    	je     0xfffe4c7b
  01ab3:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01ab7:    	mov    rdi,QWORD PTR [r14-0x38]
  01abb:    	mov    rsi,QWORD PTR [r14-0x48]
  01abf: 00 	test   rdi,0x7
  01ac6:    	jne    0x3229e
  01acc:    	cmp    DWORD PTR [rdi+0x4],0xb
  01ad0:    	jne    0x3229e
  01ad6: 00 	test   rsi,0x1
  01add:    	je     0x3229e
  01ae3:    	sar    rsi,1
  01ae6:    	sub    rsp,0x10
  01aea:    	movq   QWORD PTR [rsp],xmm3
  01aef:    	movq   QWORD PTR [rsp+0x8],xmm4
  01af5:    	mov    rdx,r12
  01af8:    	mov    rcx,QWORD PTR [r14-0x50]
  01afc: 4d 	movabs rax,0x564da0819dd0
  01b06:    	call   rax
  01b08:    	movq   xmm3,QWORD PTR [rsp]
  01b0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b13:    	add    rsp,0x10
  01b17: 4d 	movabs r13,0x564da0eaafe0
  01b21:    	test   rax,rax
  01b24:    	je     0xfffe4c7b
:00097 %3 = 0: i32
  01b2a: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  01b32: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01b3a:    	mov    rdi,QWORD PTR [r14-0x38]
  01b3e:    	mov    rsi,QWORD PTR [r14-0x58]
  01b42: 00 	test   rdi,0x7
  01b49:    	jne    0x322ad
  01b4f:    	cmp    DWORD PTR [rdi+0x4],0xb
  01b53:    	jne    0x322ad
  01b59: 00 	test   rsi,0x1
  01b60:    	je     0x322ad
  01b66:    	sar    rsi,1
  01b69:    	sub    rsp,0x10
  01b6d:    	movq   QWORD PTR [rsp],xmm3
  01b72:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b78: 4d 	movabs rax,0x564da0819c40
  01b82:    	call   rax
  01b84:    	movq   xmm3,QWORD PTR [rsp]
  01b89:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b8f:    	add    rsp,0x10
  01b93: 4d 	movabs r13,0x564da0eab010
  01b9d:    	test   rax,rax
  01ba0:    	je     0xfffe4c7b
  01ba6:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01baa:    	mov    rdi,QWORD PTR [r14-0x58]
  01bae: 00 	test   rdi,0x7
  01bb5:    	jne    0x322bc
  01bbb:    	cmp    DWORD PTR [rdi+0x4],0x28
  01bbf:    	jne    0x322bc
  01bc5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6435],0x26        # 0xfffe8001
  01bcc:    	jne    0x322bc
  01bd2:    	sub    rsp,0x10
  01bd6:    	movq   QWORD PTR [rsp],xmm3
  01bdb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01be1: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01bea:    	mov    rax,QWORD PTR [r14-0x58]
  01bee:    	mov    QWORD PTR [rsp-0x40],rax
  01bf3: 00 	mov    rdi,0x0
  01bfa: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01c03: 07 	movabs rax,0x1000700000044
  01c0d:    	mov    QWORD PTR [rsp-0x30],rax
  01c12: 4d 	movabs r13,0x564da0e6bec0
  01c1c:    	mov    rsi,QWORD PTR [rbx]
  01c1f:    	mov    QWORD PTR [rsp-0x18],rsi
  01c24:    	lea    rsi,[rsp-0x18]
  01c29:    	mov    QWORD PTR [rbx],rsi
  01c2c:    	lea    r14,[rsp-0x10]
  01c31:    	mov    QWORD PTR [rsp-0x20],r14
  01c36:    	call   0xfffe88b4
  01c3b:    	lea    r14,[rbp-0x8]
  01c3f:    	mov    QWORD PTR [rbx],r14
  01c42:    	mov    r14,QWORD PTR [rbp-0x10]
  01c46:    	movq   xmm3,QWORD PTR [rsp]
  01c4b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c51:    	add    rsp,0x10
  01c55: 4d 	movabs r13,0x564da0eab030
  01c5f:    	test   rax,rax
  01c62:    	je     0xfffe4c7b
  01c68:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01c6c:    	mov    rdi,QWORD PTR [r14-0x38]
  01c70:    	mov    rsi,QWORD PTR [r14-0x48]
  01c74: 00 	test   rdi,0x7
  01c7b:    	jne    0x322cb
  01c81:    	cmp    DWORD PTR [rdi+0x4],0xb
  01c85:    	jne    0x322cb
  01c8b: 00 	test   rsi,0x1
  01c92:    	je     0x322cb
  01c98:    	sar    rsi,1
  01c9b:    	sub    rsp,0x10
  01c9f:    	movq   QWORD PTR [rsp],xmm3
  01ca4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01caa:    	mov    rdx,r12
  01cad:    	mov    rcx,QWORD PTR [r14-0x50]
  01cb1: 4d 	movabs rax,0x564da0819dd0
  01cbb:    	call   rax
  01cbd:    	movq   xmm3,QWORD PTR [rsp]
  01cc2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01cc8:    	add    rsp,0x10
  01ccc: 4d 	movabs r13,0x564da0eab050
  01cd6:    	test   rax,rax
  01cd9:    	je     0xfffe4c7b
:00104 %3 = 1: i32
  01cdf: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  01ce7: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01cef:    	mov    rdi,QWORD PTR [r14-0x38]
  01cf3:    	mov    rsi,QWORD PTR [r14-0x58]
  01cf7: 00 	test   rdi,0x7
  01cfe:    	jne    0x322da
  01d04:    	cmp    DWORD PTR [rdi+0x4],0xb
  01d08:    	jne    0x322da
  01d0e: 00 	test   rsi,0x1
  01d15:    	je     0x322da
  01d1b:    	sar    rsi,1
  01d1e:    	sub    rsp,0x10
  01d22:    	movq   QWORD PTR [rsp],xmm3
  01d27:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d2d: 4d 	movabs rax,0x564da0819c40
  01d37:    	call   rax
  01d39:    	movq   xmm3,QWORD PTR [rsp]
  01d3e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d44:    	add    rsp,0x10
  01d48: 4d 	movabs r13,0x564da0eab080
  01d52:    	test   rax,rax
  01d55:    	je     0xfffe4c7b
  01d5b:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01d5f: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01d67:    	mov    rdi,QWORD PTR [r14-0x38]
  01d6b:    	mov    rsi,QWORD PTR [r14-0x60]
  01d6f: 00 	test   rdi,0x7
  01d76:    	jne    0x322e9
  01d7c:    	cmp    DWORD PTR [rdi+0x4],0xb
  01d80:    	jne    0x322e9
  01d86: 00 	test   rsi,0x1
  01d8d:    	je     0x322e9
  01d93:    	sar    rsi,1
  01d96:    	sub    rsp,0x10
  01d9a:    	movq   QWORD PTR [rsp],xmm3
  01d9f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01da5: 4d 	movabs rax,0x564da0819c40
  01daf:    	call   rax
  01db1:    	movq   xmm3,QWORD PTR [rsp]
  01db6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01dbc:    	add    rsp,0x10
  01dc0: 4d 	movabs r13,0x564da0eab0a0
  01dca:    	test   rax,rax
  01dcd:    	je     0xfffe4c7b
  01dd3:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01dd7:    	mov    rdi,QWORD PTR [r14-0x58]
  01ddb: 00 	test   rdi,0x7
  01de2:    	jne    0x322f8
  01de8:    	cmp    DWORD PTR [rdi+0x4],0x28
  01dec:    	jne    0x322f8
  01df2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6208],0x26        # 0xfffe8001
  01df9:    	jne    0x322f8
  01dff:    	sub    rsp,0x10
  01e03:    	movq   QWORD PTR [rsp],xmm3
  01e08:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e0e: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01e17:    	mov    rax,QWORD PTR [r14-0x58]
  01e1b:    	mov    QWORD PTR [rsp-0x40],rax
  01e20: 00 	mov    rdi,0x1
  01e27:    	mov    rax,QWORD PTR [r14-0x60]
  01e2b:    	mov    QWORD PTR [rsp-0x48],rax
  01e30: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01e39: 09 	movabs rax,0x900000041
  01e43:    	mov    QWORD PTR [rsp-0x30],rax
  01e48: 4d 	movabs r13,0x564da0e89170
  01e52:    	mov    rsi,QWORD PTR [rbx]
  01e55:    	mov    QWORD PTR [rsp-0x18],rsi
  01e5a:    	lea    rsi,[rsp-0x18]
  01e5f:    	mov    QWORD PTR [rbx],rsi
  01e62:    	lea    r14,[rsp-0x10]
  01e67:    	mov    QWORD PTR [rsp-0x20],r14
  01e6c:    	call   0xffff1bff
  01e71:    	lea    r14,[rbp-0x8]
  01e75:    	mov    QWORD PTR [rbx],r14
  01e78:    	mov    r14,QWORD PTR [rbp-0x10]
  01e7c:    	movq   xmm3,QWORD PTR [rsp]
  01e81:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e87:    	add    rsp,0x10
  01e8b: 4d 	movabs r13,0x564da0eab0c0
  01e95:    	test   rax,rax
  01e98:    	je     0xfffe4c7b
  01e9e:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01ea2:    	mov    rdi,QWORD PTR [r14-0x38]
  01ea6:    	mov    rsi,QWORD PTR [r14-0x48]
  01eaa: 00 	test   rdi,0x7
  01eb1:    	jne    0x32307
  01eb7:    	cmp    DWORD PTR [rdi+0x4],0xb
  01ebb:    	jne    0x32307
  01ec1: 00 	test   rsi,0x1
  01ec8:    	je     0x32307
  01ece:    	sar    rsi,1
  01ed1:    	sub    rsp,0x10
  01ed5:    	movq   QWORD PTR [rsp],xmm3
  01eda:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ee0:    	mov    rdx,r12
  01ee3:    	mov    rcx,QWORD PTR [r14-0x50]
  01ee7: 4d 	movabs rax,0x564da0819dd0
  01ef1:    	call   rax
  01ef3:    	movq   xmm3,QWORD PTR [rsp]
  01ef8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01efe:    	add    rsp,0x10
  01f02: 4d 	movabs r13,0x564da0eab0e0
  01f0c:    	test   rax,rax
  01f0f:    	je     0xfffe4c7b
:00113 %3 = 1: i32
  01f15: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01f1d: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01f25:    	mov    rdi,QWORD PTR [r14-0x38]
  01f29:    	mov    rsi,QWORD PTR [r14-0x58]
  01f2d: 00 	test   rdi,0x7
  01f34:    	jne    0x32316
  01f3a:    	cmp    DWORD PTR [rdi+0x4],0xb
  01f3e:    	jne    0x32316
  01f44: 00 	test   rsi,0x1
  01f4b:    	je     0x32316
  01f51:    	sar    rsi,1
  01f54:    	sub    rsp,0x10
  01f58:    	movq   QWORD PTR [rsp],xmm3
  01f5d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f63: 4d 	movabs rax,0x564da0819c40
  01f6d:    	call   rax
  01f6f:    	movq   xmm3,QWORD PTR [rsp]
  01f74:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f7a:    	add    rsp,0x10
  01f7e: 4d 	movabs r13,0x564da0eab110
  01f88:    	test   rax,rax
  01f8b:    	je     0xfffe4c7b
  01f91:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01f95:    	mov    rdi,QWORD PTR [r14-0x58]
  01f99: 00 	test   rdi,0x7
  01fa0:    	jne    0x32325
  01fa6:    	cmp    DWORD PTR [rdi+0x4],0x28
  01faa:    	jne    0x32325
  01fb0: 26 	cmp    DWORD PTR [rip+0xfffffffffffe604a],0x26        # 0xfffe8001
  01fb7:    	jne    0x32325
  01fbd:    	sub    rsp,0x10
  01fc1:    	movq   QWORD PTR [rsp],xmm3
  01fc6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01fcc: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01fd5:    	mov    rax,QWORD PTR [r14-0x58]
  01fd9:    	mov    QWORD PTR [rsp-0x40],rax
  01fde: 00 	mov    rdi,0x0
  01fe5: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01fee: 07 	movabs rax,0x1000700000044
  01ff8:    	mov    QWORD PTR [rsp-0x30],rax
  01ffd: 4d 	movabs r13,0x564da0e6bec0
  02007:    	mov    rsi,QWORD PTR [rbx]
  0200a:    	mov    QWORD PTR [rsp-0x18],rsi
  0200f:    	lea    rsi,[rsp-0x18]
  02014:    	mov    QWORD PTR [rbx],rsi
  02017:    	lea    r14,[rsp-0x10]
  0201c:    	mov    QWORD PTR [rsp-0x20],r14
  02021:    	call   0xfffe88b4
  02026:    	lea    r14,[rbp-0x8]
  0202a:    	mov    QWORD PTR [rbx],r14
  0202d:    	mov    r14,QWORD PTR [rbp-0x10]
  02031:    	movq   xmm3,QWORD PTR [rsp]
  02036:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0203c:    	add    rsp,0x10
  02040: 4d 	movabs r13,0x564da0eab130
  0204a:    	test   rax,rax
  0204d:    	je     0xfffe4c7b
  02053:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  02057:    	mov    rdi,QWORD PTR [r14-0x38]
  0205b:    	mov    rsi,QWORD PTR [r14-0x48]
  0205f: 00 	test   rdi,0x7
  02066:    	jne    0x32334
  0206c:    	cmp    DWORD PTR [rdi+0x4],0xb
  02070:    	jne    0x32334
  02076: 00 	test   rsi,0x1
  0207d:    	je     0x32334
  02083:    	sar    rsi,1
  02086:    	sub    rsp,0x10
  0208a:    	movq   QWORD PTR [rsp],xmm3
  0208f:    	movq   QWORD PTR [rsp+0x8],xmm4
  02095:    	mov    rdx,r12
  02098:    	mov    rcx,QWORD PTR [r14-0x50]
  0209c: 4d 	movabs rax,0x564da0819dd0
  020a6:    	call   rax
  020a8:    	movq   xmm3,QWORD PTR [rsp]
  020ad:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020b3:    	add    rsp,0x10
  020b7: 4d 	movabs r13,0x564da0eab150
  020c1:    	test   rax,rax
  020c4:    	je     0xfffe4c7b
:00120 %3 = %4
  020ca:    	mov    rax,QWORD PTR [r14-0x50]
  020ce:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  020d2:    	mov    rax,QWORD PTR [r14-0x48]
  020d6:    	leave  
  020d7:    	ret    
==> start whole compile: otherBasis FuncId(60) self_class:Scene start:[00000] bytecode:0x564da0eaa9d0
<== finished compile. elapsed:148.6µs
offset:Pos(120252) code: 8348 bytes  data: 324 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0x80
  0000e:    	cmp    edx,0x2
  00011:    	jne    0x3013f
  00017: 00 	mov    rax,0x4
  0001e:    	mov    QWORD PTR [r14-0x48],rax
  00022:    	mov    QWORD PTR [r14-0x50],rax
  00026:    	mov    QWORD PTR [r14-0x58],rax
  0002a:    	mov    QWORD PTR [r14-0x60],rax
  0002e:    	mov    QWORD PTR [r14-0x68],rax
  00032:    	mov    QWORD PTR [r14-0x70],rax
  00036:    	mov    rdi,QWORD PTR [rbp-0x30]
  0003a: 00 	test   rdi,0x7
  00041:    	jne    0x3014e
  00047:    	cmp    DWORD PTR [rdi+0x4],0x32
  0004b:    	jne    0x3014e
:00000 init_method reg:9 arg:2 pos:2 req:2 block:0 stack_offset:8
:00001 %3 = 2: i32
  00051: 00 	mov    QWORD PTR [r14-0x48],0x5
:00002 %5 = const[Vec]                      [Vec]
  00059: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5da4]        # 0xfffe5e04
  00060: 00 	cmp    rax,QWORD PTR [rip+0x204d]        # 0x20b4
  00067:    	jne    0x3015d
  0006d: 00 	mov    rax,QWORD PTR [rip+0x2030]        # 0x20a4
  00074:    	mov    QWORD PTR [r14-0x58],rax
:00003 %6 = %2.call x()                     [Vec]
  00078:    	mov    rdi,QWORD PTR [r14-0x40]
  0007c: 00 	test   rdi,0x7
  00083:    	jne    0x301a3
  00089:    	cmp    DWORD PTR [rdi+0x4],0x28
  0008d:    	jne    0x301a3
  00093: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5d63],0x26        # 0xfffe5dfd
  0009a:    	jne    0x301a3
  000a0:    	mov    esi,DWORD PTR [rip+0x201a]        # 0x20c0
  000a6:    	cmp    esi,0xffffffff
  000a9:    	je     0x301b2
  000af:    	cmp    WORD PTR [rdi+0x2],0x3
  000b4:    	jne    0xcd
  000ba:    	cmp    esi,0x6
  000bd:    	jge    0xcd
  000c3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8:    	jmp    0xd9
  000cd: 4d 	movabs rax,0x564da0797d70
  000d7:    	call   rax
  000d9:    	mov    QWORD PTR [r14-0x60],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000dd:    	mov    rdi,QWORD PTR [r14-0x40]
  000e1: 00 	test   rdi,0x7
  000e8:    	jne    0x301db
  000ee:    	cmp    DWORD PTR [rdi+0x4],0x28
  000f2:    	jne    0x301db
  000f8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5cfe],0x26        # 0xfffe5dfd
  000ff:    	jne    0x301db
  00105:    	mov    esi,DWORD PTR [rip+0x1fbd]        # 0x20c8
  0010b:    	cmp    esi,0xffffffff
  0010e:    	je     0x301ea
  00114:    	cmp    WORD PTR [rdi+0x2],0x3
  00119:    	jne    0x132
  0011f:    	cmp    esi,0x6
  00122:    	jge    0x132
  00128:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012d:    	jmp    0x13e
  00132: 4d 	movabs rax,0x564da0797d70
  0013c:    	call   rax
  0013e:    	mov    QWORD PTR [r14-0x68],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  00142:    	mov    rdi,QWORD PTR [r14-0x40]
  00146: 00 	test   rdi,0x7
  0014d:    	jne    0x30213
  00153:    	cmp    DWORD PTR [rdi+0x4],0x28
  00157:    	jne    0x30213
  0015d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5c99],0x26        # 0xfffe5dfd
  00164:    	jne    0x30213
  0016a:    	mov    esi,DWORD PTR [rip+0x1f60]        # 0x20d0
  00170:    	cmp    esi,0xffffffff
  00173:    	je     0x30222
  00179:    	cmp    WORD PTR [rdi+0x2],0x3
  0017e:    	jne    0x197
  00184:    	cmp    esi,0x6
  00187:    	jge    0x197
  0018d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00192:    	jmp    0x1a3
  00197: 4d 	movabs rax,0x564da0797d70
  001a1:    	call   rax
  001a3:    	mov    QWORD PTR [r14-0x70],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001a7:    	mov    rdi,QWORD PTR [r14-0x58]
  001ab: 00 	test   rdi,0x7
  001b2:    	jne    0x3024b
  001b8:    	cmp    DWORD PTR [rdi+0x4],0x29
  001bc:    	jne    0x3024b
  001c2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5c34],0x26        # 0xfffe5dfd
  001c9:    	jne    0x3024b
  001cf: 00 	mov    r9,0x0
  001d6:    	mov    rdx,rdi
  001d9:    	mov    QWORD PTR [rsp-0x40],rcx
  001de: 00 	mov    QWORD PTR [rsp-0x28],0x0
  001e7:    	lea    rcx,[r14-0x60]
  001eb: 00 	mov    r8,0x3
  001f2:    	mov    rsi,QWORD PTR [rbx]
  001f5:    	mov    QWORD PTR [rsp-0x18],rsi
  001fa:    	lea    rsi,[rsp-0x18]
  001ff:    	mov    QWORD PTR [rbx],rsi
  00202:    	lea    r14,[rsp-0x10]
  00207:    	mov    QWORD PTR [rsp-0x20],r14
  0020c:    	call   0x3025a
  00211:    	lea    r14,[rbp-0x8]
  00215:    	mov    QWORD PTR [rbx],r14
  00218:    	mov    r14,QWORD PTR [rbp-0x10]
  0021c: 4d 	movabs r13,0x564da0eaaab0
  00226:    	test   rax,rax
  00229:    	je     0xfffe2a77
  0022f:    	mov    QWORD PTR [r14-0x50],rax
:00013 
:00015 %1:.[%3:] = %4
  00233:    	mov    rdi,QWORD PTR [r14-0x38]
  00237:    	mov    rsi,QWORD PTR [r14-0x48]
  0023b: 00 	test   rdi,0x7
  00242:    	jne    0x3028c
  00248:    	cmp    DWORD PTR [rdi+0x4],0xb
  0024c:    	jne    0x3028c
  00252: 00 	test   rsi,0x1
  00259:    	je     0x3028c
  0025f:    	sar    rsi,1
  00262:    	mov    rdx,r12
  00265:    	mov    rcx,QWORD PTR [r14-0x50]
  00269: 4d 	movabs rax,0x564da0819dd0
  00273:    	call   rax
  00275: 4d 	movabs r13,0x564da0eaaad0
  0027f:    	test   rax,rax
  00282:    	je     0xfffe2a77
:00016 %3 = 1: i32
  00288: 00 	mov    QWORD PTR [r14-0x48],0x3
:00017 %5 = const[Vec]                      [Vec]
  00290: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5b6d]        # 0xfffe5e04
  00297: 00 	cmp    rax,QWORD PTR [rip+0x1e46]        # 0x20e4
  0029e:    	jne    0x3029b
  002a4: 00 	mov    rax,QWORD PTR [rip+0x1e29]        # 0x20d4
  002ab:    	mov    QWORD PTR [r14-0x58],rax
:00018 %6 = literal[0.0]
  002af: 00 	movq   xmm2,QWORD PTR [rip+0x1e3d]        # 0x20f4
  002b7: 00 	movabs rax,0x8000000000000002
  002c1:    	mov    QWORD PTR [r14-0x60],rax
:00019 %7 = literal[0.0]
  002c5: 00 	movq   xmm3,QWORD PTR [rip+0x1e37]        # 0x2104
  002cd: 00 	movabs rax,0x8000000000000002
  002d7:    	mov    QWORD PTR [r14-0x68],rax
:00020 %8 = literal[0.0]
  002db: 00 	movq   xmm4,QWORD PTR [rip+0x1e31]        # 0x2114
  002e3: 00 	movabs rax,0x8000000000000002
  002ed:    	mov    QWORD PTR [r14-0x70],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002f1:    	mov    rdi,QWORD PTR [r14-0x58]
  002f5: 00 	test   rdi,0x7
  002fc:    	jne    0x302e1
  00302:    	cmp    DWORD PTR [rdi+0x4],0x29
  00306:    	jne    0x302e1
  0030c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5aea],0x26        # 0xfffe5dfd
  00313:    	jne    0x302e1
  00319: 00 	mov    r9,0x0
  00320:    	sub    rsp,0x20
  00324:    	movq   QWORD PTR [rsp],xmm2
  00329:    	movq   QWORD PTR [rsp+0x8],xmm3
  0032f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00335:    	mov    rdx,rdi
  00338:    	mov    QWORD PTR [rsp-0x40],rcx
  0033d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  00346:    	lea    rcx,[r14-0x60]
  0034a: 00 	mov    r8,0x3
  00351:    	mov    rsi,QWORD PTR [rbx]
  00354:    	mov    QWORD PTR [rsp-0x18],rsi
  00359:    	lea    rsi,[rsp-0x18]
  0035e:    	mov    QWORD PTR [rbx],rsi
  00361:    	lea    r14,[rsp-0x10]
  00366:    	mov    QWORD PTR [rsp-0x20],r14
  0036b:    	call   0x302f0
  00370:    	lea    r14,[rbp-0x8]
  00374:    	mov    QWORD PTR [rbx],r14
  00377:    	mov    r14,QWORD PTR [rbp-0x10]
  0037b:    	movq   xmm2,QWORD PTR [rsp]
  00380:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00386:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0038c:    	add    rsp,0x20
  00390: 4d 	movabs r13,0x564da0eaab40
  0039a:    	test   rax,rax
  0039d:    	je     0xfffe2a77
  003a3:    	mov    QWORD PTR [r14-0x50],rax
:00022 
:00024 %1:.[%3:] = %4
  003a7:    	mov    rdi,QWORD PTR [r14-0x38]
  003ab:    	mov    rsi,QWORD PTR [r14-0x48]
  003af: 00 	test   rdi,0x7
  003b6:    	jne    0x30322
  003bc:    	cmp    DWORD PTR [rdi+0x4],0xb
  003c0:    	jne    0x30322
  003c6: 00 	test   rsi,0x1
  003cd:    	je     0x30322
  003d3:    	sar    rsi,1
  003d6:    	sub    rsp,0x20
  003da:    	movq   QWORD PTR [rsp],xmm2
  003df:    	movq   QWORD PTR [rsp+0x8],xmm3
  003e5:    	movq   QWORD PTR [rsp+0x10],xmm4
  003eb:    	mov    rdx,r12
  003ee:    	mov    rcx,QWORD PTR [r14-0x50]
  003f2: 4d 	movabs rax,0x564da0819dd0
  003fc:    	call   rax
  003fe:    	movq   xmm2,QWORD PTR [rsp]
  00403:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00409:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0040f:    	add    rsp,0x20
  00413: 4d 	movabs r13,0x564da0eaab60
  0041d:    	test   rax,rax
  00420:    	je     0xfffe2a77
:00025 %3 = %2.call x()                     [Vec]
  00426:    	mov    rdi,QWORD PTR [r14-0x40]
  0042a: 00 	test   rdi,0x7
  00431:    	jne    0x30331
  00437:    	cmp    DWORD PTR [rdi+0x4],0x28
  0043b:    	jne    0x30331
  00441: 26 	cmp    DWORD PTR [rip+0xfffffffffffe59b5],0x26        # 0xfffe5dfd
  00448:    	jne    0x30331
  0044e:    	mov    esi,DWORD PTR [rip+0x1ccc]        # 0x2120
  00454:    	cmp    esi,0xffffffff
  00457:    	je     0x30340
  0045d:    	cmp    WORD PTR [rdi+0x2],0x3
  00462:    	jne    0x47b
  00468:    	cmp    esi,0x6
  0046b:    	jge    0x47b
  00471:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00476:    	jmp    0x4b1
  0047b:    	sub    rsp,0x20
  0047f:    	movq   QWORD PTR [rsp],xmm2
  00484:    	movq   QWORD PTR [rsp+0x8],xmm3
  0048a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00490: 4d 	movabs rax,0x564da0797d70
  0049a:    	call   rax
  0049c:    	movq   xmm2,QWORD PTR [rsp]
  004a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004ad:    	add    rsp,0x20
  004b1:    	mov    QWORD PTR [r14-0x48],rax
:00026 
:00028 %4 = literal[0.6]
  004b5: 00 	movq   xmm5,QWORD PTR [rip+0x1c67]        # 0x2124
  004bd: 99 	movabs rax,0xff1999999999999a
  004c7:    	mov    QWORD PTR [r14-0x50],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  004cb:    	mov    rdi,QWORD PTR [r14-0x48]
  004cf: 00 	test   rdi,0x1
  004d6:    	jne    0x30393
  004dc: 00 	test   rdi,0x2
  004e3:    	je     0x51f
  004e9:    	xorps  xmm6,xmm6
  004ec: 00 	movabs rax,0x8000000000000002
  004f6:    	cmp    rdi,rax
  004f9:    	je     0x531
  004ff:    	mov    rax,rdi
  00502:    	sar    rax,0x3f
  00506:    	add    rax,0x2
  0050a:    	and    rdi,0xfffffffffffffffc
  0050e:    	or     rdi,rax
  00511:    	rol    rdi,0x3d
  00515:    	movq   xmm6,rdi
  0051a:    	jmp    0x531
  0051f:    	call   0xfffe2ad0
  00524:    	test   rax,rax
  00527:    	je     0x30393
  0052d:    	movq   xmm6,xmm0
  00531:    	ucomisd xmm6,xmm5
  00535:    	jae    0x304a3
:00031 %3 = %2.call x()                     [Vec]
  0053b:    	mov    rdi,QWORD PTR [r14-0x40]
  0053f: 00 	test   rdi,0x7
  00546:    	jne    0x303a2
  0054c:    	cmp    DWORD PTR [rdi+0x4],0x28
  00550:    	jne    0x303a2
  00556: 26 	cmp    DWORD PTR [rip+0xfffffffffffe58a0],0x26        # 0xfffe5dfd
  0055d:    	jne    0x303a2
  00563:    	mov    esi,DWORD PTR [rip+0x1bc7]        # 0x2130
  00569:    	cmp    esi,0xffffffff
  0056c:    	je     0x303b1
  00572:    	cmp    WORD PTR [rdi+0x2],0x3
  00577:    	jne    0x590
  0057d:    	cmp    esi,0x6
  00580:    	jge    0x590
  00586:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0058b:    	jmp    0x5d2
  00590:    	sub    rsp,0x20
  00594:    	movq   QWORD PTR [rsp],xmm2
  00599:    	movq   QWORD PTR [rsp+0x8],xmm3
  0059f:    	movq   QWORD PTR [rsp+0x10],xmm4
  005a5:    	movq   QWORD PTR [rsp+0x18],xmm5
  005ab: 4d 	movabs rax,0x564da0797d70
  005b5:    	call   rax
  005b7:    	movq   xmm2,QWORD PTR [rsp]
  005bc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005c2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005c8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005ce:    	add    rsp,0x20
  005d2:    	mov    QWORD PTR [r14-0x48],rax
:00032 
:00034 %4 = literal[-0.6]
  005d6: 00 	movq   xmm5,QWORD PTR [rip+0x1b56]        # 0x2134
  005de: 99 	movabs rax,0xff1999999999999e
  005e8:    	mov    QWORD PTR [r14-0x50],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  005ec:    	mov    rdi,QWORD PTR [r14-0x48]
  005f0: 00 	test   rdi,0x1
  005f7:    	jne    0x30410
  005fd: 00 	test   rdi,0x2
  00604:    	je     0x640
  0060a:    	xorps  xmm6,xmm6
  0060d: 00 	movabs rax,0x8000000000000002
  00617:    	cmp    rdi,rax
  0061a:    	je     0x652
  00620:    	mov    rax,rdi
  00623:    	sar    rax,0x3f
  00627:    	add    rax,0x2
  0062b:    	and    rdi,0xfffffffffffffffc
  0062f:    	or     rdi,rax
  00632:    	rol    rdi,0x3d
  00636:    	movq   xmm6,rdi
  0063b:    	jmp    0x652
  00640:    	call   0xfffe2ad0
  00645:    	test   rax,rax
  00648:    	je     0x30410
  0064e:    	movq   xmm6,xmm0
  00652:    	ucomisd xmm6,xmm5
  00656:    	jbe    0x304bc
:00037 %3 = 1: i32
  0065c: 00 	mov    QWORD PTR [r14-0x48],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00664:    	mov    rdi,QWORD PTR [r14-0x38]
  00668:    	mov    rsi,QWORD PTR [r14-0x48]
  0066c: 00 	test   rdi,0x7
  00673:    	jne    0x3041f
  00679:    	cmp    DWORD PTR [rdi+0x4],0xb
  0067d:    	jne    0x3041f
  00683: 00 	test   rsi,0x1
  0068a:    	je     0x3041f
  00690:    	sar    rsi,1
  00693:    	sub    rsp,0x20
  00697:    	movq   QWORD PTR [rsp],xmm2
  0069c:    	movq   QWORD PTR [rsp+0x8],xmm3
  006a2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006a8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006ae: 4d 	movabs rax,0x564da0819c40
  006b8:    	call   rax
  006ba:    	movq   xmm2,QWORD PTR [rsp]
  006bf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006c5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006cb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006d1:    	add    rsp,0x20
  006d5: 4d 	movabs r13,0x564da0eaac40
  006df:    	test   rax,rax
  006e2:    	je     0xfffe2a77
  006e8:    	mov    QWORD PTR [r14-0x48],rax
:00039 %4 = literal[1.0]
  006ec: 00 	movq   xmm5,QWORD PTR [rip+0x1a50]        # 0x2144
  006f4: 00 	movabs rax,0xff80000000000002
  006fe:    	mov    QWORD PTR [r14-0x50],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  00702:    	mov    rdi,QWORD PTR [r14-0x48]
  00706: 00 	test   rdi,0x7
  0070d:    	jne    0x3042e
  00713:    	cmp    DWORD PTR [rdi+0x4],0x28
  00717:    	jne    0x3042e
  0071d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe56d9],0x26        # 0xfffe5dfd
  00724:    	jne    0x3042e
  0072a:    	mov    esi,DWORD PTR [rip+0x1a20]        # 0x2150
  00730:    	cmp    esi,0xffffffff
  00733:    	je     0x3043d
  00739:    	cmp    WORD PTR [rdi+0x2],0x3
  0073e:    	jne    0x75b
  00744:    	cmp    esi,0x6
  00747:    	jge    0x75b
  0074d:    	mov    rax,QWORD PTR [r14-0x50]
  00751:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00756:    	jmp    0x7b4
  0075b:    	sub    rsp,0x20
  0075f:    	movq   QWORD PTR [rsp],xmm2
  00764:    	movq   QWORD PTR [rsp+0x8],xmm3
  0076a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00770:    	movq   QWORD PTR [rsp+0x18],xmm5
  00776:    	mov    rdx,QWORD PTR [r14-0x50]
  0077a: 4d 	movabs rax,0x564da0797ff0
  00784:    	call   rax
  00786:    	movq   xmm2,QWORD PTR [rsp]
  0078b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00791:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00797:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0079d:    	add    rsp,0x20
  007a1: 4d 	movabs r13,0x564da0eaac70
  007ab:    	test   rax,rax
  007ae:    	je     0xfffe2a77
:00041 
:00043 br =>:00088
  007b4:    	jmp    0x3098a
:00044 %3 = %2.call y()                     [Vec]
  007b9:    	mov    rdi,QWORD PTR [r14-0x40]
  007bd: 00 	test   rdi,0x7
  007c4:    	jne    0x304d5
  007ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  007ce:    	jne    0x304d5
  007d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5622],0x26        # 0xfffe5dfd
  007db:    	jne    0x304d5
  007e1:    	mov    esi,DWORD PTR [rip+0x1971]        # 0x2158
  007e7:    	cmp    esi,0xffffffff
  007ea:    	je     0x304e4
  007f0:    	cmp    WORD PTR [rdi+0x2],0x3
  007f5:    	jne    0x80e
  007fb:    	cmp    esi,0x6
  007fe:    	jge    0x80e
  00804:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00809:    	jmp    0x850
  0080e:    	sub    rsp,0x20
  00812:    	movq   QWORD PTR [rsp],xmm2
  00817:    	movq   QWORD PTR [rsp+0x8],xmm3
  0081d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00823:    	movq   QWORD PTR [rsp+0x18],xmm5
  00829: 4d 	movabs rax,0x564da0797d70
  00833:    	call   rax
  00835:    	movq   xmm2,QWORD PTR [rsp]
  0083a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00840:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00846:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0084c:    	add    rsp,0x20
  00850:    	mov    QWORD PTR [r14-0x48],rax
:00045 
:00047 %4 = literal[0.6]
  00854: 00 	movq   xmm5,QWORD PTR [rip+0x1908]        # 0x2164
  0085c: 99 	movabs rax,0xff1999999999999a
  00866:    	mov    QWORD PTR [r14-0x50],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  0086a:    	mov    rdi,QWORD PTR [r14-0x48]
  0086e: 00 	test   rdi,0x1
  00875:    	jne    0x30543
  0087b: 00 	test   rdi,0x2
  00882:    	je     0x8be
  00888:    	xorps  xmm6,xmm6
  0088b: 00 	movabs rax,0x8000000000000002
  00895:    	cmp    rdi,rax
  00898:    	je     0x8d0
  0089e:    	mov    rax,rdi
  008a1:    	sar    rax,0x3f
  008a5:    	add    rax,0x2
  008a9:    	and    rdi,0xfffffffffffffffc
  008ad:    	or     rdi,rax
  008b0:    	rol    rdi,0x3d
  008b4:    	movq   xmm6,rdi
  008b9:    	jmp    0x8d0
  008be:    	call   0xfffe2ad0
  008c3:    	test   rax,rax
  008c6:    	je     0x30543
  008cc:    	movq   xmm6,xmm0
  008d0:    	ucomisd xmm6,xmm5
  008d4:    	jae    0x30653
:00050 %3 = %2.call y()                     [Vec]
  008da:    	mov    rdi,QWORD PTR [r14-0x40]
  008de: 00 	test   rdi,0x7
  008e5:    	jne    0x30552
  008eb:    	cmp    DWORD PTR [rdi+0x4],0x28
  008ef:    	jne    0x30552
  008f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5501],0x26        # 0xfffe5dfd
  008fc:    	jne    0x30552
  00902:    	mov    esi,DWORD PTR [rip+0x1868]        # 0x2170
  00908:    	cmp    esi,0xffffffff
  0090b:    	je     0x30561
  00911:    	cmp    WORD PTR [rdi+0x2],0x3
  00916:    	jne    0x92f
  0091c:    	cmp    esi,0x6
  0091f:    	jge    0x92f
  00925:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0092a:    	jmp    0x971
  0092f:    	sub    rsp,0x20
  00933:    	movq   QWORD PTR [rsp],xmm2
  00938:    	movq   QWORD PTR [rsp+0x8],xmm3
  0093e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00944:    	movq   QWORD PTR [rsp+0x18],xmm5
  0094a: 4d 	movabs rax,0x564da0797d70
  00954:    	call   rax
  00956:    	movq   xmm2,QWORD PTR [rsp]
  0095b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00961:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00967:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096d:    	add    rsp,0x20
  00971:    	mov    QWORD PTR [r14-0x48],rax
:00051 
:00053 %4 = literal[-0.6]
  00975: 00 	movq   xmm5,QWORD PTR [rip+0x17f7]        # 0x2174
  0097d: 99 	movabs rax,0xff1999999999999e
  00987:    	mov    QWORD PTR [r14-0x50],rax
:00054 _%3 = %3 > %4                        [Float][Float]
:00055 condnotbr _%3 =>:00063
  0098b:    	mov    rdi,QWORD PTR [r14-0x48]
  0098f: 00 	test   rdi,0x1
  00996:    	jne    0x305c0
  0099c: 00 	test   rdi,0x2
  009a3:    	je     0x9df
  009a9:    	xorps  xmm6,xmm6
  009ac: 00 	movabs rax,0x8000000000000002
  009b6:    	cmp    rdi,rax
  009b9:    	je     0x9f1
  009bf:    	mov    rax,rdi
  009c2:    	sar    rax,0x3f
  009c6:    	add    rax,0x2
  009ca:    	and    rdi,0xfffffffffffffffc
  009ce:    	or     rdi,rax
  009d1:    	rol    rdi,0x3d
  009d5:    	movq   xmm6,rdi
  009da:    	jmp    0x9f1
  009df:    	call   0xfffe2ad0
  009e4:    	test   rax,rax
  009e7:    	je     0x305c0
  009ed:    	movq   xmm6,xmm0
  009f1:    	ucomisd xmm6,xmm5
  009f5:    	jbe    0x3066c
:00056 %3 = 1: i32
  009fb: 00 	mov    QWORD PTR [r14-0x48],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  00a03:    	mov    rdi,QWORD PTR [r14-0x38]
  00a07:    	mov    rsi,QWORD PTR [r14-0x48]
  00a0b: 00 	test   rdi,0x7
  00a12:    	jne    0x305cf
  00a18:    	cmp    DWORD PTR [rdi+0x4],0xb
  00a1c:    	jne    0x305cf
  00a22: 00 	test   rsi,0x1
  00a29:    	je     0x305cf
  00a2f:    	sar    rsi,1
  00a32:    	sub    rsp,0x20
  00a36:    	movq   QWORD PTR [rsp],xmm2
  00a3b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a41:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a47:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a4d: 4d 	movabs rax,0x564da0819c40
  00a57:    	call   rax
  00a59:    	movq   xmm2,QWORD PTR [rsp]
  00a5e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a64:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a6a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a70:    	add    rsp,0x20
  00a74: 4d 	movabs r13,0x564da0eaad70
  00a7e:    	test   rax,rax
  00a81:    	je     0xfffe2a77
  00a87:    	mov    QWORD PTR [r14-0x48],rax
:00058 %4 = literal[1.0]
  00a8b: 00 	movq   xmm5,QWORD PTR [rip+0x16f1]        # 0x2184
  00a93: 00 	movabs rax,0xff80000000000002
  00a9d:    	mov    QWORD PTR [r14-0x50],rax
:00059 _ = %3.call y=(%4; 1)                [Vec]
  00aa1:    	mov    rdi,QWORD PTR [r14-0x48]
  00aa5: 00 	test   rdi,0x7
  00aac:    	jne    0x305de
  00ab2:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ab6:    	jne    0x305de
  00abc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe533a],0x26        # 0xfffe5dfd
  00ac3:    	jne    0x305de
  00ac9:    	mov    esi,DWORD PTR [rip+0x16c1]        # 0x2190
  00acf:    	cmp    esi,0xffffffff
  00ad2:    	je     0x305ed
  00ad8:    	cmp    WORD PTR [rdi+0x2],0x3
  00add:    	jne    0xafa
  00ae3:    	cmp    esi,0x6
  00ae6:    	jge    0xafa
  00aec:    	mov    rax,QWORD PTR [r14-0x50]
  00af0:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00af5:    	jmp    0xb53
  00afa:    	sub    rsp,0x20
  00afe:    	movq   QWORD PTR [rsp],xmm2
  00b03:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b09:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b0f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b15:    	mov    rdx,QWORD PTR [r14-0x50]
  00b19: 4d 	movabs rax,0x564da0797ff0
  00b23:    	call   rax
  00b25:    	movq   xmm2,QWORD PTR [rsp]
  00b2a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b30:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b36:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b3c:    	add    rsp,0x20
  00b40: 4d 	movabs r13,0x564da0eaada0
  00b4a:    	test   rax,rax
  00b4d:    	je     0xfffe2a77
:00060 
:00062 br =>:00088
  00b53:    	jmp    0x309a3
:00063 %3 = %2.call z()                     [Vec]
  00b58:    	mov    rdi,QWORD PTR [r14-0x40]
  00b5c: 00 	test   rdi,0x7
  00b63:    	jne    0x30685
  00b69:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b6d:    	jne    0x30685
  00b73: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5283],0x26        # 0xfffe5dfd
  00b7a:    	jne    0x30685
  00b80:    	mov    esi,DWORD PTR [rip+0x1612]        # 0x2198
  00b86:    	cmp    esi,0xffffffff
  00b89:    	je     0x30694
  00b8f:    	cmp    WORD PTR [rdi+0x2],0x3
  00b94:    	jne    0xbad
  00b9a:    	cmp    esi,0x6
  00b9d:    	jge    0xbad
  00ba3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ba8:    	jmp    0xbef
  00bad:    	sub    rsp,0x20
  00bb1:    	movq   QWORD PTR [rsp],xmm2
  00bb6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bbc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bc2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bc8: 4d 	movabs rax,0x564da0797d70
  00bd2:    	call   rax
  00bd4:    	movq   xmm2,QWORD PTR [rsp]
  00bd9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bdf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00be5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00beb:    	add    rsp,0x20
  00bef:    	mov    QWORD PTR [r14-0x48],rax
:00064 
:00066 %4 = literal[0.6]
  00bf3: 00 	movq   xmm5,QWORD PTR [rip+0x15a9]        # 0x21a4
  00bfb: 99 	movabs rax,0xff1999999999999a
  00c05:    	mov    QWORD PTR [r14-0x50],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00c09:    	mov    rdi,QWORD PTR [r14-0x48]
  00c0d: 00 	test   rdi,0x1
  00c14:    	jne    0x306f3
  00c1a: 00 	test   rdi,0x2
  00c21:    	je     0xc5d
  00c27:    	xorps  xmm6,xmm6
  00c2a: 00 	movabs rax,0x8000000000000002
  00c34:    	cmp    rdi,rax
  00c37:    	je     0xc6f
  00c3d:    	mov    rax,rdi
  00c40:    	sar    rax,0x3f
  00c44:    	add    rax,0x2
  00c48:    	and    rdi,0xfffffffffffffffc
  00c4c:    	or     rdi,rax
  00c4f:    	rol    rdi,0x3d
  00c53:    	movq   xmm6,rdi
  00c58:    	jmp    0xc6f
  00c5d:    	call   0xfffe2ad0
  00c62:    	test   rax,rax
  00c65:    	je     0x306f3
  00c6b:    	movq   xmm6,xmm0
  00c6f:    	ucomisd xmm6,xmm5
  00c73:    	jae    0x30803
:00069 %3 = %2.call z()                     [Vec]
  00c79:    	mov    rdi,QWORD PTR [r14-0x40]
  00c7d: 00 	test   rdi,0x7
  00c84:    	jne    0x30702
  00c8a:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c8e:    	jne    0x30702
  00c94: 26 	cmp    DWORD PTR [rip+0xfffffffffffe5162],0x26        # 0xfffe5dfd
  00c9b:    	jne    0x30702
  00ca1:    	mov    esi,DWORD PTR [rip+0x1509]        # 0x21b0
  00ca7:    	cmp    esi,0xffffffff
  00caa:    	je     0x30711
  00cb0:    	cmp    WORD PTR [rdi+0x2],0x3
  00cb5:    	jne    0xcce
  00cbb:    	cmp    esi,0x6
  00cbe:    	jge    0xcce
  00cc4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cc9:    	jmp    0xd10
  00cce:    	sub    rsp,0x20
  00cd2:    	movq   QWORD PTR [rsp],xmm2
  00cd7:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cdd:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ce3:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce9: 4d 	movabs rax,0x564da0797d70
  00cf3:    	call   rax
  00cf5:    	movq   xmm2,QWORD PTR [rsp]
  00cfa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d00:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d06:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d0c:    	add    rsp,0x20
  00d10:    	mov    QWORD PTR [r14-0x48],rax
:00070 
:00072 %4 = literal[-0.6]
  00d14: 00 	movq   xmm5,QWORD PTR [rip+0x1498]        # 0x21b4
  00d1c: 99 	movabs rax,0xff1999999999999e
  00d26:    	mov    QWORD PTR [r14-0x50],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00d2a:    	mov    rdi,QWORD PTR [r14-0x48]
  00d2e: 00 	test   rdi,0x1
  00d35:    	jne    0x30770
  00d3b: 00 	test   rdi,0x2
  00d42:    	je     0xd7e
  00d48:    	xorps  xmm6,xmm6
  00d4b: 00 	movabs rax,0x8000000000000002
  00d55:    	cmp    rdi,rax
  00d58:    	je     0xd90
  00d5e:    	mov    rax,rdi
  00d61:    	sar    rax,0x3f
  00d65:    	add    rax,0x2
  00d69:    	and    rdi,0xfffffffffffffffc
  00d6d:    	or     rdi,rax
  00d70:    	rol    rdi,0x3d
  00d74:    	movq   xmm6,rdi
  00d79:    	jmp    0xd90
  00d7e:    	call   0xfffe2ad0
  00d83:    	test   rax,rax
  00d86:    	je     0x30770
  00d8c:    	movq   xmm6,xmm0
  00d90:    	ucomisd xmm6,xmm5
  00d94:    	jbe    0x3081c
:00075 %3 = 1: i32
  00d9a: 00 	mov    QWORD PTR [r14-0x48],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00da2:    	mov    rdi,QWORD PTR [r14-0x38]
  00da6:    	mov    rsi,QWORD PTR [r14-0x48]
  00daa: 00 	test   rdi,0x7
  00db1:    	jne    0x3077f
  00db7:    	cmp    DWORD PTR [rdi+0x4],0xb
  00dbb:    	jne    0x3077f
  00dc1: 00 	test   rsi,0x1
  00dc8:    	je     0x3077f
  00dce:    	sar    rsi,1
  00dd1:    	sub    rsp,0x20
  00dd5:    	movq   QWORD PTR [rsp],xmm2
  00dda:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dec: 4d 	movabs rax,0x564da0819c40
  00df6:    	call   rax
  00df8:    	movq   xmm2,QWORD PTR [rsp]
  00dfd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e0f:    	add    rsp,0x20
  00e13: 4d 	movabs r13,0x564da0eaaea0
  00e1d:    	test   rax,rax
  00e20:    	je     0xfffe2a77
  00e26:    	mov    QWORD PTR [r14-0x48],rax
:00077 %4 = literal[1.0]
  00e2a: 00 	movq   xmm5,QWORD PTR [rip+0x1392]        # 0x21c4
  00e32: 00 	movabs rax,0xff80000000000002
  00e3c:    	mov    QWORD PTR [r14-0x50],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00e40:    	mov    rdi,QWORD PTR [r14-0x48]
  00e44: 00 	test   rdi,0x7
  00e4b:    	jne    0x3078e
  00e51:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e55:    	jne    0x3078e
  00e5b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4f9b],0x26        # 0xfffe5dfd
  00e62:    	jne    0x3078e
  00e68:    	mov    esi,DWORD PTR [rip+0x1362]        # 0x21d0
  00e6e:    	cmp    esi,0xffffffff
  00e71:    	je     0x3079d
  00e77:    	cmp    WORD PTR [rdi+0x2],0x3
  00e7c:    	jne    0xe99
  00e82:    	cmp    esi,0x6
  00e85:    	jge    0xe99
  00e8b:    	mov    rax,QWORD PTR [r14-0x50]
  00e8f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e94:    	jmp    0xef2
  00e99:    	sub    rsp,0x20
  00e9d:    	movq   QWORD PTR [rsp],xmm2
  00ea2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00eae:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eb4:    	mov    rdx,QWORD PTR [r14-0x50]
  00eb8: 4d 	movabs rax,0x564da0797ff0
  00ec2:    	call   rax
  00ec4:    	movq   xmm2,QWORD PTR [rsp]
  00ec9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ecf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ed5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00edb:    	add    rsp,0x20
  00edf: 4d 	movabs r13,0x564da0eaaed0
  00ee9:    	test   rax,rax
  00eec:    	je     0xfffe2a77
:00079 
:00081 br =>:00088
  00ef2:    	jmp    0x309bc
:00082 %3 = 1: i32
  00ef7: 00 	mov    QWORD PTR [r14-0x48],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00eff:    	sub    rsp,0x20
  00f03:    	movq   QWORD PTR [rsp],xmm2
  00f08:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f0e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f14:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f1a:    	mov    rdi,rbx
  00f1d:    	mov    rsi,r12
  00f20:    	mov    rdx,QWORD PTR [r14-0x38]
  00f24:    	mov    rcx,QWORD PTR [r14-0x48]
  00f28: 4d 	movabs r8,0x564da0eaaf08
  00f32: 4d 	movabs rax,0x564da0819b10
  00f3c:    	call   rax
  00f3e:    	movq   xmm2,QWORD PTR [rsp]
  00f43:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f49:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f4f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f55:    	add    rsp,0x20
  00f59: 4d 	movabs r13,0x564da0eaaf10
  00f63:    	test   rax,rax
  00f66:    	je     0xfffe2a77
  00f6c:    	mov    QWORD PTR [r14-0x48],rax
:00084 %4 = literal[1.0]
  00f70: 00 	movq   xmm5,QWORD PTR [rip+0x125c]        # 0x21d4
  00f78: 00 	movabs rax,0xff80000000000002
  00f82:    	mov    QWORD PTR [r14-0x50],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f86: 00 	cmp    DWORD PTR [rip+0x124f],0x0        # 0x21dc
  00f8d:    	jl     0x30835
  00f93:    	je     0x30844
  00f99: 01 	sub    DWORD PTR [rip+0x123c],0x1        # 0x21dc
  00fa0:    	xor    rdi,rdi
  00fa3:    	jmp    0x30835
  00fa8:    	sub    rsp,0x20
  00fac:    	movq   QWORD PTR [rsp],xmm2
  00fb1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fb7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fbd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fc3:    	mov    rdi,QWORD PTR [r14-0x48]
  00fc7: 4d 	movabs rax,0x564da0826bb0
  00fd1:    	call   rax
  00fd3:    	mov    r15d,eax
  00fd6: 4d 	movabs r13,0x564da0eaaf30
  00fe0:    	cmp    QWORD PTR [r13+0x8],0x0
  00fe5:    	je     0x3085f
  00feb:    	cmp    r15d,DWORD PTR [r13-0x8]
  00fef:    	jne    0x3085f
  00ff5:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4e02]        # 0xfffe5dfd
  00ffb:    	cmp    DWORD PTR [r13-0x4],eax
  00fff:    	jne    0x3085f
  01005: 00 	mov    QWORD PTR [rsp-0x28],0x0
  0100e:    	mov    rax,QWORD PTR [r14-0x48]
  01012:    	mov    QWORD PTR [rsp-0x40],rax
  01017: 00 	mov    rdi,0x1
  0101e:    	mov    rax,QWORD PTR [r14-0x50]
  01022:    	mov    QWORD PTR [rsp-0x48],rax
  01027: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01030:    	mov    rax,QWORD PTR [r13+0x10]
  01034:    	mov    QWORD PTR [rsp-0x30],rax
  01039:    	mov    rax,QWORD PTR [r13+0x8]
  0103d:    	mov    r13,QWORD PTR [r13+0x18]
  01041:    	mov    rsi,QWORD PTR [rbx]
  01044:    	mov    QWORD PTR [rsp-0x18],rsi
  01049:    	lea    rsi,[rsp-0x18]
  0104e:    	mov    QWORD PTR [rbx],rsi
  01051:    	lea    r14,[rsp-0x10]
  01056:    	mov    QWORD PTR [rsp-0x20],r14
  0105b:    	call   rax
  0105d:    	lea    r14,[rbp-0x8]
  01061:    	mov    QWORD PTR [rbx],r14
  01064:    	mov    r14,QWORD PTR [rbp-0x10]
  01068:    	movq   xmm2,QWORD PTR [rsp]
  0106d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01073:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01079:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0107f:    	add    rsp,0x20
  01083:    	test   rax,rax
  01086:    	je     0x308a9
:00086 
:00088 %3 = 0: i32
  0108c: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  01094: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  0109c:    	mov    rdi,QWORD PTR [r14-0x38]
  010a0:    	mov    rsi,QWORD PTR [r14-0x58]
  010a4: 00 	test   rdi,0x7
  010ab:    	jne    0x308b8
  010b1:    	cmp    DWORD PTR [rdi+0x4],0xb
  010b5:    	jne    0x308b8
  010bb: 00 	test   rsi,0x1
  010c2:    	je     0x308b8
  010c8:    	sar    rsi,1
  010cb:    	sub    rsp,0x20
  010cf:    	movq   QWORD PTR [rsp],xmm2
  010d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  010da:    	movq   QWORD PTR [rsp+0x10],xmm4
  010e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  010e6: 4d 	movabs rax,0x564da0819c40
  010f0:    	call   rax
  010f2:    	movq   xmm2,QWORD PTR [rsp]
  010f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01103:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01109:    	add    rsp,0x20
  0110d: 4d 	movabs r13,0x564da0eaaf80
  01117:    	test   rax,rax
  0111a:    	je     0xfffe2a77
  01120:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  01124: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0112c:    	mov    rdi,QWORD PTR [r14-0x38]
  01130:    	mov    rsi,QWORD PTR [r14-0x60]
  01134: 00 	test   rdi,0x7
  0113b:    	jne    0x308c7
  01141:    	cmp    DWORD PTR [rdi+0x4],0xb
  01145:    	jne    0x308c7
  0114b: 00 	test   rsi,0x1
  01152:    	je     0x308c7
  01158:    	sar    rsi,1
  0115b:    	sub    rsp,0x20
  0115f:    	movq   QWORD PTR [rsp],xmm3
  01164:    	movq   QWORD PTR [rsp+0x8],xmm4
  0116a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01170: 4d 	movabs rax,0x564da0819c40
  0117a:    	call   rax
  0117c:    	movq   xmm3,QWORD PTR [rsp]
  01181:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01187:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0118d:    	add    rsp,0x20
  01191: 4d 	movabs r13,0x564da0eaafa0
  0119b:    	test   rax,rax
  0119e:    	je     0xfffe2a77
  011a4:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  011a8:    	mov    rdi,QWORD PTR [r14-0x58]
  011ac: 00 	test   rdi,0x7
  011b3:    	jne    0x308d6
  011b9:    	cmp    DWORD PTR [rdi+0x4],0x28
  011bd:    	jne    0x308d6
  011c3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4c33],0x26        # 0xfffe5dfd
  011ca:    	jne    0x308d6
  011d0:    	sub    rsp,0x10
  011d4:    	movq   QWORD PTR [rsp],xmm3
  011d9:    	movq   QWORD PTR [rsp+0x8],xmm4
  011df: 00 	mov    QWORD PTR [rsp-0x28],0x0
  011e8:    	mov    rax,QWORD PTR [r14-0x58]
  011ec:    	mov    QWORD PTR [rsp-0x40],rax
  011f1: 00 	mov    rdi,0x1
  011f8:    	mov    rax,QWORD PTR [r14-0x60]
  011fc:    	mov    QWORD PTR [rsp-0x48],rax
  01201: 00 	mov    QWORD PTR [rsp-0x38],0x0
  0120a: 09 	movabs rax,0x900000041
  01214:    	mov    QWORD PTR [rsp-0x30],rax
  01219: 4d 	movabs r13,0x564da0e89170
  01223:    	mov    rsi,QWORD PTR [rbx]
  01226:    	mov    QWORD PTR [rsp-0x18],rsi
  0122b:    	lea    rsi,[rsp-0x18]
  01230:    	mov    QWORD PTR [rbx],rsi
  01233:    	lea    r14,[rsp-0x10]
  01238:    	mov    QWORD PTR [rsp-0x20],r14
  0123d:    	call   0xfffef9fb
  01242:    	lea    r14,[rbp-0x8]
  01246:    	mov    QWORD PTR [rbx],r14
  01249:    	mov    r14,QWORD PTR [rbp-0x10]
  0124d:    	movq   xmm3,QWORD PTR [rsp]
  01252:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01258:    	add    rsp,0x10
  0125c: 4d 	movabs r13,0x564da0eaafc0
  01266:    	test   rax,rax
  01269:    	je     0xfffe2a77
  0126f:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01273:    	mov    rdi,QWORD PTR [r14-0x38]
  01277:    	mov    rsi,QWORD PTR [r14-0x48]
  0127b: 00 	test   rdi,0x7
  01282:    	jne    0x308e5
  01288:    	cmp    DWORD PTR [rdi+0x4],0xb
  0128c:    	jne    0x308e5
  01292: 00 	test   rsi,0x1
  01299:    	je     0x308e5
  0129f:    	sar    rsi,1
  012a2:    	sub    rsp,0x10
  012a6:    	movq   QWORD PTR [rsp],xmm3
  012ab:    	movq   QWORD PTR [rsp+0x8],xmm4
  012b1:    	mov    rdx,r12
  012b4:    	mov    rcx,QWORD PTR [r14-0x50]
  012b8: 4d 	movabs rax,0x564da0819dd0
  012c2:    	call   rax
  012c4:    	movq   xmm3,QWORD PTR [rsp]
  012c9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012cf:    	add    rsp,0x10
  012d3: 4d 	movabs r13,0x564da0eaafe0
  012dd:    	test   rax,rax
  012e0:    	je     0xfffe2a77
:00097 %3 = 0: i32
  012e6: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  012ee: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  012f6:    	mov    rdi,QWORD PTR [r14-0x38]
  012fa:    	mov    rsi,QWORD PTR [r14-0x58]
  012fe: 00 	test   rdi,0x7
  01305:    	jne    0x308f4
  0130b:    	cmp    DWORD PTR [rdi+0x4],0xb
  0130f:    	jne    0x308f4
  01315: 00 	test   rsi,0x1
  0131c:    	je     0x308f4
  01322:    	sar    rsi,1
  01325:    	sub    rsp,0x10
  01329:    	movq   QWORD PTR [rsp],xmm3
  0132e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01334: 4d 	movabs rax,0x564da0819c40
  0133e:    	call   rax
  01340:    	movq   xmm3,QWORD PTR [rsp]
  01345:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0134b:    	add    rsp,0x10
  0134f: 4d 	movabs r13,0x564da0eab010
  01359:    	test   rax,rax
  0135c:    	je     0xfffe2a77
  01362:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01366:    	mov    rdi,QWORD PTR [r14-0x58]
  0136a: 00 	test   rdi,0x7
  01371:    	jne    0x30903
  01377:    	cmp    DWORD PTR [rdi+0x4],0x28
  0137b:    	jne    0x30903
  01381: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4a75],0x26        # 0xfffe5dfd
  01388:    	jne    0x30903
  0138e:    	sub    rsp,0x10
  01392:    	movq   QWORD PTR [rsp],xmm3
  01397:    	movq   QWORD PTR [rsp+0x8],xmm4
  0139d: 00 	mov    QWORD PTR [rsp-0x28],0x0
  013a6:    	mov    rax,QWORD PTR [r14-0x58]
  013aa:    	mov    QWORD PTR [rsp-0x40],rax
  013af: 00 	mov    rdi,0x0
  013b6: 00 	mov    QWORD PTR [rsp-0x38],0x0
  013bf: 07 	movabs rax,0x1000700000044
  013c9:    	mov    QWORD PTR [rsp-0x30],rax
  013ce: 4d 	movabs r13,0x564da0e6bec0
  013d8:    	mov    rsi,QWORD PTR [rbx]
  013db:    	mov    QWORD PTR [rsp-0x18],rsi
  013e0:    	lea    rsi,[rsp-0x18]
  013e5:    	mov    QWORD PTR [rbx],rsi
  013e8:    	lea    r14,[rsp-0x10]
  013ed:    	mov    QWORD PTR [rsp-0x20],r14
  013f2:    	call   0xfffe66b0
  013f7:    	lea    r14,[rbp-0x8]
  013fb:    	mov    QWORD PTR [rbx],r14
  013fe:    	mov    r14,QWORD PTR [rbp-0x10]
  01402:    	movq   xmm3,QWORD PTR [rsp]
  01407:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0140d:    	add    rsp,0x10
  01411: 4d 	movabs r13,0x564da0eab030
  0141b:    	test   rax,rax
  0141e:    	je     0xfffe2a77
  01424:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01428:    	mov    rdi,QWORD PTR [r14-0x38]
  0142c:    	mov    rsi,QWORD PTR [r14-0x48]
  01430: 00 	test   rdi,0x7
  01437:    	jne    0x30912
  0143d:    	cmp    DWORD PTR [rdi+0x4],0xb
  01441:    	jne    0x30912
  01447: 00 	test   rsi,0x1
  0144e:    	je     0x30912
  01454:    	sar    rsi,1
  01457:    	sub    rsp,0x10
  0145b:    	movq   QWORD PTR [rsp],xmm3
  01460:    	movq   QWORD PTR [rsp+0x8],xmm4
  01466:    	mov    rdx,r12
  01469:    	mov    rcx,QWORD PTR [r14-0x50]
  0146d: 4d 	movabs rax,0x564da0819dd0
  01477:    	call   rax
  01479:    	movq   xmm3,QWORD PTR [rsp]
  0147e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01484:    	add    rsp,0x10
  01488: 4d 	movabs r13,0x564da0eab050
  01492:    	test   rax,rax
  01495:    	je     0xfffe2a77
:00104 %3 = 1: i32
  0149b: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  014a3: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  014ab:    	mov    rdi,QWORD PTR [r14-0x38]
  014af:    	mov    rsi,QWORD PTR [r14-0x58]
  014b3: 00 	test   rdi,0x7
  014ba:    	jne    0x30921
  014c0:    	cmp    DWORD PTR [rdi+0x4],0xb
  014c4:    	jne    0x30921
  014ca: 00 	test   rsi,0x1
  014d1:    	je     0x30921
  014d7:    	sar    rsi,1
  014da:    	sub    rsp,0x10
  014de:    	movq   QWORD PTR [rsp],xmm3
  014e3:    	movq   QWORD PTR [rsp+0x8],xmm4
  014e9: 4d 	movabs rax,0x564da0819c40
  014f3:    	call   rax
  014f5:    	movq   xmm3,QWORD PTR [rsp]
  014fa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01500:    	add    rsp,0x10
  01504: 4d 	movabs r13,0x564da0eab080
  0150e:    	test   rax,rax
  01511:    	je     0xfffe2a77
  01517:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  0151b: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01523:    	mov    rdi,QWORD PTR [r14-0x38]
  01527:    	mov    rsi,QWORD PTR [r14-0x60]
  0152b: 00 	test   rdi,0x7
  01532:    	jne    0x30930
  01538:    	cmp    DWORD PTR [rdi+0x4],0xb
  0153c:    	jne    0x30930
  01542: 00 	test   rsi,0x1
  01549:    	je     0x30930
  0154f:    	sar    rsi,1
  01552:    	sub    rsp,0x10
  01556:    	movq   QWORD PTR [rsp],xmm3
  0155b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01561: 4d 	movabs rax,0x564da0819c40
  0156b:    	call   rax
  0156d:    	movq   xmm3,QWORD PTR [rsp]
  01572:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01578:    	add    rsp,0x10
  0157c: 4d 	movabs r13,0x564da0eab0a0
  01586:    	test   rax,rax
  01589:    	je     0xfffe2a77
  0158f:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01593:    	mov    rdi,QWORD PTR [r14-0x58]
  01597: 00 	test   rdi,0x7
  0159e:    	jne    0x3093f
  015a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  015a8:    	jne    0x3093f
  015ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4848],0x26        # 0xfffe5dfd
  015b5:    	jne    0x3093f
  015bb:    	sub    rsp,0x10
  015bf:    	movq   QWORD PTR [rsp],xmm3
  015c4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ca: 00 	mov    QWORD PTR [rsp-0x28],0x0
  015d3:    	mov    rax,QWORD PTR [r14-0x58]
  015d7:    	mov    QWORD PTR [rsp-0x40],rax
  015dc: 00 	mov    rdi,0x1
  015e3:    	mov    rax,QWORD PTR [r14-0x60]
  015e7:    	mov    QWORD PTR [rsp-0x48],rax
  015ec: 00 	mov    QWORD PTR [rsp-0x38],0x0
  015f5: 09 	movabs rax,0x900000041
  015ff:    	mov    QWORD PTR [rsp-0x30],rax
  01604: 4d 	movabs r13,0x564da0e89170
  0160e:    	mov    rsi,QWORD PTR [rbx]
  01611:    	mov    QWORD PTR [rsp-0x18],rsi
  01616:    	lea    rsi,[rsp-0x18]
  0161b:    	mov    QWORD PTR [rbx],rsi
  0161e:    	lea    r14,[rsp-0x10]
  01623:    	mov    QWORD PTR [rsp-0x20],r14
  01628:    	call   0xfffef9fb
  0162d:    	lea    r14,[rbp-0x8]
  01631:    	mov    QWORD PTR [rbx],r14
  01634:    	mov    r14,QWORD PTR [rbp-0x10]
  01638:    	movq   xmm3,QWORD PTR [rsp]
  0163d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01643:    	add    rsp,0x10
  01647: 4d 	movabs r13,0x564da0eab0c0
  01651:    	test   rax,rax
  01654:    	je     0xfffe2a77
  0165a:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  0165e:    	mov    rdi,QWORD PTR [r14-0x38]
  01662:    	mov    rsi,QWORD PTR [r14-0x48]
  01666: 00 	test   rdi,0x7
  0166d:    	jne    0x3094e
  01673:    	cmp    DWORD PTR [rdi+0x4],0xb
  01677:    	jne    0x3094e
  0167d: 00 	test   rsi,0x1
  01684:    	je     0x3094e
  0168a:    	sar    rsi,1
  0168d:    	sub    rsp,0x10
  01691:    	movq   QWORD PTR [rsp],xmm3
  01696:    	movq   QWORD PTR [rsp+0x8],xmm4
  0169c:    	mov    rdx,r12
  0169f:    	mov    rcx,QWORD PTR [r14-0x50]
  016a3: 4d 	movabs rax,0x564da0819dd0
  016ad:    	call   rax
  016af:    	movq   xmm3,QWORD PTR [rsp]
  016b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016ba:    	add    rsp,0x10
  016be: 4d 	movabs r13,0x564da0eab0e0
  016c8:    	test   rax,rax
  016cb:    	je     0xfffe2a77
:00113 %3 = 1: i32
  016d1: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  016d9: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  016e1:    	mov    rdi,QWORD PTR [r14-0x38]
  016e5:    	mov    rsi,QWORD PTR [r14-0x58]
  016e9: 00 	test   rdi,0x7
  016f0:    	jne    0x3095d
  016f6:    	cmp    DWORD PTR [rdi+0x4],0xb
  016fa:    	jne    0x3095d
  01700: 00 	test   rsi,0x1
  01707:    	je     0x3095d
  0170d:    	sar    rsi,1
  01710:    	sub    rsp,0x10
  01714:    	movq   QWORD PTR [rsp],xmm3
  01719:    	movq   QWORD PTR [rsp+0x8],xmm4
  0171f: 4d 	movabs rax,0x564da0819c40
  01729:    	call   rax
  0172b:    	movq   xmm3,QWORD PTR [rsp]
  01730:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01736:    	add    rsp,0x10
  0173a: 4d 	movabs r13,0x564da0eab110
  01744:    	test   rax,rax
  01747:    	je     0xfffe2a77
  0174d:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01751:    	mov    rdi,QWORD PTR [r14-0x58]
  01755: 00 	test   rdi,0x7
  0175c:    	jne    0x3096c
  01762:    	cmp    DWORD PTR [rdi+0x4],0x28
  01766:    	jne    0x3096c
  0176c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe468a],0x26        # 0xfffe5dfd
  01773:    	jne    0x3096c
  01779:    	sub    rsp,0x10
  0177d:    	movq   QWORD PTR [rsp],xmm3
  01782:    	movq   QWORD PTR [rsp+0x8],xmm4
  01788: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01791:    	mov    rax,QWORD PTR [r14-0x58]
  01795:    	mov    QWORD PTR [rsp-0x40],rax
  0179a: 00 	mov    rdi,0x0
  017a1: 00 	mov    QWORD PTR [rsp-0x38],0x0
  017aa: 07 	movabs rax,0x1000700000044
  017b4:    	mov    QWORD PTR [rsp-0x30],rax
  017b9: 4d 	movabs r13,0x564da0e6bec0
  017c3:    	mov    rsi,QWORD PTR [rbx]
  017c6:    	mov    QWORD PTR [rsp-0x18],rsi
  017cb:    	lea    rsi,[rsp-0x18]
  017d0:    	mov    QWORD PTR [rbx],rsi
  017d3:    	lea    r14,[rsp-0x10]
  017d8:    	mov    QWORD PTR [rsp-0x20],r14
  017dd:    	call   0xfffe66b0
  017e2:    	lea    r14,[rbp-0x8]
  017e6:    	mov    QWORD PTR [rbx],r14
  017e9:    	mov    r14,QWORD PTR [rbp-0x10]
  017ed:    	movq   xmm3,QWORD PTR [rsp]
  017f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017f8:    	add    rsp,0x10
  017fc: 4d 	movabs r13,0x564da0eab130
  01806:    	test   rax,rax
  01809:    	je     0xfffe2a77
  0180f:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  01813:    	mov    rdi,QWORD PTR [r14-0x38]
  01817:    	mov    rsi,QWORD PTR [r14-0x48]
  0181b: 00 	test   rdi,0x7
  01822:    	jne    0x3097b
  01828:    	cmp    DWORD PTR [rdi+0x4],0xb
  0182c:    	jne    0x3097b
  01832: 00 	test   rsi,0x1
  01839:    	je     0x3097b
  0183f:    	sar    rsi,1
  01842:    	sub    rsp,0x10
  01846:    	movq   QWORD PTR [rsp],xmm3
  0184b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01851:    	mov    rdx,r12
  01854:    	mov    rcx,QWORD PTR [r14-0x50]
  01858: 4d 	movabs rax,0x564da0819dd0
  01862:    	call   rax
  01864:    	movq   xmm3,QWORD PTR [rsp]
  01869:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0186f:    	add    rsp,0x10
  01873: 4d 	movabs r13,0x564da0eab150
  0187d:    	test   rax,rax
  01880:    	je     0xfffe2a77
:00120 %3 = %4
  01886:    	mov    rax,QWORD PTR [r14-0x50]
  0188a:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  0188e:    	mov    rax,QWORD PTR [r14-0x48]
  01892:    	leave  
  01893:    	ret    
:00088 %3 = 0: i32
  01894: 00 	mov    QWORD PTR [r14-0x48],0x1
:00089 %5 = 1: i32
  0189c: 00 	mov    QWORD PTR [r14-0x58],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  018a4:    	mov    rdi,QWORD PTR [r14-0x38]
  018a8:    	mov    rsi,QWORD PTR [r14-0x58]
  018ac: 00 	test   rdi,0x7
  018b3:    	jne    0x309d5
  018b9:    	cmp    DWORD PTR [rdi+0x4],0xb
  018bd:    	jne    0x309d5
  018c3: 00 	test   rsi,0x1
  018ca:    	je     0x309d5
  018d0:    	sar    rsi,1
  018d3:    	sub    rsp,0x20
  018d7:    	movq   QWORD PTR [rsp],xmm2
  018dc:    	movq   QWORD PTR [rsp+0x8],xmm3
  018e2:    	movq   QWORD PTR [rsp+0x10],xmm4
  018e8:    	movq   QWORD PTR [rsp+0x18],xmm5
  018ee: 4d 	movabs rax,0x564da0819c40
  018f8:    	call   rax
  018fa:    	movq   xmm2,QWORD PTR [rsp]
  018ff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01905:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0190b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01911:    	add    rsp,0x20
  01915: 4d 	movabs r13,0x564da0eaaf80
  0191f:    	test   rax,rax
  01922:    	je     0xfffe2a77
  01928:    	mov    QWORD PTR [r14-0x58],rax
:00091 %6 = 2: i32
  0192c: 00 	mov    QWORD PTR [r14-0x60],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01934:    	mov    rdi,QWORD PTR [r14-0x38]
  01938:    	mov    rsi,QWORD PTR [r14-0x60]
  0193c: 00 	test   rdi,0x7
  01943:    	jne    0x309e4
  01949:    	cmp    DWORD PTR [rdi+0x4],0xb
  0194d:    	jne    0x309e4
  01953: 00 	test   rsi,0x1
  0195a:    	je     0x309e4
  01960:    	sar    rsi,1
  01963:    	sub    rsp,0x20
  01967:    	movq   QWORD PTR [rsp],xmm3
  0196c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01972:    	movq   QWORD PTR [rsp+0x10],xmm5
  01978: 4d 	movabs rax,0x564da0819c40
  01982:    	call   rax
  01984:    	movq   xmm3,QWORD PTR [rsp]
  01989:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0198f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01995:    	add    rsp,0x20
  01999: 4d 	movabs r13,0x564da0eaafa0
  019a3:    	test   rax,rax
  019a6:    	je     0xfffe2a77
  019ac:    	mov    QWORD PTR [r14-0x60],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  019b0:    	mov    rdi,QWORD PTR [r14-0x58]
  019b4: 00 	test   rdi,0x7
  019bb:    	jne    0x309f3
  019c1:    	cmp    DWORD PTR [rdi+0x4],0x28
  019c5:    	jne    0x309f3
  019cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe442b],0x26        # 0xfffe5dfd
  019d2:    	jne    0x309f3
  019d8:    	sub    rsp,0x10
  019dc:    	movq   QWORD PTR [rsp],xmm3
  019e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  019e7: 00 	mov    QWORD PTR [rsp-0x28],0x0
  019f0:    	mov    rax,QWORD PTR [r14-0x58]
  019f4:    	mov    QWORD PTR [rsp-0x40],rax
  019f9: 00 	mov    rdi,0x1
  01a00:    	mov    rax,QWORD PTR [r14-0x60]
  01a04:    	mov    QWORD PTR [rsp-0x48],rax
  01a09: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01a12: 09 	movabs rax,0x900000041
  01a1c:    	mov    QWORD PTR [rsp-0x30],rax
  01a21: 4d 	movabs r13,0x564da0e89170
  01a2b:    	mov    rsi,QWORD PTR [rbx]
  01a2e:    	mov    QWORD PTR [rsp-0x18],rsi
  01a33:    	lea    rsi,[rsp-0x18]
  01a38:    	mov    QWORD PTR [rbx],rsi
  01a3b:    	lea    r14,[rsp-0x10]
  01a40:    	mov    QWORD PTR [rsp-0x20],r14
  01a45:    	call   0xfffef9fb
  01a4a:    	lea    r14,[rbp-0x8]
  01a4e:    	mov    QWORD PTR [rbx],r14
  01a51:    	mov    r14,QWORD PTR [rbp-0x10]
  01a55:    	movq   xmm3,QWORD PTR [rsp]
  01a5a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a60:    	add    rsp,0x10
  01a64: 4d 	movabs r13,0x564da0eaafc0
  01a6e:    	test   rax,rax
  01a71:    	je     0xfffe2a77
  01a77:    	mov    QWORD PTR [r14-0x50],rax
:00094 
:00096 %1:.[%3:] = %4
  01a7b:    	mov    rdi,QWORD PTR [r14-0x38]
  01a7f:    	mov    rsi,QWORD PTR [r14-0x48]
  01a83: 00 	test   rdi,0x7
  01a8a:    	jne    0x30a02
  01a90:    	cmp    DWORD PTR [rdi+0x4],0xb
  01a94:    	jne    0x30a02
  01a9a: 00 	test   rsi,0x1
  01aa1:    	je     0x30a02
  01aa7:    	sar    rsi,1
  01aaa:    	sub    rsp,0x10
  01aae:    	movq   QWORD PTR [rsp],xmm3
  01ab3:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ab9:    	mov    rdx,r12
  01abc:    	mov    rcx,QWORD PTR [r14-0x50]
  01ac0: 4d 	movabs rax,0x564da0819dd0
  01aca:    	call   rax
  01acc:    	movq   xmm3,QWORD PTR [rsp]
  01ad1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ad7:    	add    rsp,0x10
  01adb: 4d 	movabs r13,0x564da0eaafe0
  01ae5:    	test   rax,rax
  01ae8:    	je     0xfffe2a77
:00097 %3 = 0: i32
  01aee: 00 	mov    QWORD PTR [r14-0x48],0x1
:00098 %5 = 0: i32
  01af6: 00 	mov    QWORD PTR [r14-0x58],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01afe:    	mov    rdi,QWORD PTR [r14-0x38]
  01b02:    	mov    rsi,QWORD PTR [r14-0x58]
  01b06: 00 	test   rdi,0x7
  01b0d:    	jne    0x30a11
  01b13:    	cmp    DWORD PTR [rdi+0x4],0xb
  01b17:    	jne    0x30a11
  01b1d: 00 	test   rsi,0x1
  01b24:    	je     0x30a11
  01b2a:    	sar    rsi,1
  01b2d:    	sub    rsp,0x10
  01b31:    	movq   QWORD PTR [rsp],xmm3
  01b36:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b3c: 4d 	movabs rax,0x564da0819c40
  01b46:    	call   rax
  01b48:    	movq   xmm3,QWORD PTR [rsp]
  01b4d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b53:    	add    rsp,0x10
  01b57: 4d 	movabs r13,0x564da0eab010
  01b61:    	test   rax,rax
  01b64:    	je     0xfffe2a77
  01b6a:    	mov    QWORD PTR [r14-0x58],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01b6e:    	mov    rdi,QWORD PTR [r14-0x58]
  01b72: 00 	test   rdi,0x7
  01b79:    	jne    0x30a20
  01b7f:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b83:    	jne    0x30a20
  01b89: 26 	cmp    DWORD PTR [rip+0xfffffffffffe426d],0x26        # 0xfffe5dfd
  01b90:    	jne    0x30a20
  01b96:    	sub    rsp,0x10
  01b9a:    	movq   QWORD PTR [rsp],xmm3
  01b9f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ba5: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01bae:    	mov    rax,QWORD PTR [r14-0x58]
  01bb2:    	mov    QWORD PTR [rsp-0x40],rax
  01bb7: 00 	mov    rdi,0x0
  01bbe: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01bc7: 07 	movabs rax,0x1000700000044
  01bd1:    	mov    QWORD PTR [rsp-0x30],rax
  01bd6: 4d 	movabs r13,0x564da0e6bec0
  01be0:    	mov    rsi,QWORD PTR [rbx]
  01be3:    	mov    QWORD PTR [rsp-0x18],rsi
  01be8:    	lea    rsi,[rsp-0x18]
  01bed:    	mov    QWORD PTR [rbx],rsi
  01bf0:    	lea    r14,[rsp-0x10]
  01bf5:    	mov    QWORD PTR [rsp-0x20],r14
  01bfa:    	call   0xfffe66b0
  01bff:    	lea    r14,[rbp-0x8]
  01c03:    	mov    QWORD PTR [rbx],r14
  01c06:    	mov    r14,QWORD PTR [rbp-0x10]
  01c0a:    	movq   xmm3,QWORD PTR [rsp]
  01c0f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c15:    	add    rsp,0x10
  01c19: 4d 	movabs r13,0x564da0eab030
  01c23:    	test   rax,rax
  01c26:    	je     0xfffe2a77
  01c2c:    	mov    QWORD PTR [r14-0x50],rax
:00101 
:00103 %1:.[%3:] = %4
  01c30:    	mov    rdi,QWORD PTR [r14-0x38]
  01c34:    	mov    rsi,QWORD PTR [r14-0x48]
  01c38: 00 	test   rdi,0x7
  01c3f:    	jne    0x30a2f
  01c45:    	cmp    DWORD PTR [rdi+0x4],0xb
  01c49:    	jne    0x30a2f
  01c4f: 00 	test   rsi,0x1
  01c56:    	je     0x30a2f
  01c5c:    	sar    rsi,1
  01c5f:    	sub    rsp,0x10
  01c63:    	movq   QWORD PTR [rsp],xmm3
  01c68:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c6e:    	mov    rdx,r12
  01c71:    	mov    rcx,QWORD PTR [r14-0x50]
  01c75: 4d 	movabs rax,0x564da0819dd0
  01c7f:    	call   rax
  01c81:    	movq   xmm3,QWORD PTR [rsp]
  01c86:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c8c:    	add    rsp,0x10
  01c90: 4d 	movabs r13,0x564da0eab050
  01c9a:    	test   rax,rax
  01c9d:    	je     0xfffe2a77
:00104 %3 = 1: i32
  01ca3: 00 	mov    QWORD PTR [r14-0x48],0x3
:00105 %5 = 2: i32
  01cab: 00 	mov    QWORD PTR [r14-0x58],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01cb3:    	mov    rdi,QWORD PTR [r14-0x38]
  01cb7:    	mov    rsi,QWORD PTR [r14-0x58]
  01cbb: 00 	test   rdi,0x7
  01cc2:    	jne    0x30a3e
  01cc8:    	cmp    DWORD PTR [rdi+0x4],0xb
  01ccc:    	jne    0x30a3e
  01cd2: 00 	test   rsi,0x1
  01cd9:    	je     0x30a3e
  01cdf:    	sar    rsi,1
  01ce2:    	sub    rsp,0x10
  01ce6:    	movq   QWORD PTR [rsp],xmm3
  01ceb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cf1: 4d 	movabs rax,0x564da0819c40
  01cfb:    	call   rax
  01cfd:    	movq   xmm3,QWORD PTR [rsp]
  01d02:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d08:    	add    rsp,0x10
  01d0c: 4d 	movabs r13,0x564da0eab080
  01d16:    	test   rax,rax
  01d19:    	je     0xfffe2a77
  01d1f:    	mov    QWORD PTR [r14-0x58],rax
:00107 %6 = 0: i32
  01d23: 00 	mov    QWORD PTR [r14-0x60],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01d2b:    	mov    rdi,QWORD PTR [r14-0x38]
  01d2f:    	mov    rsi,QWORD PTR [r14-0x60]
  01d33: 00 	test   rdi,0x7
  01d3a:    	jne    0x30a4d
  01d40:    	cmp    DWORD PTR [rdi+0x4],0xb
  01d44:    	jne    0x30a4d
  01d4a: 00 	test   rsi,0x1
  01d51:    	je     0x30a4d
  01d57:    	sar    rsi,1
  01d5a:    	sub    rsp,0x10
  01d5e:    	movq   QWORD PTR [rsp],xmm3
  01d63:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d69: 4d 	movabs rax,0x564da0819c40
  01d73:    	call   rax
  01d75:    	movq   xmm3,QWORD PTR [rsp]
  01d7a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d80:    	add    rsp,0x10
  01d84: 4d 	movabs r13,0x564da0eab0a0
  01d8e:    	test   rax,rax
  01d91:    	je     0xfffe2a77
  01d97:    	mov    QWORD PTR [r14-0x60],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01d9b:    	mov    rdi,QWORD PTR [r14-0x58]
  01d9f: 00 	test   rdi,0x7
  01da6:    	jne    0x30a5c
  01dac:    	cmp    DWORD PTR [rdi+0x4],0x28
  01db0:    	jne    0x30a5c
  01db6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4040],0x26        # 0xfffe5dfd
  01dbd:    	jne    0x30a5c
  01dc3:    	sub    rsp,0x10
  01dc7:    	movq   QWORD PTR [rsp],xmm3
  01dcc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01dd2: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01ddb:    	mov    rax,QWORD PTR [r14-0x58]
  01ddf:    	mov    QWORD PTR [rsp-0x40],rax
  01de4: 00 	mov    rdi,0x1
  01deb:    	mov    rax,QWORD PTR [r14-0x60]
  01def:    	mov    QWORD PTR [rsp-0x48],rax
  01df4: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01dfd: 09 	movabs rax,0x900000041
  01e07:    	mov    QWORD PTR [rsp-0x30],rax
  01e0c: 4d 	movabs r13,0x564da0e89170
  01e16:    	mov    rsi,QWORD PTR [rbx]
  01e19:    	mov    QWORD PTR [rsp-0x18],rsi
  01e1e:    	lea    rsi,[rsp-0x18]
  01e23:    	mov    QWORD PTR [rbx],rsi
  01e26:    	lea    r14,[rsp-0x10]
  01e2b:    	mov    QWORD PTR [rsp-0x20],r14
  01e30:    	call   0xfffef9fb
  01e35:    	lea    r14,[rbp-0x8]
  01e39:    	mov    QWORD PTR [rbx],r14
  01e3c:    	mov    r14,QWORD PTR [rbp-0x10]
  01e40:    	movq   xmm3,QWORD PTR [rsp]
  01e45:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e4b:    	add    rsp,0x10
  01e4f: 4d 	movabs r13,0x564da0eab0c0
  01e59:    	test   rax,rax
  01e5c:    	je     0xfffe2a77
  01e62:    	mov    QWORD PTR [r14-0x50],rax
:00110 
:00112 %1:.[%3:] = %4
  01e66:    	mov    rdi,QWORD PTR [r14-0x38]
  01e6a:    	mov    rsi,QWORD PTR [r14-0x48]
  01e6e: 00 	test   rdi,0x7
  01e75:    	jne    0x30a6b
  01e7b:    	cmp    DWORD PTR [rdi+0x4],0xb
  01e7f:    	jne    0x30a6b
  01e85: 00 	test   rsi,0x1
  01e8c:    	je     0x30a6b
  01e92:    	sar    rsi,1
  01e95:    	sub    rsp,0x10
  01e99:    	movq   QWORD PTR [rsp],xmm3
  01e9e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ea4:    	mov    rdx,r12
  01ea7:    	mov    rcx,QWORD PTR [r14-0x50]
  01eab: 4d 	movabs rax,0x564da0819dd0
  01eb5:    	call   rax
  01eb7:    	movq   xmm3,QWORD PTR [rsp]
  01ebc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ec2:    	add    rsp,0x10
  01ec6: 4d 	movabs r13,0x564da0eab0e0
  01ed0:    	test   rax,rax
  01ed3:    	je     0xfffe2a77
:00113 %3 = 1: i32
  01ed9: 00 	mov    QWORD PTR [r14-0x48],0x3
:00114 %5 = 1: i32
  01ee1: 00 	mov    QWORD PTR [r14-0x58],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01ee9:    	mov    rdi,QWORD PTR [r14-0x38]
  01eed:    	mov    rsi,QWORD PTR [r14-0x58]
  01ef1: 00 	test   rdi,0x7
  01ef8:    	jne    0x30a7a
  01efe:    	cmp    DWORD PTR [rdi+0x4],0xb
  01f02:    	jne    0x30a7a
  01f08: 00 	test   rsi,0x1
  01f0f:    	je     0x30a7a
  01f15:    	sar    rsi,1
  01f18:    	sub    rsp,0x10
  01f1c:    	movq   QWORD PTR [rsp],xmm3
  01f21:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f27: 4d 	movabs rax,0x564da0819c40
  01f31:    	call   rax
  01f33:    	movq   xmm3,QWORD PTR [rsp]
  01f38:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f3e:    	add    rsp,0x10
  01f42: 4d 	movabs r13,0x564da0eab110
  01f4c:    	test   rax,rax
  01f4f:    	je     0xfffe2a77
  01f55:    	mov    QWORD PTR [r14-0x58],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01f59:    	mov    rdi,QWORD PTR [r14-0x58]
  01f5d: 00 	test   rdi,0x7
  01f64:    	jne    0x30a89
  01f6a:    	cmp    DWORD PTR [rdi+0x4],0x28
  01f6e:    	jne    0x30a89
  01f74: 26 	cmp    DWORD PTR [rip+0xfffffffffffe3e82],0x26        # 0xfffe5dfd
  01f7b:    	jne    0x30a89
  01f81:    	sub    rsp,0x10
  01f85:    	movq   QWORD PTR [rsp],xmm3
  01f8a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f90: 00 	mov    QWORD PTR [rsp-0x28],0x0
  01f99:    	mov    rax,QWORD PTR [r14-0x58]
  01f9d:    	mov    QWORD PTR [rsp-0x40],rax
  01fa2: 00 	mov    rdi,0x0
  01fa9: 00 	mov    QWORD PTR [rsp-0x38],0x0
  01fb2: 07 	movabs rax,0x1000700000044
  01fbc:    	mov    QWORD PTR [rsp-0x30],rax
  01fc1: 4d 	movabs r13,0x564da0e6bec0
  01fcb:    	mov    rsi,QWORD PTR [rbx]
  01fce:    	mov    QWORD PTR [rsp-0x18],rsi
  01fd3:    	lea    rsi,[rsp-0x18]
  01fd8:    	mov    QWORD PTR [rbx],rsi
  01fdb:    	lea    r14,[rsp-0x10]
  01fe0:    	mov    QWORD PTR [rsp-0x20],r14
  01fe5:    	call   0xfffe66b0
  01fea:    	lea    r14,[rbp-0x8]
  01fee:    	mov    QWORD PTR [rbx],r14
  01ff1:    	mov    r14,QWORD PTR [rbp-0x10]
  01ff5:    	movq   xmm3,QWORD PTR [rsp]
  01ffa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02000:    	add    rsp,0x10
  02004: 4d 	movabs r13,0x564da0eab130
  0200e:    	test   rax,rax
  02011:    	je     0xfffe2a77
  02017:    	mov    QWORD PTR [r14-0x50],rax
:00117 
:00119 %1:.[%3:] = %4
  0201b:    	mov    rdi,QWORD PTR [r14-0x38]
  0201f:    	mov    rsi,QWORD PTR [r14-0x48]
  02023: 00 	test   rdi,0x7
  0202a:    	jne    0x30a98
  02030:    	cmp    DWORD PTR [rdi+0x4],0xb
  02034:    	jne    0x30a98
  0203a: 00 	test   rsi,0x1
  02041:    	je     0x30a98
  02047:    	sar    rsi,1
  0204a:    	sub    rsp,0x10
  0204e:    	movq   QWORD PTR [rsp],xmm3
  02053:    	movq   QWORD PTR [rsp+0x8],xmm4
  02059:    	mov    rdx,r12
  0205c:    	mov    rcx,QWORD PTR [r14-0x50]
  02060: 4d 	movabs rax,0x564da0819dd0
  0206a:    	call   rax
  0206c:    	movq   xmm3,QWORD PTR [rsp]
  02071:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02077:    	add    rsp,0x10
  0207b: 4d 	movabs r13,0x564da0eab150
  02085:    	test   rax,rax
  02088:    	je     0xfffe2a77
:00120 %3 = %4
  0208e:    	mov    rax,QWORD PTR [r14-0x50]
  02092:    	mov    QWORD PTR [r14-0x48],rax
:00121 ret %3
  02096:    	mov    rax,QWORD PTR [r14-0x48]
  0209a:    	leave  
  0209b:    	ret    
