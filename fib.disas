   Compiling monoruby v0.1.0 (/home/monochrome/monoruby)
    Finished dev [optimized + debuginfo] target(s) in 9.45s
     Running `target/debug/monoruby benchmark/app_fib.rb`
==> start whole compile: fib FuncId(82) self_class:Object start:[00000] bytecode:0x5636d2eeea90
<== finished compile. elapsed:24.7µs
offset:Pos(18736) code: 644 bytes  data: 4 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x3b7c4
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x3b7d3
  00035: cmp    DWORD PTR [rdi+0x4],0x1
  00039: jne    0x3b7d3
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 _%2 = %1 < 3: i16                    [Integer][Integer]
  0003f: mov    rdi,QWORD PTR [r14-0x38]
  00043: mov    rsi,0x7
  0004a: test   rdi,0x1
  00051: je     0x3b7e2
  00057: cmp    rdi,rsi
  0005a: jge    0x6e
:00002 condnotbr _%2 =>:00005
:00003 %2 = 1: i32
  00060: mov    QWORD PTR [r14-0x40],0x3
:00004 ret %2
  00068: mov    rax,QWORD PTR [r14-0x40]
  0006c: leave  
  0006d: ret    
:00005 %2 = %1 - 1: i16                     [Integer][Integer]
  0006e: mov    rdi,QWORD PTR [r14-0x38]
  00072: test   rdi,0x1
  00079: je     0x3b7f1
  0007f: sub    rdi,0x2
  00083: jo     0x3b7f1
  00089: mov    QWORD PTR [r14-0x40],rdi
:00006 %2 = %0.call fib(%2; 1)              [Object]
  0008d: mov    rdi,QWORD PTR [r14-0x30]
  00091: cmp    DWORD PTR [rip+0xfffffffffffffd5b],0x1        # 0xfffffdf3
  00098: jne    0x3b800
  0009e: cmp    DWORD PTR [rip+0xfffffffffffffd52],0x0        # 0xfffffdf7
  000a5: je     0xbd
  000ab: mov    rdi,r12
  000ae: mov    rsi,QWORD PTR [rbx]
  000b1: movabs rax,0x5636d0c44f20
  000bb: call   rax
  000bd: mov    QWORD PTR [rsp-0x28],0x0
  000c6: mov    rax,QWORD PTR [r14-0x30]
  000ca: mov    QWORD PTR [rsp-0x40],rax
  000cf: mov    rdi,0x1
  000d6: mov    rax,QWORD PTR [r14-0x40]
  000da: mov    QWORD PTR [rsp-0x48],rax
  000df: mov    QWORD PTR [rsp-0x38],0x0
  000e8: movabs rax,0x1000400000052
  000f2: mov    QWORD PTR [rsp-0x30],rax
  000f7: movabs r13,0x5636d2eeea90
  00101: mov    rsi,QWORD PTR [rbx]
  00104: mov    QWORD PTR [rsp-0x18],rsi
  00109: lea    rsi,[rsp-0x18]
  0010e: mov    QWORD PTR [rbx],rsi
  00111: lea    r14,[rsp-0x10]
  00116: mov    QWORD PTR [rsp-0x20],r14
  0011b: call   0xffffffac
  00120: lea    r14,[rbp-0x8]
  00124: mov    QWORD PTR [rbx],r14
  00127: mov    r14,QWORD PTR [rbp-0x10]
  0012b: movabs r13,0x5636d2eeeb10
  00135: test   rax,rax
  00138: je     0xffffb6f4
  0013e: mov    QWORD PTR [r14-0x40],rax
:00007 
:00008 %3 = %1 - 2: i16                     [<INVALID>][<INVALID>]
  00142: cmp    DWORD PTR [rip+0x13b],0x0        # 0x284
  00149: jl     0x3b80f
  0014f: je     0x3b81e
  00155: sub    DWORD PTR [rip+0x128],0x1        # 0x284
  0015c: xor    rdi,rdi
  0015f: jmp    0x3b80f
  00164: mov    rdi,QWORD PTR [r14-0x38]
  00168: mov    rsi,0x5
  0016f: mov    rdx,rdi
  00172: mov    rcx,rsi
  00175: mov    rdi,rbx
  00178: mov    rsi,r12
  0017b: movabs rax,0x5636d0ca8410
  00185: call   rax
  00187: movabs r13,0x5636d2eeeb20
  00191: test   rax,rax
  00194: je     0xffffb6f4
  0019a: mov    QWORD PTR [r14-0x48],rax
:00009 %3 = %0.call fib(%3; 1)              [<INVALID>]
  0019e: mov    r15d,0x1
  001a4: movabs r13,0x5636d2eeeb30
  001ae: cmp    QWORD PTR [r13+0x8],0x0
  001b3: je     0x3b83a
  001b9: cmp    r15d,DWORD PTR [r13-0x8]
  001bd: jne    0x3b83a
  001c3: mov    eax,DWORD PTR [rip+0xfffffffffffffc2a]        # 0xfffffdf3
  001c9: cmp    DWORD PTR [r13-0x4],eax
  001cd: jne    0x3b83a
  001d3: mov    QWORD PTR [rsp-0x28],0x0
  001dc: mov    rax,QWORD PTR [r14-0x30]
  001e0: mov    QWORD PTR [rsp-0x40],rax
  001e5: mov    rdi,0x1
  001ec: mov    rax,QWORD PTR [r14-0x48]
  001f0: mov    QWORD PTR [rsp-0x48],rax
  001f5: mov    QWORD PTR [rsp-0x38],0x0
  001fe: mov    r13,QWORD PTR [r13+0x8]
  00202: mov    rax,QWORD PTR [r13+0x8]
  00206: mov    QWORD PTR [rsp-0x30],rax
  0020b: mov    rax,QWORD PTR [r13+0x0]
  0020f: mov    r13,QWORD PTR [r13+0x10]
  00213: mov    rsi,QWORD PTR [rbx]
  00216: mov    QWORD PTR [rsp-0x18],rsi
  0021b: lea    rsi,[rsp-0x18]
  00220: mov    QWORD PTR [rbx],rsi
  00223: lea    r14,[rsp-0x10]
  00228: mov    QWORD PTR [rsp-0x20],r14
  0022d: call   rax
  0022f: lea    r14,[rbp-0x8]
  00233: mov    QWORD PTR [rbx],r14
  00236: mov    r14,QWORD PTR [rbp-0x10]
  0023a: test   rax,rax
  0023d: je     0x3b87b
  00243: mov    QWORD PTR [r14-0x48],rax
:00010 
:00011 %2 = %2 + %3                         [<INVALID>][<INVALID>]
  00247: mov    rdi,QWORD PTR [r14-0x40]
  0024b: mov    rsi,QWORD PTR [r14-0x48]
  0024f: mov    rdx,rdi
  00252: mov    rcx,rsi
  00255: mov    rdi,rbx
  00258: mov    rsi,r12
  0025b: movabs rax,0x5636d0ca7680
  00265: call   rax
  00267: movabs r13,0x5636d2eeeb50
  00271: test   rax,rax
  00274: je     0xffffb6f4
  0027a: mov    QWORD PTR [r14-0x40],rax
:00012 ret %2
  0027e: mov    rax,QWORD PTR [r14-0x40]
  00282: leave  
  00283: ret    
==> start whole compile: fib FuncId(82) self_class:Object start:[00000] bytecode:0x5636d2eeea90
<== finished compile. elapsed:18.1µs
offset:Pos(19384) code: 591 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: cmp    edx,0x1
  0000e: jne    0x3b602
  00014: mov    QWORD PTR [r14-0x40],0x4
  0001c: mov    QWORD PTR [r14-0x48],0x4
  00024: mov    rdi,QWORD PTR [r14-0x30]
  00028: test   rdi,0x7
  0002f: jne    0x3b611
  00035: cmp    DWORD PTR [rdi+0x4],0x1
  00039: jne    0x3b611
:00000 init_method reg:4 arg:1 pos:1 req:1 block:0 stack_offset:5
:00001 _%2 = %1 < 3: i16                    [Integer][Integer]
  0003f: mov    rdi,QWORD PTR [r14-0x38]
  00043: mov    rsi,0x7
  0004a: test   rdi,0x1
  00051: je     0x3b620
  00057: cmp    rdi,rsi
  0005a: jge    0x6e
:00002 condnotbr _%2 =>:00005
:00003 %2 = 1: i32
  00060: mov    QWORD PTR [r14-0x40],0x3
:00004 ret %2
  00068: mov    rax,QWORD PTR [r14-0x40]
  0006c: leave  
  0006d: ret    
:00005 %2 = %1 - 1: i16                     [Integer][Integer]
  0006e: mov    rdi,QWORD PTR [r14-0x38]
  00072: test   rdi,0x1
  00079: je     0x3b62f
  0007f: sub    rdi,0x2
  00083: jo     0x3b62f
  00089: mov    QWORD PTR [r14-0x40],rdi
:00006 %2 = %0.call fib(%2; 1)              [Object]
  0008d: mov    rdi,QWORD PTR [r14-0x30]
  00091: cmp    DWORD PTR [rip+0xfffffffffffffad3],0x1        # 0xfffffb6b
  00098: jne    0x3b63e
  0009e: cmp    DWORD PTR [rip+0xfffffffffffffaca],0x0        # 0xfffffb6f
  000a5: je     0xbd
  000ab: mov    rdi,r12
  000ae: mov    rsi,QWORD PTR [rbx]
  000b1: movabs rax,0x5636d0c44f20
  000bb: call   rax
  000bd: mov    QWORD PTR [rsp-0x28],0x0
  000c6: mov    rax,QWORD PTR [r14-0x30]
  000ca: mov    QWORD PTR [rsp-0x40],rax
  000cf: mov    rdi,0x1
  000d6: mov    rax,QWORD PTR [r14-0x40]
  000da: mov    QWORD PTR [rsp-0x48],rax
  000df: mov    QWORD PTR [rsp-0x38],0x0
  000e8: movabs rax,0x1000400000052
  000f2: mov    QWORD PTR [rsp-0x30],rax
  000f7: movabs r13,0x5636d2eeea90
  00101: mov    rsi,QWORD PTR [rbx]
  00104: mov    QWORD PTR [rsp-0x18],rsi
  00109: lea    rsi,[rsp-0x18]
  0010e: mov    QWORD PTR [rbx],rsi
  00111: lea    r14,[rsp-0x10]
  00116: mov    QWORD PTR [rsp-0x20],r14
  0011b: call   0xfffffd24
  00120: lea    r14,[rbp-0x8]
  00124: mov    QWORD PTR [rbx],r14
  00127: mov    r14,QWORD PTR [rbp-0x10]
  0012b: movabs r13,0x5636d2eeeb10
  00135: test   rax,rax
  00138: je     0xffffb46c
  0013e: mov    QWORD PTR [r14-0x40],rax
:00007 
:00008 %3 = %1 - 2: i16                     [Integer][Integer]
  00142: mov    rdi,QWORD PTR [r14-0x38]
  00146: test   rdi,0x1
  0014d: je     0x3b64d
  00153: sub    rdi,0x4
  00157: jo     0x3b64d
  0015d: mov    QWORD PTR [r14-0x48],rdi
:00009 %3 = %0.call fib(%3; 1)              [Object]
  00161: mov    rdi,QWORD PTR [r14-0x30]
  00165: cmp    DWORD PTR [rip+0xfffffffffffff9ff],0x1        # 0xfffffb6b
  0016c: jne    0x3b65c
  00172: cmp    DWORD PTR [rip+0xfffffffffffff9f6],0x0        # 0xfffffb6f
  00179: je     0x191
  0017f: mov    rdi,r12
  00182: mov    rsi,QWORD PTR [rbx]
  00185: movabs rax,0x5636d0c44f20
  0018f: call   rax
  00191: mov    QWORD PTR [rsp-0x28],0x0
  0019a: mov    rax,QWORD PTR [r14-0x30]
  0019e: mov    QWORD PTR [rsp-0x40],rax
  001a3: mov    rdi,0x1
  001aa: mov    rax,QWORD PTR [r14-0x48]
  001ae: mov    QWORD PTR [rsp-0x48],rax
  001b3: mov    QWORD PTR [rsp-0x38],0x0
  001bc: movabs rax,0x1000400000052
  001c6: mov    QWORD PTR [rsp-0x30],rax
  001cb: movabs r13,0x5636d2eeea90
  001d5: mov    rsi,QWORD PTR [rbx]
  001d8: mov    QWORD PTR [rsp-0x18],rsi
  001dd: lea    rsi,[rsp-0x18]
  001e2: mov    QWORD PTR [rbx],rsi
  001e5: lea    r14,[rsp-0x10]
  001ea: mov    QWORD PTR [rsp-0x20],r14
  001ef: call   0xfffffd24
  001f4: lea    r14,[rbp-0x8]
  001f8: mov    QWORD PTR [rbx],r14
  001fb: mov    r14,QWORD PTR [rbp-0x10]
  001ff: movabs r13,0x5636d2eeeb40
  00209: test   rax,rax
  0020c: je     0xffffb46c
  00212: mov    QWORD PTR [r14-0x48],rax
:00010 
:00011 %2 = %2 + %3                         [Integer][Integer]
  00216: mov    rdi,QWORD PTR [r14-0x40]
  0021a: mov    rsi,QWORD PTR [r14-0x48]
  0021e: test   rdi,0x1
  00225: je     0x3b66b
  0022b: test   rsi,0x1
  00232: je     0x3b66b
  00238: sub    rdi,0x1
  0023c: add    rdi,rsi
  0023f: jo     0x3b66b
  00245: mov    QWORD PTR [r14-0x40],rdi
:00012 ret %2
  00249: mov    rax,QWORD PTR [r14-0x40]
  0024d: leave  
  0024e: ret    
